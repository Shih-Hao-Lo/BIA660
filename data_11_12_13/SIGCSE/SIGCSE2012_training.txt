Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Frederick P. Brooks, Jr.	The primary job of the teacher is to make learning happen; that is a design task. Most of us learned most of what we know by what we did, not by what we heard or read. A corollary is that the careful designing of exercises, assignments, projects, even quizzes, makes more difference than the construction of lectures. A second corollary is that project courses that go deeply into narrow aspects of a subject seem to stick longer and deeper than approaches aiming at comprehensive coverage. How to strike a balance? I've taught a first software engineering laboratory course 22 times, and an advanced computer architecture course about ten times. Here are some techniques that work for me.	The teacher's job is to design learning experiences; not primarily to impart information	NA	2018
Mehran Sahami	NA	Session details: Computer curricula 2013: update	NA	2018
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:David Reed	Beginning over 40 years ago with the publication of Curriculum 68, the major professional societies in computing--ACM and IEEE-Computer Society--have sponsored various efforts to establish international curricular guidelines for undergraduate programs in computing. As the field has grown and diversified, so too have the recommendations for curricula. There are now guidelines for Computer Engineering, Information Systems, Information Technology, and Software Engineering in addition to Computer Science. These volumes are updated regularly with the aim of keeping computing curricula modern and relevant. In the Fall of 2010, work on the next volume in the series, Computer Science 2013 (CS2013), began. Considerable work on the new volume has already been completed and a first draft of the CS2013 report (known as the Strawman report) will be complete by the beginning of 2012. This panel seeks to update and engage the SIGCSE community in providing feedback on the Strawman report, which will be available shortly prior to the SIGCSE conference.	Computer science curriculum 2013: reviewing the strawman report from the ACM/IEEE-CS task force	NA:NA:NA:NA	2018
Mark Hoffman	NA	Session details: Scrum across the CS/SE curricula	NA	2018
Charles Wallace:Sriram Mohan:Douglas Troy:Mark E. Hoffman	Scrum is one of the many agile approaches to software development that have been widely adopted over the past decade. Agile processes allow developers to embrace under-defined problems in complex environments where change in requirements is inevitable. The key agile features of Scrum are a flexible, adaptive schedule; democratic, collaborative teams; and frequent, iterative project and process reviews [2]. While students may engage with Scrum in the context of software development, the characteristics that suit many software problems to an agile approach also describe the student learning environment: complexity (new and unfamiliar concepts), under-defined problem space (students don't know what they don't know), short timeframe with frequent meetings (terms and class meetings), and inevitable change (apply new knowledge). This makes Scrum not only a software development strategy but a general learning strategy. Scrum facilitates frequent and iterative practice with timely feedback, development of mastery, and self-direction [1]. In this panel, the participants will describe how their students learn and practice Scrum in a software development context, how they use it to manage student projects outside the software development context, and how Scrum provides opportunities to integrate communication skills into the Computer Science (CS) and Software Engineering (SE) curricula. As participants in the NSF-funded CPATH II project (NSF Grants 0939122 and 0939081) "Incorporating Communication Skills Throughout Computer Science and Software Engineering Curricula," each panelist has developed Scrum-based assignments that exercise the skills of reading, writing, speaking, and teaming. The participants will discuss the design of these assignments and their experiences with them to date.	Scrum across the CS/SE curricula: a retrospective	NA:NA:NA:NA	2018
Ursula Wolz	NA	Session details: Special session	NA	2018
Ursula Wolz:Lillian (Botos) Cassel	NA	The role of interdisciplinary computing in higher education, research and industry	NA:NA	2018
Ivona Bezakova	NA	Session details: Paper: data structures and algorithms	NA	2018
Ali Erkan:Tom Pfaff:Jason Hamilton:Michael Rogers	During the past two years, we have been creating curricular material centered around complex problems rooted in sustainability. Since multi-disciplinary learning is one of our primary goals, these projects are most meaningful when they connect students from different disciplines working toward a common understanding. However, strong disciplinary components present in their solutions also allow us to frame these projects from strictly disciplinary perspectives. In this paper, we show how they can be used for increased engagement in the context of data structures and algorithms. We review two new ones to explore (i) the structural characteristics of the western part of the U.S. power-grid, and (ii) the effects of over-harvesting on fish stocks.	Sustainability themed problem solving in data structures and algorithms	NA:NA:NA:NA	2018
Michal Forišek:Monika Steinová	In this paper we explore the topic of using metaphors and analogies in teaching algorithms. We argue their importance in the teaching process. We present a selection of metaphors we successfully used when teaching algorithms to secondary school students. We also discuss the suitability of several commonly used metaphors, and in several cases we show significant weaknesses of these metaphors.	Metaphors and analogies for teaching algorithms	NA:NA	2018
Holger Danielsiek:Wolfgang Paul:Jan Vahrenhold	We describe the first results of our work towards a concept inventory for Algorithms and Data Structures. Based on expert interviews and the analysis of 400 exams we were able to identify several core topics which are prone to error. In a pilot study, we verified misconceptions known from the literature and identified previously unknown misconceptions related to Algorithms and Data Structures. In addition to this, we report on methodological issues and point out the importance of a two-pronged approach to data collection.	Detecting and understanding students' misconceptions related to algorithms and data structures	NA:NA:NA	2018
Sherri Goings	NA	Session details: Paper: robots	NA	2018
David Cowden:April O'Neill:Erik Opavsky:Dilan Ustek:Henry M. Walker	Using robots in introductory computer science classes has recently become a popular method of increasing student interest in computer science. This paper describes the development of a new curriculum for a CS 2 course, Imperative Problem Solving and Data Structures, based upon Scribbler 2 robots with standard C. The curriculum contains eight distinct modules with a primary topic theme, readings, labs, and project at the end. Each module resulted from collaboration among former CS 2 students and a faculty member, utilizing an iterative process with revisions. Each lab includes a survey to obtain student feedback that will allow the course to evolve and better fit the needs of future CS 2 students. All materials discussed here are available online for use by others.	A C-based introductory course using robots	NA:NA:NA:NA:NA	2018
Grant Braught	dLife is a free and open-source Java library that supports undergraduate education and research involving robotics, artificial intelligence, machine learning and computer vision. The design of dLife addresses many concerns raised by experience reports in the CS education literature including a shortened code/test/debug cycle, ready access to robot sensor information and close integration with a robotic simulation system. Full support is currently provided for the following robots: Finch, Hemisson (or Khepera Jr.), Sony Aibo, Khepera 2, Khepera 3, and Pioneer 3, with more in development. Easily extensible packages support classroom and research applications using neural networks, genetic algorithms, reinforcement learning and computer vision.	dLife: a Java library for multiplatform robotics, AI and vision in undergraduate CS and research	NA	2018
David S. Touretzky	Robotics is widely recognized as an interdisciplinary mixture of engineering and computer science, but the latter component is not well represented at many undergraduate institutions. The sophisticated technologies that underlie perception, planning, and control mechanisms in modern robots need to be made accessible to more computer science undergraduates. Following the curriculum design principles of Wiggins and McTighe (Understanding by Design, 2nd Ed.), I present seven big ideas in robotics that can fit together in a one semester undergraduate course. Each is introduced with an essential question, such as "How do robots see the world?" The answers expose students to deep concepts in computer science in a context where they can be immediately demonstrated. Hands-on labs using the Tekkotsu open source software framework and robots costing under $1,000 facilitate mastery of these important ideas. Courses based on parts of an early version of this curriculum are being offered at Carnegie Mellon and several other universities.	Seven big ideas in robotics, and how to teach them	NA	2018
Sheila Castaneda	NA	Session details: Paper: K-6 collaborations	NA	2018
Arno Pasternak:Jan Vahrenhold	We report on the design and evaluation of the first year of a Computer Science course in lower secondary education that implements the concept of braided teaching. Besides being a proof-of-concept, our study demonstrates that students an indeed be taught Computer Science (as opposed to Information and Communication Technology) as early as in sixth grade while at the same time not falling behind with respect to Information Technology Literacy. We present quantitative and qualitative results and argue that Computer Science can be taught just like any other science subject worth full curriculum credit.	Design and evaluation of a braided teaching course in sixth grade computer science education	NA:NA	2018
Chris Gregg:Luther Tychonievich:James Cohoon:Kim Hazelwood	Traditional introductory programming classes teach sequential programming using a single-threaded programming model. It is typical to wait until a student has developed proficiency in sequential programming before teaching parallel programming. As computer hardware becomes increasingly parallel, there is a greater need for software engineers who are proficient in designing parallel programs, and not just by "parallelizing" sequential designs. Teaching parallelism first is an important step towards educating tomorrow's programmers. We present an overview of a five-day introductory parallel programming course. We taught the course to nine and ten year-olds with no prior programming experience. Our course utilized a fundamentally parallel language we designed for the course, one with a near-natural language syntax that exposed the parallel processors throughout the code. This language, coupled with an interactive online programming environment, allowed us to teach a wide range of parallel programming concepts in a very limited timeframe. We also present examples of student-written code that demonstrates their understanding of some basic parallel programming concepts, and we describe the overall course goal and specific lesson plans geared towards teaching students how to "think parallel."	EcoSim: a language and experience teaching parallel programming in elementary school	NA:NA:NA:NA	2018
Colleen M. Lewis:Niral Shah	We found that fifth grade students' scores on Scratch programming quizzes in a summer enrichment course were highly correlated with their scores on a standardized test for mathematics. We identify ways in which the programming curriculum builds upon target skills from the Mathematics Content Standards for California Public Schools. We hypothesize that the programming curriculum leveraged and enriched students' mathematics content knowledge.	Building upon and enriching grade four mathematics standards with programming curriculum	NA:NA	2018
Sage Miller	NA	Session details: Paper: tools	NA	2018
Douglas Blank:Jennifer S. Kay:James B. Marshall:Keith O'Hara:Mark Russo	The Calico project is a multi-language, multi-context programming framework and learning environment for computing education. This environment is designed to support several interoperable programming languages (including Python, Scheme, and a visual programming language), a variety of pedagogical contexts (including scientific visualization, robotics, and art), and an assortment of physical devices (including different educational robotics platforms and a variety of physical sensors). In addition, the environment is designed to support collaboration and modern, interactive learning. In this paper we describe the Calico project, its design and goals, our prototype system, and its current use.	Calico: a multi-programming-language, multi-context framework designed for computer science education	NA:NA:NA:NA:NA	2018
Prasun Dewan	A language-based direct-manipulation user-interface generator automatically creates a visualization of an object directly from its class, allows users to edit the visualization, and invokes methods in the object in response to these edits. Such a generator can change, and we argue, improve the lectures and assignments on programming conventions, methods, state, constructors, preconditions, MVC, polymorphism, graphics, structured objects, loops, concurrency, and annotations. We have built such a generator, which has several novel features for teaching such as interactive instantiation of a class, interactive invocation of methods and constructors that take arbitrary arguments, visualization of objects representing records, sequences, table and graphics, use of preconditions to disable/enable user-interface elements, and automatic generation of model threads. We have been working on and using such a generator for teaching CS 1 and CS 2 for about a decade.	How a language-based GUI generator can influence the teaching of object-oriented programming	NA	2018
Jason Vandeventer:Benjamin Barbour	Computer science instructors often rely on the final version of a program for assessment and feedback. This ignores the process the student used to arrive at the final program. When the instructor has the ability to observe real-time development progress of each student, they are better equipped to provide appropriate and timely feedback. CodeWave, a software program developed at the University of North Carolina Wilmington looks to alleviate these issues. CodeWave is a real-time, collaborative Integrated Development Environment with traditional features such as syntax highlighting and non-traditional features such as integrated messaging and logged playback. CodeWave enhances productivity by integrating many common tools students and instructors use during the programming process. Communication is effortless and allows a user to specify a point in the code as a link in the message body. Log playback provides the ability to review the entire development process. In this paper, we describe the software program we developed to enhance learning in computer science programming courses.	CodeWave: a real-time, collaborative IDE for enhanced learning in computer science	NA:NA	2018
Richard Brown	NA	Session details: A stratified view of programming language parallelism for undergraduate CS education	NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop	It is no longer news that undergraduates in computer science need to learn more about parallelism. The range of options for parallel programming is truly staggering, involving hundreds of languages. How can a CS instructor make informed choices among all the options? This panel provides a guided introduction to parallelism in programming languages and their potential for undergraduate CS education, organized into four progressive categories: low-level libraries and; higher-level libraries and features; programming languages that incorporate parallelism; and frameworks for productive parallel programming. The four panelists will present representative examples in their categories, then present viewpoints on how those categories relate to coursework, curriculum, and trends in parallelism.	A stratified view of programming language parallelism for undergraduate CS education	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Special session	NA	2018
Daniel D. Garcia:David Ginat	One of the most important tasks an introductory computing student must do is to form a mental model of how the computer works. This could be as specific as understanding the read-evaluate-print loop of an interpreter, or as general as believing that the computer works predictably and deterministically. However, some have fuzzy mental models, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that an audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of magic tricks whose answer is grounded in computer science: modulo arithmetic, permutations, algorithms, binary encoding, probability, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	DeMystifying computing with magic	NA:NA	2018
Jeffrey Stone	NA	Session details: Community-based projects for computing majors: opportunities, challenges and best practices	NA	2018
Jeffrey A. Stone:Bonnie MacKellar:Elinor M. Madigan:Janice L. Pearce	The use of community-based projects has been recognized as having pedagogical and experiential value for computing majors (e.g. [3], [4], [5], [6]). Community-based projects can be valuable learning experiences for computing majors as well as for faculty and community partners. However, these types of projects do present challenges for faculty and should be aligned with desired course outcomes. This panel will discuss the use of community-based projects from multiple perspectives. The expectation is that the panel will serve as a forum for the participants to share the opportunities, challenges, pedagogical motivations, and best practices obtained from prior experience. Exemplar projects will be highlighted. The panel also hopes the session motivates the audience to share their own experiences and sparks the interest of those faculty members who may have no prior experience with community-based projects.	Community-based projects for computing majors: opportunities, challenges and best practices	NA:NA:NA:NA	2018
Adrienne Decker	NA	Session details: Paper: games	NA	2018
Gillian Smith:Anne Sullivan	This paper presents lessons learned from five years of teaching a game design and programming outreach course. This class is taught over the course of a month to high school students participating in the California Summer School for Mathematics and Science (COSMOS) at the University of California, Santa Cruz. Over these five years we have changed everything in the course, from the overall project structure to the programming language used in the class. In this paper we discuss our successes and failures, and offer recommendations to instructors offering similar courses.	The five year evolution of a game programming course	NA:NA	2018
Katie Seaborn:Magy Seif El-Nasr:David Milam:Darren Yung	Games are an important part of popular culture and have successfully engaged audiences from different age groups [8]. This has caused many educators to start thinking of different ways to infuse game-based techniques (playing or construction) to enhance education. Over the past five years, there has been several research efforts on curriculum development and the evaluation of game construction and playing methods to promote STEM (Science Technology, Engineering and Mathematics) concepts to middle and high school students. In this paper, we report on a new study following the lead of previous efforts. In particular, we were granted a block within Frank Hurt High School by the Surrey school district for which to develop a game construction-based curriculum as a basis for computer science education within the school, replacing a traditional computer science class. From February till June 2011 students were taught elementary programming using GameMaker, a digital game development tool. In addition to collecting students' overall impressions, we also evaluated students' technical competency (using tests) and self-efficacy (using surveys) at the start and end of the semester. Our findings show that the curriculum had a positive, statistically significant effect on concept comprehension, which suggests that the curriculum was effective for understanding computer science and game design concepts. In this paper we present the course structure, methods, and evaluation as a contribution.	Programming, PWNed: using digital game development to enhance learners' competency and self-efficacy in a high school computing science course	NA:NA:NA:NA	2018
Michael John Eagle:Tiffany Barnes	We present the Game2Learn methodology for the design and evaluation of educational games with a focus on well-defined learning objectives and empirical verification. This integrative process adapts ideas from educational design, intelligent tutoring systems, classical test-theory, and interaction and game design, and agile software development. The methodology guides researchers through the steps of the design process, including identification of specific learning objectives, translation of learning activities to game mechanics, and the empirical evaluation of the final product. This methodology is particularly useful for ensuring successful student research experiences or software engineering courses.	A learning objective focused methodology for the design and evaluation of game-based tutors	NA:NA	2018
Sarah Heckman	NA	Session details: Paper: professional experiences	NA	2018
Thomas Gibbons	A new model, professional course guides, describes how practicing professionals can be brought into the classroom as student mentors and integrated into the course material. This new model is compared to existing models for student interactions with practicing professionals including guest speakers, adjunct faculty, and program mentors.	Course guides: a model for bringing professionals into the classroom	NA	2018
Sriram Mohan:Stephen Chenoweth:Shawn Bohner	The computer science capstone experience is designed to bridge the gap from university expectations to those of industry. Yet trying to solve this problem with a single course sequence, even one spanning the senior year, has some shortcomings, in terms of learning outcomes which can be achieved, and also instructional strategies that can be employed. We describe here an alternative plan which first provides a junior year of practice on a client-based project integrated with learning design and other related topics, followed by a senior year in which students can work more independently to hone these skills on a harder year-long project with another client. This two-year sequence, with scaffolding provided at first that is gradually removed, has proven to be especially effective in preparing undergraduates for a career in the soft- ware industry. The approach also integrates well with the need for these students to become proficient at working in engineering teams.	Towards a better capstone experience	NA:NA:NA	2018
Jeffrey Saltz:Jae Oh	We present an open co-op program called Global Enterprise Technology Immersion Experience (GET IE) developed by JPMorgan Chase & Co. and Syracuse University. The new program creates a global enterprise focus in technology-oriented academic majors, integrated with hands-on experiential work-based learning to provide a context in which students are stimulated to utilize their classroom experience. The program includes a two-semester paid internship component that can be seamlessly incorporated with the existing computer science curriculum at Syracuse and else where. The internship's unique pedagogical innovation is to simultaneously provide the students academic course work that is integrated within a students extended internship and provides relevant problems in global enterprise technology. The curricula is "open" in the sense that other institutions and companies can join the consortium to enrich choices for the students and foster cross-fertilization of curricula activities. The program, in effect, creates a domain specific next generation co-op program that complements typical computer science curricula with a skill-set that is required for creating very large, global enterprise applications for technically and socially diverse organizations.	An open co-op model for global enterprise technology education: integrating the internship and course work	NA:NA	2018
Don Goelman	NA	Session details: Paper: a session with a view	NA	2018
Tamar Vilner:Ela Zur:Ronit Sagi	The Open University of Israel (OUI) is a distance learning university. Our CS1 course is taught through video-taped lectures that cover the study material. In addition, students may participate in face-to-face group meetings in study centers located all over the country and taught by tutors. There is a special group called Ofek, in which the tutor is located in a studio and the lesson is broadcast over the internet. Students enrolled in this group participate from their home PCs. The taped Ofek sessions as well as the lectures are stored on the course website, and students can watch them whenever convenient. We conducted a study to investigate students' viewing habits and the relationship between viewing and the success rate in the course.	Integrating video components in CS1	NA:NA:NA	2018
Tayfun Tuna:Jaspal Subhlok:Lecia Barker:Varun Varghese:Olin Johnson:Shishir Shah	Videos of classroom lectures have proven to be a popular and versatile learning resource. This paper reports on videos featuring Indexing, Captioning, and Search capability (ICS Videos). The goal is to allow a user to rapidly search and access a topic of interest, a key shortcoming of the standard video format. A lecture is automatically divided into logical indexed video segments by analyzing video frames. Text is automatically identified with OCR technology enhanced with image transformations to drive keyword search. Captions can be added to videos. The ICS video player integrates indexing, search, and captioning in video playback and has been used by dozens of courses and 1000s of students. This paper reports on the development and evaluation of ICS videos framework and assessment of its value as an academic learning resource.	Development and evaluation of indexed captioned searchable videos for STEM coursework	NA:NA:NA:NA:NA:NA	2018
James R. Miller	Metaview is an interactive tool that helps to teach concepts related to nested 3D coordinate systems, especially in the context of defining and establishing views of 3D scenes in common graphics APIs like OpenGL and Direct3D. We describe the context in which nested coordinate systems arise in the study of graphics programming, then we relate the common conceptual difficulties students typically experience when studying and trying to put this material into practice. We then describe the role that metaview plays in helping to overcome these problems. Space allows us only to describe its core uses in these areas; several of its additional features are briefly listed at the end. Metaview is packaged with a set of built-in 3D models used to demonstrate major concepts. In addition, external and/or student-programmed models are easily imported into the tool. Metaview can be run anywhere, anytime using Java Web Start. The latest released version of the tool can be executed from http://people.eecs.ku.edu/~miller/JOGL/metaview.jnlp. We are currently working on a port to OpenGL ES targeted for portable smart devices such as tablet computers.	Metaview: a tool for learning about viewing in 3D	NA	2018
Saquib Razak	NA	Session details: Paper: pedagogy: programming	NA	2018
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba:Steve Cooper	In this paper, we describe a pedagogy for an undergraduate programming course using Alice 3 and Java. We applied the educational theory of mediated transfer to develop a new version of the Alice system and accompanying instructional materials. The pedagogy was implemented and tested over two years. Student test scores in experimental, treatment course sections showed dramatic improvement over scores in comparable non-treatment sections.	Mediated transfer: Alice 3 to Java	NA:NA:NA:NA:NA	2018
Richard Gluga:Judy Kay:Raymond Lister:Sabina Kleitman:Tim Lever	A computer science student is required to progress from a novice programmer to a proficient developer through the programming fundamentals sequence of subjects. This paper deals with the capturing and representation of learning progression. The key contribution is a web-based interactive tutorial that enables computer science educators to practice applying the Bloom Taxonomy in classifying programming exam questions. The tutorial captures participant confidence and self-explanations for each Bloom [5] classification exercise. The results of an evaluation with ten participants were analyzed for consistency and accuracy in the application of Bloom. The confidence and self-explanation measures were used to identify problem areas in the application of Bloom to programming fundamentals. The tutorial and findings are valuable contributions to future ACM/IEEE CS curriculum revisions, which are expected to have a continued emphasis on Bloom [1].	Over-confidence and confusion in using bloom for programming fundamentals assessment	NA:NA:NA:NA:NA	2018
Chris Piech:Mehran Sahami:Daphne Koller:Steve Cooper:Paulo Blikstein	Despite the potential wealth of educational indicators expressed in a student's approach to homework assignments, how students arrive at their final solution is largely overlooked in university courses. In this paper we present a methodology which uses machine learning techniques to autonomously create a graphical model of how students in an introductory programming course progress through a homework assignment. We subsequently show that this model is predictive of which students will struggle with material presented later in the class.	Modeling how students learn to program	NA:NA:NA:NA:NA	2018
Rebecca Bates	NA	Session details: Science fiction in computer science education	NA	2018
Rebecca Bates:Judy Goldsmith:Rosalyn Berne:Valerie Summet:Nanette Veilleux	The use of science fiction (SF) to engage students in computer science learning is becoming more popular [1-6]. There is ample material available to help both undergraduate and graduate students make connections between technical content and human experience, from Star Trek to The Hitchhiker's Guide to the Galaxy to 2001: A Space Odyssey to I, Robot and many others. Fiction can be included in technical courses or used to draw students into the field in introductory classes. The panelists, who represent a range of schools, perspectives and classes, will present brief overviews (5-8 minutes) of how they have used science fiction to engage students in technical topics as well as ethical and societal issues related to computing. After the overviews, there will be plenty of time for discussion of examples used within the community and ways to make connections between science fiction and particular classes or topics. We will be gathering additional examples from the discussion and making them available online.	Science fiction in computer science education	NA:NA:NA:NA:NA	2018
Leisa D. Thompson	NA	Session details: Diversity initiatives to support systemic change for women in undergraduate computing	NA	2018
Leisa D. Thompson:Lecia J. Barker:Rita Manco Powell:Catherine E. Brawner:Tom McKlin	The National Center for Women & Information Technology (NCWIT) Extension Services for Undergraduate Programs (ES-UP) has created a large group of trained consultants (ESCs) and clients who are passionate about women's participation in computing. This panel will describe how our ESCs and clients have worked together to effect change and will show outcomes from our activities over the past three years.	Initiatives to support systemic change for women in undergraduate computing	NA:NA:NA:NA:NA	2018
Christopher Hundhausen	NA	Session details: Special session	NA	2018
N. Hari Narayanan:Christopher Hundhausen:Dean Hendrix:Martha Crosby	The studio-based learning (SBL) model aims to promote learning in a social and collaborative context by having learners construct, iteratively refine, and critically review design artifacts under the guidance of instructors and disciplinary experts. Recognizing the potential of SBL to foster the development of not only technical design skills, but also increasingly-coveted communication and collaboration skills, we have been adapting the approach for computing education, implementing it in various courses, and evaluating its impact over the past 5 years. This effort now involves 26 computing courses at 15 institutions in seven states. To our knowledge, this represents the most systematic implementation and evaluation of a pedagogy for computing education to date. This special session will introduce SBL to the SIGCSE community and facilitate a discussion and exchange of ideas. In addition to oral and poster presentations of the SBL model and its evaluation results, the session will feature "war stories" from teachers who have applied the model to their courses and hands-on activities to help attendees apply SBL to their courses.	Transforming the CS classroom with studio-based learning	NA:NA:NA:NA	2018
Kristine Nagel	NA	Session details: Paper: broadening participation	NA	2018
Pierluigi Crescenzi:Leonardo Rossi:Gianluca Apollaro	In this paper we describe how we tried to make the well-known JFLAP Turing machine simulator accessible to blind students taking a theoretical computer science course. Software accessibility is an important topic for both legal and ethical reasons: in our case, however, we also wanted to make the accessible software usable by blind students in cooperation with the other students, in order to encourage the integration of the blind students within the rest of the class. For this reason, the accessible version of the JFLAP Turing machine simulator that we developed is as much similar as possible to and fully compatible with the original one. In the paper, we also report some very satisfactory preliminary validation results that indicate how the new software can really make Turing machines accessible to blind students.	Making turing machines accessible to blind students	NA:NA:NA	2018
David C. Webb:Alexander Repenning:Kyu Han Koh	A fundamental challenge to computer science education is the difficulty of broadening participation of women and underserved communities. The idea of game design and game programming as an activity to introduce children at an early age to computational thinking in a motivational way is quickly gaining momentum. A pedagogical approach called Project First has allowed the Scalable Game Design project to reach a large group of middle schools students including a large percentage of female (45%) and underrepresented (48%) students. With over 4000 students in inner city, remote rural, and Native American communities Scalable Game Design has investigated the impact on students' interest level of pedagogical approaches employed by teachers such as mediation and scaffolding. Findings suggest strong gender effects based on classroom scaffolding approaches. For instance, girls are substantially less likely to be motivated through scaffolding based on direct instruction. Conversely, guided discovery scaffolding approaches are highly motivating to the point where they can even overcome other negative predictors such as small girls to boys class participation ratios. This paper introduces the project, discusses different scaffolding approaches and presents data connecting gender specific motivational levels with scaffolding approaches.	Toward an emergent theory of broadening participation in computer science education	NA:NA:NA	2018
Julie Krause:Irene Polycarpou:Keith Hellman	As percentages of women in computing jobs and university programs decline, recruiting and retaining women in the field of Computer Science (CS) becomes increasingly important. Undergraduate CS programs, and more specifically, introductory-level CS courses, offer an opportunity to introduce women to CS studies. Furthermore, learning experiences in introductory CS courses can be pivotal in shaping female students' perceptions of CS. Collaborative learning, in various forms, is an instructional construct that has been shown to be effective in recruiting and retaining women in undergraduate CS programs. In this paper we present an exploratory study on formal learning groups and their potential to attract and maintain female students' interest in CS studies.	Exploring formal learning groups and their impact on recruitment of women in undergraduate CS	NA:NA:NA	2018
Charles Leska	NA	Session details: Paper: online collaboration	NA	2018
Jam Jenkins:Evelyn Brannock:Thomas Cooper:Sonal Dekhane:Mark Hall:Michael Nguyen	The Java Wiki Integrated Development Environment (JavaWIDE) is an innovative environment that promotes active learning and collaboration in programming courses. This paper surveys how JavaWIDE's features have been used to promote active and collaborative learning in both traditional and distance education (synchronous) in four different environments: high school, summer enrichment courses, and at two- and four-year colleges. The authors describe the context of each teaching and learning environment and the parts of JavaWIDE that are particularly well suited in each context. After discussing the active learning and collaboration techniques employed, student responses to the experience are summarized. This collection of case studies illustrates how the concurrent editing, shared environment awareness and other features of JavaWIDE can be used to promote active learning and collaboration within a heterogeneous set of teaching and learning environments.	Perspectives on active learning and collaboration: JavaWIDE in the classroom	NA:NA:NA:NA:NA:NA	2018
Christopher Scaffidi:Aniket Dahotre:Yan Zhang	Animation programming is a widely-respected approach for helping students to learn programming skills, and online forums are a widely-used approach for helping students to interact with one another. But in what ways, if any, does combining animation programming with online forums lead to useful discussion and collaboration among learners? To answer this question, we analyzed online forum discussions among people who were learning to create animation programs using the Scratch programming environment. We discovered that specific kinds of online posts were more likely than others to be followed by discussion, and we found that the ensuing collaboration often involved the exchange of design ideas and feedback within small groups of users. These findings reveal opportunities for enhancing online forums and surrounding tools so they more effectively facilitate discussion, collaboration, and ultimately development of programming skills.	How well do online forums facilitate discussion and collaboration among novice animation programmers?	NA:NA:NA	2018
John Barr:Ananda Gunawardena	Classroom Salon is an on-line social collaboration tool that allows instructors to create, manage, and analyze social net- works (called Salons) to enhance student learning. Students in a Salon can cooperatively create, comment on, and modify documents. Classroom Salon provides tools that allow the instructor to monitor the social networks and gauge both student participation and individual effectiveness. This pa- per describes Classroom Salon, provides some use cases that we have developed for introductory computer science classes and presents some preliminary observations of using this tool in several computer science courses at Carnegie Mellon University.	Classroom salon: a tool for social collaboration	NA:NA	2018
Catherine Lang	NA	Session details: Paper: middle school collaborations	NA	2018
Elizabeth Carter:Glenn Blank:Jennifer Walz	In order to garner more student interest in the pursuit of computer science as both a major and a career path, K-12 students need to be made aware of what computer science is and what it is about earlier in their education. Although students in many high schools can pursue introductory programming, high school is arguably too late to interest students who may have developed ill-informed attitudes about computer science. This paper documents curricular items developed for and taught to an audience of mixed ability 6th through 8th graders taking a local Technology Education class that attempts to showcase some of the more interesting, less stereotypical, aspects of computer science using a breadth approach in an effort to encourage interest in the field.	Bringing the breadth of computer science to middle schools	NA:NA:NA	2018
Richard Burns:Lori Pollock:Terry Harvey	We have developed and implemented, over four semesters, a model for engaging computer science majors in service learning for teachers of grades 6-8 at a K-8 school in an underserved community. This paper describes the design of a course focused on interweaving software engineering practice, service learning, and development of "soft" professional skills. CS student teams partner with middle school teacher teams to create learning games for classrooms, and then conduct classroom instruction and observation. We report on our results from evaluating the experience of CS students and middle school teachers through pre-post surveys, evaluator observation of student demo presentations and classroom instruction, focus groups, and student reflective journals.	Integrating hard and soft skills: software engineers serving middle school teachers	NA:NA:NA	2018
Linda Werner:Jill Denner:Shannon Campe:Damon Chizuru Kawamoto	Computational thinking (CT) has been described as an essential capacity to prepare students for computer science, as well as to be productive members of society. But efforts to engage K-12 students in CT are hampered by a lack of definition and assessment tools. In this paper, we describe the first results of a newly created performance assessment tool for measuring CT in middle school. We briefly describe the context for the performance assessment (game-programming courses), the aspects of CT that are measured, the results, and the factors that are associated with performance. We see the development of assessment tools as a critical step in efforts to bring CT to K-12, and to strengthen the use of game programming in middle school. We discuss problems and implications of our results.	The fairy performance assessment: measuring computational thinking in middle school	NA:NA:NA:NA	2018
Julian Mason	NA	Session details: Paper: new tricks for the classroom	NA	2018
Stephen H. Edwards:Zalia Shams:Michael Cogswell:Robert C. Senkbeil	At SIGCSE 2002, Michael Goldwasser suggested a strategy for adding software testing practices to programming courses by requiring students to turn in tests along with their solutions, and then running every student's tests against every other student's program. This approach provides a much more robust environment for assessing the quality of student-written tests, and also provides more thorough testing of student solutions. Although software testing is included as a regular part of many more programming courses today, the all-pairs model of executing tests is still a rarity. This is because student-written tests, such as JUnit tests written for Java programs, are now more commonly written in the form of program code themselves, and they may depend on virtually any aspect of their author's own solution. These dependencies may keep one student's tests from even compiling against another student's program. This paper discusses the problem and presents a novel solution for Java that uses bytecode rewriting to transform a student's tests into a form that uses reflection to run against any other solution, regardless of any compile-time dependencies that may have been present in the original tests. Results of applying this technique to two assignments, encompassing 147 student programs and 240,158 individual test case runs, shows the feasibility of the approach and provides some insight into the quality of both student tests and student programs. An analysis of these results is presented.	Running students' software tests against each others' code: new life for an old "gimmick"	NA:NA:NA:NA	2018
Christopher Plaue:Sal LaMarca:Shelby H. Funk	Large introductory-level classes provide a cost-efficient approach for universities to serve many students at once, but also present several challenges to learning (e.g., poor visual angles). In addition, more students with declared, undeclared, or undiagnosed learning disabilities are entering the college and university systems. In the spirit of universal design, we created a group note-taking system in our large introductory computer science course to increase interaction amongst students, promote good note-taking strategies, and provide study resources to all students while also fulfilling the role of accommodating for students with learning disabilities. We show that the section of the course taught with our intervention performed significantly better on their final examination compared to a course taught without the intervention. We report that students enjoyed increased interactions with their peers, and that one third of the class self-reported an increase in their note-taking skills. Furthermore, our intervention only required minimal cost to the institution, and no financial cost to students, and is easily implemented in any size class.	Group note-taking in a large lecture class	NA:NA:NA	2018
Michelle Craig:Sarah Petersen:Andrew Petersen	This paper presents observations about teaching program tracing to novices drawn from a study of knitting patterns. Due to changes in audience, knitting patterns have evolved from vague, chatty discourse written for experts to precise, line-by-line procedures that are akin to programs. The modern knitting community has developed numerous conventions for articulating iteration, expressing conditions, and documenting design decisions. "Executing" one of these patterns is analogous to tracing, since the knitter must demonstrate understanding of the instructions. We argue that the conventions adopted by knitters to make their patterns more understandable to non-experts provide useful insight to computer scientists teaching novices. Our observations suggest that phrasing conditions as termination cases ("until" instead of "while") and partially unrolling loops may help beginners understand code and that some structures, like parameters to functions, may be unfamiliar because they have no common analog.	Following a thread: knitting patterns and program tracing	NA:NA:NA	2018
Tracy Camp:Paul Tyman	NA	Session details: Plenary Session	NA:NA	2018
Hal Abelson	SIGCSE members love the beauty of computational thinking. They know the joy of bringing those ideas to young people. That love for computational thinking entails respect for the computational values that empower people in the digital world. For academics, those values have been central to the flowering of computing as an intellectual endeavor. Today, those values are increasingly threatened by stresses from both within and outside academia: squabbles over who owns academic work, increasingly stringent and overreaching intellectual property laws, and the replacement of open computing platforms by closed applications and walled-garden application markets. In this talk I'll describe some things we've done at MIT to support computational values, like open publication of all our course materials, our faculty policy on open publication of academic research, and our recently announced initiative for open online instruction based on non-proprietary software platforms. I'll discuss Creative Commons licensing and Free Software, and the importance of tinkerability for empowering citizens in an information society. And I'll describe App Inventor for Android, a new programming tool motivated by the vision that all of us us can experience mobile computing as creators using tools that we can control and reshape, rather than only as consumers of packaged applications.	From computational thinking to computational values	NA	2018
Joan Krone	NA	Session details: Teaching mathematical reasoning across the curriculum	NA	2018
Joan Krone:Doug Baldwin:Jeffrey C. Carver:Joseph E. Hollingsworth:Amruth Kumar:Murali Sitaraman	NA	Teaching mathematical reasoning across the curriculum	NA:NA:NA:NA:NA:NA	2018
Scott Portnoff	NA	Session details: Special session	NA	2018
Scott R. Portnoff	The presentation, an interim report, will focus on the design, implementation and rationale for a pre-APCS HS curriculum of Interdisciplinary Central-Problem-Based units that model real-world applications. In a typical multi-week unit, students use an existing complex software application to explore a specific problem, e.g. configuring SDSC Biology Workbench to build a phylogenetic (evolutionary) tree for various animal species after determining the degree of homology between protein or DNA sequences obtained from online genomic and protein databases. Students then build a small-scale version of the program - focusing on 1 or 2 algorithms - using Processing, Excel, BYOB or Alice. This approach allows students a glimpse into the inner workings of such programs, and affords them both context and practical potential for their projects. Back-stories from film and literature (e.g. Inherit the Wind) place problems within an historical and social context so that students will understand both their importance and the contribution CS can make to their solution. Unit topics have come from the fields of Astronomy (Galileo's discoveries), Bioinformatics (evolution), Molecular Modeling (DNA double helix), Political Science (women's suffrage/ Florida 2000 Presidential election), Environmental Science, Music (visualization software like Synthesia), and Holocaust Studies (IBM's active hardware and programming support for Hollerith machine technology used in the Nazi extermination programs).	Teaching HS computer science as if the rest of the world existed: rationale for a HS Pre-APCS curriculum of interdisciplinary central-problem-based units that model real-world applications	NA	2018
Guy-Alain Amoussou	NA	Session details: Special session	NA	2018
Guy-Alain Amoussou:Scott Grissom	What are the perceived challenges by the computing education and research communities? After small groups discuss this question, we will compare and contrast these perceived challenges to the current trend in proposals submitted and funded by the National Science Foundation's (NSF) Transforming Undergraduate Education in STEM (TUES) program. The intention is to create awareness for all involved and to broaden the range of proposals submitted to the NSF.	Funding the challenges in computing	NA:NA	2018
Lori Carter	NA	Session details: Paper: CS1: new ideas	NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	In this paper, we present the design and development of a new approach to teaching the college-level introductory computing course (CS1) using the context of art and creative coding. Over the course of a semester, students create a portfolio of aesthetic visual designs that employ basic computing structures typically taught in traditional CS1 courses using the Processing programming language. The goal of this approach is to bring the excitement, creativity, and innovation fostered by the context of creative coding. We also present results from a comparative study involving two offerings of the new course at two different institutions. Additionally, we compare our results with another successful approach that uses personal robots to teach CS1.	Creative coding and visual portfolios for CS1	NA:NA:NA	2018
Daniel Zingaro:Andrew Petersen:Michelle Craig	In this paper, we explore the use of sequences of small code writing questions ("concept questions") designed to incrementally evaluate single programming concepts. We report on a study of student performance on a CS1 final examination that included a traditional code-writing question and four intentionally corresponding concept questions. We find that the concept questions are significant predictors of performance on both the corresponding code-writing question and the final exam as a whole. We argue that concept questions provide more accurate formative feedback and simplify marking by reducing the number of variants that must be considered. An analysis of responses categorized by the students' previous programming experience suggests that inexperienced students have the most to gain from the use of concept questions.	Stepping up to integrative questions on CS1 exams	NA:NA:NA	2018
Jeffrey A. Stone	The use of weekly, reflective student blogs can be one method for collecting ongoing feedback about a CS1 course. Reflective blogs permit a continuous feedback loop that can be used for both formative and summative assessment of pedagogical innovations. This paper reports on a two-year qualitative study involving the use of reflective blogging in six sections of two CS1-style courses. Reflective blogs were used as a low stakes, non-intimidating vehicle whereby concerns, requests, and other course-related issues could be voiced by students. The resultant blog posts were used as an assessment and feedback mechanism for a parallel pedagogical transformation of the participating courses. This study demonstrates that reflective student blogs in CS1 can be a useful tool for instructional planning. However, faculty must be careful to avoid reactionary changes which move the course away from predefined learning outcomes.	Using reflective blogs for pedagogical feedback in CS1	NA	2018
Jody Paul	NA	Session details: Paper: team work	NA	2018
Vreda Pieterse:Lisa Thompson:Linda Marshall:Dina M. Venter	We describe a process that we applied for teaching teamwork in a Software Engineering module. Our objective with this process was to create opportunities for our students to experience some of the problems of working in a group before they formed teams in which they had to work for the rest of the year. The process entails expecting students to work on well defined assignments for short periods in teams where risk factors were induced. Through experiencing these short bursts of intense team tribulation students are prepared to handle difficult events and situations in their teams. We describe the design and implementation of this process. We report on changes in the levels of participation of the students during the process. We offer our explanation of possible factors that may have caused the observed variations.	Participation patterns in student teams	NA:NA:NA:NA	2018
Alan C. Jamieson:Lindsay H. Jamieson:Angela C. Johnson	In the 1960s and 70s, Uri Treisman developed a specific style of workshops to encourage the retention of underrepresented minority students in Calculus courses at the University of California, Berkley. Since that time, workshops based on the Treisman model have been successfully implemented across the United States and have resulted in more underrepresented minority students successfully completing Calculus. Some attempts have been made to translate the Treisman model to Introductory Computer Science, but all previous attempts have been focused on programming skills. However, one of the student assumptions that deter women and underrepresented minorities from attempting a major or minor in Computer Science is that a computer scientist is purely a solitary programmer [11]. In this paper, we discuss a specific two year pilot program of non-programming focused Treisman-style workshops in conjunction with a Introductory Computer Science course.	Application of non-programming focused treisman-style workshops in introductory computer science	NA:NA:NA	2018
Ben Coleman:Matthew Lang	Improving communication and collaborative skills of computer science students has been a priority in the community for some time. We present our philosophy, collaboration across the curriculum, which moves beyond existing individual courses or course units to teach collaboration skills in a pervasive manner. In our approach, concepts are introduced and skills are developed throughout the computer science curriculum---from CS1 to a capstone experience. Students are provided with opportunities to exercise skills in reflective environments that eventually mirror real-world experiences, and technical course content is not compromised. We argue for this system and provide details about how collaboration across the curriculum is accomplished at a small liberal arts college.	Collaboration across the curriculum: a disciplined approach todeveloping team skills	NA:NA	2018
Kinnis Gosha	NA	Session details: Paper: summer experiences	NA	2018
Krishnendu Roy	Google's App Inventor for Android (AIA) is the newest visual "blocks" programming language designed to introduce students to programming through creation of mobile applications (apps). AIA opens up the world of mobile apps to novice programmers. Success stories of using AIA to introduce college students to programming exist. We used AIA in computing summer camps for high school students that we offer at our university. This paper is an experience report about using AIA in our camps. We provide a detailed description of designing our camps with AIA including the process of selecting and setting-up an Android device and instructional materials that we developed and made available to everyone. We evaluated our camps through surveys to determine the effects on the students. We found that there was mostly a slight increase in the favorable disposition towards computing. We also share our successes with using AIA and what still needs improvement for wider use.	App inventor for android: report from a summer camp	NA	2018
Barbara Ericson:Tom McKlin	universities. But, it is not enough to offer computing summer camps and hope that students like them. The camps should be effective by some measure, such as broadening participation by underrepresented groups and/or increasing learning. Summer camps should also be financially sustainable, so that institutions can continue to offer them regularly. The summer camps at Georgia Tech have become effective and financially sustainable. This paper presents the rationale for our camps, the evaluation results that demonstrate positive attitude changes and increases in learning, and the business model that makes them financially sustainable. It also reports on the evaluation results from seven other colleges and universities in Georgia that offered computing summer camps during the summer of 2011 with assistance from Georgia Tech.	Effective and sustainable computing summer camps	NA:NA	2018
Timothy A. Davis	This paper describes the principles, implementation, and results of a weeklong summer science course for junior high and high school students interested in computer science. To motivate and foster interest and creativity in students, while providing adequate complexity to introduce programming concepts and techniques, we used programming projects in computer graphics as the main learning tool. Included in our discussion are experiences across three course offerings, as well as detailed course assignments.	A summer science experience with computer graphics for secondary students	NA	2018
Ariel Ortiz	NA	Session details: Paper: software engineering	NA	2018
Chase Felker:Radka Slamova:Janet Davis	We report our experiences using the Scrum agile software development method in an undergraduate user-centered web development project. Our chief contributions are to report on using Scrum in a summer research setting as distinct from academic-year coursework and to consider the integration of Scrum and user experience (UX) development methods in a learning environment. Our experience with combining Scrum and UX was positive: this methodology gave our project a clear structure, kept us motivated, and focused us on developing a usable final product. We discuss our adaptations of Scrum to UX development and to the summer research setting, along with challenges we faced and lessons learned, to inform students and faculty who wish to apply such methods in future projects.	Integrating UX with scrum in an undergraduate software development project	NA:NA:NA	2018
Peter J. Clarke:Jairo Pava:Debra Davis:Frank Hernandez:Tariq M. King	There continues to be a lack of adequate training for students in software testing techniques and tools at most academic institutions. Several educators and researchers have investigated innovative approaches that integrate testing into programming and software engineering (SE) courses with some success. The main problems are getting other educators to adopt their approaches and ensuring students continue to use the techniques they learned in previous courses. In this paper we present a study that evaluates a non-intrusive approach to integrating software testing techniques and tools in SE courses. The study uses a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on software testing concepts and tools. The results of the study show that (1) students who use WReSTT in the classroom can improve their understanding and use of testing techniques and tools, (2) students find WReSTT a useful learning resource, and (3) the collaborative learning environment motivates students to complete assignments.	Using WReSTT in SE courses: an empirical study	NA:NA:NA:NA:NA	2018
Shvetha Soundararajan:Amine Chigani:James D. Arthur	The use of agile principles and practices in software development is becoming a powerful force in today's workplace. In our quest to develop better products, therefore, it is imperative that we strive to learn and understand the application of agile methods, principles and techniques to the software development enterprise. Unfortunately, in many educational institutions, courses and projects that emphasize agile software development are minimal. At best, students have only limited exposure to the agile philosophy, principles and practices at the graduate and undergraduate levels of education. In an effort to address this concern, we offered an advanced graduate-level course entitled "Agile Software Engineering" in the Department of Computer Science at Virginia Tech. The primary objectives of the course were to introduce the values, principles and practices underlying the agile philosophy, and to do so in an atmosphere that encour-ages debate and critical thinking. The course was designed around three central components: (1) teaching the essentials of how one develops a product within an agile framework, (2) having invited talks by notable industry experts, and (3) having students present and discuss current agile research topics and issues. This paper describes our experiences during the offering of that course, and in particular, the unique perspectives of the class instructor, the teaching assistant and a student who was enrolled in the course.	Understanding the tenets of agile software engineering: lecturing, exploration and critical thinking	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Ralph Morelli:Dwight Barnette:Jeff Gray:Chinma Uche:Bill Cowles:Rebecca Dovi	NA	CS principles: piloting a national course	NA:NA:NA:NA:NA:NA:NA	2018
Pat Yongpradit	NA	Session details: Special session	NA	2018
Pat Yongpradit	Microsoft XNA Game Studio and C# provide the basis of an advanced high school or introductory post-secondary game development computer science course. Game development is serious computer science. The curriculum tools enable students to create games, simulations, and applications for the PC, Xbox 360, Windows Phone, and Kinect that expand students' skills in complex logic, object oriented programming (OOP), advanced algorithms, and data structures.	Fun, phone, and the future: Microsoft XNA game studio, Windows phone, and Kinect SDK	NA	2018
Michael Kölling	NA	Session details: Special Session	NA	2018
Michael Kölling:Ian Utting	Many initiatives in improving learning of programming are based on gut instinct or localised experience. Gathering data as a basis for interventions, especially on a large scale, is hard. The BlueJ environment is being instrumented to collect data useful to a variety of educational programming researchers. BlueJ is ideally placed to collect such data: Users number in the millions, situated all over the world. This volume and diversity is unique in the history of such investigations and presents a significant opportunity for researchers. The data will be open to interested research groups, which will enable a wide variety of investigations that were previously impractical. This session presents work to date and solicits input from researchers about the design of the data collection.	Building an open, large-scale research data repository of initial programming student behaviour	NA:NA	2018
Adrian German	NA	Session details: Paper: collaborative learning	NA	2018
Alex Radermacher:Gursimran Walia:Richard Rummelt	Pair Programming has been shown to be beneficial to student learning. Much research has been conducted to effectively create student pairs when using pair programming in introductory computer science courses. This paper reports results of research investigating the effectiveness of pairing students based on their mental model consistency. Prior research has found a strong correlation between mental model consistency and performance in introductory computer programming courses. Evaluating students' mental models helps to provide insights into how students approach problem solving and may indicate how to effectively pair students to improve their programming ability and learning. The results from an empirical study conducted to investigate these effects indicate that mental model consistency is a predictor of student success in an introductory programming course. Future goals of this research are to fully evaluate all possible pairing arrangements and to produce tests that can be used to evaluate mental model consistency for other computer science concepts.	Assigning student programming pairs based on their mental model consistency: an initial investigation	NA:NA:NA	2018
David Socha	This paper reports on two simple innovations that helped create a more authentic and engaging modeling experience in an undergraduate Analysis and Design course: (a) having each team of students act both as modelers for another team, and as customers for another team, and (b) providing each team with their own whiteboard. The results from their use throughout the course, and for a single use of the whiteboards in a Computing Technology and Public Policy course, were quite positive. They resulted in a qualitatively different experience noticeable both to the instructors and the students. While some students were initially reluctant to use the whiteboards, by the end of the course most students were enthusiastic about their use.	Group whiteboards and modeler/customer teams: getting closer to industrial-style collaboration in a classroom	NA	2018
Randy W. Connolly	A variety of researchers have advocated for service learning projects in post-secondary computing programs. While these projects can achieve important disciplinary outcomes for the students, what has been under examined is the benefit that these projects have for the service recipients and their community. This paper argues that since service learning projects are meant to benefit both student donors and community recipients, we must examine much more carefully how computing service projects interact with all the social actors affected by the projects. Taking such an approach will require recognizing that ICT by itself will not improve or increase democracy, equality, social inclusion, or any other social good. Analogous to the experience of foreign aid recipients in the developing world, some service learning projects may actually do more harm than good. The paper concludes by providing some sample computer learning projects that are oriented more strongly towards achieving true service for the recipients.	Is there service in computing service learning?	NA	2018
Colleen Lewis	NA	Session details: Paper: curriculum issues	NA	2018
Tim Bell:Peter Andreae:Anthony Robins	Computer science became available as a nationally assessed topic in NZ schools for the first time in 2011. We review the introduction of computer science as a formal topic, including the level of adoption, issues that have arisen in the process of introducing it, and work that has been undertaken to address those issues.	Computer science in NZ high schools: the first year of the new standards	NA:NA:NA	2018
Su White:Michalis Vafopoulos	This paper discusses the role and place of Web Science in the computing disciplines. It provides an account of work which has been established towards defining an initial curriculum for Web Science. It presents and analyses plans for future curriculum developments utilizing novel methods to support and elaborate curriculum definition and review. The findings of a desk survey of Web Science education are presented. The paper then recommends future activities which may help determine whether we should expand the notion of computer science.	Web science: expanding the notion of computer science	NA:NA	2018
John Barr:Ali Erkan	We designed a system where non-computational faculty members (along with undergraduates) enroll in an introductory, multidisciplinary, open source Geographic Information System (GIS) course to experience integrative learning as students. The faculty participants are subsequently required to integrate their newly acquired expertise with their own disciplinary teaching and research; the necessary time commitment is compensated by a three-credit teaching load reallocation. Our hypothesis is that increasing the general faculty's appreciation of computation (in the context of integrative learning) is an indirect yet effective and scalable way to reach a wider group of students to convey our fundamental disciplinary message: computing is more than programming and computing empowers people.	Educating the educator through computation: what GIS can do for computer science	NA:NA	2018
Robert England	NA	Session details: Paper: active learning I	NA	2018
Paul Carter	We describe an experience using online multimedia instruction and just-in-time teaching in an introductory programming course. Survey data has shown that students are strongly in favour of the approach. A series of screencasts was developed to replace the traditional lecture component of the course. Students were asked to review a small number of screencasts before each class and were assessed on their comprehension at the start of class using a series of "clicker" questions. A just-in-time mini-lecture was provided in response to the initial assessment, on an as-needed basis. The remaining class time was devoted to small-group exercises.	An experience report: on the use of multimedia pre-instruction and just-in-time teaching in a CS1 course	NA	2018
Alexandra Martinez	This paper describes our experience using the Just-in-Time Teaching (JiTT) technique in an undergraduate database course for computer science majors during two semesters. JiTT was implemented by giving the students reading assignments and asking them to complete web-based reading tests the day before class, so that the teacher could detect weaknesses in students' understanding of the material and adjust the lesson plan just in time for the next day class. Based on surveys as well as on exams and course grades, we found a significant improvement on the students' interest in the course and learning of the material.	Using JITT in a database course	NA	2018
Clifton Kussmaul	This paper describes an ongoing project to develop activities for computer science (CS) using process oriented guided inquiry learning (POGIL). First, it reviews relevant background on effective learning and POGIL, compares POGIL to other forms of active learning, and describes the potential of POGIL for CS. Second, it describes a sample POGIL activity, including the structure and contents, student and facilitator actions during the activity, and how activities are designed. Third, it summarizes current progress and plans for a NSF TUES project to development POGIL materials for CS. Finally, it discusses student feedback and future directions.	Process oriented guided inquiry learning (POGIL) for computer science	NA	2018
James Early	NA	Session details: Paper: communication skills	NA	2018
Katrina Falkner:Nickolas J.G. Falkner	Computer Science majors must be able to communicate effectively. Industry surveys identify the development of communication and critical thinking skills as key to the reform of the higher education sector. However, academics are challenged by time and discipline content pressures, as well as a lack of familiarity with the teaching and assessment of communication skills content. There is considerable existing work in the area of communication skills development, positioned both in terms of curriculum guidelines for effective communication skills development, and example communication skills activities. However, this research is deficient in detailed, contextualised methodologies and frameworks for the development of communication skills within the Computer Science curriculum. We present a new methodology, building upon well established theoretical frameworks, designed to assist academics in the development of communication skills activities integrated with discipline content across the curriculum. We illustrate this methodology in the design of a CS1/CS2 communication skills course.	Integrating communication skills into the computer science curriculum	NA:NA	2018
Laurie Murphy:Renée McCauley:Sue Fitzgerald	This paper reports on the replication of a study of novice programmers, looking for relationships between ability to 'explain in plain English' the meaning of a code segment and success in writing code later in the semester. This study explores the question in a different learning environment and qualitatively evaluates 'explain in plain English' responses to identify implications for teaching. Statistical results from this study are similar to those of the earlier work. Results highlight students' fragile knowledge, particularly for students excluded from the primary analyses by a set of screening questions, and suggest the need for assessment and instruction of basic concepts later into the term than instructors are likely to expect.	'Explain in plain English' questions: implications for teaching	NA:NA:NA	2018
Andrew Luxton-Reilly:Daniel Bertinshaw:Paul Denny:Beryl Plimmer:Robert Sheehan	Recent interest in student-centric pedagogies have resulted in the development of numerous tools that support student generated questions. Previous evaluations of such tools have reported strong correlations between student participation and exam performance, yet the level of student engagement with other learning activities in the course is a potential confounding factor. We show such correlations may be explained by other factors, and we undertake a deeper analysis that reveals evidence of the positive impact question-generation activities have on student performance.	The impact of question generation activities on performance	NA:NA:NA:NA:NA	2018
Suzanne Westbrook	NA	Session details: Special session	NA	2018
Victor Piotrowski:Suzanne Westbrook:Mimi McClure:Jeff Forbes:Harriet Taylor	This session highlights programs in the National Science Foundation's Division of Undergraduate Education, Office of Cyberinfrastructure and Directorate of Computer and Information Science and Engineering. The focus is on providing descriptions of several programs of interest to college faculty and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA	2018
Lester Wainwright	NA	Session details: Teaching outside the text	NA	2018
Renee Ciezki:Robert Glen Martin:Barbara Ericson:Lester Wainwright	We know that students bring diverse experiences and an assortment of learning styles into our classrooms. We greet them and hand out a syllabus listing the required textbook(s). One size does not fit all when it comes to textbooks. In this session, participants will discover teaching activities that can be used to supplement any computer science textbook. These activities include human modeling and role playing, interactive whiteboard activities, case studies, class projects, games, and more. By exploring "extra" activities not found in most textbooks, participants will learn how these hands-on, interesting and fun activities can help students understand the topics listed in the AP Computer Science A Course Description: Object-oriented Program Design, Program Implementation, Program Analysis, Standard Data Structures, Standard Algorithms, and Computing in Context. Student attention spans seem to be getting shorter. The panelists found themselves spending more and more time searching for and/or developing supplemental resources in efforts to reach and retain students. Members of the AP Computer Science-A Development Committee will share these resources and lead a discussion of proven strategies and lesson ideas for teaching outside the textbook.	Teaching outside the text	NA:NA:NA:NA	2018
John Impagliazzo	NA	Session details: Special session	NA	2018
John Impagliazzo:Susan Conry:Eric Durant:Andrew McGettrick:Mitch Thornton:Timothy Wilson	In early 2011, the ACM and the IEEE Computer Society (IEEE/CS) created the CE2004 Review Task Force (RTF) and charged it with the task of reviewing and determining the extent to which the document "Curriculum Guidelines for Undergraduate Degree Programs in Computer Engineering," produced 2004 December 12 and known as CE2004 [1] required revisions. The RTF submitted a report to both societies in July of 2011. The report summarized a survey of academic and industry constituents conducted by the RTF. It recommended keeping the structure and the vast majority of the content of the original CE2004 document. However, it also recommended that contemporary topics should be strengthened or added while de-emphasizing other topics that appeared to be waning from the curricular mainstream of computer engineering. Additionally, the RTF recommended that the two societies form a joint special-purpose committee to update and edit the earlier document and to seek input and review from the computer engineering industrial and academic communities through presentations and workshops co-located at major conferences. The presenters of this special session were members of the 2011 RTF and two presenters were members of the original curricular task force from 2004. The presentation will provide insights in the RTF findings and thoughts on how a future computer engineering report might evolve.	Computer engineering review task force report	NA:NA:NA:NA:NA:NA	2018
Jeff Gray	NA	Session details: Paper: projects	NA	2018
Lisa Bender:Gursimran Walia:Krishna Kambhampaty:Kendall E. Nygard:Travis E. Nygard	Team work is the norm in major development projects and industry is continually striving to improve team effectiveness. Researchers have established that teams with high levels of social sensitivity tend to perform well when completing a variety of specific collaborative tasks. Social sensitivity is the personal ability to perceive, understand, and respect the feelings and viewpoints of others, and it is reliably measurable. However, the tasks in recent research have been primarily short term, requiring only hours to finish, whereas major project teams work together for longer durations and on complex tasks. Our claim is that, social sensitivity can be a key component in predicting the performance of teams that carry out major projects. Our goal is to determine if previous research, which was not focused on students or professionals in scientific or technical fields, is germane for people in computing disciplines. This paper reports the results from an empirical study that investigates whether social sensitivity is correlated with the performance of student teams on large semester-long projects. The overall result supports our claim that the team social sensitivity is highly correlated with successful team performance. It suggests, therefore, that educators in computer-related disciplines, as well as computer professionals in the workforce, should take the concept of social sensitivity seriously as an aid or obstacle to productivity.	Social sensitivity and classroom team projects: an empirical investigation	NA:NA:NA:NA:NA	2018
Shimon Schocken	Engaging students in large system development projects is an important educational objective, since it exposes design and programming challenges that come to play only with scale. Alas, large scale system projects can be monstrously complex - to the extent of being infeasible in academic settings. We describe a set of principles and a framework that enable students to develop large-scale systems, e.g. a complete hardware platform or a compiler, in several semester weeks.	Taming complexity in large-scale system projects	NA	2018
Heidi J.C. Ellis:Michelle Purcell:Gregory W. Hislop	Free and Open Source Software (FOSS) offers a transparent development environment and community in which to involve students. Students can learn much about software development and professionalism by contributing to an on-going project. However, the number of FOSS projects is very large and there is a wide range of size, complexity, domains, and communities, making selection of an ideal project for students difficult. This paper addresses the need for guidance when selecting a FOSS project for student involvement by presenting an approach for FOSS project selection based on clearly identified criteria. The approach is based on several years of experience involving students in FOSS projects.	An approach for evaluating FOSS projects for student participation	NA:NA:NA	2018
Kelly Powers	NA	Session details: Paper: alice and scratch	NA	2018
Susan Rodger:Melissa Dalis:Chitra Gadwal:Jenna Hayes:Peggy Li:Francine Wolfe:Wenhui Zhang:Liz Liang	For four years we have been integrating computing into a variety of middle school disciplines via the Alice programing language. Early on we focused on creating curriculum materials for teachers to use in teaching the basic programming and animation concepts. This paper describes our efforts over the past two years in creating model projects for students to build in all disciplines, and our most recent focus on science and mathematics projects. For science we have introduced experiments in Alice and the tools needed for them. In mathematics we have created projects to increase their understanding of programming and to use the projects to increase their understanding of mathematics. We also discuss our efforts in workshops to teach K-12 teachers Alice and an analysis of the teachers' lesson plans and worlds developed in the most recent workshop.	Integrating computing into middle school disciplines through projects	NA:NA:NA:NA:NA:NA:NA:NA	2018
Linda Werner:Shannon Campe:Jill Denner	Programming environments that incorporate drag-and-drop methods and many pre-defined objects and operations are being widely used in K-12 settings. But can middle school students learn complex computer science concepts by using these programming environments when computer science is not the focus of the course? In this paper, we describe a semester-long game-programming course where 325 middle school students used Alice. We report on our analysis of 231 final games where we measured the frequency of successful execution of programming constructs. Our results show that many games exhibit successful uses of high level computer science concepts such as student-created abstractions, concurrent execution, and event handlers.We discuss the implications of these results for designing effective game programming courses for young students.	Children learning computer science concepts via Alice game-programming	NA:NA:NA	2018
Quinn Burke:Yasmin B. Kafai	This study investigates the potential to introduce basic programming concepts to middle school children within the context of a classroom writing-workshop. In this paper we describe how students drafted, revised, and published their own digital stories using the introductory programming language Scratch and in the process learned fundamental CS concepts as well as the wider connection between programming and writing as interrelated processes of composition.	The writers' workshop for youth programmers: digital storytelling with scratch in middle school classrooms	NA:NA	2018
Douglas Kranch	NA	Session details: Paper: active learning II	NA	2018
Matti Luukkainen:Arto Vihavainen:Thomas Vikberg	Data Structures (CS2) courses and course books do not usually put much emphasis in the process of how a data structure is engineered or invented. Instead, algorithms are readily given, and the main focus is in the mathematical complexity analysis of the algorithms. We present an alternative approach on presenting data structures using worked examples, i.e., by explicitly displaying the process that leads to the invention and creation of a data stucture and its algorithms. Our approach is heavily backed up by some of the best programming practices advocated by the Agile and Software Craftsmanship communities. It brings the often mathematically oriented CS2 course closer to modern software engineering and practical problem solving, without a need for compromise in proofs and analysis.	A software craftsman's approach to data structures	NA:NA:NA	2018
Jordi Petit:Omer Giménez:Salvador Roura	Jutge.org is an open access educational online programming judge where students can try to solve more than 800 problems using 22 programming languages. The verdict of their solutions is computed using exhaustive test sets run under time, memory and security restrictions. By contrast to many popular online judges, Jutge.org is designed for students and instructors: On one hand, the problem repository is mainly aimed to beginners, with a clear organization and gradding. On the other hand, the system is designed as a virtual learning environment where instructors can administer their own courses, manage their roster of students and tutors, add problems, attach documents, create lists of problems, assignments, contests and exams. This paper presents Jutge.org and offers some case studies of courses using it.	Jutge.org: an educational programming judge	NA:NA:NA	2018
Javier de San Pedro:Josep Carmona:Jordi Cortadella:Jordi Petit	This paper investigates the use of formal verification techniques to create online judges that can assist in teaching logic circuit design. Formal verification not only contributes to give an exact assessment about correctness, but also saves the instructor the tedious task of designing test cases. The paper explains how formal verification has been integrated in an online judge. It also describes the courseware created for a course on logic circuits and the successful experience of using it in a one-week summer course with students from secondary and high school.	Integrating formal verification in an online judge for e-Learning logic circuit design	NA:NA:NA:NA	2018
Derek Schuurman	NA	Session details: Paper: non-majors	NA	2018
Joel C. Adams:Randall J. Pruim	One of the challenges facing the U.S. technological workforce is that as fewer students take computing courses, fewer college graduates are being prepared for computing careers. Besides trying to attract more CS majors, another approach is to (i) design a computing curriculum that appeals to students and faculty from other (non-CS) disciplines, (ii) use special scholarships to attract students to that curriculum, and (iii) sponsor faculty development workshops for non-CS departments. In this paper, we detail this approach, using a new introductory course oriented to science majors, and scholarships funded by the National Science Foundation Scholarships for Science, Technology, Engineering, and Mathematics (NSF S-STEM) program to motivate non-CS majors to take CS courses. We also present several success stories that this approach has produced in its first two years.	Computing for STEM majors: enhancing non CS majors' computing skills	NA:NA	2018
Barbara M. Anthony	Operations research, while not traditionally taught at many small or liberal arts colleges, can be a significant asset to the offerings of a computer science department. Often seen as a discipline at the intersection of mathematics, computer science, business, and engineering, it has great interdisciplinary potential and practical appeal, allowing for recruitment of students who may not consider taking a CS0 or CS1 course. A special topics course in operations research was offered by the computer science department at Southwestern University as an upper-level elective, and it was also cross-listed as a business and mathematics elective. Not only did the course benefit computer science majors who appreciated the applications and different perspectives, but it provided a means for the department to serve a wider population, increased interdisciplinary education, and resulted in a filled-to-capacity upper-level course in computer science for the first time in recent memory. This course is now being considered as a permanent elective that will interest computer science majors and minors as well as draw in students from disciplines across campus. For departments with limited faculty resources for teaching non-major courses, offering an operations research course provides an alternative that simultaneously serves the department and the campus as a whole.	Operations research: broadening computer science in a liberal arts college	NA	2018
Jeff Cramer:Bill Toll	In the process of revising our general education course, which is required of a large fraction of students, we attempted to answer the question "What should a graduate of a liberal arts university understand about computational technology?" As computing technology has impacted and created drastic change in nearly all aspects of everyday life, university students may know more about narrow areas of technology but the true impact on their lives cannot be understood without an appreciation for the nature and limitations of the technology. This paper presents a set of assumptions about the impact of technology on individuals and society and describes elements of a computing context designed to enable students to critically evaluate the technology that has such an impact on their lives. Assessment of the approach indicates that students are more aware of the impact of technology and the importance of an understanding of the technology.	Beyond competency: a context-driven CSO course	NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Daniel Zingaro:Kevin Wayne:Dave O'Hallaron:Joshua T. Guerin:Stephen Davies:Zachary Kurmas:Keen Debby	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Amy Briggs	NA	Session details: Special session	NA	2018
Owen Astrachan:Amy Briggs:Jan Cuny:Lien Diaz:Chris Stephenson	The CS Principles Project is a collaborative effort to develop a new introductory course in computer science, accessible to all students. Computer Science educators at all levels have worked together on the development of the new curriculum under the direction of the College Board with support from the National Science Foundation. This special session provides an opportunity for the CS Principles project leaders to report on recent updates and new directions, and to engage in discussion on all aspects of the project with SIGCSE participants	Update on the CS principles project	NA:NA:NA:NA:NA	2018
Wendy DuBow	NA	Session details: Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA	2018
Wendy DuBow:Elizabeth Litzler:Maureen Biggers:Mike Erlinger	While many computing departments may be aware there are "promising" and "proven" practices for recruiting and retaining female students, there seems to be a drive to try new and novel approaches rather than use what is known, or strongly suspected, to be effective. Developing a diverse student body is a long-term multi-faceted process that includes active recruitment, inclusive pedagogy, meaningful curriculum and necessitates student, faculty and institutional support, as well as assessment of progress [1,2,3]. Given all the moving parts and intrinsic challenges of enacting change, departments could make it easier on themselves - and very likely achieve better results - if they intentionally and systematically used practices that have been shown to be effective. This panel will present the rationale for implementing evidence-based practices to increase female enrollments in undergraduate computing departments, and share evidence of successes. Wendy DuBow will examine the concept of evidence-based practices as well as describe briefly the research-based approaches taken by the National Center for Women & Information Technology (NCWIT) to identify the evidence-based practices an academic institution could use and distribute easy-to-use materials explaining such practices. Elizabeth Litzler will supplement this rationale by sharing compelling evaluation data that show that academic departments that implement a variety of evidence-based practices and actively seek to increase their female enrollments actually do see increases. Maureen Biggers will describe her department's recent efforts to increase female undergraduates at Indiana University, which enabled them to double the number of new female majors. Mike Erlinger will discuss Harvey Mudd's recent successes in attracting more Computer Science majors overall, including a large percentage of female students.	Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA:NA:NA:NA	2018
Tim Bell	NA	Session details: Paper: high school collaborations	NA	2018
Antti-Jussi Lakanen:Ville Isomöttönen:Vesa Lappalainen	In our faculty we have run week-long K-12 game programming courses now for three summers. In this paper we investigate what programming-related activities students do after they take a course, and what factors in the students' background relate to post-course programming. We also investigate a possible change in the students' interest towards higher education science studies. We find that most students continue programming after the course and that their interest towards science studies keeps increasing. In student background we observed some indicative trends, but did not find reliable explaining factors related to post-course programming or increased interest towards science studies.	Life two years after a game programming course: longitudinal viewpoints on K-12 outreach	NA:NA:NA	2018
Renate Thies:Jan Vahrenhold	To provide a unified view of any scientific field, outreach programs need to realistically portray the subject in question. Consequently, topics and methods actually taught in Computer Science courses should to be touched upon in Computer Science outreach programs or, conversely, elements from successful Computer Science outreach programs can be used to enrich established courses in Computer Science. We follow up on the latter aspect and investigate how outreach material might be used as a teaching resource in lower secondary Computer Science. In particular, we extract and classify learning objectives from the activities of the well-received Computer Science Unplugged program. Based upon this classification, we comment on where and to which extent these activities can be used to enrich teaching Computer Science in secondary education.	Reflections on outreach programs in CS classes: learning objectives for "unplugged" activities	NA:NA	2018
Ambareen Siraj:Martha J. Kosa:Summer-Mistine Olmstead	In this paper, we describe the Tennessee Technological University (TTU) Tapestry Workshop for high school (HS) teachers. The Tapestry Workshop initiative - a collaborative partnership between TTU, the University of Virginia (UVA) and HS teachers - shares strategies, practices, and innovative ideas for teaching Computer Science (CS) effectively. This three-day professional development workshop utilized informational, technical, networking, activity-, and discussion-oriented sessions geared towards attracting and engaging a diverse body of CS students. The workshop was a worthwhile professional development activity for both the organizers and attendees and contributed to the initiation of a local HS CS program.	Weaving a tapestry: creating a satellite workshop to support HS CS teachers in attracting and engaging students	NA:NA:NA	2018
Lijun Ni:Mark Guzdial	Quality computer science (CS) teachers are critical for secondary computing education. In addition to increasing the number of high school (HS) CS teachers, there is a great need for supporting those teachers to grow and stay as committed, effective teachers. Recent literature on teacher education suggests that teachers' sense of commitment and (other aspects of) teaching profession is tightly linked with their teacher identity. However, the current educational system in the U.S. does not provide typical contexts for teachers to build a sense of identity as CS teachers. This study is intended to gain an initial understanding of CS teachers' perceptions about their own professional identity and potential factors that might contribute to these perceptions. Our findings indicate that current HS teachers teaching CS courses do not necessarily identify themselves as CS teachers. They have different perceptions related to CS teaching. Four kinds of factors can contribute to these perceptions: teachers' educational background and certification, CS curriculum and department hierarchy, availability of CS teacher community, and teachers' perceptions about the field of CS.	Who AM I?: understanding high school computer science teachers' professional identity	NA:NA	2018
Jodi Tims	NA	Session details: Paper: parallelism and concurrency	NA	2018
Dan Grossman:Ruth E. Anderson	We report on our experience integrating a three-week introduction to multithreading in a required data structures course for second-year computer science majors. We emphasize a distinction between parallelism and concurrency that teaches students to use extra processors effectively and enforce mutual exclusion correctly. The material fits naturally in the data structures course by having the same mix of algorithms, programming, and asymptotic analysis as the conventional, single-threaded part of the course. Our department has used this unit for 1.5 years and will do so indefinitely. We report feedback from students, multiple instructors for the course, and students in a later course that uses threads. We developed a full set of course materials that have been adapted for use by instructors in various courses at five other institutions so far.	Introducing parallelism and concurrency in the data structures course	NA:NA	2018
Brian W. Rague	Laboratory work in the CS classroom is intended to solidify essential concepts and core design principles. Because of recent advances and the widespread adoption of multicore technologies, one area of investigation that has become increasingly important across all levels of CS instruction is parallel computing. This paper describes the initial version of the Parallel Analysis Tool (PAT), a pedagogical tool designed to assist undergraduate students in visualizing concurrency and effectively connecting parallel processing to applied coding strategies. The PAT is a complete Java development environment, with an emphasis on (1) helping students to identify appropriate code locations where parallelization can be applied and (2) allowing students to subsequently examine the practical performance tradeoffs of these parallelization decisions in a laboratory setting. The Parallel Quotient (PQ), a fundamental dimensionless metric generated by the PAT, supports the student's conceptual understanding and analysis of the relative benefits of employing various parallel programming strategies.	Exploring concurrency using the parallel analysis tool	NA	2018
Elizabeth Shoop:Richard Brown:Eric Biggers:Malcolm Kane:Devry Lin:Maura Warner	The reality of multicore machines as a standard and the prevalence of distributed cloud computing has signaled a need for parallel and distributed computing to become integrated into the computer science curriculum. At the same time, operating system virtualization has become a common technique with open standard tools available to any practitioners. Virtual machines (VMs) installed on available computer lab resources can be used to simulate high-performance cluster computing environments. This paper describes two such virtual clusters in use at small colleges, demonstrates their effectiveness for parallel computing education, and provides information about how to obtain the VMs for use in an educational lab setting. We have used these clusters to introduce parallelism into several courses in our undergraduate curriculum.	Virtual clusters for parallel and distributed education	NA:NA:NA:NA:NA:NA	2018
Chris Lupo:Zoe J. Wood:Christine Victorino	Massively parallel Graphics Processing Unit (GPU) hardware has become increasingly powerful, available and affordable. Software tools have also advanced to the point that programmers can write general purpose parallel programs that take advantage of the large number of compute cores available in the hardware. With literally hundreds of compute cores available on a single device, program performance can increase by orders of magnitude. We believe that introducing students to the concepts of parallel programming for massively parallel hardware is of increasing importance in an undergraduate computer science curriculum. Furthermore, we believe that students learn best when given projects that reflect real problems in computer science. This paper describes the experience of integrating two undergraduate computer science courses to enhance student learning in parallel computing concepts. In this cross teaching experience we structured the integration of the courses such that students studying parallel computing worked with students studying advanced rendering for approximately 30% of the quarter long courses. Working in teams on a joint project, both groups of students were able to see the application of parallelization to an existing software project with both the benefits and complications exposed early in the curriculum of both courses. Motivating projects and performance gains are discussed, as well as student survey data on the effectiveness of the learning outcomes. Both performance and survey data indicate a positive gain from the cross teaching experience.	Cross teaching parallelism and ray tracing: a project-based approach to teaching applied parallel computing	NA:NA:NA	2018
Cyndi Rader	NA	Session details: Paper: mobile computing	NA	2018
Paul E. Dickson	Mobile application development is a hot topic in computer science education, and debate rages over which platform to develop on and what software to use for development. Cabana is a web-based application designed to enable development on multiple mobile platforms and to make application development easier. It uses an approach to application programming based on a wiring diagram that is supplemented with the ability to program directly using JavaScript. It is an ideal choice for application development in introductory computer science courses and for upper-level courses where the focus is on application design and not application programming. This paper introduces Cabana and describes its use in two different computer science courses.	Cabana: a cross-platform mobile development system	NA	2018
Victor Paul Pauca:Richard T. Guy	Socially relevant computing has recently been proposed as a way to reinvigorate interest in computer science. By appealing to students' interest in helping others, socially relevant computing aims to give students life-changing experiential learning not typically achieved in the classroom, while providing software that benefits society at large. For the last two years, the Wake Forest University Computer Science Department has been using mobile device programming, agile methods, and real-world, socially relevant projects for teaching software engineering in a liberal arts Computer Science curricula. We report on the teaching methods, student experiences, and products delivered by this approach. In particular, one of these products, Verbal Victor, is now a commercial and social entrepreneurship success in the field of assistive technology for communication disabilities.	Mobile apps for the greater good: a socially relevant approach to software engineering	NA:NA	2018
Derek Riley	In this work an approach employing the Android mobile phone platform in an upper division computer science course to teach Java programming and other advanced computer science topics is presented. Mobile phones are growing influences in the computing market, but their strengths and popularity are rarely exploited in computer science classrooms. The aim of the course is to harness this enthusiasm to improve fluency in the Java language to afford an opportunity to learn how to work on large, complex projects and to enhance the students' preparedness for the job market. The ideas presented in this work could be adapted for improving learning in many courses across the computing curriculum.	Using mobile phone programming to teach Java and advanced programming to computer scientists	NA	2018
Anthony Allevato:Stephen H. Edwards	Making computer science assignments interesting and relevant is a constant challenge for instructors of introductory courses. Android has become popular in these courses to take advantage of the increasing popularity of smartphones and mobile "apps." This has been shown to increase student engagement but it is only the first step, and we must continue to provide support for teaching methodologies that we have used in the past, such as test-driven development and automated assessment. We have developed RoboLIFT, a library that makes unit testing of Android applications approachable for students. Furthermore, by supporting existing automated grading techniques, we are able to sustain large student enrollments, and we evaluate the effects that using Android has had on student performance.	RoboLIFT: engaging CS2 students with testable, automatically evaluated android applications	NA:NA	2018
Demian Lessa	NA	Session details: Paper: visualization	NA	2018
James D. Teresco	It is often a challenge to find interesting and appropriate data sets to use as examples to demonstrate graph data structures and algorithms. Goals for the data are often conflicting. The data should include examples small enough to work through in a class example by hand, but some large enough to demonstrate important behaviors of a structure or algorithm. Data should be freely available in a convenient format and should have some real-world relevance. Visualization of the data and results computed from it is helpful. This paper describes a collection of graph data sets generated from the Clinched Highway Mapping Project's highway data and some examples of their use in undergraduate courses on data structures and algorithms. The source data, the process used to convert the data into a more useful format, some examples of its use, and a visualization tool using the Google Maps API, are described.	Highway data and map visualizations for educational use	NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	This paper presents the initial stages of a teaching tool named iSketchmate, intended for instructor use during lecture. iSketchmate allows users to create and manipulate splay trees through an animated GUI. It improves upon existing tools by providing (1) the ability to begin with any user-defined tree, (2) a history mechanism so tree operations can be repeated or changed, and (3) finer-grained animation within each operation so instructors may give further descriptions at intermediate steps within any given operation. Experiments showed iSketchmate users could produce significantly more diagrams and these diagrams were significantly more accurate than those made with pencil and paper.	Experiments with algorithm visualization tool development	NA:NA:NA	2018
Sarah Buchanan:Brandon Ochs:Joseph J. LaViola Jr.	We present CSTutor, a sketch-based interface designed to help students understand data structures. It currently supports Linked Lists, Binary Search Trees, AVL Trees, and Heaps, and creates an environment in which a user's sketched diagram and code are combined seamlessly. In each of the data structure modes, the user can naturally sketch a data structure on the canvas just as they would on the white board. CSTutor analyzes the user's diagrams in real time, and automatically generates code in a separate code view to reflect any changes the user has made. Additionally, the code can also be edited and any new code changes animate the data structure drawn on the canvas. The connection between the data structure drawn on the canvas and the code implementation is intended to bridge the gap between the conceptual diagram of a data structure and the actual implementation. We also present the results of a perceived usefulness survey. The results of the study indicate that the majority of students would find CSTutor helpful for learning data structures.	CSTutor: a pen-based tutor for data structure visualization	NA:NA:NA	2018
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene	This paper describes a visualization tool ECvisual that helps students understand and instructors teach elliptic curve based ciphers. This tool permits the user to visualize elliptic curves over the real field and over a finite field of prime order, perform arithmetic operations, do encryption and decryption, and convert plaintext to a point on an elliptic curve. The demo mode of ECvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in finite field computations, encryption, decryption and plaintext conversion. The user may compute the output for each operation check each answer for correctness. This helps students understand the primitive operations and how they are used in an elliptic curve cipher. The opportunity for self-study provides an instructor greater flexibility in selecting a lecture pace for this detail-filled material. Classroom evaluation was positive and very encouraging.	ECvisual: a visualization tool for elliptic curve based ciphers	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Rediscovering the passion, beauty, joy, and awe: making computing fun again	NA	2018
Daniel D. Garcia:Barbara Ericson:Joanna Goode:Colleen Lewis	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following four SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: "What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. "What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. "How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over. Some point to "the Facebook Factor" as the source of inspiration for many young students, claiming this is a "Sputnik moment". Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). At recent sessions, we've shifted from that "breadth-first" model to a "depth-first" one. This year we have invited three educators who have worked tirelessly toward broadening participation of computing to underrepresented groups. The hope with this panel is to be able to explore best practices in outreach, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 5	NA:NA:NA:NA	2018
Helen Hu	NA	Session details: Special session	NA	2018
Helen H. Hu:Clifton Kussmaul	POGIL (Process Oriented Guided Inquiry Learning) is a type of learning based on the principle that students learn more when they construct their own understanding. Rather than teaching by telling, POGIL instructors provide activities that guide students to discover concepts on their own. Students work in groups, encouraging them to discuss their findings with their peers. Not only do students learn the material better, but the very process of discovery teaches them to be better problem solvers. This special session will provide SIGCSE attendees the opportunity to experience a POGIL activity for themselves. The presenters will share guided inquiry activities tested in our classrooms. We will discuss ways that POGIL may be used to transform computer science classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Promoting student-centered learning with POGIL	NA:NA	2018
Blair Taylor	NA	Session details: Special session	NA	2018
Blair Taylor:Matt Bishop:Diana Burley:Steve Cooper:Ron Dodge:Robert Seacord	Software is critical to life in the 21st century. It drives financial, medical, and government computer systems as well as systems that provide critical infrastructures in areas such as transportation, energy, networking, and telecommunications. As the number and severity of attacks that exploit software vulnerabilities increase, writing reliable, robust, and secure programs will substantially improve the ability of systems and infrastructure to resist such attacks. Education plays a critical role in addressing cybersecurity challenges of the future, such as designing curricula that integrate principles and practices of secure programming into educational programs. To help guide this process, the National Science Foundation Directorates of Computer and Information Science and Engineering (CISE) and Education and Human Resources (EHR) jointly sponsored the Summit on Education in Secure Software (SESS), held in Washington, DC in October, 2010. The goal of this session is to share some of the key findings and challenges identified by the summit and to actively engage the community in the discussions. Each of the speakers participated in the summit and brings a unique viewpoint to the session.	Teaching secure coding: report from summit on education in secure software	NA:NA:NA:NA:NA:NA	2018
Nanette Veilleux	NA	Session details: Paper: attracting majors	NA	2018
Mike Richards:Marian Petre:Arosha K. Bandara	In this paper, we describe a new undergraduate module for novice students conducted entirely through distance learning: My Digital Life (TU100). The module has been designed to lower the barriers to creating programs that interact with the world; TU100's materials have been designed to excite, encourage, reassure and support learners who explore the novel topic of ubiquitous computing through playful experimentation. It introduces the fundamentals of computing by giving students the capability for programming a device, the SenseBoard, which has built-in input/output and sensors. Programming is done in Sense, an extension of Scratch, which scaffolds programming and reduces the syntax burden. TU100 has taken inspiration from childhood learning and commercial product design to produce compelling, yet academically rigorous study materials.	Starting with Ubicomp: using the senseboard to introduce computing	NA:NA:NA	2018
Michael Haungs:Christopher Clark:John Clements:David Janzen	Many computer science programs suffer from low student retention rates. At Cal Poly San Luis Obispo, academic performance and retention rates among first-year computer science students are among the lowest on campus. In order to remedy this, we have developed a new CS0 course featuring different "tracks" that students can choose from (e.g. robotics, gaming, music, mobile apps). This allows students to learn the basics of programming, teamwork, and college-level study in a domain that is of personal interest. In addition, the course relies on classic Project-based Learning (PBL) approaches as well as a focus on both academic and non-academic factors shown to increase student retention. Initial assessment demonstrates positive results in the form of increased academic performance in post CS0 courses and student retention.	Improving first-year success and retention through interest-based CS0 courses	NA:NA:NA:NA	2018
Sara Sprenkle:Shannon Duvall	Low undergraduate enrollments in computer science will not meet the future demand of employers. Some reasons for the low enrollments are computer science's nerdy image, lack of understanding of the field, and low motivation for learning programming. We propose to change the image of computer science by exposing students to applications of computing and its impact on their lives through reading and discussing recent news articles in 15 minutes of class. We call this component of our courses the Broader Issues in computer science. In this paper, we present our motivation for the Broader Issues component, how we implemented the component in CS0 and CS1 courses, and our evaluation of the component, including student reactions to and impact of the component.	Reshaping the image of computer science in only fifteen minutes (of class) a week	NA:NA	2018
William Mongan	NA	Session details: Paper: OS and distributed computing	NA	2018
Ariel S. Rabkin:Charles Reiss:Randy Katz:David Patterson	We describe our experiences teaching MapReduce in a large undergraduate lecture course using public cloud services. Using the cloud, every student could carry out scalability benchmarking assignments on realistic hardware, which would have been impossible otherwise. Over two semesters, over 500 students took our course. We believe this is the first large-scale demonstration that it is feasible to use pay-as-you-go billing in the Cloud for a large undergraduate course. Modest instructor effort was sufficient to prevent students from overspending. Average per-pupil expenses in the Cloud were under $45, less than half our available grant funding. Students were excited by the assignment: 90% said they thought it should be retained in future course offerings.	Experiences teaching MapReduce in the cloud	NA:NA:NA:NA	2018
Barry L. Kurtz:James B. Fenwick, Jr.:Philip Meznar	Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." The programming microlab approach was developed for a distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid). Since that time we have developed logical microlabs where students solve conceptual problems that do not involve programming. These are integrated into a Microlab Learning Cycle. We want our microlabs to be usable with a wide variety of computing devices, including tablets. After experimenting with different development environments we have adopted the Google Web Toolkit (GWT). After presenting the current status of our activities, we discuss future directions for microlab development. This work is supported, in part, by three National Science Foundation grants.	Developing microlabs using Google web toolkit	NA:NA:NA	2018
Jeremy Andrus:Jason Nieh	The computing landscape is shifting towards mobile devices. To learn about operating systems, it is increasingly important for students to gain hands-on kernel programming experience in these environments, which are quite different from traditional desktops and servers. We present our work at Columbia University to teach operating systems using Android, an open, commercially supported software platform increasingly used on mobile and embedded devices. We introduce a series of five Android kernel programming projects suitable for a one semester introductory operating systems course. Each project teaches a core operating system concept infused with Android or mobile device specific context, such as Android specific process relationships, use of sensors, and design considerations for resource constrained mobile devices. We also introduce an Android virtual laboratory based on virtual appliances, distributed version control, and live demonstrations which gives students hands-on Android experience, with minimal computing infrastructure. We have used these Android kernel programming projects and the Android virtual lab to teach an introductory operating systems course. Although this was our first time teaching the course using Android, over 80% of students surveyed enjoyed using Android and the majority of students preferred Android to traditional desktop development.	Teaching operating systems using android	NA:NA	2018
Michael Hewner	NA	Session details: Paper: curricular innovations and research	NA	2018
Christo Dichev:Darina Dicheva	Open content and open access to resources are important factors in the innovation of Computer Science education. This paper presents a study aimed at gaining an understanding of the needs of Computer Science educators in terms of Open Educational Resources (OER): what kind of resources they need, when they need them, how they use them, and what are the barriers and the enablers for using OER The results of the study are compared and analyzed in the context of the popular OER sites. The work contributes to the research on OER utilization and discovery.	Open educational resources in computer science teaching	NA:NA	2018
Yolanda Jacobs Reimer:Katherine Cennamo:Sarah A. Douglas	The goal of our research and teaching collaboration has been to learn more about how key aspects of pedagogy commonly incorporated in architecture and industrial design classes might positively impact the teaching of user interface (UI) design within a standard computer science curriculum. Toward that end, we studied a number of studio design courses, developed a set of curriculum guidelines, and analyzed the effectiveness of these guidelines as implemented in a UI design course. We discovered three emergent themes: 1) students need early and constant reminders that design is an iterative process involving user feedback and testing; 2) instructor modeling is critical; and 3) technology needs to be carefully managed at critical junctures throughout the class.	Emergent themes in a UI design hybrid-studio course	NA:NA:NA	2018
Dimitrios Charalampidis:James Haralambides	Traditional curricular structures can be fragmented in the sense that course inter-relationships or links between theories, methodologies, and practices, are not immediately recognized by the students. The completion of the course puzzle and the integration of course knowledge usually become evident only after graduation. In this paper, we describe a course/lab implementation that has offered students a unique opportunity to experience the full spectrum of course elements, namely, fundamentals of theory, algorithmic design, hardware design and simulation, and implementation and testing on programmable logic devices all within a single framework. The course/lab design has been a collaborative effort between the Dept. of Electrical Engr. (EE) at the University of New Orleans (UNO) and the Dept. of Math and Computer Science (CS) at Barry University (BU). This has helped ensure that the course/ lab offerings can be implemented successfully in diverse environments.	A multilevel, multidimensional undergraduate course and lab experience on embedded multimedia systems	NA:NA	2018
Yana Kortsarts	NA	Session details: Paper: CS education research	NA	2018
Elizabeth Ann Patitsas:Steven Andrew Wolfman	We report on best practices we have established to teach first-year computer science students in closed laboratories, founded on over three years of action research in a large introductory discrete mathematics and digital logic course. Our practices have resulted in statistically significant improvements in student and teaching assistant perception of the labs. Specifically, we discuss our practices of streamlining labs to reduce load on students that is extraneous to the lab's learning goals; establishing a positive first impression for students and TAs in the early weeks of the term; and effectively managing the teaching staff, including weekly preparation meetings for TAs using and a gradual, iterative curriculum development cycle that engages all stakeholders in the course.	Effective closed labs in early CS courses: lessons from eight terms of action research	NA:NA	2018
Joel C. Adams:Andrew R. Webster	Drag-and-drop learning environments like Alice (alice.org) and Scratch (scratch.mit.edu) eliminate syntax errors, making them attractive as ways to introduce programming concepts to students. Alice is closely associated with storytelling, Scratch was designed for creating music videos, and both can be used to create games. Having had students create each kind of project, we began to wonder: Do students learn different things creating games compared to music videos or stories? What programming constructs do students actually use (and hence learn well enough to be able to apply)? To answer these questions, we conducted a quantitative analysis of a collection of over 300 different student projects created using these tools. In examining different kinds of projects, we found significant differences in how frequently the students creating those projects used variables, if statements, loops, and dialog constructs.	What do students learn about programming from game, music video, and storytelling projects?	NA:NA	2018
Adam Anthony:Mitch Raney	Time to completion is a major factor in determining the total cost of a college degree. In an effort to reduce the number of students taking more than four years to complete a degree, we propose the use of Bayesian networks to predict student grades, given past performance in prerequisite courses. This is an intuitive approach because the necessary structure of any Bayesian network must be a directed acyclic graph, which is also the case for prerequisite graphs. We demonstrate that building a Bayesian network directly from the prerequisite graph results in effective predictions, and demonstrate a few applications of the resulting network in areas of identifying struggling students and deciding upon which courses a department should allocate tutoring resources. We find that many of our observations agree with what has long been considered conventional wisdom in computer science education.	Bayesian network analysis of computer science grade distributions	NA:NA	2018
Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Fernanda Viégas:Martin Wattenberg	Data visualization has historically been accessible only to the elite in academia, business, and government. It was "serious" technology, created by experts for experts. In recent years, however, web-based visualizations--ranging from political art projects to news stories--have reached audiences of millions. What will this new era of data transparency look like--and what are the implications for technologists who work with data? To help answer this question, we report on recent research into public data analysis and visualization. Some of our results come from Many Eyes, a "living laboratory" web site where people may upload their own data, create interactive visualizations, and carry on conversations. We'll also show how the art world has embraced visualization. We'll discuss the future of visual literacy and what it means for a world where visualizations are a part of political discussions, citizen activism, religious discussions, game playing, and educational exchanges.	Through the looking glass: talking about the world with visualization	NA:NA	2018
John Barr:Ananda Gunawardena	This workshop introduces an innovative social collaboration tool called Classroom Salon (CLS). Developed at Carnegie Mellon University, CLS is a combination of electronic books, social networks, and analytic tools. With CLS, instructors can upload documents, create social groups, and monitor student activities. Students can annotate documents, answer questions, and communicate in a social networks context. Students learn through participation in social networks while instructors use the tools built into CLS to easily and effectively analyze their participation. The workshop covers extant social networks, introduces CLS web-based software (nothing to install) and demonstrates the use of CLS to help students master critical skills such as code review, debugging, and reading documentation. Participants will create Salons, learn how to use them in their courses, and learn how to use the built-in tools to analyze student activities. A laptop with wifi is mandatory.	Using social networking to improve student learning through classroom salon (abstract only)	NA:NA	2018
Aman Yadav:John Tim Korb	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of educational research; (2) learn about educational research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests.	Challenges and opportunities in conducting educational research in the computer science classroom: how to collect empirical evidence to assess whether students really learned (abstract only)	NA:NA	2018
Joseph E. Hummel	As hardware designers turn to multi-core CPUs and GPUs, software developers must embrace parallel programming to increase performance. No single approach has yet established itself as the "right way" to develop parallel software. However, C++ has long been used for performance-oriented work, and it's a safe bet that any viable approach involves C++. This position has been strengthened by ratification of the new C++0x standard, officially referred to as "C++11". This workshop will introduce the new features of C++11 related to parallel programming, including type inference, lambda expressions, closures, multithreading support, and thread-local storage. The workshop will close with brief discussion of other technologies, including Intel TBB, ArBB, Cilk Plus, and Microsoft PPL, AAL, AMP. This is a laptop optional workshop.	C++11 in parallel (abstract only)	NA	2018
Stephen H. Edwards:Manuel A. Perez-Quinones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()). Laptop recommended.	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2018
Tom Reichlmayr	Over the past ten years Agile software development practices have grown in acceptance and have gained a solid foothold in commercial software development. Our students are entering the workforce with an increasing percentage of companies that are using Agile processes and practices in the development of their products and services. The most widely used Agile project management framework is Scrum. Scrum has a well defined approach for organizing and controlling a software development project. It is almost always implemented in combination with Agile software development practices, but is flexible enough to even be used for managing non-software projects. Selecting Scrum as the framework for student team projects has the advantage of introducing software process at a level of ceremony that both captures foundational software engineering practices and is manageable within the constraints of a class or capstone project. This workshop will introduce participants to the components of the Scrum framework with activities designed to demonstrate the flexibility of Scrum to support a diverse set of course learning outcomes at all levels of the curriculum. Laptop optional	Student scrums (abstract only)	NA	2018
Sue C. Fitzgerald:Guy-Alain Amoussou	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some expert opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don't's will be provided. The intended audience is faculty members at two-year and four year colleges and universities who wish to better understand the NSF review process and/or those who are seeking NSF funding in support of undergraduate education. Participants will include people with little or no proposal reviewing experience, novice proposal writers, and those with more experience who seek to improve their proposal writing and/or reviewing skills. Laptop optional.	Reviewing NSF proposals (abstract only): learn about effective proposal writing via the review process	NA:NA	2018
Michael Rogers:Mark Goadrich	This workshop is designed for faculty, considering teaching a course in mobile app development, who are unsure as to whether they should use iOS, Android, or both. To help them make an educated decision, in this workshop participants will build one app, to implement the game Pig, in both platforms. By so doing, they will be able to make a head-to-head comparison of the respective development environments, languages, and frameworks, guided by experienced instructors. Participants will need to bring (or share) a recent-vintage MacBook Pro / MacBook Air, with Xcode, Eclipse, and appropriate SDKs, installed prior to the workshop. Details, including installation instructions, may be found at androidios.goadrich.com. Laptop Required.	A hands-on comparison of iOS vs. android (abstract only)	NA:NA	2018
Joseph Mertz:Scott McElfresh:Steven Andrianoff:Jennifer Dempsey	Service learning is a great idea, but can be fraught with problems. We have taken an alternative to the project-course approach. Instead of team-based system-development, we use a student-consultant model. Students individually consult with a nonprofit. Each student leads a small technology project that brings about sustainable change in an organization, while developing analysis, planning, and communication skills. One instructor can manage 30 clients a semester, and we have had nearly 400 to date. Our clients are happy and recruit others. In this session we will share our tricks and help attendees adapt them to their situations: managing a large number of partnerships, helping students develop leadership and communication skills, and assessing their performance. A student presenter will describe her consulting experience.	Killing 3 birds with one course: service learning, professional writing, and project management (abstract only)	NA:NA:NA:NA	2018
Tim Bell:Daniela Marghitu:Lynn Lambert	You've been asked to talk to an elementary or high school class about Computer Science, but how can you ensure that the talk is engaging? Or perhaps you're trying to introduce a concept from Computer Science to a school group, but you want a fun way to get the class engaged. This workshop is a hands-on introduction to Computer Science Unplugged (www.csunplugged.org), a widely used set of kinesthetic, fun activities that cover many core areas of computer science without using high technology. We will explore how to use the activities in a variety of situations, including combining them with robotics activities, and explore some novel applications. Attendees will receive a CD with a copy of a handbook for teachers and a collection of videos demonstrating the activities.	Computer science unplugged, robotics, and outreach activities (abstract only)	NA:NA:NA	2018
William M. Jones:D. Brian Larkins	One of the challenges in modern curriculum design is balancing between breadth and depth of topics while simultaneously reinforcing the interconnections among topics in the field. To address these challenges, faculty are often forced to approximate real-world systems, sometimes at the expense of any hands-on experience. We have integrated field-programming gate array (FPGA) systems first used in our hardware-based courses into several higher-level systems and applications courses. This allows us to leverage student familiarity with a hands-on, flexible hardware platform and also strengthen the relationships between different subfields within computer science. In this workshop, we present participants with guided hands-on activities for making use of FPGAs in common computer science courses such as digital logic design, computer organization and programming, and compiler construction. Laptop required.	Introduction to using FPGAs in the computer science curriculum (abstract only)	NA:NA	2018
Janet E. Burge:Paul V. Anderson:Gerald C. Gannod:Michael Carter:Deanna Dannels:Margaret Heil:Mladen Vouk	To be successful, CS and SE graduates need strong communication skills (writing, speaking, and teaming), particularly within their discipline. Students exercise these skills during their classes but are not always given explicit domain-specific instruction on these skills, instead relying on instruction provided outside the program. CS and SE faculty are not always comfortable in evaluating these aspects of their assignments and are often unhappy with the results. In this workshop we will lead sessions on teaching writing, speaking, and teaming; situating assignments in workplace-scenarios (to motivate students); and writing communication rubrics that convey faculty expectations to students and support evaluation of student work. For more information, see www.muohio.edu/sigcse_workshop11. A laptop is recommended but not mandatory for this workshop.	Helping students become better communicators (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Michael Ferguson:Julian Mason:Sharon Gower Small:Zachary Dodds	The Microsoft Kinect and Willow Garage's Robot Operating System (ROS) are changing the way robots are developed. Together, these tools can enable today's CS educators to provide richer and more research-representative experiences with robots and perception. This hands-on workshop will introduce ROS and showcase two pilot courses taught using ROS and the Kinect. Four 20-minute talks will intersperse with participants' hands-on development of Python programs on low-cost Kinect-equipped robots and the ARDrone quadcopter. This workshop is intended for all college-level CS educators interested in robotics or embodied AI. First-time ROS/Kinect users are particularly welcome! Laptops and robots will be provided. See http://www.ros.org/wiki/Courses/sigcse2012. Laptops optional.	ROS for educators: teaching with the robot operating system and Microsoft Kinect (abstract only)	NA:NA:NA:NA	2018
Zachary Kurmas:James Vanderhyde	Participants will have fun learning and playing relatively unknown board games that are especially suitable for programming projects. We will present games where (1) all players can view the same screen, (2) the board is reasonably simple to program, and (3) there are several elements of the game that relate strongly to a common CS 1, CS 2, or discrete math topic. After we explain the rules and highlight the CS-related elements of the games, participants will have the opportunity to play the games, ask questions, and suggest rule variations that will improve the resulting programming project. See http://www.cis.gvsu.edu/~kurmasz/GamesWorkshop/ for more details and a list of games that may be presented. Laptop Optional.	Board game project ideas for CS 1 and CS 2 (abstract only)	NA:NA	2018
David Hyland-Wood:Marsha Zaidman	The Web has created a global information space of linked documents. The Semantic Web creates an information space of linked data from multiple sources. Information can be mined from the interlinking of available datasets by a distributed query language known as SPARQL, the SQL equivalent for the Semantic Web. Participants will understand and appreciate the role of linked data on the Semantic Web; be able to model, represent, and interpret simple linked data applications; complete exercises that create simple Linked Data models; appreciate the benefits of Linked Data over relational database modeling; be aware of successful commercial applications of linked Data; be directed to resources that facilitate incorporation of this material into their courses. WiFi/Laptop Required.	A taste of linked data and the semantic web (abstract only)	NA:NA	2018
Michael Kölling:Neil Brown	The Microsoft Kinect is a sensor module that allows accurate tracking of humans moving in front of it. Greenfoot is an introductory Java programming environment that makes it easy to create animated graphical projects. By combining Greenfoot and the Kinect students can write programs where the user's body is used for input. Users interact with games by waving their hands, jumping, running, dancing, .... These kinds of programs are incredibly good fun and engage target groups who would not normally be interested in programming. The workshop is aimed at teachers of introductory programming courses (high school/university) who have some programming experience and want to incorporate new kinds of projects into their teaching. Laptop recommended but not required. Kinect hardware will be provided.	Teaching with greenfoot and the Kinect: a novel way to engage beginners (abstract only)	NA:NA	2018
David G. Kay	Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and "re-using" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required.	Intellectual property law basics for computer science instructors (abstract only)	NA	2018
Nikolai Tillmann:Jonathan de Halleux:Tao Xie:Judith Bishop	Pex4Fun (pexforfun.com) is a web-based serious gaming environment for teaching computing at many levels, from high school all the way through graduate courses. Unique to the Pex4Fun experience is a cloud-based program evaluation engine based on dynamic symbolic execution and SMT-solving, which provides customized feedback to the student and automated grading for the teacher. Thus, Pex4Fun connects teachers, curriculum authors, and students in a social experience, tracking and streaming progress updates in real time. In particular, Pex4Fun finds interesting and unexpected input values that help students understand what their code is actually doing. The real fun starts with coding duels where students write code to implement a teacher's specification. Pex4Fun finds any discrepancies in behavior between the student's code and the specification. Then based on the reported discrepancies, the student improves his or her code towards the specification. Pex4Fun can be used to develop interesting, engaging, and demanding class materials on mathematics, algorithms, programming languages, or problem solving in general. A teacher can use an integrated wiki to author these class materials for students to work through. This workshop involves creating and teaching course materials at Pex4Fun. Participants should bring a laptop computer. The intended audience includes all levels of CS educators who are interested in integrating educational technology in their teaching environments.	Teaching and learning computing via social gaming with Pex4Fun (abstract only)	NA:NA:NA:NA	2018
Mel Chua:Sebastian Dziallas:Heidi J.C. Ellis:Gregory W. Hislop:Karl R. Wurst	Participating in free and open source (FOSS) software communities provides students with authentic learning while supplying instructors with a wide variety of educational opportunities including coding, testing, documentation, professionalism and more. However, instructors may be unfamiliar with how FOSS communities work and therefore may be reluctant to involve students in such communities. This workshop is a subset of material used in Red Hat's Professors' Open Source Summer Experience (http://communityleadershipteam.org/posse) workshop, now in its third year of successfully providing a ramp to FOSS projects for instructors. These instructors have demonstrated success in involving their students in FOSS communities where students have contributed code, interface design, and more. Intended audience: Computing educators at the college or high school level interested in involving students in open source software projects in any capacity (testing, coding, documentation, design, project management, observational shadowing of a large-scale project, etc). The workshop may also be of interest to pre-high school computing educators and members of the open source community. No experience with open source communities or contribution is necessary.	Welcome to Makerland: a first cultural immersion into open source communities (abstract only)	NA:NA:NA:NA:NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	This workshop showcases a new approach to teaching CS1 using computational art as a context. Participants will be introduced to the Processing programming language and environment, designed for the construction of 2D and 3D visual forms. Its IDE is lightweight, but well-suited for the rapid prototyping needed for dynamic visual work. We hope to bring the excitement, creativity, and innovation fostered by Processing into the computer science education community. Instructors of all experience levels are welcome. Hands-on portion of the workshop will enable participants to explore Processing and create visual effects on the fly. Course materials and handouts detailing the software, curriculum, and teaching resources will be given out. All participants will need to bring their own laptops.	Computational art and creative coding: teaching CS1 with processing (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at the University of California, Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey-Lee:John Glick:Leo Porter:Beth Simon	We introduce participants to Peer Instruction (PI): an active learning technique applicable to the teaching of many subjects, including CS. In PI, Students work together to exchange perspectives and answer challenging conceptual questions, and are supported by short teaching segments. We will introduce and motivate PI, demonstrate its use in combination with a clicker system, and show that PI is much more than the use of clickers. Participants will work in groups to develop new PI questions addressing challenges to their students' learning, and discuss numerous pedagogical benefits conferred through PI. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer instruction in the CS classroom: a hands-on introduction (abstract only)	NA:NA:NA:NA:NA	2018
Martin L. Barrett:Steve Chenoweth:Larry Jones:Amine Chigani:Ayse Bener:Mei-Huei Tang	This workshop introduces software architecture concepts and their incorporation into computer science and software engineering curricula. Participants will learn techniques used in industry to specify quality attributes critical to architecture and use those attributes to drive the system structure using common architectural styles. Exercises will demonstrate these techniques and explore pedagogical uses of the techniques in CS and SE classes. Sample computer science curricula with courses that integrate workshop material will be presented. Presenters will lead a brainstorming session to help participants develop practical methods for using the material in their courses. Participants will become part of a community of educators sharing educational resources in software architecture.	Incorporating software architecture in the computer science curriculum (abstract only)	NA:NA:NA:NA:NA:NA	2018
Robert A. Chesebrough:Johnnie W. Baker	This workshop is inspired by Dan Grossman's SIGCSE 2011 workshop on Data Abstractions. We also review C/C++ conversions of the original Java-based materials and will also include material from the Parallel Algorithms course at Kent State. The workshop will appeal to data-structure and algorithms course instructors. Workshop topics will include divide and conquer approaches, work sharing concepts, and a scoped locking scheme in OpenMP for C++ classes. This material is driven via core data-structure examples (queues, sorting, reductions, etc.) and using a Fork/Join Framework found in OpenMP and Intel® Cilk Plus and Intel® Threading Building Blocks. Participants will write parallel programs and test them on the Intel® Many-core Testing Lab. Laptop Required. Laptop is required.	Parallelism and concurrency for data-structures & algorithms courses (abstract only)	NA:NA	2018
Monica Anderson:David Touretzky:Chutima Boonthum-Denecke	In this half-day tutorial, we will introduce the ARTSI "Robotics Roadshow-in-a-Box (RRIB)", a single point resource for those getting started in robotics outreach. The RRIB is a kit which contains robots, software and prepared materials for providing robotics workshops for middle and high school students that focuses on showing computer scientists as problem solvers and not just programmers through activities with a larger context. The RRIB fills a need for materials that are accessible to those who may have limited knowledge of robotics or limited experience in middle school outreach, whether that is undergraduate students or faculty researchers who might have limited outreach experience or preparation time. Laptop Required.	ARTSI robotics roadshow-in-a-box: turnkey solution for providing robotics workshops to middle and high school students (abstract only)	NA:NA:NA	2018
Kathi Fisler:Stephen Bloch	We present the Program by Design introductory CS curriculum through the lenses of graphics, animations, algebra, and data structures. Animations programming is popular for CS1, but many such curricula lack clean paths into CS2. Program by Design is different. Using and reinforcing concepts from algebra, students learn to write animations (including standard topics such as model/view separation and event-handling), then move seamlessly into working with structured data, lists, trees, and objects. The curriculum emphasizes design, testing, and writing maintainable programs, without losing the engagement of animations. The workshop uses lectures and hands-on exercises to provide high- school and college teachers an overview of the approach. See www.programbydesign.org. Laptop Optional.	Program by design: from animations to data structures (abstract only)	NA:NA	2018
Michelle Friend:Jeff Gray	Mobile phone programming can provide teens an authentic and engaging hook into computer science. With App Inventor, developed by Google and moved to MIT, programming Android apps is as easy as clicking blocks together. App Inventor has been used successfully in after school programs, roadshows, summer camps, teacher workshops, and computer science classrooms from middle school through college. Participants will get an overview of App Inventor including project ideas and sample student code, hear outreach planning suggestions, write programs, develop outreach plans, and see how the Java Bridge helps transition from App Inventor to Java. Please bring a laptop with App Inventor. Even the most time-stretched professor or teacher can encourage students in computer science with App Inventor.	CS outreach with app inventor (abstract only)	NA:NA	2018
Jason O. Hallstrom:Joe Hollingsworth:Joan Krone:Murali Sitaraman	Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can we teach them to apply these principles using modern software tools? Can this be accomplished without displacing existing content? In each case, the answer is a resounding yes - but it takes the right set of pedagogical principles, teaching tools, and classroom exercises. This hands-on laboratory will introduce a set of principles, tools, and exercises that have proven to work. By adopting one content module at a time, educators will better prepare students to reason rigorously about the software they develop and maintain. The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught - from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials. Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. A laptop is required to participate.	Making mathematical reasoning fun: tool-assisted, collaborative techniques (abstract only)	NA:NA:NA:NA	2018
Brian Harvey:Daniel Garcia:Josh Paley:Luke Segars	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses. It presents the programming environment used in two of the five initial AP CS Principles pilot courses. Snap! (Build Your Own Blocks) is a free, graphical, drag-and-drop extension to the Scratch programming language. Scratch, designed for 8-14 year olds, models programs as "scripts" without names, arguments, or return values. Snap! supports older learners (14-20) by adding named procedures (thus recursion), procedures as data (thus higher order functions) structured lists, and sprites as first class objects with inheritance. Participants will learn Snap! through discussion, programming exercises, and exploration. See http://snap.berkeley.edu for details. Laptop required.	Snap!: (build your own blocks) (abstract only)	NA:NA:NA:NA	2018
Marge M. Coahran:Janet Davis	This workshop will introduce a set of hands-on laboratory activities appropriate for a first Computer Organization course. Participants will work with real equipment: first implementing elementary digital circuits with TTL logic chips, and then programming AVR microcontrollers in assembly to drive fun accessories such as LEDs and speakers. Participants will not take equipment home afterwards, but will receive parts lists and vendor information. The workshop is intended for educators with little electronics background who are interested in incorporating electronics laboratories into their courses. Laptops (Linux, Mac, or Windows) will provide the programming environment for the AVRs. Free software will be available before the workshop. Participants will work in pairs. Laptop recommended.	Circuits and microcontrollers in computer organization laboratories (abstract only)	NA:NA	2018
Ariel Ortiz	Many instructors have already discovered the joy of teaching programming using the Python programming language. Now it's time to take Python to the next level. This workshop will introduce Django, an open source Python web framework that saves you time and makes web development fun. It's aimed at Computer Science instructors who want to teach how to build elegant web applications with minimal fuss. Django follows the Model-View-Controller (MVC) architectural pattern. Its goal is to ease the creation of complex, database-driven websites. Django emphasizes reusability and "pluggability" of components, rapid development, and the principle of DRY (Don't Repeat Yourself). Python is used throughout, even for settings, files, and data models. Topics that will be covered during the workshop include: setup and configuration, template language, and database integration through object-relational mapping. Participants should have some familiarity with Python, HTML and SQL. Laptop Required.	Web development with python and django (abstract only)	NA	2018
Richard Ladner:Karen Alkoby:Jeff Bigham:Stephanie Ludi:Daniela Marghitu:Andreas Stefik	Many wonderful enrichment programs have been created to introduce young people to computing, but with little attention to making them accessible to students with disabilities. In this workshop participants will learn from practitioners who have introduced computing and programming to young people with disabilities. They will also learn first-hand from students with disabilities about their needs in learning programming. There will be breakout sessions for participants to apply what they have learned to improve existing enrichment programs such as Alice, Arduino, Scratch, Kodu, App Inventor, Greenfoot, Lego Mindstorms, Processing, and Computer Science Unplugged.	Improving the accessibility of computing enrichment programs (abstract only)	NA:NA:NA:NA:NA:NA	2018
Samuel A. Rebelsky	Computer science teachers strive for new examples and problems to interest millenials. The Media Computation approach has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this workshop, we show how to go a step further and have write scripts and plug-ins in Python for open-source graphics programs such as the GNU Image Manipulation Program and Inkscape, open source alternatives to Photoshop and Illustrator. With this approach, students not only make images, they also write filters and features that they can share with others, even with non-programmers. For example, students have written filters that "fractalize" vector graphics or that turn images into something that looks like stained glass. The ability to make programs that others will use is particularly motivational. We will explore ways in which students can interact with both Inkscape and GIMP, from working with interactive programming consoles to writing plug-ins that can easily be shared with others. We will also consider the ways in which different models of image making can be used to motivate the major programming paradigms. The approach has been used with Python, Scheme, and C and for everything from a one-week module to a full course.	Enhancing student interest by extending graphics applications (abstract only)	NA	2018
Nikolai Tillmann:MichaB Moskal:Jonathan de Halleux:Manuel Fähndrich:Tao Xie	We are experiencing a technology shift: Powerful and easy-to-use touchscreen-based mobile devices like smartphones and tablets are becoming more prevalent than traditional PCs and laptops. We propose that computer programming, and thus teaching of programming, can and should be done directly on the mobile devices themselves, without the need for a separate PC or laptop to write code. In this workshop, participants will learn about developing software directly on smartphones without a PC using TouchDevelop, a novel application creation environment on Windows Phone 7 from Microsoft Research (http://touchdevelop.com). Its typed, structured programming language is built around the idea of only using a touchscreen as the input device to author code. A semi-structured code editor makes it easy to navigate between different syntax elements. By inferring types and mining previously written programs, the editor provides highly predictive auto-completion suggestions to the user. The language provides built-in primitives that make it easy to access the rich sensor data available on a mobile device. Programming on mobile devices engages students in new ways, allowing them to access and manipulate programmatically their most personal digital data such as pictures, videos, and music. Programming on smartphones which we carry around with us at all times means instant gratification for students, as they can show their games and applications to their friends, and it means that students can do their homework or additional practicing at all times. For this workshop, a laptop is optional; Windows Phone 7 devices will be provided for exercises.	Engage your students by teaching programming using only mobile devices with TouchDevelop (abstract only)	NA:NA:NA:NA:NA	2018
Richard A. Brown:Elizabeth Shoop	Parallel computing with more and more cores is here to stay. This workshop presents four independent, class-tested, primarily hands-on modules for incrementally adding parallelism in undergraduate CS courses, each requiring 1 to 3 class days and versatile for diverse courses and curricula: parallelizing loops and sharing memory on Intel's Manycore Testing lab (for a second CS course or for computer organization); parallel web crawler in Java or C++ (second CS course); parallel sorting (algorithms); À- calculus theory for communicating sequential processes (theory of computation). Workshop materials provided, drawn from CSinParallel.org. Intended audience: CS instructors. Laptop recommended (Windows, Mac, Linux).	CS in parallel: modules for adding parallel computing to CS courses, from CS2 to theory of computation (abstract only)	NA:NA	2018
Mark Guzdial:Barbara Ericson	Everybody teaches linked lists, with homework like implementing duplicate, weave, and reverse. When those nodes contain strings or numbers, these are pretty boring assignments. When these nodes contain music (MIDI), these operations are composing music, which can then be played. This workshop shows how to use music, images, and sounds to teach the basic data structures, including linked lists, circular linked lists, stacks, queues, and trees. These pieces can then be tied together through the use of simulations to generate animated movies. We will be using Java, though many of the methods can also be used in Python.	Listening to linked lists: using multimedia to learn data structures (abstract only)	NA:NA	2018
Raja Sooriamurthi:Nickolas Falkner:Zbigniew Michalewicz	Puzzle-based learning (PBL) is an emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles, games, and general problem solving strategies. Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course. Currently 40+ institutions around the world are offering courses based on PBL. More details are available at www.PuzzleBasedLearning.edu.au. Laptop optional.	Puzzle-based learning: introducing critical thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA	2018
Carl Alphonce:Joseph LeGasse	Feedback serves a critical role in the learning process. For formative assessment to be effective in supporting a student's learning, feedback must be provided in a timely fashion (so a student can derive benefit while engaging in the learning activity), it must be consistent across multiple submissions of the same student as well as across submissions by different students, and it must be of high quality (i.e. it must give students guidance as to how to improve their submission). In this poster we present a small library of Java classes which aid the writing automated tests for assessing the design of student programming exercises. Through its use of reflection we can allow more free-form assignments, and can provide feedback on both program functionality and design.	Using reflection to enhance feedback for automated grading (abstract only)	NA:NA	2018
Kai Qian:Dan Lo:Yi Pan:Yanqing Zhang:Xiaolin Hu:Liang Hong	Advanced mobile devices such as smart phones and tablets have become a part of daily lives for digital native students today. The integration of mobile computing with these devices into multiple courses in computer science (CS) curriculum will connect the education to leading-edge information technologies, motivate and engage students in CS learning, fill in the gap with IT industry needs, and help faculties build strong expertise on modern mobile computing. Meanwhile, the hands-on experience with mobile computing will supply the students with a better understanding of the classical CS concepts. In this paper, we propose to develop a cross-curriculum labware based on the Android platform to introduce the knowledge and practice of a wide range of CS subjects with smart phones and tablets.	The cross-curriculum mobile computing labware for CS (abstract only)	NA:NA:NA:NA:NA:NA	2018
Elizabeth V. Howard:Jill E. Courte:Donna M. Evans:Marilyn Anderson	Please be patient with us as we move to our new computer system' is a common sign at healthcare providers' offices. Mandates from the federal government are merging the fields of healthcare and information technology and experts predict a significant increase in jobs related to Health Information Technology (HIT). In this poster session, we will share our new HIT curriculum (Bachelor of Science in Information Technology with a major in Health Information Technology) along with the process followed to develop this curriculum. Developed in collaboration with nursing educators and in consultation with HIT professionals, this unique multi-disciplinary program blends technology and healthcare to prepare students for a wide variety of opportunities in the evolving field of HIT.	Merging healthcare and technology: a multi-disciplinary health information technology (HIT) curriculum (abstract only)	NA:NA:NA:NA	2018
William M. Mongan	We describe our experience in teaching an integrated module in networks, mathematics, and cryptography, suitable for high school students. The objective is to design a lesson with minimal prerequisite background and a varying degree of programming experience, with an aim towards exciting students early on about computing. Students create and implement a chat program protocol and a minimal RSA algorithm implementation, and implement a brute force algorithm to recover each other's private key. Depending on student experience, scaffolding can be provided to assist with the programming, and advanced topics are possible as extensions to this lesson. We hope that this lesson can be taught as an interdisciplinary unit in math and computer science classes.	An integrated introduction to network protocols and cryptography to high school students (abstract only)	NA	2018
Xuzhou Chen:Nadimpalli V.R. Mahadev	In this paper, we describe an approach of using a PC based robot (PCRob) for teaching advanced topic course in pattern recognition and computer vision. Unlike most of the robots where only the microprocessors are used, the robot we design and build uses mini PC and off-the-shelf peripherals to provide the computing power in order to process some functionalities such as image processing and pattern recognition.	A PC based robot for learning computer vision and advanced programming (abstract only)	NA:NA	2018
Shereen Khoja:Juliet Brosing:Camille Wainwright:Jeffrey Barlow	Girls Gather for Computer Science (G2CS) is an innovative computer science summer camp for middle school girls. The goal of the camp is to change how girls experience computer science by placing them in an all-female environment where they explore computer science in a fun and interactive way. Girls are exposed to female role models while middle school teachers and parents are educated about the issues facing women in technology fields. Each week of the camp has a different theme: web development, robotics, programming with Alice, and computer hardware and the camp includes field trips to local technology companies such as Intel and Vernier Software & Technology. Campers use a closed social networking site to communicate and share ideas, and continue to use this site after the camp is over. This provides the girls with a supporting community that will continue to foster their interest in computer science even after the camp has ended. Oregon Public Broadcasting (OPB) partnered with us to produce the camp website, a 10 minute video of the camp, 5 interviews with professional female computer scientists, and online interactive games that teach computer science concepts. The project includes a ten-year study to follow the progress of the campers. Initial assessment of G2CS shows that it had a positive and significant impact on the participants.	Girls gather for computer science (G2CS) (abstract only)	NA:NA:NA:NA	2018
Deborah A. Fields:Kristin A. Searle:Yasmin B. Kafai:Hannah S. Min	One challenge in assessing students' engineering and programming designs is that the problems are difficult to evaluate with pencil and paper. Projects with multiple types of designs (circuitry, coding, aesthetics) can go wrong in many ways (Resnick, Berg, & Eisenberg, 2000). Identifying, debugging, and solving these problems is at the crux of being able to design computational and material projects. In this poster we analyze high school students' collaborative engagement with a series of isomorphic deconstruction kits (debuggems) developed to assess their learning of coding, circuit design and creation (through sewing) in e-textiles with the LilyPad Arduino. The debuggem was designed based on our observations of common challenges that students faced when designing their own e-textiles projects during 4-week workshops. We videotaped ten students collaborating in pairs as they worked to turn on LEDs in a project strategically designed with problems in poor crafting, non-functional circuitry design and insufficient coding. Analysis includes what problems students struggled the most to solve and common types of problem solving strategies used. The debuggem was successful in that it revealed common problems, allowed for multiple solutions, and capitalized on collaborative learning. As hoped, all students solved most problems but no group solved every problem in the time allotted without help; student pairs also came up with multiple solutions. The findings indicate that deconstruction kits are not only promising tools for evaluating students' learning of designing with e-textiles but also valuable learning tools, especially when peer collaboration is taken into account.	Debuggems to assess student learning in e-textiles (abstract only)	NA:NA:NA:NA	2018
Janet Davis:Samuel A. Rebelsky:Jerod Weinman	upswing, Computer science teachers continue to strive for new examples and problems to interest millenials. The Media Computation approach (Guzdial 2003) has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this project, take Media Computing in new directions: we have students build images by interactively scripting an application, which means that they can more easily experiment and mix work that they create "by hand" and work that they create "by programming"; we work collaboratively with studio art faculty, so students build works that must meet underlying design criteria; we teach using the workshop approach, so most classes involve students working in small teams on a set of problems; and we use a multi-paradigm approach - students make images using functional, declarative, imperative, and object-oriented techniques. This approach has proven quite successful - our enrollments are up (at least 33% in CS1, 50% in CS2). We are attracting more women (now 1/3 of our students). And comparative data suggest that our students gain significantly more confidence in their abilities than do student in other introductory science courses.	MediaScripting: teaching introductory CS by through interactive graphics scripting (abstract only)	NA:NA:NA	2018
Hannah Fidoten:Jaime Spacco	We asked all of the liberal arts faculty who advise undergraduates on course selection at the 14 colleges in the Associated Colleges of the Midwest a series of questions regarding their perceptions of the personality traits of Computer Science (CS) students, topics they think are covered in CS classes, and their overall impressions of CS. Our goal was to test empirically the hypothesis that many non-CS faculty are unaware of the differences between CS and Information Technology (IT). We received over 200 survey responses, which revealed that, among non-CS faculty, 10% disagree or are neutral that CS should even be part of a liberal arts curriculum, 9% think that CS students are taught to fix printers and other peripherals, and 35% believe that CS students are taught to use Microsoft Word and Excel in their courses. Our results also revealed that 60% of CS faculty believe that men are more interested in CS than are women (although we did not ask why they believe this to be the case). Overall, while we found statistically significant differences between the answers given by CS and non-CS faculty, the overall evidence suggests that the majority of non-CS faculty in the Associated Colleges of the Midwest have a good understanding of CS.	Do faculty recognize the difference between computer science and information technology?: a survey of liberal arts faculty (abstract only)	NA:NA	2018
Paige H. Meeker	In today's world, many students are being encouraged not only to participate in class work and internships, but to travel and gain experiential knowledge. At Presbyterian College, students are required to complete either a research/internship class or an experiential/travel class as a part of their general education requirements. Computer science students were often going on trips with other departments to fulfill this need. This poster explores a course offered at Presbyterian College in May, 2010, which took students from our Physics and Computer Science department behind the scenes of Kennedy Space Center and Walt Disney World. It will include information both about course content and about the cost and overhead involved in planning such a course.	Interdisciplinary travel courses in computer science (abstract only)	NA	2018
Monika Akbar:Clifford A. Shaffer	Educational portals such as Algoviz.org contain rich information resources, and a key concern is directing the users to specific resources that are of interest to them. While AlgoViz has significant traffic, we cannot count on active user participation in the form of explicit ratings of individual resources. Often called a "cold-start" problem, this scenario is well-known in community-based websites. Lacking active user data, we instead use log data to deduce user trends. We describe our techniques for clustering users based on the log data. We show how this cluster analysis can be used to refine searching and browsing within AlgoViz. Our approach has the potential to be useful for a wide range of educational resource portals.	User type clustering to refine search and browse for educational resources (abstract only)	NA:NA	2018
Steven Huss-Lederman	In 2005, the Beloit College Computer Science Program began a complete revision of its courses and curriculum facing usual issues: limited staff, declining enrollments, and the Computing Curricula 2001 document. We used 1/2 semester, 1/2 unit courses to address the diverse areas with limited courses allowing multiple entry points by interest and knowledge level and flexibility for non-majors; however, it did present scheduling and staffing issues. After two years of experience, we revised our ideas to recombine some 1/2 unit courses to allow larger projects, stacked courses where students at different levels took courses together, and instituted a two year capstone experience that combined material from several classes. The poster will provide details and an opportunity to exchange ideas.	A comprehensive CS curriculum revision, implementation, and analysis (abstract only)	NA	2018
Xiaohong Yuan:Jinsheng Xu:Kossi Edoh:Hong Wang	Health informatics is one of the nation's largest growth industries. With the government's increasing interest in electronic health records and growing investment by healthcare organizations in technology, there is a large demand for a health informatics and health information technology workforce. To protect health information systems, it is highly important for health informatics professionals to be well educated and trained in information assurance, and to understand the many concerns of security, privacy, integrity and reliability. This poster describes our project of developing a new interdisciplinary program of Bachelor of Science in Computer Science (BSCS) concentration in Health Informatics Security and Privacy (HISP) at North Carolina A&T State University (NC A&T SU). To establish this program, we are developing a new course on health information systems in the Department of Computer Science, a new course on Mathematics for Health Informatics in the Department of Mathematics, and modifying an existing course in the Department of Management. We are also developing three course modules on health informatics security and privacy: Health Information Assurance and Security, Access Control in Healthcare Information Systems, and XML Security in Health Information Systems. These course modules will be integrated in the existing computer security and information assurance courses in the Department of Computer Science. The BSCS concentration in HISP curriculum as well as project plan will also be described in this poster.	Developing an interdisciplinary health informatics security and privacy program (abstract only)	NA:NA:NA:NA	2018
Robert E. England	This poster describes a new upper level undergraduate computer science course in team software development, featuring the Apple iPad as the development platform. The course draws from a wide range of state-of-the-art topics in software development theory and practice, including use of Apple's extensive software development Cocoa Touch framework for its mobile devices, advanced Object-Oriented Programming, gang of four Design Patterns, and traditional Software Engineering practices, including accountability to external clients and public presentation of results. The course was developed at Transylvania University, a small Liberal Arts college of approximately 1200 students, and it was taught there during the Fall 2010 semester.	A team software development course featuring iPad programming (abstract only)	NA	2018
Nanette Veilleux:Rebecca Bates:Diane Jones:Cheryl Allendoerfer:Joy Crawford	Retaining students in computer science (CS) majors has been a persistent topic among CS educators for almost two decades. Discussion and research has largely focused on improving student engagement in the academic experience in order to provide a more welcoming and compelling introduction to the field. Research has identified a wide variety of factors affecting student engagement in general, which in turn affects key outcomes including academic achievement, retention and persistence. Feeling connected to a community and sense of belonging can substantially influence student engagement. Our study suggests that this sense of belonging can also help mitigate student perceptions that influence them to be discouraged, especially about their ability to succeed, and leave computer science. In particular, support from extra-curricular as well as academic communities may lead students to perceive that ability is not a binary, fixed constraint, but a malleable gradient that can be influenced by factors within the student's control.	The role of belonging in engagement, retention and persistence in computer science (abstract only)	NA:NA:NA:NA:NA	2018
Ellen Boyd:Anthony Allevato	Many introductory computer science courses include regular lab sessions that require students to develop short programs that relate to corresponding lecture material. Logistical tasks required for assignment completion, such as project setup and submission, impose certain burdens on students and instructors. Due to time constraints, instructors frequently provide starter files or skeleton projects for students to import into their workspace at the beginning of each lab so that they can feasibly complete the assignment in the required time. Setting up projects in Eclipse to include these files and dependencies still consumes significant time during these labs, however. To eliminate the time spent trying to fix project configuration issues, we have developed a plug-in for Eclipse that allows students directly from within the IDE to download and import multi-file projects corresponding to individual lab assignments. The projects will be automatically imported into the student's workspace and will be correctly configured and linked to any required dependencies. The plug-in can also be employed with large-scale programming assignments; as assignments increase in complexity, they may require a non-trivial amount of extra configuration before students can begin work on their solution. With this plug-in, students can now focus primarily on the problem-solving aspect of their work and accomplish all necessary tasks, from initial project configuration to final delivery, without leaving the Eclipse IDE and interrupting their workflow.	Streamlining project setup in eclipse for both time-constrained and large-scale assignments (abstract only)	NA:NA	2018
Stephen B. Hughes:J. Ben Schafer:Aaron Mangel:Sean Fredericksen	One of the major perceived barriers to the adoption of Classroom Response Systems, a.k.a. "clickers", is limited interactivity. Students using dedicated clicker hardware are often only able to provide basic multiple choice or simple numeric responses. The accessibility and flexibility of smartphones make them an intriguing platform for managing some of the shortfalls of traditional classroom response systems. This approach not only leverages a resource that a growing number of students already own, but also aims to enhance the effectiveness of the system by tapping into the robust interaction capabilities that these devices afford. This poster will describe a smartphone implementation of a classroom response system and discuss efforts to extend the basic clicker interaction model.	A customizable platform for classroom collaboration using mobile devices (abstract only)	NA:NA:NA:NA	2018
Demian Lessa:Bharat Jayaraman	An important challenge in teaching object-oriented (OO) programming and methodology in introductory Computer Science courses is explaining the run-time of OO programs. This is largely due to the OO methodology, which encourages the use of features such as polymorphism and design patterns, resulting in object interactions and control flow that are hard to grasp, especially for novice programmers. We present an approach to program comprehension in which students use storyboards and visual debugging to build a clear mental model of the dynamic behavior of OO programs. In this context, a storyboard consists of a sequence of figures representing run-time aspects of interest (e.g. states or interactions) and an explanatory narrative in terms of OO concepts and source elements. The selected visual debugger must render execution histories and run-time states using visual notations consistent with the OO methodology (e.g., objects, member fields, method calls within object contexts). Instructors create storyboards using figures exported from the debugger and incorporate them in course materials. Further, storyboards included in specifications of programming assignments alongside test cases provide students with a detailed account of their programs' run-time at interesting points in execution. By executing their programs under the visual debugger, students can compare the observed run-time states with those illustrated in the storyboards and effectively assess the behavioral correctness of their programs. Hence, the combined use of storyboards and visual debugging can benefit students during the coding phase by guiding them towards writing code that closely adheres to the OO methodology from the outset.	Explaining the dynamic structure and behavior of Java programs using a visual debugger (abstract only)	NA:NA	2018
D. Brian Larkins:H. Erin Rickard:William M. Jones	The field of computer science is continuously growing, requiring curriculum developers to make numerous tradeoffs between depth and breadth with every advance. Faculty must look for new ways to communicate more concepts within a fixed number of contact hours as well as employ techniques that underscore interrelated concepts over multiple courses. With this poster, we present the use of field-programmable gate arrays (FPGAs) as a flexible hardware system that may be modified to suit the needs of a wide variety of classes. While FPGA devices are a natural fit for teaching hardware concepts in organization and architecture classes, we feel that they can also be used in a variety of roles within a number of other courses. We describe our work integrating FPGA curriculum modules into several courses in the CS curriculum: organization and architecture, compiler construction, robotics, operating systems, security, and image processing. We believe that by using these devices in several courses, students gain greater familiarity with a hands-on, reconfigurable hardware platform and can leverage this experience throughout their coursework. This approach is consonant with recent trends that emphasize the importance of students being able to reason about the end-to-end operation of an entire system and helps strengthen the relationships between different subfields within computer science. We describe both the changes made to our curriculum and the effectiveness of our approach.	Using FPGA systems across the computer science curriculum (abstract only)	NA:NA:NA	2018
Raja S. Kushalnagar:Joeseph S. Stanislow	The introductory programming college course is usually difficult for many new students, as they struggle to master basic programming concepts and to develop logically correct programs. Surveys in college have estimated that around 30 percent of these students drop out or fail it. These tasks are even more difficult for Deaf and Hard of Hearing (DHH) students, even when provided with accessible visual translations through sign language interpreters or real-time captions. We have extended the idea of traditional audio capture and transmission accessible technology devices by developing and testing use of smart phones as multimedia recording devices to record multiple videos and stream them to the deaf or hard of hearing student. We call this approach multiple video perspectives.	Maximizing content learning for deaf students and English as a second language students (abstract only)	NA:NA	2018
Shamsi Moussavi:Giuseppe Sena	Laboratory-based courses--the corner stone of Computer Science programs in our community college--have been difficult to manage due to the shortage of lab space, available equipment, and basic infrastructures. This has meant that for the past few years, we have not been able to offer certain courses that allow students administrative privileges in order to complete their assignments, such as Web Server Administration course. We wanted to be able to offer a number of courses requiring various systems, levels of functionality, and networking set up in one laboratory. We researched and experimented with different virtualized systems. Specifically, we looked at the use of VMs in CS courses and laboratories. Through use of virtualization technology we implemented multiple VMs (one for each course) on each computer in a laboratory. Each VM was set up for specific course requirement; hence, multiple courses were offered simultaneously in one laboratory. In designing the laboratory, we were also careful not to adversely affect the security of college's computer network. Therefore, the virtualized laboratory was separated from the college's computer network. This approach not only provided the capabilities that we were looking for, but can also be used in future to provide easier access to students, even from outside the school network.	All-in-one virtualized laboratory (abstract only)	NA:NA	2018
Joseph A. Cottam:Suzanne Menzel	Computer scientists require a precise and complete understanding of recursion. Earlier work has indicated that recursion merits attention in CS1 [2]. We present a simple test question that, when used in a final exam for three courses over two semesters, is shown to significantly predict student performance on the final. To evaluate student responses, we present an evaluation rubric that directly reveals common misconceptions about recursion and recursive procedures.	Recursive thinkers and doers in CS1 (abstract only)	NA:NA	2018
Madalene Spezialetti	This poster presents a tool for providing novice students with a context in which to develop the ability to identify problems and patterns for their solutions by using video scenarios. A video scenario is a short film (typically 2-7 minutes) which has an extemporaneous feel. Each video depicts individuals facing a particular problem that can be helped through a computing solution. A selection of video scenarios is presented which is specifically designed to cultivate the problem identification and solution formulation skills of novice programmers by focusing on problems which can be solved using basic computing constructs. The videos can be used in a wide variety of settings and are suitable for use at the middle school, high school and college levels.	Computing in context: video scenarios for recognizing and utilizing basic computing constructs (abstract only)	NA	2018
Ivona Bezakova:James Heliotis:Sean Strout:Adam Oest:Paul Solt	Board games provide a natural context for the use of basic data structures and search algorithms taught in a typical introductory CS sequence. Unlike traditionally used programming assignments where students implement the actual game, we provide the game "engine" and ask the students to implement player strategies. The engine graphically displays the current state of the game and cyclically calls the individual player strategies to perform their moves. The students need to apply the same algorithms as if programming the rule checker for the game. And with the added strategy component, the project becomes open-ended, leaving space for continued improvements and experimentation. The poster describes the game we used last academic year, Quoridor by Mirko Marchesi and published by Gigamic Games. The goal of this game for two or four players is to move a piece from one side of a 9x9 grid board to another side, while placing walls that lengthen the opponents' paths to their destinations. The poster discusses Quoridor's relevance for basic data structures and algorithms, for example, breadth-first search. It then elaborates on the possibilities introduced by adding strategies into the picture, including an end-of-term tournament. Supported by the NSF, award ID 1044721.	Programming board-game strategies in the introductory CS sequence (abstract only)	NA:NA:NA:NA:NA	2018
John J. Wright	Whether we like it or not, college administrations and students are increasingly looking for online courses. K-12 schools are increasingly using online content and blending it with standard content. One of the bridges for us between traditional course delivery and online delivery is the blended course. This approach seems well suited to computer science, which often requires work in labs or with specialized equipment or software. It takes the approach of reversing that which is traditionally lecture and assignments, making classes more interactive and students less passive. This poster seeks input on a blended implementation of CS1 and a subsequent SoTL project to test the effectiveness of offering this course in a blended format.	Implementing and assessing a blended CS1 course (abstract only)	NA	2018
Scott Alexander Turner	Creating programming projects that engage students has been a continual challenge in computer science. Ideally, programming projects should require student to reflect upon and apply programming concepts and help them develop creativity, problem-solving, and other skills for the workplace. The use of real-world problems is one possible solution to the issue but it comes at the cost of increased complexity, size, and burden on the instructor. One approach to reducing these costs is to design (or redesign) programs, developed as part of a research agenda, for use as student projects. Designing these programs for flexibility, adding extra, student-appropriate, feedback and identifying portions of the code that could become interesting student projects helps support both research and classroom learning at the same time. By explicitly designing with projects in mind, instructors can control the complexity and size of these real-world problems and can, potentially, create a platform that can support multiple types of student assignments. This poster describes the experience of redesigning a UML diagramming tool to implement this idea and provides examples of the design decisions made, lessons learned during the process, and other programs that could be used in a similar fashion. Future work includes evaluating the students' reaction to the projects and whether enough support is being provided.	Designing with projects in mind: an approach for creating authentic (and manageable) programming projects (abstract only)	NA	2018
Jose M. Garrido	We propose an approach to introduce computational models and basic programming principles in an integrated manner and as early as possible in the computing curricula. Our goal is to help educate students of computer science, mathematics, and the various science disciplines, in computational modeling. For this, we have developed a sequence of four courses in computational modeling, the first of which integrates computational modeling with programming principles and includes elementary numerical methods for solving the models. This entry-level course is described and a URL is provided with details of the four courses. Developing a computational model of a problem includes formulating the mathematical representation and implementing it by applying Computer Science concepts, principles and methods.	Integrating elementary computational modeling and programming principles (abstract only)	NA	2018
Anthony Allevato:Stephen H. Edwards	Many computer science educators have adopted test-driven development practices in their introductory computer science courses, as a way of encouraging incremental development and decreasing defects in student code. This practice is straightforward for basic data-driven objects, but making unit testing of GUI applications approachable for students poses a larger challenge. We have previously addressed this problem for Swing applications by developing LIFT, a library that allows students to easily write JUnit tests for Swing interfaces. Since then, we have transitioned away from Swing to Android as the development platform in CS2 to better motivate and excite our students about their assignments. To fully support this change, we had to ensure that our students could fully test the GUI portions of their solutions on that platform as well. The Android operating system has significant built-in support for GUI testing, but the standard API is too complex for students to use. In order to address this, we developed RoboLIFT, a framework that eases the task of writing concise and complete unit tests for Android applications. Furthermore, RoboLIFT also has support for automated grading on the Web-CAT automated assessment system, so even if instructors do not require their students to follow test-driven development practices, they can still enjoy the benefits of automated grading by writing correctness tests that use RoboLIFT to exercise the students' graphical user interfaces.	RoboLIFT: simple GUI-based unit testing of student-written android applications (abstract only)	NA:NA	2018
Eric Fouh:Maoyuan Sun:Clifford Shaffer	OpenDSA is an open-source, community-based effort to create a complete active-eBook for Data Structures and Algorithms courses at the undergraduate level. Active-eBooks go beyond hypertextbooks, being a close integration of text and images with interactive visualizations and assessment activities. They solve two major problems: The difficulty of conveying dynamic process with static media, and the need by students to have many practice exercises and immediate feedback. Development in HTML5/JavaScript allows maximum portability. OpenDSA will proceed with broad participation from the algorithm visualization community. Focusing on reuse of materials, instructors can pick and choose content and modify as desired.	OpenDSA: a creative commons active-ebook (abstract only)	NA:NA:NA	2018
Murali Mani:Quamrul Mazumder	Courses that involve problem solving provide an opportunity to incorporate meta-cognition as an active learning strategy, where students reflect on their confidence levels on their solutions to problems. As compared to other typically used active learning strategies, meta-cognition provides concrete and comprehensive feedback about the students' learning. The data about confidence levels is potentially useful to both the instructor and the student: an instructor can utilize the data about confidence levels as a second measure of student learning (this is in addition to the scores obtained); a student gets valuable feedback with regards to his/her own comprehension of the topics when he/she examines the confidence levels. We have incorporated meta-cognition techniques in four computer science courses over two semesters at University of Michigan, Flint, including CS1, and also graduate level courses. By analyzing the data obtained, we are able to infer conclusions about (a) How correlated are the scores obtained to the confidence levels reported (b) Is meta-cognition assisting in learning, and (c) Are students more satisfied with a course that incorporates meta-cognition.	Active learning in computer science education using meta-cognition (abstract only)	NA:NA	2018
Yana Kortsarts:Vasily Kolchenko	Dynamic programming is one of the important algorithmic techniques often not appropriately covered in the core undergraduate CS courses, and there is no sufficient emphasize on application of advanced techniques to practical problems. As a result, students are not becoming fully familiar with this extremely important concept. We present our experience in integrating dynamic programming algorithmic technique in various core and elective undergraduate computer science courses, such as introductory programming, cryptography and bioinformatics. Examples are based on the real world scenarios and motivate students to learn in order to solve practical problems. The reported work was partially funded by the National Science Foundation, NSF CPATH award #0939120 and NSF I3 award #0930242	Dynamic programming across the CS curriculum (abstract only)	NA:NA	2018
Clif Kussmaul:Heidi J.C. Ellis:Gregory W. Hislop	Participating in free and open source software (FOSS) has numerous benefits for students (and faculty), and there is increasing interest in encouraging such participation. There is a broad range of possible contributions to FOSS projects including documentation, testing, coding, and more. This range allows people with a variety of backgrounds, including little or no CS background, to contribute to a FOSS project. This poster describes the status of a project to identify and categorize learning activities that contribute to FOSS. During Spring 2011, an NSF-sponsored workshop on student participation in humanitarian FOSS for the SoftHum project brought together a group of experienced FOSS developers, faculty, and students. One result of this workshop was a list of nearly 100 learning activities that could contribute to FOSS projects and provide meaningful experiences for students and faculty. We were surprised by the variety of results. Some of the activities have been used successfully or are variations of familiar learning activities; others are ideas that seem promising but require further development and validation. We are experimenting with individual activities, and seeking colleagues interested in doing likewise. We are also mapping the learning activities onto Computer Science Curriculum 2008 to make it easier for faculty to identify relevant activities and map them to course or program learning objectives. The poster briefly summarizes relevant background, describe the process used to identify appropriate activities and provide examples of activities and their mappings.	50 ways to be a FOSSer: simple ways to involve students & faculty (abstract only)	NA:NA:NA	2018
Daniela Marghitu:Taha Ben Brahim:John Weaver	Auburn University's Robo Camp K12 outreach program integrates various robotics platforms to maximize students' critical thinking and creativity development. This work presents how robotics could be used to teach students computer science concepts and skills through implementing the Computer Science Unplugged (CSU) activities. CSU provide an insightful learning environment where students learn computer science concepts through some playful, coordinated and stress free activities. Implementing such activities using robots resulted in multiple benefits: 1) students acquired advanced computer science notions without undergoing the high stress levels associated with such activities and 2) students maintained high levels of motivation and concentration during the entire six weeks of the camp.	Teaching computer science and programming concepts using LEGO NXT and TETRIX robotics, and computer science unplugged activities (abstract only)	NA:NA:NA	2018
Helen H. Hu	POGIL is a learning method that encourages students to learn coursework material in cooperative groups. Instead of passively listening to a traditional lecture, POGIL students work together on activities that guide students to discover programming concepts and algorithms for themselves. For example, instead of being told in lecture that a return statement ends the execution of a method, students might be asked what happens if two lines in their program are reversed (so that a line of code appears after the return statement). This emphasis on the process of discovery teaches students to become better problem solvers. POGIL has been used for over 15 years in science classrooms, where studies have shown it to be more effective than traditional lectures, measured both in student mastery of the material and in student retention. This poster provides examples of how traditional programming assignments can be transformed into POGIL lessons that emphasize problem solving and critical thinking skills. A POGIL activity on loops has students working through iterations of Newton's method by hand before writing the code. Critical thinking questions guide students to manipulate the code to experiment with infinite loops, initialization statements and conditionals. Two other activities on recursion and writing pseudocode are detailed on the poster. Information on facilitating a POGIL activity and writing your own POGIL activities can be found online at http://pogil.org/resources. Additional examples of computer science POGIL activities can be found at http://cspogil.org.	Using POGIL to teach students to be better problem solvers (abstract only)	NA	2018
Jinghua Zhang:Elva J. Jones	We propose a unique gaming concentration to reenergize computer science(CS) education at Winston-Salem State University (WSSU), an HBCU. Nationally, many gaming concentration programs in the CS curriculum have been successfully developed. Nevertheless, to our knowledge, none has been established at any of the HBCUs. The proposed gaming concentration aims to educate minority students with the skills necessary to participate as computer scientists in a game development team and other software development projects. The concentration will help the enrollment and retention of underrepresented students and increase the quality of graduates in this field. A successful gaming concentration at WSSU will advance the knowledge in developing curricula for HBCUs and other minority institutions.	Developing a gaming concentration in the computer science curriculum at an HBCU (abstract only)	NA:NA	2018
Jason Snyder	OSSIE is an open source SDR project created for education and research. When used as a teaching example, OSSIE provides lessons about open source and systems development. It is also an ideal platform for a variety of projects, from capstone studies to theses. A series of labs introduces new users to the software and quickly illustrate key SDR concepts and practices. Included components and waveforms provide excellent examples and allow for the simple creation of new waveform applications. The waveform workshop allows SDR developers to concentrate on the signal processing aspects of OSSIE software development by automatically generating code necessary for interfacing with the OSSIE Core Framework. Finally, the Core Framework provides an ideal platform for SDR and signal processing research.	OSSIE: an open source software defined radio (SDR) toolset for education and research (abstract only)	NA	2018
Jean H. French	While a focus on programming and mathematical skills is second nature to computer science faculty, perhaps equally important should be the recognition of the need for students to master communication skills. This poster presents the measured results of various methods used in the implementation of a communication-intensive core course into a CS curriculum at a small liberal arts university. The communication intensive core course is a CS1 introduction to computer science which is required to implement both oral and written assignments. Five key areas of success were implemented to help support the communication-intensive CS curriculum. They are: (1) communication skills need to be integrated within the CS curriculum, (2) communication skills should begin to be developed early in the student's academic career, (3) communication skills include a broad range of categories, (4) communication skills need to be supported by feedback, and (5) communication skills can be taught in the CS curriculum without sacrificing CS content. The results are provided on a four-point scale and focus on both student success and grading complexity. Scores are provided for each of the methods used since the course was first implemented in 2007. Such a comprehensive evaluation aims to assist in determining which methods are best suited for implementing a core communication that stresses continuous improvement in communication skills.	Implementing a communication-intensive core course in a CS curriculum: a survey of methods (abstract only)	NA	2018
Quinn Burke:Yasmin B. Kafai:Jean Griffin:Rita M. Powell:Michele Grab:Susan B. Davidson:Joseph S. Sun	Community service courses are often where undergraduates make connections between academic content and practical computer science applications, build bridges between the university and the community, and ultimately increase access to technology in such communities. In this poster we report on our efforts-supported by a NSF Broadening Participation in Computing grant-to design, implement, and evaluate a service-learning course based on a "cascading mentoring" model linking together the faculty, administration, and undergraduates of an urban university's computer science department with area high school students. The poster presents the cascading model and through a series of post-interviews offers preliminary data charting undergraduates' experiences as both mentees and mentors.	The reflective mentor: charting undergraduates' responses to computer science service learning (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Li Yang:Joseph Kizza:Andy Wang:Chung-Han Chen	Teaching cryptography is essential in undergraduate information assurance (IA) education as it is an indispensable component in the IA knowledge domain and plays a key role in ensuring information confidentiality, integrity and availability. Hands-on method in cryptography is a good approach to achieve this as it engages students in real-world settings, which will inspire creativity of students and train them to adapt cryptographic solutions to emerging areas. We design a collection of labs which allow students to gain hands-on experiences with cryptographic algorithms, especially increasing student awareness of possible threats and attacks to various cryptographic techniques. The developed hands-on exercises tied with each cryptography topic teach students both cryptographic algorithm and vulnerabilities. In each exercise students experience cryptographic techniques and its possible threats and attacks. In other words, students learn and understand both strength and weakness of each cryptography technique. Our labs cover topics of encryption, digital signature, key management, etc. These labs can be "plugged" into courses at different levels from CS1 to senior courses such as network security, security management, etc. Our approach enriches experiential learning materials in cryptography. Our effort contributes to cryptography courseware development and IA education in terms of hands-on exercises. The hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and IA courses. Hands-on labs are available at http://cryptolabs.info/.	Teaching cryptography using hands-on labs (abstract only)	NA:NA:NA:NA	2018
Pelle Hall:Andrew Hirakawa:Jennelle Nystrom:Samuel A. Rebelsky	Consider a middle-school student "playing" with a computer. What does she do? She may chat with friends. She may surf the Web. She may even play a few games. But she is also likely to make things with drawing programs, word processors, or other applications that make things. Can one leverage that creativity to encourage her to want to learn to program? Projects from Alice (Moskal et al. 2004) to Scratch (Maloney et al. 2010) have certainly shown that tools that tie creativity and programming can encourage students to think algorithmically. Despite the success of these programs, there is still room for new models that link children's artistic interests with programming. In this project, we explore the link between creativity and programming through a different model, one in which the drawing application "self discloses" underlying commands (DiGiano & Eisenberg 1995). As students draw images with the GNU Image Manipulation Program, a Photoshop-like application, a small window displays code that represents their actions. For example, when they draw a line, a "draw line" command appears that includes the coordinates of the line; when they change brushes, a "set brush" command appears that includes the name of the brush. Eventually, students refer to these commands to redraw their figures, to copy their figures, and to change their figures. Slowly they move from copying and pasting code, to modifying, to writing their own instructions, and beyond.	From drawing to programming: attracting middle-school students to programming through self-disclosing code (abstract only)	NA:NA:NA:NA	2018
Carol Spradling:Florence Appel:Elizabeth Hawthorne	The ACM/IEEE-CS 2001/2008 computer science curricular guidelines are in the process of being updated and the strawman version of CS2013 will be unveiled at SIGCSE 2012. Inclusion of the ethical, societal and professional responsibility issues dates back to Computing Curricula 1991. This poster session will present the revised Social and Professional issues knowledge area and provide a means for any SIGCSE community member to provide feedback directly to SIGCAS and the CS2013 steering committee. Specific core and elective knowledge units, topics and learning outcomes will be delineated. The current state of the discipline and the profession were examined to provide contemporary guidance for the education of ethical behavior, professional practice and societal impact for computer science majors.	Proposed revisions to the social and professional knowledge area for CS2013 (abstract only)	NA:NA:NA	2018
Zalia Shams:Stephen H. Edwards	Instructors often write reference tests to evaluate student programs. In Java, reference tests should be independent of submitted solutions as they are run against all student submissions. Otherwise, they may even fail to compile against some solutions. Reflection is a useful feature for writing code without compile-time dependencies, which is valuable for writing software tools that inspect code. However, educators avoid using reflection as code written using Java's Reflection API is complex, unintuitive and verbose. We present ReflectionSupport, a library that enables one to write reflection-based code in concise, simple and readable fashion. It helps educators write reference tests without compile-time dependencies of solutions and develop educational tools such as automated graders.	A better API for Java reflection (abstract only)	NA:NA	2018
Qusay H. Mahmoud:Nicholas Mair:Younis Mohamed:Sunny Dhillon	In this poster we present a set of hands-on labs for a mini-course on mobile application development that can be used as a lab component of any Computing course. The labs revolve around a single theme whereby students experiment with designing and developing the user interface, interaction model, and inter-connectivity of a mobile application for Google Scholar; the developed application can be deployed on a variety of mobile platforms, including BlackBerry, Android, and iPhone devices (smartphones and tablets). Students learn about mobile programming models and cross-platform development and appreciate the unique opportunities such devices offer, but also become aware of the development challenges they present. For more information, please visit: http://cmer.uoguelph.ca.	Hands-on labs for a mini-course on mobile application development (abstract only)	NA:NA:NA:NA	2018
Vicki L. Almstrum:Barbara Boucher Owens:Mary Z. Last:Deepa Muralidhar	This poster presents recent progress with the Computing Educators Oral History Project (CEOHP). To provide context, the poster includes a brief history of CEOHP and a summary of the interviews currently in the collection (a total of twenty-six completed interviews at the end of 2011). During Evaluation efforts in 2009 and 2010, a series of face-to-face and on-line qualitative interviews provided feedback about the CEOHP website, including its organization, content, and usability by target groups. The Evolution process incorporated ideas generated during Evaluation to improve both quality and consistency of the collection elements and the CEOHP website. In the Archival Storage process, all completed interviews in the CEOHP collection are being submitted to the prestigious Charles Babbage Institute for permanent indexing and archiving. These archival steps will become part of CEOHP's standard processing procedures, so each interview added to the CEOHP collection will be archived by the Charles Babbage Institute, guaranteeing that these materials will survive far into the future. This poster describes major steps, challenges, and achievements in the areas of Evaluation, Evolution, and Archival Storage, as well as the spiral nature of these activities as part of the on-going process of growing a collection such as CEOHP.	CEOHP evaluation, evolution, and archival storage (abstract only)	NA:NA:NA:NA	2018
Christy L. McGuire:Thomas K. Harris:Jonathan Steinhart:Leigh Ann Sudol-DeLyser	With grant funding from the National Science Foundation, we are developing the CodeTrainer Content Authoring System, a mechanism that allows educators to create and contribute their own curriculum content and align that content with the features of our larger intelligent tutoring system, CodeTrainer. Through a series of user studies, we evaluated the needs of computer science educators for both curriculum content and appropriate user interface. Results from these studies indicate that computer science educators would find CodeTrainer a useful tool, and offered suggestions for improving the usability. This material is based upon work supported by the National Science Foundation under Grant No. 1113692.	CodeTrainer teacher authoring system: facilitating user-created content in an intelligent tutoring system (abstract only)	NA:NA:NA:NA	2018
Edward Dillon:Monica Anderson:Marcus Brown	Improving the novice's experience with programming may be key to retaining more students interested in Computer Science. Programming environments is an area that lacks comprehensive study. Some entry-level sequences prefer visual environments while others tout the benefits of command line environments. In either case, there is little more than anecdotal evidence to support either choice. We present a novel categorization of programming tools based on assistive features that predict the usefulness of programming environments for novices. This categorization is supported by a controlled study that measured the differences in engagement, efficiency, comprehension, and usability. We found that the extremes of assistive features are problematic regardless of prior programming experience.	Comparing feature sets within visual and command line environments and their effect on novice programming (abstract only)	NA:NA:NA	2018
Jeffrey Forbes	The widespread use of online social networks provides a particularly compelling domain for introducing computer science techniques and concepts to undergraduate students. As part of the HarambeeNet project, I developed a new course on the Science of Networks that explores the interconnectivity of social, technological, and natural entities. Students in the course learn fundamental techniques from graph and game theory to analyze network structure and behavior. Material for the course was developed and refined through a survey of exemplar courses, workshops, and faculty learning communities all focused on network science. The poster describes the course framework, provides some example assignment and lecture material, and presents some lessons learned.	Exploring connected worlds (abstract only)	NA	2018
Tim Bell:Lynn Lambert:Daniela Marghitu	Outreach activities including Computer Science Unplugged demonstrate computer science concepts at schools and public venues based around kinesthetic activities rather than hands-on computer use. Computer Science Unplugged is a global project that has shared many such activities for children to adults using no technology, including how binary numbers represent words, images and sound, routing and deadlock, public/private key encryption, and others. These and other effective outreach programs can combat the idea that computer science = programming or, worse, keyboarding; and can educate the public, interest students, and recruit majors. Many people have used these activities, and adapted them for their own culture or outreach purposes. Come share your outreach ideas and experiences with such activities. Employers, researchers and teachers have noted the need for effective outreach to ensure that students and the public be exposed to, and understand what Computer Science is. CS Unplugged is a collection of activities that are accessible to a general audience, need no technology, are fun, and cover many core areas of computer science. The focus of this session will be discussing activities that introduce computer science concepts and way of thinking, and that are consistent with Jeanette Wing's Computational Thinking [Wing06]. The session is intended to allow exchanging ideas about effective outreach in the community, in K-12, and even non-major classes. There are many variations of these activities, and it is valuable to get practitioners together to share their successes - and not-so-successful events - so that others can benefit from them.	CS unplugged, outreach and CS kinesthetic activities (abstract only)	NA:NA:NA	2018
Elizabeth K. Hawthorne:Nancy R. Mead:Mark A. Ardis:Carol A. Sledge	Nearly every facet of modern society depends heavily on highly complex software systems. The business, energy, transportation, education, communication, government, and defense communities rely on software to function, and software is an intrinsic part of our personal lives. Teaching software assurance and secure coding practices are significant challenges currently facing computer science educators. The Strawman version of the CS2013 curricular volume recognizes this vital need and has included a new knowledge area to specifically address software and information assurance in undergraduate computer science education. Also recognizing the importance of the software assurance discipline for protecting national infrastructures and systems, the U.S. Department of Homeland Security (DHS) has identified the growing need for skilled practitioners in this area. At the direction of the DHS, the Software Engineering Institute at Carnegie Mellon University initiated the Software Assurance Curriculum Project. Session leaders will share curricular materials from this project and will facilitate active discussion centered on infusing software assurance into introductory computer science courses at two-year and four-year colleges and universities. The latest curricular volume published September 2011 will be distributed at the session and includes a review of related curricula, outcomes and body of knowledge, expected background of target audiences, and outlines of six courses. These curricular materials are also available online at www.sei.cmu.edu/library/abstracts/reports/11tr017.cfm.	Infusing software assurance and secure coding into introductory CS courses (abstract only)	NA:NA:NA:NA	2018
Stephen H. Edwards	Web-CAT is the most widely used open-source automated grading system, with about 10,000 users at over 65 institutions worldwide. Its plug-in architecture supports extensibility, with plug-ins for Java (including Objectdraw, JTF, Swing, and Android), C++, Python, Haskell, and more. It is also a powerful tool for educational research data collection. It supports a wide variety of assessment strategies, but is famous for "grading students on how well they test their own code". Web-CAT won the 2006 Premier Award, recognizing high-quality, non-commercial courseware for engineering education. This BOF will allow existing users and new adopters to meet, share experiences, and talk about what works and what doesn't. Information on getting started quickly with Web-CAT will also be provided.	Web-CAT user group (abstract only)	NA	2018
Sebastian Dziallas:Heidi J.C. Ellis:Mel Chua:Steven Huss-Lederman:Karl R. Wurst	Involving students from a wide range of backgrounds in Free and Open Source Software (FOSS) project communities gets them a hands-on, portfolio-building experience in the creation of a real-world project while simultaneously building their institution's public profile. The Teaching Open Source (http://teachingopensource.org) community is an emergent (3 year old) group working on scaffolding to bridge the cultural differences between academic and FOSS communities of practice. Join us to share questions, challenges, and triumphs of incorporating FOSS participation into existing and new curricula as well support resources for doing so. Alumni and current members of the POSSE (Professors' Open Source Summer Experience, http://communityleadershipteam.org/posse) will attend in mentorship roles. Faculty attendance at the SIGCSE 2010 BoF on Teaching Open Source (TOS) indicates that student involvement in FOSS projects is a teaching and learning approach of interest for many faculty members. The transparency of both artifacts and process make FOSS an attractive real-world experience that enhances peer learning and intrinsic motivation for a diversity of courses, from introductory, interdisciplinary, and non-major classes to software engineering core offerings and senior capstones. However, such student participation involves a significant learning curve and effort on the part of the faculty member, and support structures for faculty are still maturing. 2011-2012 marks the 3rd academic year the TOS community has explored this realm together, and the past year has seen the emergence of more best practices, support resources, and curricular material. Community members are starting to design cross-institutional research on the impact of FOSS participation on students. BoF attendees will be encouraged to ask questions, network, and take advantage of the TOS community as a support structure for their own courses and projects. The audience is expected to consist of instructors who 1) are interested in learning how to get started in involving students in FOSS projects; or 2) have involved students in FOSS projects and are looking for better ways to facilitate student learning within FOSS projects.	Teaching open source: involving students in free and open source software (FOSS) project communities (abstract only)	NA:NA:NA:NA:NA	2018
Brian Harvey:Tiffany Barnes:Luke Segars	The College Board's guidelines for the coming AP CS Principles course are broad enough to allow many different interpretations. In particular, different courses have different levels of technical depth. The "Beauty and Joy of Computing" curriculum, used by two of the initial five pilot sites, aims high, with recursion and higher order functions included in the programming half of the course. This session is for high school or college level instructors considering teaching an AP CS Principles course and interested in using the BJC curriculum, and/or the Snap! (formerly BYOB) visual programming language used in the curriculum. See http://bjc.berkeley.edu for the curriculum and http://snap.berkeley.edu for the language.	AP CS principles and the 'beauty and joy of computing' curriculum (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Jody Paul:Mark Sherriff	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position, providing the possibility of promotion, longer-term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2018
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight the new NSF Broadening Participation in Computing grant -- a grant that encompasses projects we presented in previous BOFs and a grant that builds on an alliance among ACM-W, ABI and NCWIT.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2018
Richard A. Brown:Elizabeth Shoop:Joel C. Adams:David P. Bunde:Jens Mache:Paul F. Steinberg:Matthew Wolf:Michael Wrinn	Recent industry changes, including multi-core processors, cloud computing, and GPU programming, increase the need to teach parallelism to CS undergraduates. But few CS programs can afford to add new courses or greatly alter syllabi, and the large parallelism body of knowledge relates to many courses. Participants in this BOF will share incremental approaches for adding parallelism to undergraduate CS curricula, where students study parallel computing in brief units. This networking event/ brainstorming session/ swap meet will bring together: " people with sharable parallelism expository readings, hands-on exercises, tech support ideas, etc.; "people wishing to include such materials in their courses; and" people curious about incremental approaches to teaching parallel computing.	Sharing incremental approaches for adding parallelism to CS curricula (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA	2018
James Jerkofsky:Cathy Bareiss	Faculty in small departments (perhaps 3 FTE, perhaps only 1 or 2,&) face special situations - both challenges and strengths. In this BOF, members will have a chance to talk about both. Challenges include maintaining a well-rounded curriculum and attracting students. Strengths include a close relationship with other members of the department and majors. These and other topics are open for discussion; the specific topics will be based upon the composition and interests of the group assembled.	Computer science: small department initiative (abstract only)	NA:NA	2018
Don Slater:Wanda Dann:Steve Cooper	This session is for anyone currently using Alice 2.2 and / or thinking about using Alice 3, or exploring the possibility of using Alice in his or her curriculum. The discussion leaders and experienced Alice instructors will share teaching strategies, tips, and tricks with each other and those new to Alice. The session provides an arena for sharing Alice instructional materials and ideas for courses at all educational levels. This is an opportunity to share assignments and pointers to web sites where collections of instructional materials, such as syllabi, student projects, exams, and other resources are available.	Teaching with Alice (abstract only)	NA:NA:NA	2018
Peter J. DePasquale:Michael E. Locasto:Lisa C. Kaczmarczyk	Few, if any, pedagogical practices exist for helping students embrace best practices in writing software documentation, particularly source code comments. Although instructors often stress the importance of good commenting, two problems exist. First, it can be difficult to actually define these best practices, and second, it can be difficult to grade or assess students' application of such methods/practices. This Birds-of-a-Feather session focuses on capturing for dissemination a concrete list of code commenting best practices used by the attendees as they teach their classes. We will aim to facilitate the development of commenting best practices by collecting the experiences and suggestions of the BOF attendees into a concrete list of practices and initiatives (and we plan to post this to our publicly accessible project wiki). Additionally, we plan to report on our progress in creating and deploying the COMTOR system, an NSF-funded project that supports feedback to students and grading capabilities for instructors of student source code comments.	Identifying effective pedagogical practices for commenting computer source code (abstract only)	NA:NA:NA	2018
Jeffrey L. Duffany:Alfredo Cruz	To enhance the learning process a certain amount of hands-on experience is desirable to supplement the theory portion of computer security-related courses. This includes courses in information assurance, database security, computer security and computer forensics, among others. Many classrooms designed for teaching computer programming have personal computers for use by each student. Some universities have dedicated laboratories. These labs and classrooms can be expensive to maintain and upgrade and this may be done by a separate IT department. There are budget constraints and political issues that must be addressed between the school, faculty and university administration. Because of these constraints, many schools and universities may be lacking in their lab resources for teaching computer security. This situation could be improved in many cases with little financial investment. This presentation is based on sharing the experience of professors that are currently teaching these courses to graduate and undergraduate students. These professors will present ideas on specific hardware and software that can be used to develop a computer security lab or to enhance a classroom environment, with an emphasis on free and open source software, operating systems and the use of virtual machines.	Design of a computer security teaching and research laboratory (abstract only)	NA:NA	2018
Joseph Mertz:Ralph Morelli:Ruth E. Anderson	This BOF is a chance for information sharing among faculty interested in involving students in ICTD research and/or service learning toward cultural and economic development globally. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations.	Student ICTD research and service learning abroad (abstract only)	NA:NA:NA	2018
Jerod Weinman:Ellen Walker	Within computing, the imaging field includes computer vision, image understanding, and image processing. While much research and teaching is done at the graduate level, the typical imaging educator at an undergraduate institution is the only specialist in his or her department. This BOF brings together educators who currently teach imaging courses or may be interested in expanding curricular offerings. We will emphasize sharing best practices, ideas, and resources as well as building a network for continued cooperation. Discussion topics may include course organization, assignments and projects, and lecture aids or other materials. Our network will include a mailing list for participants to ask questions and share ideas about imaging pedagogy and other means of sharing course materials.	Imaging college educators (abstract only)	NA:NA	2018
Kimberly D. Voll	Our students are the social media generation, touting Facebook, Google+, and even Twitter accounts as a matter of course. Providing rich, highly integrated environments, social media systems are a template for community and connection. In contrast, CS education is via singular modalities: lectures, textbooks, labs, discussions, et cetera, that share no active or social connection (you cannot +1 a lecture, for example, share a passage of a text with a classmate, or pull up a view that truly integrates a course and its community). But now we have the technology to create learning environments that share the same rich, multimedia experience as the popular social media sites. What should this look like? How do we start? What have you tried? We'll open with a brief overview of the leading social media tools for those unfamiliar, then proceed straight to an open discussion.	Let's talk social media (abstract only)	NA	2018
Viera K. Proulx:Stephen Bloch	Program by Design is a new name for the comprehensive introduction to programming at all levels that began with TeachScheme/ReachJava. This unconventional introductory computing curriculum covers both functional and the object- oriented program design in a systematic design-based style, enforcing test-first design from the beginning. The Bootstrap curriculum makes programming and algebra exciting for children ages 11-15. Special libraries support the design of interactive graphics-based games, musical explorations, client-server and mobile computing. We invite you to come and meet those who have used the curriculum, learn about new additions, libraries, bring in your experiences with the curriculum, show your projects, or ask questions about how it works and how you can use it. This work is sponsored by two NSF DUE CCLI grants: Redesigning Introductory Computing: The Design Discipline, Grant #00618543, and Integrating Test Design into Computing Curriculum from the Beginning, Grant #0920182.	Program by design: TeachScheme/ReachJava (abstract only)	NA:NA	2018
Frances P. Trees:Helen Hu:Chinma Uche	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, provision of member services at the local level, and to promote CSTA membership on the national level[1]. This BOF will provide a platform for the discussion of CSTA chapter formation and for the sharing of successful chapter activities.	CSTA chapters: supporting your local computer science educators (abstract only)	NA:NA:NA	2018
Kristine S. Nagel:Evelyn Brannock:Robert Lutz	Tech Camps are popular outreach tools to interest teens in computing programs and technology careers. One of the biggest obstacles is how to make Tech Camp "cool" and inviting for teenagers. How do we grab the attention of students to enroll? Once at camp, how do we engage teens with computing as a creative tool with relevancy to their lives? It is summer; subject areas must be entertaining and relevant. Can we stay ahead of the tech-savvy teens with our budget constraints? Robots and storytelling have long been used; how do we innovate and spark interest, throughout the year? The purpose of this BOF is to share ideas, such as App Inventor for Android to create apps, including text messaging, encouraging students to incorporate their own creative graphics, and using tablet devices.	Revitalizing computing camp and outreach: how do we engage teenagers in "cool" technology? (abstract only)	NA:NA:NA	2018
Clifford A. Shaffer	What should the textbook of tomorrow look like in a world of ubiquitous access to computing? Hypertextbooks have proved difficult to create and been fundamentally passive experiences. Commercial eBooks are merely books printed on an electronic screen instead of paper. New technologies such as HTML5 make it feasible to develop interactive applications that integrate with web services to provide a rich, pedagogically effective learning environment compatible with a range of computing platforms. We seek to generate discussion by participants to describe what they hope to see in online textbooks in the near future, and what resources and support would be required for them to adopt such a thing into their own courses.	Active eTextbooks for CS: what should they be? (abstract only)	NA	2018
N. Hari Narayanan:Martha Crosby:Dean Hendrix:Christopher Hundhausen	This BOF is related to the Special Session Transforming the CS Classroom with Studio-Based Learning (SBL). SBL promotes learning in a collaborative context by having students construct, present, review and refine their work with the guidance of peers and teachers. A team of CS educators and education experts have been implementing and evaluating SBL in CS courses over the past five years. The BOF will introduce SBL to the SIGCSE audience, and engage them in a discussion of the potential of, evidence for, and practical advice regarding SBL as an instructional approach that can motivate as well as teach students. Discussions will include "war stories" from teachers who have adopted the approach in their courses and hands-on activities to help participants apply SBL to their courses.	Enriching computing instruction with studio-based learning (abstract only)	NA:NA:NA:NA	2018
Lester L. Wainwright:Renee Ciezki:Robert G. Martin	This BOF will provide an opportunity for high school and college faculty to discuss the AP CS A curriculum and to explore possibilities for collaborations and outreach activities between high schools and colleges.	AP CS A: sharing teaching strategies and curricular ideas (abstract only)	NA:NA:NA	2018
Jodi Tims:Ellen Walker:Rachelle Kristof Hippler	Regional celebrations are locally organized, professional conferences modeled after the Grace Hopper Celebration of Women in Computing (GHC). This BOF allows people who have organized or would like to organize such a conference to get together to share successes and challenges. Attendees that have hosted a regional celebration should bring a un-poster (i.e. 8.5 x 11 flyer, 30 copies) that highlights their conference features and/or shares lessons learned. The leaders plan to divide the time between the 5 major areas of conference planning: program, sponsorship, publicity/communications, registration, and site/logistics.	Regional celebrations of women in computing (WiC): best practices (abstract only)	NA:NA:NA	2018
Richard S. Weiss:Michael E. Locasto:Jens Mache	Incorporating information security into the undergraduate curriculum continues to be a topic of interest to SIGCSE attendees. The purpose of this BOF is to help sustain the existing community of educators and researchers interested in bringing ethical hacking skills and an understanding of security into the classroom and relating these topics to the foundations of Computer Science. We would like to bring our colleagues together to share pedagogical practices, stories of hacking and how to use them to inspire our students and communicate complex concepts in computer science and security. We also plan to discuss our own experiences, practices and ongoing efforts (e.g., our infosec teaching experiences, the SISMAT program, EDURange and the dissemination of infosec interactive exercises). SISMAT is one of many alternatives for teaching cybersecurity to undergraduates. It is based on the "Hacker Curriculum" and includes a two-week summer intensive program, a research component and an internship. A description can be viewed at http://www.ists.dartmouth.edu/events/sismat/. An education in computer science can be an important resource in nurturing future leaders in cybersecurity, but only if we enable a community of educators willing to share approaches. This was highlighted by Sally Finch's keynote speech in 2010. At our BOF last year, several people had stories to share, and we plan to focus on that.	Hacking and the security curriculum: building community (abstract only)	NA:NA:NA	2018
Barry Brown	In a flipped classroom, students watch or listen to the lecture at home and do homework in the classroom. The classroom becomes much more interactive and the educator has ample opportunity to provide individualized guidance when it's most needed. The watch-at-home content can include recorded lectures, demonstration videos, adaptive quizzes, or anything in between. Come share your experiences developing "flip" material, learn from others what's involved, and find out whether it's working to improve success and retention.	Flipping the classroom (abstract only)	NA	2018
Semmy Purewal:Owen Astrachan:David Brown:Jeffrey Forbes	Social Networking continues to be a popular past-time among high school and college students. In this birds of a feather session, we will share ideas on integrating social networking topics into computer science courses at the introductory and non-major levels. Additionally we will discuss approaches to integrating social network programming into upper level courses. Finally we will attempt to address the following questions: will social networking draw new students into the computing disciplines the way that video games did in the previous generation? Will it attract new types of students with different expectations? Is social networking just a fad that will have no effect on Computer Science programs? Or is social networking a topic that is better left to other academic disciplines?	Using social networks to engage computer science students (abstract only)	NA:NA:NA:NA	2018
Robert E. Beck	This discussion will connect instructors who are reaching out to their colleagues in the humanities to discover areas of collaboration. It focuses on what these disciplines have to contribute to our knowledge of computing and how computational thinking informs these disciplines. One goal is to lay the foundation for a more general program of study in digital humanities that would reach students who would like to see how computing could enhance their work in history, literature, anthropology, or philosophy, for example.	Digital humanities: reaching out to the other culture (abstract only)	NA	2018
Trish Cornez:Richard Cornez	Attracting computer science students in a liberal arts setting serves to enhance the background and breadth of the class of professional programmers. There is a segment of the student population that is talented and artistic, but may not be aware of the interplay between computer science and the arts or computer science and mathematics and the sciences. Students are acculturated in a visual, interactive, and interdisciplinary world. This BOF will provide a platform for a discussion on how multimedia can be integrated in beginning level computing courses. Discussions will focus on attributes of conventional and unconventional first languages and explore a liberal arts approach to integrate disciplines both scientific and artistic. We envision discussions relevant to (a) mathematicians visualizing processes using multimedia and algorithms, (b) physicists using game programming to explore physical and virtual worlds, (c) computer scientists and behavioral scientists collaborating on responsive systems, (d) musicians, artists, and computer scientists creating computational art. The audience is expected to consist of faculty looking at nontraditional approaches to a first course in programming. Faculty with an aim to attract students to computer science studies will find this discussion useful. Those who feel their curriculum to be too narrowly focused and wish to broaden their curriculum to include the humanities and interdisciplinary approaches to computer science will find like-minded peers to communicate with.	A multimedia and liberal arts approach to a first course in programming and its crossover potential for computer science and the arts (abstract only)	NA:NA	2018
Hal Abelson:David Wolber:Ralph Morelli:Jeff Gray:Chinma Uche	App Inventor for Android is a visual blocks language for building mobile apps. Like Scratch, the language's drag-and-drop blocks interface significantly lowers the barrier to entry. Beginners can immediately build apps that interface with mobile technology (e.g., GPS, Text-to-speech, SMS Texting) and build apps that have a real-world impact. App Inventor has great potential for increasing interest in programming and attracting women and other underrepresented groups to computer science. Students learn by tinkering with their most beloved devices, phones and tablets, and even novices can create apps in an exciting and intuitive environment. App Inventor is relevant to teachers from middle school through the university level who are interested in a highly motivating method of teaching programming. In this BoF, we will discuss the language, its future in K-12 and university education, and its new home at the MIT Center for Mobile Learning.	Teaching with app inventor for android (abstract only)	NA:NA:NA:NA:NA	2018
Daniel D. Garcia:Luke Segars	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part - we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users? Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2018
John Lewis:Anthony Allevato:Stephen Edwards	The use of Android in computing courses is growing. Students find it engaging because it offers a unique opportunity to develop Java apps for mobile devices. Android offers opportunities and challenges in a teaching environment, especially in CS1 and CS2. As a professional-level platform, it incorporates many design idioms that may require students to learn advanced language features earlier. It also introduces logistical complications in setting up development tools and code projects. Existing approaches to software testing and automated grading also must be adapted. This BOF will gather educators interested in using Android in their courses, focusing on issues that arise when balancing the need to teach fundamental concepts with the complexities required to accomplish basic tasks on the Android platform. We look forward to sharing assignments, resources, techniques, and experiences with others interested in Android.	Motivating CS1/2 students with the android platform (abstract only)	NA:NA:NA	2018
Suzanne W. Dietrich:Don Goelman	Databases play a major role across many disciplines for the storage and retrieval of information. Many database educators are establishing collaborations with colleagues representing a diverse spectrum of interests, for both research and pedagogical purposes. Further, the range of cooperating disciplines is expanding, as evidenced by the emergence of new fields such as computational journalism, as well as by the proliferation of discipline-specific dialects of XML. The goal of this Birds-of-a-Feather session is to bring database educators together to share their experiences on interdisciplinary collaborations in an open dialogue that is fostered by this format.	Interdisciplinary database collaborations (abstract only)	NA:NA	2018
Carol Smith	Google Summer of Code is the outreach program aimed at getting university students involved in a 3-month online internship working in open source software development. Google Code-in is the contest aimed at involving 13-18 year olds in open source software development, documentation translation, outreach, research, and more. I will be discussing both programs at this BoF and encouraging students and teachers to get involved. We'll open the forum for discussion amongst the attendees about how to participate, how to get the word out, and answer any questions they may have.	Google summer of code and google code-in BoF (abstract only)	NA	2018
Chris Stephenson:Steve Cooper:Don Yanek:Jeff Gray	Over the last five years, CSTA has built a solid outreach and teacher support network through the work of its chapters and Leadership Cohort. This network has also become a major source of active partnerships between K-12 teachers, their schools, and colleagues from colleges, universities, and industry. The goal of this BOF is to provide concrete examples and suggestions for SIGCSE members interested in building these kinds of partnerships.	Building partnerships across the CS education spectrum (abstract only)	NA:NA:NA:NA	2018
William Turkett:Paúl Pauca:Joel Hollingsworth	As the popularity of mobile devices surges, more and more organizations are looking to exploit the novel interaction methods of mobile devices to re-deploy legacy software or to develop innovative new applications. Many organizations are looking to nearby universities for expertise in this area. At the same time, mobile computing has become increasingly integrated within courses in CS departments. Historically, capstone courses and other advanced electives have resulted in the production of non-trivial software artifacts. This BOF will provide a platform for discussion of how the use of mobile app platforms in such courses can allow for the development of meaningful software projects that engage with and give back to the community and provide rich opportunities for service learning.	Engaging the community with mobile app projects (abstract only)	NA:NA:NA	2018
Paige H. Meeker	At many schools, various disciplines offer travel courses to enhance the knowledge of the student. How can we introduce such courses to computer science departments across the country? This BOF will provide a time of sharing ideas for such courses and discuss travel courses that have been successfully taught. This will include not only the material for the course but also discussion concerning the additional planning overhead that must be considered when traveling - cost, insurance, itinerary, safety, etc.	Have class, will travel (abstract only)	NA	2018
