Thomas Cortina	NA	Session details: Keynote	NA	2018
Matthias Felleisen	In 1995, my research team and I decided to create TeachScheme!, an educational outreach project, with the hope that our work on programming languages could effect a dramatic change in K-12 computer science. Specifically, we envisioned a virtuous cycle of two mutually reinforcing ideas. On the one hand, we would create a design-oriented curriculum path from middle school through college. On the other hand, our approach would help kids with learning school mathematics. Hence a course on programming would benefit every student, not just those who end up choosing computer science as a college major. At this point, we have a new design-oriented curriculum; a pedagogic program development environment to make it fun; and a series of matching programming languages. After focusing at the overlap between high schools and colleges at first, we now use after-school programs to move upstream, and we are working on two major downstream courses for the second semester in college: one on object-oriented design and another on logic in program design. My talk will focus on just one aspect of the project: the design-oriented curriculum and its smooth path from middle school to college. I will first demonstrate how to teach an intellectually interesting and fun course on programming with something that looks like plain school mathematics. For the rest of the talk, I will sketch the path from there through college.	TeachScheme!	NA	2018
James Caristi	NA	Session details: Panel	NA	2018
James Caristi:Valerie Barr:Joe Sloan:Eric Stahlberg	NA	Starting a computational science program	NA:NA:NA:NA	2018
Doug Baldwin	NA	Session details: Special session	NA	2018
Douglas Baldwin:Peter Sanderson:Robert McCartney:Stephanie Ludi:Narayanan T. Ramachandran:Carol Taylor	SIGCSE's special projects grant program provides small grants to SIGCSE members to carry out computing education projects whose results generalize to the whole computing education community. This session is a "showcase" for five recent grant projects: a MIPS simulator extended into FPGA hardware, a study of informal learning of computing, software engineering learning modules for the visually impaired, a study of student projects in computing, and curriculum resources for computer security.	SIGCSE special project showcase	NA:NA:NA:NA:NA:NA	2018
Robert Beck	NA	Session details: Special session	NA	2018
Robert E. Beck:Jennifer Burg:Jesse M. Heines:Bill Manaris	NA	Computing and music: a spectrum of sound	NA:NA:NA:NA	2018
Irene Polycarpou	NA	Session details: Security and society	NA	2018
Tadayoshi Kohno:Brian D. Johnson	Computer security courses typically cover a breadth of technical topics, including threat modeling, applied cryptography, software security, and Web security. The technical artifacts of computer systems - and their associated computer security risks and defenses - do not exist in isolation, however; rather, these systems interact intimately with the needs, beliefs, and values of people. This is especially true as computers become more pervasive, embedding themselves not only into laptops, desktops, and the Web, but also into our cars, medical devices, and toys. Therefore, in addition to the standard technical material, we argue that students would benefit from developing a mindset focused on the broader societal and contextual issues surrounding computer security systems and risks. We used science fiction (SF) prototyping to facilitate such societal and contextual thinking in a recent undergraduate computer security course. We report on our approach and experiences here, as well as our recommendations for future computer security and other computer science courses.	Science fiction prototyping and security education: cultivating contextual and societal thinking in computer security education and beyond	NA:NA	2018
Claude F. Turner:Blair Taylor:Siddharth Kaza	While many colleges offer specialized security courses and tracks for students in computing majors, there are few offerings in information security for the non-computing majors. Information security is becoming increasingly critical in many fields, yet most computer literacy courses insufficiently address the security challenges faced by our graduates. This paper discusses the development and impact of a set of modules designed to integrate security into computer literacy across two universities and several community colleges in the state of Maryland. Results from our comparative analyses based on pre- and post- test analysis show significant improvements in post-test results.	Security in computer literacy: a model for design, dissemination, and assessment	NA:NA:NA	2018
Trajce Dimkov:Wolter Pieters:Pieter Hartel	Practical courses in information security provide students with first-hand knowledge of technical security mechanisms and their weaknesses. However, teaching students only the technical side of information security leads to a generation of students that emphasize digital solutions, but ignore the physical and the social aspects of security. In the last two years we devised a course where students were given a practical assignment which includes a combination of physical security, social engineering and digital penetration testing. As part of the course, the students stole laptops using social engineering from unaware employees throughout the university campus. The assignment provided the students with a practical overview of security and increased their awareness of the strengths and weaknesses of security mechanisms. In this paper we present the design of the practical assignment and the observations from the execution.	Training students to steal: a practical assignment in computer security education	NA:NA:NA	2018
Matthew Hertz	NA	Session details: Organization and architecture	NA	2018
Joel C. Adams:Kathy Hoobeboom:Jonathan Walz	Traditional Beowulf clusters have been homogeneous platforms for distributed-memory MIMD parallelism. However, the shift to multicore architectures has made shared-memory MIMD parallelism increasingly important, and inexpensive manycore GPGPUs have revived SIMD parallelism. This paper presents a case study in designing and building a heterogeneous cluster as a learning platform for tera-scale distributed- and shared-memory MIMD parallelism, and GPGPU parallelism.	A cluster for CS education in the manycore era	NA:NA:NA	2018
Erik Brunvand	The design of computer games can be a powerful motivator as students learn about computer architecture and design. Students in classes where computer designs are developed and implemented (usually on Field Programmable Gate Arrays (FPGAs)) seem much more highly motivated if their computer design can be used for something visual and interactive when the project is complete. However, ensuring that the student teams can have a working game by the end of a semester requires careful planning of how their computer designs will interact with the world. Keyboard inputs and VGA outputs are a relatively simple set of I/O interfaces that open up significant new potential for development of game applications on the student's own computer designs. In this paper we describe the curriculum of a computer design course that uses game design as a "carrot" to encourage active student exploration and deeper understanding of computer architecture, I/O subsystems, and computer implementation.	Games as motivation in computer design courses: I/O is the key	NA	2018
Marc L. Corliss:Marcela Melara	In this paper, we present the VIREOS project, a new operating system designed specifically for the classroom. VIREOS is a simple, Unix-like, operating system, which runs on the Larc educational architecture. A VIREOS/Larc system can either be simulated or run on a pre-configured FPGA. The VIREOS project is well integrated with an introductory computer architecture course using Larc and the assignments are structured in a similar fashion: using a bottom-up approach. We have several resources available on the Web, which help reduce the overhead of adopting VIREOS. Finally, VIREOS has been used in one operating systems course already, and the feedback from students was generally favorable.	VIREOS: an integrated, bottom-up, educational operating systems project with FPGA support	NA:NA	2018
Elizabeth Shoop	NA	Session details: Learning objects and modules	NA	2018
L. D. Miller:Leen-Kiat Soh:Beth Neilsen:Kevin Kupzyk:Ashok Samal:Erica Lam:Gwen Nugent	Learning objects (LO) have previously been used to help deliver introductory computer science (CS) courses to students. Students in such introductory CS courses have diverse backgrounds and characteristics requiring revision to LO content and assessment to promote learning in all students. However, revising LOs in an ad hoc manner could make student learning harder for subsequent deployments. To address this problem, we present a systematic revision process for LOs (LOSRP) using proven techniques from educational research including Bloom's Taxonomy levels, item-total correlation, and Cronbach's Alpha. LOSRP uses these validation methods to answer seven questions in order to diagnose what needs to be revised in the LO. Then, LOSRP provides guidelines on revising LOs for each of the seven questions. As an example, we discuss how LOSRP was used to revise the content and assessment for 16 LOs deployed to over 400 students in introductory CS courses in 2009. Lastly, although initially designed for LO revision, we briefly discuss how LOSRP could be used for assessment revision in intelligent tutoring systems.	Revising computer science learning objects from learner interaction data	NA:NA:NA:NA:NA:NA:NA	2018
Jeffrey A. Stone:Tricia K. Clark	CS educators face many challenges in teaching basic computer programming to first-year students. As a result, faculty must find new and interesting ways to engage students and to provide opportunities for student success. This paper reports on a two-year study involving the Problem-Oriented Animated Learning Modules for Introductory Computer Science (PALMS for CS1) project. PALMS for CS1 is a set of animated learning modules designed to enhance student engagement, success, and retention through the use of computer animation, video, audio, and storytelling. The results of this study indicate that PALMS for CS1 has been successful in engaging introductory students but more work remains to improve student success and retention. Marked improvement in student success and retention was seen during the second year of the study, though success and retention are still a challenge for traditionally underrepresented groups.	The impact of problem-oriented animated learning modules in a CS1-style course	NA:NA	2018
L. D. Miller:Leen-Kiat Soh:Gwen Nugent:Kevin Kupzyk:Leyla Masmaliyeva:Ashok Samal	Learning objects (LOs) have been previously used in computer science education. However, analyses in previous studies have been limited to surveys with limited numbers of LOs and students. The lack of copious quantitative data on how LOs impact student learning makes detailed analysis of LO usefulness problematic. Using an empirical approach, we have studied a suite of LOs, comprehensive in both the content covered and the range of difficulty, deployed to CS1 courses from 2007-2010. We review previous work on predictors of achievement and impact of active learning and feedback. We also provide a high-level overview of our LO deployment. Finally, based on our analysis of student interaction data, we found that (1) students using LOs have significantly higher assessment scores than the control group, (2) several student attributes are significant predictors of learning, (3) active learning has a significant effect on student assessment scores, and (4) feedback does not have a significant effect, but there are variables with significant moderating effects.	Evaluating the use of learning objects in CS1	NA:NA:NA:NA:NA:NA	2018
Stephen Edwards	NA	Session details: Undergraduate innovations	NA	2018
Rahman Tashakkori:Barry L. Kurtz:Dolores A. Parks:James B. Fenwick, Jr.:Alice A. McRae	Research experiences are widely available to upper-division computer science students during the academic year and during summer. Co-op and internship opportunities are available to this group as well. Due to the fact that freshman and sophomore students do not have sufficient background, they are often left behind and are not involved in research activities. This paper shares some experiences with a program that was put in place through an NSF STEP grant that provides research opportunities to freshman, sophomore, and first year transfer students. The paper presents examples of projects in which computer science scholars were involved. We have learned that lower-division computer science students are excited about the opportunity to participate in research. Early participation in research helps build a strong community among the freshman and sophomore students, keeps these students engaged, and results in a higher retention rate.	Early participation of CS students in research	NA:NA:NA:NA:NA	2018
Janet Davis:Henry M. Walker	CC2001 and CC2008 recommend that an undergraduate computing curriculum include 16 hours related to social and professional issues. An ITiCSE 2010 Working Group discussed approaches for incorporating this material in the curriculum and outlined seven contrasting implementation cases. Also, Baldwin et al discuss the implementation of computing curricula at five different liberal arts colleges [TOCE, March 2010]. However, none of these provides specific implementation details for addressing social issues in a liberal arts computing curriculum. This paper identifies successful strategies from one college and begins a general discussion of teaching social issues of computing in a liberal arts setting.	Incorporating social issues of computing in a small, liberal arts college: a case study	NA:NA	2018
Paul E. Dickson	The use of undergraduate teaching assistants in computer science courses is not new but is primarily thought of as a way to help with large classes in universities and rarely for small classes in small colleges. In this paper we discuss the success we have had over the past 2 years using undergraduate students as teaching assistants for a number of small computer science classes. Our experience has shown that having undergraduates as teaching assistants helps to engage students with the material, creates a more relaxed classroom environment in which students feel more free to ask questions, improves the effectiveness of class time, and improves class quality. We believe that our experiences using undergraduate teaching assistants can be beneficial not only to small colleges but also to large universities.	Using undergraduate teaching assistants in a small college environment	NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Marie desJardins:Zachary Dodds:Todd Neller	In 2010 a new annual symposium on Educational Advances in Artificial Intelligence (EAAI) was launched as part of the AAAI annual meeting. The event was held in cooperation with ACM SIGCSE and has many similar goals related to broadening and disseminating work in computer science education. EAAI has a particular focus, however, as the event is specific to educational work in Artificial Intelligence and collocated with a major research conference (AAAI) to promote more interaction between researchers and educators in that domain. This panel seeks to introduce participants to EAAI as a way of fostering more interaction between educational communities in computing. Specifically, the panel will discuss the goals of EAAI, provide an overview of the kinds of work presented at the symposium, and identify potential synergies between that EAAI and SIGCSE as a way of better linking the two communities going forward.	Educational advances in artificial intelligence	NA:NA:NA:NA	2018
Gregory Hislop	NA	Session details: Panel	NA	2018
Heidi J.C. Ellis:Mel Chua:Matthew C. Jadud:Gregory W. Hislop	Free and Open Source Software (FOSS) and documentation projects provide excellent learning opportunities for students. In the context of active learning, FOSS is particularly interesting in providing transparent meritocracies that allow students to observe and contribute as part of their learning. This panel will present four different perspectives on student involvement in Free and Open Source Software (FOSS) projects. These perspectives will cover: (a) different ways that students can contribute to FOSS projects beyond coding, (b) an industry perspective on student involvement in FOSS projects, (c) how Humanitarian FOSS can provide a welcoming environment for student learning, and (d) barriers to faculty involvement and how such barriers can be overcome.	Learning through open source participation	NA:NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Jan Cuny:Chris Stephenson:Cameron Wilson	The CS10K project is a large-scale, collaborative project bringing together stakeholders from wide-ranging constituencies with the goal of systematically changing the scale, curriculum, and pedagogy of teaching computer science at all levels, but focusing in particular on computer science in U.S. high schools as well as introductory computing at the college level. As part of the systemic changes in teaching computer science the CS10K project aims to have 10,000 teachers in 10,000 high schools teaching a new curriculum by 2015.	The CS10K project: mobilizing the community to transform high school computing	NA:NA:NA:NA	2018
Khadija Stewart	NA	Session details: Teaching programming: non-traditional approaches	NA	2018
Peter Hubwieser:Marc Berges	In this paper, we describe a research project that investigates how far freshmen at the University (without any programming background) are able to learn object-oriented programming with as little (human) instruction as possible. We designed specific tasks for programming assignments and supporting worksheets that contained the only information input that the students received during the courses. We examined the program code the students produced in order to assess the quality of their products. The surprising result was that most of the students were able to write quite satisfying programs. Additionally, a cluster analysis of the results showed that there are two different types of students: the ones that accept and apply the object-oriented concepts quite willingly, while the others prefer to program in a more traditional, procedural style.	Minimally invasive programming courses: learning OOP with(out) instruction	NA:NA	2018
Arto Vihavainen:Matti Paksula:Matti Luukkainen	Learning a craft like programming is efficient when novices learn from people who already master the craft. In this paper we define Extreme Apprenticeship, an extension to the cognitive apprenticeship model. Our model is based on a set of values and practices that emphasize learning by doing together with continuous feedback as the most efficient means for learning. We show how the method was applied to a CS I programming course. Application of the method resulted in a significant decrease in the dropout rates in comparison with the previous traditionally conducted course instances.	Extreme apprenticeship method in teaching programming for beginners	NA:NA:NA	2018
Kathryn T. Stolee:Teale Fristoe	Educational programming environments such as Microsoft Research's Kodu Game Lab are often used to introduce novices to computer science concepts and programming. Unlike many other educational languages that rely on scripting and Java-like syntax, the Kodu language is entirely event-driven and programming takes the form of "when" do' clauses. Despite this simplistic programing model, many computer science concepts can be expressed using Kodu. We identify and measure the frequency of these concepts in 346 Kodu programs created by users, and find that most programs exhibit sophistication through the use of complex control flow and boolean logic. Through Kodu's non-traditional language, we show that users express and explore fundamental computer science concepts.	Expressing computer science concepts through Kodu game lab	NA:NA	2018
David Ranum	NA	Session details: Assessing and reviewing	NA	2018
Chris Loftus:Lynda Thomas:Carol Zander	In this paper we revisit previous research to elaborate on the question: "Can graduating students design software systems?" The work concluded that the answer was "not really". We wished to determine if this was true currently at our institution and also to look at whether students were able to design software in groups, and evaluate others' designs. In summary, it appears that our students, just as in the original experiment, struggle with doing design, even in a group situation. The representation of behavioral design was particularly lacking. That said, students were able to recognize weaknesses when evaluating other group designs. Based on our findings, we provide several pedagogic recommendations.	Can graduating students design: revisited	NA:NA:NA	2018
Allison Elliott Tew:Mark Guzdial	A primary goal of many CS education projects is to determine the extent to which a given intervention has had an impact on student learning. However, computing lacks valid assessments for pedagogical or research purposes. Without such valid assessments, it is difficult to accurately measure student learning or establish a relationship between the instructional setting and learning outcomes. We developed the Foundational CS1 (FCS1) Assessment instrument, the first assessment instrument for introductory computer science concepts that is applicable across a variety of current pedagogies and programming languages. We applied methods from educational and psychological test development, adapting them as necessary to fit the disciplinary context. We conducted a large scale empirical study to demonstrate that pseudo-code was an appropriate mechanism for achieving programming language independence. Finally, we established the validity of the assessment using a multi-faceted argument, combining interview data, statistical analysis of results on the assessment, and CS1 exam scores.	The FCS1: a language independent assessment of CS1 knowledge	NA:NA	2018
Christopher D. Hundhausen:Pawan Agarwal:Michael Trevisan	Given the increased importance of communication, teamwork, and critical thinking skills in the computing profession, we have been exploring studio-based instructional methods, in which students develop solutions and iteratively refine them through critical review by their peers and instructor. We have developed an adaptation of studio-based instruction for computing education called the pedagogical code review (PCR), which is modeled after the code inspection process used in the software industry. Unfortunately, PCRs are time-intensive, making them difficult to implement within a typical computing course. To address this issue, we have developed an online environment that allows PCRs to take place asynchronously outside of class. We conducted an empirical study that compared a CS 1 course with online PCRs against a CS 1 course with face-to-face PCRs. Our study had three key results: (a) in the course with face-to-face PCRs, student attitudes with respect to self-efficacy and peer learning were significantly higher; (b) in the course with face-to-face PCRs, students identified more substantive issues in their reviews; and (c) in the course with face-to-face PCRs, students were generally more positive about the value of PCRs. In light of our findings, we recommend specific ways online PCRs can be better designed.	Online vs. face-to-face pedagogical code reviews: an empirical comparison	NA:NA:NA	2018
Delvin Defoe	NA	Session details: Algorithms	NA	2018
Tim Bell:Bengt Aspvall	This paper offers an exercise for revisiting the main sorting algorithms after they have been taught to students. This is done in a way that emphasizes the relationships between them, and shows how considering abstraction and extreme cases can lead to the generation of new algorithms. A number of authors (including textbook authors) have noted particular relationships between algorithms, such as an uneven split in merge sort being equivalent to insertion sort. In this paper we use a flexible priority queue, the d-heap, to derive three common sorting algorithms. We combine this with using a BST as a priority queue, plus prior observations in the literature, to show strong relationships between the main sorting algorithms that appear in textbooks. In the process students are able to revisit a number of algorithms and data structures and explore elegant relationships between them. This approach can also lead to exercises and exam questions that go beyond desk-checking to evaluate students' understanding of these algorithms.	Sorting algorithms as special cases of a priority queue sort	NA:NA	2018
Clifford A. Shaffer:Monika Akbar:Alexander Joel D. Alon:Michael Stewart:Stephen H. Edwards	Algorithm visualizations (AVs) are widely viewed as having the potential for improving computer science education. However, the rate of AV use and overall impact on education does not match the positive interest in their use that instructors report. Surveys of CS faculty show that impediments to successful use of AVs in the classroom include difficulties in finding quality AVs on desired topics, difficulties in adapting AVs to a given classroom setting, and lack of knowledge on the best way to deploy AVs. This indicates a need for better support for instructors, to get them past these barriers. We seek to provide this support through an online educational community that relies on a new model based less on the "digital library" approach of information gained by going to a site and searching. Instead, the focus is on community-added content through members' discussions, reviews, and ratings of content items. The AlgoViz community effort will better focus the future direction of AV development and use.	Getting algorithm visualizations into the classroom	NA:NA:NA:NA:NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	We conducted two experiments evaluating Sketchmate, a tool used to teach the splay tree data structure and its algorithms. Learning and learning rates were compared across two groups, one using Sketchmate and the other using paper-and-pencil on practice problems. Results from Experiment I showed that when students used Sketchmate with minimal feedback, there were no significant differences across learning, time spent learning, or learning rate. Experiment II used a version of Sketchmate that provided richer feedback. Results showed similar learning but Sketchmate took significantly less time. Thus when feedback was added, learning rates were significantly greater relative to the paper-and-pencil condition. Discussion focuses on measuring learning rates when evaluating instructional tools.	Two experiments using learning rate to evaluate an experimenter developed tool for splay trees	NA:NA:NA	2018
Rowena Turner	NA	Session details: Software engineering	NA	2018
Sriram Mohan:Stephen Chenoweth	Requirements engineering, an integral part of the life of a software engineer, often receives little or no attention in the education of a computer science student. We report on our experiences in constructing an innovative curriculum that utilizes a three tier model of learning that provides students with hands-on experience on the various facets of requirements elicitation and management. This curriculum can be integrated into an existing course on software engineering, software requirements or the senior capstone experience. We believe our experience will be of use to other computer science and software engineering programs that are aiming at introducing requirements in the undergraduate curriculum.	Teaching requirements engineering to undergraduate students	NA:NA	2018
Peter J. Clarke:Jairo Pava:Yali Wu:Tariq M. King	One of the main concerns in the software industry continues to be the development of high quality software. This concern will be exacerbated as software systems become more complex. The training of software developers continues to grow in academia since more institutions are offering software engineering (SE) courses. However, the list of topics that are expected to be covered in this course leaves little or no time for topics that focus on developing quality software, such as software testing and the use of testing tools. In this paper we describe an approach that non-intrusively integrates the use of software testing tools in SE courses. The cornerstone of our approach is the interaction students have with a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on testing concepts and testing tools. WReSTT employs both collaborative learning and social networking features that are attractive to students. We present the results of preliminary study performed in two SE courses that show how using the resources in WReSTT can potentially impact the students' understanding of software testing and the use of testing tools.	Collaborative web-based learning of testing tools in SE courses	NA:NA:NA:NA	2018
Tom Nurkkala:Stefan Brandle	Software Studio is a studio-based learning (SBL) curriculum designed to train students as professional software engineers. Traditional software engineering courses remain important, but suffer significant gaps in preparing students for professional engagement. We describe our curriculum model, highlight ways in which it fills these gaps, and offer a SWOT analysis. As practical guidance, we reflect on our missteps and successes in implementing Software Studio over the past five semesters. Finally, we suggest future directions for Software Studio.	Software studio: teaching professional software engineering	NA:NA	2018
Henry Walker	NA	Session details: Panel	NA	2018
Karen Donathan:Barbara Ericson:Paul Tymann:Henry M. Walker	Much has been written about the decrease in the number of students pursuing computing in colleges. Unfortunately, most students form their (usually negative) opinions of computing long before they reach college [1], so it is beneficial for university faculty who want to increase college enrollment to do outreach aimed at a younger audience. Activities to promote computing among K-12 students can proceed at several levels, occur in various locations, and involve both students and faculty. College and high school faculty can collaborate in many ways. As teachers of introductory courses, both groups want to generate interest, cover important material, and provide a strong foundation for later work. For example, the AP CS course description includes material that fits well with both high school and introductory college courses. Also, today in both environments, there is much discussion regarding the best approaches for creating excitement and introducing students to computing. Although both faculties need to address common content and utilize active pedagogies, it also is important to acknowledge that college and high school environments are different, and both levels have special opportunities and constraints. Many college faculty are interested in doing K-12 outreach but often do not know where to start or do not know any successful strategies. The purpose of this panel is to present K-12 outreach strategies that have worked and then to provide the audience with the opportunity to brainstorm with the panelists to explore alternate ideas for outreach and to identify new approaches. Some ideas and strategies come from experiences of high school and college teachers working together as part of the AP CS program, but other approaches extend beyond AP CS.	Successful K-12 outreach strategies	NA:NA:NA:NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Mark Guzdial:Andrew McGettrick:Steve Roach	Following a roughly 10 year cycle, the Computing Curricula volumes have helped to set international curricular guidelines for undergraduate programs in computing. In the summer of 2010, planning for the next volume in the series, Computer Science 2013, began. This panel seeks to update and engage the SIGCSE community on the Computer Science 2013 effort. The development of curricular guidelines in Computer Science is particularly challenging given the rapid evolution and expansion of the field. Moreover, the growing diversity of topics in Computer Science and the integration of computing with other disciplines create additional challenges and opportunities in defining computing curricula. As a result, it is particularly important to engage the broader computer science education community in a dialog to better understand new opportunities, local needs, and novel successful models of computing curriculum. The last complete Computer Science curricular volume was released in 2001 [3] and followed by a review effort that concluded in 2008 [2]. While the review helped to update some of the knowledge units in the 2001 volume, it was not aimed at producing an entirely new curricular volume and deferred some of the more significant questions that arose at the time. The Computer Science 2013 effort seeks to provide a new volume reflecting the current state of the field and highlighting promising future directions through revisiting and redefining the knowledge units in CS, rethinking the essentials necessary for a CS curriculum, and identifying working exemplars of courses and curricula along these lines.	Setting the stage for computing curricula 2013: computer science -- report from the ACM/IEEE-CS joint task force	NA:NA:NA:NA	2018
Robert McCartney	NA	Session details: Special session	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Stephen Cooper:Daniel D. Garcia:Michelle Friend Hutton:Nick Parlante:Brad Richards	We often learn of successful pedagogical experiments, but we seldom hear of the the ones that failed. For this special session we solicited submissions from the SIGCSE membership, selected the best from among these, and will have presentations at the session by the selected authors. Our contributions describe pedagogical approaches that seemed to be good ideas but turned out as failures. Contributors will describe their pedagogical experiment, the rationale for the experiment, evidence of failure, and lessons learned.	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA	2018
Janet Davis	NA	Session details: Recruitment and retention	NA	2018
James P. Cohoon:Luther A. Tychonievich	An effective CS1 approach has been developed for encouraging diverse students without prior computer science experiences to select computing majors. Separation of CS1 sections by prior experience level concentrates diverse students in the inexperienced section. Within that section we use several techniques to increase student comprehension and participation, including an integrated lecture/lab, many small examples and assignments, student participation, etc. We discuss the approach and evaluate its performance over a four-year time period.	Analysis of a CS1 approach for attracting diverse and inexperienced students to computing majors	NA:NA	2018
Elizabeth Sweedyk	Recruitment of students to Computer Science has been a major focus of effort for educators since the dot-com bust in 2001. Two largely disparate themes in these efforts are women and games. There have been numerous efforts to broaden participation in computer science by attracting women to the field. At the same time, games are increasingly used to attract new students. Our interest lies at the intersection of these methods. We began using game design/development projects in our software engineering course, CS121, in 2002. The game focus was extremely successful with many of our students. But a nagging minority of students objected to building games, and women tend to be overrepresented in that group. So while are awed by the power of games to engage and motivate many of our students, we need to ask: Do games in our curriculum reinforce gender stereotypes of Computer Science? Do they foster development of the so-called "Geek mythology?"[7] In short, must we choose: women or games? We argue the answer is no. While traditional game projects may disenfranchise women, our experience shows that serious game projects both attract and engage them. This paper describes our results.	Women build games, seriously	NA	2018
Jennifer S. Kay	America's youth perceive Computer Science to be difficult, tedious, boring, irrelevant and asocial. Unfortunately, many traditional introductory Computer Science classes and textbooks do little to improve that image. In contrast, contextualized approaches to teaching introductory Computer Science are very attractive. Instead of writing a leap year program, students can learn about conditional statements by programming a robot to follow a light, or by creating an animation to tell a story, or even by modifying a picture of the college president so that she is wearing a neon orange jacket instead of a navy blue one. The arguments in favor of contextualized approaches to attract non-Computer-Science-majors to our classes are very persuasive. But what about students who then choose to major or minor in Computer Science? Of course we want to offer them interesting and engaging first courses in Computer Science, and indeed this may help with our efforts to attract more students to our programs. But what happens in subsequent semesters? The purpose of this paper is to initiate a general discussion on the use of any sort of "cool" new approach into both undergraduate and K-12 Computer Science education. These approaches successfully attract students to study subjects that we ourselves are deeply engaged in. But we need to discuss as a community what happens to students who do choose to major or minor in Computer Science when our individual classes conclude and the rest of their studies commence.	Contextualized approaches to introductory computer science: the key to making computer science relevant or simply bait and switch?	NA	2018
Lillian N. Cassel	NA	Session details: Parallel/concurrent programming: tools and languages	NA	2018
Patrick Garrity:Timothy Yates:Richard Brown:Elizabeth Shoop	WebMapReduce (WMR) is a strategically simplified user interface for the Hadoop implementation of the map-reduce model for distributed computing on clusters, designed so that novice programmers in an introductory CS courses can perform authentic data-intensive scalable computations using the programming language they are learning in their course. The open-source WMR software currently supports Java, C++, Python, and Scheme computations, and can readily be extended to support additional programming languages, and configured to adapt to the practices at a particular institution for teaching introductory programming. Potential applications in courses at all undergraduate levels are indicated, and implementation of the WMR software is described.	WebMapReduce: an accessible and adaptable tool for teaching map-reduce computing	NA:NA:NA:NA	2018
Caitlin Sadowski:Thomas Ball:Judith Bishop:Sebastian Burckhardt:Ganesh Gopalakrishnan:Joseph Mayo:Madanlal Musuvathi:Shaz Qadeer:Stephen Toub	Multicore computers are now the norm. Taking advantage of these multiple cores entails parallel and concurrent programming. There is therefore a pressing need for courses that teach effective programming on multicore architectures. We believe that such courses should emphasize high-level abstractions for performance and correctness and be supported by tools. This paper presents a set of freely available course materials for parallel and concurrent programming, along with a testing tool for performance and correctness concerns called Alpaca (A Lovely Parallelism And Concurrency Analyzer). These course materials can be used for a comprehensive parallel and concurrent programming course, a la carte throughout an existing curriculum, or as starting points for graduate special topics courses. We also discuss tradeoffs we made in terms of what to include in course materials.	Practical parallel and concurrent programming	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Ariel Ortiz	Teaching how to write correct programs is hard; teaching how to write correct concurrent programs is even harder. There is a desperate need for a better concurrency programming model than what most people are currently using. The Erlang programming language might be a step in that direction. This paper provides an overview of Erlang and how it has been successfully used to teach concurrency-oriented programming (COP) in a sophomore level course at the Tecnológico de Monterrey, Campus Estado de México.	Teaching concurrency-oriented programming with Erlang	NA	2018
Jian Zhang	NA	Session details: Peer teaching and tutoring	NA	2018
Sarah Hug:Heather Thiry:Phyllis Tedford	This paper describes the benefits of Peer-Led Team Learning (PLTL), an NSF-sponsored program in the sciences, to peer leaders serving in the Computing Alliance for Hispanic Serving Institutions (CAHSI). Beyond the benefits to students enrolled in the PLTL courses, survey findings show the majority of peer leaders report increased self-efficacy in teaching computer science, improved content knowledge, and better communication and leadership skills following a semester of leading PLTL. Results from this diverse group of leaders indicate no differences in gains between underrepresented minority and majority students, suggesting the program may provide a path for improving retention of underrepresented groups in the field.	Learning to love computer science: peer leaders gain teaching skill, communicative ability and content knowledge in the CS classroom	NA:NA:NA	2018
Christian Murphy:Rita Powell:Kristen Parton:Adam Cannon	The Peer-Led Team Learning (PLTL) approach has previously been shown to be effective in recruiting and retaining students, particularly under-represented students, in undergraduate introductory CS courses. In PLTL, small groups of students are led by an undergraduate peer and work together to solve problems related to CS. At Columbia University, the Columbia Emerging Scholars Program has used PLTL in an effort to increase enrollment in CS courses beyond the introductory level, and to increase the number of students who select Computer Science as their major, by demonstrating that CS is necessarily a collaborative activity that focuses more on problem solving and algorithmic thinking than on programming. Over the past six semesters, over 80 students have completed the program, and preliminary results indicate that this program has had a positive effect on increasing participation in the major. This paper discusses our experiences of building and expanding the Columbia Emerging Scholars program, and addresses such topics as recruiting, training, scheduling, student behavior, and evaluation. We expect that this paper will provide a valuable set of lessons learned to other educators who seek to launch or grow a PLTL program at their institution as well.	Lessons learned from a PLTL-CS program	NA:NA:NA:NA	2018
Joseph A. Cottam:Suzanne Menzel:Janet Greenblatt	Peer tutoring is a simple, low-cost intervention that can be implemented in CS1/2 courses. It is hypothesized that peer tutoring helps students build a sense of community, succeed in course work, and build confidence to take further courses in the major. This paper examines the latter two hypotheses by examining the predicted and actual behavior of students in CS1/2. Course performance improvements were observed, which also strongly influence retention in computing-related courses. The measures also point to further research directions, such as social influences and the impact of peer tutoring relative to office hours or online forums.	Tutoring for retention	NA:NA:NA	2018
Duane Buck	NA	Session details: Musical, social, and intelligent robots	NA	2018
Andrea Salgian:Christopher Ault:Teresa M. Nakra:Yunfeng Wang:Meredith K. Stone	In this paper, we describe an ongoing multidisciplinary undergraduate seminar that we have developed, in which student teams build non-human systems that conduct our college orchestra. Students and faculty in the course come from four disciplines: computer science, interactive multimedia, music, and mechanical engineering. This paper describes the course structure, computer science components, final projects, team dynamics, and assessments. We evaluate the results to-date and discuss ongoing revisions and expectations for the future.	Multidisciplinary computer science through conducting robots	NA:NA:NA:NA:NA	2018
Michael Ferguson:Nick Webb:Tomek Strzalkowski	A social robot is a robotic platform that supports natural interaction with people in a human-scale environment. Such a platform allows interesting opportunities for both traditional Computer Science students and students from other disciplines, such as psychology, philosophy, design and communications. In this paper, we describe a new social robotic platform for educational uses that is equipped with a social face, arms for gesturing, advanced sensory, mobile base, and ROS integration. By using off-the-shelf and rapidly prototyped components, together with open source software, this platform is low-cost, easy to use, and easy to reproduce.	Nelson: a low-cost social robot for research and education	NA:NA:NA	2018
Nik Swoboda:Juan Bekios-Calfa:Luis Baumela:Javier de Lope	In this paper we describe a collection of course materials designed to be used in an undergraduate introduction to artificial intelligence (AI) course. These materials include three programming assignments, each touching upon core AI topics, which require that the students build the main functionalities of a guide robot. These assignments were carefully designed to allow the same solution to work both with a robot simulator and an inexpensive web-cam as well as with real robots. An overview of the course and the assignments is given along with references to online versions of the resources developed to teach the course.	An introduction to AI course with guide robot programming assignments	NA:NA:NA:NA	2018
Laurie Smith King	NA	Session details: Keynote	NA	2018
Susan Landau	Government's role in computer science is much larger than funding agencies. Digital rights management, net neutrality, and cybersecurity are hot topics in Washington, hot topics where regulation or legislation may have major impact on the computer systems we develop and enjoy. Yet the rules governing DC are very different than the rules that govern science and engineering, and learning how to operate in a world where facts are only ten percent of the equation can be a challenging experience for someone more accustomed to proving theorems and building systems. I'll describe what it takes for a nerd to be effective in the world of government, and give some specific examples in the hot area of cyberwar.	A computer scientist goes to washington: how to be effective in a world where facts are 10% of the equation	NA	2018
Jacob Furst	NA	Session details: Panel	NA	2018
Hans-Peter Bischof:Jacob D. Furst:Daniela S. Raicu:Susan D. Ruban	Undergraduate research is becoming increasingly common in colleges and universities, and, to support this, there is a need to have best practices and forums for promoting exchange of ideas. In particular, a working group at a recent National Science Foundation (NSF) Computer and Information Science and Engineering (CISE) Research Experiences for Undergraduates (REU) sites PI's meeting identified four important issues in undergraduate research: 1) how to design a good research project, 2) how to prepare students for research, 3) how to measure outcomes of undergraduate research and 4) incentives for undergraduates to publish as result of their participation in research. The panelists have all served as PIs or Co-PIs on NSF REU projects in computing and have mentored many undergraduates in a large variety of research projects both in REU settings as well as during the regular academic year. They will each address one of the issues identified above, and share their expertise in addressing the issue, providing solid guidance to anyone interested in promoting undergraduate research. A significant amount of time will be set aside for audience participation and discussion.	Top issues in providing successful undergraduate research experiences	NA:NA:NA:NA	2018
Sue Fitzgerald	NA	Session details: Special session	NA	2018
Sue Fitzgerald:Renée McCauley:Vicki L. Plano Clark	This special session will recap qualitative research design and analysis as discussed during an NSF-sponsored two-part workshop for computer science education researchers held in 2009-2010. Several workshop participants will illustrate the use of qualitative methods by describing their research projects. They will briefly present their methodologies, analyses and findings. Attendees will be encouraged to ask questions about how qualitative methods can be used in their own research projects.	Report on qualitative research methods workshop	NA:NA:NA	2018
Philip East	NA	Session details: Special session	NA	2018
J. Philip East:Charmaine Bentley:Joe Kmoch:Stephen Rainwater:Chris Stephenson	This special session serves two purposes. It provides a progress report on the revision of the NCATE Standards for the Preparation of Secondary Computer Science Teachers and seeks input from computing education professionals on the proposed revisions. The Standards and their role in evaluating teacher preparation programs will be explained, the proposed revision discussed, and process for providing input explained.	NCATE standards for preparation of secondary computer science teachers	NA:NA:NA:NA:NA	2018
Jill Pala	NA	Session details: Computational thinking	NA	2018
Ashok Basawapatna:Kyu Han Koh:Alexander Repenning:David C. Webb:Krista Sekeres Marshall	End-user game design tools are effective in motivating and exposing students with no prior programming experience to computer science. However, while there is good evidence that these environments are effective motivators, the question remains what do students actually learn? For our purposes, using AgentSheets, we would like to know if students can apply the knowledge obtained from programming games to creating science simulations. Specifically, we want to better understand if students are able to recognize Computational Thinking Patterns (CTP) from their game programming experience. Computational Thinking Patterns are abstract programming patterns that enable agent interactions not only in games but also in science simulations. Students and teachers who participated in a game design summer institute were administered a Computational Thinking Pattern Quiz (CTP Quiz). This quiz tested the participants' ability to recognize and understand patterns in a context removed from game programming. We found that participants, for the most part, were able to understand and recognize the patterns in a variety of contexts	Recognizing computational thinking patterns	NA:NA:NA:NA:NA	2018
Dennis Kafura:Deborah Tatar	Experience with the first offering of a computational thinking course for computer science (CT4CS) students is reported. The course is grounded in student interaction with fundamental, recurring concepts suggested by comparison with two sets of computer science principles. By using specialized, freely available tools and physical simulations it is possible to provide concrete, tangible learning experiences that neither require knowledge of nor the overhead of programming. Student end-of-term reflections indicate that the course deepened and broadened their understanding of computer science even when they had previously encountered a topic, and improved their computer science vocabulary.	Initial experience with a computational thinking course for computer science students	NA:NA	2018
Charles Dierbach:Harry Hochheiser:Samuel Collins:Gerald Jerome:Christopher Ariza:Tina Kelleher:William Kleinsasser:Josh Dehlinger:Siddharth Kaza	Computational thinking has been identified as a necessary fundamental skill for all students. University curricula, however, are currently not designed to provide such knowledge to a broad student population. In this paper, we report on our experiences in the development of a model for incorporating computational thinking into the undergraduate, general education curriculum at Towson University. We discuss the model in terms of eliciting faculty interest, institutional support, and positive student response. In the first two years of this NSF-funded three-year project, we have developed, piloted and assessed five computational thinking general education courses - an Everyday Computational Thinking course, and four discipline-specific computational thinking general education courses. Initial assessments show promising and significant student, instructor and administration interest in computational thinking as a basis in courses covering multiple disciplines within the general education curriculum.	A model for piloting pathways for computational thinking in a general education curriculum	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Sara Miner More	NA	Session details: Discrete mathematics	NA	2018
Mehran Sahami	During the past 20 years, probability theory has become a critical element in the development of many areas in computer science. Commensurately, in this paper, we argue for expanding the coverage of probability in the computing curriculum. Specifically, we present details of a new course we have developed on Probability Theory for Computer Scientists. An analysis of course evaluation data shows that students find the contextualized content of this class more relevant and valuable than general presentations of probability theory. We also discuss different models for expanding the role of probability in different curricular programs that may not have the capacity to teach a full course on the subject.	A course on probability theory for computer scientists	NA	2018
Robert L. Scot Drysdale	Many students find that proof by induction is one of the most difficult topics in discrete mathematics. Even students who are able to write inductive proofs in a Discrete Mathematics course often find it difficult to write inductive proofs in Data Structures, Algorithms, Theory of Computation, and other computer science courses. Part of the reason for this is that discrete mathematics courses tend to emphasize weak induction over the natural numbers, but strong induction over recursively defined structures is much more useful in computer science. This paper argues that learning and using proof by induction is easier if the recursive nature of proof by induction is made explicit, especially for students familiar with recursion. It can be useful to view an inductive proof as a template for a recursive program that takes a specific instance as a parameter and generates a complete direct proof for that instance. The abstract idea of assuming and invoking an inductive hypothesis is replaced by the concrete idea of making a recursive call to prove a lemma. Viewing induction as a recursive process allows us to give a rule for determining what base cases need to be proved in strong induction and simplifies creating correct inductive proofs.	Mathematical induction is a recursive technique	NA	2018
James F. Power:Thomas Whelan:Susan Bergin	This survey paper reviews a large sample of publications on the teaching of discrete structures and discrete mathematics in computer science curricula. The approach is systematic, in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analyzed. A number of broad themes in discrete structures education are identified relating to course content, teaching strategies and the means of evaluating the success of a course.	Teaching discrete structures: a systematic review of the literature	NA:NA:NA	2018
Ingrid Russell	NA	Session details: Operating systems and databases	NA	2018
Peter J. Desnoyers	The "Computer Systems" course at Northeastern University is an MS-level core course which attempts to teach students how computers work, through a behavioral approach to the concepts involved in operating systems and their interface to the hardware. As an operating system is typically the first reactive system which students encounter in their studies, the goal of the class is to develop an understanding of the tools and reasoning which are involved in understanding and working with the internals of such a system, whether it be a conventional operating system or (as is more commonly found in industry) a consumer product, networking device, or other embedded system. This course is currently in its third year with enthusiastic responses from students, especially those who have been able to apply its lessons in co-operative work assignments, and an undergraduate class teaching substantially the same material is currently underway.	Teaching operating systems as how computers work	NA	2018
Oren Laadan:Jason Nieh:Nicolas Viennot	Linux has emerged as a widely-used platform for enabling hands-on kernel programming experience to learn about operating system concepts. However, developing pedagogically-effective programming projects in the context of a complex, production operating system can be a challenge. We present a structured series of five Linux kernel programming projects suitable for a one semester introductory operating systems course to address this issue. Each assignment introduces students to a core topic and major component of an operating system while implicitly teaching them about various aspects of a real-world operating system. Projects are of modest coding complexity, but require students to understand and leverage core components of the Linux operating system. The learning benefits for students from this approach include learning from real-world operating system code examples by expert kernel designers and gaining software engineering experience managing production code complexity. We have successfully used these structured Linux kernel projects to teach over a thousand students in the introductory operating systems course at Columbia University.	Structured linux kernel projects for teaching operating systems concepts	NA:NA:NA	2018
Suzanne W. Dietrich:Mahesh Chaudhari	The Language INtegrated Query (LINQ) language is a declarative query language integrated within an object-oriented programming language that provides a unified paradigm for querying relations, objects, and XML (ROX). This paper describes a suite of exercises, from cooperative in-class activities to larger-scale graded assignments, for incorporating LINQ into the database curriculum. These exercises support various student learning outcomes and illustrate the applicability of LINQ by querying the same database enterprise across the ROX data models.	LINQ ROX!: integrating LINQ into the database curriculum	NA:NA	2018
Ariel Ortiz	NA	Session details: CS 1: tools	NA	2018
A. T. Chamillard	Professors are continually exploring ways to increase the engagement of their students, but are sometimes concerned that doing "fun" things in class could adversely affect student learning. Over the course of several semesters, we had the same professor teach several CS1 and CS2 courses for computer science and game development majors. As part of his classroom approach, the professor used a student response system to engage the students in the flow of the lecture. In this paper, we examine the relationships between student participation using the student response system and student performance in the course assessments. We also explore the relationship between each student's perceived mastery of course topics and their demonstrated mastery of those topics on the Final Exam. Finally, we explore several differences between the multiple courses included in the study.	Using a student response system in CS1 and CS2	NA	2018
Wei Jin:Albert Corbett	In this paper, we describe our approach in addressing learning challenges students experience in introductory programming courses. We combine two effective instructional methodologies to help students learn to plan programs prior to writing code: Cognitive Apprenticeship Learning (CAL) and Cognitive Tutors (CT). In the CAL component, the instructor models program planning in class and paper handouts are used to scaffold program planning in homework assignments. In CAL-CT, the program-planning process is also supported by a computer tutor which provides step-by-step feedback and advice. The results show that the combined CAL-CT approach yielded substantial gains over traditional instruction. Its advantage over the CAL-Only approach is also significant.	Effectiveness of cognitive apprenticeship learning (CAL) and cognitive tutors (CT) for problem solving using fundamental programming concepts	NA:NA	2018
Jungsoon P. Yoo:Sung K. Yoo:Suk Seo:Chrisila Pettey	The ability to design an algorithm is one of the most important learning outcomes of a computer science program. Unfortunately, not only is learning how to design algorithms a challenging task, but many students believe that algorithm design is not an important part of problem solving. To address this challenge and hopefully change student attitudes, we developed AlgoTutor, a web-based algorithm development tutoring system. AlgoTutor's primary components are the algorithm composer and the algorithm tracer. A third component, ProgramPad, was added to show the connection between algorithms and code. This paper presents the results of experiments that assessed AlgoTutor's effectiveness in changing student attitudes about algorithm development. The results show that students who used AlgoTutor in CS-I were more likely to realize the importance of algorithm design in problem solving and to have confidence in their own algorithm development abilities.	Can algotutor change attitudes toward algorithms	NA:NA:NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Zachary Dodds:Timothy Huang:Samuel A. Rebelsky	Be an opener of doors for such as come after thee..." - Ralph Waldo Emerson, 1844. At the SIGCSE Symposium in 2007, we presented a panel in which seasoned teaching faculty from four large, PhD-granting universities shared the teaching tips we wished we'd known before starting our careers [1]. The difference from earlier "Teaching Tips" panels [6] was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources [2, 3, 4, 8, 10, 11]. We clustered our tips into several categories: Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), and Meta (advice spanning categories). The session was received quite well, and the audience contributed many of their own teaching tips throughout the presentation. Since all of the presenters in 2007 regularly taught large, hundred-student classes, many of their suggestions (e.g., lecturing in a large venue or managing an army of teaching assistants) were not relevant to the experience of teaching small classes. Quite a few attendees suggested there be a follow-up session with presenters who could address the challenges specific to small college or university classes. To that end, we present the "Small College Class" edition, with seasoned educators who have expertise teaching smaller classes at their university or college. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for an online collection. Complementing the categories above, we have added two more that capture the intimate setting of small classes: - Classroom (organization, interactions, and incentives) - Personal (fostering relationships).	Teaching tips we wish they'd told us before we started, small college class edition	NA:NA:NA:NA	2018
Scott Grissom	NA	Session details: Special session	NA	2018
Scott Grissom:Sue Fitzgerald:Victor Piotrowski:Jan Cuny:Joan Peckham:Harriet Taylor:Daniel Menelly:Mimi McClure	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty, and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA:NA:NA:NA	2018
Ali Erkan	NA	Session details: Special session	NA	2018
Henry M. Walker:Ali Erkan:Mark Guzdial:Steve Cooper	In this special session, we will discuss the role and value of quantitative instruments in gauging student perspectives in computer science education. After creating the appropriate context, we will discuss the road educators have traveled in creating such instruments as well as review one based on a variation of a survey developed by the University of Maryland Physics Education Research Group. Finally, we will present the importance of gathering this information from the perspective of grant agencies. During our conversation, we will invite our audience members to fill out the survey form for a particular instrument. If we are collectively on the same page, then our responses may be used to establish a baseline to which students progress can be compared.	Role and value of quantitative instruments in gauging student perspectives in a computing curriculum	NA:NA:NA:NA	2018
Todd Neller	NA	Session details: Computing in the arts and sciences	NA	2018
Erik Brunvand:Paul Stout	We describe a cross-disciplinary collaborative course that pairs computer science and engineering (CSE) students with art students to engage in joint engineering design and creative studio projects. These projects combine embedded system design with sculpture to create kinetic art. We believe that this is a natural pairing of two disparate disciplines, and one that provides distinct educational benefits to both groups of students. In this paper we describe the course content, the collaborative process, the materials used in the class, and experience with a pilot version of the course taught in Fall 2009 the University of Utah.	Kinetic art and embedded systems: a natural collaboration	NA:NA	2018
Ursula Wolz:Lillian (Boots) Cassel:Thomas Way:Kim Pearson	As the need for multidisciplinary computing education continues to increase, consideration for distributed expertise will become critical to implementing a successful curriculum. A model of cooperative expertise is presented in which faculty maintain responsibility for their own course, creating and evaluating assignments for their students that support learning in their colleagues' courses as well. We present outcomes of an experiment to implement this model at two geographically separated institutions through three courses (two at one institution, one at the other), by faculty in computer science, media and English. Results reported include faculty analysis of student achievement in each course and student surveys of attitudes toward multidisciplinary collaboration. Overall, it appears that student learning and attitudes are enhanced by the experience.	Cooperative expertise for multidisciplinary computing	NA:NA:NA:NA	2018
Kay A. Robbins:David M. Senseman:Priscilla Elizabeth Pate	The accelerating use of computation in all aspects of science continues to widen the gap between student skills and expectations. Currently, computation is taught using one of two approaches: teach students a standard programming language (e.g., FORTRAN, JAVA or C) perhaps augmented by support tools such as Alice or teach them to use a program such as MATLAB by formulating and solving math problems. Both approaches have high failure rates for students hindered by poor mathematics training and weak logic skills. This paper describes an alternative approach that introduces students to computing in the context of data analysis and visualization using MATLAB. Our goal is produce computationally qualified young scientists by teaching a highly relevant computational curriculum early in their college career. The course, which integrates writing, problem-solving, statistics, visual analysis, simulation, and modeling, is designed to produce students with usable data analysis skills. The course is in its third year of implementation and is required of all biology majors at the University of Texas at San Antonio.	Teaching biologists to compute using data visualization	NA:NA:NA	2018
Robert Noonan	NA	Session details: Data structures / CS 2	NA	2018
Andrew T. Duchowski:Robert Geist:Robert Schalkoff:James Westall	The TEXNH method is an approach to undergraduate computer science education that is based on cognitive constructivisim, in the sense of Piaget, and which invokes several course design directives that include re-combining art and science, problem-based learning, problem selection from the visual problem domain, and cognitive apprenticeship. The paper describes a new TEXNH course in data structures. It includes a full comparative assessment of the realized improvement in student problem solving capability and, for the first time, cognitive authenticity in problem selection, in that the course problem is a variation on a very recent research result.	TEXNH trees: a new course in data structures	NA:NA:NA:NA	2018
Scott Turner:Manuel A. Pérez-Quiñones:Stephen Edwards:Joseph Chase	Computer science students need experience with essential concepts and professional activities. Peer review is one way to meet these goals. In this work, we examine the students' attitudes towards and engagement in the peer review process, in early, object-oriented, computer science courses. To do this, we used peer review exercises in two CS2 classes at neighboring universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding exercises), we measured the students' attitudes, their perceptions of their abilities, and how many of the reviews they completed. We found moderately positive attitudes that generally increased over time but were not significantly different between groups. We also saw a lower completion rate for students reviewing peers than for the other groups. The students' internal motivation, as measured by their need for cognition, was not shown to be strongly related to their attitudes nor to the number of assignments completed. Overall, our results show a strong need for external motivation to help engage students in peer reviews.	Student attitudes and motivation for peer review in CS2	NA:NA:NA:NA	2018
Briana B. Morrison:Mike Clancy:Robert McCartney:Brad Richards:Kate Sanders	It is important for students to be able to select and apply the appropriate data structure for the problem to be solved. Testing this knowledge on exams can be difficult, however. We examined 59 data structures final exams and found only 36 that contained questions involving the application of data structures. To promote assessment of this knowledge in the data structures course, we present a framework for classifying apply exam questions, with illustrations from the exams collected. We then show how a number of questions can be developed by varying a single rich apply question along the dimensions of this framework	Applying data structures in exams	NA:NA:NA:NA:NA	2018
Richard A. Brown	NA	Session details: Computer architecture teaching tools	NA	2018
Barry Fagin:Dale Skrien	In this paper, we describe a programmable emulator for the Princeton IAS/Von Neumann machine. The emulator is historically accurate, preserving the quirks and eccentricities of the machine. It is also user-friendly and robust, suitable for undergraduate architecture and programming classes as a teaching tool. Users can write non-trivial programs in IAS assembly code or machine code. We present some examples here, and discuss assignments from its first use in two undergraduate classes. IASSim is a Java application publicly available at no cost.	IASSim: a programmable emulator for the princeton IAS/Von Neumann machine	NA:NA	2018
Michael David Black:Priyadarshini Komala	This paper describes a new graphical computer simulator developed for computer organization students. Unlike other teaching simulators, our simulator faithfully models a complete personal computer, including an i386 processor, physical memory, I/O ports, floppy and hard disks, interrupts, timers, and a serial port. It is capable of running PC software such as FreeDOS, Windows, and Minix, and can run as a Java applet. Graphical user interfaces allow students to view and modify the processor, memory, disks, and hardware devices at runtime. The simulator includes a processor development utility that allows students to design their own datapath and control units, and run their custom processor alongside the x86 processor. The paper describes labs where students use the simulator to write x86 assembly programs, device drivers, hardware controllers; and design both simple and pipelined processors.	A full system x86 simulator for teaching computer organization	NA:NA	2018
Aaron Bloomfield:William Wulf	We present the development and implementation of the Itty Bitty Computing Machine (IBCM), a machine language designed specifically to be taught to lower-level undergraduate students. The presentation of the material takes about one-week of lecture, and allows understanding of all the concepts of machine language without having to deal with the complexity of modern machine language implementations, such as x86 and MIPS. A number of pedagogical aspects are addressed concisely via IBCM, such as treating all data as untyped and performing arithmetic on instructions. While we are not the first to introduce a short machine language module, we do provide a number of benefits over older versions: a modern browser-based implementation, a full set of pedagogical tools, and a decade of experience teaching this module. All of the necessary materials, including compilers, simulators, and documentation, are available online and licensed through Creative Commons licenses.	IBCM: the itty bitty computing machine a one-week module to teach machine language in computing courses	NA:NA	2018
Bin Peng	NA	Session details: Summer experiences	NA	2018
Heidi C. Webb:Mary Beth Rosson	We discuss a study conducted during a summer program for middle school girls that emphasized possible future careers that rely on computer technology. During the weeklong camp middle school girls created an original computer project, visited campus computer labs and listened to invited speakers - all with computer technology as the central theme. This paper discusses the program, girls' reactions to their experiences, and the projects they created during the summer camp.	Exploring careers while learning Alice 3D: a summer camp for middle school girls	NA:NA	2018
Deborah L. Dunn:Robert G. Strader:Michael M. Pickard	As we are well aware, there has been a significant nationwide decline in enrollment for computer science programs, as well as other STEM fields. One of the primary reasons the lack of participation and diversity in the STEM fields is becoming increasingly important is the potentially adverse effect it may have on the U.S. work force. Many successful programs have been put in place to combat this decline. But how do the small regional universities with limited resources and a limited "audience" (with limited resources) contribute to the field? In this paper we will discuss the mechanisms that may be implemented for smaller schools to address the decline in CS enrollment. This includes the ability to put in place programs which could allow more educators to become a part of the solution.	Camps on a shoestring: how we survived a summer	NA:NA:NA	2018
Jiangjiang Liu:Cheng-Hsien Lin:Ethan Philip Hasson:Zebulun David Barnett	In this paper, we describe a one-week summer computing workshop for teachers to improve computer science education in K-12. Our workshop focuses on using Scratch and Alice, two programs used to make simple games and animations, to introduce computing concepts to teachers in computer, technology, math, and science at all K-12 levels to expose students to computing at an early age and to reach more students. During the workshop the teachers developed curriculum materials for the subjects they will teach in the following semesters with the help of our workshop tutors. We present our workshop strategies, lessons learned, and assessment results in this paper.	Introducing computer science to K-12 through a summer computing workshop for teachers	NA:NA:NA:NA	2018
Suzanne Buchele	NA	Session details: Panel	NA	2018
Joel Adams:Brent Baas:Suzanne F. Buchele	The Fulbright Scholar Program is the flagship academic exchange program of the U.S. Department of State that provides the opportunity for U.S. Scholars to teach and/or conduct research at institutions abroad. Every year, approximately 1100 American scholars travel to approximately 125 countries to lecture, conduct research, and participate in a wide variety of academic and professional activities for one or more academic terms, up to one year. The Fulbright Scholar program is open to US Citizens with a Ph.D. or equivalent professional or terminal degree and university teaching experience [1]. In this panel, three computer science professors who have completed a total of five Fulbright grants in the last 12 years offer their experiences, anecdotes, and insights of the Fulbright Scholar program. The goal of the panel is to promote and inform the CS Education community about benefits of the Fulbright Scholar program, address questions or misconceptions regarding the program, and present realistic expectations for both the application process and the program itself. Each of the three panelists will present a 15 minute overview of their Fulbright experiences, leaving ample time for an interactive question and answer period.	CS Fulbright experiences abroad	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Tiffany Barnes:Daniel D. Garcia:Jody Paul:Beth Simon:Larry Snyder	Since 2008, NSF and The College Board, have been developing a "Computer Science: Principles" curriculum to "introduce students to the central ideas of computing and CS, to instill ideas and practices of computational thinking, and to have students engage in activities that show how computing and CS change the world". We report on the initial pilot of the CS Principles curriculum at 5 universities in 2010/11. The instructors from the pilot schools will describe their classes, the piloting experience (teaching under a microscope), and successes and failures. Emphasis will be on: mapping the CS Principles curriculum to a college's specific needs, and how others can use or modify the existing materials for pilots at their schools.	CS principles: piloting a new course at national scale	NA:NA:NA:NA:NA:NA	2018
Amy Csizmar Dalal	NA	Session details: Networks	NA	2018
Dennis Brylow:Kyle Thurow	We present extensions to the Embedded Xinu educational operating system that, when coupled with a target device like the Cisco-Linksys WRT54GL, provide for an extremely attractive hands-on laboratory platform in network courses. We present classroom and research lab evidence for the usefulness of this platform as a network education tool, and discuss its significance in the context of a wide spectrum of competitor systems. This project is part of a larger effort to bring cost-effective, hands-on embedded system laboratory experiences into systems courses throughout the undergraduate computer science core.	Hands-on networking labs with embedded routers	NA:NA	2018
Sami Rollins	The field of wireless sensor networks is growing rapidly and there is increasing interest in providing students with a foundation in the area. Curriculum in the field, however, is fairly limited and most courses reach only advanced graduate students. Undergraduate students typically lack the background, for example in distributed systems and networking, to digest the topics and assignments of a standard wireless sensor networks course. In this work, we present our approach to teaching wireless sensor networks to undergraduates and introductory graduate students. We discuss a unique, integrated approach to introducing relevant distributed systems and networking concepts in the context of wireless sensor networking applications. The course provides students who have never previously implemented a networked application with the necessary background to implement sensing applications on the Java SunSPOT sensor. It also provides a structured introduction to prerequisite concepts, such as distributed coordination algorithms, so that students can read and understand research papers. Our experience suggests that there is ample opportunity to expand curricula in sensor networking and reach a broader population of students.	Introducing networking and distributed systems concepts in an undergraduate-accessible wireless sensor networks course	NA	2018
Jae Woo Lee:Michael S. Kester:Henning Schulzrinne	We present a one-semester transition course intended to bridge the gap between a Java-based introductory sequence and advanced systems courses. We chose to structure our course as a series of lab assignments that, while independent, are also milestones in a single main project, writing a web server from scratch. By anchoring the course on a single real-world application, we were able to provide depth, instill good programming practices, give insight into systems, and generate excitement.	Follow the river and you will find the C	NA:NA:NA	2018
Louis Oliphant	NA	Session details: Relevant computing	NA	2018
Jane Turk	This paper presents an innovative computer literacy course that focuses solely on developing skills needed for life in a networked world in which one must protect oneself from identity theft, be careful posting on social networks, and use credit and debit cards wisely. The course emphasizes ethical responsibility and information literacy. Its target audience, first-year, non-computer science majors, learn what they need to know to use technology safely, effectively, efficiently, and ethically. The course is grounded in active learning, such as posting in a class wiki, and critical thinking. It is a radical alternative to a traditional software packages approach.	Computer literacy as life skills for a web 2.0 world	NA	2018
Cyndi Rader:Doug Hakkarinen:Barbara M. Moskal:Keith Hellman	Prior research indicates that today's students, especially women, are attracted to careers in which they recognize the direct benefit of the field for serving societal needs. Traditional college level computer science courses rarely illustrate the potential benefits of computer science to the broader community. This paper describes a curricula development effort designed to embed humanitarian projects into undergraduate computer science courses. The impact of this program was measured through student self-report instruments. Through this investigation, it was found that students generally preferred projects that they perceived as "fun" over the projects that were social in nature. This may, in part, be due to the fact that it was difficult to reduce socially relevant problems to a level that beginning students could easily comprehend. This made it difficult to capitalize on the appeal of socially relevant problems in the early computer science courses.	Exploring the appeal of socially relevant computing: are students interested in socially relevant problems?	NA:NA:NA:NA	2018
Ryan L. McFall:Matthew DeJongh	The breadth-first approach to teaching introductory computer science is one way of dispelling the common misperception that programming is the sole task of the computer scientist. The breadth-first approach is particularly useful in courses for non-majors. Hands-on activities that make up laboratory assignments for these courses tend to focus on learning to program or simulations of program execution. These activities unfortunately fail to build on the foundations laid by a breadth-first approach, and serve to perpetuate the computer science = programming misperception. We have developed a set of laboratory activities which are based on what we call authentic computing tasks: everyday tasks that students want to know how to accomplish. Example tasks include image editing, operating system installation and configuration, and building home computer networks. Explicit connections are made between these authentic computing tasks and the computer science concepts being covered in the lecture portion of the course. The course has experienced dramatic increases in enrollment, and we have evidence that students see the connections, rather than coming to believe that performing computing tasks well is the essence of computer science.	Increasing engagement and enrollment in breadth-first introductory courses using authentic computing tasks	NA:NA	2018
Mark Goadrich	NA	Session details: Parallelism across the CS curriculum	NA	2018
Thomas R. Gross	There is a debate on when and how to teach parallel programming in the undergraduate curriculum. We try to structure the debate along a number of dimensions and then present the solution that we adopted for an engineering-oriented curriculum. We added an introduction to parallel programming to the list of mandatory classes in the 2nd semester. The class exposes students to three styles of parallel programming: threads with shared memory, CSP-style message passing, and OpenMP-based parallel programming. Within these models, the class aims to focus the student's attention on communication as the key issue in parallel programs. Explicit communication (or their absence) causes correctness problems, implicit communication (e.g., when accessing shared data in different threads) forces the student to understand when updates are globally visible. An introductory class early in the undergraduate curriculum has a number of benefits and disadvantages, which are discussed in this paper. A preliminary evaluation after two editions of this course indicates that the design goals are met but also points to several issues that other institutions may want to consider.	Breadth in depth: a 1st year introduction to parallel programming	NA	2018
Sirong Lin:Deborah Tatar	Parallel thinking is a mindset that allows people to create support for activities that happen concurrently in a program. It crosscuts extant computer science boundaries, including parallel processing, network programming and multi-user systems, indeed, any system that involves the distribution and reintegration of work. Recent efforts to integrate parallelism across the CS curriculum begin to address the support of parallel thinking. We approach the pedagogy of parallel thinking by teaching students to model coordination explicitly using a specialized coordination language. We report a study of an experimental class taking this approach, finding that advanced CS students lack a good understanding of coordination but that the explicit modeling of coordination can address this lack.	Encouraging parallel thinking through explicit coordination modeling	NA:NA	2018
Richard Brown:Elizabeth Shoop	Given the recent emergence of multi-core and distributed computing that is transforming mainstream application areas in industry, demand is rising for teaching more parallelism and concurrency in CS curricula. We argue for teaching these topics incrementally in CS courses at all undergraduate levels, and propose a comprehensive approach involving flexible teaching modules with experiential programming exercises, technical and instructor supplementary materials, and an online community of educators to support adopters and module contributors. Progress on developing these materials and online resources is reported.	Modules in community: injecting more parallelism into computer science curricula	NA:NA	2018
Ping Chen	NA	Session details: K-12 instruction	NA	2018
Diana Franklin:Phillip Conrad:Gerardo Aldana:Sarah Hough	A popular approach to introducing students to computer science is to involve middle-school students in engaging programming activities. One challenge in such a program is attracting students who are not already positively predisposed to computing. In order to attract a diverse audience, we developed a summer program based on culturally-relevant themes that appealed to our two target audiences, females and Latina/os. This paper describes our success in developing and implementing a computing curriculum and recruiting materials for a 2-week summer camp integrating two themes, animal conservation and Mayan culture. Scratch programming was used to engage students in creating animations about animals and Mayan culture, allowing them an interdisciplinary experience that combined programming, culture, biology, art, and storytelling. Our recruiting efforts resulted in an application pool that was 73% female and 67% Latina/o, with only 6.5% in neither group. We had 34 students complete the program. Pre- and post- surveys showed that the number of students citing computer science as their top choice for a career doubled and interest in computer science as a career more than tripled.	Animal tlatoque: attracting middle school students to computing through culturally-relevant themes	NA:NA:NA:NA	2018
Ville Isomöttönen:Antti-Jussi Lakanen:Vesa Lappalainen	Several programming environments have been constructed to facilitate novice programming at K-12 and CS0/CS1 levels. The environments can be roughly divided into those using visual or textual programming. This paper presents a K-12 game programming course concept based on textual programming. The concept is based on an easy-to-use C# library, called Jypeli, built on top of Microsoft XNA Framework. The library tries to maintain advantages of visual programming and avoid challenges of textual programming. In particular, the library helps beginners to program their first games in a short period of time and without a heavy syntactic load. The course concept and an initial evaluation consisting of student feedback and a literature rationale are presented.	K-12 game programming course concept using textual programming	NA:NA:NA	2018
Aman Yadav:Ninger Zhou:Chris Mayfield:Susanne Hambrusch:John T. Korb	As computational thinking becomes a fundamental skill for the 21st century, K-12 teachers should be exposed to computing principles. This paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors. We summarize the results from open-ended and multiple-choice questionnaires given both before and after the module to assess the students' attitudes toward and understanding of computational thinking. The results suggest that given relevant information about computational thinking, education students' attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching.	Introducing computational thinking in education courses	NA:NA:NA:NA:NA	2018
Rajeev Agrawal	NA	Session details: Web-based tools	NA	2018
Paul Denny:Andrew Luxton-Reilly:Ewan Tempero:Jacob Hendrickx	Drill and practice exercises enable students to master skills needed for more sophisticated programming. A barrier to providing such activities is the effort required to set up the programming environment. Testing is an important component to writing good software, but it is difficult to motivate students to write tests. In this paper we describe and evaluate CodeWrite, a web-based tool that provides drill and practice support for Java programming, and for which testing plays a central role in its use. We describe how we have used CodeWrite in a CS1 course, and demonstrate its effectiveness in providing good coverage of the language features presented in the course.	CodeWrite: supporting student-driven practice of java	NA:NA:NA:NA	2018
Jesus Bobadilla:Antonio Hernando:Angel Arroyo	This paper presents the results obtained using a real e-learning recommender system where the collaborative filtering core has been adapted with the aim of weighting the importance of the recommendations in accordance with the users' knowledge. In this way, ratings from users with better knowledge of the given subject will have greater importance over ratings from users with less knowledge. In the same way, we validate the results obtained and we adjust, with just one parameter, the weight that should be awarded, in each specific e-learning recommender system, to the ratings of the users with the best reputation. The results obtained show a notable improvement regarding traditional collaborative filtering methods and suggest balanced weightings between the importance assigned to users with more or less knowledge.	e-learning experience using recommender systems	NA:NA:NA	2018
Daniel Malcolm Hoffman:Ming Lu:Tim Pelton	In Computer Science courses, we ask students to write a lot of code. All too often, the resulting code quality is poor. While it is widely believed that students would write better code if they spent more time reading code, it is difficult to get students to read code effectively. We present a web-based application supporting generation and delivery of quizzes designed to evaluate and improve code reading skills.	A web-based generation and delivery system for active code reading	NA:NA:NA	2018
Ursula Wolz	NA	Session details: Panel	NA	2018
Ursula Wolz:Youwen Ouyang:Scott Leutenegger	As the computing education community grapples with integrating computing into K-12 curriculum, the focus remains primarily on identifying appropriate grade level content and skills[3]. Two problems articulated by Margolis et al.[5], are (1) how to bring computing into an already over-burdened curriculum, (2) how to provide substantive professional development for teachers. We need to look beyond teaching computing concepts as isolated from other disciplines. The power of computing lies in its broad applicability to facilitate creativity in other domains. The panelists will report on using Scratch (http://scratch.mit.edu) in language arts, science and social studies curricula. Our programs demonstrate to middle and high school students and teachers how computational thinking, computing concepts and programming are essential to their course of study. We emphasize active learning where computing is a tool for creativity. We demonstrate how learning 21st century computing skills in the classroom can be fun. This panel will present three perspectives on using Scratch for humane games, scientific modeling and interactive storytelling. There will be significant time for the audience to participate in discussion of broad applicability of our approaches and whether this pedagogy can work at the undergraduate level.	Scratching the subject surface: infusing computing into K-12 curriculum	NA:NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Keith Schwarz:Dave Feinberg:Michelle Craig:Stuart Hansen:Michael Scott:David J. Malan	I worry over topics for the syllabus, fretting over demos and presentations. And yet, I always come back to the fact that most of what my students learn and remember from my course comes from the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and concrete materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Mark Johnson	NA	Session details: Teaching and studying novice programmers	NA	2018
Tammy VanDeGrift:Tamara Caruso:Natalie Hill:Beth Simon	Expertise is developed through both a) self-reflection and b) making useful plans for improvement [3, 10]. Traditional novice-level programming assignments require neither of these skills to be used. Could we get students to think about improving their software development processes? What areas would they identify as needing improvement? Could they write effective plans for themselves? In this experience report, we analyze the results of an intervention with 236 CS1.5 students asking them to do these activities. We find that they most commonly make improvements in planning, compared to coding and testing. Additionally, over half of the plans they make are so vague as to be of little use in helping students identify if they have, in fact, improved. Finally, we asked students at the end of the term to reflect on how their experiences with programming assignments changed over the term. We discuss our results in light of how instructors can focus instruction to help students become more meta-cognitive about their own software development processes.	Experience report: getting novice programmers to THINK about improving their software development process	NA:NA:NA:NA	2018
Guillaume Marceau:Kathi Fisler:Shriram Krishnamurthi	Good error messages are critical for novice programmers. Re-cognizing this, the DrRacket programming environment provides a series of pedagogically-inspired language subsets with error messages customized to each subset. We apply human-factors research methods to explore the effectiveness of these messages. Unlike existing work in this area, we study messages at a fine-grained level by analyzing the edits students make in response to various classes of errors. We present a rubric (which is not language specific) to evaluate student responses, apply it to a course-worth of student lab work, and describe what we have learned about using the rubric effectively. We also discuss some concrete observations on the effectiveness of these messages.	Measuring the effectiveness of error messages designed for novice programmers	NA:NA:NA	2018
Gregory Dyke	We present the preliminary analysis of a study whose long term aim is to track IDE usage to identify novice-programmers in need of support. Our analysis focused on the activity of 24 dyads on a 3 week assignment. We correlated frequencies of events such as use of code generation and of the debugger with assignment grades, final exam grades, and the difference in rankings within dyad on the final exam. Our results show several significant correlations. In particular, code generation and debugging are correlated with the final grade, and running in non-debug mode is correlated with differences in ranking. These results are encouraging as they show that it is possible to predict learning outcomes with simple frequency data and suggest more complex indicators could achieve robust prediction.	Which aspects of novice programmers' usage of an IDE predict learning outcomes	NA	2018
Dermot Shinners-Kennedy:David J. Barnes	We present some ideas for course material for the introductory teaching of programming that are based on the principle of allowing the students to be the domain experts. The idea is that the students' familiarity with the domain of discourse will make course material more motivating, and that it will be more likely that they will be able to model the concepts and artifacts being discussed. This approach thereby seeks to scaffold the students' understanding of programming-related concepts. For reasons discussed in the paper, we have chosen mobile phone technology for this discussion, but there is no reason why the same principles should not be applied to other culturally-accessible domains.	The novice programmer's "device to think with"	NA:NA	2018
Daniel Stevenson	NA	Session details: Communication skills	NA	2018
Lori Carter	Soft skills such as communication, teamwork, and organization are important to students' future success in the working world. Faculty members know it, students know it, and employers are explicitly asking for these skills. Are computer science departments responsible to teach these skills? If so, where in the curriculum should they be covered? This paper explores the soft skills that employers want, and possible places to include the teaching of those skills in the curriculum. It then shows how an extensive set of soft skills were incorporated into a service learning course for the students in the Mathematical, Information and Computer Sciences department at Point Loma Nazarene University. Finally, it makes suggestions as to how other service learning or capstone courses could be altered to afford more opportunity for soft skill education.	Ideas for adding soft skills education to service learning and capstone courses for computer science students	NA	2018
Mary Elizabeth "M.E." Jones:Melanie Kisthardt:Marie A. Cooper	Seizing and retaining student interest in programming is a difficult task. Many students find programming to be a dry and tedious task doable only by students gifted with strong analytical skills. Teaching introductory programming via creative writing begins by connecting the planning, organizing, and detailing of writing a story to the programming process. Creative concepts are taught first and then connected to an equivalent programming concept. Group-oriented activities using art, "Mad-Libs"", "Potato Heads"", and "Legos"" allow students to actively make the connections among the creative concepts, analytical concepts, and programming skills. Students work in pairs. Student pairings are assigned by matching a student with analytical tendencies with a student majoring in one of the humanities disciplines. The pairs apply the concepts and skills by creating stories, designing an animation, and implementing the animation using the Alice programming system. This research recognizes the creative nature of programming, invites students who would not consider studying programming to potentially identify an unrecognized talent, and attempts to develop a new approach for teaching introductory programming. This research and teaching is sponsored by a NSF Grant [11].	Interdisciplinary teaching: introductory programming via creative writing	NA:NA:NA	2018
Sarah Monisha Pulimood:Donna Shaw:Emilie Lounsberry	This paper describes a collaboration between computer science and journalism students and professors at our small, primarily undergraduate college, and a large metropolitan newspaper. Our students' work was a catalyst for a hard-hitting series of investigative stories, with far-reaching consequences. The Gumshoe project is a model for computational journalism at an undergraduate institution. The project demonstrates that when computer scientists and journalists reach out across disciplinary boundaries, computational thinking and collaboration can solve a real problem, and have a substantive impact on society.	Gumshoe: a model for undergraduate computational journalism education	NA:NA:NA	2018
Joe Miró Julià	Being able to write correctly is a valuable asset for future CS professionals and an important learning tool, but teaching to write is difficult both for professors and students. Part of this difficulty is that writing is taught using unverifiable concepts such as style, and is significantly based on intuition. In this paper we present an engineering approach to writing, in which engineering principles are used to teach and assess writing. The results are as good, and much better in some cases, and teaching and learning become easier.	An engineering approach to teaching writing.	NA	2018
Sherri Goings	NA	Session details: Teacher endorsement and preparation	NA	2018
Tim Bell:Lynn Lambert	This paper describes the design, implementation, and evaluation of a course teaching Computer Science majors about teaching Computer Science. The course was designed to address the need for teachers and resources to support rapid changes in topics being taught in high schools. It also helped prepare students for research in Computer Science Education, and for careers involving computing and education. The course is described in detail, and is evaluated based on student feedback and the outcomes from the course.	Teaching computer science majors about teaching computer science	NA:NA	2018
Christopher Whitehead:Lydia Ray:Shamim Khan:Wayne Summers:Rodrigo Obando	Computer Science and technology have been driving scientific innovations, expanding the Information Technology sector and increasing productivity in all economic sectors for the last few decades, thus contributing significantly to the economic output of the U.S. Each sector of this country, ranging from national security to everyday life, is enormously impacted by computing technology. Clearly, future economic growth and prosperity of this country heavily rely on the strength and skills of the IT and computing workforce that will be able to expand and maintain the nationwide IT infrastructure. Unfortunately, the decline in students interested in Computer Science over the last several decades may threaten the United States' capability to expand and maintain the nationwide IT infrastructure. One solution that may slow and possibly even reverse this decline is to increase the awareness of Computer Science in the secondary school system and to increase the knowledge of Computer Science, the ability to teach Computer Science, and the Computer Science professionalism of teachers in that system. In this paper, the authors describe one technique for realizing this solution-implementing a Computer Science endorsement program for secondary school teachers.	Implementing a computer science endorsement program for secondary school teachers	NA:NA:NA:NA:NA	2018
Lijun Ni:Mark Guzdial:Allison Elliott Tew:Briana Morrison:Ria Galanos	In this paper, we describe our experience in supporting high school CS teachers by building a local community through the Disciplinary Commons for Computing Educators (DCCE) project. The DCCE project is an effort to explore ways of supporting these CS teachers through the creation of a local community and by promoting teacher reflection. DCCE achieved this goal through an academic-year-long program where a cohort of CS teachers engaged in collaborative portfolio creation and peer observation of classroom teaching. We describe the design of the DCCE activities and present preliminary results from initial evaluations. Our short-term evaluations indicate that this project was successful in creating a supportive community, promoting teacher reflection, and advancing change in teaching practices among a group of computing educators.	Building a community to support HS CS teachers: the disciplinary commons for computing educators	NA:NA:NA:NA:NA	2018
Noa Ragonis:Orit Hazzan:Judith Gal-Ezer	This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are two of the main educational and pedagogical challenges faced by those involved in CS education. Specifically, the paper presents the second stage of a study, the first stage of which focused on the accumulative knowledge gained in Israel over the past twenty years on CS teacher preparation. The first stage of the study, presented in SIGCSE 2010, emphasized the obvious: CS deserves designated CS teacher preparation programs. The second stage of the study, presented in this paper, is based on a deeper analysis of the data gathered in the first stage. Specifically, we approached a wider community of CS teacher educators (from Israel, Europe, and the USA) and explored its perspective on one element of teacher preparation programs - the Methods of Teaching CS (MTCS) course. The conclusions from this stage can be viewed as a comprehensive framework for the design of an MTCS course, both in terms of topics to be included in the course as well as the relative weight (in time) that is to be dedicated to each topic.	A study on attitudes and emphases in computer science teacher preparation	NA:NA:NA	2018
Chun Liew	NA	Session details: Expanding the community	NA	2018
Carol Frieze	In this paper we describe a new "research and action" based course designed to give undergraduate students the opportunity to think beyond the classroom, to reach out and examine some of the broader issues surrounding computing. "Understanding and Broadening the Images of Computing" researches the images, the realities and the (mis)perceptions of computing that influence public understanding and participation in the field. Along with research students are encouraged to see themselves as future professionals who can be actively involved in re-shaping and re-presenting the field. To this purpose, students build an action component working in teams to develop and implement a public presentation aimed at broadening understanding of computing.	The images of computing: engaging undergraduates in the broad issues of computer science	NA	2018
Andreas M. Stefik:Christopher Hundhausen:Derrick Smith	The blind and visually impaired community is significantly underrepresented in computer science. Students who wish to enter the discipline must overcome significant technological and educational barriers to succeed. In an attempt to help this population, we are engaged in a three-year research project to build an educational infrastructure for blind and visually impaired middle and high school students. Our primary research goal is to begin forging a multi-sensory educational infrastructure for the blind across the United States. We present here two preliminary results from this research: 1) a new auditory programming environment called Sodbeans, a programming language called Hop, and a multi-sensory (sound and touch) curriculum, and 2) an empirical study of our first summer workshop with the blind students. Results show that students reported a significant increase in programming self-efficacy after participating in our camp.	On the design of an educational infrastructure for the blind and visually impaired in computer science	NA:NA:NA	2018
Yonina Cooper:M. Bernardine Dias:Ermine A. Teves:Sarah Belousov:M. Freddie Freddie Dias	While the needs and applications for computing technology have been growing, the enrollment and interest in Computer Science (CS) at the university level has not been growing in proportion. Moreover, the increasing prevalence of globalization requires a new set of skills for future technology leaders. These skills include the ability to work well in multidisciplinary and globally distributed teams, cross cultural boundaries with ease, create innovative solutions for problems that arise in unfamiliar settings, and think outside the box to solve a variety of problems while building effectively upon related work in the literature. These changes are also reflected in the growing interest among youth in global issues and how we can make a difference in underserved communities. This paper reports on our experience in designing and deploying an innovative internship that addresses these issues and seeks to enhance participation and education in CS through guided research projects in underserved communities.	Enhancing participation and education in CS through guided research projects in underserved communities	NA:NA:NA:NA:NA	2018
Rebekah Overdorf:Matthew Lang	Creating programs that engage undergraduate women with the broader community and encourage them to take an active role in changing the underrepresentation of women in computer science can effectively address both retention and recruitment of women in the discipline. This paper is an experience report describing the creation and outcomes of an outreach program for K-12 girls run entirely by undergraduate women. The contributions of this paper are the description of the creation of a successful student-led outreach program and a set of active-learning modules for K-12 students that illustrate advanced topics.	Reaching out to aid in retention: empowering undergraduate women	NA:NA	2018
Kent Lee	NA	Session details: Mobile computing	NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz:Joel Hollingsworth	Many schools have introduced, or are considering, a programming course targeting mobile devices to satisfy student interest in programming smart phones. In addition, a new class of mobile devices are appearing that combine the functionality of an eBook reader with a web browser, and many of them are based on the same programming frameworks as the smart phones. We report on the successes of mobile device programming courses at two schools. In addition, we report on the accomplishments of students developing software to leverage these newer, multi-function devices in supporting broader computer science education initiatives. In particular, we have developed a service-oriented application that allows students to compile and test programs written in Java and C++ that can be invoked from these devices. We have developed other software allowing these devices to function like Tablet PCs. After describing these important tools, we discuss our current efforts to use these mobile devices in computer science education.	Teaching mobile computing and developing software to support computer science education	NA:NA:NA	2018
Susan Loveland	Recently, several frameworks have been developed for writing mobile and web applications in Java, making the development of web and mobile applications accessible to HCI students with only a CS1 Java background. In this paper we describe using student projects based on the Google Android mobile platform and Google's Web Toolkit to provide students with experience designing and implementing user interfaces for mobile and web applications. Specific examples demonstrate how programming on these platforms reinforces standard HCI topics. As a result of being able to learn mobile device programming in the context of "cool" Google platforms, students expressed increased interest in studying HCI.	Human computer interaction that reaches beyond desktop applications	NA	2018
David Wolber	App Inventor is a visual "blocks" language for creating mobile apps. As part of a Google pilot program, App Inventor was taught to university students in a core curriculum course at the University of San Francisco. This paper introduces App Inventor and the course, focusing on how the language facilitated interactions with the world outside of the classroom.	App inventor and real-world motivation	NA	2018
Mark H. Goadrich:Michael P. Rogers	In a remarkably short timeframe, developing apps for smartphones has gone from an arcane curiosity to an essential skill set. Employers are scrambling to find developers capable of transforming their ideas into apps. Educators interested in filling that void are likewise trying to keep up, and face difficult decisions in designing a meaningful course. There are a plethora of development platforms, but two stand out because of their popularity and divergent approaches - Apple's iOS, and Google's Android. In this paper, we will compare the two, and address the question: which should faculty teach?	Smart smartphone development: iOS versus android	NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Michele Friend Hutton:Eugene Lemon:Josh Paley	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes [7]. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing [4]. This led to a series of room-packed sessions at the following three SIGCSE symposia to explore that idea from different perspectives [8, 9, 12]. They have provided a forum for sharing: " What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. - What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. - How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over [10, 13]. Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field [2]. Also, recent news of limited hiring in the information technology sector could have a damping affect [11]. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). This year, we've shifted from that "breadth-first" model to a "depth-first" one, and have invited three K-12 teachers who, collectively, have taught computing at an all-girls middle school, an under-served high school, and an affluent high school. The hope with this panel is to be able to drill down and understand the K-12 space, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 4	NA:NA:NA:NA	2018
Susan Rodger	NA	Session details: Special session	NA	2018
Susan H. Rodger:Mark Stehlik:Chris Stephenson:Cameron Wilson	NA	Progress in surfacing computer science in STEM	NA:NA:NA:NA	2018
Sushil K. Prasad	NA	Session details: Special session	NA	2018
Sushil K. Prasad:Almadena Chtchelkanova:Sajal Das:Frank Dehne:Mohamed Gouda:Anshul Gupta:Joseph Jaja:Krishna Kant:Anita La Salle:Richard LeBlanc:Manish Lumsdaine:David Padua:Manish Parashar:Viktor Prasanna:Yves Robert:Arnold Rosenberg:Sartaj Sahni:Behrooz Shirazi:Alan Sussman:Charles Weems:Jie Wu	NA	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Samuel Rebelsky	NA	Session details: Intro CS: panoptic views	NA	2018
Peter Drake:Kelvin Sung	Games assignments are increasingly popular in computer science education. This paper advocates and analyzes the inclusion of board, card, and dice games as programming assignments in introductory programming courses (CS1/2). The simple interface and strategy-based play of these types of games complement the immersive multimedia and agility-based play of video games. The implementation of board, card, and dice games typically demands less background knowledge from the instructor and offers fewer opportunities for extraneous work by the students. The paper lists 32 specific games that are suitable for teaching the major topics in CS1/2 and discusses the implementation of some of these games and their successful use as programming projects.	Teaching introductory programming with popular board games	NA:NA	2018
Stephen Davies:Jennifer A. Polack-Wahl:Karen Anewalt	We present results from a nationwide survey of undergraduate computer science departments regarding languages and techniques taught in CS0, CS1, and CS2. This snapshot of 371 schools provides an intriguing look into the state of computing education today in the U.S., quantifying which practices are actually in common use. Among other things, the study reveals the great variety in CS0 approaches, the relative uniformity of CS1 and CS2 approaches, the dominance of Java as a language for the introductory major sequence, and the tendency for departments to teach CS1 and CS2 in a consistent manner, rather than exposing students to different ideas in each.	A snapshot of current practices in teaching the introductory programming sequence	NA:NA:NA	2018
Andrew Petersen:Michelle Craig:Daniel Zingaro	Many factors have been cited for poor performance of students in CS1. To investigate how assessment mechanisms may impact student performance, nine experienced CS1 instructors reviewed final examinations from a variety of North American institutions. The majority of the exams reviewed were composed predominantly of high-value, integrative code-writing questions, and the reviewers regularly underestimated the number of CS1 concepts required to answer these questions. An evaluation of the content and cognitive requirements of individual questions suggests that in order to succeed, students must internalize a large amount of CS1 content. This emphasizes the need for focused assessment techniques to provide students with the opportunity to demonstrate their knowledge.	Reviewing CS1 exam question content	NA:NA:NA	2018
Sandro Pedrazzini	NA	Session details: Software design and development	NA	2018
Daniel Rocco:Will Lloyd	Modern distributed version control systems offer compelling advantages for teaching students professional software development practices and skills. In this paper, we explore the potential for incorporating Mercurial into introductory, intermediate, and advanced computing courses. By incorporating version control into the entire CS curriculum, instructors create unique opportunities to engage students in collaborative, real-world projects and activities, giving them critical early exposure to the expectations and assumptions prevalent in the software development community. Early introduction to version control provides students with an important foundation in both personal and collaborative development excellence, offering them a competitive edge in the marketplace and a superior understanding of software development best practice.	Distributed version control in the classroom	NA:NA	2018
Jason Snyder:Stephen H. Edwards:Manuel A. Pérez-Quiñones	The Library for Interface Testing (LIFT) supports writing unit tests for Java applications with graphical user interfaces (GUIs). Current frameworks for GUI testing provide the necessary tools, but are complicated and difficult to use for beginners, often requiring a significant amount of time to learn. LIFT takes the approach that unit testing GUIs should be no different than testing any other type of code. By providing a set of frequently used filters for identifying GUI components and a set of operations for acting on those components, LIFT lets programmers quickly and easily test their GUI applications.	LIFT: taking GUI unit testing to new heights	NA:NA:NA	2018
Katherine Cennamo:Sarah A. Douglas:Mitzi Vernon:Carol Brandt:Brigitte Scott:Yolanda Reimer:Margarita McGrath	Revolutionary advances in technologies will require computer science professionals who are able to develop innovative software solutions. In order to identify techniques that can lead students to creative insights in their work, we have conducted an ethnographic study of the studio method as enacted in architecture, industrial design (ID), and human-computer interaction (HCI) classes. Our analysis of the activities conducted during studio critiques revealed that while the ID and architecture studios had a primary focus on experimentation, the primary emphasis of the HCI studios was on idea refinement. In this paper, we describe four barriers to creative thought observed in the HCI classrooms and identify ways that the architecture and ID instructors helped students to overcome similar challenges.	Promoting creativity in the computer science design studio	NA:NA:NA:NA:NA:NA:NA	2018
Matthew Jadud	NA	Session details: Cooperative learning	NA	2018
Alex D. Radermacher:Gursimran S. Walia	Pair programming is a programming technique where two programmers work together on the same programming task. Previous research has shown that it is effective for improving the learning effectiveness, efficiency, and enjoyment of students in introductory programming courses. Much research has also been dedicated to determining effective strategies for forming pairs. This paper discuss two different empirical studies conducted at North Dakota State University to a) test the feasibility of using pair programming in introductory computer science courses and b) determine whether or not major-based pairing produces effective pairs. The results of these studies provide support for implementing pair programming in introductory computer science courses and show that pairing of computer science and non-computer science students may produce pairs which are less compatible than other pairing methods.	Investigating the effective implementation of pair programming: an empirical investigation	NA:NA	2018
Steven Robbins	ClassQue is a classroom response system that goes beyond clickers to allow a wide selection of classroom interactions: teacher to individual student, teacher to all students, student to teacher and student to student. Questions are not restricted to multiple choice, and multiple questions can be pending at one time. One student can anonymously comment on another student's answer. After the class, students and teachers can receive reports of the classroom interactions. The current version of ClassQue is available for use in an environment in which each student is seated at a computer.	Beyond clickers: using ClassQue for multidimensional electronic classroom interaction	NA	2018
Shiri Azenkot:Theodore Golfinopoulos:Adam Marcus:Alessondra Springmann:Jonathan S. Varsanik	The Middle East Education Through Technology (MEET) program is a non-profit organization based in Jerusalem, that aims to empower future Israeli and Palestinian leaders by teaching them computer science and business. From the perspective of MEET's instructors, this paper describes how MEET uses computer science education to foster professional and personal contact among Israeli and Palestinian high school students, two groups who otherwise would have little or no interaction with each other. MEET's primary method of overcoming the barrier is teamwork: students are divided into groups that include both Israelis and Palestinians and are assigned software engineering tasks. We believe that the techniques used by MEET can serve as examples for other computer science programs that overcome barriers between groups in the United States and other countries.	Overcoming barriers among Israeli and Palestinian students via computer science	NA:NA:NA:NA:NA	2018
Paige Meeker	NA	Session details: Researching and evaluating teachers	NA	2018
Beth Simon:Elizabeth Bales:William G. Griswold:Stephen Cooper	Part of computer science education research focuses on the design of new technologies and techniques for improving educational experiences. However, for these systems and techniques to be truly impactful, their use must be disseminated to the larger instructor population. Single-instance workshops, where instructors are brought together to learn about a new technique or system so that they can possibly adopt it, are a common dissemination method. Unfortunately, rarely do we see reports regarding their effectiveness. In this case study, we report on two NSF-funded single-instance workshops designed to support adoption of the Ubiquitous Presenter (UP) active learning classroom presentation system. Though only 44% of workshop attendees used the system in their classrooms, 65% of those used the system repeatedly. Overall this impacted 1570 students. Additionally, 60% of our attendees used the active learning features of UP - a much higher usage rate than in the general UP user population. We reflect on the aspects of the workshops which seemed to promote, and hinder, instructor adoption and, finally, suggest some metrics for evaluating innovation dissemination workshops in general.	Case study: faculty professional development workshops for innovation diffusion	NA:NA:NA:NA	2018
Joshua T. Guerin:Daniel Michler	Undergraduate teaching evaluations are widely believed to be biased. We analyzed the evaluations from our department for all classes from 2000 through 2008, looking for specific biases. We looked for correlations between evaluation numbers and whether the course was required; how much time students spent on the course; student classification (freshman, sophomore, etc.), and expected grades. While all of these show correlations with teaching evaluation responses, the effect of each factor is not consistent over all questions and varied strongly depending on the evaluation question and the course level.	Analysis of undergraduate teaching evaluations in computer science	NA:NA	2018
Davide Fossati:Mark Guzdial	This paper explores the issue of what kind of evidence triggers changes in the teaching practice of Computer Science educators, and how educators evaluate the effectiveness of those changes. We interviewed 14 Computer Science instructors from three different institutions. Our study indicates that changes are mostly initiated from instructors' intuition, informal discussion with students, and anecdotal evidence.	The use of evidence in the change making process of computer science educators	NA:NA	2018
Thomas Cortina	NA	Session details: Keynote	NA	2018
Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Frederick P. Brooks, Jr.	The primary job of the teacher is to make learning happen; that is a design task. Most of us learned most of what we know by what we did, not by what we heard or read. A corollary is that the careful designing of exercises, assignments, projects, even quizzes, makes more difference than the construction of lectures. A second corollary is that project courses that go deeply into narrow aspects of a subject seem to stick longer and deeper than approaches aiming at comprehensive coverage. How to strike a balance? I've taught a first software engineering laboratory course 22 times, and an advanced computer architecture course about ten times. Here are some techniques that work for me.	The teacher's job is to design learning experiences; not primarily to impart information	NA	2018
Mehran Sahami	NA	Session details: Computer curricula 2013: update	NA	2018
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:David Reed	Beginning over 40 years ago with the publication of Curriculum 68, the major professional societies in computing--ACM and IEEE-Computer Society--have sponsored various efforts to establish international curricular guidelines for undergraduate programs in computing. As the field has grown and diversified, so too have the recommendations for curricula. There are now guidelines for Computer Engineering, Information Systems, Information Technology, and Software Engineering in addition to Computer Science. These volumes are updated regularly with the aim of keeping computing curricula modern and relevant. In the Fall of 2010, work on the next volume in the series, Computer Science 2013 (CS2013), began. Considerable work on the new volume has already been completed and a first draft of the CS2013 report (known as the Strawman report) will be complete by the beginning of 2012. This panel seeks to update and engage the SIGCSE community in providing feedback on the Strawman report, which will be available shortly prior to the SIGCSE conference.	Computer science curriculum 2013: reviewing the strawman report from the ACM/IEEE-CS task force	NA:NA:NA:NA	2018
Mark Hoffman	NA	Session details: Scrum across the CS/SE curricula	NA	2018
Charles Wallace:Sriram Mohan:Douglas Troy:Mark E. Hoffman	Scrum is one of the many agile approaches to software development that have been widely adopted over the past decade. Agile processes allow developers to embrace under-defined problems in complex environments where change in requirements is inevitable. The key agile features of Scrum are a flexible, adaptive schedule; democratic, collaborative teams; and frequent, iterative project and process reviews [2]. While students may engage with Scrum in the context of software development, the characteristics that suit many software problems to an agile approach also describe the student learning environment: complexity (new and unfamiliar concepts), under-defined problem space (students don't know what they don't know), short timeframe with frequent meetings (terms and class meetings), and inevitable change (apply new knowledge). This makes Scrum not only a software development strategy but a general learning strategy. Scrum facilitates frequent and iterative practice with timely feedback, development of mastery, and self-direction [1]. In this panel, the participants will describe how their students learn and practice Scrum in a software development context, how they use it to manage student projects outside the software development context, and how Scrum provides opportunities to integrate communication skills into the Computer Science (CS) and Software Engineering (SE) curricula. As participants in the NSF-funded CPATH II project (NSF Grants 0939122 and 0939081) "Incorporating Communication Skills Throughout Computer Science and Software Engineering Curricula," each panelist has developed Scrum-based assignments that exercise the skills of reading, writing, speaking, and teaming. The participants will discuss the design of these assignments and their experiences with them to date.	Scrum across the CS/SE curricula: a retrospective	NA:NA:NA:NA	2018
Ursula Wolz	NA	Session details: Special session	NA	2018
Ursula Wolz:Lillian (Botos) Cassel	NA	The role of interdisciplinary computing in higher education, research and industry	NA:NA	2018
Ivona Bezakova	NA	Session details: Paper: data structures and algorithms	NA	2018
Ali Erkan:Tom Pfaff:Jason Hamilton:Michael Rogers	During the past two years, we have been creating curricular material centered around complex problems rooted in sustainability. Since multi-disciplinary learning is one of our primary goals, these projects are most meaningful when they connect students from different disciplines working toward a common understanding. However, strong disciplinary components present in their solutions also allow us to frame these projects from strictly disciplinary perspectives. In this paper, we show how they can be used for increased engagement in the context of data structures and algorithms. We review two new ones to explore (i) the structural characteristics of the western part of the U.S. power-grid, and (ii) the effects of over-harvesting on fish stocks.	Sustainability themed problem solving in data structures and algorithms	NA:NA:NA:NA	2018
Michal Forišek:Monika Steinová	In this paper we explore the topic of using metaphors and analogies in teaching algorithms. We argue their importance in the teaching process. We present a selection of metaphors we successfully used when teaching algorithms to secondary school students. We also discuss the suitability of several commonly used metaphors, and in several cases we show significant weaknesses of these metaphors.	Metaphors and analogies for teaching algorithms	NA:NA	2018
Holger Danielsiek:Wolfgang Paul:Jan Vahrenhold	We describe the first results of our work towards a concept inventory for Algorithms and Data Structures. Based on expert interviews and the analysis of 400 exams we were able to identify several core topics which are prone to error. In a pilot study, we verified misconceptions known from the literature and identified previously unknown misconceptions related to Algorithms and Data Structures. In addition to this, we report on methodological issues and point out the importance of a two-pronged approach to data collection.	Detecting and understanding students' misconceptions related to algorithms and data structures	NA:NA:NA	2018
Sherri Goings	NA	Session details: Paper: robots	NA	2018
David Cowden:April O'Neill:Erik Opavsky:Dilan Ustek:Henry M. Walker	Using robots in introductory computer science classes has recently become a popular method of increasing student interest in computer science. This paper describes the development of a new curriculum for a CS 2 course, Imperative Problem Solving and Data Structures, based upon Scribbler 2 robots with standard C. The curriculum contains eight distinct modules with a primary topic theme, readings, labs, and project at the end. Each module resulted from collaboration among former CS 2 students and a faculty member, utilizing an iterative process with revisions. Each lab includes a survey to obtain student feedback that will allow the course to evolve and better fit the needs of future CS 2 students. All materials discussed here are available online for use by others.	A C-based introductory course using robots	NA:NA:NA:NA:NA	2018
Grant Braught	dLife is a free and open-source Java library that supports undergraduate education and research involving robotics, artificial intelligence, machine learning and computer vision. The design of dLife addresses many concerns raised by experience reports in the CS education literature including a shortened code/test/debug cycle, ready access to robot sensor information and close integration with a robotic simulation system. Full support is currently provided for the following robots: Finch, Hemisson (or Khepera Jr.), Sony Aibo, Khepera 2, Khepera 3, and Pioneer 3, with more in development. Easily extensible packages support classroom and research applications using neural networks, genetic algorithms, reinforcement learning and computer vision.	dLife: a Java library for multiplatform robotics, AI and vision in undergraduate CS and research	NA	2018
David S. Touretzky	Robotics is widely recognized as an interdisciplinary mixture of engineering and computer science, but the latter component is not well represented at many undergraduate institutions. The sophisticated technologies that underlie perception, planning, and control mechanisms in modern robots need to be made accessible to more computer science undergraduates. Following the curriculum design principles of Wiggins and McTighe (Understanding by Design, 2nd Ed.), I present seven big ideas in robotics that can fit together in a one semester undergraduate course. Each is introduced with an essential question, such as "How do robots see the world?" The answers expose students to deep concepts in computer science in a context where they can be immediately demonstrated. Hands-on labs using the Tekkotsu open source software framework and robots costing under $1,000 facilitate mastery of these important ideas. Courses based on parts of an early version of this curriculum are being offered at Carnegie Mellon and several other universities.	Seven big ideas in robotics, and how to teach them	NA	2018
Sheila Castaneda	NA	Session details: Paper: K-6 collaborations	NA	2018
Arno Pasternak:Jan Vahrenhold	We report on the design and evaluation of the first year of a Computer Science course in lower secondary education that implements the concept of braided teaching. Besides being a proof-of-concept, our study demonstrates that students an indeed be taught Computer Science (as opposed to Information and Communication Technology) as early as in sixth grade while at the same time not falling behind with respect to Information Technology Literacy. We present quantitative and qualitative results and argue that Computer Science can be taught just like any other science subject worth full curriculum credit.	Design and evaluation of a braided teaching course in sixth grade computer science education	NA:NA	2018
Chris Gregg:Luther Tychonievich:James Cohoon:Kim Hazelwood	Traditional introductory programming classes teach sequential programming using a single-threaded programming model. It is typical to wait until a student has developed proficiency in sequential programming before teaching parallel programming. As computer hardware becomes increasingly parallel, there is a greater need for software engineers who are proficient in designing parallel programs, and not just by "parallelizing" sequential designs. Teaching parallelism first is an important step towards educating tomorrow's programmers. We present an overview of a five-day introductory parallel programming course. We taught the course to nine and ten year-olds with no prior programming experience. Our course utilized a fundamentally parallel language we designed for the course, one with a near-natural language syntax that exposed the parallel processors throughout the code. This language, coupled with an interactive online programming environment, allowed us to teach a wide range of parallel programming concepts in a very limited timeframe. We also present examples of student-written code that demonstrates their understanding of some basic parallel programming concepts, and we describe the overall course goal and specific lesson plans geared towards teaching students how to "think parallel."	EcoSim: a language and experience teaching parallel programming in elementary school	NA:NA:NA:NA	2018
Colleen M. Lewis:Niral Shah	We found that fifth grade students' scores on Scratch programming quizzes in a summer enrichment course were highly correlated with their scores on a standardized test for mathematics. We identify ways in which the programming curriculum builds upon target skills from the Mathematics Content Standards for California Public Schools. We hypothesize that the programming curriculum leveraged and enriched students' mathematics content knowledge.	Building upon and enriching grade four mathematics standards with programming curriculum	NA:NA	2018
Sage Miller	NA	Session details: Paper: tools	NA	2018
Douglas Blank:Jennifer S. Kay:James B. Marshall:Keith O'Hara:Mark Russo	The Calico project is a multi-language, multi-context programming framework and learning environment for computing education. This environment is designed to support several interoperable programming languages (including Python, Scheme, and a visual programming language), a variety of pedagogical contexts (including scientific visualization, robotics, and art), and an assortment of physical devices (including different educational robotics platforms and a variety of physical sensors). In addition, the environment is designed to support collaboration and modern, interactive learning. In this paper we describe the Calico project, its design and goals, our prototype system, and its current use.	Calico: a multi-programming-language, multi-context framework designed for computer science education	NA:NA:NA:NA:NA	2018
Prasun Dewan	A language-based direct-manipulation user-interface generator automatically creates a visualization of an object directly from its class, allows users to edit the visualization, and invokes methods in the object in response to these edits. Such a generator can change, and we argue, improve the lectures and assignments on programming conventions, methods, state, constructors, preconditions, MVC, polymorphism, graphics, structured objects, loops, concurrency, and annotations. We have built such a generator, which has several novel features for teaching such as interactive instantiation of a class, interactive invocation of methods and constructors that take arbitrary arguments, visualization of objects representing records, sequences, table and graphics, use of preconditions to disable/enable user-interface elements, and automatic generation of model threads. We have been working on and using such a generator for teaching CS 1 and CS 2 for about a decade.	How a language-based GUI generator can influence the teaching of object-oriented programming	NA	2018
Jason Vandeventer:Benjamin Barbour	Computer science instructors often rely on the final version of a program for assessment and feedback. This ignores the process the student used to arrive at the final program. When the instructor has the ability to observe real-time development progress of each student, they are better equipped to provide appropriate and timely feedback. CodeWave, a software program developed at the University of North Carolina Wilmington looks to alleviate these issues. CodeWave is a real-time, collaborative Integrated Development Environment with traditional features such as syntax highlighting and non-traditional features such as integrated messaging and logged playback. CodeWave enhances productivity by integrating many common tools students and instructors use during the programming process. Communication is effortless and allows a user to specify a point in the code as a link in the message body. Log playback provides the ability to review the entire development process. In this paper, we describe the software program we developed to enhance learning in computer science programming courses.	CodeWave: a real-time, collaborative IDE for enhanced learning in computer science	NA:NA	2018
Richard Brown	NA	Session details: A stratified view of programming language parallelism for undergraduate CS education	NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop	It is no longer news that undergraduates in computer science need to learn more about parallelism. The range of options for parallel programming is truly staggering, involving hundreds of languages. How can a CS instructor make informed choices among all the options? This panel provides a guided introduction to parallelism in programming languages and their potential for undergraduate CS education, organized into four progressive categories: low-level libraries and; higher-level libraries and features; programming languages that incorporate parallelism; and frameworks for productive parallel programming. The four panelists will present representative examples in their categories, then present viewpoints on how those categories relate to coursework, curriculum, and trends in parallelism.	A stratified view of programming language parallelism for undergraduate CS education	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Special session	NA	2018
Daniel D. Garcia:David Ginat	One of the most important tasks an introductory computing student must do is to form a mental model of how the computer works. This could be as specific as understanding the read-evaluate-print loop of an interpreter, or as general as believing that the computer works predictably and deterministically. However, some have fuzzy mental models, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that an audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of magic tricks whose answer is grounded in computer science: modulo arithmetic, permutations, algorithms, binary encoding, probability, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	DeMystifying computing with magic	NA:NA	2018
Jeffrey Stone	NA	Session details: Community-based projects for computing majors: opportunities, challenges and best practices	NA	2018
Jeffrey A. Stone:Bonnie MacKellar:Elinor M. Madigan:Janice L. Pearce	The use of community-based projects has been recognized as having pedagogical and experiential value for computing majors (e.g. [3], [4], [5], [6]). Community-based projects can be valuable learning experiences for computing majors as well as for faculty and community partners. However, these types of projects do present challenges for faculty and should be aligned with desired course outcomes. This panel will discuss the use of community-based projects from multiple perspectives. The expectation is that the panel will serve as a forum for the participants to share the opportunities, challenges, pedagogical motivations, and best practices obtained from prior experience. Exemplar projects will be highlighted. The panel also hopes the session motivates the audience to share their own experiences and sparks the interest of those faculty members who may have no prior experience with community-based projects.	Community-based projects for computing majors: opportunities, challenges and best practices	NA:NA:NA:NA	2018
Adrienne Decker	NA	Session details: Paper: games	NA	2018
Gillian Smith:Anne Sullivan	This paper presents lessons learned from five years of teaching a game design and programming outreach course. This class is taught over the course of a month to high school students participating in the California Summer School for Mathematics and Science (COSMOS) at the University of California, Santa Cruz. Over these five years we have changed everything in the course, from the overall project structure to the programming language used in the class. In this paper we discuss our successes and failures, and offer recommendations to instructors offering similar courses.	The five year evolution of a game programming course	NA:NA	2018
Katie Seaborn:Magy Seif El-Nasr:David Milam:Darren Yung	Games are an important part of popular culture and have successfully engaged audiences from different age groups [8]. This has caused many educators to start thinking of different ways to infuse game-based techniques (playing or construction) to enhance education. Over the past five years, there has been several research efforts on curriculum development and the evaluation of game construction and playing methods to promote STEM (Science Technology, Engineering and Mathematics) concepts to middle and high school students. In this paper, we report on a new study following the lead of previous efforts. In particular, we were granted a block within Frank Hurt High School by the Surrey school district for which to develop a game construction-based curriculum as a basis for computer science education within the school, replacing a traditional computer science class. From February till June 2011 students were taught elementary programming using GameMaker, a digital game development tool. In addition to collecting students' overall impressions, we also evaluated students' technical competency (using tests) and self-efficacy (using surveys) at the start and end of the semester. Our findings show that the curriculum had a positive, statistically significant effect on concept comprehension, which suggests that the curriculum was effective for understanding computer science and game design concepts. In this paper we present the course structure, methods, and evaluation as a contribution.	Programming, PWNed: using digital game development to enhance learners' competency and self-efficacy in a high school computing science course	NA:NA:NA:NA	2018
Michael John Eagle:Tiffany Barnes	We present the Game2Learn methodology for the design and evaluation of educational games with a focus on well-defined learning objectives and empirical verification. This integrative process adapts ideas from educational design, intelligent tutoring systems, classical test-theory, and interaction and game design, and agile software development. The methodology guides researchers through the steps of the design process, including identification of specific learning objectives, translation of learning activities to game mechanics, and the empirical evaluation of the final product. This methodology is particularly useful for ensuring successful student research experiences or software engineering courses.	A learning objective focused methodology for the design and evaluation of game-based tutors	NA:NA	2018
Sarah Heckman	NA	Session details: Paper: professional experiences	NA	2018
Thomas Gibbons	A new model, professional course guides, describes how practicing professionals can be brought into the classroom as student mentors and integrated into the course material. This new model is compared to existing models for student interactions with practicing professionals including guest speakers, adjunct faculty, and program mentors.	Course guides: a model for bringing professionals into the classroom	NA	2018
Sriram Mohan:Stephen Chenoweth:Shawn Bohner	The computer science capstone experience is designed to bridge the gap from university expectations to those of industry. Yet trying to solve this problem with a single course sequence, even one spanning the senior year, has some shortcomings, in terms of learning outcomes which can be achieved, and also instructional strategies that can be employed. We describe here an alternative plan which first provides a junior year of practice on a client-based project integrated with learning design and other related topics, followed by a senior year in which students can work more independently to hone these skills on a harder year-long project with another client. This two-year sequence, with scaffolding provided at first that is gradually removed, has proven to be especially effective in preparing undergraduates for a career in the soft- ware industry. The approach also integrates well with the need for these students to become proficient at working in engineering teams.	Towards a better capstone experience	NA:NA:NA	2018
Jeffrey Saltz:Jae Oh	We present an open co-op program called Global Enterprise Technology Immersion Experience (GET IE) developed by JPMorgan Chase & Co. and Syracuse University. The new program creates a global enterprise focus in technology-oriented academic majors, integrated with hands-on experiential work-based learning to provide a context in which students are stimulated to utilize their classroom experience. The program includes a two-semester paid internship component that can be seamlessly incorporated with the existing computer science curriculum at Syracuse and else where. The internship's unique pedagogical innovation is to simultaneously provide the students academic course work that is integrated within a students extended internship and provides relevant problems in global enterprise technology. The curricula is "open" in the sense that other institutions and companies can join the consortium to enrich choices for the students and foster cross-fertilization of curricula activities. The program, in effect, creates a domain specific next generation co-op program that complements typical computer science curricula with a skill-set that is required for creating very large, global enterprise applications for technically and socially diverse organizations.	An open co-op model for global enterprise technology education: integrating the internship and course work	NA:NA	2018
Don Goelman	NA	Session details: Paper: a session with a view	NA	2018
Tamar Vilner:Ela Zur:Ronit Sagi	The Open University of Israel (OUI) is a distance learning university. Our CS1 course is taught through video-taped lectures that cover the study material. In addition, students may participate in face-to-face group meetings in study centers located all over the country and taught by tutors. There is a special group called Ofek, in which the tutor is located in a studio and the lesson is broadcast over the internet. Students enrolled in this group participate from their home PCs. The taped Ofek sessions as well as the lectures are stored on the course website, and students can watch them whenever convenient. We conducted a study to investigate students' viewing habits and the relationship between viewing and the success rate in the course.	Integrating video components in CS1	NA:NA:NA	2018
Tayfun Tuna:Jaspal Subhlok:Lecia Barker:Varun Varghese:Olin Johnson:Shishir Shah	Videos of classroom lectures have proven to be a popular and versatile learning resource. This paper reports on videos featuring Indexing, Captioning, and Search capability (ICS Videos). The goal is to allow a user to rapidly search and access a topic of interest, a key shortcoming of the standard video format. A lecture is automatically divided into logical indexed video segments by analyzing video frames. Text is automatically identified with OCR technology enhanced with image transformations to drive keyword search. Captions can be added to videos. The ICS video player integrates indexing, search, and captioning in video playback and has been used by dozens of courses and 1000s of students. This paper reports on the development and evaluation of ICS videos framework and assessment of its value as an academic learning resource.	Development and evaluation of indexed captioned searchable videos for STEM coursework	NA:NA:NA:NA:NA:NA	2018
James R. Miller	Metaview is an interactive tool that helps to teach concepts related to nested 3D coordinate systems, especially in the context of defining and establishing views of 3D scenes in common graphics APIs like OpenGL and Direct3D. We describe the context in which nested coordinate systems arise in the study of graphics programming, then we relate the common conceptual difficulties students typically experience when studying and trying to put this material into practice. We then describe the role that metaview plays in helping to overcome these problems. Space allows us only to describe its core uses in these areas; several of its additional features are briefly listed at the end. Metaview is packaged with a set of built-in 3D models used to demonstrate major concepts. In addition, external and/or student-programmed models are easily imported into the tool. Metaview can be run anywhere, anytime using Java Web Start. The latest released version of the tool can be executed from http://people.eecs.ku.edu/~miller/JOGL/metaview.jnlp. We are currently working on a port to OpenGL ES targeted for portable smart devices such as tablet computers.	Metaview: a tool for learning about viewing in 3D	NA	2018
Saquib Razak	NA	Session details: Paper: pedagogy: programming	NA	2018
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba:Steve Cooper	In this paper, we describe a pedagogy for an undergraduate programming course using Alice 3 and Java. We applied the educational theory of mediated transfer to develop a new version of the Alice system and accompanying instructional materials. The pedagogy was implemented and tested over two years. Student test scores in experimental, treatment course sections showed dramatic improvement over scores in comparable non-treatment sections.	Mediated transfer: Alice 3 to Java	NA:NA:NA:NA:NA	2018
Richard Gluga:Judy Kay:Raymond Lister:Sabina Kleitman:Tim Lever	A computer science student is required to progress from a novice programmer to a proficient developer through the programming fundamentals sequence of subjects. This paper deals with the capturing and representation of learning progression. The key contribution is a web-based interactive tutorial that enables computer science educators to practice applying the Bloom Taxonomy in classifying programming exam questions. The tutorial captures participant confidence and self-explanations for each Bloom [5] classification exercise. The results of an evaluation with ten participants were analyzed for consistency and accuracy in the application of Bloom. The confidence and self-explanation measures were used to identify problem areas in the application of Bloom to programming fundamentals. The tutorial and findings are valuable contributions to future ACM/IEEE CS curriculum revisions, which are expected to have a continued emphasis on Bloom [1].	Over-confidence and confusion in using bloom for programming fundamentals assessment	NA:NA:NA:NA:NA	2018
Chris Piech:Mehran Sahami:Daphne Koller:Steve Cooper:Paulo Blikstein	Despite the potential wealth of educational indicators expressed in a student's approach to homework assignments, how students arrive at their final solution is largely overlooked in university courses. In this paper we present a methodology which uses machine learning techniques to autonomously create a graphical model of how students in an introductory programming course progress through a homework assignment. We subsequently show that this model is predictive of which students will struggle with material presented later in the class.	Modeling how students learn to program	NA:NA:NA:NA:NA	2018
Rebecca Bates	NA	Session details: Science fiction in computer science education	NA	2018
Rebecca Bates:Judy Goldsmith:Rosalyn Berne:Valerie Summet:Nanette Veilleux	The use of science fiction (SF) to engage students in computer science learning is becoming more popular [1-6]. There is ample material available to help both undergraduate and graduate students make connections between technical content and human experience, from Star Trek to The Hitchhiker's Guide to the Galaxy to 2001: A Space Odyssey to I, Robot and many others. Fiction can be included in technical courses or used to draw students into the field in introductory classes. The panelists, who represent a range of schools, perspectives and classes, will present brief overviews (5-8 minutes) of how they have used science fiction to engage students in technical topics as well as ethical and societal issues related to computing. After the overviews, there will be plenty of time for discussion of examples used within the community and ways to make connections between science fiction and particular classes or topics. We will be gathering additional examples from the discussion and making them available online.	Science fiction in computer science education	NA:NA:NA:NA:NA	2018
Leisa D. Thompson	NA	Session details: Diversity initiatives to support systemic change for women in undergraduate computing	NA	2018
Leisa D. Thompson:Lecia J. Barker:Rita Manco Powell:Catherine E. Brawner:Tom McKlin	The National Center for Women & Information Technology (NCWIT) Extension Services for Undergraduate Programs (ES-UP) has created a large group of trained consultants (ESCs) and clients who are passionate about women's participation in computing. This panel will describe how our ESCs and clients have worked together to effect change and will show outcomes from our activities over the past three years.	Initiatives to support systemic change for women in undergraduate computing	NA:NA:NA:NA:NA	2018
Christopher Hundhausen	NA	Session details: Special session	NA	2018
N. Hari Narayanan:Christopher Hundhausen:Dean Hendrix:Martha Crosby	The studio-based learning (SBL) model aims to promote learning in a social and collaborative context by having learners construct, iteratively refine, and critically review design artifacts under the guidance of instructors and disciplinary experts. Recognizing the potential of SBL to foster the development of not only technical design skills, but also increasingly-coveted communication and collaboration skills, we have been adapting the approach for computing education, implementing it in various courses, and evaluating its impact over the past 5 years. This effort now involves 26 computing courses at 15 institutions in seven states. To our knowledge, this represents the most systematic implementation and evaluation of a pedagogy for computing education to date. This special session will introduce SBL to the SIGCSE community and facilitate a discussion and exchange of ideas. In addition to oral and poster presentations of the SBL model and its evaluation results, the session will feature "war stories" from teachers who have applied the model to their courses and hands-on activities to help attendees apply SBL to their courses.	Transforming the CS classroom with studio-based learning	NA:NA:NA:NA	2018
Kristine Nagel	NA	Session details: Paper: broadening participation	NA	2018
Pierluigi Crescenzi:Leonardo Rossi:Gianluca Apollaro	In this paper we describe how we tried to make the well-known JFLAP Turing machine simulator accessible to blind students taking a theoretical computer science course. Software accessibility is an important topic for both legal and ethical reasons: in our case, however, we also wanted to make the accessible software usable by blind students in cooperation with the other students, in order to encourage the integration of the blind students within the rest of the class. For this reason, the accessible version of the JFLAP Turing machine simulator that we developed is as much similar as possible to and fully compatible with the original one. In the paper, we also report some very satisfactory preliminary validation results that indicate how the new software can really make Turing machines accessible to blind students.	Making turing machines accessible to blind students	NA:NA:NA	2018
David C. Webb:Alexander Repenning:Kyu Han Koh	A fundamental challenge to computer science education is the difficulty of broadening participation of women and underserved communities. The idea of game design and game programming as an activity to introduce children at an early age to computational thinking in a motivational way is quickly gaining momentum. A pedagogical approach called Project First has allowed the Scalable Game Design project to reach a large group of middle schools students including a large percentage of female (45%) and underrepresented (48%) students. With over 4000 students in inner city, remote rural, and Native American communities Scalable Game Design has investigated the impact on students' interest level of pedagogical approaches employed by teachers such as mediation and scaffolding. Findings suggest strong gender effects based on classroom scaffolding approaches. For instance, girls are substantially less likely to be motivated through scaffolding based on direct instruction. Conversely, guided discovery scaffolding approaches are highly motivating to the point where they can even overcome other negative predictors such as small girls to boys class participation ratios. This paper introduces the project, discusses different scaffolding approaches and presents data connecting gender specific motivational levels with scaffolding approaches.	Toward an emergent theory of broadening participation in computer science education	NA:NA:NA	2018
Julie Krause:Irene Polycarpou:Keith Hellman	As percentages of women in computing jobs and university programs decline, recruiting and retaining women in the field of Computer Science (CS) becomes increasingly important. Undergraduate CS programs, and more specifically, introductory-level CS courses, offer an opportunity to introduce women to CS studies. Furthermore, learning experiences in introductory CS courses can be pivotal in shaping female students' perceptions of CS. Collaborative learning, in various forms, is an instructional construct that has been shown to be effective in recruiting and retaining women in undergraduate CS programs. In this paper we present an exploratory study on formal learning groups and their potential to attract and maintain female students' interest in CS studies.	Exploring formal learning groups and their impact on recruitment of women in undergraduate CS	NA:NA:NA	2018
Charles Leska	NA	Session details: Paper: online collaboration	NA	2018
Jam Jenkins:Evelyn Brannock:Thomas Cooper:Sonal Dekhane:Mark Hall:Michael Nguyen	The Java Wiki Integrated Development Environment (JavaWIDE) is an innovative environment that promotes active learning and collaboration in programming courses. This paper surveys how JavaWIDE's features have been used to promote active and collaborative learning in both traditional and distance education (synchronous) in four different environments: high school, summer enrichment courses, and at two- and four-year colleges. The authors describe the context of each teaching and learning environment and the parts of JavaWIDE that are particularly well suited in each context. After discussing the active learning and collaboration techniques employed, student responses to the experience are summarized. This collection of case studies illustrates how the concurrent editing, shared environment awareness and other features of JavaWIDE can be used to promote active learning and collaboration within a heterogeneous set of teaching and learning environments.	Perspectives on active learning and collaboration: JavaWIDE in the classroom	NA:NA:NA:NA:NA:NA	2018
Christopher Scaffidi:Aniket Dahotre:Yan Zhang	Animation programming is a widely-respected approach for helping students to learn programming skills, and online forums are a widely-used approach for helping students to interact with one another. But in what ways, if any, does combining animation programming with online forums lead to useful discussion and collaboration among learners? To answer this question, we analyzed online forum discussions among people who were learning to create animation programs using the Scratch programming environment. We discovered that specific kinds of online posts were more likely than others to be followed by discussion, and we found that the ensuing collaboration often involved the exchange of design ideas and feedback within small groups of users. These findings reveal opportunities for enhancing online forums and surrounding tools so they more effectively facilitate discussion, collaboration, and ultimately development of programming skills.	How well do online forums facilitate discussion and collaboration among novice animation programmers?	NA:NA:NA	2018
John Barr:Ananda Gunawardena	Classroom Salon is an on-line social collaboration tool that allows instructors to create, manage, and analyze social net- works (called Salons) to enhance student learning. Students in a Salon can cooperatively create, comment on, and modify documents. Classroom Salon provides tools that allow the instructor to monitor the social networks and gauge both student participation and individual effectiveness. This pa- per describes Classroom Salon, provides some use cases that we have developed for introductory computer science classes and presents some preliminary observations of using this tool in several computer science courses at Carnegie Mellon University.	Classroom salon: a tool for social collaboration	NA:NA	2018
Catherine Lang	NA	Session details: Paper: middle school collaborations	NA	2018
Elizabeth Carter:Glenn Blank:Jennifer Walz	In order to garner more student interest in the pursuit of computer science as both a major and a career path, K-12 students need to be made aware of what computer science is and what it is about earlier in their education. Although students in many high schools can pursue introductory programming, high school is arguably too late to interest students who may have developed ill-informed attitudes about computer science. This paper documents curricular items developed for and taught to an audience of mixed ability 6th through 8th graders taking a local Technology Education class that attempts to showcase some of the more interesting, less stereotypical, aspects of computer science using a breadth approach in an effort to encourage interest in the field.	Bringing the breadth of computer science to middle schools	NA:NA:NA	2018
Richard Burns:Lori Pollock:Terry Harvey	We have developed and implemented, over four semesters, a model for engaging computer science majors in service learning for teachers of grades 6-8 at a K-8 school in an underserved community. This paper describes the design of a course focused on interweaving software engineering practice, service learning, and development of "soft" professional skills. CS student teams partner with middle school teacher teams to create learning games for classrooms, and then conduct classroom instruction and observation. We report on our results from evaluating the experience of CS students and middle school teachers through pre-post surveys, evaluator observation of student demo presentations and classroom instruction, focus groups, and student reflective journals.	Integrating hard and soft skills: software engineers serving middle school teachers	NA:NA:NA	2018
Linda Werner:Jill Denner:Shannon Campe:Damon Chizuru Kawamoto	Computational thinking (CT) has been described as an essential capacity to prepare students for computer science, as well as to be productive members of society. But efforts to engage K-12 students in CT are hampered by a lack of definition and assessment tools. In this paper, we describe the first results of a newly created performance assessment tool for measuring CT in middle school. We briefly describe the context for the performance assessment (game-programming courses), the aspects of CT that are measured, the results, and the factors that are associated with performance. We see the development of assessment tools as a critical step in efforts to bring CT to K-12, and to strengthen the use of game programming in middle school. We discuss problems and implications of our results.	The fairy performance assessment: measuring computational thinking in middle school	NA:NA:NA:NA	2018
Julian Mason	NA	Session details: Paper: new tricks for the classroom	NA	2018
Stephen H. Edwards:Zalia Shams:Michael Cogswell:Robert C. Senkbeil	At SIGCSE 2002, Michael Goldwasser suggested a strategy for adding software testing practices to programming courses by requiring students to turn in tests along with their solutions, and then running every student's tests against every other student's program. This approach provides a much more robust environment for assessing the quality of student-written tests, and also provides more thorough testing of student solutions. Although software testing is included as a regular part of many more programming courses today, the all-pairs model of executing tests is still a rarity. This is because student-written tests, such as JUnit tests written for Java programs, are now more commonly written in the form of program code themselves, and they may depend on virtually any aspect of their author's own solution. These dependencies may keep one student's tests from even compiling against another student's program. This paper discusses the problem and presents a novel solution for Java that uses bytecode rewriting to transform a student's tests into a form that uses reflection to run against any other solution, regardless of any compile-time dependencies that may have been present in the original tests. Results of applying this technique to two assignments, encompassing 147 student programs and 240,158 individual test case runs, shows the feasibility of the approach and provides some insight into the quality of both student tests and student programs. An analysis of these results is presented.	Running students' software tests against each others' code: new life for an old "gimmick"	NA:NA:NA:NA	2018
Christopher Plaue:Sal LaMarca:Shelby H. Funk	Large introductory-level classes provide a cost-efficient approach for universities to serve many students at once, but also present several challenges to learning (e.g., poor visual angles). In addition, more students with declared, undeclared, or undiagnosed learning disabilities are entering the college and university systems. In the spirit of universal design, we created a group note-taking system in our large introductory computer science course to increase interaction amongst students, promote good note-taking strategies, and provide study resources to all students while also fulfilling the role of accommodating for students with learning disabilities. We show that the section of the course taught with our intervention performed significantly better on their final examination compared to a course taught without the intervention. We report that students enjoyed increased interactions with their peers, and that one third of the class self-reported an increase in their note-taking skills. Furthermore, our intervention only required minimal cost to the institution, and no financial cost to students, and is easily implemented in any size class.	Group note-taking in a large lecture class	NA:NA:NA	2018
Michelle Craig:Sarah Petersen:Andrew Petersen	This paper presents observations about teaching program tracing to novices drawn from a study of knitting patterns. Due to changes in audience, knitting patterns have evolved from vague, chatty discourse written for experts to precise, line-by-line procedures that are akin to programs. The modern knitting community has developed numerous conventions for articulating iteration, expressing conditions, and documenting design decisions. "Executing" one of these patterns is analogous to tracing, since the knitter must demonstrate understanding of the instructions. We argue that the conventions adopted by knitters to make their patterns more understandable to non-experts provide useful insight to computer scientists teaching novices. Our observations suggest that phrasing conditions as termination cases ("until" instead of "while") and partially unrolling loops may help beginners understand code and that some structures, like parameters to functions, may be unfamiliar because they have no common analog.	Following a thread: knitting patterns and program tracing	NA:NA:NA	2018
Tracy Camp:Paul Tyman	NA	Session details: Plenary Session	NA:NA	2018
Hal Abelson	SIGCSE members love the beauty of computational thinking. They know the joy of bringing those ideas to young people. That love for computational thinking entails respect for the computational values that empower people in the digital world. For academics, those values have been central to the flowering of computing as an intellectual endeavor. Today, those values are increasingly threatened by stresses from both within and outside academia: squabbles over who owns academic work, increasingly stringent and overreaching intellectual property laws, and the replacement of open computing platforms by closed applications and walled-garden application markets. In this talk I'll describe some things we've done at MIT to support computational values, like open publication of all our course materials, our faculty policy on open publication of academic research, and our recently announced initiative for open online instruction based on non-proprietary software platforms. I'll discuss Creative Commons licensing and Free Software, and the importance of tinkerability for empowering citizens in an information society. And I'll describe App Inventor for Android, a new programming tool motivated by the vision that all of us us can experience mobile computing as creators using tools that we can control and reshape, rather than only as consumers of packaged applications.	From computational thinking to computational values	NA	2018
Joan Krone	NA	Session details: Teaching mathematical reasoning across the curriculum	NA	2018
Joan Krone:Doug Baldwin:Jeffrey C. Carver:Joseph E. Hollingsworth:Amruth Kumar:Murali Sitaraman	NA	Teaching mathematical reasoning across the curriculum	NA:NA:NA:NA:NA:NA	2018
Scott Portnoff	NA	Session details: Special session	NA	2018
Scott R. Portnoff	The presentation, an interim report, will focus on the design, implementation and rationale for a pre-APCS HS curriculum of Interdisciplinary Central-Problem-Based units that model real-world applications. In a typical multi-week unit, students use an existing complex software application to explore a specific problem, e.g. configuring SDSC Biology Workbench to build a phylogenetic (evolutionary) tree for various animal species after determining the degree of homology between protein or DNA sequences obtained from online genomic and protein databases. Students then build a small-scale version of the program - focusing on 1 or 2 algorithms - using Processing, Excel, BYOB or Alice. This approach allows students a glimpse into the inner workings of such programs, and affords them both context and practical potential for their projects. Back-stories from film and literature (e.g. Inherit the Wind) place problems within an historical and social context so that students will understand both their importance and the contribution CS can make to their solution. Unit topics have come from the fields of Astronomy (Galileo's discoveries), Bioinformatics (evolution), Molecular Modeling (DNA double helix), Political Science (women's suffrage/ Florida 2000 Presidential election), Environmental Science, Music (visualization software like Synthesia), and Holocaust Studies (IBM's active hardware and programming support for Hollerith machine technology used in the Nazi extermination programs).	Teaching HS computer science as if the rest of the world existed: rationale for a HS Pre-APCS curriculum of interdisciplinary central-problem-based units that model real-world applications	NA	2018
Guy-Alain Amoussou	NA	Session details: Special session	NA	2018
Guy-Alain Amoussou:Scott Grissom	What are the perceived challenges by the computing education and research communities? After small groups discuss this question, we will compare and contrast these perceived challenges to the current trend in proposals submitted and funded by the National Science Foundation's (NSF) Transforming Undergraduate Education in STEM (TUES) program. The intention is to create awareness for all involved and to broaden the range of proposals submitted to the NSF.	Funding the challenges in computing	NA:NA	2018
Lori Carter	NA	Session details: Paper: CS1: new ideas	NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	In this paper, we present the design and development of a new approach to teaching the college-level introductory computing course (CS1) using the context of art and creative coding. Over the course of a semester, students create a portfolio of aesthetic visual designs that employ basic computing structures typically taught in traditional CS1 courses using the Processing programming language. The goal of this approach is to bring the excitement, creativity, and innovation fostered by the context of creative coding. We also present results from a comparative study involving two offerings of the new course at two different institutions. Additionally, we compare our results with another successful approach that uses personal robots to teach CS1.	Creative coding and visual portfolios for CS1	NA:NA:NA	2018
Daniel Zingaro:Andrew Petersen:Michelle Craig	In this paper, we explore the use of sequences of small code writing questions ("concept questions") designed to incrementally evaluate single programming concepts. We report on a study of student performance on a CS1 final examination that included a traditional code-writing question and four intentionally corresponding concept questions. We find that the concept questions are significant predictors of performance on both the corresponding code-writing question and the final exam as a whole. We argue that concept questions provide more accurate formative feedback and simplify marking by reducing the number of variants that must be considered. An analysis of responses categorized by the students' previous programming experience suggests that inexperienced students have the most to gain from the use of concept questions.	Stepping up to integrative questions on CS1 exams	NA:NA:NA	2018
Jeffrey A. Stone	The use of weekly, reflective student blogs can be one method for collecting ongoing feedback about a CS1 course. Reflective blogs permit a continuous feedback loop that can be used for both formative and summative assessment of pedagogical innovations. This paper reports on a two-year qualitative study involving the use of reflective blogging in six sections of two CS1-style courses. Reflective blogs were used as a low stakes, non-intimidating vehicle whereby concerns, requests, and other course-related issues could be voiced by students. The resultant blog posts were used as an assessment and feedback mechanism for a parallel pedagogical transformation of the participating courses. This study demonstrates that reflective student blogs in CS1 can be a useful tool for instructional planning. However, faculty must be careful to avoid reactionary changes which move the course away from predefined learning outcomes.	Using reflective blogs for pedagogical feedback in CS1	NA	2018
Jody Paul	NA	Session details: Paper: team work	NA	2018
Vreda Pieterse:Lisa Thompson:Linda Marshall:Dina M. Venter	We describe a process that we applied for teaching teamwork in a Software Engineering module. Our objective with this process was to create opportunities for our students to experience some of the problems of working in a group before they formed teams in which they had to work for the rest of the year. The process entails expecting students to work on well defined assignments for short periods in teams where risk factors were induced. Through experiencing these short bursts of intense team tribulation students are prepared to handle difficult events and situations in their teams. We describe the design and implementation of this process. We report on changes in the levels of participation of the students during the process. We offer our explanation of possible factors that may have caused the observed variations.	Participation patterns in student teams	NA:NA:NA:NA	2018
Alan C. Jamieson:Lindsay H. Jamieson:Angela C. Johnson	In the 1960s and 70s, Uri Treisman developed a specific style of workshops to encourage the retention of underrepresented minority students in Calculus courses at the University of California, Berkley. Since that time, workshops based on the Treisman model have been successfully implemented across the United States and have resulted in more underrepresented minority students successfully completing Calculus. Some attempts have been made to translate the Treisman model to Introductory Computer Science, but all previous attempts have been focused on programming skills. However, one of the student assumptions that deter women and underrepresented minorities from attempting a major or minor in Computer Science is that a computer scientist is purely a solitary programmer [11]. In this paper, we discuss a specific two year pilot program of non-programming focused Treisman-style workshops in conjunction with a Introductory Computer Science course.	Application of non-programming focused treisman-style workshops in introductory computer science	NA:NA:NA	2018
Ben Coleman:Matthew Lang	Improving communication and collaborative skills of computer science students has been a priority in the community for some time. We present our philosophy, collaboration across the curriculum, which moves beyond existing individual courses or course units to teach collaboration skills in a pervasive manner. In our approach, concepts are introduced and skills are developed throughout the computer science curriculum---from CS1 to a capstone experience. Students are provided with opportunities to exercise skills in reflective environments that eventually mirror real-world experiences, and technical course content is not compromised. We argue for this system and provide details about how collaboration across the curriculum is accomplished at a small liberal arts college.	Collaboration across the curriculum: a disciplined approach todeveloping team skills	NA:NA	2018
Kinnis Gosha	NA	Session details: Paper: summer experiences	NA	2018
Krishnendu Roy	Google's App Inventor for Android (AIA) is the newest visual "blocks" programming language designed to introduce students to programming through creation of mobile applications (apps). AIA opens up the world of mobile apps to novice programmers. Success stories of using AIA to introduce college students to programming exist. We used AIA in computing summer camps for high school students that we offer at our university. This paper is an experience report about using AIA in our camps. We provide a detailed description of designing our camps with AIA including the process of selecting and setting-up an Android device and instructional materials that we developed and made available to everyone. We evaluated our camps through surveys to determine the effects on the students. We found that there was mostly a slight increase in the favorable disposition towards computing. We also share our successes with using AIA and what still needs improvement for wider use.	App inventor for android: report from a summer camp	NA	2018
Barbara Ericson:Tom McKlin	universities. But, it is not enough to offer computing summer camps and hope that students like them. The camps should be effective by some measure, such as broadening participation by underrepresented groups and/or increasing learning. Summer camps should also be financially sustainable, so that institutions can continue to offer them regularly. The summer camps at Georgia Tech have become effective and financially sustainable. This paper presents the rationale for our camps, the evaluation results that demonstrate positive attitude changes and increases in learning, and the business model that makes them financially sustainable. It also reports on the evaluation results from seven other colleges and universities in Georgia that offered computing summer camps during the summer of 2011 with assistance from Georgia Tech.	Effective and sustainable computing summer camps	NA:NA	2018
Timothy A. Davis	This paper describes the principles, implementation, and results of a weeklong summer science course for junior high and high school students interested in computer science. To motivate and foster interest and creativity in students, while providing adequate complexity to introduce programming concepts and techniques, we used programming projects in computer graphics as the main learning tool. Included in our discussion are experiences across three course offerings, as well as detailed course assignments.	A summer science experience with computer graphics for secondary students	NA	2018
Ariel Ortiz	NA	Session details: Paper: software engineering	NA	2018
Chase Felker:Radka Slamova:Janet Davis	We report our experiences using the Scrum agile software development method in an undergraduate user-centered web development project. Our chief contributions are to report on using Scrum in a summer research setting as distinct from academic-year coursework and to consider the integration of Scrum and user experience (UX) development methods in a learning environment. Our experience with combining Scrum and UX was positive: this methodology gave our project a clear structure, kept us motivated, and focused us on developing a usable final product. We discuss our adaptations of Scrum to UX development and to the summer research setting, along with challenges we faced and lessons learned, to inform students and faculty who wish to apply such methods in future projects.	Integrating UX with scrum in an undergraduate software development project	NA:NA:NA	2018
Peter J. Clarke:Jairo Pava:Debra Davis:Frank Hernandez:Tariq M. King	There continues to be a lack of adequate training for students in software testing techniques and tools at most academic institutions. Several educators and researchers have investigated innovative approaches that integrate testing into programming and software engineering (SE) courses with some success. The main problems are getting other educators to adopt their approaches and ensuring students continue to use the techniques they learned in previous courses. In this paper we present a study that evaluates a non-intrusive approach to integrating software testing techniques and tools in SE courses. The study uses a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on software testing concepts and tools. The results of the study show that (1) students who use WReSTT in the classroom can improve their understanding and use of testing techniques and tools, (2) students find WReSTT a useful learning resource, and (3) the collaborative learning environment motivates students to complete assignments.	Using WReSTT in SE courses: an empirical study	NA:NA:NA:NA:NA	2018
Shvetha Soundararajan:Amine Chigani:James D. Arthur	The use of agile principles and practices in software development is becoming a powerful force in today's workplace. In our quest to develop better products, therefore, it is imperative that we strive to learn and understand the application of agile methods, principles and techniques to the software development enterprise. Unfortunately, in many educational institutions, courses and projects that emphasize agile software development are minimal. At best, students have only limited exposure to the agile philosophy, principles and practices at the graduate and undergraduate levels of education. In an effort to address this concern, we offered an advanced graduate-level course entitled "Agile Software Engineering" in the Department of Computer Science at Virginia Tech. The primary objectives of the course were to introduce the values, principles and practices underlying the agile philosophy, and to do so in an atmosphere that encour-ages debate and critical thinking. The course was designed around three central components: (1) teaching the essentials of how one develops a product within an agile framework, (2) having invited talks by notable industry experts, and (3) having students present and discuss current agile research topics and issues. This paper describes our experiences during the offering of that course, and in particular, the unique perspectives of the class instructor, the teaching assistant and a student who was enrolled in the course.	Understanding the tenets of agile software engineering: lecturing, exploration and critical thinking	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Ralph Morelli:Dwight Barnette:Jeff Gray:Chinma Uche:Bill Cowles:Rebecca Dovi	NA	CS principles: piloting a national course	NA:NA:NA:NA:NA:NA:NA	2018
Pat Yongpradit	NA	Session details: Special session	NA	2018
Pat Yongpradit	Microsoft XNA Game Studio and C# provide the basis of an advanced high school or introductory post-secondary game development computer science course. Game development is serious computer science. The curriculum tools enable students to create games, simulations, and applications for the PC, Xbox 360, Windows Phone, and Kinect that expand students' skills in complex logic, object oriented programming (OOP), advanced algorithms, and data structures.	Fun, phone, and the future: Microsoft XNA game studio, Windows phone, and Kinect SDK	NA	2018
Michael Kölling	NA	Session details: Special Session	NA	2018
Michael Kölling:Ian Utting	Many initiatives in improving learning of programming are based on gut instinct or localised experience. Gathering data as a basis for interventions, especially on a large scale, is hard. The BlueJ environment is being instrumented to collect data useful to a variety of educational programming researchers. BlueJ is ideally placed to collect such data: Users number in the millions, situated all over the world. This volume and diversity is unique in the history of such investigations and presents a significant opportunity for researchers. The data will be open to interested research groups, which will enable a wide variety of investigations that were previously impractical. This session presents work to date and solicits input from researchers about the design of the data collection.	Building an open, large-scale research data repository of initial programming student behaviour	NA:NA	2018
Adrian German	NA	Session details: Paper: collaborative learning	NA	2018
Alex Radermacher:Gursimran Walia:Richard Rummelt	Pair Programming has been shown to be beneficial to student learning. Much research has been conducted to effectively create student pairs when using pair programming in introductory computer science courses. This paper reports results of research investigating the effectiveness of pairing students based on their mental model consistency. Prior research has found a strong correlation between mental model consistency and performance in introductory computer programming courses. Evaluating students' mental models helps to provide insights into how students approach problem solving and may indicate how to effectively pair students to improve their programming ability and learning. The results from an empirical study conducted to investigate these effects indicate that mental model consistency is a predictor of student success in an introductory programming course. Future goals of this research are to fully evaluate all possible pairing arrangements and to produce tests that can be used to evaluate mental model consistency for other computer science concepts.	Assigning student programming pairs based on their mental model consistency: an initial investigation	NA:NA:NA	2018
David Socha	This paper reports on two simple innovations that helped create a more authentic and engaging modeling experience in an undergraduate Analysis and Design course: (a) having each team of students act both as modelers for another team, and as customers for another team, and (b) providing each team with their own whiteboard. The results from their use throughout the course, and for a single use of the whiteboards in a Computing Technology and Public Policy course, were quite positive. They resulted in a qualitatively different experience noticeable both to the instructors and the students. While some students were initially reluctant to use the whiteboards, by the end of the course most students were enthusiastic about their use.	Group whiteboards and modeler/customer teams: getting closer to industrial-style collaboration in a classroom	NA	2018
Randy W. Connolly	A variety of researchers have advocated for service learning projects in post-secondary computing programs. While these projects can achieve important disciplinary outcomes for the students, what has been under examined is the benefit that these projects have for the service recipients and their community. This paper argues that since service learning projects are meant to benefit both student donors and community recipients, we must examine much more carefully how computing service projects interact with all the social actors affected by the projects. Taking such an approach will require recognizing that ICT by itself will not improve or increase democracy, equality, social inclusion, or any other social good. Analogous to the experience of foreign aid recipients in the developing world, some service learning projects may actually do more harm than good. The paper concludes by providing some sample computer learning projects that are oriented more strongly towards achieving true service for the recipients.	Is there service in computing service learning?	NA	2018
Colleen Lewis	NA	Session details: Paper: curriculum issues	NA	2018
Tim Bell:Peter Andreae:Anthony Robins	Computer science became available as a nationally assessed topic in NZ schools for the first time in 2011. We review the introduction of computer science as a formal topic, including the level of adoption, issues that have arisen in the process of introducing it, and work that has been undertaken to address those issues.	Computer science in NZ high schools: the first year of the new standards	NA:NA:NA	2018
Su White:Michalis Vafopoulos	This paper discusses the role and place of Web Science in the computing disciplines. It provides an account of work which has been established towards defining an initial curriculum for Web Science. It presents and analyses plans for future curriculum developments utilizing novel methods to support and elaborate curriculum definition and review. The findings of a desk survey of Web Science education are presented. The paper then recommends future activities which may help determine whether we should expand the notion of computer science.	Web science: expanding the notion of computer science	NA:NA	2018
John Barr:Ali Erkan	We designed a system where non-computational faculty members (along with undergraduates) enroll in an introductory, multidisciplinary, open source Geographic Information System (GIS) course to experience integrative learning as students. The faculty participants are subsequently required to integrate their newly acquired expertise with their own disciplinary teaching and research; the necessary time commitment is compensated by a three-credit teaching load reallocation. Our hypothesis is that increasing the general faculty's appreciation of computation (in the context of integrative learning) is an indirect yet effective and scalable way to reach a wider group of students to convey our fundamental disciplinary message: computing is more than programming and computing empowers people.	Educating the educator through computation: what GIS can do for computer science	NA:NA	2018
Robert England	NA	Session details: Paper: active learning I	NA	2018
Paul Carter	We describe an experience using online multimedia instruction and just-in-time teaching in an introductory programming course. Survey data has shown that students are strongly in favour of the approach. A series of screencasts was developed to replace the traditional lecture component of the course. Students were asked to review a small number of screencasts before each class and were assessed on their comprehension at the start of class using a series of "clicker" questions. A just-in-time mini-lecture was provided in response to the initial assessment, on an as-needed basis. The remaining class time was devoted to small-group exercises.	An experience report: on the use of multimedia pre-instruction and just-in-time teaching in a CS1 course	NA	2018
Alexandra Martinez	This paper describes our experience using the Just-in-Time Teaching (JiTT) technique in an undergraduate database course for computer science majors during two semesters. JiTT was implemented by giving the students reading assignments and asking them to complete web-based reading tests the day before class, so that the teacher could detect weaknesses in students' understanding of the material and adjust the lesson plan just in time for the next day class. Based on surveys as well as on exams and course grades, we found a significant improvement on the students' interest in the course and learning of the material.	Using JITT in a database course	NA	2018
Clifton Kussmaul	This paper describes an ongoing project to develop activities for computer science (CS) using process oriented guided inquiry learning (POGIL). First, it reviews relevant background on effective learning and POGIL, compares POGIL to other forms of active learning, and describes the potential of POGIL for CS. Second, it describes a sample POGIL activity, including the structure and contents, student and facilitator actions during the activity, and how activities are designed. Third, it summarizes current progress and plans for a NSF TUES project to development POGIL materials for CS. Finally, it discusses student feedback and future directions.	Process oriented guided inquiry learning (POGIL) for computer science	NA	2018
James Early	NA	Session details: Paper: communication skills	NA	2018
Katrina Falkner:Nickolas J.G. Falkner	Computer Science majors must be able to communicate effectively. Industry surveys identify the development of communication and critical thinking skills as key to the reform of the higher education sector. However, academics are challenged by time and discipline content pressures, as well as a lack of familiarity with the teaching and assessment of communication skills content. There is considerable existing work in the area of communication skills development, positioned both in terms of curriculum guidelines for effective communication skills development, and example communication skills activities. However, this research is deficient in detailed, contextualised methodologies and frameworks for the development of communication skills within the Computer Science curriculum. We present a new methodology, building upon well established theoretical frameworks, designed to assist academics in the development of communication skills activities integrated with discipline content across the curriculum. We illustrate this methodology in the design of a CS1/CS2 communication skills course.	Integrating communication skills into the computer science curriculum	NA:NA	2018
Laurie Murphy:Renée McCauley:Sue Fitzgerald	This paper reports on the replication of a study of novice programmers, looking for relationships between ability to 'explain in plain English' the meaning of a code segment and success in writing code later in the semester. This study explores the question in a different learning environment and qualitatively evaluates 'explain in plain English' responses to identify implications for teaching. Statistical results from this study are similar to those of the earlier work. Results highlight students' fragile knowledge, particularly for students excluded from the primary analyses by a set of screening questions, and suggest the need for assessment and instruction of basic concepts later into the term than instructors are likely to expect.	'Explain in plain English' questions: implications for teaching	NA:NA:NA	2018
Andrew Luxton-Reilly:Daniel Bertinshaw:Paul Denny:Beryl Plimmer:Robert Sheehan	Recent interest in student-centric pedagogies have resulted in the development of numerous tools that support student generated questions. Previous evaluations of such tools have reported strong correlations between student participation and exam performance, yet the level of student engagement with other learning activities in the course is a potential confounding factor. We show such correlations may be explained by other factors, and we undertake a deeper analysis that reveals evidence of the positive impact question-generation activities have on student performance.	The impact of question generation activities on performance	NA:NA:NA:NA:NA	2018
Suzanne Westbrook	NA	Session details: Special session	NA	2018
Victor Piotrowski:Suzanne Westbrook:Mimi McClure:Jeff Forbes:Harriet Taylor	This session highlights programs in the National Science Foundation's Division of Undergraduate Education, Office of Cyberinfrastructure and Directorate of Computer and Information Science and Engineering. The focus is on providing descriptions of several programs of interest to college faculty and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA	2018
Lester Wainwright	NA	Session details: Teaching outside the text	NA	2018
Renee Ciezki:Robert Glen Martin:Barbara Ericson:Lester Wainwright	We know that students bring diverse experiences and an assortment of learning styles into our classrooms. We greet them and hand out a syllabus listing the required textbook(s). One size does not fit all when it comes to textbooks. In this session, participants will discover teaching activities that can be used to supplement any computer science textbook. These activities include human modeling and role playing, interactive whiteboard activities, case studies, class projects, games, and more. By exploring "extra" activities not found in most textbooks, participants will learn how these hands-on, interesting and fun activities can help students understand the topics listed in the AP Computer Science A Course Description: Object-oriented Program Design, Program Implementation, Program Analysis, Standard Data Structures, Standard Algorithms, and Computing in Context. Student attention spans seem to be getting shorter. The panelists found themselves spending more and more time searching for and/or developing supplemental resources in efforts to reach and retain students. Members of the AP Computer Science-A Development Committee will share these resources and lead a discussion of proven strategies and lesson ideas for teaching outside the textbook.	Teaching outside the text	NA:NA:NA:NA	2018
John Impagliazzo	NA	Session details: Special session	NA	2018
John Impagliazzo:Susan Conry:Eric Durant:Andrew McGettrick:Mitch Thornton:Timothy Wilson	In early 2011, the ACM and the IEEE Computer Society (IEEE/CS) created the CE2004 Review Task Force (RTF) and charged it with the task of reviewing and determining the extent to which the document "Curriculum Guidelines for Undergraduate Degree Programs in Computer Engineering," produced 2004 December 12 and known as CE2004 [1] required revisions. The RTF submitted a report to both societies in July of 2011. The report summarized a survey of academic and industry constituents conducted by the RTF. It recommended keeping the structure and the vast majority of the content of the original CE2004 document. However, it also recommended that contemporary topics should be strengthened or added while de-emphasizing other topics that appeared to be waning from the curricular mainstream of computer engineering. Additionally, the RTF recommended that the two societies form a joint special-purpose committee to update and edit the earlier document and to seek input and review from the computer engineering industrial and academic communities through presentations and workshops co-located at major conferences. The presenters of this special session were members of the 2011 RTF and two presenters were members of the original curricular task force from 2004. The presentation will provide insights in the RTF findings and thoughts on how a future computer engineering report might evolve.	Computer engineering review task force report	NA:NA:NA:NA:NA:NA	2018
Jeff Gray	NA	Session details: Paper: projects	NA	2018
Lisa Bender:Gursimran Walia:Krishna Kambhampaty:Kendall E. Nygard:Travis E. Nygard	Team work is the norm in major development projects and industry is continually striving to improve team effectiveness. Researchers have established that teams with high levels of social sensitivity tend to perform well when completing a variety of specific collaborative tasks. Social sensitivity is the personal ability to perceive, understand, and respect the feelings and viewpoints of others, and it is reliably measurable. However, the tasks in recent research have been primarily short term, requiring only hours to finish, whereas major project teams work together for longer durations and on complex tasks. Our claim is that, social sensitivity can be a key component in predicting the performance of teams that carry out major projects. Our goal is to determine if previous research, which was not focused on students or professionals in scientific or technical fields, is germane for people in computing disciplines. This paper reports the results from an empirical study that investigates whether social sensitivity is correlated with the performance of student teams on large semester-long projects. The overall result supports our claim that the team social sensitivity is highly correlated with successful team performance. It suggests, therefore, that educators in computer-related disciplines, as well as computer professionals in the workforce, should take the concept of social sensitivity seriously as an aid or obstacle to productivity.	Social sensitivity and classroom team projects: an empirical investigation	NA:NA:NA:NA:NA	2018
Shimon Schocken	Engaging students in large system development projects is an important educational objective, since it exposes design and programming challenges that come to play only with scale. Alas, large scale system projects can be monstrously complex - to the extent of being infeasible in academic settings. We describe a set of principles and a framework that enable students to develop large-scale systems, e.g. a complete hardware platform or a compiler, in several semester weeks.	Taming complexity in large-scale system projects	NA	2018
Heidi J.C. Ellis:Michelle Purcell:Gregory W. Hislop	Free and Open Source Software (FOSS) offers a transparent development environment and community in which to involve students. Students can learn much about software development and professionalism by contributing to an on-going project. However, the number of FOSS projects is very large and there is a wide range of size, complexity, domains, and communities, making selection of an ideal project for students difficult. This paper addresses the need for guidance when selecting a FOSS project for student involvement by presenting an approach for FOSS project selection based on clearly identified criteria. The approach is based on several years of experience involving students in FOSS projects.	An approach for evaluating FOSS projects for student participation	NA:NA:NA	2018
Kelly Powers	NA	Session details: Paper: alice and scratch	NA	2018
Susan Rodger:Melissa Dalis:Chitra Gadwal:Jenna Hayes:Peggy Li:Francine Wolfe:Wenhui Zhang:Liz Liang	For four years we have been integrating computing into a variety of middle school disciplines via the Alice programing language. Early on we focused on creating curriculum materials for teachers to use in teaching the basic programming and animation concepts. This paper describes our efforts over the past two years in creating model projects for students to build in all disciplines, and our most recent focus on science and mathematics projects. For science we have introduced experiments in Alice and the tools needed for them. In mathematics we have created projects to increase their understanding of programming and to use the projects to increase their understanding of mathematics. We also discuss our efforts in workshops to teach K-12 teachers Alice and an analysis of the teachers' lesson plans and worlds developed in the most recent workshop.	Integrating computing into middle school disciplines through projects	NA:NA:NA:NA:NA:NA:NA:NA	2018
Linda Werner:Shannon Campe:Jill Denner	Programming environments that incorporate drag-and-drop methods and many pre-defined objects and operations are being widely used in K-12 settings. But can middle school students learn complex computer science concepts by using these programming environments when computer science is not the focus of the course? In this paper, we describe a semester-long game-programming course where 325 middle school students used Alice. We report on our analysis of 231 final games where we measured the frequency of successful execution of programming constructs. Our results show that many games exhibit successful uses of high level computer science concepts such as student-created abstractions, concurrent execution, and event handlers.We discuss the implications of these results for designing effective game programming courses for young students.	Children learning computer science concepts via Alice game-programming	NA:NA:NA	2018
Quinn Burke:Yasmin B. Kafai	This study investigates the potential to introduce basic programming concepts to middle school children within the context of a classroom writing-workshop. In this paper we describe how students drafted, revised, and published their own digital stories using the introductory programming language Scratch and in the process learned fundamental CS concepts as well as the wider connection between programming and writing as interrelated processes of composition.	The writers' workshop for youth programmers: digital storytelling with scratch in middle school classrooms	NA:NA	2018
Douglas Kranch	NA	Session details: Paper: active learning II	NA	2018
Matti Luukkainen:Arto Vihavainen:Thomas Vikberg	Data Structures (CS2) courses and course books do not usually put much emphasis in the process of how a data structure is engineered or invented. Instead, algorithms are readily given, and the main focus is in the mathematical complexity analysis of the algorithms. We present an alternative approach on presenting data structures using worked examples, i.e., by explicitly displaying the process that leads to the invention and creation of a data stucture and its algorithms. Our approach is heavily backed up by some of the best programming practices advocated by the Agile and Software Craftsmanship communities. It brings the often mathematically oriented CS2 course closer to modern software engineering and practical problem solving, without a need for compromise in proofs and analysis.	A software craftsman's approach to data structures	NA:NA:NA	2018
Jordi Petit:Omer Giménez:Salvador Roura	Jutge.org is an open access educational online programming judge where students can try to solve more than 800 problems using 22 programming languages. The verdict of their solutions is computed using exhaustive test sets run under time, memory and security restrictions. By contrast to many popular online judges, Jutge.org is designed for students and instructors: On one hand, the problem repository is mainly aimed to beginners, with a clear organization and gradding. On the other hand, the system is designed as a virtual learning environment where instructors can administer their own courses, manage their roster of students and tutors, add problems, attach documents, create lists of problems, assignments, contests and exams. This paper presents Jutge.org and offers some case studies of courses using it.	Jutge.org: an educational programming judge	NA:NA:NA	2018
Javier de San Pedro:Josep Carmona:Jordi Cortadella:Jordi Petit	This paper investigates the use of formal verification techniques to create online judges that can assist in teaching logic circuit design. Formal verification not only contributes to give an exact assessment about correctness, but also saves the instructor the tedious task of designing test cases. The paper explains how formal verification has been integrated in an online judge. It also describes the courseware created for a course on logic circuits and the successful experience of using it in a one-week summer course with students from secondary and high school.	Integrating formal verification in an online judge for e-Learning logic circuit design	NA:NA:NA:NA	2018
Derek Schuurman	NA	Session details: Paper: non-majors	NA	2018
Joel C. Adams:Randall J. Pruim	One of the challenges facing the U.S. technological workforce is that as fewer students take computing courses, fewer college graduates are being prepared for computing careers. Besides trying to attract more CS majors, another approach is to (i) design a computing curriculum that appeals to students and faculty from other (non-CS) disciplines, (ii) use special scholarships to attract students to that curriculum, and (iii) sponsor faculty development workshops for non-CS departments. In this paper, we detail this approach, using a new introductory course oriented to science majors, and scholarships funded by the National Science Foundation Scholarships for Science, Technology, Engineering, and Mathematics (NSF S-STEM) program to motivate non-CS majors to take CS courses. We also present several success stories that this approach has produced in its first two years.	Computing for STEM majors: enhancing non CS majors' computing skills	NA:NA	2018
Barbara M. Anthony	Operations research, while not traditionally taught at many small or liberal arts colleges, can be a significant asset to the offerings of a computer science department. Often seen as a discipline at the intersection of mathematics, computer science, business, and engineering, it has great interdisciplinary potential and practical appeal, allowing for recruitment of students who may not consider taking a CS0 or CS1 course. A special topics course in operations research was offered by the computer science department at Southwestern University as an upper-level elective, and it was also cross-listed as a business and mathematics elective. Not only did the course benefit computer science majors who appreciated the applications and different perspectives, but it provided a means for the department to serve a wider population, increased interdisciplinary education, and resulted in a filled-to-capacity upper-level course in computer science for the first time in recent memory. This course is now being considered as a permanent elective that will interest computer science majors and minors as well as draw in students from disciplines across campus. For departments with limited faculty resources for teaching non-major courses, offering an operations research course provides an alternative that simultaneously serves the department and the campus as a whole.	Operations research: broadening computer science in a liberal arts college	NA	2018
Jeff Cramer:Bill Toll	In the process of revising our general education course, which is required of a large fraction of students, we attempted to answer the question "What should a graduate of a liberal arts university understand about computational technology?" As computing technology has impacted and created drastic change in nearly all aspects of everyday life, university students may know more about narrow areas of technology but the true impact on their lives cannot be understood without an appreciation for the nature and limitations of the technology. This paper presents a set of assumptions about the impact of technology on individuals and society and describes elements of a computing context designed to enable students to critically evaluate the technology that has such an impact on their lives. Assessment of the approach indicates that students are more aware of the impact of technology and the importance of an understanding of the technology.	Beyond competency: a context-driven CSO course	NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Daniel Zingaro:Kevin Wayne:Dave O'Hallaron:Joshua T. Guerin:Stephen Davies:Zachary Kurmas:Keen Debby	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Amy Briggs	NA	Session details: Special session	NA	2018
Owen Astrachan:Amy Briggs:Jan Cuny:Lien Diaz:Chris Stephenson	The CS Principles Project is a collaborative effort to develop a new introductory course in computer science, accessible to all students. Computer Science educators at all levels have worked together on the development of the new curriculum under the direction of the College Board with support from the National Science Foundation. This special session provides an opportunity for the CS Principles project leaders to report on recent updates and new directions, and to engage in discussion on all aspects of the project with SIGCSE participants	Update on the CS principles project	NA:NA:NA:NA:NA	2018
Wendy DuBow	NA	Session details: Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA	2018
Wendy DuBow:Elizabeth Litzler:Maureen Biggers:Mike Erlinger	While many computing departments may be aware there are "promising" and "proven" practices for recruiting and retaining female students, there seems to be a drive to try new and novel approaches rather than use what is known, or strongly suspected, to be effective. Developing a diverse student body is a long-term multi-faceted process that includes active recruitment, inclusive pedagogy, meaningful curriculum and necessitates student, faculty and institutional support, as well as assessment of progress [1,2,3]. Given all the moving parts and intrinsic challenges of enacting change, departments could make it easier on themselves - and very likely achieve better results - if they intentionally and systematically used practices that have been shown to be effective. This panel will present the rationale for implementing evidence-based practices to increase female enrollments in undergraduate computing departments, and share evidence of successes. Wendy DuBow will examine the concept of evidence-based practices as well as describe briefly the research-based approaches taken by the National Center for Women & Information Technology (NCWIT) to identify the evidence-based practices an academic institution could use and distribute easy-to-use materials explaining such practices. Elizabeth Litzler will supplement this rationale by sharing compelling evaluation data that show that academic departments that implement a variety of evidence-based practices and actively seek to increase their female enrollments actually do see increases. Maureen Biggers will describe her department's recent efforts to increase female undergraduates at Indiana University, which enabled them to double the number of new female majors. Mike Erlinger will discuss Harvey Mudd's recent successes in attracting more Computer Science majors overall, including a large percentage of female students.	Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA:NA:NA:NA	2018
Tim Bell	NA	Session details: Paper: high school collaborations	NA	2018
Antti-Jussi Lakanen:Ville Isomöttönen:Vesa Lappalainen	In our faculty we have run week-long K-12 game programming courses now for three summers. In this paper we investigate what programming-related activities students do after they take a course, and what factors in the students' background relate to post-course programming. We also investigate a possible change in the students' interest towards higher education science studies. We find that most students continue programming after the course and that their interest towards science studies keeps increasing. In student background we observed some indicative trends, but did not find reliable explaining factors related to post-course programming or increased interest towards science studies.	Life two years after a game programming course: longitudinal viewpoints on K-12 outreach	NA:NA:NA	2018
Renate Thies:Jan Vahrenhold	To provide a unified view of any scientific field, outreach programs need to realistically portray the subject in question. Consequently, topics and methods actually taught in Computer Science courses should to be touched upon in Computer Science outreach programs or, conversely, elements from successful Computer Science outreach programs can be used to enrich established courses in Computer Science. We follow up on the latter aspect and investigate how outreach material might be used as a teaching resource in lower secondary Computer Science. In particular, we extract and classify learning objectives from the activities of the well-received Computer Science Unplugged program. Based upon this classification, we comment on where and to which extent these activities can be used to enrich teaching Computer Science in secondary education.	Reflections on outreach programs in CS classes: learning objectives for "unplugged" activities	NA:NA	2018
Ambareen Siraj:Martha J. Kosa:Summer-Mistine Olmstead	In this paper, we describe the Tennessee Technological University (TTU) Tapestry Workshop for high school (HS) teachers. The Tapestry Workshop initiative - a collaborative partnership between TTU, the University of Virginia (UVA) and HS teachers - shares strategies, practices, and innovative ideas for teaching Computer Science (CS) effectively. This three-day professional development workshop utilized informational, technical, networking, activity-, and discussion-oriented sessions geared towards attracting and engaging a diverse body of CS students. The workshop was a worthwhile professional development activity for both the organizers and attendees and contributed to the initiation of a local HS CS program.	Weaving a tapestry: creating a satellite workshop to support HS CS teachers in attracting and engaging students	NA:NA:NA	2018
Lijun Ni:Mark Guzdial	Quality computer science (CS) teachers are critical for secondary computing education. In addition to increasing the number of high school (HS) CS teachers, there is a great need for supporting those teachers to grow and stay as committed, effective teachers. Recent literature on teacher education suggests that teachers' sense of commitment and (other aspects of) teaching profession is tightly linked with their teacher identity. However, the current educational system in the U.S. does not provide typical contexts for teachers to build a sense of identity as CS teachers. This study is intended to gain an initial understanding of CS teachers' perceptions about their own professional identity and potential factors that might contribute to these perceptions. Our findings indicate that current HS teachers teaching CS courses do not necessarily identify themselves as CS teachers. They have different perceptions related to CS teaching. Four kinds of factors can contribute to these perceptions: teachers' educational background and certification, CS curriculum and department hierarchy, availability of CS teacher community, and teachers' perceptions about the field of CS.	Who AM I?: understanding high school computer science teachers' professional identity	NA:NA	2018
Jodi Tims	NA	Session details: Paper: parallelism and concurrency	NA	2018
Dan Grossman:Ruth E. Anderson	We report on our experience integrating a three-week introduction to multithreading in a required data structures course for second-year computer science majors. We emphasize a distinction between parallelism and concurrency that teaches students to use extra processors effectively and enforce mutual exclusion correctly. The material fits naturally in the data structures course by having the same mix of algorithms, programming, and asymptotic analysis as the conventional, single-threaded part of the course. Our department has used this unit for 1.5 years and will do so indefinitely. We report feedback from students, multiple instructors for the course, and students in a later course that uses threads. We developed a full set of course materials that have been adapted for use by instructors in various courses at five other institutions so far.	Introducing parallelism and concurrency in the data structures course	NA:NA	2018
Brian W. Rague	Laboratory work in the CS classroom is intended to solidify essential concepts and core design principles. Because of recent advances and the widespread adoption of multicore technologies, one area of investigation that has become increasingly important across all levels of CS instruction is parallel computing. This paper describes the initial version of the Parallel Analysis Tool (PAT), a pedagogical tool designed to assist undergraduate students in visualizing concurrency and effectively connecting parallel processing to applied coding strategies. The PAT is a complete Java development environment, with an emphasis on (1) helping students to identify appropriate code locations where parallelization can be applied and (2) allowing students to subsequently examine the practical performance tradeoffs of these parallelization decisions in a laboratory setting. The Parallel Quotient (PQ), a fundamental dimensionless metric generated by the PAT, supports the student's conceptual understanding and analysis of the relative benefits of employing various parallel programming strategies.	Exploring concurrency using the parallel analysis tool	NA	2018
Elizabeth Shoop:Richard Brown:Eric Biggers:Malcolm Kane:Devry Lin:Maura Warner	The reality of multicore machines as a standard and the prevalence of distributed cloud computing has signaled a need for parallel and distributed computing to become integrated into the computer science curriculum. At the same time, operating system virtualization has become a common technique with open standard tools available to any practitioners. Virtual machines (VMs) installed on available computer lab resources can be used to simulate high-performance cluster computing environments. This paper describes two such virtual clusters in use at small colleges, demonstrates their effectiveness for parallel computing education, and provides information about how to obtain the VMs for use in an educational lab setting. We have used these clusters to introduce parallelism into several courses in our undergraduate curriculum.	Virtual clusters for parallel and distributed education	NA:NA:NA:NA:NA:NA	2018
Chris Lupo:Zoe J. Wood:Christine Victorino	Massively parallel Graphics Processing Unit (GPU) hardware has become increasingly powerful, available and affordable. Software tools have also advanced to the point that programmers can write general purpose parallel programs that take advantage of the large number of compute cores available in the hardware. With literally hundreds of compute cores available on a single device, program performance can increase by orders of magnitude. We believe that introducing students to the concepts of parallel programming for massively parallel hardware is of increasing importance in an undergraduate computer science curriculum. Furthermore, we believe that students learn best when given projects that reflect real problems in computer science. This paper describes the experience of integrating two undergraduate computer science courses to enhance student learning in parallel computing concepts. In this cross teaching experience we structured the integration of the courses such that students studying parallel computing worked with students studying advanced rendering for approximately 30% of the quarter long courses. Working in teams on a joint project, both groups of students were able to see the application of parallelization to an existing software project with both the benefits and complications exposed early in the curriculum of both courses. Motivating projects and performance gains are discussed, as well as student survey data on the effectiveness of the learning outcomes. Both performance and survey data indicate a positive gain from the cross teaching experience.	Cross teaching parallelism and ray tracing: a project-based approach to teaching applied parallel computing	NA:NA:NA	2018
Cyndi Rader	NA	Session details: Paper: mobile computing	NA	2018
Paul E. Dickson	Mobile application development is a hot topic in computer science education, and debate rages over which platform to develop on and what software to use for development. Cabana is a web-based application designed to enable development on multiple mobile platforms and to make application development easier. It uses an approach to application programming based on a wiring diagram that is supplemented with the ability to program directly using JavaScript. It is an ideal choice for application development in introductory computer science courses and for upper-level courses where the focus is on application design and not application programming. This paper introduces Cabana and describes its use in two different computer science courses.	Cabana: a cross-platform mobile development system	NA	2018
Victor Paul Pauca:Richard T. Guy	Socially relevant computing has recently been proposed as a way to reinvigorate interest in computer science. By appealing to students' interest in helping others, socially relevant computing aims to give students life-changing experiential learning not typically achieved in the classroom, while providing software that benefits society at large. For the last two years, the Wake Forest University Computer Science Department has been using mobile device programming, agile methods, and real-world, socially relevant projects for teaching software engineering in a liberal arts Computer Science curricula. We report on the teaching methods, student experiences, and products delivered by this approach. In particular, one of these products, Verbal Victor, is now a commercial and social entrepreneurship success in the field of assistive technology for communication disabilities.	Mobile apps for the greater good: a socially relevant approach to software engineering	NA:NA	2018
Derek Riley	In this work an approach employing the Android mobile phone platform in an upper division computer science course to teach Java programming and other advanced computer science topics is presented. Mobile phones are growing influences in the computing market, but their strengths and popularity are rarely exploited in computer science classrooms. The aim of the course is to harness this enthusiasm to improve fluency in the Java language to afford an opportunity to learn how to work on large, complex projects and to enhance the students' preparedness for the job market. The ideas presented in this work could be adapted for improving learning in many courses across the computing curriculum.	Using mobile phone programming to teach Java and advanced programming to computer scientists	NA	2018
Anthony Allevato:Stephen H. Edwards	Making computer science assignments interesting and relevant is a constant challenge for instructors of introductory courses. Android has become popular in these courses to take advantage of the increasing popularity of smartphones and mobile "apps." This has been shown to increase student engagement but it is only the first step, and we must continue to provide support for teaching methodologies that we have used in the past, such as test-driven development and automated assessment. We have developed RoboLIFT, a library that makes unit testing of Android applications approachable for students. Furthermore, by supporting existing automated grading techniques, we are able to sustain large student enrollments, and we evaluate the effects that using Android has had on student performance.	RoboLIFT: engaging CS2 students with testable, automatically evaluated android applications	NA:NA	2018
Demian Lessa	NA	Session details: Paper: visualization	NA	2018
James D. Teresco	It is often a challenge to find interesting and appropriate data sets to use as examples to demonstrate graph data structures and algorithms. Goals for the data are often conflicting. The data should include examples small enough to work through in a class example by hand, but some large enough to demonstrate important behaviors of a structure or algorithm. Data should be freely available in a convenient format and should have some real-world relevance. Visualization of the data and results computed from it is helpful. This paper describes a collection of graph data sets generated from the Clinched Highway Mapping Project's highway data and some examples of their use in undergraduate courses on data structures and algorithms. The source data, the process used to convert the data into a more useful format, some examples of its use, and a visualization tool using the Google Maps API, are described.	Highway data and map visualizations for educational use	NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	This paper presents the initial stages of a teaching tool named iSketchmate, intended for instructor use during lecture. iSketchmate allows users to create and manipulate splay trees through an animated GUI. It improves upon existing tools by providing (1) the ability to begin with any user-defined tree, (2) a history mechanism so tree operations can be repeated or changed, and (3) finer-grained animation within each operation so instructors may give further descriptions at intermediate steps within any given operation. Experiments showed iSketchmate users could produce significantly more diagrams and these diagrams were significantly more accurate than those made with pencil and paper.	Experiments with algorithm visualization tool development	NA:NA:NA	2018
Sarah Buchanan:Brandon Ochs:Joseph J. LaViola Jr.	We present CSTutor, a sketch-based interface designed to help students understand data structures. It currently supports Linked Lists, Binary Search Trees, AVL Trees, and Heaps, and creates an environment in which a user's sketched diagram and code are combined seamlessly. In each of the data structure modes, the user can naturally sketch a data structure on the canvas just as they would on the white board. CSTutor analyzes the user's diagrams in real time, and automatically generates code in a separate code view to reflect any changes the user has made. Additionally, the code can also be edited and any new code changes animate the data structure drawn on the canvas. The connection between the data structure drawn on the canvas and the code implementation is intended to bridge the gap between the conceptual diagram of a data structure and the actual implementation. We also present the results of a perceived usefulness survey. The results of the study indicate that the majority of students would find CSTutor helpful for learning data structures.	CSTutor: a pen-based tutor for data structure visualization	NA:NA:NA	2018
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene	This paper describes a visualization tool ECvisual that helps students understand and instructors teach elliptic curve based ciphers. This tool permits the user to visualize elliptic curves over the real field and over a finite field of prime order, perform arithmetic operations, do encryption and decryption, and convert plaintext to a point on an elliptic curve. The demo mode of ECvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in finite field computations, encryption, decryption and plaintext conversion. The user may compute the output for each operation check each answer for correctness. This helps students understand the primitive operations and how they are used in an elliptic curve cipher. The opportunity for self-study provides an instructor greater flexibility in selecting a lecture pace for this detail-filled material. Classroom evaluation was positive and very encouraging.	ECvisual: a visualization tool for elliptic curve based ciphers	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Rediscovering the passion, beauty, joy, and awe: making computing fun again	NA	2018
Daniel D. Garcia:Barbara Ericson:Joanna Goode:Colleen Lewis	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following four SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: "What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. "What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. "How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over. Some point to "the Facebook Factor" as the source of inspiration for many young students, claiming this is a "Sputnik moment". Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). At recent sessions, we've shifted from that "breadth-first" model to a "depth-first" one. This year we have invited three educators who have worked tirelessly toward broadening participation of computing to underrepresented groups. The hope with this panel is to be able to explore best practices in outreach, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 5	NA:NA:NA:NA	2018
Helen Hu	NA	Session details: Special session	NA	2018
Helen H. Hu:Clifton Kussmaul	POGIL (Process Oriented Guided Inquiry Learning) is a type of learning based on the principle that students learn more when they construct their own understanding. Rather than teaching by telling, POGIL instructors provide activities that guide students to discover concepts on their own. Students work in groups, encouraging them to discuss their findings with their peers. Not only do students learn the material better, but the very process of discovery teaches them to be better problem solvers. This special session will provide SIGCSE attendees the opportunity to experience a POGIL activity for themselves. The presenters will share guided inquiry activities tested in our classrooms. We will discuss ways that POGIL may be used to transform computer science classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Promoting student-centered learning with POGIL	NA:NA	2018
Blair Taylor	NA	Session details: Special session	NA	2018
Blair Taylor:Matt Bishop:Diana Burley:Steve Cooper:Ron Dodge:Robert Seacord	Software is critical to life in the 21st century. It drives financial, medical, and government computer systems as well as systems that provide critical infrastructures in areas such as transportation, energy, networking, and telecommunications. As the number and severity of attacks that exploit software vulnerabilities increase, writing reliable, robust, and secure programs will substantially improve the ability of systems and infrastructure to resist such attacks. Education plays a critical role in addressing cybersecurity challenges of the future, such as designing curricula that integrate principles and practices of secure programming into educational programs. To help guide this process, the National Science Foundation Directorates of Computer and Information Science and Engineering (CISE) and Education and Human Resources (EHR) jointly sponsored the Summit on Education in Secure Software (SESS), held in Washington, DC in October, 2010. The goal of this session is to share some of the key findings and challenges identified by the summit and to actively engage the community in the discussions. Each of the speakers participated in the summit and brings a unique viewpoint to the session.	Teaching secure coding: report from summit on education in secure software	NA:NA:NA:NA:NA:NA	2018
Nanette Veilleux	NA	Session details: Paper: attracting majors	NA	2018
Mike Richards:Marian Petre:Arosha K. Bandara	In this paper, we describe a new undergraduate module for novice students conducted entirely through distance learning: My Digital Life (TU100). The module has been designed to lower the barriers to creating programs that interact with the world; TU100's materials have been designed to excite, encourage, reassure and support learners who explore the novel topic of ubiquitous computing through playful experimentation. It introduces the fundamentals of computing by giving students the capability for programming a device, the SenseBoard, which has built-in input/output and sensors. Programming is done in Sense, an extension of Scratch, which scaffolds programming and reduces the syntax burden. TU100 has taken inspiration from childhood learning and commercial product design to produce compelling, yet academically rigorous study materials.	Starting with Ubicomp: using the senseboard to introduce computing	NA:NA:NA	2018
Michael Haungs:Christopher Clark:John Clements:David Janzen	Many computer science programs suffer from low student retention rates. At Cal Poly San Luis Obispo, academic performance and retention rates among first-year computer science students are among the lowest on campus. In order to remedy this, we have developed a new CS0 course featuring different "tracks" that students can choose from (e.g. robotics, gaming, music, mobile apps). This allows students to learn the basics of programming, teamwork, and college-level study in a domain that is of personal interest. In addition, the course relies on classic Project-based Learning (PBL) approaches as well as a focus on both academic and non-academic factors shown to increase student retention. Initial assessment demonstrates positive results in the form of increased academic performance in post CS0 courses and student retention.	Improving first-year success and retention through interest-based CS0 courses	NA:NA:NA:NA	2018
Sara Sprenkle:Shannon Duvall	Low undergraduate enrollments in computer science will not meet the future demand of employers. Some reasons for the low enrollments are computer science's nerdy image, lack of understanding of the field, and low motivation for learning programming. We propose to change the image of computer science by exposing students to applications of computing and its impact on their lives through reading and discussing recent news articles in 15 minutes of class. We call this component of our courses the Broader Issues in computer science. In this paper, we present our motivation for the Broader Issues component, how we implemented the component in CS0 and CS1 courses, and our evaluation of the component, including student reactions to and impact of the component.	Reshaping the image of computer science in only fifteen minutes (of class) a week	NA:NA	2018
William Mongan	NA	Session details: Paper: OS and distributed computing	NA	2018
Ariel S. Rabkin:Charles Reiss:Randy Katz:David Patterson	We describe our experiences teaching MapReduce in a large undergraduate lecture course using public cloud services. Using the cloud, every student could carry out scalability benchmarking assignments on realistic hardware, which would have been impossible otherwise. Over two semesters, over 500 students took our course. We believe this is the first large-scale demonstration that it is feasible to use pay-as-you-go billing in the Cloud for a large undergraduate course. Modest instructor effort was sufficient to prevent students from overspending. Average per-pupil expenses in the Cloud were under $45, less than half our available grant funding. Students were excited by the assignment: 90% said they thought it should be retained in future course offerings.	Experiences teaching MapReduce in the cloud	NA:NA:NA:NA	2018
Barry L. Kurtz:James B. Fenwick, Jr.:Philip Meznar	Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." The programming microlab approach was developed for a distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid). Since that time we have developed logical microlabs where students solve conceptual problems that do not involve programming. These are integrated into a Microlab Learning Cycle. We want our microlabs to be usable with a wide variety of computing devices, including tablets. After experimenting with different development environments we have adopted the Google Web Toolkit (GWT). After presenting the current status of our activities, we discuss future directions for microlab development. This work is supported, in part, by three National Science Foundation grants.	Developing microlabs using Google web toolkit	NA:NA:NA	2018
Jeremy Andrus:Jason Nieh	The computing landscape is shifting towards mobile devices. To learn about operating systems, it is increasingly important for students to gain hands-on kernel programming experience in these environments, which are quite different from traditional desktops and servers. We present our work at Columbia University to teach operating systems using Android, an open, commercially supported software platform increasingly used on mobile and embedded devices. We introduce a series of five Android kernel programming projects suitable for a one semester introductory operating systems course. Each project teaches a core operating system concept infused with Android or mobile device specific context, such as Android specific process relationships, use of sensors, and design considerations for resource constrained mobile devices. We also introduce an Android virtual laboratory based on virtual appliances, distributed version control, and live demonstrations which gives students hands-on Android experience, with minimal computing infrastructure. We have used these Android kernel programming projects and the Android virtual lab to teach an introductory operating systems course. Although this was our first time teaching the course using Android, over 80% of students surveyed enjoyed using Android and the majority of students preferred Android to traditional desktop development.	Teaching operating systems using android	NA:NA	2018
Michael Hewner	NA	Session details: Paper: curricular innovations and research	NA	2018
Christo Dichev:Darina Dicheva	Open content and open access to resources are important factors in the innovation of Computer Science education. This paper presents a study aimed at gaining an understanding of the needs of Computer Science educators in terms of Open Educational Resources (OER): what kind of resources they need, when they need them, how they use them, and what are the barriers and the enablers for using OER The results of the study are compared and analyzed in the context of the popular OER sites. The work contributes to the research on OER utilization and discovery.	Open educational resources in computer science teaching	NA:NA	2018
Yolanda Jacobs Reimer:Katherine Cennamo:Sarah A. Douglas	The goal of our research and teaching collaboration has been to learn more about how key aspects of pedagogy commonly incorporated in architecture and industrial design classes might positively impact the teaching of user interface (UI) design within a standard computer science curriculum. Toward that end, we studied a number of studio design courses, developed a set of curriculum guidelines, and analyzed the effectiveness of these guidelines as implemented in a UI design course. We discovered three emergent themes: 1) students need early and constant reminders that design is an iterative process involving user feedback and testing; 2) instructor modeling is critical; and 3) technology needs to be carefully managed at critical junctures throughout the class.	Emergent themes in a UI design hybrid-studio course	NA:NA:NA	2018
Dimitrios Charalampidis:James Haralambides	Traditional curricular structures can be fragmented in the sense that course inter-relationships or links between theories, methodologies, and practices, are not immediately recognized by the students. The completion of the course puzzle and the integration of course knowledge usually become evident only after graduation. In this paper, we describe a course/lab implementation that has offered students a unique opportunity to experience the full spectrum of course elements, namely, fundamentals of theory, algorithmic design, hardware design and simulation, and implementation and testing on programmable logic devices all within a single framework. The course/lab design has been a collaborative effort between the Dept. of Electrical Engr. (EE) at the University of New Orleans (UNO) and the Dept. of Math and Computer Science (CS) at Barry University (BU). This has helped ensure that the course/ lab offerings can be implemented successfully in diverse environments.	A multilevel, multidimensional undergraduate course and lab experience on embedded multimedia systems	NA:NA	2018
Yana Kortsarts	NA	Session details: Paper: CS education research	NA	2018
Elizabeth Ann Patitsas:Steven Andrew Wolfman	We report on best practices we have established to teach first-year computer science students in closed laboratories, founded on over three years of action research in a large introductory discrete mathematics and digital logic course. Our practices have resulted in statistically significant improvements in student and teaching assistant perception of the labs. Specifically, we discuss our practices of streamlining labs to reduce load on students that is extraneous to the lab's learning goals; establishing a positive first impression for students and TAs in the early weeks of the term; and effectively managing the teaching staff, including weekly preparation meetings for TAs using and a gradual, iterative curriculum development cycle that engages all stakeholders in the course.	Effective closed labs in early CS courses: lessons from eight terms of action research	NA:NA	2018
Joel C. Adams:Andrew R. Webster	Drag-and-drop learning environments like Alice (alice.org) and Scratch (scratch.mit.edu) eliminate syntax errors, making them attractive as ways to introduce programming concepts to students. Alice is closely associated with storytelling, Scratch was designed for creating music videos, and both can be used to create games. Having had students create each kind of project, we began to wonder: Do students learn different things creating games compared to music videos or stories? What programming constructs do students actually use (and hence learn well enough to be able to apply)? To answer these questions, we conducted a quantitative analysis of a collection of over 300 different student projects created using these tools. In examining different kinds of projects, we found significant differences in how frequently the students creating those projects used variables, if statements, loops, and dialog constructs.	What do students learn about programming from game, music video, and storytelling projects?	NA:NA	2018
Adam Anthony:Mitch Raney	Time to completion is a major factor in determining the total cost of a college degree. In an effort to reduce the number of students taking more than four years to complete a degree, we propose the use of Bayesian networks to predict student grades, given past performance in prerequisite courses. This is an intuitive approach because the necessary structure of any Bayesian network must be a directed acyclic graph, which is also the case for prerequisite graphs. We demonstrate that building a Bayesian network directly from the prerequisite graph results in effective predictions, and demonstrate a few applications of the resulting network in areas of identifying struggling students and deciding upon which courses a department should allocate tutoring resources. We find that many of our observations agree with what has long been considered conventional wisdom in computer science education.	Bayesian network analysis of computer science grade distributions	NA:NA	2018
Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Fernanda Viégas:Martin Wattenberg	Data visualization has historically been accessible only to the elite in academia, business, and government. It was "serious" technology, created by experts for experts. In recent years, however, web-based visualizations--ranging from political art projects to news stories--have reached audiences of millions. What will this new era of data transparency look like--and what are the implications for technologists who work with data? To help answer this question, we report on recent research into public data analysis and visualization. Some of our results come from Many Eyes, a "living laboratory" web site where people may upload their own data, create interactive visualizations, and carry on conversations. We'll also show how the art world has embraced visualization. We'll discuss the future of visual literacy and what it means for a world where visualizations are a part of political discussions, citizen activism, religious discussions, game playing, and educational exchanges.	Through the looking glass: talking about the world with visualization	NA:NA	2018
John Barr:Ananda Gunawardena	This workshop introduces an innovative social collaboration tool called Classroom Salon (CLS). Developed at Carnegie Mellon University, CLS is a combination of electronic books, social networks, and analytic tools. With CLS, instructors can upload documents, create social groups, and monitor student activities. Students can annotate documents, answer questions, and communicate in a social networks context. Students learn through participation in social networks while instructors use the tools built into CLS to easily and effectively analyze their participation. The workshop covers extant social networks, introduces CLS web-based software (nothing to install) and demonstrates the use of CLS to help students master critical skills such as code review, debugging, and reading documentation. Participants will create Salons, learn how to use them in their courses, and learn how to use the built-in tools to analyze student activities. A laptop with wifi is mandatory.	Using social networking to improve student learning through classroom salon (abstract only)	NA:NA	2018
Aman Yadav:John Tim Korb	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of educational research; (2) learn about educational research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests.	Challenges and opportunities in conducting educational research in the computer science classroom: how to collect empirical evidence to assess whether students really learned (abstract only)	NA:NA	2018
Joseph E. Hummel	As hardware designers turn to multi-core CPUs and GPUs, software developers must embrace parallel programming to increase performance. No single approach has yet established itself as the "right way" to develop parallel software. However, C++ has long been used for performance-oriented work, and it's a safe bet that any viable approach involves C++. This position has been strengthened by ratification of the new C++0x standard, officially referred to as "C++11". This workshop will introduce the new features of C++11 related to parallel programming, including type inference, lambda expressions, closures, multithreading support, and thread-local storage. The workshop will close with brief discussion of other technologies, including Intel TBB, ArBB, Cilk Plus, and Microsoft PPL, AAL, AMP. This is a laptop optional workshop.	C++11 in parallel (abstract only)	NA	2018
Stephen H. Edwards:Manuel A. Perez-Quinones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()). Laptop recommended.	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2018
Tom Reichlmayr	Over the past ten years Agile software development practices have grown in acceptance and have gained a solid foothold in commercial software development. Our students are entering the workforce with an increasing percentage of companies that are using Agile processes and practices in the development of their products and services. The most widely used Agile project management framework is Scrum. Scrum has a well defined approach for organizing and controlling a software development project. It is almost always implemented in combination with Agile software development practices, but is flexible enough to even be used for managing non-software projects. Selecting Scrum as the framework for student team projects has the advantage of introducing software process at a level of ceremony that both captures foundational software engineering practices and is manageable within the constraints of a class or capstone project. This workshop will introduce participants to the components of the Scrum framework with activities designed to demonstrate the flexibility of Scrum to support a diverse set of course learning outcomes at all levels of the curriculum. Laptop optional	Student scrums (abstract only)	NA	2018
Sue C. Fitzgerald:Guy-Alain Amoussou	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some expert opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don't's will be provided. The intended audience is faculty members at two-year and four year colleges and universities who wish to better understand the NSF review process and/or those who are seeking NSF funding in support of undergraduate education. Participants will include people with little or no proposal reviewing experience, novice proposal writers, and those with more experience who seek to improve their proposal writing and/or reviewing skills. Laptop optional.	Reviewing NSF proposals (abstract only): learn about effective proposal writing via the review process	NA:NA	2018
Michael Rogers:Mark Goadrich	This workshop is designed for faculty, considering teaching a course in mobile app development, who are unsure as to whether they should use iOS, Android, or both. To help them make an educated decision, in this workshop participants will build one app, to implement the game Pig, in both platforms. By so doing, they will be able to make a head-to-head comparison of the respective development environments, languages, and frameworks, guided by experienced instructors. Participants will need to bring (or share) a recent-vintage MacBook Pro / MacBook Air, with Xcode, Eclipse, and appropriate SDKs, installed prior to the workshop. Details, including installation instructions, may be found at androidios.goadrich.com. Laptop Required.	A hands-on comparison of iOS vs. android (abstract only)	NA:NA	2018
Joseph Mertz:Scott McElfresh:Steven Andrianoff:Jennifer Dempsey	Service learning is a great idea, but can be fraught with problems. We have taken an alternative to the project-course approach. Instead of team-based system-development, we use a student-consultant model. Students individually consult with a nonprofit. Each student leads a small technology project that brings about sustainable change in an organization, while developing analysis, planning, and communication skills. One instructor can manage 30 clients a semester, and we have had nearly 400 to date. Our clients are happy and recruit others. In this session we will share our tricks and help attendees adapt them to their situations: managing a large number of partnerships, helping students develop leadership and communication skills, and assessing their performance. A student presenter will describe her consulting experience.	Killing 3 birds with one course: service learning, professional writing, and project management (abstract only)	NA:NA:NA:NA	2018
Tim Bell:Daniela Marghitu:Lynn Lambert	You've been asked to talk to an elementary or high school class about Computer Science, but how can you ensure that the talk is engaging? Or perhaps you're trying to introduce a concept from Computer Science to a school group, but you want a fun way to get the class engaged. This workshop is a hands-on introduction to Computer Science Unplugged (www.csunplugged.org), a widely used set of kinesthetic, fun activities that cover many core areas of computer science without using high technology. We will explore how to use the activities in a variety of situations, including combining them with robotics activities, and explore some novel applications. Attendees will receive a CD with a copy of a handbook for teachers and a collection of videos demonstrating the activities.	Computer science unplugged, robotics, and outreach activities (abstract only)	NA:NA:NA	2018
William M. Jones:D. Brian Larkins	One of the challenges in modern curriculum design is balancing between breadth and depth of topics while simultaneously reinforcing the interconnections among topics in the field. To address these challenges, faculty are often forced to approximate real-world systems, sometimes at the expense of any hands-on experience. We have integrated field-programming gate array (FPGA) systems first used in our hardware-based courses into several higher-level systems and applications courses. This allows us to leverage student familiarity with a hands-on, flexible hardware platform and also strengthen the relationships between different subfields within computer science. In this workshop, we present participants with guided hands-on activities for making use of FPGAs in common computer science courses such as digital logic design, computer organization and programming, and compiler construction. Laptop required.	Introduction to using FPGAs in the computer science curriculum (abstract only)	NA:NA	2018
Janet E. Burge:Paul V. Anderson:Gerald C. Gannod:Michael Carter:Deanna Dannels:Margaret Heil:Mladen Vouk	To be successful, CS and SE graduates need strong communication skills (writing, speaking, and teaming), particularly within their discipline. Students exercise these skills during their classes but are not always given explicit domain-specific instruction on these skills, instead relying on instruction provided outside the program. CS and SE faculty are not always comfortable in evaluating these aspects of their assignments and are often unhappy with the results. In this workshop we will lead sessions on teaching writing, speaking, and teaming; situating assignments in workplace-scenarios (to motivate students); and writing communication rubrics that convey faculty expectations to students and support evaluation of student work. For more information, see www.muohio.edu/sigcse_workshop11. A laptop is recommended but not mandatory for this workshop.	Helping students become better communicators (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Michael Ferguson:Julian Mason:Sharon Gower Small:Zachary Dodds	The Microsoft Kinect and Willow Garage's Robot Operating System (ROS) are changing the way robots are developed. Together, these tools can enable today's CS educators to provide richer and more research-representative experiences with robots and perception. This hands-on workshop will introduce ROS and showcase two pilot courses taught using ROS and the Kinect. Four 20-minute talks will intersperse with participants' hands-on development of Python programs on low-cost Kinect-equipped robots and the ARDrone quadcopter. This workshop is intended for all college-level CS educators interested in robotics or embodied AI. First-time ROS/Kinect users are particularly welcome! Laptops and robots will be provided. See http://www.ros.org/wiki/Courses/sigcse2012. Laptops optional.	ROS for educators: teaching with the robot operating system and Microsoft Kinect (abstract only)	NA:NA:NA:NA	2018
Zachary Kurmas:James Vanderhyde	Participants will have fun learning and playing relatively unknown board games that are especially suitable for programming projects. We will present games where (1) all players can view the same screen, (2) the board is reasonably simple to program, and (3) there are several elements of the game that relate strongly to a common CS 1, CS 2, or discrete math topic. After we explain the rules and highlight the CS-related elements of the games, participants will have the opportunity to play the games, ask questions, and suggest rule variations that will improve the resulting programming project. See http://www.cis.gvsu.edu/~kurmasz/GamesWorkshop/ for more details and a list of games that may be presented. Laptop Optional.	Board game project ideas for CS 1 and CS 2 (abstract only)	NA:NA	2018
David Hyland-Wood:Marsha Zaidman	The Web has created a global information space of linked documents. The Semantic Web creates an information space of linked data from multiple sources. Information can be mined from the interlinking of available datasets by a distributed query language known as SPARQL, the SQL equivalent for the Semantic Web. Participants will understand and appreciate the role of linked data on the Semantic Web; be able to model, represent, and interpret simple linked data applications; complete exercises that create simple Linked Data models; appreciate the benefits of Linked Data over relational database modeling; be aware of successful commercial applications of linked Data; be directed to resources that facilitate incorporation of this material into their courses. WiFi/Laptop Required.	A taste of linked data and the semantic web (abstract only)	NA:NA	2018
Michael Kölling:Neil Brown	The Microsoft Kinect is a sensor module that allows accurate tracking of humans moving in front of it. Greenfoot is an introductory Java programming environment that makes it easy to create animated graphical projects. By combining Greenfoot and the Kinect students can write programs where the user's body is used for input. Users interact with games by waving their hands, jumping, running, dancing, .... These kinds of programs are incredibly good fun and engage target groups who would not normally be interested in programming. The workshop is aimed at teachers of introductory programming courses (high school/university) who have some programming experience and want to incorporate new kinds of projects into their teaching. Laptop recommended but not required. Kinect hardware will be provided.	Teaching with greenfoot and the Kinect: a novel way to engage beginners (abstract only)	NA:NA	2018
David G. Kay	Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and "re-using" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required.	Intellectual property law basics for computer science instructors (abstract only)	NA	2018
Nikolai Tillmann:Jonathan de Halleux:Tao Xie:Judith Bishop	Pex4Fun (pexforfun.com) is a web-based serious gaming environment for teaching computing at many levels, from high school all the way through graduate courses. Unique to the Pex4Fun experience is a cloud-based program evaluation engine based on dynamic symbolic execution and SMT-solving, which provides customized feedback to the student and automated grading for the teacher. Thus, Pex4Fun connects teachers, curriculum authors, and students in a social experience, tracking and streaming progress updates in real time. In particular, Pex4Fun finds interesting and unexpected input values that help students understand what their code is actually doing. The real fun starts with coding duels where students write code to implement a teacher's specification. Pex4Fun finds any discrepancies in behavior between the student's code and the specification. Then based on the reported discrepancies, the student improves his or her code towards the specification. Pex4Fun can be used to develop interesting, engaging, and demanding class materials on mathematics, algorithms, programming languages, or problem solving in general. A teacher can use an integrated wiki to author these class materials for students to work through. This workshop involves creating and teaching course materials at Pex4Fun. Participants should bring a laptop computer. The intended audience includes all levels of CS educators who are interested in integrating educational technology in their teaching environments.	Teaching and learning computing via social gaming with Pex4Fun (abstract only)	NA:NA:NA:NA	2018
Mel Chua:Sebastian Dziallas:Heidi J.C. Ellis:Gregory W. Hislop:Karl R. Wurst	Participating in free and open source (FOSS) software communities provides students with authentic learning while supplying instructors with a wide variety of educational opportunities including coding, testing, documentation, professionalism and more. However, instructors may be unfamiliar with how FOSS communities work and therefore may be reluctant to involve students in such communities. This workshop is a subset of material used in Red Hat's Professors' Open Source Summer Experience (http://communityleadershipteam.org/posse) workshop, now in its third year of successfully providing a ramp to FOSS projects for instructors. These instructors have demonstrated success in involving their students in FOSS communities where students have contributed code, interface design, and more. Intended audience: Computing educators at the college or high school level interested in involving students in open source software projects in any capacity (testing, coding, documentation, design, project management, observational shadowing of a large-scale project, etc). The workshop may also be of interest to pre-high school computing educators and members of the open source community. No experience with open source communities or contribution is necessary.	Welcome to Makerland: a first cultural immersion into open source communities (abstract only)	NA:NA:NA:NA:NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	This workshop showcases a new approach to teaching CS1 using computational art as a context. Participants will be introduced to the Processing programming language and environment, designed for the construction of 2D and 3D visual forms. Its IDE is lightweight, but well-suited for the rapid prototyping needed for dynamic visual work. We hope to bring the excitement, creativity, and innovation fostered by Processing into the computer science education community. Instructors of all experience levels are welcome. Hands-on portion of the workshop will enable participants to explore Processing and create visual effects on the fly. Course materials and handouts detailing the software, curriculum, and teaching resources will be given out. All participants will need to bring their own laptops.	Computational art and creative coding: teaching CS1 with processing (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at the University of California, Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey-Lee:John Glick:Leo Porter:Beth Simon	We introduce participants to Peer Instruction (PI): an active learning technique applicable to the teaching of many subjects, including CS. In PI, Students work together to exchange perspectives and answer challenging conceptual questions, and are supported by short teaching segments. We will introduce and motivate PI, demonstrate its use in combination with a clicker system, and show that PI is much more than the use of clickers. Participants will work in groups to develop new PI questions addressing challenges to their students' learning, and discuss numerous pedagogical benefits conferred through PI. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer instruction in the CS classroom: a hands-on introduction (abstract only)	NA:NA:NA:NA:NA	2018
Martin L. Barrett:Steve Chenoweth:Larry Jones:Amine Chigani:Ayse Bener:Mei-Huei Tang	This workshop introduces software architecture concepts and their incorporation into computer science and software engineering curricula. Participants will learn techniques used in industry to specify quality attributes critical to architecture and use those attributes to drive the system structure using common architectural styles. Exercises will demonstrate these techniques and explore pedagogical uses of the techniques in CS and SE classes. Sample computer science curricula with courses that integrate workshop material will be presented. Presenters will lead a brainstorming session to help participants develop practical methods for using the material in their courses. Participants will become part of a community of educators sharing educational resources in software architecture.	Incorporating software architecture in the computer science curriculum (abstract only)	NA:NA:NA:NA:NA:NA	2018
Robert A. Chesebrough:Johnnie W. Baker	This workshop is inspired by Dan Grossman's SIGCSE 2011 workshop on Data Abstractions. We also review C/C++ conversions of the original Java-based materials and will also include material from the Parallel Algorithms course at Kent State. The workshop will appeal to data-structure and algorithms course instructors. Workshop topics will include divide and conquer approaches, work sharing concepts, and a scoped locking scheme in OpenMP for C++ classes. This material is driven via core data-structure examples (queues, sorting, reductions, etc.) and using a Fork/Join Framework found in OpenMP and Intel® Cilk Plus and Intel® Threading Building Blocks. Participants will write parallel programs and test them on the Intel® Many-core Testing Lab. Laptop Required. Laptop is required.	Parallelism and concurrency for data-structures & algorithms courses (abstract only)	NA:NA	2018
Monica Anderson:David Touretzky:Chutima Boonthum-Denecke	In this half-day tutorial, we will introduce the ARTSI "Robotics Roadshow-in-a-Box (RRIB)", a single point resource for those getting started in robotics outreach. The RRIB is a kit which contains robots, software and prepared materials for providing robotics workshops for middle and high school students that focuses on showing computer scientists as problem solvers and not just programmers through activities with a larger context. The RRIB fills a need for materials that are accessible to those who may have limited knowledge of robotics or limited experience in middle school outreach, whether that is undergraduate students or faculty researchers who might have limited outreach experience or preparation time. Laptop Required.	ARTSI robotics roadshow-in-a-box: turnkey solution for providing robotics workshops to middle and high school students (abstract only)	NA:NA:NA	2018
Kathi Fisler:Stephen Bloch	We present the Program by Design introductory CS curriculum through the lenses of graphics, animations, algebra, and data structures. Animations programming is popular for CS1, but many such curricula lack clean paths into CS2. Program by Design is different. Using and reinforcing concepts from algebra, students learn to write animations (including standard topics such as model/view separation and event-handling), then move seamlessly into working with structured data, lists, trees, and objects. The curriculum emphasizes design, testing, and writing maintainable programs, without losing the engagement of animations. The workshop uses lectures and hands-on exercises to provide high- school and college teachers an overview of the approach. See www.programbydesign.org. Laptop Optional.	Program by design: from animations to data structures (abstract only)	NA:NA	2018
Michelle Friend:Jeff Gray	Mobile phone programming can provide teens an authentic and engaging hook into computer science. With App Inventor, developed by Google and moved to MIT, programming Android apps is as easy as clicking blocks together. App Inventor has been used successfully in after school programs, roadshows, summer camps, teacher workshops, and computer science classrooms from middle school through college. Participants will get an overview of App Inventor including project ideas and sample student code, hear outreach planning suggestions, write programs, develop outreach plans, and see how the Java Bridge helps transition from App Inventor to Java. Please bring a laptop with App Inventor. Even the most time-stretched professor or teacher can encourage students in computer science with App Inventor.	CS outreach with app inventor (abstract only)	NA:NA	2018
Jason O. Hallstrom:Joe Hollingsworth:Joan Krone:Murali Sitaraman	Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can we teach them to apply these principles using modern software tools? Can this be accomplished without displacing existing content? In each case, the answer is a resounding yes - but it takes the right set of pedagogical principles, teaching tools, and classroom exercises. This hands-on laboratory will introduce a set of principles, tools, and exercises that have proven to work. By adopting one content module at a time, educators will better prepare students to reason rigorously about the software they develop and maintain. The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught - from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials. Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. A laptop is required to participate.	Making mathematical reasoning fun: tool-assisted, collaborative techniques (abstract only)	NA:NA:NA:NA	2018
Brian Harvey:Daniel Garcia:Josh Paley:Luke Segars	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses. It presents the programming environment used in two of the five initial AP CS Principles pilot courses. Snap! (Build Your Own Blocks) is a free, graphical, drag-and-drop extension to the Scratch programming language. Scratch, designed for 8-14 year olds, models programs as "scripts" without names, arguments, or return values. Snap! supports older learners (14-20) by adding named procedures (thus recursion), procedures as data (thus higher order functions) structured lists, and sprites as first class objects with inheritance. Participants will learn Snap! through discussion, programming exercises, and exploration. See http://snap.berkeley.edu for details. Laptop required.	Snap!: (build your own blocks) (abstract only)	NA:NA:NA:NA	2018
Marge M. Coahran:Janet Davis	This workshop will introduce a set of hands-on laboratory activities appropriate for a first Computer Organization course. Participants will work with real equipment: first implementing elementary digital circuits with TTL logic chips, and then programming AVR microcontrollers in assembly to drive fun accessories such as LEDs and speakers. Participants will not take equipment home afterwards, but will receive parts lists and vendor information. The workshop is intended for educators with little electronics background who are interested in incorporating electronics laboratories into their courses. Laptops (Linux, Mac, or Windows) will provide the programming environment for the AVRs. Free software will be available before the workshop. Participants will work in pairs. Laptop recommended.	Circuits and microcontrollers in computer organization laboratories (abstract only)	NA:NA	2018
Ariel Ortiz	Many instructors have already discovered the joy of teaching programming using the Python programming language. Now it's time to take Python to the next level. This workshop will introduce Django, an open source Python web framework that saves you time and makes web development fun. It's aimed at Computer Science instructors who want to teach how to build elegant web applications with minimal fuss. Django follows the Model-View-Controller (MVC) architectural pattern. Its goal is to ease the creation of complex, database-driven websites. Django emphasizes reusability and "pluggability" of components, rapid development, and the principle of DRY (Don't Repeat Yourself). Python is used throughout, even for settings, files, and data models. Topics that will be covered during the workshop include: setup and configuration, template language, and database integration through object-relational mapping. Participants should have some familiarity with Python, HTML and SQL. Laptop Required.	Web development with python and django (abstract only)	NA	2018
Richard Ladner:Karen Alkoby:Jeff Bigham:Stephanie Ludi:Daniela Marghitu:Andreas Stefik	Many wonderful enrichment programs have been created to introduce young people to computing, but with little attention to making them accessible to students with disabilities. In this workshop participants will learn from practitioners who have introduced computing and programming to young people with disabilities. They will also learn first-hand from students with disabilities about their needs in learning programming. There will be breakout sessions for participants to apply what they have learned to improve existing enrichment programs such as Alice, Arduino, Scratch, Kodu, App Inventor, Greenfoot, Lego Mindstorms, Processing, and Computer Science Unplugged.	Improving the accessibility of computing enrichment programs (abstract only)	NA:NA:NA:NA:NA:NA	2018
Samuel A. Rebelsky	Computer science teachers strive for new examples and problems to interest millenials. The Media Computation approach has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this workshop, we show how to go a step further and have write scripts and plug-ins in Python for open-source graphics programs such as the GNU Image Manipulation Program and Inkscape, open source alternatives to Photoshop and Illustrator. With this approach, students not only make images, they also write filters and features that they can share with others, even with non-programmers. For example, students have written filters that "fractalize" vector graphics or that turn images into something that looks like stained glass. The ability to make programs that others will use is particularly motivational. We will explore ways in which students can interact with both Inkscape and GIMP, from working with interactive programming consoles to writing plug-ins that can easily be shared with others. We will also consider the ways in which different models of image making can be used to motivate the major programming paradigms. The approach has been used with Python, Scheme, and C and for everything from a one-week module to a full course.	Enhancing student interest by extending graphics applications (abstract only)	NA	2018
Nikolai Tillmann:MichaB Moskal:Jonathan de Halleux:Manuel Fähndrich:Tao Xie	We are experiencing a technology shift: Powerful and easy-to-use touchscreen-based mobile devices like smartphones and tablets are becoming more prevalent than traditional PCs and laptops. We propose that computer programming, and thus teaching of programming, can and should be done directly on the mobile devices themselves, without the need for a separate PC or laptop to write code. In this workshop, participants will learn about developing software directly on smartphones without a PC using TouchDevelop, a novel application creation environment on Windows Phone 7 from Microsoft Research (http://touchdevelop.com). Its typed, structured programming language is built around the idea of only using a touchscreen as the input device to author code. A semi-structured code editor makes it easy to navigate between different syntax elements. By inferring types and mining previously written programs, the editor provides highly predictive auto-completion suggestions to the user. The language provides built-in primitives that make it easy to access the rich sensor data available on a mobile device. Programming on mobile devices engages students in new ways, allowing them to access and manipulate programmatically their most personal digital data such as pictures, videos, and music. Programming on smartphones which we carry around with us at all times means instant gratification for students, as they can show their games and applications to their friends, and it means that students can do their homework or additional practicing at all times. For this workshop, a laptop is optional; Windows Phone 7 devices will be provided for exercises.	Engage your students by teaching programming using only mobile devices with TouchDevelop (abstract only)	NA:NA:NA:NA:NA	2018
Richard A. Brown:Elizabeth Shoop	Parallel computing with more and more cores is here to stay. This workshop presents four independent, class-tested, primarily hands-on modules for incrementally adding parallelism in undergraduate CS courses, each requiring 1 to 3 class days and versatile for diverse courses and curricula: parallelizing loops and sharing memory on Intel's Manycore Testing lab (for a second CS course or for computer organization); parallel web crawler in Java or C++ (second CS course); parallel sorting (algorithms); À- calculus theory for communicating sequential processes (theory of computation). Workshop materials provided, drawn from CSinParallel.org. Intended audience: CS instructors. Laptop recommended (Windows, Mac, Linux).	CS in parallel: modules for adding parallel computing to CS courses, from CS2 to theory of computation (abstract only)	NA:NA	2018
Mark Guzdial:Barbara Ericson	Everybody teaches linked lists, with homework like implementing duplicate, weave, and reverse. When those nodes contain strings or numbers, these are pretty boring assignments. When these nodes contain music (MIDI), these operations are composing music, which can then be played. This workshop shows how to use music, images, and sounds to teach the basic data structures, including linked lists, circular linked lists, stacks, queues, and trees. These pieces can then be tied together through the use of simulations to generate animated movies. We will be using Java, though many of the methods can also be used in Python.	Listening to linked lists: using multimedia to learn data structures (abstract only)	NA:NA	2018
Raja Sooriamurthi:Nickolas Falkner:Zbigniew Michalewicz	Puzzle-based learning (PBL) is an emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles, games, and general problem solving strategies. Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course. Currently 40+ institutions around the world are offering courses based on PBL. More details are available at www.PuzzleBasedLearning.edu.au. Laptop optional.	Puzzle-based learning: introducing critical thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA	2018
Carl Alphonce:Joseph LeGasse	Feedback serves a critical role in the learning process. For formative assessment to be effective in supporting a student's learning, feedback must be provided in a timely fashion (so a student can derive benefit while engaging in the learning activity), it must be consistent across multiple submissions of the same student as well as across submissions by different students, and it must be of high quality (i.e. it must give students guidance as to how to improve their submission). In this poster we present a small library of Java classes which aid the writing automated tests for assessing the design of student programming exercises. Through its use of reflection we can allow more free-form assignments, and can provide feedback on both program functionality and design.	Using reflection to enhance feedback for automated grading (abstract only)	NA:NA	2018
Kai Qian:Dan Lo:Yi Pan:Yanqing Zhang:Xiaolin Hu:Liang Hong	Advanced mobile devices such as smart phones and tablets have become a part of daily lives for digital native students today. The integration of mobile computing with these devices into multiple courses in computer science (CS) curriculum will connect the education to leading-edge information technologies, motivate and engage students in CS learning, fill in the gap with IT industry needs, and help faculties build strong expertise on modern mobile computing. Meanwhile, the hands-on experience with mobile computing will supply the students with a better understanding of the classical CS concepts. In this paper, we propose to develop a cross-curriculum labware based on the Android platform to introduce the knowledge and practice of a wide range of CS subjects with smart phones and tablets.	The cross-curriculum mobile computing labware for CS (abstract only)	NA:NA:NA:NA:NA:NA	2018
Elizabeth V. Howard:Jill E. Courte:Donna M. Evans:Marilyn Anderson	Please be patient with us as we move to our new computer system' is a common sign at healthcare providers' offices. Mandates from the federal government are merging the fields of healthcare and information technology and experts predict a significant increase in jobs related to Health Information Technology (HIT). In this poster session, we will share our new HIT curriculum (Bachelor of Science in Information Technology with a major in Health Information Technology) along with the process followed to develop this curriculum. Developed in collaboration with nursing educators and in consultation with HIT professionals, this unique multi-disciplinary program blends technology and healthcare to prepare students for a wide variety of opportunities in the evolving field of HIT.	Merging healthcare and technology: a multi-disciplinary health information technology (HIT) curriculum (abstract only)	NA:NA:NA:NA	2018
William M. Mongan	We describe our experience in teaching an integrated module in networks, mathematics, and cryptography, suitable for high school students. The objective is to design a lesson with minimal prerequisite background and a varying degree of programming experience, with an aim towards exciting students early on about computing. Students create and implement a chat program protocol and a minimal RSA algorithm implementation, and implement a brute force algorithm to recover each other's private key. Depending on student experience, scaffolding can be provided to assist with the programming, and advanced topics are possible as extensions to this lesson. We hope that this lesson can be taught as an interdisciplinary unit in math and computer science classes.	An integrated introduction to network protocols and cryptography to high school students (abstract only)	NA	2018
Xuzhou Chen:Nadimpalli V.R. Mahadev	In this paper, we describe an approach of using a PC based robot (PCRob) for teaching advanced topic course in pattern recognition and computer vision. Unlike most of the robots where only the microprocessors are used, the robot we design and build uses mini PC and off-the-shelf peripherals to provide the computing power in order to process some functionalities such as image processing and pattern recognition.	A PC based robot for learning computer vision and advanced programming (abstract only)	NA:NA	2018
Shereen Khoja:Juliet Brosing:Camille Wainwright:Jeffrey Barlow	Girls Gather for Computer Science (G2CS) is an innovative computer science summer camp for middle school girls. The goal of the camp is to change how girls experience computer science by placing them in an all-female environment where they explore computer science in a fun and interactive way. Girls are exposed to female role models while middle school teachers and parents are educated about the issues facing women in technology fields. Each week of the camp has a different theme: web development, robotics, programming with Alice, and computer hardware and the camp includes field trips to local technology companies such as Intel and Vernier Software & Technology. Campers use a closed social networking site to communicate and share ideas, and continue to use this site after the camp is over. This provides the girls with a supporting community that will continue to foster their interest in computer science even after the camp has ended. Oregon Public Broadcasting (OPB) partnered with us to produce the camp website, a 10 minute video of the camp, 5 interviews with professional female computer scientists, and online interactive games that teach computer science concepts. The project includes a ten-year study to follow the progress of the campers. Initial assessment of G2CS shows that it had a positive and significant impact on the participants.	Girls gather for computer science (G2CS) (abstract only)	NA:NA:NA:NA	2018
Deborah A. Fields:Kristin A. Searle:Yasmin B. Kafai:Hannah S. Min	One challenge in assessing students' engineering and programming designs is that the problems are difficult to evaluate with pencil and paper. Projects with multiple types of designs (circuitry, coding, aesthetics) can go wrong in many ways (Resnick, Berg, & Eisenberg, 2000). Identifying, debugging, and solving these problems is at the crux of being able to design computational and material projects. In this poster we analyze high school students' collaborative engagement with a series of isomorphic deconstruction kits (debuggems) developed to assess their learning of coding, circuit design and creation (through sewing) in e-textiles with the LilyPad Arduino. The debuggem was designed based on our observations of common challenges that students faced when designing their own e-textiles projects during 4-week workshops. We videotaped ten students collaborating in pairs as they worked to turn on LEDs in a project strategically designed with problems in poor crafting, non-functional circuitry design and insufficient coding. Analysis includes what problems students struggled the most to solve and common types of problem solving strategies used. The debuggem was successful in that it revealed common problems, allowed for multiple solutions, and capitalized on collaborative learning. As hoped, all students solved most problems but no group solved every problem in the time allotted without help; student pairs also came up with multiple solutions. The findings indicate that deconstruction kits are not only promising tools for evaluating students' learning of designing with e-textiles but also valuable learning tools, especially when peer collaboration is taken into account.	Debuggems to assess student learning in e-textiles (abstract only)	NA:NA:NA:NA	2018
Janet Davis:Samuel A. Rebelsky:Jerod Weinman	upswing, Computer science teachers continue to strive for new examples and problems to interest millenials. The Media Computation approach (Guzdial 2003) has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this project, take Media Computing in new directions: we have students build images by interactively scripting an application, which means that they can more easily experiment and mix work that they create "by hand" and work that they create "by programming"; we work collaboratively with studio art faculty, so students build works that must meet underlying design criteria; we teach using the workshop approach, so most classes involve students working in small teams on a set of problems; and we use a multi-paradigm approach - students make images using functional, declarative, imperative, and object-oriented techniques. This approach has proven quite successful - our enrollments are up (at least 33% in CS1, 50% in CS2). We are attracting more women (now 1/3 of our students). And comparative data suggest that our students gain significantly more confidence in their abilities than do student in other introductory science courses.	MediaScripting: teaching introductory CS by through interactive graphics scripting (abstract only)	NA:NA:NA	2018
Hannah Fidoten:Jaime Spacco	We asked all of the liberal arts faculty who advise undergraduates on course selection at the 14 colleges in the Associated Colleges of the Midwest a series of questions regarding their perceptions of the personality traits of Computer Science (CS) students, topics they think are covered in CS classes, and their overall impressions of CS. Our goal was to test empirically the hypothesis that many non-CS faculty are unaware of the differences between CS and Information Technology (IT). We received over 200 survey responses, which revealed that, among non-CS faculty, 10% disagree or are neutral that CS should even be part of a liberal arts curriculum, 9% think that CS students are taught to fix printers and other peripherals, and 35% believe that CS students are taught to use Microsoft Word and Excel in their courses. Our results also revealed that 60% of CS faculty believe that men are more interested in CS than are women (although we did not ask why they believe this to be the case). Overall, while we found statistically significant differences between the answers given by CS and non-CS faculty, the overall evidence suggests that the majority of non-CS faculty in the Associated Colleges of the Midwest have a good understanding of CS.	Do faculty recognize the difference between computer science and information technology?: a survey of liberal arts faculty (abstract only)	NA:NA	2018
Paige H. Meeker	In today's world, many students are being encouraged not only to participate in class work and internships, but to travel and gain experiential knowledge. At Presbyterian College, students are required to complete either a research/internship class or an experiential/travel class as a part of their general education requirements. Computer science students were often going on trips with other departments to fulfill this need. This poster explores a course offered at Presbyterian College in May, 2010, which took students from our Physics and Computer Science department behind the scenes of Kennedy Space Center and Walt Disney World. It will include information both about course content and about the cost and overhead involved in planning such a course.	Interdisciplinary travel courses in computer science (abstract only)	NA	2018
Monika Akbar:Clifford A. Shaffer	Educational portals such as Algoviz.org contain rich information resources, and a key concern is directing the users to specific resources that are of interest to them. While AlgoViz has significant traffic, we cannot count on active user participation in the form of explicit ratings of individual resources. Often called a "cold-start" problem, this scenario is well-known in community-based websites. Lacking active user data, we instead use log data to deduce user trends. We describe our techniques for clustering users based on the log data. We show how this cluster analysis can be used to refine searching and browsing within AlgoViz. Our approach has the potential to be useful for a wide range of educational resource portals.	User type clustering to refine search and browse for educational resources (abstract only)	NA:NA	2018
Steven Huss-Lederman	In 2005, the Beloit College Computer Science Program began a complete revision of its courses and curriculum facing usual issues: limited staff, declining enrollments, and the Computing Curricula 2001 document. We used 1/2 semester, 1/2 unit courses to address the diverse areas with limited courses allowing multiple entry points by interest and knowledge level and flexibility for non-majors; however, it did present scheduling and staffing issues. After two years of experience, we revised our ideas to recombine some 1/2 unit courses to allow larger projects, stacked courses where students at different levels took courses together, and instituted a two year capstone experience that combined material from several classes. The poster will provide details and an opportunity to exchange ideas.	A comprehensive CS curriculum revision, implementation, and analysis (abstract only)	NA	2018
Xiaohong Yuan:Jinsheng Xu:Kossi Edoh:Hong Wang	Health informatics is one of the nation's largest growth industries. With the government's increasing interest in electronic health records and growing investment by healthcare organizations in technology, there is a large demand for a health informatics and health information technology workforce. To protect health information systems, it is highly important for health informatics professionals to be well educated and trained in information assurance, and to understand the many concerns of security, privacy, integrity and reliability. This poster describes our project of developing a new interdisciplinary program of Bachelor of Science in Computer Science (BSCS) concentration in Health Informatics Security and Privacy (HISP) at North Carolina A&T State University (NC A&T SU). To establish this program, we are developing a new course on health information systems in the Department of Computer Science, a new course on Mathematics for Health Informatics in the Department of Mathematics, and modifying an existing course in the Department of Management. We are also developing three course modules on health informatics security and privacy: Health Information Assurance and Security, Access Control in Healthcare Information Systems, and XML Security in Health Information Systems. These course modules will be integrated in the existing computer security and information assurance courses in the Department of Computer Science. The BSCS concentration in HISP curriculum as well as project plan will also be described in this poster.	Developing an interdisciplinary health informatics security and privacy program (abstract only)	NA:NA:NA:NA	2018
Robert E. England	This poster describes a new upper level undergraduate computer science course in team software development, featuring the Apple iPad as the development platform. The course draws from a wide range of state-of-the-art topics in software development theory and practice, including use of Apple's extensive software development Cocoa Touch framework for its mobile devices, advanced Object-Oriented Programming, gang of four Design Patterns, and traditional Software Engineering practices, including accountability to external clients and public presentation of results. The course was developed at Transylvania University, a small Liberal Arts college of approximately 1200 students, and it was taught there during the Fall 2010 semester.	A team software development course featuring iPad programming (abstract only)	NA	2018
Nanette Veilleux:Rebecca Bates:Diane Jones:Cheryl Allendoerfer:Joy Crawford	Retaining students in computer science (CS) majors has been a persistent topic among CS educators for almost two decades. Discussion and research has largely focused on improving student engagement in the academic experience in order to provide a more welcoming and compelling introduction to the field. Research has identified a wide variety of factors affecting student engagement in general, which in turn affects key outcomes including academic achievement, retention and persistence. Feeling connected to a community and sense of belonging can substantially influence student engagement. Our study suggests that this sense of belonging can also help mitigate student perceptions that influence them to be discouraged, especially about their ability to succeed, and leave computer science. In particular, support from extra-curricular as well as academic communities may lead students to perceive that ability is not a binary, fixed constraint, but a malleable gradient that can be influenced by factors within the student's control.	The role of belonging in engagement, retention and persistence in computer science (abstract only)	NA:NA:NA:NA:NA	2018
Ellen Boyd:Anthony Allevato	Many introductory computer science courses include regular lab sessions that require students to develop short programs that relate to corresponding lecture material. Logistical tasks required for assignment completion, such as project setup and submission, impose certain burdens on students and instructors. Due to time constraints, instructors frequently provide starter files or skeleton projects for students to import into their workspace at the beginning of each lab so that they can feasibly complete the assignment in the required time. Setting up projects in Eclipse to include these files and dependencies still consumes significant time during these labs, however. To eliminate the time spent trying to fix project configuration issues, we have developed a plug-in for Eclipse that allows students directly from within the IDE to download and import multi-file projects corresponding to individual lab assignments. The projects will be automatically imported into the student's workspace and will be correctly configured and linked to any required dependencies. The plug-in can also be employed with large-scale programming assignments; as assignments increase in complexity, they may require a non-trivial amount of extra configuration before students can begin work on their solution. With this plug-in, students can now focus primarily on the problem-solving aspect of their work and accomplish all necessary tasks, from initial project configuration to final delivery, without leaving the Eclipse IDE and interrupting their workflow.	Streamlining project setup in eclipse for both time-constrained and large-scale assignments (abstract only)	NA:NA	2018
Stephen B. Hughes:J. Ben Schafer:Aaron Mangel:Sean Fredericksen	One of the major perceived barriers to the adoption of Classroom Response Systems, a.k.a. "clickers", is limited interactivity. Students using dedicated clicker hardware are often only able to provide basic multiple choice or simple numeric responses. The accessibility and flexibility of smartphones make them an intriguing platform for managing some of the shortfalls of traditional classroom response systems. This approach not only leverages a resource that a growing number of students already own, but also aims to enhance the effectiveness of the system by tapping into the robust interaction capabilities that these devices afford. This poster will describe a smartphone implementation of a classroom response system and discuss efforts to extend the basic clicker interaction model.	A customizable platform for classroom collaboration using mobile devices (abstract only)	NA:NA:NA:NA	2018
Demian Lessa:Bharat Jayaraman	An important challenge in teaching object-oriented (OO) programming and methodology in introductory Computer Science courses is explaining the run-time of OO programs. This is largely due to the OO methodology, which encourages the use of features such as polymorphism and design patterns, resulting in object interactions and control flow that are hard to grasp, especially for novice programmers. We present an approach to program comprehension in which students use storyboards and visual debugging to build a clear mental model of the dynamic behavior of OO programs. In this context, a storyboard consists of a sequence of figures representing run-time aspects of interest (e.g. states or interactions) and an explanatory narrative in terms of OO concepts and source elements. The selected visual debugger must render execution histories and run-time states using visual notations consistent with the OO methodology (e.g., objects, member fields, method calls within object contexts). Instructors create storyboards using figures exported from the debugger and incorporate them in course materials. Further, storyboards included in specifications of programming assignments alongside test cases provide students with a detailed account of their programs' run-time at interesting points in execution. By executing their programs under the visual debugger, students can compare the observed run-time states with those illustrated in the storyboards and effectively assess the behavioral correctness of their programs. Hence, the combined use of storyboards and visual debugging can benefit students during the coding phase by guiding them towards writing code that closely adheres to the OO methodology from the outset.	Explaining the dynamic structure and behavior of Java programs using a visual debugger (abstract only)	NA:NA	2018
D. Brian Larkins:H. Erin Rickard:William M. Jones	The field of computer science is continuously growing, requiring curriculum developers to make numerous tradeoffs between depth and breadth with every advance. Faculty must look for new ways to communicate more concepts within a fixed number of contact hours as well as employ techniques that underscore interrelated concepts over multiple courses. With this poster, we present the use of field-programmable gate arrays (FPGAs) as a flexible hardware system that may be modified to suit the needs of a wide variety of classes. While FPGA devices are a natural fit for teaching hardware concepts in organization and architecture classes, we feel that they can also be used in a variety of roles within a number of other courses. We describe our work integrating FPGA curriculum modules into several courses in the CS curriculum: organization and architecture, compiler construction, robotics, operating systems, security, and image processing. We believe that by using these devices in several courses, students gain greater familiarity with a hands-on, reconfigurable hardware platform and can leverage this experience throughout their coursework. This approach is consonant with recent trends that emphasize the importance of students being able to reason about the end-to-end operation of an entire system and helps strengthen the relationships between different subfields within computer science. We describe both the changes made to our curriculum and the effectiveness of our approach.	Using FPGA systems across the computer science curriculum (abstract only)	NA:NA:NA	2018
Raja S. Kushalnagar:Joeseph S. Stanislow	The introductory programming college course is usually difficult for many new students, as they struggle to master basic programming concepts and to develop logically correct programs. Surveys in college have estimated that around 30 percent of these students drop out or fail it. These tasks are even more difficult for Deaf and Hard of Hearing (DHH) students, even when provided with accessible visual translations through sign language interpreters or real-time captions. We have extended the idea of traditional audio capture and transmission accessible technology devices by developing and testing use of smart phones as multimedia recording devices to record multiple videos and stream them to the deaf or hard of hearing student. We call this approach multiple video perspectives.	Maximizing content learning for deaf students and English as a second language students (abstract only)	NA:NA	2018
Shamsi Moussavi:Giuseppe Sena	Laboratory-based courses--the corner stone of Computer Science programs in our community college--have been difficult to manage due to the shortage of lab space, available equipment, and basic infrastructures. This has meant that for the past few years, we have not been able to offer certain courses that allow students administrative privileges in order to complete their assignments, such as Web Server Administration course. We wanted to be able to offer a number of courses requiring various systems, levels of functionality, and networking set up in one laboratory. We researched and experimented with different virtualized systems. Specifically, we looked at the use of VMs in CS courses and laboratories. Through use of virtualization technology we implemented multiple VMs (one for each course) on each computer in a laboratory. Each VM was set up for specific course requirement; hence, multiple courses were offered simultaneously in one laboratory. In designing the laboratory, we were also careful not to adversely affect the security of college's computer network. Therefore, the virtualized laboratory was separated from the college's computer network. This approach not only provided the capabilities that we were looking for, but can also be used in future to provide easier access to students, even from outside the school network.	All-in-one virtualized laboratory (abstract only)	NA:NA	2018
Joseph A. Cottam:Suzanne Menzel	Computer scientists require a precise and complete understanding of recursion. Earlier work has indicated that recursion merits attention in CS1 [2]. We present a simple test question that, when used in a final exam for three courses over two semesters, is shown to significantly predict student performance on the final. To evaluate student responses, we present an evaluation rubric that directly reveals common misconceptions about recursion and recursive procedures.	Recursive thinkers and doers in CS1 (abstract only)	NA:NA	2018
Madalene Spezialetti	This poster presents a tool for providing novice students with a context in which to develop the ability to identify problems and patterns for their solutions by using video scenarios. A video scenario is a short film (typically 2-7 minutes) which has an extemporaneous feel. Each video depicts individuals facing a particular problem that can be helped through a computing solution. A selection of video scenarios is presented which is specifically designed to cultivate the problem identification and solution formulation skills of novice programmers by focusing on problems which can be solved using basic computing constructs. The videos can be used in a wide variety of settings and are suitable for use at the middle school, high school and college levels.	Computing in context: video scenarios for recognizing and utilizing basic computing constructs (abstract only)	NA	2018
Ivona Bezakova:James Heliotis:Sean Strout:Adam Oest:Paul Solt	Board games provide a natural context for the use of basic data structures and search algorithms taught in a typical introductory CS sequence. Unlike traditionally used programming assignments where students implement the actual game, we provide the game "engine" and ask the students to implement player strategies. The engine graphically displays the current state of the game and cyclically calls the individual player strategies to perform their moves. The students need to apply the same algorithms as if programming the rule checker for the game. And with the added strategy component, the project becomes open-ended, leaving space for continued improvements and experimentation. The poster describes the game we used last academic year, Quoridor by Mirko Marchesi and published by Gigamic Games. The goal of this game for two or four players is to move a piece from one side of a 9x9 grid board to another side, while placing walls that lengthen the opponents' paths to their destinations. The poster discusses Quoridor's relevance for basic data structures and algorithms, for example, breadth-first search. It then elaborates on the possibilities introduced by adding strategies into the picture, including an end-of-term tournament. Supported by the NSF, award ID 1044721.	Programming board-game strategies in the introductory CS sequence (abstract only)	NA:NA:NA:NA:NA	2018
John J. Wright	Whether we like it or not, college administrations and students are increasingly looking for online courses. K-12 schools are increasingly using online content and blending it with standard content. One of the bridges for us between traditional course delivery and online delivery is the blended course. This approach seems well suited to computer science, which often requires work in labs or with specialized equipment or software. It takes the approach of reversing that which is traditionally lecture and assignments, making classes more interactive and students less passive. This poster seeks input on a blended implementation of CS1 and a subsequent SoTL project to test the effectiveness of offering this course in a blended format.	Implementing and assessing a blended CS1 course (abstract only)	NA	2018
Scott Alexander Turner	Creating programming projects that engage students has been a continual challenge in computer science. Ideally, programming projects should require student to reflect upon and apply programming concepts and help them develop creativity, problem-solving, and other skills for the workplace. The use of real-world problems is one possible solution to the issue but it comes at the cost of increased complexity, size, and burden on the instructor. One approach to reducing these costs is to design (or redesign) programs, developed as part of a research agenda, for use as student projects. Designing these programs for flexibility, adding extra, student-appropriate, feedback and identifying portions of the code that could become interesting student projects helps support both research and classroom learning at the same time. By explicitly designing with projects in mind, instructors can control the complexity and size of these real-world problems and can, potentially, create a platform that can support multiple types of student assignments. This poster describes the experience of redesigning a UML diagramming tool to implement this idea and provides examples of the design decisions made, lessons learned during the process, and other programs that could be used in a similar fashion. Future work includes evaluating the students' reaction to the projects and whether enough support is being provided.	Designing with projects in mind: an approach for creating authentic (and manageable) programming projects (abstract only)	NA	2018
Jose M. Garrido	We propose an approach to introduce computational models and basic programming principles in an integrated manner and as early as possible in the computing curricula. Our goal is to help educate students of computer science, mathematics, and the various science disciplines, in computational modeling. For this, we have developed a sequence of four courses in computational modeling, the first of which integrates computational modeling with programming principles and includes elementary numerical methods for solving the models. This entry-level course is described and a URL is provided with details of the four courses. Developing a computational model of a problem includes formulating the mathematical representation and implementing it by applying Computer Science concepts, principles and methods.	Integrating elementary computational modeling and programming principles (abstract only)	NA	2018
Anthony Allevato:Stephen H. Edwards	Many computer science educators have adopted test-driven development practices in their introductory computer science courses, as a way of encouraging incremental development and decreasing defects in student code. This practice is straightforward for basic data-driven objects, but making unit testing of GUI applications approachable for students poses a larger challenge. We have previously addressed this problem for Swing applications by developing LIFT, a library that allows students to easily write JUnit tests for Swing interfaces. Since then, we have transitioned away from Swing to Android as the development platform in CS2 to better motivate and excite our students about their assignments. To fully support this change, we had to ensure that our students could fully test the GUI portions of their solutions on that platform as well. The Android operating system has significant built-in support for GUI testing, but the standard API is too complex for students to use. In order to address this, we developed RoboLIFT, a framework that eases the task of writing concise and complete unit tests for Android applications. Furthermore, RoboLIFT also has support for automated grading on the Web-CAT automated assessment system, so even if instructors do not require their students to follow test-driven development practices, they can still enjoy the benefits of automated grading by writing correctness tests that use RoboLIFT to exercise the students' graphical user interfaces.	RoboLIFT: simple GUI-based unit testing of student-written android applications (abstract only)	NA:NA	2018
Eric Fouh:Maoyuan Sun:Clifford Shaffer	OpenDSA is an open-source, community-based effort to create a complete active-eBook for Data Structures and Algorithms courses at the undergraduate level. Active-eBooks go beyond hypertextbooks, being a close integration of text and images with interactive visualizations and assessment activities. They solve two major problems: The difficulty of conveying dynamic process with static media, and the need by students to have many practice exercises and immediate feedback. Development in HTML5/JavaScript allows maximum portability. OpenDSA will proceed with broad participation from the algorithm visualization community. Focusing on reuse of materials, instructors can pick and choose content and modify as desired.	OpenDSA: a creative commons active-ebook (abstract only)	NA:NA:NA	2018
Murali Mani:Quamrul Mazumder	Courses that involve problem solving provide an opportunity to incorporate meta-cognition as an active learning strategy, where students reflect on their confidence levels on their solutions to problems. As compared to other typically used active learning strategies, meta-cognition provides concrete and comprehensive feedback about the students' learning. The data about confidence levels is potentially useful to both the instructor and the student: an instructor can utilize the data about confidence levels as a second measure of student learning (this is in addition to the scores obtained); a student gets valuable feedback with regards to his/her own comprehension of the topics when he/she examines the confidence levels. We have incorporated meta-cognition techniques in four computer science courses over two semesters at University of Michigan, Flint, including CS1, and also graduate level courses. By analyzing the data obtained, we are able to infer conclusions about (a) How correlated are the scores obtained to the confidence levels reported (b) Is meta-cognition assisting in learning, and (c) Are students more satisfied with a course that incorporates meta-cognition.	Active learning in computer science education using meta-cognition (abstract only)	NA:NA	2018
Yana Kortsarts:Vasily Kolchenko	Dynamic programming is one of the important algorithmic techniques often not appropriately covered in the core undergraduate CS courses, and there is no sufficient emphasize on application of advanced techniques to practical problems. As a result, students are not becoming fully familiar with this extremely important concept. We present our experience in integrating dynamic programming algorithmic technique in various core and elective undergraduate computer science courses, such as introductory programming, cryptography and bioinformatics. Examples are based on the real world scenarios and motivate students to learn in order to solve practical problems. The reported work was partially funded by the National Science Foundation, NSF CPATH award #0939120 and NSF I3 award #0930242	Dynamic programming across the CS curriculum (abstract only)	NA:NA	2018
Clif Kussmaul:Heidi J.C. Ellis:Gregory W. Hislop	Participating in free and open source software (FOSS) has numerous benefits for students (and faculty), and there is increasing interest in encouraging such participation. There is a broad range of possible contributions to FOSS projects including documentation, testing, coding, and more. This range allows people with a variety of backgrounds, including little or no CS background, to contribute to a FOSS project. This poster describes the status of a project to identify and categorize learning activities that contribute to FOSS. During Spring 2011, an NSF-sponsored workshop on student participation in humanitarian FOSS for the SoftHum project brought together a group of experienced FOSS developers, faculty, and students. One result of this workshop was a list of nearly 100 learning activities that could contribute to FOSS projects and provide meaningful experiences for students and faculty. We were surprised by the variety of results. Some of the activities have been used successfully or are variations of familiar learning activities; others are ideas that seem promising but require further development and validation. We are experimenting with individual activities, and seeking colleagues interested in doing likewise. We are also mapping the learning activities onto Computer Science Curriculum 2008 to make it easier for faculty to identify relevant activities and map them to course or program learning objectives. The poster briefly summarizes relevant background, describe the process used to identify appropriate activities and provide examples of activities and their mappings.	50 ways to be a FOSSer: simple ways to involve students & faculty (abstract only)	NA:NA:NA	2018
Daniela Marghitu:Taha Ben Brahim:John Weaver	Auburn University's Robo Camp K12 outreach program integrates various robotics platforms to maximize students' critical thinking and creativity development. This work presents how robotics could be used to teach students computer science concepts and skills through implementing the Computer Science Unplugged (CSU) activities. CSU provide an insightful learning environment where students learn computer science concepts through some playful, coordinated and stress free activities. Implementing such activities using robots resulted in multiple benefits: 1) students acquired advanced computer science notions without undergoing the high stress levels associated with such activities and 2) students maintained high levels of motivation and concentration during the entire six weeks of the camp.	Teaching computer science and programming concepts using LEGO NXT and TETRIX robotics, and computer science unplugged activities (abstract only)	NA:NA:NA	2018
Helen H. Hu	POGIL is a learning method that encourages students to learn coursework material in cooperative groups. Instead of passively listening to a traditional lecture, POGIL students work together on activities that guide students to discover programming concepts and algorithms for themselves. For example, instead of being told in lecture that a return statement ends the execution of a method, students might be asked what happens if two lines in their program are reversed (so that a line of code appears after the return statement). This emphasis on the process of discovery teaches students to become better problem solvers. POGIL has been used for over 15 years in science classrooms, where studies have shown it to be more effective than traditional lectures, measured both in student mastery of the material and in student retention. This poster provides examples of how traditional programming assignments can be transformed into POGIL lessons that emphasize problem solving and critical thinking skills. A POGIL activity on loops has students working through iterations of Newton's method by hand before writing the code. Critical thinking questions guide students to manipulate the code to experiment with infinite loops, initialization statements and conditionals. Two other activities on recursion and writing pseudocode are detailed on the poster. Information on facilitating a POGIL activity and writing your own POGIL activities can be found online at http://pogil.org/resources. Additional examples of computer science POGIL activities can be found at http://cspogil.org.	Using POGIL to teach students to be better problem solvers (abstract only)	NA	2018
Jinghua Zhang:Elva J. Jones	We propose a unique gaming concentration to reenergize computer science(CS) education at Winston-Salem State University (WSSU), an HBCU. Nationally, many gaming concentration programs in the CS curriculum have been successfully developed. Nevertheless, to our knowledge, none has been established at any of the HBCUs. The proposed gaming concentration aims to educate minority students with the skills necessary to participate as computer scientists in a game development team and other software development projects. The concentration will help the enrollment and retention of underrepresented students and increase the quality of graduates in this field. A successful gaming concentration at WSSU will advance the knowledge in developing curricula for HBCUs and other minority institutions.	Developing a gaming concentration in the computer science curriculum at an HBCU (abstract only)	NA:NA	2018
Jason Snyder	OSSIE is an open source SDR project created for education and research. When used as a teaching example, OSSIE provides lessons about open source and systems development. It is also an ideal platform for a variety of projects, from capstone studies to theses. A series of labs introduces new users to the software and quickly illustrate key SDR concepts and practices. Included components and waveforms provide excellent examples and allow for the simple creation of new waveform applications. The waveform workshop allows SDR developers to concentrate on the signal processing aspects of OSSIE software development by automatically generating code necessary for interfacing with the OSSIE Core Framework. Finally, the Core Framework provides an ideal platform for SDR and signal processing research.	OSSIE: an open source software defined radio (SDR) toolset for education and research (abstract only)	NA	2018
Jean H. French	While a focus on programming and mathematical skills is second nature to computer science faculty, perhaps equally important should be the recognition of the need for students to master communication skills. This poster presents the measured results of various methods used in the implementation of a communication-intensive core course into a CS curriculum at a small liberal arts university. The communication intensive core course is a CS1 introduction to computer science which is required to implement both oral and written assignments. Five key areas of success were implemented to help support the communication-intensive CS curriculum. They are: (1) communication skills need to be integrated within the CS curriculum, (2) communication skills should begin to be developed early in the student's academic career, (3) communication skills include a broad range of categories, (4) communication skills need to be supported by feedback, and (5) communication skills can be taught in the CS curriculum without sacrificing CS content. The results are provided on a four-point scale and focus on both student success and grading complexity. Scores are provided for each of the methods used since the course was first implemented in 2007. Such a comprehensive evaluation aims to assist in determining which methods are best suited for implementing a core communication that stresses continuous improvement in communication skills.	Implementing a communication-intensive core course in a CS curriculum: a survey of methods (abstract only)	NA	2018
Quinn Burke:Yasmin B. Kafai:Jean Griffin:Rita M. Powell:Michele Grab:Susan B. Davidson:Joseph S. Sun	Community service courses are often where undergraduates make connections between academic content and practical computer science applications, build bridges between the university and the community, and ultimately increase access to technology in such communities. In this poster we report on our efforts-supported by a NSF Broadening Participation in Computing grant-to design, implement, and evaluate a service-learning course based on a "cascading mentoring" model linking together the faculty, administration, and undergraduates of an urban university's computer science department with area high school students. The poster presents the cascading model and through a series of post-interviews offers preliminary data charting undergraduates' experiences as both mentees and mentors.	The reflective mentor: charting undergraduates' responses to computer science service learning (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Li Yang:Joseph Kizza:Andy Wang:Chung-Han Chen	Teaching cryptography is essential in undergraduate information assurance (IA) education as it is an indispensable component in the IA knowledge domain and plays a key role in ensuring information confidentiality, integrity and availability. Hands-on method in cryptography is a good approach to achieve this as it engages students in real-world settings, which will inspire creativity of students and train them to adapt cryptographic solutions to emerging areas. We design a collection of labs which allow students to gain hands-on experiences with cryptographic algorithms, especially increasing student awareness of possible threats and attacks to various cryptographic techniques. The developed hands-on exercises tied with each cryptography topic teach students both cryptographic algorithm and vulnerabilities. In each exercise students experience cryptographic techniques and its possible threats and attacks. In other words, students learn and understand both strength and weakness of each cryptography technique. Our labs cover topics of encryption, digital signature, key management, etc. These labs can be "plugged" into courses at different levels from CS1 to senior courses such as network security, security management, etc. Our approach enriches experiential learning materials in cryptography. Our effort contributes to cryptography courseware development and IA education in terms of hands-on exercises. The hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and IA courses. Hands-on labs are available at http://cryptolabs.info/.	Teaching cryptography using hands-on labs (abstract only)	NA:NA:NA:NA	2018
Pelle Hall:Andrew Hirakawa:Jennelle Nystrom:Samuel A. Rebelsky	Consider a middle-school student "playing" with a computer. What does she do? She may chat with friends. She may surf the Web. She may even play a few games. But she is also likely to make things with drawing programs, word processors, or other applications that make things. Can one leverage that creativity to encourage her to want to learn to program? Projects from Alice (Moskal et al. 2004) to Scratch (Maloney et al. 2010) have certainly shown that tools that tie creativity and programming can encourage students to think algorithmically. Despite the success of these programs, there is still room for new models that link children's artistic interests with programming. In this project, we explore the link between creativity and programming through a different model, one in which the drawing application "self discloses" underlying commands (DiGiano & Eisenberg 1995). As students draw images with the GNU Image Manipulation Program, a Photoshop-like application, a small window displays code that represents their actions. For example, when they draw a line, a "draw line" command appears that includes the coordinates of the line; when they change brushes, a "set brush" command appears that includes the name of the brush. Eventually, students refer to these commands to redraw their figures, to copy their figures, and to change their figures. Slowly they move from copying and pasting code, to modifying, to writing their own instructions, and beyond.	From drawing to programming: attracting middle-school students to programming through self-disclosing code (abstract only)	NA:NA:NA:NA	2018
Carol Spradling:Florence Appel:Elizabeth Hawthorne	The ACM/IEEE-CS 2001/2008 computer science curricular guidelines are in the process of being updated and the strawman version of CS2013 will be unveiled at SIGCSE 2012. Inclusion of the ethical, societal and professional responsibility issues dates back to Computing Curricula 1991. This poster session will present the revised Social and Professional issues knowledge area and provide a means for any SIGCSE community member to provide feedback directly to SIGCAS and the CS2013 steering committee. Specific core and elective knowledge units, topics and learning outcomes will be delineated. The current state of the discipline and the profession were examined to provide contemporary guidance for the education of ethical behavior, professional practice and societal impact for computer science majors.	Proposed revisions to the social and professional knowledge area for CS2013 (abstract only)	NA:NA:NA	2018
Zalia Shams:Stephen H. Edwards	Instructors often write reference tests to evaluate student programs. In Java, reference tests should be independent of submitted solutions as they are run against all student submissions. Otherwise, they may even fail to compile against some solutions. Reflection is a useful feature for writing code without compile-time dependencies, which is valuable for writing software tools that inspect code. However, educators avoid using reflection as code written using Java's Reflection API is complex, unintuitive and verbose. We present ReflectionSupport, a library that enables one to write reflection-based code in concise, simple and readable fashion. It helps educators write reference tests without compile-time dependencies of solutions and develop educational tools such as automated graders.	A better API for Java reflection (abstract only)	NA:NA	2018
Qusay H. Mahmoud:Nicholas Mair:Younis Mohamed:Sunny Dhillon	In this poster we present a set of hands-on labs for a mini-course on mobile application development that can be used as a lab component of any Computing course. The labs revolve around a single theme whereby students experiment with designing and developing the user interface, interaction model, and inter-connectivity of a mobile application for Google Scholar; the developed application can be deployed on a variety of mobile platforms, including BlackBerry, Android, and iPhone devices (smartphones and tablets). Students learn about mobile programming models and cross-platform development and appreciate the unique opportunities such devices offer, but also become aware of the development challenges they present. For more information, please visit: http://cmer.uoguelph.ca.	Hands-on labs for a mini-course on mobile application development (abstract only)	NA:NA:NA:NA	2018
Vicki L. Almstrum:Barbara Boucher Owens:Mary Z. Last:Deepa Muralidhar	This poster presents recent progress with the Computing Educators Oral History Project (CEOHP). To provide context, the poster includes a brief history of CEOHP and a summary of the interviews currently in the collection (a total of twenty-six completed interviews at the end of 2011). During Evaluation efforts in 2009 and 2010, a series of face-to-face and on-line qualitative interviews provided feedback about the CEOHP website, including its organization, content, and usability by target groups. The Evolution process incorporated ideas generated during Evaluation to improve both quality and consistency of the collection elements and the CEOHP website. In the Archival Storage process, all completed interviews in the CEOHP collection are being submitted to the prestigious Charles Babbage Institute for permanent indexing and archiving. These archival steps will become part of CEOHP's standard processing procedures, so each interview added to the CEOHP collection will be archived by the Charles Babbage Institute, guaranteeing that these materials will survive far into the future. This poster describes major steps, challenges, and achievements in the areas of Evaluation, Evolution, and Archival Storage, as well as the spiral nature of these activities as part of the on-going process of growing a collection such as CEOHP.	CEOHP evaluation, evolution, and archival storage (abstract only)	NA:NA:NA:NA	2018
Christy L. McGuire:Thomas K. Harris:Jonathan Steinhart:Leigh Ann Sudol-DeLyser	With grant funding from the National Science Foundation, we are developing the CodeTrainer Content Authoring System, a mechanism that allows educators to create and contribute their own curriculum content and align that content with the features of our larger intelligent tutoring system, CodeTrainer. Through a series of user studies, we evaluated the needs of computer science educators for both curriculum content and appropriate user interface. Results from these studies indicate that computer science educators would find CodeTrainer a useful tool, and offered suggestions for improving the usability. This material is based upon work supported by the National Science Foundation under Grant No. 1113692.	CodeTrainer teacher authoring system: facilitating user-created content in an intelligent tutoring system (abstract only)	NA:NA:NA:NA	2018
Edward Dillon:Monica Anderson:Marcus Brown	Improving the novice's experience with programming may be key to retaining more students interested in Computer Science. Programming environments is an area that lacks comprehensive study. Some entry-level sequences prefer visual environments while others tout the benefits of command line environments. In either case, there is little more than anecdotal evidence to support either choice. We present a novel categorization of programming tools based on assistive features that predict the usefulness of programming environments for novices. This categorization is supported by a controlled study that measured the differences in engagement, efficiency, comprehension, and usability. We found that the extremes of assistive features are problematic regardless of prior programming experience.	Comparing feature sets within visual and command line environments and their effect on novice programming (abstract only)	NA:NA:NA	2018
Jeffrey Forbes	The widespread use of online social networks provides a particularly compelling domain for introducing computer science techniques and concepts to undergraduate students. As part of the HarambeeNet project, I developed a new course on the Science of Networks that explores the interconnectivity of social, technological, and natural entities. Students in the course learn fundamental techniques from graph and game theory to analyze network structure and behavior. Material for the course was developed and refined through a survey of exemplar courses, workshops, and faculty learning communities all focused on network science. The poster describes the course framework, provides some example assignment and lecture material, and presents some lessons learned.	Exploring connected worlds (abstract only)	NA	2018
Tim Bell:Lynn Lambert:Daniela Marghitu	Outreach activities including Computer Science Unplugged demonstrate computer science concepts at schools and public venues based around kinesthetic activities rather than hands-on computer use. Computer Science Unplugged is a global project that has shared many such activities for children to adults using no technology, including how binary numbers represent words, images and sound, routing and deadlock, public/private key encryption, and others. These and other effective outreach programs can combat the idea that computer science = programming or, worse, keyboarding; and can educate the public, interest students, and recruit majors. Many people have used these activities, and adapted them for their own culture or outreach purposes. Come share your outreach ideas and experiences with such activities. Employers, researchers and teachers have noted the need for effective outreach to ensure that students and the public be exposed to, and understand what Computer Science is. CS Unplugged is a collection of activities that are accessible to a general audience, need no technology, are fun, and cover many core areas of computer science. The focus of this session will be discussing activities that introduce computer science concepts and way of thinking, and that are consistent with Jeanette Wing's Computational Thinking [Wing06]. The session is intended to allow exchanging ideas about effective outreach in the community, in K-12, and even non-major classes. There are many variations of these activities, and it is valuable to get practitioners together to share their successes - and not-so-successful events - so that others can benefit from them.	CS unplugged, outreach and CS kinesthetic activities (abstract only)	NA:NA:NA	2018
Elizabeth K. Hawthorne:Nancy R. Mead:Mark A. Ardis:Carol A. Sledge	Nearly every facet of modern society depends heavily on highly complex software systems. The business, energy, transportation, education, communication, government, and defense communities rely on software to function, and software is an intrinsic part of our personal lives. Teaching software assurance and secure coding practices are significant challenges currently facing computer science educators. The Strawman version of the CS2013 curricular volume recognizes this vital need and has included a new knowledge area to specifically address software and information assurance in undergraduate computer science education. Also recognizing the importance of the software assurance discipline for protecting national infrastructures and systems, the U.S. Department of Homeland Security (DHS) has identified the growing need for skilled practitioners in this area. At the direction of the DHS, the Software Engineering Institute at Carnegie Mellon University initiated the Software Assurance Curriculum Project. Session leaders will share curricular materials from this project and will facilitate active discussion centered on infusing software assurance into introductory computer science courses at two-year and four-year colleges and universities. The latest curricular volume published September 2011 will be distributed at the session and includes a review of related curricula, outcomes and body of knowledge, expected background of target audiences, and outlines of six courses. These curricular materials are also available online at www.sei.cmu.edu/library/abstracts/reports/11tr017.cfm.	Infusing software assurance and secure coding into introductory CS courses (abstract only)	NA:NA:NA:NA	2018
Stephen H. Edwards	Web-CAT is the most widely used open-source automated grading system, with about 10,000 users at over 65 institutions worldwide. Its plug-in architecture supports extensibility, with plug-ins for Java (including Objectdraw, JTF, Swing, and Android), C++, Python, Haskell, and more. It is also a powerful tool for educational research data collection. It supports a wide variety of assessment strategies, but is famous for "grading students on how well they test their own code". Web-CAT won the 2006 Premier Award, recognizing high-quality, non-commercial courseware for engineering education. This BOF will allow existing users and new adopters to meet, share experiences, and talk about what works and what doesn't. Information on getting started quickly with Web-CAT will also be provided.	Web-CAT user group (abstract only)	NA	2018
Sebastian Dziallas:Heidi J.C. Ellis:Mel Chua:Steven Huss-Lederman:Karl R. Wurst	Involving students from a wide range of backgrounds in Free and Open Source Software (FOSS) project communities gets them a hands-on, portfolio-building experience in the creation of a real-world project while simultaneously building their institution's public profile. The Teaching Open Source (http://teachingopensource.org) community is an emergent (3 year old) group working on scaffolding to bridge the cultural differences between academic and FOSS communities of practice. Join us to share questions, challenges, and triumphs of incorporating FOSS participation into existing and new curricula as well support resources for doing so. Alumni and current members of the POSSE (Professors' Open Source Summer Experience, http://communityleadershipteam.org/posse) will attend in mentorship roles. Faculty attendance at the SIGCSE 2010 BoF on Teaching Open Source (TOS) indicates that student involvement in FOSS projects is a teaching and learning approach of interest for many faculty members. The transparency of both artifacts and process make FOSS an attractive real-world experience that enhances peer learning and intrinsic motivation for a diversity of courses, from introductory, interdisciplinary, and non-major classes to software engineering core offerings and senior capstones. However, such student participation involves a significant learning curve and effort on the part of the faculty member, and support structures for faculty are still maturing. 2011-2012 marks the 3rd academic year the TOS community has explored this realm together, and the past year has seen the emergence of more best practices, support resources, and curricular material. Community members are starting to design cross-institutional research on the impact of FOSS participation on students. BoF attendees will be encouraged to ask questions, network, and take advantage of the TOS community as a support structure for their own courses and projects. The audience is expected to consist of instructors who 1) are interested in learning how to get started in involving students in FOSS projects; or 2) have involved students in FOSS projects and are looking for better ways to facilitate student learning within FOSS projects.	Teaching open source: involving students in free and open source software (FOSS) project communities (abstract only)	NA:NA:NA:NA:NA	2018
Brian Harvey:Tiffany Barnes:Luke Segars	The College Board's guidelines for the coming AP CS Principles course are broad enough to allow many different interpretations. In particular, different courses have different levels of technical depth. The "Beauty and Joy of Computing" curriculum, used by two of the initial five pilot sites, aims high, with recursion and higher order functions included in the programming half of the course. This session is for high school or college level instructors considering teaching an AP CS Principles course and interested in using the BJC curriculum, and/or the Snap! (formerly BYOB) visual programming language used in the curriculum. See http://bjc.berkeley.edu for the curriculum and http://snap.berkeley.edu for the language.	AP CS principles and the 'beauty and joy of computing' curriculum (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Jody Paul:Mark Sherriff	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position, providing the possibility of promotion, longer-term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2018
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight the new NSF Broadening Participation in Computing grant -- a grant that encompasses projects we presented in previous BOFs and a grant that builds on an alliance among ACM-W, ABI and NCWIT.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2018
Richard A. Brown:Elizabeth Shoop:Joel C. Adams:David P. Bunde:Jens Mache:Paul F. Steinberg:Matthew Wolf:Michael Wrinn	Recent industry changes, including multi-core processors, cloud computing, and GPU programming, increase the need to teach parallelism to CS undergraduates. But few CS programs can afford to add new courses or greatly alter syllabi, and the large parallelism body of knowledge relates to many courses. Participants in this BOF will share incremental approaches for adding parallelism to undergraduate CS curricula, where students study parallel computing in brief units. This networking event/ brainstorming session/ swap meet will bring together: " people with sharable parallelism expository readings, hands-on exercises, tech support ideas, etc.; "people wishing to include such materials in their courses; and" people curious about incremental approaches to teaching parallel computing.	Sharing incremental approaches for adding parallelism to CS curricula (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA	2018
James Jerkofsky:Cathy Bareiss	Faculty in small departments (perhaps 3 FTE, perhaps only 1 or 2,&) face special situations - both challenges and strengths. In this BOF, members will have a chance to talk about both. Challenges include maintaining a well-rounded curriculum and attracting students. Strengths include a close relationship with other members of the department and majors. These and other topics are open for discussion; the specific topics will be based upon the composition and interests of the group assembled.	Computer science: small department initiative (abstract only)	NA:NA	2018
Don Slater:Wanda Dann:Steve Cooper	This session is for anyone currently using Alice 2.2 and / or thinking about using Alice 3, or exploring the possibility of using Alice in his or her curriculum. The discussion leaders and experienced Alice instructors will share teaching strategies, tips, and tricks with each other and those new to Alice. The session provides an arena for sharing Alice instructional materials and ideas for courses at all educational levels. This is an opportunity to share assignments and pointers to web sites where collections of instructional materials, such as syllabi, student projects, exams, and other resources are available.	Teaching with Alice (abstract only)	NA:NA:NA	2018
Peter J. DePasquale:Michael E. Locasto:Lisa C. Kaczmarczyk	Few, if any, pedagogical practices exist for helping students embrace best practices in writing software documentation, particularly source code comments. Although instructors often stress the importance of good commenting, two problems exist. First, it can be difficult to actually define these best practices, and second, it can be difficult to grade or assess students' application of such methods/practices. This Birds-of-a-Feather session focuses on capturing for dissemination a concrete list of code commenting best practices used by the attendees as they teach their classes. We will aim to facilitate the development of commenting best practices by collecting the experiences and suggestions of the BOF attendees into a concrete list of practices and initiatives (and we plan to post this to our publicly accessible project wiki). Additionally, we plan to report on our progress in creating and deploying the COMTOR system, an NSF-funded project that supports feedback to students and grading capabilities for instructors of student source code comments.	Identifying effective pedagogical practices for commenting computer source code (abstract only)	NA:NA:NA	2018
Jeffrey L. Duffany:Alfredo Cruz	To enhance the learning process a certain amount of hands-on experience is desirable to supplement the theory portion of computer security-related courses. This includes courses in information assurance, database security, computer security and computer forensics, among others. Many classrooms designed for teaching computer programming have personal computers for use by each student. Some universities have dedicated laboratories. These labs and classrooms can be expensive to maintain and upgrade and this may be done by a separate IT department. There are budget constraints and political issues that must be addressed between the school, faculty and university administration. Because of these constraints, many schools and universities may be lacking in their lab resources for teaching computer security. This situation could be improved in many cases with little financial investment. This presentation is based on sharing the experience of professors that are currently teaching these courses to graduate and undergraduate students. These professors will present ideas on specific hardware and software that can be used to develop a computer security lab or to enhance a classroom environment, with an emphasis on free and open source software, operating systems and the use of virtual machines.	Design of a computer security teaching and research laboratory (abstract only)	NA:NA	2018
Joseph Mertz:Ralph Morelli:Ruth E. Anderson	This BOF is a chance for information sharing among faculty interested in involving students in ICTD research and/or service learning toward cultural and economic development globally. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations.	Student ICTD research and service learning abroad (abstract only)	NA:NA:NA	2018
Jerod Weinman:Ellen Walker	Within computing, the imaging field includes computer vision, image understanding, and image processing. While much research and teaching is done at the graduate level, the typical imaging educator at an undergraduate institution is the only specialist in his or her department. This BOF brings together educators who currently teach imaging courses or may be interested in expanding curricular offerings. We will emphasize sharing best practices, ideas, and resources as well as building a network for continued cooperation. Discussion topics may include course organization, assignments and projects, and lecture aids or other materials. Our network will include a mailing list for participants to ask questions and share ideas about imaging pedagogy and other means of sharing course materials.	Imaging college educators (abstract only)	NA:NA	2018
Kimberly D. Voll	Our students are the social media generation, touting Facebook, Google+, and even Twitter accounts as a matter of course. Providing rich, highly integrated environments, social media systems are a template for community and connection. In contrast, CS education is via singular modalities: lectures, textbooks, labs, discussions, et cetera, that share no active or social connection (you cannot +1 a lecture, for example, share a passage of a text with a classmate, or pull up a view that truly integrates a course and its community). But now we have the technology to create learning environments that share the same rich, multimedia experience as the popular social media sites. What should this look like? How do we start? What have you tried? We'll open with a brief overview of the leading social media tools for those unfamiliar, then proceed straight to an open discussion.	Let's talk social media (abstract only)	NA	2018
Viera K. Proulx:Stephen Bloch	Program by Design is a new name for the comprehensive introduction to programming at all levels that began with TeachScheme/ReachJava. This unconventional introductory computing curriculum covers both functional and the object- oriented program design in a systematic design-based style, enforcing test-first design from the beginning. The Bootstrap curriculum makes programming and algebra exciting for children ages 11-15. Special libraries support the design of interactive graphics-based games, musical explorations, client-server and mobile computing. We invite you to come and meet those who have used the curriculum, learn about new additions, libraries, bring in your experiences with the curriculum, show your projects, or ask questions about how it works and how you can use it. This work is sponsored by two NSF DUE CCLI grants: Redesigning Introductory Computing: The Design Discipline, Grant #00618543, and Integrating Test Design into Computing Curriculum from the Beginning, Grant #0920182.	Program by design: TeachScheme/ReachJava (abstract only)	NA:NA	2018
Frances P. Trees:Helen Hu:Chinma Uche	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, provision of member services at the local level, and to promote CSTA membership on the national level[1]. This BOF will provide a platform for the discussion of CSTA chapter formation and for the sharing of successful chapter activities.	CSTA chapters: supporting your local computer science educators (abstract only)	NA:NA:NA	2018
Kristine S. Nagel:Evelyn Brannock:Robert Lutz	Tech Camps are popular outreach tools to interest teens in computing programs and technology careers. One of the biggest obstacles is how to make Tech Camp "cool" and inviting for teenagers. How do we grab the attention of students to enroll? Once at camp, how do we engage teens with computing as a creative tool with relevancy to their lives? It is summer; subject areas must be entertaining and relevant. Can we stay ahead of the tech-savvy teens with our budget constraints? Robots and storytelling have long been used; how do we innovate and spark interest, throughout the year? The purpose of this BOF is to share ideas, such as App Inventor for Android to create apps, including text messaging, encouraging students to incorporate their own creative graphics, and using tablet devices.	Revitalizing computing camp and outreach: how do we engage teenagers in "cool" technology? (abstract only)	NA:NA:NA	2018
Clifford A. Shaffer	What should the textbook of tomorrow look like in a world of ubiquitous access to computing? Hypertextbooks have proved difficult to create and been fundamentally passive experiences. Commercial eBooks are merely books printed on an electronic screen instead of paper. New technologies such as HTML5 make it feasible to develop interactive applications that integrate with web services to provide a rich, pedagogically effective learning environment compatible with a range of computing platforms. We seek to generate discussion by participants to describe what they hope to see in online textbooks in the near future, and what resources and support would be required for them to adopt such a thing into their own courses.	Active eTextbooks for CS: what should they be? (abstract only)	NA	2018
N. Hari Narayanan:Martha Crosby:Dean Hendrix:Christopher Hundhausen	This BOF is related to the Special Session Transforming the CS Classroom with Studio-Based Learning (SBL). SBL promotes learning in a collaborative context by having students construct, present, review and refine their work with the guidance of peers and teachers. A team of CS educators and education experts have been implementing and evaluating SBL in CS courses over the past five years. The BOF will introduce SBL to the SIGCSE audience, and engage them in a discussion of the potential of, evidence for, and practical advice regarding SBL as an instructional approach that can motivate as well as teach students. Discussions will include "war stories" from teachers who have adopted the approach in their courses and hands-on activities to help participants apply SBL to their courses.	Enriching computing instruction with studio-based learning (abstract only)	NA:NA:NA:NA	2018
Lester L. Wainwright:Renee Ciezki:Robert G. Martin	This BOF will provide an opportunity for high school and college faculty to discuss the AP CS A curriculum and to explore possibilities for collaborations and outreach activities between high schools and colleges.	AP CS A: sharing teaching strategies and curricular ideas (abstract only)	NA:NA:NA	2018
Jodi Tims:Ellen Walker:Rachelle Kristof Hippler	Regional celebrations are locally organized, professional conferences modeled after the Grace Hopper Celebration of Women in Computing (GHC). This BOF allows people who have organized or would like to organize such a conference to get together to share successes and challenges. Attendees that have hosted a regional celebration should bring a un-poster (i.e. 8.5 x 11 flyer, 30 copies) that highlights their conference features and/or shares lessons learned. The leaders plan to divide the time between the 5 major areas of conference planning: program, sponsorship, publicity/communications, registration, and site/logistics.	Regional celebrations of women in computing (WiC): best practices (abstract only)	NA:NA:NA	2018
Richard S. Weiss:Michael E. Locasto:Jens Mache	Incorporating information security into the undergraduate curriculum continues to be a topic of interest to SIGCSE attendees. The purpose of this BOF is to help sustain the existing community of educators and researchers interested in bringing ethical hacking skills and an understanding of security into the classroom and relating these topics to the foundations of Computer Science. We would like to bring our colleagues together to share pedagogical practices, stories of hacking and how to use them to inspire our students and communicate complex concepts in computer science and security. We also plan to discuss our own experiences, practices and ongoing efforts (e.g., our infosec teaching experiences, the SISMAT program, EDURange and the dissemination of infosec interactive exercises). SISMAT is one of many alternatives for teaching cybersecurity to undergraduates. It is based on the "Hacker Curriculum" and includes a two-week summer intensive program, a research component and an internship. A description can be viewed at http://www.ists.dartmouth.edu/events/sismat/. An education in computer science can be an important resource in nurturing future leaders in cybersecurity, but only if we enable a community of educators willing to share approaches. This was highlighted by Sally Finch's keynote speech in 2010. At our BOF last year, several people had stories to share, and we plan to focus on that.	Hacking and the security curriculum: building community (abstract only)	NA:NA:NA	2018
Barry Brown	In a flipped classroom, students watch or listen to the lecture at home and do homework in the classroom. The classroom becomes much more interactive and the educator has ample opportunity to provide individualized guidance when it's most needed. The watch-at-home content can include recorded lectures, demonstration videos, adaptive quizzes, or anything in between. Come share your experiences developing "flip" material, learn from others what's involved, and find out whether it's working to improve success and retention.	Flipping the classroom (abstract only)	NA	2018
Semmy Purewal:Owen Astrachan:David Brown:Jeffrey Forbes	Social Networking continues to be a popular past-time among high school and college students. In this birds of a feather session, we will share ideas on integrating social networking topics into computer science courses at the introductory and non-major levels. Additionally we will discuss approaches to integrating social network programming into upper level courses. Finally we will attempt to address the following questions: will social networking draw new students into the computing disciplines the way that video games did in the previous generation? Will it attract new types of students with different expectations? Is social networking just a fad that will have no effect on Computer Science programs? Or is social networking a topic that is better left to other academic disciplines?	Using social networks to engage computer science students (abstract only)	NA:NA:NA:NA	2018
Robert E. Beck	This discussion will connect instructors who are reaching out to their colleagues in the humanities to discover areas of collaboration. It focuses on what these disciplines have to contribute to our knowledge of computing and how computational thinking informs these disciplines. One goal is to lay the foundation for a more general program of study in digital humanities that would reach students who would like to see how computing could enhance their work in history, literature, anthropology, or philosophy, for example.	Digital humanities: reaching out to the other culture (abstract only)	NA	2018
Trish Cornez:Richard Cornez	Attracting computer science students in a liberal arts setting serves to enhance the background and breadth of the class of professional programmers. There is a segment of the student population that is talented and artistic, but may not be aware of the interplay between computer science and the arts or computer science and mathematics and the sciences. Students are acculturated in a visual, interactive, and interdisciplinary world. This BOF will provide a platform for a discussion on how multimedia can be integrated in beginning level computing courses. Discussions will focus on attributes of conventional and unconventional first languages and explore a liberal arts approach to integrate disciplines both scientific and artistic. We envision discussions relevant to (a) mathematicians visualizing processes using multimedia and algorithms, (b) physicists using game programming to explore physical and virtual worlds, (c) computer scientists and behavioral scientists collaborating on responsive systems, (d) musicians, artists, and computer scientists creating computational art. The audience is expected to consist of faculty looking at nontraditional approaches to a first course in programming. Faculty with an aim to attract students to computer science studies will find this discussion useful. Those who feel their curriculum to be too narrowly focused and wish to broaden their curriculum to include the humanities and interdisciplinary approaches to computer science will find like-minded peers to communicate with.	A multimedia and liberal arts approach to a first course in programming and its crossover potential for computer science and the arts (abstract only)	NA:NA	2018
Hal Abelson:David Wolber:Ralph Morelli:Jeff Gray:Chinma Uche	App Inventor for Android is a visual blocks language for building mobile apps. Like Scratch, the language's drag-and-drop blocks interface significantly lowers the barrier to entry. Beginners can immediately build apps that interface with mobile technology (e.g., GPS, Text-to-speech, SMS Texting) and build apps that have a real-world impact. App Inventor has great potential for increasing interest in programming and attracting women and other underrepresented groups to computer science. Students learn by tinkering with their most beloved devices, phones and tablets, and even novices can create apps in an exciting and intuitive environment. App Inventor is relevant to teachers from middle school through the university level who are interested in a highly motivating method of teaching programming. In this BoF, we will discuss the language, its future in K-12 and university education, and its new home at the MIT Center for Mobile Learning.	Teaching with app inventor for android (abstract only)	NA:NA:NA:NA:NA	2018
Daniel D. Garcia:Luke Segars	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part - we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users? Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2018
John Lewis:Anthony Allevato:Stephen Edwards	The use of Android in computing courses is growing. Students find it engaging because it offers a unique opportunity to develop Java apps for mobile devices. Android offers opportunities and challenges in a teaching environment, especially in CS1 and CS2. As a professional-level platform, it incorporates many design idioms that may require students to learn advanced language features earlier. It also introduces logistical complications in setting up development tools and code projects. Existing approaches to software testing and automated grading also must be adapted. This BOF will gather educators interested in using Android in their courses, focusing on issues that arise when balancing the need to teach fundamental concepts with the complexities required to accomplish basic tasks on the Android platform. We look forward to sharing assignments, resources, techniques, and experiences with others interested in Android.	Motivating CS1/2 students with the android platform (abstract only)	NA:NA:NA	2018
Suzanne W. Dietrich:Don Goelman	Databases play a major role across many disciplines for the storage and retrieval of information. Many database educators are establishing collaborations with colleagues representing a diverse spectrum of interests, for both research and pedagogical purposes. Further, the range of cooperating disciplines is expanding, as evidenced by the emergence of new fields such as computational journalism, as well as by the proliferation of discipline-specific dialects of XML. The goal of this Birds-of-a-Feather session is to bring database educators together to share their experiences on interdisciplinary collaborations in an open dialogue that is fostered by this format.	Interdisciplinary database collaborations (abstract only)	NA:NA	2018
Carol Smith	Google Summer of Code is the outreach program aimed at getting university students involved in a 3-month online internship working in open source software development. Google Code-in is the contest aimed at involving 13-18 year olds in open source software development, documentation translation, outreach, research, and more. I will be discussing both programs at this BoF and encouraging students and teachers to get involved. We'll open the forum for discussion amongst the attendees about how to participate, how to get the word out, and answer any questions they may have.	Google summer of code and google code-in BoF (abstract only)	NA	2018
Chris Stephenson:Steve Cooper:Don Yanek:Jeff Gray	Over the last five years, CSTA has built a solid outreach and teacher support network through the work of its chapters and Leadership Cohort. This network has also become a major source of active partnerships between K-12 teachers, their schools, and colleagues from colleges, universities, and industry. The goal of this BOF is to provide concrete examples and suggestions for SIGCSE members interested in building these kinds of partnerships.	Building partnerships across the CS education spectrum (abstract only)	NA:NA:NA:NA	2018
William Turkett:Paúl Pauca:Joel Hollingsworth	As the popularity of mobile devices surges, more and more organizations are looking to exploit the novel interaction methods of mobile devices to re-deploy legacy software or to develop innovative new applications. Many organizations are looking to nearby universities for expertise in this area. At the same time, mobile computing has become increasingly integrated within courses in CS departments. Historically, capstone courses and other advanced electives have resulted in the production of non-trivial software artifacts. This BOF will provide a platform for discussion of how the use of mobile app platforms in such courses can allow for the development of meaningful software projects that engage with and give back to the community and provide rich opportunities for service learning.	Engaging the community with mobile app projects (abstract only)	NA:NA:NA	2018
Paige H. Meeker	At many schools, various disciplines offer travel courses to enhance the knowledge of the student. How can we introduce such courses to computer science departments across the country? This BOF will provide a time of sharing ideas for such courses and discuss travel courses that have been successfully taught. This will include not only the material for the course but also discussion concerning the additional planning overhead that must be considered when traveling - cost, insurance, itinerary, safety, etc.	Have class, will travel (abstract only)	NA	2018
Tracy Camp	The demand for computing professionals continues to grow, while women and minorities remain severely underrepresented at all levels. This opening SIGCSE 2013 keynote asks the crucial question "What can WE do to change the face of computing?" Several answers to this question will be provided in an unusual format with the following all-star cast. Each speaker will take five minutes to share 20 slides (which automatically advance every 15 seconds) to provide a stimulating presentation that ends with "What can YOU do to change the face of computing?"	Changing the face of computing	NA	2018
Henry Walker	Early discussion regarding a talk at the First-Timers Luncheon highlighted the opportunity for an oldtimer to welcome first timers, encourage participation, and provide perspectives. Throughout my career, I have been privileged to be able to connect my personal career with activities for the broad, educational-computing community. This talk reflects on factors that have impacted both my own career and the evolution of broader groups --- particularly SIGCSE. Some general principles (e.g., inclusion, respect, service and social responsibility) seem clear, but even then circumstances present challenges and contradictions. Other principles (e.g., encouraging creative brainstorming, utilizing serendipity, listening to people) may be less obvious, but equally vital. Many have described the SIGCSE community as a professional family, and this talk seeks to celebrate that community as promotes a vision for fulfilling personal careers and continued organizational development.	Principles, priorities, and pressures: personal and organizational	NA	2018
Michael Kölling	Tools to support and improve the learning and teaching of programming have been developed, used and researched for many years. Yet, sometimes it seems we are still faced with exactly the same problems we were trying to tackle a decade ago, or two decades ago. In this talk I will look back on educational software tools, through very subjective blinkers, and present a highly personal slice of the history of some of these efforts. This is followed by an attempt to speculate about the future. Where my crystal balls fail me, I will simply stipulate wishes, requirements and challenges always much easier than presenting facts. Overall, I hope that some current trends in educational software tools emerge.	This much I know: thoughts on the past, present and future of educational programming tools	NA	2018
John Etchemendy	There has been an explosion of interest in Online Education since Stanford made three computer science courses freely available in September 2011 and attracted 300,000 "students." Yet Online Education has been around in various forms for thirty plus years. What accounts for the sudden inflection point sparked by these courses? Will the rush to put courses online prove to be (a) a flash in the pan, (b) the savior of higher education, (c) the death knell of universities as we know them, (d) all of the above?	Online education	NA	2018
Jane Margolis	In the decade since Unlocking the Clubhouse: Women in Computing (MIT Press, 2002) was published, educational institutions have coalesced around the mission of increasing women's participation in computing. Yet, despite the uptick of interest in computer science majors and the surge of technology shaping all aspects of our lives, the numbers of women majoring in computer science are still abysmally small. In this talk, I will further reflect on why this is the case, and make connections to the issues raised in Stuck in the Shallow End: Education, Race, and Computing---the underrepresentation in computer science of students of color. I will examine how underrepresentation in computing relates to the larger educational crisis in this country and issues we face as world citizens. This talk is part of an overarching mission to understand how inequality is produced in this country and the types of social action required to equalize opportunities and broaden participation in computing.	Unlocking the clubhouse: a decade later and now what?	NA	2018
Yolanda Rankin:Jakita Thomas:Quincy Brown:Leshell Hatley	NA	Shifting the paradigm of african-american students from consumers of computer science to producers of computer science	NA:NA:NA:NA	2018
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:Richard LeBlanc	For over 40 years, the ACM and IEEE-Computer Society have sponsored the creation of international curricular guidelines for undergraduate programs in computing. These Computing Curricula volumes are updated approximately every 10-year cycle, with the aim of keeping curricula modern and relevant. The next volume in the series, Computer Science 2013 (CS2013), is currently in progress. This panel seeks to update and engage the SIGCSE community in providing feedback on a complete draft of the CS2013 report (called the Ironman report), which will be released shortly before SIGCSE. Since the Ironman report is the penultimate draft of the CS2013 report, this panel is an especially important venue for starting the last round of feedback that will impact the final CS2013 curricular guidelines.	ACM/IEEE-CS computer science curriculum 2013: reviewing the ironman report	NA:NA:NA:NA	2018
Michael Goldweber:John Barr:Elizabeth Patitsas	NA	Computer science education for social good	NA:NA:NA	2018
Jodi Tims	NA	Session details: Paper - data structures	NA	2018
Ivona Bezakova:James E. Heliotis:Sean P. Strout	We present three open-ended freshman projects where students design and implement their own player strategies for well-established board games: Quoridor by Mirko Marchesi (Gigamic), San Francisco Cable Cars by Dirk Henn (Queen Games), and The aMAZEing Labyrinth by Max J. Kobbert (Ravensburger). Unlike modern computer games, most board games are inherently discrete. For example, the board tends to have a fixed number of allowed positions for the game pieces and every player performs a search through a finite number of possible moves to decide which move to take next. As such, designing a player strategy for a board game provides a very natural context for basic data structures, searching algorithms, and other concepts typically covered in a freshman-level computer science sequence. Furthermore, the project allows for continual improvements to one's strategy, targeting both beginners as well as more advanced programmers.	Board game strategies in introductory computer science	NA:NA:NA	2018
John W. Coffey	A significant rethinking of the computer science curriculum at a regional comprehensive university has led to a much tighter integration of discrete mathematics, data structures and algorithm analysis in a two-course Data Structures and Algorithms sequence. The courses are 4 semester hours each with two hour weekly labs. The new approach provides good support for a substantially increased emphasis on the reinforcement of theoretical constructs with empirical studies. The nature of the programming assignments has been particularly impacted by these efforts to reinforce the theoretical with the empirical. This article has a focus on the second course content and conduct, and how these modifications support a different approach to the course projects. This article also contains a report of favorable trends in completion percentages of the course under the new regime.	Integrating theoretical and empirical computer science in a data structures course	NA	2018
Wolfgang Paul:Jan Vahrenhold	We present the result of assessing first-year students' misconceptions related to algorithms and data structures. Our study confirms findings from previous small-scale studies but additionally broadens the scope of the topics and methods investigated. The evaluation of our experiments sheds light on dependencies between active and passive knowledge as well as on the instruments used; in particular, we conclude that there is no "one size fits all" instrument but that instruments should be selected depending on the topic at hand.	Hunting high and low: instruments to detect misconceptions related to algorithms and data structures	NA:NA	2018
Adrian German	NA	Session details: Paper - peer instruction	NA	2018
Cynthia Bailey Lee	As computer programming is increasingly considered an essential literacy skill for all students, MATLAB courses in particular can play a role in introducing non-major students to a tool commonly used in many of their fields. This paper reports on our department's experience introducing a CS1 in MATLAB for non-majors course. The course assumed no prior programming experience and no training in linear algebra. Without linear algebra and without the ability to do domain-specific tailoring, we turned to Media Computation to contextualize the skills and motivate students. Media Computation is an approach to programming instruction that focuses on manipulation of visual, audio, and video media. The course design also featured the Peer Instruction lecture format, in which lectures are punctuated by frequent questions that students answer individually and in small groups. To our knowledge, this represents the first time that Media Computation and Peer Instruction pedagogies have been comprehensively adapted to a MATLAB course. This work shares selected materials designed for this course, and reports outcomes of the two terms the course has been offered.	Experience report: CS1 in MATLAB for non-majors, with media computation and peer instruction	NA	2018
Beth Simon:Julian Parris:Jaime Spacco	In this paper we look at the impact on student learning of how a class is taught. We compare 2 sections of a non-majors CS0 course offered in the same term, by the same instructor, covering the same content and utilizing the same book, labs and exams. One section was taught using standard lecture practices including lecture from slides, live coding and weekly quizzes. The other section was taught using the Peer Instruction (PI) method that actively engages students in constructing their own learning, instead of absorbing understanding from the instructor's explanations. Using a factorial analysis of variance, we find a main effect of instructional method on final exam grade (F (1,200) = 5.87, p = 0.016) with students in the Peer Instruction section scoring an average 5.7% higher than in the standard lecture practices section. We find no significant interactions among gender and grade or class status (lower or upper division) and grade. In a separate analysis, we also find the interaction of instructional method and high school background to be significant (F (1,147) = 7.48, p = 0.007). In discussion we consider the meaning of these results for educators and describe questions for future work.	How we teach impacts student learning: peer instruction vs. lecture in CS0	NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey Lee:Leo Porter	Peer Instruction has recently gained interest in computing as an effective active learning pedagogy. The general focus of PI research has been on the in-class portion of PI: multiple choice questions and group discussion. Here, our focus is the reading quizzes completed by students for purposes of class preparation. These quizzes contain content questions but also ask for difficulties or confusion with course material. Consistent with expectations, we demonstrate that providing correct responses to quiz questions positively correlates with other course assessments. Somewhat counter-intuitively, we find that identifying confusions, noting problematic sections, or asking questions about the reading are also correlated with lab grades.	Peer instruction in computing: the role of reading quizzes	NA:NA:NA	2018
Suzanne Buchele	NA	Session details: Paper - student dynamics	NA	2018
Murali Mani:Quamrul Mazumder	Metacognition refers to one's knowledge about one's cognitive processes, and is often associated with intelligence. Students who have good metacognition skills typically perform better in their cognitive tasks. For the Fall and Winter semesters in 2011-12, we incorporated metacognition into our computer science courses (both undergraduate and graduate level courses), so that the student becomes more aware of his/her own understanding of the various topics of the course. In this paper, we describe how we incorporated metacognition into our courses, and present results from our analysis of the data that we have gathered over the various courses.	Incorporating metacognition into learning	NA:NA	2018
Orit Hazzan:Gadi Har-Shai	In this paper, we describe a course on computer science and software engineering soft skills offered by the Department of Computer Science (CS) at the Technion -- Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip the Technion's CS graduates with such skills. This request actually reflects the industry's recognition of the importance of soft skills in software development processes, not only on the managerial level, but also among software team members. The paper describes the course and aims to deliver the message that like soft concepts of computer science (e.g., abstraction and readability), which cannot be imparted rigidly using formal definitions, soft skills too cannot be studied and taught formally and, rather, should be learned and grasped gradually over a certain period of time, based on students' engagement, active learning, and reflection. Furthermore, students must accept such soft skills as concepts that can neither be defined formally nor evaluated adequately.	Teaching computer science soft skills as soft concepts	NA:NA	2018
Nanette Veilleux:Rebecca Bates:Cheryl Allendoerfer:Diane Jones:Joyous Crawford:Tamara Floyd Smith	Retaining students in computer science majors has been a persistent topic among computer science educators for almost two decades. Researchers have examined the relationship between belonging and engagement, self-efficacy, retention and persistence. Our quantitative research suggests that a student's sense of belonging is related to a student's perception of his ability, possibly more so than to actual performance. Our qualitative analysis further suggests that feelings of belonging can influence students' attitudes toward the mutability of ability, based on conversation and support from their academic and non-academic communities. Supporting a student's sense of belonging both to the discipline and their supportive communities can improve the academic resilience of computer science students, thus improving retention.	The relationship between belonging and ability in computer science	NA:NA:NA:NA:NA:NA	2018
Debra Goldberg	NA	Session details: Paper - non-majors	NA	2018
David G. Sullivan	Relational databases and other collections of data are increasingly prevalent across a wide range of professions and disciplines. However, most courses on databases and data mining are designed for computer science majors, and students who wish to familiarize themselves with these topics must first take several prerequisite courses. This paper presents the design and implementation of a course for non-majors that provides a data-centric introduction to computer science. The course covers the basics of databases and data mining, and it also offers an introduction to programming and data visualization. By teaching a variety of computational methods for processing collections of data, the course provides students with tools they can use in their fields of study and future professions, while also exposing them to key concepts from computer science. The course has been well received by students from a variety of majors, and survey results suggest that it has had a positive impact on their perceptions of computer science.	A data-centric introduction to computer science for non-majors	NA	2018
Sridhar Iyer:Sahana Murthy	The goals of a typical Networking course for Computer Science majors include getting students to learn the relevant concepts, delving into details of various protocols, and using Networking utilities. Such focus on low-level details is unlikely to be interesting to non-majors. Also, there is a larger danger of students not understanding the basic concepts due to the perceived complexity in the details and technical jargon. We address both these issues by teaching Networking concepts through solving problems in analogical real-life scenarios. The main idea of our approach is: The instructor poses an analogy problem, students work in groups to devise solutions, followed by a class discussion to map the analogy problem as well as its solution to their corresponding technical details in Networking domain. Thus we emphasize the core concepts of Networking and demystify the specialized technical details. Across three offerings of this course, we have found that: (i) our students' performance on typical Networking questions is comparable or higher than traditionally taught students, (ii) students can solve unseen technical problems, (iii) students' confidence in tackling technical questions is high.	Demystifying networking: teaching non-majors via analogical problem-solving	NA:NA	2018
Marie desJardins	The Computation, Complexity, and Emergence honors seminar at UMBC is designed to introduce an interdisciplinary undergraduate audience to the principles of complex systems that permeate our world. The course goals are for students to understand how simple individual behaviors can lead to complex global behaviors and to be able to identify the sources and effects of complexity in natural and artificial systems. The course is designed to increase students' comfort and skill level in scientific writing, participating actively in written and oral discussions, and learning collaboratively in an interdisciplinary community. The paper describes the course and the innovative elements that lead to student engagement, then presents data from pre- and post-assessments about student attitudes and perceptions.	Computation, complexity, and emergence: an interdisciplinary honors seminar	NA	2018
Adam Anthony	NA	Session details: Paper - approaches for outreach	NA	2018
D. Brian Larkins:J. Christopher Moore:Louis J. Rubbo:Laura R. Covington	This paper details the development and implementation of a summer robotics camp for middle school children. The Cognitive Apprenticeship (CA) model is used as the framework for developing the camp. Specifically, methods such as modeling, coaching, scaffolding, articulation, reflection, and exploration are integrated throughout the camp structure. Activities include the use of an engineering notebook, debugging logs, and various cognitive challenges, all supervised by a team of expert mentors. During the two-week summer camp, participants realized a positive shift in attitudes towards science, developed common engineering design skills, and showed increased proficiency in the reasoning pattern of isolation of variables. The CA framework, in conjunction with robotics are an excellent way to build interest in STEM and develop skills in engineering, science, and computational thinking.	Application of the cognitive apprenticeship framework to a middle school robotics camp	NA:NA:NA:NA	2018
Heidi Webb:Mary Beth Rosson	In this paper we describe a set of computing activities that were used in an outreach enrichment program for middle school girls. The computing activities used a combination of scaffolded exam-ples and minimalist workbooks to introduce and support interaction with computational thinking (CT) concepts, including problem solving, abstraction and basic computational vocabulary. We describe the activities briefly, followed by a discussion of the girls' experiences, drawing primarily from interviews conducted at the end of each activity.	Using scaffolded examples to teach computational thinking concepts	NA:NA	2018
Yasmin Kafai:Jean Griffin:Quinn Burke:Michelle Slattery:Deborah Fields:Rita Powell:Michele Grab:Susan Davidson:Joseph Sun	This study reports on the design, implementation, and evaluation of a service-learning course based on a "cascading mentoring" model linking together the faculty, administration, and undergraduates of an urban university's computer science department with local high school students. We present findings from surveys and post-interviews that illustrate undergraduates' and high school students' experiences in the program and how their perceptions of computing and mentoring changed based upon the outreach. In our discussion, we focus on the institutional and conceptual challenges of implementing the community service course within the university's computer science department, while also highlighting the learning opportunities for streamlining such a model for future iterations.	A cascading mentoring pedagogy in a CS service learning course to broaden participation and perceptions	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Stoney Jackson:Stan Kurkovsky:Eni Mustafaraj:Lori Postner	Many institutions are considering offering a course on mobile application development to harness its popularity to attract new majors, retain those we have, and to motivate learning. The panelists present four experiences in teaching a mobile application development course. They share their experiences in an effort to start a discussion about mobile application development in computing curricula. In the first half of the session, each panelist presents their experience including: an overview of the course; its audience, position in the curriculum, and pre-requisites; the platform, language, and development environment used; positives about the course; and roadblocks and negatives about the course. This provides a foundation for an audience directed discussion in the second half.	Panel: mobile application development in computing curricula	NA:NA:NA:NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop	The new CS curricular recommendations call for a heightened emphasis on parallel and distributed computing (PDC), in response to the explosive growth of multicore processors and "cloud" distributed computing. How can an educator incorporate this urgent priority into undergraduate CS courses? This panel describes four approaches: exploring GPU architecture and programming in a Computer Organization course; incorporating shared memory parallelism into several core courses; adding the PDC notion of reduction to multiple CS courses; and inserting short PDC modules into many courses at multiple curricular levels. We will illustrate how these contrasting approaches all respond to PDC recommendations within the feasibility constraint of incrementally modifying individual courses.	Strategies for adding the emerging PDC curriculum recommendations into CS courses	NA:NA:NA:NA:NA	2018
Matthew Boutell:Tom Armstrong:Linda Ott	The Fulbright Scholar Program is the flagship academic exchange program of the U.S. Department of State; approximately 1,100 American scholars travel worldwide annually to lecture and conduct research. The program is open to all U.S. citizens with university teaching experience and a Ph.D. or equivalent professional/terminal degree. Opportunities for Computer Science educators to win Fulbright scholarships are many. The goal of this panel is to inform the community of computer science educators about the Fulbright program, including the application process, and to answer questions about the program. After an introduction to the program at large, the panelists will each give a 10-15 minute overview of their personal experience as a Fulbright scholar in 2011-2012, leaving ample time for questions from educators considering applying for a Fulbright scholarship. The panelists will offer diverse perspectives based on their experiences in India, Zambia, and Siberia.	Fulbrights abroad in computer science	NA:NA:NA	2018
Sherri Goings	NA	Session details: Paper - alternatives to lectures	NA	2018
Kate Lockwood:Rachel Esselstein	The inverted classroom is a pedagogical technique in which passive knowledge acquisitions activities (e.g. lecture, readings) are assigned as homework and hands-on knowledge assimilation tasks (e.g. problem solving, lab, creative work) replace traditional lecture during classroom contact hours. Recent initiatives like the Kahn Academy [1] have raised the visibility of the inverted classroom and it is being adopted in disciplines across the curriculum from Economics [2] to Biology [3]. In this experience report we present successful inverted classroom pilots in linear algebra and introductory programming classes. In particular, this pilot focused on combining the inverted classroom philosophy with other proven pedagogical techniques (e.g. inquiry based learning) there was also a focus on creating free materials that could replace traditional, expensive textbooks when using the inverted classroom. We explain how the inverted classroom pedagogy is well aligned with the hands-on practice required in both math and computer science and discuss our plans to continue our experiment and to expand it beyond the original two classes.	The inverted classroom and the CS curriculum	NA:NA	2018
Michael James Scott:Gheorghita Ghinea	It has been claimed that learning can be facilitated by a positive academic self-concept. Therefore, reinforcing this construct may benefit students and the application of 'projective identity' in educational multimedia could be a means of achieving this. To test this hypothesis, two versions of a debugging exercise were developed, with one incorporating elements of fantasy role-play. They were compared through a double-blind parallel-group randomised trial using a sample of 36 undergraduate computing students. Factor scores for academic self-concept in programming were imputed from responses to a 5-point Likert scale, validated through a confirmatory factor analysis of 91 responses. An ANCOVA revealed that students using the fantasy role-play learning activity developed a stronger self-concept than the control group, with respective gains of 2.4% and 1.1%. However, further work is required to determine if such modest gains are practically significant, can be further enhanced and maintained.	Integrating fantasy role-play into the programming lab: exploring the 'projective identity' hypothesis	NA:NA	2018
Andrea Salgian:Teresa M. Nakra:Christopher Ault:Yunfeng Wang	In this paper, we describe how a multidisciplinary undergraduate course in Conducting Robots becomes a venue for fostering creativity and teaching strategies for creativity enhancement. We perform a number of creativity measurements and explain our results in the context of creativity research.	Teaching creativity in computer science	NA:NA:NA:NA	2018
Ashish Amresh	NA	Session details: Paper - instructional technologies	NA	2018
Andrew P. Black:Kim B. Bruce:Michael Homer:James Noble:Amy Ruskin:Richard Yannow	Grace is a new object-oriented language that supports a variety of approaches to teaching programming. It integrates accepted new ideas in programming languages into a simple language that allows students and teachers to focus on the essential complexities of programming rather than the accidental complexities of the language. We motivate Grace, review its design, and evaluate it against Kolling's criteria.	Seeking grace: a new object-oriented language for novices	NA:NA:NA:NA:NA:NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz:Philip Meznar:Reed Phillips:Alex Weidner	Electronic books (ebooks) are becoming commonplace and widespread. Highly interactive ebooks actively engage the reader and have great potential to increase student learning. With the recent release of Apple's iBooks Author application, instructors can develop highly interactive ebooks. This paper reports on our experience of creating an interactive Prolog programming ebook using iBooks Author. A particular focus is placed on ebook features pertinent to undergraduate computer science instruction including code listings, coding tutorials, and integration with course management systems and automated grading systems. This work is supported, in part, by two NSF grants.	Developing a highly interactive ebook for CS instruction	NA:NA:NA:NA:NA	2018
David J. Malan	We introduce CS50 Sandbox, an environment for secure execution of untrusted code. Implemented as an asynchronous HTTP server, CS50 Sandbox offers clients the ability to execute programs (both interactive and non-interactive) written in any compiled or interpreted language in a tightly controlled, resource-constrained environment. CS50 Sandbox's HTTP-based API takes files, command lines, and standard input as inputs and returns standard output and error plus exit codes as outputs. Atop CS50 Sandbox, we have built CS50 Run, a web-based code editor that enables students to write code in a browser in any language, whether compiled or interpreted, that's executed server-side within a sandboxed environment. And we have built CS50 Check, an autograding framework that supports black- and white-box testing of students' code, leveraging CS50 Sandbox to run series of checks against students' programs, no matter the language of implementation. We present in this work the pedagogical motivations for each of these tools, along with the underlying designs thereof. Each is available as open source.	CS50 sandbox: secure execution of untrusted code	NA	2018
Andrea Danyluk	NA	Session details: Paper - tough curricular challenges	NA	2018
Charles B. Border	Cloud computing is a new buzzword for a group of old technologies that have been integrated to create a system that is more than the sum of its parts. After teaching a seminar in cloud computing three times over the last year I have gained a better understanding of the fundamental and enabling technologies that should be brought into our curriculum to facilitate our students becoming competent users of cloud computing. Developing and deploying an application on a cloud architecture appears very similar to working with any remotely accessible server architecture but to work with it effectively our students need to understand the following technologies: firewalls, addressing and sub-netting, encryption, scripting, storage architectures, and virtualization. There are several enabling technologies that make the cloud more than just the sum of its parts. Some of the most important enabling technologies include: segregation of services and multi-systems architectures, workload characterization, identity federation, load balancing, and content distribution networks.	Cloud computing in the curriculum: fundamental and enabling technologies	NA	2018
Scott Dexter:Elizabeth Buchanan:Kellen Dins:Kenneth R. Fleischmann:Keith Miller	We report on some initial findings of an investigation into current practices in, and the need for, information/computer ethics curricula at the graduate level. We give some results and analysis from a survey of faculty and graduate students at four diverse U.S. institutions. Faculty and students agree that students will face professional ethical challenges after graduation, but assessment of students' preparedness for these challenges differs widely across the surveyed institutions. A clear majority of faculty and students expressed support for an elective graduate-level ethics course, and roughly half supported a required graduate-level ethics course.	Characterizing the need for graduate ethics education	NA:NA:NA:NA:NA	2018
Matti Tedre	All major computing curricula recommendations mention methodological skills and knowledge as an important learning objective in undergraduate and graduate education. None of those curricula recommendations, however, include a methodology course for students. One reason for that lack might be the stunning diversity of computing fields and the unique methods each branch of computing uses in their research. A methodology course in computing has to make a choice between three options: a narrow but deep specialization in some techniques and methods, a broad but superficial covering of a large number of methods, and a higher-level view on the principles of methodology and research design. This paper adopts the high-level approach, and presents a course description for a methodology course that aims at providing students understanding of how the elements of a research study link together.	Methodology education in computing: towards a congruent design approach	NA	2018
Carl Alphonce	NA	Session details: Paper - retention	NA	2018
Leo Porter:Beth Simon	Beginning in 2008, we introduced a new CS1 incorporating a trio of best practices intended to improve the quality of the course, appeal to a broader student body, and, hopefully, improve retention in the major. This trio included Media Computation, Pair Programming, and Peer Instruction. After 3 and 1/2 years (8 CS1 classes, 3 different instructors, and 1011 students passing the course) we find that 89% of the majors who pass the course are still studying computing one year later. This is an improvement of 18% over our average retention of 71% for the previous version of the course (measured since Fall 2001). If the focus shifts from retention of passing CS1 majors to retention of CS1 initially enrolled majors, multiple improvements--fewer students drop, more students pass, and more passing students are retained--compound to increase retention by 31% (from 51% to 82%). In this paper we analyze further aspects of these results, detail the three instructional design choices, and consider how they impact issues known to affect retention.	Retaining nearly one-third more majors with a trio of instructional best practices in CS1	NA:NA	2018
Bethany Bowling:Heather Bullen:Maureen Doyle:John Filaseta	An early undergraduate research program for rising sophomores and juniors at risk of leaving STEM degree programs is described. Students are paid a stipend to work part-time, at a maximum of twenty hours per week, as part of a research team. Faculty researchers are not financially compensated for working with students. The program successfully brings together STEM departments to target students who are at risk of leaving their major. Initial results demonstrate a positive influence of undergraduate research in retaining STEM majors and improvements in Student Assessment of Learning Gains. Future work, including institutionalization of the project, is discussed.	Retention of STEM majors using early undergraduate researchexperiences	NA:NA:NA:NA	2018
Leo Porter:Cynthia Bailey Lee:Beth Simon	Peer Instruction (PI) is a teaching method that supports student-centric classrooms, where students construct their own understanding through a structured approach featuring questions with peer discussions. PI has been shown to increase learning in STEM disciplines such as physics and biology. In this report we look at another indicator of student success the rate at which students pass the course or, conversely, the rate at which they fail. Evaluating 10 years of instruction of 4 different courses spanning 16 PI course instances, we find that adoption of the PI methodology in the classroom reduces fail rates by a per-course average of 61% (20% reduced to 7%) compared to standard instruction (SI). Moreover, we also find statistically significant improvements within-instructor. For the same instructor teaching the same course, we find PI decreases the fail rate, on average, by 67% (from 23% to 8%) compared to SI. As an in-situ study, we discuss the various threats to the validity of this work and consider implications of wide-spread adoption of PI in computing programs.	Halving fail rates using peer instruction: a study of four computer science courses	NA:NA:NA	2018
Kristy Boyer	NA	Session details: Paper - CS education research	NA	2018
Brian Dorn:Allison Elliott Tew	We have begun the process of examining how students perceive the field of computer science by employing a novice-to-expert continuum framework. As part of this exploration we have developed and are validating the Computing Attitudes Survey (CAS). In this study, our research focuses on how students develop expert-like attitudes and what effect an introductory course may have on that development. In particular, we find that the CAS instrument can be used to detect pre/post attitude shifts after a single introductory course of instruction and that individual subpopulations show positive attitude gains across gender, area of study and pedagogy Further, the CAS can also be used to identify significant pre/post attitude shifts among individual component factors, groupings of items on the survey that characterize different aspects of novice thought processes.	Becoming experts: measuring attitude development in introductory computer science	NA:NA	2018
Noa Ragonis:Gila Shilo	The cognitive abilities of learners have been studied extensively in both psychological and educational contexts. In the field of education, attention is placed on high-order thinking strategies, while in computer science education the focus is on cognitive skills required for solving problems. Since any process of problem solving is based on answering questions, it is worth looking at the questions we ask. In this conceptual framework, the current study aims to investigate the cognitive requirements from learners answering questions that arise from the questions' formulation. The study focuses on a linguistic investigation of keywords that appear in questions aimed at promoting the learners' high-order thinking when solving problems. To sharpen our attention to the uses of particular keywords in questions, we present a comparison between questions used in two different disciplines, computer science and linguistics. The paper outlines and describes nine question keyword categories, demonstrates the question keyword categories, and argues that the cognitive requirements from learners answering those questions are very similar for both disciplines.	What is it we are asking: interpreting problem-solving questions in computer science and linguistics	NA:NA	2018
Matthew Hertz:Sarah Michele Ford	Instructors of the introductory computer science courses, commonly called "CS1" and "CS2", face a large number of choices when designing their classes. Instructors have available to them a multitude of ways to explain each topic as well as course-wide choices such as objects-first or objects-late or using a functional or procedural language. Understanding how these options can affect student learning would help simplify these decisions. Unfortunately, just comparing how well students perform may not be accurate as it ignores the many confounding factors that could also have made a difference. To get beyond that problem, this study investigates underlying factors that affect student learning. Using a survey of instructors, we find that students' abilities are nearly always correlated with the importance that the instructor placed on a particular topic. Our results also highlight several "hard" topics for which student mastery and topic importance were not correlated in CS1 and only weakly correlated in CS2. While one might expect the time spent covering a topic in class to also be correlated with student mastery, we find little evidence of this. In fact, for some basic programming concepts, we document negative correlations between instructional time and learning. We discuss how instructors can use these results when organizing their courses and how the computer science education community can use this finding of "hard" topics to focus their efforts.	Investigating factors of student learning in introductory courses	NA:NA	2018
Elizabeth K. Hawthorne:Florence A. Appel:Carol L. Spradling:Lisa C. Kaczmarczyk	Social and professional principles were included in ABET computer science accreditation standards in 1987 and first appeared in the ACM/IEEE-CS Computing Curricula in 1991. This moderated panel presented the Social Issues and Professional Practice Knowledge Area (SP KA) of the 2013 ACM/IEEE-CS draft curricular guidelines for computer science. Specific knowledge units from the Ironman version were highlighted for discussion along with course and module exemplars	Computer science curriculum 2013: social and professional recommendations from the ACM/IEEE-CS task force	NA:NA:NA:NA	2018
Jeffrey Forbes:Victor Piotrowski:Jane Prey:D. Suzanne Westbrook	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty and discussing the requirements and guidelines for programs in these areas. The session includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA	2018
Lynn Andrea Stein:Debbie Chachra:Yevgeniya V. Zastavker:Caitrin Lynch:Alisha Sarang-Sieminski	Being a computer science and engineering student is experienced differently by male and female students; gendered interactions affect the development of academic and professional role confidence as well as professional identity. In this hands-on special session, participants explore concepts of gender schemas, privilege, and identity using a range of interactive activities. We have found these concepts useful in framing discussion with our students and in understanding and improving student experiences. The session introduces and obtains feedback on a Gender and Engineering Exploration Kit, which the participants are encouraged to review, use, and share at their home institutions.	An interactive exploration of gender and computing: unpacking the student experience	NA:NA:NA:NA:NA	2018
Daniel D. Garcia:David Ginat	One man's "magic" is another man's engineering. Robert A. Heinlein Some beginning students have fuzzy mental models of how the computer works, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. This is a continuation of our standing-room only SIGCSE 2012 special session. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that the audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of new magic tricks whose answer is grounded in computer science: modulo arithmetic, human-computer interfaces, algorithms, binary encoding, invariants, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	Demystifying computing with magic, continued	NA:NA	2018
Laurie King	NA	Session details: Paper - tools	NA	2018
Jennifer Bayzick:Bradley Askins:Sharon Kalafut:Michael Spear	We introduce ALE, a new framework for writing games for the Android platform. The primary motivation behind ALE is to emphasize reading code before writing it. Beginners read game code to learn how levels can be made, and advanced users read the code of ALE itself to learn how to create useful and extensible libraries. To date, roughly 200 students at our university have used ALE, ranging from first-semester engineering undergraduates through Masters students. ALE has proven useful in teaching non-majors about CS, in making introductory CS programming courses more exciting, and in encouraging creativity, entrepreneurship, and good program design in upper-level electives. Based on these experiences, we encourage educators at all levels to consider using ALE to improve students' ability to learn by reading code.	Reading mobile games throughout the curriculum	NA:NA:NA:NA	2018
Bryce Boe:Charlotte Hill:Michelle Len:Greg Dreschler:Phillip Conrad:Diana Franklin	Scratch programming has risen in prominence, not only as a potential language for K-12 computer science, but also in introductory college courses. Unfortunately, grading Scratch programs is time-consuming, requiring manual execution of each program. Automation of this process is greatly complicated by the very reason Scratch is an attractive introductory language--the projects are multimedia in nature, requiring eyes and ears to fully appreciate. We propose Hairball, an automated system that can be used both by a student to point out potential errors or unsafe practices, and by a grader to assist in inspecting the implementation of Scratch programs. Because automatic analysis will not be able to determine the sensory effect, Hairball focuses instead on the implementation, including safe/robust programming practices, providing a "lint-like" tool for Scratch. In this case study, we have created an initial set of Hairball plugins that detect and label instances of initialization of Scratch state, synchronization between say and sound blocks, synchronization between broadcast and receive blocks, and use of timing and loops for complex animation. Our evaluation shows that Hairball is very useful in conjunction with manual analysis. Overall, Hairball was actually slightly more accurate than manual analysis at labeling these instances. Specifically for broadcast/receive, Hairball's analysis correctly classified 99% of the 432 instances, manual analysis only 81%. Overall, if Hairball was only used to identify correctly implemented instances, with manual analysis for the remainder, it would remove 76% of the instances for the manual analysis and assist in the rest, with a false positive rate of less than 0.5%.	Hairball: lint-inspired static analysis of scratch projects	NA:NA:NA:NA:NA:NA	2018
Suzanne P. Balik:Sean P. Mealin:Matthias F. Stallmann:Robert D. Rodman	Combinatorial graphs, often conveyed as node-link diagrams, figure prominently in Computer Science and other Science, Technology, Engineering, and Mathematics (STEM) disciplines. Unfortunately, they are most often inaccessible to blind students and professionals. This paper introduces GSK, a self-contained Graph SKetching tool that allows blind and sighted people to easily create, edit, and share graphs in real-time using interaction mechanisms (mouse, keyboard, monitor, screen reader) that are standard for them. GSK was successfully used by a blind Computer Science student and his sighted instructors to create and access graphs specific to his automata theory and operating systems courses. Our hope is that GSK will enable more blind STEM students and professionals to actively participate in their disciplines by providing them and their sighted colleagues with a cross-collaboration tool that allows them to share graphs just as easily as they share text and word processing documents.	GSK: universally accessible graph sketching	NA:NA:NA:NA	2018
Martha Kosa	NA	Session details: Paper - student behaviors and experiences	NA	2018
Katrina Falkner:Nickolas J.G. Falkner:Rebecca Vivian	Collaborative learning encourages deeper learning, producing significant benefit in learning outcomes. There has been an increasing trend to adopt collaborative activities, due to the expected learning benefits but also because of the expected social benefits and their impact on transition concerns. However, collaborative activities may also introduce additional stress and anxiety for students as they cope with altered participation expectations, and the need to develop collaboration, communication and management skills concurrently with their discipline skills. In this paper we describe a phenomenographic analysis of student's reflections on collaborative activities, including their perceptions of the purpose of such activities, and corresponding behaviours.	Collaborative learning and anxiety: a phenomenographic study of collaborative learning activities	NA:NA:NA	2018
Adrienne Decker:Elizabeth Lane Lawley	There is little argument that creating experiences for students that will increase student success and retention is a goal that is shared by anyone teaching courses. In computing courses, we have seen a lot of focused attention on the first year introductory courses as it has been shown that it is failure in these courses that drives students away from the discipline. In this paper we describe success we have had with first year students through the creation of achievement system for the undergraduate experience. Through the Just Press Play project and its associated achievements, we observed a significant shift in student behavior in relation to our first year students which lead to a greater level of student success in their first course.	Life's a game and the game of life: how making a game out of it can change student behavior	NA:NA	2018
Anya Tafliovich:Jennifer Campbell:Andrew Petersen	This work explores the effects of prior exposure to programming on student experiences in an introductory computer programming course CS1). We take a student-focused approach: using a combination of surveys and semi-structured interviews, we obtain information on the student experiences in CS1 and their relationship to prior programming experience (PE). The analysis of the results provides insight into the following two questions: a) How does PE affect peer interaction: pair programming sessions, assignment partnerships, and online and in-class interactions? b) What are the students' beliefs on the relationship between PE and success in the course?	A student perspective on prior experience in CS1	NA:NA:NA	2018
Chris Hundhausen	NA	Session details: Paper - introducing CS in high school	NA	2018
David Thompson:Tim Bell:Peter Andreae:Anthony Robins	In 2011 New Zealand introduced computer science into high schools after a long period when computing was mainly focussed on training students to be users. The transition was rapid, and teachers had little time to upskill to prepare for the new topics, and yet there was widespread voluntary adoption of the new standards. The role of teachers and the national teachers' organisation in making the change has been pivotal, and this paper reviews the changes from the teachers' perspective. This story is intended to inform those planning similar changes in other countries, and provide a context for the next steps in NZ. The discussion centres around a survey of 91~teachers, which reveals strong intrinsic motivation from teachers to make the changes, a mixture of prior knowledge and skills that teachers shared with each other through peer support and online communication, a low level of confidence as teachers of computer science, and a need for further professional development.	The role of teachers in implementing curriculum changes	NA:NA:NA:NA	2018
Andrea Arpaci-Dusseau:Owen Astrachan:Dwight Barnett:Matthew Bauer:Marilyn Carrell:Rebecca Dovi:Baker Franke:Christina Gardner:Jeff Gray:Jean Griffin:Richard Kick:Andy Kuemmel:Ralph Morelli:Deepa Muralidhar:R Brook Osborne:Chinma Uche	In this paper we analyze the CS Principles project, a proposed Advanced Placement course, by focusing on the second pilot that took place in 2011-2012. In a previous publication the first pilot of the course was explained, but not in a context related to relevant educational research and philosophy. In this paper we analyze the content and the pedagogical approaches used in the second pilot of the project. We include information about the third pilot being conducted in 2012-2013 and the portfolio exam that is part of that pilot. Both the second and third pilots provide evidence that the CS Principles course is succeeding in changing how computer science is taught and to whom it is taught.	Computer science principles: analysis of a proposed advanced placement course	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Rex Page:Ruben Gamboa	We report on a course, entitled "How Computers Work: Logic in Action", which we have offered the past few years at the University of Oklahoma, and which will be offered soon at the University of Wyoming. Intended for non-CS majors, this course is our answer to the question, What would you teach if you had only one course to help students grasp the essence of computation and perhaps inspire a few of them to make computing a subject of further study? Assuming no prior knowledge of computers or mathematics beyond high school algebra, the course is compatible with the "Computer Science: Principles" approach proposed by the College Board, although it is a significant departure from the pilot courses that are currently following this approach.	A more formal approach to "computer science: principles"	NA:NA	2018
Allison Elliott Tew	NA	Session details: Paper - socio-cultural issues	NA	2018
Niral Shah:Colleen M. Lewis:Roxane Caires:Nasar Khan:Amirah Qureshi:Danielle Ehsanipour:Noopur Gupta	This paper offers a framework for equitable instruction that emerged while designing a computer science course for students entering the sixth grade. Leveraging research from a range of fields, including sociology, mathematics education, and the learning sciences, we argue that in addition to material resources, such as rich course content and quality instruction, equity also depends on students' access to non-material resources, such as productive domain identities and peer relationships. We illustrate each dimension of the framework by describing in detail a core set of pedagogical practices implemented during a summer course.	Building equitable computer science classrooms: elements of a teaching approach	NA:NA:NA:NA:NA:NA:NA	2018
Neil Christopher Charles Brown:Michael Kölling:Tom Crick:Simon Peyton Jones:Simon Humphreys:Sue Sentance	Computer science in UK schools is a subject in decline: the ratio of Computing to Maths A-Level students (i.e. ages 16--18) has fallen from 1:2 in 2003 to 1:20 in 2011 and in 2012. In 2011 and again in 2012, the ratio for female students was 1:100, with less than 300 female students taking Computing A-Level in the whole of the UK each year. Similar problems have been observed in the USA and other countries, despite the increased need for computer science skills caused by IT growth in industry and society. In the UK, the Computing At School (CAS) group was formed to try to improve the state of computer science in schools. Using a combination of grassroots teacher activities and policy lobbying at a national level, CAS has been able to rapidly gain traction in the fight for computer science in schools. We examine the reasons for this success, the challenges and dangers that lie ahead, and suggest how the experience of CAS in the UK can benefit other similar organisations, such as the CSTA in the USA.	Bringing computer science back into schools: lessons from the UK	NA:NA:NA:NA:NA:NA	2018
Sarah Hug:Richard Guenther:Michael Wenk	In this paper, we use a sociocultural lens to provide an in-depth case study of a computer science program at a high school serving traditionally underserved youth. The study illuminates the contextual factors that supported dramatic programmatic growth, including the policy, curriculum, pedagogy, community, and school factors leading to student recruitment and retention in computer science. By focusing on computer science classroom practices and beyond, the study sheds light on the role multiple stakeholders can take in supporting computer science education in a K12 setting, and suggests strategies for program development in other K12 computer science settings.	Cultivating a K12 computer science community: a case study	NA:NA:NA	2018
Blair Taylor:Matt Bishop:Elizabeth Hawthorne:Kara Nance	Teaching secure coding has never been more important. The CS2013 Ironman draft includes Information Assurance and Security as a new Knowledge Area and recommends that security be cross-cutting across all undergraduate computer science curricula. The Summit on Education in Secure Software recommended: 1) increasing the number of faculty who understand the importance of secure programming principles, and will require students to practice them; 2) integrating computer security content into existing technical and non-technical courses; and 3) using innovative teaching methods to strengthen the foundation of computer security knowledge. In this panel, we will speak to these recommendations and the new curricular guidelines and discuss the importance and challenges of teaching secure coding.	Teaching secure coding: the myths and the realities	NA:NA:NA:NA	2018
Scott Grissom:Beth Simon:Leland Beck:Alexander Chizhik	This session will demonstrate best practices for integrating a variety of student engagement pedagogies into the classroom. Presenters play the role of instructors on the first day of class. Audience members play the role of students as they collaborate on a variety of sample activities. By providing models of active learning in computing contexts, we seek to motivate instructors to adopt these pedagogies in their classrooms. Attendees will be invited to join a growing community of faculty who share resources and best practices. Sufficient time will be reserved for questions and discussion.	Alternatives to lecture: revealing the power of peer instruction and cooperative learning	NA:NA:NA:NA	2018
Andrea Danyluk:Steve Roach:Elizabeth K. Hawthorne:Henry M. Walker:Ruth E. Anderson:Christa M. Chewar	Beginning with the publication of Curriculum 68, ACM and IEEE-Computer Society have sponsored various efforts to establish international curricular guidelines for undergraduate programs in computing. Work on the next volume, Computer Science 2013 is well underway, with the Ironman draft out shortly before SIGCSE 2013. The Ironman draft includes course and curricular exemplars, which should serve as a rich resource for those trying to meet the curriculum standards. This special session highlights the exemplar section of the Ironman report through a description of its purpose, presentation of several exemplars, and an invitation to the SIGCSE community to participate by submitting exemplars and providing feedback on what they would find useful in this section of the CS 2013 final report.	ACM/IEEE computer science 2013 exemplar-fest	NA:NA:NA:NA:NA:NA	2018
Durell Bouchard	NA	Session details: Paper - student-centered approaches	NA	2018
Khuloud Ahmad:Paul Gestwicki	In this study, an experimental introductory CS course was implemented focusing on two pedagogic factors: the use of App Inventor for Android (AIA), a visual blocks programming environment for creating smart phone applications; and the adoption of studio-based learning (SBL) as the main teaching methodology. Participants included 18 non-CS major undergraduates. The Motivated Strategies for Learning Questionnaire (MSLQ) was implemented at several stages. With the exception of the Peer Learning scale in the mid-MSLQ, all participants scored in the high range in the three MSLQs. Results indicated that participants were comfortable collaborating with peers and asking questions. Additional data were collected from entry and exit interviews as well as student-created mind maps. The study revealed positive student response to the pedagogic factors and positive attitudes towards CS, and the subjects also demonstrated significant academic achievement. The experimental approach was found to have a positive effect on students' motivation, creativity, achievement, and attitude towards CS.	Studio-based learning and app inventor for android in an introductory CS course for non-majors	NA:NA	2018
Kevin Buffardi:Stephen H. Edwards	Studies have found that following Test-Driven Development (TDD) can improve code and testing quality. However, a preliminary investigation was consistent with concerns raised by other educators about programmers resisting TDD. In this paper, we describe an adaptive, pedagogical system for tracking and encouraging students' adherence to TDD. Along with an empirical evaluation of the system, we discuss challenges and opportunities for persuading student behavior through adaptive technology.	Impacts of adaptive feedback on teaching test-driven development	NA:NA	2018
Henry A. Etlinger	An introductory database course is well established within computer science curricula. Instructors in this course are challenged to select a subset of possible topics to cover and emphasize and also to design appropriate assignments to help students master those topics. As theories regarding effective educational practice continue to emerge and become known, we also seek to invigorate our courses by including some of these newer techniques. Contributing Student Pedagogy is an umbrella term that refers to a family of techniques that involves finding ways for students to become directly involved in the production of course content utilized by other students. Students not only make use of content provided by other students, but they come to view that content as valuable. This paper reports on initial efforts to incorporate an assignment based on contributing student pedagogy into a standard database course. Several iterations took place, with improvements made between the first and second iterations. Plans for future iterations are included and implications, not only for the database course, but other Computer Science courses, are discussed.	Adding a contributing student pedagogy component to an introductory database course	NA	2018
Eric Aaron	NA	Session details: Paper - underserved populations	NA	2018
Sarah Esper:Stephen R. Foster:William G. Griswold	Traditionally, computer science education research contributes new tools, techniques, and theories to improve institutionalized learning spaces e.g. classrooms. However, we take the position that the study and improvement of computer science learning spaces outside the classroom are just as important. We take a step toward illuminating the critical qualities of non-institutional computer science learning spaces by engaging in a grounded-theoretical examination of first-hand accounts of non-institutional learning. To further study the topic, we attempted to recreate (in the lab) a learning environment with many qualities that characterize non-institutional learning. To make this possible, we employed a modified version of CodeSpells -- a video game designed to teach Java programming in a way that engenders the sense of sustained, playful, creative exploration driven entirely by the learner. This study introduced 40 girls, ages 10 to 12, to programming for the first time. We use the results of both studies to develop a theoretical framework which we use to examine existing tools such as Scratch, Alice, and educational games in a new light.	On the nature of fires and how to spark them when you're not there	NA:NA:NA	2018
Yasmin B. Kafai:Kristin Searle:Eliot Kaplan:Deborah Fields:Eunkyoung Lee:Debora Lui	In this paper, we present and discuss the use of electronic textiles (e-textiles) for introducing key computational concepts and practices and broadening participation and perceptions about computing. The starting point of our work was the design and implementation of a curriculum module using the Lilypad Arduino in a pre-AP high school class. To understand students' learning of concepts, practices, and perceptions of computing, we focused on the structure and functionality of circuits and program code and their design approaches to making and debugging their e-textile creations, and on their views on computing by examining pre-post interviews. Our discussion addresses the challenges and potential of using e-textiles materials and activities for designing introductory courses that can reach a broader student population.	Cupcake cushions, scooby doo shirts, and soft boomboxes: e-textiles in high school to promote computational concepts, practices, and perceptions	NA:NA:NA:NA:NA:NA	2018
Betsy DiSalvo:Mark Guzdial:Charles Meadows:Ken Perry:Tom McKlin:Amy Bruckman	We report on the implementation and evaluation of a three-year program to increase interest in studying computer science (CS) among African American male high school students. Over the course of 3 years, the Glitch Game Tester (Glitch) program employed 25 African American male high school students. These students tested pre-release digital games, full-time in the summer and part-time in the school year, with an hour of each day dedicated to learning introductory CS. Initially, only 20% of our participants expressed interest in pursing computing as a career. After Glitch, 65% have pursued some form of post-secondary computing studies. These outcomes, and the participants' enthusiasm for engaging in computing, are in sharp contrast to the crisis in African American male education and learning motivation. The research presented in this report discusses lessons learned through implementation of the Glitch program and higher education outcomes after graduation from the program.	Workifying games: successfully engaging african american gamers with computer science	NA:NA:NA:NA:NA:NA	2018
Timothy Stanley	NA	Session details: Paper - architecture and hardware	NA	2018
Michael Black:Nathaniel Waggoner	This paper describes a new GUI-based tool to teach undergraduate students to design their own CPUs. The tool was purpose-built to teach a wide range of computer organization topics, including digital logic, instruction set encoding, datapath and control units, and pipelining. A datapath builder allows microarchitecture building blocks, such as registers, ALUs, and multiplexors, to be laid out, wired together, and simulated. A control builder allows students to develop control states and microinstructions for the datapath. Both units are integrated with a full PC emulator, allowing student-designed processors to use emulated devices, such as drives, video, and I/O ports. A tutorial teaches students to use the simulator to build a pipelined RISC processor.	Emumaker86: a hardware simulator for teaching CPU design	NA:NA	2018
Michael B. Gousie:James D. Teresco	Undergraduate computer science programs at many small colleges often include only one course focused on hardware. Many important concepts are covered in such a course, including the basics of computer architecture. By the end of such a course, students should have a good understanding of how a binary machine instruction is executed in hardware. Unfortunately, even a simplified diagram of a datapath is often difficult for students to master. We present two approaches that use lab exercises to help to address this problem. In one, students build a working model of the datapath out of ordinary materials; in the other, a software simulator is designed and implemented. These approaches are described and their merits discussed.	Helping students understand the datapath with simulators and crazy models	NA:NA	2018
Derek C. Schuurman	This paper describes a sequence of assignments, each building upon the next, leading students to a working simulation of a simple 8-bit CPU (Central Processing Unit). The design features a classic Von Neumann architecture comprising a simple data path with a few registers, a simple ALU (Arithmetic Logic Unit), and a microprogram to direct all the control signals. The first step involves the design of the ALU which is capable of eight basic operations. The second step guides students to construct a datapath complete with several 8-bit registers. The third step involves the design and implementation of a control unit which uses a microprogram to implement machine code instructions. The microprogram implements nine basic machine language instructions which are sufficient for writing many simple programs. The final step involves adding program memory and an input and output device to form a simple working simulation of a computer. At this point, students may hand-assemble code for their CPU and simulate its execution. All simulations are performed using a free and open source simulator called Logisim which performs digital logic simulations with the ability to build larger circuits from smaller subcircuits. Students can set an adjustable clock rate and observe the internal CPU state and registers as it retrieves instructions and steps through the microcode. The basic CPU architecture provides many opportunities for more advanced exercises, such as adding an instruction fetch unit, adding pipelining, or adding more machine language instructions. The assignments were introduced in a second year course on computer organization, providing an effective hands-on approach to understanding how a CPU actually operates.	Step-by-step design and simulation of a simple CPU architecture	NA	2018
Jian Zhang	NA	Session details: Paper - teaching CS1	NA	2018
Barry Lawson:Doug Szajda:Lewis Barnett	This paper describes our implementation and experience of incorporating computer science concepts into a team-taught, first-year interdisciplinary course for prospective science majors at the University of Richmond. The course integrates essential concepts from each of five STEM disciplines: biology, chemistry, computer science, mathematics, and physics. Including computer science in this course faces three primary challenges: few of the students have any CS background; the time devoted to CS instruction is reduced compared to a traditional introductory CS course; and the spirit of the course requires the CS material to be highly integrated with the other disciplines. Here we discuss our experience from three-plus years of offering the course and its impact on the major/minor pool of students in our own discipline.	Introducing computer science in an integrated science course	NA:NA:NA	2018
Vahab Pournaghshband	In this 21st century technological world, the inherent problems of computer security are becoming increasingly important, and it is critical that our students gain the necessary skills and knowledge, early in their academic programs, to handle these problems. Specifically, the lack of security mindset is responsible for many overlooked and exploitable security bugs in the computer programs that these students design. While learning the security concepts generally requires a more advanced knowledge of computer science, learning the security mindset can be, and should be, addressed as early as CS 1. Although the primary focus of any traditional CS 1 course is that of basic programming concepts, we believe that teaching the security mindset in this course is valuable and effective. In this paper we discuss the course that we have taught for four terms-an introductory course that teaches the security mindset to beginner programmers. We start out by using the term-long incremental development of a security-sensitive program-the login program. Students develop the security mindset by thinking as both hackers and defenders, in order to catch and fix the logical and run-time errors that may lead to security breaches in the program.	Teaching the security mindset to CS1 students	NA	2018
David Ginat:Ronit Shmalo	We developed an approach of learning from errors in CS1, taught in OOP. The approach is based on a set of principles, which include: cognitive conflict, constructivist characteristics, error attribution, self explanation, reflection, and refinement of concept images of fundamental OOP terms and mechanisms. The approach is presented, and some of its activities are illustrated. The developed activities aim at erroneous OOP conceptions that we have observed in a previous study. We applied the approach with CS1 college students, and conducted a comparative study, with an experiment group and a control group. We display a summary of the study's results, together with the students' opinions about the applied approach.	Constructive use of errors in teaching CS1	NA:NA	2018
Eric Snow	NA	Session details: Paper - assessment	NA	2018
Vicki E. Bennett:KyuHan Koh:Alexander Repenning	Conventionally creativity is often conceived as an aptitude to be discovered in an individual that cannot be mathematically measured. But the concept of creative thinking as a divergence from a standard "norm" is used in creativity research for the purpose of assessing creativity and is also linked to non-traditional or creative processes that lead to unique and divergent artifacts [1,2]. Using Computational Thinking Pattern Analysis (CTPA)[3], the divergence between implemented computational thinking patterns in a student-created game, and that game's tutorial "norm" is calculated as an indicator of creativity. Through a case study of one teacher using three unique learning conditions, CTPA's computed divergence is explored as a valid measurement of creativity in these student games.	Computing creativity: divergence in computational thinking	NA:NA:NA	2018
Renate Thies:Jan Vahrenhold	A variety of experience reports and studies has shown Computer Science Unplugged to be an effective resource for outreach, and it has been suggested to build upon these benefits to augment teaching in a regular classroom as well. Based upon an analysis of the learning objectives, "Unplugged" activities seem to be particularly well suited to serve as an introduction to Computer Science concepts and algorithms; whether or not the effectiveness of using these activities compares to that of traditional teaching methods, however, has remained an open question so far. We present the first experimental study of using Computer Science Unplugged material as part of a regular Computer Science class in lower secondary education. The evaluation of our study affirmatively answers the above question, i.e., teaching using "Unplugged" activities can be at least as effective as when following more conventional approaches.	On plugging "unplugged" into CS classes	NA:NA	2018
Diana Franklin:Phillip Conrad:Bryce Boe:Katy Nilsen:Charlotte Hill:Michelle Len:Greg Dreschler:Gerardo Aldana:Paulo Almeida-Tanaka:Brynn Kiefer:Chelsea Laird:Felicia Lopez:Christine Pham:Jessica Suarez:Robert Waite	Many institutions have created and deployed outreach programs for middle school students with the goal of increasing the number and diversity of students who later pursue careers in computer science. While these programs have been shown to increase interest in computer science, there has been less work on showing whether participants learn computer science content. We address two questions, one specific, and the other more general: (1) "What computer science did our middle school students learn in our interdisciplinary two-week summer camp?" (2) "How can computer science concepts be assessed in the context of Scratch-based outreach programs"? We address both questions by presenting the design of our summer camp, an overview of our curriculum, our assessment methodology, and our assessment results. Though the sample size is not statistically significant, the results show that a two-week, interdisciplinary, non-academic summer camp can be effective not only for engaging students, but also for imparting CS content. In just two weeks, with a curriculum not entirely focused on computer science, students displayed competence with event-driven programming, initialization of state, message passing, and say/sound synchronization. We have employed assessment methodologies that avoid written exams, an approach both outreach and classroom-based programs may find useful.	Assessment of computer science learning in a scratch-based outreach program	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Wendy M. DuBow:Ignatios Vakalis:Manuel A. Perez-Quinones:Jason T. Black	Computing has seen dramatic decreases in the major across the past decade, especially among under-represented populations. Recently, however, some institutions have begun to see an increase. What are these departments doing to reverse this historical trend? Learn about practices undertaken by U.S. universities that have increased undergraduate enrollments overall, with particular increases in female enrollment and retention. Computer science faculty from Cal Poly San Luis Obispo, Virginia Tech and Florida A&M will present their interventions and results. National Center for Women & Information Technology will share results from other institutions that also have used evidence-based practices resulting in increased enrollments and distribute materials describing those practices.	Growing female undergraduate enrollments in computer science: some successful approaches	NA:NA:NA:NA	2018
Daniel D. Garcia:Valerie Barr:Mark Guzdial:David J. Malan	In his SIGCSE 2007 keynote, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to sessions that have provided a forum for sharing: What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to trumpet; What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it; How we should do it (pedagogy): Sharing how a change in attitude/focus/etc. can make strides to improving PBJA. This year we've gathered educators whose intro class numbers are exploding or who have instituted very creative and successful paths into the major. In this panel we will explore best practices in these crucial early years, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 6	NA:NA:NA:NA	2018
Renee L. Ciezki:Lien Diaz:Robert Glen Martin:Henry M. Walker	The AP CS A program is exploring the possibility of moving from the utilization of the GridWorld case study to the inclusion of several in-class laboratory exercises, beginning in 2014-2015 or later. The Development Committee believes labs may achieve many benefits of the past case studies, but a lab format will allow teachers more flexibility in teaching and a more agile development cycle for new materials. This Special Session will review the motivations, experiences, limitations, and constraints of case studies, motivations for the use of in-class laboratory exercises, and some components of three laboratory exercises that currently are under development by the AP CS A program.	AP CS A exploration of a change from GridWorld to labs	NA:NA:NA:NA	2018
Gregory W. Hislop:Mark Ardis:David Budgen:Mark J. Sebern:Jeff Offutt:Willem Visser	Software Engineering 2004: Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering (SE 2004) [1] is one volume in a set of computing curricula adopted and supported by the ACM and the IEEE Computer Society. In order to keep the software engineering guidelines up to date the two professional societies began a review and revision project in early 2011. This special session will present the results of the review, present a first draft of the revision, and provide time for discussion and input from the computing education community.	Revision of the SE 2004 curriculum model	NA:NA:NA:NA:NA:NA	2018
Marie Bienkowski	NA	Session details: Paper - tools for teaching the core	NA	2018
Gregory H. Cooper:Arjun Guha:Shriram Krishnamurthi:Jay McCarthy:Robert Bruce Findler	Given the widespread use of memory-safe languages, students must understand garbage collection well. Following a constructivist philosophy, an effective approach would be to have them implement garbage collectors. Unfortunately, a full implementation depends on substantial knowledge of compilers and runtime systems, which many courses do not cover or cannot assume. This paper presents an instructive approach to teaching GC, where students implement it atop a simplified stack and heap. Our approach eliminates enormous curricular dependencies while preserving the essence of GC algorithms. We take pains to enable testability, comprehensibility, and facilitates debugging. Our approach has been successfully classroom-tested for several years at several institutions.	Teaching garbage collection without implementing compiler or interpreters	NA:NA:NA:NA:NA	2018
Steve Hodges:James Scott:Sue Sentance:Colin Miller:Nicolas Villar:Scarlet Schwiderski-Grosche:Kerry Hammil:Steven Johnston	In this paper we present the features of a new physical device prototyping platform called Microsoft .NET Gadgeteer along with our initial experiences using it to teach computer science in high schools. Gadgeteer makes it easy for newcomers to electronics and computing to plug together modules with varied functionality and to program the resulting system's behavior. We believe the platform is particularly suited to teaching modern programming concepts such as object-oriented, event-based programming and it could be a timely addition to established teaching tools given the current interest in improving high school computer science education in some regions. We have run a number of pilot studies in the US and in the UK with students of varying age and ability. Our results indicate that the tangible and expressive nature of Gadgeteer helps to engage and motivate a diverse set of students. We were also pleasantly surprised by the level of polish and sophistication of the devices which were built. We hope to further explore the potential of Gadgeteer for teaching in future work and we encourage others to build on our experiences.	.NET gadgeteer: a new platform for K-12 computer science education	NA:NA:NA:NA:NA:NA:NA:NA	2018
D. Brian Larkins:William M. Jones:H. Erin Rickard	This paper describes the adaptation of several common computer science courses to include the use of FPGA-based systems for project and assignment work. One of the principal challenges in modern curriculum design is balancing between breadth and depth of course topics while simultaneously reinforcing the interconnections among topics in the field. To address these challenges, faculty are often forced to approximate real-world systems, sometimes at the expense of any hands-on experience. At Coastal Carolina, we have integrated FPGA systems first used in our hardware-based courses into several higher-level systems and applications courses. This allows us to leverage student familiarity with a hands-on, flexible hardware platform and also strengthens the relationships between different subfields within computer science. We discuss both the changes made to our curriculum and the effectiveness of our approach.	Using FPGAs as a reconfigurable teaching tool throughout CS systems curriculum	NA:NA:NA	2018
Michael Helmick	NA	Session details: Paper - parallel distributed computing	NA	2018
Eric Larson:Rochelle Palting	MDAT is a multithreaded testing and debugging tool designed for students learning to program with multiple threads. MDAT automatically generates random schedules to allow students to more thoroughly test their programs. The design of MDAT takes full control over the scheduling allowing a failing run to be reproduced. To assist debugging, MDAT includes an output trace that shows the status of all threads, locks, and semaphores in the program and has an interactive mode that allows students to try out their own schedules. MDAT was effective at detecting deadlock and mutual exclusion violations in student submissions of the unisex restroom problem.	MDAT: a multithreading debugging and testing tool	NA:NA	2018
Barry Wilkinson:Jeremy Villalobos:Clayton Ferner	In this paper, we describe an approach for teaching parallel and distributed computing at the undergraduate level using computational patterns. The goal is to promote higher-level structured design for parallel programming and make parallel programming easier and more scalable. A pattern programming framework has been developed to create a distributed application that avoids the need to write code in low level message--passing APIs such as MPI. Several patterns have been implemented including workpool, pipeline, synchronous and iterative all-to-all, and stencil. We have redesigned a regular senior undergraduate parallel programming course to begin with a pattern strategy using our framework and provide a detailed syllabus around patterns.	Pattern programming approach for teaching parallel and distributed computing	NA:NA:NA	2018
Yousun Ko:Bernd Burgstaller:Bernhard Scholz	The computing landscape has shifted towards multicore architectures. To learn about software development, it is increasingly important for students to gain hands-on parallel programming experience in multicore environments. This experience will be significantly different from programming for uniprocessors, because it involves a profound understanding of how to write software that is (1) free of concurrency bugs and (2) able to effectively utilize the underlying parallel hardware architecture. We present our work at Yonsei University and The University of Sydney to teach parallel programming to first and second-year undergraduate students. Our objective is to introduce parallelism early on in the curriculum, to instill it as a first principle of computation. We introduce a series of five parallel programming course modules suitable for a one semester introductory programming course. Each module teaches one fundamental concept of parallel programming: parallelism and execution indeterminism, thread-and-lock based programming, performance of parallel programs, hardware acceleration using OpenCL, and stream-parallel programming with StreamIt. We report our experience from four course offerings (2008-2011) at Yonsei University, and two course offerings at The University of Sydney. Over 73% of students surveyed enjoyed this multicore programming experience and preferred exposure to parallelism at this early stage of their CS education. Our course has been awarded an Intel microgrant for "Parallelism in the Classroom", and it is available online at Intel's Multicore Curriculum Initiative Website.	Parallel from the beginning: the case for multicore programming in thecomputer science undergraduate curriculum	NA:NA:NA	2018
Shaileen Pokress	NA	Session details: Paper - teacher preparation	NA	2018
Linda Werner:Jill Denner:Shannon Campe:Eloy Ortiz:Dawn DeLay:Amy C. Hartl:Brett Laursen	Research shows the benefits of pair programming for retention and performance in computing, but little is known about how relationship dynamics influence outcomes. We describe results from our study of middle school students programming games using Alice and pair programming. From our analysis using statistical procedures that take into account the interdependence of pair data, we found evidence for partner influence moderated by the role of confidence over improvements in Alice programming knowledge in friend partnerships but not non-friend partnerships. We discuss implications for researchers and educators.	Pair programming for middle school students: does friendship influence academic outcomes?	NA:NA:NA:NA:NA:NA:NA	2018
Heather Bort:Dennis Brylow	In this paper, we aim to directly measure a CS4HS workshop's participating teachers' ability to synthesize CSTA computational thinking core concepts into actionable lesson plans for courses in their current teaching repertoire. Participants were expected to present a lesson plan on the final day of the workshop, highlighting the integration of their classroom curriculum with computing and computational thinking skills. We present our evaluation rubric, used to rate the teachers effective use of the computational thinking core concepts in their lesson plans, and describe how our method of evaluation may more accurately gauge the overall impact that CS4HS workshops have on their participants.	CS4Impact: measuring computational thinking concepts present in CS4HS participant lesson plans	NA:NA	2018
Jiangjiang Liu:Cheng-Hsien Lin:Phillip Potter:Ethan Philip Hasson:Zebulun David Barnett:Michael Singleton	More and more students are interested in developing their own mobile applications. Incorporating mobile technology into classrooms can greatly capture student attention, better student engagement, and improve student achievement. In this paper, we present our experience, findings, and lessons learned from conducting a one-week App Inventor for Android summer computing workshop for K-12 teachers. Our workshop focuses on using App Inventor, a drag-and-drop Android development environment, introduce computing concepts to K-12 teachers in all subjects. During the workshop the teachers developed curriculum applications for the subjects they will teach in the following semesters with the help of our workshop tutors. Workshop assessment results show a 29.5% increase in confidence level in teaching computer science and a 109% computing knowledge level increase.	Going mobile with app inventor for android: a one-week computing workshop for K-12 teachers	NA:NA:NA:NA:NA:NA	2018
Ruth Anderson	NA	Session details: Paper - diversity	NA	2018
Katie Redmond:Sarah Evans:Mehran Sahami	In this paper, we analyze gender dynamics in the undergraduate Computer Science program at Stanford University through a quantitative analysis of 7209 academic transcripts and 536 survey responses. We examine previously studied effects as well as present new findings. We also introduce Fisher's Noncentral Hypergeometric Distribution as a model for estimating the impact of program changes on underrepresented populations and explain why it is a more robust measure than changes in the percentage of minority participants.	A large-scale quantitative study of women in computer science at Stanford University	NA:NA:NA	2018
Carol Frieze:Jeria L. Quesenberry	In this paper we argue that gender difference thinking, with regards to attitudes towards computing, can work against diversity in the field of computing. Indeed, gender difference approaches to the participation of women in computing have not provided adequate explanations for women's declining interest in computer science (CS) and related technical fields. As yet "The Changing Face of Computing" has not led to significant changes in the levels of women's participation. Indeed, the number of computer science degrees awarded to women has steadily declined since 1984. Our objective in this paper is to present a critique on why gender difference approaches may be problematic and propose that a cultural approach offers a more effective framework for investigating and increasing women's participation in CS. We support our findings and recommendations from the most recent research in a series of studies carried out at Carnegie Mellon University (CMU) over the past 10 years. In brief, we found the Women-CS fit at CMU continues to present a positive and encouraging story. Our findings demonstrate that under certain conditions women, alongside their male peers, can fit successfully into a CS environment and help shape that environment and computing culture, for the benefit of everyone, without accommodating presumed gender differences or any compromises to academic integrity.	From difference to diversity: including women in the changing face of computing	NA:NA	2018
Annemieke Craig:Jo Coldwell-Neilson:Jenine Beekhuyzen	Over the past two decades, numerous interventions have been conducted to inform and inspire schoolgirls into studies and a career in computing and technology. Two successful intervention of this kind have been held over a number of years, and this paper presents the initial stages of a longitudinal study which evaluates the qualitative data from the survey from six Australian events in total. The paper explores the motivational aspects of the presentations in the context of the responses from students and teachers, and it highlights the importance of ensuring that presentation sessions at these events are fun, funny and interesting, and the importance of considering the age of the target audience. It concludes by raising a concern.	Are IT interventions for girls a special case?	NA:NA:NA	2018
Mehran Sahami:Mark Guzdial:Fred G. Martin:Nick Parlante	NA	The revolution will be televised: perspectives on massive open online education	NA:NA:NA:NA	2018
Joseph Hollingsworth:Joan Krone:Jason Hallstrom:Murali Sitaraman:Bruce Weide	NA	Engaging mathematical reasoning exercises	NA:NA:NA:NA:NA	2018
Renee L. Ciezki:Lien Diaz:Frances E. Hunt:Henry M. Walker	The Advanced Placement (AP) Program provides a framework for high school students to obtain college credit and/or placement for work done in high school. Toward this end, the College Board outlines course descriptions and organizes examinations in several dozen disciplines, including computer science. To meet its goals, each AP course must align with college courses, so students taking an AP course will master needed content Several approaches are used to monitor this connection between AP courses and college-level courses. This session will review these approaches, considering how the AP CS A course matches introductory college computer science courses.	How AP CS A matches college courses	NA:NA:NA:NA	2018
Karen Brennan:Mitchel Resnick	This special session aims to provoke discussion about new strategies for engaging young people in computer programming, drawing on experiences of educators and young people using the Scratch programming environment and online communities. The session will combine several different formats, including research presentations and analysis by two members of the team that develops and supports Scratch, short presentations and demonstrations by five educators and young people working with Scratch, and discussions among audience participants.	Stories from the scratch community: connecting with ideas, interests, and people	NA:NA	2018
Karl Schmitt	NA	Session details: Paper - assessment in programming courses	NA	2018
Wade Fagen:Samuel Kamin	The Programming Studio in the University of Illinois Computer Science department is a required course in which small groups of students participate in weekly code reviews of each other's programs. To increase student engagement in the discussions, Tablet PCs were introduced for several weeks in the middle of the semester. By recording the discussions before, during, and after the use of tablets, we measure the effectiveness of this intervention. In doing so, we develop a simple metric to measure the "active engagement" of the participants. We found each section was significantly more engaging when using Tablet PCs (p<0.0001) and the large majority of individual participants were more engaged. This paper contributes both an objective measurement of "active engagement" and a successful intervention in a programming studio-type course.	Measuring increased engagement using tablet PCs in a code review class	NA:NA	2018
Sue Fitzgerald:Brian Hanks:Raymond Lister:Renee McCauley:Laurie Murphy	This paper reports on a mixed methods study which examines how four experienced instructors approached the grading of a programming problem. Two instructors used a detailed, analytic approach and two instructors employed a holistic approach. One instructor exhibited elements of a primary trait approach. Even though the four instructors used different grading scales and philosophies, their raw scores were highly correlated (Spearman's rho of .81) supporting the conclusion that experienced instructors usually agree on whether a program is 'very good' or 'very bad'. Clearly there is no single right way to grade programs. Further discourse should be encouraged for the benefit of both educators and students.	What are we thinking when we grade programs?	NA:NA:NA:NA:NA	2018
Lewis Baumstark:Edwin Rudolph	We present a system for automatically and iteratively grading student work in a Systems Administration course. This system can grade and give feedback regarding live (running) virtual machines the students have configured. It is appropriate for both face-to-face and online course offerings.	Automated online grading for virtual machine-based systems administration courses	NA:NA	2018
Richard A. Brown	NA	Session details: Paper - active learning	NA	2018
Samuel A. Rebelsky:Janet Davis:Jerod Weinman	As the Media Computing approach has shown, writing programs that make images excites a wide variety of students. In this paper, we report on five years of experience with a new approach to media computation, which we call "media scripting". In our introductory class, students build images by interactively scripting an application, so they can experiment easily and mix work "by hand" and "by code"; we collaborate with studio art faculty, so students build works meeting design criteria; and we emphasize multiple paradigms, so students make images using functional, declarative, imperative, and object-oriented techniques. Our approach has proven quite successful--enrollments are up (at least 33% in CS1, 50% in CS2) and we attract more women (currently 40% of the students in the first course, 25% of those in the second course). Other outcomes are equally positive. For example, comparative data show that our students gain significantly more confidence in their abilities than students in other introductory science courses.	Building knowledge and confidence with mediascripting: a successful interdisciplinary approach to CS1	NA:NA:NA	2018
Edward F. Gehringer:Barry W. Peddycord, III	This paper reports on an experience in using the inverted-lecture model ("flipping the classroom") in computer architecture. The first author concurrently taught two courses in computer architecture. One of these courses was CSC/ECE 506: Architecture of Parallel Computers, an introductory Graduate-level course, taught via lecture both residentially and distance-ed. The other was the CSC 456: Computer Architecture and Multiprocessing, a senior-level undergraduate course which was "flipped." Students in the inverted-lecture class exhibited high levels of engagement. Their performance on exams was not quite up to the level of the students in the graduate class, but the difference was not wide. From this experience, we offer observations and suggestions about inverted classes in general.	The inverted-lecture model: a case study in computer architecture	NA:NA	2018
Nicole Anderson:Tim Gegg-Harrison	As computer science faculty, we are always looking for better ways to recruit and retain new majors. One way to achieve this goal is to incorporate material into the introductory courses that lies within the intersection of the student's "zone of proximal development" (which contains concepts that the student is capable of understanding) and "comfort zone" (which contains concepts that motivate the student and are presented in a way in which the student is familiar and comfortable). We refer to this region as the "comfort zone of proximal development." In this paper, we present a "comfort zone of proximal development" that we have created for computer science students which consists of a collaborative learning environment where programming concepts are introduced with gaming applications.	Learning computer science in the "comfort zone of proximal development"	NA:NA	2018
Brad Richards	NA	Session details: Paper - tools to support novice programmer	NA	2018
Ashok Ram Basawapatna:Alexander Repenning:Clayton H. Lewis	Computational thinking aims to outline fundamental skills from computer science that everyone should learn. These skills include problem formulation, logically organizing data, automating solutions through algorithmic thinking, and representing data through abstraction. One aim of the NSF is to integrate these and other computational thinking concepts into the classroom. This paper introduces a tool called the Simulation Creation Toolkit wherein users apply high-level agent interactions called Computational Thinking Patterns (CTPs) to create simulations. Programming at the Computational Thinking Pattern level allows users to directly create agent interactions in a simulation by employing generic icons acting out a scientific phenomenon they are trying to represent. The Simulation Creation Toolkit aims to preserve the computational thinking benefits of simulation creation while enabling higher-level implementation of agent behaviors. Initial study data collected from sixth grade students with no prior programming experience indicates that students can work the mechanics necessary to create simulations in the classroom environment using the Simulation Creation Toolkit.	The simulation creation toolkit: an initial exploration into making programming accessible while preserving computational thinking	NA:NA:NA	2018
Linda Werner:Charlie McDowell:Jill Denner	There is growing interest in how we can use computer logging data to improve computational tools and pedagogies to engage children in complex thinking and self-expression, but our techniques lag far behind our theories. Only recently have learning scientists begun to measure, collect, analyze, and report how data informs the science of children's learning. In this paper, we describe our initial efforts towards developing tools to mine computer logging data for information on how to enhance learning opportunities. The data were collected as part of an NSF-funded project, and include logs from 320 middle school students using Alice to program computer games in semester-long courses. We describe some lessons learned and decisions made in the process of reconstructing high-level user actions in Alice from low-level Alice logs.	Middle school students using Alice: what can we learn from logging data?	NA:NA:NA	2018
Renee Bryce:Quentin Mayo:Aaron Andrews:Daniel Bokser:Michael Burton:Chelynn Day:Jessica Gonzolez:Tara Noble	Bug Catcher is a web-based system for running software testing competitions. While programming competitions are a way to engage students, they require students to have coding experience. On the other hand, software testing competitions may reach high school students that do not have access to a programming course. In this paper, we present the Bug Catcher system and the results from four sessions of a competition that include a total of 94 high school students. Bug Catcher provides students with requirements, buggy code, and input fields to enter test cases. We observed that most students began entering test cases based on requirements, but then many took an interest in the code as time went on. Our results show that 90% of students would recommend this activity in the future and 72% of students report that the activity increased their interest in Computer Science. Students also provided feedback on the system from the perspective of students without background in Computer Science, allowing us to create and modify features for future use.	Bug catcher: a system for software testing competitions	NA:NA:NA:NA:NA:NA:NA:NA	2018
Colleen Lewis	NA	Session details: Paper - SE and professional practice	NA	2018
Lisa Lancor:Samyukta Katha	Given the popularity of PHP frameworks used in developing web-based applications, a comparative study is conducted to determine which framework is best suited for incorporation into the curriculum of an undergraduate software engineering course that uses project-based learning. The top six PHP frameworks (Zend, Yii, CakePHP, CodeIgniter, PRADO, and Symphony) were initially considered and then narrowed down to two (CakePHP and CodeIgniter) based on their alignment with common functionality in previous class projects, framework complexity for those new to frameworks (learning curve), and developer friendliness (availability of documentation and online resources). An in-depth comparative study is conducted by developing a functionally-equivalent web application using each of the two frameworks as well as plain PHP (no framework). This work was motivated by the difficulties that were encountered in an evolving, content-rich software engineering course and discusses the educational changes that were made to align student learning with sound software engineering principles and current software development practices used in the computing industry.	Analyzing PHP frameworks for use in a project-based software engineering course	NA:NA	2018
Alex Radermacher:Gursimran Walia	Although computer science, information systems, and information technology educators often do an exemplary job of preparing their students for jobs in industry or for further education, there are still many areas where these students do not possess the necessary skills or knowledge based on the expectations of employers or academia. These gaps between the abilities of graduating students and those expected to have can prevent them from succeeding in their careers. This paper presents the results of a systematic literature review conducted to determine which areas graduating students most frequently fall short of the expectations of industry or macademia. The results of this review indicate that graduating students are lacking in many different areas, including technical abilities (design, testing, configuration management tools, etc.) personal skills (communication, teamwork, etc.) and professional qualities (e.g. ethics). By raising awareness of these areas, it is possible for educators to become aware of areas where students most frequently fail to meet expectations and to make curriculum changes or adjustments to address these problems	Gaps between industry expectations and the abilities of graduates	NA:NA	2018
Amruth N. Kumar	A mid-career review is presented, of how the teaching of Computer Science I has changed for this instructor over the last two decades. The content of the course has evolved to include algorithm development and program design. Assessment in the course has gone online and moved away from testing how clever the student is, to how much the student has learned in the course. Professional practices are now covered that help students understand and incorporate preferred practices of the discipline. Changes incorporated into the pedagogy include going from using anthropomorphic and ad-hoc to discipline-specific and consistent vocabulary, and from writing code in the class like an experienced programmer to writing it to suit a beginning learner. It is hoped that this review will help new Computer Science I instructors avoid some misconceptions with which this instructor started out.	A mid-career review of teaching computer science I	NA	2018
Katrina Falkner:Nickolas J.G. Falkner	This session will help participants understand the importance of, and challenges in, introducing collaborative learning within introductory Computer Science curricula. At the University of Adelaide, we have designed our first year curriculum, a sequence of three courses, around collaborative learning - in this session we explore our experiences in developing collaborative activities, collaborative assessment and appropriate training for staff, academic and sessional, involved in collaborative sessions. Based on a seven year programme of designing and undertaking collaborative activities, we will discuss our successes, and our failures, in the use of collaborative learning techniques.	Designing and supporting collaborative learning activities	NA:NA	2018
Nick Parlante:Julie Zelenski:Michelle Craig:John DeNero:Mark Guzdial:David J. Malan:Aditi Muralidharan:Eric Roberts:Kevin Wayne	Every time I re-use a handout, I look it over and make a few little "improvements". I play around with code demos and entertain myself with different slide transitions. However, inevitably, I return to the conclusion that most of what my students learn in my course comes from the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Baker Franke:Jeanne Century:Michael Lach:Cameron Wilson:Mark Guzdial:Gail Chapman:Owen Astrachan	This session will present the research findings to date from an 18-month study commissioned by the ACM in partnership with the National Science Foundation, Google, Computer Science Teachers Association, Microsoft, and the National Center for Woman and Information Technology that started in July, 2012, and invite an open discussion about them. The study seeks to understand the national landscape of K-12 computer science (CS) professional development (PD) and the capacity to provide high quality CS PD on a large scale. The study is being conducted by The University of Chicago's Center for Elementary Mathematics and Science Education (CEMSE) who will present findings from the landscape study conducted in the Summer and Fall of 2012, as well as preliminary findings about the CS community's capacity for increasing the ranks of K-12 CS teachers in light NSF's stated goal of preparing 10,000 secondary education teachers to teach high-quality computer science[1]. A goal for this work is to produce actionable findings that will be of use to the broad CS education community. In the spirit of togetherness and engendering some collective action toward a coherent national strategy for expanding computer science education, it's vital that the SIGCSE community be both aware of this study's findings and be given an opportunity to reflect on its implications. Therefore, over half the time of this session will be devoted to open discussion during which several key questions stemming from the findings will be raised as well as questions raised by audience members. This session is an important opportunity for the SIGCSE community to offer feedback and help to guide the future direction of this study to ensure that the findings and plans for the remainder of the study are useful and actionable.	Expanding access to K-12 computer science education: research on the landscape of computer science professional development	NA:NA:NA:NA:NA:NA:NA	2018
Kurt Eiselt	NA	Session details: Paper - curricular innovations	NA	2018
Suzanne Fox Buchele	The critical need for computer security concepts to be taught in the undergraduate computer science curriculum is evident from current news stories, curricular guidelines, and government initiatives. Beginning to teach a standalone computer security course can be daunting, especially for instructors with little or no background or formal education in computer security. An elective course in cryptography and computer security was developed that matched the talents of the professor and the resources and context of the two Universities and departments in which it was taught. Two models of the course evolved: an elective semester-long computer science and mathematics cross-listed course, and an elective summer computer science course with significant hands-on laboratory exercises. Either course may be used as a model for an accessible course offering involving computer security.	Two models of a cryptography and computer security class in a liberal arts context	NA	2018
Timothy J. Hickey:Pito Salas	This paper describes three years of experience with an intensive three course summer semester on web and mobile entrepreneurship for second year CS students and beyond. The program is similar in structure to a high school summer camp or to a summer accelerator/incubator program except that it has a much higher level of academic content and provides the credit equivalent to three Computer Science electives and a full semester of residency. The program has been effective at teaching students production programming and entrepreneurship and has stimulated entrepreneurial activity during the academic year. It is taken by about half of the CS majors in the department which is surprising since it requires them to spend their summer months in a very intense academic and entrepreneurial experience which is quite different from the usual summer experience of their peers.	The entrepreneur's bootcamp: a new model for teaching web/mobile development and software entrepreneurship	NA:NA	2018
Timothy E. Roden:Rob LeGrand	A comprehensive undergraduate curriculum in computer game development is described. The program was created as a set of elective courses in the context of a traditional computer science (CS) degree. Primary goals of the program were to increase enrollment in CS and prepare students for careers in the entertainment software industry. In addition, the CS department sought to compete for students with larger state institutions. To do so effectively the department needed to offer a unique program. Results show the new program helped the CS department to nearly triple enrollment over four years and achieve both statewide prominence and national recognition.	Growing a computer science program with a focus on game development	NA:NA	2018
Pamela Cutter	NA	Session details: Paper - improving student learning in courses	NA	2018
Matthew Hertz:Maria Jump	Students in introductory programming courses struggle with building the mental models that correctly describe concepts such as variables, subroutine calls, and dynamic memory usage. This struggle leads to lowered student learning outcomes and, it has been argued, the high failure and dropout rates commonly seen in these courses. We will show that accurately modeling what is occurring in memory and requiring students to trace code using this model improves student performance and increases retention. This paper presents the results of an experiment in which introductory programming courses were organized around code tracing. We present program memory traces, a new approach for tracing code that models what occurs in memory as a program executes. We use these traces to drive our lectures and to act as key pieces of our active learning activities. We report the results of student surveys showing that instructor tracing was rated as the most valuable piece of the course and students' overwhelming agreement on the importance of the tracing activities for their learning. Finally, we demonstrate that trace-based teaching led to statistically significant improvements student grades, decreased drop and failure rates, and an improvement in students' programming abilities.	Trace-based teaching in early programming courses	NA:NA	2018
Kostadin Damevski:Badreldin Altayeb:Hui Chen:David Walter	The greater versatility and increasingly smaller sizes of computing, sensing, and networking devices have resulted in a new computing paradigm called Cyber-Physical Systems (CPSs), which integrates computation and sensing into physical processes producing a wealth of exciting applications in many domains of life, such as transportation, medicine, and agriculture. In order to equip students with the essential knowledge and skills to be successful in the future, this paradigm requires an expansion in the scope of computer science curricula to enable students to understand and overcome the complexity inherent in CPSs. In this paper, we describe our experience with teaching CPS via a set of course modules that rely heavily on modeling and verification. By using the popular Android platform, we aim to engage students to successfully build CPS applications while enhancing their understanding of intellectually challenging concepts.	Teaching cyber-physical systems to computer scientists via modeling and verification	NA:NA:NA:NA	2018
Ran Libeskind-Hadas	A common approach to teaching algorithms involves describing algorithms first and then proving their correctness afterwards. In this article we advocate a "derivation-first" approach in which algorithms are "derived," either from basic concepts or from simpler algorithms, before they are proved correct. We demonstrate how a number of "classical" algorithms can be derived, providing students with a more intellectually satisfying experience, a deeper intuition into how algorithm design works, and connections between algorithms that can be useful in developing algorithms for other problems.	A derivation-first approach to teaching algorithms	NA	2018
Timothy Fossum	NA	Session details: Paper - working the web	NA	2018
Philip J. Guo	This paper presents Online Python Tutor, a web-based program visualization tool for Python, which is becoming a popular language for teaching introductory CS courses. Using this tool, teachers and students can write Python programs directly in the web browser (without installing any plugins), step forwards and backwards through execution to view the run-time state of data structures, and share their program visualizations on the web. In the past three years, over 200,000 people have used Online Python Tutor to visualize their programs. In addition, instructors in a dozen universities such as UC Berkeley, MIT, the University of Washington, and the University of Waterloo have used it in their CS1 courses. Finally, Online Python Tutor visualizations have been embedded within three web-based digital Python textbook projects, which collectively attract around 16,000 viewers per month and are being used in at least 25 universities. Online Python Tutor is free and open source software, available at pythontutor.com.	Online python tutor: embeddable web-based program visualization for cs education	NA	2018
Daniel Zingaro:Yuliya Cherenkova:Olessia Karpova:Andrew Petersen	We present the Python Classroom Response System, a web-based tool that enables instructors to use code-writing and multiple choice questions in a classroom setting. The system is designed to extend the principles of peer instruction, an active learning technique built around discussion of multiple- choice questions, into the domain of introductory programming education. Code submissions are evaluated by a suite of tests designed to highlight common misconceptions, so the instructor receives real-time feedback as students submit code. The system also allows an instructor to pull specific submissions into an editor and visualizer for use as in-class examples. We motivate the use of this system, describe its support for and extension of peer instruction, and offer use cases and scenarios for classroom implementation.	Facilitating code-writing in PI classes	NA:NA:NA:NA	2018
David Pritchard:Troy Vasiga	Computer Science Circles is a free programming website for beginners that is designed to be fun, easy to use, and accessible to the broadest possible audience. We teach Python since it is simple yet powerful, and the course content is well-structured but written in plain language. The website has over one hundred exercises in thirty lesson pages, plus special features to help teachers support their students. It is available in both English and French. We discuss the philosophy behind the course and its design, we describe how it was implemented, and we give statistics on its use.	CS circles: an in-browser python course for beginners	NA:NA	2018
Catherine Lang	NA	Session details: Paper - computational thinking	NA	2018
Kyu Han Koh:Alexander Repenning:Hilarie Nickerson:Yasko Endo:Pate Motter	A strategy exposing middle school students to computer science through game design appears to be a promising means to mitigate the computer science pipeline challenge. Particularly when short game design activities are integrated into already existing middle school courses, research suggests that game design is effective in broadening participation and motivating large numbers of students, along with large percentages of women and minorities. A study with over 10,000 students is exploring the sustainability of this approach and finding positive responses to inquiries such as these: Do teachers continue to use game design? Can they advance beyond extrinsic rewards such as research stipends? After building one game, do students advance, building more games or even STEM simulations?	Will it stick?: exploring the sustainability of computational thinking education through game design	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:Quinn Burke	In this conceptual paper, we argue that recent developments in K-12 programming education are suggestive of what can be called a "social turn", a shift in the field in which learning to code has shifted from being a predominantly individualistic and tool-oriented approach to now one that is decidedly sociologically and culturally grounded in the creation and sharing of digital media. We discuss in detail three dimensions of this social turn (1) from writing code to creating applications, (2) from composing "from scratch" to remixing the work of others, and (3) from designing tools to facilitating communities. These three shifts illustrate how the development of artifacts, tools, and communities of programming lead us to move from computational thinking to computational participation. We draw from examples of past and current research, both inside and outside of school, and situate these developments in the context of current discussions around computational thinking, which has become a driving force in revitalizing programming in K-12 curricula and altogether broadening participation in computing.	The social turn in K-12 programming: moving from computational thinking to computational participation	NA:NA	2018
David S. Touretzky:Daniela Marghitu:Stephanie Ludi:Debra Bernstein:Lijun Ni	We describe a three-stage model of computing instruction beginning with a simple, highly scaffolded programming environment (Kodu) and progressing to more challenging frameworks (Alice and Lego NXT-G). In moving between frameworks, students explore the similarities and differences in how concepts such as variables, conditionals, and looping are realized. This can potentially lead to a deeper understanding of programming, bringing students closer to true computational thinking. Some novel strategies for teaching with Kodu are outlined. Finally, we briefly report on our methodology and select preliminary results from a pilot study using this curriculum with students ages 10-17, including several with disabilities.	Accelerating K-12 computational thinking using scaffolding, staging, and abstraction	NA:NA:NA:NA:NA	2018
Jakita Thomas	NA	Session details: Paper - camps and mobile computing	NA	2018
Janet E. Burge:Gerald C. Gannod:Maureen Doyle:Karen C. Davis	In this paper, we describe our experience running "Girls on the Go: The Mobile Computing College Experience." We decided to do a residential summer camp for HS-age girls to achieve two goals: to encourage our campers to attend college and to interest them in computer science as a possible career option. We centered the camp around the design of a zoo-themed research tool where campers designed a mobile application to be used by researchers to document and study animal behavior. Post-camp surveys gave statistically significant results indicating that the camp increased the girls' confidence in performing computer science and understanding what computer scientists did.	Girls on the go: a CS summer camp to attract and inspire female high school students	NA:NA:NA:NA	2018
Amber Wagner:Jeff Gray:Jonathan Corley:David Wolber	Educators are often seeking new ways to motivate or inspire students to learn. Our past efforts in K-12 outreach included robotics and media computation as the contexts for teaching Computer Science (CS). With the deep interest in mobile technologies among teenagers, our recent outreach has focused on using smartphones as a new context. This paper is an experience report describing our approach and observations from teaching a summer camp for high school students using App Inventor (AI). The paper describes two separate methods (one using a visual block language, and another using Java) that were taught to high school students as a way to create Android applications. We observed that initiating the instruction with the block language, and then showing the direct mapping to an equivalent Java version, assisted students in understanding app development in Java. Our evaluation of the camp includes observations of student work and artifact assessment of student projects. Although the assessment suggests the camp was successful in several areas, we present numerous lessons learned based on our own reflection on the camp content and instruction.	Using app inventor in a K-12 summer camp	NA:NA:NA:NA	2018
Matthew H. Dabney:Brian C. Dean:Tom Rogers	The use of mobile app development in pre-college computing education is rapidly gaining momentum due to the increasingly widespread use of mobile devices. To fully realize the learning potential of this technology in the classroom, however, one may need to re-examine traditional curricular approaches originating from desktop computing environments. In this work, we describe our experience with a new high-school computing camp designed from the ground up to engage students by taking full advantage of the specific benefits of mobile devices, such as built-in cameras, GPS, networking, and sensors measuring touch, sound, acceleration, and orientation. We describe the design of our camp including materials and examples used. We assess the effectiveness of this instructional approach by demonstrating a statistically significant increase in interest in future computing endeavors. We also comment on the use of MIT App Inventor to ease the transition, particularly for novice programmers, to more sophisticated Java-based apps.	No sensor left behind: enriching computing education with mobile devices	NA:NA:NA	2018
Edward F. Gehringer:Beth Lang Golub:Randi Cohen:David M. Arnow:Clifford A. Shaffer	Textbook pricing has become a hot-button issue in academe. Allegations are rife that textbook prices are increasing faster than tuition, and that some students spend even more on textbooks than on tuition. The matter is complicated by rapidly changing technology and the expectations that print textbooks may soon be obsolete. This panel brings together two textbook editors from major publishers and two authors with extensive experience in new media to discuss why textbooks are so expensive and how the market is likely to change in the foreseeable future.	Panel: textbook pricing, present and future	NA:NA:NA:NA:NA	2018
Owen Astrachan:Amy Briggs:Lien Diaz:R. Brook Osborne	NA	CS principles: development and evolution of a course and a community	NA:NA:NA:NA	2018
Debra Goldberg:Dirk Grunwald:Clayton Lewis:Jessica Feld:Kristin Donley:Odette Edbrooke	School districts across the country are embracing 21st century skills, and grappling with how to teach these to their K-12 students. At the same time, computer science educators are grappling with how to broaden participation. These two dilemmas are related, in that computer science can be used to teach many of the 21st century skills, and bringing computer science to all K-12 students can help broaden participation. For computer scientists, key 21st century skills [4] include creativity & innovation, critical thinking and problem solving, communication & collaboration, information literacy, media literacy and information, communications and technology (ICT) literacy -- these skills go beyond traditional "computational thinking" skills because they include reflections on how computation affects social processes (such as the role of computational media in society). Since 2009, K-12 educators and computer science graduate students in the Engaging Computer Science in Traditional Education (ECSITE, pronounced "excite") project have developed curricular units that are embedded into non-computing K-12 classes [3]. These units collectively address many 21st century skills, and have been introduced into arts, geography, government, health, music, and science classes. In this special session, we will interactively share some of our successful curricular units that address different 21st century skills, initiate a broader discussion on embedding computer science into K-12 curriculum and discuss methods we are exploring to enhance the sustainability of such efforts.	Addressing 21st century skills by embedding computer science in K-12 classes	NA:NA:NA:NA:NA:NA	2018
Sarah Heckman	NA	Session details: Paper - classroom management	NA	2018
Joseph Lawrance:Seikyung Jung:Charles Wiseman	Numerous CS faculty have demonstrated the benefits of using version control in courses other than software engineering. However, they maintained their own servers, and to the best of our knowledge, none published experiences with version control in CS1 courses for non-CS engineering majors. As a result, even faculty experienced with version control may hesitate to adopt it in some classes, fearing that it is too difficult, time consuming or distracting. In this paper, we describe how we adopted version control in a CS1 course for non-CS engineering majors, and how software hosting services facilitated its use. Our experience indicates that undergraduate engineering majors in CS courses can gain competence in version control, and software hosting services simplify class administration.	Git on the cloud in the classroom	NA:NA:NA	2018
Tyson R. Henry	Success in the computing industry often depends on an individual's ability to be a productive member of an effective study group or project team. In order to prepare students for successful careers, computer science curriculum often includes group projects. This paper discusses the challenges of forming effective student groups, discusses existing software for forming groups, and introduces groupformation.org, a new free and open source group formation service.	Creating effective student groups: an introduction to groupformation.org	NA	2018
Marc J. Rubin	Live-coding is defined as "the process of designing and implementing a [coding] project in front of class during lecture period". In this article we present our research design and results regarding the effectiveness of live-coding to teach introductory programming. The research design includes two experimental groups spread across four sections of an introductory C++ course at Colorado School of Mines. In the control group, students were taught using static code, meaning that instructors never typed, but instead viewed, compiled, and executed code examples. In the experimental or "live-coding" group, instructors started each lecture with a blank screen, and taught code examples by systematically typing, compiling, and testing code to solve example problems. To assess the effectiveness of live-coding, we administered four surveys and analyzed final grades. Two of the surveys were given at the beginning of the course, and were used to measure baseline programming knowledge and student learning preferences (i.e., VARK). The other two surveys, given at the end of the course, were designed to measure the amount of programming knowledge obtained as well as preferences towards live coding. Lastly, final grades were analyzed in terms of its subcomponents: the assignments, exams, final project, and overall grade. Based on our results, we conclude that teaching via live-coding is as good as if not better than using static code examples.	The effectiveness of live-coding to teach introductory programming	NA	2018
Laurie Murphy	NA	Session details: Paper - music and computing education	NA	2018
Brian Magerko:Jason Freeman:Tom McKlin:Scott McCoid:Tom Jenkins:Elise Livingston	In this paper, we describe EarSketch, an integrated curriculum, software toolset, and social media website, grounded in constructionist principles, that targets introductory high school computing education. We hypothesize that the use of collaborative computational music composition and remixing may avoid some of the engagement and culture-specific issues that other approaches, both in music and other media, have had. We discuss the design of EarSketch, its use in a pilot summer camp, and the evaluation results from that pilot.	Tackling engagement in computing with computational music remixing	NA:NA:NA:NA:NA:NA	2018
Jennifer Burg:Jason Romney:Eric Schwartz	This paper reports the results of a four-year National Science Foundation CCLI grant that supported development and assessment of curricular material linking computer science (CS), digital audio, music, and sound design. A book and online learning aids were created and used in courses and summer workshops. The material was refined based on feedback from students and instructors. Learning was measured by pre- and post-tests. In this paper, we map the curricular material to the Big Ideas for CS Principles as well as to core CS courses. Objective and subjective assessment of the material over the course of the grant leads us to recommendations for purposeful, parallel, and convergent learning, concepts that are explained in the paper.	Computer science "big ideas" play well in digital sound and music	NA:NA:NA	2018
Blake Sawyer:Jason Forsyth:Taylor O'Connor:Brennon Bortz:Teri Finn:Liesl Baum:Ivica Ico Bukvic:Benjamin Knapp:Dane Webster	This experience report presents the planning, execution and results of an exploratory 5-day musical instrument MAKErs camp for K-12 students. Students used various hardware sensors, a graphical programming environment and different physical prototyping techniques to create musical instruments. The design of a musical instrument introduces students to the full spectrum of the design process including form factor and function. Throughout the camp, students shared and performed in front of their peers to gain feedback as they iterated through the design of a musical instrument.	Form, function and performances in a musical instrument MAKErs camp	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
David Stucki	NA	Session details: Paper - security and secure programming	NA	2018
Minzhe Guo:Prabir Bhattacharya:Ming Yang:Kai Qian:Li Yang	As smart mobile devices grow increasingly in popularity, so do the incentives for attackers. Recent surveys on mobile security describe the rapidly increasing number and sophistication of mobile attacks. Newer sources of risks are being introduced or explored in the mobile computing paradigm where traditional security threats are also evolving. The prevalence of mobile devices and the rapid growth of mobile threats have resulted in a shortage of mobile security personnel. Educational activities are needed to promote mobile security education and to meet the emerging industry and education needs. This paper presents our initial effort on exploring a learning approach to mobile security, which aims at taking advantages of the benefits of mobile devices and the best practices in learning information security, promoting students' interests, and improving students' self-efficacy. An Android security labware is designed to implement the environment and materials for the learning approach. We integrated the pilot modules of the labware into two security courses in two semesters. The majority of the students provided positive feedback and enjoyed the Android security practices.	Learning mobile security with android security labware	NA:NA:NA:NA:NA	2018
Binto George:Martha Klems:Anna Valeva	Since human factor security exploits are on the rise, ensuring Usable Security has become extremely important for the overall security of computer systems. However, traditional undergraduate computer security curriculum focuses heavily on technical aspects of security and generally ignores Usable Security. To address this problem, we developed a new 3P Learning Method that encourages students to view security problems from three different perspectives (i.e. 3P), namely: Defense, Offense, and Use. The 3P Method lets us incorporate Usable Security into the existing curriculum and helps students to consider Usable Security as an integral part of secure system design rather than an optional add-on.	A method for incorporating usable security into computer security courses	NA:NA:NA	2018
Jun Zhu:Heather Richter Lipford:Bill Chu	Software flaws are a root cause of many of today's information security vulnerabilities. Current curricula emphasis on traditional information security issues does not address this root cause. We propose educating students on secure programming techniques through interactive tool support in the Integrated Development Environment (IDE). We believe this approach can complement other curricula efforts by teaching and providing continuous reinforcement of practices throughout programming tasks. In this paper, we evaluate our prototype tool, ASIDE, which provides instant security warnings, detailed explanations of vulnerabilities, and code generation. We report the results of an observational study on 20 students from an advanced Web programming course. The results provide early evidence that our tool could potentially help students learn about and practice secure programming in the context of their programming assignments.	Interactive support for secure programming education	NA:NA:NA	2018
Haklin Kimm	NA	Session details: Paper - capstones	NA	2018
Saquib Razak	Research shows that domain mastery requires three phases: acquiring core component skills, practicing integrating these skills, and then applying these skills to solve real-world problems. Although achieving domain mastery is the overall goal of the Computer Science (CS) curriculum, I will make the case that it is important to expose students to all three phases of learning in the first programming course. Having a mini-capstone project on a relevant problem gives the students the deep understanding of why these core components are needed and how they integrate as the students are learning them. In the process, working with a real application excites the students about computer science and can provide them with the confidence to engage in more challenging projects. This paper reports on an experiment where students implement a vehicle license plate number recognition project. Initial results from this experiment indicate that students who worked on the project perform better in the course learning objectives.	A case for course capstone projects in CS1	NA	2018
Paul V. Gestwicki:Brian J. McNely	We propose the periodic retrospective assessment (PRA) technique for reflection-based evaluation of interdisciplinary, team-oriented learning experiences. PRA is characterized by two forms: an assessment at the end of each production iteration, followed by a summative assessment after production has ended. An empirical evaluation of PRA was conducted within a fifteen-week immersive studio--a student-driven, faculty-mentored learning experience in which all learner activity is directed toward a single project, undertaken in collaboration with a community partner. This evaluation reveals that students maintain primary focus on pragmatic production issues during the studio duration, although with secondary yet consistent focus on learning and development. PRA surfaces how the immersive studio produced positive learning outcomes with respect to interdisciplinary collaboration and lifetime learning.	Empirical evaluation of periodic retrospective assessment	NA:NA	2018
Dianxiang Xu	This paper presents a unique summer project for a group of undergraduate students and high school computer teachers to gain research experiences in the area of cybersecurity. The students and teachers were selected from the participants in the NSF REU and RET programs at the host institution. Through the research on security testing of a real-world online banking system, the students and teachers have not only learned about the cutting-edge security testing techniques, but also made publishable contributions to the research base. The two collaborating graduate assistants served as an immediate role model for the undergraduates and an indirect role model for high school students through the teachers. With the help from the graduate assistants, the students and teachers were able to work effectively toward achieving their research objectives. The internal competition helped the participants get a better sense of achievement and satisfaction. The research experiences also prepared the teachers with the necessary knowledge for introducing cybersecurity topics (e.g., secure programming) into future classroom activity. As such, the project described in this paper provides a model summer program for undergraduate and/or K-12 teachers to gain research experiences.	Software security testing of an online banking system: a unique research experience for undergraduates and computer teachers	NA	2018
James Maher	NA	Session details: Paper - educational research	NA	2018
Marie desJardins:Susan Martin	The goals of UMBC's CE21-Maryland project are to build community and to increase the accessibility, diversity, and quality of high school CS education in Maryland. The ultimate objective is for all Maryland students to have access to high-quality, college preparatory CS courses. We present findings from a survey of high school computing teachers regarding the status of CS education in Maryland. Some findings of interest are that urban and rural students have less access to computing courses than suburban students; female teachers are more likely to attract female students and to have larger AP CS classes; and neither teacher race nor gender is correlated with the number of minority students enrolled in CS classes. We describe community building successes through two Google CS4HS workshops, a Maryland CSTA chapter, and statewide summit meetings for educators and administrators. We also discuss how our methodology can be used as a model for other states who are working towards CS education reform at the high school level.	CE21--Maryland: the state of computer science education in Maryland high schools	NA:NA	2018
Michail Giannakos:Peter Hubwieser:Nikos Chrisochoides	The curricula for Computer Science Education (CSE) of many countries comprise both Programming and Information and Communication Technology (ICT); however these two areas have substantial differences, inter alia the attitudes and beliefs of the students regarding the intended learning content. In this study, variables from the Unified Theory of Acceptance and Use of Technology and Social Cognitive Theory were chosen as important factors in students' behavior and attitude towards CSE. This hybrid framework aims to measure the level of the selected key variables on CSE and identify potential differences among ICT and Programming courses. Responses from the total of 126 Greek students, (71 attending ICT courses and 55 attending Programming Courses) were used to measure the variables and to identify the differences between ICT and Programming students. The results revealed several differences in the measured variables. The overall outcomes are expected to contribute to the understanding of students' likelihood to pursue computing related careers and promote the acceptance of CSE.	How students estimate the effects of ICT and programming courses	NA:NA:NA	2018
Shuchi Grover:Roy Pea	Past research on children and programming from the 1980s called for deepening the study of the pedagogy of programming in order to help children build better cognitive models of foundational concepts of CS. More recently, computing education researchers are beginning to recognize the need to apply the learning sciences to develop age- and grade-appropriate curricula and pedagogies for developing computational competencies among children. This paper presents the curriculum of an exploratory workshop that employed a discourse-intensive pedagogy to introduce middle school children to programming and foundational concepts of computer science through programming mobile apps in App Inventor for Android (AIA).	Using a discourse-intensive pedagogy and android's app inventor for introducing computational concepts to middle school students	NA:NA	2018
Lewis Baumstark	I report on experiences teaching a Senior-level Special Topics course in Combat Robotics during the Fall 2012 semester. The surface goal of the course was for student teams to design and build a three-pound remote-control combat robot conforming to the Robot Battles rules (http://robotbattles.com/rules) and then to compete against their peer teams at semester's end. The higher-level goal was to expose students to physical design and fabrication techniques -- topics well outside our regular Computer Science curriculum -- and integrate those techniques with software development. Students were required to: Design their robot using 3D Computer-Aided Design (CAD) software. The CAD model allowed students to experiment with design trade-offs, ensure proper fit and placement of parts, and to estimate the weight of the robot prior to build to ensure their design was under the limit. Fabricate parts for their robot using a Computer Numerical Control (CNC) milling machine (similar to that used by machinists and product designers in industry). Understand tool, machine, and workshop safety. Build and program a custom remote-control system using Arduino microcontrollers and Xbee wireless modules. This included soldering, obeying voltage and current limitations, serial communication, servo and motor control, and interfacing with other hardware (such as a Wii Nunchuck video game controller).	A combat robotics course: programming meets computer-aided design and fabrication (abstract only)	NA	2018
Charles Wallace:Shreya Kumar	We introduce Communication Patterns (CPs) as a tool for rigorous qualitative analysis of project communication. Using our library of student capstone project case studies as a test bed, we describe our approach to communication analysis. We identify, analyze and compare the communication, at various granularities, that takes place in student projects. The patterns allow us to objectively describe the structure (what, how, who, where, when, why) of the different forms of communication that occur in a software project. Patterns range from strategic (choice of genre) to tactical (wording or tone). We use CPs to sensitize students to their communication choices as developers and users. The CP framework is familiar to students (akin to design patterns) and generative (readily extendible to new scenarios). In addition, we as researchers and instructors plan to use CPs to assess how new pedagogical practices, moving from traditional classroom communication towards more blended learning, are changing the student experience and assess the effectiveness of current software project communication practices. We use CPs to analyze the communication that occurs in teaching computer use to novice senior citizens. The examples illustrate how CPs can be used to study communication practices in many different contexts of software development or use.	Communication patterns: a tool for analyzing communication in emerging computer science educational practices (abstract only)	NA:NA	2018
Tamara Denning:Tadayoshi Kohno:Adam Shostack	In this poster, we present Control-Alt-Hack": White Hat Hacking for Fun and Profit--a card game for computer security outreach and education. A general lack of awareness about computer security contributes to the insecurity of new consumer technologies. We seek to increase people's prioritization of computer security and their understanding of the variety of attacks and technologies that can be vulnerable to compromise. We work towards this goal via a recreational tabletop card game where people play as white hat hackers, using their characters' skills to perform a variety of hacking Missions. We licensed a game mechanic from a hobbyist game company, worked with graphic designers and illustrators, and rewrote card text to make the game about working as a computer security professional. Visit www.controlalthack.com for supplementary educational materials and to request free educator copies.	Control-Alt-Hack™: a card game for computer security outreach and education (abstract only)	NA:NA:NA	2018
Sarah Hug:Jane Krauss	K12 students have limited access to computer science curricula in United States' public schools. Individuals' perceptions of the field as a masculine, elite, and individualistic profession can restrict which K12 students are encouraged to pursue careers in computer science. The Counselors for Computing (C4C) campaign is designed to expand the profile of the "future computer scientist" by educating school counselors about the need for qualified professionals in this engaging, creative, collaborative, and rich field of study. This project is a collaboration with the American School Counselor Association (ASCA), the Computer Science Teachers' Association (CSTA) and more than thirty other members of NCWIT K-12 Alliance are partners in this campaign, developed to educate and equip academic school counselors to best advise students regarding computing careers. Advocates of computing who serve as academic school counselors can support student interest and aspirations towards computing through broadening course scheduling practices, linking students' current interest to computing (e.g., bioinformatics, media development), and considering multiple post-secondary paths in computer science. The C4C training program equips counselors to better inform youth about computing career paths, encourages counselors to focus on computing careers across pathways (e.g., for military, community college, and four year college/university bound students). In this poster presentation, the authors: a) describe the collaborative professional development approach taken in C4C, b) direct K12 computer science educators and stakeholders to free resources developed for C4C, and c) provide initial evidence of the program's effectiveness.	K12 outreach: motivating k12 school counselors to embrace the changing face of computing (abstract only)	NA:NA	2018
Robert E. Beck:Daniel T. Joyce	Sustainability has been defined variously as the perpetual maintenance of diverse and productive environments upon which all life depends (Renewable Natural Resources Foundation); the responsible use of resources over an indefinite period of time (National Association of Biology Teachers); or "meet[ing] the needs of the present without compromising the ability of future generations to meet their own needs. (World Commission on Environment and Development)" A sustainable future depends on a workforce of professionals knowledgeable about creating practices, processes, and infrastructure to optimize resource management, and on a community informed about the ethics and influence of human activity on the integrated environmental, economic and social aspects of sustainability. For these reasons we believe that STEM education, which includes computing, is key to developing the knowledge, the technology, the skills, the motivation and the policies needed for a sustainable future. SIGCSE is one of eleven professional societies involved in the Sustainability Improves Student Learning (SISL) project, which seeks to engage those who teach computing in an effort to include sustainability ideas throughout the computing curriculum. This poster presents the current status and future plans of the SISL project, highlighting where and how computing plays a significant role (with special thanks to the ITiCSE sustainability-related working groups for the where and how information).	Sustainability improves student learning (SISL) in computing (abstract only)	NA:NA	2018
Steven I. Gordon	We present the components of model undergraduate and graduate programs in computational science that have been developed as part of the XSEDE Education Program. The models serve as a template to assist institutions in creating formal programs in computational science that span multiple disciplines including the sciences and engineering, mathematics, computer science, and, more recently, social sciences. The aim of the services is to encourage more institutions to consider computational science as a part of their core curriculum and to reduce the time it takes to integrate new materials and programs. The services provided include campus visits to explore program creation in the context of the interests of the current faculty conducting research and instruction that includes computational modeling. XSEDE also sponsors professional development workshops for faculty and students. These include one day to full week workshops focusing on computational science education in various disciplinary areas as well as technical training that focusing on a variety of computational tools and methods. XSEDE has also created an index to sharable instructional materials focused on building a virtual community interested in computational science education. The index will allow faculty and students to find reviewed examples of models, exercises, and instructions that can be incorporated into current and future courses.	Creation of interdisciplinary programs in computational science (abstract only)	NA	2018
Scott Britell:Lois Delcambre:Edward Fox:Randy Steele	With the proliferation of digital educational resources comes the requirement to provide educators with tools for collaboration, customization, and reuse of these resources. We describe our repository software built upon the Drupal content management system that allows educators to form curriculum-based online communities to create, share, and adapt educational resources and curricula. Teachers can create curricula from scratch, add to existing curricula, or clone and customize curricula to fit their teaching environment. We also show how our system can help educators see the usage contexts of their materials. The software is demonstrated in the STEMRobotics middle and high school robotics curricula repository and the MSScience middle school standards-based curriculum collaboration site.	Curriculum collaboration, customization, and reuse: creating communities in digital repositories (abstract only)	NA:NA:NA:NA	2018
Rita Manco Powell:Christian Murphy:Adam Cannon:Joshua Gordon:Arthi Ramachandran	The Columbia Emerging Scholars Program (CESP) in Computer Science is a Peer Led Team Learning (PLTL) approach to bringing undergraduates new to the discipline together with peer mentors to work on computational problems, and to expose them to the broad array of disciplines within computer science. CESP demonstrates that computer science is necessarily a collaborative activity that focuses more on problem solving and algorithmic thinking than on programming. In spring 2012 the computer science department at Columbia University completed the 9th iteration of CESP, with 104 women and 36 men having completed the program to date. Female enrollment at Columbia during the past four years has increased from 9% to 23%, but did CESP play a part in this increase? This poster presents our evaluation data, which indicates that CESP increased enrollment in the computer science major, especially for women. Students who took CESP along with the introduction to computer programming course in 2009-10 were three times more likely to major in computer science the following year than the students who took introduction to programming without CESP. 47% of CESP students subsequently chose the computer science major. In addition, survey results indicated that a large majority of students intended to take another computer science course, were enthusiastic about the program, and found the workshop topics exciting and engaging. Participants reported that they learned more about computer science in CESP, and would recommend CESP to others.	Evaluation of the emerging scholars program at Columbia University (abstract only)	NA:NA:NA:NA:NA	2018
Brian K. Hare	This poster reports on a set of classroom interventions at a public urban university to reduce the failure and withdrawal rate in CS1. Though unsuccessful in their original goal of reducing the number of students withdrawing from the course or receiving poor grades, the interventions provided valuable information suggesting contributors to poor course outcomes. These included concurrent full-time enrollment and full-time employment and lack of foundational skills. We also found that at-risk students could be identified with a one-page quiz the third week of the semester. We have made several course revisions going forward, including restructuring programming assignments and adding online practice problems, and revised our academic advising procedures.	Classroom interventions to reduce failure & course withdrawal in CS1 (abstract only)	NA	2018
Matthew A. Lang	Education research has long borne that students who are the most successful are those that are intrinsically motivated. In the computer science education community there have been attempts to create intrinsic motivation in our students through the use of puzzles and games. At the same time, members of the community have advocated the use of storytelling to increase intrinsic motivation and student learning. In an undergraduate computer science curriculum, large software projects and challenging lab assignments are necessary elements. While successful students thirst for these experiences, many students dread courses driven by large and challenging assignments. In order to increase the intrinsic motivation of students in such a course, the assignments can be structured as elements of an alternate reality game (ARG) where successful participation in and completion of assignments advances a narrative set in the real world. The advantage of using a ARG in an educational context is many-fold: its storytelling and puzzle elements increase student engagement, it generates a sense of excitement in the class, and it increase student motivation to complete assignments. In an implementation of this course backdrop, student surveys indicate that students find the narrative element of the course fun, that they are more excited to do the lab assignments because of it, and that it makes them more excited about studying computer science. Furthermore, the excitement around the game helped to build community: interested students who completed the course helped in the preparation of the ARG for the next offering of the course.	Using an alternate reality game as a course backdrop (abstract only)	NA	2018
Aaron Springer:Matthew Johnson:Michael Eagle:Tiffany Barnes	Examining student interactions in multi-step problems from Intelligent Tutoring Systems currently involves examining thousands of interactions from hundreds of students. We designed and implemented a sequential pattern mining algorithm and a sequence rating algorithm that together recognize interesting student action sequences and display them to the user in the context of the larger graph system. With the added feature of our algorithms in the InVis system, we hope to allow teachers and tutoring system designers to better understand student action patterns and thus cater better to their learning.	Using sequential pattern mining to increase graph comprehension in intelligent tutoring system student data (abstract only)	NA:NA:NA:NA	2018
Zachary Dodds:Michael Erlinger	MyCS (Middle-years Computer Science) is a one-semester CS curriculum that engages middle schoolers in computational skill-building. Scratch programming serves as a touchstone throughout the eighteen-week syllabus. Students punctuate that foundation with hands-on activities leveraged from excellent resources such as Exploring Computer Science, CS Principles, webdev tools, and CS unplugged. Over twenty classrooms and 700 students participated in MyCS's pilot years within the Pomona, CA and Lihue, HI school districts; 2013-15 will see an NSF-supported expansion of its summer workshops, academic-year classes, and program evaluation. This poster highlights our experiences developing MyCS, deploying it widely, and soliciting feedback on students' evolving computational identities.	MyCS: middle-years computer science (abstract only)	NA:NA	2018
Lila Ghemri:Rattikorn Hewett:Colleen Livingston	The incidence of cyberbullying has been on the increase as more young people are spending time socializing online. Cyberbullying manifests itself through the sending of embarrassing pictures, mean-spirited text messages, emails and/or postings on social media. Technology has exacerbated the problem by allowing bullying to be accomplished easily and anonymously. The problem of cyberbulling has been brought at the forefront of many colleges and high schools because it is spreading. Indeed, studies show that 39% of social network users have been victims of cyberbulling, compared with 22% of online teens who do not use social networks. Additionally, 88% of teens using social media say they have witness an instance of cyberbulling. Victims of cyberbullying experience negative emotional, physical and social consequences, sometimes leading to the victim's suicide. This module aims at increasing students' awareness of cyberbulling while introducing game theory. Game theory is used to model the bully and the victim and exposes the student to various 2-player models (zero-sum, predator-prey, Nash equilibrium) and strategies that produce the best outcome. This module will be 6 to 9 hours long and will present a definition of cyberbullying, statistics about its prevalence, and research done to prevent and deter cyberbullying. Next, concepts of game theory relevant to modeling a cyberbully and their victim, as 2x2 games, actions, payoffs will be introduced. As regards to learning objectives, it is anticipated that students, who complete this module, will be able to use simulation software to model various game strategies to represent a cyberbullying situation.	Cyberbulling and game models (abstract only)	NA:NA:NA	2018
Ming Yang:Kai Qian:Minzhe Guo:Prabir Bhattacharya:Guillermo Francia:Li Yang	Digital mobile devices, such as smart phones, have become an essential part of daily lives for the young generation, especially college students. The rapid growth of wireless and mobile technologies results in a huge demand on qualified professionals in this area. More and more schools started teaching wireless and mobile networking, but how to provide students with hands-on practice experience is still a challenge. The networking capabilities of smart mobile devices make it a perfect instructional tool for networking related course teaching. In this study, we have designed and developed a labware with Android smart phones that focuses on teaching and learning of fundamental data communications and networking concepts by making use of the mobile nature of smart phones and mobile devices. The goal of this labware is to provide students with hands-on experience with mobile devices to better understand networking concepts such as different layers of TCP/IP protocol, Bluetooth, Wi-Fi, and a wide range of networking methodologies/implementations in a easy-adoptable, affordable, and effective way.	Enhance computer networks learning with hands-on mobile device based labware (abstract only)	NA:NA:NA:NA:NA:NA	2018
Alison Clear:Annemieke Craig:Catherine Lang	The low numbers of female students in computing and computer science courses is still of concern. Initiatives to bring together women in technology to share their experiences, is an important aspect of increasing the numbers of female students entering the computing profession. A very successful celebration of Women in Technology was recently held in Australasia based on a tried and true US model. This model was adapted for the region and added to, other countries will be able to take the model and use it in their own environments and cultures. This poster will describe the recent event and give suggestions and models for other regions and countries to be able to replicate it.	Women in technology: an international collaborative celebration (abstract only)	NA:NA:NA	2018
Nan Li:Apoorv Khandelwal:Tung Phan:Dave S. Touretzky:William W. Cohen:Kenneth R. Koedinger	One essential goal in education is to improve understanding of how humans acquire knowledge and how students vary in their abilities to learn. Building an intelligent agent that models student learning would be a significant achievement in the learning sciences. SimStudent is a state-of-the-art intelligent agent that simulates a human's learning process. However, SimStudent has only been living in the world of graphical user interfaces. To construct a more human-like learning agent, we integrate SimStudent with a cognitive robot, Calliope5KP, to create a physical agent that is able to learn skill knowledge by interacting with users in the physical world. We demonstrate the integration in a tic-tac-toe game, and show that the SimStudent robot is able to learn reasonably well with 12 games.	Creating an educational robot by embedding a learning agent in the physical world (abstract only)	NA:NA:NA:NA:NA:NA	2018
Cameron Macdonell	A common criticism of undergraduate computer science is a disconnect from software development in the real world. To remedy this shortcoming, we introduced an actively developed open-source software project into a third-year software engineering course. We selected a humanitarian software project, Ushahidi, a crisis-mapping web application that is deployed worldwide to track events as diverse as election violence in developing countries, natural disasters and recently, Hurricane Sandy. The primary learning outcome of working with open-source software is that communication skills are as important as programming skills when developing software on a large scale. Working with an active open-source project exposed students to interesting issues related to real-world software development and facilitated direct interaction with expert, professional developers. Positive experiences included successfully understanding, modifying and debugging software written by someone else -- a rare activity in most curricula. The students also had to work with Ushahidi's distributed development model, common to many open-source projects, which reinforced the importance of communication skills and associated tools. Students also experienced some negative realities such as non-existent or outdated documentation and inconsistent software interfaces. Aside from the technical learning outcomes, an intangible benefit of our approach was the motivation students experienced from having someone other than their instructor interested in their progress. As well, the use of a humanitarian software project exposed students to the changing face of computing from its business and scientific roots into new application areas.	Teaching software engineering with an open-source humanitarian software project (abstract only)	NA	2018
Robert E. Beck:Edward Carr:Wingyan Chung:Edward Fox:Christine Nass	As computing moves into its sixth decade as a formal field of study, a great deal of attention is focused on the breadth of relationships between computing and other disciplines. Descriptors of this relationship include computing in context, computing with a purpose, computing + X, computational X, interdisciplinary computing, multi-disciplinary computing, and trans-disciplinary computing. Regardless of the descriptor, the goals for exploring the relationship remain the same: students need to understand how the power of computing informs and shapes ideas throughout the academy and society. They need to learn appropriate concepts in computing and to see these applied to other areas of study. This learning will be most effective when approached through active participation of students, as they tackle questions and problems coming from society's ever-growing and ever-changing reliance on computing devices and modes of interaction. Our NSF-funded project, titled Computing in Context, fosters interdisciplinary computing education by creating exemplars of curricular materials, testing these materials in undergraduate computing courses, and disseminating the materials through computingportal.org. We focus our effort on four areas of applied computing: computational linguistics, computing and music intelligence and security informatics, and web science. Our materials will be designed for inquiry-based learning, whether this occurs in lecture as a brief conversation between pairs of students or in lab as loosely formulated problem or scenario or as a multi-week, team-based project.	Computing in context (abstract only)	NA:NA:NA:NA:NA	2018
Susan H. Rodger:Dwayne C. Brown, Jr.:Michael Hoyle:Michael Marion	Our project is part of the Adventures in Alice Programming project at Duke University. In particular, our project is integrating computer science into middle school math using Alice. We show several ways for students to improve their math skills while engaging their interest in programming. First, we have created Alice worlds for students to interact with to practice math concepts. Second, we have created tutorials to guide students on building such worlds. Third, we have created short challenge problems for students to focus on the math and the programming statements to complete a mostly built world. To encourage the use of Alice with projects we have developed many sample math projects. To encourage teachers to use Alice with math and computer science, we have been mapping our free curriculum materials to both the Commmon Core Math standards and the CSTA CS standards. Our curriculum materials are available at www.cs.duke.edu/csed/alice/aliceInSchools	Integrating computer science into middle school mathematics (abstract only)	NA:NA:NA:NA	2018
Eric Fouh:Daniel Breakiron:Mai Elshehaly:T. Simin Hall:Ville Karavirta:Clifford A. Shaffer	We present a study to evaluate OpenDSA, an open source, online system combining textbook-quality content with algorithm visualizations and interactive exercises for data structures and algorithms courses. We hypothesize that answering many questions and exercises with immediate feedback allows students to know whether they are on track with their learning. In a quasi-experimental study, a control group received lecture and textbook for three weeks. The treatment section spent class time working through equivalent content and exercises in OpenDSA. A post-test compared the two. An opinion survey examined students' perception and opinions about the experience. Detailed interaction logs were used to analyze student use of the tutorials and exercises to understand how they used the system.	OpenDSA: using an active eTextbook to teach data structures and algorithms (abstract only)	NA:NA:NA:NA:NA:NA	2018
Chukwunweike T. Abuah:Rogelio Calderon:Martin Estrada:Zarni Htet:Adriana M. Hurley:Katherine Ingersoll:Hart Russell:Sydney Ryan:Kimberly Spasaro:Prashanna Tiwaree:Samuel A. Rebelsky	Calls are growing for computer science faculty to build a citizenry who are fluent with information technology and able to think computationally. While one might hope that our students would naturally understand the importance of such knowledge, many do not. CS faculty must therefore find ways to motivate such students. In this project, we explore interactive scripting, scripting done while working in an application. Scripting applications allows non-programmers to explore creative spaces and more efficiently accomplish many tasks. The interactive scripting model allows students to mix work they do normally ("by hand") with scripts that they write to better interact with the system ("by code"). Rather than focusing on one language or programming environment, we explore a multilingual approach that supports scripting in the environment the student (or their professor) considers appropriate. The success of the Media Computation approach leads us to focus on media applications, primarily image making and manipulation. We describe our experience (1) developing and using libraries to support interactive scripting in a functional language and an object-oriented language; (2) extending two open-source graphics applications, the GNU Image Manipulation Program and Inkscape, to support interactive multilingual scripting and (3) building novice-friendly examples and procedures.	Making images by hand and by code: motivating students with multi-language interactive media application scripting (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Michael Graf:David Bunde:David Ely:David Lucas:Jens Mache:Chris Mitchell:Andrei Papancea:Miriam Robinson:Ben White	One promising approach to teaching parallel programming is to use high-level parallel programming languages, which handle some of the more mundane details of parallel programming and allow both instructors and students to focus on the main ideas. How does one go about selecting the language to use? We present short descriptions of a variety of languages (Chapel, Cilk, CUDA, Habanero Java, Hadoop, OpenACC, OpenMP and Scala), including our assessment of their strengths and weaknesses, plus some general considerations to keep in mind when teaching parallel programming.	Selecting and using a parallel programming language (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Cameron L. Fadjo	How do we best prepare middle and high school students for college and career pathways in software engineering? Current industry and academic trends suggest that students are best prepared for postsecondary success in new and emerging interdisciplinary fields through extensive training in higher-order thinking skills, such as creative thinking, problem solving, critical thinking, and computational thinking, as well as the development of advanced technical skills, such as applied computing and engineering. To address the urgent need to prepare students for postsecondary industry and educational pathways that utilize software engineering principles, the Office of Postsecondary Readiness (OPSR) within the NYC Department of Education has created a comprehensive curricular program in software engineering for students in grades 6 to 12 called the Software Engineering Pilot (SEP) program. OPSR seeks to improve college and career readiness for all students by placing the SEP program in twenty (20) NYC public schools --ten (10) middle schools and ten (10) high schools-- by the fall of 2013. In this poster session I will outline the various aspects of our comprehensive curriculum, including innovative approaches to teaching abstract concepts, and present the recommended overall curricular scope and sequence for introducing software engineering to students in grades 6 to 12.	A comprehensive software engineering education program for grades 6 to 12 in NYC public schools (abstract only)	NA	2018
Sam Bryfczynski:Brian C. Dean:Roy P. Pargas:Melanie M. Cooper:Michael Klymkowsky	Data structures are one of the fundamental concepts that all computer scientist students must learn if they are to succeed in their careers. Therefore, it is important to develop and assess questions targeted at improving the teaching of data structures. Unfortunately, research suggests that multiple choice or matching questions cannot be used to properly assess deep knowledge on a subject [1,2,3,4]. Students can often guess their way to the correct answer. We believe that students must construct these structures instead of simply identifying them. However, analyzing many hand-drawn data structures is time-consuming for large class sizes. This poster describes a web-based software tool, BeSocratic, designed to facilitate interactivity in a data structures course. BeSocratic allows students to build data structures intuitively using a combination of handwriting recognition and gestures. Using BeSocratic, instructors can create intelligent tutors that teach students to construct various data structures. These tutors are able to identify problems and provide multi-tiered feedback to students. Furthermore, BeSocratic records each action a student makes, so it may be replayed and visualized to gain deeper insights into how students construct data structures and complete algorithms. We have created and pilot-tested a BeSocratic activity, which teaches students how to construct splay trees.	Teaching data structures with BeSocratic (abstract only)	NA:NA:NA:NA:NA	2018
David Weintrop:Uri Wilensky	RoboBuilder is a blocks-based, program-to-play game designed to introduce students to core aspects of computational thinking in a fun and engaging environment. The game employs a constructionist design to challenge players to invent and implement strategies to control an on-screen robot using a specially designed visual programming language. During the game, players' robots compete against a series of progressively more challenging opponents in one-on-one battles. Through playing the game, players construct working programs, providing learners with the experience of reifying their own ideas using a computational medium, a practice central to our notion of computational thinking. This poster presents the design rationale for RoboBuilder and discusses key aspects of the game that contribute to giving learners a positive, hands-on introduction to core computational thinking skills including computationally expressing ideas, algorithmic thinking, and debugging.	Robobuilder: a computational thinking game (abstract only)	NA:NA	2018
Joseph F. Grafsgaard:Joseph B. Wiggins:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Understanding how students solve computational problems is central to computer science education research. This goal is facilitated by recent advances in the availability and analysis of detailed multimodal data collected during student learning. Drawing on research into student problem-solving processes and findings on human posture and gesture, this poster utilizes a multimodal learning analytics framework that links automatically identified posture and gesture features with student problem-solving and dialogue events during one-on-one human tutoring of introductory computer science. The findings provide new insight into how bodily movements occur during computer science tutoring, and lay the foundation for programming feedback tools and deep analyses of student learning processes.	Modeling student programming with multimodal learning analytics (abstract only)	NA:NA:NA:NA:NA	2018
Deena Engel	A review of literature in the Digital Humanities field reveals ongoing research on curriculum development. Case studies highlight projects as a means of teaching humanities computing. From a computing perspective, a literature review reveals studies on building successful programming curricula across disciplines; implementing project-based learning ; the role of Computer Science departments in inter-disciplinary studies and the role of teaching web programming to non-majors. Students must fulfill two pre-requisites in order to attend our class: at least one semester each in web design and programming in a high-level language (e.g. Python or Java). CS majors are welcome to take this as an elective. This course was given for the fourth time in the fall, 2012 term. Topics in this course focus on the following subjects and projects: textual analysis by writing programs in Python; a text encoding project using XML with adherence to current Text Encoding Initiative standards (see TEI - http://www.tei-c.org/index.xml); building an on-line archive from primary source materials using xHTML/CSS, XML, XSLT and JavaScript; and creating works of software art using Processing /Java (http://processing.org/). Students are exposed to current research throughout the Digital Humanities by a series of guest lectures given by NYU faculty from the departments of English, History, Museum Studies, and Classics.	Embracing the digital humanities: a course on computing in the humanities for undergraduate computer science minor students (abstract only)	NA	2018
Edward Walker	We describe our approach in developing a Cloud Computing course for undergraduate CS majors. Teaching Cloud Computing can be a challenge, as there are many concepts that need to be covered within the limited time-frame of a three-credit hour semester course. Our approach focused on teaching the concepts and techniques for writing distributed client software using Cloud services, while covering other aspects of Cloud Computing at a higher-level using a story-telling approach. The core concepts were taught through a series of hands-on, scenario-driven, lectures and labs using Cloud services provided by Amazon.com. We share our experience in evaluating other Cloud Computing platforms for use in the class, and the challenges and false assumptions we encountered while teaching it.	A cloud computing curriculum for undergraduate CS majors (abstract only)	NA	2018
Susan Makrouhee Haynes	This poster describes our experiences, materials and plans using the Atmel AVR, a RISC microprocessor, for teaching beginning computer organization at the college level. In particular, we use this microprocessor, typically packaged into the Arduino, to give hands-on experience with: (1) Assembly language programming, including ISA (16 bit instructions), multiple types of branches, multiple addressing modes, (2) C language programming, (3) interrupt programming, (4) I/O programming, and (5) programming on-board components, e.g., timers/counters. Because I/O pins are exposed, it is easy to use logic analyzer or oscilloscope to observe actual signals. Students are charmed and motivated by the physicality of the platform. It is an easy to use platform with a large and enthusiastic user community.	Using the atmel AVR (arduino microcontroller) as the foundation of beginning computer organization course (abstract only)	NA	2018
AnnaLise Hoopes:Tara Chklovski:Dara Olmsted	Technovation Challenge introduces computer science to high school girls in a dynamic learning environment that offers exciting, real-world challenges to conquer; fresh new ways of thinking and problem solving; and the support of hands-on mentors drawn from academia and the tech industry. Over the course of 12 intensive weeks, students identify a problem drawn from their own real-life experiences and program a mobile phone application to solve it. They research their competition and identify ways in which they can win users and earn revenue. They practice their pitch with experienced investors who give them feedback on their app and business plan. The girls then pitch their ideas to a panel of venture capitalists. The winning team receives funding to take their app to market. Evaluations are conducted by an external evaluator. This past year, 67% of girls said they would like to go on to learn another programming language and we saw a 40% increase in girls' interest in studying computer science after completing the program. The number of girls who understand what a computer scientist does doubled, and the number of girls who said they knew how to write a computer program increased by 67%. Over the past three years over 800 high-school girls have programmed 163 mobile phone apps and learned how to launch their startups.	Technovation challenge: teaching girls computer science & entrepreneurship (abstract only)	NA:NA:NA	2018
Julie L. Johnson	The ACM Intercollegiate Programming Contest is probably the most prestigious competition of its kind. Decomposing problems into familiar algorithms; making tradeoffs between efficiency and complexity; working on a team under pressure; not only are these skills needed to compete successfully in such a contest, but are also highly valued in industry. The focus of this poster is to describe a course recently added to the curriculum at Vanderbilt University that centers on programming contest skills and yet, somewhat surprisingly, encompasses several significant learning objectives. Because we already had a general idea of what the learning activities of a course like this would be, we were careful not to simply cobble together performance metrics and learning objectives to suit them. This common mistake leads to assessments that devolve into skills tests measuring basic knowledge instead of instruments that gauge a deeper understanding of the target learning objectives. To combat these pitfalls I broke down the learning activity by identifying the skills needed for success in such an exercise. I then classified each skill in two ways. (i) How could this ability play a part in the achievement of some broader, overarching concept and (ii) in what way might the learning and practice of this skill contribute to the deeper understanding of these larger concepts. Our goal is to inform faculty on how they might include a course like this in their programs and to demonstrate its value to the curriculum.	Making programming contest practice worthy of academic credit (abstract only)	NA	2018
Lillian N. Cassel:Ursula Wolz	We summarize the results of our NSF funded exploration of interdisciplinary computing, including the following points: Interdisciplinary computing spans fields as diverse as visual art, music, the humanities and social sciences, health sciences, pure science, engineering, and mathematics. No field of inquiry in the 21st century extends its knowledge without the influence of computing.[1-4]; A bifurcation is occurring: at some institutions this climate of interdisciplinary work is nurtured, while at others it is thwarted by lack of motivation, resource limitations or simple inaccessibility.; Interdisciplinary computing is inherently collaborative between computing specialists and specialists in other fields. It is not merely pair-wise: computational-X or Y-informatics, but often the collaboration draws from a number of fields.; An important question is what is the breadth and depth of knowledge and skill required to engage in this work. Who needs to know what? What is the language of discourse? How is a methodology established and accepted, and how is subsequent work evaluated?; The mundane concerns of intellectual ownership, boundaries on the discipline (e.g. silos), professional advancement, financial support, and institutional buy-in can diminish the pure intellectual joy that is evident in existing interdisciplinary work.; Impediments are encountered in making the effective collaborations that are essential for the advancement of all the disciplines. The computing disciplines are essential to and also dependent on nearly all other branches of intellectual discovery. [5-6]	Interdisciplinary computing, successes and challenges (abstract only)	NA:NA	2018
Alison Clear:Michael Lance:Amitrajit Sakar	Learning cycle models have long offered structure and ideas for how to teach using a range of activities. Unfortunately recent studies have shown the models of learning styles and learning cycles are poorly supported by scientific evidence. In order to explore the answer to the question, how people learn, Race (2010) has put forward a model to simplify the terminology used in other learning models. The first two ripples are the Want ripple where the student has some want to learn, and the Need ripple where the learner has established that there is a need to learn the subject. These two ripples are considered the motivation aspects of the course. This poster describes the ripple model and the analyses the first two ripples in the context of Computer Science/Software Engineering students.	How students learn: ripples in computer science/software engineering curriculum (abstract only)	NA:NA:NA	2018
Daniela Marghitu:Taha Ben Brahim:John Weaver:Yasmeen Rawajfih	This poster describes a three-step ladder model of K 12 computing and robotics instruction beginning with a simpler programming environment (Kodu) and progressing to more challenging frameworks (Alice and Lego NXT). While moving between the three steps, students explore the similarities and differences in how concepts such as variables, conditionals, and looping are realized. Computer Science Unplugged activities are integrated and then implemented using Kodu, Alice and robots. This innovative model helps maintaining high levels of motivation, concentration, and fun during the entire six weeks of the camp. Feedback obtained from instructors, participants and participants' parents, reinforced by the results of the pre and post program evaluations, clearly indicated the program as a success.	Kodu, alice and lego robotics: a three-step model of effective introducing middle school students to computer programming and robotics (abstract only)	NA:NA:NA:NA	2018
Mario A.M. Guimaraes:Huwida Said	Video games can provide a secure and motivating active learning environment with practical scenarios. This video game project simulates a security competition where the player has to protect the system and keep the services running by reacting to injections that occur at random. The game has several modules (content areas) and levels. Modules have at least two levels. The first level requires installing and configuring hardware/software. For the second level players needs to respond to random events. In the Network module, players install and configure network components such as a firewall/router, a WPA2 WIFI, a web filter/proxy, a spam filter and antivirus software. In the Database Module, players install Apache Web Server, the Data Management System (DBMS) and Database Applications. Players need to install the database and the web-server in a port different than their default port, disable default passwords and test for SQL injection before installing the database. In the Encryption Module, players will be given several scenarios and need to choose the best encrypting method perform the actions to ensure that the data is encrypted. The last module integrates content areas from all other modules.	A multi-level video game for teaching security (abstract only)	NA:NA	2018
Catherine Bareiss:Larry Vail	There is a need for a new style of supporting a computer course. Although it is widely recognized that computer technology provides essential tools for all current scientific work, few university curricula adequately ground science majors in the fundamentals that underlie this technology. Introducing science students to computational thinking in the areas of algorithms and data structures, data representation and accuracy, abstraction, performance issues, and database concepts can enable future scientists to become intelligent, creative and effective users of this technology. The intent is not to turn scientists into computer scientists, but rather to enhance their ability to exploit computing tools to greatest scientific advantage. This poster demonstrates one course doing this.	Computing foundations for the scientist (abstract only)	NA:NA	2018
Elizabeth Patitsas:Michelle Craig:Steve Easterbrook	From an ongoing research project on teaching hash tables using worked examples, we present four preliminary observations. First, that rather than there being a small set of common misconceptions, student misconceptions are diverse and often unique to the student. Second, that students' naive language about hash tables when given a pretest is influenced by words from the Internet (e.g. "hashtag"). Third, we observed that students' language on concept questions evolves with repeated testing, becoming more conceptually accurate but technically less precise. And finally, that students' code code correctness is not correlated to code style, but is correlated to how students performed on the concept questions.	On the countably many misconceptions about #hashtables (abstract only)	NA:NA:NA	2018
Catherine S. Ashcraft	Girls and women continue to be underrepresented in technology one of the fastest growing fields in the U.S. economy. This persistent underrepresentation inhibits innovation by ignoring the diverse perspectives and life experiences women bring to invention and problem solving. Furthermore, disregard for girls' and women's participation perpetuates and exacerbates existing economic disparities for women. In the last decade, considerable research into increasing girls' participation in computing has emerged, but an up-to-date, easy-to-access synthesis of this research is lacking. This gap makes it difficult for educators and advocates to easily access the data they need to make compelling arguments about increasing girls' participation or to offer recommendations based on the latest research. To fill this gap, the National Center for Women & IT (NCWIT) has released a new, ground-breaking report that brings together the best available research in gender, technology, and K-12 education in a one-stop, easy-to-access resource, Girls in IT: The Facts. This poster session will provide an overview of the report. Attendees will gain access to the latest information on 1) the current state of affairs for girls in computing and the key barriers to increasing girls' participation in these fields. Most importantly, attendees will also learn about key promising practices and practical resources educators, policymakers, parents, and others can use to address these barriers. The ultimate goal of this session is to enable attendees to more effectively use this research to advocate for more inclusive computing curriculum, practices, and environments in K-12 contexts.	Girls in IT: the facts - a comprehensive look at the latest research on gender and technology in K-12 contexts (abstract only)	NA	2018
Lila Ghemri:Ping Chen	There has been a staggering increase in the volume of information exchanged over the Internet and the amount of personally identifiable information present online. Additionally, legislative mandates, such as the Sarbanes-Oxley Act of 2002, aim at monitoring organizational behavior and communication, and require organizations to safe keep all written corporate communication, thus creating huge repositories of information, most of which must be access-restricted. IT carries the primary responsibility for ensuring that private digital information does not become public, through the implementation of access-security measures, together with constant monitoring to ensure that even authorized users behave responsibly and ethically. This situation requires CS educators to introduce students to data privacy and the ways to protect users' privacy. We designed a privacy module, consisting of three lessons incorporated into a data mining course. The module aims at introducing students to privacy issues and legislations and the methods and technologies currently in use to protect privacy. The intended audience for this module is senior CS majors, with a working knowledge of database systems and basic data mining techniques. The module first presents students with an overview of privacy concepts and laws and regulations to protect it. Students are then introduced to data privacy-enhancing data manipulation methods as well as secure privacy preserving computation. Upon completion of this module, it is anticipated that students will acquire a good understanding of the concept of privacy, privacy laws and regulations and will become knowledgeable of the computational techniques used for preserving privacy in data mining.	Introducing privacy in a data mining course (abstract only)	NA:NA	2018
Kuba Karpierz:Joel Kitching:Brendan Shillingford:Elizabeth Patitsas:Steven A. Wolfman	We present a highly reusable "inverted" project in which students learn asymptotic and practical behaviour of dictionary data structures--linked-lists, arrays, balanced trees, and hash tables--in an atmosphere of mild competition. Much like David Levine's Nifty Assignment "Sort Detective", rather than implementing the dictionaries, students' programs generate input to our (unlabeled) implementations, and students use timing data to label the implementations. Much like Bryant and O'Halloran's computer architecture labs, students also compete to "convince" a web-based, automated system that their input generators distinguish the dictionaries based on trend-line behaviour. Initial assessment results suggest the project makes substantially improves students' understanding of practical performance of various dictionary data structures, particularly hash tables. UBC has used the project in three terms, and we plan to use it at UBC and U Toronto in coming terms.	"Dictionary Wars" (abstract only): an inverted, leaderboard-driven project for learning dictionary data structures	NA:NA:NA:NA:NA	2018
Jennifer Rosato:Chery Takkunen	A recent focus in CS education has been at the K-12 level, developing CS and computational thinking skills. Oftentimes CS programs find it difficult to get into schools. At St. Scholastica a unique partnership exists between CS and Education. Together they sponsor workshops, write grants, conduct research and support a CSTA chapter. Activities have credibility with K-12 educators and involve subject matter experts. CS programs are able to reach their target audience, encouraging more teachers to include CS in their curriculum and to support their students in pursuing technical careers. Education programs have another way to partner with teachers and provide continuing education. The poster will share benefits for each program, collaborative activities, logistics and results.	Computer science-education outreach: an interdisciplinary collaboration (abstract only)	NA:NA	2018
Marvin Andujar:Lauren Aguilera:Yerika Jimenez:Farah Zabe:Patricia Morreale	A research study measuring perceptions of computing held by Hispanic high school students has been conducted using two visual programming interfaces. Undergraduates conducted regular weekend classes using both Alice and App Inventor lessons to provide computing instruction to the students enrolled in an enrichment program. The goal of this research was to identify and measure high school student perceptions of computing after being introduced computing using drag-drop programming interfaces. The results of this work demonstrates how student interest in computing increases once exposed to computing, but the interest increment is not enough for them to major in a computing area, highlighting the importance of ongoing engagement in computing throughout the high school years.	Improving hispanic high school student perceptions of computing (abstract only)	NA:NA:NA:NA:NA	2018
Jinghua Zhang:Mustafa Atay:Rebecca Caldwell:Elva J. Jones	Statistics have shown that fewer African Americans are pursuing Computer Science (CS) degrees relative to their proportion of the overall population and among those who do major in CS very few are employed as programmers. Struggling with the lower level core CS courses is the main barrier preventing students from declaring CS major and retaining students in the program. In this poster, we present our project of developing game-like instructional modules to enhance student learning in those gatekeeper courses namely Computer Programming I, Computer Programming II and Data Structures. The project involves implementing three components: Education, Assessment and Dissemination. The education component includes developing game-like instructional modules for those three courses, which will allow students to learn the difficult concepts in a gaming context. The assessment component includes establishing an advisory board for the project and implementing the evaluation plan. The advisory board, which consists of experienced CS faculty, education faculty and professionals from the game industry, assists in project development and the evaluation process. The dissemination component includes disseminating results through national conferences, outreach programs, computer science HBCU consortiums, publications and an HBCU faculty workshop. Several modules have been developed and evaluated in the computer programming classes at Winston-Salem State University. Initial assessment results show that game-like instructional modules had a positive impact on student learning.	Developing game-like instructional modules to enhance student learning in lower level core computer science courses (abstract only)	NA:NA:NA:NA	2018
Sambit Bhattacharya:Bogdan Czejdo:Rakesh Malhotra	We present Geospatial Intelligence (GEOINT) as a context for computing education. GEOINT is a rich source of ideas for programming projects, algorithm design and use of databases. Students are interested in GEOINT due to its inherently visual subject matter and its strong ties with crime, espionage and social changes and upheavals. In short we are motivating computation as a subject that can provide solutions and insights into crime mysteries and complex events that unfold over time and space. In addition to keeping Computer Science majors interested, we also seek to attract students of other disciplines into computing. GEOINT and computing knowledge can provide initial preparation for certain jobs that are in demand and also for graduate school. Our assignments and programming projects that are inspired by GEOINT can be used in an introductory programming course or a more advanced course. These materials derive from well known case studies and also fundamentals concepts in computing. Some programming projects are based on exploration of chronologies and timelines as tools that enable the geographical display of information as an order sequence of events. In general these geospatial displays can correlate information to help correct for possible gaps and inconsistencies in knowledge. These materials use multiple layered techniques of presenting information that use time, geographical location, weather conditions and static features of the earth's surface.	Geospatial intelligence as a context for computing education (abstract only)	NA:NA:NA	2018
David Hovemeyer:Matthew Hertz:Paul Denny:Jaime Spacco:Andrei Papancea:John Stamper:Kelly Rivers	Automatically-tested online programming exercises can be useful in introductory programming courses as self-tests to accompany readings, for in-class assessment, for skills development, and to provide additional practice for students who need it. CloudCoder (http://cloudcoder.org) is an effort to build a community based on an open-source programming exercise system (currently supporting C, Java, and Python) tightly integrated with a repository of freely-redistributable programming exercises written and used by members of the community. The goal of the project is to make programming exercises easy and free to incorporate into any programming course.	CloudCoder: building a community for creating, assigning, evaluating and sharing programming exercises (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Sarah Hug:Josh Sandry:Ryan Vordermann:Enrico Pontelli:Ben Wright	The goal of the DISSECT program is to integrate computational thinking lessons into general education K-12 classrooms via graduate student/teacher partnerships. The idea of combining the teaching of CT with other disciplines is not new and it has taken shape in a variety of recent efforts in the formal education of youth. What is promising and innovative is the approach as it is implemented in K12 DISSECT classrooms. Through a collaborative teaching partnership, teachers gain a new perspective regarding computer science, and in cooperation with graduate students well-versed in computer science concepts, develop lessons and course modules that serve two purposes: 1.) Address K-12 content standards in core disciplines (e.g., language arts, life science) and 2.) Introduce CT concepts, such as abstraction, algorithms, data analysis and modeling. This poster describes ways computational thinking (CT) is taught in general K-12 classrooms in New Mexico through cooperative teaching. Along with their potential to stimulate interest in computing, these pilot modules were viewed by K12 teachers as enhancing disciplinary course content that teachers are charged with teaching (e.g., middle school science, language arts), deemed vital for sustainability in K12 schools by participating teachers. Preliminary data indicate graduate student and teacher satisfaction with cooperative teaching of CT. Next steps for research will involve student level data collection and analysis.	DISSECT: integrating computational thinking in the traditional K-12 curricula through collaborative teaching (abstract only)	NA:NA:NA:NA:NA	2018
Roger West	Simulations offer an engaging way to learn about decomposition of complex systems. Here I describe a project where the goal is to build a simulation of an ant colony consisting of five different ant behaviors in a 2D environment. Students design and build their simulations with no code provided except for the required GUI. Design issues include choice of appropriate data structures; traversal issues; and using inheritance to model ant behaviors. Students also learn about emergence, as characterized by the development of organized foraging trails by ants that respond only to their immediate surroundings. The visualization requirement enables students to quickly determine whether or not requirements have been met, and provides a way to rapidly grade a moderately large and complex assignment.	Ant colony simulation as an engaging, extendable, and easily gradable programming project(abstract only)	NA	2018
Zalia Shams:Stephen H. Edwards	A normal industry standard measure, bug density (bugs per thousand non-commented source line of code), is a through mechanism to assess code quality. If it is used for evaluating students' code, students will realize their ability to write bug free code from professional context. The main issues of using bug density for object oriented languages are creating a comprehensive test suit, and running them against all solutions as the test cases are written as part of solutions may fail to compile against other codes. We provide a novel four phase Java specific solution: 1) developing a comprehensive master test suit by collecting all the students written valid test cases; 2) transforming the test cases to use late binding so that they can run against any solution; 3) running the entire tests against all the programs and removing redundant test suits; and 4) estimating bugs/KSLOC by determining the relationship between test case failures in the master suite and latent bugs hidden in student programs. The first two phases of this ongoing research are applied to two programming assignments in two different courses encompassing 147 student programs and 240,158 individual test cases. Experimental results show that we have indeed removed compile-time dependencies from test cases using late binding and thus, have resolved the main technical challenge of using bug density for accessing students' code. Our experimental results will help students to realize the quality of their code in terms of industry standard.	An experiment to test bug density in students' code (abstract only)	NA:NA	2018
Kevin A. Gary:Srividya K. Bansal:Arbi Ghazarian	Software engineering (and by extension software engineering education) is a fast-paced and still emerging discipline (by historical comparison to traditional engineering), yet still immature. We argue this immaturity shows in software engineering education in two ways. First, significant efforts in the software engineering and computer science communities focus on content taxonomies or bodies of knowledge (BOKs), whereas BOKs are more established in traditional engineering disciplines. Second, project experiences are not viewed as a central integrating feature of a degree program's curricular implementation. Project experiences tend to be disjoint; there may be a "freshman project" or a "capstone" or an "undergraduate research experience" or merely a semester project undertaken by the individual initiative of an instructor. The Software Enterprise at Arizona State University uses project experiences as the contextual teaching and learning vehicle throughout the Bachelor of Science in Software Engineering degree program. Students engage in classroom learning, group-oriented lab exercises, implementation on scalable projects, and reflective assessment co-located in time for each concept. The result is a student who not only acquires a new skill, but also immediately understands how to put that skill in practice. The Software Enterprise, now in its 9th year, has evolved from an upperclassmen experience to the full-fledged project spine in the Software Engineering program. In a project spine, content is de-emphasized; foundational concepts are tied to project work throughout the undergraduate program. The Enterprise provides over 40 curricular modules (with labs), assessment tools, and pedagogical guidance on project-centered learning to computing educators.	A project spine framework for software engineering education (abstract only)	NA:NA:NA	2018
Adam M. Oest:Ivona Bezáková:James E. Heliotis:Sean P. Strout	We describe the design for a distributed game-playing environment suitable for student software development of player strategies. The framework has three main components: the game server, which runs as a RESTful web service on the Internet, the game client, which runs on the student's computer, and the graphical interface, which runs inside a web browser on the student's computer. Our earlier framework ran all components locally, and in a single programming language. The new framework supports single-user sessions, in which the student-implemented player plays against another, possibly faculty-supplied, software player, or against a human player. It also supports multi-user sessions, in which student players on two or more separate computers can play against each other in a single game. Supported by the NSF, award ID 1044721.	Student development of board game strategies in a web-based graphical infrastructure (abstract only)	NA:NA:NA:NA	2018
Susan Eileen Fox	Green computing is a catchall phrase that includes efforts to improve sustainability both within the IT industry and outside of it. The green IT movement seeks to reduce energy use, waste, and toxic substances by the IT industry. In many other industries, mobile and computing devices connected to the network enable sustainability through automation, virtualization, and reduced travel. Green computing is a topic of increasing importance within the IT industry. There are few green computing courses for undergraduates, and most are for advanced students. I present a "CS1 Lite" course centered on the theme of green computing. The course integrates programming activities with readings, discussion and online research. The first course module examined how the Internet and mobile networks enable sustainable practices, such as: the virtualization of goods and services, telecommuting and virtual meetings, and cloud computing. The second module examined the "Green IT" movement, including sustainability across the computer life cycle, and increasing energy efficiency, from individual computers up to data centers. The third module focused on "Smart Technology," where network-connected computing devices drive improvements. Topics included the smart energy grid, smart buildings, and applications in health care and agriculture. Throughout the course, programming assignments were tailored to problems relevant to the green computing topics. Students implemented simulations of green computing systems. Students exhibited increased interest and motivation for these projects, and learned naturally about data abstraction and computer networks.	Green computing in the introductory curriculum (abstract only)	NA	2018
Nicholas Brown:Michael H. Goldwasser	We present interactive software designed to support students' exploration of concepts involving Huffman coding. This software illustrates the association between binary codewords and paths in a Huffman tree, the greedy algorithm that is used to construct an optimal tree, and the use of the tree in the decoding process. It allows the user to control the input upon which the code is built, to step forward and backward through an animation of the algorithm process for constructing a tree, and to choose data to encode or decode. We have used this software with students in an introductory computing principles course, a first-year data structures course, and an upper-level algorithms course. The software is publicly available as a Java applet at http://cs.slu.edu/~goldwasser/demos/huffman.	Interactive exploration of Huffman coding (abstract only)	NA:NA	2018
Jennifer Burg:Susan Reiser	High school and CS0 computer science students often begin class having no computing education beyond studying office suite programs. Teaching digital audio, a ubiquitous application, allows an authentic and engaging context for the teaching of computer science principles as outlined at http://www.csprinciples.org. In particular, it demonstrates the interconnection of computer science with physics, mathematics, and audio engineering. Do you teach digital audio or music technology? Are you interested in teaching these subjects? In this BOF we will discuss digital audio in computer science CS0 classes.	Teaching computer science principles with digital sound and music (abstract only)	NA:NA	2018
Viera K. Proulx	Test-First Design is well-regarded process among software developers. Practitioner report that it encourages better program design, improves the testability and reliability, and reduces the stress. We have used the test-first design approach in introductory Java-based programming courses for the past ten years. With the support of our tester library, students learn to design tests without any additional syntactic or structural overhead. A number of colleagues at other universities sued the tester library in a variety of courses. Join us for a discussion on how you can help your students learn to design programs in the test-first style. This work is sponsored by two NSF DUE CCLI grants: Redesigning Introductory Computing: The Design Discipline, Grant #00618543, and Integrating Test Design into Computing Curriculum from the Beginning, Grant #0920182.	Test-first Java for beginners (abstract only)	NA	2018
Catherine Bareiss:Larry Vail	Have you been through a general education review, taught a general education computing course, or provided a service course in computing? Are computing skills and knowledge a college entrance requirement, upper level discipline specific tool, graduation goal, or knowledge for citizens in a free society? Sample computing courses include: Computer Applications in Business, Writing Process using Microsoft Word, Quantitative Social Science using SPSS, Computing equals Programming, AP CS Principles, Computer Ethics, Computers and Society, Computational Thinking, or Introduction to Computer Science. What has and hasn't worked? What should computing offer to the university? Come hear what others are doing and share your insights.	Where is computing in general education (abstract only)	NA:NA	2018
Steven C. Shaffer:Cliff Shaffer	A problem with teaching large classes of introductory programming students is that students need copious practice but instructors do not have time to grade thousands of student programs. Large classes might require the instructor to restrict the graded programs to a handful. However, students need much more practice than this, and experience shows that if an assignment is not being graded then many students will not do it. Also, if the same problem is assigned to all students, copying of answers will occur. Programs that generate unique assignments and automatically grade submissions have been developed. Beginning with a brief example, this session will focus on experiences attendees have had with such approaches, and what an idealized system might look like, including exemplar use cases.	Automated generation and grading of programming assignments (abstract only)	NA:NA	2018
Deborah W. Seehorn:Chris Stephenson:Tammy Randall Pirmann:Kelly Powers	In December 2011, CSTA published their new student learning standards for K-12 Computer Science. The current climate in K-12 schools is one of high stakes accountability with a strong focus on instructional standards. As a result, teachers, computer science education researchers, and K-12 outreach providers are increasingly being pressed to tie their content to national standards. The CSTA K-12 Computer Science Standards provide de facto national standards for all of these purposes. In addition, they help promote K-12 computer science as an essential academic discipline and allow educators and researchers alike to share a common understanding of what students should be learning throughout their K-12 experience.	CSTA CS K-12 instructional standards and CS curriculum (abstract only)	NA:NA:NA:NA	2018
Donald J. Slater:Wanda P. Dann:Steve Cooper	This session is for anyone currently using Alice 3.x and / or Alice 2.x, or exploring the possibility of using Alice in his or her curriculum. The discussion leaders and experienced Alice instructors will share teaching strategies, tips, and tricks with each other and those new to Alice. The session provides an arena for sharing Alice instructional materials and ideas for courses at all educational levels. This is an opportunity to share assignments and pointers to web sites where collections of instructional materials, such as syllabi, student projects, exams, and other resources are available.	Birds of a feather: teaching with Alice (abstract only)	NA:NA:NA	2018
Jim Huggins:Alfreda Dudley:Karla Carter:Dee Weikle:Netiva Caftori	This session is being organized by ACM SIGCAS (Computers and Society) for those with an interest in addressing the social and ethical consequences of computing in our society within their curricula. This year we will share case studies as a means to teaching a variety of issues resulting from the impact of computing in our society. Our discussion leaders will introduce briefly favorite case studies in their fields of interest and will encourage all participants to share examples of their own. Ways for dealing and solving current problems will be tackled. We will provide a plan of how to incorporate the case studies presented into our classes along with a handout of how to do so. Topics of interest include legal issues, social media, privacy, and sustainability.	Nifty computing in society case studies (abstract only)	NA:NA:NA:NA:NA	2018
Mark E. Hoffman:Janet Burge:Jerry Gannod:Mladen Vouk	The fact that employers regularly list communication skills among their top requirements for graduates of Computer Science programs and that communication skills are specifically included in ABET program outcomes attests to their significance for Computer Science educators. To prepare students, Computer Science programs typically require students to take a course in technical communications or writing intensive courses. A recent trend emerging from the communication specialist suggests that integrating communication skills with content across the Computer Science curriculum is more effective strategy. The three-year NSF-funded CPATH II project (CCF-0939122 and CCF-0939081) "Incorporating Communication Skills into the Computer Science Curriculum" brought together 40 Computer Science educators and communications specialists to develop assignments and communications supports that implement content and communication skills integration. The results are available on the project website (http://cs-comm.lib.muohio.edu/). Computer Science educators who seek to provide graduates of Computer Science programs with excellent communication skills will find this approach relevant and valuable. Those who have developed integrated materials will be encouraged to contribute to the project repository. Those who are interested in increasing the amount of communication taught in their curriculum will be encouraged to adapt assignments from the repository to their needs.	Integrating communication skills into the computer science curriculum (abstract only)	NA:NA:NA:NA	2018
Allen Parrish:Cary Laxer	The ABET Computing Accreditation Commission and CSAB (made up of representatives from ACM and IEEE-CS) are currently considering the next generation of changes to the computing accreditation criteria, with emphasis on the program criteria for the various disciplinary areas, including computer science. This Birds-of-A-Feather session will provide a platform for discussion of the types of changes that are currently under consideration, with a view toward obtaining feedback on those changes, as well as obtaining new ideas for revisions from the audience.The ABET Computing Accreditation Commission and CSAB (made up of representatives from ACM and IEEE-CS) are currently considering the next generation of changes to the computing accreditation criteria, with emphasis on the program criteria for the various disciplinary areas, including computer science. This Birds-of-A-Feather session will provide a platform for discussion of the types of changes that are currently under consideration, with a view toward obtaining feedback on those changes, as well as obtaining new ideas for revisions from the audience.	The future of the ABET computer science program criteria (abstract only)	NA:NA	2018
Ambareen Siraj:Blair Taylor:Stephen Cooper	In today's world, it is critical that our students get exposure to security education as part of their Computer Science (CS) curriculum. The lack of security consciousness in digital workforce is costing businesses, government, and citizens severely every year. A significant reason behind this problem stems from the fact that the majority of higher education institutions do not have adequate resources to educate CS students in information assurance (IA) and security. While security is not required in the current CS curriculum, IA has been designated as a knowledge area in the proposed ACM/IEEE-CS CS Curricula 2013. Also, the absence of security topics in core CS subject matters not only leaves students security oblivious, but also prevents higher education institutions from applying for National Centers of Academic Excellence in Information Assurance Education Programs (CAE/IAE) accreditation, which provides access to government scholarships and grants. In this session, we will discuss challenges CS faculty face in integrating security topics in traditional CS courses and call attention to existing government funded supports that faculty can leverage in doing so. To share ideas and resources, we hope to bring together security educators who are active in this field with a community of CS educators who may not have any background in teaching security but recognize the need for it and are interested in teaching security topics as part of their regular course curriculum.	Bringing security into traditional computer science courses: challenges and support (abstract only)	NA:NA:NA	2018
Tara Chklovski:AnnaLise Hoopes:Dara Olmsted	Technovation Challenge introduces computer science to high school girls in a dynamic learning environment that offers exciting, real-world challenges to conquer; fresh new ways of thinking and problem solving; and the support of hands-on female mentors drawn from academia and the tech industry. Over the course of 12 intensive weeks, students identify a problem drawn from their own real-life experiences and program a mobile phone application to solve it. They practice their pitch with experienced investors who give them feedback on their app and business plan. After some more polishing and practice, the girls then pitch their ideas to a panel of venture capitalists. The winning team receives funding to take their app to market.	Technovation challenge: teaching girls computer science & entrepreneurship (abstract only)	NA:NA:NA	2018
Dale Reed:Don Yanek:Gail Chapman	Exploring Computer Science (ECS) is engaging, hands-on high school curriculum and associated professional development that is being implemented at a systemic level in the Los Angeles Unified School District and is now being replicated in Chicago Public Schools and elsewhere. Unlike many introductory CS courses that are mostly programming, the ECS curriculum paired with the required professional development (PD) equips teachers and school districts for successful guided inquiry experiences across the breadth of CS for every student. Over 85 teachers across the country experienced this PD during the summer of 2012. The key to success in Chicago has been establishing an active partnership. Connections to area public and private high school teachers were initiated through the 120-member Chicago CSTA. This active partnership connects Chicago and Los Angeles (UCLA), multiple Chicago universities (DePaul, UIC, Loyola) and Chicago Public Schools administrators. This model for replication is being explored in other states. This session is designed for high school teachers and university faculty currently partnering in implementing ECS, as well as those wanting to replicate ECS in their own cities. We'll begin with a brief activity coupled with small group discussion to give a very brief taste of ECS. This will be followed by discussion of what is special about this guided-inquiry curriculum as well as strategies for replication. The ECS course is a natural precursor to the proposed new AP CS Principles course.	Replicating exploring computer science (ECS) (abstract only)	NA:NA:NA	2018
Mark Sherriff:Daniel Garcia:Jody Paul	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2018
Adam Anthony:Marie desJardins	The number of REU programs funded in Computer & Information Science and Engineering has increased from 6--12 per year prior to 2007 to a current level of 12--20 per year [www.nsf.gov]. Participation in research broadens students' experience base, increases their readiness for graduate school and the workforce, and develops their critical problem solving and communication skills. Research experiences are particularly effective at increasing the retention and success of women and minorities in computing fields [Cuny & Aspray, SIGCSE Bulletin 2002; Russell et al., Science 2007]. Despite the importance and prevalence of undergraduate research, many faculty are expected to involve undergraduates in research without having any direct experience or mentoring. Meanwhile, a growing interest in experiential learning at many institutions has led to a recent development of institutional environments in which undergraduate research is strongly supported. In many disciplines, such an environment naturally supports basic research programs that are inclusive of both under- and upperclassmen. However, computer science research at the undergraduate level presents a major challenge: most students who have the requisite knowledge to complete a novel research project are already close to graduation, which can make it difficult to involve undergraduates in longer-term research projects. In this bof, we hope to gather both experienced and novice research advisers to discuss strategies for running a continuous research effort across several graduating classes.	Starting and sustaining an undergraduate research program in computer science (abstract only)	NA:NA	2018
Daniel D. Garcia:Daniel Armendariz	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users? Come to this BOF! We'll also show the TECH website (part of the ensemble computing portal) we've built that attempts to collect all of these tools in one place. A laptop is recommended if the tool you wish to share is more involved than simply visiting a website.	Technology that educators of computing hail (TECH): come, share your favorites (abstract only)	NA:NA	2018
Suzanne W. Dietrich:Don Goelman	Data and information facilitate the creation of knowledge" is Big Idea III in the Computer Science Principles effort. The June issue of ACM Inroads spotlighted some of the pilot offerings of CS Principles, which included spreadsheets, database structure, and XML as coverage of this big idea. The implementation of the CS Principles framework is quite flexible, as illustrated by these pilots. An article in the subsequent September ACM Inroads specifically mentioned the importance of big data and "Data Science." What concepts do you think should be included as part of data and information? The goal of this Birds-of-a-Feather session is to bring database educators together with those interested in teaching CS Principles to brainstorm this big idea.	Brainstorming CS principles big idea III: data and information (abstract only)	NA:NA	2018
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Regional Celebrations.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2018
Barbara Anthony:Lisa Bender:Christine Chung:Mark Lewis	Enrollments in CS have been climbing dramatically in recent years at large schools, especially those in the top-tier for CS. This type of growth is part of the normal cycle for CS and is expected anytime that the public perceives that the job market for computing related fields is strong. It is unclear how much of this growth is currently seen on other campuses. The purpose of this BoF session is to discuss what educators at smaller campuses, and particularly liberal arts schools, are currently seeing in regards to enrollment in CS. This information could be of particular interest for those at schools considering cutting programs for economic reasons or those adjusting the number of faculty lines.	Trends in CS enrollment at small, liberal arts institutions (abstract only)	NA:NA:NA:NA	2018
Monika Sobolewska	As the theme of the conference indicates, computing is changing and so is its pedagogy. In the meantime, many computer science departments teach computer fluency service courses required by their universities, colleges, or other departments, in which the content of the course becomes highly challenged by institutional constraints (e.g. class size, university computer literacy requirement, etc.). This birds-of-a-feather is designed to gather educators who have been teaching fluency courses or may be teaching such courses in the future, so that they can share their experiences, learn from one another, and discuss the most effective ways of affecting change and delivering the content they deem most appropriate.	Logistics of moving from computer fluency to computational thinking (abstract only)	NA	2018
Bonnie K. MacKellar:Margaret Menzin:Marc L. Smith:Tammy VanDeGrift	There has been an explosion of interest in bioinformatics, medical informatics, and healthcare informatics in the past decade. As a result, many computer science departments are developing courses or degree programs in bioinformatics and/or health informatics. This session is aimed at faculty who are teaching, or developing courses that tie together computer science and biology, medicine, or healthcare. The discussion leaders all have experience teaching courses in healthcare informatics and/or bioinformatics within computer science departments. We will share our expertise and experience on such issues as effectively team teaching interdisciplinary courses, developing case studies and projects, and developing links with biologists and clinicians. Some of the questions we might tackle: What types of courses should be included in degree programs? What role do curricular standards, especially in healthcare, play? What topics belong in interdisciplinary bioinformatics courses? How do we cope with students who may have differing backgrounds and prerequisites? The hope is that we can create an informal network for sharing ideas which will persist after the session. To this end, we will also discuss ways for maintaining a community, perhaps as a mailing list, blog, or website.	Computer scientists put the informatics into bio, health, and medical informatics education (abstract only)	NA:NA:NA:NA	2018
Gregory W. Hislop:Heidi J.C. Ellis:Darci Burdge:Sean Goggins:Lori Postner:Stoney Jackson	Humanitarian Free and Open Source Software (HFOSS) projects provide a real-world application with an approachable and welcoming community for both faculty and students. Many faculty members are excited by the prospect of their students contributing to HFOSS. They perceive it as an opportunity to engage students, regardless of race or gender, in projects that have societal impact. However trying something new in the classroom though can be daunting, and many barriers to entry exist. Locating an appropriate project, trying to figure out how to incorporate a dynamic, real-world project into the curriculum and learning how to interact with the project's community each present their own set of challenges. This BOF provides a gathering place for faculty who are interested in student participation in FOSS or HFOSS. The discussion will include an overview of an NSF-funded project, OpenFE. The goal of OpenFE is to develop faculty expertise in working with HFOSS projects and to develop curriculum materials that support faculty members in bringing this approach into their classrooms. The members of the OpenFE team will discuss plans for this grant and welcome both novices and experienced contributors to join us and provide feedback.	Encouraging faculty & student involvement in humanitarian free and open source software (HFOSS)(abstract only)	NA:NA:NA:NA:NA:NA	2018
Frances P. Trees:David Reed:Tammy Pirmann	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, provision of member services at the local level, and to promote CSTA membership on the national level[1]. This BOF will provide a platform for the discussion of CSTA chapter formation and for the sharing of new resources to help chapters create dynamic and meaningful chapter activities.	CSTA chapters: supporting your local computer science educators (abstract only)	NA:NA:NA	2018
Ann Irvine:Darakhshan Mir:Michael Hay	We will discuss how to better organize as graduate students and postdoctoral researchers seeking a career in liberal arts colleges (LACs). The BoF will bring together those who are interested in a career path to a LAC but do not have reliable advice and mentorship in their home departments and often turn out to be the only person in their department with such a career choice. Additionally, several people who have recently made a successful transition from graduate school to new faculty positions will attend the BoF.	How PhD students at research universities can prepare for a career at a liberal arts college (abstract only)	NA:NA:NA	2018
Diane A. Baxter:Elizabeth Simon	Computing pervades students' academic and personal lives. Increasingly the core concepts of computational thinking are required for success in other fields. Should CS Principles become a general education requirement for all freshmen? This BOF will provide a platform for the discussion of whether or not the various courses taught as CS-0, Introduction to CS, or CS Principles have clearly defined a set of core competencies that should be required of all undergraduates. Do the national initiatives around computational thinking and CS 10K herald consensus or controversy around those core competencies? Discussion will include a look at one course that has been adopted as a general education requirement; its core concepts, textbooks and documented learning outcomes; and the institutional rationale for its acceptance as a general education requirement-filling course. Related to this question is a proposed new CS Principles AP exam that is currently in development. The BoF will describe how the course above relates to the CS Principles AP Exam and the core competencies described through the CS Principles project. Discussion leaders will describe the value of the CS Principles AP initiative in gaining political and administrative support for introducing the course into high schools. They will share some initial data illustrating the wide variety of challenges encountered while introducing the same course as a pre-AP course into regional high schools.	Computer science principles: necessary for ALL students' success (abstract only)	NA:NA	2018
Douglas Baldwin	The pending revision of the ACM/IEEE CS curriculum guidelines for computer science, and the continuing broadening of the computing disciplines, among other considerations, make now a good time to review the role of mathematical reasoning in computing education. This birds-of-a-feather session provides an opportunity for people interested in mathematics and its role in computing education to reflect on and discuss the future of mathematical reasoning in our curricula, guided by the question of whether it should be broader than it has been, narrower, or if it is just right as it is.	Broadening mathematical reasoning in computing (abstract only)	NA	2018
John Britton:Tim Berglund	Professional software developers depend on version control every day and that dependency will continue to grow as advances in version control technology continue. Students with experience using version control are more prepared and qualified to work in industry. We should expose students to version control early in their training not only as an additional skill but also as a tool to improve the learning experience. Version control can be leveraged to greatly improve assignment submission, grading, and feedback systems. In this session we will discuss strategies for incorporating the use of version control in the classroom as well as best practices for individual and group work submission, grading and feedback.	Using version control in the classroom (abstract only)	NA:NA	2018
Debra Lee Davis:Kip Irvine:Dave Berque:Janet Davis:Brian Dorn:Matt Jadud	With a growing awareness of the importance of Human Computer Interaction (HCI) and User Experience (UX) Design and Research in industry, many departments are examining ways to integrate this topic into their curriculum. What are the best ways to do this? Should HCI and UX be integrated into existing courses such as event-driven programming or mobile computing? Or should it be a separate course that integrates visual design, psychology and ergonomics? How important is this topic to students looking for internships and entry-level jobs? At what levels should these topics be taught in the curriculum? This is important as there is a growing demand in industry for User Experience specialists due to an increased focus on software quality and product success. A major complaint of employers is that this skill is lacking in many college graduates. Teaching computing students how to incorporate UX into the design and development process helps to address this critical need. This BOF will let participants share their ideas and learn from their peers. This is particularly relevant as the HCI Knowledge Area of the IEEE/ACM CS Curriculum 2013 is currently being developed. In fact, the chair of the HCI Knowledge Area (Sally Fincher) is seeking real examples of how HCI is taught in curricula across a variety of institutions and settings. After the BOF, we will share a summary of our BOF discussion with the chair.	Including HCI and user experience (UX) methodologies in computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA	2018
Yolanda Jacobs Reimer:Christopher Hundhausen:Phillip Conrad	Studio-based learning (SBL), the centerpiece of architecture and fine arts education for over a century, has become increasingly attractive to computing educators. SBL can be conceptualized as an iterative process of solution refinement that relies heavily on shared physical space and design critiques. This session will explore ways in which CS educators can transition aspects of traditional or face-to-face SBL to an online learning environment. We will discuss the potential for online studios, how they might look and function, and how their effectiveness in promoting student learning might be gauged. As more and more CS courses assume an online presence, we seek to understand both the opportunities and the limitations associated with conducting critical studio work in a digital medium.	Taking studio-based learning online (abstract only)	NA:NA:NA	2018
Helen H. Hu:Clifton Kussmaul:Matthew Lang	POGIL activities are carefully designed to guide students to discover and explore concepts while encouraging students to practice process skills (e.g., team work, leadership and problem solving). Many college instructors have written POGIL activities for CS 1, CS 2, Software Engineering and other upper division CS classes (http://www.cspogil.org). High school teachers are also writing POGIL activities for the AP Principles course. This BOF is an opportunity for educators to share POGIL activities and ideas for improving group dynamics and encouraging reflection. We welcome everyone interested in learning more about POGIL and will provide information on regional POGIL workshops.	Using POGIL activities in computer science classes (abstract only)	NA:NA:NA	2018
Richard Weiss:Michael E. Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne	We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have seen require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have used hands-on exercises and those who would like to. We recognize that few CS programs can afford new required courses, so we would be discussing ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering and algorithms. Recent hiring forecasts indicate that there is a tremendous need for skilled information security experts. This was evident at the last National Initiative for Cybersecurity Education (NICE) conference at NIST, and from sponsors of the Collegiate Cybersecurity CCDC. Security will be one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. We think that it is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, and discuss how to teach analytical skills. We also plan to discuss our own experiences, practices and ongoing efforts (e.g., our teaching experiences, the SISMAT program, Security Injections, EDURange and the dissemination of infosec interactive exercises). SISMAT includes a two-week summer intensive program based on the "Hacker Curriculum" and a combination of research and internship in cyberbersecurity for undergraduates.	Teaching security using hands-on exercises (abstract only)	NA:NA:NA:NA:NA	2018
Nick Senske	Much has been said about the need to teach computer programming and the fundamental ideas of computer science in STEM education. Initiatives aimed at this audience propose new requirements, curricula, tools, and teaching methodologies to encourage widespread computational literacy. But what is being done in non-STEM disciplines to promote literacy? The goal of this panel is to open a discussion about advancing computer science education within the digital arts and humanities and how this might relate or combine with similar efforts in STEM. What can members of the digital arts and humanities community learn from each other about starting new curricula and teaching these subjects, and what can be learned and borrowed from STEM education? To begin the discussion, we will present a report on a computational methods course we developed for beginning architecture students and how this has led to an ongoing collaboration with our computer science department.	Computational literacy for everyone: opening a dialogue between STEM and the digital arts and humanities (abstract only)	NA	2018
Joanne F. Selinski:Kathie A. Yerion	Many institutions offer either a Bachelor of Science or a Bachelor of Arts degree program to computer science majors, often depending on what type of college or department houses the major. However, an increasing number of institutions have created dual degree tracks wherein students may choose to pursue either a BS or a BA, with a different set of requirements for each and possibly different credentialing as well. This BOF provides a forum for educators and administrators who currently offer dual degree options to share their experiences with those who are considering adding a second track. Issues of interest such as requirements within and outside the major, enrollment, accreditation, student outcomes, and possibly different career options may be discussed.	Dual degree tracks for computer science majors (abstract only)	NA:NA	2018
Richard E. Ladner	Approximately 10% of computer science and engineering majors have a disability of some kind. Those with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together those who are interested in improving the success of these students. Strategies will be shared among the participants of the BOF to help each other do a better job of including these students in our classes and research projects.	Universal access to computing education (abstract only)	NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop:Michael A. Smith:Paul F. Steinberg:Matthew Wolf	The emerging CS2013 Curriculum recommendations call for greatly expanded emphasis on parallel and distributed computing (PDC), in response to recent industry changes. CS2013's PDC knowledge units relate to many undergraduate courses. Participants in this BOF will consider responses to CS2013 PDC recommendations that involve multiple undergraduate CS courses at an institution, as opposed to approaches that concentrate PDC topics primarily within a single course. This sharing and brainstorming session will bring together: people having experience with a multi-course or multi-level approach to teaching PDC; people contemplating a multi-course approach to introducing PDC material; and people wishing to provide and/or hear rationale for a multi-course strategy for teaching PDC.	Multi-course approaches to curriculum 2013's parallel and distributed computing (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA	2018
Michael P. Rogers	We have heard much discussion, in recent years, about various contexts for teaching Computer Science. One that does not get a lot of attention, but frankly deserves more, is the notion of using word games -- in which language plays a predominant role -- to teach Computer Science. There is a plethora of clever and simply fun games that can be used to illustrate almost any concept that arises in CS1 and CS2. We would like to start a conversation with other SIGCSE attendees who are interested in these very entertaining, algorithmically stimulating games, and see what techniques they use, and what successes they have had, in incorporating them into the classroom.	The joy of word games: or, putting the text back into context (abstract only)	NA	2018
Julian Mason:Zachary Dodds:William D. Smart	After many years, the robotics research community has settled on standard middleware: the Robot Operating System (ROS). This standard presents a great opportunity for educational robotics. This hands-on workshop will engage participants in ROS-based curricula for CS 02 and advanced undergraduates. The workshop will highlight how ROS has simplified, enabled, and expanded flipped robotics curricula in CS 02. Our advanced materials show how ROS enables easy access to the robotics research community, permitting larger and more research-representative projects. This workshop is two long hands-on sessions punctuated with short reports from the presenters' experience. Participants will implement the first two assignments of our CS 2 curriculum. http://www.cs.hmc.edu/dodds/ROSatSIGCSE2013.	ROS at every level: using the robot operating system in CS 0, 1, 2, and beyond (abstract only)	NA:NA:NA	2018
Jason O. Hallstrom:Joe Hollingsworth:Joan Krone:Murali Sitaraman	Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can they use a development environment for "hands-on" experimentation with reasoning? Is this possible without displacing existing content? The answer is a resounding yes "from the experiences of professors at several institutions" but it takes the right set of pedagogical principles, reasoning tools, and hands-on exercises. This laboratory will help educators transfer the excitement of learning how to apply mathematical reasoning in building high quality software, by adopting one reasoning concept at a time. The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught -- from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials. Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. All participants are required to bring a laptop to participate in the computer-assisted exercises.	Making mathematical reasoning fun: web-integrated, collaborative, and "Hands-On" Techniques (abstract only)	NA:NA:NA:NA	2018
Wanda Dann:Stephen Cooper:Donald Slater	This workshop is designed to offer a hands-on introduction to Alice 3.1 (now out of beta), as used in introductory courses in high school and early college levels. The focus of this workshop is on using program visualization for introducing fundamental concepts of programming. The introductory features of Alice 3.1 will be presented in an active-learning style. Although some comparisons between Alice 2.x and 3.1 will be included, the content of the workshop does not assume familiarity with Alice 2.x. Participants will receive latest 3.1 update and sneak peek at early textbook chapters. Attendees are expected to bring their own standard (no netbooks or tablets, please) laptop with a mouse (2-button).	Alice 3.1 (abstract only)	NA:NA:NA	2018
Semmy Purewal	Khan Academy recently announced that they will soon be teaching introductory Computer Science topics with the Processing.js language and an interactive, web-based code editor. At UNC Asheville, we have been using a similar pedagogical approach for over a year. Specifically, we have integrated Processing.js into our introductory course for non-majors by building an open-source, web-based editor which makes it easy for students to edit, save and share their Processing.js sketches. This workshop offers a hands-on introduction to Processing.js and our editor. Participants will also be given an overview of the programming module in Creative Computing, our recently re-imagined CS0 course. Curious individuals with a laptop, a modern web-browser and some basic programming experience are welcome.	Creative computing: introductory programming concepts with processing.js (abstract only)	NA	2018
Tim Bell:Daniela Marghitu:Lynn Lambert:Paul Curzon	You've been asked to talk to an elementary or high school class about Computer Science, but how can you ensure that the talk is engaging? Or perhaps you're trying to introduce a concept from Computer Science to a school group, but you want a fun way to get the class engaged. This workshop is a hands-on introduction to Computer Science Unplugged (www.csunplugged.org), a widely used set of kinesthetic, fun activities that cover many core areas of computer science without using high technology. We will explore how to use the activities in a variety of situations, including using them with robotics activities, school outreach, and computer clubs. Attendees will receive a CD with a copy of a handbook for teachers and a collection of videos demonstrating the activities. Laptops are optional.	Computer science unplugged, robotics, and outreach activities (abstract only)	NA:NA:NA:NA	2018
Andrea Danyluk:Nancy Amato:Ran Libeskind-Hadas:Lori Pollock:Susan Rodger	Involving undergraduates in Computer Science research has many benefits. It's an exciting way for students to gain independent problem solving skills. It exposes them to interesting projects and the research process, thereby keeping them in computer science, even encouraging them to go to graduate school. And especially in primarily teaching institutions, it's a rewarding way for faculty to remain engaged in their own research. In this workshop we will (1) present best practices for mentoring undergraduate research, (2) equip participants with resources for mentoring their own students, and (3) further develop (1) and (2) through breakout sessions on concerns of interest to attendees. For more, please see www.cs.williams.edu/~andrea/SIGCSE2013. This workshop is intended for all college level computer science educators. Laptop Optional.	Making the most of undergraduate research (abstract only)	NA:NA:NA:NA:NA	2018
Guy-Alain Amoussou:Suzanne Westbrook	This interactive workshop focuses on the National Science Foundation grant proposal review process. By a close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The topics for the workshop include: the proposal review process from submission to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of good proposals; the format of the typical review panel process; how to volunteer to review. The workshop uses a structured guided-interactive approach to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some expert opinion on these issues. Faculty members who wish to better understand the NSF review process or seek funding in support of undergraduate computing education are encouraged to attend. Participants will include novice proposal writers and those with more experience who seek to improve their proposal writing or reviewing skills.	Learn about effective proposal writing via the review process (abstract only)	NA:NA	2018
Richard A. Brown:Elizabeth Shoop:Joel Adams	Map-reduce, the cornerstone computational framework for cloud computing applications, has star appeal to draw students to the study of parallelism. Participants will carry out hands-on exercises designed for students at CS1/intermediate/advanced levels that introduce data-intensive scalable computing concepts, using WebMapReduce (WMR), a simplified open-source interface to the widely used Hadoop map-reduce programming environment. These hands-on exercises enable students to perform data-intensive scalable computations carried out on the most widely deployed map-reduce framework, used by Facebook, Microsoft, Yahoo, and other companies. WMR supports programming in a choice of languages (including Java, Python, C++, C#, Scheme); participants will be able to try exercises with languages of their choice. Workshop includes brief introduction to direct Hadoop programming, and information about access to cluster resources supporting WMR. Workshop materials will reside on csinparallel.org, along with WMR software. Intended audience: CS instructors. Laptop required (Windows, Mac, or Linux).	CSinParallel: using map-reduce to teach parallel programming concepts across the CS curriculum (abstract only)	NA:NA:NA	2018
Richard Weiss:Vincent Nestler:Michael E. Locasto:Jens Mache:Brian Hay	This workshop is intended for anyone who would like to use hands-on exercises in cybersecurity for a variety of classes including Networking, OS, Computer Security and Software Engineering. It has received increased attention nationally in the proposed ACM/IEEE CS2013 Curricula Guidelines. The goal of this workshop is to provide faculty with varied backgrounds (including none) in this area with some tools and interactive exercises to facilitate incorporating this knowledge area into their curriculum. We believe that it is important that students develop analytical skills, thus we include an introduction to EDURange1 and the Hacker Curriculum principles: (1) understanding failure modes and (2) seeing across or through layers of abstraction according to a particular scenario. We will guide attendees through exercises tailored to their level and interests. The exercises will include port scanning and setting up a firewall. These can be done at a range of levels from beginner to advanced. We will include an introduction to tools for packet inspection, which is an important part of analysis. Attendees will receive accounts on the RAVE2 with exercises that they can take back and use immediately with their classes. RAVE provides a number of VMs pre-configured for the exercises. RAVE is also a general purpose technology for other hands-on exercises. Laptop required.	Hands-on cybersecurity exercises and the rave virtual environment (abstract only)	NA:NA:NA:NA:NA	2018
Stephen H. Edwards	Android has seen increased use in introductory CS courses to motivate and excite students about their programming assignments, but using the standard Android libraries as a GUI platform in CS2 presents numerous challenges and using it in CS1 is nearly impossible. This workshop introduces participants to Sofia, the Simplified Open Framework for Innovative Android Applications, developed by the Web-CAT team at Virginia Tech. Sofia abstracts out many of the advanced concepts normally required to develop interesting applications, using a unique approach to event handling, binding GUI elements to Java code, and user interaction. The goal is to allow students to focus entirely on using Java programming skills to solve problems in the application domain, instead of writing monotonous glue code typically required to construct an Android application. Laptop optional.	Re-imagining CS1/CS2 with Android using the Sofia framework (abstract only)	NA	2018
Brian Harvey:Daniel D. Garcia:Tiffany Barnes:Nathaniel Titterton:Daniel Armendariz:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	This workshop is for high school and college teachers of general-interest ("CS 0") CS courses. It presents the programming environment used in two of the five initial AP CS Principles pilot courses. SNAP! (Build Your Own Blocks) is a free, graphical, drag-and-drop extension to the Scratch programming language. Scratch, designed for 8-14 year olds, models programs as "scripts" without names, arguments, or return values. SNAP! adds support for older learners (14-20) by adding named procedures (thus recursion), procedures as data (thus higher order functions) structured lists, and sprites as first class objects with inheritance. Participants will learn SNAP! through discussion, programming exercises, and exploration. See http://snap.berkeley.edu for details. Laptop required.	SNAP! (build your own blocks) (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Tommy MacWilliam	This workshop, aimed at instructors of introductory or intermediate courses, introduces participants to version control via two popular source code management (SCM) tools: SVN and Git. Not only is proficiency with SCM tools an invaluable skill for aspiring software developers, but version control also allows students to collaborate effectively on projects. Participants will complete hands-on activities using distributed and centralized SCM tools, learn how to integrate version control into curricula, and discuss the pros and cons of various hosting solutions. Participants will also be introduced to version50, an open-source abstraction layer that provides a common, simplified interface for SCM tools aimed at making version control accessible to novice programmers. Laptop required.	Incorporating version control into programming courses (abstract only)	NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	This workshop showcases a new approach to teaching CS1 using computational art as a context. Participants will be introduced to the Processing programming language and environment, designed for the construction of 2D and 3D visual forms. Its IDE is light-weight, but well-suited for the rapid proto-typing needed for dynamic visual work. We hope to bring the excitement, creativity, and innovation fostered by Processing into the computer science education community. Instructors of all experience levels are welcome. Hands-on portion of the workshop will enable participants to explore Processing and create visual effects on the fly. Course materials and handouts detailing the software, curriculum, and teaching resources will be given out. All participants will need to bring their own laptops. Supported by NSF Awards DUE-0942626 and CCF-0939370.	Computational art and creative coding: teaching CS1 with processing (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Nathaniel Titterton:Dan Armendariz:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Matt Bishop:Blair Taylor:Elizabeth K. Hawthorne:Diana Burley:Siddharth Kaza	The CS 2013 curriculum draft includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in CS0 and CS1 is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0 and CS1. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0/CS1 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing secure coding in CS0 and CS1 (abstract only)	NA:NA:NA:NA:NA	2018
Susan H. Rodger:Steve Cooper:Wanda Dann:Dwayne C. Brown, Jr.:Jacobo Carrasquel	This interactive workshop will present the new features of Alice 2.3, and show how to integrate Alice 2.3 into multiple disciplines in middle school and high school. Participants will get hands-on experience with working with new Alice models and creating Alice projects. The workshop will also review curriculum materials and discuss mapping Alice to CSTA computer science standards. The curriculum materials presented could be used in middle school or high school in a variety of disciplines, or in college in a pre-CS 1 course. The target audience is middle school and high school teachers, and college faculty providing outreach to K-12 or teaching a pre-CS 1 course. Alice is available for free at www.alice.org. Curriculum materials are available at www.cs.duke.edu/csed/alice/aliceInSchools and at www.alice.org. Laptop required, and two-button mouse recommended.	Experimenting with and integrating Alice 2.3 into many disciplines (abstract only)	NA:NA:NA:NA:NA	2018
Barbara J. Ericson:Christopher Michaud:Nannette Napier:Krishnendu Roy	This workshop will provide details on how to plan and run non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor. Georgia Tech has also helped start other computing camps at eleven other colleges and universities in Georgia. The workshop will include forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptop Recommend.	How to plan and run computing summer camps for 4th-12th grade students (abstract only)	NA:NA:NA:NA	2018
Joanne McGrath Cohoon:James P. Cohoon:Seth Reichelson:Susan Horwitz:Laura Reasoner Jones	Four research-supported teaching methods can make your computing courses more effective through improved student learning, comprehension, and motivation. This workshop introduces and provides experience with those four methods: 1. Collaborative learning, e.g., pair programming or peer led team learning; 2. Examples and exercises in contexts that appeal to a broad range of students; 3. Computing skills developed through practice; 4. Developing spatial rotation abilities. The presenters are among leading researchers and award-winning practitioners. J. McGrath Cohoon: Senior Research Scientist at the National Center for Women & IT (NCWIT); Associate Professor of Science, Technology, and Society at the University of Virginia; conducts nationwide empirical studies of gender and computing. Jim Cohoon: Computer Science professor at the University of Virginia; IEEE Computer Science highest education award recipient, and author of award-winning introductory textbooks. Susan Horwitz: Professor of Computer Sciences at the University of Wisconsin - Madison; lead PI on an NSF grant that pioneered and evaluated use of Peer-Led Team Learning in introductory Computer-Science courses; recipient of University teaching awards. Seth Reichelson: award-winning high school Computer Science teacher; nationally recognized for his approach to high school computing courses in general and AP Computer Science in particular. Laura Jones: teaches in a public elementary school, writes frequently about girls and STEM careers, founded and directed the GEMS clubs (Girls Excelling in Math and Science) in 1995. Workshop participants will learn from these presenters how to employ the pedagogical methods for engaging and retaining diverse students in computer science courses. .A laptop is optional.	Pedagogy for engaging diverse students in computing: four effective methods (abstract only)	NA:NA:NA:NA:NA	2018
Ralph Morelli:David Wolber:Shaileen Pokress:Franklyn Turbak:Fred Martin	The CS Principles Project is an NSF-funded initiative to develop a breadth-first advanced placement (AP) course in computer science. App Inventor is a visual, blocks-based programming language that makes sophisticated computing concepts accessible to a broad range of students. This hands-on workshop, aimed at high school and undergraduate teachers, will introduce participants to lessons, homework exercises, project assignments, and assessment materials (quizzes, grading rubrics) that can be used in an App Inventor-based CS0 course. Participants will develop simple Android apps, using devices provided by the workshop, and will use them in the context of lessons and assignments that fit within the CS Principles framework. A laptop is required. For further details see: http://is.gd/sigcse2013appinv.	Teaching the CS principles curriculum with App Inventor (abstract only)	NA:NA:NA:NA:NA	2018
Mark C. Lewis:Konstantin Läufer:George K. Thiruvathukal	Various hybrid-paradigm languages, designed to balance compile-time error detection, conciseness, and performance, have emerged. Scala, e.g., is interoperable with Java and has become an early leader in adoption, especially in the start-up and open-source spaces. Workshop participants experience Scala's value as a teaching language in the CS curriculum through four lecture-lab modules: In CS1, the read-eval-print loop and simple, uniform syntax aid programming in the small. In CS2, higher-order methods allow concise, efficient manipulation of collections. Advanced topics include domain-specific languages, concurrency, web apps/services, and mobile apps. Laptop recommended with Scala installed.	Using Scala strategically across the undergraduate curriculum (abstract only)	NA:NA:NA	2018
Forrest Stonedahl:David Weintrop:Paulo Blikstein:Christine Shannon	This workshop, intended for CS educators from middle school through undergrad, will introduce participants to NetLogo. NetLogo is an easy-to-learn multi-agent language and integrated modeling environment in widespread use in classrooms (and research labs) globally. This hands-on tutorial will highlight computational modeling in the natural and social sciences, tie in core computer science concepts, and discuss how to promote student thinking about decentralized systems. The workshop will draw on the presenters' own experiences teaching courses on computational science, computational art, theory of computation, and educational outreach events. Participants will learn first-hand how NetLogo can enrich a variety of computing courses. NetLogo runs on Mac/Linux/Windows. Laptop required.	NetLogo: teaching with turtles and crossing curricular boundaries (abstract only)	NA:NA:NA:NA	2018
Kate Lockwood:Jeff McCall:Barbara Beckmeyer:Marc Oehlman	The Inverted Classroom is an exciting pedagogical technique where more passive information assimilation activities (e.g. lectures) are assigned as homework and class time is reserved for active applied problem solving and group activities. With current technology, instructors wishing to implement inverted classroom have a variety of options to create engaging and accessible learning modules. In this workshop, we will provide an overview of inverted classroom philosophy and some initial data from successful pilots of the inverted classroom. Participants will work in small groups to develop small inverted classroom activities using software and technology provided by the presenters. We will wrap up with presentations from the groups and a discussion about assessment. Laptop Recommended.	Implementing the inverted classroom (abstract only)	NA:NA:NA:NA	2018
Charles Peck:Tom Murphy:Skylar Thompson:Aaron Weeden	LittleFe buildout events are training and infrastructure opportunities for teams of accepted faculty and students from educational institutions across the United States to assemble LittleFe educational appliances (http://littlefe.net) and learn to use them in the classroom to teach parallel programming, cluster computing, and computational/data enabled science & engineering (CDESE). The buildout consists of participants assembling their LittleFe unit from a kit; installing the Bootable Cluster CD (BCCD, http://bccd.net) software on it; learning about the curriculum modules available for teaching parallel programming, High Performance Computing (HPC) and CDESE; and learning how to develop new curriculum modules for the LittleFe/BCCD platform.	LittleFe buildout workshop (parts 1 & 2): hardware, software, and curriculum for parallel and distributed education (abstract only)	NA:NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey Lee:John Glick:Leo Porter:Beth Simon	We introduce participants to Peer Instruction (PI): an active learning technique shown to be effective across the CS curriculum. In PI, Students work together to exchange perspectives and answer challenging conceptual questions, and are supported by short teaching segments. We will introduce and motivate PI, demonstrate its use in combination with a clicker system, and describe ways to encourage student preparation for PI classes. Pre-lecture preparation may include reading quizzes or exploratory homeworks, two topics of recent interest in the computing research literature. We will explore this literature as part of our tour of a complete PI course: from pre-lecture, to lecture, to the course at large. Participants will work in groups to develop new PI questions addressing challenges to their students' learning, and discuss numerous pedagogical benefits conferred through PI. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer instruction in CS: introduction and recent developments (abstract only)	NA:NA:NA:NA:NA	2018
Stan Kurkovsky	Implications of using robotics and mobile computing in the curriculum extend far beyond motivation and engagement because skills in these areas can help students be more successful at the workplace. Our approach to teaching both subjects in one course focuses on using Sphero, a small ball-shaped wireless robot that can be controlled and programmed using an Android or iOS device via a Bluetooth link. Workshop participants will experience several hands-on projects that are offered to student in an Android+Sphero course, which culminates in a robot racing competition. This workshop is intended for high school and college faculty interested in mobile computing and/or robotics courses, projects, or activities. More information is available at http://www.cs.ccsu.edu/~stan/sigcse13/. Laptop recommended.	Android+Sphero: teaching mobile computing and robotics in a single course (abstract only)	NA	2018
Jennifer Burg:Susan Reiser	In this workshop, participants will create and manipulate digital audio using open source software (Audacity, PureData, Processing's Minim Beta, Octave, and C/C++). The cross-disciplinary digital audio content links music, engineering, physics, mathematics, and computer science and was developed for and test-taught in computer science courses. Additionally, participants will access and use the freely available online videos, tutorials, and textbook that can be incorporated into their classrooms. The online content's development was funded by the National Science Foundation CCLI Grant, "Linking Science, Art, and Practice Through Digital Sound." Exercises that engage students in creative computational problem solving for sound and music applications will also be discussed. Laptops equipped with the open source applications mentioned above are strongly recommended but not required.	Computer science via digital sound and music: a hands-on introduction to open source tools and new curriculum material to introduce computer science concepts (abstract only)	NA:NA	2018
Viera K. Proulx	While professional programmers report on the advantages of test-first design discipline, typical introductory programming courses do not require that students design comprehensive test suites for their programs. For the past ten years we (and a number of our adopters in a variety of settings) have used our tester library to support novice programmers in adopting test-first design. This workshop illustrates hands-on the benefits of test-first pedagogy on a series of typical introductory programming assignments and shows how the focus on testing fosters a deeper understanding of fundamental concepts of object-oriented program design. The workshop prepares the participants to adopt test-first design approach in their introductory (and advanced) Java-based courses. The tester library with tutorials, samples, and all downloads is available at: http://www.ccs.neu.edu/javalib/Tester and https://github.com/TesterViera/JavaLibTester/	Test-first design in introductory Java programming (abstract only)	NA	2018
Michael J. Jipping:Acshi Haggenmiller:Matthew Koster:Eric Ostrowski	Computer and network security are important topics discussed in many places in the Computer Science curriculum. Security issues are difficult to experiment on in experiential based courses. Attacks on system security cannot be demonstrated on live campus networks. This workshop will demonstrate and experiment with several security attacks in a safe, sandbox-based virtual environment. We will begin two easy demonstrations and allow each participant to choose from six laboratory experiments. We will wrap up with an ethics discussion. Each experiment includes discussion of the area involved and tips on how to protect against the particular exploit under scrutiny. Each participant will be given a DVD with all exercise materials on it as a takeaway. This workshop is designed for instructors from all levels who want to add security experiments to classes. A laptop is mandatory. Each participant will receive copies of all experiments in the series. These experiments include discussion materials -- introduction to the subject area, exploitation methods, and ways to avoid exploitation -- as well as the procedures used to experience each activity	Experiments with network security threats in a safe, easy sandbox (abstract only)	NA:NA:NA:NA	2018
Barry Wilkinson:Clayton Ferner	Parallel programming has been taught for many years but has recently taken on greater significance with introduction of multicore and many-core processors. Still, most teaching has followed a traditional path of focusing on learning low-level tools such as MPI. This workshop introduces a new educational approach based upon first selecting a computational pattern and then using higher-level tools to create parallel executable code. A pattern programming framework has been developed to create a distributed application that avoids the need to use low-level routines. The framework self-deploys on distributed computers, clusters, and individual multicore computers. Several patterns have been implemented including workpool, pipeline, synchronous and iterative all-to-all, and stencil. The first pattern covered is the widely applicable workpool pattern and other patterns will be introduced. The workshop will describe how the approach can be used in the undergraduate curriculum and will provide hands-on experiences to participants. In our approach, students focus upon computational strategies. Programming is much easier and less likely to be flawed. Each workshop participant will receive a flash drive with all software and documentation pre-loaded for use in the workshop and afterwards in their classes. Laptop required.	Developing a hands-on undergraduate parallel programming course with pattern programming (abstract only)	NA:NA	2018
Suzanne W. Dietrich	LINQ is a declarative language that provides a uniform paradigm for querying relations, objects, and XML. LINQ has from-where-select clauses, similar to SQL, but the clause order is based on its underlying formalism of functional programming. This workshop introduces LINQ from a database perspective with hands-on exercises over relational and XML data using a lightweight IDE for formative feedback. Participants will learn LINQ by experiencing sample exercises for incorporating LINQ into the database curriculum. The intended audience includes anyone with the knowledge of SQL who wants to learn LINQ. After learning LINQ to query relational data, participants will be introduced to XML and how LINQ can also be used to return, query, and transform XML data. Laptop recommended.	LINQ from a database perspective: querying relations and XML (abstract only)	NA	2018
Lynn Andrea Stein	Why is change in academia so difficult? What risks and pitfalls await? How can we approach change so that it does not depend solely on our efforts or end when we are no longer there to maintain it? In this collaborative, interactive workshop, we will explore these questions and craft strategies to create sustainable change in computing curricula. This workshop is for those who want to create curricular change in their home departments, catalyze interdisciplinary curricula, or otherwise inspire innovation in teaching and learning at a scale that goes beyond a single classroom. Prereading (available online) will be expected. The workshop will end with the creation of concrete action plans. Laptop optional.	Catalyzing & sustaining change in computing education (abstract only)	NA	2018
Erik Brunvand:Jennifer (Ginger) Reynolds Alford:Paul Stout	This workshop introduces embedded programming and hardware using Arduino in a creative context to make machines that make drawings. This is a powerful way to introduce programming and physical computing concepts to students from high school to undergraduate and to students who might not normally be intrigued by a computing course. Participants experience this curriculum first hand by using breadboards and electronic components to create circuits that they control programmatically. Using the Arduino C-based software, participants modify and develop code to control light sensors, range finders, pressure sensors, and servos. Provided art materials turn the circuits into mesmerizing contraptions that draw. Laptop required. Arduino and electronic components provided during the workshop. Additional information and materials at www.buildingsteam.org	Drawing machines: exploring embedded system programming and hardware with an artistic flair (abstract only)	NA:NA:NA	2018
Clifton Kussmaul:Helen Hu:Matthew Lang	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. POGIL is based on learning science, and shares characteristics with other forms of active, discovery, and inquiry learning. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. POGIL has particular potential for CS education. Software development is largely a team-based problem-solving activity, and POGIL helps students to learn from each other and develop problem-solving abilities as well as important team process skills. POGIL has been developed and validated over the last 15 years in a range of STEM disciplines. The workshop consists primarily of hands-on team activities. Participants will work through CS activities and a set of meta-activities to explore POGIL practices and activity structures. Participants will also begin to draft parts of their own activities. More information and materials are available at http://cspogil.org and http://pogil.org, including sample activities for topics in a variety of CS courses. Laptops optional. This material is based upon work supported by the National Science Foundation under grant DUE-1044679.	Using POGIL to help students discover CS concepts and develop process skills (abstract only)	NA:NA:NA	2018
