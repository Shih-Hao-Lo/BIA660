Thomas Cortina	NA	Session details: Keynote	NA	2018
Matthias Felleisen	In 1995, my research team and I decided to create TeachScheme!, an educational outreach project, with the hope that our work on programming languages could effect a dramatic change in K-12 computer science. Specifically, we envisioned a virtuous cycle of two mutually reinforcing ideas. On the one hand, we would create a design-oriented curriculum path from middle school through college. On the other hand, our approach would help kids with learning school mathematics. Hence a course on programming would benefit every student, not just those who end up choosing computer science as a college major. At this point, we have a new design-oriented curriculum; a pedagogic program development environment to make it fun; and a series of matching programming languages. After focusing at the overlap between high schools and colleges at first, we now use after-school programs to move upstream, and we are working on two major downstream courses for the second semester in college: one on object-oriented design and another on logic in program design. My talk will focus on just one aspect of the project: the design-oriented curriculum and its smooth path from middle school to college. I will first demonstrate how to teach an intellectually interesting and fun course on programming with something that looks like plain school mathematics. For the rest of the talk, I will sketch the path from there through college.	TeachScheme!	NA	2018
James Caristi	NA	Session details: Panel	NA	2018
James Caristi:Valerie Barr:Joe Sloan:Eric Stahlberg	NA	Starting a computational science program	NA:NA:NA:NA	2018
Doug Baldwin	NA	Session details: Special session	NA	2018
Douglas Baldwin:Peter Sanderson:Robert McCartney:Stephanie Ludi:Narayanan T. Ramachandran:Carol Taylor	SIGCSE's special projects grant program provides small grants to SIGCSE members to carry out computing education projects whose results generalize to the whole computing education community. This session is a "showcase" for five recent grant projects: a MIPS simulator extended into FPGA hardware, a study of informal learning of computing, software engineering learning modules for the visually impaired, a study of student projects in computing, and curriculum resources for computer security.	SIGCSE special project showcase	NA:NA:NA:NA:NA:NA	2018
Robert Beck	NA	Session details: Special session	NA	2018
Robert E. Beck:Jennifer Burg:Jesse M. Heines:Bill Manaris	NA	Computing and music: a spectrum of sound	NA:NA:NA:NA	2018
Irene Polycarpou	NA	Session details: Security and society	NA	2018
Tadayoshi Kohno:Brian D. Johnson	Computer security courses typically cover a breadth of technical topics, including threat modeling, applied cryptography, software security, and Web security. The technical artifacts of computer systems - and their associated computer security risks and defenses - do not exist in isolation, however; rather, these systems interact intimately with the needs, beliefs, and values of people. This is especially true as computers become more pervasive, embedding themselves not only into laptops, desktops, and the Web, but also into our cars, medical devices, and toys. Therefore, in addition to the standard technical material, we argue that students would benefit from developing a mindset focused on the broader societal and contextual issues surrounding computer security systems and risks. We used science fiction (SF) prototyping to facilitate such societal and contextual thinking in a recent undergraduate computer security course. We report on our approach and experiences here, as well as our recommendations for future computer security and other computer science courses.	Science fiction prototyping and security education: cultivating contextual and societal thinking in computer security education and beyond	NA:NA	2018
Claude F. Turner:Blair Taylor:Siddharth Kaza	While many colleges offer specialized security courses and tracks for students in computing majors, there are few offerings in information security for the non-computing majors. Information security is becoming increasingly critical in many fields, yet most computer literacy courses insufficiently address the security challenges faced by our graduates. This paper discusses the development and impact of a set of modules designed to integrate security into computer literacy across two universities and several community colleges in the state of Maryland. Results from our comparative analyses based on pre- and post- test analysis show significant improvements in post-test results.	Security in computer literacy: a model for design, dissemination, and assessment	NA:NA:NA	2018
Trajce Dimkov:Wolter Pieters:Pieter Hartel	Practical courses in information security provide students with first-hand knowledge of technical security mechanisms and their weaknesses. However, teaching students only the technical side of information security leads to a generation of students that emphasize digital solutions, but ignore the physical and the social aspects of security. In the last two years we devised a course where students were given a practical assignment which includes a combination of physical security, social engineering and digital penetration testing. As part of the course, the students stole laptops using social engineering from unaware employees throughout the university campus. The assignment provided the students with a practical overview of security and increased their awareness of the strengths and weaknesses of security mechanisms. In this paper we present the design of the practical assignment and the observations from the execution.	Training students to steal: a practical assignment in computer security education	NA:NA:NA	2018
Matthew Hertz	NA	Session details: Organization and architecture	NA	2018
Joel C. Adams:Kathy Hoobeboom:Jonathan Walz	Traditional Beowulf clusters have been homogeneous platforms for distributed-memory MIMD parallelism. However, the shift to multicore architectures has made shared-memory MIMD parallelism increasingly important, and inexpensive manycore GPGPUs have revived SIMD parallelism. This paper presents a case study in designing and building a heterogeneous cluster as a learning platform for tera-scale distributed- and shared-memory MIMD parallelism, and GPGPU parallelism.	A cluster for CS education in the manycore era	NA:NA:NA	2018
Erik Brunvand	The design of computer games can be a powerful motivator as students learn about computer architecture and design. Students in classes where computer designs are developed and implemented (usually on Field Programmable Gate Arrays (FPGAs)) seem much more highly motivated if their computer design can be used for something visual and interactive when the project is complete. However, ensuring that the student teams can have a working game by the end of a semester requires careful planning of how their computer designs will interact with the world. Keyboard inputs and VGA outputs are a relatively simple set of I/O interfaces that open up significant new potential for development of game applications on the student's own computer designs. In this paper we describe the curriculum of a computer design course that uses game design as a "carrot" to encourage active student exploration and deeper understanding of computer architecture, I/O subsystems, and computer implementation.	Games as motivation in computer design courses: I/O is the key	NA	2018
Marc L. Corliss:Marcela Melara	In this paper, we present the VIREOS project, a new operating system designed specifically for the classroom. VIREOS is a simple, Unix-like, operating system, which runs on the Larc educational architecture. A VIREOS/Larc system can either be simulated or run on a pre-configured FPGA. The VIREOS project is well integrated with an introductory computer architecture course using Larc and the assignments are structured in a similar fashion: using a bottom-up approach. We have several resources available on the Web, which help reduce the overhead of adopting VIREOS. Finally, VIREOS has been used in one operating systems course already, and the feedback from students was generally favorable.	VIREOS: an integrated, bottom-up, educational operating systems project with FPGA support	NA:NA	2018
Elizabeth Shoop	NA	Session details: Learning objects and modules	NA	2018
L. D. Miller:Leen-Kiat Soh:Beth Neilsen:Kevin Kupzyk:Ashok Samal:Erica Lam:Gwen Nugent	Learning objects (LO) have previously been used to help deliver introductory computer science (CS) courses to students. Students in such introductory CS courses have diverse backgrounds and characteristics requiring revision to LO content and assessment to promote learning in all students. However, revising LOs in an ad hoc manner could make student learning harder for subsequent deployments. To address this problem, we present a systematic revision process for LOs (LOSRP) using proven techniques from educational research including Bloom's Taxonomy levels, item-total correlation, and Cronbach's Alpha. LOSRP uses these validation methods to answer seven questions in order to diagnose what needs to be revised in the LO. Then, LOSRP provides guidelines on revising LOs for each of the seven questions. As an example, we discuss how LOSRP was used to revise the content and assessment for 16 LOs deployed to over 400 students in introductory CS courses in 2009. Lastly, although initially designed for LO revision, we briefly discuss how LOSRP could be used for assessment revision in intelligent tutoring systems.	Revising computer science learning objects from learner interaction data	NA:NA:NA:NA:NA:NA:NA	2018
Jeffrey A. Stone:Tricia K. Clark	CS educators face many challenges in teaching basic computer programming to first-year students. As a result, faculty must find new and interesting ways to engage students and to provide opportunities for student success. This paper reports on a two-year study involving the Problem-Oriented Animated Learning Modules for Introductory Computer Science (PALMS for CS1) project. PALMS for CS1 is a set of animated learning modules designed to enhance student engagement, success, and retention through the use of computer animation, video, audio, and storytelling. The results of this study indicate that PALMS for CS1 has been successful in engaging introductory students but more work remains to improve student success and retention. Marked improvement in student success and retention was seen during the second year of the study, though success and retention are still a challenge for traditionally underrepresented groups.	The impact of problem-oriented animated learning modules in a CS1-style course	NA:NA	2018
L. D. Miller:Leen-Kiat Soh:Gwen Nugent:Kevin Kupzyk:Leyla Masmaliyeva:Ashok Samal	Learning objects (LOs) have been previously used in computer science education. However, analyses in previous studies have been limited to surveys with limited numbers of LOs and students. The lack of copious quantitative data on how LOs impact student learning makes detailed analysis of LO usefulness problematic. Using an empirical approach, we have studied a suite of LOs, comprehensive in both the content covered and the range of difficulty, deployed to CS1 courses from 2007-2010. We review previous work on predictors of achievement and impact of active learning and feedback. We also provide a high-level overview of our LO deployment. Finally, based on our analysis of student interaction data, we found that (1) students using LOs have significantly higher assessment scores than the control group, (2) several student attributes are significant predictors of learning, (3) active learning has a significant effect on student assessment scores, and (4) feedback does not have a significant effect, but there are variables with significant moderating effects.	Evaluating the use of learning objects in CS1	NA:NA:NA:NA:NA:NA	2018
Stephen Edwards	NA	Session details: Undergraduate innovations	NA	2018
Rahman Tashakkori:Barry L. Kurtz:Dolores A. Parks:James B. Fenwick, Jr.:Alice A. McRae	Research experiences are widely available to upper-division computer science students during the academic year and during summer. Co-op and internship opportunities are available to this group as well. Due to the fact that freshman and sophomore students do not have sufficient background, they are often left behind and are not involved in research activities. This paper shares some experiences with a program that was put in place through an NSF STEP grant that provides research opportunities to freshman, sophomore, and first year transfer students. The paper presents examples of projects in which computer science scholars were involved. We have learned that lower-division computer science students are excited about the opportunity to participate in research. Early participation in research helps build a strong community among the freshman and sophomore students, keeps these students engaged, and results in a higher retention rate.	Early participation of CS students in research	NA:NA:NA:NA:NA	2018
Janet Davis:Henry M. Walker	CC2001 and CC2008 recommend that an undergraduate computing curriculum include 16 hours related to social and professional issues. An ITiCSE 2010 Working Group discussed approaches for incorporating this material in the curriculum and outlined seven contrasting implementation cases. Also, Baldwin et al discuss the implementation of computing curricula at five different liberal arts colleges [TOCE, March 2010]. However, none of these provides specific implementation details for addressing social issues in a liberal arts computing curriculum. This paper identifies successful strategies from one college and begins a general discussion of teaching social issues of computing in a liberal arts setting.	Incorporating social issues of computing in a small, liberal arts college: a case study	NA:NA	2018
Paul E. Dickson	The use of undergraduate teaching assistants in computer science courses is not new but is primarily thought of as a way to help with large classes in universities and rarely for small classes in small colleges. In this paper we discuss the success we have had over the past 2 years using undergraduate students as teaching assistants for a number of small computer science classes. Our experience has shown that having undergraduates as teaching assistants helps to engage students with the material, creates a more relaxed classroom environment in which students feel more free to ask questions, improves the effectiveness of class time, and improves class quality. We believe that our experiences using undergraduate teaching assistants can be beneficial not only to small colleges but also to large universities.	Using undergraduate teaching assistants in a small college environment	NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Marie desJardins:Zachary Dodds:Todd Neller	In 2010 a new annual symposium on Educational Advances in Artificial Intelligence (EAAI) was launched as part of the AAAI annual meeting. The event was held in cooperation with ACM SIGCSE and has many similar goals related to broadening and disseminating work in computer science education. EAAI has a particular focus, however, as the event is specific to educational work in Artificial Intelligence and collocated with a major research conference (AAAI) to promote more interaction between researchers and educators in that domain. This panel seeks to introduce participants to EAAI as a way of fostering more interaction between educational communities in computing. Specifically, the panel will discuss the goals of EAAI, provide an overview of the kinds of work presented at the symposium, and identify potential synergies between that EAAI and SIGCSE as a way of better linking the two communities going forward.	Educational advances in artificial intelligence	NA:NA:NA:NA	2018
Gregory Hislop	NA	Session details: Panel	NA	2018
Heidi J.C. Ellis:Mel Chua:Matthew C. Jadud:Gregory W. Hislop	Free and Open Source Software (FOSS) and documentation projects provide excellent learning opportunities for students. In the context of active learning, FOSS is particularly interesting in providing transparent meritocracies that allow students to observe and contribute as part of their learning. This panel will present four different perspectives on student involvement in Free and Open Source Software (FOSS) projects. These perspectives will cover: (a) different ways that students can contribute to FOSS projects beyond coding, (b) an industry perspective on student involvement in FOSS projects, (c) how Humanitarian FOSS can provide a welcoming environment for student learning, and (d) barriers to faculty involvement and how such barriers can be overcome.	Learning through open source participation	NA:NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Jan Cuny:Chris Stephenson:Cameron Wilson	The CS10K project is a large-scale, collaborative project bringing together stakeholders from wide-ranging constituencies with the goal of systematically changing the scale, curriculum, and pedagogy of teaching computer science at all levels, but focusing in particular on computer science in U.S. high schools as well as introductory computing at the college level. As part of the systemic changes in teaching computer science the CS10K project aims to have 10,000 teachers in 10,000 high schools teaching a new curriculum by 2015.	The CS10K project: mobilizing the community to transform high school computing	NA:NA:NA:NA	2018
Khadija Stewart	NA	Session details: Teaching programming: non-traditional approaches	NA	2018
Peter Hubwieser:Marc Berges	In this paper, we describe a research project that investigates how far freshmen at the University (without any programming background) are able to learn object-oriented programming with as little (human) instruction as possible. We designed specific tasks for programming assignments and supporting worksheets that contained the only information input that the students received during the courses. We examined the program code the students produced in order to assess the quality of their products. The surprising result was that most of the students were able to write quite satisfying programs. Additionally, a cluster analysis of the results showed that there are two different types of students: the ones that accept and apply the object-oriented concepts quite willingly, while the others prefer to program in a more traditional, procedural style.	Minimally invasive programming courses: learning OOP with(out) instruction	NA:NA	2018
Arto Vihavainen:Matti Paksula:Matti Luukkainen	Learning a craft like programming is efficient when novices learn from people who already master the craft. In this paper we define Extreme Apprenticeship, an extension to the cognitive apprenticeship model. Our model is based on a set of values and practices that emphasize learning by doing together with continuous feedback as the most efficient means for learning. We show how the method was applied to a CS I programming course. Application of the method resulted in a significant decrease in the dropout rates in comparison with the previous traditionally conducted course instances.	Extreme apprenticeship method in teaching programming for beginners	NA:NA:NA	2018
Kathryn T. Stolee:Teale Fristoe	Educational programming environments such as Microsoft Research's Kodu Game Lab are often used to introduce novices to computer science concepts and programming. Unlike many other educational languages that rely on scripting and Java-like syntax, the Kodu language is entirely event-driven and programming takes the form of "when" do' clauses. Despite this simplistic programing model, many computer science concepts can be expressed using Kodu. We identify and measure the frequency of these concepts in 346 Kodu programs created by users, and find that most programs exhibit sophistication through the use of complex control flow and boolean logic. Through Kodu's non-traditional language, we show that users express and explore fundamental computer science concepts.	Expressing computer science concepts through Kodu game lab	NA:NA	2018
David Ranum	NA	Session details: Assessing and reviewing	NA	2018
Chris Loftus:Lynda Thomas:Carol Zander	In this paper we revisit previous research to elaborate on the question: "Can graduating students design software systems?" The work concluded that the answer was "not really". We wished to determine if this was true currently at our institution and also to look at whether students were able to design software in groups, and evaluate others' designs. In summary, it appears that our students, just as in the original experiment, struggle with doing design, even in a group situation. The representation of behavioral design was particularly lacking. That said, students were able to recognize weaknesses when evaluating other group designs. Based on our findings, we provide several pedagogic recommendations.	Can graduating students design: revisited	NA:NA:NA	2018
Allison Elliott Tew:Mark Guzdial	A primary goal of many CS education projects is to determine the extent to which a given intervention has had an impact on student learning. However, computing lacks valid assessments for pedagogical or research purposes. Without such valid assessments, it is difficult to accurately measure student learning or establish a relationship between the instructional setting and learning outcomes. We developed the Foundational CS1 (FCS1) Assessment instrument, the first assessment instrument for introductory computer science concepts that is applicable across a variety of current pedagogies and programming languages. We applied methods from educational and psychological test development, adapting them as necessary to fit the disciplinary context. We conducted a large scale empirical study to demonstrate that pseudo-code was an appropriate mechanism for achieving programming language independence. Finally, we established the validity of the assessment using a multi-faceted argument, combining interview data, statistical analysis of results on the assessment, and CS1 exam scores.	The FCS1: a language independent assessment of CS1 knowledge	NA:NA	2018
Christopher D. Hundhausen:Pawan Agarwal:Michael Trevisan	Given the increased importance of communication, teamwork, and critical thinking skills in the computing profession, we have been exploring studio-based instructional methods, in which students develop solutions and iteratively refine them through critical review by their peers and instructor. We have developed an adaptation of studio-based instruction for computing education called the pedagogical code review (PCR), which is modeled after the code inspection process used in the software industry. Unfortunately, PCRs are time-intensive, making them difficult to implement within a typical computing course. To address this issue, we have developed an online environment that allows PCRs to take place asynchronously outside of class. We conducted an empirical study that compared a CS 1 course with online PCRs against a CS 1 course with face-to-face PCRs. Our study had three key results: (a) in the course with face-to-face PCRs, student attitudes with respect to self-efficacy and peer learning were significantly higher; (b) in the course with face-to-face PCRs, students identified more substantive issues in their reviews; and (c) in the course with face-to-face PCRs, students were generally more positive about the value of PCRs. In light of our findings, we recommend specific ways online PCRs can be better designed.	Online vs. face-to-face pedagogical code reviews: an empirical comparison	NA:NA:NA	2018
Delvin Defoe	NA	Session details: Algorithms	NA	2018
Tim Bell:Bengt Aspvall	This paper offers an exercise for revisiting the main sorting algorithms after they have been taught to students. This is done in a way that emphasizes the relationships between them, and shows how considering abstraction and extreme cases can lead to the generation of new algorithms. A number of authors (including textbook authors) have noted particular relationships between algorithms, such as an uneven split in merge sort being equivalent to insertion sort. In this paper we use a flexible priority queue, the d-heap, to derive three common sorting algorithms. We combine this with using a BST as a priority queue, plus prior observations in the literature, to show strong relationships between the main sorting algorithms that appear in textbooks. In the process students are able to revisit a number of algorithms and data structures and explore elegant relationships between them. This approach can also lead to exercises and exam questions that go beyond desk-checking to evaluate students' understanding of these algorithms.	Sorting algorithms as special cases of a priority queue sort	NA:NA	2018
Clifford A. Shaffer:Monika Akbar:Alexander Joel D. Alon:Michael Stewart:Stephen H. Edwards	Algorithm visualizations (AVs) are widely viewed as having the potential for improving computer science education. However, the rate of AV use and overall impact on education does not match the positive interest in their use that instructors report. Surveys of CS faculty show that impediments to successful use of AVs in the classroom include difficulties in finding quality AVs on desired topics, difficulties in adapting AVs to a given classroom setting, and lack of knowledge on the best way to deploy AVs. This indicates a need for better support for instructors, to get them past these barriers. We seek to provide this support through an online educational community that relies on a new model based less on the "digital library" approach of information gained by going to a site and searching. Instead, the focus is on community-added content through members' discussions, reviews, and ratings of content items. The AlgoViz community effort will better focus the future direction of AV development and use.	Getting algorithm visualizations into the classroom	NA:NA:NA:NA:NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	We conducted two experiments evaluating Sketchmate, a tool used to teach the splay tree data structure and its algorithms. Learning and learning rates were compared across two groups, one using Sketchmate and the other using paper-and-pencil on practice problems. Results from Experiment I showed that when students used Sketchmate with minimal feedback, there were no significant differences across learning, time spent learning, or learning rate. Experiment II used a version of Sketchmate that provided richer feedback. Results showed similar learning but Sketchmate took significantly less time. Thus when feedback was added, learning rates were significantly greater relative to the paper-and-pencil condition. Discussion focuses on measuring learning rates when evaluating instructional tools.	Two experiments using learning rate to evaluate an experimenter developed tool for splay trees	NA:NA:NA	2018
Rowena Turner	NA	Session details: Software engineering	NA	2018
Sriram Mohan:Stephen Chenoweth	Requirements engineering, an integral part of the life of a software engineer, often receives little or no attention in the education of a computer science student. We report on our experiences in constructing an innovative curriculum that utilizes a three tier model of learning that provides students with hands-on experience on the various facets of requirements elicitation and management. This curriculum can be integrated into an existing course on software engineering, software requirements or the senior capstone experience. We believe our experience will be of use to other computer science and software engineering programs that are aiming at introducing requirements in the undergraduate curriculum.	Teaching requirements engineering to undergraduate students	NA:NA	2018
Peter J. Clarke:Jairo Pava:Yali Wu:Tariq M. King	One of the main concerns in the software industry continues to be the development of high quality software. This concern will be exacerbated as software systems become more complex. The training of software developers continues to grow in academia since more institutions are offering software engineering (SE) courses. However, the list of topics that are expected to be covered in this course leaves little or no time for topics that focus on developing quality software, such as software testing and the use of testing tools. In this paper we describe an approach that non-intrusively integrates the use of software testing tools in SE courses. The cornerstone of our approach is the interaction students have with a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on testing concepts and testing tools. WReSTT employs both collaborative learning and social networking features that are attractive to students. We present the results of preliminary study performed in two SE courses that show how using the resources in WReSTT can potentially impact the students' understanding of software testing and the use of testing tools.	Collaborative web-based learning of testing tools in SE courses	NA:NA:NA:NA	2018
Tom Nurkkala:Stefan Brandle	Software Studio is a studio-based learning (SBL) curriculum designed to train students as professional software engineers. Traditional software engineering courses remain important, but suffer significant gaps in preparing students for professional engagement. We describe our curriculum model, highlight ways in which it fills these gaps, and offer a SWOT analysis. As practical guidance, we reflect on our missteps and successes in implementing Software Studio over the past five semesters. Finally, we suggest future directions for Software Studio.	Software studio: teaching professional software engineering	NA:NA	2018
Henry Walker	NA	Session details: Panel	NA	2018
Karen Donathan:Barbara Ericson:Paul Tymann:Henry M. Walker	Much has been written about the decrease in the number of students pursuing computing in colleges. Unfortunately, most students form their (usually negative) opinions of computing long before they reach college [1], so it is beneficial for university faculty who want to increase college enrollment to do outreach aimed at a younger audience. Activities to promote computing among K-12 students can proceed at several levels, occur in various locations, and involve both students and faculty. College and high school faculty can collaborate in many ways. As teachers of introductory courses, both groups want to generate interest, cover important material, and provide a strong foundation for later work. For example, the AP CS course description includes material that fits well with both high school and introductory college courses. Also, today in both environments, there is much discussion regarding the best approaches for creating excitement and introducing students to computing. Although both faculties need to address common content and utilize active pedagogies, it also is important to acknowledge that college and high school environments are different, and both levels have special opportunities and constraints. Many college faculty are interested in doing K-12 outreach but often do not know where to start or do not know any successful strategies. The purpose of this panel is to present K-12 outreach strategies that have worked and then to provide the audience with the opportunity to brainstorm with the panelists to explore alternate ideas for outreach and to identify new approaches. Some ideas and strategies come from experiences of high school and college teachers working together as part of the AP CS program, but other approaches extend beyond AP CS.	Successful K-12 outreach strategies	NA:NA:NA:NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Mark Guzdial:Andrew McGettrick:Steve Roach	Following a roughly 10 year cycle, the Computing Curricula volumes have helped to set international curricular guidelines for undergraduate programs in computing. In the summer of 2010, planning for the next volume in the series, Computer Science 2013, began. This panel seeks to update and engage the SIGCSE community on the Computer Science 2013 effort. The development of curricular guidelines in Computer Science is particularly challenging given the rapid evolution and expansion of the field. Moreover, the growing diversity of topics in Computer Science and the integration of computing with other disciplines create additional challenges and opportunities in defining computing curricula. As a result, it is particularly important to engage the broader computer science education community in a dialog to better understand new opportunities, local needs, and novel successful models of computing curriculum. The last complete Computer Science curricular volume was released in 2001 [3] and followed by a review effort that concluded in 2008 [2]. While the review helped to update some of the knowledge units in the 2001 volume, it was not aimed at producing an entirely new curricular volume and deferred some of the more significant questions that arose at the time. The Computer Science 2013 effort seeks to provide a new volume reflecting the current state of the field and highlighting promising future directions through revisiting and redefining the knowledge units in CS, rethinking the essentials necessary for a CS curriculum, and identifying working exemplars of courses and curricula along these lines.	Setting the stage for computing curricula 2013: computer science -- report from the ACM/IEEE-CS joint task force	NA:NA:NA:NA	2018
Robert McCartney	NA	Session details: Special session	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Stephen Cooper:Daniel D. Garcia:Michelle Friend Hutton:Nick Parlante:Brad Richards	We often learn of successful pedagogical experiments, but we seldom hear of the the ones that failed. For this special session we solicited submissions from the SIGCSE membership, selected the best from among these, and will have presentations at the session by the selected authors. Our contributions describe pedagogical approaches that seemed to be good ideas but turned out as failures. Contributors will describe their pedagogical experiment, the rationale for the experiment, evidence of failure, and lessons learned.	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA	2018
Janet Davis	NA	Session details: Recruitment and retention	NA	2018
James P. Cohoon:Luther A. Tychonievich	An effective CS1 approach has been developed for encouraging diverse students without prior computer science experiences to select computing majors. Separation of CS1 sections by prior experience level concentrates diverse students in the inexperienced section. Within that section we use several techniques to increase student comprehension and participation, including an integrated lecture/lab, many small examples and assignments, student participation, etc. We discuss the approach and evaluate its performance over a four-year time period.	Analysis of a CS1 approach for attracting diverse and inexperienced students to computing majors	NA:NA	2018
Elizabeth Sweedyk	Recruitment of students to Computer Science has been a major focus of effort for educators since the dot-com bust in 2001. Two largely disparate themes in these efforts are women and games. There have been numerous efforts to broaden participation in computer science by attracting women to the field. At the same time, games are increasingly used to attract new students. Our interest lies at the intersection of these methods. We began using game design/development projects in our software engineering course, CS121, in 2002. The game focus was extremely successful with many of our students. But a nagging minority of students objected to building games, and women tend to be overrepresented in that group. So while are awed by the power of games to engage and motivate many of our students, we need to ask: Do games in our curriculum reinforce gender stereotypes of Computer Science? Do they foster development of the so-called "Geek mythology?"[7] In short, must we choose: women or games? We argue the answer is no. While traditional game projects may disenfranchise women, our experience shows that serious game projects both attract and engage them. This paper describes our results.	Women build games, seriously	NA	2018
Jennifer S. Kay	America's youth perceive Computer Science to be difficult, tedious, boring, irrelevant and asocial. Unfortunately, many traditional introductory Computer Science classes and textbooks do little to improve that image. In contrast, contextualized approaches to teaching introductory Computer Science are very attractive. Instead of writing a leap year program, students can learn about conditional statements by programming a robot to follow a light, or by creating an animation to tell a story, or even by modifying a picture of the college president so that she is wearing a neon orange jacket instead of a navy blue one. The arguments in favor of contextualized approaches to attract non-Computer-Science-majors to our classes are very persuasive. But what about students who then choose to major or minor in Computer Science? Of course we want to offer them interesting and engaging first courses in Computer Science, and indeed this may help with our efforts to attract more students to our programs. But what happens in subsequent semesters? The purpose of this paper is to initiate a general discussion on the use of any sort of "cool" new approach into both undergraduate and K-12 Computer Science education. These approaches successfully attract students to study subjects that we ourselves are deeply engaged in. But we need to discuss as a community what happens to students who do choose to major or minor in Computer Science when our individual classes conclude and the rest of their studies commence.	Contextualized approaches to introductory computer science: the key to making computer science relevant or simply bait and switch?	NA	2018
Lillian N. Cassel	NA	Session details: Parallel/concurrent programming: tools and languages	NA	2018
Patrick Garrity:Timothy Yates:Richard Brown:Elizabeth Shoop	WebMapReduce (WMR) is a strategically simplified user interface for the Hadoop implementation of the map-reduce model for distributed computing on clusters, designed so that novice programmers in an introductory CS courses can perform authentic data-intensive scalable computations using the programming language they are learning in their course. The open-source WMR software currently supports Java, C++, Python, and Scheme computations, and can readily be extended to support additional programming languages, and configured to adapt to the practices at a particular institution for teaching introductory programming. Potential applications in courses at all undergraduate levels are indicated, and implementation of the WMR software is described.	WebMapReduce: an accessible and adaptable tool for teaching map-reduce computing	NA:NA:NA:NA	2018
Caitlin Sadowski:Thomas Ball:Judith Bishop:Sebastian Burckhardt:Ganesh Gopalakrishnan:Joseph Mayo:Madanlal Musuvathi:Shaz Qadeer:Stephen Toub	Multicore computers are now the norm. Taking advantage of these multiple cores entails parallel and concurrent programming. There is therefore a pressing need for courses that teach effective programming on multicore architectures. We believe that such courses should emphasize high-level abstractions for performance and correctness and be supported by tools. This paper presents a set of freely available course materials for parallel and concurrent programming, along with a testing tool for performance and correctness concerns called Alpaca (A Lovely Parallelism And Concurrency Analyzer). These course materials can be used for a comprehensive parallel and concurrent programming course, a la carte throughout an existing curriculum, or as starting points for graduate special topics courses. We also discuss tradeoffs we made in terms of what to include in course materials.	Practical parallel and concurrent programming	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Ariel Ortiz	Teaching how to write correct programs is hard; teaching how to write correct concurrent programs is even harder. There is a desperate need for a better concurrency programming model than what most people are currently using. The Erlang programming language might be a step in that direction. This paper provides an overview of Erlang and how it has been successfully used to teach concurrency-oriented programming (COP) in a sophomore level course at the Tecnológico de Monterrey, Campus Estado de México.	Teaching concurrency-oriented programming with Erlang	NA	2018
Jian Zhang	NA	Session details: Peer teaching and tutoring	NA	2018
Sarah Hug:Heather Thiry:Phyllis Tedford	This paper describes the benefits of Peer-Led Team Learning (PLTL), an NSF-sponsored program in the sciences, to peer leaders serving in the Computing Alliance for Hispanic Serving Institutions (CAHSI). Beyond the benefits to students enrolled in the PLTL courses, survey findings show the majority of peer leaders report increased self-efficacy in teaching computer science, improved content knowledge, and better communication and leadership skills following a semester of leading PLTL. Results from this diverse group of leaders indicate no differences in gains between underrepresented minority and majority students, suggesting the program may provide a path for improving retention of underrepresented groups in the field.	Learning to love computer science: peer leaders gain teaching skill, communicative ability and content knowledge in the CS classroom	NA:NA:NA	2018
Christian Murphy:Rita Powell:Kristen Parton:Adam Cannon	The Peer-Led Team Learning (PLTL) approach has previously been shown to be effective in recruiting and retaining students, particularly under-represented students, in undergraduate introductory CS courses. In PLTL, small groups of students are led by an undergraduate peer and work together to solve problems related to CS. At Columbia University, the Columbia Emerging Scholars Program has used PLTL in an effort to increase enrollment in CS courses beyond the introductory level, and to increase the number of students who select Computer Science as their major, by demonstrating that CS is necessarily a collaborative activity that focuses more on problem solving and algorithmic thinking than on programming. Over the past six semesters, over 80 students have completed the program, and preliminary results indicate that this program has had a positive effect on increasing participation in the major. This paper discusses our experiences of building and expanding the Columbia Emerging Scholars program, and addresses such topics as recruiting, training, scheduling, student behavior, and evaluation. We expect that this paper will provide a valuable set of lessons learned to other educators who seek to launch or grow a PLTL program at their institution as well.	Lessons learned from a PLTL-CS program	NA:NA:NA:NA	2018
Joseph A. Cottam:Suzanne Menzel:Janet Greenblatt	Peer tutoring is a simple, low-cost intervention that can be implemented in CS1/2 courses. It is hypothesized that peer tutoring helps students build a sense of community, succeed in course work, and build confidence to take further courses in the major. This paper examines the latter two hypotheses by examining the predicted and actual behavior of students in CS1/2. Course performance improvements were observed, which also strongly influence retention in computing-related courses. The measures also point to further research directions, such as social influences and the impact of peer tutoring relative to office hours or online forums.	Tutoring for retention	NA:NA:NA	2018
Duane Buck	NA	Session details: Musical, social, and intelligent robots	NA	2018
Andrea Salgian:Christopher Ault:Teresa M. Nakra:Yunfeng Wang:Meredith K. Stone	In this paper, we describe an ongoing multidisciplinary undergraduate seminar that we have developed, in which student teams build non-human systems that conduct our college orchestra. Students and faculty in the course come from four disciplines: computer science, interactive multimedia, music, and mechanical engineering. This paper describes the course structure, computer science components, final projects, team dynamics, and assessments. We evaluate the results to-date and discuss ongoing revisions and expectations for the future.	Multidisciplinary computer science through conducting robots	NA:NA:NA:NA:NA	2018
Michael Ferguson:Nick Webb:Tomek Strzalkowski	A social robot is a robotic platform that supports natural interaction with people in a human-scale environment. Such a platform allows interesting opportunities for both traditional Computer Science students and students from other disciplines, such as psychology, philosophy, design and communications. In this paper, we describe a new social robotic platform for educational uses that is equipped with a social face, arms for gesturing, advanced sensory, mobile base, and ROS integration. By using off-the-shelf and rapidly prototyped components, together with open source software, this platform is low-cost, easy to use, and easy to reproduce.	Nelson: a low-cost social robot for research and education	NA:NA:NA	2018
Nik Swoboda:Juan Bekios-Calfa:Luis Baumela:Javier de Lope	In this paper we describe a collection of course materials designed to be used in an undergraduate introduction to artificial intelligence (AI) course. These materials include three programming assignments, each touching upon core AI topics, which require that the students build the main functionalities of a guide robot. These assignments were carefully designed to allow the same solution to work both with a robot simulator and an inexpensive web-cam as well as with real robots. An overview of the course and the assignments is given along with references to online versions of the resources developed to teach the course.	An introduction to AI course with guide robot programming assignments	NA:NA:NA:NA	2018
Laurie Smith King	NA	Session details: Keynote	NA	2018
Susan Landau	Government's role in computer science is much larger than funding agencies. Digital rights management, net neutrality, and cybersecurity are hot topics in Washington, hot topics where regulation or legislation may have major impact on the computer systems we develop and enjoy. Yet the rules governing DC are very different than the rules that govern science and engineering, and learning how to operate in a world where facts are only ten percent of the equation can be a challenging experience for someone more accustomed to proving theorems and building systems. I'll describe what it takes for a nerd to be effective in the world of government, and give some specific examples in the hot area of cyberwar.	A computer scientist goes to washington: how to be effective in a world where facts are 10% of the equation	NA	2018
Jacob Furst	NA	Session details: Panel	NA	2018
Hans-Peter Bischof:Jacob D. Furst:Daniela S. Raicu:Susan D. Ruban	Undergraduate research is becoming increasingly common in colleges and universities, and, to support this, there is a need to have best practices and forums for promoting exchange of ideas. In particular, a working group at a recent National Science Foundation (NSF) Computer and Information Science and Engineering (CISE) Research Experiences for Undergraduates (REU) sites PI's meeting identified four important issues in undergraduate research: 1) how to design a good research project, 2) how to prepare students for research, 3) how to measure outcomes of undergraduate research and 4) incentives for undergraduates to publish as result of their participation in research. The panelists have all served as PIs or Co-PIs on NSF REU projects in computing and have mentored many undergraduates in a large variety of research projects both in REU settings as well as during the regular academic year. They will each address one of the issues identified above, and share their expertise in addressing the issue, providing solid guidance to anyone interested in promoting undergraduate research. A significant amount of time will be set aside for audience participation and discussion.	Top issues in providing successful undergraduate research experiences	NA:NA:NA:NA	2018
Sue Fitzgerald	NA	Session details: Special session	NA	2018
Sue Fitzgerald:Renée McCauley:Vicki L. Plano Clark	This special session will recap qualitative research design and analysis as discussed during an NSF-sponsored two-part workshop for computer science education researchers held in 2009-2010. Several workshop participants will illustrate the use of qualitative methods by describing their research projects. They will briefly present their methodologies, analyses and findings. Attendees will be encouraged to ask questions about how qualitative methods can be used in their own research projects.	Report on qualitative research methods workshop	NA:NA:NA	2018
Philip East	NA	Session details: Special session	NA	2018
J. Philip East:Charmaine Bentley:Joe Kmoch:Stephen Rainwater:Chris Stephenson	This special session serves two purposes. It provides a progress report on the revision of the NCATE Standards for the Preparation of Secondary Computer Science Teachers and seeks input from computing education professionals on the proposed revisions. The Standards and their role in evaluating teacher preparation programs will be explained, the proposed revision discussed, and process for providing input explained.	NCATE standards for preparation of secondary computer science teachers	NA:NA:NA:NA:NA	2018
Jill Pala	NA	Session details: Computational thinking	NA	2018
Ashok Basawapatna:Kyu Han Koh:Alexander Repenning:David C. Webb:Krista Sekeres Marshall	End-user game design tools are effective in motivating and exposing students with no prior programming experience to computer science. However, while there is good evidence that these environments are effective motivators, the question remains what do students actually learn? For our purposes, using AgentSheets, we would like to know if students can apply the knowledge obtained from programming games to creating science simulations. Specifically, we want to better understand if students are able to recognize Computational Thinking Patterns (CTP) from their game programming experience. Computational Thinking Patterns are abstract programming patterns that enable agent interactions not only in games but also in science simulations. Students and teachers who participated in a game design summer institute were administered a Computational Thinking Pattern Quiz (CTP Quiz). This quiz tested the participants' ability to recognize and understand patterns in a context removed from game programming. We found that participants, for the most part, were able to understand and recognize the patterns in a variety of contexts	Recognizing computational thinking patterns	NA:NA:NA:NA:NA	2018
Dennis Kafura:Deborah Tatar	Experience with the first offering of a computational thinking course for computer science (CT4CS) students is reported. The course is grounded in student interaction with fundamental, recurring concepts suggested by comparison with two sets of computer science principles. By using specialized, freely available tools and physical simulations it is possible to provide concrete, tangible learning experiences that neither require knowledge of nor the overhead of programming. Student end-of-term reflections indicate that the course deepened and broadened their understanding of computer science even when they had previously encountered a topic, and improved their computer science vocabulary.	Initial experience with a computational thinking course for computer science students	NA:NA	2018
Charles Dierbach:Harry Hochheiser:Samuel Collins:Gerald Jerome:Christopher Ariza:Tina Kelleher:William Kleinsasser:Josh Dehlinger:Siddharth Kaza	Computational thinking has been identified as a necessary fundamental skill for all students. University curricula, however, are currently not designed to provide such knowledge to a broad student population. In this paper, we report on our experiences in the development of a model for incorporating computational thinking into the undergraduate, general education curriculum at Towson University. We discuss the model in terms of eliciting faculty interest, institutional support, and positive student response. In the first two years of this NSF-funded three-year project, we have developed, piloted and assessed five computational thinking general education courses - an Everyday Computational Thinking course, and four discipline-specific computational thinking general education courses. Initial assessments show promising and significant student, instructor and administration interest in computational thinking as a basis in courses covering multiple disciplines within the general education curriculum.	A model for piloting pathways for computational thinking in a general education curriculum	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Sara Miner More	NA	Session details: Discrete mathematics	NA	2018
Mehran Sahami	During the past 20 years, probability theory has become a critical element in the development of many areas in computer science. Commensurately, in this paper, we argue for expanding the coverage of probability in the computing curriculum. Specifically, we present details of a new course we have developed on Probability Theory for Computer Scientists. An analysis of course evaluation data shows that students find the contextualized content of this class more relevant and valuable than general presentations of probability theory. We also discuss different models for expanding the role of probability in different curricular programs that may not have the capacity to teach a full course on the subject.	A course on probability theory for computer scientists	NA	2018
Robert L. Scot Drysdale	Many students find that proof by induction is one of the most difficult topics in discrete mathematics. Even students who are able to write inductive proofs in a Discrete Mathematics course often find it difficult to write inductive proofs in Data Structures, Algorithms, Theory of Computation, and other computer science courses. Part of the reason for this is that discrete mathematics courses tend to emphasize weak induction over the natural numbers, but strong induction over recursively defined structures is much more useful in computer science. This paper argues that learning and using proof by induction is easier if the recursive nature of proof by induction is made explicit, especially for students familiar with recursion. It can be useful to view an inductive proof as a template for a recursive program that takes a specific instance as a parameter and generates a complete direct proof for that instance. The abstract idea of assuming and invoking an inductive hypothesis is replaced by the concrete idea of making a recursive call to prove a lemma. Viewing induction as a recursive process allows us to give a rule for determining what base cases need to be proved in strong induction and simplifies creating correct inductive proofs.	Mathematical induction is a recursive technique	NA	2018
James F. Power:Thomas Whelan:Susan Bergin	This survey paper reviews a large sample of publications on the teaching of discrete structures and discrete mathematics in computer science curricula. The approach is systematic, in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analyzed. A number of broad themes in discrete structures education are identified relating to course content, teaching strategies and the means of evaluating the success of a course.	Teaching discrete structures: a systematic review of the literature	NA:NA:NA	2018
Ingrid Russell	NA	Session details: Operating systems and databases	NA	2018
Peter J. Desnoyers	The "Computer Systems" course at Northeastern University is an MS-level core course which attempts to teach students how computers work, through a behavioral approach to the concepts involved in operating systems and their interface to the hardware. As an operating system is typically the first reactive system which students encounter in their studies, the goal of the class is to develop an understanding of the tools and reasoning which are involved in understanding and working with the internals of such a system, whether it be a conventional operating system or (as is more commonly found in industry) a consumer product, networking device, or other embedded system. This course is currently in its third year with enthusiastic responses from students, especially those who have been able to apply its lessons in co-operative work assignments, and an undergraduate class teaching substantially the same material is currently underway.	Teaching operating systems as how computers work	NA	2018
Oren Laadan:Jason Nieh:Nicolas Viennot	Linux has emerged as a widely-used platform for enabling hands-on kernel programming experience to learn about operating system concepts. However, developing pedagogically-effective programming projects in the context of a complex, production operating system can be a challenge. We present a structured series of five Linux kernel programming projects suitable for a one semester introductory operating systems course to address this issue. Each assignment introduces students to a core topic and major component of an operating system while implicitly teaching them about various aspects of a real-world operating system. Projects are of modest coding complexity, but require students to understand and leverage core components of the Linux operating system. The learning benefits for students from this approach include learning from real-world operating system code examples by expert kernel designers and gaining software engineering experience managing production code complexity. We have successfully used these structured Linux kernel projects to teach over a thousand students in the introductory operating systems course at Columbia University.	Structured linux kernel projects for teaching operating systems concepts	NA:NA:NA	2018
Suzanne W. Dietrich:Mahesh Chaudhari	The Language INtegrated Query (LINQ) language is a declarative query language integrated within an object-oriented programming language that provides a unified paradigm for querying relations, objects, and XML (ROX). This paper describes a suite of exercises, from cooperative in-class activities to larger-scale graded assignments, for incorporating LINQ into the database curriculum. These exercises support various student learning outcomes and illustrate the applicability of LINQ by querying the same database enterprise across the ROX data models.	LINQ ROX!: integrating LINQ into the database curriculum	NA:NA	2018
Ariel Ortiz	NA	Session details: CS 1: tools	NA	2018
A. T. Chamillard	Professors are continually exploring ways to increase the engagement of their students, but are sometimes concerned that doing "fun" things in class could adversely affect student learning. Over the course of several semesters, we had the same professor teach several CS1 and CS2 courses for computer science and game development majors. As part of his classroom approach, the professor used a student response system to engage the students in the flow of the lecture. In this paper, we examine the relationships between student participation using the student response system and student performance in the course assessments. We also explore the relationship between each student's perceived mastery of course topics and their demonstrated mastery of those topics on the Final Exam. Finally, we explore several differences between the multiple courses included in the study.	Using a student response system in CS1 and CS2	NA	2018
Wei Jin:Albert Corbett	In this paper, we describe our approach in addressing learning challenges students experience in introductory programming courses. We combine two effective instructional methodologies to help students learn to plan programs prior to writing code: Cognitive Apprenticeship Learning (CAL) and Cognitive Tutors (CT). In the CAL component, the instructor models program planning in class and paper handouts are used to scaffold program planning in homework assignments. In CAL-CT, the program-planning process is also supported by a computer tutor which provides step-by-step feedback and advice. The results show that the combined CAL-CT approach yielded substantial gains over traditional instruction. Its advantage over the CAL-Only approach is also significant.	Effectiveness of cognitive apprenticeship learning (CAL) and cognitive tutors (CT) for problem solving using fundamental programming concepts	NA:NA	2018
Jungsoon P. Yoo:Sung K. Yoo:Suk Seo:Chrisila Pettey	The ability to design an algorithm is one of the most important learning outcomes of a computer science program. Unfortunately, not only is learning how to design algorithms a challenging task, but many students believe that algorithm design is not an important part of problem solving. To address this challenge and hopefully change student attitudes, we developed AlgoTutor, a web-based algorithm development tutoring system. AlgoTutor's primary components are the algorithm composer and the algorithm tracer. A third component, ProgramPad, was added to show the connection between algorithms and code. This paper presents the results of experiments that assessed AlgoTutor's effectiveness in changing student attitudes about algorithm development. The results show that students who used AlgoTutor in CS-I were more likely to realize the importance of algorithm design in problem solving and to have confidence in their own algorithm development abilities.	Can algotutor change attitudes toward algorithms	NA:NA:NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Zachary Dodds:Timothy Huang:Samuel A. Rebelsky	Be an opener of doors for such as come after thee..." - Ralph Waldo Emerson, 1844. At the SIGCSE Symposium in 2007, we presented a panel in which seasoned teaching faculty from four large, PhD-granting universities shared the teaching tips we wished we'd known before starting our careers [1]. The difference from earlier "Teaching Tips" panels [6] was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources [2, 3, 4, 8, 10, 11]. We clustered our tips into several categories: Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), and Meta (advice spanning categories). The session was received quite well, and the audience contributed many of their own teaching tips throughout the presentation. Since all of the presenters in 2007 regularly taught large, hundred-student classes, many of their suggestions (e.g., lecturing in a large venue or managing an army of teaching assistants) were not relevant to the experience of teaching small classes. Quite a few attendees suggested there be a follow-up session with presenters who could address the challenges specific to small college or university classes. To that end, we present the "Small College Class" edition, with seasoned educators who have expertise teaching smaller classes at their university or college. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for an online collection. Complementing the categories above, we have added two more that capture the intimate setting of small classes: - Classroom (organization, interactions, and incentives) - Personal (fostering relationships).	Teaching tips we wish they'd told us before we started, small college class edition	NA:NA:NA:NA	2018
Scott Grissom	NA	Session details: Special session	NA	2018
Scott Grissom:Sue Fitzgerald:Victor Piotrowski:Jan Cuny:Joan Peckham:Harriet Taylor:Daniel Menelly:Mimi McClure	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty, and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA:NA:NA:NA	2018
Ali Erkan	NA	Session details: Special session	NA	2018
Henry M. Walker:Ali Erkan:Mark Guzdial:Steve Cooper	In this special session, we will discuss the role and value of quantitative instruments in gauging student perspectives in computer science education. After creating the appropriate context, we will discuss the road educators have traveled in creating such instruments as well as review one based on a variation of a survey developed by the University of Maryland Physics Education Research Group. Finally, we will present the importance of gathering this information from the perspective of grant agencies. During our conversation, we will invite our audience members to fill out the survey form for a particular instrument. If we are collectively on the same page, then our responses may be used to establish a baseline to which students progress can be compared.	Role and value of quantitative instruments in gauging student perspectives in a computing curriculum	NA:NA:NA:NA	2018
Todd Neller	NA	Session details: Computing in the arts and sciences	NA	2018
Erik Brunvand:Paul Stout	We describe a cross-disciplinary collaborative course that pairs computer science and engineering (CSE) students with art students to engage in joint engineering design and creative studio projects. These projects combine embedded system design with sculpture to create kinetic art. We believe that this is a natural pairing of two disparate disciplines, and one that provides distinct educational benefits to both groups of students. In this paper we describe the course content, the collaborative process, the materials used in the class, and experience with a pilot version of the course taught in Fall 2009 the University of Utah.	Kinetic art and embedded systems: a natural collaboration	NA:NA	2018
Ursula Wolz:Lillian (Boots) Cassel:Thomas Way:Kim Pearson	As the need for multidisciplinary computing education continues to increase, consideration for distributed expertise will become critical to implementing a successful curriculum. A model of cooperative expertise is presented in which faculty maintain responsibility for their own course, creating and evaluating assignments for their students that support learning in their colleagues' courses as well. We present outcomes of an experiment to implement this model at two geographically separated institutions through three courses (two at one institution, one at the other), by faculty in computer science, media and English. Results reported include faculty analysis of student achievement in each course and student surveys of attitudes toward multidisciplinary collaboration. Overall, it appears that student learning and attitudes are enhanced by the experience.	Cooperative expertise for multidisciplinary computing	NA:NA:NA:NA	2018
Kay A. Robbins:David M. Senseman:Priscilla Elizabeth Pate	The accelerating use of computation in all aspects of science continues to widen the gap between student skills and expectations. Currently, computation is taught using one of two approaches: teach students a standard programming language (e.g., FORTRAN, JAVA or C) perhaps augmented by support tools such as Alice or teach them to use a program such as MATLAB by formulating and solving math problems. Both approaches have high failure rates for students hindered by poor mathematics training and weak logic skills. This paper describes an alternative approach that introduces students to computing in the context of data analysis and visualization using MATLAB. Our goal is produce computationally qualified young scientists by teaching a highly relevant computational curriculum early in their college career. The course, which integrates writing, problem-solving, statistics, visual analysis, simulation, and modeling, is designed to produce students with usable data analysis skills. The course is in its third year of implementation and is required of all biology majors at the University of Texas at San Antonio.	Teaching biologists to compute using data visualization	NA:NA:NA	2018
Robert Noonan	NA	Session details: Data structures / CS 2	NA	2018
Andrew T. Duchowski:Robert Geist:Robert Schalkoff:James Westall	The TEXNH method is an approach to undergraduate computer science education that is based on cognitive constructivisim, in the sense of Piaget, and which invokes several course design directives that include re-combining art and science, problem-based learning, problem selection from the visual problem domain, and cognitive apprenticeship. The paper describes a new TEXNH course in data structures. It includes a full comparative assessment of the realized improvement in student problem solving capability and, for the first time, cognitive authenticity in problem selection, in that the course problem is a variation on a very recent research result.	TEXNH trees: a new course in data structures	NA:NA:NA:NA	2018
Scott Turner:Manuel A. Pérez-Quiñones:Stephen Edwards:Joseph Chase	Computer science students need experience with essential concepts and professional activities. Peer review is one way to meet these goals. In this work, we examine the students' attitudes towards and engagement in the peer review process, in early, object-oriented, computer science courses. To do this, we used peer review exercises in two CS2 classes at neighboring universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding exercises), we measured the students' attitudes, their perceptions of their abilities, and how many of the reviews they completed. We found moderately positive attitudes that generally increased over time but were not significantly different between groups. We also saw a lower completion rate for students reviewing peers than for the other groups. The students' internal motivation, as measured by their need for cognition, was not shown to be strongly related to their attitudes nor to the number of assignments completed. Overall, our results show a strong need for external motivation to help engage students in peer reviews.	Student attitudes and motivation for peer review in CS2	NA:NA:NA:NA	2018
Briana B. Morrison:Mike Clancy:Robert McCartney:Brad Richards:Kate Sanders	It is important for students to be able to select and apply the appropriate data structure for the problem to be solved. Testing this knowledge on exams can be difficult, however. We examined 59 data structures final exams and found only 36 that contained questions involving the application of data structures. To promote assessment of this knowledge in the data structures course, we present a framework for classifying apply exam questions, with illustrations from the exams collected. We then show how a number of questions can be developed by varying a single rich apply question along the dimensions of this framework	Applying data structures in exams	NA:NA:NA:NA:NA	2018
Richard A. Brown	NA	Session details: Computer architecture teaching tools	NA	2018
Barry Fagin:Dale Skrien	In this paper, we describe a programmable emulator for the Princeton IAS/Von Neumann machine. The emulator is historically accurate, preserving the quirks and eccentricities of the machine. It is also user-friendly and robust, suitable for undergraduate architecture and programming classes as a teaching tool. Users can write non-trivial programs in IAS assembly code or machine code. We present some examples here, and discuss assignments from its first use in two undergraduate classes. IASSim is a Java application publicly available at no cost.	IASSim: a programmable emulator for the princeton IAS/Von Neumann machine	NA:NA	2018
Michael David Black:Priyadarshini Komala	This paper describes a new graphical computer simulator developed for computer organization students. Unlike other teaching simulators, our simulator faithfully models a complete personal computer, including an i386 processor, physical memory, I/O ports, floppy and hard disks, interrupts, timers, and a serial port. It is capable of running PC software such as FreeDOS, Windows, and Minix, and can run as a Java applet. Graphical user interfaces allow students to view and modify the processor, memory, disks, and hardware devices at runtime. The simulator includes a processor development utility that allows students to design their own datapath and control units, and run their custom processor alongside the x86 processor. The paper describes labs where students use the simulator to write x86 assembly programs, device drivers, hardware controllers; and design both simple and pipelined processors.	A full system x86 simulator for teaching computer organization	NA:NA	2018
Aaron Bloomfield:William Wulf	We present the development and implementation of the Itty Bitty Computing Machine (IBCM), a machine language designed specifically to be taught to lower-level undergraduate students. The presentation of the material takes about one-week of lecture, and allows understanding of all the concepts of machine language without having to deal with the complexity of modern machine language implementations, such as x86 and MIPS. A number of pedagogical aspects are addressed concisely via IBCM, such as treating all data as untyped and performing arithmetic on instructions. While we are not the first to introduce a short machine language module, we do provide a number of benefits over older versions: a modern browser-based implementation, a full set of pedagogical tools, and a decade of experience teaching this module. All of the necessary materials, including compilers, simulators, and documentation, are available online and licensed through Creative Commons licenses.	IBCM: the itty bitty computing machine a one-week module to teach machine language in computing courses	NA:NA	2018
Bin Peng	NA	Session details: Summer experiences	NA	2018
Heidi C. Webb:Mary Beth Rosson	We discuss a study conducted during a summer program for middle school girls that emphasized possible future careers that rely on computer technology. During the weeklong camp middle school girls created an original computer project, visited campus computer labs and listened to invited speakers - all with computer technology as the central theme. This paper discusses the program, girls' reactions to their experiences, and the projects they created during the summer camp.	Exploring careers while learning Alice 3D: a summer camp for middle school girls	NA:NA	2018
Deborah L. Dunn:Robert G. Strader:Michael M. Pickard	As we are well aware, there has been a significant nationwide decline in enrollment for computer science programs, as well as other STEM fields. One of the primary reasons the lack of participation and diversity in the STEM fields is becoming increasingly important is the potentially adverse effect it may have on the U.S. work force. Many successful programs have been put in place to combat this decline. But how do the small regional universities with limited resources and a limited "audience" (with limited resources) contribute to the field? In this paper we will discuss the mechanisms that may be implemented for smaller schools to address the decline in CS enrollment. This includes the ability to put in place programs which could allow more educators to become a part of the solution.	Camps on a shoestring: how we survived a summer	NA:NA:NA	2018
Jiangjiang Liu:Cheng-Hsien Lin:Ethan Philip Hasson:Zebulun David Barnett	In this paper, we describe a one-week summer computing workshop for teachers to improve computer science education in K-12. Our workshop focuses on using Scratch and Alice, two programs used to make simple games and animations, to introduce computing concepts to teachers in computer, technology, math, and science at all K-12 levels to expose students to computing at an early age and to reach more students. During the workshop the teachers developed curriculum materials for the subjects they will teach in the following semesters with the help of our workshop tutors. We present our workshop strategies, lessons learned, and assessment results in this paper.	Introducing computer science to K-12 through a summer computing workshop for teachers	NA:NA:NA:NA	2018
Suzanne Buchele	NA	Session details: Panel	NA	2018
Joel Adams:Brent Baas:Suzanne F. Buchele	The Fulbright Scholar Program is the flagship academic exchange program of the U.S. Department of State that provides the opportunity for U.S. Scholars to teach and/or conduct research at institutions abroad. Every year, approximately 1100 American scholars travel to approximately 125 countries to lecture, conduct research, and participate in a wide variety of academic and professional activities for one or more academic terms, up to one year. The Fulbright Scholar program is open to US Citizens with a Ph.D. or equivalent professional or terminal degree and university teaching experience [1]. In this panel, three computer science professors who have completed a total of five Fulbright grants in the last 12 years offer their experiences, anecdotes, and insights of the Fulbright Scholar program. The goal of the panel is to promote and inform the CS Education community about benefits of the Fulbright Scholar program, address questions or misconceptions regarding the program, and present realistic expectations for both the application process and the program itself. Each of the three panelists will present a 15 minute overview of their Fulbright experiences, leaving ample time for an interactive question and answer period.	CS Fulbright experiences abroad	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Tiffany Barnes:Daniel D. Garcia:Jody Paul:Beth Simon:Larry Snyder	Since 2008, NSF and The College Board, have been developing a "Computer Science: Principles" curriculum to "introduce students to the central ideas of computing and CS, to instill ideas and practices of computational thinking, and to have students engage in activities that show how computing and CS change the world". We report on the initial pilot of the CS Principles curriculum at 5 universities in 2010/11. The instructors from the pilot schools will describe their classes, the piloting experience (teaching under a microscope), and successes and failures. Emphasis will be on: mapping the CS Principles curriculum to a college's specific needs, and how others can use or modify the existing materials for pilots at their schools.	CS principles: piloting a new course at national scale	NA:NA:NA:NA:NA:NA	2018
Amy Csizmar Dalal	NA	Session details: Networks	NA	2018
Dennis Brylow:Kyle Thurow	We present extensions to the Embedded Xinu educational operating system that, when coupled with a target device like the Cisco-Linksys WRT54GL, provide for an extremely attractive hands-on laboratory platform in network courses. We present classroom and research lab evidence for the usefulness of this platform as a network education tool, and discuss its significance in the context of a wide spectrum of competitor systems. This project is part of a larger effort to bring cost-effective, hands-on embedded system laboratory experiences into systems courses throughout the undergraduate computer science core.	Hands-on networking labs with embedded routers	NA:NA	2018
Sami Rollins	The field of wireless sensor networks is growing rapidly and there is increasing interest in providing students with a foundation in the area. Curriculum in the field, however, is fairly limited and most courses reach only advanced graduate students. Undergraduate students typically lack the background, for example in distributed systems and networking, to digest the topics and assignments of a standard wireless sensor networks course. In this work, we present our approach to teaching wireless sensor networks to undergraduates and introductory graduate students. We discuss a unique, integrated approach to introducing relevant distributed systems and networking concepts in the context of wireless sensor networking applications. The course provides students who have never previously implemented a networked application with the necessary background to implement sensing applications on the Java SunSPOT sensor. It also provides a structured introduction to prerequisite concepts, such as distributed coordination algorithms, so that students can read and understand research papers. Our experience suggests that there is ample opportunity to expand curricula in sensor networking and reach a broader population of students.	Introducing networking and distributed systems concepts in an undergraduate-accessible wireless sensor networks course	NA	2018
Jae Woo Lee:Michael S. Kester:Henning Schulzrinne	We present a one-semester transition course intended to bridge the gap between a Java-based introductory sequence and advanced systems courses. We chose to structure our course as a series of lab assignments that, while independent, are also milestones in a single main project, writing a web server from scratch. By anchoring the course on a single real-world application, we were able to provide depth, instill good programming practices, give insight into systems, and generate excitement.	Follow the river and you will find the C	NA:NA:NA	2018
Louis Oliphant	NA	Session details: Relevant computing	NA	2018
Jane Turk	This paper presents an innovative computer literacy course that focuses solely on developing skills needed for life in a networked world in which one must protect oneself from identity theft, be careful posting on social networks, and use credit and debit cards wisely. The course emphasizes ethical responsibility and information literacy. Its target audience, first-year, non-computer science majors, learn what they need to know to use technology safely, effectively, efficiently, and ethically. The course is grounded in active learning, such as posting in a class wiki, and critical thinking. It is a radical alternative to a traditional software packages approach.	Computer literacy as life skills for a web 2.0 world	NA	2018
Cyndi Rader:Doug Hakkarinen:Barbara M. Moskal:Keith Hellman	Prior research indicates that today's students, especially women, are attracted to careers in which they recognize the direct benefit of the field for serving societal needs. Traditional college level computer science courses rarely illustrate the potential benefits of computer science to the broader community. This paper describes a curricula development effort designed to embed humanitarian projects into undergraduate computer science courses. The impact of this program was measured through student self-report instruments. Through this investigation, it was found that students generally preferred projects that they perceived as "fun" over the projects that were social in nature. This may, in part, be due to the fact that it was difficult to reduce socially relevant problems to a level that beginning students could easily comprehend. This made it difficult to capitalize on the appeal of socially relevant problems in the early computer science courses.	Exploring the appeal of socially relevant computing: are students interested in socially relevant problems?	NA:NA:NA:NA	2018
Ryan L. McFall:Matthew DeJongh	The breadth-first approach to teaching introductory computer science is one way of dispelling the common misperception that programming is the sole task of the computer scientist. The breadth-first approach is particularly useful in courses for non-majors. Hands-on activities that make up laboratory assignments for these courses tend to focus on learning to program or simulations of program execution. These activities unfortunately fail to build on the foundations laid by a breadth-first approach, and serve to perpetuate the computer science = programming misperception. We have developed a set of laboratory activities which are based on what we call authentic computing tasks: everyday tasks that students want to know how to accomplish. Example tasks include image editing, operating system installation and configuration, and building home computer networks. Explicit connections are made between these authentic computing tasks and the computer science concepts being covered in the lecture portion of the course. The course has experienced dramatic increases in enrollment, and we have evidence that students see the connections, rather than coming to believe that performing computing tasks well is the essence of computer science.	Increasing engagement and enrollment in breadth-first introductory courses using authentic computing tasks	NA:NA	2018
Mark Goadrich	NA	Session details: Parallelism across the CS curriculum	NA	2018
Thomas R. Gross	There is a debate on when and how to teach parallel programming in the undergraduate curriculum. We try to structure the debate along a number of dimensions and then present the solution that we adopted for an engineering-oriented curriculum. We added an introduction to parallel programming to the list of mandatory classes in the 2nd semester. The class exposes students to three styles of parallel programming: threads with shared memory, CSP-style message passing, and OpenMP-based parallel programming. Within these models, the class aims to focus the student's attention on communication as the key issue in parallel programs. Explicit communication (or their absence) causes correctness problems, implicit communication (e.g., when accessing shared data in different threads) forces the student to understand when updates are globally visible. An introductory class early in the undergraduate curriculum has a number of benefits and disadvantages, which are discussed in this paper. A preliminary evaluation after two editions of this course indicates that the design goals are met but also points to several issues that other institutions may want to consider.	Breadth in depth: a 1st year introduction to parallel programming	NA	2018
Sirong Lin:Deborah Tatar	Parallel thinking is a mindset that allows people to create support for activities that happen concurrently in a program. It crosscuts extant computer science boundaries, including parallel processing, network programming and multi-user systems, indeed, any system that involves the distribution and reintegration of work. Recent efforts to integrate parallelism across the CS curriculum begin to address the support of parallel thinking. We approach the pedagogy of parallel thinking by teaching students to model coordination explicitly using a specialized coordination language. We report a study of an experimental class taking this approach, finding that advanced CS students lack a good understanding of coordination but that the explicit modeling of coordination can address this lack.	Encouraging parallel thinking through explicit coordination modeling	NA:NA	2018
Richard Brown:Elizabeth Shoop	Given the recent emergence of multi-core and distributed computing that is transforming mainstream application areas in industry, demand is rising for teaching more parallelism and concurrency in CS curricula. We argue for teaching these topics incrementally in CS courses at all undergraduate levels, and propose a comprehensive approach involving flexible teaching modules with experiential programming exercises, technical and instructor supplementary materials, and an online community of educators to support adopters and module contributors. Progress on developing these materials and online resources is reported.	Modules in community: injecting more parallelism into computer science curricula	NA:NA	2018
Ping Chen	NA	Session details: K-12 instruction	NA	2018
Diana Franklin:Phillip Conrad:Gerardo Aldana:Sarah Hough	A popular approach to introducing students to computer science is to involve middle-school students in engaging programming activities. One challenge in such a program is attracting students who are not already positively predisposed to computing. In order to attract a diverse audience, we developed a summer program based on culturally-relevant themes that appealed to our two target audiences, females and Latina/os. This paper describes our success in developing and implementing a computing curriculum and recruiting materials for a 2-week summer camp integrating two themes, animal conservation and Mayan culture. Scratch programming was used to engage students in creating animations about animals and Mayan culture, allowing them an interdisciplinary experience that combined programming, culture, biology, art, and storytelling. Our recruiting efforts resulted in an application pool that was 73% female and 67% Latina/o, with only 6.5% in neither group. We had 34 students complete the program. Pre- and post- surveys showed that the number of students citing computer science as their top choice for a career doubled and interest in computer science as a career more than tripled.	Animal tlatoque: attracting middle school students to computing through culturally-relevant themes	NA:NA:NA:NA	2018
Ville Isomöttönen:Antti-Jussi Lakanen:Vesa Lappalainen	Several programming environments have been constructed to facilitate novice programming at K-12 and CS0/CS1 levels. The environments can be roughly divided into those using visual or textual programming. This paper presents a K-12 game programming course concept based on textual programming. The concept is based on an easy-to-use C# library, called Jypeli, built on top of Microsoft XNA Framework. The library tries to maintain advantages of visual programming and avoid challenges of textual programming. In particular, the library helps beginners to program their first games in a short period of time and without a heavy syntactic load. The course concept and an initial evaluation consisting of student feedback and a literature rationale are presented.	K-12 game programming course concept using textual programming	NA:NA:NA	2018
Aman Yadav:Ninger Zhou:Chris Mayfield:Susanne Hambrusch:John T. Korb	As computational thinking becomes a fundamental skill for the 21st century, K-12 teachers should be exposed to computing principles. This paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors. We summarize the results from open-ended and multiple-choice questionnaires given both before and after the module to assess the students' attitudes toward and understanding of computational thinking. The results suggest that given relevant information about computational thinking, education students' attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching.	Introducing computational thinking in education courses	NA:NA:NA:NA:NA	2018
Rajeev Agrawal	NA	Session details: Web-based tools	NA	2018
Paul Denny:Andrew Luxton-Reilly:Ewan Tempero:Jacob Hendrickx	Drill and practice exercises enable students to master skills needed for more sophisticated programming. A barrier to providing such activities is the effort required to set up the programming environment. Testing is an important component to writing good software, but it is difficult to motivate students to write tests. In this paper we describe and evaluate CodeWrite, a web-based tool that provides drill and practice support for Java programming, and for which testing plays a central role in its use. We describe how we have used CodeWrite in a CS1 course, and demonstrate its effectiveness in providing good coverage of the language features presented in the course.	CodeWrite: supporting student-driven practice of java	NA:NA:NA:NA	2018
Jesus Bobadilla:Antonio Hernando:Angel Arroyo	This paper presents the results obtained using a real e-learning recommender system where the collaborative filtering core has been adapted with the aim of weighting the importance of the recommendations in accordance with the users' knowledge. In this way, ratings from users with better knowledge of the given subject will have greater importance over ratings from users with less knowledge. In the same way, we validate the results obtained and we adjust, with just one parameter, the weight that should be awarded, in each specific e-learning recommender system, to the ratings of the users with the best reputation. The results obtained show a notable improvement regarding traditional collaborative filtering methods and suggest balanced weightings between the importance assigned to users with more or less knowledge.	e-learning experience using recommender systems	NA:NA:NA	2018
Daniel Malcolm Hoffman:Ming Lu:Tim Pelton	In Computer Science courses, we ask students to write a lot of code. All too often, the resulting code quality is poor. While it is widely believed that students would write better code if they spent more time reading code, it is difficult to get students to read code effectively. We present a web-based application supporting generation and delivery of quizzes designed to evaluate and improve code reading skills.	A web-based generation and delivery system for active code reading	NA:NA:NA	2018
Ursula Wolz	NA	Session details: Panel	NA	2018
Ursula Wolz:Youwen Ouyang:Scott Leutenegger	As the computing education community grapples with integrating computing into K-12 curriculum, the focus remains primarily on identifying appropriate grade level content and skills[3]. Two problems articulated by Margolis et al.[5], are (1) how to bring computing into an already over-burdened curriculum, (2) how to provide substantive professional development for teachers. We need to look beyond teaching computing concepts as isolated from other disciplines. The power of computing lies in its broad applicability to facilitate creativity in other domains. The panelists will report on using Scratch (http://scratch.mit.edu) in language arts, science and social studies curricula. Our programs demonstrate to middle and high school students and teachers how computational thinking, computing concepts and programming are essential to their course of study. We emphasize active learning where computing is a tool for creativity. We demonstrate how learning 21st century computing skills in the classroom can be fun. This panel will present three perspectives on using Scratch for humane games, scientific modeling and interactive storytelling. There will be significant time for the audience to participate in discussion of broad applicability of our approaches and whether this pedagogy can work at the undergraduate level.	Scratching the subject surface: infusing computing into K-12 curriculum	NA:NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Keith Schwarz:Dave Feinberg:Michelle Craig:Stuart Hansen:Michael Scott:David J. Malan	I worry over topics for the syllabus, fretting over demos and presentations. And yet, I always come back to the fact that most of what my students learn and remember from my course comes from the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and concrete materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Mark Johnson	NA	Session details: Teaching and studying novice programmers	NA	2018
Tammy VanDeGrift:Tamara Caruso:Natalie Hill:Beth Simon	Expertise is developed through both a) self-reflection and b) making useful plans for improvement [3, 10]. Traditional novice-level programming assignments require neither of these skills to be used. Could we get students to think about improving their software development processes? What areas would they identify as needing improvement? Could they write effective plans for themselves? In this experience report, we analyze the results of an intervention with 236 CS1.5 students asking them to do these activities. We find that they most commonly make improvements in planning, compared to coding and testing. Additionally, over half of the plans they make are so vague as to be of little use in helping students identify if they have, in fact, improved. Finally, we asked students at the end of the term to reflect on how their experiences with programming assignments changed over the term. We discuss our results in light of how instructors can focus instruction to help students become more meta-cognitive about their own software development processes.	Experience report: getting novice programmers to THINK about improving their software development process	NA:NA:NA:NA	2018
Guillaume Marceau:Kathi Fisler:Shriram Krishnamurthi	Good error messages are critical for novice programmers. Re-cognizing this, the DrRacket programming environment provides a series of pedagogically-inspired language subsets with error messages customized to each subset. We apply human-factors research methods to explore the effectiveness of these messages. Unlike existing work in this area, we study messages at a fine-grained level by analyzing the edits students make in response to various classes of errors. We present a rubric (which is not language specific) to evaluate student responses, apply it to a course-worth of student lab work, and describe what we have learned about using the rubric effectively. We also discuss some concrete observations on the effectiveness of these messages.	Measuring the effectiveness of error messages designed for novice programmers	NA:NA:NA	2018
Gregory Dyke	We present the preliminary analysis of a study whose long term aim is to track IDE usage to identify novice-programmers in need of support. Our analysis focused on the activity of 24 dyads on a 3 week assignment. We correlated frequencies of events such as use of code generation and of the debugger with assignment grades, final exam grades, and the difference in rankings within dyad on the final exam. Our results show several significant correlations. In particular, code generation and debugging are correlated with the final grade, and running in non-debug mode is correlated with differences in ranking. These results are encouraging as they show that it is possible to predict learning outcomes with simple frequency data and suggest more complex indicators could achieve robust prediction.	Which aspects of novice programmers' usage of an IDE predict learning outcomes	NA	2018
Dermot Shinners-Kennedy:David J. Barnes	We present some ideas for course material for the introductory teaching of programming that are based on the principle of allowing the students to be the domain experts. The idea is that the students' familiarity with the domain of discourse will make course material more motivating, and that it will be more likely that they will be able to model the concepts and artifacts being discussed. This approach thereby seeks to scaffold the students' understanding of programming-related concepts. For reasons discussed in the paper, we have chosen mobile phone technology for this discussion, but there is no reason why the same principles should not be applied to other culturally-accessible domains.	The novice programmer's "device to think with"	NA:NA	2018
Daniel Stevenson	NA	Session details: Communication skills	NA	2018
Lori Carter	Soft skills such as communication, teamwork, and organization are important to students' future success in the working world. Faculty members know it, students know it, and employers are explicitly asking for these skills. Are computer science departments responsible to teach these skills? If so, where in the curriculum should they be covered? This paper explores the soft skills that employers want, and possible places to include the teaching of those skills in the curriculum. It then shows how an extensive set of soft skills were incorporated into a service learning course for the students in the Mathematical, Information and Computer Sciences department at Point Loma Nazarene University. Finally, it makes suggestions as to how other service learning or capstone courses could be altered to afford more opportunity for soft skill education.	Ideas for adding soft skills education to service learning and capstone courses for computer science students	NA	2018
Mary Elizabeth "M.E." Jones:Melanie Kisthardt:Marie A. Cooper	Seizing and retaining student interest in programming is a difficult task. Many students find programming to be a dry and tedious task doable only by students gifted with strong analytical skills. Teaching introductory programming via creative writing begins by connecting the planning, organizing, and detailing of writing a story to the programming process. Creative concepts are taught first and then connected to an equivalent programming concept. Group-oriented activities using art, "Mad-Libs"", "Potato Heads"", and "Legos"" allow students to actively make the connections among the creative concepts, analytical concepts, and programming skills. Students work in pairs. Student pairings are assigned by matching a student with analytical tendencies with a student majoring in one of the humanities disciplines. The pairs apply the concepts and skills by creating stories, designing an animation, and implementing the animation using the Alice programming system. This research recognizes the creative nature of programming, invites students who would not consider studying programming to potentially identify an unrecognized talent, and attempts to develop a new approach for teaching introductory programming. This research and teaching is sponsored by a NSF Grant [11].	Interdisciplinary teaching: introductory programming via creative writing	NA:NA:NA	2018
Sarah Monisha Pulimood:Donna Shaw:Emilie Lounsberry	This paper describes a collaboration between computer science and journalism students and professors at our small, primarily undergraduate college, and a large metropolitan newspaper. Our students' work was a catalyst for a hard-hitting series of investigative stories, with far-reaching consequences. The Gumshoe project is a model for computational journalism at an undergraduate institution. The project demonstrates that when computer scientists and journalists reach out across disciplinary boundaries, computational thinking and collaboration can solve a real problem, and have a substantive impact on society.	Gumshoe: a model for undergraduate computational journalism education	NA:NA:NA	2018
Joe Miró Julià	Being able to write correctly is a valuable asset for future CS professionals and an important learning tool, but teaching to write is difficult both for professors and students. Part of this difficulty is that writing is taught using unverifiable concepts such as style, and is significantly based on intuition. In this paper we present an engineering approach to writing, in which engineering principles are used to teach and assess writing. The results are as good, and much better in some cases, and teaching and learning become easier.	An engineering approach to teaching writing.	NA	2018
Sherri Goings	NA	Session details: Teacher endorsement and preparation	NA	2018
Tim Bell:Lynn Lambert	This paper describes the design, implementation, and evaluation of a course teaching Computer Science majors about teaching Computer Science. The course was designed to address the need for teachers and resources to support rapid changes in topics being taught in high schools. It also helped prepare students for research in Computer Science Education, and for careers involving computing and education. The course is described in detail, and is evaluated based on student feedback and the outcomes from the course.	Teaching computer science majors about teaching computer science	NA:NA	2018
Christopher Whitehead:Lydia Ray:Shamim Khan:Wayne Summers:Rodrigo Obando	Computer Science and technology have been driving scientific innovations, expanding the Information Technology sector and increasing productivity in all economic sectors for the last few decades, thus contributing significantly to the economic output of the U.S. Each sector of this country, ranging from national security to everyday life, is enormously impacted by computing technology. Clearly, future economic growth and prosperity of this country heavily rely on the strength and skills of the IT and computing workforce that will be able to expand and maintain the nationwide IT infrastructure. Unfortunately, the decline in students interested in Computer Science over the last several decades may threaten the United States' capability to expand and maintain the nationwide IT infrastructure. One solution that may slow and possibly even reverse this decline is to increase the awareness of Computer Science in the secondary school system and to increase the knowledge of Computer Science, the ability to teach Computer Science, and the Computer Science professionalism of teachers in that system. In this paper, the authors describe one technique for realizing this solution-implementing a Computer Science endorsement program for secondary school teachers.	Implementing a computer science endorsement program for secondary school teachers	NA:NA:NA:NA:NA	2018
Lijun Ni:Mark Guzdial:Allison Elliott Tew:Briana Morrison:Ria Galanos	In this paper, we describe our experience in supporting high school CS teachers by building a local community through the Disciplinary Commons for Computing Educators (DCCE) project. The DCCE project is an effort to explore ways of supporting these CS teachers through the creation of a local community and by promoting teacher reflection. DCCE achieved this goal through an academic-year-long program where a cohort of CS teachers engaged in collaborative portfolio creation and peer observation of classroom teaching. We describe the design of the DCCE activities and present preliminary results from initial evaluations. Our short-term evaluations indicate that this project was successful in creating a supportive community, promoting teacher reflection, and advancing change in teaching practices among a group of computing educators.	Building a community to support HS CS teachers: the disciplinary commons for computing educators	NA:NA:NA:NA:NA	2018
Noa Ragonis:Orit Hazzan:Judith Gal-Ezer	This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are two of the main educational and pedagogical challenges faced by those involved in CS education. Specifically, the paper presents the second stage of a study, the first stage of which focused on the accumulative knowledge gained in Israel over the past twenty years on CS teacher preparation. The first stage of the study, presented in SIGCSE 2010, emphasized the obvious: CS deserves designated CS teacher preparation programs. The second stage of the study, presented in this paper, is based on a deeper analysis of the data gathered in the first stage. Specifically, we approached a wider community of CS teacher educators (from Israel, Europe, and the USA) and explored its perspective on one element of teacher preparation programs - the Methods of Teaching CS (MTCS) course. The conclusions from this stage can be viewed as a comprehensive framework for the design of an MTCS course, both in terms of topics to be included in the course as well as the relative weight (in time) that is to be dedicated to each topic.	A study on attitudes and emphases in computer science teacher preparation	NA:NA:NA	2018
Chun Liew	NA	Session details: Expanding the community	NA	2018
Carol Frieze	In this paper we describe a new "research and action" based course designed to give undergraduate students the opportunity to think beyond the classroom, to reach out and examine some of the broader issues surrounding computing. "Understanding and Broadening the Images of Computing" researches the images, the realities and the (mis)perceptions of computing that influence public understanding and participation in the field. Along with research students are encouraged to see themselves as future professionals who can be actively involved in re-shaping and re-presenting the field. To this purpose, students build an action component working in teams to develop and implement a public presentation aimed at broadening understanding of computing.	The images of computing: engaging undergraduates in the broad issues of computer science	NA	2018
Andreas M. Stefik:Christopher Hundhausen:Derrick Smith	The blind and visually impaired community is significantly underrepresented in computer science. Students who wish to enter the discipline must overcome significant technological and educational barriers to succeed. In an attempt to help this population, we are engaged in a three-year research project to build an educational infrastructure for blind and visually impaired middle and high school students. Our primary research goal is to begin forging a multi-sensory educational infrastructure for the blind across the United States. We present here two preliminary results from this research: 1) a new auditory programming environment called Sodbeans, a programming language called Hop, and a multi-sensory (sound and touch) curriculum, and 2) an empirical study of our first summer workshop with the blind students. Results show that students reported a significant increase in programming self-efficacy after participating in our camp.	On the design of an educational infrastructure for the blind and visually impaired in computer science	NA:NA:NA	2018
Yonina Cooper:M. Bernardine Dias:Ermine A. Teves:Sarah Belousov:M. Freddie Freddie Dias	While the needs and applications for computing technology have been growing, the enrollment and interest in Computer Science (CS) at the university level has not been growing in proportion. Moreover, the increasing prevalence of globalization requires a new set of skills for future technology leaders. These skills include the ability to work well in multidisciplinary and globally distributed teams, cross cultural boundaries with ease, create innovative solutions for problems that arise in unfamiliar settings, and think outside the box to solve a variety of problems while building effectively upon related work in the literature. These changes are also reflected in the growing interest among youth in global issues and how we can make a difference in underserved communities. This paper reports on our experience in designing and deploying an innovative internship that addresses these issues and seeks to enhance participation and education in CS through guided research projects in underserved communities.	Enhancing participation and education in CS through guided research projects in underserved communities	NA:NA:NA:NA:NA	2018
Rebekah Overdorf:Matthew Lang	Creating programs that engage undergraduate women with the broader community and encourage them to take an active role in changing the underrepresentation of women in computer science can effectively address both retention and recruitment of women in the discipline. This paper is an experience report describing the creation and outcomes of an outreach program for K-12 girls run entirely by undergraduate women. The contributions of this paper are the description of the creation of a successful student-led outreach program and a set of active-learning modules for K-12 students that illustrate advanced topics.	Reaching out to aid in retention: empowering undergraduate women	NA:NA	2018
Kent Lee	NA	Session details: Mobile computing	NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz:Joel Hollingsworth	Many schools have introduced, or are considering, a programming course targeting mobile devices to satisfy student interest in programming smart phones. In addition, a new class of mobile devices are appearing that combine the functionality of an eBook reader with a web browser, and many of them are based on the same programming frameworks as the smart phones. We report on the successes of mobile device programming courses at two schools. In addition, we report on the accomplishments of students developing software to leverage these newer, multi-function devices in supporting broader computer science education initiatives. In particular, we have developed a service-oriented application that allows students to compile and test programs written in Java and C++ that can be invoked from these devices. We have developed other software allowing these devices to function like Tablet PCs. After describing these important tools, we discuss our current efforts to use these mobile devices in computer science education.	Teaching mobile computing and developing software to support computer science education	NA:NA:NA	2018
Susan Loveland	Recently, several frameworks have been developed for writing mobile and web applications in Java, making the development of web and mobile applications accessible to HCI students with only a CS1 Java background. In this paper we describe using student projects based on the Google Android mobile platform and Google's Web Toolkit to provide students with experience designing and implementing user interfaces for mobile and web applications. Specific examples demonstrate how programming on these platforms reinforces standard HCI topics. As a result of being able to learn mobile device programming in the context of "cool" Google platforms, students expressed increased interest in studying HCI.	Human computer interaction that reaches beyond desktop applications	NA	2018
David Wolber	App Inventor is a visual "blocks" language for creating mobile apps. As part of a Google pilot program, App Inventor was taught to university students in a core curriculum course at the University of San Francisco. This paper introduces App Inventor and the course, focusing on how the language facilitated interactions with the world outside of the classroom.	App inventor and real-world motivation	NA	2018
Mark H. Goadrich:Michael P. Rogers	In a remarkably short timeframe, developing apps for smartphones has gone from an arcane curiosity to an essential skill set. Employers are scrambling to find developers capable of transforming their ideas into apps. Educators interested in filling that void are likewise trying to keep up, and face difficult decisions in designing a meaningful course. There are a plethora of development platforms, but two stand out because of their popularity and divergent approaches - Apple's iOS, and Google's Android. In this paper, we will compare the two, and address the question: which should faculty teach?	Smart smartphone development: iOS versus android	NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Michele Friend Hutton:Eugene Lemon:Josh Paley	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes [7]. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing [4]. This led to a series of room-packed sessions at the following three SIGCSE symposia to explore that idea from different perspectives [8, 9, 12]. They have provided a forum for sharing: " What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. - What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. - How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over [10, 13]. Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field [2]. Also, recent news of limited hiring in the information technology sector could have a damping affect [11]. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). This year, we've shifted from that "breadth-first" model to a "depth-first" one, and have invited three K-12 teachers who, collectively, have taught computing at an all-girls middle school, an under-served high school, and an affluent high school. The hope with this panel is to be able to drill down and understand the K-12 space, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 4	NA:NA:NA:NA	2018
Susan Rodger	NA	Session details: Special session	NA	2018
Susan H. Rodger:Mark Stehlik:Chris Stephenson:Cameron Wilson	NA	Progress in surfacing computer science in STEM	NA:NA:NA:NA	2018
Sushil K. Prasad	NA	Session details: Special session	NA	2018
Sushil K. Prasad:Almadena Chtchelkanova:Sajal Das:Frank Dehne:Mohamed Gouda:Anshul Gupta:Joseph Jaja:Krishna Kant:Anita La Salle:Richard LeBlanc:Manish Lumsdaine:David Padua:Manish Parashar:Viktor Prasanna:Yves Robert:Arnold Rosenberg:Sartaj Sahni:Behrooz Shirazi:Alan Sussman:Charles Weems:Jie Wu	NA	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Samuel Rebelsky	NA	Session details: Intro CS: panoptic views	NA	2018
Peter Drake:Kelvin Sung	Games assignments are increasingly popular in computer science education. This paper advocates and analyzes the inclusion of board, card, and dice games as programming assignments in introductory programming courses (CS1/2). The simple interface and strategy-based play of these types of games complement the immersive multimedia and agility-based play of video games. The implementation of board, card, and dice games typically demands less background knowledge from the instructor and offers fewer opportunities for extraneous work by the students. The paper lists 32 specific games that are suitable for teaching the major topics in CS1/2 and discusses the implementation of some of these games and their successful use as programming projects.	Teaching introductory programming with popular board games	NA:NA	2018
Stephen Davies:Jennifer A. Polack-Wahl:Karen Anewalt	We present results from a nationwide survey of undergraduate computer science departments regarding languages and techniques taught in CS0, CS1, and CS2. This snapshot of 371 schools provides an intriguing look into the state of computing education today in the U.S., quantifying which practices are actually in common use. Among other things, the study reveals the great variety in CS0 approaches, the relative uniformity of CS1 and CS2 approaches, the dominance of Java as a language for the introductory major sequence, and the tendency for departments to teach CS1 and CS2 in a consistent manner, rather than exposing students to different ideas in each.	A snapshot of current practices in teaching the introductory programming sequence	NA:NA:NA	2018
Andrew Petersen:Michelle Craig:Daniel Zingaro	Many factors have been cited for poor performance of students in CS1. To investigate how assessment mechanisms may impact student performance, nine experienced CS1 instructors reviewed final examinations from a variety of North American institutions. The majority of the exams reviewed were composed predominantly of high-value, integrative code-writing questions, and the reviewers regularly underestimated the number of CS1 concepts required to answer these questions. An evaluation of the content and cognitive requirements of individual questions suggests that in order to succeed, students must internalize a large amount of CS1 content. This emphasizes the need for focused assessment techniques to provide students with the opportunity to demonstrate their knowledge.	Reviewing CS1 exam question content	NA:NA:NA	2018
Sandro Pedrazzini	NA	Session details: Software design and development	NA	2018
Daniel Rocco:Will Lloyd	Modern distributed version control systems offer compelling advantages for teaching students professional software development practices and skills. In this paper, we explore the potential for incorporating Mercurial into introductory, intermediate, and advanced computing courses. By incorporating version control into the entire CS curriculum, instructors create unique opportunities to engage students in collaborative, real-world projects and activities, giving them critical early exposure to the expectations and assumptions prevalent in the software development community. Early introduction to version control provides students with an important foundation in both personal and collaborative development excellence, offering them a competitive edge in the marketplace and a superior understanding of software development best practice.	Distributed version control in the classroom	NA:NA	2018
Jason Snyder:Stephen H. Edwards:Manuel A. Pérez-Quiñones	The Library for Interface Testing (LIFT) supports writing unit tests for Java applications with graphical user interfaces (GUIs). Current frameworks for GUI testing provide the necessary tools, but are complicated and difficult to use for beginners, often requiring a significant amount of time to learn. LIFT takes the approach that unit testing GUIs should be no different than testing any other type of code. By providing a set of frequently used filters for identifying GUI components and a set of operations for acting on those components, LIFT lets programmers quickly and easily test their GUI applications.	LIFT: taking GUI unit testing to new heights	NA:NA:NA	2018
Katherine Cennamo:Sarah A. Douglas:Mitzi Vernon:Carol Brandt:Brigitte Scott:Yolanda Reimer:Margarita McGrath	Revolutionary advances in technologies will require computer science professionals who are able to develop innovative software solutions. In order to identify techniques that can lead students to creative insights in their work, we have conducted an ethnographic study of the studio method as enacted in architecture, industrial design (ID), and human-computer interaction (HCI) classes. Our analysis of the activities conducted during studio critiques revealed that while the ID and architecture studios had a primary focus on experimentation, the primary emphasis of the HCI studios was on idea refinement. In this paper, we describe four barriers to creative thought observed in the HCI classrooms and identify ways that the architecture and ID instructors helped students to overcome similar challenges.	Promoting creativity in the computer science design studio	NA:NA:NA:NA:NA:NA:NA	2018
Matthew Jadud	NA	Session details: Cooperative learning	NA	2018
Alex D. Radermacher:Gursimran S. Walia	Pair programming is a programming technique where two programmers work together on the same programming task. Previous research has shown that it is effective for improving the learning effectiveness, efficiency, and enjoyment of students in introductory programming courses. Much research has also been dedicated to determining effective strategies for forming pairs. This paper discuss two different empirical studies conducted at North Dakota State University to a) test the feasibility of using pair programming in introductory computer science courses and b) determine whether or not major-based pairing produces effective pairs. The results of these studies provide support for implementing pair programming in introductory computer science courses and show that pairing of computer science and non-computer science students may produce pairs which are less compatible than other pairing methods.	Investigating the effective implementation of pair programming: an empirical investigation	NA:NA	2018
Steven Robbins	ClassQue is a classroom response system that goes beyond clickers to allow a wide selection of classroom interactions: teacher to individual student, teacher to all students, student to teacher and student to student. Questions are not restricted to multiple choice, and multiple questions can be pending at one time. One student can anonymously comment on another student's answer. After the class, students and teachers can receive reports of the classroom interactions. The current version of ClassQue is available for use in an environment in which each student is seated at a computer.	Beyond clickers: using ClassQue for multidimensional electronic classroom interaction	NA	2018
Shiri Azenkot:Theodore Golfinopoulos:Adam Marcus:Alessondra Springmann:Jonathan S. Varsanik	The Middle East Education Through Technology (MEET) program is a non-profit organization based in Jerusalem, that aims to empower future Israeli and Palestinian leaders by teaching them computer science and business. From the perspective of MEET's instructors, this paper describes how MEET uses computer science education to foster professional and personal contact among Israeli and Palestinian high school students, two groups who otherwise would have little or no interaction with each other. MEET's primary method of overcoming the barrier is teamwork: students are divided into groups that include both Israelis and Palestinians and are assigned software engineering tasks. We believe that the techniques used by MEET can serve as examples for other computer science programs that overcome barriers between groups in the United States and other countries.	Overcoming barriers among Israeli and Palestinian students via computer science	NA:NA:NA:NA:NA	2018
Paige Meeker	NA	Session details: Researching and evaluating teachers	NA	2018
Beth Simon:Elizabeth Bales:William G. Griswold:Stephen Cooper	Part of computer science education research focuses on the design of new technologies and techniques for improving educational experiences. However, for these systems and techniques to be truly impactful, their use must be disseminated to the larger instructor population. Single-instance workshops, where instructors are brought together to learn about a new technique or system so that they can possibly adopt it, are a common dissemination method. Unfortunately, rarely do we see reports regarding their effectiveness. In this case study, we report on two NSF-funded single-instance workshops designed to support adoption of the Ubiquitous Presenter (UP) active learning classroom presentation system. Though only 44% of workshop attendees used the system in their classrooms, 65% of those used the system repeatedly. Overall this impacted 1570 students. Additionally, 60% of our attendees used the active learning features of UP - a much higher usage rate than in the general UP user population. We reflect on the aspects of the workshops which seemed to promote, and hinder, instructor adoption and, finally, suggest some metrics for evaluating innovation dissemination workshops in general.	Case study: faculty professional development workshops for innovation diffusion	NA:NA:NA:NA	2018
Joshua T. Guerin:Daniel Michler	Undergraduate teaching evaluations are widely believed to be biased. We analyzed the evaluations from our department for all classes from 2000 through 2008, looking for specific biases. We looked for correlations between evaluation numbers and whether the course was required; how much time students spent on the course; student classification (freshman, sophomore, etc.), and expected grades. While all of these show correlations with teaching evaluation responses, the effect of each factor is not consistent over all questions and varied strongly depending on the evaluation question and the course level.	Analysis of undergraduate teaching evaluations in computer science	NA:NA	2018
Davide Fossati:Mark Guzdial	This paper explores the issue of what kind of evidence triggers changes in the teaching practice of Computer Science educators, and how educators evaluate the effectiveness of those changes. We interviewed 14 Computer Science instructors from three different institutions. Our study indicates that changes are mostly initiated from instructors' intuition, informal discussion with students, and anecdotal evidence.	The use of evidence in the change making process of computer science educators	NA:NA	2018
Thomas Cortina	NA	Session details: Keynote	NA	2018
