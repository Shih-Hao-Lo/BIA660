Gail Chapman	In January 2016, President Obama unveiled the CS for All initiative. With all the attention and publicity surrounding CS for All and increased support from a variety of corners over the ensuing year, it is easy to become complacent and start believing that we have "arrived". During her 2016 SIGCSE keynote, Jan Cuny talked about catching the wave and using it to our advantage. This talk will focus on where we go from here. We caught the wave; now what do we do to ensure that we don't get swallowed by it? What lessons can be learned from an election that featured the likes of fake news, Wiki leaks, rogue email servers, runaway tweets and showed in stark relief the divides that exist in our country. Computer science represents one of those divides. Given this and the fact that addressing the educational inequities prevalent in computer science was front and center in the CS for All announcement, what better time is there to renew our commitment to broadening participation in computing? As educators we have a powerful opportunity and responsibility in the wake of the blowback from the election-to educate, to listen, to remind ourselves constantly that we live in a very diverse country. We have no shortage of innovation in computer science, but who are we inspiring, what impact are those innovations having, and what can we do to learn from the lessons of the past to improve CS education? And above all, how do we respond to the challenges before us with empathy for those who are impacted by the decisions we make?	Inspire, Innovate, Improve!: What does this mean for CS for All?	NA	2017
Mats Daniels	I'm going to address the educator identity from two perspectives. The first is my own perspective, where I will present what my educator identity means to me and what this has led me to devote time and energy on. My vision is that I want to be part of creating learning environments that benefit both the learner as an individual and society in general from many dimensions and purposes. As an educator I want to support our students on a route to become able and conscious graduates who will have a positive impact and be seen as truly professionally competent wherever their career takes them. This sounds hunky-dory, but how can it be achieved? I don't think there are any silver bullets that will lead to such a setting, but I do believe that knowing more is a way forward. Having no clear way forward was frustrating and this is where involvement in educator communities, like the SIGCSE community, became essential. Giving time and effort to such communities is, in my opinion, rewarding itself manyfold, not least, in my case, for aiding to understand the issues and opportunities involved in pursuing my vision. Developing my identity as educator through being part of the SIGCSE community, with its abundance of role models, has been invaluable for me. I hope my work will be an inspiration for others. Computing and engineering education research is the other big part in my strive for fulfilling my educator dreams. Or should I say pipe dreams as in the title of my thesis "Developing and Assessing Professional Competencies: a Pipe Dream? Experiences from an Open-Ended Group Project Learning Environment", which I defended on the day thirty years after I enrolled as a PhD student? No, I don't see it as a pipe dream even though there are much more to look into and understand regarding education in our field. This research area is the second perspective I want to bring up regarding educator identity, and I will use the research lens to look at the impact we as educators have on our students. My focus will be on the influence educators have on students learning with regard to aspects beyond pure computing skills. I will in the presentation build on work in our research group (UpCERG), which lately has included studying issues related to identity, both students and educators. I especially want to draw attention to the potential impact we as educators have on the "gap" between graduating truly professionally competent persons and merely technically competent persons.	The Educator Identity and its Impact	NA	2017
Mitchel Resnick	Fifty years ago, Seymour Papert and colleagues developed Logo as the first programming language for children. Today, millions of children are participating in learn-to-code initiatives, but Papert's dream remains unfulfilled. Papert (who passed away last summer) saw programming not as a set of technical skills but as a new form of fluency - a new way for all children to explore, experiment, and express themselves. In this presentation, I will examine strategies for fulfilling Papert's dream. Drawing on examples from our Scratch online coding community, I will discuss how we can design programming environments and activities to help all children, from all backgrounds, to develop their thinking, develop their voices, and develop their identities.	Fulfilling Papert's Dream: Computational Fluency for All	NA	2017
Jeannette Wing	Sources of uncertainty abound. Noisy sensor data. Machine learning methods. Hardware and software failures. The physical world. Human behavior. In the past, computer science handled uncertainty by abstracting it away or avoiding it. In the future, instead, computer science needs to embrace uncertainty as a first-class entity. How do we represent uncertainty in our computational models? Probabilities. Thus, we need to make sure that every computer science student learns probability and statistics. Data science, where data drives discovery and decision-making in all fields of study, underscores the importance of having a command of probability and statistics. At the heart of data science is data analytics whose methods such as machine learning rely on probabilistic and statistical reasoning. And since data serve as the currency of any data analytics workflow, explicit representation of probability distributions can help us calculate the degrees of uncertainty throughout a flow. Programming and software engineering courses will need to elevate the status of such data flows to that given to algorithms, data structures, and modular design. In this talk I will discuss the implications of embracing uncertainty on undergraduate computer science curricula.	Embracing Uncertainty	NA	2017
Ashish Aggarwal:Christina Gardner-McCune:David S. Touretzky	Researchers and educators have designed curricula and resources for introductory programming environments such as Scratch, App Inventor, and Kodu to foster computational thinking in K-12. This paper is an empirical study of the effectiveness and usefulness of tiles and flashcards developed for Microsoft Kodu Game Lab to support students in learning how to program and develop games. In particular, we investigated the impact of physical manipulatives on 3rd -- 5th grade students' ability to understand, recognize, construct, and use game programming design patterns. We found that the students who used physical manipulatives performed well in rule construction, whereas the students who engaged more with the rule editor of the programming environment had better mental simulation of the rules and understanding of the concepts.	Evaluating the Effect of Using Physical Manipulatives to Foster Computational Thinking in Elementary School	NA:NA:NA	2017
Basma S. Alqadi:Jonathan I. Maletic	Students taking introductory computer science courses often have difficulty with the debugging process. This work investigates a number of different logical errors that novice programmers encounter and the associated debugging behaviors. Data is collected and analyzed data in two different experiments from 142 subjects. The results show some errors are more difficult than others. Different types of bugs and novices' debugging behaviors are identified. Years of experience showed a significant role in the process of debugging in terms of correctness level and time required for debugging	An Empirical Study of Debugging Patterns Among Novices Programmers	NA:NA	2017
Christine Alvarado:Mia Minnes:Leo Porter	As class-sizes grow in computer science, the personal attention received by students tends to diminish. This work aims to replicate small-class community effects within a large class by creating "micro-classes"---small groups within the large class. These micro-classes consist of 20--30 students led by graduate teaching assistants and undergraduate tutors who are specifically trained in small-classroom instructional techniques. This paper studies the outcomes of the micro-classes framework in an upper-division data structures course and compares them to outcomes from the same class taught in a large lecture, active-learning format. Students report increased satisfaction and a higher perception of community in the micro-classes section, though there was no discernible difference in student academic performance.	Micro-Classes: A Structure for Improving Student Experience in Large Classes	NA:NA:NA	2017
Christine Alvarado:Yingjun Cao:Mia Minnes	This paper presents results of a large-scale survey of students' experiences in CS classes at two institutions: a small liberal arts college and a large research-focused university. Our work provides a fine-grained view of students' feelings and behaviors in CS classes, from introductory through to upper division courses. We find significant differences between the reported behaviors and feelings of female students compared to male students: female students are less comfortable asking questions in class and interacting with their instructor, and come out of a class with lower confidence in their ability to tutor for the class, despite the fact that they perform just as well as male students. Furthermore, we find some of these differences are consistent or increase across course levels, and could potentially affect students' post-college trajectories. Focusing attention on the student experience in more advanced classes may impact gender differences seen in the transition to the CS workforce.	Gender Differences in Students' Behaviors in CS Classes throughout the CS Major	NA:NA:NA	2017
Karen Anewalt:Jennifer Polack	Good oral communication skills are essential for success in the workplace. Burge [3] recently highlighted the need to create a curriculum-wide program emphasizing communication skills. We have implemented a curriculum that provides communication skills instruction and practice at each level of the computer science major. Here we present a description of the coursework emphasizing formal presentation and small group communication skills. We also share findings from a survey of alumni showing their perception of communication preparation. Even in our program that provides significant opportunities for communication skill development, the majority of alumni felt that additional instruction should be integrated into the major curriculum.	A Curriculum Model Featuring Oral Communication Instruction and Practice	NA:NA	2017
Vaibhav Anu:Gursimran Walia:Gary Bradshaw	In spite of the human-centric aspect of software engineering (SE) discipline, human error knowledge has been ignored by SE educators as it is often thought of as something that belongs in the realm of Psychology. SE curriculum is also severely devoid of educational content on human errors, while other human-centric disciplines (aviation, medicine, process control) have developed human error training and other interventions. To evaluate the feasibility of using such interventions to teach students about human errors in SE, this paper describes an exploratory study to evaluate whether requirements inspections driven by human errors can be used to deliver both requirements validation knowledge (a key industry skill) and human error knowledge to students. The results suggest that human error based inspections can enhance the fault detection abilities of students, a primary learning outcome of inspection exercises conducted in software engineering courses. Additionally, results showed that students found human error information useful for understanding the underlying causes of requirement faults.	Incorporating Human Error Education into Software Engineering Courses via Error-based Inspections	NA:NA:NA	2017
Alice Armstrong	This paper discusses the content and impact of a new first-year experience (FYE) course for at-risk students in the Computer Science and Engineering department at Shippensburg University, a mid-sized teaching university. The initial results from the new course are quite promising: DFW rates (grade of D, grade of F, and withdrawal) for the first and second semesters were cut in half and retention rates were dramatically improved.	Successful First-Year Experience for At-Risk Students	NA	2017
Monica Babes-Vroman:Isabel Juniewicz:Bruno Lucarelli:Nicole Fox:Thu Nguyen:Andrew Tjang:Georgiana Haldeman:Ashni Mehta:Risham Chokshi	With the number of Computer Science (CS) jobs on the rise, there is a greater need for Computer Science graduates than ever. At the same time, most CS departments across the country are only seeing 25-30% of female students in their classes, meaning that we are failing to draw interest from a large portion of the population. In this work, we explore the gender gap in CS at Rutgers University using three data sets that span thousands of students across 3.5 academic years. By combining these data sets, we can explore interesting issues such as retention, as students progress through the CS major. For example, we find that a large percentage of women taking the Introductory CS1 course for majors do not intend to major in CS, which contributes to a large increase in the gender gap immediately after CS1. This finding implies that a large part of the retention task is attracting these women to further explore the major. We correlate our findings with initiatives that some CS programs across the country have taken to significantly improve their gender diversity, and identify initiatives that we can start with in our effort to increase the diversity in our program. These findings may also be applicable to the computing programs at other large public research universities.	Exploring Gender Diversity in CS at a Large Public R1 Research University	NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Austin Cory Bart:Ryan Whitcomb:Dennis Kafura:Clifford A. Shaffer:Eli Tilevich	To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits.	Computing with CORGIS: Diverse, Real-world Datasets for Introductory Computing	NA:NA:NA:NA:NA	2017
Ashok Basawapatna:Alexander Repenning	Online CS Ed Week and Hour of Code activities attempt to motivate hundreds of millions of student participants across the world in computer science each year. A key goal of these endeavors is long-term student engagement. However, if the activity experience is bad, it could have effects adverse to the stated goal. Thus, it is imperative upon designers to actively improve the online activity ensuring the maximum numbers of students are retained throughout the exercise. We present a simple proof of concept method outlining a means for Computer Science Education Week and Hour of Code online activities to identify and improve hazardous points wherein students tend to drop out. This is achieved by finding so called flow stoppers in activity retention that diverge from an ideal theoretical Markov chain model, and scaffolding the activity at that point to better support participants. Initial data presented indicates that even minor changes can have a significant effect on keeping a greater number of students engaged.	Employing Retention of Flow to Improve Online Tutorials	NA:NA	2017
Jennifer M. Blaney:Jane G. Stout	Computing self-efficacy and sense of belonging are known predictors of motivation and persistence. As such, these psychological states are important to study in order to broaden participation in computing. This study examined the relationship between (a) introductory computing course experiences and (b) self-efficacy and sense of belonging in computing, focusing on differences by gender and college generation status. We found that the relationship between some introductory course experiences and self-efficacy and sense of belonging was strongest among first-generation college women, which reveals the importance of considering women's experiences in light of their additional intersectional identities. Recommendations for best practices in introductory computing courses are discussed.	Examining the Relationship Between Introductory Computing Course Experiences, Self-Efficacy, and Belonging Among First-Generation College Women	NA:NA	2017
Matthew Boutell	The face-to-face interaction in a traditional classroom on campus provides many benefits to students: the ability to ask questions and get immediate feedback, external motivation from the instructor and peers to succeed, the joy of interaction, and the ability to work face-to-face with classmates on projects. Meanwhile, video-based, online instruction offers several different benefits: convenience for students due to flexibility in time and place of learning, ease of reviewing materials for mastery, and the ability to work at one's own pace. When given the choice between these two formats, which do students choose? Students enrolled in an upper-level mobile app development course could opt to attend class with face-to-face instruction, to watch videos of the instructor, or to switch between the two formats as they saw fit. Students were given pre- and post-surveys asking them which format they preferred and why. Results indicate that slightly more than half of the students chose the video-based option and that students chose as they did for expected reasons, such as wanting to ask questions in class or wanting the flexibility to watch and re-watch video on demand. More interestingly, results also indicated that students who chose video did not suffer from the dropout and failure rates so commonly reported in the literature, that learning was equally effective using both formats, and that students' expectations of which format they would use were quite different from what they ended up using. However, with a small sample size at one institution, local factors, like scheduling the course during lunchtime, also played a role in students' choices.	Choosing Face-to-face or Video-based Instruction in a Mobile App Development Course	NA	2017
Brian Broll:Akos Lédeczi:Peter Volgyesi:Janos Sallai:Miklos Maroti:Alexia Carrillo:Stephanie L. Weeden-Wright:Chris Vanags:Joshua D. Swartz:Melvin Lu	This paper introduces NetsBlox, a visual programming environment for learning distributed programming principles. Extending both the visual formalism and open source code base of Snap!, NetsBlox provides two accessible distributed programming abstractions to simplify the process of creating networked applications: message passing and Remote Procedure Calls (RPC). Messaging passing allows NetsBlox applications to send data to other connected NetsBlox clients. Remote Procedure Calls enable seamless integration of third party services, such as Google Maps, weather, traffic and other public domain data sources, into NetsBlox applications. Other RPCs help coordinating distributed clients which may be difficult for novice programmers allowing the user to more quickly create captivating and sophisticated applications. These abstractions empower users to develop networked programs, including multi-player games and client-server applications. By providing networking support, NetsBlox not only allows users to learn distribute programming concepts but also makes programming more engaging by incorporating diverse services available on the web.	A Visual Programming Environment for Learning Distributed Programming	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Erik Brunvand:Nina McCurdy	We describe our experience designing and delivering a general education technological fluency course that frames the discussion of computer science and engineering technology (electronics and programming) in the context of sound-art: art that uses sound as its medium. This course is aimed at undergraduate students from a wide variety of backgrounds and is designed to fit into the ``Intellectual Explorations'' area of a general undergraduate program. The goal is to introduce computer engineering and computational principles to non-CS students through an exploration of sound-art, experimental and electronic music, noise-making circuits, hardware hacking, and circuit bending.	Making Noise: Using Sound-Art to Explore Technological Fluency	NA:NA	2017
Zack Butler:Ivona Bezakova:Kimberly Fluet	The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment.	Pencil Puzzles for Introductory Computer Science: an Experience- and Gender-Neutral Context	NA:NA:NA	2017
Yingjun Cao:Leo Porter	Collaborative group exams, including two-stage exams, have received increased attention in other disciplines after studies have shown their value for student learning. In computer science, prior work has shown students may value two-stage exams, but their impact on student learning in computing is unknown. In this randomized, crossover study, student learning on four topics during two-stage midterm exams is examined. Specifically, students are randomly selected to answer questions on a topic either working in groups or individually during the exam. On a quiz two weeks later, those who worked in groups statistically significantly outperform those who worked individually. The metric of performance comparison is normalized learning gain. These are short term gains, however, as the benefit is no longer apparent by the final exam. This is the first study to use controlled experiments to examine the value of the group stage of two-stage exams in computing.	Evaluating Student Learning from Collaborative Group Tests in Introductory Computing	NA:NA	2017
Adam Scott Carter:Christopher David Hundhausen	Analyzing the process data of students as they complete programming assignments has the potential to provide computing educators with insights into their students and the processes by which they learn to program. In prior work, we developed a statistical model that accurately predicts students' homework grades. In this paper, we investigate the relationship between the paths that students take through the programming states on which our statistical model is based, and their overall course achievement. Examining the frequency of the most common transition paths revealed significant differences between students who earned A's, B's, and C's in a CS 2 course. Our results indicate that a) students of differing achievement levels approach programming tasks differently, and b) these differences can be automatically detected, opening up the possibility that they could be leveraged for pedagogical gain.	Using Programming Process Data to Detect Differences in Students' Patterns of Programming	NA:NA	2017
Karo Castro-Wunsch:Alireza Ahadi:Andrew Petersen	Course instructors need to be able to identify students in need of assistance as early in the course as possible. Recent work has suggested that machine learning approaches applied to snapshots of small programming exercises may be an effective solution to this problem. However, these results have been obtained using data from a single institution, and prior work using features extracted from student code has been highly sensitive to differences in context. This work provides two contributions: first, a partial reproduction of previously published results, but in a different context, and second, an exploration of the efficacy of neural networks in solving this problem. Our findings confirm the importance of two features (the number of steps required to solve a problem and the correctness of key problems), indicate that machine learning techniques are relatively stable across contexts (both across terms in a single course and across courses), and suggest that neural network based approaches are as effective as the best Bayesian and decision tree methods. Furthermore, neural networks can be tuned to be reliably pessimistic, so they may serve a complementary role in solving the problem of identifying students who need assistance.	Evaluating Neural Networks as a Method for Identifying Students in Need of Assistance	NA:NA:NA	2017
Kameswari Chebrolu:Bhaskaran Raman:Vinay Chandra Dommeti:Akshay Veer Boddu:Kurien Zacharia:Arun Babu:Prateek Chandan	Considerable experimentation is happening in today's classrooms to handle large classes. In this paper, we present SAFE (Smart Authenticated Fast Exams), a tool that enables continuous assessment in the form of regular quizzes in classes. SAFE is based on a BYOD (bring your own device) model that leverages student smart-phones to conduct auto-graded, cheating-free exams in a proctored class room setting. SAFE has 3 components: a smart-phone app, a web server and WiFi infrastructure to enable app-server communication. SAFE support a rich set of features to handle various types of questions as well as instructor preferences. In the design of SAFE, we set to achieve 4 goals: easy setup, cheating-free operation, robustness and scale. Easy setup is achieved predominantly due to the BYOD model and online mode of exams. Cheating is prevented via locking the app for the intended purpose along with reporting to the server any user attempts at cheating. Robustness is handled via periodic syncing of messages and careful consideration of corner cases. Scale is handled by carefully tuning the WiFi as well as via application level scheduling. SAFE has been used so far to conduct 90+ in-class quizzes in 9 courses in the last year. It was also used to conduct a high stake admission test for a Master's program in Computer Science. The feedback from end-users has been very positive and we continue to get new requests for trials in other courses. This paper presents the design of SAFE and evaluation based on our experience thus far.	SAFE: Smart Authenticated Fast Exams for Student Evaluation in Classrooms	NA:NA:NA:NA:NA:NA:NA	2017
Nick Cheng:Brian Harrington	Marking coding exam questions for introductory computer science courses is notoriously resource intensive and difficult to perform consistently. Students can be easily led astray by minor misunderstandings in the wording of questions, and graders often find it difficult to decide whether mistakes are attributable to simple misinterpretations, minor memory errors, or major lack of ability/understanding of the core concepts being evaluated. In this paper we detail and evaluate "Code Mangler" questions. The "Code Mangler" is a fictitious character who manipulates code; removing commenting, changing the order of lines, adding bugs, and otherwise breaking perfectly good code. The role of the student on the exam is then to use the mangled results to reverse engineer the original code. We discuss the benefits of this style of question, and perform an evaluation on a large (475 student) CS1 course, demonstrating that these questions are less resource intensive to mark than traditional coding questions, improve the confidence of the graders, and correlate strongly with student ability as assessed in traditional question styles.	The Code Mangler: Evaluating Coding Ability Without Writing any Code	NA:NA	2017
John W. Coffey	This paper contains a description of a follow-on to a pilot study in which students performed reflective activities as part of the design process in an advanced programming course. Students produced an initial design for their programs that was due within a week after the program was assigned. Along with their projects, students submitted a document reflecting the final design and an analysis of the changes between them. Requirements for the analysis were made more explicit than those in the pilot study. The format of the document was specified and the task was described to the students as a technical writing activity. Results of the work are reported and a comparison with prior work that did not have a specified structure for the student analysis are described.	A Study of the Use of a Reflective Activity to Improve Students' Software Design Capabilities	NA	2017
Richard Cox:Steven Bird:Bernd Meyer	A new computer science curriculum has been developed for the Victorian Certificate of Education. It gives students direct entry into second year University computer science. The curriculum focuses on data structures and algorithms, with an emphasis on the graph abstract data type and graph algorithms. We taught a pilot course during 2014 involving students from seven schools, and administered an algorithmic thinking quiz on entry and exit, and also tested a first year university reference group. In this paper we present the curriculum and report on the evaluation. We discuss the effectiveness of our approach and make recommendations for improving future versions of the course. Pedagogical issues are discussed in relation to the cognitive education literature on the teaching of algorithmic thinking.	Teaching Computer Science in the Victorian Certificate of Education: A Pilot Study	NA:NA:NA	2017
Aparna Das:David Voorhees:Cynthia Choi:Carl E. Landwehr	We discuss the design and implementation of an interdisciplinary non-majors course Cybersecurity for future presidents, which broadens the types of computational courses available for non-majors. The goal of our course is to build awareness of cybersecurity issues and to promote thinking critically about them. Student debates on controversial cybersecurity issues facing society today motivate the technical and policy content. We present student assessment results, which demonstrate an increase of students' awareness, and outline directions for future course improvements.	Cybersecurity for Future Presidents: An Interdisciplinary Non-majors Course	NA:NA:NA:NA	2017
Debzani Deb:Mohammad Muztaba Fuad:Mallek Kanan	Computer Science instructors have been exploiting learning technology such as Algorithm Visualization (AV) for last few years to explain hard-to-understand algorithms to the learners through simulations and animations. In this work, we explore an active and highly engaging approach, namely, the construction of visualizations of the algorithms under study. Our approach is further augmented with automated assessment of students' in-class construction activities, which they execute as apps in their mobile devices. In this paper, we utilize case study, a step-by-step visualization of a construction exercise app, to explain how technology is leveraged to provide a richer way for learners to interact with a problem, and how instructor can acquire real-time evidence of learners' comprehension of covered lecture material. Our experimental evaluation shows the educational benefits of the proposed approach in terms of enhanced student learning, reduced drop-out rate and increased student satisfaction.	Creating Engaging Exercises With Mobile Response System (MRS)	NA:NA:NA	2017
Adrienne Decker:Monica M. McGill	Europe, Australia, and North America face two similar challenges with respect to computing--there have not been enough students matriculating to keep up with demand and the lack of diversity remains an issue. To address these challenges, private and public resources have been allocated to educate primary and secondary students in computing. Previous meta-studies on these often segregated outreach efforts within the United States indicate that research on their impact remains spotty, short-term, and inconsistent, leaving a gap in the ability to evaluate their long-term impact. Building upon previous research focused in the U.S., this study examines similarities and differences in the results of 17 formal, peer-reviewed computing education research journals and conferences across Australia, Europe, and North America during 2009-2015. Results indicate that a lacuna exists in international research, paralleling results of the more narrowly focused study of U.S. venues. The paper further defines the major issues researchers face in conducting assessment studies for outreach and recommendations for addressing this gap.	Pre-College Computing Outreach Research: Towards Improving the Practice	NA:NA	2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky	Computer science, particularly in the United States, continues to suffer from underrepresentation by women and students of color. Increasingly, evidence suggests that we need to approach student perceptions of computer science and self perceptions of "who does computer science" before college, at ages in which students have not yet formed difficult-to-change viewpoints. In an effort to address underrepresented groups in computing, as well as to change common, stereotypical perceptions of what a computer scientist is, we ran a pilot summer camp that drew students from our local community and sought to increase their self-efficacy and change the way they conceptualized Computer Science. In designing the course, we leveraged approaches that have shown success at the college level - particularly Computing for Social Good and Media Computation - to introduce students to important concepts. The camp was structured as a week-long, full-day camp in one of the Computer Science department's computer-equipped classrooms, We taught programming in Processing to 28 rising 5th-9th grade students, focusing on artistic aspects and real-world inspiration. In this paper, we report on the project (both successes and failures) and the effects the project had on students' self-efficacy and attitudes towards computer science. We also provide some recommendations for others planning to offer similar camps.	Arts Coding for Social Good: A Pilot Project for Middle-School Outreach	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Paul E. Dickson:Toby Dragon:Adam Lee	Undergraduate teaching assistants have been used in many classes, over many years, and at many institutions. The literature primarily focuses on the practice in a university environment with large classes. We focus instead on the use of undergraduate teaching assistants in the small college, small class environment. We have been employing students in this capacity for over 15 years and have gained some insight on how best to use these undergraduate teaching assistants in the small classroom setting. We believe these conclusions can inform the design of other undergraduate teaching assistant programs.	Using Undergraduate Teaching Assistants in Small Classes	NA:NA:NA	2017
Alex Edgcomb:Frank Vahid:Roman Lysecky:Susan Lysecky	Getting students to read and study before class, to be better prepared for lecture, or to enable a flipped classroom is a long-standing difficulty for teachers of introductory programming classes. Furthermore, getting students to do homework, consisting of small practice problems and questions, is also a long-standing difficulty without massive grading resources. And even then, preventing students from copying others' solutions is difficult as well. Today, the web enables new interactive learning material that is replacing past forms of textbooks and homework assignments, and students today commonly have access to needed devices and the internet. This paper provides data on student reading and homework completion rates for web-based interactive learning material we created that automatically records reading and homework activity by students. The data is for several thousand students at over 10 universities, for introductory programming classes in Java, Python, and C++. The data shows that, with an appropriate amount of awarded points, required-reading completion rate was 84%, and auto-graded homework completion rate was 75%, varying somewhat based on how many course grade points those items were worth. Students on average spent about 10 minutes reading each section, and about 3 minutes per homework problem, both appropriate amounts for those items. Furthermore, we developed measures of whether students were earnestly attempting the reading and homeworks, versus just "cheating the system" to get course grade points. We describe those earnestness measures in this paper. With proper design and amount of assigned work, 80%-90% of students earnestly did the reading and homework activities, even when no penalty existed for cheating the system, and fewer than 3% blatantly cheated the system to get their points.	Getting Students to Earnestly Do Reading, Studying, and Homework in an Introductory Programming Class	NA:NA:NA:NA	2017
Jesse Eickholt:Sharad Shrestha	Cloud Computing and Big Data continue to be disruptive forces in computing and have made inroads in the Computer Science curriculum, with courses in Cloud Computing and Big Data being routinely offered at the graduate and undergraduate level. One major challenge in offering courses in Big Data and Cloud Computing is resources. The question is how to provide students with authentic experiences making use of current Cloud and Big Data resources and tools and do so in a cost effective manner. Historically, three options, namely physical clusters, virtual clusters and cloud-based clusters, have been used to support Big Data and Cloud Computing courses. Virtual clusters and cloud-based options are those that institutions have typically adopted and many arguments in favor of these options exist in the literature, citing cost and performance. Here we argue that teaching Big Data and Cloud Computing courses can be done making use of a physical cluster and that many of the existing arguments fail to take into account many important factors in their calculations. These factors include the flexibility and control of a physical cluster in responding to changes in industry, the ability to work with much larger datasets, and the synergy and broad applicability of an appropriately equipped physical cluster for courses such as Cloud Computing, Big Data and Data Mining. We present three possible configurations of a physical cluster which span the spectrum in terms of cost and provide cost comparisons of these configurations against virtual and cloud-based options, taking into account the unique requirements of an academic setting. While limitations do exist with a physical cluster and it is not an option for all situations, our analysis and experience indicates that there is great value in using a physical cluster to support teaching Cloud Computing and Big Data courses and it should not be dismissed.	Teaching Big Data and Cloud Computing with a Physical Cluster	NA:NA	2017
Shelly Engelman:Brian Magerko:Tom McKlin:Morgan Miller:Doug Edwards:Jason Freeman	STEAM education is a method for driving student engagement in STEM topics through personal expression, creativity and aesthetics. EarSketch, a collaborative and authentic learning tool which introduces students to programming through music remixing, has previously been shown to enhance student engagement and intent to persist in computing. The goal of EarSketch is to broaden participation in computing through a thickly authentic learning environment that has personal and real world relevance in both computational and music domains. This mixed methods study extends previous work by 1) using a newly- developed instrument to assess creativity and 2) testing a theory of change model that provides an explanatory framework for increasing student engagement in STEAM. The results suggest that students who used EarSketch express statistically significant gains in computing attitudes and creativity. Furthermore, a series of multiple regression analyses found that a creative learning environment, fueled by a meaningful and personally relevant EarSketch curriculum, drives improvements in students' attitudes and intent to persist in computing. This work makes a significant contribution to computer science education by establishing the effectiveness of an authentic STEAM curriculum and advancing our knowledge of the underlying mechanisms driving students' motivations to persist in STEM disciplines.	Creativity in Authentic STEAM Education with EarSketch	NA:NA:NA:NA:NA:NA	2017
Anthony Estey:Hieke Keuning:Yvonne Coady	Educational research has established that learning can be defined as an enduring change in behaviour, which results from practice or other forms of experience. In introductory programming courses, proficiency is typically approximated through relatively small but frequent assignments and tests. Scaling these assessments to track significant behavioural change is challenging due to the subtle and complex metrics that must be collected from large student populations. Based on a four-semester study, we present an analysis of learning tool interaction data collected from 514 students and 38,796 solutions to practice programming exercises. We first evaluate the effectiveness of measuring workflow patterns to detect students at-risk of failure within the first three weeks of the semester. Our early predictor analysis accurately detects 81% of the students who struggle throughout the course. However, our early predictor also captures transient struggling, as 43% of the students who ultimately did well in the course were classified as at-risk. In order to better differentiate sustained versus transient struggling, we further propose a trajectory metric which measures changes in programming behaviour. The trajectory metric detects 70% of the students who exhibit sustained struggling, and mis-classifies only 11% of students who go on to succeed in the course. Overall, our results show how detecting changes in programming behaviour can help us differentiate between learning and struggling in CS1.	Automatically Classifying Students in Need of Support by Detecting Changes in Programming Behaviour	NA:NA:NA	2017
Katrina Falkner:Rebecca Vivian:Nickolas Falkner:Sally-Ann Williams	A number of institutions and organisations provide online or face-to-face professional learning as part of outreach initiatives to increase skill levels and support for teachers in K-12 Computing education. With a number of countries introducing new K-12 Computer Science curricula around the globe, this provides a prime opportunity for the Computer Science education community to transform and develop models of teacher professional learning that address teachers' needs at-scale. This paper explores the theoretical underpinnings of a community-based professional learning MOOC for Australian teachers for K-6 Computer Science. This paper reflects on data collected from three offerings of the MOOC, presented in light of the theory and design considerations. This paper provides valuable insights of the design of community-centric MOOCs, and acts as a guide for the construction of online professional learning opportunities for Computer Science educators.	Reflecting on Three Offerings of a Community-Centric MOOC for K-6 Computer Science Teachers	NA:NA:NA:NA	2017
Mohammed F. Farghally:Kyu Han Koh:Hossameldin Shahin:Clifford A. Shaffer	Algorithm Visualizations (AVs) have been used for years as an interactive method to convey data structures and algorithms concepts. However, AVs have traditionally focused on illustrating the mechanics of how an algorithm works. We have developed visualizations that we name Algorithm Analysis Visualizations (AAVs), that focus on conveying algorithm analysis concepts. We present our findings from an initial evaluation study of the effectiveness of AAVs when applied to a semester long Data Structures course. AAVs were evaluated in terms of student engagement, student satisfaction, and student performance. Results indicate that the intervention group students spent significantly more time with the AAVs than did the control group students who used primarily textual content. Students gave positive feedback regarding the usefulness of the AAVs in illustrating algorithm analysis concepts. Students from the intervention group had better performance on the algorithm analysis part of the final exam than did control group students.	Evaluating the Effectiveness of Algorithm Analysis Visualizations	NA:NA:NA:NA	2017
Mohammed F. Farghally:Kyu Han Koh:Jeremy V. Ernst:Clifford A. Shaffer	We present initial results from our work towards developing a concept inventory for algorithm analysis (AACI) at the post-CS2 level. We used a Delphi process to identify a list of algorithm analysis topics that were considered both important and hard by surveying a panel of experienced instructors. Through a similar survey process, we identified a list of student misconceptions related to the identified topics. Based on this, a set of pilot AACI items were developed. We validated the misconceptions list by analyzing student responses to four administrations of the pilot AACI in two different universities during Fall 2015 and Spring 2016. Results revealed that a sufficient number of students held most of the misconceptions identified in the list.	Towards a Concept Inventory for Algorithm Analysis Topics	NA:NA:NA:NA	2017
Kathi Fisler:Shriram Krishnamurthi:Preston Tunnell Wilson	Scope, aliasing, mutation, and parameter passing are fundamental programming concepts that interact in subtle ways, especially in complex programs. Research has shown that students have substantial misconceptions on these topics. But this research has been done largely in CS1 courses, when students' programming experience is limited and problems are necessarily simple. What happens later in the curriculum? Does more programming experience iron out these misconceptions naturally, or are interventions required? This paper explores students' understanding of these topics in the context of a programming languages class for third- and fourth-year CS majors. Our pre- and post-tests pose questions in two programming languages to gauge whether upper-level students transfer knowledge between languages. Many students held misconceptions about these concepts at the start of the course. Students made progress in only some languages and topics, and cross-language transfer does not occur naturally. We also discuss various pedagogic activities we used to engage students with these concepts, and provide data and student opinion on their effectiveness.	Assessing and Teaching Scope, Mutation, and Aliasing in Upper-Level Undergraduates	NA:NA:NA	2017
J. Michael Fitzpatrick:Ákos Lédeczi:Gayathri Narasimham:Lee Lafferty:Réal Labrie:Paul T. Mielke:Aatish Kumar:Katherine A. Brady	This paper describes the design and delivery of a highly successful MOOC that uses MATLAB to teach introductory computer programming to a wide audience. The decisions behind the curriculum and assessment strategy are detailed, and the results are evaluated based on three sessions of the course that saw 80,000 active students, two million lecture views and 100,000 auto-graded programming assignment sets during the three sessions delivered in 2015.	Lessons Learned in the Design and Delivery of an Introductory Programming MOOC	NA:NA:NA:NA:NA:NA:NA:NA	2017
Vitaly Ford:Ambareen Siraj:Ada Haynes:Eric Brown	In order to meet the cybersecurity workforce demand, it is important to raise cybersecurity interest among the youth. Just like ACM programming competitions, Capture the Flag (CTF) competitions allow students to learn cybersecurity skills in a fun and engaging way. It is an effective platform to increase students' interest in cybersecurity and prepare them for defending against real cyber attackers. A typical CTF competition requires at least some basic technical security knowledge and months of diligent preparation. For this very reason, many computer science students do not feel qualified to participate in CTF competitions, and as a result, do not even try. To overcome this lack of confidence while at the same time raising awareness about the cybersecurity profession in a realistic fashion, we have developed the CTF Unplugged project, as inspired by the CS Unplugged project. The primary goal is to teach students with little or no technical knowledge about the different cybersecurity challenges that a cybersecurity professional must address and the problem-solving skills needed for a cybersecurity career, all without direct use of technology. The effectiveness of CTF unplugged project has been evaluated after exposing 36 high school students participating in the Tennessee Tech University GenCyber Camp to these activities this past summer. Students reported a significant gain in knowledge, confidence and comfort level after participation.	Capture the Flag Unplugged: an Offline Cyber Competition	NA:NA:NA:NA	2017
Diana Franklin:Gabriela Skifstad:Reiny Rolock:Isha Mehrotra:Valerie Ding:Alexandria Hansen:David Weintrop:Danielle Harlow	As more elementary schools commit to integrating computer science instruction into their curricula, they seek guidance on what concepts are appropriate for students at different grade levels. Currently, little is known about how best to sequence computer science learning across elementary grades. In this paper, we present an analysis of 123 students' (age 9-12, grades 4-6) activities in a curriculum implemented in a visual block-based programming language. The goal of this work is to better understand the developmental appropriateness of foundational computer science ideas. All 4th, 5th, and 6th grade students in a single school completed the first module of a curriculum during the same school year with the same instructor. We analyzed each task students attempted and found that for simple concepts, there was little difference in performance between grade levels. However, differences were found for more complex topics, such as whether they completed initialization tasks and the way in which they solved 2-d navigation tasks. A closer look revealed that students understood the basic concepts, but were challenged by deeper applications of the basic concepts and influenced by non-computer science skills. This work serves as an empirically grounded investigation of elementary computer science learning and contributes to our understanding of computer science learning trajectories and concept sequencing in the late elementary grades.	Using Upper-Elementary Student Performance to Understand Conceptual Sequencing in a Blocks-based Curriculum	NA:NA:NA:NA:NA:NA:NA:NA	2017
David Ginat:Yoav Blau	The notion of abstraction repeatedly appears, in various ways, at all levels of computer science. It involves the aspects of leaving out details and comprehending concepts and mechanisms. It also involves the aspect of recognizing relationships between task elements. The latter aspect was not yet studied with respect to abstraction levels and algorithm design. We study it here. We analyze senior students' algorithmic solutions according to accepted interpretations of multiple abstraction levels, and offer guidelines for enhancing abstraction in students' algorithmics.	Multiple Levels of Abstraction in Algorithmic Problem Solving	NA:NA	2017
Kenneth E. Graves:Leigh Ann DeLyser	Computer science (CS) education initiatives often use measures of interest to assess outcomes. Although appropriate for initiatives meant to encourage future participation, these measures do not always align with the complex nature of interest as described by the learning sciences literature or recognize the reality that school-related initiatives aimed at student engagement in CS will not produce individual interest in every student. In this paper, we present a review of the interest literature, and data from a survey with evidence of validity of over 1,500 students in various CS courses in New York City. By using Latent Class Analysis (LCA), we identify five different statistically significant subgroups of CS students: Enthusiasts, Engaged, Bookish, Idlers, and Disinterested. Our findings suggest that while some students enjoy CS in class and feel the teacher is pedagogically effective, they may not develop the individual interest characterized by seeking additional learning opportunities outside of class.	Interested In Class, But Not In The Hallway: A Latent Class Analysis (LCA) of CS4All Student Surveys	NA:NA	2017
Jeff Gray:Michele Roberts:Jonathan Corley	The College Board estimates that the new AP CS Principles (CSP) course will set a participation record for new course launches. With a large number of students across the USA enrolling in CSP at the high school level, CS departments at colleges and universities will need to begin considering their position for awarding AP credit. One possibility is the introduction of a new college-focused CSP course for non-majors that can serve as a mapping for AP credit. This paper summarizes the experiences of two faculty at different universities who were official CSP College Board Pilots for several years. An overview of each university's experience is provided in terms of student demographics, common evaluation measures, and individual course nuances, followed by a series of recommendations to faculty who are considering the creation of a CSP course within the curriculum of their own department.	Getting Principled: Reflections on Teaching CS Principles at Two College Board University Pilots	NA:NA:NA	2017
Chris Gregg:Raewyn Duvall:Kate Wasynczuk	A problem that many tech companies face today is that many computer science students entering the work force lack fundamental skills for understanding the entire process of a system that is not solely software. Some students may take a series of courses on analog and/or digital circuits, but the integration with modern devices is sorely missing from most curricula. We designed the Tufts University Comp 50: Wearable Devices course to introduce the basics of digital and analog circuits to students with software-driven backgrounds by studying the intricacies of the production of wearable electronic devices. The course focused on the skills needed to design hardware, software, and a chassis for a final wearable product that was novel and potentially marketable. The primary objective was to provide a course that serves as an introduction to digital electronics but with a tangible goal to produce a high-fidelity prototype that student teams presented at the end of the semester. Given the nature of modern wearable devices, which are small, energy efficient, and strongly favor connectivity to other devices, we developed the curriculum around designing a surface-mount Printed Circuit Board (PCB), and we outfitted the student kits with coin-cell battery powered, Bluetooth-connected, Arduino-compatible devices that they needed to learn how to program and connect. We also integrated iOS development into the course so that students' final projects could communicate with both their phones or tablets, or to the Internet via these devices. As the "wearble devices"' field is relatively new, this paper discusses the decisions we made for the set-up of this class, what worked and what did not, and what we would change and improve when we teach it again.	A Modern Wearable Devices Course for Computer Science Undergraduates	NA:NA:NA	2017
Scott Grissom:Sue Fitzgerald:Renée McCauley:Laurie Murphy	Many research studies show students benefit from instructional practices that promote student interaction within the classroom. However, recent prominent reports suggest many instructors still rely on lecture as their dominant classroom activity. This paper reports on a survey of U.S. computer science teaching practices. Responses indicate many CS instructors use student-centered instructional practices but evidence suggests students would benefit from additional use of these practices. Twenty percent of CS instructors report "student-centered activities" are prominent in their classroom. CS instructors are more likely to use student-centered practices than those in other science disciplines but less likely to do so than colleagues in non-science fields. Female CS instructors are more likely to structure their courses around student-centered practices than their male colleagues.	Exposed! CS Faculty Caught Lecturing in Public: A Survey of Instructional Practices	NA:NA:NA:NA	2017
Shuchi Grover:Satabdi Basu	Programming in block-based environments is a key element of introductory computer science (CS) curricula in K-12 settings. Past research conducted in the context of text-based programming points to several challenges related to novice learners' understanding of foundational programming constructs such as variables, loops, and expressions. This research aims to develop assessment items for measuring student understanding in introductory CS classrooms in middle school using a principled approach for assessment design. This paper describes the design of assessments items that were piloted with 100 6th, 7th, 8th graders who had completed an introductory programming course using Scratch. The results and follow-up cognitive thinkalouds indicate that students are generally unfamiliar with the use of variables, and harbor misconceptions about them. They also have trouble with other aspects of introductory programming such as how loops work, and how the Boolean operators work. These findings point to the need for pedagogy that combines popular constructionist activities with those that target conceptual learning, along with better professional development to support teachers' conceptual learning of these foundational constructs.	Measuring Student Learning in Introductory Block-Based Programming: Examining Misconceptions of Loops, Variables, and Boolean Logic	NA:NA	2017
Kevin J. Gucwa:Harry H. Cheng	This paper presents a methodology for creating challenge problems using a simulation environment for a hardware robot-based programming competition. Hosted each spring for K-14 students, the competition is based on hardware robots and lessons which have been used by students within their math, science, and engineering classes throughout the school year. RoboSim is a simulator which complements the control scheme for the hardware robots and is used regularly by the students to supplement running the hardware robots. For the first time RoboSim was used to design the challenges which have been given to students for the 2016 RoboPlay Challenge Competition. Using virtual robots for designing the competition allows more efficient design and testing of the new challenges with new features compared to using only hardware robots. The code which is used to control the robots is unchanged between the hardware and virtual robots making the transition to hardware robots trivial. All challenges from previous RoboPlay competitions are also available to students within RoboSim for testing within the classroom.	Making Robot Challenges with Virtual Robots	NA:NA	2017
Alexandria K. Hansen:Hilary A. Dwyer:Ashley Iveland:Mia Talesfore:Lacy Wright:Danielle B. Harlow:Diana Franklin	We developed the Draw-A-Computer-Scientist-Test (DACST) to better understand elementary school students' conceptions of computer scientists and the nature of their work. By understanding how young children perceive computer scientists, we can broaden their ideas about the activities and images of computer scientists. We administered the DACST to 87 fourth-grade students (ages 8-9) as a pre- and post-assessment to a computer science curriculum. All students attended the same school and were taught by the same female teacher. Before the curriculum, we found that students most often drew male computer scientists working alone, and featured actions that were connected to technology in general (e.g., typing, printing), but not specific to computer science. After the curriculum, more female students drew female computer scientists than before, and the featured actions were more specific to computer science (e.g., programming a game). We also share insights about the classroom-learning environment that may have contributed to changes in students' understanding of computer scientists and their work.	Assessing Children's Understanding of the Work of Computer Scientists: The Draw-a-Computer-Scientist Test	NA:NA:NA:NA:NA:NA:NA	2017
Rachel Harsley:Davide Fossati:Barbara Di Eugenio:Nick Green	Pair programming is a practice where two coders work side by side at one computer. The practice has been linked to many benefits including increased student engagement, satisfaction, and course grades. We present a quantitative study comparing the fine-grained interactions of individual programmers versus pair programmers as they work to solve coding problems using an Intelligent Tutoring System. We collected data from over 115 students resulting in more than 53,000 log events. We discovered that while both individual and pair programmers had equivalent learning gains, pair programmers took significantly less time on most problems, consulted fewer examples, coded more efficiently, and showed more signs of engagement. Individuals adapted to problems requiring new and compounded concepts at a rate similar to pair programmers.	Interactions of Individual and Pair Programmers with an Intelligent Tutoring System for Computer Science	NA:NA:NA:NA	2017
Helen H. Hu:Cecily Heiner:Thomas Gagne:Carl Lyman	From 2012 to 2015, the number of Utah secondary teachers teaching computer science courses grew from 38 to 164. This growth was made possible by introducing three new CS teacher endorsements, which reduced the effort required for existing teachers to start teaching CS. Instead of committing to completing five college-level CS courses in two years, an existing but new-to-CS Utah teacher could complete an Exploring Computer Science (ECS) endorsement in half a year. Thanks to changes to high school graduation requirements, students were able to take a CS course without using an elective credit, boosting enrollment and broadening participation. Analysis of ECS teacher surveys and student surveys found surprisingly few differences between CS-experienced teachers and new-to-CS teachers in their ability to teach CS. By the end of the ECS course, even ECS students with low confidence in their own CS abilities believed that anyone could succeed in CS, regardless of their teacher's CS background. All students' interest in taking additional CS classes significantly increased after taking ECS, although CS-experienced teachers had a stronger impact on ECS students with low confidence than new-to-CS teachers. These results suggest that school districts seeking to provide computer science education for all their students can successfully staff their CS classes by supporting existing secondary teachers with no prior CS background with quality CS professional development and mentoring.	Building a Statewide Computer Science Teacher Pipeline	NA:NA:NA:NA	2017
Chris Johnson	With the increasing availability of inexpensive miniature computers, networked appliances, and 3D printers, many consumers are returning to their "maker" roots, preferring to invent technologies to address personal needs instead of buying ready-made solutions. This maker movement confers many benefits to society: the growth of open source software and open standards, the proliferation of sharing sites where individuals freely publish design files, and communities of practice whose core values include education of new members. Sadly, the first two benefits may undermine the third: the maker movement generates much more stuff to consume. A school may purchase a 3D printer for educational purposes, only to have its student-makers simply download and print other people's models without learning to make their own. To prevent this kind of situation, educators must capitalize on the maker movement in ways that facilitate what we call computational making, which involves both meaningful cognition and the making of artifacts. In this paper, we describe one such way: a programming language named Madeup for generating 3D models.	Toward Computational Making with Madeup	NA	2017
David Kerven:Kristine Nagel:Stella Smith:Sherly Abraham:Laura Young	Faculty face motivational and engagement challenges in general education computing courses. Inquiry-based learning strategies show promise in engaging students in an authentic discovery process. In a general education computer literacy course, we adapted scenario-based curriculum to create a classroom environment where students are faced with a real-life cybersecurity crisis and spurred into active discussion. Working as a team, they were required to analyze provided evidence and document a reasoned solution. We share implementation strategies and challenges to adopting scenarios promoting active learning. Our pilot data suggests this curriculum approach has a positive impact on students' interest in computing, while engaging them in real-world, multi-disciplinary content.	Scenario-Based Inquiry for Engagement in General Education Computing	NA:NA:NA:NA:NA	2017
Hassan Khosravi:Kendra M.L. Cooper	Educators continue to face significant challenges in providing high quality, post-secondary instruction in large classes including: motivating and engaging diverse populations (e.g., academic ability and backgrounds, generational expectations); and providing helpful feedback and guidance. Researchers investigate solutions to these kinds of challenges from alternative perspectives, including learning analytics (LA). Here, LA techniques are applied to explore the data collected for a large, flipped introductory programming class to (1) identify groups of students with similar patterns of performance and engagement; and (2) provide them with more meaningful appraisals that are tailored to help them effectively master the learning objectives. Two studies are reported, which apply clustering to analyze the class population, followed by an analysis of a subpopulation with extreme behaviours.	Using Learning Analytics to Investigate Patterns of Performance and Engagement in Large Classes	NA:NA	2017
Sami Khuri:Miri VanHoven:Natalia Khuri	In this paper, we describe the Minor in Bioinformatics that we created to better prepare students, especially women, in acquiring computational and programming skills. Our program was motivated by the fact that women are underrepresented in computer science and in other information technology-related fields. We aim to recruit biology undergraduates, who are more than 60% female, to the new cohort-based integrative interdisciplinary Minor in Bioinformatics program. By rooting this new computational program in biological concepts and questions, we plan to interest and educate biology students in computational methods, which can be applied to complex questions in the growing field of bioinformatics. We expect that the Minor in Bioinformatics program will serve as a general framework for establishing similar interdisciplinary programs at large institutions and small colleges.	Increasing the Capacity of STEM Workforce: Minor in Bioinformatics	NA:NA:NA	2017
Ada S. Kim:Andrew J. Ko	Online coding tutorials are increasingly popular among learners, but we still have little knowledge of their quality. To address this gap, we derived several dimensions of pedagogical effectiveness from the learning sciences and education literature and analyzed a large sample of tutorials against these dimensions. We sampled 30 popular and diverse online coding tutorials, and analyzed what and how they taught learners. We found that tutorials largely taught similar content, organized content bottom-up, and provided goal-directed practices with immediate feedback. However, few were tailored to learners' prior coding knowledge and only a few informed learners how to transfer and apply learned knowledge. Based on these results, we discuss strengths and weaknesses of online coding tutorials, opportunities for improvement, and recommend that educators point their students to educational games and interactive tutorials over other tutorial genres.	A Pedagogical Analysis of Online Coding Tutorials	NA:NA	2017
Michael S. Kirkpatrick	Team-Based Learning (TBL) is an active learning pedagogy that involves a substantial amount of preparation work by students. While previous work shows that objective measures of student learning outcomes improved after TBL adoption in CS, little work has been done to evaluate the students' perspectives rigorously. In this work, we present the qualitative findings from a larger mixed-methods study of student perspectives. These results suggest that most students find TBL rewarding, although there are some aspects of the pedagogy that can be frustrating and may require alteration for TBL adoption in CS.	Student Perspectives of Team-Based Learning in a CS Course: Summary of Qualitative Findings	NA	2017
Michael S. Kirkpatrick:Chris Mayfield	Before Fall 2013, our CS majors were required to take the same 4-credit introductory programming course as part of a two-semester CS1 designed to be welcoming to novices. As CS in K-12 has expanded, the diversity of incoming students' programming backgrounds has increased, raising concerns that the climate was becoming increasingly intimidating for novices. The literature suggests these effects could disproportionately impact retention of female students and other underrepresented minorities, undermining other efforts to broaden participation in computing. To address these concerns, we split the first course based on students' prior programming experience. Using statistical techniques, we analyzed the intermediate quantitative impact of this and other curricular changes. Our results suggest that adding the alternative CS1 course had little effect on retention, but the overall structure has been successful in achieving comparable CS2 outcomes regardless of prior experience.	Evaluating an Alternative CS1 for Students with Prior Programming Experience	NA:NA	2017
Edwin M. Knorr:Christopher Thompson	This paper reports on our experiences with in-lab programming tests (i.e., using a compiler and IDE) in a large undergraduate data structures course in C for non-specialists. By adding a suite of in-lab programming tests to our regular assessments (midterm, final exam, programming homework, etc.), we expected students to improve significantly in these areas: (1) programming ability as measured by final exam grades on programming-related questions, (2) confidence in programming ability, and (3) contributions/effectiveness in pair programming partnerships. Goal (1) was not met. Although Goal (2) was met, improved confidence did not translate into improved performance. Goal (3) was partially met. We present data gathered from in-lab programming test assessments, final exam programming assessments, and post-course surveys, including a two-year follow-up survey.	In-Lab Programming Tests in a Data Structures Course in C for Non-Specialists	NA:NA	2017
Tobias Kohn	For novice programmers one of the most problematic concepts is variable assignment and evaluation. Several questions emerge in the mind of the beginner, such as what does x = 7 + 4 or x = x + 1 really mean? For instance, many students initially think that such statements store the entire calculation in variable x, evaluating the result lazily when actually needed. The common increment pattern x = x + 1 is even believed to be outright impossible. This paper discusses a multi-year project examining how high school students think of assignments and variables. In particular, where does the misconception of storing entire calculations come from? Can we explain the students' thinking and help them develop correct models of how programming works? It is particularly striking that a model of the computer as a machine with algebraic capabilities would indeed produce the observed misconceptions. The misconception might simply be attributed to the expectation that the computer performs computations the exact same way students are taught to in mathematics.	Variable Evaluation: an Exploration of Novice Programmers' Understanding and Common Misconceptions	NA	2017
Zachary Kurmas	We present MIPSUnit, a unit test framework for MIPS assembly. MIPSUnit's primary benefit is that it reduces the time needed to grade assembly language assignments. It also provides a time-efficient means for giving students additional testing experience; therefore, it can serve as one component of a curriculum-wide emphasis on testing. MIPSUnit is a suite of two tools: MUnit, which allows users to test their assembly code with JUnit tests, and MSpec, which uses RSpec-style unit tests.	MIPSUnit: A Unit Testing Framework for MIPS Assembly	NA	2017
Mackenzie Leake:Colleen M. Lewis	Many organizations have developed websites to support high school computer science (CS) teachers by providing them with collections of teaching resources. Yet rarely do these sites take into account the unique challenges of new CS teachers who often have not had formal training in CS. In response to a documented lack of teachers' engagement on these sites, we interviewed 17 CS teachers to learn more about the ways in which these sites are and are not meeting teachers' needs for curriculum resources. We discuss our findings about how teachers use, adapt, and share resources and then provide several suggestions for designing resource sharing sites that support teachers who have varying levels of experience teaching CS.	Recommendations for Designing CS Resource Sharing Sites for All Teachers	NA:NA	2017
Irene A. Lee:Maureen Psaila Dombrowski:Ed Angel	In this paper, we describe a new teacher professional development program, New Mexico Computer Science for All (NM-CSforAll), that prepares high school science, technology, engineering and math (STEM) teachers to serve as learning coaches / teaching assistants for a dual credit Computer Science (CS) course. The dual credit course for students follows a "flipped classroom" model with the lecture portion delivered online through University of New Mexico (UNM) and the lab portion offered by participating teachers at local high schools. The course utilized a novel curriculum focusing on teaching CS concepts through computer modeling of complex adaptive systems. We reflect on what we learned while preparing STEM teachers to become CS teachers and discuss the affordances and barriers to bringing CS education to rural and under-resourced schools across the state of New Mexico.	Preparing STEM Teachers to offer New Mexico Computer Science for All	NA:NA:NA	2017
Dan Leyzberg:Christopher Moretti	Two-thirds of all computer science teachers in the United States do not have a degree in computer science. As demand for K-12 computer science education continues to grow, and as industry continues to lure computer science graduates away from careers in education, school administrators are increasingly forced to ask teachers with little formal training in computer science to teach computer science courses. This is such a common phenomenon that there are now many competing summer professional development programs aimed at training teachers of other subjects to teach a first course in computer science. However, once these teachers become comfortable teaching the introductory material, there is little support available for them to gain more content knowledge to be able to support their more advanced students or design additional computer science courses. In this paper, we describe our approach to providing more advanced computer science content knowledge to computer science teachers in a week-long summer professional development program.	Teaching CS to CS Teachers: Addressing the Need for Advanced Content in K-12 Professional Development	NA:NA	2017
Soohyun Nam Liao:William G. Griswold:Leo Porter	As student enrollments in computer science increase, there is a growing need for pedagogies that scale. Recent evidence has shown Peer Instruction (PI) to be an effective in-class pedagogy that reports high student satisfaction even with large classes. Yet, the question of the scalability of traditional lecture versus PI is largely unexplored. To explore this question, this work examines publicly available student evaluations of computer science courses across a wide range of class sizes (50--374 students) over a four year period. It first compares evaluations regardless of size and confirms prior work that PI classes are better appreciated by students than traditional lecture. It then examines how course evaluations change with class size and provides evidence that PI achieves a smaller decline in evaluations as class size increases.	Impact of Class Size on Student Evaluations for Traditional and Peer Instruction Classrooms	NA:NA:NA	2017
Breanne K. Litts:Yasmin B. Kafai:Debora Lui:Justice Walker:Sari Widman	In this paper, we examine students? learning about computing by designing, coding, and remixing electronic textiles with sensor inputs and light outputs. We conducted a workshop with 23 high school students ages 16-17 years who learned how to craft and code circuits with the LilyPad Arduino, an electronic textile construction kit. Our analyses not only confirm significant increases in students' understanding of functional circuits but also showcase students' ability in reading, remixing and writing program code for controlling circuits. In our discussion, we address opportunities and challenges of introducing codeable circuit design for integrating maker activities that include engineering and computing into K-12 classrooms.	Understanding High School Students' Reading, Remixing, and Writing Codeable Circuits for Electronic Textiles	NA:NA:NA:NA:NA	2017
Josje Lodder:Bastiaan Heeren:Johan Jeuring	This paper describes an algorithm to generate Hilbert-style axiomatic proofs. Based on this algorithm we develop logax, a new interactive tutoring tool that provides hints and feedback to a student who stepwise constructs an axiomatic proof. We compare the generated proofs with expert and student solutions, and conclude that the quality of the generated proofs is comparable to that of expert proofs. logax\ recognizes most steps that students take when constructing a proof. If a student diverges from the generated solution, logax can still provide hints and feedback.	Generating Hints and Feedback for Hilbert-style Axiomatic Proofs	NA:NA:NA	2017
Ellie Lovellette:John Matta:Dennis Bouvier:Roger Frye	Contextualization of problems is widely studied in mathematics education. In computer science it is taken for granted that authentic, contextualized programming assignments will increase student interest and therefore enhance performance in programming assignments. This paper examines whether contextualization is, in fact, beneficial for students. We present a study that compares novice programmers' ability to code a solution given two versions of a problem. One version is contextualized, the other is non-contextualized, using "just the numbers." The results presented indicate that there is no difference in success rates for the two types of programming assignments.	Just the Numbers: An Investigation of Contextualization of Problems for Novice Programmers	NA:NA:NA:NA	2017
Bruce A. Maxwell:Stephanie R. Taylor	Context-based CS1 courses focusing on Media Computation, Robotics, Games, or Art have been shown to improve outcomes such as retention and gender balance, both important factors in CS education. Colby College has offered a Visual Media focused CS1 course since 2008, and in response to faculty and student feedback, we expanded our curriculum to include a second context-based CS1 course focused on Science applications. Our goal was to have completely different projects but teach the same fundamental concepts. In order to measure whether students in each version were learning the same concepts, and to reduce confounding factors, the same professors co-taught both versions of CS1 and students completed the same homework, quizzes, and final exam. Our analysis of the quiz, final exam, and final overall performance showed no statistically significant difference by context or by gender. There was also no difference by context or gender in whether students took additional CS courses in the following two semesters. Furthermore, as a percentage of the students eligible to take the next offering of CS2, Data Structures and Algorithms, 48% of the students in these two offerings of CS1 registered for CS2, with no significant difference between contexts. Our conclusion is that we were successful in achieving similar outcomes, and the benefits of context-based CS1 courses, in both the Visual Media and Science versions of the course.	Comparing Outcomes Across Different Contexts in CS1	NA:NA	2017
Robert McCartney:Jonas Boustedt:Anna Eckerdal:Kate Sanders:Carol Zander	In a survey of the CS-education community, we find a range of beliefs about the "geek gene" theory. We suggest an alternative term, the "geekiness quotient (GQ)". The GQ, grounded in Gardner's work on multiple intelligences, is a hypothetical measure of the student's current CS ability. The GQ supports a moderate view of the geek gene: that students arrive in our classrooms with a range of CS abilities, whether acquired through background or innate talent, and can improve their abilities through effort.	Folk Pedagogy and the Geek Gene: Geekiness Quotient	NA:NA:NA:NA:NA	2017
Paola Medel:Vahab Pournaghshband	Low female participation in Computer Science is a known problem. Studies reveal that female students are less confident in their CS skills and knowledge than their male counterparts, despite parallel academic performance indicators. While prior studies focus on limited, apparent factors causing this lack of confidence, our work is the first to demonstrate how, in CS, instructional materials may lead to the promotion of gender inequality. We use a multidisciplinary perspective to examine profound, but often subtle portrayals of gender bias within the course materials and reveal their underlying pedagogical causes. We examine three distinct samples of established CS teaching materials and explain how they may affect female students. These samples, while not a complete display of all gender inequalities in CS curriculum, serve as effective representations of the established trends of male-centered representation, imagery, and language that may promote gender inequality. Finally, we present easily implementable, alternative gender equitable approaches that maximize gender inclusion.	Eliminating Gender Bias in Computer Science Education Materials	NA:NA	2017
Christian Murphy:Swapneel Sheth:Sydney Morton	Since 2012, over 1,100 students at our institution have participated in software engineering courses in which they had the opportunity to partake in "real projects for real customers." Unlike typical one-semester courses or yearlong capstones, our approach is unique in that we offer a two-course sequence in which one group of students develops the initial implementation in the first course and different students maintain and improve the code in the second. This paper presents our experiences in teaching these courses and serves as a blueprint for other educators who wish to create similar interventions for their students over a two-course sequence. In addition to describing our motivation and the structure of the courses, we discuss how we address issues of scale by using students as Project Managers and the benefits of doing so. We also present empirical evidence that the projects help students feel more confident working in groups, using the agile development process, and working with a real-world customer.	A Two-Course Sequence of Real Projects for Real Customers	NA:NA:NA	2017
Andres Neyem:Juan Diaz-Mosquera:Jorge Munoz-Gama:Jaime Navon	Project-based courses can provide valuable learning experiences for computing majors as well as for faculty and community partners. However, proper coordination between students, stakeholders and the academic team is very difficult to achieve. We present an integral study consisting of a twofold approach. First, we propose a proven capstone course framework implementation in conjunction with an educational software tool to support and ensure proper fulfillment of most academic and engineering needs. Second, we propose an approach for mining process data from the information generated by this tool as a way of understanding these courses and improving software engineering education. Moreover, we propose visualizations, metrics and algorithms using Process Mining to provide an insight into practices and procedures followed during various phases of a software development life cycle. We mine the event logs produced by the educational software tool and derive aspects such as cooperative behaviors in a team, component and student entropy, process compliance and verification. The proposed visualizations and metrics (learning analytics) provide a multi-faceted view to the academic team serving as a tool for feedback on development process and quality by students	Understanding Student Interactions in Capstone Courses to Improve Learning Experiences	NA:NA:NA:NA	2017
Mike O'Leary	This paper provides pedagogical lessons drawn from a capstone hands-on laboratory course in cyber operations. It is taught as a flipped class, where the center piece is a collection of exercises that require teams of students to set up, defend, and attack complex networks. Project designs are presented, including balancing offense and defense to improve course learning outcomes. Lessons on the recruiting and managing of an external "red team" are provided. Grading issues are addressed, as are techniques to manage students of different skills and motivations.	Innovative Pedagogical Approaches to a Capstone Laboratory Course in Cyber Operations	NA	2017
Yin Pan:Sumita Mishra:David Schwartz	The growing shortage of skilled professionals in cybersecurity and forensics has increased global demand for information systems professionals. To identify and attract more students to cybersecurity and forensics programs, the authors developed a game engine along with a sequence of entertaining, engaging, and educational games, suitable for forensics and cybersecurity courses. This paper focuses on the design and development of a modular educational game framework composed of a game engine and a GUI-based game creator. Following narrative and storylines of the game via interactive dialogs and visualized abstract concepts, students are motivated and engaged to obtain the necessary knowledge. Students will also develop their problem solving skills by using real tools and technologies while playing the game. The GUI-based game creator allows educators to create and develop new educational games by only focusing on game content.	Gamifying Course Modules for Entry Level Students	NA:NA:NA	2017
Anthony Papini:Leigh Ann DeLyser:Nathaniel Granor:Kevin Wang	The rapid expansion of computer science (CS) education across the United States has left schools struggling to find teachers for CS classrooms. One approach to supplementing school and teacher expertise is to use industry professionals as volunteers in the classroom. This paper outlines the model of recruiting, training, and supporting volunteers in CS classrooms used by TEALS, a national computer science education program that creates co-teaching partnerships between industry experts and educators. This paper presents detailed information about the volunteers and the training the they receive, as well as the impact and outcomes on the students and cooperating teachers. Results from teacher, student, and volunteer surveys show satisfaction with the volunteers, as well as continued growth in perceived volunteer classroom performance over the year.	Preparing and Supporting Industry Professionals as Volunteer High School Computer Science Co-Instructors	NA:NA:NA:NA	2017
Vivek Paramasivam:Justin Huang:Sarah Elliott:Maya Cakmak	Robots are becoming popular in Computer Science outreach to K-12 students. Easy-to-program toy robots already exist as commercial educational products. These toys take advantage of the increased interest and engagement resulting from the ability to write code that makes a robot physically move. However, toy robots do not demonstrate the potential of robots to carry out useful everyday tasks. On the other hand, functional robots are often difficult to program even for professional software developers or roboticists. In this work, we apply end-user programming tools for functional robots to the Computer Science outreach context. This experience report describes two offerings of a week-long introductory workshop in which students with various disabilities learned to program a Clearpath Turtlebot, capable of delivering items, interacting with people via touchscreen, and autonomously navigating its environment. We found that the robot and the end-user programming tool that we developed in previous work were successful in provoking interest in Computer Science among both groups of students and in establishing confidence among students that programming is both accessible and interesting. We present key observations from the workshops, lessons learned, and suggestions for readers interested in employing a similar approach.	Computer Science Outreach with End-User Robot-Programming Tools	NA:NA:NA:NA	2017
Miranda C. Parker:Leigh Ann DeLyser	Computer science is rapidly expanding across the United States, and as schools look for guidance about what constitutes developmentally appropriate topics, state education departments are looking for assistance in the creation of standards. The K--12 Computer Science (CS) Framework was developed to fit these needs. The framework is the first of its kind in the K--12 CS domain, filling a much-needed structural and definitional role in the field. The framework was created as part of a collaboration at multiple levels within the CS community across the United States. Following the footsteps of other disciplines, this framework provides definitions and guidelines on what students should know (concepts) and be able to do (practices) within certain grade bands in today's computing classrooms. This paper details why the framework was developed, how it was designed, and what impacts it could have on the future of K--12 computing education.	Concepts and Practices: Designing and Developing A Modern K-12 CS Framework	NA:NA	2017
John Peterson:Greg Haynes	We present an experience report demonstrating the use a Domain-Specific Language, Nuterpea, in a general education music class. While the use of computing in music education is common, we demonstrate that {\em coding} allows students without a background in music or computing to explore topics in music form and theory. Coding supports a new style of music education, one that is focused on creating musical compositions rather that performance or appreciation of existing music. We focus on styles of music that can be built algorithmically from a structural description. With such music the use of coding allows students to define and use patterns in a way that makes it possible for complex compositions to be specified in a concise manner. This approach suits the context of general education; we have designed our curriculum around genres of music that are easily represented in an algorithmic manner. Our experience suggests that a well-designed DSL for describing musical compositions provides a unique way to introduce students to core concepts in music in way that is engaging for learners and pedagogically appropriate for topics in music theory and structure. In addition, students are exposed to computer science topics such as programming language syntax, functions, abstractions, and types. We have also used this approach with pre-college students and believe that this style of music education can be adapted to a K12 environment.	Integrating Computer Science into Music Education	NA:NA	2017
Raymond S. Pettit:John Homer:Roger Gee	One common frustration students face when first learning to program in a compiled language is the difficulty in interpreting the compiler error messages they receive. Attempts to improve error messages have produced differing results. Two recently published papers showed conflicting results, with one showing measurable change in student behavior, and the other showing no measurable change. We conducted an experiment comparable to these two over the course of several semesters in a CS1 course. This paper presents our results in the context of previous work in this area. We improved the clarity of the compiler error messages the students receive, so that they may more readily understand their mistakes and be able to make effective corrections. Our goal was to help students better understand their syntax mistakes and, as a reasonable measure of our success, we expected to document a decrease in the number of times students made consecutive submissions with the same compilation error. By doing this, we could demonstrate that this enhancement is effective. After collecting and thoroughly analyzing our own experimental data, we found that--despite anecdotal stories, student survey responses, and instructor opinions testifying to the tool's helpfulness--enhancing compiler error messages shows no measurable benefit to students. Our results validate one of the existing studies and contradict another. We discuss some of the reasons for these results and conclude with projections for future research.	Do Enhanced Compiler Error Messages Help Students?: Results Inconclusive.	NA:NA:NA	2017
Jonathan Pierce:Craig Zilles	We analyzed 6 semesters of data from a large enrollment data structures course to identify instances of plagiarism in 4 assignments. We find that the majority of the identified plagiarism instances involve cross-semester cheating and are performed by students for whom the plagiarism is an isolated event (in the studied assignments). Second, we find that providing students an opportunity to work with a partner doesn't decrease the incidence of plagiarism. Third, while plagiarism on a given assignment is correlated with better than average scores on that assignment, plagiarism is negatively correlated with final grades in both the course that the plagiarism occurred and in a subsequent related course. Finally, we briefly describe the Algae open-source suite of plagiarism detectors and characterize the kinds of obfuscation that students apply to their plagiarized submissions and observe that no single algorithm appears to be sufficient to detect all of the cases.	Investigating Student Plagiarism Patterns and Correlations to Grades	NA:NA	2017
Lori Pollock:Crystalla Mouza:Amanda Czik:Alexis Little:Debra Coffey:Joan Buttram	The CS for All initiative places increased emphasis on the need to prepare K-12 teachers of computer science (CS). Professional development (PD) programs continue to be an essential mechanism for preparing in-service teachers who have little formal background in CS content, skills, and teaching pedagogy. While increased investment by federal agencies and the industry has raised the number of CS PD opportunities for K-12 teachers, there has been limited study of how teachers apply what they learn back in their classroom. This paper describes an in-depth qualitative study through interviews of 28 elementary, middle and high school teachers who participated in summer PD in preparation of teaching a full CS course or integrate CS modules into existing courses (e.g., science, engineering, business, technology, etc). The interview protocol focused on educators' involvement in the PD, specific skills and strategies they learned, whether and how they have been able to apply these new skills in the classroom, what facilitated or impeded this application, and how students have responded.	From Professional Development to the Classroom: Findings from CS K-12 Teachers	NA:NA:NA:NA:NA:NA	2017
Thomas W. Price:Yihuan Dong:Dragan Lipovac	Programming environments intentionally designed to support novices have become increasingly popular, and growing research supports their efficacy. While these environments offer features to engage students and reduce the burden of syntax errors, they currently offer little support to students who get stuck and need expert assistance. Intelligent Tutoring Systems (ITSs) are computer systems designed to play this role, helping and guiding students to achieve better learning outcomes. We present iSnap, an extension to the Snap programming environment which adds some key features of ITSs, including detailed logging and automatically generated hints. We share results from a pilot study of iSnap, indicating that students are generally willing to use hints and that hints can create positive outcomes. We also highlight some key challenges encountered in the pilot study and discuss their implications for future work.	iSnap: Towards Intelligent Tutoring in Novice Programming Environments	NA:NA:NA	2017
Noa Ragonis:Ronit Shmallo	The paper presents research conducted with high school (HS) students (N=86) learning object-oriented programming (OOP) and computer science HS teachers (N=48). The focus was on students' and teachers' understanding of the this reference. Proper conceptualization of this indicates an understanding of objects in general and of the current object, and it involves various aspects of programming variants. Students' preferences as to the use of the this reference were also examined. Findings revealed a lack of understanding of both the implication and the implementation of this; only 45% of the students expressed understanding of when we must use this; only 60% expressed understanding of when not to use this, and only 24% expressed clear understanding in their definition of this. Even correct answers do not necessarily indicate conceptual understanding, rather a repetition of definitions or programming habits, or a reliance on operative aspects of the implementation. The teachers expressed a considerable lack of clarity in accurately characterizing the correctness of students' answers.	On the (Mis) Understanding of the "this" Reference	NA:NA	2017
Kathryn Rich:Carla Strickland:Diana Franklin	Research on appropriate topics and goals for computer science (CS) education in elementary and middle school has been ongoing for decades, but the recent movement toward CS for all requires the research community to gain a better understanding of what is most important to teach, to whom, and in what order. We conducted a literature review with specific attention to cataloging computer science learning goals that experts theorize are important to teach as well as learning goals that have been explored and researched with students in K-8. By mapping the former onto the latter, we discovered six categories of goals that are theorized as important but, according to our review, are yet to be researched with K-8 students. We discuss the potential implications of these gaps for future research.	A Literature Review through the Lens of Computer Science Learning Goals Theorized and Explored in Research	NA:NA:NA	2017
Brandon Rodriguez:Stephen Kennicutt:Cyndi Rader:Tracy Camp	Computer Science (CS) Unplugged activities have been deployed in many informal settings to present computing concepts in an engaging manner. To justify use in the classroom, however, it is critical for activities to have a strong educational component. For the past three years, we have been developing and refining a CS Unplugged curriculum for use in middle school classrooms. In this paper, we describe an assessment that maps questions from a comprehensive project to computational thinking (CT) skills and Bloom's Taxonomy. We present results from two different deployments and discuss limitations and implications of our approach.	Assessing Computational Thinking in CS Unplugged Activities	NA:NA:NA:NA	2017
Fernando J. Rodríguez:Kimberly Michelle Price:Kristy Elizabeth Boyer	Pair programming is a collaboration paradigm that has been increasingly adopted in computer science education. Research has established that pair programming can hold benefits for students' learning and attitudes, but comparatively little is known about the ways in which the collaborative process benefits students' CS learning. This paper examines the collaboration process, comparing important outcomes with how students' dialogue and problem-solving approaches unfolded. The results show that the collaboration is more effective when both partners make substantive dialogue contributions, express uncertainty, and resolve it. In particular, driver dialogue expressivity is associated with improved outcomes. The findings provide insight into the ways in which pair programming dialogue benefits student learning during CS problem solving.	Exploring the Pair Programming Process: Characteristics of Effective Collaboration	NA:NA:NA	2017
Linda J. Sax:Kathleen J. Lehman:Christina Zavala	As enrollments in computer science (CS) undergraduate programs are booming, CS departments are struggling to accommodate more students while also seeking to bring more women and underrepresented minority (URM) students into the field. A particular burden has been placed on introductory CS (i.e., CS1) courses to navigate these important, but sometimes competing, realities. As CS departments employ strategies to manage growing enrollments and recruit more diverse students into their CS1 courses, administrators and faculty will benefit from knowing more about the students who take these courses and how they may differ based on their major (CS majors and non-majors), gender, and race/ethnicity. This paper presents findings from a national study of CS1 courses and discusses key differences in introductory course students' demographic and background characteristics and pre-course experiences across these groups.	Examining the Enrollment Growth: Non-CS Majors in CS1 Courses	NA:NA:NA	2017
Benjamin J. Schreiber:John P. Dougherty	We discuss two video series, one that serves as an introduction to Binary Search, and the other to Selection Sort. Each narrated series begins with an overview of the algorithm and step-by-step simulations on an interactive blackboard. The series next proceeds to a video that illustrates how to perform a complexity analysis with guided examples, and then applies that process to the associated algorithm. The series concludes with a video showcasing a song with algorithm pseudocode as lyrics, which are utilized line by line to implement the algorithm in code. These video series were piloted among a set of introductory courses involving coding and algorithmic concepts at two colleges. We assess the effectiveness of each series in terms of conceptual understanding and changes in student attitudes.	Assessment of Introducing Algorithms with Video Lectures and Pseudocode Rhymed to a Melody	NA:NA	2017
Nick Senske	Non-major education continues to be a growing area of study in computer science education research. This paper focuses on architects as an audience and the teaching of computer science by architects, who successfully applied computer science education research. The author describes the structure and development of a required computational thinking course with an average yearly enrollment of 69 students and how it applied best practices from Media Computation to improve student outcomes and engagement. A four-year impact study found that a flipped classroom model combined with peer learning methods was superior to traditional lectures and labs for improving student performance and reducing attrition. Comparisons of pre- and post-class surveys revealed an improved perception of computing and an increased interest in the subject -- a positive outcome for a required introductory course. The author also studied the course's long-term effects. Three years after taking the course, a majority of students felt they retained what they learned and that learning computational thinking helped them to learn new software and perform better in advanced computing courses. By taking into account how architects learn and revising in response to assessments, we believe our course structure and teaching methodology demonstrates an effective case for applying computer science education research within an architectural curriculum.	Evaluation and Impact of a Required Computational Thinking Course for Architecture Students	NA	2017
Sue Sentance:Jane Waite:Steve Hodges:Emily MacLeod:Lucy Yeomans	The recent introduction of computer science (CS) education into schools in many countries has led to a surge in interest in programming tools and approaches which make CS concepts and tasks engaging, motivating and accessible to all. There is renewed interest in supporting learning through physical computing, which has been shown to be motivational whilst offering opportunities for collaboration and creativity. Within this context the BBC recently led a collaborative venture in the UK to develop a portable and low-cost programmable device. The consortium funded and produced one million devices, enough for every 11-12 year-old in the UK. In this paper, we report on what we believe to be the first study to investigate the usability and affordances of the BBC micro:bit. We interviewed 15 teachers and 54 pupils in schools in England about their experiences with the device who were, in general, enthusiastic about the potential of the BBC micro:bit. We describe pupils' experiences in terms of usability, creativity, the tangibility of the device and their learning of programming, and analyse their experiences in the context of previously reported benefits of physical computing.	"Creating Cool Stuff": Pupils' Experience of the BBC micro:bit	NA:NA:NA:NA:NA	2017
Sue Sentance:Andrew Csizmadia	In the context of rapid curriculum change, teaching computer science in school requires new skills and knowledge that existing teachers may not have. As well as a programme of teacher professional development (TPD), certification can be used to provide recognition to in-service teachers who have made the transition to computer science. The BCS Certificate in Computer Science Teaching has been designed and developed to give teachers professional recognition of their competence in teaching the computer science elements of the Computing curriculum. In this paper we describe the innovative design of this national certification and our experience over the last two years of its implementation; we are not aware of any similar scheme to offer professional recognition to in-service K-12 computer science teachers.	Professional Recognition Matters: Certification for In-service Computer Science Teachers	NA:NA	2017
Duane F. Shell:Leen-Kiat Soh:Abraham E. Flanigan:Markeya S. Peteranetz:Elizabeth Ingraham	Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear "dosage effect" of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed.	Improving Students' Learning and Achievement in CS Classrooms through Computational Creativity Exercises that Integrate Computational and Creative Thinking	NA:NA:NA:NA:NA	2017
Aaron J. Smith:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel	Increased enrollments in computer science programs presents a new challenge of quickly accommodating higher enrollment in computer science introductory courses. Because peer teaching scales with enrollment size, it is a promising solution for supporting computer science students in this setting. However, pedagogical and logistical challenges can arise when implementing a large peer teaching program. To study these challenges, we developed a transparent online tool, My Digital Hand, for tracking one-to-one peer teaching interactions. We deployed the tool across three universities in large CS2 computer science courses. The data gathered confirms the pedagogical and logistical challenges that exist at scale and gives insight into ways we might address them. Using this information, we developed the second iteration of My Digital Hand to better support peer teaching. This paper presents the modified tool for use by the computer science education community.	My Digital Hand: A Tool for Scaling Up One-to-One Peer Teaching in Support of Computer Science Learning	NA:NA:NA:NA:NA	2017
Sohum Sohoni:Scotty D. Craig:Shaowen Lu	This paper presents an initial investigation on the effect of non-pre-exposure to an instruction set architecture (ISA). In particular, a specialized ISA based on the Progressive Learning Platform (PLP) is implemented in the computer architecture course. Prior research has demonstrated the benefits of using PLP in the computer engineering curriculum. However, it is possible that the PLP ISA could hinder learning by requiring extra work for students to master it (extraneous load), if they have not had prior exposure to it. To investigate this, the current study implemented a quasi-experimental design with two groups (students knowledgeable with PLP from a previous course, and new users) and a pretest to determine differences in students' familiarity with the common terms in computer engineering, pre-requisite knowledge for a computer architecture course, and course knowledge. Both sets of students implemented the PLP CPU in behavioral Verilog in the computer architecture course. Results of the evaluations revealed significant learning from pretest to posttest by students in both groups on all measures. Moreover, no group differences were seen, indicating that pre exposure to an ISA (specifically PLP ISA) might not be necessary for successful course implementation. This is promising, considering that many students at 4-year colleges in the USA transfer from other institutions, and may have exposure to different instruction set architectures in their prerequisite courses. The sample size for this study is too small to draw a firm conclusion, but these preliminary findings merit further exploration of this topic.	Impact of Prior Exposure to the PLP Instruction Set Architecture in a Computer Architecture Course	NA:NA:NA	2017
Shashank Srikant:Varun Aggarwal	Data-driven decision making is fast becoming a necessary skill in jobs across the board. The industry today uses analytics and machine learning to get useful insights from a wealth of digital information in order to make decisions. With data science becoming an important skill needed in varying degrees of complexity by the workforce of the near future, we felt the need to expose school-goers to its power through a hands-on exercise. We organized a half-day long data science tutorial for kids in grades 5 through 9 (10-15 years old). Our aim was to expose them to the full cycle of a typical supervised learning approach - data collection, data entry, data visualization, feature engineering, model building, model testing and data permissions. We discuss herein the design choices made while developing the dataset, the method and the pedagogy for the tutorial. These choices aimed to maximize student engagement while ensuring minimal pre-requisite knowledge. This was a challenging task given that we limited the pre-requisites for the kids to the knowledge of counting, addition, percentages, comparisons and a basic exposure to operating computers. By designing an exercise with the stated principles, we were able to provide to kids an exciting, hands-on introduction to data science, as confirmed by their experiences. To the best of the authors' knowledge, the tutorial was the first of its kind. Considering the positive reception of such a tutorial, we hope that educators across the world are encouraged to introduce data science in their respective curricula for high-schoolers and are able to use the principles laid out in this work to build full-fledged courses.	Introducing Data Science to School Kids	NA:NA	2017
Dannie M. Stanley	"The education of all software engineering students must include student experiences with the professional practice of software engineering." There have been many models proposed to include professional practice in computer science and software engineering curricula. Some schools simulate professional practice in the classroom with large term or multi-term projects. Others require students to engage in professional practice outside of the classroom in an internship or co-op program. We have been exploring an alternative approach to integrating professional practice into our computer science curriculum. In our approach, we partner with an external software consulting company who employs our students directly. Students telecommute from campus and are engaged directly in real-world software development projects. We provide an academic advisor to help guide the development of the program, look for learning opportunities in the work, and mentor students. We describe our approach, solutions to the challenges we faced, and the direct and indirect benefits of our approach.	CORP: Co-operative Remote Practicum Work Experience Model for Software Engineering Education	NA	2017
Ben Stephenson:Michelle Craig:Daniel Zingaro:Diane Horton:Danny Heap:Elaine Huynh	An exam wrapper is a structured activity that students engage in after their instructor has graded and returned an exam, and is designed to promote self-reflection and improve study practices. This paper describes two studies examining the efficacy and student perceptions of exam wrappers. The studies were conducted at two major Canadian universities, using complementary research designs. We report that neither study produced evidence that exam wrappers have a significant effect on final exam scores or on course drop rates. However, we also find that the use of wrappers was associated with improved rates of test pickup and increased scores on a course evaluation question regarding the fairness of evaluation methods. Given these results, we advise instructors who are considering the use of exam wrappers to review the evidence for other possible interventions that may more effectively serve the same goals.	Exam Wrappers: Not a Silver Bullet	NA:NA:NA:NA:NA:NA	2017
Kathleen Timmerman:Travis Doom	An important part of maintaining and continuously improving programs is assessing student objectives to evaluate the impact of change. This paper reviews an infrastructure that was designed to give continuous periodic direct measurements of retained relevant knowledge throughout a computer science and computer engineering baccalaureate curriculum. This infrastructure is designed to give immediate feedback to students and instructors as well as long-term assessment of program health. Additionally, due to the continuous nature of the assessment, its deployment is designed to avoid undue burden in deployment.	Infrastructure for Continuous Assessment of Retained Relevant Knowledge	NA:NA	2017
David S. Touretzky:Christina Gardner-McCune:Ashish Aggarwal	Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft's Kodu Game Lab; the second group was also given four semantic "Laws of Kodu" to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.	Semantic Reasoning in Young Programmers	NA:NA:NA	2017
Arie Van Deursen:Maurício Aniche:Joop Aué:Rogier Slag:Michael De Jong:Alex Nederlof:Eric Bouwers	Teaching software architecture is hard. The topic is abstract and is best understood by experiencing it, which requires proper scale to fully grasp its complexity. Furthermore, students need to practice both technical and social skills to become good software architects. To overcome these teaching challenges, we developed the Collaborative Software Architecture Course. In this course, participants work together to study and document a large, open source software system of their own choice. In the process, all communication is transparent in order to foster an open learning environment, and the end-result is published as an online book to benefit the larger open source community. We have taught this course during the past four years to classes of 50-100 students each. Our experience suggests that: (1) open source systems can be successfully used to let students gain experience with key software architecture concepts, (2) students are capable of making code contributions to the open source projects, (3) integrators (architects) from open source systems are willing to interact with students about their contributions, (4) working together on a joint book helps teams to look beyond their own work, and study the architectural descriptions produced by the other teams.	A Collaborative Approach to Teaching Software Architecture	NA:NA:NA:NA:NA:NA:NA	2017
Tammy VanDeGrift	This paper describes the creation, use, and evaluation of POGIL (Process Oriented Guided Inquiry Learning) activities in a Data Structures course. POGIL draws upon constructivist and collaborative learning theories in which students work in teams through guided sets of questions. The purpose of this study was to see how students valued POGIL activities in terms of their learning. Survey responses were used to assess how students valued POGIL. Over 90% of students stated that POGIL helped them learn the material. Not only did it help them learn data structures, they reported value in working through problems with others, seeing how others think, being accountable for their own learning, and using the activities to review the material. Overall, POGIL was valued by students and this teaching method could be of value to other computing courses.	POGIL Activities in Data Structures: What do Students Value?	NA	2017
Mickey Vellukunnel:Philip Buffum:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel	Online discussion forums are widely used and hold great promise for supporting students in learning computer science. Understanding how we can best support students in learning computer science through online discussion forums is an important open question for the CS Ed community. This paper analyzes discussion forum posts from 395 students enrolled in CS2 across two different universities. The results demonstrate that students use the discussion forums often for logistical and relatively shallow questions. However, the largest portion of questions reflect some level of constructive problem-solving activity, and are positively correlated with course grades. Questions that neither describe students' reasoning nor their attempts to solve the problem constitute the smallest percentage of questions, but these questions may be particularly important to attend to because of their relationship to students' prior experience.	Deconstructing the Discussion Forum: Student Questions and Computer Science Learning	NA:NA:NA:NA:NA:NA	2017
Sara Vogel:Rafi Santo:Dixie Ching	As momentum grows to expand K12 Computer Science (CS) education, associated public narratives often assume core questions about why CS should be taught to all students have been sufficiently answered. Having clarity around the core purposes that varied stakeholders are envisioning is critical to ensuring the coherence of CS4All initiatives. This study presents a framework examining the range of arguments for and projected impacts of CS education programs. Based on data drawn from a researcher- facilitated participatory knowledge building process involving 26 CS education stakeholders who articulated 161 arguments, we identify seven areas of impact present in arguments for universal CS education: (1) economic and workforce development, (2) equity and social justice, (3) competencies and literacies, (4) citizenship and civic life, (5) scientific, technological and social innovation, (6) school improvement and reform and (7) fun, fulfillment and personal agency. Findings show that individual arguments and visions for CS education often reference multiple impact areas. We intend for this framework to support reflection by CS education stakeholders to consider how their current initiatives index different ideologies about what CS4All projects are meant to achieve.	Visions of Computer Science Education: Unpacking Arguments for and Projected Impacts of CS4All Initiatives	NA:NA:NA	2017
Jennifer Wang:Sepehr Hejazi Moghadam	As computer science (CS) education expands at the K-12 level, we must be careful to ensure that CS neither exacerbates existing equity gaps in education nor hinders efforts to diversify the field of CS. In this paper, we discuss structural and social barriers that influence Blacks, Hispanics, and girls, based on surveys of 1,672 students, 1,677 parents, 1,008 teachers, 9,805 principals, and 2,307 superintendents in the United States. We find that despite higher interest in CS among Black and Hispanic students and parents, these students experience greater structural barriers in accessing computers and CS classes than White students. And while girls have the same access as boys, social barriers exist with girls reporting lower awareness of CS opportunities outside of classes, less encouragement from teachers and parents, and less exposure to CS role models in the media. It is critical for expanding CS opportunities to address the unique issues for each group.	Diversity Barriers in K-12 Computer Science Education: Structural and Social	NA:NA	2017
David C. Webb:Hilarie Nickerson:Jeffrey B. Bush	This paper compares student outcomes from 75 K-12 teachers who participated in either online, blended, or face-to-face professional development design to support teacher implementation of a programming curriculum during the regular school day. The results are based on survey responses collected over two years from 4,832 students. With only one exception, the results showed no negative student outcomes when comparing student survey results from teachers who participated in online professional development compared to students of teachers who participated in face-to-face professional development. Students who had teachers who participated in face-to-face professional development, however, expressed stronger interest in designing their own games at home. These results suggest that online professional development that is designed to support K-12 teacher classroom implementation of CS education curricula is a viable model with respect to student outcomes. Recommendations for the design of online curricula for CS education are discussed.	A Comparative Analysis of Online and Face-to-Face Professional Development Models for CS Education	NA:NA:NA	2017
Joanna Weidler-Lewis:Wendy DuBow:Alexis Kaminsky	Understanding how to increase participation and continued persistence of women in computing is a perennial problem. This paper explores the ways in which participation in computing can be defined either by a narrow disciplinary practice framework or a more expansive social practice framework. How participation in computing is defined is consequential regarding our understanding of women's persistence in computing. The data for this paper come from 64 in-depth, qualitative interviews with young women who in high school expressed interest in computing by looking into NCWIT's Aspirations in Computing Award. Analyses of the interviews show that defining participation in computing from a disciplinary perspective unduly prohibits some women from full membership in computing communities. Findings show that some women who self-identify with the computing community are not fully recognized by other members of the computing community.	Defining a Discipline or Shaping a Community: Constraints on Broadening Participation in Computing	NA:NA:NA	2017
David Weintrop:Nathan Holbert	Blocks-based, graphical programming environments are increasingly becoming the way that novices are being introduced to the practice of programming and the field of computer science more broadly. An open question surrounding the use of such tools is how well they prepare learners for using more conventional text-based programming languages. In an effort to address this transition, new programming environments are providing support for both blocks-based and text-based programming. In this paper, we present findings from a study investigating how learners use a dual-modality environment where they can choose to work in either a blocks-based or text-based interface, moving between them as they choose. Our analysis investigates what modality learners choose to work in, and if and why they move from one representation to the other within a single project. We conclude with a discussion of design implications and future directions for this work. This work contributes to our understanding of the affordances of blocks-based programming environments and advances our knowledge on how best to utilize them.	From Blocks to Text and Back: Programming Patterns in a Dual-Modality Environment	NA:NA	2017
Valerie Barr:Bryan Catron:Christopher Healy:Kate Lockwood:Anil M. Shende:Andrea Tartaro:Kevin Treu	NA	Computer Science Topics in First- and Second- Year Seminar Courses	NA:NA:NA:NA:NA:NA:NA	2017
Tracy Camp:Emmanuel Schanzer:Joanna Goode:Owen Astrachan:Ed Campos	Professional development (PD) has long been recognized as one of the key ingredients in K-12 CS Education, particularly when addressing the problem of underserved communities. Over the last decade, significant work has been done to create professional development and curricular offerings that are research based, with a proven track record. Bootstrap, Exploring Computer Science and AP CS Principles represent these types of programs. Each of these programs has developed high-quality PD for educators and have been recognized by the White House as exemplar courses. However, economies of scale make it difficult to expand to the vast number of small school districts around the country, including some of the most isolated and underserved areas such as rural communities and Native American reservations. This panel will discuss an alternative model - "CSPdWeek" -- a national event aimed at providing best-in-class PD to teachers across the country. The inaugural CSPdWeek took place in July, 2016 at Colorado School of Mines, and provided a week-long residential experience for teachers attending one of three teacher-focused professional development programs. Over 240 classroom teachers attended CSPdWeek, making this professional development the single largest cross-curricular effort in preparing U.S. teachers to teach computing as part of the "CS for All" movement. This panel will focus on why this year's CSPdWeek was such a success and what was behind social media testimonies from teachers who talked about being part of an educational movement.	CSPd Week: A Scalable Model for Preparing Teachers for CS for All	NA:NA:NA:NA:NA	2017
Alison Clear:Allen Parrish:Ming Zhang:Gerritt C. van der Veer	This panel discusses the development of a global, futuristic computing overview curricular report called Computing Curricular 2020, also known as CC2020. This new document, which is an initiative of the ACM Education Council, published by ACM, will be a revision of one of the most cited curricula documents called Computing Curricula 2005, also known as CC2005 [1]. CC2020 will build on the attributes of the existing predecessor. It will encompass broad global inclusion by welcoming active participation from computing societies around the world such as the Information Processing Society of Japan (IPSJ). CC2020 will also be futuristic in its development. While the new document will include an update to reflect existing curricula reports for computer engineering, computer science, information systems, information technology, and software engineering, it will also describe ways in which new and emerging curricular areas would be included within the framework of the report. The working group of CC2020 will include approximately two dozen professionals from academia and industry who will engage in crafting the new document. Additionally, a subset of about ten people of the working group forms the executive or core operational unit of the CC2020 project. The panelists for this representation are members of this executive group. Their global origins and affiliations represent the diversity of interaction that is one of the hallmarks of this undertaking. The panelists will present their views on the future aspects of the CC2020 report from the perspective of their experiences and affiliations, as well as their countries. The panelists will also provide contrasting points of view on topics relevant to the project. Audience interaction and participation will consume approximately fifty percent of the time allocated to the presentation.	CC2020: A Vision on Computing Curricula	NA:NA:NA:NA	2017
Leigh Ann DeLyser:Tom O'Connell:Diane Levitt:Rebecca Novak:Kevin Wang	Computer Science Education is rapidly expanding in the United States[5]. As a part of this expansion, many programs are using university students and industry volunteers for a variety of purposes within schools. These volunteers can bring a wealth of content knowledge and professional experience in their interactions with students [3], and can be inspirational when talking about the problems they work on[1]. Some programs even advocate for the use of professionals for instruction based upon their content knowledge[2]. Although professionals often have a high level of content knowledge, they may lack the training or experience necessary to be effective in the classroom[3, 4]. This panel brings together 4 different organizations with experience working with content expert volunteers with widely disparate preparation in teaching. In this panel we will share lessons learned by the organizations whose programs rely on volunteer instructors and mentors, that combined work with over 1,200 volunteers for multiple years. Topics discussed by the panel will include recruitment and selection of volunteers, volunteer training prior to entering the classroom, appropriate supports for volunteers throughout the experience, volunteer retention strategies, and preliminary efforts at evaluating the implementations. Panelists will also discuss volunteers for short-term engagements such as speaking opportunities and school-based hackathons.	Volunteer Best Practices for K12 CS	NA:NA:NA:NA:NA	2017
John DeNero:Sumukh Sridhara:Manuel Pérez-Quiñones:Aatish Nayak:Ben Leong	NA	Beyond Autograding: Advances in Student Feedback Platforms	NA:NA:NA:NA:NA	2017
Lien Diaz:Frances P. Trees:Dale Reed:Richard Kick:Andrew Kuemmel	The inaugural launch of the College Board's Advanced Placement Computer Science Principles (AP CSP) course coincided within the same year of the announcement of CS For All, a bold national initiative that seeks to support the expansion of computer science education in America, and to empower students to learn computer science and obtain the computational thinking skills needed to thrive in today's transforming digital world. The intent of the AP CSP course supports this initiative as it aims to promote social justice and equity in computer science education. The course is designed to be appealing to a broader audience, including females and minority students, who are underrepresented in computer science, thus providing increased access and opportunity for students to study computer science at the secondary level.	Social Justice and Equity in CS Education: Inaugural Launch of AP Computer Science Principles	NA:NA:NA:NA:NA	2017
Wendy DuBow:Ignatios Vakalis:Laura Dillon:Helen Hu	Recently, many computing departments in universities and colleges around the nation have seen increases in enrollments in the major. While these increases are largely welcome, it is important that the student population be diversified even as enrollments swell. What are departments doing to ensure that women are both recruited and retained in this changing environment? This panel will share interventions undertaken by three U.S. post-secondary institutions that have focused on increasing their female and underrepresented student enrollment. Their efforts all include multi-pronged approaches, which is consistent with the social science research on how to create institutional reform in academic departments [1]. These institutions have made changes that reflect increased departmental engagement with recruitment and retention for diversity: a shift in individual faculty pedagogical strategies, introductory course restructuring, as well as more outreach and preparatory programs for incoming students. These departments have not only implemented existing evidence-based practices to make these lasting changes, but have tried new ideas as well.	Increasing Diversity in the Face of Enrollment Increases	NA:NA:NA:NA	2017
Jeffrey Forbes:David J. Malan:Heather Pon-Barry:Stuart Reges:Mehran Sahami	Undergraduates are widely used in support of Computer Science (CS) departments' teaching missions as teaching assistants, peer mentors, section leaders, course assistants, and tutors. Those undergraduates engaged in teaching have the opportunity to deeply engage with CS concepts and develop key communication and social competencies. As enrollments surge, undergraduate teaching assistants (UTAs) play a larger role in student experience and outcomes. While faculty and graduate student instructional support does not necessarily increase with the number of students in our courses, the number of qualified undergraduate teaching assistants for introductory CS courses should scale with the number of students in our courses. With large courses, the significance of the UTAs' role in students' learning likely also increases. Students have relatively little interaction with the instructor, and faculty may have more challenges monitoring and supporting individual UTAs. UTAs have a major role in affecting climate in computer science courses. The climate in large courses has substantial implications for students from groups traditionally underrepresented in computing. This panel will discuss how undergraduate teaching assistants can serve as a scalable effective teaching resource that benefits both the students in the course and the UTAs themselves.	Scaling Introductory Courses Using Undergraduate Teaching Assistants	NA:NA:NA:NA:NA	2017
Ria Galanos:Whitaker Brand:Sumukh Sridhara:Mike Zamansky:Evelyn Zayas	The pace of technology for use in computing education is staggering. In the last few years, the following technologies have completely transformed our teaching: Piazza, GradeScope, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mic (for audio), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the particular configuration options required to make their technology "sing". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any "gotchas" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite "can't live without" technologies as well.	Technology We Can't Live Without!: revisited	NA:NA:NA:NA:NA	2017
Jeff Gray:Jennifer Rosato:Bradley Beth:Nigamanth Sridhar	NA	Teaching the Global Impact of Computing	NA:NA:NA:NA	2017
Mark Guzdial:Barbara Ericson:W. Richards Adrion:Megean Garvin	In January 2016, US President Barack Obama started an initiative to provide CS for All -- with the goal that all school students should have access to computing education. Computing departments in higher education have a particularly important role to play in this initiative. It's in our best interest to get involved, since the effort can potentially improve the quality of our incoming students. CS Departments have unique insights as subject-matter experts to inform the development of standards. We can provide leadership to inform and influence education policy. In this session, we will present a variety of ways in which departments and faculty can support CS for All and will answer audience questions about the initiative. Our goal is to provide concrete positive actions for faculty.	The Role of CS Departments in The US President's "CS for All" Initiative	NA:NA:NA:NA	2017
Helen H. Hu:Douglas Blank:Albert Chan:Travis Doom	TIDES (Teaching to Increase Diversity and Equity in STEM) is a three-year initiative to transform colleges and universities by changing what STEM faculty, especially CS instructors, are doing in the classroom to encourage the success of their students, particularly those that have been traditionally underrepresented in computer science. Each of the twenty projects selected proposed new interdisciplinary curricula and adopted culturally sensitive pedagogies, with an eye towards departmental and institutional change. The four panelists will each speak about their TIDES projects, which all involved educating faculty about cultural competency. Three of the panelists infused introductory CS courses with applications from other disciplines, while one of the projects taught computational skills in natural science courses.	Panel: Teaching To Increase Diversity and Equity in STEM	NA:NA:NA:NA	2017
Kimberly Hughes:Carol L. Fletcher:Leigh Ann DeLyser:Anthony Owen	Many states are taking up the President's challenge to provide CS for All. One of the most significant barriers to realizing this goal is the lack of trained and certified CS teachers. Building teacher capacity on a large scale is a challenge each of these panelists has tackled in their own region. Panelists will discuss the pros and cons of targeting in-service vs. pre-service teachers, online vs. face-to-face training, carrots vs. sticks, top down vs. bottom up strategies, and long-term vs. short term solutions to building capacity across an entire state or metropolitan area. Panelists represent CS for All efforts from Texas, New York City, and Arkansas.	Building CS Teaching Capacity: Comparing Strategies for Achieving Large Scale Impact	NA:NA:NA:NA	2017
Christian Murphy:Kevin Buffardi:Josh Dehlinger:Lynn Lambert:Nanette Veilleux	A common refrain from Senior Exit Surveys and Alumni Surveys is the desire to work on "real-world," "practical" and "hands-on" projects using industry-ready tools and development environments. To assuage this, institutions have moved towards adopting Free and Open Source Software (FOSS) as an avenue to provide meaningful, applied learning interventions to students. Through these experiences, students benefit from engagement with various communities including: the community of contributors to the FOSS project; the community of local software developers; the community of citizens who reside in the local area; the community of students at their institution and others; and, the community of people impacted by the FOSS project. These engagements motivate students, enhance their communication and technical skills, allow them to grow and become more confident, help them form professional networks, and provide the "real-world" projects they seek. In this panel, we will discuss our experiences in engaging students with five different types of communities as part of incorporating FOSS into our courses, focusing on how other educators can provide the same benefits to their students as well. In order to satisfy the time constraints of the panel, the last two authors will present together.	Community Engagement with Free and Open Source Software	NA:NA:NA:NA:NA	2017
Farzana Rahman:Helen Hu:Dennis Brylow:Clif Kussmaul	In recent years, there has been a dramatic increase in computer science undergraduate research activities at colleges and universities nationwide. Developing and maintaining undergraduate research benefits students, faculty mentors, and the institution. Incorporating a research culture along with a sound academic foundation enables students to develop independent critical thinking skills along with effective oral and written communication skills. However, we are in a time when budgets are being tightened and some institutions do not have the resources to pursue such initiatives. Traditionally research focused universities (like R1) have access to various large funding sources to host Research Experience for Undergraduate (REU) programs. R1 universities have established records of accomplishment for innovative research and the faculties at R1 institutions have lab infrastructure to blend such activities for undergraduate students. However, non-R1 institutions (like community colleges, undergraduate, masters, and to some extent R2 institutions) lack resources, lab infrastructure and above all a track record for innovative research that makes it hard for them to obtain funding to host an REU program. Thus, in this panel, our goal is to present ideas for establishing a track record and building an internally and externally funded Undergraduate Research experience (UR), particularly for non-R1 institutions. This involves obtaining funds to conduct the research and to secure travel funds to disseminate research results.	Bringing Undergraduate Research Experience in Non-R1 Institutions	NA:NA:NA:NA	2017
Richard Weiss:Casey W. O'Brien:Xenia Mountrouidou:Jens Mache	NA	The Passion, Beauty, and Joy of Teaching and Learning Cybersecurity	NA:NA:NA:NA	2017
Doug Baldwin:Grant Braught:Amanda Holland-Minkley	The SIGCSE Committee on Computing Education in Liberal Arts Colleges was approved in late 2015 and began organizing itself at SIGCSE 2016. The Committee has made an initial survey of the liberal arts computer science landscape, and has identified some central issues for more detailed study. This session will present the Committee's initial findings and future plans, and will solicit audience participation in refining the set of central issues and identifying possible resolutions to them.	Computing Education in Liberal Arts Colleges: A Status Report of the SIGCSE Committee	NA:NA:NA	2017
Douglas Baldwin:Valerie Barr:Amy Briggs:Jessen Havill:Bruce Maxwell:Henry M. Walker	In this special session, we share a variety of ways in which CS 1 courses can broaden their focus beyond programming. These courses strive to effectively introduce the fundamental ideas of computer science, and the importance of computing in broader contexts, without sacrificing programming rigor.	CS 1: Beyond Programming	NA:NA:NA:NA:NA:NA	2017
Bo Brinkman:Keith W. Miller	This session is intended as a fun and highly interactive way for college and high school teachers to increase their familiarity with the ACM Code of Ethics and Professional Conduct. Using a quiz show format, participants will be asked to provide solutions to knotty (and sometimes humorous) ethical challenges. This will be followed by think-pair-share (so that everyone gets involved), and then a presentation of the relevant sections of the ACM Code of Ethics and Professional Conduct. Members of the ACM's Committee on Professional Ethics will be on hand to collect feedback and questions about the Code, for use by the Code 2018 task force, and for the "Ask an Ethicist" feature at http://ethics.acm.org.	The Code of Ethics Quiz Show	NA:NA	2017
Legand Burge:Marlon Mejias:KaMar Galloway:Kinnis Gosha:Jean Muhammad	Underrepresented students and the institutions that serve these students need to recognize and address the unique challenges that impact their career pathways and successes. This special session will discuss challenges facing Minority Serving Institutions (MSIs) and how industry-academia partnerships can be a force in mitigating some of these challenges. We will explore how we as a community can work together to develop holistic programs to support student development and excellence. We will highlight the shortcomings, strengths and future of the Googler In Residence (GIR) program from the perspective of select participating colleges, as well as other successful initiatives in motion. It is also essential that promising interventions be shared and scaled across institutions that play an essential role in educating and preparing these students. We are still learning as we go, but this is an opportune time to come together as a community to share our challenges and solutions, to determine how we can move together and how we can all be involved as change advocates. It is meant to be interactive, create shared knowledge and help identify ways of moving forward serving MSIs.	Holistic Development of Underrepresented Students through Academic: Industry Partnerships	NA:NA:NA:NA:NA	2017
Diana Burley:Matt Bishop:Siddharth Kaza:David S. Gibson:Elizabeth Hawthorne:Scott Buck	In this special session, members of the ACM Joint Task Force (JTF) on Cybersecurity Education will provide an overview of the task force mission, objectives, and release a draft of the curricular guidelines. After the overview, task force members will engage session participants in the curricular development process and solicit feedback on the draft guidelines.	ACM Joint Task Force on Cybersecurity Education	NA:NA:NA:NA:NA:NA	2017
Kelsey Finkel:Kenneth E. Graves:Leigh Ann DeLyser	K12 CS education is expanding at an unprecedented scale throughout communities nationwide. Throughout research on CS education and education more broadly, the disconnect between research and practice, or research and implementation, is well documented. To enhance its relevance to and for practice, research should build on existing knowledge and account for local contexts, and the engagement of research and researchers should be coordinated to facilitate their connection to practice. In offering this session at SIGCSE, we likely will move away from "local contexts" to larger issues; research priorities, however, often are shaped by external, funding priorities and RFPs. The knowledge forum format will allow the community to engage in a process of setting its own agenda which can later be aligned to funding opportunities. Prioritizing topics and questions for research and implementation in ways that are rooted in the needs of instruction and that draw on collective expertise is increasingly important. The proposed special session addresses this issue through a systematic and tested prioritization format. Specific objectives of the proposed session will be to: (1) introduce the topic prioritization format to participants; (2) demonstrate how the format can be used to identify and to organize research priorities among a group of experts; (3) implement the format with members of the SIGSCE community; (4) plant the seeds for potential collaborations; (5) and solicit feedback from the SIGSCE community on how to improve the format.	Special Session: CS Education Research Knowledge Forum	NA:NA:NA	2017
Helen H. Hu:Chris Mayfield:Janice L. Pearce	POGIL (Process Oriented Guided Inquiry Learning) is a form of active learning where students work collaboratively through activities designed to guide them to discover concepts on their own. POGIL is based on the principle that students will learn and retain more when they construct their own understanding of the computer science (CS) content. Working in groups of three to four, students develop process skills, such as problem solving, communication, and teamwork. This special session will first provide SIGCSE attendees the opportunity to experience a CS POGIL activity for themselves. We will then discuss different ways that instructors might adopt POGIL for use in their classroom, and how the adoption of POGIL by multiple instructors in a department can change the culture of the department.	Special Session: Converting Your Teaching (or Even Your Whole Department!) to Active Learning via POGIL	NA:NA:NA	2017
Eileen Kraemer:Aubrey Lawson:Murali Sitaraman	This SIGCSE special session provides an opportunity for new researchers in CS education to learn the elements of successful computing education research of different types through a series of exemplar projects. Specifically, this session reports on the findings and example, successful CS education research projects that were discussed and presented at ICER 2016 UP (Understanding and Propagating) CS Ed Research Workshop, sponsored by the National Science Foundation. One goal of the session is to provide a way for proposers of computing education research to ensure that they have well identified education research questions and evaluation mechanisms that are appropriate for the proposal (exploratory vs. design & implementation) according to the Department of Education guidelines. The ICER Workshop was designed to focus exactly on this goal and report to the community.	Special Session: ICER UP CS Ed Research Workshop Summary-Essence of Illustrative Projects	NA:NA:NA	2017
Richard E. Ladner:Matt May	NA	Teaching Accessibility	NA:NA	2017
Renée McCauley:Bill Manaris:David Heise:Cate Sheller:Jennifer Jolley:Alan Zaring	Computing in the Arts (CITA) is an innovative, interdisciplinary curriculum model which integrates computer science and information technology with traditional art theory and practice. At the College of Charleston, implementation of an undergraduate CITA degree program resulted in an increase in the number of female and minority students pursuing computing-related degrees. [14] With the support of the National Science Foundation (DUE 1323605) and two partner institutions, we are building a community of educators who are creating innovative instructional materials that synthesize computing and the arts. Three faculty summer workshops (Wake Forest University in 2014, College of Charleston in 2015, and University of North Carolina at Asheville in 2016) involved over 70 computer science and arts faculty from across the U.S. What has emerged are various ways of synthesizing computer science and arts, including creation of new synthesis courses, modifications to traditional computing courses, development of new CITA-like curricula, design of CITA-like project experiences for undergrads, and other creative endeavors combining computer science techniques and traditional art practices and theory. During the session, we will discuss steps involved in moving forward and keeping this community growing. The session will involve audience participation, including exchanges between the session presenters and other audience members. The goal is to share our results, hear about results from other non-presenting colleagues, and to continue to grow the teaching of computer science and computational thinking to the arts and humanities masses, as well as to further enrich traditional computer science courses with creative applications, assignments, and projects.	Computing in the Arts: Curricular Innovations and Results	NA:NA:NA:NA:NA:NA	2017
Nick Parlante:Julie Zelenski:Dave Feinberg:Kunal Mishra:Josh Hug:Kevin Wayne:Michael Guerzhoy:Jackie Chi Kit Cheung:François Pitt	I suspect that students learn more from our programming assignments than from our much sweated-over lectures, with their slide transitions, clip art, and joke attempts. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Rebecca Vivian:Katrina Falkner:Claudia Szabo	This special session is based around key findings of a Barbara Cail STEM Fellowship that aims to inform key stakeholders about international best practices for broadening participation and diversity in computer science. This special session provides opportunities for the audience to contribute to this research discussion and to analyse and develop strategies for their own unique contexts, in a facilitated approach using the benchmark framework and key findings.	Broadening Participation in Computer Science: Key Strategies from International Findings	NA:NA:NA	2017
Michael Ball	While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. The demo will present a system an autograder for Snap!, a visual programming language inspired by Scratch. Our autograder is a hosted solution which would allow other courses to use our tools with little effort. At the most basic level, the autograder contains a database of questions, test cases, and a method for presenting results to students. However, there are additional features for integration through LTI and advanced data analysis. The autograder allows real-time feedback for students, and for instructors to write tests in JavaScript, and eventually Snap! directly. We will show how instructors can write test cases and integrate the tool into their classrooms. We will also demo some data analysis capabilities of our system. This demo should be informative to those working with visual programming languages, including ones other than Snap!. We hope to provide a useful tool, and gain feedback for future iterations of the software.	Writing Autograders for Snap! And Integrating them Into Your Course (Abstract Only)	NA	2017
Thomas Ball:Judith Bishop:Jonathan de Halleux	The micro:bit (http://www.microbit.org) is a pocket-sized, programmable computing device, designed to engage people with computing technology. The micro:bit is visually appealing, fun, easy to code and inexpensive. It is widely available at schools in the United Kingdom and is now being rolled out world-wide. Key features of the micro:bit that make it a great device for physical computing include a display of 25 LEDs, two programmable input buttons, a USB connector, an edge connector, built-in sensors (e.g. accelerometer, compass and temperature sensor), Bluetooth and a battery pack connector. With these physical attributes, the micro:bit can be used to interact with the world in engaging ways such as a watch, a guitar or a moisture sensor. Multi-person games and apps are possible since micro:bits can communicate with each other. Programming the micro:bit can take place on almost any device (laptop, tablet, desktop) that has a modern browser and a USB connection. The micro:bit platform supports programming in a block-based language or a safe version of JavaScript, which provides a progression for learners of different ages and experience levels. This demo will appeal to computer education researchers specializing in K-12 as well as to instructors wanting a new way to introduce computing in CS101 with a "maker" flavor. In the demo we will show the platform and the hardware. Attendees will have the chance to create apps on real micro:bits. It will be helpful to bring a device with a browser.	The Micro:bit: Hands-on Computing for the New Generation (Abstract Only)	NA:NA:NA	2017
Austin Cory Bart:Dennis Kafura	Introductory non-major learners face the challenge of mastering programming fundamentals while remaining sufficiently motivated to engage with the computing discipline. In particular, multi-disciplinary students struggle to find relevance in traditional computing curricula that tend to either emphasize abstract concepts, focus on entertainment (e.g., game and animation design), or rely on decontextualized settings. To address these issues, this demo introduces BlockPy, a web-based environment for Python (https://blockpy.com). The most powerful feature of BlockPy is a dual text/block view that beginners can freely move between, using advanced Mutual Language Translation techniques. The environment contextualizes introductory programming with data science by integrating real-world data including weather reports, classic book statistics, and historical crime data. A fusion of Blockly and Skulpt, the entire interface runs locally with no need for server sandboxing. BlockPy is also a platform for interactive, guided practice problems with automatic feedback that scaffolds learners. This demo will walk through the novel features of BlockPy's environment, including the instructor's perspective of creating new problems and how BlockPy can be embedded in modern LTI-compatible learning management systems. BlockPy is available online for free and is open-sourced on GitHub. This material is based on work supported by the NSF under Grants No. DGE-0822220, DUE-1444094, and DUE-1624320.	BlockPy Interactive Demo: Dual Text/Block Python Programming Environment for Guided Practice and Data Science (Abstract Only)	NA:NA	2017
Brian Broll:Akos Ledeczi	NetsBlox is a new collaborative learning environment extending Snap! with a few carefully selected abstractions that enable students to create distributed applications. In today's interconnected world, it will become increasingly important to have a basic understanding of computer networking and distributed computation yet these topics are rarely covered in K-12 curricula. Conversely, NetsBlox makes distributed programming accessible to beginner programmers using its simple yet powerful visual programming primitives, an intuitive user interface and a sophisticated cloud-based infrastructure. Moreover, the tool enables students to work together on the same project from different computers similarly to how Google Docs operate. This feature enables online collaboration and facilitates new ways to teach and learn programming. By allowing students to create multi-player games, NetsBlox provides increased motivation and is likely to prove engaging to students. By providing access to online public domain data sources, such as weather, earthquake, and air pollution data, in a unified manner, students will be able to create interesting science projects in a number of STEM fields promoting interdisciplinary learning. This technology demonstration will introduce the environment and demonstrate its utility in creating multi-player games, such as Battleship and Tic Tac Toe, as well as highlight two client-server applications that display weather and historical earthquake data, respectively, on top of an interactive Google Maps background. Audience members will be asked to participate in a massively parallel volunteer computing application doing prime factorization of large numbers. The open source public domain NetsBlox environment is accessible at http://netsblox.org.	Distributed Programming with NetsBlox is a Snap! (Abstract Only)	NA:NA	2017
Jason Freeman:Brian Magerko:Doug Edwards:Lea Ikkache	Participants of the session will discover EarSketch (https://earsketch.gatech.edu), a free, web-based learning environment that teaches introductory computer science through music. It aligns with Computer Science Principles and has been used in a variety of other educational contexts as well, ranging from late elementary through College. EarSketch provides an in-depth introduction to computer science and programming through composing, producing, and remixing music with Python and JavaScript code. No previous knowledge or experience in music, Python, or JavaScript is required to begin learning or teaching with EarSketch. Results from pilot studies show that EarSketch facilitates student learning about computation and improves student engagement in computing through parameters such as self-confidence, motivation, or intent to persist. This trend is particularly true for female and minority students, who are underrepresented today in US computer science classrooms. EarSketch comprises a curriculum, teacher materials, a coding environment, a DAW (Digital Audio Workstation), a sound database, and sharing tools. Fundamental computing concepts are introduced through curricular modules that teach how to place sounds, create rhythms, and manipulate effects, with a focus on popular genres such as hip hop and dubstep. The platform has over 77,000 users in computer science classrooms across the US and internationally. EarSketch receives funding from the National Science Foundation, the Scott Hudgens Family Foundation, the Arthur M. Blank Family Foundation, and the Google Inc. Fund of Tides Foundation.	EarSketch, a Web-application to Teach Computer Science through Music (Abstract Only)	NA:NA:NA:NA	2017
M. Muztaba Fuad	To improve student's class experience, the use of mobile devices has been steadily increasing. However, such use of mobile learning environments in the class is mostly static in nature through content delivery or traditional quiz taking. In CS courses, we need learning environments where students can interact with the problem and faculty can assess their learning skills in real-time using problems with different degree of difficulty. To facilitate such interactive problem solving using mobile devices, a comprehensive backend system is necessary. However, such system is not available to CS instructors. To facilitate in-class interactive problem solving, a Mobile Response System (MRS) is developed, which is independent of any interactive problems or its domain. This demo session will present details of NSF funded MRS software, associated pedagogy, and how to use it in the class. MRS provides faculty with the opportunity of evidence-based teaching by allowing students with exercises with different learning outcomes and by getting an instant feedback on their performance. The formative assessment information provided by MRS allows the faculty to have real-time evidence of students' comprehension of covered lecture materials on that particular class and also helps faculty to identify the concepts that need to be repeated or reinforced. MRS is open sourced, extensible and can render interactive exercise developed by third party developer.	Interactive Problem Solving Using Mobile Devices in the Classroom (Abstract Only)	NA	2017
Matthew Peveler:Jeramey Tyler:Samuel Breese:Barbara Cutler:Ana Milanova	Submitty (http://submitty.org) is an open source programming assignment submission system from the Rensselaer Center for Open Source Software (RCOS) at Rensselaer Polytechnic Institute (RPI). Students can submit their code via a web interface in a variety of ways, where it is then tested with a highly configurable and customizable automated grader. Students receive immediate feedback from the grader, and can resubmit to correct errors as needed. Through an online interface, TAs can access detailed grading results and supplement the automated scores with manual grading (numeric and written feedback) of overall program structure, good use of comments, reasonable error checking, etc. and any non-programming components of the assignment. The instructor can also configure the system to allow for a configurable late day policy on a per assignment and per student basis. We currently use Submitty in eight different courses (spanning from introductory through advanced topics) serving over 1500 students and 35+ instructors and TAs each week. We will present a range of "case study" assignment configurations in a hands-on demo, going from simple through complex, using a variety of different automated grading methods including per-character and per-line output difference checkers, external unit testing frameworks (such as JUnit), memory debugging tools (Valgrind and DrMemory), code coverage (e.g., Emma), static analysis tools, and custom graders. Submitty can be customized per test case as appropriate to apply resource limits (running time, number of processes, output file size, etc.) and to display or hide from students the program output, autograding results, and testing logs.	Submitty: An Open Source, Highly-Configurable Platform for Grading of Programming Assignments (Abstract Only)	NA:NA:NA:NA:NA	2017
Andreas Stefik:Richard Ladner	Quorum is a relatively new programming language that was originally designed for students with disabilities. In recent years, as its adoption has increased worldwide in K-12 (largely in middle/high school) and at universities, it has expanded to be a powerful, commercial-grade, programming language that includes support for 3D gaming, music, and other fun and creative activities. While new features are designed for all, they maintain compatibility for people with disabilities, including a novel way for individuals who are blind to create 3D games. Finally, Quorum is the first language to use human-factors evidence from both field data and randomized controlled trials in its design. This approach provides the broader research community an organized way to influence the design of the language over time according to evidence based practices. We call this approach evidence-oriented programming. A laptop would help participants follow along with the session and handouts will be provided. Quorum can be found at https://www.quorumlanguage.com/.	The Quorum Programming Language (Abstract Only)	NA:NA	2017
Alice Steinglass:Baker Franke:Sarah Filman	App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. This demonstration aims to give a brief overview of App Lab and its purpose and then move quickly into demonstrating the more advanced features of App Lab that few people know are even there! The audience should come away with knowledge and access to exemplars that highlight App lab's possibilities, and see some of its richer features in action. Finally we will end with a discussion about how best to integrate App Lab into existing courses. App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net.	App Lab: A Powerful JavaScript IDE for Rapid Prototyping of Small Data-backed Web Applications (Abstract Only)	NA:NA:NA	2017
Eric Walker:Julia Connelly:David Musicant	Version control systems are crucial tools for computer scientists, and the need for students to be fluent in them is well-recognized. However, Git and other version control systems (VCSs) are difficult to learn and use. Elegit is a new Git client that we created to help students learn how Git works while using it. Our approach is different from other GUI Git clients in that our key goals are not only to help students successfully use Git, but equally importantly to help students learn about how Git works in its own native way. We preserve standard Git terminology wherever possible, and place a high priority on not modifying the standard Git model. Simultaneously, we strive to make Elegit easy for beginners to use. This demo provides a brief tutorial on using Elegit, discussion on the process of designing the tool to do this, evaluation of the effectiveness of the tool, and improvements made based on this evaluation and our own learning of Git while developing the application. Information about Elegit can be found at http://elegit.org. This work is supported by a SIGCSE Special Projects Grant, and by Carleton College.	Elegit: Git Learning Tool for Students (Abstract Only)	NA:NA:NA	2017
Julia Bernd:Jonathan Corley	One of the most innovative features of the new AP Computer Science Principles course framework is that it includes the Global Impact of Computing-not just as an occasional flourish, but as one of its foundational Big Ideas (#7). The real-world impact of computing-on society and on their own lives-is a great hook that can stimulate students' lasting interest in computer science, whether in CSP or any other CS class. Teach Global Impact is a collaborative effort among leading computer science educators that leverages seven excellent CSP curricula and PD programs. (BJC, CISS, Code.org CSP, CS Matters, CSP CS4HS, Mobile CSP, and UTeach CSP.) These curricula are contributing activities that highlight the potential impacts of big data, multimedia, artificial intelligence, and Internet connectivity, among other things. We are working to bring together all of these existing Global Impact lesson materials into a unified resource, and to fill in any gaps by creating new materials, along with classroom strategy guides for teaching about impact. This lightning talk will introduce teachers to the resources available on the Teach Global Impact website, including a database of existing materials, new activities and strategy guides, and a Computing in the News feed featuring student-curated stories aligned with CSP learning objectives. We'll also talk about new activities in the works, including classroom simulations around net neutrality and encryption ethics, a lesson plan on online research and writing for CS, and a series of videos illustrating key essential knowledge points.	Teach Global Impact: A Resource for CSP (or Any CS Class!) (Abstract Only)	NA:NA	2017
Brian Broll:Akos Ledeczi	Visual programming environments have been effective educational resources but are typically limited to a single user at a time. Given the amount of collaboration in modern software development and the value of group projects for beginner programmers, providing collaboration capabilities could be invaluable for students using a block-based programming environment. Online collaboration support would not only allow students to more actively work together on projects but would also facilitate other educational activities such as tutoring and interactive demos. Moreover, providing robust collaboration utilities allows the programming environment to more closely reflect the team-based nature of large scale, real-world programming projects. Note that collaborative editing offers a number of additional benefits under the hood: the same underlying software code can easily provide detailed logging of student actions and the capability to replay them. That is, researchers will be able to study how students solve problems and not just the end result. To this end, we have extended the Snap! visual programming environment to support real-time collaboration similar to Google Docs. In our model of collaboration, sprites and scripts can be edited by multiple users simultaneously, but the execution of the programs on the stage remains local. But is this the best collaboration model for students? If not, what alternative model would be better? Should the entire programming environment be synchronized across collaborators? Would simple screen sharing be more effective? Finally, how can we leverage a real-time collaborative environment to promote teamwork on programming projects?	Bringing Real-Time Collaboration to Visual Programming (Abstract Only)	NA:NA	2017
Douglas H. Fisher	Course syllabi, exercises, assignments, and project specifications are creative acts of design. But there are no conventions for citing such works, as one would cite a research paper or patent. There are several potentially important reasons for establishing conventions for citing educational content, and thus tracking their diffusion and influence. (1) Design of courseware is at least as important to teaching as is delivering lectures and grading assessments. If citation conventions were established, then the degree of adoption by others could be part of a teaching-faculty member's professional evaluation. (2) Research grants often include education and outreach plans, and being able to track the influence of materials under such plans would be valuable for funding agencies and principal investigators. (3) Establishing citation conventions may raise consciousness about citing any and all creative works that an instructor uses, particularly when we want our students to embrace citation best practices. After all, what most undergraduates will see of the scholarship modeled by faculty will be through teaching. (4) Conferences like SIGCSE are increasingly competitive, and publishing a paper that reports on educational material, thereby enabling "conventional citation" may be difficult. But we still want to cite and track uptake of the educational material. This lightning talk argues that citation conventions be adapted for educational materials, and describes a sample convention. The goal of the lightening talk is to gauge interest and solicit collaborators.	Establishing Conventions for Citing Educational Materials (Abstract Only)	NA	2017
Patty Hicks	Research shows that middle school is the optimum time to introduce coding and computer science concepts. According to research from Accenture and Girls Who Code, computing appeal for girls peaks in middle school, where having an inspiring teacher and thinking that coding is "for girls" are instrumental in sparking interest. Middle schools tend to have electives where coding classes can find a home. But how do you convince the teachers that this change in academic focus is in the best interests of the students? And how do you prepare them to teach a content that they do not know and might not agree with? I haven't seen advice or research on how to overcome teacher resistance to computer science and coding. In 2013 an 8th grade elective was converted into a coding and computer science concepts course. Several of the business education endorsed teachers continue to push for less coding and more productivity tools in this course. Teachers with the Computer Science endorsement provided research, student interest surveys and employment outlooks to these teachers but they did not budge. Enrollment in the coding class has doubled and tripled in many of the schools, but a number of the teachers are still not enthusiastic about the course and the content. What could we have done differently to help these teachers accept change? Build a foundation for change -- Share current research on the importance of introducing coding and computer science. Build Community -- Look to local colleges for mentoring and co-teaching possibilities. Build Relationships -- Strengthen the connections between teachers and administrators.	Moving From Business Education to Computer Science Concepts in the Middle Grades (Abstract Only)	NA	2017
Megan Lawrence:Mary Bellard	This lightning talk will introduce Teach Access (www.teachaccess.org) an initiative comprised of technology industry professionals and educators working together to make accessibility foundational to higher education degrees. Technology companies dedicated to accessibility have faced the common challenge of hiring designers, engineers and researchers with accessibility knowledge/experience that are prepared to build inclusive products and services. Similarly, academic programs in design, engineering and HCI are seeking ways to better prepare students for jobs in industry that require them to address accessibility and the needs of society's diverse populations. Given this shared challenge, industry, academia and advocacy have come together through the Teach Access initiative to create new models for teaching and training students of technology to create accessible experiences. Teach Access membership includes companies such as Google, Facebook, Microsoft, Yahoo and several other tech leaders, as well as leading academic institutions like the University of Washington, Stanford, MIT, CMU, the Cal State System and more. Teach Access has successfully launched an accessibility tutorial for public consumption as well as submitting comments to ABET addressing the inclusion of accessibility in accreditation. Our participation in SIGCES is important to evangelize our efforts and build a cohesive community between industry and education.	Teach Access: Preparing Computing Students for Industry (Abstract Only)	NA:NA	2017
John MacCormick	Computational and complexity theory are core components of the computer science curriculum, and in the vast majority of cases they are taught using decision problems as the main paradigm. For experienced practitioners, decision problems are the best tool. But for undergraduates encountering the material for the first time, non-decision problems (such as optimization problems and search problems) may be preferable. This lightning talk will give a brief pointer to some new technical definitions and pedagogical strategies that have been used successfully for teaching the theory course using non-decision problems as the central concept. For example, instead of the familiar complexity classes P and NP, we can define analogous classes of non-decision problems, Poly and NPoly. The key question behind this lightning talk is to ask whether the new definitions and strategies are actually beneficial. Anecdotal evidence and certain theories of learning suggest the new approach should result in superior learning outcomes for students. We are seeking ideas, feedback, and collaborators interested in investigating this hypothesis and obtaining stronger evidence for it. To summarize, our central question is: how can we investigate whether students gain a superior grasp of computational and complexity theory when they are taught primarily using non-decision problems?	Seeking Evidence for Basing the CS Theory Course on Non-decision Problems (Abstract Only)	NA	2017
Anurag Nagar	This lightning talk will focus on our experience of developing and managing large undergraduate and graduate Big Data courses. The demand for trained professionals in the field of Big Data technologies is huge, and there is urgent need to develop and update courses in this area. One of the biggest hurdles for many schools is establishment, maintenance, and constant update of high performance computing infrastructure. Further, the technology landscape for Big Data is constantly evolving, and newer technologies, such as Apache Spark, require significant expenditure to set up and upgrade at the cluster level. Traditional infrastructure at most higher educational institutions is insufficient for this, and is also not able to scale up to meet the expectations of large class sizes and multiple simultaneous sessions. In this lightening talk, we will share our experience of running large undergraduate and graduate Big Data courses using open source infrastructure. Some of this infrastructure is cloud based, while others require students to create virtualized environment on their personal computers. Both types of resources are freely available, easy to setup, and provide students with enough computational power to run most academic tasks and projects. We will provide specific examples of using such technologies for common tasks, such as setting up a distributed file system, running MapReduce algorithms on large datasets, performing large scale machine learning and graph mining using Apache Spark, and maintaining a high availability Cassandra instance.	Developing Big Data Curriculum with Open Source Infrastructure (Abstract Only)	NA	2017
Saty Raghavachary	Starting Fall 2016, the CS department at USC has begun offering CS100: Explorations in Computing, a brand new General Education (GE) course. The course is only open to non-CS majors (since our CS students go through a CS-specific introductory track that encompasses the CS100 material). The class has 24 students, from a variety of disciplines such as Communications, Business Administration and Theatrical Arts. The course presents a broad overview of computational/algorithmic problem-solving techniques that form the basis of today's digital society. It provides students, a strong foundation for understanding how everyday activities such as web searching, communicating via social media, playing games, booking a ride, etc., work "behind the scenes". The course's intent is to promote computational thinking, as put forth by Jeannette Wing and others. In designing the course, the following aspects were kept in mind: the course is formulated as a GE, for a non-CS audience - so it cannot be heavy on coding; the topics need to involve some form of computational/algorithmic approach; the topics need to have a connection with things that students do with their digital devices (eg. play games, send instant messages, order things..); the topics have to grab the students' attention (keeping in mind that they grew up with tablets, the Web, animated movies and videogames). To that end, the topics are grouped under the following headings: Media Computing, Recreational Math, Algorithmic Art, Social Media and Data.	Curriculum Design for 'Explorations in Computing' (a New General Education Course at USC) (Abstract Only)	NA	2017
Joel Ross:Andrew J. Ko:David L. Stearns	Ensuring that software systems are accessible to users with disabilities is historically neglected but increasingly important for professional software developers. It is imperative that students are familiar with accessible practices to support this often-overlooked form of diversity. We suggest that including accessibility topics when teaching user-interface development skills is a low-effort task that can directly support teaching core software development principles such as "separation of concerns" and "standards compliance." In this lightning talk we describe our initial efforts to integrate accessibility and accessible design as "first-class" topics into our department's required course on web development, including specific examples of concepts covered, classroom activities, and assignments. We also discuss suggestions for how to potentially integrate accessibility topics into other computer science courses which include any kinds of front-end user interfaces. The goal of this talk is to promote awareness of accessibility concerns, demonstrate the ease by which educators can include such material, and encourage discussion about how to engage students in such diversity considerations throughout the curriculum.	Accessibility as a First-Class Concern in Teaching GUIs and Software Engineering (Abstract Only)	NA:NA:NA	2017
Kendra Walther	Coming up with quality, representative, fair exam questions can be difficult. This lightning talk explores one faculty member's eureka moment to have students generate their own exam questions. This approach was tried in a 300-level cross-listed Computer Science/Information Technology course entitled "Programming Graphical User Interfaces." Students were asked to generate at least one question in each of a variety of categories (multiple choice, true/false, short-answer, and coding questions). Five points of the exam (out of 100) was assigned to the students based on their submitted questions. Students were told that if they had a reasonable distribution of quality questions across all course topics, the test would pull entirely from their exam questions. Students used a Google Form to submit questions and to rate how "good" they thought their questions were. The student-submitted questions yielded a 22-page comprehensive study guide, and, at least in this first instance, a solid, representative, and fair exam.	Class-Sourcing Exams: Student-Generated Exam Questions (Abstract Only)	NA	2017
Dee A.B. Weikle	POGIL (Process Oriented Guided Inquiry Learning) is a flipped classroom, problem-based learning technique for teaching students content through carefully designed questions that they work through in teams with well-defined roles. This technique enables students to retain content while also learning process skills such as communication and teamwork. Developing POGIL activities and facilitating them takes practice and experience. Few, if any, current faculty have been taught using POGIL activities and so have less experience to bring to their development and especially to their incorporation into the classroom. The skills and preparation for delivering an effective POGIL class are very different than faculty have seen in action. The 5 practices: Anticipating, Monitoring, Selecting, Sequencing, and Connecting can be used to better understand how to prepare for and facilitate POGIL activities. While the POGIL organization (pogil.org) has many training sessions, including facilitator training available, most computer science materials still do not incorporate facilitator information that goes beyond the answers to the questions and suggested timing for sections of activities. A brief example of an activity prepared using the 5 practices will be shared to illustrate the potential along with anecdotes and tips for transitioning from traditional lecture to POGIL activities in the classroom.	Using the 5 Practices to Improve Facilitation of POGIL Activities (Abstract Only)	NA	2017
Chen-Hsiang Yu	Learning one domain knowledge is good for undergraduate students to face existing job market, but it might not be enough for the future career challenges. At Wentworth Institute of Technology (WIT), we are promoting Externally-collaborative, Project-based, Interdisciplinary Curricula (EPIC) learning that provides opportunities to work on interdisciplinary projects for the students. In this talk, I would like to share experience of designing and teaching an EPIC course by applying mobile application development to biomedical domain for creating a mobile health system at WIT. The students from two different departments, Computer Science and Networking and Biomedical Engineering, learn together and work collaboratively on a final project. The lessons learned from this process include: (1) How to find appropriate disciplines to make a course? (2) How to design a syllabus for students with different backgrounds? (3) How to design lectures and laboratory assignments for the collaboration? (4) How to guide students to work on the project collaboratively? etc. At the end of the talk, I will conclude my experience with suggestions and describe the future work in this direction.	Lessons learned from an EPIC course: Mobile Application Development for Mobile Health (Abstract Only)	NA	2017
Carl Alphonce:Jacob Condello:Bina Ramamurthy:Simran Singh	Computer programming is a process. Successful programming involves incrementally building and testing a solution. Students' ability to program is typically determined by an assessment of the end-product of a programming session rather than an examination of the actual process students are engaged in. A prerequisite to assessing a student's programming process is having access to that process. While direct one-on-one observation of students while they code has the potential to yield high-quality data, it does not scale well to large classes. One scalable approach is to automatically capture edit events through IDE instrumentation, and programmatically assess the resulting data. In this poster we report on our work to date in developing and deploying a plug-in for Eclipse's Java Development Tools (JDT), explore the data we have collected to date, compare our results with those reported in previous work, and discuss possible directions for future work in using this data for assessment of students' programming process.	Building Tools, Gathering Data: Precursors for Assessing Students' Programming Process (Abstract Only)	NA:NA:NA:NA	2017
Sam Andow:Kaitlyn Eng:Julia McCarthy:Olivia Palenscar:Thomas Schneider:Adam Schulze:Zachary Dodds:Bryan Twarek	In 2015-16, San Francisco Unified School District (SFUSD) piloted MyCS, a Middle-years CS curriculum, in half of its middle schools. This unexpected launch led naturally to diverging curricular branches: one that evolved within the district, another used by schools with the program already in place. The summer after the pilot, SFUSD's and MyCS's stewards convened for a week of feedback, PD, and planning. This poster highlights the curricular refinements, preliminary assessment results, and institutional changes that came from this curricular divergence and subsequent reconciliation. The data analyzed include teacher- and district-feedback, along with an analysis of student responses from SF's pilot implementation. Though accidental, this experiment suggests that substantial benefit can come from independently co-evolving (branching) and then reconciling (merging) curricula. When merged, those otherwise independent branches create a community both stronger and more invested for all of its stakeholders.	Merging MyCS: Lessons from a District-wide Middle-school CS pilot (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA	2017
Michael Ball	While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language inspired by Scratch. We demonstrate how we integrated our autograder into UC Berkeley's CS10 and compare student success of autograded lab assessments to oral lab check offs. We demonstrate how we offered real-time feedback to a course of 300 students, and how we integrated our tools into an edX MOOC with 15,000 students. Our autograder is a hosted solution which would allow other courses to use our tools with little effort.	Implementing "In-Lab" Autograding for Snap! (Abstract Only)	NA	2017
Marie Bienkowski:Eric Snow	Education researchers have extensively studied how secondary teachers adopt and adapt new curriculum and new teaching practices, especially in science and mathematics. Their goals are often to learn ways to help teachers enact new pedagogical approaches, so the results inform teacher professional development, as well as building knowledge in the field. Changing teaching practice often involves changes across a number of fronts: for example, inquiry-based teaching of science involves skills in developing questions, supporting student whole-class discussion and sense-making, and allowing students time to investigate authentic problems. Research is now underway to discover ways to similarly help teachers in K-12 computer science (CS). K-12 CS curricula have emphasized inquiry- and equity-focused teaching practices as ways to engage and include students while simultaneously deepening students? understanding of CS concepts and practices. While researchers have focused on measuring student attitudes to discern engagement and feelings of inclusivity, less work has been done on how implementation affects student learning. To study this, CS education researchers need frameworks and instruments to measure implementation, attitudes, and learning. We are developing and validating instruments that support mixed-methods study of curriculum enactment and teaching quality, with a focus on inquiry, equity, and computational thinking practices. This poster will present preliminary results from a large-scale study of implementation in secondary CS classrooms to build a more systematic understanding of evolving practices in measuring curriculum enactment and teaching quality.	Studying Implementation of Secondary Introductory Computer Science: Pilot Results (Abstract Only)	NA:NA	2017
Samuel Breese:Ana Milanova:Barbara Cutler	Student experience in introductory computer science classes can be enhanced by applying static analysis techniques to automatically grade assignments. At Rensselaer Polytechnic Institute (RPI), introductory computer science classes (using Python) exceed 650 students in size. As resources are limited, it is infeasible to have teaching staff individually examine each student's answer for small in-lecture exercises; however, qualitative data regarding student code independent from execution is still valuable (and in some cases required) to assess progress. When static analysis utilities were made available to instructors and integrated with automatic assignment testing, instructors were able to judge student performance and provide feedback at a scale that would otherwise be infeasible. There are clear advantages to applying static analysis techniques in comparison to less sophisticated methods (e.g. regular-expression based search). For one, students are unable to subvert grading by placing certain keywords within comments or string literals. Static analysis can also be applied to easily grade students on patterns that would be nontrivial to detect using a more naive method, for example in enforcing a rule that all member variables of a C++ class must be private, or verifying that a function takes the appropriate number and type of arguments.	Using Static Analysis for Automated Assignment Grading in Introductory Programming Classes (Abstract Only)	NA:NA:NA	2017
Frisque Brennen:Ankur Chattopadhyay	Social construction based learning approaches have been employed in computing education, but none of them has actually evaluated the effectiveness of the student reflection mechanism, which plays a key role in the learner's assimilation and accommodation process that builds upon the student's existing knowledge as part of the action learning within these approaches. Adapting the inquiry based knowledge building of the social construction model, this poster presents a process of student reflection that uses a unique, non-traditional method of interactive question-answer dialogue for engaging CS1 and CS2 students in a reflective assessment before the actual action learning cycle begins. This process of reflection helps students analyze their conceptual understandings and identify problems or limitations within their respective cognitive models prior to the actual process of knowledge refining or creation. In order to ensure that students have successfully reflected upon their conceptual beliefs, a software tool based assessment is then carried out. The answers from the social interaction based reflective assessment are compared with the results obtained through the software based traditional assessment in order to validate the student reflection process in the form of a social construction based epistemology. This research experiment also presents an authentic and relevant problem basis in the form of conceptual gaps for students to address within the action learning pedagogy of social construction. Results from the conducted comparative analysis in this case study show encouraging evidences confirming the validity of student comprehensions and assumptions by evaluating the knowledge discovery process through an epistemic investigation.	Can We Conduct A Social Construction Based Epistemology for CS1 and CS2 Students? (Abstract Only)	NA:NA	2017
Quinn Burke:Madeleine Schep:Travis Dalton	The goal of the CS for SC Landscape Report is to examine the current state of computing education on the K-12 level within the state of South Carolina. Building off of the 2007 South Carolina's Computing Competitiveness Report, the report more fully examines the fundamental questions of who? what? and where? in terms how computer science education has developed in the state over the past nine years. Results are reported in this poster based on a survey of 158 K-12 educators and ten follow-up interviews with leading computing teachers and program administrators from around the state. This research is funded through a generous grant through the National Science Foundation Broadening Participation in Computing Alliance (NSF Award No. 1228352, 1228355) administered through Expanding Computing Education Pathways (ECEP).	CS for SC: A Landscape Report of K-12 Computer Science in South Carolina (Abstract Only)	NA:NA:NA	2017
Jeffrey Bush:Susan Miller	Previous experience correlates to student retention in computer science at the secondary and undergraduate levels, it's impact in middle school is less well understood. Previous research findings from a University of Colorado large scale survey of students' conceptions of computer science have shown that there is a pervasive gender gap in middle school student confidence and interest in computer science. This study conducts a follow up investigation, analyzing data from fall 2014 to spring 2016 (n=6,128), using multiple regression analysis to investigate how student responses to motivational items concerning both confidence and interest vary by gender, previous experience with computer science, minority status, and having a computer at home (a proxy for privilege). Results show statistically significant associations (p<0.001) between the both outcomes (confidence and interest) and each of the four predictors. Gender had the largest association with each outcome. Students with previous experience with computer science also report higher confidence. This is equivalent in size to the higher confidence associated with having a computer at home and twice the higher confidence associated with being non-minority. For interest, previous experience associations were smaller but still significant. These findings imply that previous experience with computer science at the middle school level help to reduce the motivational differences by gender, privilege, and ethnicity.	Analysis of Associations between Motivation and Previous Computer Science Experience, Gender, Ethnicity and Privilege as Observed in a Large Scale Survey of Middle School Students (Abstract Only)	NA:NA	2017
Christa Cody:Behrooz Mostafavi	We have been incrementally adding data-driven methods into the Deep Thought logic tutor for the purpose of creating a fully data-driven intelligent tutoring system. Our previous research has shown that the addition of data-driven hints, worked examples, and problem assignment can improve student performance and retention in the tutor. In this study, we investigate the influences two unsolicited hint types have on students' ability to complete the tutor. We have used data collected from two test conditions: one with unsolicited next step hints (NSH) presenting the immediate next step of a logic proof to a student's current proof-solving state, and the other with unsolicited subgoal hints (SGH) presenting a step of a logic proof two or three steps of the student's current state. Our results show that students who received unsolicited SGH had more interactions within the tutor and skipped more problems. Furthermore, the SGH group had a significantly higher dropout percentage. These results suggest that hint types can affect student behavior and the ability to learn the material. Therefore, determining what type of hint to give during problem solving is important to the learning process and should be taken into consideration when designing an intelligent tutoring system (ITS). Future work will include using historical student data to determine the best hint type to give a student by analyzing student behavior and identifying the most effective hint type for the behavior being exhibited.	Investigating the Impact of Unsolicited Next-Step and Subgoal Hints on Dropout in a Logic Proof Tutor (Abstract Only)	NA:NA	2017
Sayamindu Dasgupta:Benjamin Mako Hill	Quantitative studies of learning using block-based programming languages in informal environments have relied on identifying the presence or absence of individual visual blocks in learners' projects. Many important programming concepts (e.g., initializing a variable) involve the combination of several blocks. In this poster, we present a technique that uses a statistical method from epidemiology called "survival analysis" to model the rate at which programmers begin to use new code patterns. By analyzing data drawn from the trajectories of over 90,000 users from the Scratch online community, we demonstrate the potential of our approach. In particular, we model when users are at higher and lower levels of "risk" of demonstrating two particular code patterns -- variable initialization and counting collisions. We show that learning of these patterns is associated with behaviors like viewing the source code of other projects, remixing, and commenting. We explain how our method can be extended to help understand predictors of skill acquisition in informal environments more generally and how it can inform the design of more effective learning support structures.	Measuring Learning of Code Patterns in Informal Learning Environments (Abstract Only)	NA:NA	2017
Debzani Deb	Big data and cloud computing (BDCloud) collectively offer a paradigm shift in the way businesses are now acquiring, using and managing information technology. With the fast growth of this paradigm, we argue that each and every CS and IT students should be equipped with foundation knowledge in this collective paradigm and should possess hand-on-experiences in managing big data applications in clouds to acquire skills that are necessary to meet current and future industry demands. This poster presents our research that proposes gradual and systematic integration of big data and cloud computing related topics into multiple core (required) courses of CS/IT curriculum. The poster, supported by a NSF grant, will be useful for CS/IT students and their instructors as it identifies big data and cloud computing related topics that are important to cover, finds a sequence of the prescribed topics that can be incorporated into existing core courses most effectively, and suggests specific core courses in which their coverage might find an appropriate context. The poster further identifies the major challenges this proposed intervention may encounter and provides a deeper analysis of them. Finally, the poster describes our experience of implementing one such course with proposed interventions during Fall of 2016 semester. The pre- post- test results that measure student opinion and understanding of big data and cloud computing topics are presented in the poster and demonstrate improved student interest and learning.	On the Integration of Big Data and Cloud Computing Topics (Abstract Only)	NA	2017
Yuli Deng:Dijiang Huang:Chun-Jen Chung	Personalized learning is often referred to a new learning approach by taking individual parameters such as learning preferences, abilities, skills and knowledge into account. In this poster, we present a personalized learning solution for computer networks, system, and cybersecurity focusing on hands-on projects. The personalized learning models are established in ThoTh Lab - a cloud-based hands-on virtual laboratory for Computer Science (CS) education. ThoTh Lab is a remote web-accessing virtual laboratory and it was originally designed to reduce lab management overhead for instructors and improve learning experience for CS students. By introducing new personalized learning capabilities, we can transfer ThoTh Lab from a traditional hands-on lab resource provisioning system to an active personalized e-learning platform for CS education. The system can track and assess students' hands-on projects' activities to monitor students' lab performance, and then provide intelligent suggestions or resources to improve students' learning experience and outcomes. Our personalized learning framework is distinguished from existing approaches by three salient features: (1) it is built into a hands-on and virtualized laboratory environment usually involving multiple virtual computers and their interconnections, (2) it has incorporated into a wide range of learners' characteristics such as individuals' learning style, prior knowledge and learning effectiveness, and it is designed to be able to include new and customizable features, (3) it uses machine learning approaches to model student characteristics during the learning process.	ThoTh Lab: A Personalized Learning Framework for CS Hands-on Projects (Abstract Only)	NA:NA:NA	2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky	In attempts to broaden participation in computing, the computer science education community has developed a wide variety of outreach activities to encourage students of different ages to learn computational thinking techniques and to develop an interest in computer science. In their recent surveys of the CSed literature, Decker, McGill, and Settle identify over eighty papers on K-12 outreach activities, of which approximately forty address middle-school coding camps. However, summer coding camps are offered by a much wider variety of organizations than computer science educators committed to diversifying the field. Some are offered by organizations committed to diversity, such as Black Girls Code and Girls Who Code. Others are offered by universities for recruitment, and necessarily to support diversification. Still others are offered by for-profit entities. What are the relationships between the two models of camp? Do the ideas that appear in the research literature filter out to the more mainstream camps, or do the more mainstream camps provide a very different model of computer science? In this project, we reviewed both the computer science education literature (52 sources representing 45 camps) and summer code camps identified on the World-Wide Web (480 different camps). In this poster, we report on common approaches and themes that others may choose to adapt or adopt. We also explore significant differences between the research-centered camps and the mainstream camps in approach, language, and apparent outreach goals.	What We Say vs. What They Do: A Comparison of Middle-School Coding Camps in the CS Education Literature and Mainstream Coding Camps (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Jean French:Hailey Crouse	It is well-known that females are underrepresented in STEM fields -- especially in the computing sciences. Bias, stereotypes, and negative experiences can be realized early in a girl's life. Research suggests that early intervention is necessary to encourage female participation in the computing sciences as a possible educational and career choice. While there are many catalysts that attribute to low interest and participation of females in computing, this research addresses five known causes: a lack of exposure to computing at a young age, a shortage of positive role models in the field, negative stereotypes, unappealing approaches to learning computing, and uncomfortable learning environments. In this research, Pre-K girls, as early as four years of age, were introduced to eight computer-related games and activities. The girls learned about algorithms, computer programming, circuits, and robots in a hands-on, exploratory environment. Age-appropriate surveys were conducted to compare the girls' affinity towards the computer-related activities before and after the study. The results of the study are encouraging as the girls demonstrated increased positive attitudes towards computer-based activities after participating in the study. In addition, the results of the study also demonstrated that the participating girls were able to successfully learn computing concepts at a young age. The presentation of the study will be accompanied by a hand-out including descriptions of the activities and associated equipment for those who would like to explore the topics independently. The presenters will also demonstrate a few of the more portable activities used in the study.	Early Intervention to Enhance Female Interest in Computing Sciences (Abstract Only)	NA:NA	2017
Kinnis Gosha:Kamal Middlebrook	Research suggests that the African American population is continuously growing in America, yet African Americans are disproportionately represented when it comes to undergraduate and graduate degrees and careers in computing. Embodied conversational agents (ECAs) have been developed as tools to disseminate information about various jobs in computing. The ECAs used in this study are African American men and women in those fields. This paper is about a pilot study conducted at Morehouse College in Atlanta, Georgia to assess user satisfaction and effectiveness of the website which houses those ECAs. Twenty-two male undergraduates who were pursuing a degree in computer science participated in a study where they engaged the ECAs to learn more about various computing careers. Those individuals who participated in the study said that the tool was easy to use and that they will consider a career in computing in the future. This pilot study will be used to conduct another study that will focus on African American, male and female high school students and individuals interested in obtaining a graduate degree and/or career in computing. The study's limitation is that there is no control group to compare the results with. Future work will include groups who will either interact with disembodied agents, agents that are presented as Caucasian, or a collection of agents who are more demographically diverse instead of trying to match the demographics of the target audience.	Broadening Participation Research Project: Exploring Computing Careers through a Virtual Career Exploration Fair Using Embodied Conversational Agents (Abstract Only)	NA:NA	2017
Kathleen Haynie:Jeff Gray:Sheryl Packman:Carol Crawford:Mary Boehm:Jonathan Corley	This poster describes how this project has induced teacher preparation and broadened student participation in Computer Science Principles throughout Alabama from 2013-2016. We will describe our professional development (PD) model, gain for participating instructors, results of CS Principles course implementations, and student engagement and outcomes. A statewide and scalable "Teacher Leader" model of professional development was implemented throughout the project. In person training was coupled with on-line course content, geographically proximal teacher groups, and periodic teacher hangouts. Teachers in each cohort collaborated together on developing course content and pedagogy, fostered by peer leaders from earlier cohorts. Instructors encouraged and engaged their students; student agreed that the learning environments supported diversity. Students gained significantly in core computer science content (i.e., abstraction and algorithms) as well as computational thinking practices. Female students showed robust gains on a number of indicators (including higher course grades than males); under-represented minority students showed positive gains in content knowledge. The majority of students said they were likely or possibly likely to pursue computer science in college, and that taking CS Principles impacted their decisions.	A Final Project Report on CS4Alabama: A Statewide Professional Development Initiative for CS Principles (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
David Hovemeyer:Arto Hellas:Andrew Petersen:Jaime Spacco	Recent years have seen increasing interest in using programming snapshot data for education research. One barrier to such research, especially for studies involving data from multiple institutions, is that the data is in a wide variety of native formats, and those formats may not be conducive to automated analysis. To overcome this barrier, we propose a structured data model and archival data format called Progsnap (https://cloudcoderdotorg.github.io/progsnap-spec/). Progsnap is designed to be a neutral export format, is currently supported by two open-source programming exercise systems, and we believe will be an easy target for data export from other systems. An open source Python library makes it easy to automate analysis of Progsnap datasets.	Progsnap: Sharing Programming Snapshots for Research (Abstract Only)	NA:NA:NA:NA	2017
Aleata Hubbard:Yvonne Kao	Educators, researchers, politicians, tech companies, and others continue to advocate for the importance of K-12 students learning computer science in our increasingly tech-driven society. One way school districts in the United States address this growing demand is by allowing teachers certified in other disciplines to lead computer science courses. Summer and weekend professional development opportunities support these educators in developing the expertise needed for effective computer science teaching, but a great portion of their learning to teach computer science will occur through on-the-job experiences. Our four-year NSF EHR grant explores how a job-embedded professional development program that pairs high school teachers with tech industry professionals supports educators in acquiring computer science teaching knowledge. The research presented in this poster focuses on the third year of the study and includes (a) a theoretical component focused on creating a framework to explain on-the-job computer science teaching knowledge development based on case studies with six teachers, and (b) an empirical component focused on the creation and administration of a computer science teaching knowledge assessment. By the time of the SIGCSE symposium, we expect to have pre-test results from the first administration of our teaching knowledge assessment, completed by both high school teachers and their collaborating tech industry professionals. This poster will present our theoretical framework, resultant teaching knowledge assessment with sample items, and analysis of participants' assessment responses and their relationship to specific teaching experiences.	Computer Science Teaching Knowledge: A Framework and Assessment (Abstract Only)	NA:NA	2017
Sarah Hug:Enrico Pontelli:Raena Cota:Suzanne Eyerman	This poster highlights a sociocultural analysis of a multifaceted K12 outreach program at New Mexico State University, a Hispanic Serving Institution that has had success recruiting local young women into the computer science department and beyond into the computing workforce. YWiC began in 2006 and has become a rich, extensive outreach program, reaching over 10,200 students across southern New Mexico. Over the years, YWiC has produced strong evaluation results related to computer science knowledge gains and computing interest (see Nesiba, et. Al 2015). The social scientists used Lave and Wenger's (1991) community of practice concept to analyze program design and implementation. Findings show four ways in which the program promotes individual agency, belonging to the local and global computing communities, and "positioning" (Davies and Harre, 1990) of young women as competent computer scientists. Specifically, YWiC: a) makes multiple pathways into computing education and computer science careers via intentional role modeling, b) provides common base knowledge through initial experiences and deep support from multiple role models, c) gives opportunities for young women to identify, and be identified by others as, competent in computing, and d) promotes belonging to a group of like-minded girls with multiple interests.	Learning and Identity in YWIC: An Analysis of Program Implementation and Design as Promoting Agency in Computing (Abstract Only)	NA:NA:NA:NA	2017
Keith Irwin:Darina Dicheva:Christo Dichev	There is good evidence that students learn better when given more opportunity to practice skills using related problems. However, this requires a sufficient supply of automatically graded problems to enable instant feedback. This can be achieved through automating the process of problem generation. While a few dynamic problem generation systems exist, they are either very specific to a single topic (such as tools for automatic generation of parameterized questions for Java or C programming or they are intended for other disciplines and not easily adapted to the needs of Computer Science. We have developed a prototype system for authoring, administering, and grading dynamic problems. This system is specifically designed for computer science. To this end, it supports complex logic, calling external programs such as compilers or databases, and the creation and manipulation of figures and diagrams. Problems and useful code libraries can be created and shared between instructors. It is a web-based system where instructors can specify problems by combining static text or images with bits of Lua code which add dynamism. When students use the system, their answers will be graded automatically, and they will be able to see the results, thus giving them quicker feedback. This is an integrated portion of a larger gamified learning platform called OneUp which is under development and aims to combine hands-on practicing with additional game-like motivational mechanisms. The goal of both the larger platform and the dynamic problems in specific is to increase student engagement in the learning process.	Open Extensible System for Dynamic Problem Creation for Computer Science (Abstract Only)	NA:NA:NA	2017
Ryosuke Ishizue:Kazunori Sakamoto:Hironori Washizaki:Yoshiaki Fukazawa	The concept of memory management in C programming language is particularly challenging for novice programmers. Consequently, many researchers have proposed program visualization tools to alleviate these difficulties: for example, SeeC is one of the state-of-the-art tools for visualizing the behavior and execution status of C programs. However, three problems (P1-3) remain in SeeC, as well as in other existing visualization tools. P1 (Usability): SeeC requires many steps to revisualize modified source code. P2 (Capability): SeeC does not fully support dynamic memory allocation. P3 (Installability): novice programmers often find installation of SeeC challenging due to its dependency on Clang. We propose a new visualization tool named PlayVisualizerC (PVC) for novice C programmers, which provides three solutions (S1-3) for P1-3. S1: PVC reduces the steps required for revisualization. S2: complete support for dynamic memory allocation. S3: designed to be installed in the user's web browser. From a small-scale experiment and a questionnaire given to 20 students, we found that a set of four programming tasks were solved 1.8 times faster and 24% more correctly using PVC.	An interactive Web Application Visualizing Memory Space for Novice C Programmers (Abstract Only)	NA:NA:NA:NA	2017
Maya Israel:Todd Lash:George Reese	There is growing momentum to integrate computer science (CS) education across K-12, but there is little information about how this integration should take place (Grover & Pea, 2013). This is especially true in the elementary grades, as fewer studies have examined computing at these grades. Through a National Science Foundation STEM+C project, we are developing and studying learning progressions for integrated CS and mathematics at the elementary level. Our research examines how teachers are introducing CS concepts within mathematic as well as what computational concepts and practices naturally can be taught within the context of elementary mathematics. We are also examining how these emerging progressions align with the K-12 CS Framework and the new standards from the Computer Science Teachers Association (CSTA). Future aims are to develop a coherent set of learning progressions related to areas such as debugging, sequencing, looping, conditionals, and decomposition within mathematics topics such as geometry, fractions, and arithmetic number stories. Our research lays the groundwork for the development of learning trajectories that will guide curriculum developers and practitioners to understand how to teach students across grades K-5 computing within the context of their mathematics instruction.	Emerging Learning Progressions in K-5 Integrated Mathematics And Computer Science Lesson Plans (Abstract Only)	NA:NA:NA	2017
Deja Jackson:Cindi Simmons:Kate Zelaya:Erica Pantoja:Amber Wagner	Block Programming languages (e.g., Scratch, Blockly) are widely used in teaching students within K-12 classrooms and in some universities with hopes of introducing programming concepts to beginner students. The use of block programming languages in classrooms is an effort in encouraging students' interest in computer programming by utilizing Papert's "low floor" and "high ceiling" metaphor. The Hour of Code is one example demonstrating the impact block languages have in education; however, there are not many languages offering an emphasis on advancing skills in mathematics or reading while focusing on the need of students with learning disabilities. This poster describes our creation of a block language using Blockly's API. Our block language, Hopper's Fables, named after Admiral Grace Hopper, is a storytelling language based on completing interactive mathematical problems in an effort to engage students while going through the story. It is the intent of Hopper's Fables to aid elementary students with learning disabilities through enhancing their math and literacy skills, while simultaneously building the student's digital fluency and developing their computational thinking skills. Hopper's Fables is based on research of related work, which allowed for the creation of an evaluation rubric. Analyzing the characteristics of existing languages allowed Hopper's Fables to come to life. By combining Papert's "low floor" and "high ceiling" philosophy with educational foundations, Hopper's Fables will provide students with an appropriate and enchanting learning environment.	Hopper's Fables: A Mathematical Storytelling Adventure (Abstract Only)	NA:NA:NA:NA:NA	2017
Yerika Jimenez:Theodore Hays:Christina Gardner-McCune	Tools like MIT App Inventor and Scratch are designed to help students develop programming and computational thinking skills by allowing them to use their interest and personal experiences to create meaningful artifacts. However, students often need additional help in translating their ideas into functional programs because they lack understanding of how to map the visual aspects of their projects to programming constructs and understanding of how to develop appropriate algorithms that bring their ideas to life. To address this issue, we created a Computational Thinking App Design Mat (App Design Mat) to scaffolds students' CT skill development in the context of creating a mobile application with MIT APP Inventor 2. The App Design Mat fosters student engagement in computational thinking through four areas of the mat: Problem Decomposition, Pattern Abstraction, Pattern Recognition, and Algorithm Design. In this poster will describe the design and results from the use of the App Design Mat with 80 eighth grade students. Our results suggest that most students understood the purpose of using the App Design Mat, used the App Design Mat effectively, and used some aspects of the App Design Mat in developing their final mobile app project.	Computational Thinking App Design Mat: Supporting the Development of Students' Computational Thinking Skills (Abstract Only)	NA:NA:NA	2017
Keith Jones:Akbar Siami Namin:Miriam Armstrong	There is a job gap in cybersecurity with many more security jobs than qualified candidates. The cybersecurity workforce shortage could be mitigated by developing better curricula that prioritize the Knowledge, Skills, and Abilities (KSAs) most important to security related jobs. To determine which KSAs should be included in cybersecurity education and training, we administered survey-interviews to 44 security professionals at the premier hacking conferences Black Hat and DEF CON. Questions concerned 32 cybersecurity-relevant KSAs. Participants were asked how important each KSA was to their job and where they had learned that KSA. Fifteen KSAs were rated as being of higher-than-neutral importance. Most of these important KSAs concerned networks (example KSA: knowledge of network protocols) and threats/vulnerabilities (example KSA: knowledge of types of security threats and vulnerabilities). Of the 32 KSAs, participants learned the most about 31 of them while on the job and not through formal training. Overall, the data suggest that network KSAs and threat and vulnerability KSAs should be prioritized in course curricula and that historically threat and vulnerability KSAs have not been emphasized in school. This work is supported by National Science Foundation under award number DGE-1516636.	What Should Cybersecurity Students Learn in School?: Results from Interviews with Cyber Professionals (Abstract Only)	NA:NA:NA	2017
Sarah Judd:Megan Sullivan:Jeff Stern	Agile software development practices, which focus on iteration and adaptability, are commonly used in software engineering companies. Girls Who Code designed an after-school Clubs curriculum for middle and high school students that gives girls first-hand exposure to these practices. We use agile processes for two reasons. The first is practical: Over the course of a year-long Club, all participants collaboratively create a large project. Agile practices organize this effort. The second is mission-driven: We believe using real-world techniques and terminology will build girls' identities as computer scientists. Girls Who Code recognizes that when teaching 40,000 girls at scale, not every Clubs Facilitator will have had first-hand experience with agile development practices. We have created a curriculum to empower volunteers from any background to teach in an agile manner. Facilitators are given Session Outlines for each Club session that provide activities to structure the Club experience, as well as additional facilitator tips on topics such as finding an audience, researching pre-existing solutions, and developing solutions. Throughout this year, the Girls Who Code Education team will observe Clubs to evaluate this pedagogical approach. We will follow 10 Clubs closely throughout the year, and visit approximately 40 more. During that time, we will interview facilitators about their experiences teaching our curriculum. We will share our findings from these field observations and recommendations for integrating agile development practices into curricula. We hope to engage the computer science education community in a conversation about the strengths and challenges of this approach.	Agile Development in Project-based Curriculum at Scale for Middle and High School Girls (Abstract Only)	NA:NA:NA	2017
Clif Kussmaul	This poster describes a new CS1 course on Computation & Cognition (C&C), targeted at students in psychology, neuroscience, and biology. In C&C, students learn to create and use software to imitate, model, or study processes in the brain. Topics include software development, control structures, data types, and testing, as well as key ideas in experimental design, stimulus presentation, searching, natural language processing, genetic algorithms, and neural networks. Thus, C&C enriches student understanding of content in their majors, and develops programming and computational skills in a relevant context, which should enhance subsequent research projects and career outcomes. C&C was developed with support from a 2015 Google CS Engagement grant, and incorporates research-based practices that improve student learning and help broaden participation in computing. In particular, C&C uses Process Oriented Guided Inquiry Learning (POGIL) (http://pogil.org), in which student teams work on classroom activities that are specifically designed to guide them to construct their own understanding of key concepts, and to develop process skills such as communication, critical thinking, problem solving, and teamwork. C&C also uses PsychoPy (http://psychopy.org), a FOSS tool to run psychology experiments with two interfaces -- the Builder GUI to design experiments, and the Coder IDE to write Python code. The first offering of C&C was small (3 female, 3 male) with strong ratings for the course overall, and for increasing student interest in the subject matter. In the future, we hope to add experimental paradigms and techniques, and engage more students from diverse backgrounds.	CS1: Computation & Cognition -- An Evidence-Based Course to Broaden Participation (Abstract Only)	NA	2017
Louise Ann Lyon:Quinn Burke:Jill Denner:Jim Bowring	The rise of so-called "coding boot camps" as an alternative training ground for software development is prominent in the popular press, and these camps have caught the attention of colleges and universities. Administrators and faculty considering whether and how to partner with coding boot camps may want to consider what skills and knowledge boot camps are providing to students as well as successful college/boot camp partnerships. This poster reports on data from a collaborative NSF EHR grant (#1561705/ #1561717) funding a qualitative study of how coding boot camps and university CS programs prepare students for careers as software developers. As part of early data collection for this study, we have learned not only details of boot camp student preparation for the workforce, but also ways that universities are currently partnering with boot camps. This poster will report on data gathered in focus groups and interviews with curriculum developers from both coding boot camps and university CS programs categorized into the themes of: classifications of boot camps, screening/admission criteria, student profiles, training (both independently and in partnership with colleges/universities), and job placement. We draw suggestions from this initial data as to where boot camps may be able to enhance traditional CS degrees for students and what CS educators may want to consider when evaluating the boot camp experience.	Should Your College Computer Science Program Partner with a Coding Boot Camp? (Abstract Only)	NA:NA:NA:NA	2017
Travis Mandel:Jens Mache	In an increasingly computer-driven world, it is no surprise that undergraduate interest in computer science has grown enormously over the years. To meet this growing demand, it is vital to ensure there is a growing supply of talented and passionate CS educators. However, most computer science professors must first earn a PhD at a research university. Therefore, we seek to understand whether these institutions are meeting the growing need for passionate and highly-trained computer science educators. Specifically, we analyze 19 years of historical data gathered from the University of Washington Computer Science & Engineering department. Although focusing on graduates from a single school is a limitation, University of Washington is somewhat unique in that it publicly posts graduating PhD students' preferences online, and UW has had numerous notable graduates pursue careers in teaching, research, and industry. Our analysis of 309 graduating students reveals that the number of graduating students interested in teaching is alarmingly small, and has not grown over time to meet the increased need for quality educators. Our more detailed analysis of the change in interest over time suggests several potential reasons for this phenomenon. We hope that this poster opens dialogue surrounding possible interventions that might alleviate this issue.	Examining PhD Student Interest in Teaching: An Analysis of 19 Years of Historical Data (Abstract Only)	NA:NA	2017
Daniela Marghitu:Amber Wagner	As part of the new and bold NSF INCLUDES initiative, we introduce the SouthEast Alliance for Persons with Disabilities in STEM (SEAPD-STEM) whose goal is to increase the representation of students and faculty with disabilities in all STEM fields. The SEAPD-STEM is an alliance consisting of 22 higher ed institutions including community colleges, four-year institutions, and universities with graduate programs. The primary methodology utilized by the SEAPD-STEM is to build bridges of support and mentorship between various levels of academia: in undergraduate institutions, upperclassmen will support lowerclassmen; graduate students will support upperclassmen; junior faculty will mentor graduate students; and senior faculty will mentor junior faculty. Moreover, there will be bridges from undergraduate/graduate to the workplace aiming to assist persons with disabilities in acquiring a position working in a STEM field. This poster presents how the bridges are formed in addition to preliminary data including statistics concerning students with disabilities studying STEM fields, professors with disabilities in STEM, and survey data completed by intervention participants. In total, there are 19 proposed interventions to be implemented including Saturday and Summer academies, research experiences, GRE prep workshops, and various levels of mentoring/advising from high school to workforce. It is the intention of the SEAPD-STEM to increase the alliance each year in order to reach as many students with disabilities as possible.	Building Bridges: How the Southeast is Increasing the Representation of Students with Disabilities in STEM (Abstract Only)	NA:NA	2017
Chris Mayfield	With the recent launch of AP CS Principles in 2016-17, many efforts are currently underway to share curriculum resources and prepare new teachers. The community has primarily focused on high school implementations, which have different situational factors than university courses (e.g., amount of class time). In this poster, we present the design of a survey course that aligns with CS Principles and also continues the long tradition of breadth-first introductions to computer science at the college level. We describe the instructional strategies, assessments, and curriculum details, providing a model for how to modify existing CS0 courses. We also outline twelve lab activities that support the computational thinking practices and learning objectives of the AP curriculum framework. All instructional materials including activities, labs, performance tasks, and rubrics are freely available on the course website: https://w3.cs.jmu.edu/cs101. Quizzes, solutions, and other materials are also available to instructors upon request. The course has run successfully for the past four years at two universities and three high schools via dual enrollment. Initial results suggest that the curriculum has a positive impact on student confidence levels and attitudes toward computer science.	Implementing CS Principles as a Breadth-First Survey Course (Abstract Only)	NA	2017
Susan B. Miller	In this research, I studied two enactments of a professional development course designed to help teachers learn how to program games and teach programming to middle school students using a guided discovery approach. In the first PD course (n=58), a wholly teacher-directed approach was used. In the other PD course (n=54), a guided discovery approach was employed. I found three major differences between the groups. First, the descriptions of the games varied significantly based on the type of instruction, leading us to believe that teachers were taking more ownership of their creations. Second, the teachers who were taught with a guided discovery approach were able to work at a quicker pace, with less assistance, and ultimately were able to more quickly apply those skills to more complex games and simulations within the course of the professional development. Third, it also appears that this guided discovery teaching methodology is similarly impacting changes in pedagogy when these newly trained teachers use Scalable Game Design in the classroom. Students in classrooms where teachers were taught using guided discovery methods were more likely to go beyond the curricular materials when building their own games. This appears to indicate that these approaches to training will translate to changes in classroom practice, enabling teachers to more readily employ a guided discovery approach in their own teaching efforts	Using Professional Development to Move Toward a Guided Discovery Approach in the Classroom (Abstract Only)	NA	2017
Chelsea Patek:Ankur Chattopadhyay	This poster presents a potential way of promoting student driven computing educational research that may provide an alternate path or option to the traditional faculty-driven computing education research. We propose a unique model of inter-class student collaboration that motivates creativity, expands the scope of collaborative research and enables handling of conceptual gaps through inter-class peer mentoring. The proposed model engages students from an upper level class with students of a lower level class so that they can connect with each other in a peer mentor-mentee relationship to overcome conceptual gaps in learning. It provides upper level students with an exclusive opportunity to reinforce their conceptual grasps and engage in research for addressing the problems faced by lower level students. This proposed model of improvised peer collaboration promotes a new kind of service-oriented learning project in computing that inspires innovation and leads to research on finding ways to handle common conceptual limitations, thereby helping student retention by assisting lower level peer mentees. It also assists upper level peer mentors in self-driving towards research oriented thinking for inventing methods to solve authentic conceptual issues. The proposed model has been currently implemented in the UWGB computing curriculum, where CS2 students have been collaborating with CS1 students and have been participating in computing educational research as part of the process. These ongoing research experiments have analyzed the performance of the proposed model through data obtained by conducting student surveys. The collected survey data represent insightful evidences from preliminary evaluations of the proposed model.	Can Undergraduate Computing Research Be Student-Driven? (Abstract Only)	NA:NA	2017
Max Paulk:Amber Wagner	Many K-12 and university classrooms are now using block programming languages (e.g., Scratch, App Inventor, Code.org) to help students learn how to program. These block programming languages are popular because of their simplicity and "tinkerability" allowing novice users to create a project within minutes of first being exposed to the language. Unfortunately, these languages are highly dependent on the mouse and keyboard making them nearly inaccessible for those users with visual or motor impairments. This poster presents CodeBox64, a simplified input modality that is able to program block programming languages in a more tactile approach; it is a Tactile Input Modality (TIM). Because of the simplicity of CodeBox64, it allows visually impaired students to navigate the buttons and knobs with ease. CodeBox64 consists of four navigational buttons (i.e., up, down, left, right), a back button, and an enter button. It also contains an RFID sensor board that allows the user to use physical Lego blocks to execute commands of a block language. While CodeBox64 was originally developed to work with a custom, Blockly language, JamBlocks, it has the potential to work with other block languages. CodeBox64 demonstrates one possible methodology for enabling block languages to be accessible to those users with visual impairments.	CodeBox64: A Tactile Input Modality for Block Programming (Abstract Only)	NA:NA	2017
Kai Qian:Hossain Shahriar:Fan Wu:Cassandra Thomas:Emmanuel Agu	In this poster we present an innovative authentic learning approach for Secure Mobile Software Development(SMSD) through real-world-scenario case studies. The primary goal of this learning approach is to create an engagement and motivating learning environment that encourages all students in learning emerging SMSD technologies and enhances their secure software development concepts. This approach provides students with hands-on laboratory practices on real-world SMSD and mobile security. The laboratory consists of multiple modules covering input validation, output encoding, secure inter-process communication, secure data protection, secure mobile database. Each topic consists of a series of progressive sub-labs: a pre-lab, lab activities, and a student add-on post-lab. The preliminary feedback from students is positive. Students have gained hands-on real world experiences on Android software security with Android mobile devices, which also greatly promoted students' self-efficacy and confidences in their mobile security learning.	Broadening Secure Mobile Software Development (SMSD) Through Curriculum Development (Abstract Only)	NA:NA:NA:NA:NA	2017
Christian Roberson	Traditional, points-based grading poses several challenges to computer science educators. Students can lose focus on learning the material and instead focus on the game of trying to accumulate enough partial credit to get to the next grade tier. Faculty can waste large amounts of time obsessing over partial credit point assignment for a particular assignment. It can be difficult to use course grades to connect student performance with learning outcomes for the course and the program. This poster presents an overview of an alternative approach to traditional grading: specifications grading. Specifications grading is a points-free, mastery style of grading that replaces partial credit with quality feedback and revision opportunity. This model provides several advantages over the traditional grading approach. These advantages include better support for high academic standards and rigor, an increased focus for students on learning by removing the intrinsic motivation to earn points, and a stronger connection between student grade assessments and course learning outcomes. The poster will provide an overview of specifications grading and its benefits, along with details of implementation for an Android application development course and an introductory-level programming course. Additionally, the poster will include student evaluation data from previous offerings of the courses.	Applications of Specifications Grading in Computer Science Courses (Abstract Only)	NA	2017
Clare A. Rumsey:Quinn Burke:Chris Thurman	In an effort to lay a foundational framework for a computer science (CS) middle school curriculum, this research examines youth's use and perception of the introductory programming language Scratch through both the lens of storytelling and game making. Over the course of an academic semester (5 months), two classes of 6th grade students (52 students total) progressed from creating digital stories in Scratch to creating interactive games as teams, enhancing critical thinking skills, beliefs about ability, and overall literacy skills. This poster reports on students' perception of coding both in terms of storytelling as well as in terms of gaming, and how each learning "product" (e.g., stories versus games) affected students' overall perception of coding as as a practice, as well as their own interest in and persistence with such practice. Results are based on pre-and post course student and teacher surveys and interviews, weekly field note observations, and artifact analysis of particular coding scripts. Discussion section points to the wider implications for the growing number of middle school CS in-school and after-school programs nationwide, and the role of stories and games as an effective "hook" to introduce children to CS.	Cracking the Code: Bringing Introductory Computer Science to a Charleston Middle School (Abstract Only)	NA:NA:NA	2017
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan	Many feel K-12 computer science requires a large tech budget, a classroom full of laptops, tablets or robots, and an experienced tech teacher. This belief is not unfounded as the majority of online computer science teaching materials require modern technology and Internet connectivity, making these tools inaccessible to the low-tech classroom. As a solution, we developed SAS® CodeSnaps, a free tool that provides an engaging coding experience with minimal technology. One iPad and one robot (www.sphero.com) are all that is needed for every student in a classroom to code. With CodeSnaps, students program together using printable coding blocks. When their program is ready, they "snap" a picture using the CodeSnaps app which digitizes their code and executes it on a robot, allowing students to see their program execute in the real world. In this poster we present lesson plans for both a single engagement with students as well as week-long introduction to CS fundamentals centered around the CodeSnaps app. We also discuss results from two pilot studies designed to measure student engagement during these lessons.	Coding for All: Computer Science Outreach for All Ages and Budgets (Abstract Only)	NA:NA:NA	2017
Allison Scott:Alexis Martin:Frieda McAlear	In response to the lack of diversity in computing fields and associated lack of access to computing courses, an NSF-funded computing intervention was developed and implemented within the SMASH Academy for underrepresented high school students. Previous research indicated short-term impact of the intervention on computing interest and knowledge. This pilot data explores the longitudinal impact of this intervention and whether it influences the pursuit of computing majors in college. Using data from students who participated in SMASH in high school and are currently pursuing computing majors in college, descriptive comparative data suggest there has been a longitudinal increase in pursuit of computing associated with the intervention. This poster will also provide qualitative data and narratives to further explore whether students attribute their choice of major to the intervention, and therefore, whether these increases can be attributed to the intervention. In addition, this poster will also contain open questions to engage and stimulate the audience in discussion about ideas for additional analyses or variables to explore to examine longitudinal impact.	Do Computer Science Exposure Activities and Courses Influence the Pursuit of Computing Majors in Higher Education among Underrepresented High School Students? (Abstract Only)	NA:NA:NA	2017
Nicole Simon:Megan Banford	During summer 2016, John Jay College of Criminal Justice piloted Cyber Crime Investigators -- a 4-week pre-college program that aimed to expand the pipeline of NYC public high school students who enter college ready to pursue a path toward a profession in cybersecurity. The program was designed by a team of educators with expertise in academic skill preparation, college access, career guidance, student learning, and computer science. Using IDEO's Design Thinking for Educators as a learning framework, 42 rising high school seniors engaged in a six-stage process to understand and create solutions for complex problems in cybersecurity. To understand the many real-world applications of cybersecurity, students worked in teams as consultants for Floor Plan, a fictitious non-profit organization (modeled after Housing Works) that provides housing and healthcare services to homeless LGBTQIA teenagers. They employed Design Thinking protocols to develop a cybersecurity plan for the organization, guided by the NSA's First Principles of Cybersecurity. They worked on the challenge daily in "Lab." During this time, they learned technical skills, such as operating a command line and principles of networking, and they practiced other academic skills, such as writing, project planning, and public speaking -- all part of a foundational skill set for college success. They conducted interview and observation research during field trips and speaker visits and presented their final plans at a public competition judged by industry professionals during the program's last week.	Cyber Crime Investigators: Pathways from High School to Cybersecurity Careers for First Generation College-Bound Students (Abstract Only)	NA:NA	2017
Cara Tang:Cindy Tucker:Elizabeth K. Hawthorne:Christian Servin:Teresa Moore	In 2015, under the auspices of the ACM Education Board the Committee for Computing Education in Community Colleges (CCECC) began an effort to update the ACM Computing Curricula 2009: Guidelines for Associate-Degree Transfer Curriculum in Computer Science with inclusion of contemporary cybersecurity concepts. To this end, the CCECC established a task force of community college educators to review the ACM/IEEE Computer Science Curricula 2013 (CS2013) and identify foundational material in CS2013 that is appropriate for the first two years of a computer science education. To further inform the guidance, the CCECC administered surveys to a global audience of computer science educators to solicit input related to CS2013 knowledge areas (KAs) and knowledge units (KUs) and on cybersecurity topics, which are appropriate for associate-degree computer science transfer programs. The guidance has been through two rounds of public review and comment	Curricular Guidance for Associate-Degree Transfer Programs in Computer Science with Contemporary Cybersecurity Concepts (Abstract Only)	NA:NA:NA:NA:NA	2017
Juliet Tiffany-Morales:Kathy Haynie:Jason Ravitz:Karen Peterson	The importance of computer science educational opportunities for girls cannot be understated, and strong evaluative practices are critical for ensuring that these opportunities are of high quality and meet girls' needs. In this poster presentation, participants will learn how a nonprofit and a corporate partner designed a program to build the evaluative capacity of participating nonprofits--the CS OPEN initiative. Presenters will discuss the guiding principles that shaped this initiative and share the challenges to and successes of developing an evaluation capacity building network that supports a diverse set of 12 grantees. Session attendees will learn from the designers and evaluation experts within this network: 1) how this evaluation capacity building partnership was developed and grantees were selected, 2) grantees' experiences and challenges in designing and implementing evaluations, 3) the resources and efforts the partners have used to develop grantees' evaluative capacity and to build the network, and 4) the impacts of these efforts on grantees evaluative capacity. Resources utilized by the CS OPEN grantees will be displayed with ratings and highlights of their growth in evaluative capacity. The poster will highlight major successes and lessons learned for implementing an evaluative capacity building grant initiative.	Building Evaluative Capacity for Out of School Organizations that Engage Girls in Computer Science (Abstract Only)	NA:NA:NA:NA	2017
Peter A. Tucker:Robert Bryant	NA	Motivating K-12 Students Toward Computer Science, and Computer Science Students Toward Teaching (Abstract Only)	NA:NA	2017
Jeramey Tyler:Matthew Peveler:Barbara Cutler	We present a non-grade-penalty late day policy used in many of the large lecture, required courses in our computer science department. We study the effectiveness of this late day policy in reducing student stress, distributing demand for teaching assistant resources in peak hours before the homework deadline, and in maintaining or improving student understanding and homework grades. A complex late day policy can be efficiently implemented and managed within our open-source homework submission system that utilizes automated testing and grading, allowing students to submit and resubmit homeworks as they make progress on the assignment.	A Flexible Late Day Policy Reduces Stress and Improves Learning (Abstract Only)	NA:NA:NA	2017
Paul Voelker:Chris Johnson	The use of educational games to teach and reinforce concepts to students is an idea that has gained popularity in recent years. Games force students to demonstrate their mastery of a subject by applying its principles to complete a goal or solve a problem. Games also offer more frequent feedback on the student's performance along with immediate rewards. These factors can make games more engaging for the student than traditional homework or quizzes. In this poster, the authors present a program which hopes to leverage the advantages games have as a learning tool in order to help students understand the effects of bit manipulation. The player controls a factory with a series of pipes that dispense chocolate into trucks waiting below. Using bitwise operators, the player must manipulate which pipes are open and closed in order to ensure that a pipe is only open if there is a truck aligned beneath it. The player is offered immediate feedback on their performance in the form of empty trucks driving away or wasted chocolate splashing to the ground. Additional challenge can be added to the game by only allowing the player to adjust the pipes one time between each set of trucks. By providing immediate feedback and encouraging creative problem solving, this game may improve student's intuition about the mechanics underlying bit manipulation.	A Game-Driven Approach to Teaching Bit Manipulation (Abstract Only)	NA:NA	2017
Jan Vykopal:Jakub Cegan	Cyber defence exercises (CDX) represent a popular form of hands-on security training. Learners are usually divided into several teams that have to defend or attack virtual IT infrastructure (red vs. blue teams). CDXs are prepared for learners whose level of skills, knowledge, and background may be unknown or very diverse. This is evident in the case of high-profile international CDXs with hundreds of participants coming from government agencies, military, academia, and the private sector. In this poster, we present techniques for distributing learners into teams with respect to their level of proficiency and the prerequisite skills required by the exercise. Our aim is to reach a balance between proficiency and the exercise to make the exercise beneficial for the learners and an effective investment for sponsors. The poster describes three methods and compares their advantages and disadvantages. First, we present self-assessment questionnaires, which we have already used in four runs of a national CDX for 80 participants. We outline our findings from an analysis of the learners' self-assessment before and after the exercise, and the score they achieved during the exercise. Second, we introduce a promising method for testing the prerequisites of the exercise. This is still a work in progress but we believe that this method enables the better assessment of learners' skills with respect to the exercise content, and supports the game balance better. Finally, we compare both methods to a naïve one that shuffles participants into teams randomly.	Finding Exercise Equilibrium: How to Support the Game Balance at the Very Beginning? (Abstract Only)	NA:NA	2017
Xiaohong Yuan:Li Yang:Wu He:Jennifer T. Ellis:Jinsheng Xu:Cynthia K. Waters	This poster presents our NSF collaborative project "Enhancing Cybersecurity Education Using POGIL". Although the POGIL (Process Oriented Guided Inquiry Learning) instructional approach has been used and evaluated in science and engineering disciplines, the use of POGIL in cybersecurity education is not in place due to the lack of POGIL materials in cybersecurity. To deliver key learning outcomes as well as "soft skills" in cybersecurity students, we are developing POGIL materials for teaching cybersecurity, implementing the POGIL teaching pedagogy in cybersecurity courses, and evaluating the teaching and learning effectiveness of the developed POGIL materials and teaching method. We are developing POGIL materials for fifteen topics in six areas: cryptography, access control, network security, risk management, web security, and secure coding. These POGIL materials will be implemented and evaluated in eight different courses at three universities. Through assessing the developed POGIL materials and teaching method, we seek to answer the following research question: Is using the POGIL method more effective than the traditional/lecture-based teaching method in terms of learning outcomes, learning experience, attitudes and motivation? The developed POGIL materials will contribute to the effective resources for cybersecurity education, and enhance cybersecurity education by developing student key skills as well as improving student attitudes, motivation and enjoyment in learning.	Enhancing Cybersecurity Education Using POGIL (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Rebecca Zarch:Alan Peterfreund	Computer Science (CS) is a rapidly growing and evolving field, with many secondary teachers participating in professional development (PD) to offer CS courses in their schools as the entry point to a CS education pipeline. In 2014 the Evaluator Working Group (EWG) formed to address the issue of common data collection across NSF CS10K projects in order to capture the number of teachers being trained across CS10K projects and locations. The EWG goals are twofold: First, the EWG seeks to test the feasibility of a diverse group of projects collecting and reporting on common data. The lessons learned through this effort will inform the CS education professional development community as the field matures and data collection is more broadly supported. Second, the EWG hopes to have an accurate count of the number of teachers trained through CS10K, some demographic and descriptive information about teachers, information about the students enrolled in teachers' classes, and information about the schools in which the teachers are offering courses. To accomplish these goals, the EWG has developed a common data collection tool and process for projects to report aggregate-level participation data. To date 100% of projects submitted at least partial data. The results show that 1,538 new teachers have participated in PD through these 29 CS10K programs; taught in at least 909 public and private schools in 43 states, the District of Columbia, and Puerto Rico. This poster will provide a visual display of both the process of data collection and the results.	Collecting Participation Data Across NSF CS10K-Funded Professional Development Providers (Abstract Only)	NA:NA	2017
Rebecca Bates:Valerie Summet:Nanette Veilleux	Have you read any of the common reads for SIGCSE 2017? Now's your chance to talk about them! Two novels: The Thrilling Adventures of Lovelace & Babbage: The Mostly True Story of the First Computer by Sydney Padua (Pantheon Graphic Novels, 2015) and The Martian by Andy Weir (Broadway Books, 2014) as well as a short story: "The Last Question" by Isaac Asimov (Science Fiction Quarterly, 1956) were proposed at the end of the 2016 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the two books and short story. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2018 conference.	SIGCSE Reads: Time for Book Discussion (Abstract Only)	NA:NA:NA	2017
Bo Brinkman:Karla Carter	Have you used the ACM Code of Ethics and Professional Conduct in your teaching? Would you like to? Recent events are leading to increased interest in the Code: 1) The AP CS curriculum now includes "computing in context" as one of the six course topics. 2) The ACM has initiated an update of the Code, to be completed in early 2018. 3) There have been several court cases (Oracle v. Google is a recent example) and stories in the popular press (including in the New York Times) that have cited the Code. It is therefore increasingly important that students and teachers become aware of and comfortable with the Code. This BoF invites college and high school teachers to share assignments (or assignment ideas) that incorporate the Code, particularly outside of "the ethics class." We will also discuss proposed updates to the Code, and any items that are missing or anachronistic in the current Code. Representatives of the ACM Committee on Professional Ethics will collect this feedback and provide it to the Code 2018 Task Force.	The ACM Code of Ethics and Professional Conduct: Teaching Strategies and the Coming Update (Abstract Only)	NA:NA	2017
Janet Burge:Bo Brinkman	Many universities either have offered or are starting to offer computer science courses taught in a compressed time scale, often where students take only one course at a time. The pace of these classes can differ but often move at a speed where a day of an accelerated class is equivalent to a week of a typical semester class. This format has several advantages-more flexibility for collaborative work, better visibility into how students are spending their time (knowing that if a student is struggling it is not because of work in a different class), and less need for students to multitask between different courses. It also has many challenges. From the student perspective, there's the need to stay on top of things and not fall behind, having to catch up if there are absences due to illness or extra-curricular activities, and staying focused on one subject while working under constant time pressure (which often results in a tendency to rush through assignments to meet deadlines). Participants in this BoF will share their knowledge about teaching in this format. What kinds of assignments and assessments work and don't work during accelerated courses? How can we keep the workload reasonable for the students and for ourselves? What interesting pedagogy does this format facilitate? We invite participation both from faculty who are already teaching in this format and also from those considering an accelerated course who want to learn more about the advantages and disadvantages of this format.	Teaching and Learning Under Pressure: Intensive (Accelerated, Block) Computer Science Courses (Abstract Only)	NA:NA	2017
Yingjun Cao:Scott D. Anderson	To convey abstract concepts to students with little to no computing background, faculty members often adopt real world analogies to make CS concepts more relatable. Existing work on the power of analogies in CS education [1-2] has looked into the effectiveness and limitations of metaphors. However, there is no existing forum or repository that educators can share successful and interesting analogies. For this Bird of Feathers session, we invite all interested computer science instructors to share their successful (or unsuccessful) analogies with details on where and how the analogies were used, the related CS concepts, and how a particular analogy might fail to convey the instructor's ideas. We propose to focus on analogies for CS1/CS2 concepts because students in those classes may benefit the most from this teaching technique, and appropriate use of analogies for non-majors might help attract students to the field of computing. This BOF's topic relates to the general trend of teaching diverse groups of students in introductory programming courses and provides an excellent opportunity for CS educators to discuss successes and failures in using metaphors in our classes. The second purpose of this BOF session is to propose a suitable online medium where existing and new analogies can be shared with the CS education community. This BOF can be the beginning of a long-term online collaborative project where faculty members continue to share their metaphors with the community.	The Power of Analogies in Introductory CS Education (Abstract Only)	NA:NA	2017
Lillian N. Cassel:Michael Posner:Darina Dicheva:Don Goelman:Heikki Topi:Christo Dichev	The use and analysis of large quantities of data have become ubiquitous in nearly every discipline. We began a discussion of the role of data science across disciplines, and the role of computing in data science programs, at SIGCSE 16. The session was well attended and the discussion was valuable. Since then, more work has been done and more people are engaged. This BOF will continue the discussion, including welcoming new voices. We will distribute copies of the report of the NSF sponsored workshop on Data Science education and discuss a new initiative to develop curriculum guidelines for data science programs. This initiative will be in its earliest stages by the time SIGCSE meets, so it will be an excellent opportunity to gather impressions about what are critical considerations for any such curriculum effort. We developed a mailing list from the SIGCSE 16 attendees and will use that list to promote the BOF. The BOF will engage SIGCSE participants who have views on the content and role of courses and programs in data science. In addition to the workshop report, we will describe results from an NSF IUSE grant to develop modules for use in many types of courses. These expect to make access to fundamentals elements of data science available as widely as possible. With these as a starting point, participants in the Birds of a Feather session will explore the emerging field of data science and its relationship to computer science education. Discussions will be hosted at http://computingportal.org/datascienceflipped	Advancing Data Science for Students of All Majors (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Janet Davis:Angela Berardinelli:Amanda Holland-Minkley:Ellen Walker	How can CS faculty at liberal arts colleges better communicate with colleagues and the public about the value our institutions offer? Liberal arts colleges play an important role in undergraduate CS education. Liberal arts skills are widely valued in the tech industry, many liberal arts undergraduates go on to earn Ph.D.s in STEM, and many of the educational innovations presented at SIGCSE are developed by liberal arts faculty. Yet, our colleagues at research universities often misunderstand what we do at liberal arts colleges. And while we see the liberal arts and computer science as supporting each other, the popular media tends to portray them as diametrically opposed. These misconceptions limit our opportunities to attract new students and colleagues, as well as opportunities to contribute to public discourse about the important role of information technology in our society. In this BoF, we aim to collaboratively develop communication strategies for individual participants and for the liberal arts CS community as a whole.	Communicating What Liberal Arts Colleges Contribute to Computer Science (Abstract Only)	NA:NA:NA:NA	2017
Adrienne Decker:Monica McGill:Alan Peterfreund	There is a critical need to increase the number of skilled technology workers in part due to the supply of workers in these fields not yet keeping up with demand. In an effort to increase the interest of students in studying within these fields, many commercial, governmental, and non-for-profit educational groups have sponsored numerous activities aimed to expose students to computing prior to college. With the advent of CS for All, there is further need to research these programs and evaluate their effectiveness. This session will gather researchers and practitioners interested in researching the impact that pre-college computing activities have on their participants. Participants will learn about a new initiative underway to make the job of collecting and tracking data easier. To be useful for the broader community, this NSF-funded IUSE initiative requires input from the community it wishes to serve. Participants will have the opportunity to provide valuable input on what their needs are for tracking such activities and what tools may be helpful for them, including methods for data collection to produce meaningful data that can be compared to data provided by other researchers and practitioners. The focus of this discussion will be the long-term impact of these activities; however, we will discuss data collection techniques researchers have used in the past to gauge short-term impact as well.	Evaluating the Long-Term Impact of Pre-college Computing Activities (Abstract Only)	NA:NA:NA	2017
Nate Derbinsky:Durga Suresh	Service learning offers students of computer science an experiential opportunity to hone not only their technical skills of design and programming, but also the soft skills of teamwork, communication, and social/ethical behavior. With hard work and effective mentoring from faculty, the output of student work can also benefit community partners, assuming there is proper infrastructure in place to provide long-term project management and technical support. This Birds of a Feather session provides a discussion platform to share lessons learned and best practices related to establishing a sustainable service-learning program within an undergraduate computer-science curriculum, with a particular focus on balancing benefits to students and community partners with organizational overhead.	Sustainable Methods for Impactful Service Learning in Computer Science (Abstract Only)	NA:NA	2017
Nickolas Falkner:Elizabeth Patitsas:Colleen Lewis	Large volumes of Computer Science Educational (CS Ed) material are published every year but it is apparent that equally large volumes of this are not being read or having much impact on practice, or even available to the practitioners who could use it. How can we distribute CS Ed materials and information more effectively and in potentially innovative ways? This BOF will provide a platform for discussion on a selection of techniques that encourage discussion and dissemination of CS Ed techniques in the community. Is traditional publishing still a good approach or is it just part of a wider group of techniques?	Alternative Publishing and Dissemination of CS Education Research (Abstract Only)	NA:NA:NA	2017
Carol L. Fletcher:William Wesley Monroe	CS Education in primary and secondary schools has experienced a renaissance in the last few years as the CS for All initiative has gained traction across the nation. CS curricula abound and a new AP course, CS Principles, has been deployed that aims to broaden participation. Lack of consensus exists however in what constitutes a qualified CS teacher. A widely accepted and adopted modern certification/licensure process (CSTA 2013) must be developed. Professional development that can be rapidly scaled to build CS teacher capacity is required to realize the vision of CS for All across the nation. In this session we will engage state and national CS thought leaders to discuss the CS certification process, educator standards, and certification tests across various states to determine opportunities for future collaboration. What are the content standards that all beginning CS teachers must meet? What if any specific CS pedagogical topics need to be assessed? Applications today are built in teams and often deployed and distributed in the cloud. Are these topics too advanced for high school CS or should they be integral? How can professional development be designed to help teachers across multiple states meet certification standards? The existing standards from the ETS CS Certification test (Texas Education Agency, 2010) currently used in multiple states will serve as the baseline for group discussion and feedback.	High School CS Teacher Certification: Standards, Assessments, and Professional Development (Abstract Only)	NA:NA	2017
Peter H. Fröhlich:Borja Sotomayor	Introductory curricula, courses, and programming assignments seem to get most of the attention at Computer Science education conferences. This bird-of-a-feather focuses, instead, on upper-level systems courses (databases, networks, compilers, operating systems, etc.) and, more specifically, on courses with a significant hands-on implementation component, from small-scale programming assignments like implementing a memory allocator or a network protocol, to larger projects like implementing an operating system or compiler from scratch.  Designing assignments and projects for these kinds of courses can be challenging: they must be "practical" in the sense of providing a realistic systems programming experience, but also "practical" in the sense of being small and self-contained enough to be feasible in a single quarter/semester. While there are a number of established frameworks (such as Minix, Pintos, or xv6 for operating systems) there is not, to the best of our knowledge, a dedicated forum for educators focused on these types of courses. Such a forum would allow us to more easily share existing coursework, collaboratively develop and refine coursework, and to have seasoned instructors provide support to those just starting out. This birds-of-a-feather is a first step in that direction. It will provide an opportunity for instructors of upper-level systems courses to get to know each other as well as exchange ideas and experiences. Discussion will revolve primarily around programming assignments and projects, but will also look to foster networking and communication beyond the birds-of-a-feather session.	Practical Systems Programming in Computer Science Education (Abstract Only)	NA:NA	2017
Saturnino Garcia	Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to ask questions and learn more, and (2) bring together experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.	Process Oriented Guided Inquiry Learning (POGIL) in the CS Classroom (Abstract Only)	NA	2017
Elizabeth Hawthorne:Cara Tang:Cindy Tucker:Christian Servin	The ACM Committee for Computing Education in Community Colleges (CCECC) is updating the ACM curricular guidance for two-year transfer programs in computer science based on CS2013 with cybersecurity learning outcomes infused throughout. This BOF will provide a platform for two-year and four-year computer science faculty and academic administrators to discuss the newly revised associate-degree transfer guidance. The core task group writing the guidance consists of twelve community college faculty across the United States, led by the ACM CCECC and three task group leaders. The guidance has been informed by input from both two- and four-year educators in two rounds of public review and comment; a BOF, special session, and affiliated workshop at the prior two SIGCSE conferences; and international input at ITiCSE 2016. By SIGCSE 2017 the guidance will be in near-final form. The session will include an overview of the guidance, its relationship to CS2013, and infused cybersecurity. Discussion will center on implementing the guidance in two-year programs, gathering program exemplars, and facilitating transfer with four-year university partners.	Computer Science Curricular Guidelines for Associate-Degree Transfer Programs (Abstract Only)	NA:NA:NA:NA	2017
Amanda M. Holland-Minkley:Thomas E. Lombardi:Madeline E. Smith	Effective computer science curricula can develop students' abilities more broadly than just ensuring content mastery and algorithmic thinking. Computer science curricula may also include components focused on technical writing and communication skills, ethical practice of computing, effective teamwork and project management, and the application of computer science in a broader interdisciplinary context. In this session, attendees will be invited to share information about how they are incorporating this content into their curricula and the challenges they are facing in doing so. By sharing information about our current practices, attendees will help develop a survey of the variety of strategies CS programs are using to deliver this educational content. Attendees will also be given the opportunity to discuss the specific teaching challenges they encounter in their courses when teaching this content and share effective solutions they may have found to these problems.	Strategies for Including Soft Skills and Interdisciplinary Content in CS Education (Abstract Only)	NA:NA:NA	2017
Josh Hug:Cynthia Lee	As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Providing timely effective feedback to students, exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating many types of course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content. A master list of such tips, as well as a retrospective summary, will be compiled and provided to the SIGCSE community at http://tinyurl.com/wotb2017.	Handling Very Large Lecture Courses: Keeping the Wheels on the Bus III (Abstract Only)	NA:NA	2017
Amardeep Kahlon:Bonnie MacKellar:Anastasia Kurdia	Plagiarism is of great concern to faculty in all fields, including computer science as it leads to one certain outcome -- a compromise not just in student learning but also in the entire academic process. Faculty attempt to deal with this epidemic in varied ways such as by writing new course materials each semester, putting a larger or entire grade focus on exams, or even asking individual students to explain their assignments. However, plagiarism remains a source of frustration for both faculty and administrators. This BoF will bring interested faculty together to discuss the various and surprising ways in which students plagiarize, the methods of countering plagiarism, and the currently available tools for detecting plagiarism. Questions we will be discussing include: Do students understand plagiarism in the context of writing software? How can we create an atmosphere that discourages plagiarism, yet fosters collaboration and encourages learning from multiple sources? To what extent can one make an assignment "plagiarism-proof"?	GitHub, Tutors, Relatives, and Friends: The Wide Web of Plagiarism (Abstract Only)	NA:NA:NA	2017
Amardeep Kahlon:Linda Smarzik:Mary Kohls	Many community colleges are looking at Competency-Based Education (CBE) as a way to increase student recruitment, engagement, completion, and transfer to baccalaureate programs. In addition, colleges are looking at CBE as a way to reduce costs as well as provide students with clear, marketable skills for employment. CBE is particularly suited to computer science due to the nature of the discipline where well-defined, measurable outcomes can be designed and implemented. Is your college exploring a curricular redesign using CBE? Do you want to know what CBE is and how to implement a CBE curriculum in computer science? This BoF will host a discussion on planning, implementation, and scale-up of CBE programs. Besides learning about CBE, this BoF will provide attendees with a chance to connect with others trying to implement CBE programs so that they can share knowledge, share resources, and form future collaborations. The recent CS2013 curricular guidance will also be discussed as an important resource for developing CBE in CS.	Competency-Based Education in Lower-Division Computer Science Taught at Community Colleges (Abstract Only)	NA:NA:NA	2017
Richard E. Ladner:Andreas Stefik:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing are inaccessible to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll (formally AccessCS10K) will be shared. Handouts and stickers will be given out.	Access to Computing Education for Students with Disabilities (Abstract Only)	NA:NA:NA	2017
Justin Li	Introductory CS courses often present computational concepts in a multitude of varied contexts. The contents of these examples and assignments present an untapped opportunity to reach out to under-represented minorities. For CS in particular, the ubiquity of technology in modern society makes it imperative that students consider how seemingly innocuous technical decisions could selectively disadvantage particular populations. If the entirety of the CS community - from K-12 to industry - is to be inclusive, we must train students to be aware of these issues from their first CS course. This BOF aims to foster discussion of how examples and assignments can illustrate CS concepts and simultaneously acknowledge the challenges that under-represented students may be facing. At least three such avenues are possible: 1) Choosing multi-cultural contexts for homework questions and in-class examples; 2) Assigning projects with socioeconomic implications, such as the Schelling Segregation Model (a 2014 Nifty Assignment); and 3) Showing how inclusion is easily subverted by majority-Caucasian data sets or "purely technical" decisions such as representing gender with a Boolean. The long-term goal is to establish a network of instructors interested in contributing assignments and activities, and to create a resource suitable for broader dissemination in the future.	Weaving Diversity and Inclusion into CS Content (Abstract Only)	NA	2017
Stephanie Ludi:Stan Kurkovsky	Hands-on activities can reinforce a variety of Computer Science concepts covered in class. Active learning techniques that utilize tangible manipulatives such as LEGO or other simple objects provide unique opportunities for students to explore or reinforce topics during class in a playful setting. This kinesthetic learning approach can also provide a platform that has a low learning curve, can facilitate creative thinking, improve student engagement with content and peers while adding gamification elements to the course. Different Computer Science topics lend themselves to such activities to differing degrees and the logistics of conducting these activities in large classrooms requires careful planning and execution, especially where cost is a factor and replication is desired between classes. Some educators may have experience while others may be interested but do not know where to start. BOF attendees will hear from those who have used different types of manipulatives, applied manipulatives to different Computer Science topics, and utilized said activities in different scenarios and contexts (e.g. large vs. small classes, single student vs. team activities). The sharing of ideas, strategies, and resources, as well as potential collaborations is also central to the discussion. The audience is expected to consist of both university faculty/lecturers (especially those who teach lower division courses) and high school teachers of computer science who are interested in engaging students in course content via kinesthetic activities and tangible manipulatives.	Using Tangible Manipulatives for Hands-on Activities in Undergraduate Computer Science Classes (Abstract Only)	NA:NA	2017
Becka Morgan:Heidi J.C. Ellis:Gregory Hislop:Grant Braught:Lori Postner	There is a growing community of faculty members who support student participation in Humanitarian Free and Open Source Software (HFOSS) projects in a variety of courses at a range of different institutions. HFOSS can provide a plethora of learning opportunities for students that ranges from design to code to test to documentation and more. Involvement in an HFOSS project allows students to gain professional skills while also gaining an understanding of the social impact of computing. However, experience has shown that supporting student involvement in HFOSS can pose some challenges to instructors including identification of appropriate assignments, creation of rubrics, grading, and managing interactions with the HFOSS community. The organizers of this BoF are faculty members who have a spectrum of experience in supporting student involvement in HFOSS. The organizers will share tips for structuring such student participation as well as discuss challenges that they've experienced and approaches for overcoming those challenges. Attendees will be encouraged to ask questions about how to get started, selecting an appropriate HFOSS project, structuring assignments, and more. This BoF will provide faculty members the opportunity to network with instructors with experience in this area.	Perspectives on Teaching Humanitarian Free and Open Source Software (Abstract Only)	NA:NA:NA:NA:NA	2017
Tina Ostrander:Ruby ElKharboutly:Karen Jin	Supervising students in project-based courses is challenging, particularly when the projects are "open-ended," such as real-world projects or projects whose ideas are generated by the students. These projects often have undefined scope and use technologies and tools where we lack expertise. In this session, we plan to discuss the challenges faced by teachers in supervising open-ended projects in project-based learning environments. Some of the questions we address in this session: How do we support students with a project in a domain we know nothing about? How do we help students find meaningful and relevant projects with appropriate scope? How do we assist students in selecting appropriate technologies and tools? How do we guide students in planning their iterations to deliver business value and core functionality? This BoF is for instructors who teach or are interested in teaching courses with open-ended projects.	Surviving "Open-ended Projects" in Project-Based Learning: A Teacher's Perspective (Abstract Only)	NA:NA:NA	2017
Karen Parker:Sloan Davis:Chris Stephenson:Jason Ravitz	Recent studies on the impact of CS teacher professional development (PD) opportunities have highlighted areas of improvement to effectively grow the number of well-prepared CS teachers. In this BoF Google will share data from CS4HS, an annual program that awards funding to research institutions and education nonprofits globally for the purpose of developing innovative and scalable CS PD that maps to local standards and demands. These data will serve as a starting point to engage the attendees in a wide-ranging and action-oriented discussion on ways the CS education community can improve our PD processes and results.	Improving Effectiveness of CS Teacher Professional Development (Abstract Only)	NA:NA:NA:NA	2017
Ian Pollock:Lonny Brooks	The idea for this session is based on conversations with colleagues from computer science, art, communications, engineering, and biology as well as international colleagues from three continents at ITICSE-2016 on the use of Game Jams to increase participation of underrepresented minorities (URMs) in Computer Science and STEM education. High-impact practices are powerful tools in engaging students (NSSE, 2014), perhaps even more so for non-traditional, ESL/ELL, first-generation, and URM students in STEM disciplines by increasing peer and faculty contact, active learning, and high expectations (Goodman). We believe that event-based teaching, such as Game jams and Hackathons provide students with many, if not more of the experiences that are credited with those of commonly identified High Impact Practices (Kuh, 2008). These events also create peer and social networks among participants. While not conclusive - anecdotally the networks of peers and social capacity seem to make a difference in post graduation job search (Mouw). Game Jams and Hackathons are still relatively new in higher education, and while there is a lot of anecdotal evidence as to the benefits reaped by participants of these events, there exists little in the way of long-term studies in the literature that speaks to the academic value of these events. This session will create a conversation among faculty from computer science and other disciplines who are interested in creating these events and their institutions, and developing scholarship to fill in the gaps in the literature around the effects and efficacy of these events on the long-term success of participants.	Collaborative research into Game Jams, Hackathons and Event-Based Teaching in Higher Education (Abstract Only)	NA:NA	2017
Thomas W. Price:Neil C.C. Brown:Chris Piech:Kelly Rivers	As more programming environments add logging features and programming data becomes more accessible, it is important to have a conversation about how we share and use this data. Uses of programming log data range from big-picture analyses to dashboards for instant teacher feedback, to intelligent, data-driven learning environments. The goal of this BOF is to talk about what data is important to collect, where it can be gathered and shared, what general data formats make sense, how to handle privacy and anonymization, and what ultimately we want to see the data used for. The BOF welcomes both producers of programming log data and current or potential consumers, interested in how it could be applied in their classrooms or research. One hopeful outcome of this BOF is a commitment to documenting and sharing existing programming data in an accessible location and format.	Sharing and Using Programming Log Data (Abstract Only)	NA:NA:NA:NA	2017
Farzana Rahman:Suzanne Matthews:Kelly Shaw:Andrea Danyluk	Undergraduate research is a critical component of high-quality education in any discipline, including Computer Science (CS). Over the past few years, there has been a dramatic increase in CS undergraduate research activities at colleges and universities, and predominantly undergraduate institutions (PUIs) have an important role to play. Not every university has abundant resources to devote to research, and teaching-focused institutions may face the greatest challenges in this respect. Faculty at PUIs, for example, may face funding and infrastructure challenges and may find themselves stretched thin due to especially high teaching and service expectations. A frequently asked question by new faculty at these institutions is: Is it really possible to conduct meaningful research in such a fast-paced discipline as CS, while juggling a very high teaching and service load? Not only is the answer to this question "Yes!" but there are advantages to conducting research at a non-research institution. Faculty here has access to some of the brightest young minds who will potentially be future graduate students in research-intensive universities. They may have the freedom to do research that is too risky for graduate students. They can work on projects they are interested in, rather than those they know must work. With good time management techniques and careful selection of collaborators and student researchers, faculty here really can conduct important CS research. Thus, the focus of this BOF is to share methods that are helpful in conducting significant and meaningful CS research in a primarily undergraduate or teaching institution.	Can we really do it?: Conducting Significant Computer Science Research in Primarily Undergraduate Institutions (PUIs) (Abstract Only)	NA:NA:NA:NA	2017
Jason Ravitz:Karen Peterson:Kathy Haynie:Juliet Tiffany-Morales	With the growth of informal and out of school educational focus on increasing female participation in CS, many of us are asking critical questions about program development, participant learning, and program impact. Which programs are having success reaching and encouraging girls to pursue computer science? What stumbling blocks are encountered? How successfully are programs engaging girls with different STEM orientations or different racial/ethnic/economic backgrounds? How successful are existing CS programs in pivoting to be more accessible to females? Many nonprofit organizations cannot effectively answer these questions because they lack the capacity for program evaluation. Some organizations delay putting evaluation into place, or use a one-dimensional evaluation approach (i.e., a single survey) even though ongoing and comprehensive evaluation results are crucial to program success. Building internal evaluation capacity can help organizations meet their most critical evaluation needs and build systems of continuous improvement. This BOF session will engage participants in discussing their challenges in designing and implementing program evaluations. Participants will have the opportunity to share strategies, evaluative resources, and challenges in building evaluative capacity and conducting effective evaluations. Discussion leaders will share resources developed as part of an evaluation capacity building initiative with informal CS education programs--CS Outreach Program Evaluation Network (CS OPEN--a collaboration between the National Girls Collaborative and Google). As an outcome of this BOF discussion, we hope to collectively identify some lessons learned and next steps for building evaluative capacity around informal CS education.	Strengthening Informal CS Education Program Delivery through Evaluation Capacity Building (Abstract Only)	NA:NA:NA:NA	2017
Michael P. Rogers:Bill Siever	The recipe might not sound particularly exciting: take a microcontroller, garnish with sensors and various output devices, season with a bit of code, and then network until done: but the result -- the Internet of Things (IoT) -- is a rapidly burgeoning field that provides a novel and enticing context for sophomore to senior level students to hone their networking, coding, problem solving and presentation skills, exercise their creativity, and unleash their entrepreneurial spirit. In short, it is a perfect mid-to-upper division elective course. Faculty considering such a course are faced with a myriad of difficult decisions, however, including the appropriate class level, course structure, prerequisites, and platform choice. The purpose of this session is to bring together people who have taught, or are considering teaching, IoT, to discuss these issues. Topics may include: a) an overview of platforms and tools, b) appropriate course topics, c) platform acquisition, deployment, and costs, d) identification of support materials (e.g., classroom friendly materials/guides/documentation), e) appropriate prerequisites, f) IoT platform fidelity (i.e. will the experience translate to real-world IoT skills), and g) discussion of potential broader curricular advantages that come from including IoT topics..	An IoT BOF (Abstract Only)	NA:NA	2017
Rafi Santo:David Phelps	Do different people hold different reasons for promoting universal computer science education (CS4All)? Do different rationale for CS education imply different learning designs? Is it possible to design educational activities that meaningfully integrate multiple purposes and visions? As CS4All initiatives kick off in localities across the United States, we believe that these questions are key to developing policies, pedagogies and technologies that actually are 'for all'. In this session, participants will engage in a facilitated conversation supported by an informal collaborative tabletop card game. The game, meant to promote reflection, debate, discussion and ideation around CS education, will engage participants as designers tasked with integrating multiple commonly-held values and visions of Computer Science education into a concrete learning activities. The goal of this informal activity and brainstorm is not to become a master designer in 45 minutes. Rather, this design challenge acts as a launching pad to have meaningful discussions around the various visions of Computer Science education and what it looks like to translate these visions into practice. We will also invite participants to give feedback on their experience using the game as a conversation starter, with the hope that it might be used by others engaged in deliberations around how to design CS educational experiences. The game will be supplementing an ongoing research project, "CSed Visions" (http://wp.me/P3GrOX-ek) that investigates the role that visions and values play in Computer Science education.	CS4What?: A Game-based Discussion about the Purposes of Universal Computer Science Education (Abstract Only)	NA:NA	2017
Deborah Seehorn:Lissa Clayborn	Computer Science education in the K-12 school system is in the forefront of education news. Schools, districts, and states are looking for guidance in developing and delivering standards-based computer science curriculum in K-12 schools, and many are turning to the CSTA standards. The CSTA K-12 Computer Science Standards have been revised and align to the K-12 CS Framework. The standards delineate what CS concepts students are to know and what CS practices students are to be able to do at the various grade levels. President Obama and the OSTP have initiated a widely supported Computer Science for all initiative for K-12 education in the US. How do the newly revised CSTA K-12 CS Standards support the CS for All initiative? How can the standards be used by individual teachers, curriculum developers, and administrators to develop their K-12 Computer Science Education program? This BOF will provide a forum for participants to share how they are using the CSTA standards and what successes and challenges they have encountered.	CSTA K-12 CS Standards for All (Abstract Only)	NA:NA	2017
Mark Sherriff:Christopher Gregg:Shawn Lupoli	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts, and greater pay as demonstrated by excellence in teaching, educational material development, and service. As this type of position has been growing rapidly in popularity, CS departments have been developing the expectations and responsibilities for such faculty almost ad hoc, creating policies that can be vastly different similarly-named positions at other universities. This birds-of-a- feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching Track Faculty in CS (Abstract Only)	NA:NA:NA	2017
Donald Slater:Eric Brown:Wanda Dann	This session is for anyone currently using Alice 2 and/or Alice 3, or those exploring the possibility of using Alice in their curriculum. The discussion leaders and attendees will share teaching strategies, tips, and techniques with each other and those new to Alice. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources. There will be a special emphasis on mapping Alice curriculum and instructional materials to CSTA, CSP, code.org and ACM curriculum standards and guidelines for a wide range of age/grade levels. The team will also share feedback from the Beta users of the new textbook and CS Principles Course.	Mapping Alice Curriculum to Standards: A BOF for the Alice Community (Abstract Only)	NA:NA:NA	2017
Anya Tafliovich:Jennifer Campbell:Daniel Zingaro:Francisco Estrada:Leo Porter	With growing enrolment and ongoing research into best practices for team work, many instructors are rethinking how to form, evaluate, and manage teams. In this BoF, instructors will discuss the strategies they have employed, the effectiveness of those approaches, and the tools that support administering teams. Discussion topics may include self- and peer-evaluation, grading strategies, software support, and conflict resolution.	Forming Strong and Effective Student Teams (Abstract Only)	NA:NA:NA:NA:NA	2017
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our 14th Annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ABI, ACM-W, CDC, CRA-W, NCWIT. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organizations and who do not customarily have an opportunity to share ideas face-to-face.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA	2017
Richard Weiss:Ambareen Siraj:Jens Mache:Elizabeth Hawthorne:Blair Taylor:Siddharth Kaza:Michael E. Locasto	We have been teaching cybersecurity using hands-on, interactive exercises that have successfully engaged students. However, in order to meet the increasing demand for security professionals, we need to greatly expand the community of faculty teaching in this area. We would like to bring together new and experienced faculty to do this. Ambareen Siraj has set up a dedicated Facebook group to allow us to work together outside of SIGCSE events, but we need to develop a critical mass of users. During the BoF, we will encourage participants to sign up for the closed group, and we will have an exercise where they ask and answer questions about what they want from this learning community. One benefit of having a learning community is that it will be easier to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts, including our own (e.g. Security Injections, the Security Knitting Kit project, and EDURange). The BoF also benefits experienced members, helping them to reach other faculty with similar interests. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. For the last five years, we have been doing that at SIGCSE. We will discuss ways to integrate security-related exercises into existing courses. The questions we will ask are, "What exercises have you tried? What are your experiences? What are you looking for from the community?"	Building and Supporting a Community of CS Educators Teaching Cybersecurity in 2017 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2017
Pat Yongpradit	With the explosive growth and interest in computer science, the CS education research community has been been asked significant questions from the K-12 community: What should students learn in a K-12 computer science pathway? When should they learn particular concepts? How do you implement computer science for all students? How can computer science be integrated into other subjects? The ACM, Code.org, CSTA, Cyber Innovation Center, and National Math and Science Initiative have collaborated with lead states/districts and the CS education community have developed the K-12 Computer Science Framework, a high-level guide for states or districts who want to design curriculum, standards, assessments, or teacher development programs. The framework identifies the core concepts and practices at grades 2, 5, 8, and 12. Yet the research base for the framework is incomplete. The BOF session will allow researchers to discuss opportunities in K-12 CS ed research within five areas related to the implementation and future of the framework: Equity and access, Learning progressions, Pedagogical content knowledge, Facilitating learning in other disciplines, and Policy and implementation within K-12 education systems.	Researching the K-12 Computer Science Framework (Abstract Only)	NA	2017
Dominic A. Amato:Ugochi Acholonu	This workshop introduces participants to the Digital Youth Network's Minecraft City Server; a project that seeks to lower the barrier of who can lead computing-related learning opportunities for diverse youth. We present teaching techniques and advice for adapting the Minecraft platform as an educational portal based upon the research we have done with youth across Chicago. Participants will receive handouts describing mentorship techniques and curriculum models that facilitate learning interactions in a blended space. Of critical focus will be exploring the question of how to coordinate mentorship when working in two learning spaces (online and physical) simultaneously. Handouts will be supplemented with a discussion of the adult support roles that we identified as being critical to running engaging Minecraft learning experiences for youth. The workshop will also allow participants to experience the affordances of Minecraft to create an engaging blended learning environment that teaches computational concepts. Participants will receive a hands-on introduction to the basic game mechanics, designing with Redstone, the in-game equivalent to electrical circuitry, and exploring computer programming in-game with Python.	Designing Blended Learning Models to Support Computational Learning: Minecraft Edition (Abstract Only)	NA:NA	2017
Edwin Franklin Barry	Computer systems courses are often challenging to students who must learn the characteristics and behavior of a variety of system components and tools across multiple levels of abstraction. This workshop shows how microcontroller-based projects ("micro projects") can make topics such as data/program representation, bit-manipulation, I/O operation, event-handling, and digital communication more visible, concrete, and motivating. Participants will learn to use a low-cost hardware platform (programming in C/C++) to develop two example micro projects that demonstrate bit manipulation using digital I/O, and event handling with interrupts. We discuss how these projects may be extended or modified to introduce other topics, including microcontroller ISA, assembly language programming, and stack operation. Other project examples will be presented that use serial communication, timers, and a simple multitasking executive to illustrate program/data representation, digital communication, optimization, and operating system principles. We will discuss ways micro projects can be integrated into systems courses at various levels of the curriculum (by varying scaffolding) or used as a framework for an embedded systems/physical computing course. In addition to handouts, we supply participants with the software and hardware for use during the workshop and sources for acquiring them for future classroom use.	Micro Projects: Putting Light and Magic into Learning Computer Systems Concepts (Abstract Only)	NA	2017
Bradley Beth:Amy Moreland	UTeach Computer Science Principles (CSP) is a classroom-ready curriculum designed in alignment with the CSP framework and endorsed by the College Board for Advanced Placement (AP) Computer Science Principles implementation. Piloted in dual enrollment format with 700 high school students, and refined iteratively from 2011--2015, UTeach CS Principles is now being offered in about 300 high schools, and preliminary data suggest great promise for broadening the participation of students from historically underrepresented groups in computing. Building on UTeach's foundation of teacher preparation and advocacy, UTeach CS Principles teachers receive intensive implementation training and support, including comprehensive teacher materials, regional summer workshops, regular remote micro-workshops during the school year, dedicated phone/email coaching, and access to an online professional learning community. The UTeach professional learning model encourages the participation of teachers with a variety of backgrounds and levels of experience, and leverages participating teachers' diverse areas of expertise to strengthen learning and support opportunities for all participants. By 2017, online professional learning modules will be available to rural teachers and others who are otherwise unable to attend a summer workshop. K-12 educators and school and district administrators should plan to attend this hands-on workshop. Presenters will engage participants in demonstration lessons and activities, and participants will leave with materials for immediate use in K-12 computer science classrooms. Opportunities for professional learning and support also will be discussed. Laptops are required.	UTeach CS Principles: Broadening Participation Through K-12 Computer Science Education and Teacher Professional Learning and Support (Abstract Only)	NA:NA	2017
Neil C.C. Brown:Amjad Altadmri	BlueJ is a beginner's IDE for Java which has been in popular use for over ten years. But it continues to improve and evolve: BlueJ 4.0.0 was recently released with several new features. Git support has been added in a user-friendly way, and the support for writing JavaFX GUI applications has been improved. BlueJ 4 also includes the frame-based Stride editor (previously seen in Greenfoot), which allows for block-like programming. BlueJ 4 also retains all its existing functionality such as interactive object creation and method invocation, a "REPL"-like code pad, a debugger and testing support. This workshop, run by the developers of BlueJ, will take the participants, whether new to BlueJ and Java or long-time users, through the new features while also providing an introduction/refresher on the existing capabilities of the software. Participants will learn how to share BlueJ projects via Github, create a new JavaFX application, dabble with Stride and get a tour of the existing BlueJ functionality. A laptop with BlueJ 4.0 installed is required.	What's New in BlueJ 4: Git, Stride and more (Abstract Only)	NA:NA	2017
Josh Caldwell:Dani McAvoy:GT Wrobel	CS Discoveries: An Introductory Course for Late Middle and Early High School	CS Discoveries: An Introductory Course for Late Middle and Early High School (Abstract Only)	NA:NA:NA	2017
Aaron Dingler:Peter Bui	With the recent emphasis on Parallel and Distributed Computing topics in the Computer Science Curricula 2013, instructors are increasingly incorporating these topics into their undergraduate courses. Unfortunately, many universities lack the dedicated computing resources to provide hands-on experiences in this area. This workshop guides attendees through the open source WorkQueue software to teach parallel and distributed computing principles to undergraduate students. WorkQueue is a distributed master worker framework developed by the Cooperative Computing Lab at the University of Notre Dame. WorkQueue is well-suited for inclusion in undergraduate courses due to the ease of use and deployment on a wide range of computer systems, low administrative overhead, and scalability. WorkQueue can be deployed on any system, from a small Raspberry Pi cluster to a high-performance grid computing environment. This workshop walks attendees through the use of WorkQueue with three demonstrations: a "live demo" such as would be used to engage students in the classroom with a hands-on introduction to distributed computing principles, and a guided "tour" through two lab assignments. The first lab assignment will give attendees a hands-on example of a simple distributed computing problem from implementation to deployment. The second lab will demonstrate WorkQueue MapReduce, a simple framework that can be used to introduce the MapReduce programming model without the overhead of a Hadoop cluster or equivalent. A laptop is required to participate in the workshop; the presenters will provide a pre-configured Linux VirtualBox virtual machine to facilitate software setup, or attendees can use their own Linux installations.	Teaching Distributed Computing with WorkQueue (Abstract Only)	NA:NA	2017
Barbara Ericson:Rebecca Dovi:Ria Galanos	To reach President Obama's vision of computer science for all, we will need to prepare many more secondary teachers to teach computer science. In 2015, less than 3,000 schools passed the College Board's audit to offer the Advanced Placement (AP) Computer Science (CS) A course, while close to 12,000 schools passed the audit to offer Calculus AB. The presenters have led teacher professional development workshops for many years and will share their knowledge and materials to help others offer effective teacher professional development. In particular they will cover how to plan a workshop, how to find funding, how to prepare materials for secondary teachers, what materials are available for teacher professional development, how to teach pedagogical content knowledge (how to teach computer science), and how to increase diversity in computer science classrooms. The presenters have free materials for the new Advanced Placement Computer Science Principles (CSP) course as well as the Advanced Placement Computer Science A course. These materials include free interactive ebooks for both CSP teachers and students to help them learn programming and a free interactive ebook for the AP CS A course. Participants will be encouraged to share their materials and strategies as well. Laptop Required.	How to Plan and Run Effective Teacher Professional Development (Abstract Only)	NA:NA:NA	2017
Tasha Frankie:Duane Wesley:James Gappy:Harry Cheng	This workshop is an introduction to using Linkbots as a teaching tool to engage students in CS0/CS1 courses, both at the college/university and high school levels. Participants will learn how to program Linkbot robots using RoboBlockly (block-based) and Ch (C/C++ interpreter with ChIDE) in C-STEM Studio through hands-on activities. Additionally, we will present an overview of the curricula developed by the UC Davis Center for Integrated Computing and STEM Education (C-STEM) that integrates robotics into computing and math classes for the elementary school level through the college level. In the second half of the session, participants will gain more hands-on practice and a better understanding of how Linkbots inspire learning in the classroom by forming teams and tackling problems from the annual C-STEM RoboPlay Challenge Competition, which is designed for students to showcase their real-world problem solving skills. Further information about C-STEM is at: http://c-stem.ucdavis.edu/. Laptop with administrative installation privileges is required to install the software used in this workshop.	C-STEM: Engaging Students in Computing with Robotics (Abstract Only)	NA:NA:NA:NA	2017
Crystal Furman:Sandy Czajka:Adrienne Decker:Dianna Xu	This workshop provides participants with hands-on approaches to teaching common algorithms in an AP Computer Science A context, but common in CS1 in general. Teachers will explore strategies for teaching students: how to introduce commonly used algorithms to students; how to have students problem solve using hands-on techniques; how to determine which algorithm to use provided a program specification; write and modify the algorithm; and interpret the result of an algorithm. Together, participants will be looking at the commonly taught and assessed algorithms in first semester computing courses, especially those found on the AP Computer Science A assessment. A set of example free response questions from the AP Computer Science A assessment will be examined to identify how these algorithms are used and modified in solutions.	Engaging Students with Algorithms (Abstract Only)	NA:NA:NA:NA	2017
Ananda D. Gunawardena	The modern teaching should be based on data driven techniques. Yet many of us do not have the resources to collect, analyze and act on course data on a regular basis. The process of collecting data from multiple sources, integrating and analyzing can be a daunting task. The purpose of this workshop is to help simplify this process. The workshop introduces participants to the basic process of establishing a data collection protocol, dealing with institutional review board (IRB) if applicable, setting up an interactive framework to help facilitate data collection, and developing customized dashboards to help support classroom teaching. We will also discuss ways to set up interactive reading and video viewing activities and student collaboration activities to increase student course engagement. These techniques can help collect student interaction data on a regular basis. The workshop will also discuss data integration standards such as Learning Tools Interoperability (LTI) that can facilitate data integration efforts across data rich learning applications that are already in use	How to Collect, Analyze and Act on Learning Data in Computer Science Courses (Abstract Only)	NA	2017
Sarah Heckman:Jeffrey C. Carver:Mark Sherriff	One of the most important, and difficult, aspects of starting an education research project is identifying an interesting, answerable, repeatable, measurable, and appropriately scoped research question. The lack of a valid research question reduces the potential impact of the work and could result in wasted effort. The goal of this workshop is to help educational researchers get off on the right foot by defining such a research question. This workshop is part of the larger Designing Empirical Education Research Studies (DEERS) project, which consists of an ongoing series of workshops in which researcher cohorts work with experienced empirical researchers to design, implement, evaluate, and publish empirical work in computer science education. In addition to instruction on the various aspects of good research questions, DEERS alumni will join us to mentor attendees in development of their own research questions in small group breakout sessions. At the end of the workshop, attendees will leave with a valid research question that can then be the start for designing a research study. Attendees will also receive information on how to apply to attend the full summer workshop, where they can fully flesh out the empirical study design, and join a DEERS research cohort. More information about DEERS can be found at http://empiricalcsed.org.	Designing Empirical Education Research Studies (DEERS): Creating an Answerable Research Question (Abstract Only)	NA:NA:NA	2017
Sean Hickey	In K-12 classrooms, introductory computer science most often focuses on programming. However, teaching software really only tells half the story of how a computer works. Teaching hardware from an early point in a CS sequence helps to complete the picture for students and demystify what is happening under the hood of the machine. In this hands-on workshop, participants will work in teams to build computational circuits using switches, wires, breadboards, and LEDs. Starting from first principles of boolean logic and binary arithmetic, participants will collectively assemble a working multi-bit addition circuit. This workshop targets K-12 teachers (especially middle school and high school) who have experience teaching programming. Attendees should bring a laptop, if possible.	From Lightbulbs to Logic: Teaching Hardware in Intro to CS (Abstract Only)	NA	2017
Stephan Krusche:Andreas Seitz:Nadine von Frankenberg:Bernd Bruegge	Learning to apply computer science requires practical experience and cannot only be taught in theory. Interactive learning is a new approach: educators teach small chunks of content in short cycles of theory, example, exercise, solution and feedback. It is based on active, computer-based and experiential learning and focuses on immediate feedback to improve the learning experience. It allows students to reflect about the content incrementally. It includes hands-on activities, guidance by the instructor and increases students' motivation and engagement. This workshop describes experiences of multiple interactive learning courses for large classes, including exercises for (1) multiple choice quizzes, (2) interactive tutorials, (3) interactive programming exercises, (4) interactive modeling, and (5) team activities. Based on our experience, we present multiple case studies and concrete examples of interactive exercises. While the assessment of many exercises can be (semi-)automated, teaching assistants in the classroom manually assess other exercises. We show how educators can integrate these exercises into large classes without significantly increasing their effort. Participants should bring a laptop to this workshop.	How to Integrate Interactive Learning into Large Classes (Abstract Only)	NA:NA:NA:NA	2017
Zachary Kurmas	Many students find testing software as difficult and frustrating as they find writing prose. As with writing, no pedagogy will magically replace the need for plenty of practice. Therefore, we believe students should be required to write tests in as many courses as practical. This workshop will present a survey of tools that instructors can use to incorporate testing into many different courses throughout the curriculum. We will begin with a quick review of JUnit, then present tools such as (1) RSpec (Ruby's unit testing framework, on which many other testing frameworks are based), (2) MIPSUnit (MIPS assembly) (3) DLUnit (digital logic and simulated CPUs), (4) CUnit (Operating Systems and Networking), (5) Jasmine (JavaScript), (6) and Cucumber (which has many uses, including system tests on web applications). See http://www.cis.gvsu.edu/~kurmasz/TestingWorkshop for more details. (Note: This workshop is not designed to teach high-level testing principles such as "what tests do I need?", or "how do I know when I've written enough tests?" Similarly, this workshop will not cover TDD or BDD.)	Testing Across the Curriculum (Abstract Only)	NA	2017
Yesem Kurt Peker	Cryptography is a major area of study that provides mechanisms to achieve confidentiality, integrity, authenticity, and non-repudiation in information and computer security. For many not in the area of cryptography, teaching cryptography may be a challenge due to the mathematically heavy background underlying the subject. For students it may be intimidating to read about cryptography with all the terminology new to them. This workshop provides an introduction to basic functions and terminology of cryptography without going into the details of the specific implementations and the mathematics involved in them. The workshop includes four modules focusing on four main mechanisms of cryptography; namely, symmetric key encryption, public key cryptography, hash functions, and digital signatures and certificates. Each module in the workshop starts with a presentation of the topic and proceeds with hands-on activities. The presentations include descriptions of mechanisms as well as the reasons for using such mechanisms. For example, it provides answers to questions such as what does asymmetric encryption provide us that symmetric key encryption does not? Why are hash functions necessary in digital signatures? Why do we need digital certificates in addition to digital signatures? The participants will receive access to presentations and hands-on exercises as well as supplementary material such as assignments for students and questions for assessment. Educators who want to introduce computer security and cryptography early in their curriculum and students and educators who want to learn the basics of cryptography would benefit from this workshop. A laptop is needed for the hands-on activities.	Modules for Integrating Cryptography in Introductory CS and Computer Security Courses (Abstract Only)	NA	2017
Clif Kussmaul:Chris Mayfield:Helen H. Hu	This workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-5 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach, and has been shown to significantly improve student performance. Workshop participants will work through POGIL activities as students, and work through POGIL meta-activities that are designed to help teachers learn core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses and concepts. For more information, see http://cspogil.org and http://pogil.org, including activities for CS1, CS2, and other courses. Laptops optional.	Workshop: Guiding Students to Discover CS Concepts & Develop Process Skills Using POGIL (Abstract Only)	NA:NA:NA	2017
Shawn Lupoli:Karan K. Budhraja	The workshop will focus on the overall aspects of creating a successful peer grading experience for instructors and students using video rubrics. This includes: determining the right exam rubric, video creation, creating a blind "coupon" sheet, using students and class time to grade and storage. A solid rubric is the best candidate for a test to be peer graded. The rubric will be used in creating videos that along with a correct answer, describe each point breakdown in detail. As the instructor, the class meeting is the only time to have everyone together, answer questions, make grading decisions that affect the whole, show the answers, display exam point breakdown, and finally, grade. In order to get all of this done, a private set of videos are created to quicken the information needed for grading. The workshop will use a trial version Camtasia to create the videos. When taking the test, the students are given a test with the blind "coupon" cover sheet so later, the student graders are unable to determine which student really took this test - protecting the privacy of the original test taking student. After the tests have been taken, the next class meeting can be set aside for peer grading. The instructor plays the afore mentioned videos which are broken up into segments in order for the student to either the focus on the grading or on their own answer since the possibility of one of them getting it right.	Creating Peer Grading Videos (Abstract Only)	NA:NA	2017
David J. Malan:Nikolai Onken:Dan Armendariz	This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Amazon's Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker "container" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional "less comfortable" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.	A Web-Based IDE for Teaching with Any Language (Abstract Only)	NA:NA:NA	2017
John Maloney:Michael Nagle:Jens Mönig	The first programming language for most children worldwide today is a blocks-based language like Scratch or Snap. GP is a blocks-based programming language designed to be a follow-on. GP aims to be a general purpose language, like Python or Ruby, in which students can create more complex programs or create standalone applications. GP includes a mechanism for creating modules for others to re-use and a wide variety of primitives, including tools for manipulating CVS and JSON data, using serial port and network connections, and manipulating pixels in pictures or samples in sounds. The language could be used in computer science classes beyond introductory computer science. GP explores the questions: "How far can we go with a blocks-based programming language? Do we have to move students to a textual programming language to explore advanced computational ideas and applications?" In this laptop required workshop, participants will try out GP. They will explore sample projects and create their own projects that push on advanced features of GP such as using multiple classes and instances, creating sets of blocks that can be shared as extension modules, using cloud data, or manipulating images and sounds. GP will be released (free and open source) in Summer 2017, so our goal is to find early adopters who are interested in trying GP and developing examples for others.	GP: A General Purpose Blocks-Based Language (Abstract Only)	NA:NA:NA	2017
Fred Martin:Samantha Michalka:Harry Zhu:Jere Boudelle	MIT App Inventor is widely used to introduce students to programming and building mobile apps. In this workshop, we will introduce AppVis, an extension to App Inventor that allows users to create apps that publish data to iSENSE (isenseproject.org), a web-based system for collaborating with data and visualizations. Using AppVis, apps can also retrieve data from iSENSE and display visualizations in the app. This workshop will provide a hands-on introduction to App Inventor, AppVis, and iSENSE. You will build our demo apps, including jump counter, survey, and map-marking. We will have conversations about how to introduce AppVis to your non-majors courses, intro-CS courses, and interdisciplinary teaching. Prior experience with App Inventor is helpful, but not necessary.	Using AppVis to Build Data-rich Apps with MIT App Inventor (Abstract Only)	NA:NA:NA:NA	2017
Suzanne J. Matthews:Joel C. Adams:Richard Brown:Elizabeth Shoop	Parallel computing is one of the new knowledge units in the ACM/IEEE CS 2013 curriculum recommendations. This workshop will present the Raspberry Pi as an inexpensive hardware platform for providing each student with her own parallel processor. The tactile and visceral benefits of each student having her own machine and being able to take full advantage of its multicore capabilities are significant. In this hands-on workshop, we show how parallelism can be used to spread the workload of compute-intensive applications across the multiple cores of a Raspberry Pi, and explore its use as an inexpensive hardware platform for teaching parallel computing. CS educators who are interested in learning about parallel computing, OpenMP, and how to teach these concepts on a Raspberry Pi are encouraged to attend. Attendees will enjoy a hands-on hardware/software experience, exploring how parallel computations operate and work in practice. In Part I of the workshop, attendees will set up and explore a Raspberry Pi multi-core computer in small teams. In Part II, each team will use the parallel capabilities of the Raspberry Pi to explore parallel computation through the use of OpenMP "patternlets" published on CSinParallel.org. Part III explores applications of the Raspberry Pi to parallel applications such as image processing and population dynamics, using OpenMP. All materials from this workshop will be freely available from CSinParallel.org.	Teaching Parallel Computing with OpenMP on the Raspberry Pi (Abstract Only)	NA:NA:NA:NA	2017
Bradley Miller:Paul Resnick:Barbara Ericson	Runestone is an open-source ebook platform designed to create and publish interactive computer science textbooks (See http://runestoneinteractive.org/). Runestone textbooks support programming within the browser, code visualizations, and a wide variety of practice activities, from multiple choice and fill-in-the-blank questions to Parsons Problems (drag-and-drop mixed-up code). The presenters have several years of experience developing and using ebooks for CS1, AP CS A, AP CSP, data structures, and web programming. Several studies have demonstrated good usability and positive learning and attitude impacts on students using these ebooks. Runestone ebooks can be customized to meet the needs of individual courses and teachers. The goal of this workshop is to help computer science teachers use and modify Runestone ebooks. The hands-on session will start by leading participants through use of the ebooks as if they were students. Participants will next create their own custom course of any existing ebook in the library and will use the instructor's dashboard to review student activity, modify the course, and grade students. Finally, participants will create their own assignments using Runestone's active learning components, which serves as a starting point for authoring their own content in Runestone. Laptop Required.	Using and Customizing Open-Source Runestone Ebooks for Computer Science Classes (Abstract Only)	NA:NA:NA	2017
Briana B. Morrison:Mark Guzdial:Cynthia Lee:Leo Porter:Beth Simon	In this workshop participants will receive an overview of teaching practices in computer science that research indicates are effective. While the field of computer science education is young, it has uncovered several teaching practices that can be adopted by instructors that can improve both the retention and performance of students. These evidence based teaching practices include active learning techniques such as peer instruction and prior-knowledge activities, pair programming, and use of subgoal labels. Participants will experience firsthand many of these techniques and will be provided with resources on where to find more information, including the original research papers, on each technique. If you want to attend a workshop that will have an immediate impact in your class -- attend this one. The workshop will be interactive, engaging, and show you how to incorporate teaching practices that are empirically proven to provide benefits. You are guaranteed to leave with a list of many freely available resources and ideas to use in your next class. You will also have the opportunity to "ask the experts" as the authors of many of these research papers will be leading that session of the workshop.	Evidence Based Teaching Practices in CS (Abstract Only)	NA:NA:NA:NA:NA	2017
Krishnendu Roy:Kristine Nagel:Sarah T. Dunton	NA	How to Plan and Run Computing Summer Camps: Logistics (Abstract Only)	NA:NA:NA	2017
Ingrid Russell:Zdravko Markov	The workshop introduces participants to Weka, an open source Data Mining software package written in Java and available from www.cs.waikato.ac.nz/~ml/weka/. The goal of the workshop is to present the basic functionality of Weka that may be used in the undergraduate computer science and engineering curricula. The Weka system provides a rich set of powerful Machine Learning algorithms for Data Mining tasks, along with a comprehensive set of tools for data pre-processing, statistics and visualization, all available through an easy to use graphical user interface. Weka is widely used for educational purposes. Recently, with the increasing popularity of Big Data, it becomes a popular tool for Analytics and Data Science. Weka's rich functionality also allows its use for Text and Web document pre-processing and mining. All this makes it a suitable platform for enhancing the CS curriculum with hands-on exercises and practical projects. The workshop will present examples of such projects and exercises in the area of Web document classification and clustering. The basic steps of document collection, creating the vector space model, data preprocessing, attribute selection, and applying classification and clustering algorithms will be discussed. These topics will be covered in a way that will allow participants with no particular background in machine learning or data mining to appreciate the use of Weka in computer science education.	An Introduction to the Weka Data Mining System (Abstract Only)	NA:NA	2017
Bill Siever:Michael P. Rogers	Internet of Things (IoT) devices -- networked microcontrollers with attached sensors and outputs (LEDs, actuators, etc.) -- are becoming ubiquitous in the home (e.g., smart light bulbs, security systems), on the road (e.g., smart parking meters, traffic control), in industry (e.g., equipment monitoring, asset tracking) and in healthcare (e.g., fitness monitors, drug monitors). Consequently, IoT provides an opportunity to demonstrate the pervasiveness and social relevance of computing. Moreover, today's hobbyist- oriented IoT platforms empower entry-level students to create meaningful, real-world IoT applications. This allows rich computer science topics, such as event driven programming, concurrency, networking, information representation, cloud computing, etc., to be introduced earlier in the curriculum. Most importantly, IoT examples provide a compelling context for students to hone their critical thinking skills while solving engaging, real-world problems. Faculty interested in including IoT topics face several challenges: selecting a suitable set of topics, identifying an appropriate pedagogical approach, and, perhaps most daunting, choosing a cost-effective platform that lends itself to classroom use. This workshop will introduce the basic terms and technologies in IoT, discuss issues that arise when including IoT topics in classes, compare and contrast the most popular platforms for IoT, and walk participants through several classroom-tested, hands-on examples using a classroom-friendly platform (Particle's Photon) where they create both Wi-Fi-based IoT devices and corresponding web apps. Participants will need a laptop (any OS) with Internet access.	An IoTa of IoT (Abstract Only)	NA:NA	2017
Kalpathi Subramanian:Jamie Payton	This workshop introduces participants to the concepts and use of BRIDGES, a software infrastructure designed to facilitate hands-on experience for solving traditional problems in sophomore level computer science courses (data structures, algorithms) using data from real-world systems that are of interest to students, such as social networks (Twitter, Facebook), scientific or engineering datasets (USGIS Earthquake data), Google Maps, etc. BRIDGES provides easy access (typically function calls) to real-world data sets for use in routine data structures programming assignments, without requiring students to work with complex and varied APIs to acquire such data. BRIDGES also provides visualization capabilities, allowing the students to visualize the data structure they have created as part of their assignment. BRIDGES visualizations can be easily shared, via a web link, with peers, friends, and family. Workshop attendees will engage in hands-on experience with BRIDGES and multiple data sets, and will have the opportunity to discuss how BRIDGES can be used to support various introductory computer science courses. A laptop with internet connection is required to participate in hands-on activities.	Increasing Student Interest in Data Structures Courses with Real-World Data and Visualizations Using BRIDGES (Abstract Only)	NA:NA	2017
Cynthia Taylor:Joe Hummel:David Hovemeyer:David Bunde:John Dooley:Jaime Spacco	Peer Instruction (PI) is an active learning technique with over 25 years of research supporting its efficacy in Physics Education. More recently, the CS Education community has found that the benefits of PI are true for CS as well, including lower WDF rates, higher exam scores, and improved retention in the CS major. One of the key differences between PI and traditional lecture is the use of a series of multiple choice "clicker questions" in class to challenge the students' conceptual understanding. Students discuss and answer these questions in small groups, then the instructor reviews why each choice was right or wrong with the entire class. The workshop is a practical look at the kinds of clicker questions used in PI. Attendees with see examples of some of our best and worst questions, and also work to design and improve some of their own questions. In addition, we will provide a demonstration of PI, and share our practical experiences in adopting PI in a wide variety of class sizes.	Peer Instruction in Practice (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Richard Weiss:Jens Mache:Michael E. Locasto:Frankly Turbak	Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to empower faculty to add hands-on security exercises to their courses. We introduce EDURange, a framework for accessing, developing and assessing interactive cybersecurity exercises. We want to reach and engage all students. The first step is to have interesting challenges that are easy to access. EDURange uses VMs in a public cloud, which also provides flexible resources. No software needs to be installed - students only need an ssh client. Another step is to give students feedback on how they are doing. This is an important role for faculty and is not something to automate. Instead, EDURange provides basic tools to visualize what students are doing as they work on the exercises. This allows instructors to more easily see when students are stuck or heading in the wrong direction. Since cybersecurity exercises are often easy to understand but hard to solve, guidance is especially important so that students don't become frustrated. In this workshop, participants will get to try EDURange and several exercises, including an introduction to ssh. Participants don't need to be security experts. We will provide sample syllabuses for an introductory security course as well as an interdisciplinary security course, and we will show how our exercises can be integrated into these courses. More information at http://www.edurange.org. Laptop required.	Hands-on Cybersecurity Exercises That are Easy to Access and Assess (Abstract Only)	NA:NA:NA:NA	2017
Victor Winter:Betty Love	Bricklayer is a freely-available online educational ecosystem designed in accordance with a "low-threshold infinite-ceiling" philosophy. Its purpose is to teach coding to people of all ages and coding backgrounds. A significant portion of the Bricklayer ecosystem has been developed specifically to help novices, especially primary school children, learn how to code. When executed, Bricklayer programs can produce LEGO® artifacts, Minecraft artifacts, and even artifacts suitable for 3D printing. Bricklayer resides in a domain in which there is a strong connection between math, art, and computer science. This workshop is suitable for (1) university instructors and faculty who are interested in freshmen-level programming, (2) CS educators who work with and/or teach K-12 teachers in order to deliver coding-based curricula, (2) K-12 teachers and facilitators interested in exploring options for how they might teach coding - either directly as part of the in-school curriculum, or indirectly as part of an after school program. No background in coding is assumed. The aim of the workshop is to provide participants with a general understanding of what Bricklayer coding entails, how it relates to math, as well as providing a framework and road map for learning how to code in Bricklayer. An example of a 10 week (1 hour/week) primary school curriculum will be provided.	Two Birds: Teaching Coding and Math in Primary Schools and Beyond (Abstract Only)	NA:NA	2017
Ashish Aggarwal	Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague & Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.	Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab	NA	2017
Benjamin Romano	The number of devices connected to the Internet has increased dramatically in recent years, driven in large part by a new movement called the "Internet of Things" (IoT). With the IoT, new applications for Internet connectivity have emerged beyond just laptops and smartphones, to unite a heterogeneous collection of connecting points tied to various aspects of daily life (e.g., Internet-enabled appliances, vehicles and wearable computing devices). As more devices are added to the Internet each day, controlling their interaction has become very challenging. The goal of this project is to create a software solution that will manage connected devices and allow users to specify the meaning of the device interactions. To achieve this, we are currently creating an Internet of Things platform, Wendo, to handle device connections, and a website to manage these devices. The platform is hardware agnostic allowing users to run the software on their own devices that support the communication standards they need. Additionally, Wendo can be extended easily to support new communication standards as they are released. To allow non-programmers to take advantage of our platform, we created ThingScript, a simple domain-specific language that has an English-like syntax that can be adopted by end-users to define the relationship between devices. We determine what actions can be performed on a device by requiring a thing definition file (.tdef). This file includes information about the actions, events and public data of each device.	Managing the Internet of Things	NA	2017
Peeratham Techapalokul	Code smells codify poor coding patterns known to degrade software quality. Block-based languages have proven to be a viable educational and end-user programming paradigm with increasing adoption across a broad spectrum of users and domains. This rising popularity of this programming paradigm calls for a serious look at the program quality written in block-based languages. While code smells in the context of text-based languages have been studied extensively, the research community lacks a comprehensive understanding of code smells in block-based software. To address this problem, we present the results of a large-scale study of code smells prevalent in programs written in the highly popular Scratch programming language. We analyzed programs submitted to the public Scratch repository in 2016, considering a million programs altogether. We discovered interesting relationships between the prevalence of certain smells and the levels of proficiency of the programmers commonly introducing them. Our findings not only can help block-based programmers improve the quality of their software, but also establish the requirements for refactoring support in this programming domain.	Sniffing Through Millions of Blocks for Bad Smells	NA	2017
Daniel Welch	This work aims to show through a detailed case study that scaling up automated verification to larger non-trivial data structures is not only possible, but when combined with appropriate tool support, can be made more comprehensible and practicable to users in a variety of settings, including the undergraduate curriculum. The study involves an interplay of multiple components annotated with formal interface contracts and the components are all designed to be modular, reusable, and amenable to automated verification and analysis. The components are built using a formal integrated development environment (F-IDE). The plan is to evaluate the F-IDE in an upper-level undergraduate software engineering course in the Spring semester at Clemson University.	Scaling Up Automated Verification: A Case Study and Formal-IDE for the Construction of High Integrity Software	NA	2017
Alec Battles	Tensors are a natural extension of matrices and vectors. They provide an ideal framework for abstracting relationships between related parameters. In image processing, tensors can be used to represent gradient information. The 2D structure tensor is one such representation, useful in corner detection and non- photorealistic rendering. This abstract summarizes my image processing filter based on the 2D structure tensor that generates artistic abstraction from photographs. With the 2D structure tensor, I explored ways to present the gradient directions of an image as artwork and investigated the relationship between the Gabor filter and the eigenvectors of the 2D structure tensor. Using this filter, I produce images that consist of a dense patchwork of lines, somewhat resembling certain artistic types of pen shading such as hatching and cross-contour shading. By applying this filter, I have found ways to categorize images that display salient groups of parallel lines. These images present a higher artistic quality and display better compositional style after being processed using the 2D structure tensor than the average photograph. Another finding is that not all resolutions of images are ideal for structure tensor processing and that an image size of 700-1000 pixels per side yields the best results from both a mathematical and artistic standpoint.	The Application of the 2D Structure Tensor in Visual Arts and Design	NA	2017
James W. Belford	The Urban Archivist Application is designed to capture Urban Artwork and its associated metadata from around the world. The Application itself is available for mobile platforms and has a web-interface for viewing the data. Urban Archivist allows users to take photos of urban art they may find while out in the field on research. Once these photos are gathered, the application will automatically grab all the associated metadata from the image and populate those field within the application, minimizing user error. The user will then enter their own findings regarding the image and may upload it to the central database. This art and its associated metadata is instantly available to view by any individual using either the web or mobile Urban Archivist interface. Furthermore, we want to be able to build a dataset large enough to explore and contribute to the realms of machine learning and virtual reality. The goal of this research project is to implement something that has been done prior, while adding modern technological options available to increase the research opportunities for Computer Science and Humanitarian scholars. Preliminary tests via the prototype confirmed the project's ability to achieve this goal.	Urban Archivist Application	NA	2017
Lukasz Brodowski:Cameron Dziurgot:Donald Moretz	Passkeys have been around since personal phones have existed. The typical numeric PIN offers a limited number of combinations and is relatively easy to crack by guessing or eavesdropping. A tap sequence used as a passkey offers an infinite number of different combinations making it unique to that person and that person alone. Once a passkey is saved, it can be compared using the Euclidean distance formula to any other passkey resulting in a dissimilarity score to the master key. If this score is within a certain threshold, that passkey will grant or deny the user access. Our results show that it is possible to authenticate using a unique tap sequence, and convenient enough to be used every day to unlock a personal device.	Tapped-based Authentication for Mobile Device Security	NA:NA:NA	2017
Joshua W. Buck:Saverio Perugini	Specification and implementation of flexible human-computer dialogs is challenging because of the complexity involved in rendering the dialog responsive to a vast number of varied paths through which users might desire to complete the dialog. To address this problem, we developed a toolkit for modeling and implementing task-based, mixed-initiative dialogs based on metaphors from lambda calculus. Our toolkit can automatically operationalize a dialog that involves multiple prompts and/or sub-dialogs, given a high-level dialog specification of it. Our current research entails incorporating the use of natural language to make the flexibility in communicating user utterances commensurate with that in dialog completion paths.	Mixed-initiative Personal Assistants	NA:NA	2017
Eduardo J. Castillo:Xenia Mountrouidou:Xiangyang Li	Covert channels are unique methods for exchanging messages, since they permit sending information secretly. Unlike encryption, covert communication allows to send information covertly, using an otherwise legitimate medium of transfer, thus it is not apparent that a message is being transferred at all. There is limited research on Covert Timing Channels (CTCs), i.e., channels that manipulate packet inter-arrival time to exchange messages based on a certain encoding. Implementing and testing CTCs in real network environments is lacking in the current literature due to sensitivity to network delays that significantly affects this type of communication. Thus, it is important to implement CTC communication to analyze the challenges of creating robust, efficient, and undetectable channels in real life situations. It is also paramount to test these implementations in a wide range of realistic network conditions. In this research, we have developed and tested two implementations of CTCs. The first implementation is based on [1] using standard bits encoding and ASCII for simplicity and robustness. This implementation suffers from easy detection. On the other hand, we developed the second implementation with goal to make the channel undetectable by using encoding with five different delays, i.e., symbols, where five symbols in a specific order correspond to one letter of the alphabet. This implementation has sufficient randomness to be undetected with standard statistical mechanisms. We have tested both implementations on local networks, the Global Environment for Network Innovations (GENI) controlled environment, networks across states in the US, and internationally.	Time Lord: Covert Timing Channel Implementation and Realistic Experimentation	NA:NA:NA	2017
Jianting Chen:Medha Gopalaswamy:Prabir Pradhan:Sooji Son:Peter-Michael Osera	There is a natural correspondence between mathematical proofs and computer programs. For instance, a recursive function and its correctness relate directly to inductive proofs in mathematics. However, many undergraduate students feel a disconnect between mathematics and computer science. There are several proof assistant tools which have been used by the educational community to introduce such concepts to students, but since these tools are not primarily created for educational purposes, students often do not benefit from them to the expected extent. We have created an educational tool that draws from the benefits of existing provers and assistants and includes a novel proof language that mimics handwritten proofs. By creating a proof assistant with an intuitive user interface and a rich mechanism for providing constructive feedback, we hope to bridge the gap that many introductory computer science students find between mathematical proofs and program correctness.	ORC2A: A Proof Assistant for Undergraduate Education	NA:NA:NA:NA:NA	2017
Josephine K. Chow:Xiangyang Li:Xenia Mountrouidou	Messages through covert channels may contain valuable information either in clear text or encrypted. This study focuses on a Covert Storage Channels (CSC) in TCP/IP network packets that uses the 6-bit TCP flag header to transmit messages between accomplices. It uses relative entropy to characterize the irregularities in the TCP flags. First a normal profile of TCP flags is represented by their frequency distribution of regular traffic packets. Then the TCP flag frequency distribution in network traffic is computed for each unique IP pair. The distance of the testing traffic data set from this normal profile is the relative entropy between these two distributions. Moreover, to evaluate the performance of the proposed method this study uses real regular traffic data sets as well as CSC messages generated for both clear text and encrypted forms of a list of keywords common in Unix systems. Different approaches are used to choose the packets to be included in extracting the TCP flag frequencies. The experimentation results by Receiver Operating Characteristic (ROC) curves have shown that the method is promising to choose the best control threshold to differentiate normal and CSC traffic packet streams.	Raising Flags: Detecting Covert Storage Channels Using Relative Entropy	NA:NA:NA	2017
Philip J. Costello	This research project investigates the vulnerabilities of civilian Unmanned Aerial Vehicles (UAV) systems and how they can be exploited by law enforcement should a UAV be utilized in a terrorist attack against the United States. Research into the vulnerabilities of civilian UAVs focused primarily on how such systems could be compromised and taken over by a third party, and for law enforcement to exploit as a potential countermeasure. In particular, the focus of the research was on using Internet Protocol (IP) Address and Media Access Control Address spoofing to spoof the UAV controller. Multiple techniques of spoofing attacks were conducted to compromise the UAV systems and allow for precision control from a third party computer. Additional research was conducted into intercepting an autonomous UAV via spoofing. This paper identifies the threats that UAVs pose to the United States, while providing a reliable and safe way to counter certain hostile UAV threat scenarios.	Identifying and Exploiting Vulnerabilities in Civilian Unmanned Aerial Vehicle Systems and Evaluating and Countering Potential Threats Against the United States Airspace	NA	2017
Christopher Gillespie:Mark Moore:Colin Brown	A mesh is the discretization of a geometric domain into small, simple shapes. The focus of this project is the generation of strictly convex quadrilateral (quad) meshes with provable quality guarantees through the conversion of good quality triangle meshes of planar straight line graphs. The conversion is achieved with an algorithm that uses the dual graph of the input triangulation to quadrangulate small groups of triangles at a time [1,3,4]. A specific goal of the project is proving an upper bound on the aspect ratios of all quads in the mesh. We implement two different metrics to measure the aspect ratios of the quads in the generated meshes. The first metric simply takes the ratio of the longest edge to the shortest edge for each quad. The disadvantage of this method is that it does not take into account the angle measures of the quads. The second approach, a method developed by John Robinson [2], utilizes both edge lengths and angle measures to calculate aspect ratio. We develop code to produce empirical results for both metrics of aspect ratio measurement and histogram plots showing the distribution of quad aspect ratios in a given mesh. With these experimental results, we aim to prove that, given a good quality input triangle mesh with a minimum angle bound, we can give a provably good upper bound on aspect ratio for the resulting quad mesh.	Quadrilateral Mesh Generation with a Provably Good Aspect Ratio Bound	NA:NA:NA	2017
Joseph Jamison	This project attempted to find a solution to the problem of declining yield rates at colleges and universities around the nation. Yield rate, the rate at which accepted students decide to enroll at a given school, is important to a school for academic, economic and logistical reasons. As such, this project aimed to raise the yield rate at Davidson College by applying machine learning techniques to applicant data in order to predict the yield decisions of the applicants. Using these techniques, a model was created that predicted applicants' yield decisions with 86% accuracy. With these predictions, Davidson College can have a better understanding of their yield and can consequently make more informed, tactical admissions decisions, thus raising their yield rate.	Applying Machine Learning to Predict Davidson College's Admissions Yield	NA	2017
Jakub Jancek:Darya Aleinikava:Grace M. Mirsky	The Microsoft Kinect® provides a low-cost solution for measuring distance; however, it has poor performance in bright light conditions. The focus of this project is to design a system to autonomously adjust a pair of polarizing filters in order to effectively utilize the Kinect®'s depth measurement capabilities in different lighting conditions, including outdoor applications. A system designed to dynamically change the orientation of the polarizing filters to select the optimal depth image, without manual adjustment, is the novel contribution of this work. Our approach involves a feedback loop that allows the system to autonomously determine which filter position results in the best image and rotates the filter automatically. Furthermore, the system can perform these tasks periodically over time as light conditions change. This system captured images of objects at various distances from the sensor in different lighting conditions to determine the system performance. Our experiments have demonstrated the effectiveness of dynamically adjusted polarization filters to actively select the best depth image, even in environments challenging for the Kinect®.	Optimizing Kinect® Depth Sensing Using Dynamic Polarization	NA:NA:NA	2017
Zane Ryan Johnston	The vocal user interface (VUI) Myna allows a user to interact with the block-based language development environment Scratch. Unfortunately, the original implementation of Myna does not allow for screen resolutions outside of its original implementation, for the scrolling of scrollbars, and the navigation of prompts and dialogs created by Scratch, essentially halving its functionality relative to what the Scratch graphical user interface (GUI) offers. In this paper, I offer three solutions to these problems, which will be evaluated by Computer Science students and users with mobility impairments in order to determine the validity of these solutions as well as the user's satisfaction with Myna and using voice as an input modality.	One Size Doesn't Fit All	NA	2017
Amy MacDonough	Ideally, we would always be able to write clear, concise programs and have them run quickly. One major impediment is the redundancy which can occur in direct recursive solutions. In some cases, this means writing a loop even if the programmer is more comfortable thinking in terms of recursion. In other cases the impact on code is even more dramatic, and in these cases most programmers choose to sacrifice clarity in exchange for improved asymptotic complexity. There exist program transformation techniques that would allow us to write idiomatic recursive programs without losing efficiency. One such transformation is the "tupling" transformation, which can and has been implemented as an automatic compiler optimization. This transformation is, however, only applicable to a narrow class of problems. We are exploring related transformations, such as tabulation, which can helpfully be applied to a wider class of recursive programs, and attempting to answer the question of when these transformation techniques are most useful to programmers aiming to balance program clarity with performance.	Recursive Convergence	NA	2017
Sierra Magnotta:Anushikha Sharma:Jingya Wu:Darakhshan J. Mir	Understanding of computing skills and concepts is no longer viewed as optional, but is knowledge that is required to progress in several fields outside of computer science, even outside STEM fields. Despite the need for this knowledge, non-STEM majors' participation in computing courses is still lacking. This is especially true for women and other minority groups. In our work, our main motivation was creating a course at our institution, Bucknell University to make computer science more accessible to non-STEM majors on our campus. We adopted an approach of situating course design in the experiences and perspectives of undergraduate students themselves. To achieve this, the course curriculum and materials were mainly designed and created by three undergraduate students, all below the junior level, who connected course topics to a wide variety of topics outside computing. This project is based on the precept that students from varied disciplinary backgrounds and intermediate computing knowledge can provide a unique lens to articulate the needs of their fellow students. In order to serve the purpose of emphasizing creativity and society, we chose a sketch based programming language, namely p5.js (a JavaScript library which brings Processing to the web), which gives students the possibility and flexibility to create projects that are directly relevant to their own interests, while gaining a basic conceptual understanding of Computer Science	Creative Computing and Society: When Undergraduates Design a Curriculum for an Introductory Computing Course	NA:NA:NA:NA	2017
Hannah E. Murphy	In this study, we evaluate a new electronic mobile application, PGA (Programming Grading Assistant). It was designed to make grading paper-based exams easier for graders and professors. Not only does it facilitate grading, but PGA also provides students with more meaningful (semantic) feedback than non-PGA grading. We outline the PGA grading process, the execution of a user study, and the results from that study that prove the effectiveness of PGA technology. Other results indicate that PGA awarded grades are equivalent to red-pen awarded grades and that PGA grades are more consistent across the board.	Digitalizing Paper-Based Exams: An Assessment of Programming Grading Assistant	NA	2017
Meghana Subramaniam:Veronica Cateté	Computer science education in high school is fundamental for increasing the diversity in computing majors at a university level. However, computer science is not often taught in America before university, and usually, the professionals who teach it are not trained experts in computer science concepts and terminology. In this paper, we introduce a new style of coding rubric, which allows teachers to better understand the fundamentals of the course being taught. In the scope of this research, we focus solely on the Beauty and Joy of Computing, an AP Computer Science Principles course. Coding assignments were collected from two groups of students, and assignments were graded and compiled by raters. After being rated, the rubrics were modified to be better adapted to teachers' expectations.	A Pathway to Strengthening Support for Beauty and Joy of Computing Teachers	NA:NA	2017
Nath Tumlin	COPPER (CustOmizable Puzzle Programming EnviRonment) is a meta-configurable tool for creating coding puzzles on a grid using a blocks-based programming language, similar to puzzles in Code.org's Hour of Code. COPPER has the potential to increase student interest and engagement by allowing a teacher to customize levels for individual classes or students. Teachers can create characters for specialized puzzles by uploading pictures to customize their appearance and using the block-language to design the character's behavior. They can then place these characters onto a grid, and arrange them into a puzzle for their students to solve. A teacher can specify the goal of each coding puzzle, as well as restrict which blocks a student may use, allowing a teacher to gradually introduce programming concepts. For example, an elementary school teacher could highlight concepts from a history lesson by building a customized grid where characters from a historical context navigate around objects relevant to the topic being studied. COPPER uses Google's Blockly framework to eliminate the mental overhead of memorizing textual syntax, allowing students to focus on building computational thinking skills. Block-based languages have been shown to be more effective than text-based languages when teaching programming to first-learners. Combined with customization, COPPER has the potential to lead to higher student interest and comprehension of programming concepts in a customized context. This poster will also summarize results obtained through initial experimentation through collaboration with K-8 teachers and their students.	Teacher Configurable Coding Challenges for Block Languages	NA	2017
Haoze Wu	In this project, we aimed to improve the runtime of Minisat, a Conflict-Driven Clause Learning (CDCL) solver that solves the Propositional Boolean Satisfiability (SAT) problem. We first used a logistic regression model to predict the satisfiability of propositional boolean formulae after fixing the values of a certain fraction of the variables in each formula. We then applied the logistic model and added a preprocessing period to Minisat to determine the preferable initial value (either true or false) of each boolean variable using a Monte-Carlo approach. Concretely, for each Monte-Carlo trial, we fixed the values of a certain ratio of randomly selected variables, and calculated the confidence that the resulting sub-formula is satisfiable with our logistic regression model. The initial value of each variable was set based on the mean confidence scores of the trials that started from the literals of that variable. We were particularly interested in setting the initial values of the backbone variables correctly, which are variables that have the same value in all solutions of a SAT formula. Our Monte-Carlo method was able to set 78% of the backbones correctly. Excluding the preprocessing time, compared with the default setting of Minisat, the runtime of Minisat for satisfiable formulae decreased by 23%. However, our method did not outperform vanilla Minisat in runtime, as the decrease in the conflicts was outweighed by the long runtime of the preprocessing period.	Improving SAT-solving with Machine Learning	NA	2017
Ziyan Yang	Polygonal meshes have become the industry standard for the representation of surfaces with highly complex geometry and arbitrary genus in computer graphics and geometry processing applications. We investigate how to extend a point-set algorithm that utilizes a quadtree subdivision to construct a quadrilateral mesh with both angle and aspect ratio bounds. The main goal is to adapt the algorithm to respect polygonal edges so that we will obtain a method to mesh polygonal regions (possibly with holes), with quadrilateral elements that have guaranteed worst-case minimum and maximum angles as well as aspect ratio (longest edge over shortest). Currently, there is no known algorithm that generates quadrilateral meshes with both angle and aspect ratio guarantees.	Quadrilateral Mesh Boundary Classification and Editing	NA	2017
