Rebecca Bates:Valerie Summet:Nanette Veilleux	Have you read any of the common reads for SIGCSE 2017? Now's your chance to talk about them! Two novels: The Thrilling Adventures of Lovelace & Babbage: The Mostly True Story of the First Computer by Sydney Padua (Pantheon Graphic Novels, 2015) and The Martian by Andy Weir (Broadway Books, 2014) as well as a short story: "The Last Question" by Isaac Asimov (Science Fiction Quarterly, 1956) were proposed at the end of the 2016 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the two books and short story. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2018 conference.	SIGCSE Reads: Time for Book Discussion (Abstract Only)	NA:NA:NA	2017
Bo Brinkman:Karla Carter	Have you used the ACM Code of Ethics and Professional Conduct in your teaching? Would you like to? Recent events are leading to increased interest in the Code: 1) The AP CS curriculum now includes "computing in context" as one of the six course topics. 2) The ACM has initiated an update of the Code, to be completed in early 2018. 3) There have been several court cases (Oracle v. Google is a recent example) and stories in the popular press (including in the New York Times) that have cited the Code. It is therefore increasingly important that students and teachers become aware of and comfortable with the Code. This BoF invites college and high school teachers to share assignments (or assignment ideas) that incorporate the Code, particularly outside of "the ethics class." We will also discuss proposed updates to the Code, and any items that are missing or anachronistic in the current Code. Representatives of the ACM Committee on Professional Ethics will collect this feedback and provide it to the Code 2018 Task Force.	The ACM Code of Ethics and Professional Conduct: Teaching Strategies and the Coming Update (Abstract Only)	NA:NA	2017
Janet Burge:Bo Brinkman	Many universities either have offered or are starting to offer computer science courses taught in a compressed time scale, often where students take only one course at a time. The pace of these classes can differ but often move at a speed where a day of an accelerated class is equivalent to a week of a typical semester class. This format has several advantages-more flexibility for collaborative work, better visibility into how students are spending their time (knowing that if a student is struggling it is not because of work in a different class), and less need for students to multitask between different courses. It also has many challenges. From the student perspective, there's the need to stay on top of things and not fall behind, having to catch up if there are absences due to illness or extra-curricular activities, and staying focused on one subject while working under constant time pressure (which often results in a tendency to rush through assignments to meet deadlines). Participants in this BoF will share their knowledge about teaching in this format. What kinds of assignments and assessments work and don't work during accelerated courses? How can we keep the workload reasonable for the students and for ourselves? What interesting pedagogy does this format facilitate? We invite participation both from faculty who are already teaching in this format and also from those considering an accelerated course who want to learn more about the advantages and disadvantages of this format.	Teaching and Learning Under Pressure: Intensive (Accelerated, Block) Computer Science Courses (Abstract Only)	NA:NA	2017
Yingjun Cao:Scott D. Anderson	To convey abstract concepts to students with little to no computing background, faculty members often adopt real world analogies to make CS concepts more relatable. Existing work on the power of analogies in CS education [1-2] has looked into the effectiveness and limitations of metaphors. However, there is no existing forum or repository that educators can share successful and interesting analogies. For this Bird of Feathers session, we invite all interested computer science instructors to share their successful (or unsuccessful) analogies with details on where and how the analogies were used, the related CS concepts, and how a particular analogy might fail to convey the instructor's ideas. We propose to focus on analogies for CS1/CS2 concepts because students in those classes may benefit the most from this teaching technique, and appropriate use of analogies for non-majors might help attract students to the field of computing. This BOF's topic relates to the general trend of teaching diverse groups of students in introductory programming courses and provides an excellent opportunity for CS educators to discuss successes and failures in using metaphors in our classes. The second purpose of this BOF session is to propose a suitable online medium where existing and new analogies can be shared with the CS education community. This BOF can be the beginning of a long-term online collaborative project where faculty members continue to share their metaphors with the community.	The Power of Analogies in Introductory CS Education (Abstract Only)	NA:NA	2017
Lillian N. Cassel:Michael Posner:Darina Dicheva:Don Goelman:Heikki Topi:Christo Dichev	The use and analysis of large quantities of data have become ubiquitous in nearly every discipline. We began a discussion of the role of data science across disciplines, and the role of computing in data science programs, at SIGCSE 16. The session was well attended and the discussion was valuable. Since then, more work has been done and more people are engaged. This BOF will continue the discussion, including welcoming new voices. We will distribute copies of the report of the NSF sponsored workshop on Data Science education and discuss a new initiative to develop curriculum guidelines for data science programs. This initiative will be in its earliest stages by the time SIGCSE meets, so it will be an excellent opportunity to gather impressions about what are critical considerations for any such curriculum effort. We developed a mailing list from the SIGCSE 16 attendees and will use that list to promote the BOF. The BOF will engage SIGCSE participants who have views on the content and role of courses and programs in data science. In addition to the workshop report, we will describe results from an NSF IUSE grant to develop modules for use in many types of courses. These expect to make access to fundamentals elements of data science available as widely as possible. With these as a starting point, participants in the Birds of a Feather session will explore the emerging field of data science and its relationship to computer science education. Discussions will be hosted at http://computingportal.org/datascienceflipped	Advancing Data Science for Students of All Majors (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Janet Davis:Angela Berardinelli:Amanda Holland-Minkley:Ellen Walker	How can CS faculty at liberal arts colleges better communicate with colleagues and the public about the value our institutions offer? Liberal arts colleges play an important role in undergraduate CS education. Liberal arts skills are widely valued in the tech industry, many liberal arts undergraduates go on to earn Ph.D.s in STEM, and many of the educational innovations presented at SIGCSE are developed by liberal arts faculty. Yet, our colleagues at research universities often misunderstand what we do at liberal arts colleges. And while we see the liberal arts and computer science as supporting each other, the popular media tends to portray them as diametrically opposed. These misconceptions limit our opportunities to attract new students and colleagues, as well as opportunities to contribute to public discourse about the important role of information technology in our society. In this BoF, we aim to collaboratively develop communication strategies for individual participants and for the liberal arts CS community as a whole.	Communicating What Liberal Arts Colleges Contribute to Computer Science (Abstract Only)	NA:NA:NA:NA	2017
Adrienne Decker:Monica McGill:Alan Peterfreund	There is a critical need to increase the number of skilled technology workers in part due to the supply of workers in these fields not yet keeping up with demand. In an effort to increase the interest of students in studying within these fields, many commercial, governmental, and non-for-profit educational groups have sponsored numerous activities aimed to expose students to computing prior to college. With the advent of CS for All, there is further need to research these programs and evaluate their effectiveness. This session will gather researchers and practitioners interested in researching the impact that pre-college computing activities have on their participants. Participants will learn about a new initiative underway to make the job of collecting and tracking data easier. To be useful for the broader community, this NSF-funded IUSE initiative requires input from the community it wishes to serve. Participants will have the opportunity to provide valuable input on what their needs are for tracking such activities and what tools may be helpful for them, including methods for data collection to produce meaningful data that can be compared to data provided by other researchers and practitioners. The focus of this discussion will be the long-term impact of these activities; however, we will discuss data collection techniques researchers have used in the past to gauge short-term impact as well.	Evaluating the Long-Term Impact of Pre-college Computing Activities (Abstract Only)	NA:NA:NA	2017
Nate Derbinsky:Durga Suresh	Service learning offers students of computer science an experiential opportunity to hone not only their technical skills of design and programming, but also the soft skills of teamwork, communication, and social/ethical behavior. With hard work and effective mentoring from faculty, the output of student work can also benefit community partners, assuming there is proper infrastructure in place to provide long-term project management and technical support. This Birds of a Feather session provides a discussion platform to share lessons learned and best practices related to establishing a sustainable service-learning program within an undergraduate computer-science curriculum, with a particular focus on balancing benefits to students and community partners with organizational overhead.	Sustainable Methods for Impactful Service Learning in Computer Science (Abstract Only)	NA:NA	2017
Nickolas Falkner:Elizabeth Patitsas:Colleen Lewis	Large volumes of Computer Science Educational (CS Ed) material are published every year but it is apparent that equally large volumes of this are not being read or having much impact on practice, or even available to the practitioners who could use it. How can we distribute CS Ed materials and information more effectively and in potentially innovative ways? This BOF will provide a platform for discussion on a selection of techniques that encourage discussion and dissemination of CS Ed techniques in the community. Is traditional publishing still a good approach or is it just part of a wider group of techniques?	Alternative Publishing and Dissemination of CS Education Research (Abstract Only)	NA:NA:NA	2017
Carol L. Fletcher:William Wesley Monroe	CS Education in primary and secondary schools has experienced a renaissance in the last few years as the CS for All initiative has gained traction across the nation. CS curricula abound and a new AP course, CS Principles, has been deployed that aims to broaden participation. Lack of consensus exists however in what constitutes a qualified CS teacher. A widely accepted and adopted modern certification/licensure process (CSTA 2013) must be developed. Professional development that can be rapidly scaled to build CS teacher capacity is required to realize the vision of CS for All across the nation. In this session we will engage state and national CS thought leaders to discuss the CS certification process, educator standards, and certification tests across various states to determine opportunities for future collaboration. What are the content standards that all beginning CS teachers must meet? What if any specific CS pedagogical topics need to be assessed? Applications today are built in teams and often deployed and distributed in the cloud. Are these topics too advanced for high school CS or should they be integral? How can professional development be designed to help teachers across multiple states meet certification standards? The existing standards from the ETS CS Certification test (Texas Education Agency, 2010) currently used in multiple states will serve as the baseline for group discussion and feedback.	High School CS Teacher Certification: Standards, Assessments, and Professional Development (Abstract Only)	NA:NA	2017
Peter H. Fröhlich:Borja Sotomayor	Introductory curricula, courses, and programming assignments seem to get most of the attention at Computer Science education conferences. This bird-of-a-feather focuses, instead, on upper-level systems courses (databases, networks, compilers, operating systems, etc.) and, more specifically, on courses with a significant hands-on implementation component, from small-scale programming assignments like implementing a memory allocator or a network protocol, to larger projects like implementing an operating system or compiler from scratch.  Designing assignments and projects for these kinds of courses can be challenging: they must be "practical" in the sense of providing a realistic systems programming experience, but also "practical" in the sense of being small and self-contained enough to be feasible in a single quarter/semester. While there are a number of established frameworks (such as Minix, Pintos, or xv6 for operating systems) there is not, to the best of our knowledge, a dedicated forum for educators focused on these types of courses. Such a forum would allow us to more easily share existing coursework, collaboratively develop and refine coursework, and to have seasoned instructors provide support to those just starting out. This birds-of-a-feather is a first step in that direction. It will provide an opportunity for instructors of upper-level systems courses to get to know each other as well as exchange ideas and experiences. Discussion will revolve primarily around programming assignments and projects, but will also look to foster networking and communication beyond the birds-of-a-feather session.	Practical Systems Programming in Computer Science Education (Abstract Only)	NA:NA	2017
Saturnino Garcia	Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to ask questions and learn more, and (2) bring together experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.	Process Oriented Guided Inquiry Learning (POGIL) in the CS Classroom (Abstract Only)	NA	2017
Elizabeth Hawthorne:Cara Tang:Cindy Tucker:Christian Servin	The ACM Committee for Computing Education in Community Colleges (CCECC) is updating the ACM curricular guidance for two-year transfer programs in computer science based on CS2013 with cybersecurity learning outcomes infused throughout. This BOF will provide a platform for two-year and four-year computer science faculty and academic administrators to discuss the newly revised associate-degree transfer guidance. The core task group writing the guidance consists of twelve community college faculty across the United States, led by the ACM CCECC and three task group leaders. The guidance has been informed by input from both two- and four-year educators in two rounds of public review and comment; a BOF, special session, and affiliated workshop at the prior two SIGCSE conferences; and international input at ITiCSE 2016. By SIGCSE 2017 the guidance will be in near-final form. The session will include an overview of the guidance, its relationship to CS2013, and infused cybersecurity. Discussion will center on implementing the guidance in two-year programs, gathering program exemplars, and facilitating transfer with four-year university partners.	Computer Science Curricular Guidelines for Associate-Degree Transfer Programs (Abstract Only)	NA:NA:NA:NA	2017
Amanda M. Holland-Minkley:Thomas E. Lombardi:Madeline E. Smith	Effective computer science curricula can develop students' abilities more broadly than just ensuring content mastery and algorithmic thinking. Computer science curricula may also include components focused on technical writing and communication skills, ethical practice of computing, effective teamwork and project management, and the application of computer science in a broader interdisciplinary context. In this session, attendees will be invited to share information about how they are incorporating this content into their curricula and the challenges they are facing in doing so. By sharing information about our current practices, attendees will help develop a survey of the variety of strategies CS programs are using to deliver this educational content. Attendees will also be given the opportunity to discuss the specific teaching challenges they encounter in their courses when teaching this content and share effective solutions they may have found to these problems.	Strategies for Including Soft Skills and Interdisciplinary Content in CS Education (Abstract Only)	NA:NA:NA	2017
Josh Hug:Cynthia Lee	As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Providing timely effective feedback to students, exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating many types of course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content. A master list of such tips, as well as a retrospective summary, will be compiled and provided to the SIGCSE community at http://tinyurl.com/wotb2017.	Handling Very Large Lecture Courses: Keeping the Wheels on the Bus III (Abstract Only)	NA:NA	2017
Amardeep Kahlon:Bonnie MacKellar:Anastasia Kurdia	Plagiarism is of great concern to faculty in all fields, including computer science as it leads to one certain outcome -- a compromise not just in student learning but also in the entire academic process. Faculty attempt to deal with this epidemic in varied ways such as by writing new course materials each semester, putting a larger or entire grade focus on exams, or even asking individual students to explain their assignments. However, plagiarism remains a source of frustration for both faculty and administrators. This BoF will bring interested faculty together to discuss the various and surprising ways in which students plagiarize, the methods of countering plagiarism, and the currently available tools for detecting plagiarism. Questions we will be discussing include: Do students understand plagiarism in the context of writing software? How can we create an atmosphere that discourages plagiarism, yet fosters collaboration and encourages learning from multiple sources? To what extent can one make an assignment "plagiarism-proof"?	GitHub, Tutors, Relatives, and Friends: The Wide Web of Plagiarism (Abstract Only)	NA:NA:NA	2017
Amardeep Kahlon:Linda Smarzik:Mary Kohls	Many community colleges are looking at Competency-Based Education (CBE) as a way to increase student recruitment, engagement, completion, and transfer to baccalaureate programs. In addition, colleges are looking at CBE as a way to reduce costs as well as provide students with clear, marketable skills for employment. CBE is particularly suited to computer science due to the nature of the discipline where well-defined, measurable outcomes can be designed and implemented. Is your college exploring a curricular redesign using CBE? Do you want to know what CBE is and how to implement a CBE curriculum in computer science? This BoF will host a discussion on planning, implementation, and scale-up of CBE programs. Besides learning about CBE, this BoF will provide attendees with a chance to connect with others trying to implement CBE programs so that they can share knowledge, share resources, and form future collaborations. The recent CS2013 curricular guidance will also be discussed as an important resource for developing CBE in CS.	Competency-Based Education in Lower-Division Computer Science Taught at Community Colleges (Abstract Only)	NA:NA:NA	2017
Richard E. Ladner:Andreas Stefik:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing are inaccessible to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll (formally AccessCS10K) will be shared. Handouts and stickers will be given out.	Access to Computing Education for Students with Disabilities (Abstract Only)	NA:NA:NA	2017
Justin Li	Introductory CS courses often present computational concepts in a multitude of varied contexts. The contents of these examples and assignments present an untapped opportunity to reach out to under-represented minorities. For CS in particular, the ubiquity of technology in modern society makes it imperative that students consider how seemingly innocuous technical decisions could selectively disadvantage particular populations. If the entirety of the CS community - from K-12 to industry - is to be inclusive, we must train students to be aware of these issues from their first CS course. This BOF aims to foster discussion of how examples and assignments can illustrate CS concepts and simultaneously acknowledge the challenges that under-represented students may be facing. At least three such avenues are possible: 1) Choosing multi-cultural contexts for homework questions and in-class examples; 2) Assigning projects with socioeconomic implications, such as the Schelling Segregation Model (a 2014 Nifty Assignment); and 3) Showing how inclusion is easily subverted by majority-Caucasian data sets or "purely technical" decisions such as representing gender with a Boolean. The long-term goal is to establish a network of instructors interested in contributing assignments and activities, and to create a resource suitable for broader dissemination in the future.	Weaving Diversity and Inclusion into CS Content (Abstract Only)	NA	2017
Stephanie Ludi:Stan Kurkovsky	Hands-on activities can reinforce a variety of Computer Science concepts covered in class. Active learning techniques that utilize tangible manipulatives such as LEGO or other simple objects provide unique opportunities for students to explore or reinforce topics during class in a playful setting. This kinesthetic learning approach can also provide a platform that has a low learning curve, can facilitate creative thinking, improve student engagement with content and peers while adding gamification elements to the course. Different Computer Science topics lend themselves to such activities to differing degrees and the logistics of conducting these activities in large classrooms requires careful planning and execution, especially where cost is a factor and replication is desired between classes. Some educators may have experience while others may be interested but do not know where to start. BOF attendees will hear from those who have used different types of manipulatives, applied manipulatives to different Computer Science topics, and utilized said activities in different scenarios and contexts (e.g. large vs. small classes, single student vs. team activities). The sharing of ideas, strategies, and resources, as well as potential collaborations is also central to the discussion. The audience is expected to consist of both university faculty/lecturers (especially those who teach lower division courses) and high school teachers of computer science who are interested in engaging students in course content via kinesthetic activities and tangible manipulatives.	Using Tangible Manipulatives for Hands-on Activities in Undergraduate Computer Science Classes (Abstract Only)	NA:NA	2017
Becka Morgan:Heidi J.C. Ellis:Gregory Hislop:Grant Braught:Lori Postner	There is a growing community of faculty members who support student participation in Humanitarian Free and Open Source Software (HFOSS) projects in a variety of courses at a range of different institutions. HFOSS can provide a plethora of learning opportunities for students that ranges from design to code to test to documentation and more. Involvement in an HFOSS project allows students to gain professional skills while also gaining an understanding of the social impact of computing. However, experience has shown that supporting student involvement in HFOSS can pose some challenges to instructors including identification of appropriate assignments, creation of rubrics, grading, and managing interactions with the HFOSS community. The organizers of this BoF are faculty members who have a spectrum of experience in supporting student involvement in HFOSS. The organizers will share tips for structuring such student participation as well as discuss challenges that they've experienced and approaches for overcoming those challenges. Attendees will be encouraged to ask questions about how to get started, selecting an appropriate HFOSS project, structuring assignments, and more. This BoF will provide faculty members the opportunity to network with instructors with experience in this area.	Perspectives on Teaching Humanitarian Free and Open Source Software (Abstract Only)	NA:NA:NA:NA:NA	2017
Tina Ostrander:Ruby ElKharboutly:Karen Jin	Supervising students in project-based courses is challenging, particularly when the projects are "open-ended," such as real-world projects or projects whose ideas are generated by the students. These projects often have undefined scope and use technologies and tools where we lack expertise. In this session, we plan to discuss the challenges faced by teachers in supervising open-ended projects in project-based learning environments. Some of the questions we address in this session: How do we support students with a project in a domain we know nothing about? How do we help students find meaningful and relevant projects with appropriate scope? How do we assist students in selecting appropriate technologies and tools? How do we guide students in planning their iterations to deliver business value and core functionality? This BoF is for instructors who teach or are interested in teaching courses with open-ended projects.	Surviving "Open-ended Projects" in Project-Based Learning: A Teacher's Perspective (Abstract Only)	NA:NA:NA	2017
Karen Parker:Sloan Davis:Chris Stephenson:Jason Ravitz	Recent studies on the impact of CS teacher professional development (PD) opportunities have highlighted areas of improvement to effectively grow the number of well-prepared CS teachers. In this BoF Google will share data from CS4HS, an annual program that awards funding to research institutions and education nonprofits globally for the purpose of developing innovative and scalable CS PD that maps to local standards and demands. These data will serve as a starting point to engage the attendees in a wide-ranging and action-oriented discussion on ways the CS education community can improve our PD processes and results.	Improving Effectiveness of CS Teacher Professional Development (Abstract Only)	NA:NA:NA:NA	2017
Ian Pollock:Lonny Brooks	The idea for this session is based on conversations with colleagues from computer science, art, communications, engineering, and biology as well as international colleagues from three continents at ITICSE-2016 on the use of Game Jams to increase participation of underrepresented minorities (URMs) in Computer Science and STEM education. High-impact practices are powerful tools in engaging students (NSSE, 2014), perhaps even more so for non-traditional, ESL/ELL, first-generation, and URM students in STEM disciplines by increasing peer and faculty contact, active learning, and high expectations (Goodman). We believe that event-based teaching, such as Game jams and Hackathons provide students with many, if not more of the experiences that are credited with those of commonly identified High Impact Practices (Kuh, 2008). These events also create peer and social networks among participants. While not conclusive - anecdotally the networks of peers and social capacity seem to make a difference in post graduation job search (Mouw). Game Jams and Hackathons are still relatively new in higher education, and while there is a lot of anecdotal evidence as to the benefits reaped by participants of these events, there exists little in the way of long-term studies in the literature that speaks to the academic value of these events. This session will create a conversation among faculty from computer science and other disciplines who are interested in creating these events and their institutions, and developing scholarship to fill in the gaps in the literature around the effects and efficacy of these events on the long-term success of participants.	Collaborative research into Game Jams, Hackathons and Event-Based Teaching in Higher Education (Abstract Only)	NA:NA	2017
Thomas W. Price:Neil C.C. Brown:Chris Piech:Kelly Rivers	As more programming environments add logging features and programming data becomes more accessible, it is important to have a conversation about how we share and use this data. Uses of programming log data range from big-picture analyses to dashboards for instant teacher feedback, to intelligent, data-driven learning environments. The goal of this BOF is to talk about what data is important to collect, where it can be gathered and shared, what general data formats make sense, how to handle privacy and anonymization, and what ultimately we want to see the data used for. The BOF welcomes both producers of programming log data and current or potential consumers, interested in how it could be applied in their classrooms or research. One hopeful outcome of this BOF is a commitment to documenting and sharing existing programming data in an accessible location and format.	Sharing and Using Programming Log Data (Abstract Only)	NA:NA:NA:NA	2017
Farzana Rahman:Suzanne Matthews:Kelly Shaw:Andrea Danyluk	Undergraduate research is a critical component of high-quality education in any discipline, including Computer Science (CS). Over the past few years, there has been a dramatic increase in CS undergraduate research activities at colleges and universities, and predominantly undergraduate institutions (PUIs) have an important role to play. Not every university has abundant resources to devote to research, and teaching-focused institutions may face the greatest challenges in this respect. Faculty at PUIs, for example, may face funding and infrastructure challenges and may find themselves stretched thin due to especially high teaching and service expectations. A frequently asked question by new faculty at these institutions is: Is it really possible to conduct meaningful research in such a fast-paced discipline as CS, while juggling a very high teaching and service load? Not only is the answer to this question "Yes!" but there are advantages to conducting research at a non-research institution. Faculty here has access to some of the brightest young minds who will potentially be future graduate students in research-intensive universities. They may have the freedom to do research that is too risky for graduate students. They can work on projects they are interested in, rather than those they know must work. With good time management techniques and careful selection of collaborators and student researchers, faculty here really can conduct important CS research. Thus, the focus of this BOF is to share methods that are helpful in conducting significant and meaningful CS research in a primarily undergraduate or teaching institution.	Can we really do it?: Conducting Significant Computer Science Research in Primarily Undergraduate Institutions (PUIs) (Abstract Only)	NA:NA:NA:NA	2017
Jason Ravitz:Karen Peterson:Kathy Haynie:Juliet Tiffany-Morales	With the growth of informal and out of school educational focus on increasing female participation in CS, many of us are asking critical questions about program development, participant learning, and program impact. Which programs are having success reaching and encouraging girls to pursue computer science? What stumbling blocks are encountered? How successfully are programs engaging girls with different STEM orientations or different racial/ethnic/economic backgrounds? How successful are existing CS programs in pivoting to be more accessible to females? Many nonprofit organizations cannot effectively answer these questions because they lack the capacity for program evaluation. Some organizations delay putting evaluation into place, or use a one-dimensional evaluation approach (i.e., a single survey) even though ongoing and comprehensive evaluation results are crucial to program success. Building internal evaluation capacity can help organizations meet their most critical evaluation needs and build systems of continuous improvement. This BOF session will engage participants in discussing their challenges in designing and implementing program evaluations. Participants will have the opportunity to share strategies, evaluative resources, and challenges in building evaluative capacity and conducting effective evaluations. Discussion leaders will share resources developed as part of an evaluation capacity building initiative with informal CS education programs--CS Outreach Program Evaluation Network (CS OPEN--a collaboration between the National Girls Collaborative and Google). As an outcome of this BOF discussion, we hope to collectively identify some lessons learned and next steps for building evaluative capacity around informal CS education.	Strengthening Informal CS Education Program Delivery through Evaluation Capacity Building (Abstract Only)	NA:NA:NA:NA	2017
Michael P. Rogers:Bill Siever	The recipe might not sound particularly exciting: take a microcontroller, garnish with sensors and various output devices, season with a bit of code, and then network until done: but the result -- the Internet of Things (IoT) -- is a rapidly burgeoning field that provides a novel and enticing context for sophomore to senior level students to hone their networking, coding, problem solving and presentation skills, exercise their creativity, and unleash their entrepreneurial spirit. In short, it is a perfect mid-to-upper division elective course. Faculty considering such a course are faced with a myriad of difficult decisions, however, including the appropriate class level, course structure, prerequisites, and platform choice. The purpose of this session is to bring together people who have taught, or are considering teaching, IoT, to discuss these issues. Topics may include: a) an overview of platforms and tools, b) appropriate course topics, c) platform acquisition, deployment, and costs, d) identification of support materials (e.g., classroom friendly materials/guides/documentation), e) appropriate prerequisites, f) IoT platform fidelity (i.e. will the experience translate to real-world IoT skills), and g) discussion of potential broader curricular advantages that come from including IoT topics..	An IoT BOF (Abstract Only)	NA:NA	2017
Rafi Santo:David Phelps	Do different people hold different reasons for promoting universal computer science education (CS4All)? Do different rationale for CS education imply different learning designs? Is it possible to design educational activities that meaningfully integrate multiple purposes and visions? As CS4All initiatives kick off in localities across the United States, we believe that these questions are key to developing policies, pedagogies and technologies that actually are 'for all'. In this session, participants will engage in a facilitated conversation supported by an informal collaborative tabletop card game. The game, meant to promote reflection, debate, discussion and ideation around CS education, will engage participants as designers tasked with integrating multiple commonly-held values and visions of Computer Science education into a concrete learning activities. The goal of this informal activity and brainstorm is not to become a master designer in 45 minutes. Rather, this design challenge acts as a launching pad to have meaningful discussions around the various visions of Computer Science education and what it looks like to translate these visions into practice. We will also invite participants to give feedback on their experience using the game as a conversation starter, with the hope that it might be used by others engaged in deliberations around how to design CS educational experiences. The game will be supplementing an ongoing research project, "CSed Visions" (http://wp.me/P3GrOX-ek) that investigates the role that visions and values play in Computer Science education.	CS4What?: A Game-based Discussion about the Purposes of Universal Computer Science Education (Abstract Only)	NA:NA	2017
Deborah Seehorn:Lissa Clayborn	Computer Science education in the K-12 school system is in the forefront of education news. Schools, districts, and states are looking for guidance in developing and delivering standards-based computer science curriculum in K-12 schools, and many are turning to the CSTA standards. The CSTA K-12 Computer Science Standards have been revised and align to the K-12 CS Framework. The standards delineate what CS concepts students are to know and what CS practices students are to be able to do at the various grade levels. President Obama and the OSTP have initiated a widely supported Computer Science for all initiative for K-12 education in the US. How do the newly revised CSTA K-12 CS Standards support the CS for All initiative? How can the standards be used by individual teachers, curriculum developers, and administrators to develop their K-12 Computer Science Education program? This BOF will provide a forum for participants to share how they are using the CSTA standards and what successes and challenges they have encountered.	CSTA K-12 CS Standards for All (Abstract Only)	NA:NA	2017
Mark Sherriff:Christopher Gregg:Shawn Lupoli	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts, and greater pay as demonstrated by excellence in teaching, educational material development, and service. As this type of position has been growing rapidly in popularity, CS departments have been developing the expectations and responsibilities for such faculty almost ad hoc, creating policies that can be vastly different similarly-named positions at other universities. This birds-of-a- feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching Track Faculty in CS (Abstract Only)	NA:NA:NA	2017
Donald Slater:Eric Brown:Wanda Dann	This session is for anyone currently using Alice 2 and/or Alice 3, or those exploring the possibility of using Alice in their curriculum. The discussion leaders and attendees will share teaching strategies, tips, and techniques with each other and those new to Alice. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources. There will be a special emphasis on mapping Alice curriculum and instructional materials to CSTA, CSP, code.org and ACM curriculum standards and guidelines for a wide range of age/grade levels. The team will also share feedback from the Beta users of the new textbook and CS Principles Course.	Mapping Alice Curriculum to Standards: A BOF for the Alice Community (Abstract Only)	NA:NA:NA	2017
Anya Tafliovich:Jennifer Campbell:Daniel Zingaro:Francisco Estrada:Leo Porter	With growing enrolment and ongoing research into best practices for team work, many instructors are rethinking how to form, evaluate, and manage teams. In this BoF, instructors will discuss the strategies they have employed, the effectiveness of those approaches, and the tools that support administering teams. Discussion topics may include self- and peer-evaluation, grading strategies, software support, and conflict resolution.	Forming Strong and Effective Student Teams (Abstract Only)	NA:NA:NA:NA:NA	2017
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our 14th Annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ABI, ACM-W, CDC, CRA-W, NCWIT. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organizations and who do not customarily have an opportunity to share ideas face-to-face.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA	2017
Richard Weiss:Ambareen Siraj:Jens Mache:Elizabeth Hawthorne:Blair Taylor:Siddharth Kaza:Michael E. Locasto	We have been teaching cybersecurity using hands-on, interactive exercises that have successfully engaged students. However, in order to meet the increasing demand for security professionals, we need to greatly expand the community of faculty teaching in this area. We would like to bring together new and experienced faculty to do this. Ambareen Siraj has set up a dedicated Facebook group to allow us to work together outside of SIGCSE events, but we need to develop a critical mass of users. During the BoF, we will encourage participants to sign up for the closed group, and we will have an exercise where they ask and answer questions about what they want from this learning community. One benefit of having a learning community is that it will be easier to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts, including our own (e.g. Security Injections, the Security Knitting Kit project, and EDURange). The BoF also benefits experienced members, helping them to reach other faculty with similar interests. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. For the last five years, we have been doing that at SIGCSE. We will discuss ways to integrate security-related exercises into existing courses. The questions we will ask are, "What exercises have you tried? What are your experiences? What are you looking for from the community?"	Building and Supporting a Community of CS Educators Teaching Cybersecurity in 2017 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2017
Pat Yongpradit	With the explosive growth and interest in computer science, the CS education research community has been been asked significant questions from the K-12 community: What should students learn in a K-12 computer science pathway? When should they learn particular concepts? How do you implement computer science for all students? How can computer science be integrated into other subjects? The ACM, Code.org, CSTA, Cyber Innovation Center, and National Math and Science Initiative have collaborated with lead states/districts and the CS education community have developed the K-12 Computer Science Framework, a high-level guide for states or districts who want to design curriculum, standards, assessments, or teacher development programs. The framework identifies the core concepts and practices at grades 2, 5, 8, and 12. Yet the research base for the framework is incomplete. The BOF session will allow researchers to discuss opportunities in K-12 CS ed research within five areas related to the implementation and future of the framework: Equity and access, Learning progressions, Pedagogical content knowledge, Facilitating learning in other disciplines, and Policy and implementation within K-12 education systems.	Researching the K-12 Computer Science Framework (Abstract Only)	NA	2017
Dominic A. Amato:Ugochi Acholonu	This workshop introduces participants to the Digital Youth Network's Minecraft City Server; a project that seeks to lower the barrier of who can lead computing-related learning opportunities for diverse youth. We present teaching techniques and advice for adapting the Minecraft platform as an educational portal based upon the research we have done with youth across Chicago. Participants will receive handouts describing mentorship techniques and curriculum models that facilitate learning interactions in a blended space. Of critical focus will be exploring the question of how to coordinate mentorship when working in two learning spaces (online and physical) simultaneously. Handouts will be supplemented with a discussion of the adult support roles that we identified as being critical to running engaging Minecraft learning experiences for youth. The workshop will also allow participants to experience the affordances of Minecraft to create an engaging blended learning environment that teaches computational concepts. Participants will receive a hands-on introduction to the basic game mechanics, designing with Redstone, the in-game equivalent to electrical circuitry, and exploring computer programming in-game with Python.	Designing Blended Learning Models to Support Computational Learning: Minecraft Edition (Abstract Only)	NA:NA	2017
Edwin Franklin Barry	Computer systems courses are often challenging to students who must learn the characteristics and behavior of a variety of system components and tools across multiple levels of abstraction. This workshop shows how microcontroller-based projects ("micro projects") can make topics such as data/program representation, bit-manipulation, I/O operation, event-handling, and digital communication more visible, concrete, and motivating. Participants will learn to use a low-cost hardware platform (programming in C/C++) to develop two example micro projects that demonstrate bit manipulation using digital I/O, and event handling with interrupts. We discuss how these projects may be extended or modified to introduce other topics, including microcontroller ISA, assembly language programming, and stack operation. Other project examples will be presented that use serial communication, timers, and a simple multitasking executive to illustrate program/data representation, digital communication, optimization, and operating system principles. We will discuss ways micro projects can be integrated into systems courses at various levels of the curriculum (by varying scaffolding) or used as a framework for an embedded systems/physical computing course. In addition to handouts, we supply participants with the software and hardware for use during the workshop and sources for acquiring them for future classroom use.	Micro Projects: Putting Light and Magic into Learning Computer Systems Concepts (Abstract Only)	NA	2017
Bradley Beth:Amy Moreland	UTeach Computer Science Principles (CSP) is a classroom-ready curriculum designed in alignment with the CSP framework and endorsed by the College Board for Advanced Placement (AP) Computer Science Principles implementation. Piloted in dual enrollment format with 700 high school students, and refined iteratively from 2011--2015, UTeach CS Principles is now being offered in about 300 high schools, and preliminary data suggest great promise for broadening the participation of students from historically underrepresented groups in computing. Building on UTeach's foundation of teacher preparation and advocacy, UTeach CS Principles teachers receive intensive implementation training and support, including comprehensive teacher materials, regional summer workshops, regular remote micro-workshops during the school year, dedicated phone/email coaching, and access to an online professional learning community. The UTeach professional learning model encourages the participation of teachers with a variety of backgrounds and levels of experience, and leverages participating teachers' diverse areas of expertise to strengthen learning and support opportunities for all participants. By 2017, online professional learning modules will be available to rural teachers and others who are otherwise unable to attend a summer workshop. K-12 educators and school and district administrators should plan to attend this hands-on workshop. Presenters will engage participants in demonstration lessons and activities, and participants will leave with materials for immediate use in K-12 computer science classrooms. Opportunities for professional learning and support also will be discussed. Laptops are required.	UTeach CS Principles: Broadening Participation Through K-12 Computer Science Education and Teacher Professional Learning and Support (Abstract Only)	NA:NA	2017
Neil C.C. Brown:Amjad Altadmri	BlueJ is a beginner's IDE for Java which has been in popular use for over ten years. But it continues to improve and evolve: BlueJ 4.0.0 was recently released with several new features. Git support has been added in a user-friendly way, and the support for writing JavaFX GUI applications has been improved. BlueJ 4 also includes the frame-based Stride editor (previously seen in Greenfoot), which allows for block-like programming. BlueJ 4 also retains all its existing functionality such as interactive object creation and method invocation, a "REPL"-like code pad, a debugger and testing support. This workshop, run by the developers of BlueJ, will take the participants, whether new to BlueJ and Java or long-time users, through the new features while also providing an introduction/refresher on the existing capabilities of the software. Participants will learn how to share BlueJ projects via Github, create a new JavaFX application, dabble with Stride and get a tour of the existing BlueJ functionality. A laptop with BlueJ 4.0 installed is required.	What's New in BlueJ 4: Git, Stride and more (Abstract Only)	NA:NA	2017
Josh Caldwell:Dani McAvoy:GT Wrobel	CS Discoveries: An Introductory Course for Late Middle and Early High School	CS Discoveries: An Introductory Course for Late Middle and Early High School (Abstract Only)	NA:NA:NA	2017
Aaron Dingler:Peter Bui	With the recent emphasis on Parallel and Distributed Computing topics in the Computer Science Curricula 2013, instructors are increasingly incorporating these topics into their undergraduate courses. Unfortunately, many universities lack the dedicated computing resources to provide hands-on experiences in this area. This workshop guides attendees through the open source WorkQueue software to teach parallel and distributed computing principles to undergraduate students. WorkQueue is a distributed master worker framework developed by the Cooperative Computing Lab at the University of Notre Dame. WorkQueue is well-suited for inclusion in undergraduate courses due to the ease of use and deployment on a wide range of computer systems, low administrative overhead, and scalability. WorkQueue can be deployed on any system, from a small Raspberry Pi cluster to a high-performance grid computing environment. This workshop walks attendees through the use of WorkQueue with three demonstrations: a "live demo" such as would be used to engage students in the classroom with a hands-on introduction to distributed computing principles, and a guided "tour" through two lab assignments. The first lab assignment will give attendees a hands-on example of a simple distributed computing problem from implementation to deployment. The second lab will demonstrate WorkQueue MapReduce, a simple framework that can be used to introduce the MapReduce programming model without the overhead of a Hadoop cluster or equivalent. A laptop is required to participate in the workshop; the presenters will provide a pre-configured Linux VirtualBox virtual machine to facilitate software setup, or attendees can use their own Linux installations.	Teaching Distributed Computing with WorkQueue (Abstract Only)	NA:NA	2017
Barbara Ericson:Rebecca Dovi:Ria Galanos	To reach President Obama's vision of computer science for all, we will need to prepare many more secondary teachers to teach computer science. In 2015, less than 3,000 schools passed the College Board's audit to offer the Advanced Placement (AP) Computer Science (CS) A course, while close to 12,000 schools passed the audit to offer Calculus AB. The presenters have led teacher professional development workshops for many years and will share their knowledge and materials to help others offer effective teacher professional development. In particular they will cover how to plan a workshop, how to find funding, how to prepare materials for secondary teachers, what materials are available for teacher professional development, how to teach pedagogical content knowledge (how to teach computer science), and how to increase diversity in computer science classrooms. The presenters have free materials for the new Advanced Placement Computer Science Principles (CSP) course as well as the Advanced Placement Computer Science A course. These materials include free interactive ebooks for both CSP teachers and students to help them learn programming and a free interactive ebook for the AP CS A course. Participants will be encouraged to share their materials and strategies as well. Laptop Required.	How to Plan and Run Effective Teacher Professional Development (Abstract Only)	NA:NA:NA	2017
Tasha Frankie:Duane Wesley:James Gappy:Harry Cheng	This workshop is an introduction to using Linkbots as a teaching tool to engage students in CS0/CS1 courses, both at the college/university and high school levels. Participants will learn how to program Linkbot robots using RoboBlockly (block-based) and Ch (C/C++ interpreter with ChIDE) in C-STEM Studio through hands-on activities. Additionally, we will present an overview of the curricula developed by the UC Davis Center for Integrated Computing and STEM Education (C-STEM) that integrates robotics into computing and math classes for the elementary school level through the college level. In the second half of the session, participants will gain more hands-on practice and a better understanding of how Linkbots inspire learning in the classroom by forming teams and tackling problems from the annual C-STEM RoboPlay Challenge Competition, which is designed for students to showcase their real-world problem solving skills. Further information about C-STEM is at: http://c-stem.ucdavis.edu/. Laptop with administrative installation privileges is required to install the software used in this workshop.	C-STEM: Engaging Students in Computing with Robotics (Abstract Only)	NA:NA:NA:NA	2017
Crystal Furman:Sandy Czajka:Adrienne Decker:Dianna Xu	This workshop provides participants with hands-on approaches to teaching common algorithms in an AP Computer Science A context, but common in CS1 in general. Teachers will explore strategies for teaching students: how to introduce commonly used algorithms to students; how to have students problem solve using hands-on techniques; how to determine which algorithm to use provided a program specification; write and modify the algorithm; and interpret the result of an algorithm. Together, participants will be looking at the commonly taught and assessed algorithms in first semester computing courses, especially those found on the AP Computer Science A assessment. A set of example free response questions from the AP Computer Science A assessment will be examined to identify how these algorithms are used and modified in solutions.	Engaging Students with Algorithms (Abstract Only)	NA:NA:NA:NA	2017
Ananda D. Gunawardena	The modern teaching should be based on data driven techniques. Yet many of us do not have the resources to collect, analyze and act on course data on a regular basis. The process of collecting data from multiple sources, integrating and analyzing can be a daunting task. The purpose of this workshop is to help simplify this process. The workshop introduces participants to the basic process of establishing a data collection protocol, dealing with institutional review board (IRB) if applicable, setting up an interactive framework to help facilitate data collection, and developing customized dashboards to help support classroom teaching. We will also discuss ways to set up interactive reading and video viewing activities and student collaboration activities to increase student course engagement. These techniques can help collect student interaction data on a regular basis. The workshop will also discuss data integration standards such as Learning Tools Interoperability (LTI) that can facilitate data integration efforts across data rich learning applications that are already in use	How to Collect, Analyze and Act on Learning Data in Computer Science Courses (Abstract Only)	NA	2017
Sarah Heckman:Jeffrey C. Carver:Mark Sherriff	One of the most important, and difficult, aspects of starting an education research project is identifying an interesting, answerable, repeatable, measurable, and appropriately scoped research question. The lack of a valid research question reduces the potential impact of the work and could result in wasted effort. The goal of this workshop is to help educational researchers get off on the right foot by defining such a research question. This workshop is part of the larger Designing Empirical Education Research Studies (DEERS) project, which consists of an ongoing series of workshops in which researcher cohorts work with experienced empirical researchers to design, implement, evaluate, and publish empirical work in computer science education. In addition to instruction on the various aspects of good research questions, DEERS alumni will join us to mentor attendees in development of their own research questions in small group breakout sessions. At the end of the workshop, attendees will leave with a valid research question that can then be the start for designing a research study. Attendees will also receive information on how to apply to attend the full summer workshop, where they can fully flesh out the empirical study design, and join a DEERS research cohort. More information about DEERS can be found at http://empiricalcsed.org.	Designing Empirical Education Research Studies (DEERS): Creating an Answerable Research Question (Abstract Only)	NA:NA:NA	2017
Sean Hickey	In K-12 classrooms, introductory computer science most often focuses on programming. However, teaching software really only tells half the story of how a computer works. Teaching hardware from an early point in a CS sequence helps to complete the picture for students and demystify what is happening under the hood of the machine. In this hands-on workshop, participants will work in teams to build computational circuits using switches, wires, breadboards, and LEDs. Starting from first principles of boolean logic and binary arithmetic, participants will collectively assemble a working multi-bit addition circuit. This workshop targets K-12 teachers (especially middle school and high school) who have experience teaching programming. Attendees should bring a laptop, if possible.	From Lightbulbs to Logic: Teaching Hardware in Intro to CS (Abstract Only)	NA	2017
Stephan Krusche:Andreas Seitz:Nadine von Frankenberg:Bernd Bruegge	Learning to apply computer science requires practical experience and cannot only be taught in theory. Interactive learning is a new approach: educators teach small chunks of content in short cycles of theory, example, exercise, solution and feedback. It is based on active, computer-based and experiential learning and focuses on immediate feedback to improve the learning experience. It allows students to reflect about the content incrementally. It includes hands-on activities, guidance by the instructor and increases students' motivation and engagement. This workshop describes experiences of multiple interactive learning courses for large classes, including exercises for (1) multiple choice quizzes, (2) interactive tutorials, (3) interactive programming exercises, (4) interactive modeling, and (5) team activities. Based on our experience, we present multiple case studies and concrete examples of interactive exercises. While the assessment of many exercises can be (semi-)automated, teaching assistants in the classroom manually assess other exercises. We show how educators can integrate these exercises into large classes without significantly increasing their effort. Participants should bring a laptop to this workshop.	How to Integrate Interactive Learning into Large Classes (Abstract Only)	NA:NA:NA:NA	2017
Zachary Kurmas	Many students find testing software as difficult and frustrating as they find writing prose. As with writing, no pedagogy will magically replace the need for plenty of practice. Therefore, we believe students should be required to write tests in as many courses as practical. This workshop will present a survey of tools that instructors can use to incorporate testing into many different courses throughout the curriculum. We will begin with a quick review of JUnit, then present tools such as (1) RSpec (Ruby's unit testing framework, on which many other testing frameworks are based), (2) MIPSUnit (MIPS assembly) (3) DLUnit (digital logic and simulated CPUs), (4) CUnit (Operating Systems and Networking), (5) Jasmine (JavaScript), (6) and Cucumber (which has many uses, including system tests on web applications). See http://www.cis.gvsu.edu/~kurmasz/TestingWorkshop for more details. (Note: This workshop is not designed to teach high-level testing principles such as "what tests do I need?", or "how do I know when I've written enough tests?" Similarly, this workshop will not cover TDD or BDD.)	Testing Across the Curriculum (Abstract Only)	NA	2017
Yesem Kurt Peker	Cryptography is a major area of study that provides mechanisms to achieve confidentiality, integrity, authenticity, and non-repudiation in information and computer security. For many not in the area of cryptography, teaching cryptography may be a challenge due to the mathematically heavy background underlying the subject. For students it may be intimidating to read about cryptography with all the terminology new to them. This workshop provides an introduction to basic functions and terminology of cryptography without going into the details of the specific implementations and the mathematics involved in them. The workshop includes four modules focusing on four main mechanisms of cryptography; namely, symmetric key encryption, public key cryptography, hash functions, and digital signatures and certificates. Each module in the workshop starts with a presentation of the topic and proceeds with hands-on activities. The presentations include descriptions of mechanisms as well as the reasons for using such mechanisms. For example, it provides answers to questions such as what does asymmetric encryption provide us that symmetric key encryption does not? Why are hash functions necessary in digital signatures? Why do we need digital certificates in addition to digital signatures? The participants will receive access to presentations and hands-on exercises as well as supplementary material such as assignments for students and questions for assessment. Educators who want to introduce computer security and cryptography early in their curriculum and students and educators who want to learn the basics of cryptography would benefit from this workshop. A laptop is needed for the hands-on activities.	Modules for Integrating Cryptography in Introductory CS and Computer Security Courses (Abstract Only)	NA	2017
Clif Kussmaul:Chris Mayfield:Helen H. Hu	This workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-5 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach, and has been shown to significantly improve student performance. Workshop participants will work through POGIL activities as students, and work through POGIL meta-activities that are designed to help teachers learn core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses and concepts. For more information, see http://cspogil.org and http://pogil.org, including activities for CS1, CS2, and other courses. Laptops optional.	Workshop: Guiding Students to Discover CS Concepts & Develop Process Skills Using POGIL (Abstract Only)	NA:NA:NA	2017
Shawn Lupoli:Karan K. Budhraja	The workshop will focus on the overall aspects of creating a successful peer grading experience for instructors and students using video rubrics. This includes: determining the right exam rubric, video creation, creating a blind "coupon" sheet, using students and class time to grade and storage. A solid rubric is the best candidate for a test to be peer graded. The rubric will be used in creating videos that along with a correct answer, describe each point breakdown in detail. As the instructor, the class meeting is the only time to have everyone together, answer questions, make grading decisions that affect the whole, show the answers, display exam point breakdown, and finally, grade. In order to get all of this done, a private set of videos are created to quicken the information needed for grading. The workshop will use a trial version Camtasia to create the videos. When taking the test, the students are given a test with the blind "coupon" cover sheet so later, the student graders are unable to determine which student really took this test - protecting the privacy of the original test taking student. After the tests have been taken, the next class meeting can be set aside for peer grading. The instructor plays the afore mentioned videos which are broken up into segments in order for the student to either the focus on the grading or on their own answer since the possibility of one of them getting it right.	Creating Peer Grading Videos (Abstract Only)	NA:NA	2017
David J. Malan:Nikolai Onken:Dan Armendariz	This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Amazon's Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker "container" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional "less comfortable" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.	A Web-Based IDE for Teaching with Any Language (Abstract Only)	NA:NA:NA	2017
John Maloney:Michael Nagle:Jens Mönig	The first programming language for most children worldwide today is a blocks-based language like Scratch or Snap. GP is a blocks-based programming language designed to be a follow-on. GP aims to be a general purpose language, like Python or Ruby, in which students can create more complex programs or create standalone applications. GP includes a mechanism for creating modules for others to re-use and a wide variety of primitives, including tools for manipulating CVS and JSON data, using serial port and network connections, and manipulating pixels in pictures or samples in sounds. The language could be used in computer science classes beyond introductory computer science. GP explores the questions: "How far can we go with a blocks-based programming language? Do we have to move students to a textual programming language to explore advanced computational ideas and applications?" In this laptop required workshop, participants will try out GP. They will explore sample projects and create their own projects that push on advanced features of GP such as using multiple classes and instances, creating sets of blocks that can be shared as extension modules, using cloud data, or manipulating images and sounds. GP will be released (free and open source) in Summer 2017, so our goal is to find early adopters who are interested in trying GP and developing examples for others.	GP: A General Purpose Blocks-Based Language (Abstract Only)	NA:NA:NA	2017
Fred Martin:Samantha Michalka:Harry Zhu:Jere Boudelle	MIT App Inventor is widely used to introduce students to programming and building mobile apps. In this workshop, we will introduce AppVis, an extension to App Inventor that allows users to create apps that publish data to iSENSE (isenseproject.org), a web-based system for collaborating with data and visualizations. Using AppVis, apps can also retrieve data from iSENSE and display visualizations in the app. This workshop will provide a hands-on introduction to App Inventor, AppVis, and iSENSE. You will build our demo apps, including jump counter, survey, and map-marking. We will have conversations about how to introduce AppVis to your non-majors courses, intro-CS courses, and interdisciplinary teaching. Prior experience with App Inventor is helpful, but not necessary.	Using AppVis to Build Data-rich Apps with MIT App Inventor (Abstract Only)	NA:NA:NA:NA	2017
Suzanne J. Matthews:Joel C. Adams:Richard Brown:Elizabeth Shoop	Parallel computing is one of the new knowledge units in the ACM/IEEE CS 2013 curriculum recommendations. This workshop will present the Raspberry Pi as an inexpensive hardware platform for providing each student with her own parallel processor. The tactile and visceral benefits of each student having her own machine and being able to take full advantage of its multicore capabilities are significant. In this hands-on workshop, we show how parallelism can be used to spread the workload of compute-intensive applications across the multiple cores of a Raspberry Pi, and explore its use as an inexpensive hardware platform for teaching parallel computing. CS educators who are interested in learning about parallel computing, OpenMP, and how to teach these concepts on a Raspberry Pi are encouraged to attend. Attendees will enjoy a hands-on hardware/software experience, exploring how parallel computations operate and work in practice. In Part I of the workshop, attendees will set up and explore a Raspberry Pi multi-core computer in small teams. In Part II, each team will use the parallel capabilities of the Raspberry Pi to explore parallel computation through the use of OpenMP "patternlets" published on CSinParallel.org. Part III explores applications of the Raspberry Pi to parallel applications such as image processing and population dynamics, using OpenMP. All materials from this workshop will be freely available from CSinParallel.org.	Teaching Parallel Computing with OpenMP on the Raspberry Pi (Abstract Only)	NA:NA:NA:NA	2017
Bradley Miller:Paul Resnick:Barbara Ericson	Runestone is an open-source ebook platform designed to create and publish interactive computer science textbooks (See http://runestoneinteractive.org/). Runestone textbooks support programming within the browser, code visualizations, and a wide variety of practice activities, from multiple choice and fill-in-the-blank questions to Parsons Problems (drag-and-drop mixed-up code). The presenters have several years of experience developing and using ebooks for CS1, AP CS A, AP CSP, data structures, and web programming. Several studies have demonstrated good usability and positive learning and attitude impacts on students using these ebooks. Runestone ebooks can be customized to meet the needs of individual courses and teachers. The goal of this workshop is to help computer science teachers use and modify Runestone ebooks. The hands-on session will start by leading participants through use of the ebooks as if they were students. Participants will next create their own custom course of any existing ebook in the library and will use the instructor's dashboard to review student activity, modify the course, and grade students. Finally, participants will create their own assignments using Runestone's active learning components, which serves as a starting point for authoring their own content in Runestone. Laptop Required.	Using and Customizing Open-Source Runestone Ebooks for Computer Science Classes (Abstract Only)	NA:NA:NA	2017
Briana B. Morrison:Mark Guzdial:Cynthia Lee:Leo Porter:Beth Simon	In this workshop participants will receive an overview of teaching practices in computer science that research indicates are effective. While the field of computer science education is young, it has uncovered several teaching practices that can be adopted by instructors that can improve both the retention and performance of students. These evidence based teaching practices include active learning techniques such as peer instruction and prior-knowledge activities, pair programming, and use of subgoal labels. Participants will experience firsthand many of these techniques and will be provided with resources on where to find more information, including the original research papers, on each technique. If you want to attend a workshop that will have an immediate impact in your class -- attend this one. The workshop will be interactive, engaging, and show you how to incorporate teaching practices that are empirically proven to provide benefits. You are guaranteed to leave with a list of many freely available resources and ideas to use in your next class. You will also have the opportunity to "ask the experts" as the authors of many of these research papers will be leading that session of the workshop.	Evidence Based Teaching Practices in CS (Abstract Only)	NA:NA:NA:NA:NA	2017
Krishnendu Roy:Kristine Nagel:Sarah T. Dunton	NA	How to Plan and Run Computing Summer Camps: Logistics (Abstract Only)	NA:NA:NA	2017
Ingrid Russell:Zdravko Markov	The workshop introduces participants to Weka, an open source Data Mining software package written in Java and available from www.cs.waikato.ac.nz/~ml/weka/. The goal of the workshop is to present the basic functionality of Weka that may be used in the undergraduate computer science and engineering curricula. The Weka system provides a rich set of powerful Machine Learning algorithms for Data Mining tasks, along with a comprehensive set of tools for data pre-processing, statistics and visualization, all available through an easy to use graphical user interface. Weka is widely used for educational purposes. Recently, with the increasing popularity of Big Data, it becomes a popular tool for Analytics and Data Science. Weka's rich functionality also allows its use for Text and Web document pre-processing and mining. All this makes it a suitable platform for enhancing the CS curriculum with hands-on exercises and practical projects. The workshop will present examples of such projects and exercises in the area of Web document classification and clustering. The basic steps of document collection, creating the vector space model, data preprocessing, attribute selection, and applying classification and clustering algorithms will be discussed. These topics will be covered in a way that will allow participants with no particular background in machine learning or data mining to appreciate the use of Weka in computer science education.	An Introduction to the Weka Data Mining System (Abstract Only)	NA:NA	2017
Bill Siever:Michael P. Rogers	Internet of Things (IoT) devices -- networked microcontrollers with attached sensors and outputs (LEDs, actuators, etc.) -- are becoming ubiquitous in the home (e.g., smart light bulbs, security systems), on the road (e.g., smart parking meters, traffic control), in industry (e.g., equipment monitoring, asset tracking) and in healthcare (e.g., fitness monitors, drug monitors). Consequently, IoT provides an opportunity to demonstrate the pervasiveness and social relevance of computing. Moreover, today's hobbyist- oriented IoT platforms empower entry-level students to create meaningful, real-world IoT applications. This allows rich computer science topics, such as event driven programming, concurrency, networking, information representation, cloud computing, etc., to be introduced earlier in the curriculum. Most importantly, IoT examples provide a compelling context for students to hone their critical thinking skills while solving engaging, real-world problems. Faculty interested in including IoT topics face several challenges: selecting a suitable set of topics, identifying an appropriate pedagogical approach, and, perhaps most daunting, choosing a cost-effective platform that lends itself to classroom use. This workshop will introduce the basic terms and technologies in IoT, discuss issues that arise when including IoT topics in classes, compare and contrast the most popular platforms for IoT, and walk participants through several classroom-tested, hands-on examples using a classroom-friendly platform (Particle's Photon) where they create both Wi-Fi-based IoT devices and corresponding web apps. Participants will need a laptop (any OS) with Internet access.	An IoTa of IoT (Abstract Only)	NA:NA	2017
Kalpathi Subramanian:Jamie Payton	This workshop introduces participants to the concepts and use of BRIDGES, a software infrastructure designed to facilitate hands-on experience for solving traditional problems in sophomore level computer science courses (data structures, algorithms) using data from real-world systems that are of interest to students, such as social networks (Twitter, Facebook), scientific or engineering datasets (USGIS Earthquake data), Google Maps, etc. BRIDGES provides easy access (typically function calls) to real-world data sets for use in routine data structures programming assignments, without requiring students to work with complex and varied APIs to acquire such data. BRIDGES also provides visualization capabilities, allowing the students to visualize the data structure they have created as part of their assignment. BRIDGES visualizations can be easily shared, via a web link, with peers, friends, and family. Workshop attendees will engage in hands-on experience with BRIDGES and multiple data sets, and will have the opportunity to discuss how BRIDGES can be used to support various introductory computer science courses. A laptop with internet connection is required to participate in hands-on activities.	Increasing Student Interest in Data Structures Courses with Real-World Data and Visualizations Using BRIDGES (Abstract Only)	NA:NA	2017
Cynthia Taylor:Joe Hummel:David Hovemeyer:David Bunde:John Dooley:Jaime Spacco	Peer Instruction (PI) is an active learning technique with over 25 years of research supporting its efficacy in Physics Education. More recently, the CS Education community has found that the benefits of PI are true for CS as well, including lower WDF rates, higher exam scores, and improved retention in the CS major. One of the key differences between PI and traditional lecture is the use of a series of multiple choice "clicker questions" in class to challenge the students' conceptual understanding. Students discuss and answer these questions in small groups, then the instructor reviews why each choice was right or wrong with the entire class. The workshop is a practical look at the kinds of clicker questions used in PI. Attendees with see examples of some of our best and worst questions, and also work to design and improve some of their own questions. In addition, we will provide a demonstration of PI, and share our practical experiences in adopting PI in a wide variety of class sizes.	Peer Instruction in Practice (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Richard Weiss:Jens Mache:Michael E. Locasto:Frankly Turbak	Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to empower faculty to add hands-on security exercises to their courses. We introduce EDURange, a framework for accessing, developing and assessing interactive cybersecurity exercises. We want to reach and engage all students. The first step is to have interesting challenges that are easy to access. EDURange uses VMs in a public cloud, which also provides flexible resources. No software needs to be installed - students only need an ssh client. Another step is to give students feedback on how they are doing. This is an important role for faculty and is not something to automate. Instead, EDURange provides basic tools to visualize what students are doing as they work on the exercises. This allows instructors to more easily see when students are stuck or heading in the wrong direction. Since cybersecurity exercises are often easy to understand but hard to solve, guidance is especially important so that students don't become frustrated. In this workshop, participants will get to try EDURange and several exercises, including an introduction to ssh. Participants don't need to be security experts. We will provide sample syllabuses for an introductory security course as well as an interdisciplinary security course, and we will show how our exercises can be integrated into these courses. More information at http://www.edurange.org. Laptop required.	Hands-on Cybersecurity Exercises That are Easy to Access and Assess (Abstract Only)	NA:NA:NA:NA	2017
Victor Winter:Betty Love	Bricklayer is a freely-available online educational ecosystem designed in accordance with a "low-threshold infinite-ceiling" philosophy. Its purpose is to teach coding to people of all ages and coding backgrounds. A significant portion of the Bricklayer ecosystem has been developed specifically to help novices, especially primary school children, learn how to code. When executed, Bricklayer programs can produce LEGO® artifacts, Minecraft artifacts, and even artifacts suitable for 3D printing. Bricklayer resides in a domain in which there is a strong connection between math, art, and computer science. This workshop is suitable for (1) university instructors and faculty who are interested in freshmen-level programming, (2) CS educators who work with and/or teach K-12 teachers in order to deliver coding-based curricula, (2) K-12 teachers and facilitators interested in exploring options for how they might teach coding - either directly as part of the in-school curriculum, or indirectly as part of an after school program. No background in coding is assumed. The aim of the workshop is to provide participants with a general understanding of what Bricklayer coding entails, how it relates to math, as well as providing a framework and road map for learning how to code in Bricklayer. An example of a 10 week (1 hour/week) primary school curriculum will be provided.	Two Birds: Teaching Coding and Math in Primary Schools and Beyond (Abstract Only)	NA:NA	2017
Ashish Aggarwal	Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague & Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.	Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab	NA	2017
Benjamin Romano	The number of devices connected to the Internet has increased dramatically in recent years, driven in large part by a new movement called the "Internet of Things" (IoT). With the IoT, new applications for Internet connectivity have emerged beyond just laptops and smartphones, to unite a heterogeneous collection of connecting points tied to various aspects of daily life (e.g., Internet-enabled appliances, vehicles and wearable computing devices). As more devices are added to the Internet each day, controlling their interaction has become very challenging. The goal of this project is to create a software solution that will manage connected devices and allow users to specify the meaning of the device interactions. To achieve this, we are currently creating an Internet of Things platform, Wendo, to handle device connections, and a website to manage these devices. The platform is hardware agnostic allowing users to run the software on their own devices that support the communication standards they need. Additionally, Wendo can be extended easily to support new communication standards as they are released. To allow non-programmers to take advantage of our platform, we created ThingScript, a simple domain-specific language that has an English-like syntax that can be adopted by end-users to define the relationship between devices. We determine what actions can be performed on a device by requiring a thing definition file (.tdef). This file includes information about the actions, events and public data of each device.	Managing the Internet of Things	NA	2017
Peeratham Techapalokul	Code smells codify poor coding patterns known to degrade software quality. Block-based languages have proven to be a viable educational and end-user programming paradigm with increasing adoption across a broad spectrum of users and domains. This rising popularity of this programming paradigm calls for a serious look at the program quality written in block-based languages. While code smells in the context of text-based languages have been studied extensively, the research community lacks a comprehensive understanding of code smells in block-based software. To address this problem, we present the results of a large-scale study of code smells prevalent in programs written in the highly popular Scratch programming language. We analyzed programs submitted to the public Scratch repository in 2016, considering a million programs altogether. We discovered interesting relationships between the prevalence of certain smells and the levels of proficiency of the programmers commonly introducing them. Our findings not only can help block-based programmers improve the quality of their software, but also establish the requirements for refactoring support in this programming domain.	Sniffing Through Millions of Blocks for Bad Smells	NA	2017
Daniel Welch	This work aims to show through a detailed case study that scaling up automated verification to larger non-trivial data structures is not only possible, but when combined with appropriate tool support, can be made more comprehensible and practicable to users in a variety of settings, including the undergraduate curriculum. The study involves an interplay of multiple components annotated with formal interface contracts and the components are all designed to be modular, reusable, and amenable to automated verification and analysis. The components are built using a formal integrated development environment (F-IDE). The plan is to evaluate the F-IDE in an upper-level undergraduate software engineering course in the Spring semester at Clemson University.	Scaling Up Automated Verification: A Case Study and Formal-IDE for the Construction of High Integrity Software	NA	2017
Alec Battles	Tensors are a natural extension of matrices and vectors. They provide an ideal framework for abstracting relationships between related parameters. In image processing, tensors can be used to represent gradient information. The 2D structure tensor is one such representation, useful in corner detection and non- photorealistic rendering. This abstract summarizes my image processing filter based on the 2D structure tensor that generates artistic abstraction from photographs. With the 2D structure tensor, I explored ways to present the gradient directions of an image as artwork and investigated the relationship between the Gabor filter and the eigenvectors of the 2D structure tensor. Using this filter, I produce images that consist of a dense patchwork of lines, somewhat resembling certain artistic types of pen shading such as hatching and cross-contour shading. By applying this filter, I have found ways to categorize images that display salient groups of parallel lines. These images present a higher artistic quality and display better compositional style after being processed using the 2D structure tensor than the average photograph. Another finding is that not all resolutions of images are ideal for structure tensor processing and that an image size of 700-1000 pixels per side yields the best results from both a mathematical and artistic standpoint.	The Application of the 2D Structure Tensor in Visual Arts and Design	NA	2017
James W. Belford	The Urban Archivist Application is designed to capture Urban Artwork and its associated metadata from around the world. The Application itself is available for mobile platforms and has a web-interface for viewing the data. Urban Archivist allows users to take photos of urban art they may find while out in the field on research. Once these photos are gathered, the application will automatically grab all the associated metadata from the image and populate those field within the application, minimizing user error. The user will then enter their own findings regarding the image and may upload it to the central database. This art and its associated metadata is instantly available to view by any individual using either the web or mobile Urban Archivist interface. Furthermore, we want to be able to build a dataset large enough to explore and contribute to the realms of machine learning and virtual reality. The goal of this research project is to implement something that has been done prior, while adding modern technological options available to increase the research opportunities for Computer Science and Humanitarian scholars. Preliminary tests via the prototype confirmed the project's ability to achieve this goal.	Urban Archivist Application	NA	2017
Lukasz Brodowski:Cameron Dziurgot:Donald Moretz	Passkeys have been around since personal phones have existed. The typical numeric PIN offers a limited number of combinations and is relatively easy to crack by guessing or eavesdropping. A tap sequence used as a passkey offers an infinite number of different combinations making it unique to that person and that person alone. Once a passkey is saved, it can be compared using the Euclidean distance formula to any other passkey resulting in a dissimilarity score to the master key. If this score is within a certain threshold, that passkey will grant or deny the user access. Our results show that it is possible to authenticate using a unique tap sequence, and convenient enough to be used every day to unlock a personal device.	Tapped-based Authentication for Mobile Device Security	NA:NA:NA	2017
Joshua W. Buck:Saverio Perugini	Specification and implementation of flexible human-computer dialogs is challenging because of the complexity involved in rendering the dialog responsive to a vast number of varied paths through which users might desire to complete the dialog. To address this problem, we developed a toolkit for modeling and implementing task-based, mixed-initiative dialogs based on metaphors from lambda calculus. Our toolkit can automatically operationalize a dialog that involves multiple prompts and/or sub-dialogs, given a high-level dialog specification of it. Our current research entails incorporating the use of natural language to make the flexibility in communicating user utterances commensurate with that in dialog completion paths.	Mixed-initiative Personal Assistants	NA:NA	2017
Eduardo J. Castillo:Xenia Mountrouidou:Xiangyang Li	Covert channels are unique methods for exchanging messages, since they permit sending information secretly. Unlike encryption, covert communication allows to send information covertly, using an otherwise legitimate medium of transfer, thus it is not apparent that a message is being transferred at all. There is limited research on Covert Timing Channels (CTCs), i.e., channels that manipulate packet inter-arrival time to exchange messages based on a certain encoding. Implementing and testing CTCs in real network environments is lacking in the current literature due to sensitivity to network delays that significantly affects this type of communication. Thus, it is important to implement CTC communication to analyze the challenges of creating robust, efficient, and undetectable channels in real life situations. It is also paramount to test these implementations in a wide range of realistic network conditions. In this research, we have developed and tested two implementations of CTCs. The first implementation is based on [1] using standard bits encoding and ASCII for simplicity and robustness. This implementation suffers from easy detection. On the other hand, we developed the second implementation with goal to make the channel undetectable by using encoding with five different delays, i.e., symbols, where five symbols in a specific order correspond to one letter of the alphabet. This implementation has sufficient randomness to be undetected with standard statistical mechanisms. We have tested both implementations on local networks, the Global Environment for Network Innovations (GENI) controlled environment, networks across states in the US, and internationally.	Time Lord: Covert Timing Channel Implementation and Realistic Experimentation	NA:NA:NA	2017
Jianting Chen:Medha Gopalaswamy:Prabir Pradhan:Sooji Son:Peter-Michael Osera	There is a natural correspondence between mathematical proofs and computer programs. For instance, a recursive function and its correctness relate directly to inductive proofs in mathematics. However, many undergraduate students feel a disconnect between mathematics and computer science. There are several proof assistant tools which have been used by the educational community to introduce such concepts to students, but since these tools are not primarily created for educational purposes, students often do not benefit from them to the expected extent. We have created an educational tool that draws from the benefits of existing provers and assistants and includes a novel proof language that mimics handwritten proofs. By creating a proof assistant with an intuitive user interface and a rich mechanism for providing constructive feedback, we hope to bridge the gap that many introductory computer science students find between mathematical proofs and program correctness.	ORC2A: A Proof Assistant for Undergraduate Education	NA:NA:NA:NA:NA	2017
Josephine K. Chow:Xiangyang Li:Xenia Mountrouidou	Messages through covert channels may contain valuable information either in clear text or encrypted. This study focuses on a Covert Storage Channels (CSC) in TCP/IP network packets that uses the 6-bit TCP flag header to transmit messages between accomplices. It uses relative entropy to characterize the irregularities in the TCP flags. First a normal profile of TCP flags is represented by their frequency distribution of regular traffic packets. Then the TCP flag frequency distribution in network traffic is computed for each unique IP pair. The distance of the testing traffic data set from this normal profile is the relative entropy between these two distributions. Moreover, to evaluate the performance of the proposed method this study uses real regular traffic data sets as well as CSC messages generated for both clear text and encrypted forms of a list of keywords common in Unix systems. Different approaches are used to choose the packets to be included in extracting the TCP flag frequencies. The experimentation results by Receiver Operating Characteristic (ROC) curves have shown that the method is promising to choose the best control threshold to differentiate normal and CSC traffic packet streams.	Raising Flags: Detecting Covert Storage Channels Using Relative Entropy	NA:NA:NA	2017
Philip J. Costello	This research project investigates the vulnerabilities of civilian Unmanned Aerial Vehicles (UAV) systems and how they can be exploited by law enforcement should a UAV be utilized in a terrorist attack against the United States. Research into the vulnerabilities of civilian UAVs focused primarily on how such systems could be compromised and taken over by a third party, and for law enforcement to exploit as a potential countermeasure. In particular, the focus of the research was on using Internet Protocol (IP) Address and Media Access Control Address spoofing to spoof the UAV controller. Multiple techniques of spoofing attacks were conducted to compromise the UAV systems and allow for precision control from a third party computer. Additional research was conducted into intercepting an autonomous UAV via spoofing. This paper identifies the threats that UAVs pose to the United States, while providing a reliable and safe way to counter certain hostile UAV threat scenarios.	Identifying and Exploiting Vulnerabilities in Civilian Unmanned Aerial Vehicle Systems and Evaluating and Countering Potential Threats Against the United States Airspace	NA	2017
Christopher Gillespie:Mark Moore:Colin Brown	A mesh is the discretization of a geometric domain into small, simple shapes. The focus of this project is the generation of strictly convex quadrilateral (quad) meshes with provable quality guarantees through the conversion of good quality triangle meshes of planar straight line graphs. The conversion is achieved with an algorithm that uses the dual graph of the input triangulation to quadrangulate small groups of triangles at a time [1,3,4]. A specific goal of the project is proving an upper bound on the aspect ratios of all quads in the mesh. We implement two different metrics to measure the aspect ratios of the quads in the generated meshes. The first metric simply takes the ratio of the longest edge to the shortest edge for each quad. The disadvantage of this method is that it does not take into account the angle measures of the quads. The second approach, a method developed by John Robinson [2], utilizes both edge lengths and angle measures to calculate aspect ratio. We develop code to produce empirical results for both metrics of aspect ratio measurement and histogram plots showing the distribution of quad aspect ratios in a given mesh. With these experimental results, we aim to prove that, given a good quality input triangle mesh with a minimum angle bound, we can give a provably good upper bound on aspect ratio for the resulting quad mesh.	Quadrilateral Mesh Generation with a Provably Good Aspect Ratio Bound	NA:NA:NA	2017
Joseph Jamison	This project attempted to find a solution to the problem of declining yield rates at colleges and universities around the nation. Yield rate, the rate at which accepted students decide to enroll at a given school, is important to a school for academic, economic and logistical reasons. As such, this project aimed to raise the yield rate at Davidson College by applying machine learning techniques to applicant data in order to predict the yield decisions of the applicants. Using these techniques, a model was created that predicted applicants' yield decisions with 86% accuracy. With these predictions, Davidson College can have a better understanding of their yield and can consequently make more informed, tactical admissions decisions, thus raising their yield rate.	Applying Machine Learning to Predict Davidson College's Admissions Yield	NA	2017
Jakub Jancek:Darya Aleinikava:Grace M. Mirsky	The Microsoft Kinect® provides a low-cost solution for measuring distance; however, it has poor performance in bright light conditions. The focus of this project is to design a system to autonomously adjust a pair of polarizing filters in order to effectively utilize the Kinect®'s depth measurement capabilities in different lighting conditions, including outdoor applications. A system designed to dynamically change the orientation of the polarizing filters to select the optimal depth image, without manual adjustment, is the novel contribution of this work. Our approach involves a feedback loop that allows the system to autonomously determine which filter position results in the best image and rotates the filter automatically. Furthermore, the system can perform these tasks periodically over time as light conditions change. This system captured images of objects at various distances from the sensor in different lighting conditions to determine the system performance. Our experiments have demonstrated the effectiveness of dynamically adjusted polarization filters to actively select the best depth image, even in environments challenging for the Kinect®.	Optimizing Kinect® Depth Sensing Using Dynamic Polarization	NA:NA:NA	2017
Zane Ryan Johnston	The vocal user interface (VUI) Myna allows a user to interact with the block-based language development environment Scratch. Unfortunately, the original implementation of Myna does not allow for screen resolutions outside of its original implementation, for the scrolling of scrollbars, and the navigation of prompts and dialogs created by Scratch, essentially halving its functionality relative to what the Scratch graphical user interface (GUI) offers. In this paper, I offer three solutions to these problems, which will be evaluated by Computer Science students and users with mobility impairments in order to determine the validity of these solutions as well as the user's satisfaction with Myna and using voice as an input modality.	One Size Doesn't Fit All	NA	2017
Amy MacDonough	Ideally, we would always be able to write clear, concise programs and have them run quickly. One major impediment is the redundancy which can occur in direct recursive solutions. In some cases, this means writing a loop even if the programmer is more comfortable thinking in terms of recursion. In other cases the impact on code is even more dramatic, and in these cases most programmers choose to sacrifice clarity in exchange for improved asymptotic complexity. There exist program transformation techniques that would allow us to write idiomatic recursive programs without losing efficiency. One such transformation is the "tupling" transformation, which can and has been implemented as an automatic compiler optimization. This transformation is, however, only applicable to a narrow class of problems. We are exploring related transformations, such as tabulation, which can helpfully be applied to a wider class of recursive programs, and attempting to answer the question of when these transformation techniques are most useful to programmers aiming to balance program clarity with performance.	Recursive Convergence	NA	2017
Sierra Magnotta:Anushikha Sharma:Jingya Wu:Darakhshan J. Mir	Understanding of computing skills and concepts is no longer viewed as optional, but is knowledge that is required to progress in several fields outside of computer science, even outside STEM fields. Despite the need for this knowledge, non-STEM majors' participation in computing courses is still lacking. This is especially true for women and other minority groups. In our work, our main motivation was creating a course at our institution, Bucknell University to make computer science more accessible to non-STEM majors on our campus. We adopted an approach of situating course design in the experiences and perspectives of undergraduate students themselves. To achieve this, the course curriculum and materials were mainly designed and created by three undergraduate students, all below the junior level, who connected course topics to a wide variety of topics outside computing. This project is based on the precept that students from varied disciplinary backgrounds and intermediate computing knowledge can provide a unique lens to articulate the needs of their fellow students. In order to serve the purpose of emphasizing creativity and society, we chose a sketch based programming language, namely p5.js (a JavaScript library which brings Processing to the web), which gives students the possibility and flexibility to create projects that are directly relevant to their own interests, while gaining a basic conceptual understanding of Computer Science	Creative Computing and Society: When Undergraduates Design a Curriculum for an Introductory Computing Course	NA:NA:NA:NA	2017
Hannah E. Murphy	In this study, we evaluate a new electronic mobile application, PGA (Programming Grading Assistant). It was designed to make grading paper-based exams easier for graders and professors. Not only does it facilitate grading, but PGA also provides students with more meaningful (semantic) feedback than non-PGA grading. We outline the PGA grading process, the execution of a user study, and the results from that study that prove the effectiveness of PGA technology. Other results indicate that PGA awarded grades are equivalent to red-pen awarded grades and that PGA grades are more consistent across the board.	Digitalizing Paper-Based Exams: An Assessment of Programming Grading Assistant	NA	2017
Meghana Subramaniam:Veronica Cateté	Computer science education in high school is fundamental for increasing the diversity in computing majors at a university level. However, computer science is not often taught in America before university, and usually, the professionals who teach it are not trained experts in computer science concepts and terminology. In this paper, we introduce a new style of coding rubric, which allows teachers to better understand the fundamentals of the course being taught. In the scope of this research, we focus solely on the Beauty and Joy of Computing, an AP Computer Science Principles course. Coding assignments were collected from two groups of students, and assignments were graded and compiled by raters. After being rated, the rubrics were modified to be better adapted to teachers' expectations.	A Pathway to Strengthening Support for Beauty and Joy of Computing Teachers	NA:NA	2017
Nath Tumlin	COPPER (CustOmizable Puzzle Programming EnviRonment) is a meta-configurable tool for creating coding puzzles on a grid using a blocks-based programming language, similar to puzzles in Code.org's Hour of Code. COPPER has the potential to increase student interest and engagement by allowing a teacher to customize levels for individual classes or students. Teachers can create characters for specialized puzzles by uploading pictures to customize their appearance and using the block-language to design the character's behavior. They can then place these characters onto a grid, and arrange them into a puzzle for their students to solve. A teacher can specify the goal of each coding puzzle, as well as restrict which blocks a student may use, allowing a teacher to gradually introduce programming concepts. For example, an elementary school teacher could highlight concepts from a history lesson by building a customized grid where characters from a historical context navigate around objects relevant to the topic being studied. COPPER uses Google's Blockly framework to eliminate the mental overhead of memorizing textual syntax, allowing students to focus on building computational thinking skills. Block-based languages have been shown to be more effective than text-based languages when teaching programming to first-learners. Combined with customization, COPPER has the potential to lead to higher student interest and comprehension of programming concepts in a customized context. This poster will also summarize results obtained through initial experimentation through collaboration with K-8 teachers and their students.	Teacher Configurable Coding Challenges for Block Languages	NA	2017
Haoze Wu	In this project, we aimed to improve the runtime of Minisat, a Conflict-Driven Clause Learning (CDCL) solver that solves the Propositional Boolean Satisfiability (SAT) problem. We first used a logistic regression model to predict the satisfiability of propositional boolean formulae after fixing the values of a certain fraction of the variables in each formula. We then applied the logistic model and added a preprocessing period to Minisat to determine the preferable initial value (either true or false) of each boolean variable using a Monte-Carlo approach. Concretely, for each Monte-Carlo trial, we fixed the values of a certain ratio of randomly selected variables, and calculated the confidence that the resulting sub-formula is satisfiable with our logistic regression model. The initial value of each variable was set based on the mean confidence scores of the trials that started from the literals of that variable. We were particularly interested in setting the initial values of the backbone variables correctly, which are variables that have the same value in all solutions of a SAT formula. Our Monte-Carlo method was able to set 78% of the backbones correctly. Excluding the preprocessing time, compared with the default setting of Minisat, the runtime of Minisat for satisfiable formulae decreased by 23%. However, our method did not outperform vanilla Minisat in runtime, as the decrease in the conflicts was outweighed by the long runtime of the preprocessing period.	Improving SAT-solving with Machine Learning	NA	2017
Ziyan Yang	Polygonal meshes have become the industry standard for the representation of surfaces with highly complex geometry and arbitrary genus in computer graphics and geometry processing applications. We investigate how to extend a point-set algorithm that utilizes a quadtree subdivision to construct a quadrilateral mesh with both angle and aspect ratio bounds. The main goal is to adapt the algorithm to respect polygonal edges so that we will obtain a method to mesh polygonal regions (possibly with holes), with quadrilateral elements that have guaranteed worst-case minimum and maximum angles as well as aspect ratio (longest edge over shortest). Currently, there is no known algorithm that generates quadrilateral meshes with both angle and aspect ratio guarantees.	Quadrilateral Mesh Boundary Classification and Editing	NA	2017
