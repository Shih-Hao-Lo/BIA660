David Ginat:Dan Garcia:William Gasarch	The 'Aha!' phenomenon is familiar to us in many domains including computer science and mathematics (e.g., [2,3,6]). It often stems from an unexpected point of view that illuminates an appealing solution path. The 'Aha' reaction is common to all. Its occurrence is related to the problem-solvers' common perspectives and solution repertoires. Whether more frequent or less frequent, 'Aha' occurrences enrich and strengthen perspectives and repertoires in a stimulating manner.Consider the following Ladder Problem: calculate the number of different ways to climb an N-stage ladder when each step is either one or two stages. One solution perspective may be 'forward reasoning', leading to a systematic accumulation of the possible climbing paths. Another perspective may be combinatorial, leading to the calculation of all the combinations of 1 and 2 that sum to N. A third perspective may be 'backward reasoning', yielding recursive decomposition of the Nth case into the N-1 and N-2 cases.Some problem-solvers may fairly quickly invoke the third perspective and elegantly obtain the Nth Fibonacci number. Others may first follow one of the other perspectives and later realize the illuminating third perspective. The 'Aha' reactions among the solvers may vary. However, both less experienced and more experienced solvers will gain from recognizing the relevance and elegance of the recursive decomposition and enhance their problem-solving repertoires.	Aha! an illuminating perspective	NA:NA:NA	2018
David Ginat	NA	Session details: Aha! an illuminating perspective	NA	2018
Michael Goldweber	NA	Session details: Robotics	NA	2018
José M. Vidal:Paul Buhler	We present our experiences using the RoboCup soccerserver simulator and Biter, our own agent platform, for the teaching of a graduate multiagent systems' class. The RoboCup simulator and Biter are both described. We argue that the combination of RoboCup and Biter forms an effective platform for the teaching of multiagent systems and the distributed mindset. Results from two semesters using these tools are presented. These results confirm our claims. Finally, we characterize this work within the framework provided by the STEELMAN Draft of the Computing Curricula 2001 initiative.	Using RoboCup to teach multiagent systems and the distributed mindset	NA:NA	2018
Frank Klassner	This paper examines LEGO Mindstorms'™ suitability as a hardware platform for integrating robotics into an Artificial Intelligence course organized around the agent paradigm popularized by Russell and Norvig. This evaluation discusses how kits and projects based on Mindstorms supported students' exploration of the issues behind the design of agents from three classes in Russell and Norvig's intelligent agent taxonomy. The paper's investigation also examines several popularly-perceived limitations of the Mindstorms package for college-level robotics projects and shows that most of these "limitations" are not serious impediments to Mindstorms' use, while certain other of these "limitations" do indeed present challenges to the platform's use.	A case study of LEGO Mindstorms'™ suitability for artificial intelligence and robotics courses at the college level	NA	2018
John C. Gallagher:Steven Perretta	In recent years, courses in the design and programming of mobile autonomous robots have become popular at a number of institutions. These activities offer participants experience in a number of practical areas, including computer programming, project management, and technical writing. Further, they provide those experiences in an entertaining manner that may motivate students to pursue additional education in computer science and engineering. By their nature, however, these classes are resource intensive, often limiting access to a few, fortunate students. This paper describes efforts to date in providing a World Wide Web (WWW) based course in autonomous robotics. We will begin with a discussion of how the unique benefits of autonomous robotics courses are enhanced by offering them via the web. We will then discuss our WWW course and some special challenges we encountered during its development. We will conclude with a discussion of future plans and a set of open questions we intend to address.	WWW autonomous robotics: enabling wide area access to a computer engineering practicum	NA:NA	2018
Paul Jorgensen	NA	Session details: New courses	NA	2018
James L. Noyes	There is a change underway in the CS curriculum that reflects a renewed emphasis upon solving applications. Computational science applies solution methods to various scientific models. However, following a computational science approach means more than just using formulas out of a math book. It means having a scientific mindset, understanding and using a scientific approach, thoroughly testing both the theoretical models and the specific implementation of these models, knowing when to use analytic methods instead of numerical ones, using graphics to improve understanding, and knowing how to explain the results of these models to others. This paper addresses what has been learned in designing and teaching a first course in computational science at the undergraduate level.	A first course in computational science: (why a math book isn't enough)	NA	2018
Mary Micco:Hart Rossman	With funding from NSF the Department has set up a stand alone lab for students to learn penetration testing techniques(attack), to harden their networks against these attacks (defense) , and also to gather enough evidence to through careful logging and audit controls to convict a hacker (convict). Linux RedHat 7.1 was used and all the machines were set up as standalone servers in three different subdomains, with 2 perimeter routers and 2 firewalls to allow experimentation with various configurations. In all over 50 software tools were downloaded and tested. Students were screened and asked to sign a disclaimer. They should also have been required to have networking experience. An initial mistake was to run a very minimal server with no services and practically no users. This was not realistic. It made it quick to rebuild systems but much harder to attack.The attacks need to be carefully planned and structured in a specific sequence one at a time, otherwise it becomes very difficult to follow what is going on.	Building a cyberwar lab: lessons learned: teaching cybersecurity principles to undergraduates	NA:NA	2018
Troy Vasiga	There has been much discussion of CS1 and CS2 in computer science education circles. This paper presents a proposal for a course subsequent to CS2 that acts as a "springboard" for students diving into more specialized Computer Science courses at the upper year levels.	What comes after CS 1 + 2: a deep breadth before specializing	NA	2018
Vicki Almstrum	NA	Session details: CS education research	NA	2018
Lynda Thomas:Mark Ratcliffe:John Woodbury:Emma Jarman	This paper reports on the implication of different preferred learning styles on students' performance in the introductory programming sequence and on work in progress on how to accommodate these different styles.Students were given a learning styles preference test and then their preferred learning styles were compared to their performance on the exam and the practical programming part of the introductory programming module. There were significant differences in performance between groups of students.This result could lead one to two possible conclusions. One might be that some students' learning styles are more suited to learning programming than others.An alternative explanation is that our current methods of teaching advantage students with certain learning preference styles. We are at present in the process of testing this second assumption by providing students with a wider range of learning materials. We will then see if student performance is improved by using our current results as a baseline for comparison	Learning styles and performance in the introductory programming sequence	NA:NA:NA:NA	2018
Charlie McDowell:Linda Werner:Heather Bullock:Julian Fernald	The purpose of this study was to investigate the effects of pair-programming on student performance in an introductory programming class. Data was collected from approximately 600 students who either completed programming assignments with a partner or programmed independently. Students who programmed in pairs produced better programs, completed the course at higher rates, and performed about as well on the final exam as students who programmed independently. Our findings suggest that collaboration is an effective pedagogical tool for teaching introductory programming.	The effects of pair-programming on performance in an introductory programming course	NA:NA:NA:NA	2018
Lecia Jane Barker:Kathy Garvin-Doxas:Michele Jackson	As part of an NSF-funded IT Workforce grant, the authors conducted ethnographic research to provide deep understanding of the learning environment of computer science classrooms. Categories emerging from data analysis included 1) impersonal environment and guarded behavior; and 2) the creation and maintenance of informal hierarchy resulting in competitive behaviors. These communication patterns lead to a defensive climate, characterized by competitiveness rather cooperation, judgments about others, superiority, and neutrality rather than empathy. The authors identify particular and recognizable types of discourse, which, when prevalent in a classroom, can preclude the development of a collaborative and supportive learning environment.	Defensive climate in the computer science classroom	NA:NA:NA	2018
David Reed:Doug Baldwin:Michael Clancy:Stuart Hansen:Allen Downey	NA	Session details: Integrating empirical methods into CS	NA:NA:NA:NA:NA	2018
David Reed:Doug Baldwin:Michael Clancy:Allen Downey:Stuart Hansen	Empirical skills are playing an increasingly important role in the computing profession and our society. In addition to being problem-solvers and designers/engineers, computer scientists must also be capable experimenters in order to develop, test, and evaluate complex hardware and software systems. The widespread use of computers as tools for interdisciplinary research also demands a strong grounding in the scientific method.This panel is designed to promote discussion about innovative methods for integrating empirical skills within the traditional computer science curriculum. Each panelist will define a set of core empirical concepts and skills that they see as essential to computer scientists, with a brief rationale for each. In conjunction, they will describe classroom practices that serve to demonstrate the key concepts and/or develop skills they have identified. Sufficient time will be allocated for discussion and contributions from the audience.	Integrating empirical methods into computer science	NA:NA:NA:NA:NA	2018
Amruth Kumar:Timothy Hickey:Linda Wilkens:Aparna Mahadev:Andrew Beiderman:Heidi Ellis	NA	Session details: Internet-centric computing in the CS curriculum	NA:NA:NA:NA:NA:NA	2018
Timothy Hickey:Amruth Kumar:Linda Wilkens:Andrew Beiderman:Aparna Mahadev:Heidi Ellis	Computer Science as an academic discipline should be guided not only by the "state of the art", but also by the "state of the practice"[1]. Over the last few years, Internet/Web has been undeniably the most "high profile" practice of computing. Yet, Computer Science curricula across the country have not kept up with this development - not many schools are offering courses, concentrations and/or majors that identify the Internet/Web as the central principle, and address its issues and needs.In this panel, the panelists will share their experience designing courses and concentrations to address this need, and present their vision for what an Internet-related Curriculum should include: the courses, the technologies, and the overarching themes. The viewpoints presented here are quite diverse: arguing in favor of Internet-related coursework for majors versus non-majors, as a course/minor/major, as an across-the-curriculum theme, as an interdisciplinary endeavor, as an introductory course versus a capstone course, and from the points of view of a community college, four-year institutions and a graduate institution. We hope that these diverse viewpoints will foster vigorous discussion at the panel about the place of Internet-Computing in the Computer Science curriculum, and its design.	Internet-centric computing in the Computer Science curriculum	NA:NA:NA:NA:NA:NA	2018
Andrew Bernat	NA	Session details: Taking advantage of National Science Foundation funding opportunities	NA	2018
Andrew Bernat:Jane Prey	This session will highlight NSF Division of Undergraduate Education programs of interest to college faculty, discussing the requirements and guidelines. It will include a discussion of the characteristics of a competitive proposal and the proposal process.	Taking advantage of National Science Foundation funding opportunities	NA:NA	2018
Stephen Cooper	NA	Session details: Visualization	NA	2018
Herbert L. Dershem:Ryan L. McFall:Ngozi Uti	Linked lists are an important component of the computer science curriculum. JVALL is a software package that provides an animation of linked list operations that is fully compatible with the Java LinkedList class. The animations are driven by a client program that can be either an applet or standalone application. It provides an effective way for students to learn, experiment with, and debug linked list based classes.	Animation of Java linked lists	NA:NA:NA	2018
Ashley George Hamilton-Taylor:Eileen Kraemer	Algorithm animation system design has focused primarily on providing advanced graphical capabilities. However, a fundamental mismatch exists between the needs of instructors and the features of existing algorithm animation systems. This mismatch has reduced the rate of adoption of algorithm animation tools. We describe a system, SKA (Support Kit for Animation), whose design is based on an examination of the tasks performed in the process of discussing algorithms and data structures. SKA attempts to support and enhance time-consuming instructional tasks such as tracing and data structure diagram manipulation, while requiring minimal preparation or authoring time.	SKA: supporting algorithm and data structure discussion	NA:NA	2018
Michael T. Grinder	The FSA Simulator is a Java program created to allow computer science students to experiment with finite state automata. The program is able to simulate both deterministic and nondeterministic automata. Pre-defined automata can be loaded from files or students can create their own. Although this project is similar to others, it has its own unique features. The development history, features, and future plans for this program are discussed.	Animating automata: a cross-platform program for teaching finite automata	NA	2018
Catherine Bareiss	NA	Session details: Curriculum development	NA	2018
J. A. N. Lee	In the Fall of 1999 the Center for Excellence in Undergraduate Teaching (CEUT) and the International Office at Virginia Tech provided a small grant to support the incorporation of international aspects into the Computer Science curriculum. The "Professionalism in Computing" course was chosen as the vehicle for this activity on the grounds that (a) it is a required course of all majors, and (b) the topics within the course were best amenable to international extensions. Through the efforts of the students in the Spring 2000 offering of the course, together with a number of international students, lesson plans for the comparison of non-US aspects of three topics were developed. The topics were Privacy, Freedom of Speech, and Censorship, and the countries covered included Germany, South Korea, China, and Turkey.	Internationalization of the curriculum report of a project within computer science	NA	2018
Alan Fekete:Bob Kummerfeld	This paper presents a curriculum consisting of a collection of subjects to prepare students for a career in "software development" while remaining within the scope normal for a major in a broad liberal arts degree. We describe the principles behind the construction of the curriculum, and contrast it with the more extensive "Software Engineering Body of Knowledge" appropriate in a professional Engineering degree.	Design of a major in software development	NA:NA	2018
Travis Doom:Michael Raymer:Dan Krane:Oscar Garcia	Bioinformatics is a new and rapidly evolving discipline that has emerged from the fields of experimental molecular biology and biochemistry, and from the the artificial intelligence, database, and algorithms disciplines of computer science. Largely because of the inherently interdisciplinary nature of bioinformatics research, academia has been slow to respond to strong industry and government demands for trained scientists to develop and apply novel bioinformatics techniques to the rapidly-growing, freely-available repositories of genetic and proteomic data. While some institutions are responding to this demand by establishing graduate programs in bioinformatics, the entrance barriers for these programs are high, largely due to the significant amount of prerequisite knowledge in the disparate fields of biochemistry and computer science required to author sophisticated new approaches to the analysis of bioinformatics data. We present a proposal for an undergraduate-level bioinformatics curriculum in computer science that lowers these barriers.	A proposed undergraduate bioinformatics curriculum for computer scientists	NA:NA:NA:NA	2018
Donna Tupper	NA	Session details: Gender/diversity	NA	2018
J. McGrath Cohoon	Common departmental characteristics and practices in computer science and biology/life science are compared for 46 departments at 23 Virginia colleges and universities. The goal of this preliminary investigation is to provide additional evidence on how departmental factors can affect the retention of female students.	Women in CS and biology	NA	2018
Antonio M. Lopez, Jr.:Lisa J. Schulte	Most will likely agree that fewer and fewer women are finding their way to completing a bachelor's degree in one of the computing sciences. However, in looking at data collected by the National Science Foundation (NSF) on bachelor's degrees in Computer Science (CS), an interesting anomaly is evident when African American women are viewed as a separate trend. This paper presents some preliminary analysis and suggests that research is needed to better understand this ethnic group that has remained relatively stable in its production of bachelor's degrees in CS.	African American women in the computing sciences: a group to be studied	NA:NA	2018
Joan M. Francioni:Ann C. Smith	Students with visual disabilities face unique challenges in learning to be computer scientists. These challenges can be overcome, however, with the use of specialized software tools and hardware equipment, collectively called assistive technology. In this paper, we discuss the environment we are using for three students with visual disabilities who are starting in our programs this year. This environment includes a collection of commercial assistive technology and a programming tool that we have developed in-house.	Computer science accessibility for students with visual disabilities	NA:NA	2018
Peter R. Turner:Steve Cunningham:Andrew T. Phillips:Angela B. Shiflet:Kris Stewart:Ignatios E. Vakalis	NA	Session details: Undergraduate computational science and engineering programs and courses	NA:NA:NA:NA:NA:NA	2018
Peter R Turner:Angela B Shiflet:Steve Cunningham:Kris Stewart:Andrew T Phillips:Ignatios E Vakalis	This 90-minute panel session will discuss recent and future developments in incorporating Computational Science and Engineering into the undergraduate curriculum. There is a companion session devoted to tools and techniques and so the focus here is on programs and courses.The panelists will demonstrate a clear uniformity of purpose but a wide variety of approaches to increasing the CSE experience of undergraduates in different types of schools.The schools represented vary from large state universities to small private liberal arts colleges and a medium-sized school with a strong engineering bias.The approaches adopted also differ. There are complete programs built largely from existing courses, specific courses that are added to established programs to allow a student to follow an emphasis in CSE. The introduction of CSE into existing programs through faculty advice and education has also been successful.Yet other approaches represented among the panelists are the introduction of multi-disciplinary team-taught project-based courses as a springboard for growing an undergraduate CSE program including undergraduate research projects. The incremental use of small add-on courses to supplement conventional mathematics offerings with some CSE content has also been used successfully.Another approach represented on the panel is the use of a particular vehicle --- in this case graphics and visualization --- to introduce key ideas of CSE into regular parts of the curriculum.The unifying theme of the panel --- the desire to improve undergraduate CSE education will be evident throughout. By presenting a wide variety of approaches to achieve this end, it is hoped that any audience participants who wish to create a CSE thread in their own programs will find some ideas to help them. Some of the practical and political issues will also be discussed in the various contexts.The program for the panel would allow each panelist a maximum of 10 minutes to outline their programs and approaches. The remaining 30 (or more) minutes would then be reserved for general discussion and questions and contributions from the audience.	Undergraduate computational science and engineering programs and courses	NA:NA:NA:NA:NA:NA	2018
Bruce S. Elenbogen:Richard Enbody:Peter B. Henderson:John Laird:Chris McDonald:Richard Nau:Steve Tanimoto	NA	Session details: Mathematics preparation for an undergraduate degree in CS	NA:NA:NA:NA:NA:NA:NA	2018
Bruce S. Elenbogen:John Laird:Richard Enbody:Chris McDonald:Peter B. Henderson:Richard Nau:Steve Tanimoto	Throughout the history of computer science education there has been debate on what should be the appropriate mathematics background for computer science majors. The first computer science instructors were mathematicians and the first curriculums were just modifications of mathematics curriculums. However, as the discipline has grown and matured there has developed several areas of computer science where traditional undergraduate mathematics is not used and traditional mathematics preparation may not be appropriate. Although logic and problem solving skills are valued by the Computer Science community, exactly how many hours of mathematics and what areas of mathematics should be required, needs to be addressed. This panel was convened to discuss this issue from a variety of viewpoints. We hope that discussion will give the listeners new ideas on just what should be the appropriate courses and topics for their institution and program. The panel was chosen to present a wide range of view representing a variety of schools (large and small, public and private, traditional and non-traditional, preparation for the workplace or for disciplines (E-commerce, distributed computing, artificial intelligence, software engineering and graphics) viewpoints (both young and old, industrial and academic).	Mathematics preparation for undergraduate degrees in computer science	NA:NA:NA:NA:NA:NA:NA	2018
James Caristi	NA	Session details: Tutorial on extreme programming	NA	2018
James Caristi	The methodology known as Extreme Programming will be presented, beginning with its reason for existence, philosophy, and a detailed exposition of the twelve practices that define it. There will also be a discussion of its strengths and weaknesses as a software design methodology.	Tutorial on extreme programming	NA	2018
Seth Bergmann	NA	Session details: Pedagogy	NA	2018
Barbara Moskal:Keith Miller:L. A. Smith King	Computer ethics courses differ from technical courses in the manner in which they are taught and assessed. A common assignment in a computer ethics course is to write an essay that addresses a technical dilemma. Computer science faculty typically do not have training or experience in grading essays. The purpose of this paper is to present a scoring rubric that has been successfully used to grade and track students' knowledge development as they progress through a computer ethics course. Although this paper focuses upon a specific rubric, general principles will be emphasized to show how scoring rubrics can be used across different courses.	Grading essays in computer ethics: rubrics considered helpful	NA:NA:NA	2018
Grant Braught:David Reed	We present several introductory computer science laboratory assignments designed to reinforce the use of the scientific method. These assignments require students to make predictions, write simulations, perform experiments, collect data and analyze the results. The assignments are specifically designed to place student predictions in conflict with the observed results, thus producing a disequilibration. As a result, students are motivated to critically examine their simulations, consider their assumptions, and repeat their experiments. These potential benefits of disequilibration are discussed and additional ways to apply disequilibration in computer science education are suggested.	Disequilibration for teaching the scientific method in computer science	NA:NA	2018
Sue Fitzgerald	NA	Session details: Operating systems	NA	2018
David A. Holland:Ada T. Lim:Margo I. Seltzer	This paper presents a new instructional operating system, OS/161, and simulated execution environment, System/161, for use in teaching an introductory undergraduate operating systems course. We describe the new system, the assignments used in our course, and our experience teaching using the new system.	A new instructional operating system	NA:NA:NA	2018
Benjamin Atkin:Emin Gün Sirer	In this paper, we describe PortOS, an educational operating system designed to complement undergraduate and graduate level classes on operating systems. PortOS is a complete user-level operating system project, with phases covering concurrency, synchronization, networking and file systems. It focuses particularly on ad hoc and peer-to-peer distributed computing on mobile devices. This paper discusses alternative approaches to operating system projects, and presents our particular design point along with pedagogical justifications.	PortOS: an educational operating system for the Post-PC environment	NA:NA	2018
Mohamad Neilforoshan	NA	Session details: Object-oriented - 1	NA	2018
Steven K. Andrianoff:David B. Levine	Role playing exercises are one of many teaching techniques commonly employed to drive home lessons about computer science. Most of the specific role playing described in the literature, however, relates to algorithm or hardware design. More recently, the Pedagogical Patterns Project has published patterns involving role playing in a general sense. In this paper, we draw on three separate role playing exercises that we have developed to show that scripted role playing is a natural and effective way to introduce concepts of object-oriented design.	Role playing in an object-oriented world	NA:NA	2018
Dung ("Zung") Nguyen:Stephen B. Wong	Designing a two-person game involves identifying the game model to compute the best moves, the user interface (the "view") to play the game, and the controller to coordinate the model and the view. A crucial task is to represent the algorithms used in their highest abstract forms. This can prove to be a difficult and subtle endeavor. It is made easier however by the use of good object-oriented (OO) design principles to help maintain a high level abstract viewpoint during the design process. The state pattern is used to represent the game board and is coupled with the visitor pattern to provide state-dependent, variant behaviors. The min-max algorithm and its variants are implemented as the strategy pattern, which allows flexible and extensible computational capability. Careful analysis is performed to properly abstract the interactions between the model and the view. The command design pattern is used to provide callback services between the model and the view. Leading students through this design process enables them to learn algorithms and architectures that easily scale to full-sized applications.	Design patterns for games	NA:NA	2018
Peter B. Henderson:Vicki Almstrum:Paul De Palma:Orit Hazzen:Kim Potter Kihlstrom	NA	Session details: Women, mathematics, and computer science	NA:NA:NA:NA:NA	2018
Peter B. Henderson:Paul De Palma:Vicki L. Almstrum:Orit Hazzan:Kim Potter Kihlstrom	"… women embrace the "precision" of mathematics." a quote from panelist Paul De Palma's viewpoint article "Why Women Avoid Computer Science" in the June 2001 CACM. Panelist Kim Kihlstrom notes "… I got into electrical engineering and then computer science exactly because I love math." Henderson's evidence indicates that women performed better than men in a mathematically oriented first course in computer science, and women felt the course was more beneficial than a traditional programming oriented first course. Regarding a mathematically oriented functional programming course for high schools Kathi Fisler says "Our high school teachers have noticed females preferring this to a conventional curriculum by as much as 5 to 1!"Coincidence, or is there a common thread here? Please join us for the discussion and share your own viewpoints.	Women, mathematics and computer science	NA:NA:NA:NA:NA	2018
Leah H. Jamieson	NA	Session details: Service learning in computer science and engineering	NA	2018
Leah H. Jamieson	Attention is increasing on the need to educate students in areas that extend beyond the traditional technical basis for their field: the Kellogg Commission's mandate for a "scholarship of engagement" [3]; the Engineering Deans Council report's emphasis on teamwork, communication, and the need for students to "understand the economic, social, environmental and international context of their professional activities" [2]; the CSAB Criteria 2000 requirements in written and oral communication and "coverage of social and ethical implications of computing" [1]; the growth of broad IT programs and schools.Service learning offers the opportunity to broaden the educational experience by engaging students in "real-world" projects. However, it also poses new questions: Should students earn academic credit for courses in which a significant portion of their time is spent on "soft" skills? Are students gaining valid technical experience on projects defined by an outside customer rather than by CS&E faculty? How can curriculum structures support projects that aren't constructed to fit within semester boundaries?The panel includes faculty and students from service-learning programs, the chief technical officer for a software company, and a community "customer."	Service learning in computer science and engineering	NA	2018
Charles D. Swanson	NA	Session details: Computational science and engineering: tools and techniques for teaching	NA	2018
Steve Cunningham:Sylvia Clark Pulliam:Charles D. Swanson:Peter R. Turner	The methods of computational science and engineering have been applied to a wide range of problems such as weather forecasting, cosmology, drug design, and car crash simulation. More recently, high performance computers have been applied to problems in biology (e.g., molecular biology, bioinformatics). The development of CSE as an interdisciplinary field has had a profound effect on the way science and engineering is done, both for basic research and product development. Less than ten years ago, these methods required very expensive supercomputers and special software skills to be effective. Today, while supercomputers are still important, the power of widely available PCs and workstations means that many of these methods can be introduced into the undergraduate curriculum. The objectives of this session are, therefore:• To introduce participants to some of the methods of CSE (e.g., modeling, scientific visualization).• To demonstrate the range of software tools that can be utilized.• To provide examples of these tools applied to teaching topics from different scientific disciplines.• To provide participants ideas and resources that they can use in their own courses.	Computational science and engineering: tools and techniques for teaching	NA:NA:NA:NA	2018
Wanda Dann	NA	Session details: CS1 - Java	NA	2018
Eric Allen:Robert Cartwright:Brian Stoler	DrJava is a pedagogic programming environment for Java that enables students to focus on designing programs, rather than learning how to use the environment. The environment provides a simple interface based on a "read-eval-print loop" that enables a programmer to develop, test, and debug Java programs in an interactive, incremental fashion. This paper gives an overview of DrJava including its pedagogic rationale, functionality, and implementation.	DrJava: a lightweight pedagogic environment for Java	NA:NA:NA	2018
James Comer:Robert Roggio	The Texas Christian University (TCU) Computer Science Department was established in 1981. From the outset, the Department's CS1 course has presented significant teaching challenges due to the wide diversity of student's taking the class. Traditionally, only 25-35% of the students enrolled in the course are computing science majors, the remaining being students from a wide diversity of disciplines, many of which are non-science based. Despite the diversity, it has been necessary for the course, and its content, to be structured to satisfy essential core requirements for students majoring in computer science and computer information science as well as to meet program requirements for the many non-computer science majors taking the course. This paper discusses some of the unique issues associated with teaching a Java-based CS1 course to a very diverse group of students, the majority of which have very unsophisticated problem solving skills, and little or no programming expertise. A representative set of experiments and programming assignments are included.	Teaching a Java-based CS1 course in an academically-diverse environment	NA:NA	2018
David J. Barnes	Innovative teachers are continually looking for creative ideas, both to get their ideas across and to hold the interest of their students. One of the latest trends is the use of LEGO® MINDSTORMS™ kits [9] in various computing courses. These kits allow a wide variety of physical models to be built, some of which may be programmed via the RCX™ processor integrated into them. Using its standard firmware, the RCX device may be programmed through several different specialist languages. However, the additional availability of bytecode-compatible replacement firmware for the RCX makes the use of Java™ as the programming language for it a particularly attractive approach. In this paper, we explore some of the issues associated with choosing to program MINDSTORMS models using Java within the context of an introductory programming course. In particular, we consider the impact on the material that is taught, and the use of an appropriate API to support an objects-early programming style.	Teaching introductory Java through LEGO MINDSTORMS models	NA	2018
David Valentine	NA	Session details: Architecture	NA	2018
Kevin Skadron	A course that surveys state-of-the-art microprocessors offers an excellent forum for students to see how computer architecture techniques are employed in practice and for them to gain a detailed knowledge of the state of the art in microprocessor design. The University of Virginia has developed such a course, organized around student presentations and a substantial research project. The course can accommodate a range of students, from advanced undergraduates to senior graduate students. The course can also be easily adapted to a survey of embedded processors or DSPs. This paper describes the course and lessons learned.	A microprocessor survey course for learning advanced computer architecture	NA	2018
Hugh Osborne	Undergraduate students often experience difficulty in understanding the basic principles of low level computer operations in introductory courses to computer architectures when these are taught using actual low level programming languages. This is not due to any inherent complexity of the concepts but rather a consequence of assembly language specific details and the need to introduce many concepts simultaneously, such as, for example, data representation, addressing modes and primitive I/O. This paper describes the Postroom Computer, a low level language simulator that not only provides a simple low level language, suitable as an introduction to assembly language programming, but also allows computer architecture concepts to be introduced in an incremental fashion.	The postroom computer: teaching introductory undergraduate computer architecture	NA	2018
Michael J Jipping:Steve Marlowe:Alexander Sherstov	A crucial part of the Computer Organization course is the design and analysis of hardware circuits. To teach this part of the course efficiently and to involve the entire class in the design of circuits, we have designed the SCAN system. Starting with a textual specification of a circuit, SCAN generates Java classes that can be used to simulate the way the circuit works. These circuits can be simulated locally or can join with other circuits to simulate larger machine function over a network. This paper describes the SCAN system, the Java classes it generates, and the way we use this in the Computer Organization class.	Using Java to design and test hardware circuits over a classroom network	NA:NA:NA	2018
Eric Roberts	NA	Session details: Computing Curricula 2001: implementing the recommendations	NA	2018
Eric Roberts:C. Fay Cover:Gordon Davies:Michael Schneider:Robert Sloan	In the fall of 1998, the ACM Education Board and the Educational Activities Board of the IEEE Computer Society appointed representatives to a joint task force to prepare Computing Curricula 2001 (CC2001). The CC2001 report is the current installment in a series of reports on the undergraduate computer science curriculum that began in 1968 and was then updated in 1978 and 1991 [1, 6]. The computer science volume of the CC2001 report was presented to the community in a series of three public drafts, followed by a final report approved by the governing boards of the ACM and the Computer Society. The purpose of this panel is to discuss strategies for implementing the recommendations of the final report in a wide variety of institutions.	Computing Curricula 2001 implementing the recommendations	NA:NA:NA:NA:NA	2018
Doris K. Lidtke	NA	Session details: Preparing for information systems accreditation	NA	2018
Doris K. Lidtke:David Feinstein:John Gorgone:Gayle Yaverbaum	The first pilot Information Systems accreditation visit is occurring in Fall 2001. Many programs will apply for IS accreditation the following year, the 2002-03 accreditation cycle. This session will discuss the process for preparing for an accreditation visit. The discussion will include a planning timeline, preparation of the self-study and arranging details for the on campus visit. Particular attention will be placed on the assessment section of the self-study, the important details of the self-study, and the preparation of the display materials needed for the on-site visit.	Preparing for Information Systems accreditation	NA:NA:NA:NA	2018
Mark Lovik	NA	Session details: Architecture simulators	NA	2018
Ewa Z. Bem	The project presented in this paper has been developed for an advanced undergraduate computer architecture course specifically aimed at non-engineering students. The project is intended to develop understanding of issues in modern computer architecture through empirical testing and experimentation, using sophisticated execution time simulation and industry standard benchmark programs. The students are lead through the functional design process of a superscalar pipelined processor step by step, in a series of carefully structured experiments. The experiments either provide direct support for the design decisions, or make students explore a specific concept. The main goal of the project is to give students a true insight into the current technology and the driving forces behind modern computer architecture, without the burden of engineering and implementation details.	Experiment-based project in undergraduate computer architecture	NA	2018
Gregory S. Wolffe:William Yurcik:Hugh Osborne:Mark A. Holliday	As the complexity and variety of computer system hardware increases, its suitability as a pedagogical tool in computer organization/architecture courses diminishes. As a consequence, many instructors are turning to simulators as teaching aids, often using valuable teaching/research time to construct them. Many of these simulators have been made freely available on the Internet, providing a useful and time-saving resource for other instructors. However, finding the right simulator for a particular course or topic can itself be a time-consuming process. The goal of this paper is to provide an easy-to-use survey of free and Internet-accessible computer system simulators as a resource for all instructors of computer organization and computer architecture courses.	Teaching computer organization/architecture with limited resources using simulators	NA:NA:NA:NA	2018
Paolo Rocchi	NA	Session details: Non-yet majors	NA	2018
Steve Cunningham	The beginning computer graphics course can teach much more than just computer graphics. It can also provide an excellent introduction to graphical problem solving and visual communication, and in so doing can be an excellent complement to other computer science courses that teach more analytical problem solving. This paper describes the graphical problem-solving and visual communication contexts and discusses how they can be supported by the beginning computer graphics course.	Graphical problem solving and visual communication in the beginning computer graphics course	NA	2018
Susan H. Rodger	We describe a course for non-majors that teaches computer science concepts and programming by creating simple animations and building 2D and 3D virtual worlds. Students work with scripting languages, an interactive programming environment, a programmable modeling environment, and finish with a simple programming language. Students work in pairs on computers during class. Each student creates a web portfolio to display their work.	Introducing computer science through animation and virtual worlds	NA	2018
Wayne Staats	NA	Session details: Teaching recursion	NA	2018
Carlisle E. George	This paper discusses how novices exposed to an execution model of recursion (similar to an expert's mental model and visualised in the EROSI tutor) performed on the task of constructing an embedded recursive solution to a given problem specification. Empirical observations showed that after using the EROSI tutor, novices employed a variety of methods during program construction including the use of their understanding of the execution process of recursion from their visualisation experiences. Using our findings we provide some useful suggestions to inform teaching practice. We conclude that when teaching about recursion: visualising program execution models can be a useful aid to program construction, by providing a mental framework for reasoning about the behaviour of program code fragments both before and after coding; visualisation methods may not always be a sufficient condition for developing programming skills; and the teaching of techniques for program construction may be necessary.	Using visualization to aid program construction tasks	NA	2018
Linda Stern:Lee Naish	We have developed a framework for pedagogically-oriented animations, designed to help students learn new algorithms. Recursive sorting and searching algorithms pose a particular challenge, as it can be difficult to find visual representations that help students develop a mental model of how the recursion proceeds. Relatively complex representations, such as thumbnail sketches or explicitly showing the function stack along with the data structure are appropriate for some algorithms, while simpler representations suffice for others. We have found it useful to classify recursive algorithms according to the way they navigate through a data structure and manipulate data items within it, sometimes with further subdivision according to the kind of recursion. Within each category there are common strategies for visual representation. While there may be no single, general way to represent recursive algorithms, classification is a useful guide to picking an appropriate strategy when animating recursive algorithms.	Visual representations for recursive algorithms	NA:NA	2018
Nancy Kinnersley	NA	Session details: Teaching internet technology	NA	2018
Kevin Treu	In the current Web-dominated computing environment, it is increasingly important that students learn the principles of Web-based application design. But this topic is so broad and includes so many different technologies that it is virtually impossible to design an effective class around the traditional lecture-based model. This paper describes a successful approach to teaching the subject that uses a seminar format and features faithful simulation of real world development processes, meaningful case studies and flexibility in terms of coverage as its central themes.	To teach the unteachable class: an experimental course in web-based application design	NA	2018
Heidi J. C. Ellis	The face of the student body in post-secondary degree programs in the United States is changing as an increasing number of students work full-time while attaining an advanced degree [13]. As the student population includes greater numbers of working professionals, a corresponding change in the instructional approaches used to educate the maturing student population is required. Knowles' theory of andragogy [9] is a set of principles that can be used to guide adult learning. This paper describes an application of andragogy to a graduate-level Web Technologies course comprised of working professional students. In this paper, the working professional is characterized and an educational philosophy based on the theory of andragogy is presented. The application of andragogy to a Web Technologies course is described and the results are discussed.	Andragogy in a web technologies course	NA	2018
Bill Manaris	NA	Session details: Incorporating Human-Computer Interaction into the undergraduate CS curriculum	NA	2018
Sarah Douglas:Marilyn Tremaine:Laura Leventhal:Craig E. Wills:Bill Manaris	This special session presents issues, approaches and experiences related to incorporating Human-Computer Interaction (HCI) into the undergraduate CS curriculum. Since the publication of the ACM SIGCHI Curricula for Human-Computer Interaction in 1992 [1], CS educators have tried various implementations of these guidelines. These implementations have been mainly offered as elective courses or modules within other courses, partly because the CS mainstream has been slow to recognize the importance of user interface design and HCI issues in software development.Today at least 50% of the code written for software applications is specific to the user interface. Average end-user expertise is continually dropping due to the proliferation of inexpensive computers available to the general public. Accordingly, user interface effectiveness has become increasingly important in software development, as the user interface has the power to "make or break" a software product. Through its emphasis on user-centered design, task analysis, and usability evaluation among other topics, an HCI course addresses more than 1/3 of the guidelines and imperatives of the ACM Code of Ethics [2]. This includes issues related to professional review, evaluations of computer systems, social responsibility and quality of life, and non-discrimination and dignity of end-users.CS educators have begun realizing the importance of incorporating HCI into the educational experience of students. Approximately 40% of the CAC-accredited degree programs include an HCI course at the upper level; however, this course is offered mostly as an elective (37% of degree programs) as opposed to a required course (3% of degree programs) [3]. Also, HCI is included as a core knowledge area in Computing Curricula 2001 [4, 5, 6]; unfortunately, only six hours have been devoted to it, as opposed to, say, 36 hours for architecture.	Incorporating Human-Computer Interaction into the undergraduate computer science curriculum	NA:NA:NA:NA:NA	2018
Barbara Boucher Owens:Rich Pattis:Dean Sanders:Jack Rehder:Chris Stephenson	NA	Session details: JAVA IDE's: why and how we use what we do	NA:NA:NA:NA:NA	2018
Barbara Boucher Owens:Rich Pattis:Chris Stephenson:Jack Rehder:Dean Sanders	This panel reflects the experiences of several faculty who each use a different Java Interactive Development Environment (IDE). Panelists will discuss the salient features of the IDEs that are used at their particular institutions. Each panelist will discuss system requirements, ease of installation, strengths and weaknesses of each IDE and pointers for successful adaptation to the classroom.	JAVA IDEs: why and how we use what we do	NA:NA:NA:NA:NA	2018
Jeffrey L. Johnson	NA	Session details: NSF graduate research fellowship program	NA	2018
Jeffrey Johnson	The objective of the Graduate Research Fellowship Program (GRFP) of the National Science Foundation (NSF) is to support the vitality of the human resource base of science, mathematics, and engineering in the United States and to reinforce its diversity. Oak Ridge Associated Universities (ORAU) manages the GRFP application and review processes under contract to NSF.	National Science Foundation Graduate Research Fellowship Program	NA	2018
Andy Lopez	NA	Session details: CS1	NA	2018
Mary Elaine Califf:Mary Goodwin	Testing students' programming skills remains a challenge for courses that teach beginning programming. This paper describes the introduction of a laboratory final examination into a CS1 course. We present our approach to a lab final and present initial evidence indicating the effectiveness of the lab final. We also describe the problems encountered and solutions to those problems, which may benefit others interested in instituting a similar exam.	Testing skills and knowledge: introducing a laboratory exam in CS1	NA:NA	2018
Hamzeh Roumani	We adopt the view that CS1 labs are not programming assignments, and that they should not be used for grading students or assessing their level of understanding. Instead, we think of them as teaching instruments that complement lectures by teaching the same material but in an exploratory fashion. But for labs to play this pedagogical role, certain conditions must be met in terms of how they are written and the complexity they expose. In this paper we present guidelines for designing the labs and the Java packages that must accompany them, with special emphasis on software engineering. Our own experience with implementing these guidelines, together with a few samples, is included.	Design guidelines for the lab component of objects-first CS1	NA	2018
M. Brian Blake	NA	Session details: Software engineering --- 1	NA	2018
A. T. Chamillard:Kim A. Braun	One of the largest challenges facing educators teaching undergraduate software engineering courses is providing the students with meaningful experiences they will find useful when they complete their undergraduate education. Those experiences should include all phases of the software development process, and to be as realistic as possible they should also include the uncertainty and continual change present in any real project. In addition, those experiences need to include working with others in a team, which can affect the morale of some students and also poses challenges to the professor when the time to assign grades arrives. In this paper we discuss how we have tailored the software engineering capstone sequence at the U.S. Air Force Academy to address these issues.	The software engineering capstone: structure and tradeoffs	NA:NA	2018
Robert E. Noonan:Richard H. Prosl	In this paper we explore frameworks for performing unit testing in Java. The vehicle for this exploration is a student-written, skeleton program developed for the Computer Graphics course. Our analysis of this one experiment leads us to speculate what benefits in program development and design might accrue by requiring students to unit test their own programs.	Unit testing frameworks	NA:NA	2018
Dennis Bouvier	NA	Session details: Human-computer interfaces/graphs	NA	2018
Jerry B. Weinberg:Mary L. Stephen	Empirical evidence shows the ability for computer technology to deliver on its promises of enhancing our quality of life relies on how well the application fits our understanding of how things work. Software designers need to apply methods that provide insights into the user's mental model of the application's target task and to invite the user to be an active participant in the design process. This paper reports on our efforts to design an HCI curriculum around ethnographic techniques of data gathering and paper prototyping. Initial results are presented that study the course's effects on student's attitudes regarding approaches to software design and their long term design behavior.	Participatory design in a human-computer interaction course: teaching ethnography methods to computer scientists	NA:NA	2018
Dejan Nikolic:Ching-Kuang Shene	This paper discusses the functionality of GraphicsMentor. GraphicsMentor permits a student to modify many parameters of the camera, objects, and light sources interactively, and to visualize the rendered result on-the-fly. It also supports basic keyframe animation. With GraphicsMentor, a student should be able to grasp the fundamentals of computer graphics quickly and easily in a learning-by-doing way.	GraphicsMentor: a tool for learning graphics fundamentals	NA:NA	2018
Roseann Krane:Harriette Kisilinsky:Alfred Thompson:Pat Phillips	NA	Session details: Using Visual Studio.Net in the classroom	NA:NA:NA:NA	2018
Roseann Krane:Alfred Thompson:Harriette Kisilinsky:Pat Phillips	The exciting promise of Microsoft.NET Technology inspired four teachers from high schools in Florida, New Hampshire, Wisconsin and California to collaborate using the new technology to teach high school programming. Follow their adventures through the school year of implementing a new technology, coordinating curriculum and partnering distant students. Learn from this panel the do's and don't's that lead to success for innovative teachers.	Using Visual Studio.Net in the classroom	NA:NA:NA:NA	2018
Max Hailperin:Linda Null:Mike Ciaraldi:Liz Adams:Ursula Wolz	NA	Session details: Rewrite cycles in CS courses: experience reports	NA:NA:NA:NA:NA	2018
Linda Null:Mike Ciaraldi:Liz Adams:Ursula Wolz:Max Hailperin	The generally accepted wisdom among teachers of English composition is that a "rewrite cycle" should be used as a teaching strategy. Rather than expecting students to extrapolate from the grading comments on paper N what they should do differently on paper N + 1, it has become conventional to ask for a rewrite of paper N itself. Of course, there are many variations on this theme. For example, peer review may supplement or replace some of the rounds of grading.The panelists will explore some of the ways they have applied this pedagogic strategy in computer science courses. Most obviously, when we have our students write papers, we have them do rewrites. However, some of us don't stop there, but rather also apply the same idea to the writing of programs or mathematical analyses. This encourages our students to do a high-quality job, and to feel that they have truly mastered a topic.Clearly, there are tradeoffs and difficulties, principally involving time. The panelists will also discuss this aspect, indicating how they have coped with the pitfalls, and indicating what has worked well, and what not so well. Ultimately, however, all the panelists are optimistic about the value of rewrite cycles.After the panelists share their experiences, there will be some time for discussion with the audience. Based on the interest this topic provoked on the sigcse.members mailing list, and in ensuing private email, we look forward to an active audience. We will also make materials from the session available at http://www.gustavus.edu/~max/rewrite/	Rewrite cycles in CS courses: experience reports	NA:NA:NA:NA:NA	2018
Kathleen Larson	NA	Session details: The object is objects	NA	2018
Joseph Bergin:Richard Kick:Judith Hromcik:Kathleen Larson	Teaching objects early requires different pedagogy. It isn't especially difficult, but it is different. Four presenters will explain and demonstrate different methodologies for introducing objects early in introductory computer science courses. The propose is to provide teachers with ideas that they can use or modify to successfully introduce objects and classes to novice programmers.	The object is objects	NA:NA:NA:NA	2018
Anthony Joseph	NA	Session details: Managing large classes	NA	2018
A. T. Chamillard:Laurence D. Merkle	Many colleges and universities throughout the world offer introductory computer science courses with significant student enrollment. There are certainly plenty of challenges for the administrators of those courses; ensuring equitable grading across different instructors and offering times for the course, accomplishing the massive material preparation and other logistical tasks required for the course, grading the large number of assessments associated with the large enrollment, and managing the numerous instructors in the course are a few examples. This paper discusses the processes we have implemented to address these and other management challenges at the U.S. Air Force Academy.	Management challenges in a large introductory computer science course	NA:NA	2018
Steven A. Wolfman	Pedagogy of large lecture classes has traditionally focussed on deemphasizing the problems their size creates. This approach has yielded valuable practical advice for instructors. However, this paper argues that there are pedagogical advantages to the large lecture format and that exploiting these advantages can further improve classroom instruction. I present some advantages of large classes and anecdotes that demonstrate how to exploit these advantages.	Making lemonade: exploring the bright side of large lecture classes	NA	2018
Ellen Walker	NA	Session details: Database	NA	2018
Thomas K. Moore	Most database systems courses concentrate on teaching the principles of relational databases. An alternative approach is one in which those principles are taught within the context of emerging enterprise systems. A description is given in this paper of a course that has been successfully taught at the undergraduate level that uses the Java 2 Enterprise Edition (J2EE) model, and its services, to illustrate basic database principles.	Bringing the enterprise into a database systems course	NA	2018
Suzanne W. Dietrich:Susan D. Urban:Ion Kyriakides	This paper describes the design and functionality of courseware developed to demonstrate the JDBC API. The courseware is used in an advanced undergraduate database course that emphasizes the use of Web access to database systems. The JDBC courseware is written using Java Servlets and Java Server Pages, allowing the user to view the metadata associated with a database, to view and browse the information in a database according to the database metadata, and to query and/or manipulate data using SQL statements. The advantage of the courseware is that it demonstrates the main functionality of the JDBC API in an application-independent manner. The courseware can access any ODBC-compliant database, emphasizing the generality of the JDBC API and helping students understand how JDBC can be used to query the metadata of the database as well as the database contents.	JDBC demonstration courseware using Servlets and Java Server Pages	NA:NA:NA	2018
Kay Wijekumar	NA	Session details: Software engineering --- 2	NA	2018
Michael H. Goldwasser	We discuss our experiences in which students of a programming course were asked to submit both an implementation as well as a test set. A portion of a student's grade was then devoted both to the validity of a student's program on others' test sets, as well as how that student's test set performed in uncovering flaws in others' programs. The advantages are many, as this introduces implicit principles of software testing together with a bit of fun competition. The major complication is that such an all-pairs execution of tests grows quadratically with the number of participants, necessitating a fully automated scoring system.	A gimmick to integrate software testing throughout the curriculum	NA	2018
Amer Diwan:William M. Waite:Michele H. Jackson	In industry, programmers work in groups to design and implement substantial pieces of software. In contrast, most programs that students write in classes are toy programs involving little or no group work. To address this discrepancy, we have developed a software infrastructure that aims to teach group work skills to students in computer science courses and also enables students to tackle larger and more significant projects. We are in the process of deploying this infrastructure in a three course sequence at the University of Colorado: Data Structures---Programming Languages---Compiler Construction.	An infrastructure for teaching skills for group decision making and problem solving in programming projects	NA:NA:NA	2018
Joseph D. Sloan:Randy K. Smith:Andy Lopez:Dick Mowe	NA	Session details: Networking CS: beyond the first course	NA:NA:NA:NA	2018
Joseph D. Sloan:Andy Lopez:Randy K. Smith:Dick Mowe	We face a need for undergraduate instruction in networking and telecommunications. The Computing Research Association has identified both web-specialists and network-designers as being among the seven occupations where there is a clearly established shortage of professionals [2]. Even with the recent softening of the economy, individuals in the networking and telecommunications field are highly sought after as attested to by surveys such as RHIConsulting's® recent survey of 1400 CIOs nationwide [4]. It is imperative to ask how these individuals will be educated.Historically, telecommunications has been hardware oriented. Consequently, it has been in the domain of Electrical Engineering. The ongoing convergence of communications and computing, however, has drastically shifted the focus of telecommunications and considerably broadened the field. Many of the new areas of telecommunications will not fit neatly into old categories. Some are much closer to Computer Science than Electrical Engineering.Schools wishing to address this need must begin by deciding what should be taught. For two-year schools, the ACM has issued guidelines for several programs [1]. For four-year institutions, the curriculum remains an open question. The primary guidelines for four-year institutions are the dated 1991 Computing Curricula [5] and the emerging Computing Curricula 2001 Computer Science [3]. As the goal of these documents is to define the core needs of the CS discipline, understandably, neither goes beyond outlining an introductory course in networking. Schools interesting in educating professionals in networking and telecommunications will need to go beyond this first course. A key question would seem, then, in teaching networking, what should be taught beyond the first course?Our panel presents three quite different positions---that the basic need can be met with a single well-designed course, that a few advanced courses will meet the need, and that a collection of courses constituting a minor is called for.	Networking CS: beyond the first course	NA:NA:NA:NA	2018
Joe Hummel:Jean Mehta:Floyd Johnson:Gail Miles	NA	Session details: Using Visual Basic in the CS curriculum	NA:NA:NA:NA	2018
Joe Hummel:Jean Mehta	Visual Basic is currently the most popular programming language in the United States. And yet, it is rarely found in traditional Computer Science (and related) curriculums. Perhaps this is due to the fact that VB is not truly object-oriented, but object-based. Or perhaps because VB is not an open language, instead supported only by tools from Microsoft Corporation and available only on the Windows platform. Or perhaps it is simply Microsoft itself, with its monopolistic tendencies.This panel will argue that Visual Basic --- while it should not replace the use of more traditional languages such as C++, Java, or Scheme --- fulfills an important role in modern CS and related curriculums. The panelists will highlight a few of the cases in which they have found VB to be exceedingly useful, and discuss their rationale for choosing VB over other languages.	Using Visual Basic in the CS curriculum	NA:NA	2018
Julie Zelenski	NA	Session details: How to develop and grade an exam for 20,000 students (or maybe just 200 or 20)	NA	2018
Fran Hunt:Joe Kmoch:Chris Nevison:Susan Rodger:Julie Zelenski	Although our students may spend only a class period working one of our exams, as instructors, we invest many more hours crafting the questions and grading their responses. How do we ensure our time is well-spent? What qualities contribute to an effective exam? How can we guarantee a fair evaluation of student performance?With an 18-year track record delivering a nationwide exam, the Advanced Placement Computer Science (AP CS) program has a wealth of experience in the area of exam development and administration. This special session will bring together members of the AP CS Development Committee and the Educational Testing Service to share some of their insights into how the experts do it.AP teachers will learn more about the exam for which they are preparing their students. College faculty will gain a better understanding of the metrics provided by the AP exam. All instructors will come away with practical and transferable ideas for successful exam tactics.	How to develop and grade an exam for 20,000 students (or maybe just 200 or 20)	NA:NA:NA:NA:NA	2018
Curtis Carver	NA	Session details: Puzzles	NA	2018
Richard Rasala:Jeff Raab:Viera K. Proulx	This article will describe the SIGCSE 2001 Maze Demo program that may be used as a CS2 laboratory exercise on traversal algorithms. The article will also describe the object-oriented design of the program and the Java Power Tools that were used to enable rapid development of its graphical user interface. Finally, the quality of the program and the speed of its development shows that it is now practical to teach freshmen using full graphical user interfaces rather than interfaces that use the console or a small restricted set of interface widgets.	The SIGCSE 2001 Maze Demonstration program	NA:NA:NA	2018
Anany Levitin:Mary-Angela Papalaskari	This paper advocates a wider use of puzzles and puzzle-like problems in teaching design and analysis of algorithms. It discusses a variety of puzzles and classifies them according to the general algorithm design techniques. Pedagogic issues are explored.	Using puzzles in teaching algorithms	NA:NA	2018
John Fendrich	NA	Session details: Object oriented - 2	NA	2018
Michael R. Wick:Daniel E. Stevenson:Andrew T. Phillips	Inheritance is a central topic in most introductory object-oriented programming courses and frequently the most challenging for students to comprehend. The difficulties students experience often center around the rather complicated and obscure dynamic method invocation algorithms used in languages like C++ and Java. We present a visual model for teaching inheritance that captures the essential aspects of these algorithms yet is easy for students to comprehend and apply.	Using an environment chain model to teach inheritance in C++	NA:NA:NA	2018
Paolo Bucci:Wayne Heym:Timothy J. Long:Bruce W. Weide	Currently there is a serious conceptual and technical gap between ideas emphasized in object-oriented programming and ideas as taught in algorithms courses. We suggest both a paradigm for "re-expressing" algorithms in terms of classes and objects, and a set of criteria relative to which the quality of such re-expressions can be evaluated. A detailed example is provided for re-expressing the algorithmic idea of sorting.	Algorithms and object-oriented programming: bridging the gap	NA:NA:NA:NA	2018
Ryan McFall	NA	Session details: Distance learning	NA	2018
David Emory:Roberto Tamassia	This paper describes a Java-based distance-education tool, called the Environment for Remote Programming Assignments in Java (JERPA), for use in computer science courses with Java programming assignments. JERPA reduces the demand on the university's computing infrastructure while providing instructors with an easy system to deploy and distribute assignments, and allowing students greater flexibility as they work on the assignments. JERPA yields immediate advantages to traditional on-campus CS courses and provides a key functionality to programming courses offered in a distance-education setting.	JERPA: a distance-learning environment for introductory Java programming courses	NA:NA	2018
Barry L. Kurtz:Dee Parks:Eric Nicholson	Our Internet-based project is developing two courses to demonstrate the viability of a virtual classroom environment where the on-line student can interact both with the instructor and "virtual classmates." Other course components include a hyperlinked textbook and laboratory experiences that stress learning-by-doing. We use Java on both the server side and the client side to support the classroom interaction and the laboratory activities. This paper illustrates some of the particular software technologies used. We discuss problems encountered, solutions found, and the ongoing development of materials.	Effective internet education: a progress report	NA:NA:NA	2018
Marty J. Wolf:Kevin Bowyer:Don Gotterbarn:Keith Miller	NA	Session details: Open source software: intellectual challenges to the status quo	NA:NA:NA:NA	2018
Marty J. Wolf:Kevin Bowyer:Don Gotterbarn:Keith Miller	Open source software is making a large impact on many aspects of society including the business community, the computing industry, the entertainment industry and higher education. The computer science education community has been quiet about issues of open source versus closed source and the role of open source code in the advancement of information technology. A survey of recent issues of SIGCSE Bulletin and SIGCSE conference proceedings shows little attention to the role open source software should play in computer science education. We are here to raise the question: "What are the social and ethical responsibilities of computer science faculty regarding open source software?"One set of issues concerns the use of open source software in teaching and the use of open source development models in the teaching of software development. Some basic questions that arise include "Should analysis of open source (and possible contributions to it) be the subject of class assignments?" and "Should open source software development models be taught?"A second set of issues concerns the use of open source software in support of teaching (e.g., using Linux as your standard platform). Some basic questions that arise include "Should we use open source software to support teaching?" and "Are these faculty ethically obligated to make contributions to the open source software base?"In this panel we will identify many of the parties involved in the ethical and social issues surrounding the use of open source in teaching and in the support of teaching, and we will identify the rights and responsibilities we, as faculty, have to the various parties. This panel will initiate a discussion that will identify additional parties and our further professional obligations.	Open source software: intellectual challenges to the status quo	NA:NA:NA:NA	2018
Nick Parlante	NA	Session details: Nifty assignments	NA	2018
Nick Parlante:John K. Estell:David Reed:David Levine:Dan Garcia:Julie Zelenski	Creating assignments is a difficult and time consuming part of teaching Computer Science. Nifty Assignments is a forum, operating at a very practical level, to promote the sharing of assignment ideas and assignment materials.Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. For more detail, each assignment has its own web page with more detailed information and assignment materials such as handouts and data files to aid the adoption of the assignment. Information on participating in Nifty Assignments as well as all the assignment pages are available from our central page… http://cse.stanford.edu/nifty/	Nifty assignments	NA:NA:NA:NA:NA:NA	2018
Thomas S. Penninton	NA	Session details: Algorithms	NA	2018
Ian Sanders	In this paper I argue that empirical analysis of algorithms is important but also difficult and requires a place in our curricula. I discuss how I planned to include coverage of this topic through lectures, discussions and practical work and the approach that I took in the Honours Analysis of Algorithms topic at the University of the Witwatersrand in 2001. I then discuss the results of a survey conducted on the Honours class and suggest some improvements for 2002.	Teaching empirical analysis of algorithms	NA	2018
James B. Fenwick:Cindy Norris:James Wilkes	In traditional computer science curricula, students view program implementation as the end product and not the means to obtaining some further result. All too often students complete an implementation at the last minute, perform a minimal amount of testing and call the assignment done! This paper discusses an approach we have taken in our courses to have students use and develop programs as part of a scientific inquiry. In addition to causing students to perform more thorough testing, our approach also improves empirical and critical thinking skills.	Scientific experimentation via the matching game	NA:NA:NA	2018
David Ginat	The most common decomposition perspective in computer science problem-solving is 'top-down', in which the problem at hand is divided into 'smaller' sub-problems. Yet there are more decomposition perspectives. In this paper we illuminate three additional perspectives and demonstrate their didactic value. The presentation is displayed in an apprenticeship manner, through different approaches for solving an intriguing algorithmic challenge - the problem of finding majority. Each of the three perspectives is tied to a variety of algorithmic problems and solutions, and elaborated as a pedagogical tool for teaching algorithms.	On varying perspectives of problem decomposition	NA	2018
Soe Than	NA	Session details: Programming languages	NA	2018
W. Douglas Maurer	The programming language concepts which ought to be presented in the comparative programming languages course (either graduate or undergraduate) are all covered by choosing C++, Java, Perl, and Python as the languages to be compared. These include dynamic typing, object orientation, multiple inheritance, interpreters and compilers, keyword and default parameters, generics, operator overloading, complex numbers, universal hierarchies, exceptions, and garbage collection. We describe such a course, which we have given.	The comparative programming languages course: a new chain of development	NA	2018
Saumya Debray	Compiler Design courses are a common component of most modern Computer Science undergraduate curricula. At the same time, however, compiler design has become a highly specialized topic, and it is not clear that a significant number of Computer Science students will find themselves designing compilers professionally. This paper argues that the principles, techniques, and tools discussed in compiler design courses are nevertheless applicable to a wide variety of situations that would generally not be considered to be compiler design. Generalizing the content of compiler design courses to emphasize this broad applicability can make them more relevant to students.	Making compiler design relevant for students who will (most likely) never design a compiler	NA	2018
Allen B. Tucker:Robert E. Noonan	In our approach to the Programming Languages course, formal models are integrated as a thread that pervades the course, rather than as a one of many topics that is introduced and then dropped. In this paper we present a simplified version of the formal semantics used. We then show how this model is implemented using the object-oriented, functional and logic paradigms.	Integrating formal models into the programming languages course	NA:NA	2018
Mario Guimaraes	NA	Session details: Concurrency	NA	2018
Steven Robbins	This paper examines the use of a simulator to explore process interaction in Unix. The simulator allows instructors to trace through a variety of programs and to show how the processes and pipes are connected. Students can create C language programs and see how changes in their code or changes in process scheduling affect the configuration of the processes and pipes as well as the output of the program. Students can also see the consequences of not protecting critical sections in an executing program. The simulator is flexible enough to allow the creation of process fans, chains and trees as well as unidirectional and bidirectional rings. The program is written in Java and can be run as a standalone application or as an applet from a browser.	Exploration of process interaction in operating systems: a pipe-fork simulator	NA	2018
Kenneth A. Reek	This paper discusses differences in the semantics of various semaphore implementations and their ramifications in developing solutions to synchronization problems. An approach is described to insulate students from these differences and simplify the task of teaching semaphores.	The well-tempered semaphore: theme with variations	NA	2018
Steve Carr:Changpeng Fang:Tim Jozwowski:Jean Mayo:Ching-Kuang Shene	A number of communication libraries have been written to support concurrent programming. For a variety of reasons, these libraries generally are not well-suited for use in undergraduate courses. We have written a communication library uniquely tailored to an academic environment. The library provides two levels of communication abstraction (topology and channel) and supports communication among threads, processes on the same machine, and processes on different machines, via a unified interface. The routines facilitate controlled message loss along channels and can be integrated with an existing graphical tool that supports visualization of the communication that occurs. An editor has been developed for automatic code generation for arbitrary topologies via a graphical interface. All these tools run over Solaris, Linux, and Windows.	A communication library to support concurrent programming courses	NA:NA:NA:NA:NA	2018
William Oblitey:Paul Mullins:James Wolfe:Michael Fry:Erik Wynters:William Calhoun:Robert Montante	NA	Session details: Integrating security concepts into existing computing courses	NA:NA:NA:NA:NA:NA:NA	2018
Paul Mullins:Jim Wolfe:Michael Fry:Erik Wynters:William Calhoun:Robert Montante:William Oblitey	Recently, computer security has come to the forefront of public awareness. With the onslaught of worms such as Code Red, national (U.S.) concern has increased about cyber terrorism and the information infrastructure. One educational response has been the emergence of a number of computer security degree programs - at the undergraduate level, e.g., East Stroudsburg State University of PA, and at the graduate level, e.g., the Heinz School at Carnegie-Mellon University.The panel members were all participants in the Cyber security faculty development Workshop[1] held at Indiana University of PA in August, 2001. Among the goals of the workshop was the development of courses that would teach the theory and application of security, including the use of specially designed (quarantined) "attack" and "defend" computer labs. Additional goals include development of modules related to security for CS core courses, and an interdisciplinary minor for Computer Science and Criminology majors.It was the consensus of the panel participants that many institutions would be unable to implement special degree programs or tracks, and, in a significant number of cases, might be unable to immediately implement even one specialized course. Yet, all the participants also believed strongly that security-related content in our computer courses can, and should, be improved. Even if no security-based courses are added, major and non-major courses in computer science, CIS, etc., can do a better job of raising awareness of threats, vulnerabilities, and risks.Each panel member will address a specific course or sub discipline and describe how security was infused or added to the current curriculum. The intent is to foster discussion regarding appropriateness and pedagogy while relating individual experiences, successes and failures. Audience and panel members will be encouraged to discuss the relative merits of this approach.	Panel on integrating security concepts into existing computer courses	NA:NA:NA:NA:NA:NA:NA	2018
Stuart Reges	NA	Session details: Industry in the ivory tower	NA	2018
Stuart Reges	The intent of this forum is to generate a really lively discussion on the gamut of our relationship - as computer science educators - to industry.How dependent are we/should we be on specific industry software and platforms? (Many examples come to mind - Microsoft Visual Studio.NET, Red Hat Linux, C#, Sun's version of Java.)How obligated are we to jump on board the newest upgraded software version of whatever we might be using?How does our desire for good job placement of our graduates square with our oft-repeated claim that we are educators, not trainers?Pursuing this issue of "where do we fall on the spectrum between training and education," what to do about all these industry certification programs - Cisco, Novell, Oracle, Microsoft. Do we teach these curricula? Do we give credit to students who take it, say at a community college, and then transfer?What about a service course in, say, Photoshop? Is this college-level material?Do opportunities for summer internships or research projects in an industry setting place some special obligations on us with respect to that company?	SIGCSE 2002 forum: industry in the ivory tower	NA	2018
Henry Walker	NA	Session details: SIGCSE committees: a new initiative to support computing education through SIGCSE-member involvement	NA	2018
Henry Walker	NA	SIGCSE 2002 forum: introducing SIGCSE committees: a new initiative to support computing education through SIGCSE-member involvement	NA	2018
Thomas B. Hilburn	NA	Session details: Teaching a software project course using the team software process	NA	2018
Robert Cannon:Thomas B. Hilburn:Jorge Diaz-Herrera	The tutorial is intended for faculty that will be teaching or have taught a software project course. It provides attendees with ideas, concepts, guidelines and experiences for teaching such a course using the introductory Team Software Process.	Teaching a software project course using the team software process	NA:NA:NA	2018
Tom Naps	NA	Session details: Theory	NA	2018
Michael T. Grinder:Seong B. Kim:Teresa L. Lutey:Rockford J. Ross:Kathleen F. Walsh	Can students love to learn the theory of computing? This topic is, after all, probably the most challenging in the computer science curriculum. The academic structure in the United States from grade school on is not particularly good at preparing students to deal with mathematical abstractions in any case, and the kinds of abstractions that permeate the theory of computing are unlike any encountered in other math courses: strings, formal languages, and models of computation. Furthermore, there is often little correlation provided in a standard theory textbook between the theory and the real world of software development; students wonder just what the point of the course is. It is no surprise, then, that most students struggle with learning the theory of computing.It is tempting to forego teaching the theory of computing, since students not only struggle with it, but they often retain so little of it. This would be a mistake. Done properly, the theory course puts the "science" into computer science, giving aspiring practitioners a basis for understanding the fundamental laws that govern their discipline: there are problems that cannot be solved, there are intractable problems, there are limitations on the efficiency of the solutions to problems, and so on. Students not only need to know these fundamental truths about their field, but they also need to be able to apply this knowledge to their everyday work of programming.In this paper we describe recent advances in our long-term efforts in the Webworks Laboratory at Montana State University to make the theory of computing accessible to students through active learning modules designed for use on the web. While we won't be so bold as to say that students will actually love to learn the theory of computing as a result of having access to these modules, we can confidently say from our own experience that they will find learning the theory to be more fun. And that, we would all agree, is a big step towards helping students learn.	Loving to learn theory: active learning modules for the theory of computing	NA:NA:NA:NA:NA	2018
Jennifer McDonald	This paper will present the Interactive Pushdown Automata Animation for use in an Automata Theory class. It will present the features of the IPAA as well as the algorithm and data model used. Finally, this article will outline the necessary pieces of a good visual tool and show how they are implemented in the IPAA.	Interactive Pushdown Automata Animation	NA	2018
Stacy Lukins:Alan Levicki:Jennifer Burg	This paper describes a tutorial program that serves a double role as an educational tool and a research environment. First, it introduces students to fundamental concepts of propositional logic and gives them practice with theorem proving. Secondly, the program provides an environment in which we can track student learning, explore cognitive issues of human problem solving, and investigate the possibilities of interactive human/machine learning. We have tested the tutorial program on two groups of Discrete Mathematics students and report the results of our assessment. We also discuss the contributions and future directions of our research in interactive human/machine learning.	A tutorial program for propositional logic with human/computer interactive learning	NA:NA:NA	2018
Alyce Brady	NA	Session details: CS2	NA	2018
Tia Newhall:Lisa Meeden	We present our experience using a large, real-world application as a course project for the second half of the semester of a CS2 course. Our primary goal for the project was to create an engaging application that incorporated most of the key data structures and algorithms introduced in the course. Specifically, the project uses binary search trees, priority queues, hash tables, and graphs. The project consisted of four parts combined to build an integrated web browser and search engine in Java. A key benefit of an incremental, long-term project of this type is that students quickly learn that their initial design and implementation decisions have a significant impact on the eventual extensibility and performance of their software. This provides numerous opportunities for students to recognize the importance of software engineering techniques and complexity analysis in the development of a successful application. We present students' responses to the project which show that they overwhelmingly enjoyed the project and felt that it helped them to see how the data structures and algorithms discussed in the course are used in real software.	A comprehensive project for CS2: combining key data structures and algorithms into an integrated web browser and search engine	NA:NA	2018
Kay A. Robbins:Catherine Sauls Key:Keith Dickinson	Case studies are widely used in business and medicine to help students learn from the successes and failures of practitioners in the field. This paper discusses the potential benefits of case studies in computer science and how case studies differ from projects. We describe our preliminary experience with developing a network simulation case study for an object-oriented CS2 course and present some of ideas for teaching such a case study through close coupling of lectures with laboratories. The teaching materials for this case study are available on the web.	Integrating a simulation case study into CS2: developing design, empirical and analysis skills	NA:NA:NA	2018
Alan Fekete	In recent years, the teaching of data structures has been revolutionised by object-oriented languages, especially Java, in which the concept of each Abstract Data Type is made explicit as an Interface. The existing texts, though, each use a single set of classes: sometimes a standard library such as Sun's SDK, but in other cases these form a library unique to the text. In contrast, this paper advocates an approach which seeks to prepare students for the common situation for software developers, who are asked to regularly adjust to a library they are unfamiliar with. The teaching we describe openly acknowledges the existence of many libraries. A single concept such as Stack is expressed in subtly different ways in each library; these differences are made explicit for the student. We also show examples of assessment tasks that can accompany the teaching.	Teaching data structures with multiple collection class libraries	NA	2018
Kenneth Johnson	NA	Session details: Networks	NA	2018
William Shay	This paper introduces a more general client/server example than is typically described. Whereas many client/server examples often involve communication between two C programs or two Java programs, this paper describes a program demo containing two clients (one in C and one in Java) and two servers (one in C and one in Java). Furthermore, either client is capable of connecting to and downloading a file from either server using a socket connection over the TCP/IP protocol. None of these programs make any assumptions regarding what language or platform supports the program at the remote end.	A multiplatform/multilanguage client/server project	NA	2018
Greg Gagne	This paper covers the use of Java and its API for developing networking programs in an undergraduate computer networks class. Through the use of TCP and UDP sockets provided in the java.net package, students are able to write several client-server applications such as web and mail servers and a chat room. Additionally, the java.rmi API provides a library for invoking methods on remote objects, similar to remote procedure calls. Remote method invocation (RMI) is used to write a distributed version of the Producer-Consumer problem.	To java.net and beyond: teaching networking concepts using the Java networking API	NA	2018
Joel Adams:David Vos	A Beowulf cluster is a MIMD multiprocessor built from commodity off-the-shelf personal computers connected via a dedicated network, running free open-source software. Such a cluster can provide a supercomputer's performance at a small fraction of one's cost. For small colleges and universities, the relatively low cost of a Beowulf cluster makes it an attractive alternative to a commercial supercomputer. This paper details our experience building a Beowulf cluster at a four-year comprehensive college.	Small-college supercomputing: building a Beowulf cluster at a comprehensive college	NA:NA	2018
James W. McGuffe:Herbert L. Dershem:Linda B. Lankewicz:Gary Lewandowski:Dian Lopez:Oberta A. Slotterbeck	NA	Session details: Managing undergraduate CS research	NA:NA:NA:NA:NA:NA	2018
Eric Roberts	According to prevailing labor projections, the demand for well-trained computer scientists and software developers will continue to grow in the coming years, in spite of the dot-com collapse. For the most part, the people who fill these positions -- and particularly those that require high levels of creativity and independence of thought -- will be trained by colleges and universities. Unfortunately, many highly talented students never investigate computer science as an academic option, either because they have not been exposed to what computing has to offer or because they feel themselves outside of the traditional computer science milieu. As computer science teachers, we have a collective responsibility to ensure that this discipline remains open to the widest possible range of students. In this talk, I will describe several strategies and tactics for achieving that goal.	Keynote address: Expanding the audience for computer science	NA	2018
Allan Fisher:Jane Margolis	We recount some of the most significant and colorful findings of our four-year study of gender issues in the undergraduate computer science program at Carnegie Mellon. We also discuss the subsequent dramatic increase in the number of women in the program. We conclude with recommendations for the most generally useful and effective actions departments can take to attract and retain female students.	Unlocking the clubhouse: women in computing	NA:NA	2018
Nancy Kinnersley	NA	Session details: Algorithms	NA	2018
Owen Astrachan	Text books, including books for general audiences, invariably mention bubble sort in discussions of elementary sorting algorithms. We trace the history of bubble sort, its popularity, and its endurance in the face of pedagogical assertions that code and algorithmic examples used in early courses should be of high quality and adhere to established best practices. This paper is more an historical analysis than a philosophical treatise for the exclusion of bubble sort from books and courses. However, sentiments for exclusion are supported by Knuth [17], "In short, the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems." Although bubble sort may not be a best practice sort, perhaps the weight of history is more than enough to compensate and provide for its longevity.	Bubble sort: an archaeological algorithmic analysis	NA	2018
Teresa Hübscher-Younger:N. Hari Narayanan	This research began by investigating the literature on student learning from algorithm animations and conducting experimental studies of an algorithm visualization system. The results led us to develop CAROUSEL (Collaborative Algorithm Representations Of Undergraduates for Self-Enhanced Learning), using which students created expository representations of algorithms, shared their representations with others, evaluated each other's representations and discussed them. The system and the activities of representation creation, sharing, evaluation and discussion that it supports were then studied in three experiments, which are summarized. They show a significant positive relationship between these constructive and collaborative activities and algorithm learning, which suggests that this is a beneficial pedagogical approach for introductory courses on algorithms.	Constructive and collaborative learning of algorithms	NA:NA	2018
David Ginat	Educators' approach towards their students' mistakes can have significant impact on the students. This paper presents a rather less considered approach of teaching by capitalizing on mistakes. In the course of teaching our students algorithm design, we noticed the phenomenon of students' "over-reliance" on intuition rather than rigor. In particular, we noticed a repeated erroneous trend of turning to intuitive, but inadequate greedy algorithmic solutions. We capitalized on the student errors for influencing their attitude and beliefs regarding intuition and rigor. The paper displays the student errors and our capitalization-on-errors approach, with colorful and novel algorithmic tasks.	The greedy trap and learning from mistakes	NA	2018
Catherine Ricardo	NA	Session details: Database	NA	2018
Sub Ramakrishnan:Emeka Nwosu	In this paper, we discuss a software tool we have developed for use in undergraduate DBMS courses, that provides: (i) a web-enabled database set up and administration facility for faculty use, and (ii) web-based database projects that may be assigned to students.We discuss the motivation for our work and the objectives underlying the design of the tool. The significance of our work is two-fold. First, it should help the instructor in the set up, management, and monitoring of student database accounts. Second, it provides the students with a feel for the organization and use of contemporary web-enabled database applications.	DBMS course: web based database administration tool and class projects	NA:NA	2018
Susan D. Urban:Suzanne W. Dietrich	This paper illustrates the manner in which UML can be used to study mappings to different types of database systems. After introducing UML through a comparison to the EER model, UML diagrams are used to teach different approaches for mapping conceptual designs to the relational model. As we cover object-oriented and object-relational database systems, different features of UML are used over the same enterprise example to help students understand mapping alternatives for each model. Students are required to compare and contrast the mappings in each model as part of the learning process. For object-oriented and object-relational database systems, we address mappings to the ODMG and SQL99 standards in addition to specific commercial implementations.	Using UML class diagrams for a comparative analysis of relational, object-oriented, and object-relational database mappings	NA:NA	2018
Paul J. Wagner:Thomas K. Moore	eXtensible Markup Language (XML) is becoming a standard tool for data storage and transmission. Integrating XML into current database systems courses provides students with an understanding of the growing role of XML in data management and manipulation. We have successfully designed and implemented several exercises for a database systems course in the context of a real-world software project that educate students as to how XML relates to current Database Systems course topics.	Integrating XML into a database systems course	NA:NA	2018
Carl Alphonce	NA	Session details: Outcomes assessment	NA	2018
Kathryn E. Sanders:Robert McCartney	In this paper, we investigate the question of what assessment tools are being used in practice by United States computing programs and what the faculty doing the assessment think of the tools and of the assessment process in general. We report on the results of two surveys, distributed to the SIGCSE mailing list and to the chairs of all ABET-CAC accredited computer science programs. We found that both parts of these surveys--the multiple-choice sections and the comments--provided some interesting insights into program assessment from the perspective of those responsible for collecting and using the information.	Program assessment tools in computer science: a report from the trenches	NA:NA	2018
Donald B. Crouch:Leslie Schwartzman	Outcome-based learning, as embraced by the CAC criteria for accrediting computing programs, requires by its very nature the active, on-going participation of faculty in the assessment process. This paper will describe a means of involving faculty at the earliest stages of development in a comprehensive assessment plan without making undue demands of their time or fostering the anxiety that oftentimes accompanies implementation of the assessment process. The proposed process takes advantage of the flexibility of the CAC criteria.	Computer science accreditation: the advantages of being different	NA:NA	2018
Dick K. Blandford:Deborah J. Hwang	Assessment of ABET/CAC accredited programs can become a burdensome task that generates lots of paper, takes hours of faculty time, and produces little in the way of meaningful results that can be used as a basis for improving a program. The result is often lack of active participation by faculty and an increase in negative attitudes that tend to further erode assessment effectiveness. This is a serious problem at small schools that cannot afford the luxury of full time assessment personnel and are totally dependent on faculty for the assessment process. This paper presents five assessment methods that require a minimum of paper-work and faculty time but are nevertheless effective in presenting an accurate assessment of a program's objectives. The five methods presented are: 1. the Assessment Day concept; 2. personal class assessment; 3. sampled student work; 4. faculty interview groups; and 5. student focus groups.	Five easy but effective assessment methods	NA:NA	2018
Elizabeth S. Adams:Orit Hazzan:Hrafn Loftsson:Alison Young	NA	International perspective of women and computer science	NA:NA:NA:NA	2018
Pam Lawhead:Michaele E. Duncan:Constance G. Bland:Michael Goldweber:Madeleine Schep:David J. Barnes	NA	Legos, Java and programming assignments for CS1	NA:NA:NA:NA:NA:NA	2018
Kim Kihlstrom	NA	Session details: Gender issues	NA	2018
Sylvia Beyer:Kristina Rynes:Julie Perrault:Kelly Hay:Susan Haller	We examined gender differences and differences in Computer Science (CS) majors vs. non-majors in ability in quantitative areas, educational goals and interests, experience with computers, stereotypes and knowledge about CS, confidence, personality, support and encouragement, stress and financial issues, gender discrimination, and attitudes toward the academic environment in CS. What is unique to this investigation is its multivariate nature. While others have studied these variables in isolation, our study looks at them collectively to identify important interactions among variables. This will eventually allow us to identify a profile of women who pursue careers in CS. The findings are reported in detail below. Particularly noteworthy is that men had more confidence in using computers than did women even when statistically controlling quantitative ability. In fact, female CS majors had less computer confidence than did male non-majors.	Gender differences in computer science students	NA:NA:NA:NA:NA	2018
Ginger Holmes Rowell:Diane G. Perhac:Judith A. Hankins:Brenda C. Parker:Chrisila C. Pettey:Judith M. Iriarte-Gross	Computer-related gender differences are examined using survey responses from 651 college students. Issues studied include gender differences regarding interest and enjoyment of both using a computer and computer programming. Interesting gender differences with implications for teaching are examined for the groups (family, teachers, friends, others) that have the most influence on students' interest in computers. Traditional areas such as confidence, career understanding and social bias are also discussed. Preliminary results for a small sample of technology majors indicate that computer majors have unique interests and attitudes compared to other science majors.	Computer-related gender differences	NA:NA:NA:NA:NA:NA	2018
Joel C. Adams:Vimala Bauer:Shakuntala Baichoo	The gender imbalance in computer science in the U.S. and other countries has attracted much attention. This paper presents - for comparison - the computing-related gender ratios in Mauritius, a developing country in the Indian Ocean. These ratios suggest that far from being a universal phenomenon, the gender imbalance in the U.S. is a cultural problem.	An expanding pipeline: gender in mauritius	NA:NA:NA	2018
Mohammad Neilforoshan	NA	Session details: Architecture	NA	2018
Ewa Z. Bem:Luke Petelczyc	We developed the project presented in this paper for an undergraduate computer architecture course specifically aimed at non-engineering students. The project is designed to develop understanding of processor organisation at the functional unit level by building a series software execution driven simulators, from a single cycle sequential processor to a simple pipelined processor. The students are lead through the functional design process step by step, in a succession of carefully structured tasks. The project starts by building functional units of a processor. These units are then used to construct a single cycle processor, a multi cycle processor, and finally a pipelined processor with data hazard detection and forwarding. The main goal of the project is to give students a true insight into the fundamental ideas, which are the basis of the development of the modern microprocessor.	MiniMIPS: a simulation project for the computer architecture laboratory	NA:NA	2018
Brian Shelburne	The simple yet elegant architecture of the PDP-8 makes it an ideal candidate for study in a computer organization course. The PDP-8 provides an uncomplicated example of a von-Neumann architecture. It is easy to program in machine code or assembler. It can be used to demonstrate coding low-level I/O routines, subroutine calls, uses of indirect addressing and handling interrupts. This paper discusses how a PDP-8 simulator written by the author is used in a computer organization course.	Teaching computer organization using a PDP-8 simulator	NA	2018
Ariel Ortiz	This paper gives an overview of what the SIMD (single-instruction/multiple-data) parallel execution model is, and provides an approach for presenting it to undergraduate students. We specifically propose a few assembly language idioms and programming projects which we have successfully used in the past to teach this non-trivial topic.	Teaching the SIMD execution model:: assembling a few parallel programming skills	NA	2018
Alyce Brady	NA	Session details: Capstone courses	NA	2018
B. Olsson:M. Berndtsson:B. Lundell:J. Hansson	In this paper we discuss the difficulties of designing and running a final year project course for computer science and information systems students. In particular, we present the design of a research-oriented final year project course, where the aim is to develop the student's critical thinking and research skills. We also discuss the lessons learnt during the seven years that the course has been given.	Running research-oriented final year projects for CS and IS students	NA:NA:NA:NA	2018
Timothy Huang	In this paper, we discuss how Go, a strategy game widely played in Asia and other parts of the world, provides a rich, challenging environment for capstone and undergraduate research projects. We first describe the game itself and the characteristics that make it appropriate for more advanced undergraduate projects. We then discuss several projects that our students have pursued over the last three years, and we share observations that may be helpful to other computer science educators.	The game of go: an ideal environment for capstone and undergraduate research projects	NA	2018
Eric Allen:Robert Cartwright:Charles Reis	Students in programming courses generally write "toy" programs that are superficially tested, graded, and then discarded. This approach to teaching programming leaves students unprepared for production programming because the gap between writing toy programs and developing reliable software products is enormous.This paper describes how production programming can be effectively taught to undergraduate students in the classroom. The key to teaching such a course is using Extreme Programming methodology to develop a sustainable open source project with real customers, including the students themselves. Extreme Programming and open source project management are facilitated by a growing collection of free tools such as the JUnit testing framework, the Ant scripting tool, and the SourceForge website for managing open source projects.	Production programming in the classroom	NA:NA:NA	2018
Jesse Heines:Katy Börner:Melody Y. Ivory:Edward F. Gehringer	Course Web sites are fast becoming standard features of college courses. Some students expect all their courses to have such sites, just like they expect them to have syllabi. Course Web sites help professors communicate with students and students communicate with each other. They might summarize lectures, present assignments, serve as repositories of examples developed by students as well as the professor, and provide links to additional related information on the Web.This panel will discuss various aspects of course Web sites, focusing on their development, maintenance, and use. We will share experiences by presenting examples, highlighting successes and failures, and describing our hopes and concerns for the future. The panel will welcome comments from those in the audience with similar and even contradictory experiences. Our intention is to broaden participants' thinking on the implementation and use of course Web sites and spawn insights that might lead to more effective use of this important course component.	Panel on the development, maintenance, and use of course web sites	NA:NA:NA:NA	2018
Daniel D. Garcia:David Ginat:Peter Henderson	NA	Everything you always wanted to know about game theory: but were afraid to ask	NA:NA:NA	2018
Jim Howatt	NA	Session details: Departmental concerns	NA	2018
Andrea Beth Campbell:Roy P. Pargas	This paper focuses on a rapidly growing population on many college and university campuses today: students equipped with laptop computers capable of wireless connection to the Internet. More and more departments are requiring that students enrolling in certain courses bring laptop computers to class. The course instructor is sometimes overwhelmed by the prospect, asking "How should I change my lesson plan in order to integrate the laptop in my daily lecture?" This paper first describes the effort to bring the laptop to campus at a number of colleges and universities around the country. It then offers concrete suggestions based on the experiences of several professors who either have taught, or are now teaching, laptop-required courses. The paper concludes with a summary and a look toward the future.	Laptops in the classroom	NA:NA	2018
Stuart Reges	This paper describes a program that uses undergraduates as teaching assistants to staff large computer science classes, particularly at the introductory level. Creating such a program at a state school presented special challenges, but the program has become a mainstay for the department's undergraduate program. The program has been so successful that we have expanded it to cover some sophomore and junior level courses, including a discrete mathematics course. Among the benefits of the program are reduced overall cost, improved quality of instruction, the formation of an undergraduate community and the practical experience that the undergraduate teaching assistants themselves gain.	Using undergraduates as teaching assistants at a state university	NA	2018
J McGrath Cohoon:Rebecca Shwalb:Lih-Yuan Chen	The rapid growth of computer science in both academia and industry creates a special problem with faculty turnover. This paper examines data from a national study of computer science departments to describe the circumstances surrounding faculty turnover in computer science and identify the major factors related to faculty departure. It concludes with suggested approaches for addressing the situation.	Faculty turnover in CS departments	NA:NA:NA	2018
Bill Teter	NA	Session details: Introductory networks	NA	2018
John Cigas	This paper describes a sophomore/junior-level laboratory course on network administration. The course aims to introduce networking concepts while emphasizing observation and measurement of network traffic. It utilizes an isolated laboratory of PCs running Linux along with numerous hubs, switches, and routers that can be rewired into multiple configurations. Being isolated from the campus network allows students complete administrative access without compromising campus security. Groups of students assemble their own LAN, attach it to the lab's "internet" backbone via a router, and then provide numerous common services like HTTP, DNS, and remote access to the rest of the lab. Once the room has a functioning internet, students examine various issues like encryption with TLS and ssh, as well as caching and load issues in retrieving different types of data from a web server. This paper covers the goals of the course, the laboratory setup, the exercises used in the course, and our experiences teaching the course.	An introductory course in network administration	NA	2018
Brian H. Cameron:Kay Wijekumar	Simulations are an important part of many traditional classes in Computer Networking. As web-based learning environments grow in popularity the need for simulations has become pronounced. This paper reports on a study to compare the performance of students enrolled in two web-based learning environments, one with a simulation package and the second with graphics and text only. Analysis shows statistically significant improvements in performance in the simulation group compared to the other group.	The effectiveness of simulation in a hybrid and on-line networking course	NA:NA	2018
Michael J. Jipping:Agata Bugaj:Liliyana Mihalkova:Donald E. Porter	A crucial part of the Networking course is the examination of and experimentation with network traffic data. Most standalone network traffic sniffers are quite expensive and those freely available on general purpose platforms (e.g., Linux or Windows) are quite cryptic. Because of this, we have developed NetSpy: a Java-based network sniffer that allows plug-in Java modules to analyze network data. These modules are written by students as part of their experimentation with traffic data. This paper describes the NetSpy system and the way we use this in Networking class.	Using Java to teach networking concepts with a programmable network sniffer	NA:NA:NA:NA	2018
Julie Barnes:Rob Bryant:Daniel D. McCracken:Susan Reiser	Most schools introduce HCI into the CS curriculum through a bootstrapping process. There are many excellent HCI programs at universities around the world, and some new faculty with HCI graduate degrees are starting to appear. But the extreme shortage of faculty forces most schools now starting to teach HCI to use the time-honored method of learning a subject by teaching it.Consensus: Insert HCI into any opening you can find. Learn more about the subject yourself. Let colleagues get comfortable with the idea. A required course in HCI may be some years off, or maybe you will never do exactly that, but you will have laid the foundation for getting HCI into your curriculum.	Teaching human-computer interaction: reports from the trenches	NA:NA:NA:NA	2018
Bill Marion	NA	Session details: Classroom management	NA	2018
William M. Waite:Michele H. Jackson:Amer Diwan	Concepts taught in large, lower-division computer science courses are carefully explained in standard textbooks. Thus we hypothesized that the classroom experience should not consist primarily of a restatement of those explanations by the professor. Instead, it should provide an opportunity for the students to learn through a process of conversation among themselves and with the professor. We were able to establish such a process in a sophomore-level course with an enrollment of 116 students. This change led to a doubling of the percentage of A and A- grades compared to historical values.	The conversational classroom	NA:NA:NA	2018
Michael Clancy:Nate Titterton:Clint Ryan:Jim Slotta:Marcia Linn	This paper describes our efforts to develop a new lab-based course format for computer science instruction. Building on learning science research, we created a flexible new technology platform to support students and their instructor as they participated in this new form of instruction. Students work collaboratively on Web-based activities while the instructor interacts with students in a tutorial role. The paper describes our system in detail, outlines the organization of the course that used it, and reviews and evaluates the pilot results. We then discuss the implications for computer science instruction and research in higher education.	New roles for students, instructors, and computers in a lab-based introductory programming course	NA:NA:NA:NA:NA	2018
Denise Woit:David Mason	For five academic years we have engaged in an on-going study of the effectiveness of online assessment of student programming abilities for introductory programming courses in Computer Science. Our results show that online evaluation can be implemented securely, efficiently, and can result in increased student motivation and programming efficacy; however, unless online components are integrated throughout the course evaluations, student competence will be underestimated. Our data reveals disadvantages of online evaluations, but also shows that both students and faculty benefit when online evaluations are implemented appropriately.	Effectiveness of online assessment	NA:NA	2018
Jane Prey:Ernest McDuffie:Harriet Taylor	This session will highlight NSF EHR Division of Undergraduate Education and CISE Division of Experimental and Integrative Activities programs of interest to college faculty, discussing the requirements and guidelines. It will include a discussion of the characteristics of a competitive proposal and the proposal process.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Jaime Nino	NA	Session details: Introductory programming	NA	2018
Raymond Lister:John Leaney	In the traditional norm-referencing approach to grading, all students in a CS1 class attempt the same programming tasks, and those attempts are graded "to a curve". The danger is that such tasks are aimed at a hypothetical average student. Weaker students can do little of these tasks, and learn little. Meanwhile, these tasks do not stretch the stronger students, so they too are denied an opportunity to learn. Our solution is two-fold. First, we use a criterion-referenced approach, where fundamentally different tasks are set, according to the ability of the students. Second, the differences in the nature of the tasks reflect the differing levels of Bloom's taxonomy. Weaker CS1 students are simply required to demonstrate knowledge and comprehension; the ability to read and understand programs. Middling students attempt traditional tasks, while the stronger students are set open-ended tasks at the synthesis and evaluation levels.	Introductory programming, criterion-referencing, and bloom	NA:NA	2018
H. Chad Lane:Kurt VanLehn	Coached program planning is a dialogue-based style of tutoring aimed at helping novices during the early stages of program writing. The intent is to help novices understand and solve problems in their own words through the construction of natural-language style pseudocode as the first step in solving a programming problem. We have designed an environment supporting coached program planning and have used it in a human-to-human, computer-mediated evaluation of 16 novice programmers enrolled in a pre-CS1 programming course at the University of Pittsburgh. The results show that students who underwent coached program planning, compared to those who did not, were more prolific with comments in their programs, committed fewer structural mistakes, and exhibited less erratic programming behavior during their implementation. The dialogues collected from this experiment followed a clear 4-step pattern. Starting with this observation, we are developing a dialogue-based intelligent tutoring system called the Pseudocode Tutor to support coached program planning.	Coached program planning: dialogue-based support for novice program design	NA:NA	2018
Maria Hristova:Ananya Misra:Megan Rutter:Rebecca Mercuri	Programming in Java can be a daunting task for introductory students, one that is only compounded by the cryptic compiler error messages they see when they first start to write actual code. This article details a project conducted by faculty and advanced students in the creation of an educational tool for Java programming, called Expresso. This paper discusses some existing programming tools, explains their drawbacks, and describes why Expresso is different. We also include a detailed list of typical errors made by novice programmers, used in the construction of the Expresso tool.	Identifying and correcting Java programming errors for introductory computer science students	NA:NA:NA:NA	2018
James Cross	NA	Session details: Visualization	NA	2018
Michael T. Grinder	The FSA Simulator is a Java program created to allow computer science students to work and experiment with finite state automata (FSAs). One of its unique features is the ability to compare the languages of two FSAs. This FSA comparison feature lets the software give students feedback about the accuracy of their work as they do exercises, guiding them toward a correct solution. This paper discusses some preliminary experiments performed to determine the effect of this feedback mechanism on students' learning. Two experimental labs were conducted, the results of which suggest that this feature improved students' success rate when doing exercises, but did not appear to significantly improve the students' performance when the comparison feature was not available.	A preliminary empirical evaluation of the effectiveness of a finite state automaton animator	NA	2018
Ayonike Akingbade:Thomas Finley:Diana Jackson:Pretesh Patel:Susan H. Rodger	We present JAWAA 2.0, a scripting language for creating animations easily over the web. JAWAA includes primitives, easy creation of data structures and operations on these structures, and an editor for easy creation of complex objects. We show how to use JAWAA in a range of computer science courses including CS 0, CS 1, CS 2 and advanced courses. Instructors can quickly build animations for demos in lecture, and students can enhance their programming projects with an animation.	JAWAA: easy web-based animation from CS 0 to advanced CS courses	NA:NA:NA:NA:NA	2018
Jeff Lucas:Thomas L. Naps:Guido Rößling	Graphs and graph algorithms play an important role in undergraduate data structures and algorithms courses. However, they often also represent the first case where both the correctness and the underlying concepts of the algorithms are not evident. Both students and educators can therefore benefit from a simple yet expressive tool for coding graph algorithms and then conveniently visualizing them. We present such a tool, derived from a set of instructional requirements, and give an example application.	VisualGraph: a graph class designed for both undergraduate students and educators	NA:NA:NA	2018
John Hill	NA	Session details: Operating systems	NA	2018
Andrew T. Phillips:Jack S.E. Tan	By exploiting a well known security vulnerability in many C library implementations, it is possible for an unprivileged user to gain unrestricted system privileges. With an understanding of how the process execution stack is allocated and managed during process execution, a user can override the return address of a C library routine and thereby resume execution at a different address where a set of malicious functions can be invoked [1]. This is known as the buffer overflow exploit. With buffer overflow as the underlying theme, an example will be described using C and the MIPS assembly language that simultaneously exposes students to issues in computer security, operating systems concepts such as memory management and function invocation/return, and the MIPS instruction set architecture.	Exploring security vulnerabilities by exploiting buffer overflow using the MIPS ISA	NA:NA	2018
Steven Robbins	Students often have difficulty visualizing, understanding and debugging concurrent programs. Programming assignments involving concurrency are also difficult to grade. The output alone is not sufficient because the print statements from cooperating threads or processes can interfere with each other and garble the results. The remote logging tool described here allows multiple processes or threads to atomically log messages to a local or remote host. Different views of the messages are available in real time through a graphical user interface (GUI). The tool consists of two parts, a library for adding logging commands to a user program and a GUI for presenting different views of the logged messages. A separate logging library is needed for each programming language (e.g., C, C++, Java), but a single GUI works with all of these. A C logging library and a general GUI are available on the web.	Using remote logging for teaching concurrency	NA	2018
John M. D. Hill:Clark K. Ray:Jean R. S. Blair:Curtis A. Carver, Jr.	Because students have different learning styles, it's important to incorporate multiple teaching techniques into the classroom experience. One such technique is the use of puzzles and games in the classroom to reinforce the learning objectives. Many topics in Computer Science are well suited for coverage in such a game. Several in-class puzzles and games have been used in the Computer Science program at this institution in recent years. In basic and advanced courses, simple crossword puzzles reinforce terminology and Jeopardy!®-style games help students master material with short answers. In the most recent iteration of the Operating Systems course, a BattleThreads game and a Process State Transition game helped students appreciate different approaches to process and thread management. The latter two games have been assessed for their effectiveness, providing several insights into what makes a good in-class game for teaching operating systems concepts, and how the existing games can be improved.	Puzzles and games: addressing different learning styles in teaching operating systems concepts	NA:NA:NA:NA	2018
Sandra DeLoatch:Henry Walker:Frank H. Young	Each year a small group of computer science educators are selected to become chairs of their departments. This experience is often referred to as "losing the lottery." The panelists have a different view. We believe that department chairs make important contributions to the success of their departments. Department chairs help new faculty develop as educators and professionals. Department chairs help to create an environment where students and faculty can enjoy their work and be productive. Department chairs can facilitate curriculum development and change, thereby helping keep the department's offerings current.The panelists have experience in a variety of educational environments. All have served as department heads. All have had to deal with the normal problems that department heads deal with - recruiting new faculty, obtaining funds for equipment, getting adequate funds for faculty salaries, acquiring technical support personnel, dealing with rapid increases in the number of majors, arranging teaching schedules, assisting with grant proposals, etc.Most department chairs have little or no guidance as they begin their tenure. This panel is an attempt to alleviate this problem. The panelists believe that their experiences can help new department chairs adjust to the multiple and sometimes conflicting demands of their new job.	On serving as department chair: suggestions from veterans	NA:NA:NA	2018
William Marion:Adrienne Bloss:Kris Powers:Doug Baldwin	NA	How departments are responding to the mathematics recommendations in CC2001	NA:NA:NA:NA	2018
Joel Adams	NA	Session details: Introduction to OO	NA	2018
Stephen Cooper:Wanda Dann:Randy Pausch	An objects-first strategy for teaching introductory computer science courses is receiving increased attention from CS educators. In this paper, we discuss the challenge of the objects-first strategy and present a new approach that attempts to meet this challenge. The new approach is centered on the visualization of objects and their behaviors using a 3D animation environment. Statistical data as well as informal observations are summarized to show evidence of student performance as a result of this approach. A comparison is made of the pedagogical aspects of this new approach with that of other relevant work.	Teaching objects-first in introductory computer science	NA:NA:NA	2018
Nira Herrmann:Jeffrey L. Popyack:Bruce Char:Paul Zoski:Christopher D. Cera:Robert N. Lass:Aparna Nanjappa	We report here on an extensive redesign and unification of the Introductory Computer Programming sequences offered to computer science, computer engineering, information science and digital media majors. The redesign is intended to improve student learning while reducing costs. The approach makes use of substantial Web-based course material and course management tools, including multi-level online modules that individualize instruction and enable students to self-schedule learning each week. Each module covers a particular aspect of computer programming at different levels of knowledge. Students are assigned work and reading from the module at a level appropriate to the objectives of the long-term goals of their major. This allows students in different majors to acquire the appropriate skill level for each technique and concept. Peer mentors and teaching assistants provide assistance online or in person. In the future, we plan to expand the self-scheduling aspect of the course to allow students to enter the course at different modules, depending on their previous knowledge.	Redesigning introductory computer programming using multi-level online modules for a mixed audience	NA:NA:NA:NA:NA:NA:NA	2018
Dean Sanders:Brian Dorn	Jeroo is a tool that has been developed to help students in beginning programming courses learn the semantics of fundamental control structures, learn the basic notions of using objects to solve problems, and learn to write methods that support a functional decomposition of the task. Jeroo is similar to Karel the Robot and its descendants, but has a narrower scope than Karel's descendants and has a syntax that provides a smoother transition to either Java or C++. Jeroo has been class tested at Northwest Missouri State University, and has proven to be an effective tool for working with students in a beginning programming class. Jeroo and user documentation are available at http://www.nwmissouri.edu/~sanders/Jeroo/Jeroo.html.	Jeroo: a tool for introducing object-oriented programming	NA:NA	2018
Karen Anewalt	NA	Session details: Data structures	NA	2018
Kevin R. Burger	Two-dimensional arrays (2d-arrays) are fundamental data structures in many software programs and must be mastered by beginning programming students. Teachers of introductory programming are challenged to devise new and interesting exercises for teaching 2d-array concepts. We believe image processing (IP) examples can provide stimulating, challenging, and fun exercises for students. We describe briefly the new Java2 Image I/O API and show how it can be used to read and write images in GIF, JPEG, and PNG formats. We also provide Java code for an Image class that hides the complexity of this API from the student. We conclude with several sample student exercises that can be used to teach 2d-array programming.	Teaching two-dimensional array concepts in Java with image processing examples	NA	2018
Josh Tenenberg	This paper advocates the incorporation of object oriented framework libraries such as the Standard Template Library (STL) into the first data structures course at the university level. This represents a shift from learning the details of each data structure to an increased emphasis on the use, integration, and extension of these existing frameworks, as well as on the learning of higher-order design and engineering skills.	A framework approach to teaching data structures	NA	2018
Alistair E. R. Campbell:Geoffrey L. Catto:Eric E. Hansen	We introduce the Language-Independent Visualization Environment (LIVE) as a system for the visualization and manipulation of data structures and the computer programs that create and operate on them.LIVE interprets arbitrary programs containing arbitrary data structure definitions, showing diagrammatically the data that the process generates.It is language-independent in that a single program can be visualized in the syntax of multiple languages. LIVE is interactive in that not only does it show the effects of statements immediately as they occur at runtime, but it also generates new program source code automatically when the user manipulates the data on the screen. We anticipate that this tool will be most useful in a pedagogical setting such as a CS2 or data structures course, particularly with the introduction of pointers and linked structures.	Language-independent interactive data visualization	NA:NA:NA	2018
Mario Guimaraes	NA	Session details: Upper level courses	NA	2018
Doug Baldwin	Projects in which students write a small compiler are common in compiler design courses, but even a small compiler can be daunting to students with no prior compiler-writing experience. When I recently taught compiler design, I developed a very small language with a highly modular compiler, focusing the project on implementing the core parts of a compiler without requiring students to build all the infrastructure from scratch. This paper describes the language and its compiler, and their successes (and occasional limitations) for teaching compiler design.	A compiler for teaching about compilers	NA	2018
Paul J. Wagner:Elizabeth Shoop:John V. Carlis	Database systems instructors face an ongoing challenge to develop meaningful assignments for their courses. We have found that instructors can successfully use large scientific datasets in teaching a database systems course to better prepare students for real-world database systems work.	Using scientific data to teach a database systems course	NA:NA:NA	2018
Arthur H. Lee	Instruction on web programming at an advanced level in computer science has been in high demand in recent years. The topics and technologies in this area are so vast and diverse that designing and teaching a course requires vast knowledge and the ability to select coherent topics and technologies that can be presented in a semester. The students should learn enough of the underlying fundamental concepts along with the selected technologies so that they can practise in the real world setting while being able to adapt and expand beyond what was taught in class. Very few courses of this kind if any have been taught. We describe such a course, called Web Software Architecture, that we created and have taught successfully last Spring. It is a junior/senior level computer science elective course that uses Java, Servlets, JavaServer Pages, HTML, JavaScript, JDBC, and the Apache-Tomcat web server as key technologies. Our experience supports the assertion that such a web programming course has a legitimate place in a computer science curriculum.	A manageable web software architecture: searching for simplicity	NA	2018
James Huggins:Joseph Bergin:James Caristi:Ellen Walker	NA	Survivor: getting through that class the first time	NA:NA:NA:NA	2018
Peter B. Henderson:William Barker:Susanna Epp:William Marion	NA	Math educators, computer science educators: working together	NA:NA:NA:NA	2018
Seth Bergmann	NA	Session details: Breadth-first approach	NA	2018
Andrew T. Phillips:Daniel E. Stevenson:Michael R. Wick	A first course in computer science that loosely follows the Computing Curricula 2001 report is described. This course blends theory and practice, highlights algorithm design, introduces a modest amount of imperative programming, and uses an Internet algorithmics theme to tie the topics together and keep the course both challenging and interesting to those with and without previous computing experience.	Implementing CC2001: a breadth-first introductory course for a just-in-time curriculum design	NA:NA:NA	2018
Kris D. Powers	In the fall of 2002 our institution will begin teaching a new computer science curriculum based on the guidelines set forth in Computing Curricula 2001. Of particular interest in this new curriculum is our "breadth-also" approach to a lower-level core. In general, a breadth-also model incorporates topics from across the discipline of computer science into an expanded, programming-first introductory sequence. In this paper we present our specific implementation of this model, and argue its potential to significantly improve learning.	Breadth-also: a rationale and implementation	NA	2018
Christine Shannon	In an effort to serve the needs of both majors and non-majors, the Computer Science Department at Centre College has restructured the CS I course so that it uses the language Python, devotes more attention to the Internet and the World Wide Web, addresses ethical and societal issues, and introduces students to programmable robots and an SQL database. This diverse course has been attractive to the students while still maintaining a strong emphasis on programming.	Another breadth-first approach to CS I using python	NA	2018
Bill Oblitey	NA	Session details: Networks	NA	2018
Prabhaker Mateti	We developed a laboratory-based course on Internet Security. The course is aimed at the senior undergraduate. This paper discusses the course and explains how others can set up their own labs to teach this course. All the laboratory work is conducted in a laboratory of PCs running Linux. We developed lecture notes for the course, and a web site to widely disseminate these materials.	A laboratory-based course on internet security	NA	2018
Surendar Chandra	This paper describes a peer-to-peer (p2p) system (beacond) that is suitable for teaching important concepts in ubiquitous computing. The system exposes issues in peer location, p2p services, security and privacy issues. The system provided enough background to compliment class lectures and assisted students in designing their own course projects. Students continue to explore ideas exposed by beacond; some of these ideas are being further developed for publication in research conferences[1]. We present our experiences in using this framework for three different course offerings.	Beacond: a peer-to-peer system to teach ubiquitous computing	NA	2018
Peter Steenkiste	A difficult problem in networking courses is to find hands-on projects that have the right balance between the level of realism and complexity. This is especially true for projects that focus on the internal functionality of routers and other network devices. We developed a capstone course called "Network Design and Evaluation" that uses a network processor-based platform for networking projects. This platform is more realistic than traditional approaches based on software emulation environments or PC-based routers running Unix, but it is significantly less complex to work with than real commercial routers or even PC-based routers. We are currently teaching this course for the third year, and our experience has been extremely positive. Students enjoy the realism of the platform and not only learn a lot about the internal operation of the network, but also about network configuration and management.	A network project course based on network processors	NA	2018
Sue Fitzgerald:G. Michael Schneider:Robert M. Aiken:Barry Fagin	NA	The fulbright program: international teaching and curriculum development experiences	NA:NA:NA:NA	2018
Peter Van Roy:Joe Armstrong:Matthew Flatt:Boris Magnusson	The purpose of this panel is to confront the wide variety of opinions on the role of language paradigms in teaching programming. We have selected four divergent opinions:Armstrong says that concurrent programming is considered difficult because it is taught in the wrong paradigm, namely imperative or object-oriented programming. Instead, concurrency should be taught using a paradigm that makes it simple.Flatt says that everyone should be taught how to program, not just computer science majors. Further, programming should be taught as an extension of what students already know, which is algebra. More important than a particular paradigm, however, is teaching students a design process.Magnusson says that object-oriented programming must be the first and principal paradigm, because it is best for teaching how to analyze problems and structure solutions. Other paradigms can be taught after students have a solid understanding of OO.Van Roy says that programming should be taught in terms of concepts, not paradigms. Common paradigms (functional, OO, etc.) then appear naturally, depending on the concepts used..The panel will confront these opinions to enrich our understanding of how to teach programming.	The role of language paradigms in teaching programming	NA:NA:NA:NA	2018
Scot Drysdale:Judith Hromcik:Mark Allen Weiss:Reg Hahne	With the Java language replacing C++ on the 2004 AP CS Exam, teachers need to be informed about the changes that must be implemented to support an OO approach to programming. This special session will include a retrospective look at the motivation behind the change to an object-oriented language, the process undertaken to select a testable language subset, the need to continue the development and classroom implementation of a Case Study, and a look at how the shift from an object-based approach to programming in C++ to an OO approach in Java leads to curriculum modification.The AP CS Development Committee's charge is to not only provide a comprehensive testing mechanism, but also advise, through various publications, a direction that high school teachers should take in preparing a foundation for more advanced student studies during college. This special session will bring together two college and two high school members of the AP CS Development Committee to share some of their insights into how the experts do it. Time will be provided to discuss participant's questions.	Java in the morning...Java in the evening...Java in 2004	NA:NA:NA:NA	2018
Chenglie Hu	NA	Session details: Objects	NA	2018
Joel Adams:Jeremy Frens	Object-centered design (OCD) is a methodology developed to help novice C++ programmers learn to design software. By adapting OCD for use with Java, we can reduce the number of phases in OCD from five to three, and introduce object-oriented design (OOD) in CS-1 instead of CS-2.	Object centered design for Java: teaching OOD in CS-1	NA:NA	2018
Daniel E. Stevenson:Andrew T. Phillips	A standard practice in object-oriented programming is to implement an operation, called equals in Java, for testing the equality of two objects. The equals method should be defined for every new Java class, but because of the intricacies of inheritance, casting, and dynamic typing, equals is often quite difficult to write correctly. And unfortunately many textbooks present flawed implementations of this operation. In this paper, we present a semantically correct technique for testing object equivalence, a technique that simultaneously brings together important mathematical foundations (equivalence relations), practical programming issues (inheritance, casting, dynamic typing), and sound software design (design patterns) in a natural and compelling way. While Java is used to demonstrate how the semantic flaws are corrected and the design improved using our techniques, the design is general enough that it will be clear how the same ideas could easily be extended to other languages such as C++.	Implementing object equivalence in Java using the template method design pattern	NA:NA	2018
Michael R. Wick	Computer science has a relatively stable collection of time-tested pedagogical programming examples. With the infusion of object-oriented concepts into the core computer science curriculum, many of these examples are being replaced with newer examples that are more focused on demonstrating the particular object-oriented features of interest. But classic computer science examples can be refactored to include the important object-oriented topics as well, all the while maintaining the time-tested pedagogical benefits of the original example. This paper presents a case study of this refactoring by demonstrating how the classic Huffman encoding example can be modeled to integrate important object-oriented concepts.	An object-oriented refactoring of Huffman encoding using the Java collections framework	NA	2018
Ann Quade	NA	Session details: Active learning	NA	2018
Ray Giguette	Many CS1 and CS2 instructors have been using game-like assignments and manipulatives to increase student understanding of abstract concepts. A related approach described in this paper requires students to play a game-like version of each assignment (referred to as the "pre-game") before designing and coding their own programs. Students complete a prototype of the pre-game that uses simpler I/O but otherwise follows the same specification. By playing the pre-game, students become familiar with lesson principles using a concrete example that combines the advantages of both game-play and manipulatives. Ideally, the pre-game creates an environment that both encourages experimentation, and allows students to use their intuition when designing algorithms and data structures.	Pre-games: games designed to introduce CS1 and CS2 programming assignments	NA	2018
Dennis J. Bouvier	Previous Computer Science Education research incorporating Common Learning Experiences (CLEs) into freshman level breadth-first Computer Science course inspired the author to undertake similar work for a depth-first course. This paper presents a set of CLEs developed for this purpose, namely the 'Living Flowcharts CLEs', along with a discussion of the pilot study and the preliminary results.	Pilot study: living flowcharts in an introduction to programming course	NA	2018
Shannon Pollard:Jeffrey Forbes	Often in teaching an introductory computer science course for non-majors, a primary focus on building programming skills is neither practical nor effective. Many instructors choose a breadth-first approach focusing on building problem solving skills and surveying computer science. This paper argues that conducting hands-on labs where students work together to physically implement algorithms is an effective supplement for programming labs on the computer. We present lab examples and summarize our experiences.	Hands-on labs without computers	NA:NA	2018
Lillian N. Cassel:John Impagliazzo:Ann Lally:Edward A. Fox:Manuel A. Pérez-Quiñones:Jane Prey	The NSDL consists of collections of materials accessible online, as well as many tools and services intended to enhance learning. Tools and services will support students and as well as faculty. This session will provide a status report on the state of the NSDL, its content, tools, and services. The session includes specific presentations of several services included in the NSDL. Session attendees discuss current and proposed initiatives, and offer suggestions about needs of highest priority.	Report on the NSF major educational funding initiative for a National Science, Technology, Engineering, and Mathematics Education Digital Library (NSDL) with special emphasis on the Computing Education component	NA:NA:NA:NA:NA:NA	2018
Vicki L. Almstrum:David Ginat:Orit Hazzan:John M. Clement	During the ITiCSE 2002 conference in Århus, Denmark, a panel presentation on the topic of import to and export from Computing Science Education and other fields focused on the case of Mathematics Education Research. The outcome was very successful, with the panelists' presentations giving rise to active audience participation.Continuing with the theme from the earlier panel, this proposal suggests a similar format with the expanded theme of transfer into Computing Science Education from Science Education Research. This panel will look at how research theories developed in the context of various areas of science education can be applied to Computing Science Education as well as ways in which computing science educational theories may be used in those areas. Because Computing Science Education is a young discipline, it is still in search of its research framework [2]. In formulating such a framework, it can be practical and productive to adapt approaches from research in other disciplines, both educational and related areas. At the same time, the younger discipline can offer innovative new approaches to the older discipline.The panelists will examine possibilities and difficulties in some import and export attempts between several areas of Science Education Research and Computing Science Education. For this context, science is considered to include mathematics.	Transfer to/from computing science education: the case of science education research	NA:NA:NA:NA	2018
Allen Tucker:Fadi Deek:Jill Jones:Dennis McCowan:Chris Stephenson:Anita Verno	This special session will report on the work of the ACM K-12 Computer Science Curriculum Committee, whose charge is to design a model curriculum for K-12 computer science that can be widely implemented. It will also gather feedback from attendees on the content and direction of that work.	Toward a K-12 computer science curriculum	NA:NA:NA:NA:NA:NA	2018
Reza Sanati, Utah Valley State College Reza Sanati, Utah Valley State College	NA	Session details: Robotics	NA	2018
Barry Fagin:Laurence Merkle	We report the results of a year-long experiment in the use of robots to teach computer science. Our data set compares results from over 800 students on identical tests from both robotics and non-robotics based laboratory sessions. We also examine the effectiveness of robots in encouraging students to select computer science or computer engineering as a field of study.Our results are negative: test scores were lower in the robotics sections than in the non-robotics ones, nor did the use of robots have any measurable effect on students choice of discipline. We believe the most significant factor that accounts for this is the lack of a simulator for our robotics programming system. Students in robotics sections must run and debug their programs on robots during assigned lab times, and are therefore deprived of both reflective time and the rapid compile-run-debug cycle outside of class that is an important part of the learning process. We discuss this and other issues, and suggest directions for future work.	Measuring the effectiveness of robots in teaching computer science	NA:NA	2018
Susan P. Imberman	In this paper we propose a novel method for teaching neural networks with back propagation in an undergraduate Artificial Intelligence course. We use an agent based approach in the course, as outlined in the textbook Artificial Intelligence A Modern Approach by Stuart Russell and Peter Norvig [7]. The students build a robot agent whose task is to learn path-following behavior with a neural network. Robot agents are constructed from standard LEGO pieces and use the MIT Handy Board as a controller.	Teaching neural networks using LEGO handy board robots in an artificial intelligence course	NA	2018
Douglas Blank:Lisa Meeden:Deepak Kumar	This paper describes Pyro, a robotics programming environment designed to allow inexperienced undergraduates to explore topics in advanced robotics. Pyro, which stands for Python Robotics, runs on a number of advanced robotics platforms. In addition, programs in Pyro can abstract away low-level details such that individual programs can work unchanged across very different robotics hardware. Results of using Pyro in an undergraduate course are discussed.	Python robotics: an environment for exploring robotics beyond LEGOs	NA:NA:NA	2018
Susan Haller	NA	Session details: Attracting majors	NA	2018
Sandy Graham:Celine Latulipe	Declining female enrollment in undergraduate Computer Science programs is a serious problem. Part of the solution lies in retaining more of the female students currently enrolled; even more important, however, is increasing initial enrollment. Many believe lack of interest to be rooted in stereotypes of computer science formed early in high school: that it is a boring subject, devoid of interesting applications and stimulating only to 'geeks'. To attract high school females to CS, and to determine whether early exposure to the interesting breadth of CS and its applications might ameliorate such attitudes, a week-long Computer Science Seminar for Grade 9 and 10 girls was held at the University of Waterloo. The seminar consisted of lectures, labs and activities chosen to demonstrate the breadth of CS and to dispel the negative stereotypes. Pre- and post-seminar surveys indicate a substantial increase in interest, translating directly into increased desire to take high school CS courses.	CS girls rock: sparking interest in computer science and debunking the stereotypes	NA:NA	2018
Paolo A. G. Sivilotti:Murat Demirbas	During summer 2002, we ran a workshop module for a group of 28 eighth-grade girls. Our aim was ambitious: to introduce these students, ages 12 and 13, to computer science by focussing on the deep intellectual topic of self-stabilizing distributed algorithms and by imparting an intuitive appreciation for their use in fault tolerance. At the same time, we hoped to dispel some negative stereotypes of computer science. The module was a success according to evaluations and comments from the participants. This paper describes the sequence of exercises we developed as an elementary-level introduction to the graduate-level topics of fault tolerance and self-stabilization. We report them with the hope that others will try them in college classrooms, as we plan to do.	Introducing middle school girls to fault tolerant computing	NA:NA	2018
Peter B. Henderson	The Indiana Student Software Awards Competition (ISSAC) was created to encourage students in the state of Indiana to improve their software development skills, to potentially consider a career in information technology, and to help stem the flow of graduates out of Indiana - "the brain drain". High school or college students who develop a software project for class, personal enrichment or corporate internships may submit a project. ISSAC 2003 is the third year of the competition. Finalist projects are judged at the annual Indiana Technology Summit, and students are awarded scholarships and plaques based upon the overall quality and functionality of their software.	ISSAC: Indiana student software awards competition	NA	2018
Deborah Hwang	NA	Session details: Reading, writing, and recursion	NA	2018
Michael Eisenberg	Computer science has a reputation of being a discipline in a perpetual state of accelerated progress-a discipline in which our techniques, our hardware, our software systems, and our literature rarely exhibit a staying power of more than several years. While undeniably exciting, this state of continual intellectual upheaval can leave computer science students (and faculty) with a disturbing sense that there is no essential core of great work within the discipline. This paper describes a readings course entitled "Computer Science: the Canon" whose purpose is to counter this perception by exploring a set of "great works" in computer science. We describe our own (undoubtedly idiosyncratic) reading list used for the course, and discuss several central issues involved in offering such a course within a computer science curriculum.	Creating a computer science canon: a course of "classic" readings in computer science	NA	2018
Lisa C. Kaczmarczyk	Writing skills need to be integrated into the Computer Science (CS) curriculum, and there is little empirical evidence on how best to do so. This paper first describes a technical writing class for CS undergraduates. Then it presents the results of a statistical study that investigated student perceptions of their learning experience in three areas: skill mastery, self-efficacy, and motivation. Positive results support this approach to teaching writing to CS students. Some unexpected findings in all three areas highlight why monitoring student perceptions is important for CS educators.	A technical writing class for computer science majors: measuring student perceptions of learning	NA	2018
Tina Götschi:Ian Sanders:Vashti Galpin	Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion can be termed their mental model of recursion. A student's mental model is viable if it allows them to accurately and consistently represent the mechanics of recursion. Non-viable mental models are constructed if students have misconceptions about the mechanisms of recursion or have misconceptions about concepts fundamental to recursion. This paper presents a study of the mental models of recursion that first year students at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It was found that while the majority of students constructed the viable copies model, many non-viable models such as the looping, active, step, magic, return-value and various odd models were also constructed. Identifying the models that students have can allow lecturers to target individual students' specific problems and analysis of the models can provide insight into learning.	Mental models of recursion	NA:NA:NA	2018
D. Paul Benjamin:Charles Border:Robert Montante:Paul J. Wagner	NA	Undergraduate cyber security course projects	NA:NA:NA:NA	2018
Nick Parlante:Jeffrey Popyack:Stuart Reges:Stephen Weiss:Scott Dexter:Chaya Gurwitz:Joseph Zachary:Grant Braught	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
John Impagliazzo:Robert Sloan:Andrew McGettrick:Pradip K. Srimani	NA	Computer engineering computing curricula	NA:NA:NA:NA	2018
Jeffrey L. Popyack:Nira Herrmann:Paul Zoski:Bruce Char:Chris Cera:Robert N. Lass	Advances in computing and telecommunication technology provide abundant new opportunities for academic dishonesty. Anecdotal evidence suggests that students are far more aware than faculty of various mechanisms for cheating on exams, plagiarizing assignments, and soliciting work for pay. Fortunately, technological advances also provide the alert instructor with some tools for combating such academic dishonesty.In this session, we will present information on how calculators, cell phones, beepers, and other handheld technology may be used to cheat on exams; how the Internet is used to match students with sources for solutions to their assignments; and existing tools and services for the faculty member.The intention of this session is to inform faculty about various ways that students may commit academic fraud; and tools and approaches that are available to reduce their effectiveness. We also hope to gain further information from other faculty and/or students in attendance. We do not intend to debate whether these activities should be allowed due to the ease with which they are committed, as is often discussed.We will provide a bibliography of articles about high-tech academic dishonesty, software tools and services for detecting plagiarism (including shared code in programming assignments), and Internet resources.	Academic dishonesty in a high-tech environment	NA:NA:NA:NA:NA:NA	2018
David Ginat	NA	Session details: Collaborative learning	NA	2018
Nachiappan Nagappan:Laurie Williams:Miriam Ferzli:Eric Wiebe:Kai Yang:Carol Miller:Suzanne Balik	Pair programming is a practice in which two programmers work collaboratively at one computer, on the same design, algorithm, or code. Prior research indicates that pair programmers produce higher quality code in essentially half the time taken by solo programmers. An experiment was run to assess the efficacy of pair programming in an introductory Computer Science course. Student pair programmers were more self-sufficient, generally perform better on projects and exams, and were more likely to complete the class with a grade of C or better than their solo counterparts. Results indicate that pair programming creates a laboratory environment conducive to more advanced, active learning than traditional labs; students and lab instructors report labs to be more productive and less frustrating.	Improving the CS1 experience with pair programming	NA:NA:NA:NA:NA:NA:NA	2018
Lynda Thomas:Mark Ratcliffe:Ann Robertson	This paper reports on how first-year students who have programmed before see their programming interest and ability and how this self-perception relates to their performance in the introductory programming course. In particular we examine how this self-perception is reflected in their reactions to the pair-programming technique for developing software.Students who had programming experience before University were given a survey that placed them on a scale that we have called Code Warrior to Code-a-phobe. We then placed them in 'opposite' and 'similar' pairs for a pair programming exercise and surveyed their reactions. There was evidence that students who have considerable self-confidence do not enjoy the experience of pair programming as much as other students and that students produce their best work when placed in pairs with students of similar self-confidence levels.	Code warriors and code-a-phobes: a study in attitude and pair programming	NA:NA:NA	2018
Anthony Joseph:Mabel Payne	This work resulted from an investigation of the activities component of group dynamics in collaborative (or cooperative) groups for two undergraduate sections of computer architecture taught in spring 2002. A cooperative group is a special type of small group consisting of two to four persons. Collaborative learning as used here is a central component of the author devised integrative cooperative learning teaching technique. The hypothesis for this study is that the greater a student's level of within group course related activities for the imposed course assignments, the higher the student's relative course outcomes. To examine this hypothesis, an analysis of the relationship between a student's group activity and course outcomes was done. The sources of data were the student coordinator assessments and student journals compiled throughout the semester. The results of the analyses of the 63 students in the two sections of the undergraduate computer architecture course substantiated the hypothesis that the more a student participates in out-of-class collaborative academic group activity, the greater the student's achievement.	Group dynamics and collaborative group performance	NA:NA	2018
Uta Ziegler	NA	Session details: Graphics	NA	2018
Steve Cunningham:Angela B. Shiflet	Computer graphics is an important part of a working scientist's toolkit. The graphics may be provided by resources with the scientist's group or by capabilities of the toolkits that the scientist uses directly in his or her work. However, in order for the scientist to understand how computer graphics images represent models and what possibilities there are for this representation, and for the occasional time when the scientist may want to create a presentation that is beyond the capability of standard tools, it is important for the science student to understand the basic capabilities and processes of computer graphics. This paper outlines how a computational science program can give students the background they need to have this understanding.	Computer graphics in undergraduate computational science education	NA:NA	2018
Alexander A. Sherstov	DisViz is a visualization tool designed to assist students in learning graph algorithms, an important topic in the undergraduate curriculum. DisViz is intended for collaborative use by a group of students over a classroom network. This visualization system views network hosts as graph nodes and the socket connections among them, as graph edges. In typical usage, every student runs a copy of DisViz on his/her local machine. These applications detect each other's presence on the network and coordinate their actions to execute the graph algorithm in question and to deliver identical animations to every terminal.	Distributed visualization of graph algorithms	NA	2018
John Lowther:Ching-Kuang Shene	This paper describes the authors' approach of introducing important concepts and algorithms of B-splines to junior computer science students with the help of a pedagogical tool DesignMentor. This approach is non-mathematical and intuitive, and has been used and refined in the past six years.	Teaching B-splines is not difficult!	NA:NA	2018
Asad Khailany	NA	Session details: Using the web	NA	2018
Dale Reed:Sam John	The World Wide Web is increasingly becoming an integrated extension of users' computing environments, with content indexed and retrieved through Web browsers. Web browsers are increasingly being used as computer science curriculum delivery mechanism, for both books delivered as local content on CD ROMs as well as server-based material.Traditional computer science curriculum has often been presented through static printed media. What has been printed ahead of time in books or handouts can not be changed. Any changes would have to be attached externally by way of scribbled notes or explanations on the board. The Web gives us the technological affordances to change that, both for students and teachers.The original page remains unchanged, however the user's version of the page is filtered, adding, subtracting and changing web page elements, giving an enhanced view. A demonstration version of the Web Annotator can be downloaded from: http://logos.cs.uic.edu/Annotator.	Web annotator	NA:NA	2018
J. E. Labra Gayo:J. M. Morales Gil:A. M. Fernández Álvarez:H. Sagastegui Chigne	We describe the main features of an Internet based distance learning environment that we are developing to teach a course on logic and functional programming for computer science students. The main goal of the system is to provide a minimal set of capabilities for a generic interpreter that will be instantiated for different programming languages and paradigms. The architecture of the system is based on the use of XML and web services to facilitate the integration and independence between the different development platforms and systems.	A generic e-learning multiparadigm programming language system: IDEFIX project	NA:NA:NA:NA	2018
Joseph L. Zachary:Peter A. Jensen	Online courses have proliferated across all disciplines in recent years. One commonly-used approach for creating an online course is to build a web site containing as much course information---assignments, solutions, lecture notes, streaming videos, and the like---as possible. The goal of this type of course is to replicate online, to the maximum extent possible, the classroom experience. Online courses built this way exploit the communications capabilities of networked computers. We believe, however, that online courses should also strive to exploit the computational capabilities of computers. That is, online courses should provide value-added components that make possible learning experiences beyond what is feasible in the traditional classroom. We describe such an online course, called Creating Interactive Web Content, that we created and have taught successfully for the last three years. It is a general enrollment course that uses HTML and JavaScript as a vehicle for teaching elementary programming concepts.	Exploiting value-added content in an online course: introducing programming concepts via HTML and JavaScript	NA:NA	2018
Williams C. Judith:Bettina Bair:Jürgen Börstler:Timothy C. Lethbridge:Ken Surendran	NA	Client sponsored projects in software engineering courses	NA:NA:NA:NA:NA	2018
Mordechai (Moti) Ben-Ari	While computing technology has undoubtedly changed the world in which we live, the changes have been exaggerated. Talk of a hi-tech internet-driven revolution during the last decade is inaccurate from a historical perspective: (a) It belittles previous technological achievements; for example, the landings on the moon between 1969-1972 were achieved with less computing capability than a PDA has today. (b) So much of the "new" technology dates back thirty years or more; for example, how many of our students know when the first email was sent? This loss of historical perspective has led to demands for an artifact-driven curriculum that I believe is inadequate for the education of future computer scientists and computational engineers. (The latter is a new term I wish to propose for people engaged in the scientifically-based design and construction of systems that perform computations. It is linguistically modeled on the terms mechanical and electrical engineer, and is intended to take the place of the term software engineer.) A comparison of the CC2001 curriculum with the curriculum of a traditional, "non-revolutionary" engineering discipline points to what I believe the future of CS education should be.	The concorde doesn't fly anymore	NA	2018
Roberta Evans Sabin	NA	Session details: Paired programming/ collaborative learning	NA	2018
Tammy VanDeGrift	Pair Programming has been successful in many introductory computer science courses. Its success has manifested in increased retention rates, better performance on programming tasks, increased confidence, and decreased frustration. This paper highlights experiences using pair programming coupled with individual written reports in a large, introductory computer science course. Through analysis of survey data and written reports, our study shows that students perceive benefits in pair programming, such as those documented earlier (social structure, peer help, less frustration, reduced workload). Regarding the written reports, students cited benefits such as a chance to summarize their project, to reflect on the code, and to use new vocabulary. We discuss what we learn about students' processes, their challenges, and the resources they use for supporting their learning.	Coupling pair programming and writing: learning about students' perceptions and processes	NA	2018
Neha Katira:Laurie Williams:Eric Wiebe:Carol Miller:Suzanne Balik:Ed Gehringer	In recent years, educators have increasingly used pair programming in their computer science courses. Pair programming has been shown to be beneficial for both the teaching staff and the students in the courses. Occasionally, though, students are not compatible with their partners. An extensive study was done at the North Carolina State University to provide guidance on forming student pairs to improve the chances that pairs will be compatible and have a productive work relationship. We examined compatibility among freshman, advanced undergraduate, and graduate students. We have found that the students' perception of their partner's skill level has a significant influence on their compatibility. Graduate students work well with partners of similar actual skill level. Freshmen seem to work better with partners with different Myers Briggs personality type. Students' self-esteem does not appear to be a major contributor to pair compatibility.	On understanding compatibility of student pair programmers	NA:NA:NA:NA:NA:NA	2018
William M. Waite:Michele H. Jackson:Amer Diwan:Paul M. Leonardi	Our industrial advisory boards tell us that our students are well prepared technically, but they lack important group work skills. Simply adding project courses and requiring that assignments be done in groups has not improved the situation. A careful study of student culture in Computer Science has uncovered barriers to collaboration, which can be overcome only by pervasive changes in the way we approach our curriculum.	Student culture vs group work in computer science	NA:NA:NA:NA	2018
Lucia Dettori	NA	Session details: Testing and debugging in CS1/ 2	NA	2018
Ryan Chmiel:Michael C. Loui	We conducted a study to demonstrate that formal training in debugging helps students develop skills in diagnosing and removing defects from computer programs. To accomplish this goal in an assembly language course, we designed multiple activities to enhance students' debugging skills. These activities included debugging exercises, debugging logs, development logs and reflective memos, and collaborative assignments. In a previous paper, we reported positive qualitative results. Students agreed that formal debugging training enhanced their debugging skills. In this paper, we present positive quantitative results that support our previous qualitative results. Students who completed the optional debugging exercises spent significantly less time on debugging their programs than those who did not. Furthermore, we develop a model of debugging abilities and habits based on students' comments in their debugging logs, development logs, reflective memos, and evaluation surveys. Students and educators could use the model to diagnose students' current debugging skills and take actions to enhance their skills.	Debugging: from novice to expert	NA:NA	2018
Jim Etheredge	It is generally known that most, if not all, beginning programming students have difficulty understanding and debugging programs. For many students the primary problem is that when a program executes, it is essentially a "black box". They know what they think they wrote, but their only clues to logic errors come from watching the output of the program. If there are problems, it is difficult for inexperienced programmers to trace the problem back to the source of the error(s). This paper presents CMeRun, a tool that allows the user to see each statement in a program as it executes. This tool will allow beginning students to master coding and debugging skills much faster since it allows them to "look into" a program as it executes. Having this kind of insight into program execution will improve understanding, decrease development time, and reduce student frustration.	CMeRun: program logic debugging courseware for CS1/CS2 students	NA	2018
Stephen H. Edwards	Introductory computer science students rely on a trial and error approach to fixing errors and debugging for too long. Moving to a reflection in action strategy can help students become more successful. Traditional programming assignments are usually assessed in a way that ignores the skills needed for reflection in action, but software testing promotes the hypothesis-forming and experimental validation that are central to this mode of learning. By changing the way assignments are assessed--where students are responsible for demonstrating correctness through testing, and then assessed on how well they achieve this goal--it is possible to reinforce desired skills. Automated feedback can also play a valuable role in encouraging students while also showing them where they can improve.	Using software testing to move students from trial-and-error to reflection-in-action	NA	2018
Robert Bryant	NA	Session details: HCI	NA	2018
D. Scott McCrickard:C. M. Chewar:Jacob Somervell	Reacting to challenges that have been observed in human-computer interaction (HCI) education, as well as the multidisciplinary design, science, and engineering underpinnings, we investigate a pedagogical approach based on case methods. Our study of various case method techniques in an undergraduate HCI class provides insights into challenges that can be expected in the employment of case methods, student learning outcomes, and considerations for HCI curriculum planning. In general, case methods show great promise with a wide variety of topics, and we present broad recommendations for future work that will improve integration of HCI professional practice, research, and education.	Design, science, and engineering topics?: teaching HCI with a unified method	NA:NA:NA	2018
Mary Beth Rosson:John M. Carroll:Con M. Rodi	A challenge in teaching usability engineering is providing appropriate hands-on project experience. Students need projects that are realistic enough to address meaningful issues, but manageable within one semester. We describe our use of online case studies to motivate and model course projects in usability engineering. The cases illustrate scenario-based usability methods, and are accessed via a custom browser. We summarize the content and organization of the case studies, several case-based learning activities, and students' reactions to the activities. We conclude with a discussion of future directions for case studies in HCI education.	Case studies for teaching usability engineering	NA:NA:NA	2018
L. M. Leventhal:J. Barnes:J. Chao	Term projects in an undergraduate Usability Engineering (UE) course provide opportunities for students to put the abstract ideas of what they have learned in class into practice. Projects provide students with opportunities to learn that the process of usability engineering is rarely as smooth as it would seem in the abstract. Moreover, term projects give students the opportunity to learn about specific methodologies and notations.One critical phase of the term project is the user interface specification; in our undergraduate UE course we have found the specification phase to be a significant pedagogic challenge. Key elements to that challenge are: 1) Presenting the project requirements in such a way that the students can generate a specification, 2) Defining the form and format for student work, 3) Teaching the process of specification and 4) Assessing the students' work. In this paper, we describe our approach to each of these four challenges. Since 1996, we have had good success with our approach; however, student data suggests that students still find the UE specification process difficult. In Spring 2003, we added some extra steps in our process that seem to lead to greater student understanding and success.	Term project user interface specifications in a usability engineering course: challenges and suggestions	NA:NA:NA	2018
Nick Parlante:David Matuszek:Jeff Lehman:David Reed:John K. Estell:Donald Chinn	NA	Nifty assignments	NA:NA:NA:NA:NA:NA	2018
Steve Cunningham:Ernest McDuffie:Harriet Taylor	This session will highlight programs in the National Science Foundation EHR Division of Undergraduate Education and CISE Division of Experimental and Integrative Activities that are of interest to college faculty, discussing the requirements and guidelines for programs in these areas. It will include a presentation of the characteristics of a competitive proposal and the proposal and review processes, and participants will be encouraged to explore their ideas with the presenters.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Eydie Lawson:Doris K. Lidtke:Barbara Price	Programs in Information Technology (IT) have begun at many universities over the past decade and many are now eager for accreditation. This paper describes the activities undertaken in preparation for accreditation of IT programs by the Computing Accreditation Commission of ABET.	Information technology accreditation activities	NA:NA:NA	2018
John Hill	NA	Session details: New technologies for classroom instruction	NA	2018
Evan Golub	There are a wide variety of ways to present information at the front of a classroom. These include chalk on a blackboard, markers on a whiteboard, pens on transparencies, and computer projection systems. While computer-based presentation systems provide many opportunities both in and out of the classroom, there may also be many limitations. In-class spontaneity and dynamic exposition might be restricted. Class preparation time might increase dramatically when compared to the amount required to prepare handwritten materials. Certain presentation techniques may no longer be available. This paper will introduce a computer-based presentation system modeled on handwritten transparencies. It will then discuss how it addresses the above issues as well as how it can be used in and out of the classroom. These will be explored in the context of its use while teaching an undergraduate discrete mathematics course.	Handwritten slides on a tabletPC in a discrete mathematics course	NA	2018
Richard Anderson:Ruth Anderson:Beth Simon:Steven A. Wolfman:Tammy VanDeGrift:Ken Yasuhara	Computer science instructors frequently teach using slides displayed with a computer and a data projector. This has many advantages, e.g., ability to present prepared materials and ease of switching the display to a development environment during mid-presentation. However, existing computer-based presentation systems severely limit flexibility in delivery, hindering instructors' extemporaneous adaptation of their presentations to match their audiences. One major limitation of computer-based systems is lack of support for high-quality handwriting over slides, as with overhead projectors and other manual presentation systems. We developed and deployed Classroom Presenter, a Tablet PC-based presentation system that (1) combines the advantages of existing computer-based and manual presentation systems and (2) builds on these systems, introducing novel affordances. Classroom Presenter has been used in 25 Computer Science courses at three universities. In this paper we describe the system, summarize results from its deployment, and detail several novel uses of the system by instructors in computer science courses.	Experiences with a tablet PC based lecture presentation system in computer science courses	NA:NA:NA:NA:NA:NA	2018
Dave Berque:Terri Bonebright:Michael Whitesell	This paper describes our use of pen-based electronic classrooms to enhance several computer science courses. After presenting our motivation for undertaking this work, and its relevance to the growing interest in using tablet PC's in the classroom, we present an overview of our use of this technology to engage students during class. Finally, we present the students' reaction to the approach as measured through attitude surveys and a focus group.	Using pen-based computers across the computer science curriculum	NA:NA:NA	2018
Constance Bland	NA	Session details: Outcomes assessment	NA	2018
Nira Herrmann:Jeffrey L. Popyack:Bruce Char:Paul Zoski	We assess the effectiveness of an extensive redesign of the first Computer Programming course offered to computer science and computer engineering majors. Our goals were to improve student learning while reducing costs by making use of substantial Web-based course material and course management tools, including multi-level online modules that individualize instruction and enable students to self-schedule learning each week. DFW rates and costs were significantly reduced by the redesign.	Assessment of a course redesign: introductory computer programming using online modules	NA:NA:NA:NA	2018
Merry McDonald:Brian Dorn:Gary McDonald	During the past few years the number of courses offered online has greatly increased as technology has made delivery of such courses feasible. This paper discusses the experiences of the authors in teaching online courses for upper-division computer science students and reports results of a study comparing success of students in online courses to students in traditional courses.	A statistical analysis of student performance in online computer science courses	NA:NA:NA	2018
Barbara Moskal:Deborah Lurie:Stephen Cooper	This paper describes the evaluation of an NSF-sponsored educational research project. The primary focus of this project was to develop and evaluate a course curriculum designed to improve retention and performance for "at risk" introductory computer science majors. The results of this research suggest that the newly developed course and curriculum materials did improve students' performance and retention in computer science and their attitudes towards computer science.	Evaluating the effectiveness of a new instructional approach	NA:NA:NA	2018
Chenglie Hu	NA	Session details: Programming languages course	NA	2018
Amer Diwan:William M. Waite:Michele H. Jackson	The educational literature recognizes that people go through a number of stages in their intellectual development. During the first stage, called received knowledge or dualism, people expect knowledge to be handed to them by authority figures (thus "received") and think in terms of black and white (thus "dualism"). Our experience indicates that many computer science students are at this first stage of learning. To help students move beyond this stage, we describe a system and strategy, the PL-detective, to be used in a "concepts of programming languages" course. Assignments using this system directly confront students with the notion that there are often multiple equally good answers and that discussion with students (rather than asking the instructor) is an effective way of learning how to reason.	PL-detective: a system for teaching programming language concepts	NA:NA:NA	2018
Andrew T. Phillips	Three examples using mixed language programming in Maple and C are provided for the express purpose of highlighting, in a practical way, various issues normally discussed in a traditional programming languages class only as theoretical concepts. The three examples highlight concepts in parameter passing techniques, storage order choices, native machine types and sizes, and the handling of single and multi-dimensional arrays when dealing with legacy code.	Highlighting programming language issues using mixed language programming nn Maple and C	NA	2018
Eric Fernandes:Amruth N. Kumar	In order to facilitate problem-based learning in our Programming Languages course, we developed a tutor on static and dynamic scope. Static scope includes the scope of variables, the referencing environment of procedures and the scope of procedure names in a language that permits nesting of procedure definitions (e.g., Pascal, Ada). Dynamic scope includes the scope of variables, and the referencing environment of procedures. In this paper, we will describe the design of our tutor, and present the results of evaluating it for two semesters in our Programming Languages course.	A tutor on scope for the programming languages course	NA:NA	2018
Paul De Palma:Charles Frank:Suzanne Gladfelter:Joshua Holden	The panel discusses solutions to the problem of computer security education.	Cryptography and computer security for undergraduates	NA:NA:NA:NA	2018
Sally Fincher	This session showcases the projects that have received support from a SIGCSE Special Project Award in the previous year.	SIGCSE special projects showcase	NA	2018
Doug Baldwin:Bill Marion:Henry Walker	NA	Status report on the SIGCSE committee on the implementation of a discrete mathematics course	NA:NA:NA	2018
Jaime Niño	NA	Session details: Object-oriented issues	NA	2018
Michael R. Wick:Daniel E. Stevenson:Andrew T. Phillips	Because encapsulation is a difficult concept for students to implement correctly, we propose a set of seven software design rules to be used as an aid for teaching the appropriate design and use of encapsulation of object properties.	Seven design rules for teaching students sound encapsulation and abstraction of object properties and member data	NA:NA:NA	2018
Steven K. Andrianoff:Dalton R. Hunkins:David B. Levine	Programming contests have a long established role as co-curricular activities. But as programming methodology has changed, the programming contest problems have not reflected these changes. In this paper, we describe a way to modernize the traditional ACM-style contest while preserving the problem solving aspects. We do so by introducing a new type of problem that requires that solutions interact with pre-defined classes. We discuss the effects of this change on a contest conducted for high school students.	Adding objects to the traditional ACM programming contest	NA:NA:NA	2018
Stuart Hansen	This paper presents an object--oriented design for a solitaire version of the game of Set® The design is responsibility driven and illustrates polymorphism and several fundamental design patterns, including Flyweight, Strategy and Factory. It introduces each of these to solve particular problems within the design. The direct application of these concepts and the interest our students show in the game make Set an ideal example for classroom discussions and assignments.	The game of set®: an ideal example for introducing polymorphism and design patterns	NA	2018
Martha Kosa	NA	Session details: New curricular directions	NA	2018
Eric Roberts	In recent years, the languages, paradigms, and tools used to teach computer science have become increasingly complex. This added complexity puts pressure on designers of introductory courses, who must cover more material in an already overcrowded syllabus. The problem of complexity is exacerbated by the fact that languages and tools change quickly, which leads to profound instability in the manner in which computer science is taught. The situation has reached a point where it is difficult for individual computer science teachers to keep up. This paper examines the factors that promote complexity and instability in computer science. It then goes on to argue that we, as educators, must take responsibility for breaking this cycle of rapid obsolescence by developing a stable and effective collection of Java-based teaching resources that will meet the needs of the computer science education community. Such an initiative is already in progress under the direction of a special task force appointed by the ACM Education Board. The charter and current plans for that task force are being presented in a special session at this symposium.	The dream of a common language: the search for simplicity and stability in computer science education	NA	2018
Qusay H. Mahmoud:Wlodek Dobosiewicz:David Swayne	In this paper we describe our experience in the design and teaching of a new evolutionary introductory programming course in a new Distributed Computing and Communications Systems Technology program at the University of Guelph-Humber. This course is evolutionary and innovative because it integrates the use of HTML, JavaScript, and Java in a one-semester introductory computer programming course. This is a marked departure from the use of a single conventional, general purpose, programming language such as Java or C++. The course is designed with two goals in mind: to improve the students experience in their first computer programming; and to achieve retention in the new program.	Redesigning introductory computer programming with HTML, JavaScript, and Java	NA:NA:NA	2018
Timothy Davis:Robert Geist:Sarah Matzko:James Westall	A new approach to the design of the computing curriculum for a Bachelor of Arts degree is described. The approach relies extensively on problem-based instruction and computer graphics to teach key concepts in computer science. The novelty arises from the magnitude and origin of the problems to be integrated into the curriculum and the breadth of the impact across the curriculum. Results from a trial course, the first experiment with the new approach, are described. The course, Tools and Techniques for Software Development, is a sophomore-level course in programming methodology. Construction of a ray-tracing system (for generating synthetic images) was the vehicle chosen for the instruction.	?????: a first step	NA:NA:NA:NA	2018
Norman Neff	In our compiler course for undergraduate students, we use a class of attribute grammars to specify type information, target code, and other properties calculated for the source program. In the design of the compiler, a modification of the visitor design pattern allows us to transparently compute the attributes. Within our framework, implementation is straightforward; the emphasis of the course shifts to theory and specification. In several offerings of the course, students have implemented parts of a highly modular compiler for a small, statically typed object oriented language.	Attribute based compiler implemented using visitor pattern	NA	2018
Luiz Filipe M. Vieira:Marcos Augusto M. Vieira:Newton J. Vieira	Language Emulator, written in Java, is a toolkit to help undergraduate students to understand the concepts of Automata Theory. The software allows the manipulation of regular expressions, regular grammars, deterministic finite automata, nondeterministic finite automata with and without lambda transitions, and Moore and Mealy machines. Language Emulator introduces error-detecting and internationalization functionalities into automata tools. It has been accepted by 95% of students in a recent survey, indicating that it is a helpful toolkit in learning Automata Theory.	Language emulator, a helpful toolkit in the learning process of computer theory	NA:NA:NA	2018
Ryan Cavalcante:Thomas Finley:Susan H. Rodger	We describe the instructional software JFLAP 4.0 and how it can be used to provide a hands-on formal languages and automata theory course. JFLAP 4.0 doubles the number of chapters worth of material from JFLAP 3.1, now covering topics from eleven of thirteen chapters for a semester course. JFLAP 4.0 has easier interactive approaches to previous topics and covers many new topics including three parsing algorithms, multi-tape Turing machines, L-systems, and grammar transformations.	A visual and interactive automata theory course with JFLAP 4.0	NA:NA:NA	2018
Nathan Rountree:Tamar Vilner:Brenda Cantwell Wilson:Roger Boyle	NA	Predictors For success in studying CS	NA:NA:NA:NA	2018
Michael Goldweber:Martyn Clark:Sally Fincher	NA	The relationship between CS education research and the SIGCSE community	NA:NA:NA	2018
J. D. Chase:Dennie Templeton:Michael Peterson:Carlotta Eaton:Diane Wolff:Edward G. Okie	NA	Articulation through a body of knowledge: a report on an NSF ATE project involving Radford University and the Virginia Community College System	NA:NA:NA:NA:NA:NA	2018
Joel Adams	NA	Session details: Taming Java	NA	2018
Jeremy D. Frens	The next version of the Java language (Software Development Kit 1.5) will include generics, an enhanced for loop, boxing and unboxing of primitive types, typesafe enumerated types, static import, variable arguments, and metadata. This new version is a significant change of the language itself, adding many features that will impact the use of Java in computer science curricula. Fortunately, this new version provides several features that instructors have wanted in the language from its beginning.	Taming the tiger: teaching the next version of Java	NA	2018
Charles Reis:Robert Cartwright	An important question that must be addressed in a coherent computing curriculum is which programming environments to use across the curriculum. For Java, currently the most widely used language in computing education, a wide variety of professional integrated development environments (IDEs) are available---including the increasingly popular, open-source Eclipse environment. Professional IDEs for Java work well in advanced courses, but they are poorly matched to introductory courses because they deluge beginning students with a complex array of features. In addition, professional IDEs fail to shield students from distracting complications like the Java command line interface and Java console I/O. For this reason, many educators favor using a "pedagogic" IDE such as BlueJ or DrJava to provide a gentle introduction to the mechanics of Java programming.To eliminate the gap between pedagogic and professional IDEs for Java, we have developed a plug-in for Eclipse that supports exactly the same programming interface as DrJava. It features an Interactions pane for evaluating program statements and expressions "on the fly" as in DrJava. With this plug-in, Eclipse is accessible to beginning programmers. In this configuration, Eclipse is a suitable vehicle for teaching introductory programming--enabling Eclipse to be used across the entire spectrum of the computing curriculum.	Taming a professional IDE for the classroom	NA:NA	2018
Viera K. Proulx:Richard Rasala	We present software tools that support robust input processing and comprehensive testing in Java. The software includes the JPT library that supports error-checked typed input via console or GUI for all primitive types. This provides a robust encapsulation of typical interactive input requests encountered in introductory programming courses.The Java Power Framework and its extension allow the user to develop a comprehensive test suite independent of the target classes. The type-safe input framework allows us to implement an external iterator interface for several types of input data sources, including the console, a GUI, a file, and an internal data structure. Student's programs that implement various algorithms can then process data independently of its source: running tests on existing data structures; creating inputs interactively; or running stress tests and timing tests on large input files.	Java IO and testing made simple	NA:NA	2018
Bonita McVey	NA	Session details: Algorithms and data structures	NA	2018
Lester I. McCann	The efficiency of Internet search engines has made it trivial for students to find implementations of standard algorithms. This fact has led computer science educators to be more creative with their assignments to encourage students to create their own implementations. Unfortunately, excessive creativity can obscure learning objectives, particularly for less insightful students. We demonstrate that recasting the parallel sorting algorithm Columnsort for a uniprocessor environment provides the foundation for a variety of sorting assignments that can engage students while not obscuring educational objectives.	Contemplate sorting with columnsort	NA	2018
Constantine Roussos	Understanding growth of functions using the standard big O definition and notation is a challenge for many undergraduate students. This paper presents an approach to teaching growth of functions that utilizes equivalence classes and partial ordering, identifies those mathematical concepts students should comprehend in order to understand the principles underlying growth of functions, demonstrates pedagogical inadequacies in existing order of complexity notation and definitions and gives a rationale for restricting functions under consideration to positive-valued, monotonic increasing.	Teaching growth of functions using equivalence classes: an alternative to big O notation	NA	2018
Clifford A. Shaffer	This paper presents a family of programming projects appropriate to a sophomore-level data structures course, centered around the concept of a buffer pool serving as the access intermediary to a disk file. These projects provide a meaningful vehicle for practicing object-oriented design techniques and teach fundamental material on file processing and manipulating binary data. I begin with a concrete example, a heap stored on disk and mediated by a buffer pool. Several important intellectual concepts introduced by such a project are enumerated. Significant extensions and alternatives to the basic project are then described. I conclude with some observations on the role of file processing in modern CS curricula, and the significance of recent trends away from coverage of these topics.	Buffer pools and file processing projects for an undergraduate data structures course	NA	2018
Lisa Kaczmarczyk:Gerald Kruse:Dian Rae Lopez:Deepak Kumar	NA	Incorporating writing into the CS curriculum	NA:NA:NA:NA	2018
Mark Burge	NA	Pervasive computing in the undergraduate curriculum	NA	2018
Andrew Begel:Daniel D. Garcia:Steven A. Wolfman	NA	Kinesthetic learning in the classroom	NA:NA:NA	2018
Kim Kihlstrom	NA	Session details: Gender issues	NA	2018
Lori Pollock:Kathleen McCoy:Sandra Carberry:Namratha Hundigopal:Xiaoxin You	This paper describes the design, implementation, and impact evaluation of a summer program designed to attract high school girls to entering an information technology field for their college major. Our main contributions include an analysis of immediate and longer term surveys from both the student participants and the female teaching assistants, curriculum and pedagogy highlights of the program, and lessons learned from the planning and implementation experiences.	Increasing high school girls' self confidence and awareness of CS through a positive summer experience	NA:NA:NA:NA:NA	2018
Lauren Rich:Heather Perry:Mark Guzdial	Literature on women in computing points out that computer science is not being effective at attracting and retaining women. Introduction to Media Computation is a new CS1 aimed especially at non-majors which was designed explicitly to address the concerns of women in computer science, such as the lack of relevance and creativity. The course is contextualized around the theme of manipulating and creating media. Of the 121 students who took the course (2/3 female), only three students dropped (all male), and 89% completed the course with a grade C or better. This paper presents data from interviews with women in the Media Computation class, then contrasts with interviews in a more traditional CS1.	A CS1 course designed to address interests of women	NA:NA:NA	2018
Lilly Irani	Women in the first systems course in Stanford's CS core find themselves in a divided culture in which they are a minority. For these women, establishing an identity of competence becomes critical to defining a place in the CS culture and establishing legitimacy. Social factors such as gendered self-presentation and communication, rather than objective measures of ability, plays a large role in developing confidence. Only by understanding the role of such social factors can we develop strategies for creating a more inclusive CS culture in which women may thrive. Findings are drawn from surveys, interviews, and five years of enrollment data.	Understanding gender and confidence in CS course culture	NA	2018
Forbes Jeffrey	NA	Session details: Evaluating student programming skills	NA	2018
Mark A. Holliday:David Luginbuhl	Understanding the execution of an object-oriented program can be a challenge for a student starting a CS1 course. We believe that a type of diagram that we call a memory diagram can aid the student in understanding object-oriented programming and can assist the instructor in assessing the student's understanding.Memory diagrams focus on how, in an abstract sense, the memory of the machine changes as the program executes. Though memory diagrams are a simple idea, by careful use of shape and placement, a number of key points about the meaning of a program fragment can be conveyed visually. We have found a correlation between a student's ability to construct these diagrams and that student's comprehension of object-oriented concepts. We feel that this correlation indicates that memory diagrams can be used as an assessment technique that, in turn, can be used to improve student learning.	CS1 assessment using memory diagrams	NA:NA	2018
Christopher C. Ellsworth:James B. Fenwick, Jr.:Barry L. Kurtz	The Quiver (QUIz VERification) System is an Internet server for building, maintaining, and administering programming quizzes. It is similar to the online judges used for programming contests but differs in that it targets the classroom use of programming quizzes as a teaching aid and evaluation tool. It can provide very detailed feedback regarding quiz behavior so that the student can debug her program. This system is developed as part of the grant "Intra-Curriculum Software Engineering Education" funded by the National Science Foundation (DUE 0127439).	The Quiver system	NA:NA:NA	2018
Charlie Daly:John Waldron	A recent study [7] has shown that many computing students are not able to develop straightforward programs after the introductory programming sequence. Normal student assessment should have highlighted this problem, it did not, therefore normal assessment of programming ability does not work.We examine why current assessment methods (written exams and programming assignments) are faulty. We investigate another method of assessment (the lab exam) and show that this form of assessment is more accurate.We explain why accurate assessment is essential in order to encourage students to develop programming ability.	Assessing the assessment of programming ability	NA:NA	2018
Xuesong Zhang	NA	Session details: Artificial intelligence	NA	2018
Frank Klassner	This paper presents the RCXLisp library, an extension to Common Lisp that allows students to investigate a broad range of artificial intelligence and computer science topics using the LEGO MindStorms® platform. The library has two features that distinguish it from other third-party packages and languages designed by academics and hobbyists for programming the MindStorms platform. The first is that it supports both remote control and on-board programming of MindStorms robots. The second is that it supports targeted communication between multiple LEGO robots and command-center desktops. The package is also the only one to be integrated into most popular Common Lisp programming environments. This paper also summarizes student experiences with the package over the years 2000-2003 in an Artificial Intelligence course.	Enhancing lisp instruction with RCXLisp and robotics	NA	2018
Leen-Kiat Soh	Multiagent systems is an attractive problem solving approach that is becoming ever more feasible and popular in today's world. It combines artificial intelligence (AI) and distributed problem solving to allow designers (programmers and engineers alike) to solve problems otherwise deemed awkward in traditional approaches that are less flexible and centralized. In the Fall semester of 2002, I introduced a new game-based technique to my Multiagent Systems class. The class was aimed for seniors (with special permission) and graduate students in Computer Science, covering some breadth and depth of issues in multiagent systems. One of the requirements was participation in four Game Days. On each Game Day, student teams competed against each other in games related to issues such as auction, task allocation, coalition formation, and negotiation. This article documents my designs of and lessons learned from these Game Days. The Game Days were very successful. Through role-playing, the students were motivated and learned about multiagent systems.	Using game days to teach a multiagent system class	NA	2018
John M. D. Hill:Kenneth L. Alford	It is not uncommon to teach Artificial Intelligence (AI) by asking students to implement agents that embody intelligent behavior. This helps students gain a fuller understanding of the many concepts taught in the course. There are two issues with this approach that deserve attention. First, students come into an AI course knowing how to program in different languages and having different levels of programming ability. Second, it's useful for the students to have a single task environment for all of the agents they program. A solution to both issues lies in a distributed system where the agents are clients communicating with a server that handles a configurable task environment. This allows the students to program their agents in any language and on any platform they desire, so long as they can communicate with the task environment server. If the task environment can be configured to provide additional levels of complexity and difficulty, this allows students to program at a level they are comfortable with. They can then challenge themselves by incorporating more advanced capabilities into their agents. This paper presents just such a distributed and configurable task environment that was developed for an undergraduate AI course.	A distributed task environment for teaching artificial intelligence with agents	NA:NA	2018
Debra T. Burhans:Matt DeJongh:Travis E. Doom:Mark LeBlanc	NA	Bioinformatics in the undergraduate curriculum: opportunities for computer science educators	NA:NA:NA:NA	2018
John P. Dougherty:Thomas B. Horton:Daniel D. Garcia:Susan H. Rodger	NA	Panel on teaching faculty positions	NA:NA:NA:NA	2018
Eric Roberts	NA	Resources to support the use of Java in introductory computer science	NA	2018
Owen Astrachan	This is the thirty-fifth SIGCSE conference. Off-by-one bugs notwithstanding, it seems safe to assume that the members of the SIGCSE community have been teaching programming for at least 35 years. Have we improved the teaching of programming in that time? We have changed languages, we have occasionally changed paradigms, and the platform we use to teach programming is effectively infinitely more powerful than it was 35 years ago. However, if we use the SIGCSE proceedings as a snapshot of the state-of-the-art in teaching programming, it's possible to take a view that "the more things change the more they remain the same." In this talk I'll review what the community has had to say about teaching programming and what it is saying today. The community does not always speak in one voice, but there are established trends that illuminate what we as a community view as important. In 1974 David Gries discussed how we should teach programming and used this analogy: "Suppose you attend a course in cabinet making. The instructor briefly shows you a saw, a plane, a hammer, and a few other tools, letting you use each one for a few minutes. He next shows you a beautifully-finished cabinet. Finally, he tells you to design and build your own cabinet and bring him the finished product in a few weeks. You would think he was crazy!" As part of this talk I will demonstrate how I teach program-building and why I think that if we do not program in front of our students we cannot effectively teach programming. I hope to convince you that programming should be taught by demonstration and that I am not crazy.	Why i care about programming and how to teach it	NA	2018
William Oblitey	NA	Session details: Factors that lead to success in CS	NA	2018
Dawn McKinney:Leo F. Denton	The affective domain can be used to support the internalization of cognitive content and foster the development of curriculum and industry-related interests, attitudes, values, and practices. This study investigated correlations between affective factors and course grade. Interest, perceived competence, effort, lack of pressure, and value correlated significantly with CS1 course grades. Moreover, this study investigated the levels of these factors over the course of CS1. Almost all of the levels of these significant factors decreased significantly during the CS1 course as measured by pretests and posttests. Results of this study further indicated that the use of specific affective objectives and instructional strategies lessened these decreases.	Houston, we have a problem: there's a leak in the CS1 affective oxygen tank	NA:NA	2018
Phil Ventura:Bina Ramamurthy	This paper reports research on the effect of prior programming experience on success in an objects-first CS1. In an objects-first, approach students are taught from the very beginning to think in terms of objects and the fundamentals of object-oriented programming, encapsulation, inheritance, and polymorphism. These concepts are introduced before traditional selection and iterative constructs. The finding that students with prior programming experience do not do better than those without such experience flies in the face of conventional wisdom.	Wanted: CS1 students. no experience required	NA:NA	2018
Grant Braught:Craig S. Miller:David Reed	Educators are increasingly acknowledging that practical problems in computer science demand basic competencies in experimentation and data analysis. However, little effort has been made towards explicitly identifying those empirical concepts and skills needed by computer scientists, nor in developing methods of integrating those concepts and skills into CS curricula. In this paper, we identify a core list of empirical competencies and motivate them based on established courses outside of computer science, their potential use in standard CS courses, and their application to real-world problems. Sample assignments that facilitate the integration of these competencies into the CS curriculum are also discussed.	Core empirical concepts and skills for computer science	NA:NA:NA	2018
Carl Alphonce	NA	Session details: CS education research	NA	2018
Lynda Thomas:Mark Ratcliffe:Benjy Thomasson	This paper reports on an experiment in which first year programming students were given explicit encouragement to use Object (Instance) diagrams when tracing code in multiple-choice questions. We conjectured that by providing scaffolding in this technique, students would be helped to understand the code better and that they would then continue to draw their own diagrams in similar situations. This turned out not to be the case. Although generally students who draw diagrams do better in questions that test their understanding of code behaviour and object referencing, our intervention does not appear to have helped students and the students who were exposed to the intervention were not more likely to go on to use the technique themselves.	Scaffolding with object diagrams in first year programming classes: some unexpected results	NA:NA:NA	2018
David W. Valentine	A meta-analysis is performed on the last twenty years of SIGCSE Technical Symposium Proceedings, looking for the kind of CS Educational Research that has been done at the CS1/CS2 level. A six-point taxonomy of articles types is described. It is shown that about one in five of all CS1/CS2 presentations have used some kind of experimental model, albeit "experimental" is defined quite broadly. Over the last ten years both the number of experimental models, and the percentage of experimental models among CS1/CS2 has significantly increased. SIGCSE members are challenged to adopt a research model for their presentations to the Technical Symposium.	CS educational research: a meta-analysis of SIGCSE technical symposium proceedings	NA	2018
Peter DePasquale:John A. N. Lee:Manuel A. Pérez-Quiñones	In this paper, we evaluate the effects of applying programming language subsets to the programming environment used by novice (CS1) students in a closed-laboratory setting, as well as reducing the complexity of the user interface for the environment. Our goal in this effort was to assess if such interface and application-level changes adversely impact the student or hinder the later migration to a traditional professional-strength programming environment.We focus on the comparison of the quantitative data captured from the closed-laboratory sessions (assignment grades, number of syntax / semantic errors, and the number of compilation / execution attempts) involving subjects that used a new programming environment featuring a less complex interface in two forms: one lacking support of language subsets, and one supporting the application of language subsets.We found that while using the environment supporting the application of language subsets, there was no difference in the compilation-attempt rate, the number of errors did not increase, and student grades were equivalent between the experiment groups. Additionally, following a migration to the professional environment from the simplified environment, student grades were equivalent to those that had used the professional environment throughout the experiment. Student reaction to the experimental environment was very positive, especially related to the removal of unused tools and project management features.	Evaluation of subsetting programming language elements in a novice's programming environment	NA:NA:NA	2018
Soe Than	NA	Session details: Systems-level programming	NA	2018
Mehdi Amirijoo:Aleksandra Te"anoviC:Simin Nadjm-Tehrani	Real-time systems is a topic that one cannot overlook in an engineer's education. However, teaching real-time systems in an undergraduate syllabus is a challenging experience due to conflicting constraints placed on such a course. In this paper we present a new setup for laboratories in the real-time systems course that successfully meets the constraints of mass education, stable environment management, short time span for the labs, and still enables deep involvement of students in the central topic of resource allocation with high motivation.	Raising motivation in real-time laboratories: the soccer scenario	NA:NA:NA	2018
Nurul I. Sarkar:Trevor M. Craig	We are developing a series of interesting projects that give students a hands-on introduction to computer hardware concepts. Our projects are designed around the PIC16F84, a powerful 8-bit microcontroller chip that sells for less than $10. The projects are suitable for classroom use in introductory level courses about computer hardware. The effectiveness of these projects has been evaluated both formally by students (student evaluation forms) and informally - through discussion within the teaching team. The feedback from students indicates that the development and implementation of the projects were successful. This paper describes the details of the projects completed to date, their overall effectiveness and our plans for further projects.	Illustrating computer hardware concepts using PIC-based projects	NA:NA	2018
Saumya Debray	Performance is an essential aspect of many software systems, and it is important for programmers to understand performance issues. However, most undergraduate curricula do not explicitly cover performance issues---performance monitoring and profiling tools, performance improvement techniques, and case studies---in their curricula. This paper describes how we address this topic as part of a third-year programming course. We focus on tools and techniques for monitoring and improving performance, as well as the interaction between clean program design and performance tuning.	Writing efficient programs: performance issues in an undergraduate CS curriculum	NA	2018
Frances Grodzinsky:Ed Gehringer:Laurie S. King:Herman Tavani	NA	Responding to the challenges of teaching computer ethics	NA:NA:NA:NA	2018
Alyce Brady:Kim Bruce:Robert Noonan:Allen Tucker:Henry Walker	NA	The 2003 model curriculum for a liberal arts degree in computer science: preliminary report	NA:NA:NA:NA:NA	2018
David Ginat:Owen Astrachan:Daniel D. Garcia:Mark Guzdial	It is not rare that programming students are surprised when they encounter bugs in their program, which "looks completely right". Such a phenomenon expresses lack of awareness of analysis, design, and testing habits, which yield undesirable outcomes. The special session will focus on various programming aspects that may look seemingly right to students, but yield a buggy, wrong result. Various aspects will be displayed, illustrated, and discussed with the audience, in order to better understand the characteristics of bugs and ways of coping with them in our teaching.	"But it looks right!": the bugs students don't see	NA:NA:NA:NA	2018
Marcia Schlafmitz	NA	Session details: Pedagogic approaches to CS1	NA	2018
Michael Kölling:David J. Barnes	Various methods have been proposed in the past to improve student learning by introducing new styles of working with assignments. These include problem-based learning, use of case studies and apprenticeship. In most courses, however, these proposals have not resulted in a widespread significant change of teaching methods. Most institutions still use a traditional lecture/lab class approach with a strong separation of tasks between them. In part, this lack of change is a consequence of the lack of easily available and appropriate tools to support the introduction of new approaches into mainstream courses.In this paper, we consider and extend these ideas and propose an approach to teaching introductory programming in Java that integrates assignments and lectures, using elements of all three approaches mentioned above. In addition, we show how the BlueJ interactive programming environment [7] (a Java development environment aimed at education) can be used to provide the type of support that has hitherto hindered the widespread take-up of these approaches. We arrive at a teaching method that is motivating, effective and relatively easy to put into practice. Our discussion includes a concrete example of such an assignment, followed by a description of guidelines for the design of this style of teaching unit.	Enhancing apprentice-based learning of Java	NA:NA	2018
Emily Howe:Matthew Thornton:Bruce W. Weide	Among the many ways to focus CS1/CS2 content, two have been published that emphasize concepts of component-based software engineering. Courses based on these two instances of a "components-first" approach are remarkably similar in several crucial respects--which is surprising because they were developed independently and with very different objectives. Indeed, the two versions are based on virtually the same principles for content organization, and they share many common features that are unusual for CS1/CS2. Yet, they are notably different in other ways. Detailed analysis of similarities and differences suggests that it might be possible to transfer some of their claimed and documented advantages to other approaches within the programming-first paradigm for CS1/CS2, by rearranging the content of such courses in accord with the underlying principles of the components-first approach.	Components-first approaches to CS1/CS2: principles and practice	NA:NA:NA	2018
Tracy L. Lewis:Mary Beth Rosson:Manuel A. Pérez-Quiñones	This study examined ways to improve students' chances of success learning design concepts through the use of Object-Oriented Programming and Design (OOP&D) patterns by examining potentially effective ways to teach such patterns to novice programmers. Using hierarchical tree, complete-linkage analysis to survey a group of design experts, the study developed an order in which those experts believed thirty fundamental OOP&D patterns should be taught to optimize effective student learning. Once that basic order was identified, it became possible to divide the patterns into six sequential phases of patterns instruction to allow both maximal teaching and learning. Although the study did not present a conclusively effective approach for OOP&D teaching, it did provide information essential for future sequential phase patterns research.	What do the experts say?: teaching introductory design from an expert's perspective	NA:NA:NA	2018
Nurul Sarkar	NA	Session details: Networks	NA	2018
David A. Umphress:James H. Cross, II:Jhilmil Jain:Nischita Meda:Larry A. Barowski	This paper describes efforts to use industry wireless software development practices in the classroom. Nokia's OK Java 2 Platform Micro Edition (J2ME) application certification program was chosen for use in a core set of wireless software engineering courses. The adaptation process included 1) modifying Nokia OK application standards for classroom use as examples of what is expected of industry-quality software; 2) incorporating Nokia OK software development tools into a student-friendly software development environment; and 3) implementing in-house Nokia OK certification procedures as a basis for assessing student projects and providing feedback.	Bringing J2ME industry practice into the classroom	NA:NA:NA:NA:NA	2018
Brad Richards:Benjamin Stull	The rapid growth of wireless communications services and networks has led departments to consider offering elective courses on the topic. Textbooks exist that can help support such a course, but providing students with hands-on wireless networking experience can be difficult and expensive.We present the outline of a wireless networking course that can be offered with minimal resources, and describe our experiences using the approach. The students who took the initial offering of the course gained hands-on experience with wireless networking, did traditional sockets programming, and acquired the theoretical foundations of both traditional and wireless networking.Students implement a simplified IEEE 802.11 Wireless Ethernet MAC layer as a course project. In our case, the implementations took advantage of the Cybiko, a $50 wireless handheld computer targeted at teenagers. Our materials are currently being ported to other platforms, including Bluetooth-enabled Palms and networks of workstations. The latter platform will allow this project to be conducted without any special resources.	Teaching wireless networking with limited resources	NA:NA	2018
Sung Yoo:Scott Hovis	College students in computer networking courses are very interested in Internet technology because of the rapid growth in that area. Of particular interest is the need for practical experience in network design and configuration. A typical computer networking class curriculum includes the study of theory and the laboratory projects. The laboratory projects are designed to give students a better understanding of computer networks. Most of the laboratory projects are software projects. Furthermore it is common to find projects in the area of implementing an application layer protocol and protocol observations in many computer network course textbooks [7,11,12]. However, having a networking laboratory with the proper hardware facilities to teach real networking has several difficulties. These difficulties include funding for the hardware facility, physical space limitations, and physical accessibility of the lab facility [6,10]. We have designed a networking lab that can solve these problems. Old PCs have been converted to IP routers with the free router software Zebra [5]. The proposed laboratory system can be accessed through the Internet, and the network topology can be changed remotely.	Remote access internetworking laboratory	NA:NA	2018
James Howatt	NA	Session details: Operating systems	NA	2018
David Hovemeyer:Jeffrey K. Hollingsworth:Bobby Bhattacharjee	Undergraduate operating systems courses are generally taught using one of two approaches: abstract or concrete. In the abstract approach, students learn the concepts underlying operating systems theory, and perhaps apply them using user-level threads in a host operating system. In the concrete approach, students apply concepts by working on a real operating system kernel. In the purest manifestation of the concrete approach, students implement operating system projects that run on real hardware.GeekOS is an instructional operating system kernel which runs on real hardware. It provides the minimum functionality needed to schedule threads and control essential devices on an x86 PC. On this foundation, we have developed projects in which students build processes, semaphores, a multilevel feedback scheduler, paged virtual memory, a filesystem, and inter-process communication. We use the Bochs emulator for ease of development and debugging. While this approach (tiny kernel run on an emulator) is not new, we believe GeekOS goes further towards the goal of combining realism and simplicity than previous systems have.	Running on the bare metal with GeekOS	NA:NA:NA	2018
Kenneth A. Reek	This paper describes two design patterns that are powerful tools to help teach how semaphores are used to solve synchronization problems. The patterns are general enough to be used with many different types of problems, yet are simple enough for students to understand and apply effectively.	Design patterns for semaphores	NA	2018
Steven Robbins	Disk head scheduling is a standard topic in undergraduate operating systems courses. Disk drives were once fairly simple devices with little intelligence. Disk head scheduling and bad block mapping were done exclusively by operating systems. As disk drives became larger and faster, they took on some of these tasks. Modern drives often have a large cache and hide their internal structure from the outside world. In spite of changes in disk technology, the teaching of disk head scheduling has changed little over the last decade. This paper describes a disk head scheduling simulator that allows students to explore traditional disk scheduling algorithms as well as the consequences of modern disk technology. The simulator, which is written in Java and is freely available, can be run remotely from a browser or downloaded for local execution. We present methods for modifying the traditional curriculum to make the presentation of disk head scheduling more relevant and interesting.	A disk head scheduling simulator	NA	2018
Ernest Ferguson:Clifton Kussmaul:Daniel D. McCracken:Mary Ann Robbert	NA	Offshore outsourcing: current conditions & diagnosis	NA:NA:NA:NA	2018
Cathy Bareiss:Kris Powers:Scott Thede:Marsha Meredith:Christine Shannon:Judy Williams	NA	The computer science small department initiative (CS_SDI) report	NA:NA:NA:NA:NA:NA	2018
Allen Tucker:Dennis McCowan:Fadi Deek:Chris Stephenson:Jill Jones:Anita Verno	This special session will report on the work of the ACM K-12 Computer Science Curriculum Committee, which recently completed the design of a K-12 model curriculum [1]. This session is a follow-up to our special session at SIGCSE 2003, which presented the first draft of that curriculum design. This session differs from that one by emphasizing the next steps that must be taken to implement the recommendations in the model.	Implementation challenges for a K-12 computer science curriculum	NA:NA:NA:NA:NA:NA	2018
Peter J. Denning	The nearly three dozen core technologies of computing sit in a simple framework defined by great principles and by computing practices. The great principles are of two kinds, mechanics and design. Computing mechanics comprises computation, communication, coordination, recollection, and automation. Design principles address concerns for complexity, resilience, performance, evolvability, and security. Practices comprise programming, systems, modeling, innovating, and applying. This framework opens many new possibilities for teaching computer science, including new approaches to programming. The new CS curriculum at the Naval Postgraduate School is based on the framework presented here.	Great principles in computing curricula	NA	2018
Gene Spafford	Recent events have increasingly focused public attention on issues of information privacy, computer and network security, cybercrime and cyber terrorism. Yet despite all of this attention, there is some confusion about what is actually encompassed by those terms. There are some obvious components, such as cryptography and access control. However, the list of undisputed topics is not long or well-developed, and many questions arise as to whether a typical computer science department can offer all of the topics involved. That there are only a few universities that teach a comprehensive curriculum in these topics serves to illustrate the imprecise nature of the field. Many professionals have taken to describing it as "information security" or "information assurance" to distinguish that the focus is not on computers and networks, but on the information they hold and process.This talk will present a more comprehensive view of the area than simply within the confines of CS/CE. The speaker has been teaching information security for nearly 20 years and has developed a view that spans many traditional disciplines. The talk will present some of the reasons for that breadth of view, illustrated with examples taken from the recent CRA Grand Challenges Conference on Information Security. One conclusion from this talk is that getting good information security education widely implemented may not be simple, given current constraints and traditions within academia.	What *is* information security?	NA	2018
Dennis Bouvier	NA	Session details: Graphics	NA	2018
John Fisher:John Lowther:Ching-Kuang Shene	This paper presents our attempt in designing intuitive and interesting materials for teaching NURBS in an undergraduate course with the help of our tool DesignMentor. This approach does not require tedious mathematics and is based on learning-by-doing and visualization. Our approach was classroom tested and used world-wide in the last seven years.	If you know b-splines well, you also nnow NURBS!	NA:NA:NA	2018
John M. Zelle:Charles Figura	Students are very interested in cutting-edge technologies like virtual reality (VR), and VR has many potential uses in education. However, building VR applications has proved challenging due to both cost and technical skill barriers. Through a series of experiments in "shoestring" VR, we have developed methods of bringing an important facet of VR, stereoscopic display, to our students in a simple, cost-effective way. This paper describes our approach.	Simple, low-cost stereographics: VR for everyone	NA:NA	2018
Pourang Irani	NA	Session details: Courses for non-majors	NA	2018
Timothy J. Hickey	The thesis of this paper is that Scheme-based web programming is a worthy organizing topic for CS0 computer literacy courses. We describe an approach to introducing non-science majors to Computer Science by teaching them to write webpages using HTML and CSS and to also write applets and servlets using Scheme. The programming component of our approach is completed in about nine weeks of a thirteen week course, leaving time for a treatment of more traditional CS0 topics such as intellectual property, privacy, artificial intelligence, the limits of computability, PC architecture, Operating Systems, CMOS and logic circuits. We argue that the use of a high level scripting language (like Scheme) is essential to the success of this approach. We also argue that wide scale success in teaching web programming to non-majors could enhance the students productivity when they enter the job market, and hence this approach deserves further study.	Scheme-based web programming as a basis for a CS0 curriculum	NA	2018
Daniel T. Kaplan	This paper describes the motivation and design of an introductory computational course for natural, physical, and social scientists.	Teaching computation to undergraduate scientists	NA	2018
Deborah Trytten	NA	Session details: Courseware	NA	2018
Dale Reed:Sam John:Ryan Aviles:Feihong Hsu	Finding just the right example to answer a question can be difficult for CS1 students and teachers. For this to work well there must be an intuitive interface coupled to an appropriate set of focused examples. The examples then provide the scaffolding to enable students' discovery. CFX (C For eXample) provides the needed easy-to-use web based interface.A small pilot study showed that students using CFX could find answers to their programming questions in roughly half the time it took using a textbook. Freely distributed as open source software under the GNU General Public License [4], CFX can be used as a database authoring tool to capture a set of examples. Once the content is established, the interface as well as the data can be automatically exported to a standalone dynamic interface, using static, non-database content.The development of this system has been sponsored in part by NSF's CCLI program, with sample content developed in conjunction with McGraw-Hill.	CFX: finding just the right examples for CS1	NA:NA:NA:NA	2018
Leen-Kiat Soh:Hong Jiang:Charles Ansorge	This paper presents an innovative multiagent system to support cooperative learning among students both in the real classrooms and in distance education. The system, called I-MINDS, consists of a group of intelligent agents. A teacher agent monitors the student activities and helps the teacher manage and better adapt to the class. A student agent, on the other hand, interacts with the teacher agent and other student agents to support cooperative learning activities behind-the-scene for a student. Two I-MINDS innovations are (a) agent-federated "buddy group" formation and (b) automated ranking of questions and responses. We have tested our I-MINDS prototype with experiment and control groups to evaluate the impact of I-MINDS in learning. The results are encouraging.	Agent-based cooperative learning: a proof-of-concept experiment	NA:NA:NA	2018
Hilary Holz	NA	Session details: Events vs. GUIs	NA	2018
Judith Bishop:Nigel Horspool	This paper proposes that GUI development is as important as other aspects of programming, such as a sound understanding of control structures and object orientation. Far less attention has been paid to the programming structures for GUIs and certainly there are few cross language principles to aid the programmer. We propose that principles of GUIs can be extracted and learnt, and that they do enhance good programming practice. These principles have been implemented in our Views system which features an XML-based GUI description notation coupled with an engine that shields the programmer from much of the intricate complexity associated with events, listeners and handlers. The system is programmed primarily in C# for .NET, but is available in various forms for Java and for other platforms which support .NET through the SSCLI.	Developing principles of GUI programming using views	NA:NA	2018
Stuart Hansen:Timothy Fossum	The event driven paradigm is ubiquitous in modern software. Many texts introduce events when discussing graphical user interfaces, but the event paradigm extends well beyond that domain. Events also play important roles in operating systems, component based systems, reactive systems, middleware, web services and other fields. Computer science educators have an obligation to see that our students thoroughly understand the event paradigm and have some grounding in tools to develop event driven systems. This paper describes an upper division, computer science elective course in event driven programming. The course gives a comprehensive treatment of event driven systems. It appropriately captures the importance of the event paradigm and serves to integrate concepts from several different computing fields, including Programming Languages, Operating Systems, and Software Engineering. It also introduces students to advanced tools and packages designed for developing event driven systems. The course has been taught four times at our institution, having repeatedly received high marks from the students for both its conceptual and technical content.	Events not equal to GUIs	NA:NA	2018
Steven Robbins	NA	Session details: Visualization	NA	2018
Purvi Saraiya:Clifford A. Shaffer:D. Scott McCrickard:Chris North	Many algorithm visualizations have been created, but little is known about which features are most important to their success. We believe that pedagogically useful visualizations exhibit certain features that hold across a wide range of visualization styles and content. We began our efforts to identify these features with a review that attempted to identify an initial set of candidates. We then ran two experiments that attempted to identify the effectiveness for a subset of features from the list. We identified a small number of features for algorithm visualizations that seem to have a significant impact on their pedagogical effectiveness, and found that several others appear to have little impact. The single most important feature studied is the ability to directly control the pace of the visualization. An algorithm visualization having a minimum of distracting features, and which focuses on the logical steps of an algorithm, appears to be best for procedural understanding of the algorithm. Providing a good example for the visualization to operate on proved significantly more effective than letting students construct their own data sets. Finally, a pseudocode display, a series of questions to guide exploration of the algorithm, or the ability to back up within the visualization did not show a significant effect on learning.	Effective features of algorithm visualizations	NA:NA:NA:NA	2018
T. Dean Hendrix:James H. Cross, II:Larry A. Barowski	A framework for producing dynamic data structure visualizations within the context of a lightweight IDE is described. Multiple synchronized visualizations of a data structure can be created with minimal coding through the use of an external viewer model. The framework supplies a customizable viewer template as well as high-level APIs to a graph drawing library and the Java Debugger Interface. Initial classroom use has demonstrated the framework's ease of use as well as its potential to as an aid to student learning.	An extensible framework for providing dynamic data structure visualizations in a lightweight IDE	NA:NA:NA	2018
Thad Crews	NA	Session details: Distributed/parallel computing	NA	2018
Ahuva Tikvati:Mordechai Ben-Ari:Yifat Ben-David Kolikant	The Byzantine Generals algorithm for achieving reliability in the presence of faults is a classic topic in distributed computation and operating systems, not the least because of its colorful story. We describe a concept called virtual data structures, which are concrete representations of global data structures that is not actually maintained by the nodes of a distributed system, but are required in order to understand the correctness of algorithms. We show that the use of virtual trees for the Byzantine Generals algorithm can improve the understanding of this algorithm, and we describe a visualization of the trees.	Virtual trees for the byzantine generals algorithm	NA:NA:NA	2018
Christoph Kessler	We describe a parallel programming environment that implements the PRAM (Parallel Random Access Machine) model. The programming environment consists of a C-based PRAM programming language called FORK with a compiler, libraries and tools, and a fast PRAM simulator. The software is freely available for Unix workstations. The programming environment and a systematic way of writing structured parallel programs for the PRAM model are described in a recent textbook.Even though the programming environment was originally developed for a hardware research project, we show that the system is also especially suited for complementing classical theory courses on PRAM algorithms by programming exercises that allow students to experiment with PRAM-style parallelism and actually implement the algorithms as they appear in the theory textbooks.We describe how the environment was used in a recent graduate-level course on parallel algorithms, and report on feedback that we got from the participants.	A practical access to the theory of parallel algorithms	NA	2018
Linda Null	NA	Session details: Computer security	NA	2018
Paul J. Wagner:Jason M. Wudi	The development of a cyberwar laboratory exercise for a computer security course raises many pedagogical and management issues relating to the structure of the laboratory, its network and the exercise itself. We have designed, implemented and given such an exercise, and faced many of these issues. Evaluation of this exercise leads to multiple insights about the proper goals, structure and implementation of such an exercise.	Designing and implementing a cyberwar laboratory exercise for a computer security course	NA:NA	2018
Cathie LeBlanc:Evelyn Stiller	Computer and network security are important topics for computer professionals in US companies today. An adequate education in these topics would probably involve several classes at the undergraduate level but many computer science curricula do not have room to have numerous required courses. In addition, most computer science faculty members have not taken classes covering these topics and have never worked as professionals dealing with these areas. Dealing with these difficult issues can be a challenge, especially in a small college environment. In this paper, we present our experiences teaching computer security topics in both a system administration course and a computer security course.	Teaching computer security at a small college	NA:NA	2018
Ji Hu:Christoph Meinel:Michael Schmitt	IT security education is an important activity in computer science education. The broad range of existing security threats makes it necessary to teach students the principles of IT security as well as to let them gain hands-on experience. In order to enable students to practice IT security anytime anywhere, a novel tutoring system is being developed at the University of Trier, Germany, which allows them to get familiar with security technologies and tools via the Internet. Based on virtual machine technology, users are able to perform exercises on a Linux system instead of in a restricted simulation environment. This paper describes the user interface of the Tele-Lab IT Security, its system architecture and its functional components.	Tele-lab IT security: an architecture for interactive lessons for security education	NA:NA:NA	2018
Greg Butler	NA	Session details: CS: other points of view	NA	2018
Debra T. Burhans:Gary R. Skuse	The successful implementation of educational programs in bioinformatics presents many challenges. The interdisciplinary nature of bioinformatics requires close cooperation between computer scientists and biologists despite inescapable differences in the ways in which members of these professions think. It is clear that the development of quality curricula for bioinformatics must draw upon the expertise of both disciplines. In addition, biologists and computer scientists can benefit from opportunities to carry out interdisciplinary research with one another. This paper examines the role of computer science in undergraduate bioinformatics education from the perspectives of two bioinformatics program directors. Their respective programs exemplify two substantively different approaches to undergraduate education in bioinformatics due to the fact that they are at markedly different institutions. One institution is a large, technical university, offering both undergraduate and graduate degrees in bioinformatics while the other is a small, Jesuit liberal arts college with an undergraduate program in bioinformatics. Despite these differences there is considerable overlap with respect to the role of computer science. This paper discusses the ways in which computer science has been integrated into these two undergraduate bioinformatics programs, compares alternative approaches, and presents some of the inherent challenges.	The role of computer science in undergraduate bioinformatics education	NA:NA	2018
Roger Boyle:Martyn Clark	University education in computer science requires that students learn something of the nature of the discipline. We argue that, in addition to content knowledge, two of the many things the educated computer scientist might know about are the computer science pantheon and the metaphorical structure of the discipline's technical language.	CS++: content is not enough	NA:NA	2018
Yue-Ling Wong:Jennifer Burg:Victoria Strokanova	"Digital media" is one of those unfortunate terms that means different things in different contexts. This difficulty of definition -- along with its association with art, communication, architecture, and film -- puts digital media on the margins of traditional computer science curricula. This paper reviews the types of digital media programs current in higher education; proposes a curriculum model for digital media instruction that is firmly grounded in computer science at the same time that it interfaces easily with digital art; and describes specially-designed course material that serves the interdisciplinary need while preserving the rigor of the computer science discipline.	Digital media in computer science curricula	NA:NA:NA	2018
Thaddeus Pawlicki	NA	Session details: First year courses	NA	2018
Kenneth J. Goldman	We present a unique "concepts-first" curriculum that exposes students without programming experience to the intellectual depth and breadth of computer science through hands-on experience with software development. The curriculum is supported by JPie, a tightly integrated programming environment that enables live construction of Java applications through direct manipulation of graphical representations of programming abstractions. The curriculum, projects, and classroom experience are described.	A concepts-first introduction to computer science	NA	2018
Carl Burch:Lynn Ziegler	Over the last ten years, our department's breadth-first introductory course has evolved independently of other survey courses in computer science. Due to its success, we duplicated the ideas into our course for non-majors, and this has also proven successful. None of the published resources match our vision for these courses, and so the department has developed its own. In this paper, we describe the design of the majors course, and we introduce a variety of resources developed for both courses. These resources, which could be useful in many other courses also, are freely available through the Web.	Science of computing suite (SOCS): resources for a breadth-first introduction	NA:NA	2018
Adrienne Decker:Phil Ventura	We have recently launched a reorganized discrete structures course being taught in the computer science department for computer science majors. The main idea of the reorganization is to make the course relevant and productive for the computer science students. During the Spring of 2003, students who were taking both discrete structures and CS2 commented that taking both courses at the same time was helpful. An empirical investigation was conducted to see if there was a benefit to students taking both courses concurrently. The results show that there was a benefit to students taking both courses. The students who were taking both courses were performing better in discrete structures than those students who were not.	We claim this class for computer science: a non-mathematician's discrete structures course	NA:NA	2018
Peter J. Denning:Rudolph Darken:Eric Roberts:Mark Guzdial	Questions and answers about the great principles framework for computing and its impact on the organization and content of curriculum, with special attention to communicating our field, teaching programming, and appealing to a diverse audience.	Panel session: great principles in computing	NA:NA:NA:NA	2018
Joe Bergin:James Caristi:Yael Dubinsky:Orit Hazzan:Laurie Williams	NA	Teaching software development methods: the case of extreme programming	NA:NA:NA:NA:NA	2018
John Impagliazzo:Esther A. Hughes:Richard LeBlanc:Tim Lethbridge:Andrew McGettrick:Ann E. K. Sobel:Pradip K. Srimani:Mitchell D. Theys	NA	IEEE-CS/ACM computing curricula: computer engineering & software engineering volumes	NA:NA:NA:NA:NA:NA:NA:NA	2018
Helmar Burkhart	NA	Session details: Web-based technologies	NA	2018
Alfred C. Weaver	With NSF support we developed a hands-on laboratory to augment our CS453 Electronic Commerce Technologies course. We conducted weekly lab sessions that covered HTML, CSS, JavaScript, Perl, CGI, SQL, ASP, and Flash programming. Each topic was covered over a period of one to three weeks and each topic was supported by 10 to 26 individual programming exercises. Four teaching assistants provided real-time support during the laboratory period. Answers to all exercises were accessible on-line so that no student would be needlessly delayed by any particular problem. In this paper we discuss the laboratory's design goals, topical content, and the students' performance, reactions, and suggestions for improvement.	Electronic commerce software laboratory	NA	2018
Marty Humphrey	A significant challenge for Computer Science departments is how best to get new graduate students involved with their chosen research projects. Ideally, the incoming graduate students will as a whole have both a solid understanding of computing principles behind large-scale software development and a broad "skill set", e.g., for conducting systems-oriented research. This rarely occurs, due to the diversity of backgrounds of incoming students--even the most qualified applicant can have deficiencies. To address this problem, we have developed a first-year graduate course that balances and integrates practical considerations with basic principles of complex software system development. To make the discussions of designing, implementing, and evaluating complex software systems more concrete, we situate the core of the class in the context of Web Services. We are currently teaching this class for the second time, and, while there will always be open issues given the nature and scope of this class, we have received positive feedback from the students and the other members of the department. Students recognize the practicality of Web Services. Students also appreciate the research possibilities that arise while evaluating the state of the art with regard to Web Services.	Web services as the foundation for learning complex software system development	NA	2018
Christian Collberg:Stephen G. Kobourov:Suzanne Westbrook	A?goVista is a web-based search engine that assists programmers to find algorithms and implementations that solve specific problems. The search engine is not keyword based but rather requires users to provide (input ? output) samples that describe the behavior of their needed algorithm. The system is easy to use. To search for a particular algorithm or classify a combinatorial structure a user simply draws the query in a drawing pane on a web browser. The result of the search is a list of links to web resources describing or providing implementations of the algorithm.A?goVista has many interesting applications in an educational setting. The search engine can help research students classify obscure problems and locate algorithms that would otherwise be hard to find in textbooks. Students can also add calls in their own programs to A?goVista's database of executable problem specifications in order to dynamically check the correctness of their programs. Finally, instructors can use A?goVista to set novel assignments in algorithms and data structures classes.This paper briefly describes A?goVista and reports on its use in two algorithms and theory classes, one at the undergraduate and one at the graduate level.	AlgoVista: an algorithmic search tool in an educational setting	NA:NA:NA	2018
Mario Guimaraes	NA	Session details: Design & modeling in introductory courses	NA	2018
Dung "Zung" Nguyen:Mathias Ricken:Stephen Wong	We specify and implement a GUI application that simulates marine biological systems by making extensive use of object-oriented design patterns.The key design patterns are model-view-control, observer/observable, visitor, command, factory method and decorator. These design patterns help delineate the roles and responsibilities of the objects in the system, establish loose coupling between objects and arrange for the objects to communicate and cooperate with one another at the highest level of abstraction. The result is an application that exhibits minimal control flow, yet is powerful, robust, flexible and easy to maintain.Our work entails a non-trivial redesign of the current AP Computer Science Marine Biology Simulation case study and may serve as a case study for an introductory "object-first" curriculum.	Design patterns for marine biology simulation	NA:NA:NA	2018
John W. Coffey:Robert Koonce	This paper contains a description of MODeLeR, a Multimedia Object Design Learning Resource. The impetus for the creation of MODeLeR was to provide an authentic learning environment for the study of object-oriented design to augment intermediate level programming classes. The Resource affords active, collaborative learning experiences in object modeling with the goal of helping students to gain design capabilities in UML and to appreciate the need for design that they often do not perceive since the programs they write are relatively small. Students typically create several different UML diagrams. This paper describes the MODeLeR environment and a pilot study in its use. This paper contains results of both a quantitative study and a qualitative evaluation of the Resource.	MODeLeR: multimedia object design learning resource	NA:NA	2018
Jens Bennedsen:Michael E. Caspersen	The recommendations of the Joint Task Force on Computing Curricula 2001 encompass suggestions for an object-first introductory programming course. We have identified conceptual modeling as a lacking perspective in the suggestions for CS1. Conceptual modeling is the defining characteristic of object-orientation and provides a unifying perspective and a pedagogical approach focusing upon the modelling aspects of object-orientation. Reinforcing conceptual modelling as a basis for CS1 provides an appealing course structure based on core elements from a conceptual framework for object-orientation as well as a systematic approach to programming; both of these are a big help to newcomers. The approach has a very positive impact on the number of students passing the course.	Programming in context: a model-first approach to CS1	NA:NA	2018
Farid Hallouche	NA	Session details: Capstone courses	NA	2018
Michael Buckley:Helene Kershner:Kris Schindler:Carl Alphonce:Jennifer Braswell	In an attempt to bridge a local technology gap, potentially provide software to health care organizations serving the needs of handicapped clients in the Western NY area, and provide innovative and interesting projects for our capstone design classes, the Computer Science and Engineering department at the University at Buffalo (SUNY) began soliciting projects from local organizations in need. The projects have been integrated into required senior-level undergraduate courses. The practical benefits of project experience on student education, and the benefits of providing useful software to the target organizations, were anticipated, but the experiences have proven to be much more. Students have responded with intensity and philanthropy. The clients have participated in the classroom experience as both recipients and teachers. The program has rescued students at academic risk, and the school is enjoying an enhanced reputation in the community. This paper explores positive and cautionary issues regarding the effort.	Benefits of using socially-relevant projects in computer science and engineering education	NA:NA:NA:NA:NA	2018
Paolo A. G. Sivilotti:Bruce W. Weide	Rarely are the three pillars of academia---research, teaching, and service---addressed together, within one intellectually cohesive context in the graduate curriculum. Such a context is important for exposing students to the inter-relationships among these facets.This paper presents our experience with structuring graduate research seminar courses around the model of a "miniconference". Throughout the quarter, students pursue original research projects in the discipline of the seminar course. At the end of the quarter, students write their findings as technical conference papers, then act as the miniconference program committee in reviewing each other's submissions. Finally, the selected papers are presented at the miniconference. In addition to the model itself, we describe some variations in instantiation and an assessment of the benefits of this general approach.	Research, teaching, and service: the miniconference as a model for CS graduate seminar courses	NA:NA	2018
Richard Conn	This paper describes a mature Software Engineering Process that may be applied to capstone courses, student projects, and research projects in a university environment. This process, based in part on the Team Software Process of the Software Engineering Institute, features mature software engineering best practices, including extensive use of metrics to gain insight into process effectiveness and product quality. It is designed to be executed in a single 16-week semester, and it can easily be modified for a longer time frame. It is also designed for the academic culture: (1) it executes as a communicating sequential process running in parallel with and passing information to a series of in-class course presentations and (2) it takes into account that the students cannot devote full time to this one project. This process is independent of the computer language used and any project-specific technology (so it may be applied to software-only projects, robotics projects, smart device projects, embedded programming projects, and any other kind of software-intensive system project). This process is reusable without modification, or it may be tailored. To support tailoring, the process is described using meta data in a format that may be analyzed by automated tools to generate a hypertext document. This process has been tested by using it in a capstone course.	A reusable, academic-strength, metrics-based software engineering process for capstone courses and projects	NA	2018
Elizabeth S. Adams:Mary Granger:Don Goelman:Catherine Ricardo	NA	Managing the introductory database course: what goes in and what comes out?	NA:NA:NA:NA	2018
M. A. Pérez-Quiñones:Steven Edwards:Claude Anderson:Doug Baldwin:James Caristi:Paul J. Wagner	NA	Transitioning to an objects-early three-course introductory sequence: issues and experiences	NA:NA:NA:NA:NA:NA	2018
Kim B. Bruce	As instructors we work hard at teaching our students why and how to create appropriate abstractions in order to simplify program design and implementation. Interestingly, we sometimes neglect to take advantage of the fact that we can also use abstractions to benefit teaching and learning. In this talk I'll present some examples of useful abstractions that can make computer science concepts more concrete for novices. I'll also discuss the importance of understanding and using languages that provide support for creating abstractions in developing software.	Using abstractions to make concepts concrete	NA	2018
Sei-Jong Chung	NA	Session details: Compiler technology	NA	2018
Sara Miner More:Tim Pevzner:Alin Deutsch:Scott Baden:Paul Kube	For two years, we have been teaching a quarter-long compiler construction course where students implement an interpreter for a variant of the XML query language XQuery. Our goal is to motivate students' interest in the course by exposing them to an interesting and powerful new language which they see as relevant to potential future experiences. In this paper, we first explain the workings of the course itself, and then describe some pedagogically interesting variants of the XQuery language. We close with a discussion of challenges faced and conclusions.	Building an XQuery interpreter in a compiler construction course	NA:NA:NA:NA:NA	2018
Tyson R. Henry	Building a compiler for a domain specific language (a language designed for a specific problem domain) can engage students more than traditional compiler course projects. Most students feel that compiler courses are irrelevant because they are not likely to get a job writing compilers[2]. However, the technologies used to construct a compiler are widely applicable [2,5]. Using a domain specific language demonstrates to students the wide applicability of compiler construction techniques. This paper presents the results of using a domain specific language in an upper division compiler course.	Teaching compiler construction using a domain specific language	NA	2018
Elizabeth White:Ranjan Sen:Nina Stewart	In this paper, we present a novel approach that enables students in graduate compiler courses to examine and experiment with a real compiler without becoming overwhelmed by complexity. The key to the idea is the use of a debugger directly on a compiler during the compilation process. By providing instructions on breakpoints and variables of interest, the student is only shown the relevant portions of the compiler; the rest is hidden. We describe our strategy of using exercise sessions targeted toward illustration of core compiler concepts such as lexical analysis, parsing and code generation.	Hide and show: using real compiler code for teaching	NA:NA:NA	2018
Brian Rosmaita	NA	Session details: Accessibility	NA	2018
Robert F. Cohen:Alexander V. Fairley:David Gerry:Gustavo R. Lima	This paper describes our efforts to integrate software accessibility into the CS1 curriculum. Accessibility is an important aspect of modern software systems for both legal and ethical reasons. The acceptance of Java as language for CS1 gives us the opportunity to teach accessibility from the beginning, since Java Accessibility is simple and integrated into Swing components. We present simple guidelines on how to incorporate Accessibility into a Java based CS1, and describe programming projects that incorporate accessibility.	Accessibility in introductory computer science	NA:NA:NA:NA	2018
Susan M. Harrison	While some web page or user interface design courses include a lecture or two highlighting issues related to users with visual impairments, it is rare that such courses make this a recurring theme. This paper describes how a web page design course weaves the idea of designing for screen reader users throughout the entire course with minor changes to the standard curriculum of the course. Included are examples of how the eyes of the students are opened to the world of blind users, to the requirements of the law, to the code to make pages accessible, and to ways to test accessibility.	Opening the eyes of those who can see to the world of those who can't: a case study	NA	2018
Mary Anne L. Egan	More students with Asperger's Syndrome are entering higher education and a majority of these students are choosing a computer science curriculum. With an increasing number of students with disabilities in the classroom, it is important to understand the particular aspects of a disability that will affect classroom situations. This paper presents common characteristics of students with Asperger's Syndrome and offers techniques that will maximize the student's educational experience and minimize disturbance to other students.	Students with Asperger's syndrome in the CS classroom	NA	2018
Joan Krone	NA	Session details: Teaching experimentation	NA	2018
Robert Pastel	Undergraduate computer science students have few opportunities to experience scientific investigation and computer science research. A human-computer interaction (HCI) course can offer many opportunities for research that are accessible to undergraduate students, and because of the similarity between the design and research processes, a design project based HCI course is particularly suited to introducing undergraduate computer science students to the research process. In this paper, we describe and discuss the challenges of integrating research projects into a design HCI course. We also present example research projects and discuss the feedback form students attending the course.	Integrating science and research in a HCI design course	NA	2018
Stuart Hansen	Many instructors use program runtimes to illustrate and reinforce algorithm complexity concepts. Hardware, operating systems and compilers all influence the runtimes, but generally not to the extent of making the data difficult to interpret. The Java virtual machine adds an additional layer of software, making it much harder to see the relationship between the runtimes and the underlying algorithm. This paper presents some of the basic issues the author and his students have encountered when analyzing Java program runtimes and briefly discusses strategies to address them.	Interpreting Java program runtimes	NA	2018
Grant Braught	An argument is made for integrating the study of empirical skills and concepts into the computer science curriculum. With reference to past work an incremental approach is advocated for the study of these skills and concepts. A unique assignment that exemplifies the advocated approach is presented. This assignment, based on the study of random walks, is intended to introduce empirical investigation as early as is possible, during the first week of the first course. Two extensions to this assignment, one for the first course and one for a programming languages course, are discussed and used to illustrate the advocated incremental approach.	Teaching empirical skills and concepts in computer science using random walks	NA	2018
Eric Roberts:Kim Bruce:Rob Cutler:James H. Cross, II:Scott Grissom:Karl Klee:Susan Rodger:Fran Trees:Ian Utting:Frank Yellin	SIGCSE 2004 marked the official announcement of the ACM Java Task Force, which is working to develop a stable collection of pedagogical resources that will make it easier to teach Java to first-year computing students. The Java Task Force has received funding from the ACM Education Board, the SIGCSE Special Projects Fund, and the National Science Foundation (NSF Award DUE-0411905). This session offers an update on the work of the Java Task Force over the past year and provides an opportunity for community feedback prior to the publication of the final report in June 2005.	The ACM java task force: status report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Mohammad Neilforosham	NA	Session details: Databases	NA	2018
Thomas J. Marlowe:Cyril S. Ku:James W. Benham	Courses in Relational Databases largely use a domain-specific design approach different from that used in the rest of the curriculum. Use of the Unified Process, UML, and Design Patterns as a pedagogical approach for Databases can leverage previous student experience with design, make knowledge from Database courses more immediately relevant elsewhere, and create greater continuity across the curriculum. This approach allows issues in logical design and in implementation to be more easily connected with similar concerns in other courses (for example, Software Engineering), and supports greater and easier transfer of design between Relational and Object-Oriented Databases, and between databases and embedding applications.	Design patterns for database pedagogy: a proposal	NA:NA:NA	2018
Suzanne W. Dietrich:Susan D. Urban:Hua Ma:Yang Xiao:Shama Patel	The relationship between XML and database management systems has become an important topic for coverage at the undergraduate level. This paper presents an approach to teaching the use of XML through the study of data exchange. After a brief review of XML, the paper provides a tutorial on the different features that are provided in major relational database products for the import and export of XML, providing a discussion of how these features can be used as implementation exercises for students. In addition to addressing the use of XML for data exchange in relational systems, the paper also provides an overview of several teaching tools that are also used in the study of XML for object-oriented data and also for the exchange of object-oriented and object-relational data.	Exploring XML for data exchange in the context of an undergraduate database curriculum	NA:NA:NA:NA:NA	2018
Claire Kenny:Claus Pahl	Universities are increasingly offering courses online. Feedback, assessment, and guidance are important features of this online courseware. Together, in the absence of a human tutor, they aid the student in the learning process. We present a programming training environment for a database course. It aims to offer a substitute for classroom based learning by providing synchronous automated feedback to the student, along with guidance based on a personalized assessment. The automated tutoring system should promote procedural knowledge acquisition and skills training. An automated tutoring feature is an integral part of this tutoring system.	Automated tutoring for a database skills training environment	NA:NA	2018
M. Guzdial	NA	Session details: Contrasting women's experiences in computer science at different institutions	NA	2018
Ela Zur:Lilly Irani:Lecia Barker:Mark Guzdial	The SIGCSE community has produced much analysis of the dynamics causing women to choose Computer Science in disproportionately low numbers. In truth, we have learned that the factors are complex and contextual. This panel presents dynamics affecting women in four different institutions and explores the possibilities for common solutions to unique contextual problems.In the last five years, there has been extensive attention paid to the gender-gap in computer science courses (e.g., [1, 5]). Women are not succeeding in our introductory computer science courses, nor are they continuing in the curriculum, at the same rate as men. The reasons why have much to do with the context of individual courses, which can differ markedly between institutions. This panel explores how markedly different institutions can have similar outcomes, and how there may be some cross-institutional contextual issues that we might address.We will begin presenting an analysis of the results found in one university regarding the success of women in CS. Then we will present how classroom climate and the way CS is sometimes taught can lead to negative experience of studying CS at a different institution. We will suggest that interventions are necessary while students are building images of CS. We will end by presenting such an intervention that changes the classic CS1 course, and leads to changing the focus of what we're teaching.	Contrasting women's experiences in computer science at different institutions	NA:NA:NA:NA	2018
Lillian (Boots) Cassel:Russell Shackelford:Robert H. Sloan	In recent years, the discipline of computing has matured to the point of having distinct sub elements, each of which is developing curriculum recommendations, accreditation criteria, conferences, professional societies and publications. In particular, five distinct curriculum projects range in status from completed some time ago Computing Curricula 2001: Computer Science (CS-2001)[4] and IS 2002 Model Curriculum and Guidelines for Undergraduate Degree Programs in Information Systems (IS-2002)[1]), through almost completed as of the writing of this special session proposal, and very likely to be published by the time of SIGCSE 2005 Computing Curricula 2004: Software Engineering [2] and Computing Curricula: Computer Engineering [5]) to one that will likely be finished in late 2005 or early 2006 Computing Curricula: Information Technology). More broadly, recent work in the UK to identify the variety of computing related programs currently offered in British universities identified 2,400 distinct program names [3].We are making an interim report on, and seeking input into, a project to keep the family of computing related disciplines together. This project is partially funded by the National Science Foundation (NSF grant 0338546, Special Project: All in the Family: A unified representation of the computing and information related disciplines), and is being run by a joint task force from several professional societies, with ACM taking the lead.Very roughly, the goals of the project are to provide a synthesis of all that is computing, and various ways of organizing and visualizing that synthesis. This project began in late 2003, and got started in earnest in early 2004. We anticipate completing the work late in 2005 or early in 2006. Thus SIGCSE 2005 is the perfect time for us both to report on our work to date, and to get valuable feedback from the community.	A synthesis and ontology of all of computing	NA:NA:NA	2018
Bina Ramamurthy	NA	Session details: Networks	NA	2018
Tamer Elsharnouby:A. Udaya Shankar	Networking course projects are usually described by an informal specification and a collection of test cases. Students often misunderstand the specification or oversimplify it to fit just the test cases. Using formal methods eliminates these misunderstandings and allows the students to test their projects thoroughly, but at the expense of learning a new language. SeSF (Services and Systems Framework) is one way to overcome this obstacle. In SeSF, both implementations and services are defined by programs in conventional languages, thereby, eliminating the need to teach the students a new language. SeSF is a markup language that can be integrated with any conventional language. The integration of SeSF and Java is called SeSFJava. SeSFJava provides a technique to mechanically test whether student projects conform to their corresponding specifications, thereby, providing the instructors with a technique for semi-automated grading.We present a four-phase transport protocol project, and describe how SeSFJava is used in specifying, testing and grading the different phases of this project. The use of SeSF significantly (1) increased the percentage of students who completed the projects, (2) reduced their email queries about the specification, and (3) reduced the grading time.	Using SeSFJava in teaching introductory network courses	NA:NA	2018
Vishal D. Modak:David D. Langan:Thomas F. Hain	Mobile agents are a technology that is applicable in several courses. However, the development of applications using mobile agents can be difficult and time-consuming for students. To address this problem, a tool called Mobile Agent Development Environment (MADE) is presented. MADE facilitates the rapid creation of mobile agent based applications through a pattern-based code generating wizard. MADE organizes and offers the creation of mobile agents based on their characteristics and behavior. MADE is based on the IBM Aglets API. MADE also offers easy-to-use plug-ins for course specific domains such as database and networking. Initial testing has shown that 55% of the code needed for simple applications can be generated quickly and automatically using the described tool.	A pattern-based development tool for mobile agents	NA:NA:NA	2018
Martin Casado:Nick McKeown	The goal of our work is to give students a hands-on experience designing, deploying and debugging parts of the Internet infrastructure, such as an Internet router that routes real network traffic, or a security firewall. To do so normally requires that the students have access to snoop and generate raw network traffic, which is a risk to privacy and security. And it normally requires each student to have a dedicated computer, and to modify the kernel. The Virtual Network System (VNS) is a teaching tool designed for undergraduate and graduate networking courses. With VNS, each student can build a router (or any packet-processing device) in user-space, in their own private, protected topology, and process real Internet traffic. VNS has been used by over 500 students at Stanford and remotely from other universities. This paper describes the VNS tool, and our experiences using it in the classroom.	The virtual network system	NA:NA	2018
Chang Liu	NA	Session details: Capstone projects	NA	2018
William Combs:Robert Hawkins:Thomas Pore:Arik Schechet:Tim Wahls:Louis Ziantz	The course scheduling problem is simple to understand, yet complex enough to admit a wide range of solutions at varying levels of difficulty in implementation. In this work, we outline four types of student projects based on this problem, discuss how these projects can be approached and how they might integrate into a computer science curriculum, and describe two example projects that we have used.	The course scheduling problem as a source of student projects	NA:NA:NA:NA:NA:NA	2018
James Walden	Information warfare exercises, such as "Capture the Flag," serve as a capstone experience for a computer security class, giving students the opportunity to apply and integrate the security skills they learned during the class. However, many information security classes don't offer such exercises, because they can be difficult, expensive, time-consuming, and risky to organize and implement. This paper describes a real-time "Capture the Flag" exercise, implemented using a virtual network with free, open-source software to reduce the risk and effort of conducting such an exercise.	A real-time information warfare exercise on a virtual network	NA	2018
Ian Parberry:Timothy Roden:Max B. Kazemzadeh	Game programming classes have been offered at the University of North Texas continuously since 1993. The classes are project based, and feature collaborative coursework with art majors in UNT's School of Visual Arts. We discuss the design that enables them to simultaneously provide both training for students intending employment in the game industry, and a capstone experience for general computer science undergraduates.	Experience with an industry-driven capstone course on game programming: extended abstract	NA:NA:NA	2018
Timothy Stanley	NA	Session details: Computer organization	NA	2018
Linda Null:Karishma Rao	CAMERA, Cache and Memory Resource Allocation, is a collection of workbenches for cache mapping schemes (including direct, fully associative, and set associative) and virtual memory (including paging and TLBs). Its goals are to provide users with interactive tutorials and simulations to help them better understand the fundamental concepts of memory management. Implemented in Java Swing, these workbenches allow users to observe the processes of memory to cache mapping, and virtual memory using paging. The workbenches have proven useful in both introductory architecture classes and operating system classes. Students find CAMERA easy to use, even without the supplied user's guide. In the paper, we compare CAMERA to various existing systems and explore the software's features in detail in addition to discussing future enhancements.	CAMERA: introducing memory concepts via visualization	NA:NA	2018
Cecile Yehezkel:Mordechai Ben-Ari:Tommy Dreyfus	The EasyCPU visualization environment was developed for teaching computer architecture to novice students of computer science. During the development, the process of choosing the appropriate conceptual model of the computer for the visualization motivated research on the mental models that arise in the students as they learn. These mental models come from attempts by the students to make sense of the conceptual models presented to them by the software tool and their learning materials (textbook and exercises). The research findings support the view that the visualization was critical in enabling the construction of a viable mental model, a process that did not occur from textbook learning alone, because for the majority of students, their mental models were based upon their end-user experience rather than on the theoretical learning.	Computer architecture and mental models	NA:NA:NA	2018
Craig Zilles	This paper describes SPIMbot, an extension to James Larus's widely-used MIPS simulator SPIM, that allows virtual robots to be controlled by writing programs in the MIPS assembly language. SPIMbot was written to provide an engaging environment to motivate students to learn assembly language concepts. The SPIMbot tool allows the development of scenarios---in which students must program the robot to perform certain tasks---and provides the means to compete two robots against each other.In our sophomore/junior-level class, we structure the programming component as a collection of structured assignments that produce sub-components for the robot; these sub-components are then used in a final open-ended programming assignment to produce an entry for a SPIMbot tournament. In our experience, this has been an effective means of engaging students, with many students investing time to aggressively optimize their implementations. SPIMbot has been effectively used in large classes and its source code is freely available [7].	SPIMbot: an engaging, problem-based approach to teaching assembly language programming	NA	2018
Seth Bergmann	NA	Session details: Instructional technologies	NA	2018
Bhagyavati:Stan Kurkovsky:Christopher C. Whitehead	As Computer Science (CS) educators, we are involved in teaching a variety of undergraduate and graduate courses such as database management systems, networking, software development and web development courses. In addition to the traditional classroom environment, we use online and blended teaching methods to enhance student participation and improve the achievement of learning objectives. Typical online supplements to classroom instruction include posting homework, links to external resources, lecture notes and exams online. Asynchronous discussions and synchronous chat sessions provide additional forums outside the classroom for strengthening interaction and enriching the learning experience for students. This paper focuses on how asynchronous discussions can be used to enhance student participation in CS courses; increased participation leads to learning effectiveness, rich involvement with the course content, and student satisfaction.	Using asynchronous discussions to enhance student participation in CS courses	NA:NA:NA	2018
Michelle Wilkerson:William G. Griswold:Beth Simon	The University of Washington's Classroom Presenter lecturing system enables an active lecturing environment by combining a standard electronic slide presentation format with the capability for extemporaneous ink annotations by instructors and students using Tablet PCs. Thus, it can promote more interactive, student-centered learning. While many students may own laptops, few are yet Tablet devices. Also, Presenter uses multicast networking, which has availability and reliability issues. Ubiquitous Presenter (UP) expands Presenter via common web technologies to support non-Tablet audiences and enhance student control. UP enables students, using internet web browsers, to (a) synchronously or asynchronously view the slides and ink that are broadcast by the instructor, as well as (b) provide contextual submissions via text overlaid on the instructor's slides. The only compromises are that non-Tablet students cannot produce ink, and that professor ink is provided after a small time delay.	Ubiquitous presenter: increasing student access and control in a digital lecturing environment	NA:NA:NA	2018
Charles Hannon:Manfred Huber:Lisa Burnell	Bringing the excitement and challenges of active research into the classroom offers unique learning experiences. This is particularly true for undergraduate students not otherwise exposed to the processes, methods, and results of research. Designing and delivering such a course, however, presents many challenges. In this article, we describe our recent experience co-teaching a multi-institutional course in smart home technologies. From our experience and analysis of student evaluations, we offer a number of lessons learned and recommendations.	Research to classroom: experiences from a multi-institutional course in smart home technologies	NA:NA:NA	2018
O. Hazzan	NA	Session details: Using history of computing to address problems and opportunities	NA	2018
Orit Hazzan:John Impagliazzo:Raymond Lister:Shimon Schocken	NA	Using history of computing to address problems and opportunities	NA:NA:NA:NA	2018
Steve Cunningham	The National Science Foundation wants STEM faculty to be able to develop projects that will succeed in attracting funding from NSF programs. For the SIGCSE Symposium audience, this probably means being successful in being funded from the CCLI program. This special session gives attendees the opportunity to learn from those who have built successful CCLI-funded projects.	The voice of experience: national science foundation funded projects	NA	2018
Joseph Bergin:Clifton Kussmaul:Thomas Reichlmayr:James Caristi:Gary Pollice	Agile approaches to software development share a particular set of values [2,4]: Individuals and interactions over processes and tools. Working software over comprehensive documentation. Customer collaboration over contract negotiation. Responding to change over following a plan.Many agile methodologies were developed in response to so-called disciplined methodologies that emphasize detailed documentation and formal processes, and that are often associated with ISO compliance or the CMM. However, there is growing recognition that both agile and disciplined approaches have advantages, and that often a combination can be very effective [1].Many faculty are exploring and experimenting with ways to integrate agile concepts and practices into academic programs in areas such as computer science, software engineering, and information systems. This special session will help us work together in agile ways to better understand the importance and role(s) of agile concepts and practices, successful ways to incorporate them in academic settings, potential pitfalls, and key questions that should be explored further. We want to gather input from a wide range of people in different sub-disciplines and programs.We will begin with a very brief overview of agile concepts and practices, followed by brief statements from each of the five speakers, to give other participants a sense of the range of possibilities (25 min). Next, we will poll participants to identify a set of topics within agility that they want to discuss further (5 min). Participants will then gather into subgroups for each topic, and each subgroup will identify best practices, interesting ideas, and open questions for that topic (30-35 min). Each subgroup will then give a brief report to the entire group, and we will conclude with a few minutes of general discussion (10-15 min).	Agile development in computer science education: practices and prognosis	NA:NA:NA:NA:NA	2018
Fernando Nevada	NA	Session details: Software engineering projects	NA	2018
Thomas P. Way	The subject matter of a typical undergraduate software engineering course, while providing necessary background, can be quite dry. Team-based programming projects often complement the more theoretical textbook and lecture content by giving students valuable hands-on practice, albeit on a small scale and within a traditional classroom setting. This paper describes a company-based framework used in two semesters of a software engineering course. This approach incorporates a novel, collaborative framework to simulate the real-world experience of working for a medium-sized software design company or research laboratory, while giving students a vested interest in the overall outcome.	A company-based framework for a software engineering course	NA	2018
David Coppit:Jennifer M. Haddox-Schatz	A key goal of educators teaching software engineering is to provide students with useful experience that will benefit them after graduation. A key component of this experience is usually a class project that is meant to expose students to the issues associated with real software development efforts. Unfortunately, educators rarely have the time required to manage software projects in addition to their normal pedagogical duties. As a result, many software engineering courses compromise the project experience by reducing the team sizes, project scope, and risk. In this paper, we present an approach to teaching a one-semester software engineering course in which approximately 30 students work together to construct a moderately sized (22 KLOC) software system. This approach provides a more realistic project experience for the students, without incurring significant managerial overhead for the instructor. We present our experiences using the approach for the spring 2004 software engineering course at The College of William and Mary.	Large team projects in software engineering courses	NA:NA	2018
Marc Bernstein:Kelly M. FitzGerald:James P. Macdonell:Arturo I. Concepcion	It is difficult to teach students proper software engineering methodology in a classroom setting. Without hands-on experience, students may not understand why the software engineering process exists. By teaching students via a mock company experience, teaching software engineering can become a rewarding experience while showing the students how simple it is to follow the correct process. Here we show how in the microcosm of a mock software company it is possible to teach very real lessons about software engineering, unfamiliar technologies, teamwork and the realization that when a project ends, the code does not disappear.	AlgorithmA project: the ten-week mock software company	NA:NA:NA:NA	2018
Gary Skuse	NA	Session details: Computer security	NA	2018
Larry Gottschalk:Jigang Liu:Brahma Dathan:Sue Fitzgerald:Michael Stein	This paper presents a preliminary survey of computer forensics programs in North America. It summarizes existing requirements for associate, bachelor's, and master's degree programs as well as certificate programs. It briefly discusses factors which must be considered when introducing a new program (curriculum design, faculty, students, facilities, and budget).	Computer forensics programs in higher education: a preliminary study	NA:NA:NA:NA:NA	2018
J. Aycock:K. Barker	The University of Calgary introduced a controversial course in the fall of 2003 on computer viruses and malware. The primary objection about this course from the anti-virus community was that students were being taught how to create viruses in addition to defending against them. Unfortunately, the reaction to our course was based on a dearth of information, which we remedy in this paper by describing key pedagogical elements of the course.Specifically, we present four aspects of our course: how students are vetted for entry, operation of the course, course content, and the instructional materials used. In addition, we pay particular attention to the controversial course assignments, discussing the assignments and the need for balance, objectivity, security, and learning in a university environment. Our experiences with the course and future plans may be helpful for other institutions considering such course offerings. It should also provide opponents of the course with valuable information about the true nature of the course, the pedagogy used, and the value provided to the computer community as computer science graduates with this kind of expertise take their place as the next generation computer security experts.	Viruses 101	NA:NA	2018
Patricia Y. Logan:Allen Clarkson	Teaching "hacking" as a legitimate means of training students in how to protect a future employer's data assets has been introduced into courses with increasing frequency. The introduction of "red teaming" and attack-based exercises into information security courses presents a potential ethical problem. This paper explores the issues involved in designing an information security course with lab components that involve destructive actions.	Teaching students to hack: curriculum issues in information security	NA:NA	2018
Yana Kortsarts	NA	Session details: Algorithms and data structures	NA	2018
Chris Okasaki	Red-black trees and leftist heaps are classic data structures that are commonly taught in Data Structures (CS2) and/or Algorithms (CS7) courses. This paper describes alternatives to these two data structures that may offer pedagogical advantages for typical students.	Alternatives to two classic data structures	NA	2018
G. Michael Barnes:John Noga:Peter D. Smith:Jeff Wiegley	In this paper we propose using experiments with Balanced-Sample Binary Trees (BSBTrees) as assignments and lecture material in intermediate data structures courses (CS2/3). BSBTrees are composite data structures that have a temporarily constructed form that precedes their normal construction. We present them in the context of binary search trees. To do this we first investigate the retrieval properties of randomly generated binary search trees and show how temporary construction can improve both worst case and average case behavior. We provide a brief analysis of BSBTree performance and description of the classes that can be used for BSBTree implementation. Last we discuss the use of BSBTrees in CS2 and CS3 courses and a survey of student opinions about BSBTrees.	Experiments with balanced-sample binary trees	NA:NA:NA:NA	2018
Anany Levitin	The paper advocates a wider use of puzzles and puzzle-like games in teaching the analysis of algorithms. It discusses many specific examples---from classic puzzles of recreational mathematics to newly popular job interview brainteasers---which illustrate all major aspects of algorithm analysis.	Analyze that: puzzles and analysis of algorithms	NA	2018
Joe Oldham	NA	Session details: The first year: new ways to teach programming	NA	2018
Martin C. Carlisle:Terry A. Wilson:Jeffrey W. Humphries:Steven M. Hadfield	When students are learning to develop algorithms, they very often spend more time dealing with issues of syntax rather than solving the problem. Additionally, the textual nature of most programming environments works against the learning style of the majority of students. RAPTOR is a visual programming environment, designed specifically to help students envision their algorithms and avoid syntactic baggage. RAPTOR programs are created visually and can be executed visually by tracing the execution through the program. Required syntax is kept to a minimum. Students preferred expressing their algorithms visually, and were more successful creating algorithms using RAPTOR than using a traditional language or writing flowcharts.	RAPTOR: a visual programming environment for teaching algorithmic problem solving	NA:NA:NA:NA	2018
Mark W. Bailey	To become proficient programmers, novices must develop the skills of writing, reading, debugging, and testing code. We believe that learning to write short pieces of code correctly the first time helps strengthen all of these skills. In this paper, we describe a type of exercise, called IRONCODE, that helps develop the code-once skill. We describe the exercise, the programming environment, its implementation, and our experiences using IRONCODE in a second semester programming class.	IRONCODE: think-twice, code-once programming	NA	2018
Jens Bennedsen:Michael E. Caspersen	One of the most important goals of an introductory programming course is that the students learn a systematic approach to the development of computer programs. Revealing the programming process is an important part of this; however, textbooks do not address the issue -- probably because the textbook medium is static and therefore ill-suited to expose the process of programming. We have found that process recordings in the form of captured narrated programming sessions are a simple, cheap, and efficient way of providing the revelation.We identify seven different elements of the programming process for which process recordings are a valuable communication media in order to enhance the learning process. Student feedback indicates both high learning outcome and superior learning potential compared to traditional classroom teaching.	Revealing the programming process	NA:NA	2018
O. Hazzan	NA	Session details: Challenges to computer science education research	NA	2018
Vicki L. Almstrum:Orit Hazzan:Mark Guzdial:Marian Petre	NA	Challenges to computer science education research	NA:NA:NA:NA	2018
Steve Cunningham:Diana Gant:Harriet Taylor	This session will highlight programs in the National Science Foundation EHR Division of Undergraduate Education and CISE Division of Computer and Network Systems that are of interest to college faculty, discussing the requirements and guidelines for programs in these areas. It will also include a presentation of the characteristics of a competitive proposal and the proposal and review processes, and participants will be encouraged to explore their ideas with the presenters.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Bill Marion	This session is a progress report from the first committee created under the SIGCSE Committee Initiative. The Committee on Implementation of a Discrete Mathematics Course is charged with developing implementation models and materials for the one-semester discrete math course proposed in Computing Curriculum 2001. At the time of the session, the Committee will have completed about three-fourths of its task. In this session the committee will present a number of course models which, for each, will include a syllabus/course outline and a list of possible applications which connect the mathematics to fundamental ideas in computer science. Comments and additional input from the SIGCSE community will be solicited. Presentation will by Bill Marion, one of the two committee co-facilitators and two other committee members.	Status report on the SIGCSE committee on the implementation of a discrete mathematics course	NA	2018
Mordechai (Moti) Ben-Ari	While computing technology has undoubtedly changed the world in which we live, the changes have been exaggerated. Talk of a hi-tech internet-driven revolution during the last decade is inaccurate from a historical perspective: (a) It belittles previous technological achievements; for example, the landings on the moon between 1969 and 1972 were achieved with less computing capability than a PDA has today. (b) So much of the "new" technology dates back thirty years or more; for example, how many of our students know when the first email was sent? This loss of historical perspective has led to demands for an artifact-driven curriculum that I believe is inadequate for the education of future computer scientists and computational engineers. (The latter is a new term I wish to propose for people engaged in the scientifically-based design and construction of systems that perform computations. It is linguistically modeled on the terms mechanical and electrical engineer, and is intended to take the place of the term software engineer.) A comparison of the CC2001 curriculum with the curriculum of a traditional, "non-revolutionary" engineering discipline points to what I believe the future of CS education should be.	The concorde doesn't fly anymore	NA	2018
Libby Shoop	NA	Session details: Software and techniques for upper level courses	NA	2018
Sharon Stansfield	This paper presents the structure, pedagogy and motivation for an introductory undergraduate course in Virtual Reality. The course is offered as an elective at the 400-level, hence students taking the course are juniors and seniors who have completed a substantial portion of their Computer Science curriculum. The course incorporates multiple components of VR theory and practice, including hardware and software survey and analysis, human perception, and applications. It also contains a semester-long, hands-on development component utilizing a specific virtual reality environment. In addition, because VR is a broad, multidisciplinary field of study, the course provides an ideal environment for incorporating capstone elements that allow undergraduate students to tie together many of the computing principles learned during their undergraduate academic careers.	An introductory VR course for undergraduates incorporating foundation, experience and capstone	NA	2018
Tin-Tin Yu:John Lowther:Ching-Kuang Shene	This paper presents the authors' introduction of photon mapping in an undergraduate computer graphics course, Software was designed as a pedagogical and demonstration tool which permitted students to practice and learn photon mapping. Classroom experience and examples that illustrate soft shadows, color bleeding, indirect illumination and caustic are also discussed.	Photon mapping made easy	NA:NA:NA	2018
Mark A. Holliday:Barry Wilkinson:Jeffrey House:Samir Daoud:Clayton Ferner	Grid computing is now mature enough and important enough to be studied as a full course at the undergraduate level for upper-level computer science majors. We have developed such a course, including a set of lecture slides, assignments, and assignment handouts specifically targeted for this audience. The sequence of assignments is a key part of the course. Some of the assignments are modifications of pre-existing work and others are completely new. We describe the key decisions we made about the course organization and content and describe the assignments. An important feature of the course is that it was geographically distributed with copies of the grid software installed at three campuses. Those campuses plus three others were receiving sites and included students and faculty associated with nine universities.	A geographically-distributed, assignment-structured undergraduate grid computing course	NA:NA:NA:NA:NA	2018
Martha Kosa	NA	Session details: On-line instruction	NA	2018
Curt Hill:Brian M. Slator:Lisa M. Daniels	In this paper, we describe a customized instructional content delivery system named ProgrammingLand with special emphasis on a program evaluation module named TorqueMOODa. The system is fully online and is used as a component of several classroom courses, as well the foundation of comparable distance education classes. The context of these systems is the early programming classes often taken by introductory Computer Science students, among others.	The grader in ProgrammingLand	NA:NA:NA	2018
Amruth N. Kumar	Researchers have been developing online tutors for various disciplines, including Computer Science. Educators are increasingly using online tutors to supplement their courses. Are online tutors effective? Can they help students learn? If so, what features contribute to their effectiveness? We will examine these questions in the context of an online tutor that we developed for introductory Computer Science. The tutor is designed to help students learn expression evaluation in C++/Java.We evaluated the tutor over several years, in multiple sections of Computer Science I each year. We used controlled tests with differential treatments, and used pre and post-tests to evaluate the effectiveness of the tutor. Our results show that online tutors indeed help students learn. Students who use the tutor for practice learn better than those who use a printed workbook. Students who receive both graphic visualization and text explanation learn better than those who receive only graphic visualization. Students who use graphic visualization learn better than those who receive no explanation. These results will be of interest to both developers and users of online tutors.	Results from the evaluation of the effectiveness of an online tutor on expression evaluation	NA	2018
Amer Diwan:Michele H. Jackson:William M. Waite:Jacob Dickerson	Last year we described the PL-Detective, a system for building exercises and demonstrations in a programming languages course. One of the main goals of the PL-Detective was to provide an experimental environment with which students could interact in order to discover the information that they needed to complete the exercise. In this paper we evaluate the PL-Detective with respect to this goal. We present data from a class of 29 groups of two or three students that used the PL-Detective for 11 exercises. Our data shows that students are both effective and efficient at getting information from the PL-Detective.	PL-detective: experiences and results	NA:NA:NA:NA	2018
Jaime Nino	NA	Session details: Object-oriented design and testing	NA	2018
Noa Ragonis:Mordechai Ben-Ari	This paper describes research into the influence of using static (class and object) visualization on understanding program flow in object-oriented programming. We found that the advantages of using the static visualization in the first stages of learning could become disadvantages in the advanced stages. The teacher must be aware of these pitfalls and plan the learning sequence accordingly. We think that the BlueJ learning environment that we used should be augmented with dynamic visualization so that students can coordinate the static and dynamic aspects of object-oriented programs.	On understanding the statics and dynamics of object-oriented programs	NA:NA	2018
Vladimir L. Pavlov:Anton Yatsenko	In this paper we present the original method of intensive hands-on training in Object-oriented Analysis and Design (OOA/OOD) with the Unified Modeling Language (UML). The method has been successfully used by the authors for three years. During the training, the students:go through the communication problems that are typical for large software development projects obtain the successful experience of applying UML to overcome these problems.The essence of the method is that a team of students is supposed to design a software system. They have several hours to complete the task. During this timeframe verbal and written communication is forbidden, and the UML is the only allowed language. This training is a kind of experiment for students -- they are to discover whether UML is "a real language" that is suitable and beneficial for a project team.The training was successfully delivered more than ten times in both academic and corporate environments and generated positive feedback from students and customers.	"The Babel experiment": an advanced pantomime-based training in OOA&OOD with UML	NA:NA	2018
Michael Wick:Daniel Stevenson:Paul Wagner	While the usage of unit-testing frameworks such as JUnit has greatly increased over the last several years, it is not immediately apparent to students and instructors how to best use tools like JUnit and how to integrate testing across a computer science curriculum. We have worked over the last four semesters to infuse testing and JUnit across our curriculum, building from having students use JUnit to having them write their own test cases to building larger integration and use case testing systems to studying JUnit as an example of good application of design patterns. We have found that, based on this increased presentation and structuring of the usage of JUnit and testing, students have an increased understanding and appreciation of the overall value of testing in software development.	Using testing and JUnit across the curriculum	NA:NA:NA	2018
Roxanne Canosa	NA	Session details: The first year: new approaches	NA	2018
Billy B. L. Lim:Chu Jong:Pruthikrai Mahatanankoon	Web services technology is a burgeoning technology that has received tremendous amount of attention in the software industry in recent years under the broader umbrella of service-oriented architecture (SOA). While Web services have been incorporated in many industries in the market place in the last few years, they are only beginning to appear in the academia, primarily in upper division and graduate CS curricula. In this paper, we share our belief that the Web services technology can and should be introduced early in a CS curriculum. We describe a number of scenarios that Web services can be integrated into CS1/CS2 to make them more interesting and more importantly, make the students better prepared for upper division classes and for the industry upon graduation. These scenarios can be incorporated without compromising the core materials presently covered in many CS1/CS2 sequence.	On integrating web services from the ground up into CS1/CS2	NA:NA:NA	2018
Kim B. Bruce:Andrea Danyluk:Thomas Murtagh	The approach to teaching recursion in introductory programming courses has changed little during the transition from procedural to object-oriented languages. It is still common to present recursion late in the course and to focus on traditional, procedural examples such as calculating factorials or solving the Towers of Hanoi puzzle. In this paper, we propose that the shift to object-oriented programming techniques calls for a significant shift in our approach to teaching recursion. First, we argue that in the context of object-oriented programming students should be introduced to examples of simple recursive structures such as linked lists and methods that process them, before being introduced to traditional procedural examples. Second, we believe that this material should be presented before students are introduced to structures such as arrays. In our experience, the early presentation of recursive structures provides the opportunity to reinforce the fundamentals of defining and using classes and better prepares students to appreciate the reasons to use classes to encapsulate access to other data structures when they are presented.	Why structural recursion should be taught before arrays in CS 1	NA:NA:NA	2018
John P. Dougherty:David G. Wonnacott	We have developed and implemented a "rigor-first" approach to CS1 instruction, in which we introduce rigorous techniques for understanding algorithms alongside associated programming skills. This core material is developed through a number of engaging problems from more advanced courses in computer science and other natural sciences. These principles are continued in CS2, and the two courses form our "3-2-1" first-year sequence: three programming paradigms and two models of program execution are explored on a single platform. This article discusses the design of our CS1 course, its role in the computer science curriculum, and our experiences with it. Preliminary assessment suggests this approach has merit in our curriculum.	Use and assessment of a rigorous approach to CS1	NA:NA	2018
E. Sweedyk	NA	Session details: Computer games and CS education: why and how	NA	2018
Elizabeth Sweedyk:Marianne deLaet:Michael C. Slattery:James Kuffner	Computer and video games have grown to be a major industry but, until recently, have largely been ignored by academia. The last couple of years, however, have seen the emergence of new academic programs, conferences, and journals dedicated to games studies. This panel discusses a variety of ways, and whys, for introducing games into computer science curricula. Panelists discuss their experiences in designing a broad range of courses including a games course for women, a software development course that uses games as projects, an introductory games programming course in Java, and an advanced graphics course that focuses on games.	Computer games and CS education: why and how	NA:NA:NA:NA	2018
W. Huen	NA	Session details: IT offshore outsourcing: impact on CS/IS curriculum	NA	2018
Wing Huen:Ernest Ferguson:Peter B. Henderson:Clifton Kussmaul	NA	IT offshore outsourcing: impact on CS/IS curriculum	NA:NA:NA:NA	2018
S. Cooper	NA	Session details: Outcomes-based computer science education	NA	2018
Stephen Cooper:Lillian Cassel:Barbara Moskal:Steve Cunningham	As computer science educators, we are being pushed to define (by accreditation agencies, within our institutions, etc.) our courses and programs in terms of measurable outcomes. The Computing Accreditation Commission (CAC) is responsible for reviewing and accrediting computer sciences departments across the United States. As part of this review process, computer science departments must specify and measure student learning objectives and outcomes (see criteria at http://www.abet.org/cac1.html). The same is true for institution-wide accreditation (for example, by the Middle States Commission on Higher Education). Also, faculty who are composing proposals for NSF or other funding agencies are expected to provide descriptions of objectives and outcomes and how these are to be measured.	Outcomes-based computer science education	NA:NA:NA:NA	2018
Lynda Thomas	NA	Session details: Courseware	NA	2018
Chavdar Botev:Hubert Chao:Theodore Chao:Yim Cheng:Raymond Doyle:Sergey Grankin:Jon Guarino:Saikat Guha:Pei-Chen Lee:Dan Perry:Christopher Re:Ilya Rifkin:Tingyan Yuan:Dora Abdullah:Kathy Carpenter:David Gries:Dexter Kozen:Andrew Myers:David Schwartz:Jayavel Shanmugasundaram	CMS is a secure and scalable web-based course management system developed by the Cornell University Computer Science Department. The system was designed to simplify, streamline, and automate many aspects of the workflow associated with running a large course, such as course creation, importing students, management of student workgroups, online submission of assignments, assignment of graders, grading, handling regrade requests, and preparation of final grades. In contrast, other course management systems of which we are aware provide only specialized solutions for specific components, such as grading. CMS is increasingly widely used for course management at Cornell University. In this paper we articulate the principles we followed in designing the system and describe the features that users found most useful.	Supporting workflow in a course management system	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Melissa E. O'Neill	This paper gives a first look at slides2wiki, a new scheme for easily providing collaborative lecture notes. Unlike previous web-based courseware schemes, the slides2wiki approach integrates with existing techniques that computer-science course instructors already use to prepare their classes. This tool is used to create a site where students may collaborate to create their own notes, using the lecture slides as a starting point. Adopting a surprisingly low-tech approach that uses familiar tools and paradigms, slides2wiki avoids many of the stumbling blocks of previous approaches to web-based course support.	Automated use of a Wiki for collaborative lecture notes	NA	2018
Karen L. Reid:Gregory V. Wilson	Professional software developers use version control systems to coordinate their work, and to provide an unwindable history of their project's evolution. In contrast, students in most programming courses use a homegrown electronic submission program to submit their work, and email to coordinate with partners when doing team projects. In May 2003, we began using CVS, a popular open source version control system, as an assignment submission system. Students receive starter code by checking out the assignment, use the version control system to manage their work, and submit their assignment by committing it to CVS. Teaching assistants grade assignments by checking out each student's repository, and committing the marks. Our experience to date shows that this is both a simpler and a more flexible way to manage student assignments, and also an excellent way to teach them how to use a fundamental software development tool.	Learning by doing: introducing version control as a way to manage student assignments	NA:NA	2018
Larry Griffith	NA	Session details: Programming with images	NA	2018
Daniel E. Stevenson:Michael R. Wick:Steven J. Ratering	Today's generation of students crave assignments that are relevant to their world, both in terms of graphical interfaces and, more importantly, the application area. To be fully engaged they must find the application of importance. However, we have found that many assignments in computer science attempt to engage the students by moving further and further away from the underlying machine representations. This causes a disconnect between the applications our students write and the material we present on machine representations and architecture. We present examples of assignments based from the fields of Steganography and Cartography that we have found to be valuable in helping to reinforce the importance of machine representations with today's students. We found that the students were excited and intrigued to see how their discipline could play a vital role in the war on terrorism and how what they were learning in their CS 1 course was directly relevant to what they heard on the nightly news and experience on a daily basis via the Internet.	Steganography and cartography: interesting assignments that reinforce machine representation, bit manipulation, and discrete structures concepts	NA:NA:NA	2018
Kenny Hunt	This article describes a Java framework for experimentation with fundamental steganographic techniques. The framework is built on top of Java's image processing libraries and provides extensible handles for customization and experimentation. The framework is designed and presented with a view towards incorporation into an undergraduate computer science curriculum.	A Java framework for experimentation with steganography	NA	2018
Richard Wicentowski:Tia Newhall	As Computer Science educators, we know that students learn more from projects that are fun and challenging, that seem "real" to them, and that allow them to be creative in designing their solutions. When we have students beating down our office doors wanting to show us what they've done, we know we have designed a project that truly meets its pedagogical goals. In CS1 courses, it is often difficult to come up with large, real-world programming projects that are at an appropriate level and that really excite students. This is particularly true in the first half of the course when students are learning basic programming and problem solving skills. We found that assignments based on image processing are an effective way to teach many CS1 topics. Because students enjoy working on the projects, they come away with a solid understanding of the topics reinforced by the projects. In this paper, we discuss many ways in which image processing could be used to teach CS1 topics. As an example, we present two image processing projects that we use in our CS1 course. These large, real-world programs are designed so that students can successfully master them early in their first semester of programming. Even though our CS1 course is taught using the C programming language, these projects could easily be used by a CS1 course in C, C++, or Java. We provide starting point code for Java and C versions of the projects, and provide sample assignment write-ups on our project webpage [12].	Using image processing projects to teach CS1 topics	NA:NA	2018
Graciela Gozalez	NA	Session details: Active and lab-based learning	NA	2018
Matt Bower:Debbie Richards	In order to gauge the pedagogical implications of conducting Computer Science practical sessions remotely, the Division of ICS at Macquarie University conducted a formal experiment using a virtual classroom environment called Macromedia Breeze Live. Research results indicated that students who completed their practical in the virtual classroom: i) felt they performed significantly more collaboration, ii) expressed a preference for this mode of practical session over regular laboratory sessions, iii) felt that they learnt significantly more from their classmates and iv) felt that they learnt significantly more from the practical supervisor than students in the standard classroom. Reasons for these results are proposed in the pedagogical context of offering Computer Science practical sessions online.	The impact of virtual classroom laboratories in CSE	NA:NA	2018
Leen-Kiat Soh:Ashok Samal:Suzette Person:Gwen Nugent:Jeff Lang	Closed laboratories are becoming an increasingly popular approach to teaching introductory computer science courses. However, as observed in [1], "Considering the prevalence of closed labs and the fact that they have been in place in CS curricula for more than a decade, there is little published evidence assessing their effectiveness." In this paper we report on an integrated approach to designing and implementing laboratories with embedded instructional research design. The activities reported here are part of our department-wide effort to not only improve student learning in Computer Science and Computer Engineering, but also to improve the agility of our Computer Science and Engineering Department in adapting our curriculum to changing technologies, incorporate research, and validate the instructional strategies used. This paper presents the design and implementation of the labs and the results and analysis of student performance. Also described in this paper is how we have employed cooperative learning in our labs and how it impacts student learning.	Closed laboratories with embedded instructional research design for CS1	NA:NA:NA:NA:NA	2018
Stephanie Ludi:Swaminathan Natarajan:Thomas Reichlmayr	At the Rochester Institute of Technology, the undergraduate introductory software engineering course has been redesigned from a lecture-lab format to a project-centric studio format. The new format blends the lecture material with the project work. As a result, students drive their own learning experience based on scaffolding created by the course design. The challenges faced and the techniques and strategies utilized in the planning and delivery of the course will be discussed, including the utilization of online learning support infrastructure. This paper presents instructor experiences, analysis of student feedback, lessons learned and recommendations for other educators considering an active learning approach for their courses.	An introductory software engineering course that facilitates active learning	NA:NA:NA	2018
Rhys Price-Jones	NA	Session details: The first year: breadth first approaches	NA	2018
Elise H. Turner:Roy M. Turner	This paper describes a new course developed at University of Maine to help students better understand the discipline of computer science and to aid us in recruiting and retaining majors. The course verview of computer science, but also, through focusing on particular topics at an advanced level, begins to teach students how computer scientists think about problems. The course has been taught in Fall 2002, 2003 and 2004. This paper describes the course and discusses our results from the first two years.	Teaching entering students to think like computer scientists	NA:NA	2018
Samuel A. Rebelsky	Although faculty are most accustomed to teaching semester-long traditional courses, they are encountering an increasing number of situations in which they must teach "courses" of only a few hours that are intended to give others a "flavor" of the discipline. Such situations include alumni events, orientation activities for incoming or potential students, and community outreach programs. In many disciplines, faculty can rely on participants' academic or basic skills (e.g., how to dissect an argument; basic laboratory skills). In computer science, faculty must accept not only a lack of basic skill in the discipline, but also a potential gap in knowledge of what the study of computer science entails.This paper explores the design of one such introductory experience, which is held in two two-hour sections for selected incoming science students at Grinnell College. The course emphasizes hands-on discovery, algorithm design and algorithm analysis grounded in the problem of sorting. Different faculty members in the department have taught the course three times to general success.	The new science students in too much, too soon an abbreviated, accelerated, constructivist, collaborative, introductory experience in CS	NA	2018
Charles Dierbach:Blair Taylor:Harry Zhou:Iliana Zimand	In this paper, we report on an approach taken addressing the issue of the preparedness of students entering CS1. Specifically, we discuss the adoption of a first-day assessment test in lieu of completed course prerequisites for determining students' preparedness, and the development of a corresponding CS0 "fallback" course intended to provide the appropriate background for those students lacking the necessary programming reasoning skills, as indicated by assessment test results. We report here on the adequacy of the assessment test designed, the effectiveness of the CS0 course as targeted for CS1 success, and the perceptions of students as to the impact that the CS0 course has had on their ultimate success in CS1.	Experiences with a CS0 course targeted for CS1 success	NA:NA:NA:NA	2018
E. F. Gehringer	NA	Session details: Using peer review in teaching computing	NA	2018
Edward F. Gehringer:Donald D. Chinn:Manuel A. Pérez-Quiñones:Mark A. Ardis	For generations, the academic community has relied on peer review as a way of encouraging scholarship and enhancing the knowledge base. Peer review has been widely used in the classroom since at least the 1970s, with hundreds of papers on its use in diverse academic fields appearing in the literature (for a comprehensive survey, see [1]). Its use appears to be on the upswing, given the current interest in active learning and teamwork. In computer science, peer review seems to have very broad application. It can be used to evaluate the contributions of various members to a project team; it can be used for design documents and code reviews, in writing assignments, and in capstone project courses. The experience of the panelists is illustrative of the wide range of peer-review practices. This panel will serve to introduce the audience to some of these applications. Since many computer-science instructors have experimented with peer review, we are anxious to have them share their experiences during the open discussion period.	Using peer review in teaching computing	NA:NA:NA:NA	2018
Scot Drysdale:Judith Hromcik:David Reed:Reg Hahne	The 2004 school year marked significant changes in the Advanced Placement (AP) Computer Science curriculum. Most visibly, Java replaced C++ as the exam-testable programming language. More fundamentally, however, the AP CS curriculum now places a greater emphasis on object-oriented design than in previous years. Students are expected to be able to implement interfaces, design and implement class hierarchies using inheritance, analyze the tradeoffs between alternative designs and their associated efficiencies, and make use of Java Collection classes where appropriate. This special session is intended to inform both high school and college teachers as to the extent of these changes and how they affected the development and grading of the 2004 AP CS exams. In addition, it will provide practical insights as to how the new curriculum can be taught in high schools, and how teachers can better prepare their students for the exams.The AP CS Development Committee's charge is not only to provide a comprehensive testing mechanism, but also to recommend a direction that high school teachers should take in preparing a foundation for more advanced student studies during college. This special session will bring together two college and two high school members of the AP CS Development Committee to share some of their insights into the AP program.AP teachers will learn valuable information to continue to support their shift to Java in the classroom and about the exam for which they are preparing their students. College teachers will learn more about the AP CS curriculum and test development process, which may aid them in similar course redesigns and in the placement of students with AP credit.Time will be provided to discuss participant's questions.	The year in review: changes and lessons learned in the design and implementation of the AP CS exam in Java	NA:NA:NA:NA	2018
Bhagyavati	NA	Session details: Teaching hands-on computer and information systems security despite limited resources	NA	2018
Bhagyavati:Stephen O. Agyei-Mensah:Rose Shumba:Iretta B.C. Kearse	NA	Teaching hands-on computer and information systems security despite limited resources	NA:NA:NA:NA	2018
Troy Vasiga	NA	Session details: Issues in secondary education & introductory programming	NA	2018
James I. Hsia:Elspeth Simpson:Daniel Smith:Robert Cartwright	Java is the canonical language for teaching introductory programming, but its complex syntax and abundance of constructs are difficult for beginners to learn. This paper shows how object-oriented programming in Java can be made more accessible to beginners through the use of "language levels", a hierarchy of progressively richer subsets of Java. This hierarchy is implemented as an extension of the DrJava pedagogic programming environment.	Taming Java for the classroom	NA:NA:NA:NA	2018
Barbara Ericson:Mark Guzdial:Maureen Biggers	This paper describes how the Institute for Computing Education (ICE) at Georgia Tech is trying to improve the state of computer science education in secondary schools in Georgia. ICE is a partnership between the Georgia Department of Education and the College of Computing at Georgia Tech. The goals for this partnership are to increase the number and quality of computer science teachers and increase the number, quality, and diversity of computer science students. One specific goal is to increase the number of students taking the CS-AP course. We believe that this partnership can serve as a model for other states.	A model for improving secondary CS education	NA:NA:NA	2018
Alasdair McAndrew:Anne Venables	For the past few years, we have run a highly successful activity teaching some elementary digital image processing to students at years 9 and 10 of secondary school. The activity involves working with a digital camera, taking, capturing and saving images, and exploring pixel values and their relationship to image brightness and colour. We also perform some elementary processing tasks: thresholding, changing spatial resolution and quantization. Students then have a brief introduction to spatial filtering, followed by some examples: image blurring and edge detection. The activity finishes with some binary morphology. Given that digital image processing is usually offered only at the upper undergraduate or postgraduate level, we have demonstrated that it is quite possible to introduce some image processing concepts in a friendly and supportive environment to students in the middle years of their secondary schooling.	A "secondary" look at digital image processing	NA:NA	2018
Jim Huggins	NA	Session details: Ethics and computing	NA	2018
Richard J. Botting	The author shares techniques used in a successful "Ethics and Professionalism" class at California State University, San Bernardino. Ethical issues played a part in designing the class. The author describes active learning and holistic grading. Ethics demanded a novel way to post grades on the web without exposing personal data. This was evaluated by students. The author points out some improvements he has made, or will make.	Teaching and learning ethics in computer science: walking the walk	NA	2018
Mary Elaine Califf:Mary Goodwin	This paper discusses some of the issues involved in incorporating ethics material into programming courses. Incorporating ethics into such courses raises particular challenges because of the time-intensive nature of the courses and because of the difficulty of finding material that is both relevant to the course and comprehensible to the students. The paper presents four case studies that we have used successfully when incorporating ethics material into our own programming courses.	Effective incorporation of ethics into courses that focus on programming	NA:NA	2018
Alton F. Sanders	This paper, describes a format and grading scheme for a discussion course in Computing Ethics. The teaching of ethics, particularly in a discussion format, can be somewhat problematic in a computer science department where courses tend to be technical and faculty tend to be more comfortable with material presented in a lecture and/or workshop format. Grading of discussion and papers can also be perceived as more difficult or, at least, less grounded in objective criteria. The following describes an approach that attempts to address those particular concerns. The course described was offered in the spring of 2003 when two sections were taught.	A discussion format for computer ethics	NA	2018
Mark Jones	NA	Session details: Non-major courses	NA	2018
Mark E. Hoffman:David R. Vance	Do new college students already know much of what has previously been taught in our computer literacy courses (assuming a functional definition of knowledge according to which students are proficient with personal computer and Internet applications)? We conducted a survey of incoming first-year students at Quinnipiac University to learn not only their skill level with a representative range of technology tasks, but also from whom they learned these tasks. Results provide a profile of students who report learning many technology tasks primarily on their own. We propose a taxonomy according to which native technology tasks are learned with family support, social and educational technology task categories are supported by friends and teachers, respectively, and optional technology tasks are learned with little support. Our results will help in the design of appropriate computer literacy courses.	Computer literacy: what students know and from whom they learned it	NA:NA	2018
Mark Guzdial:Andrea Forte	There is growing interest in computing courses for non-CS majors. We have recently built such a course that has met with positive response. We describe our design process, which includes involvement of stakeholders and identifying a context that facilitates learning. We present evaluation results on success rates (approximately 90% of the students earn an A, B, or C) and impact of the course on students over time (80% report that the class has influenced them more than a semester later).	Design process for a non-majors computing course	NA:NA	2018
Tammy Bailey:Jeffrey Forbes	Just-in-Time Teaching (JiTT) is a teaching and learning strategy based on the interaction between web-based study assignments and an active learner classroom. The essence of JiTT is the feedback loop formed by the students' preparation outside the classroom that shapes their in-class experience. The goal of JiTT is to use feedback to guide teaching and to empower and motivate learners. This paper describes a successful implementation of the JiTT strategy for an introductory computer science course.	Just-in-time teaching for CS0	NA:NA	2018
Nick Parlante:David Levine:Steven Andrianoff:Aaron J. Gordon:Alyce Brady:Pamela Cutter:Paul Kube:Jefferson Ng:Richard E. Pattis	NA	Nifty assignment	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Holly Patterson-McNeill	NA	Session details: Evaluating student work	NA	2018
H. Chad Lane:Kurt VanLehn	Traditional methods of evaluating student programs are not always appropriate for assessment of different instructional interventions. They tend to focus on the final product rather than on the process that led to it. This paper presents intention-based scoring (IBS), an approach to measuring programming ability that looks at intermediate programs produced over the course of an implementation rather than just the one at the end. The intent is to assess a student's ability to produce algorithmically correct code on the first attempt at achieving each program goal. In other words, the goal is to answer question "How close was the student to being initially correct?" but not to speak to a student's debugging skills or ability to ultimately produce a working program. To produce an IBS, it is necessary to inspect a student's online protocol, which is simply the collection of all programs submitted to a compiler. IBS involves a three-phase process of (1) identification of the subset of all programs in a protocol that represent the initial attempts at achieving programming goals, (2) bug identification, and (3) rubric-based scoring. We conclude with an example application of IBS in the evaluation of a tutoring system for beginning programmers and also show how an IBS can be broken down by the underlying bug categories to reveal more subtle differences.	Intention-based scoring: an approach to measuring success at solving the composition problem	NA:NA	2018
J. Philip East:J. Ben Schafer	In this paper, we discuss in-person or face-to-face grading: what it is, a rationale for its use, our use of it, and an experiment we conducted to evaluate its use. While no statistically significant differences in instructional outcome effects were found, several interesting affective results were seen. Additionally, a number of research methodological suggestions arose from the study.	In-person grading: an evaluative experiment	NA:NA	2018
Charlie Daly:Jane Horgan	We used a new technique to analyse how students plagiarise programs in an introductory programming course. This involved placing a watermark on a student's program and monitoring programs for the watermark during assignment submission. We obtained and analysed extensive and objective data on student plagiarising behaviour. In contrast to the standard plagiarism detection approaches based on pair comparison, the watermark based approach allows us to distinguish between the supplier and the recipient of the code. This gives us additional insight into student behaviour. We found that the dishonest students did not perform significantly worse than the honest students in the exams. However, when dishonest students are further classified into supplier and recipient, it emerged that the recipient students performed significantly worse than the suppliers.	Patterns of plagiarism	NA:NA	2018
Anita Verno:Debbie Carter:Robb Cutler:Michelle Hutton:Lenny Pitt	This session will continue efforts by the ACM and Computer Science Teachers Association (CSTA) to create a comprehensive body of resources to support the implementation of a national K-12 computer science curriculum. The ACM K-12 Computer Science Curriculum Committee, with input from the Computer Science educational community, published a Model Curriculum [1] in 2003. The Model suggests a 4-level curriculum. Level-1 topics, primarily for the K-8 years, closely follow the well-defined ISTE Standards. Level-2 topics are suggested for all students in grades 9 or 10 and are comprised of introductory computer science content. Level-3 topics focus on analysis and design with emphasis on the scientific and engineering aspects of computer science. AP Computer Science and special topics courses comprise Level-4. This special session will focus on the learning objectives and activities for Level 2 of the K-12 Computer Science Model curriculum. Attendees will be invited to provide critical feedback that will help move the curriculum project forward.	Developing resources to support a national computer science curriculum for K-12	NA:NA:NA:NA:NA	2018
Joe Bergin:Kim Bruce:Michael Kölling	Various software tools have been proposed or developed for use in introductory programming courses. Usually, presentation of a new tool at the SIGCSE symposium occurs when a tool is first developed, leaving it to interested observers to identify success or failure of tools over their lifetime.For teachers, it can be difficult to compare available tools and judge potential application in their courses.In this session, three tools with an established track record of successful classroom use are presented: Karel J Robot [1], objectdraw [2], and BlueJ [2]. In addition to considering each tool individually, opportunities for combinations of these tools are also discussed.The focus of this session will be on concrete, hands-on advice that teachers can immediately apply in their classrooms.	Objects-early tools: a demonstration	NA:NA:NA	2018
Hilary Holz	NA	Session details: Gender issues	NA	2018
Sylvia Beyer:Michelle DeKeuster:Kathleen Walter:Michelle Colar:Christina Holcomb	Few women major in Computer Science (CS), which creates a serious bottleneck of women qualified to enter into the CS workforce. To address this bottleneck, this study examines gender issues in CS education. We assessed whether gender differences in CS students' stereotypes of CS and attitudes towards CS classes and the CS program remain stable from one semester to the next. We found that gender differences in CS students are not temporally stable and conclude that one-time assessments of gender differences may lead to erroneous conclusions. We also found that concerns about future work-family conflicts and gender issues in the CS program (e.g., female CS students feeling that they are not being taken as seriously as male CS students) emerged as important concerns for female CS students.0The implications of these findings for increasing the representation of women in CS are discussed.	Changes in CS students' sttitudes towards CS over time: an examination of gender differences	NA:NA:NA:NA:NA	2018
Carol Frieze	This paper tells the story of a student initiative, driven by a desire to diversify the images that surround the field of computer science and those who work in it.	Diversifying the images of computer science: undergraduate women take on the challenge!	NA	2018
Antonio M. Lopez, Jr.:Lisa J. Schulte:Marguerite S. Giguette	The "incredible shrinking pipeline" problem has become the euphemism for the dilemma of declining numbers of women seeking bachelor's degrees in a computing discipline. The problem is well recognized, and many have suggested reasons for it. Unfortunately, much of what has been written is based on anecdotal evidence or inferences made from statistical results from small samples of very specific groups in the computing disciplines. There have been few multi-disciplinary approaches to analyze the problem with even fewer attempts to create a model that might explain it. This paper is the end of a beginning. Having received a National Science Foundation grant to study gender-based differences and ethnic and cultural models in the computing disciplines, the principle investigators document the work that has led to launching a nationwide study of the problem to commence in Fall 2004.	Climbing onto the shoulders of giants	NA:NA:NA	2018
Larisa Eidelman:Orit Hazzan	The study described in this article continues research on gender-related issues in Computer Science education by focusing on the differences between two sectors in the Israeli high school system -- the Jewish sector (majority) and the Arab sector (minority). As it turns out, the under-representation of female high school students in CS studies is significantly more salient in the majority sector. This study explores this situation and attempts to explain it. We also explain how the findings of this research can be applied to other countries and societies.	Factors influencing the shrinking pipeline in high schools: a sector-based analysis of the Israeli high school system	NA:NA	2018
Tzu-Yi Chen	NA	Session details: The first year: studies of student performance	NA	2018
Susan Bergin:Ronan Reilly	This paper documents a study, carried out in the academic year 2003-2004, on fifteen factors that may influence performance on a first year object-oriented programming module. The factors included prior academic experience, prior computer experience, self-perception of programming performance and comfort level on the module and specific cognitive skills. The study found that a student's perception of their understanding of the module had the strongest correlation with programming performance, r=0.76, p‹0.01. In addition, Leaving Certificate (LC) mathematics and science scores were shown to have a strong correlation with performance. A regression module, based upon a student's perception of their understanding of the module, gender, LC mathematics score and comfort level was able to account for 79% of the variance in programming performance results.	Programming: factors that influence success	NA:NA	2018
Allison Elliott Tew:Charles Fowler:Mark Guzdial	Innovations in teaching and learning computer science education can easily be overly-specific to a given institution, or type of institution. For example, an innovation may require special hardware, or may make assumptions about the background of the students. This paper tracks one such innovation, a multimedia-focused introductory computing course, as it moved from a research-focused university to a public two-year college. At both institutions, the new course resulted in dramatically improved retention. Students at the two-year college were even more motivated and more positive about computing after the course than students at the research university. The results suggest ways of approaching innovation that is easily adaptable to other institutions.	Tracking an innovation in introductory CS education from a research university to a two-year college	NA:NA:NA	2018
Lecia J. Barker:Kathy Garvin-Doxas:Eric Roberts	Two pedagogical techniques of IT programs are compared, a traditionally taught computer science (CS) major and an IT certificate program using a fine arts approach to pedagogy. The latter graduates a higher percentage of women than of males. Although the two programs are quite different in the nature of the material and what students are expected to learn, CS instructors can borrow from the certificate program in ways that could increase attraction to and retention of women in CS, especially by allowing students to hear each other articulate what they are learning; mentioning practical applications of theoretical principles; and requiring that students display their knowledge and solutions to their peers.	What can computer science learn from a fine arts approach to teaching?	NA:NA:NA	2018
Tracy L. Lewis:J. D. Chase:Manuel A. Pérez-Quiñones:Mary Beth Rosson	Research is presented that examined the effects of various measures of prior computer science experience and cognitive abilities on overall performance in a CS2 course. Participants selected from the CS2 course at two southeastern state universities were used within this study, resulting in a sample size of 161 (School A, n = 76; School B, n = 85). School A is a mid-sized comprehensive university and School B is a large research-intensive university.Self-reported data were collected on measures of experience in object-oriented processing, UNIX programming, web design, computing platforms, and various CS experience. Further, cognitive abilities measures of spatial orientation, visualization, logical reasoning, and flexibility were administered.The results show that the schools significantly differed on all measures of cognitive ability and most measures of prior computer science experience. The schools also differed on the extent to which these measures were related to overall course performance. The results suggest that, for school A, the cognitive ability visualization and the prior computer science experience measure of OO processing were significantly related to course performance. However, when examining school B, no measures were found significant.	The effects of individual differences on CS2 course performance across universities	NA:NA:NA:NA	2018
Lisa Kaczmarczyk	NA	Session details: Robotics	NA	2018
Christian L. Jacobsen:Matthew C. Jadud	In a world of ad-hoc networks, highly interconnected mobile devices and increasingly large supercomputer clusters, students need models of computation that help them think about dynamic and concurrent systems. Many of the tools currently available for introducing students to concurrency are difficult to use and are not intrinsically motivating. To provide an authentic, hands-on, and enjoyable introduction to concurrency, we have ported occam π, a language whose expressive powers are especially compelling for describing communicating dynamic reactive processes, to the LEGO Mindstorms.	Towards concrete concurrency: occam-pi on the LEGO mindstorms	NA:NA	2018
Judith Challinger	In this paper we describe how a single Khepera II robot was used for an assignment in a senior level course on graphical user interface implementation. The assignment required each student to implement a graphical user interface for remotely controlling a Khepera II robot. From the author's point of view, the focus of the project was how to efficiently and effectively allow the 35 students enrolled in the course to have access to the robot for the purposes of testing and debugging. Furthermore, two of the students were enrolled through the distance education program and were remotely located. The intent was to see if an assignment making use of the robot would stimulate student interest, and whether it could be done with a minimal investment in hardware, lab, and instructor resources. The students were surveyed at the conclusion of the assignment in order to assess the effectiveness of the assignment. The results of this survey are presented, along with plans for future work.	Efficient use of robots in the undergraduate curriculum	NA	2018
Robert M. Harlan:Shelley McClarigan	Most undergraduate robotics courses introduce reactive behaviors, behaviors that are not mediated by world knowledge or a world model. What is missing from these courses, however, is the experience of combining reactive behaviors to create emergent behavior, behavior that is not anticipated by the robotocist but generated by the interaction of behaviors and the environment. We discuss two laboratory exercises that introduce reactive behaviors and combine them to produce emergent behaviors.	Creating emergent behaviors: two robotics labs that combine reactive behaviors	NA:NA	2018
Jerry B. Weinberg:William W. White:Cem Karacal:George Engel:Ai-Ping Hu	Real-world systems are comprised of interdependent components creating integrated systems. These systems are developed by multidisciplinary teams. The goal of this project is the development of a comprehensive undergraduate course in robotics that encompasses various fields that are integral to robotic systems: Computer Science, Electrical and Computer Engineering, and Mechanical Engineering. A main pedagogical goal of the course is to teach group dynamics and the skills necessary for interaction with people in different disciplines in multidisciplinary teams. Descriptions of the course and the hands-on lab assignments are presented along with course assessment.	Multidisciplinary teamwork in a robotics course	NA:NA:NA:NA:NA	2018
Owen Astrachan:Kim Bruce:Elliot Koffman:Michael Kölling:Stuart Reges	The participants will use a debate format with a provocative thesis to explore the pedagogical approach known as "objects early" or "objects first." By arguing in the affirmative, Elliot Koffman and Stuart Reges will point out concerns that have been raised about the approach. By arguing in the negative, Kim Bruce and Michael Kölling will describe schools that are succeeding with the approach and ways to address significant concerns. Owen Astrachan as moderator will ensure that the debate remains civil and will provide some humorous and possibly even insightful commentary on the evidence presented by both sides.	Resolved: objects early has failed	NA:NA:NA:NA:NA	2018
A. N. Kumar	NA	Session details: Emerging areas in computer science education	NA	2018
Amruth N. Kumar:Rose K. Shumba:Bina Ramamurthy:Lawrence D'Antonio	Computer Science is an evolving discipline. It continues to reinvent itself every 5-7 years. In order to keep up, Computer Science educators have had to continually modify the curriculum, either changing existing courses or introducing new ones. It is next to impossible for educators to keep abreast of all the developments in the discipline - learning a new area can place substantial demands on their time and effort.Therefore, this panel is intended as a quick introduction to some of the emerging areas and practices in Computer Science that deserve inclusion in the undergraduate curriculum. The panelists will present four new emerging areas - Grid Computing, Cybersecurity, Bioinformatics, and Robotics in the traditional Artificial Intelligence course. Each panelist will present a typical syllabus, list sample resources, and recount his/her experience developing the course. It is hoped that this panel will help interested faculty adopt successful practices.	Emerging areas in computer science education	NA:NA:NA:NA	2018
Sue Fitzgerald	NA	Session details: Student teams	NA	2018
Deborah A. Trytten	The software industry needs our graduates to have significant and meaningful experiences with teamwork. A new design has been developed for a teamwork exercise based on peer code review. This design uses the three Ss of building assignments for cooperative learning: Same problem, Specific choices, and Simultaneous report. Students perform peer code review individually, and within and between stable small groups. The code can be sanitized student work or may be altered by the instructor to meet specific course learning objectives. The review is done in three phases. First, individuals answer yes or no to questions that evaluate the quality of the design and code. Then each group answers the same set of questions. When the groups have completed their evaluation, the class joins together to reveal and discuss the answers. This design was successfully implemented during the 2003-2004 academic year in an introductory programming class. This design is applicable to more advanced classes with significant programming assignments. Future work includes extending this structure to give students experience with other software engineering artifacts early in their academic careers.	A design for team peer code review	NA	2018
D. Smarkusky:R. Dempsey:J. Ludka:F. de Quillettes	Information technology projects are growing in complexity and require teams to solve problems and develop solutions. With current undergraduate, computer science and information systems curricula, students graduate with technical skills, but lack team project experiences. We have identified and developed team knowledge modules that are being taught to students in an effort to increase awareness of team process fundamentals and build the foundation of an effective team player. In this paper we present the challenges that we face with team projects and then discuss team knowledge modules that are being taught to incoming freshmen to engage students in a curriculum that requires team projects in each course. We conclude with our assessment results and show comparisons of student team knowledge by instruction and experience.	Enhancing team knowledge: instruction vs. experience	NA:NA:NA:NA	2018
Dawn McKinney:Leo F. Denton	Team experiences can be important learning experiences, and industry highly values team skills in graduates. Low retention rates might also be improved with early team experiences because team experiences have been linked to increases in the sense of belonging, a key retention factor. Team experiences in upper-level courses could also benefit from earlier team experiences. The purpose of this paper is to describe and evaluate an early use of teams in the second semester of our CS1 sequence. The instructional methodology drew heavily upon the professional practices of an agile software development model, Extreme Programming. These professional practices fostered the development of team skills during a semester-long project in a closed lab. The evaluation of our experience revealed aspects of the good, the bad, and the ugly. Areas for improvement and future work are also explained.	Affective assessment of team skills in agile CS1 labs: the good, the bad, and the ugly	NA:NA	2018
Leland L. Beck:Alexander W. Chizhik:Amy C. McElroy	A set of cooperative learning exercises were designed for use in a Java-based CS1 course. The exercises used specific roles to focus students' attention on key concepts of the Java language, and on key mental processes of programming and problem solving. A controlled experiment was conducted to evaluate the effectiveness of this approach. The results show that the cooperative learning experience had a significant positive effect on student performance, and may have been of special benefit to women and minority students.	Cooperative learning techniques in CS1: design and experimental evaluation	NA:NA:NA	2018
Sally Fincher	This session showcases the projects that have received support from a SIGCSE Special Project Award in the previous year.	SIGCSE special projects showcase	NA	2018
Ken Surendran	NA	Session details: Design patterns	NA	2018
Dung "Zung" Nguyen:Mathias Ricken:Stephen Wong	We provide a systematic transformation of an LL(1) grammar to an object model that consists of an object structure representing the non-terminal symbols and their corresponding grammar production rules, a union of classes representing the terminal symbols (tokens).We present a variant form of the visitor pattern and apply it to the above union of token classes to model a predictive recursive descent parser on the given grammar. Parsing a non-terminal is represented by a visitor to the tokens. For non-terminals that have more than one production rule, the corresponding visitors are chained together according to the chain of responsibility pattern in order to be processed correctly by a valid token. The abstract factory pattern, where each concrete factory corresponds to a non-terminal symbol, is used to manufacture appropriate parsing visitors.Our object-oriented formulation for predictive recursive descent parsing eliminates the traditional construction of the predictive parsing table and yields a parser that is declarative and has minimal conditionals. It not only serves to teach standard techniques in parsing but also as a non-trivial exercise of object modeling for objects-first introductory courses.	Design patterns for parsing	NA:NA:NA	2018
Prasun Dewan	The benefits of object-oriented programming apply only to programs consisting of multiple objects. Inter-object design patterns make it, in theory, possible for beginning programmers to create well-understood forms of such programs. However, their descriptions have been targeted at experienced programmers with knowledge, for instance, of the implementation of compilers. We show that it is possible to explain and motivate several of these patterns including the iterator, model-view-controller, model-interactor, observer, façade, composite, and factory patterns by showing them working "in the small" in simple examples. We have effectively used this approach to teach an undergraduate class including several college freshmen and one high-school junior, who were able to exercise the patterns "in the medium.	Teaching inter-object design patterns to freshmen	NA	2018
Michael R. Wick	Design patterns are an important element of today's undergraduate curricula. However, their inherent complexities often make them difficult for entry-level students to even partially grasp. In this paper, we describe the latest in our continuing efforts to build educational materials appropriate for infusing design patterns in entry-level computer science courses.	Teaching design patterns in CS1: a closed laboratory sequence based on the game of life	NA	2018
Stephen Weiss	Learning design patterns is tough, even for seasoned programmers who have seen lots of programs and hence have a sense for constructs that tend to recur. Teaching design patterns to new programmers is even tougher. As Asher Sterkin states, "Teaching design patterns in isolation is similar to studying a foreign language with only a dictionary." [4]. It is far better to try to teach design patterns using killer examples to help motivate and illustrate each pattern. I propose here something a little more radical: to teach by stealth. With a small number of principles of good program design, and using a running case study that grows in complexity through the semester, we can, through class discussions and exercises, "invent" programming solutions that turn out to be some of the important design patterns. The official names and definitions of the pattern [2, 3] are revealed only after the fact, if at all.	Teaching design patterns by stealth	NA	2018
Susan Dean	NA	Session details: Assessing student learning	NA	2018
Des Traynor:J. Paul Gibson	This paper describes the use of random code generation and mutation as a method for synthesising multiple choice questions which can be used in automated assessment. Whilst using multiple choice questions has proved to be a feasible method of testing if students have suitable knowledge or comprehension of a programming concept, creating suitable multiple choice questions that accurately test the students' knowledge is time intensive.This paper proposes two methods of generating code which can then be used to closely examine the comprehension ability of students. The first method takes as input a suite of template programs, and performs slight mutations on each program and ask students to comprehend the new program. The second method performs traversals on a syntax tree of possible programs, yielding slightly erratic but compilable code, again with behaviour that students can be questioned about. As well as generating code these methods also yield alternative distracting answers to challenge the students. Finally, this paper discusses the gradual introduction of these automatically generated questions as an assessment method and discusses the relative merits of each technique.	Synthesis and analysis of automatic assessment methods in CS1: generating intelligent MCQs	NA:NA	2018
Gary D. Boetticher:Wei Ding:Charles Moen:Kwok-Bun Yue	There is a limit on the amount of time a faculty member may devote to each student. As a consequence, a faculty member must quickly determine which student needs more attention than others throughout a semester. One of the most demanding courses in the CS curriculum is a data structures course. This course has a tendency for high drop rates at our university. A pre-assessment exam is developed for the data structures class in order to provide feedback to both faculty and students. This exam helps students determine how well prepared they are for the course. In order to determine a student's chance of success in this course, a Genetic Program-based experiment is constructed based upon the pre-assessment exam. The result is a model that produces an average accuracy of 79 percent.	Using a pre-assessment exam to construct an effective concept-based genetic program for predicting course success	NA:NA:NA:NA	2018
Leen-Kiat Soh:Ashok Samal:Suzette Person:Gwen Nugent:Jeff Lang	An introductory CS1 course presents problems for educators and students due to students' diverse background in programming knowledge and exposure. Students who enroll in CS1 also have different expectations and motivations. Prompted by the curricular guidelines for undergraduate programs in computer science released in 2001 by the ACM/IEEE, and driven by a departmental project to reinvent the undergraduate computer science and computer engineering curricula at the University of Nebraska-Lincoln, we are currently implementing a series of changes which will improve our introductory courses. One key component of our project is an online placement examination tied to the cognitive domain that assesses student knowledge and intellectual skills. Our placement test is also integrated into a comprehensive educational research design containing a pre- and post-test framework for assessing student learning. In this paper, we focus on the design and implementation of our placement exam and present an analysis of the data collected to date.	Designing, implementing, and analyzing a placement test for introductory CS courses	NA:NA:NA:NA:NA	2018
Laurie Murphy:Renée McCauley:Suzanne Westbrook:Timothy Fossum:Susan Haller:Briana B. Morrison:Brad Richards:Kate Sanders:Carol Zander:Ruth E. Anderson	Research on learning suggests the importance of helping students organize their knowledge around meaningful patterns of information. This paper reports on a multi-institutional study to investigate how senior computer science majors articulate and organize their knowledge of programming concepts using a card-sorting technique adopted from knowledge acquisition. We show that card-sorts are an effective means of eliciting students' knowledge structures and suggest they can also be used to help students organize their knowledge throughout the curriculum.	A multi-institutional investigation of computer science seniors' knowledge of programming concepts	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Alvero Monge	NA	Session details: Systems-level programming	NA	2018
Steven Robbins	Virtual memory is a major topic in undergraduate operating systems courses. One aspect of virtual memory, address translation, is often covered in an abstract way. When examples are given, only a piece of the translation is done, using a small translation lookaside buffer or a small single-level page table. Since most students learn best by doing rather than watching, the topic is best understood by having students do realistic address translations. This is problematic since it involves lookup from several large tables of data which are difficult to fit on a piece of paper. The address translation simulator described here solves this problem by presenting the student with complete page tables in a way that allows simple navigation of these tables. The simulator can be used for both teaching and student evaluation.	An address translation simulator	NA	2018
Jason Nieh:Chris Vaill	Operating system courses teach students much more when they provide hands-on kernel-level project experience with a real operating system. However, enabling a large class of students to do kernel development can be difficult. To address this problem, we created a virtual kernel development environment in which operating systems can be developed, debugged, and rebooted in a shared computer facility without affecting other users. Using virtual machines and remote display technology, our virtual kernel development laboratory enables even distance learning students at remote locations to participate in kernel development projects with on-campus students. We have successfully deployed and used our virtual kernel development environment together with the open-source Linux kernel to provide kernel-level project experiences for over nine hundred students in the introductory operating system course at Columbia University.	Experiences teaching operating systems using virtual platforms and linux	NA:NA	2018
Joel C. Adams:W. David Laverell	Having students modify an actual operating system kernel or network protocol stack opens their eyes to what is going on "beneath the hood" of a computer. However student modifications to a system may result in an unstable computer. Because of this, giving students such experience has in the past required a lab and/or computers dedicated to the students in the system-level course, and computer science departments without such dedicated facilities have been unable to provide their students with system-level experience. In this paper, we present two ways of giving students system-level experience in a non-dedicated lab; one using commercial software (VMWare), and another using open-source freeware (User Mode Linux Kernel).	Configuring a multi-course lab for system-level projects	NA:NA	2018
John W. McCormick	This paper describes a laboratory used to support a junior level course in real-time embedded software development. Thirteen years of data comparing programming languages for a real-time systems course are presented. Funding provided by the Maytag Corporation and Rockwell-Collins makes it possible to provide other schools with low cost electronics necessary to duplicate this laboratory with a minimum of effort.	We've been working on the railroad: a laboratory for real-time embedded systems	NA	2018
Michael Goldwasser	NA	Session details: New curricular directions	NA	2018
Gary Lewandowski:Elizabeth Johnson:Michael Goldweber	In this paper, we describe activities undertaken at our university to revise our computer science program to develop an environment and curriculum which encourages creative, hands-on learning by our students. Our main changes were the development of laboratory space, increased hands-on problem solving activities in the introductory course, open-ended programming projects in the early courses including a requirement of an open-ended project extension for an A grade, and the integration of a seminar into the senior project requirement. Our results suggest that these changes have improved student skill and willingness to deal with new problems and technologies. An additional surprising side-effect appears to be a dramatic increase in retention over the first two years, despite lower overall grade averages in those courses.	Fostering a creative interest in computer science	NA:NA:NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz	We have been funded by the National Science Foundation to investigate the feasibility of distributing large software engineering projects across the academic curriculum (DUE 0127439). This paper reports on the pedagogical aspects of the intra-curriculum methodology we have developed including motivation, goals, instructor responsibilities, and variations of the approach. The paper also reports on three applications of the methodology including lessons learned.	Intra-curriculum software engineering education	NA:NA	2018
Ron Coleman:Mary Krembs:Alan Labouseur:Jim Weir	This paper describes initiatives at Marist College to develop a Game Concentration in the undergraduate Computer Science curriculum. These initiatives contemplate recommendations for existing courses as well as adoption of new courses. We also consider activities of the Association of Computing Machinery (ACM) in this area and opportunities for students beyond the classroom.	Game design & programming concentration within the computer science curriculum	NA:NA:NA:NA	2018
David G. Kay:André van der Hoek:Debra J. Richardson	Because the field of computer science has broadened so much in recent years, traditional degree programs are becoming crowded with new courses, each introducing its own "essential" topic. However, with more and more such courses, it is no longer possible to cover every topic in a single, coherent, four-year program. Many alternative approaches are available to address this situation. At UC Irvine, we have chosen a solution in which we offer four coordinated degree programs: a B.S. in Computer Science & Engineering, a conventional B.S. in Computer Science, a new B.S. in Informatics, and a broad overview B.S. in Information and Computer Science. Of these, the B.S. in Informatics is the most innovative, focusing on software and information design. Context plays a particularly strong role in our B.S. in Informatics: Placing software development in context is critical to the delivery of successful solutions, and we educate our students accordingly. We present our definition of informatics, detail our curriculum, describe its pedagogical characteristics and objectives, and conclude with some critical observations regarding informatics and its place in computer science education.	Informatics: a focus on computer science in context	NA:NA:NA	2018
David Ginat:Richard Anderson:Daniel D. Garcia:Richard Rasala	Randomness and probability are essential notions in CS studies. They are invoked and employed in diverse courses at different levels. Although a structured course on these notions does not usually appear early in the curriculum, students and educators may benefit from their encapsulation already in CS0 and CS1. The special session will involve motivation, demonstration, and discussion with the audience of the assets of such an encapsulation. Attending CS educators will enrich their teaching perspectives, pedagogical tools, and assignment repertoires.	Randomness and probability in the early CS courses	NA:NA:NA:NA	2018
J. Beidler	NA	Session details: The many facets of diversity	NA	2018
Jack Beidler:Hilary Holz:Ken Yasuhara:Evans J. Adams	The panelists approach diversity from different points of view and experiences to produce a positive and productive foundation for an open discussion on the many facets of diversity, it potential, and positive impact on our profession.	The many facets of diversity	NA:NA:NA:NA	2018
Stu Zweben:Han Reichgelt:Gayle Yaverbaum	The Computing Accreditation Commission (CAC) of ABET has proposed changes in the structure of the criteria used to accredit computer science and information systems programs. The new structure combines, into so-called "general criteria," components of criteria that apply to any computing program accredited by CAC. Individual program areas will supply criteria that only apply to that specific program area, to supplement the general criteria. The new criteria format allows CAC to accredit additional program areas, such as information technology. In fact, program criteria for information technology also have been proposed. This session will discuss the new criteria structure, including the proposed general and program criteria, changes to existing criteria, and the timetable for implementation of the new structure.	Computing accreditation: a new criteria structure and new flexibility	NA:NA:NA	2018
Richard Pattis	The title of my talk comes from a Hollywood executive's comments on Fred Astaire's screen test. Much later, Katherine Hepburn remarking on Fred's eventual success with his most frequent partner said, "Fred gave Ginger [Rogers] class, and Ginger gave Fred sex [appeal]". I was surprised and delighted to win this award, and it started me thinking about how I got to where I am today. In my talk, I'll look back at 36 years of learning and teaching programming, and reflect on my many "dancing" partners. Some were around for a short time, some I dance with still, and some I dance with only in my dreams. In some cases, I led; in other cases I followed. Some dances were as graceful as a waltz, while others were more like an apache dance. During this talk I'll find some time to discuss "a view from the trenches" of four decades of teaching introductory programming, and if I can muster the courage, speculate on the future.	Can't sing, can't act, can dance a little: (on choosing the right dancing partners)	NA	2018
Mike O'Leary	We describe a laboratory based capstone course in computer security for undergraduates. The course is based on a sequence of hands-on laboratory exercises for four teams of students. It emphasizes defensive tools and techniques at the expense of attacks; it also takes a network centered view where student teams set up and configure entire networks. In this paper, we describe the course, how it fits into the curriculum, and the laboratory facilities we have developed. We then present the details of some of our lab exercises, and discuss the lessons that we have learned.	A laboratory based capstone course in computer security for undergraduates	NA	2018
Binto George:Anna Valeva	Database security has paramount importance in industrial, civilian and government domains. Despite its importance, our search reveals that only a small number of database security courses are being offered. In this paper, we share our experience in developing and offering an undergraduate elective course on database security with limited resources. We believe that database security should be considered in its entirety rather than being component specific. Therefore, we emphasize that students develop and implement a database security plan for a typical real world application. In addition to the key theoretical concepts, students obtain hands-on experience with two popular database systems. We encourage students to learn independently making use of the documentation and technical resources freely available on the Internet. This way, our hope is that they will be able to adapt to emerging systems and application scenarios.	A database security course on a shoestring	NA:NA	2018
H. Yu:W. Liao:X. Yuan:J. Xu	This paper presents a hybrid teaching approach, a new Web Security course as well as how to use the hybrid approach to teach the Web Security course to practice information assurance. The hybrid teaching approach contains three key issues that are keeping the lecture materials up-to-date, assigning former research projects as comprehensive team projects, and connecting classroom knowledge with real world web applications. We have applied this approach to the teaching a Web Security course and achieved excellent results. Our experience exhibits that integrating education, research and web applications into the Web Security course to practice information assurance are essential for a sound security education. Using this approach instructors connect knowledge in the classroom to real world applications, attract students to the security area, and train students to become information assurance professionals.	Teaching a web security course to practice information assurance	NA:NA:NA:NA	2018
Laurie Murphy:Brad Richards:Renée McCauley:Briana B. Morrison:Suzanne Westbrook:Timothy Fossum	This paper describes a multi-institutional study that used categorization exercises (known as constrained card sorts) to investigate gender differences in graduating computer science students' learning and perceptions of programming concepts. Our results show that female subjects had significantly less pre-college programming experience than their male counterparts. However, for both males and females, we found no correlation between previous experience and success in the major, as measured by computer science grade point average at graduation. Data also indicated that, by the time students completed their introductory courses, females reported nearly equal levels of mastery as males of the programming concepts. Furthermore, females generally considered the programming concepts to be no more difficult than did the men.	Women catch up: gender differences in learning programming concepts	NA:NA:NA:NA:NA:NA	2018
Carol Frieze:Orit Hazzan:Lenore Blum:M. Bernardine Dias	There are some arguments that suggest women need academic handholding, such as a "female friendly" curriculum, in order for them to participate and be successful in computer science and related fields. Then there are other arguments that suggest we need to change the field to suit women or help women adjust to the field. In this paper we present a different perspective that shows none of these may be necessary. The "Women-CS Fit" is already there! Specifically, under certain cultural and environmental conditions we can see that women fit very well into computing fields and what we have been attributing to gender is actually the result of cultural and environmental conditions. The reasons for women participating in -- or not participating in -- the field of computer science have little to do with gender and a lot to do with culture. In other words, we need to recognize that this is a cultural issue, and an issue that concerns us all. Appropriate local interventions in the micro-culture can have large effect. This argument is illustrated in this paper by three case studies.	Culture and environment as determinants of women's participation in computing: revealing the "women-CS fit"	NA:NA:NA:NA	2018
Lori Carter	The statistics show that the number of Computer Science majors is dropping across the United States. Possible reasons include a reduced number of jobs in the field, an incorrect perception of what Computer Scientists do, and the students' disinterest due to a lack of familiarity with the subject. The reasons may be different for males and females. This paper reports on a study in which 836 high school calculus and pre-calculus students were surveyed to try to determine why students with an apparent aptitude for CS did not pursue a major in Computer Science. The results supported some of the hypotheses for declining enrollment, and rejected others. The top reasons for rejecting the major were the same for both genders, but the reasons for choosing the major differed.	Why students with an apparent aptitude for computer science don't choose to major in computer science	NA	2018
Jerry Mead	This paper describes the structure of two, self-paced, language-translation tutorials that integrate nicely into a principles-based undergraduate programming languages course, thus bringing material normally covered in a compiler course down into the context of a traditional programming languages course. The primary goal of the tutorials is to provide students with useful models for programming language principles as well as a very basic introduction to compiling techniques, including tokenizing, parsing, static semantic checking, and code generation. The paper also exposes a pedagogic technique of repeated exposure that drives the success of these tutorials.	A compiler tutorial scaled for the programming languages course	NA	2018
Hilda M. Standley	Undergraduate and master's students enrolled in a programming language paradigms class are given the assignment to design a new programming language paradigm. The students are asked to develop a paradigm concept, demonstrate the utility of the paradigm for programmed solutions, and outline a sample programming language. Resulting student-designed paradigms from this class fall into three loosely defined categories: connection with a physical item, modeling a process, and representing program structure. The resulting class experience demonstrates that students can think and create beyond existing paradigms and features of languages to the level of abstraction that defines a new paradigm.	'Programming language paradigms' instruction through designing a new paradigm	NA	2018
Michael R. Wick:Daniel E. Stevenson	The traditional way to teach Prolog is to have students start by writing recursive mathematical definitions of the problems they are trying to solve. While this is an effective technique, it does not fit well into a Programming Languages course that uses a single demonstration language to illustrate the different paradigms. Thus, we have developed an approach to introduce students to Prolog via our demonstration language, Scheme. Additionally, we performed an experiment to determine if the Scheme to Prolog approach is as effective at introducing Prolog as the more traditional recursive mathematical definition approach.	On using scheme to introduce prolog	NA:NA	2018
Adrienne Decker:Phil Ventura:Christopher Egert	Over the last several years, there have been reports of many institutions using undergraduate students as teaching assistants (UTAs) in the classroom for CS1 as well as other courses in the curriculum. The literature has shown successes over a wide range of class sizes and UTA responsibilities. At University at Buffalo, we have been using undergraduates as teaching assistants in our CS1 course since Spring 2002, and have been impressed with the results. Throughout the deployment of the UTA program, the instructors of CS1 have observed that when UTAs are utilized in the classroom, both the students and the UTAs themselves benefit from their interactions. The UTAs have also become actively involved in providing feedback about the course design and have been suggesting improvements to assignments and in-class examples. They have also been involved in the process to hire new UTAs to replace those that are graduating. We have observed that such interactions have improved the UTAs sense of investment and ownership in the CS1 course.	Through the looking glass: reflections on using undergraduate teaching assistants in CS1	NA:NA:NA	2018
Sebastian Niezgoda:Thomas P. Way	Plagiarism of material from the Internet is a widespread and growing problem. Computer science students, and those in other science and engineering courses, can sometimes get away with a "cut and paste" approach to assembling a paper in part because the expected style of technical writing is less expositional than in liberal arts courses. Detection of cut and paste plagiarism is time-consuming when done by hand, and can be greatly aided by automated software tools. This paper reports on the design of a software tool called SNITCH that implements a fast and accurate plagiarism detection algorithm using the Google Web API. Issues related to plagiarism detection software are discussed and empirical results of a performance and accuracy study are presented.	SNITCH: a software tool for detecting cut and paste plagiarism	NA:NA	2018
Robert E. Noonan	The phases of a grading system are discussed, namely: delivery, assessment, marking, review, and return. A system which addresses the back end, namely, the last three phases, is described. Late binding of marks to a graded project is used, simplifying the revision process. The use of the system by various courses and its benefits are discussed.	The back end of a grading system	NA	2018
Myles McNally:Michael Goldweber:Barry Fagin:Frank Klassner	NA	Do lego mindstorms robots have a future in CS education?	NA:NA:NA:NA	2018
Brian J. Rosmaita:Katherine Deibel:Robert F. Cohen:Mary Anne L. Egan	NA	Accessibility and computer science education	NA:NA:NA:NA	2018
Peter Denning:Andrew McGettrick:Paul Rosenbloom:Larry Snyder	NA	Re-centering computer science	NA:NA:NA:NA	2018
Thomas J. Cortina:Richard McKenna	In this paper, we describe the design and implementation of a new history of computing course that includes personal and historical perspectives from faculty members to supplement the course material. Despite decreasing enrollments in our computer science courses, this new course has achieved significantly large enrollments and a wide audience due to this unique faculty perspective in addition to the approval of this course as a general education requirement that addresses the implications of science and technology on society.	The design of a history of computing course with a unique perspective	NA:NA	2018
Michael B. Gousie	Web Programming, Graphics, and Design is a course with no prerequisites that teaches non-computer science majors how to create their own sophisticated web pages. The course begins with the use of popular software such as Dreamweaver and Fireworks and then progresses to writing interactive web pages in Java. Students learn how to program with Java's Abstract Window Toolkit (AWT) as well as the graphics library, leading to the creation of 3D images. Solving problems involving mathematics is a theme throughout much of the course. Finally, following Wheaton College's curricular emphasis on inter-departmental offerings, the course is linked with Graphic Design I in the Art Department, enabling students to learn the design portion in even greater depth.	A robust web programming and graphics course for non-majors	NA	2018
Daniel C. Cliburn	This paper describes a non-major introductory course in computer science, specifically for students at a liberal arts institution. College-wide writing and speaking requirements across the curriculum are supported through a variety of assignments. The computer science department has experienced many benefits as a result of offering this course, including improved performance by students in introduction to programming and greater enrollment numbers across departmental courses. Suggestions for improving future offerings of the class are also proposed in the paper.	A CS0 course for the liberal arts	NA	2018
Li Xu:Fred G. Martin	Traditionally, the topics of compiler construction and language processing have been taught as an elective course in Computer Science curricula. As such, students may graduate with little understanding or experience with the useful techniques embodied in modern compiler construction.In this paper, we present the design of Chirp, a language specification and compiler implementation. As a language, Chirp is based on Java/C syntax conventions and is matched with the stack-based virtual machine that is built into the simple yet versatile Handy Cricket educational robot controller. As a compiler, the Chirp design is a series of Java components. These modules demonstrate key compiler construction techniques including lexing, parsing, intermediate representation, semantic analysis, error handling and code generation.We have designed a 6-week teaching module to be integrated into an intermediate-level undergraduate programming class. In the module, students will incrementally build the Chirp compiler, culminating with code generation for the Cricket controller. They will test their work on both physical Cricket-based robots and a web-based Cricket simulator. The Chirp system and our pedagogical design provides a realistic and engaging environment to teach compilers in undergraduate core programming courses.	Chirp on crickets: teaching compilers using an embedded robot controller	NA:NA	2018
William M. Waite	The broadening of computer science education has called into question the roles of many traditional core courses. In order to remain viable, courses such as compiler construction must provide a coherent view of their subject matter that fits with the rest of the institution's curriculum. Three strategies have evolved for this course. As described in this paper, each strategy provides a model that a professor can use to design an appropriate course for their situation.	The compiler course in today's curriculum: three strategies	NA	2018
Jeremy D. Frens:Andrew Meneely	Traditional approaches to semester-long projects in compiler courses force students to implement the early stages of a compiler in depth; since many students fall behind, they have little opportunity to implement the back end. Consequently, students have a deep knowledge of early material and no knowledge of latter material. We propose an approach based on incremental development and test-driven development; this approach solves the emphasis problem, provides experience with useful tools, and allows for such a course to be taught in a three or four weeks.	Fifteen compilers in fifteen days	NA:NA	2018
Sam Phu Manh Tran:T. Andrew Yang	Target tracking is one of the most important applications of wireless sensor networks. Optimized computation and energy dissipation are critical requirements to maximize the lifetime of the sensor network. There exists a demand for self-organizing and routing capabilities in the sensor network. Existing methods attempting to achieve these requirements, such as the LEACH-based algorithms, however, suffer either redundancy in data and sensor node deployment, or complex computation incurred in the sensor nodes. Those drawbacks result in energy use inefficiency and/or complex computation overhead. OCO, or Optimized Communication and Organization, is an algorithm that ensures maximum accuracy of target tracking, efficient energy dissipation, and low computation overhead on the sensor nodes. Simulation evaluations of OCO are compared with other two methods under various scenarios.	Evaluations of target tracking in wireless sensor networks	NA:NA	2018
William I. Bullers, Jr.:Stephen Burd:Alessandro F. Seazzu	Virtual machines provide a secure environment within which students may install, configure, and experiment with operating system, network, and database software. This paper describes experiences teaching three advanced courses in system and network administration, information security and assurance, and database administration using VMware workstation in a shared student laboratory. The paper describes benefits and challenges in course and lab configuration, security, and administration.	Virtual machines - an idea whose time has returned: application to network, security, and database courses	NA:NA:NA	2018
John DeHart:Fred Kuhns:Jyoti Parwatikar:Jonathan Turner:Charlie Wiseman:Ken Wong	The Open Network Laboratory (ONL) is a remotely accessible network testbed of high performance routers which has been designed with an eye towards ease of use for users from the naïve to the expert. The system is built around a set of high-performance routers that are extendible and easily configurable through the Remote Laboratory Interface (RLI), an intuitive graphical interface. The RLI also makes it easy to configure packet filters in the routers, assign flows or flow aggregates to separate queues with configurable QoS and attach hardware monitoring points to real-time charts. The RLI's real-time charts and user data facility make it easy to directly view the effects of traffic as it moves through a router, allowing the user to gain better insight into system behavior and create compelling demonstrations. Each port of the router is equipped with an embedded processor that supports software plugins which allow users to extend the system's functionality. This paper describes the ONL and how it can be used in networking education. Our web site onl.arl.wustl.edu includes a short video and a tutorial.	The open network laboratory	NA:NA:NA:NA:NA:NA	2018
Lawrence J. Osborne	Our entering freshmen have little experience with the underlying concepts of computer science and information technology, and they are not familiar with the process of absorbing new information through listening and reading and cooperating with other well-trained individuals to increase their knowledge and skills in a subject. Simply making group assignments requiring research papers and presentations does not enable students to appreciate this process which is a characteristic of all fields of scientific inquiry today. Most of our upper division courses have team projects, but student culture resists effective teamwork. We have established a course for freshman entitled "Thinking, Speaking, and Writing in Computer Science" in which we try to lay the groundwork for group work in later classes by fostering a sense of interdependence among team members, accountability of individual students to the team in the form of preparation and completion of project tasks, frequent meetings to promote team goals, the development of social skills required for collaboration, and the value of group discussion of strategies in problem solving. Although the course has been in existence only two years, our department has observed that students are finding that following this approach to learning leads to improved academic performance, and that students are becoming more adept in learning skills as they realize the benefits that accrue from our approach to intelligent interaction with their peers and instructors.	Thinking, speaking, and writing for freshmen	NA	2018
Mark E. Hoffman:Timothy Dansdill:David S. Herscovici	Writing in Computer Science education is typically writing to communicate to a professional audience--also known as "writing in the discipline." (WID) A few Computer Science educators have promoted "writing to learn" (WTL) for active learning. A gap exists between these two forms of writing that inhibits the general adoption of writing in Computer Science. We propose that "bridging" informal WTL assignments to formal disciplinary writing as a way of promoting general adoption of writing across all courses, thus improving thinking and writing skills for all Computer Science students. We include examples of assignments that bridge writing to learn and writing in the discipline.	Bridging writing to learn and writing in the discipline in computer science education	NA:NA:NA	2018
Henry A. Etlinger	We describe a framework in which to consider designing an entire course for Computer Science majors that covers both technical communications as well as more general communication issues. By utilizing abstraction, we're able to fashion a framework that allows instructors to design specific course elements that meet their needs or priorities. We take advantage of many other efforts reported upon in the past that discuss processes that students can follow in developing effective communication artifacts, blend writing or speaking assignments into individual courses, or talk about communication-intensive courses.	A framework in which to teach (technical) communication to computer science majors	NA	2018
Roger Ferguson:Chang Liu:Mary Last:Joe Mertz	NA	Service-learning projects: opportunities and challenges	NA:NA:NA:NA	2018
Stu Zweben:Han Reichgelt:Gayle Yaverbaum	NA	Outcomes-based computing accreditation criteria	NA:NA:NA	2018
Eric Roberts:Kim Bruce:James H. Cross, II:Robb Cutler:Scott Grissom:Karl Klee:Susan Rodger:Fran Trees:Ian Utting:Frank Yellin	NA	The ACM java task force: final report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Graciela Gonzalez	This paper presents a description of a course redesign to incorporate active and cooperative learning techniques into an Introduction to Programming course (CS1) in a systematic way that addresses all aspects of the course: delivery, management, and assessment. The primary goals of the experience were to improve student learning in CS1 and help students develop a support system. By increasing their competence and confidence, and helping them establish a working relationship with their peers, we sought to improve their persistence and performance in the program. We thus focus on student performance and retention through the follow-up class (CS2) as taught at Sam Houston State University. The results are encouraging. We observed that 70% of those students that had the Active Learning experience in CS1 end up getting a passing grade in CS2, with only 10% withdrawing (dropping or resigning), in contrast to a 44% passing rate and 25% withdrawal rate among those that took a regular CS1 class.	A systematic approach to active and cooperative learning in CS1 and its effects on CS2	NA	2018
Dawn McKinney:Leo F. Denton	The research on teaching and learning over the past 50 years suggests that the early use of collaborative learning leads to higher interest, higher retention, and higher academic performance in students. Early use of these techniques can also increase the sense of belonging for students and can lead to the early development of collaborative skills to prepare students for team experiences in subsequent courses and future careers. During the weekly lab sessions of a second semester introduction to programming course students engaged in collaborative learning experiences through team-based problem solving, project planning, pair programming, and other agile software development practices. Course objectives provided specific goals and criteria for assessment relative to these skills. The assessment in the authors' prior work identified several problem areas which led to specific initiatives to address those problems: (a) instructor-chosen teams, (b) early instruction and reflection on team skills, (c) feedback on team performance, and (d) the use of an IDE that incorporates an automated test-driven development tool. This paper describes the implementation and assessment of these efforts. A significant increase in student team skills from the middle of the semester to the end of the semester was observed.	Developing collaborative skills early in the CS curriculum in a laboratory environment	NA:NA	2018
Timothy A. Budd	In this paper, we describe the how active learning techniques have been successfully applied in a CS 2 course.	An active learning approach to teaching the data structures course	NA	2018
Matt Bower	For lecturers who are used to presenting face-to-face, facilitating online classes through a virtual classroom interface proposes several new challenges. At the same time the affordances of the media offer many opportunities to improve the quality of students' learning. This paper outlines the pedagogical lessons derived from convening a first year introductory programming unit through a series of twelve, two-hour online classes. General virtual classroom strategies as well as those particular to computer science are described. Approaches to developing students' virtual classroom competencies, approaches to groupwork, and the implications of virtual classrooms for professional development and research are also discussed.	Virtual classroom pedagogy	NA	2018
Amy B. Woszczynski	As high schools begin to offer more distance learning courses, universities have an opportunity to establish partnerships to deliver online computer science courses. As we face declining enrollment, these partnerships offer the ability to reach a significant portion of students who may not otherwise consider computer science. Particularly for underrepresented groups, such as African-Americans, Hispanics, women, and first-generation college students, these partnerships offer the potential to recruit additional students into computing fields. This paper describes the first portion of a multi-year partnership between a large university and multiple high schools in a metropolitan area. CyberTech I is an online introduction to computer science course offered to high school students by university faculty. Initial results indicate that students were generally satisfied with their online course experience and plan to continue to participate in the program. We describe the curriculum introduced and discuss some of the challenges faced and the lessons learned.	CyberTech I: online introduction to computer science course for high school students	NA	2018
Iwona Miliszewska:John Horwood	A Computer Science degree is offered by Victoria University both locally in Australia and transnationally in Hong Kong. The degree includes a compulsory final year Project subject. The Project, a team effort, involves the design and implementation of a real-life computer application for an external client. Academics responsible for the degree consider Project and its three components of group context, project-based problems, and outside focus essential to transforming computing students into competent graduates. Do Project students support this view? This paper reports on a comparative study of the students' perceptions of the project experience and the relative importance of its three components. The paper discusses the results of the study with respect to the different locales, Melbourne and Hong Kong, and concludes by considering the implications of the study on the Project model.  Erratum: This paper is slightly edited from: Miliszewska, I., & Horwood, J. (2004). Engagement Theory: A Framework for Supporting Cultural Differences in Transnational Education, Proceedings of the HERDSA Conference, Miri, Malaysia, July 2004, (electronic proceedings).  This is a revised and extended version of: Miliszewska, I., Horwood J., & McGill, A. (2003). Transnational Education through Engagement: Students Perspective, Proceedings of the Informing Science and IT Education Conference IS2003, Pori, Finland, June 2003, 165-173.	Engagement theory: a universal paradigm?	NA:NA	2018
Saeko Matsuura	In recent years, it has been widely acknowledged that classes designed by utilizing PBL (Project-Based Learning) are effective in enhancing the problem-solving ability of university students. In PBL-based classes, students try to apply their knowledge to solve the problems by themselves; therefore, such classes are effective in improving problem-solving and communication abilities of students. However, it is difficult for a teacher to appropriately assess individual contributions in a group work such as PBL. Since 2002, we have been planning and conducting group-work-based software development experiments as an approach to PBL. This paper describes the manner in which the class was designed and conducted in order to evaluate the contribution of each individual student based on the degree of achievement of a goal in a group work. We propose an evaluation method based on an evaluation model of PBL and discuss the trial results.	An evaluation method of project based learning on software development experiment	NA	2018
Titus Winters:Tom Payne	New accreditation requirements focus on education as a "continuous improvement process." The most important part of such a process is that information gets fed back into the system to improve the quality of the output. This requirement is often interpreted to imply a course-level feedback loop that iterates on offerings of courses or entire academic years. This paper provides a smaller and more immediate feedback loop. This technique gives instructors feedback onthe quality of each question on a test or quiz, as well as a numeric score for the difficult of the question. A simple tool implementing this procedure can be used to help train instructors on which questions are difficult, as well as what types of questions are correlated with ability, and how to design a meaningful instrument of assessment. Performing this analysis at the end of a course offering could help demonstrate continuous improvement to accreditation committees. Performing this analysis immediately after the administration of a test or quiz can point out topics that the class as a whole have failed to understand, thus giving instructors more insight into student knowledge.	Closing the loop on test creation: a question assessment mechanism for instructors	NA:NA	2018
David B. Levine:Henry M. Walker	The grading of student work is of the utmost importance to a computer science educator. This paper examines the practices of eXtreme Programming (XP) and considers how they apply to the tasks of assigning grades to student work, even as those grades must both evaluate the student objectively and communicate with her personally.	XP practices applied to grading	NA:NA	2018
Dorothy Deremer:Katherine G. Herbert	In this paper, we describe a new interdisciplinary B.S. degree in Science Informatics at Montclair State University, a multipurpose public institution that includes a substantial General Education component. Beginning in the freshmen year, the Science Informatics curriculum contains 16 semester hours of interdisciplinary science informatics courses including a freshmen experience, internships, a research component, ethics, and a concentration currently in bioinformatics, cheminformatics, or computer science as well as core science and mathematics courses.	An interdisciplinary undergraduate science informatics degree in a liberal arts context	NA:NA	2018
Jacquelyn S. Fetrow:David J. John	An interdisciplinary bioinformatics course has been taught at Wake Forest for three semesters. Undergraduate and graduate students from multiple academic specialties are brought together in a single classroom. In addition to focusing on traditional bioinformatics topics, this course concentrates on interdisciplinary collaboration in the in-class exercises and the research-based course project. A team of faculty from complementary disciplines teach the course. Productive communication is one key goal of this course.	Bioinformatics and computing curriculum: a new model for interdisciplinary courses	NA:NA	2018
James Blahnik:Bonnie McVey:David Pankratz	In response to recent studies on enrollment trends and our own assessment results, we have significantly modified our Computer Science major to include not only a traditional major in computer science but also to include concentrations in Business Information Systems and Graphic Design and Implementation. As we are a small liberal arts college with three faculty members and a small budget, we have partnered with other disciplines on campus to provide options for our majors to apply concepts and principles of computer science to other areas. We present here our plans of study for the three concentrations, our rationale for making these additions, and favorable responses from students, faculty, and administration.	Adding concentrations to the CS major: our dean calls us 'innovative'	NA:NA:NA	2018
Vicki L. Almstrum:David Klappholz:Steven Condly:John Clement	NA	Are they learning what (we think) we're teaching?	NA:NA:NA:NA	2018
M. Armoni:S. Rodger:M. Vardi:R. Verma	NA	automata theory: its relevance to computer science students and course contents	NA:NA:NA:NA	2018
Lillian (Boots) Cassel:Andrew McGettrick:Robert H. Sloan	NA	A comprehensive representation of the computing and information disciplines	NA:NA:NA	2018
Robb Cutler:Chris Stephenson	The on-going crisis in K-12 computer science education is now exacerbating pipeline issues at all educational levels. This session explores Computer Science Teachers Association's perspective on addressing the challenges facing K-12 computer science and how the solutions will the benefit both secondary and post-secondary education.	Working together to improve K-12 computer science education	NA:NA	2018
Thomas P Way	Undergraduate students who perform research benefit greatly from the experience, yet achieving high levels of voluntary participation remains an elusive goal. This paper describes the implementation of an innovative laboratory model designed to encourage computer science undergraduates to actively pursue collaborative research with faculty and other students. As an extension of earlier research into team-based software engineering education, the Applied Computing Technology Laboratory was formed to provide an authentic and engaging experience in real-world computer science research. The model, which relies on a web site as its focus, is presented along with the results of one year of active research.	A Virtual Laboratory Model for Encouraging Undergraduate Research	NA	2018
Jennifer A. Polack-Wahl:Karen Anewalt	Undergraduate students often lack the skills necessary to conduct independent research. In order to improve students' skills in research, the Computer Science department at the University of Mary Washington has designed and offered a course in research methods. The course teaches students about learning strategies that they can apply across the computing discipline and beyond. This paper describes the process that was used to create a new research methods course, the details related to the first offering of the course, and findings on how the course changed students' perception of research.	Learning strategies and undergraduate research	NA:NA	2018
Deborah L. Knox:Peter J. DePasquale:Sarah M. Pulimood	Integrating emerging technologies into the curriculum is expected in our evolving discipline, although finding the time to master these can prove difficult. Institutional expectations for scholarly achievement need not take precedence; the use of an overarching theme for a summer research experience is presented as one approach to join a group of people with a unifying topic for study and discussion leading to the natural incorporation of the emergent technology into the curriculum.This paper presents a successful model for undergraduate summer research where participants, both faculty and students, investigated information security (IS) topics and learned from IS professionals. This was applied to individual research projects in disconnected areas in computing. The unifying experiences encouraged a collegial and supportive environment, firmly establishing peer and faculty / student collaboration. Student perceptions about the field and career options were positively effected, leading to increased interest in the emergent area as well as in future graduate studies.	A model for summer undergraduate research experiences in emerging technologies	NA:NA:NA	2018
Tamara Denning:William G. Griswold:Beth Simon:Michelle Wilkerson	Experimentation has shown that in-class educational technologies, by permitting anonymous, authored participation, can dramatically alter student communications in the classroom. Now, the appearance of dual pen-and-keyboard computing devices in the university classroom, notably Tablet PCs, motivates thinking critically about how different expressive modalities could improve in-class student problem -solving and communication.This paper describes the use of Ubiquitous Presenter 2.0 in a study to discover the driving issues of multimodality for both in-class technologies and student exercises. This paper sensitizes instructors to the issues of modality and makes specific recommendations for application design. We find that the choice of modality is not merely one of efficiency or naturalness, but is loaded with numerous personal, social, and material considerations. Although use of the pen (over typed text) is generally preferred, we find that choice itself is critical to encouraging student creativity, collaboration, and communication.	Multimodal communication in the classroom: what does it mean for us?	NA:NA:NA:NA	2018
Shannon Pollard:Robert C. Duvall	By expanding the teaching styles used in computer science classrooms, we can expand the audience of students that enjoy and excel in technology. Rather than focusing on major curriculum changes or new programs specifically for non-traditional students, we propose that relatively simple expansions in teaching style can have significant results. In particular, we advocate incorporating teaching techniques reminiscent of kindergarten: games, toys, stories, and play. These techniques promote an active learning environment, level the playing field for non-technical students, provide motivation beyond grades, and make class time fun. In this paper, we want to acknowledge the many activities others have proposed by providing a coherent categorization of such activities and show how to use these techniques throughout the curriculum rather than as special experiences.	Everything I needed to know about teaching I learned in kindergarten: bringing elementary education techniques to undergraduate computer science classes	NA:NA	2018
K. Christensen:D. Rundus:G. Perera:S. Zulli	Service-learning enables computer science and engineering students to apply and refine their technical skills, learn new soft skills, and make a contribution to their community. At the University of South Florida we have organized a group of computer science and engineering students, called the CSE Volunteers, to provide IT support to the Hillsborough County School District. In spring 2005 over 7% of our undergraduate students voluntarily served in this program. While the work is fairly low-level, the experience for the students and school district has been very positive. Future directions include quantitative assessment, tackling projects of greater complexity, seeking corporate funding, and applying this program to help recruit new students to the major.	CSE volunteers: a service learning program to provide IT support to the hillsborough county school district	NA:NA:NA:NA	2018
Michael J. Jipping:Sara Henry:Kathleen Ludewig:Leslie Tableman	A crucial part of the Computer Organization course is the examination of and experimentation with digital logic circuits. In departments with limited budgets, however, this activity can be problematic. Due to historical roots and enrollment sizes, departments tend to focus on software aspects of computer science. This means that hardware concerns are often relegated to textbook and paper-and-pencil examination. This paper details how to use field programmable gate arrays -- hardware gates with a programming interconnection switch -- in the Computer Organization course. We will overview the reasons for using them, outline ways to use them effectively and cheaply, and demonstrate FEWD, our system for integrating visual design with FPGAs for student experimentation.	How to integrate FPGAs into a computer organization course	NA:NA:NA:NA	2018
Kenneth Vollmar:Pete Sanderson	We describe the implementation of "MARS," a GUI, Java-based simulator for the MIPS assembly language. MIPS, the computer architecture underlying the simulated assembly language, is widely used in industry and is the basis of the popular textbook Computer Organization and Design [6], used at over 400 universities. The MARS simulator has been implemented with characteristics that are especially useful to undergraduate computer science students and their instructors.	MARS: an education-oriented MIPS assembly language simulator	NA:NA	2018
Patrick Borunda:Chris Brewer:Cesim Erten	We describe our system, GSPIM, used for visualization of low-level MIPS Assembly programming and simulation. Although many visualization tools for algorithms and high-level programs have been considered in educational settings, visualization specific to low-level programs have not received enough consideration. One desirable property of such a visualization is that it should close the gap between high-level programming constructs and the sequential nature of low-level programs. Secondly it should provide techniques to present information specific to the simulation of the code. GSPIM supports both properties and is publicly available at http://www.cs.arizona.edu/~cesim/gspim.tar.gz	GSPIM: graphical visualization tool for MIPS assembly programming and simulation	NA:NA:NA	2018
Eric Larson	The importance of software bug detection tools is high with the constant threat of malicious activity. Companies are increasingly relying on software bug detection tools to catch exploitable bugs before the program is released. This paper describes a course on software bug detection techniques that is aimed at undergraduates. Courses in software verification are often taught at the graduate level and too theoretical and research oriented for undergraduates. A key component of the course is the programming assignments where students gain practical experience in creating their own software bug detection tools using a source to source converter for a subset of C++.	An undergraduate course on software bug detection tools and techniques	NA	2018
David S. Janzen:Hossein Saiedian	Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.	Test-driven learning: intrinsic integration of testing into the CS/SE curriculum	NA:NA	2018
Rahul Agarwal:Stephen H. Edwards:Manuel A. Pérez-Quiñones	Adaptive learning systems aim to precisely tailor education and training to the individual needs of learners. Such systems use an internal model of a user's current knowledge to adjust the navigational affordances and presentation order of material. The user model is incrementally built and updated as the user demonstrates mastery by completing exercises and tests. Designing courses that are delivered adaptively involves addressing many complexities. This paper describes experiences designing the first adaptive module in a series intended to teach software testing skills. Experiences in using the first module and a preliminary evaluation of its effectiveness are presented.	Designing an adaptive learning module to teach software testing	NA:NA:NA	2018
Antonio M. Lopez, Jr.:Robert Lent:Frederick G. Lopez:Madonna G. Constantine	NA	A multi-disciplinary look at the computing disciplines	NA:NA:NA:NA	2018
Edward Angel:Steve Cunningham:Peter Shirley:Kelvin Sung	NA	Teaching computer graphics without raster-level algorithms	NA:NA:NA:NA	2018
Bill Marion	NA	Final oral report of the SIGCSE committee on the implementation of a discrete mathematics course	NA	2018
Brian J. Rosmaita	This paper proposes an accessibility first pedogogy for web design, in which the course is organized around the requirement of implementing web pages accessible to visually impaired computer users. This approach and its advantages are discussed in detail.	Accessibility first!: a new approach to web design	NA	2018
Robert M. Siegfried	The proliferation of graphical user interfaces has had a dramatic impact on the ability to work as a programmer. It is particularly difficult for the blind to create forms for visual programming applications, such as Visual Basic. A scripting language is introduced that enables the blind to create Visual Basic forms without needing to specify a great deal of detail and without needing the "point and click" approach that they cannot use. Related issues of accommodating the blind in a computer science course are also discussed.	Visual programming and the blind: the challenge and the opportunity	NA	2018
Robert F. Cohen:Arthur Meacham:Joelle Skaff	We present our ongoing research in the communication of graphs and relational information to blind computer science students. We have developed a system called exPLoring graphs at UMB (PLUMB) that displays a drawn graph on a tablet PC and uses auditory cues to help a blind user navigate the graph. Beyond Computer Science education, this work has applications to assist blind individuals in navigation, map manipulation and other applications that require graph visualization.	Teaching graphs to visually impaired students using an active auditory interface	NA:NA:NA	2018
Peter DePasquale	The Internet is an exciting place to find real, interesting, and interactive sources of data for use in the classroom. This data (often real world), can provide the basis of interesting projects for CS1 and CS2 courses. Additionally, the source or exchange protocol can be used as a gentle introduction for novice computer science majors to the myriad of data formats and emerging technologies available today. Presented here are a number of interesting data sources used during the 2004-2005 academic year in our own CS2 data structures course.	Exploiting on-line data sources as the basis of programming projects	NA	2018
Viera K. Proulx:Kathryn E. Gray	We report on the experience of teaching an introductory second semester computer science course on Fundamentals of Computer Science that uses our curriculum How to Design Class Hierarchies and the ProfessorJ programming languages implemented within the DrScheme programming environment.This comprehensive curriculum for an introductory course focuses on principled design of class based programs in an object-oriented language (Java) with a carefully structured gradual increase in the complexity of the class structure and the programming language.The curriculum includes extensive lecture notes, programming assignments, closed lab plans, exams, and the first part of a textbook. The curriculum is supported by a programming environment ProfessorJ with a series of gradually more complex teaching languages that support a novice learner. The pedagogy focuses on teaching the students problem solving and design skills that transcend the study of programming. The organization of the topics draws its strength from the theory of programming languages by focusing on the structure of data rather than on algorithms, user interactions, or arcane details of the programming language syntax.	Design of class hierarchies: an introduction to OO program design	NA:NA	2018
Stuart Reges	This paper describes a significant redesign of the introductory courses at the University of Washington that has led to increased enrollments, increased student satisfaction and an increase in the number of women admitted to the CS major. The new courses are still taught in Java, but they represent a return to the basics that were emphasized in the pre-Java era. The biggest changes have occurred in the CS1 course where we have replaced an "objects early" curriculum with a more traditional procedural approach using static methods in Java. The new CS1 course emphasizes problem solving, procedural decomposition and mastery of basic skills (e.g., loops, conditionals and arrays). The new CS2 course emphasizes data structures, linked lists, binary trees and recursion.	Back to basics in CS1 and CS2	NA	2018
Andreas Polze:Dave Probert	An operating system (OS) is a program that manages computer hardware. And although today's commercial-off-the-shelf desktop operating systems appear to be an integral part of PCs and workstation to many users, a fundamental understanding of the algorithms, principles, heuristics, and optimizations used is crucial for creating efficient application software. Furthermore, many of the principles in OS courses are relevant to large system applications like databases and web servers.Within this paper, we present our approach towards teaching OS concepts based on the Windows family of operating systems. In contrast to many stable Unix-based curricula, a Windows-based OS curriculum has to take into account the OS as a moving target. And although Windows source code has been made available to academic institutions, managing complexity is among the biggest challenges when teaching OS concepts based on Windows.Teaching experiences reported within this paper have lead to development of the "Curriculum Resource Kit (CRK)", an entire Windows-based OS curriculum that is freely available for download.	Teaching operating systems: the windows case	NA:NA	2018
Steven Robbins	This paper describes a simulator that allows users to explore concurrent I/O in UNIX. UNIX I/O provides an interesting example of how a shared variable, in this case the file offset, can be affected by concurrent access. The examples given can run on the simulator or a real UNIX-like system such as Linux, Solaris for Mac OS X. The simulator can run programs written by the user and display pictorially the relationship among various data structures involved in I/O, including the process file descriptor table, the system open file table, the inodes, and the data stored on disk. The user can run the program slowly, or step forward or back through the program to examine the data structures in detail. The simulator supports the creation of both child processes and threads as well as open, close, read, write, wait, join and detach functions. The simulator is freely available for download. It can be also be used directly from a browser without the need for installation.	A UNIX concurrent I/O simulator	NA	2018
Peter DeRosa:Kai Shen:Christopher Stewart:Jonathan Pearson	Operating system laboratory assignments based on bare hardware or detailed machine simulators can be excessively challenging for many students. In the most often used approach, students develop kernels on virtual machines with a much simplified hardware interface. Traditionally this simplification goes so far as to make realistic performance measurement impossible. We propose Vesper, an instructional disk drive simulator with a high degree of performance realism. Vesper retains simplicity while providing timing statistics close to that of real disk drives. The key to our approach is to provide hardware abstractions that are simple but yet capable of capturing device interactions with major performance impacts. Vesper laboratory assignments allow students to realistically explore the performance consequences of various system designs without the cumbersome aspects of the real hardware interface. This paper describes the design and implementation of the Vesper disk drive simulator. We evaluate the effectiveness of Vesper-based laboratory assignments in terms of operating system performance evaluation. Student experience and feedback are also reported.	Realism and simplicity: disk simulation for instructional OS performance evaluation	NA:NA:NA:NA	2018
Mark D. LeBlanc:Rochelle Leibowitz	Discrete mathematics lies at the heart of the discipline of computing and represents one of the few bodies of knowledge with consistent content in our young and changing curriculum. We offer a model of a full-year, two-course experience of discrete structures with the initial course taught by computer science faculty and the second course taught by faculty in mathematics. We argue for the strengths gained in multiple and repeated exposure to the rich set of core topics and for the initial course to occur in the first year rather than the traditional advice to "take calculus". In particular, we present a model of collaboration with mathematics faculty that provides computer science students with an enriched breadth and depth of exposure while helping small departments to handle the constraints in scheduling.	Discrete partnership: a case for a full year of discrete math	NA:NA	2018
David Pengelley:Inna Pivkina:Desh Ranjan:Karen Villaverde	We discuss a project based on an original source from 1838 by Gabriel Lamé, which was used to teach dynamic programming in an Algorithms and Data Structures course for junior level computer science students. The project was developed as part of a group effort at New Mexico State University on using original historical sources in teaching. The project is based on an excerpt from a letter of Monsieur Lamé to Monsieur Liouville on the question: Given a convex polygon, in how many ways can one partition it into triangles by means of diagonals? A variety of tasks in the project, which includes reading, writing, proving statements by mathematical induction, deriving formulas, writing computer programs and analyzing and comparing them for efficiency, help students to develop verbal, analytical and discrete mathematics skills necessary for computer science. We also discuss student reactions to the project and to learning from historical sources.	A project in algorithms based on a primary historical source about catalan numbers	NA:NA:NA:NA	2018
Michael R. Wick:Paul J. Wagner	Nearly every computer science curriculum includes a course called "Discrete Structures" or "Discrete Mathematics". Over the past few years, considerable attention has been paid to this course in an attempt to overcome the misperception by students that the material is mathematics and not related to computer science. Most of these efforts deal with attempting to explicitly show students the application of discrete mathematics within computer science. We present an application that adds to the efforts of this community by giving instructors a modern, powerful, and elegant example to motivate student engagement in discrete structures.	Using market basket analysis to integrate and motivate topics in discrete structures	NA:NA	2018
Thomas Naps:Susan Rodger:Guido Rößling:Rockford Ross	NA	Animation and visualization in the curriculum: opportunities, challenges, and successes	NA:NA:NA:NA	2018
William Aspray:A. Frank Mayadas:Moshe Y. Vardi:Stuart H. Zweben	NA	educational response to offshore outsourcing	NA:NA:NA:NA	2018
Laurence I. Peterson:Dale Benham:Amy B. Woszczynski:Rich Schlesinger	NA	CyberTech-ITEST: an NSF-funded initiative to attract and prepare underrepresented students for tomorrow's careers in the computing sciences	NA:NA:NA:NA	2018
Eric Roberts	As part of the documentation for its library packages, the Java Task Force (JTF)developed an online tutorial system that enables teachers and students to explore the resources provided by the Task Force in a highly interactive style. The individual pages that make up the tutorial often include demonstration programs that the reader can experiment with while remaining on the same web page as the explanatory text. Although the original motivation for developing that tutorial system was to document the JTF packages themselves, the structure is general enough for teachers to design their own tutorials and interactive demonstrations. This paper describes the structure of that tutorial system and illustrates its use. In addition, the paper describes some work-in-progress that will make it possible to create interactive lecture demonstrations from PowerPoint™ slides.	An interactive tutorial system for Java	NA	2018
Ryan McFall:Herbert Dershem:Darcy Davis	Much has been made of the transition of the instructor's role from "Sage on the Stage" to "Guide on the Side", focusing on active and collaborative learning in the classroom. The process of acquiring knowledge from textbooks has largely remained unaffected by this transition. Our work on electronic textbooks (e-textbooks) has focused on building e-textbooks that extend the reach of collaborative and active learning techniques to the reading process. This paper describes the outcomes of using our e-textbook in a one semester course on programming language design and implementation, including the impact on student learning, the degree to which they took advantage of the e-textbook's collaborative and active features, and their reaction to the use of the e-textbook as the primary text resource.	Experiences using a collaborative electronic textbook: bringing the "guide on the side" home with you	NA:NA:NA	2018
Valentin Razmov:Richard Anderson	This paper describes our experiences in promoting a learning environment where active student involvement and interaction, as well as openness to diversity of ideas are supported through innovative uses of technology in the classroom. In the context of an undergraduate course in software engineering, for two consecutive terms we have experimented with an existing software system for Tablet PCs that supports a set of classroom interaction styles. Our goal has been to determine if the use of the technology can increase the effectiveness of pedagogical techniques that naturally fit our instructional needs.We have found that student submissions -- a style of interaction whereby the instructor poses a question written on a slide and displayed on a tablet in front of each student, then students write their answers in digital ink and submit back to the instructor -- are a powerful tool for supporting the learning environment we aim to create in the classroom. We show that student submissions can help the instructor to engage all students, not merely the vocal ones, and to emphasize the value of diversity of opinions. They also enable immediate feedback from students to instructor -- something difficult in an environment without technological enhancements but which contributes to an improved understanding of everyone's needs and expectations.The discussion of how we used student submissions to support these pedagogical techniques may be relevant to educators interested in fostering student learning through creative uses of technology, as well as to instructors looking to expand their repertoires of teaching methods in software engineering and in other similar subjects.	Pedagogical techniques supported by the use of student devices in teaching software engineering	NA:NA	2018
Suzanne Smith:Sara Stoecklin:Catharina Serino	Refactoring is the process of transforming the internal structure of existing code while keeping the integrity of the code's functional requirements. Refactoring is proven to increase program maintainability, flexibility, and understandability and is recognized as a best practice in the software development community. However, with the exception of courses or lectures on extreme programming, refactoring is overlooked in the computer science curriculum. This paper helps demystify refactoring by introducing an incremental approach for teaching refactoring on the college level. Through this hands-on approach, refactoring can become an integral component in the computer science curriculum and an innovative means of reinforcing software engineering principles and good development practices. The approach and three introductory lessons are presented in this paper.	An innovative approach to teaching refactoring	NA:NA:NA	2018
Kevin Bierre:Phil Ventura:Andrew Phelps:Christopher Egert	For the introductory student, the process of learning to program is an arduous task. Not only does the student have to learn the syntax of a programming language, he or she also has to apply concepts of object-oriented design and software construction in service of the projects created within the classroom. Unfortunately, as students further their study of programming, they often feel disconnected from the examples and projects they construct as part of their coursework. Projects are often perceived as toy problems and do not match the graphics-rich, interactive notion of programming that students bring with them to class. In addition, projects and classroom exercises do not convey the appropriate level of complexity and fail in the task of challenging the student to critically think about what they are constructing. This paper discusses TankBrains, a cooperative and competitive programming project presented to students in the latter part of their introductory programming course sequence. Students are challenged to create simple tank artificial intelligences as teams, which are later tested against each other in head-to-head combat. Students create their TankBrains within a collaborative virtual environment, which enforces the physics and rules of the combat simulation. Students must also present their strategies and findings to each other. This paper also examines how the use of the TankBrain system influences the students' perception regarding achievements and learning in the classroom.	Motivating OOP by blowing things up: an exercise in cooperation and competition in an introductory java programming course	NA:NA:NA:NA	2018
Joel C. Adams	It is easy for computer science students and educators to write software applications in Java or C++ that are not object-oriented. In this paper, we present the Janus Principle -- a simple software engineering principle (related to the MVC design pattern) whose use produces highly object-oriented code. We demonstrate its effect by developing a simple Java networking application, first without using the Janus Principle, and then using it. Students and educators who follow this principle will write programs containing highly reusable code.	OOP and the Janus principle	NA	2018
Todd Shurn	Windows Media Player user interface "skin" creation has proven an extremely effective method to reinforce practical object oriented programming techniques. Skin creation motivated non-engineers, women and even high school students to learn XML, and Jscript scripting language. Non-computer science students were especially excited when their custom media player user interface operated as intended. Many students demonstrated their skin to potential employers as evidence of their creativity and programming prowess.This paper discusses how skin programming is related to the object oriented paradigm and may be used as an exemplary collegiate interdisciplinary design project. Examples illustrate how skin creation can emphasize design principles, fundamental programming concepts, and group software development. Software innovation is advanced via novel windows media player skins incorporating recently released features to provide an enhanced user interface for a target domain.	Programming fundamentals and innovation taught through windows media player skin creation	NA	2018
Jungsoon Yoo:Sung Yoo:Chris Lance:Judy Hankins	In this paper, we present an extensible visualization tool that is being used in a web-based closed laboratory system. The goal of this project is to provide a tool for both students and teachers that can help trace deficiencies in a student's understanding back to individual concepts. This visualization tool has been developed by using the tree abstract data type (ADT) which is built from the concepts to be covered in a lab, lecture, or course. Once the tree ADT is built, each node can be associated with different entities such as student performance, class performance, or lab development. Using this tool, a teacher can help students by discovering concepts that need additional lecture coverage, and students may discover concepts for which they need to spend additional time working on reinforcement exercises.	Student progress monitoring tool using treeview	NA:NA:NA:NA	2018
Reg Hahne:Cay Horstmann:David Reed:Don Allen	NA	Growl...roar...are we ready for tiger?: review of the current climate and changes to be implemented for the 2007 AP CS exam	NA:NA:NA:NA	2018
Susan H. Rodger:Bart Bressler:Thomas Finley:Stephen Reading	We present a hands-on approach to problem solving in the formal languages and automata theory course. Using the tool JFLAP, students can solve a wide range of problems that are tedious to solve using pencil and paper. In combination with the more traditional theory problems, students study a wider-range of problems on a topic. Thus, students explore the formal languages and automata concepts computationally and visually with JFLAP, and theoretically without JFLAP. In addition, we present a new feature in JFLAP, Turing machine building blocks. One can now build complex Turing machines by using other Turing machines as components or building blocks.	Turning automata theory into a hands-on course	NA:NA:NA:NA	2018
Timothy M. White:Thomas P. Way	Visualization and interactivity are valuable active learning techniques that can improve mastery of difficult concepts. In this paper we describe jFAST, an easy-to-use graphical software tool for teachers and students, with an emphasis on introductory level finite state machine topics. The jFAST software enables visual design, exploration and simulation of a variety of finite state machines, with a primary goal of enhancing teaching effectiveness in this subject, particularly for less advanced computer science students. The architecture and functionality of jFAST are explained, and results of preliminary evaluation are provided.	jFAST: a java finite automata simulator	NA:NA	2018
Michal Armoni:Judith Gal-Ezer	Abstraction has been the focus of many researches in mathematics education and to some extent in computer science education. Abstract thinking characterizes the theoretical foundations of computer science, where reduction is one important abstract thinking pattern. In a previous work, we discussed the issue of reductive thinking among high school students in relation to computational models -- a theoretical unit. This unit requires abstract thinking in many aspects. Our findings in relation to reductive thinking showed that many students preferred direct, non-reductive solutions, even if reductive solutions could have significantly decreased the design complexity of the solution. This study motivated the current study where we examine the issue of reductive thinking among university students. The findings of this preliminary study are demonstrated by students' solutions to questions in assignments given in the computational models course. We found that even among university students in a very prestigious academic institution with very high entrance requirements abstraction is a real obstacle as reduction is not easily understood and used. This encourages us to further investigate this phenomenon.	Reduction -- an abstract thinking pattern: the case of the computational models course	NA:NA	2018
Ursula Wolz:Tiffany Barnes:Ian Parberry:Michael Wick	NA	Digital gaming as a vehicle for learning	NA:NA:NA:NA	2018
David Ranum:Bradley Miller:John Zelle:Mark Guzdial	NA	Successful approaches to teaching introductory computer science courses with python	NA:NA:NA:NA	2018
Sarah Rauchas:Benjamin Rosman:George Konidaris:Ian Sanders	We describe the first part of a study investigating the usefulness of high school language results as a predictor of success in first year computer science courses at a university where students have widely varying English language skills. Our results indicate that contrary to the generally accepted view that achievement in high school mathematics courses is the best individual predictor of success in undergraduate computer science, success in English at the first-language level in high school correlates better with actual performance. We discuss the implications of this for universities whose medium of teaching is English, operating in social contexts where many students are not native English speakers.	Language performance at high school and success in first year computer science	NA:NA:NA:NA	2018
Anna Eckerdal:Robert McCartney:Jan Erik Moström:Mark Ratcliffe:Carol Zander	This paper examines software designs produced by students nearing completion of their Computer Science degrees. The results of this multi-national, multi institutional experiment present some interesting implications for educators.	Can graduating students design software systems?	NA:NA:NA:NA:NA	2018
Orit Hazzan:Yael Dubinsky:Larisa Eidelman:Victoria Sakhnini:Mariana Teif	This paper discusses the suitability of the qualitative research approach to computer science education research. It is based on the following two observations: First, only a small proportion of works presented in the computer science education literature contain some experimental component (Fincher and Petre, 2004; Valentine, 2004). Second, those research works conducted in computer science education that do, usually employ a quantitative research approach. This paper focuses on the qualitative research approach, presenting its nature, discussing its relationships to the quantitative research approach and addressing its application in general and in the context of computer science education in particular.	Qualitative research in computer science education	NA:NA:NA:NA:NA	2018
Pauli Byckling:Jorma Sajaniemi	Roles of variables capture tacit expert knowledge in a form that can be taught in introductory programming courses. A role describes some stereotypic use of variables, and only ten roles are needed to cover 99% of all variables in novice-level programs. This paper presents the results from a protocol analysis of a program creation task in an experiment where roles were introduced to novices learning Pascal programming. Students were divided into three groups that were instructed differently: in the traditional way with no treatment of roles in lectures or program animation; using roles in lectures but not in animation; and using a role-based program animator in addition to using roles in lectures. The results suggest that the introduction of roles provides novices a new conceptual framework for better mental processing of program information and that the use of role-based program animation increases novices' ability to apply data-related programming plans in program construction.	Roles of variables and programming skills improvement	NA:NA	2018
M.R.K. Krishna Rao	Storytelling has been used from time immemorial as a powerful educational tool to exchange and propagate complex ideas. Similarly, puzzles have been known as stimulators of thinking and problem solving skills. Both storytelling and puzzles found their rightful place in primary and secondary education through the years. However, their value in higher education has only been recognized recently. This paper describes how these two educational aids can be used for motivating various concepts of software engineering.	Storytelling and puzzles in a software engineering course	NA	2018
Chang Liu	Software project demonstrations are commonly used as an effective assessment tool in software courses. We found that in addition to helping instructors find out the status of student projects in a short period of time, project demonstrations motivate students and challenge them to synthesize, organize, prioritize, and articulate different aspects of their projects, all of which are important skills of professional software developers. Our experiment shows that project demonstrations are an effective learning tool as well. In this paper, we describe different types of project demonstrations in our experiment, including short, frequent five-minute demonstrations and formal final project demonstrations. This study was conducted in the context of a software engineering capstone project course.	Software project demonstrations as not only an assessment tool but also a learning tool	NA	2018
Lucas Layman:Travis Cornwell:Laurie Williams	This paper describes an initiative at North Carolina State University in which the undergraduate software engineering class was restructured in layout and in presentation. The change was made from a lecture-based coursed that followed the waterfall method to a lab-oriented course emphasizing practical tools and agile processes. We examine the new course layout from the perspective of Myers-Briggs personality types and Felder-Silverman learning styles to discuss how the new software engineering class format appeals to a wide variety of students. The new course format resulted in some of the highest student evaluations in recent course history. It is now the standard for the undergraduate software engineering course at the university and has since been used in other North Carolina institutions.	Personality types, learning styles, and an agile approach to software engineering education	NA:NA:NA	2018
David Callele:Dwight Makaroff	One of a Software Engineer's most important skills is the ability to define the scope of the problem and ascertain the requirements from general and vague specifications. Teaching this skill is known to be difficult and is made more complex because students are conditioned to expect that this portion of programming projects is already complete. This paper reports on experience in teaching a second year computer science class which exposed the need for requirements engineering and gave students an opportunity to engage in the activity. We found that the student response was bimodal, and while some students met the challenge, more felt betrayed by the experience. We conclude that students gained the requisite knowledge using this approach but that a less traumatic approach may produce better results.	Teaching requirements engineering to an unsuspecting audience	NA:NA	2018
Casey Alt:Owen Astrachan:Jeffrey Forbes:Richard Lucic:Susan Rodger	For forty years programming has been the foundation of introductory computer science. Despite exponential increases in computational power during this period, examples used in introductory courses have remained largely unchanged. The incredible growth in statistics courses at all levels, in contrast with the decline of students taking computer science courses, points to the potential for introducing computer science at many levels without emphasizing the process of programming: leverage the expertise and role-models provided by high school mathematics teachers by studying topics that arise from social networks and modeling to introduce computer science as an alternative to the traditional programming approach. This new approach may capture the interest of a broad population of students, crossing gender boundaries. We are developing modules that we hope will capture student interest and provide a compelling yet intellectually rich area of study. We plan to incorporate these modules into existing courses in math, statistics, and computer science at a wide variety of schools at all levels.	Social networks generate interest in computer science	NA:NA:NA:NA:NA	2018
Jerry O. Talton:Daniel L. Peterson:Sam Kamin:Deborah Israel:Jalal Al-Muhtadi	This paper describes Scavenger Hunt, a team-based orientation activity for incoming freshmen in the Department of Computer Science at the University of Illinois at Urbana-Champaign. Like many large research universities, Illinois has struggled with the high attrition rate of first-year students in computing disciplines. Scavenger Hunt, which has been held each of the past three years, is intended to foster a sense of community within the department and acclimate new students to undergraduate life as computer science majors. A unique aspect of the activity is the use of handheld computers to manage most aspects of the competition, which enables physically handicapped students to participate on an equal footing with their able-bodied peers. Thus far, Scavenger Hunt has been directly responsible for the increased participation of new students in departmental activities and organizations. In addition, we have observed a significant correlation between student participation in Scavenger Hunt and retention rates in the department. Along with other retention-oriented activities, Scavenger Hunt is measurably improving the attitude of new students towards computer science.	Scavenger hunt: computer science retention through orientation	NA:NA:NA:NA:NA	2018
Zachary Dodds:Leslie Karp	This paper tracks the five-year growth and current trajectory of a computational outreach program at a small, liberal-arts college. The program has enhanced opportunities for talented high-school students to experience computation more deeply than their HS curriculum currently offers. This outreach evolved from a naive initial premise into a mutually beneficial interaction between an undergraduate computer science department and a local secondary school. The most important factor in the program's sustainability is a supportive liaison within the high school's administration. We hope the lessons we have learned will help other CS departments develop sustainable outreach programs.	The evolution of a computational outreach program to secondary school students	NA:NA	2018
Laurence I. Peterson:Dale Benham	This paper describes an NSF-funded initiative involving 600 underrepresented high school students and 60 teachers designed to introduce underrepresented students to the numerous and varied career opportunities in the computing sciences, prepare them to succeed in college degree programs, and prepare their teachers to be effective in the computer science class room. The initiative has five components: 1) CyberTech I (Principles of Computing): An online introductory course for second-semester sophomores, 2) CyberTech II: A twenty day on-campus intense summer programming experience between the sophomore and junior year, 3) CT Games: A junior year video game programming experience to apply the programming knowledge gaining in CyberTech II, 4) AP Computer Science (using Java 5 as the programming language) taken during the senior year, and 5) training workshops for teachers to prepare them to teach computer programming. The overarching goal is to prepare students for a college-level degree program in the computing sciences by having them successfully complete the AP Computer Science course and exam while teaching the soft skills, such as team work, oral communication and problem solving necessary in a professional career. Additionally, role models from various industry sectors are utilized to introduce students to the exciting career opportunities in the computing sciences.	Overview of the cyberTech-ITEST project: an initiative to attract and prepare under-represented students for tomorrow's careers in the computing sciences	NA:NA	2018
Russell Shackelford:Andrew McGettrick:Robert Sloan:Heikki Topi:Gordon Davies:Reza Kamali:James Cross:John Impagliazzo:Richard LeBlanc:Barry Lunt	In 2001, the ACM and the IEEE-CS published Computing Curricula 2001 which contains curriculum recommendations for undergraduate programs in computer science. That report also called for additional discipline-specific volumes for each of computer engineering, information systems, and software engineering. In addition, it called for an Overview Volume to provide a synthesis of the various volumes. The Computing Curricula 2004 Task Force undertook the job of fulfilling the latter charge. The purpose of this session is to present the recently completed work of that Task Force, now known as Computing Curricula 2005 (CC2005), and to generate discussion among, and feedback from SIGCSE members about ongoing and future work.	Computing Curricula 2005: The Overview Report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Edward F. Gehringer:Katherine Deibel:John Hamer:Keith J. Whittington	NA	cooperative learning: beyond pair programming and team projects	NA:NA:NA:NA	2018
Yana Kortsarts:Jeffrey Rufinus	Any deterministic algorithm can be viewed as a game between the algorithm player and the input player. A randomized algorithm can be viewed as a mixed strategy for the first player, used to minimize the disadvantage of being the first to reveal its move. We suggest a simple and accessible guessing game that can serve as both a way to explain notions in algorithms (like worst case input) to students and also to illustrate the power of randomization, presented in an intuitive way.	Teaching the power of randomization using a simple game	NA:NA	2018
Jerome L. Paul:Michal Kouril:Kenneth A. Berman	This paper discusses a template-based approach to aid in introducing the upper-division undergraduate (or first year graduate) to the rapidly emerging message passing parallel computing paradigm. Our template library facilitates an accelerated MPI programming learning environment that can realistically be included as one topic among many in an algorithms course. One template module is based on a backtracking solution to the satisfiablity problem (SAT), which the student first solves in the sequential setting. With the aid of a modified template, the student then develops a simple parallel SAT solver. The template includes such things as I/O functions, allowing the student to focus on the algorithm itself. The parallel part is partially provided by the template, with indicators given in places where the student needs to plug in missing MPI function calls. The students are excited about this hands-on-experience in the increasingly important world of message passing parallel computing, which might be missed if their curriculum does not include a course devoted to this topic.	A template library to facilitate teaching message passing parallel computing	NA:NA:NA	2018
David Ginat:Michal Armoni	Program and proof designs are fundamental in computer science (CS). The designs involve the employment of various heuristics that may be considered rather inherent and natural, such as decomposition. Yet, not all heuristics are natural. One less natural, and rather unintuitive heuristic is that of reversing, in which a task is approached by reasoning backwards or viewing entities through "inverse lenses". One primary form of this heuristic is recursion. But, there are additional forms throughout the CS curriculum that are essential yet not underlined. In this paper we display these forms, underline their important role, and illustrate them in five core courses. In addition, we describe our experience with student difficulties due to unawareness and lack of competence with this heuristic, and offer preliminary guidelines for elaborating it during CS studies.	Reversing: an essential heuristic in program and proof design	NA:NA	2018
Roy P. Pargas:Dhaval M. Shah	This paper presents and discusses a modified approach to teaching an algorithms and data structures course (CS4). The approach relies on frequent evaluation of student understanding of course content and enables the instructor to experiment with various exercises to facilitate peer-instruction and cooperative learning. It uses a web application called MessageGrid which enables instructor and students, each of whom has a laptop computer with wireless access to the web, to interact in a variety of ways both in and out of class.	Things are clicking in computer science courses	NA:NA	2018
Amruth Kumar:Deepak Kumar:Ingrid Russell	NA	Non-traditional projects in the undergraduate AI course	NA:NA:NA	2018
Michela Pedroni:Bertrand Meyer	Teaching introductory programming today presents considerable challenges, which traditional techniques do not properly address. Students start with a wide variety of backgrounds and prior computing experience; to retain their attention it is useful to provide graphical interfaces at the level set by video games; and with the ever-increasing presence of computing in society the stakes are higher, requiring a computing curriculum to introduce students early to the issues of large systems. We address these challenges through an "outside-in" approach, or "inverted curriculum", which emphasizes the reuse of existing components in an example domain involving graphics and multimedia, a gentle introduction to formal reasoning thanks to Design by Contract techniques, and an object-oriented method throughout. The new course has now been taught twice, with considerable gathering of student data and feedback; we report on this experience and its continuation.	The inverted curriculum in practice	NA:NA	2018
Leen-Kiat Soh	Intelligent tutoring systems (ITSs) have been used to complement classroom instruction in recent years, and have been shown to facilitate learning. We incorporate an ITS named Intelligent Learning Materials Delivery Agent (ILMDA) into our CS1 course and collect evidence to validate two hypotheses: (1) The ITS improves student learning, (2) The ITS "learns" to tutor the students more efficiently and/or effectively. Our method of inquiry includes collecting data tracked while a student interacts with the ITS, post-test scores, and exam scores. We also use control and treatment groups, as well as different versions of the ILMDA in our experiments. Based on the results, we see indications that support the above two hypotheses.	Incorporating an intelligent tutoring system into CS1	NA	2018
Hamzeh Roumani	We argue that the failure to separate the concerns in CS1 is the leading cause of difficulty in teaching OOP in the first year. We show how the concerns can be detangled and present a detailed reorganization of contents for CS1/CS2 with CS1 exposing only the client view. We also report on our experience with this new pedagogy after three years of implementation at our institution.	Practice what you preach: full separation of concerns in CS1/CS2	NA	2018
Tzu-Yi Chen:Alvaro Monge:Beth Simon	What measurable effect do the language and paradigm used in early programming classes have on novice programmers' ability to do design? This work investigates the question by using data collected from 136 "first competency" students as part of a multi-national, multi-institutional study of students' approach to and attitudes toward design. Analysis of a number of surface characteristics of their designs found strikingly few differences between designs produced by students at schools that teach using objects-early, imperative-early, and functional-early paradigms. A similar lack of difference was found between students at C++-first and Java-first schools. While statistically significant differences are found for three characteristic comparisons across language and paradigm, these results seem to have little meaning for teaching given the complexity of the null hypotheses tested in those three cases. In particular, for the following design characteristics no statistically significant differences across language or paradigm of early instruction were found: attempt to address requirements, type of design produced, number of parts in design, recognition of ambiguity in design, and connectedness of design.	Relationship of early programming language to novice generated design	NA:NA:NA	2018
Jessica D. Bayliss:Sean Strout	Introductory programming courses have a specific set of expected outcomes. One of the most often heard complaints in such courses is that they are divorced from the reality of application. Unfortunately, it is difficult to find areas for application that all students have the background knowledge for and that are engaging and challenging. One such area is computer games and we have developed a cohesive CS1 course that provides traditional outcomes from within the context of games as an application area in both the lecture and lab components of the course. This course was piloted as a ten-week distance program for incoming computer science students with the defining features that the program carried no academic credit and offered no end grades. We discuss the overwhelming interest in this course as well as objective and suobjective student experiences. One of the most important outcomes of the summer course was that it brought students with similar interests and goals together. We discuss this and the different ways we have found to discuss computer science course topics from within a games context.	Games as a "flavor" of CS1	NA:NA	2018
Mark C. Lewis:Berna Massingill	This paper discusses a project that has been used to teach CS2 for six semesters at Trinity University. The project spans the full semester, and all eight of the assignments students turn in are part of the project. For this project, the students develop a 2-D game using a framework written by one of the authors. The framework is intended to allow students to produce some results early in the semester before they have significant knowledge without constraining them or doing too much for them. It was originally written for Java 1.3 and has evolved for Java 1.4 and now Java 5. We discuss the details of this project, the benefits it provides, and our experience with it.	Graphical game development in CS2: a flexible infrastructure for a semester long project	NA:NA	2018
Ian Parberry:Max B. Kazemzadeh:Timothy Roden	The University of North Texas has for many years offered classes in game programming to Computer Science students and classes in game art and design to art students. A key feature of these classes is the opportunity for these diverse communities of students to collaborate on joint projects. We describe the features that make these classes unique.	The art and science of game programming	NA:NA:NA	2018
A. T. Chamillard	Many incoming college freshmen have accumulated a significant number of hours of experience playing computer games. Extending that experience to actual game creation activities can be highly motivational for these students. Most of these activities require some level of programming expertise, however, making them activities too advanced for the majority of incoming students.In this paper, we describe a freshman-level course called Problem Solving through Game Creation. Students learn to use a number of drag-and-drop game creation tools to develop both 2D and 3D games, with no programming required in the course. We also cover a variety of other topics and tools related to game development.Our experience has been that students enjoy the course, but we have more formal course goals as well. Specifically, we hope to motivate students to declare and complete the computer science major and to better prepare students for the initial required computer science courses. We describe these goals in detail and discuss the process we have initiated to continually evaluate achievement of those goals.	Introductory game creation: no programming required	NA	2018
Michael J. Quinn	Case-based analysis is a bottom-up methodology for ethical reasoning. In a teaching environment, it can be a useful alternative to top-down methods, such as Kantianism, utilitarianism, rights-based theories, and virtue ethics. We describe a methodology for case-based analysis and illustrate the methodology by evaluating three test cases in the areas of Internet etiquette, intellectual property, and privacy, respectively. We summarize the strengths and weaknesses of using the case-based approach in a classroom setting.	Case-based analysis: a practical tool for teaching computer ethics	NA	2018
Fred G. Martin:Sarah Kuhn	A hands-on embedded computing project is introduced into an undergraduate social sciences course. In the pilot module, nine student teams created working prototypes, using the technology to address social, ecological and ethical issues. The teams included freshman to senior level computer science majors, other technical majors, and non-technical students. Most students became highly engaged in the activity, developed exciting ideas, and reported improved learning in the social sciences.	Computing in context: integrating an embedded computing project into a course on ethical and societal issues	NA:NA	2018
Anne G. Applin	This paper presents an approach to teaching Computer Ethics that blends the use of contemporary media, subscriptions to digests of current technology news, and reflective writing in a learner-centered strategy. This approach is designed to make use of activities and assignments that take advantage of (1) student interest in contemporary media (video and film) to provide motivation and context beyond historical case studies, (2) breaking news about technology and technology use in education to provide current real world context, and (3) reflective writing to stimulate thinking critically about the course content outside the classroom context. Digests published three times weekly provide a constant flow of current real-world issues that can be used for focused reflective writing. Contemporary media productions are viewed and then a writing assignment in a structured learning log is used to focus on ethical issues raised by the film. We present an example using a feature length film and subsequent learning log assignment.	A learner-centered approach to teaching ethics in computing	NA	2018
Richard G. Epstein	This paper describes an undergraduate course in computer security that has a strong ethical component. Ethical and related security topics are interwoven. The emphasis is on the kind of research that computer scientists and information technologists are conducting in order to address the fundamental problems in computer security. There is also a great emphasis on encouraging student creativity.	An ethics and security course for students in computer science and information technology	NA	2018
David R. Musicant	An undergraduate elective course in data mining provides a strong opportunity for students to learn research skills, practice data structures, and enhance their understanding of algorithms. I have developed a data mining course built around the idea of using research-level papers as the primary reading material for the course, and implementing data mining algorithms for the assignments. Such a course is accessible to students with no prerequisites beyond the traditional data structures course, and allows students to experience both applied and theoretical work in a discipline that straddles multiple areas of computer science. This paper provides detailed descriptions of the readings and assignments that one could use to build a similar course.	A data mining course for computer science: primary sources and implementations	NA	2018
Roxanne L. Canosa	This paper describes the development and structure of a second course in artificial intelligence that was developed to meet the needs of upper-division undergraduate and graduate computer science and computer engineering students. These students already have a background in either computer vision or artificial intelligence, and desire to apply that knowledge to the design of algorithms that are able to automate the process of extracting semantic content from either static or dynamic imagery. Theory and methodology from diverse areas were incorporated into the course, including techniques from image processing, statistical pattern recognition, knowledge representation, multivariate analysis, cognitive modeling, and probabilistic inference. Students read selected current literature from the field, took turns presenting the selected literature to the class, and participated in discussions about the literature. Programming projects were required of all students, and in addition, graduate students were required to propose, design, implement, and defend an image understanding project of their own choosing. The course served as preparation for and an incubator of an active research group.	Image understanding as a second course in AI: preparing students for research	NA	2018
Michael R. Scheessele:Thomas Schriefer	Assigning the development of a poker-playing agent as a group project allows flexibility with respect to the topics and techniques typically covered in an introductory Artificial Intelligence course. A poker agent project also provides students the experience of 'authentic' AI research, due to the status of poker as an 'unsolved' problem in AI. Despite this status, a poker agent project is feasible for a semester, half-semester, or quarter-long group project. Problems in assigning group projects are also considered, as are suggestions for mitigating these problems.	Poker as a group project for artificial intelligence	NA:NA	2018
Daniel B. Waegel:April Kontostathis	The paper describes the first version of the TextMOLE (Text Mining Operations Library and Environment) system for textual data mining. Currently TextMOLE acts as an advanced indexing and search engine: it parses a data set, extracts relevant terms, and allows the user to run queries against the data. The system design is open-ended, robust, and flexible. The tool is designed to quickly analyze a corpus of documents and determine which parameters will provide maximal retrieval performance. Thus an instructor can use the tool to demonstrate information retrieval concepts in the classroom, or use the tool to encourage hands-on exploration of concepts often covered in an introductory course in information retrieval or artificial intelligence. Reseachers will find the tool useful when a `quick and dirty' analysis of an unfamiliar collection is required.	TextMOLE: text mining operations library and environment	NA:NA	2018
Mary J. Granger:Guy-Alain Amoussou:Miguel A. Labrador:Sue Perry:Kelly M. Van Busum	NA	Research experience for undergraduates: successes and challenges	NA:NA:NA:NA:NA	2018
Kris Powers:Paul Gross:Steve Cooper:Myles McNally:Kenneth J. Goldman:Viera Proulx:Martin Carlisle	NA	Tools for teaching introductory programming: what works?	NA:NA:NA:NA:NA:NA:NA	2018
Nick Parlante:Steven A. Wolfman:Lester I. McCann:Eric Roberts:Chris Nevison:John Motil:Jerry Cain:Stuart Reges	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Judith Gal-Ezer	The title of this talk comes from a little book that I bought years ago, compiled by S.M. Scott. It includes fictional stories and quotations about teaching, reminiscences by former pupils about their teachers, etc. The title of the book is what caught my eye, since this is how I like to view the role teachers ought to play in people's lives.I truly believe that teachers constitute the cornerstone of any successful implementation of a program of study, on any level. Moreover, I think that beyond the mastery of the actual professional material they plan to teach, good teachers should also have deep and broad knowledge of the entire subject of which that material is part, and they must have the ability to convey the material to others correctly and reliably, to provide perspective, and to infuse the students with interest, curiosity, and enthusiasm. All this requires an educator to be more of an intellectual, at least in what concerns the relevant field at large.In the talk I'll try to elaborate on the teachers' role, and to discuss the principles that should underlie a good study program, while emphasizing high school computer science curricula. Thus, I will touch upon what I think should be the core issues for computer science education research. I will also share some anecdotes from my own life, which at the time motivated me to get involved in teaching and educating, in designing computer science study programs and in their implementation, and paved the way to my doing research on teaching the fundamentals of computer science.	To teach is to touch lives forever	NA	2018
Daniel D. Garcia	NA	Session details: Teaching tips we wish they'd told us before we started	NA	2018
Owen Astrachan:Nick Parlante:Daniel D. Garcia:Stuart Reges	NA	Teaching tips we wish they'd told us before we started	NA:NA:NA:NA	2018
Seung-won Hwang	NA	Session details: Learning solutions for the first year	NA	2018
James H. Cross, II:T. Dean Hendrix:Jhilmil Jain:Larry A. Barowski	The jGRASP lightweight IDE has been extended to provide object viewers that automatically generate dynamic, state-based visualizations of data structures in Java. These viewers provide multiple synchronized visualizations of data structures as the user steps through the source code in either debug or workbench mode. This tight integration in a lightweight IDE provides a unique and promising environment for learning data structures. Initial classroom use has demonstrated the object viewers' potential as an aid to students who are learning to write and modify classes representing data structures. Recently completed controlled experiments with CS2 students indicate that these viewers can have a significant positive impact on student performance.	Dynamic object viewers for data structures	NA:NA:NA:NA	2018
Bruce Adcock:Paolo Bucci:Wayne D. Heym:Joseph E. Hollingsworth:Timothy Long:Bruce W. Weide	A model and a taxonomy to characterize pointer manipulations are introduced, along with an instrumentation technology that leverages them to provide students with immediate reports of pointer errors in C++ programs. Data collected from CS2 student assignments show that the vast majority of student pointer errors either would not have been noticed at all, or would have been detected only much later in execution, if this infrastructure were not used. Possible applications of the underlying technology--both to conduct long-term educational research into students' understanding of pointers, and to improve pedagogy directly--are discussed.	Which pointer errors do students make?	NA:NA:NA:NA:NA:NA	2018
Atanas Radenski	Students who grew up browsing the Web are skilled in what is usually referred to as abduction, a reasoning process that starts with a set of specific observations and then generates the best possible explanation of those observations. In order to exploit the abduction skills of contemporary students, we have developed digital CS1/2 study packs that promote and support active learning through abduction, i.e., abductive learning. The study packs integrate a variety of digital resources: online self-guided labs, e-texts, tutorial links, sample programs, quizzes, and slides. These online packs stimulate students to learn abductively by browsing, searching, and performing self-guided lab experiments. In two years of study pack use, the failure rate in the CS1/2 courses at Chapman University has been reduced from 14% to 5%. The study packs have been published online at studypack.com and adopted in various institutions.	Digital support for abductive learning in introductory computing courses	NA	2018
Krish Narayanan	NA	Session details: Recruitment and retention of computing students	NA	2018
Lenore Blum:Thomas J. Cortina	In this paper, we describe a pilot summer workshop (CS4HS) held at Carnegie Mellon University in July 2006 for high school CS teachers to provide compelling material that the teachers can use in their classes to emphasize computational thinking and the many possibilities of computer science. Diversity and broadening participation was explicitly addressed throughout the workshop. We focused on broadening the image of what CS is -- and who computer scientists are -- since the reasons for under-representation in the field are very much the same as the reasons for the huge decline in interest. We describe the design of the workshop along with results from initial surveys and evaluations. Short-term evaluations show that this workshop was successful in changing the perception of CS for these teachers and giving them the impetus to include broader topics in their programming courses for the upcoming school year. Future surveys will track the long-term effect of this workshop.	CS4HS: an outreach program for high school CS teachers	NA:NA	2018
Elise H. Turner:Erik Albert:Roy M. Turner:Laurence Latour	Retention is an important issue for Computer Science Departments. In many cases students leave the major due to frustrations with programming in the complex languages often used in CS1 and CS2 or because they do not understand that computer science is much more than programming. We have redesigned our introductory sequence to include a rigorous, non-programming introduction to the field and a CS1 course which uses Scheme so that students can focus on the principles of programming instead of the complexities of a particular language. In the first year that we have required these courses in our major, we have had positive results. In this paper, we describe what we have learned through discussions with students and student surveys.	Retaining majors through the introductory sequence	NA:NA:NA:NA	2018
Larisa Eidelman:Orit Hazzan	Worldwide surveys indicate that the number of women studying undergraduate-level Computer Science is constantly decreasing. Based on data collected in Israel, significant differences were found in the percentages of fale high school students studying advanced-level Computer Science among different sectors. More specifically, while the percentage of fale high school students studying advanced-level Computer Science is about 50% for the Arab minority sector, the percentage of fale students studying Computer Science at the same level among the Jewish majority sector is only about 25%. This situation was investigated by using both qualitative and quantitative research tools. The paper illustrates the analysis of the data within the model of 'achievent-related choices' developed by Eccles and her colleagues.	Eccles' model of achievent-related choices: the case of computer science studies in Israeli high schools	NA:NA	2018
Richard Salter	NA	Session details: Artificial intelligence	NA	2018
Steve Engels:Vivek Lakshmanan:Michelle Craig	This paper focuses on the use of code features for automatic plagiarism detection. Instead of the text-based analyses employed by current plagiarism detectors, we propose a system that is based on properties of assignments that course instructors use to judge the similarity of two submissions. This system uses neural network techniques to create a feature-based plagiarism detector and to measure the relevance of each feature in the assessment. The system was trained and tested on assignments from an introductory computer science course, and produced results that are comparable to the most popular plagiarism detectors.	Plagiarism detection using feature-based neural networks	NA:NA:NA	2018
Amy McGovern:Jason Fager	We introduced an arcade-style gaming environment for use in a mixed undergraduate and graduate introductory artificial intelligence (AI) course. Our primary goal in this course was to provide students with a "significant learning experience" [3]. We achieved this goal by creating projects based in the game environment that illustrate several major AI topic areas. These projects were designed to be challenging, enjoyable, and to demonstrate AI programming in a realistic environment. Each of the projects was designed to be feasible for all the students yet flexible enough to allow the stronger students to explore alternative solutions. We evaluated our success in achieving these goals through student evaluations, comments, and exam grades.	Creating significant learning experiences in introductory artificial intelligence	NA:NA	2018
David M. Hansen:Joseph Bruce:David Harrison	We have developed a simple yet motivating course-project for use in a one-semester undergraduate course in Artificial Intelligence. The project is well-suited to small liberal arts college environments that lack specialized hardware, software, and faculty, fulfilling an unmet need for many faculty at such institutions.We describe the project and how to deploy and use supporting software for faculty wishing to adopt this project.	Give students a clue: a course-project for undergraduate artificial intelligence	NA:NA:NA	2018
Mark Burge	NA	Session details: Funding opportunities in computer science education at the national science foundation	NA	2018
Mark Burge:Diana Burley:Harriet Taylor	We are actively seeking to increase both the number and competitiveness of proposals to NSF's Course, Curriculum, and Laboratory Improvement (CCLI) program. Funding for computer science education programs at NSF responds directly to the total proposal pressure, so increasing both the number of proposals and the competitiveness of those proposals increases the amount of funding NSF targets for computer science education.	Funding opportunities in computer science education at the national science foundation	NA:NA:NA	2018
Paul Addison	NA	Session details: Web-based technologies	NA	2018
Serge Linckels:Stephan Repp:Naouel Karam:Christoph Meinel	This paper describes our e-librarian service that understands students' complete questions in natural language and retrieves very few but pertinent learning objects, i.e., short multimedia documents. The system is based on three key components: the formal representation of a domain ontology, a mechanism to automatically identify learning objects out of a knowledge source, and a semantic search engine that yields only pertinent results based on the freely formulated questions in natural language.We report on experiments about students' acceptance to enter complete questions instead of only keywords, and about the benefits of such a virtual personal teacher in an educational environment.	The virtual tele-tASK professor: semantic search in recorded lectures	NA:NA:NA:NA	2018
Manas Tungare:Xiaoyan Yu:William Cameron:GuoFang Teng:Manuel A. Pérez-Quiñones:Lillian Cassel:Weiguo Fan:Edward A. Fox	A syllabus defines the contents of a course, as well as other information such as resources and assignments. In this paper, we report on our work towards creating a syllabus repository of Computer Science courses across universities in the USA. We present some statistics from our initial collection of 8000+ syllabi. We show a syllabus creator that is integrated with Moodle [5] moodle_2006_moodle, an open-source course management system, which allows for the creation of a syllabus for a particular course. Among other information, it includes knowledge units from the Computing Curricula 2001 body of knowledge. The goal of the syllabus repository is to provide added value to the Computer Science Education community, and we present some such offerings. We conclude by presenting our future plans for the syllabus repository. These include using automated techniques to collect and classify syllabi, providing recommendations to instructors when creating a syllabus, and allowing the community to share their syllabi automatically. The syllabus collection will be part of the Computing and Information Technology Interactive Digital Educational Library (CITIDEL), a collection of the National Science Digital Library (NSDL).	Towards a syllabus repository for computer science courses	NA:NA:NA:NA:NA:NA:NA:NA	2018
Mohamed Hamada	The idea of using web-based technologies in education as a means of interactive learning has been erging for several topics in computer science and engineering. It proves to be more effective in the learning process and hence rapidly expanding. In this paper we introduce an integrated environment for active learning in the information theory course and related fields. Our environment is designed to meet the learning preferences of computer engineering learners. The environment integrates several different materials to support the learners' preferred style. It includes a movie-like welcome component, an animated hyper-text introduction for the basic concepts of information theory, a communication model simulator, and an interactive set of exercises for self assessment. All the components of the environment are integrated into a single interface based on Java2D of Sun Microsysts. Being a Java applet, our environment is portable and web-based enabled, which makes it possible for learners to study at their convenience. An initial study shows that our integrated environment is a useful tool for learners of information theory and related fields.	Web-based tools for active learning in information theory	NA	2018
Amruth Kumar	NA	Session details: Mechanics of undergraduate research at liberal arts colleges - lessons learned	NA	2018
David Musicant:Amruth Kumar:Doug Baldwin:Ellen Walker	NA	Mechanics of undergraduate research at liberal arts colleges: lessons learned	NA:NA:NA:NA	2018
Elliott Koffman	NA	Session details: New paradigms for introductory computing courses	NA	2018
Elliot Koffman:Heidi Ellis:Charles Kelemen:Curt White:Steven Wolfman	NA	New paradigms for introductory computing courses	NA:NA:NA:NA:NA	2018
Kim P. Kihlstrom	NA	Session details: Teaching with tablets and inking technologies	NA	2018
Richard Anderson:Ruth Anderson:K. M. Davis:Natalie Linnell:Craig Prince:Valentin Razmov	This paper describes an application of classroom technology in support of teaching through the use of examples and active learning techniques. Here we report on using Classroom Presenter, a Tablet PC based classroom interaction syst, in a senior level course in Algorithms -- a domain for which the instructor believes working on sample probls is critical to student learning in the classroom. The role of the technology was to integrate activities into the lecture so that students have the opportunity to work with concrete examples in class, while the instructor can collect and review student work in real time, incorporating selected student answers into the discussion. In this paper, we describe the pedagogical goals of the instructor, the types of activities used to achieve those goals, and the role that technology played in supporting those goals and activities. The contributions of the paper are in showing how classroom technology can be used to support pedagogical choices, as well as in phasizing the value of having clear pedagogical goals when incorporating a new technology in the classroom. We believe the application of technology as illustrated in this work could bring similar benefits to the instruction in other disciplines.	Supporting active learning and example based instruction with classroom technology	NA:NA:NA:NA:NA:NA	2018
Jaspal Subhlok:Olin Johnson:Venkat Subramaniam:Ricardo Vilalta:Chang Yun	Online learning, defined broadly as recording and delivering classroom experience with technology, has tremendous potential. However, success to date has been very limited in science and engineering. We believe this is because traditional video recording is cumbersome and not suitable for technical lectures and removing live classroom interaction is detrimental to learning. Employing Tablet PCs with slide presentation software has made it simple and convenient to develop and record high quality lectures. We employ such videos in a hybrid model of coursework. All lectures are made available as online videos, but limited classroom interaction is an important component; the classroom is used for review of lecture material, examinations, demonstrations, tutorials, and hands-on sessions. The hybrid framework is particularly suitable for students with logistical difficulties, e.g., because of work schedule. This paper is an evaluation of the hybrid learning approach as applied to upper level computer science coursework. We report our experience in teaching a suite of hybrid courses at the University of Houston and discuss the detailed feedback we received from the students who participated in the courses.	Tablet PC video based hybrid coursework in computer science: report from a pilot project	NA:NA:NA:NA:NA	2018
Tilman Wolf	Since the introduction of inking technology, computer science and engineering education has experienced a flurry of new instructional approaches. Many studies have assessed qualitative improvements over traditional classroom presentation techniques. In this paper, we present quantitative results on the improved student perception of teaching when using Classroom Presenter instead of PowerPoint for classroom presentation. We present an overview on how Classroom Presenter was used in a large undergraduate digital design course and discuss the assessment of results and their analysis. Our data shows with statistical significance that students perceive lectures with Classroom Presenter as more interesting and more adequately paced.	Assessing the impact of inking technology in a large digital design course	NA	2018
Gerald Kruse	NA	Session details: Status report on the SIGCSE committee on models for evaluating faculty scholarship	NA	2018
Shmuel Fink:Gerald Kruse:Keith Olson	In this special session, the members of the SIGCSE Committee on Models for Evaluating Faculty Scholarship would like to meet with interested SIGCSE members. In particular we would like to give an update on our progress in the last year, as well as solicit feedback and guidance.	Status report on the SIGCSE committee on models for evaluating faculty scholarship	NA:NA:NA	2018
David Malan	NA	Session details: Activities and tools for course management	NA	2018
Curtis Clifton:Lisa C. Kaczmarczyk:Michael Mrozek	Instructors of introductory courses face many challenges, not the least of which is dealing with a large volume of course materials and students with differing backgrounds. There are often too many administrative demands to have as much time for creative pedagogy as one would like. Team projects, and complex realistic projects in general, increase psychic demands, and conflicting schedules make creative collaboration with other instructors impossible. In order to address these issues, we need to find ways to increase effective handling of course development, to free up time for creative pedagogical efforts. This paper reports on an exploratory project in which two instructors and an undergraduate teaching assistant used the Subversion version control system to collaborate remotely on developing and running two CS1 classes. We focus on the ease and efficiency of course management using Subversion, providing a new perspective on how version control can enhance teaching.	Subverting the fundamentals sequence: using version control to enhance course management	NA:NA:NA	2018
Matt Bower	This paper shares insights about the deployment of groupwork activities in synchronous online classroom spaces. It is based upon analysis of 48 hours of online lesson recordings from an Introduction to Programming (in Java) subject conducted over two semesters. Key observations are shared about how factors such as the type of the activity, the level of student technological and communicative competencies, the interface design and the task specification influenced discourse and learning. On this basis recommendations for teaching using virtual classroom groupwork are offered in order to assist academics who may be considering similar approaches to teaching online.	Groupwork activities in synchronous online classroom spaces	NA	2018
Douglas D. Dankel, II:Jonathan Ohlrich	This paper presents the structure of a new elective course at the University of Florida, Artificial Intelligence in Computer Games, which addresses not only the technical aspects of creating realism within computer games, but also the need for more experiences in oral communication. Key elements of this course include the students conducting a majority of the teaching and actively participating in evaluating each other.	Students teaching students: incorporating presentations into a course	NA:NA	2018
Diana Cukierman	NA	Session details: Integrating mathematics and computer science	NA	2018
Kirby McMaster:Nicole Anderson:Brian Rague	This paper proposes a Discrete Mathatics course that is integrated with programming. The course consists of a sequence of Math modules with coordinated programming projects. Advantages of this approach are presented, and a methodology for developing the course is shown. A sample list of Math modules and brief project descriptions are included.	Discrete math with programming: better together	NA:NA:NA	2018
Ruedi Arnold:Marc Langheinrich:Werner Hartmann	The use of suitable examples is a key to teach abstract, theoretical concepts. Interactive computer software allows us to use such examples to create attractive learning environments that not only appeal to students, but also enhance knowledge transfer in class. However, developing such highly specialized systs is costly, resulting in only few of these tools being developed for higher education. This article introduces Info Traffic, a collection of new learning environments to support the introduction of fundamental concepts of computer science and mathatics in order to be of long-lived value. We describe the didactical concepts behind the interactive and concrete approach of Info Traffic, and illustrate th through two of its learning environments -- one targeted at propositional logic, the other at queueing theory.	InfoTraffic: teaching important concepts of computer science and math through real-world examples	NA:NA:NA	2018
Scott D. Anderson	Simulation is an important topic in Computer Science, as is probability and statistics. Most undergraduates who take a course in probability and statistics do so through the mathematics department, and often to fulfill a college quantitative reasoning (QR) requirement. However, a course that combines the two topics can exploit some useful synergies between them. This paper describes those synergies and a one-semester course that covers both topics.	A course on simulation, probability and statistics	NA	2018
Shannon Pollard	NA	Session details: Engagement via games	NA	2018
Scott Leutenegger:Jeffrey Edgington	In this paper we argue for using a "Game First" approach to teaching introductory programming. We believe that concerns over whether an OO approach or a procedural approach should be used first are secondary to the course assignment and example content. If examples are not compelling, student interest often lags thus making the OO versus procedural argument moot. We believe that game programming motivates most new programmers. Compelling assignments mean that students are far more likely to learn because they are interested, and the visual component allows students to see mistakes in their code as manifested in the resultant graphics. We describe our experiences after redesigning and offering a new introductory computer science sequence using 2D game development as a unifying theme. We teach fundamental programming concepts via two dimensional game development in Flash and ActionScript during the first quarter, transition to C++ to solidify concepts and add pointers during the second quarter, then teach a multi-phase project based game approach using C++ and openGL (2D graphics only) during the third quarter. Our surveys show that this approach improved student understanding of all seven basic topics examined.	A games first approach to teaching introductory programming	NA:NA	2018
Cristina Nita-Rotaru:Melissa Dark:Voicu Popescu	In this paper we report on our experience of teaching a multi-expertise application-driven course in which upper-level undergraduate and entry-level graduate students from computer science, computer graphics technology, and educational science worked together to design, develop and evaluate a distance learning system. We describe the activities pursued in the class, the interactions between the various groups of students, as well as the challenges and advantages ensuing from the great variety of student backgrounds. The success of the course is measured in two ways. First, the class achieved the goal of building a distance learning system that surpasses the state of the art by improving the integration of the remote students into regular on-campus learning. Second, a survey conducted at the end of the course indicates that the application-driven, collaborative, and multi-expertise structure of the class provided a uniquely effective learning experience.	A multi-expertise application-driven class	NA:NA:NA	2018
Joan Peckham:Peter Stephenson:Jean-Yves Hervé:Ron Hutt:Miguel Encarnação	To address the alarming decrease in students in Rhode Island computer science programs and the under-representation of women and minorities, we have devised a program to introduce students to research in computer graphics, art and new media. This program integrates good mentoring practice and pedagogy, including problem-based learning. Special attention is paid to creating a cohort of students who come together every week to learn about the research process, and ethical and societal issues related to it. Each student takes a small project from the proposal stage, through design and implementation, to publication and presentation. We report on the first two years of the program.	Increasing student retention in computer science through research programs for undergraduates	NA:NA:NA:NA:NA	2018
Dick Gayler	NA	Session details: UML tools: what is their role in undergraduate computer science courses?	NA	2018
Dick Gayler:David Klappholz:Valerie J. Harvey:Manuel A. Pérez-Quiñones	NA	UML tools: what is their role in undergraduate computer science courses?	NA:NA:NA:NA	2018
Bill Marion	NA	Session details: Assessing computer science programs: what have we learned	NA	2018
Bill Marion:John Impagliazzo:Caroline St. Clair:Barry Soroka:Deborah Whitfield	NA	Assessing computer science programs: what have we learned	NA:NA:NA:NA:NA	2018
Lillian (Boots) Cassell	NA	Session details: An Initiative to attract students to computing	NA	2018
Lillian N Cassel:Andrew McGettrick:Gordon Davies:Heikki Topi:Bob Sloan	NA	An initiative to attract students to computing	NA:NA:NA:NA:NA	2018
Yana Kortsarts	NA	Session details: Tools and techniques for teaching object-oriented programming	NA	2018
Robert E. Noonan:John R. Hott	The paper discusses a course in software development, as advocated by the CC2001 report. The course revolves around a single project divided into six assignments. In addition, the course includes lab assignments covering the tool of the week. The order of coverage of topics and the order of labs is determined using just-in-time learning. Grading criteria and an assessment of the course are discussed.	A course in software development	NA:NA	2018
Dave Feinberg	This paper explores both the design and classroom usage of a visual and interactive programming environment. This environment, named JavaTown, provides a visual representation of the inner workings of object-oriented programs, in which on-screen characters are literally depicted as carrying messages to each other and remembering values. JavaTown was created to aid in the introduction of some of the most elusive concepts in the CS1/CS2 curriculum: object references, parameter passing, variable scope, recursion, and linked lists.	A visual object-oriented programming environment	NA	2018
Sara Stoecklin:Suzanne Smith:Catharina Serino	Refactoring is the process of transforming the internal structure of existing code while keeping the integrity of the code's functional requirements. Refactoring is proven to increase program maintainability, flexibility, and understandability and is recognized as a best practice in the software development community. However, with the exception of courses or lectures on extreme programming, refactoring is overlooked in the computer science curriculum. This paper presents the fourth lesson of an innovative pedagogical approach to teaching refactoring on the college level. This lesson covers the creation of well formed object-oriented methods including characteristics for evaluating such methods. Through this hands-on approach, building well formed object-oriented methods through refactoring can be better understood and integrated into the computer science curriculum.	Teaching students to build well formed object-oriented methods through refactoring	NA:NA:NA	2018
Bradley Miller	NA	Session details: Algorithm visualization	NA	2018
Clifford A. Shaffer:Matthew Cooper:Stephen H. Edwards	We present our findings on the state of the field of algorithm visualization, based on extensive search and analysis of links to hundreds of visualizations. We seek to answer questions such as how content is distributed among topics, who created algorithm visualizations and when, the overall quality of available visualizations, and how visualizations are disseminated. We have built a wiki that currently catalogs over 350 algorithm visualizations, contains the beginnings of an annotated bibliography on algorithm visualization literature, and provides information about researchers and projects. Unfortunately, we found that most existing algorithm visualizations are of low quality, and the content coverage is skewed heavily toward easier topics. There are no effective repositories or organized collections of algorithm visualizations currently available. Thus, the field appears in need of improvement in dissemination of materials, informing potential developers about what is needed, and propagating known best practices for creating new visualizations.	Algorithm visualization: a report on the state of the field	NA:NA:NA	2018
Erik Carson:Ian Parberry:Bradley Jensen	Computer science courses have increasingly made use of visualization tools to illustrate common algorithms. This paper describes Algorithm Explorer, an educational tool designed for use by instructors and students to examine algorithms in a rich environment composed of 3D data representations, 3D audio cues, and easy-to-use controls. Instructors and students can easily add calls to Algorithm Explorer's C++ API to their programs to quickly develop engaging visualizations, and every detail of the scene can be customized as the developer desires.	Algorithm explorer: visualizing algorithms in a 3D multimedia environment	NA:NA:NA	2018
Wolfgang Hürst:Tobias Lauer:Eveline Nold	Compared to desktop PCs, mobile devices have several constraints such as restricted screen size and reduced interactivity. Hence, it is not clear if it is helpful to provide educational multimedia material for mobile media players. In this paper, we present a study of algorithm animations on mobile devices, i.e. an Apple iPod with video functionality. The results of our experiment indicate that despite limitations there is an actual learning effect and therefore mobile media players offer a potential to increase learning that deserves further investigation.	A study of algorithm animations on mobile devices	NA:NA:NA	2018
Ellen Walker	NA	Session details: Mindstorms: robotics and beyond	NA	2018
Daniel E. Stevenson:James D. Schwarzmeier	There are many possible ways to integrate Lego Mindstorms robots into the standard computer science curriculum. This paper presents a way to use these robots to teach image processing or vision by building an autonomous vehicle. The vehicle uses an off-the-shelf web cam for all of its navigation. Integration of the camera, robot, and controlling computer is discussed, as are the image processing units used, the structure of a state machine controlling them, and the cross-cutting concern of reducing both input and output noise throughout all aspects of the project.	Building an autonomous vehicle by integrating lego mindstorms and a web cam	NA:NA	2018
Michael J. Jipping:Cameron Calka:Brian O'Neill:Christopher R. Padilla	Assbly language is a valuable subject to teach, yet one of the most underappreciated by students. Students do not see the need for assbly language and they get through it as quickly as possible. Given the time in a computer organization course to teach assbly language, assignments -- either quick-and-easy ones or those contrived-to-teach-a-point -- contribute to this attitude of malaise. This paper documents a project to inject some fun into the teaching of assbly language. First, we switch the language to Java bytecode. Second, we use unique assignments to use Java bytecode with Lego Mindstorms robotics.	Teaching students java bytecode using lego mindstorms robots	NA:NA:NA:NA	2018
Frank Klassner:Christopher Continanza	This paper examines the applicability of LEGO Mindstorms to the intermediate-level computer science curriculum, which traditionally includes courses such as Computer Organization and Operating Systems. We describe three open-laboratory projects that employ Mindstorms in exploring systems-level programming topics and present results from student evaluations of the projects over the last two years. An interesting feature of the projects is that they do not involve robotics or robot construction but instead focus on the Mindstorms programmable brick as a platform in its own right.	Mindstorms without robotics: an alternative to simulations in systems courses	NA:NA	2018
Carol Taylor	NA	Session details: Communication skills	NA	2018
Eliseo Reategui:Elisa Boff:John A. Campbell	This paper describes a virtual character placed in an educational environment with the purpose of motivating and involving students in the activities proposed. The character can communicate with users in natural-language; it can learn students' profiles and use this knowledge to recommend appropriate contents and activities. Three main elements compose the character's architecture: an AIML-based mechanism, which endows the character with its communication abilities; a profile management system, which collects and organizes students information; and a recommender system, which uses the student's profiles and behavioral patterns to make content recommendations. The character was placed in an educational environment and used in an experiment with 53 computer science students. The results of the experiment are presented here, as well as conclusions and directions for future work.	Using virtual characters in personalized recommendations	NA:NA:NA	2018
Jessen T. Havill:Lewis D. Ludwig	The Department of Mathematics and Computer Science at Denison University has introduced a significant new oral communication component early in both majors. The sophomore computer science and mathematics majors meet together each week for a "lab" taught jointly by a computer scientist and a mathematician. There were three goals in this endeavor: (1) to prepare students for the workforce and graduate school by improving their oral communication skills, (2) to nurture future researchers in both fields by exposing them to research early in their undergraduate training, and (3) to increase computer science students' exposure to mathematics. In the following, we establish the need for such a course, describe our approach, how it satisfies our three goals, and additional outcomes.	Technically speaking: fostering the communication skills of computer science and mathematics students	NA:NA	2018
Michelle Craig	Trying to improve undergraduate teaching based on feedback collected by traditional student course evaluations can be a frustrating experience. Unclear, contradictory and ill-informed student comments leave instructors confused and discouraged. We designed and then implemented an evaluation mechanism where an independent CS faculty peer visits a lecture and holds an evaluation discussion with the students. These facilitated discussions begin by looking at overall strengths and weaknesses for the course but quickly focus on the key student concerns and suggestions for improvement. After conducting thirty four facilitated discussions, we find them appreciated by students who feel heard and valued. A survey of participating faculty indicates that the written discussion report is more useful to them than standard student survey results. Faculty report that they have made changes based on the recommendations and limited quantitative data suggests that teaching has improved and its value in the departmental culture has increased. In this paper we describe the evaluation process, discuss our experiences and offer some concrete suggestions for those who might want to try this approach in their own department.	Facilitated student discussions for evaluating teaching	NA	2018
Peter Henderson	NA	Session details: Computational thinking	NA	2018
Peter B. Henderson:Thomas J. Cortina:Jeannette M. Wing	NA	Computational thinking	NA:NA:NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Grady Booch	In so many ways, software-intensive systems touch the lives of every individual, corporation, institution, nation, and contemporary civilization. Nonetheless, the gap between the technological haves and have-nots is growing and the gap between academia and the industries that create these software-intensive systems continues to be much lamented. I enter this presentation as one firmly planted in the pragmatic creation and evolution of such systems, and yet look outside industry for sources of state-changing innovation. In this talk, I'll examine the current state of software-intensive systems in the world, the forces that fall upon such systems and the people who develop, deploy, and operate them, and the means whereby we can keep the pipeline of innovation open and the academia/industry dialog vibrant. Along the way, I'll cover little-discussed topics including the moral dimension of software, the appreciation of beauty in software, and the privilege and responsibility of being a software developer.	Readn', writ'n, 'rithmetic...and code'n	NA	2018
Kuodi Jian	NA	Session details: Active learning	NA	2018
Kung-Kiu Lau	We decided to support active learning on a beginner's course on Reasoning about Imperative Programs because our students find the material challenging. Because of the large class size and resource implications, we opted for a simple approach: the modified lecture format. We devised active learning sheets for use during lectures. Each sheet consisted of short questions which covered the main points of the lecture. Students had to answer the questions during the lectures as they listened. In this paper we describe how we designed the active learning sheets for this particular course, and the students' (positive) response to them.	Active learning sheets for a beginner's course on reasoning about imperative programs	NA	2018
Donald Chinn:Kristofer Martin:Catherine Spencer	Active learning techniques, including collaborative programming and problem solving environments, have been widely adopted by many computer science educators. A related approach is the Treisman model, which was originally designed for the first-year calculus course and involves intensive workshops where students collaborate in small groups to solve problems. We have adapted the model for both the data structures and algorithms courses at our institution. Regression analysis indicates that students who participate in the workshops for the algorithms course perform better (0.561 grade points on a 4-point scale) than those who do not, even after accounting for prior academic performance. However, the workshops appear to have less of an effect on student grades in the data structures course. This study provides evidence that the workshop model can be an effective learning environment for students in courses primarily involving analysis, but that for courses that involve large amounts of programming, further adaptations to the model might be needed.	Treisman workshops and student performance in CS	NA:NA:NA	2018
Dino Schweitzer:Wayne Brown	Engaging students in the learning process has been shown to be an effective means for education. Several methods have been proposed to achieve this engagement for computer science and other disciplines. Active learning is one such technique that incorporates interactive classroom activities to reinforce concepts and involve the students. Visualizations of computer science concepts such as algorithm animations can be used for these activities. To be most effective in this environment, they need to be designed and used with active learning in mind. This paper describes the design characteristics of such visualizations, ways of using them in the classroom, and our experience with developing and using visualization tools across different courses in the computer science curriculum.	Interactive visualization for the active learning classroom	NA:NA	2018
Richard Ord	NA	Session details: Non-majors and budding majors	NA	2018
Kris Powers:Stacey Ecott:Leanne M. Hirshfield	This work analyzes the advantages and disadvantages of using the novice programming environment Alice in the CS0 classroom. We consider both general aspects as well as specifics drawn from the authors' experiences using Alice in the classroom over the course of the last academic year.	Through the looking glass: teaching CS0 with Alice	NA:NA:NA	2018
Thomas J. Cortina	In this paper, the design and implementation of a novel introductory computer science course for non-majors is presented. This course focuses on the major contributions in computer science from the perspective of the process of computation. This course differs from most introductory courses in computer science in that it does not include programming using a computer programming language. Students focus on algorithms and the principle of computational thinking, and use a flowchart simulator to experiment with various short algorithms and build simple computer games without dealing with programming language syntax. Steadily increasing enrollments and interest from various departments on campus indicate that this course has become a successful addition to our introductory CS offerings.	An introduction to computer science for non-majors using principles of computation	NA	2018
David J. Malan:Henry H. Leitner	Scratch is a "media-rich programming environment" recently developed by MIT's Media Lab that "lets you create your own animations, games, and interactive art." Although Scratch is intended to "enhance the development of technological fluency [among youths] at after-school centers in economically disadvantaged communities," we find rarkable potential in this programming environment for higher education as well.We propose Scratch as a first language for first-time programmers in introductory courses, for majors and non-majors alike. Scratch allows students to program with a mouse: programmatic constructs are represented as puzzle pieces that only fit together if "syntactically" appropriate. We argue that this environment allows students not only to master programmatic constructs before syntax but also to focus on probls of logic before syntax. We view Scratch as a gateway to languages like Java.To validate our proposal, we recently deployed Scratch for the first time in higher education via harvard Summer School's Computer Science S-1: Great Ideas in Computer Science, the summertime version of a course at harvard College. Our goal was not to improve scores but instead to improve first-time programmers' experiences. We ultimately transitioned to Java, but we first introduced programming itself via Scratch. We present in this paper the results of our trial.We find that, not only did Scratch excite students at a critical time (i.e.,, their first foray into computer science), it also familiarized the inexperienced among th with fundamentals of programming without the distraction of syntax. Moreover, when asked via surveys at term's end to reflect on how their initial experience with Scratch affected their subsequent experience with Java, most students (76%) felt that Scratch was a positive influence, particularly those without prior background. Those students (16%) who felt that Scratch was not an influence, positive or negative, all had prior programming experience.	Scratch for budding computer scientists	NA:NA	2018
Jeffrey Stone	NA	Session details: Patterns	NA	2018
Carl Alphonce:Michael Caspersen:Adrienne Decker	Giving students an appreciation of the benefits of using design patterns and an ability to use them effectively in developing code presents several interesting pedagogical challenges. This paper discusses pedagogical lessons learned at the "Killer Examples" for Design Patterns and Objects First series of workshops held at the Object Oriented Programming, Systems, Languages and Applications (OOPSLA) conference over the past four years. It also showcases three "killer examples" which can be used to support the teaching of design patterns.	Killer "killer examples" for design patterns	NA:NA:NA	2018
Paul V. Gestwicki	We present a computer game case study that can be used to motivate the need for design patterns. Design patterns are often misunderstood, but good examples can motivate students to work at understanding patterns. Computer games are used in many books and online resources to teach programming concepts, but these examples are usually simplified or non-object-oriented. We present a simple game that exhibits functionality found in commercial games (animation, collision detection, etc.) and show how it can be used as a case study for design patterns. Specifically, we illustrate how the state, facade, observer, strategy, and visitor patterns can replace procedural approaches for implenting the logic and animation of game written in Java.	Computer games as motivation for design patterns	NA	2018
Andy Carle:Michael Clancy:John Canny	We present several interesting applications for the Pattern-Annotated Course Tool (PACT) and pedagogical design patterns in the process of curriculum design. PACT is a visual editor in which content designers can create visual representations of their courses and annotate them with references to educational theory in the form of pedagogical patterns. Each usage scenario illustrates the opportunities for learning that PACT, the annotation process, and the artifacts that users create present to experts, novices, and everyone in between. Finally, we take an in-depth look at one ongoing course annotation being crafted by an experienced curriculum designer and examine his interesting findings from the process. An analysis of these discoveries demonstrates the utility of PACT in the curriculum design process.	Working with pedagogical patterns in PACT: initial applications and observations	NA:NA:NA	2018
Michael R. Wick	NA	Session details: Programming-lite: a dialog on educating computer science practitioners in a flat world	NA	2018
Robert B. Allen:David Klappholz:Michael R. Wick:Carol Zander	NA	Programming-lite: a dialog on educating computer science practitioners in a "flat world"	NA:NA:NA:NA	2018
Jeffrey Forbes	NA	Session details: ... But what do the top-rated schools do? a survey of introductory computer science curricula	NA	2018
Jeffrey Forbes:Daniel D. Garcia	NA	"...But what do the top-rated schools do?": a survey of introductory computer science curricula	NA:NA	2018
Paula Gabbert	NA	Session details: ACM-W's new programs for recruiting and retaining women in computing	NA	2018
Paula Gabbert:Barbara Boucher Owens:Bettina Bair:Chris Stephenson:Joanne McGrath Cohoon:Gloria Childress Townsend	This special session will provide an overview of the programs that ACM's executive committee on Women in Computing (ACM-W) coordinates for the recruitment and retention of women in computing. The overview will include projects in all areas of ACM-W with special focus on those projects impacting the educational environment.	ACM-W's new programs for recruiting and retaining women in computing	NA:NA:NA:NA:NA:NA	2018
Thomas Liu	NA	Session details: Teaching computer graphics	NA	2018
Kelvin Sung:Peter Shirley:Becky Reed Rosenberg	Our computer graphics (CG) programming class uses games development as a means to help students understand CG concepts. Many students mistakenly thought this CG class was a games programming class. We present a simple frame-work for discussing games programming classes. Based on the framework, the paper describes our efforts in integrating competencies associated with games programming into our CG programming class. Our results show that the resulting class maintains the integrity of the original CG class while allowing students to develop projects with more interesting games features.	Experiencing aspects of games programming in an introductory computer graphics class	NA:NA:NA	2018
Mike Bailey:Steve Cunningham	GPU programming is fast becoming an essential skill for computer graphics students. It has immediate application in all areas of graphics including science, engineering, art, animation, and gaming. Because it is new, experience with teaching GPU programming is scarce. This paper describes the teaching of a GPU programming course with a hands-on program called glman. glman allows students to create a shader scene description file which not only creates the 3D scene, but creates an interactive user interface to adjust shader parameters. Our experience in an experimental class taught in Spring 2006 is that glman is flexible enough to donstrate and experiment with many shader concepts, and creates a fast and fun learning curve for the students.	A hands-on environment for teaching GPU programming	NA:NA	2018
Jerry O. Talton:Darren Fitzpatrick	A long-standing difficulty in the development of introductory courses in computer graphics is balancing the educational necessity of ensuring mastery of fundamental graphical concepts with the highly desirable goal of exciting and inspiring students to further study by enabling them to produce visually interesting programming projects. Recently, we have developed a modified curriculum predicated on the extensive integration of the OpenGL Shading Language with a more traditional pedagogical approach. We utilized this curriculum in the quarter-long, upper-division introductory graphics course taught in the Department of Computer Science at the University of California, Santa Cruz. Our experience indicates that making shading an integral part of the entry-level curriculum inculcates students with a comprehensive understanding of the algorithms and mathematical concepts that underlie modern graphical systems, while simultaneously equipping them with the tools necessary to produce complex projects with state-of-the-art technology.	Teaching graphics with the openGL shading language	NA:NA	2018
Joe Bergin	NA	Session details: Day one of the objects-first first course: what to do	NA	2018
Joe Bergin:Mike Clancy:Don Slater:Michael Goldweber:David B. Levine	What should you do on the first day of your objects-first CS1 course? If you have been struggling with beginning an objects first course this special session will give you hints about how to avoid overload and make a smooth and effective start. The presenters are skilled at introducing objects to novices in interesting ways that captures the interest of the students and readies them for programming. These are gentle approaches that present deep ideas to the inexperienced. How can a course be built around objects without information overload? This session will address the opening gambit in this interesting game.	Day one of the objects-first first course: what to do	NA:NA:NA:NA:NA	2018
Lili Hai	NA	Session details: Pedagogy	NA	2018
Tamara Denning:Michael Kelly:David Lindquist:Roshni Malani:William G. Griswold:Beth Simon	Peer review is widely recognized for advancing student learning, in particular for developing reflective processes like critical thinking. The classroom is ripe for peer review because the subject matter is fresh and in-depth interactivity is possible. Yet the limited time available in class conflicts with peer review's deliberative nature. We hypothesize that peer review -- at least the initial stages of it -- can be supported in the classroom with tools for facilitating the rapid identification of interesting issues for discussion. The potential benefits of such a tool include: furthering the student-focus of in-class active learning activities, further implanting critical analysis skills through frequent in-class use, supporting immediate feedback, and enabling comparison of student and instructor-modeled critical analysis.This paper explores tool support for in-class lightweight preliminary peer-review (LPPR): peer review that is instigated in the classroom, but does not necessarily end there. We proposed that students classify peer solutions in 4 dimensions: correctness, comprehension (e.g., "do I understand this solution"), worthiness for discussion, and similarity to the evaluator's own solution. We designed an LPPR extension to Ubiquitous Presenter, and then conducted an exploratory study in a mock classroom setting. We found that LPPR can quickly identify a subset of student solutions that warrant immediate discussion, and that modest amounts of reflection arise from the LPPR process.	Lightweight preliminary peer review: does in-class peer review make sense?	NA:NA:NA:NA:NA:NA	2018
Stuart Hansen:Erica Eddy	Attracting and retaining quality students is an ongoing concern in Computer Science. Retention can be enhanced by keeping students engaged in the learning process while preventing them from becoming overly frustrated. While engaging students during class is certainly important, most students spend a significant amount of time working on programming projects outside of class. The goal of this research was to collect and analyze some initial data on how engaging and frustrating our students find our programming projects. During the Spring 2006 semester we surveyed our students after each programming project. This paper presents some initial findings from the surveys and discusses strategies on how to improve our projects based on this feedback.	Engagement and frustration in programming projects	NA:NA	2018
Tzu-Yi Chen:Gary Lewandowski:Robert McCartney:Kate Sanders:Beth Simon	We examine students' commonsense understanding of computer science concepts before they receive any formal instruction in the field. For this study, we asked students on the first day of a CS1 class to describe in English how they would arrange a set of numbers in ascending, sorted order; we then repeated the experiment asking students to sort a list of dates (in mm/dd/yyyy format).We found that a majority of students described a coherent algorithm; some described versions of insertion or selection sort, but many gave unexpected algorithms. We also found significant differences between responses given for sorting numbers versus dates. Based on our analysis of the data we suggest that beginning-programming instructors more explicitly discuss data types, begin loop instruction with post-test loops, assist students in recognizing implicit conditional and iteration use in natural language solutions to probls, and recognize that novices and experts focus on different aspects of the probl in even basic probl solving tasks.	Commonsense computing: using student sorting abilities to improve instruction	NA:NA:NA:NA:NA	2018
Gayle Yaverbaum	NA	Session details: Outcomes-based computing accreditation criteria	NA	2018
Gayle Yaverbaum:Doris Lidtke:Han Reichgelt:Stu Zweben	NA	Outcomes-based computing accreditation: program assessment	NA:NA:NA:NA	2018
Edward Gehringer	NA	Session details: Embedded systems and architecture	NA	2018
Brian G. VanBuren:Muhammad Shaaban	This paper describes the MicroTiger software that combines a graphical microcode simulator with a reconfigurable data-path. The resulting implented simulator is able to fill the void in microprogramming tools since there are no graphical microcode simulators that allow such customization of the datapath. The customization of the datapath goes beyond allowing different files specifying the datapath, it allows the datapath to be created and modified using the graphical interface like a circuit editor. In the acadic setting, MicroTiger provides easier microcode testing on the instruction level for instructors and provides simulation debugging through code tracing and breakpoints for students.	MicroTiger: a graphical microcode simulator with a reconfigurable datapath	NA:NA	2018
J. Stanley Warford:Ryan Okelberry	This paper presents a software simulator for a central processing unit. The simulator features two modes of operation. In the first mode, students enter individual control signals for the multiplexers, function controls for the ALU, memory read/write controls, register addresses, and clock pulses for the registers required for a single CPU cycle via a graphical user interface. In the second mode, students write a control sequence in a text window for the cycles necessary to implement a single instruction set architecture (ISA) instruction. The simulator parses the sequence and allows students to single step through its execution showing the color-coded data flow through the CPU. The paper concludes with a description of the use of the software in the Computer Organization course and its availability for download on the Internet.	Pep8CPU: a programmable simulator for a central processing unit	NA:NA	2018
William Birmingham:Leah Acker	Software-defined radio (SDR) is a self-contained, embedded software system with hardware components and real-time constraints. SDR is the basis for many of today's wireless communications systems. Because SDR combines basic digital signal processing, circuitry, and software elements, it is the perfect project for multi-disciplinary, undergraduate teams. This paper explains both the SDR system created by computer science and engineering undergraduates at Grove City College and how SDR projects can help undergraduates acquire the skills to succeed on multidisciplinary teams.	Software-defined radio for undergraduate projects	NA:NA	2018
Mindy Hart	NA	Session details: K-12 computing	NA	2018
Barbara Ericson:Mark Guzdial:Maureen Biggers	The Institute for Computing Education (ICE) was created in the spring of 2004. ICE is a partnership between the Georgia Department of Education and the College of Computing at Georgia Tech. The goals for this partnership are to increase the number and quality of computer science teachers and increase the number, quality, and diversity of computer science students. One specific goal is to increase the number of students taking the CS-Advanced Placement (AP) course. In this paper we report on both the progress we have made towards these goals and the problems we have encountered. We hope that other states will create similar partnerships and leverage our experience.	Improving secondary CS education: progress and problems	NA:NA:NA	2018
Daniel Frost	We describe a module, or sequence of lessons, that has been successfully used to teach basic elements of computer science to fourth grade students. The module was designed to reflect a firm grounding in computer science, to be age-appropriate, to be easily installed in schools, and to support a range of teachers. Over 300 students in grades three through six have taken this module or a related module. The programming language used is a modern variant of Logo called VVLogo, which students access through a Java applet on a web page.	Fourth grade computer science	NA	2018
Joel C. Adams	Research indicates that (i) many women who take CS1 feel less experienced than (and therefore at a disadvantage to) their male counterparts at computer programming, and that (ii) by the time they reach high school, many young women view computing as "geeky" and "for nerds." This paper describes our Imaginary Worlds Camps -- a summer program in which we use Carnegie Mellon's Alice software to address these problems before students reach high school. The preliminary results are quite encouraging.	Alice, middle schoolers & the imaginary worlds camps	NA	2018
James Early	NA	Session details: Project management and software engineering	NA	2018
Robert Kessler:Nathan Dykman	Teaching software engineering is difficult because the true benefits of a disciplined software process and the production of significant artifacts are most meaningful when programming-in-the-large, with varying levels of team experience in the context of a professional organization. Using the same techniques when programming-in-the-small can often lead to the students feeling that it is better to not use any process because the effort and tedium of producing artifacts is so great compared with the relatively simple task of writing the code for the target solution. This paper describes our solution, a curriculum that exposes the students to both lightweight traditional and lightweight agile processes. We describe two offerings of the class and conclude from the positive student feedback that we have found the correct balance.	Integrating traditional and agile processes in the classroom	NA:NA	2018
Karen L. Reid:Gregory V. Wilson	DrProject is a web-based software project management portal that integrates revision control, issue tracking, mailing lists, a wiki, and other features. Unlike other such systems, DrProject is specifically tailored to the needs of undergraduate teaching and team programming assignments. We describe the pedagogical motivations for DrProject and our experiences with it to date.	DrProject: a software project management portal to meet educational needs	NA:NA	2018
Ursula Wolz:Sarah Monisha Pulimood	We describe how project management and team communication skills are taught and practiced in two experiences. Our CS III course provides a formal introduction and practice in homogenous small group settings. Our new multidisciplinary yearlong video game course provides extensive practice of these skills through the development of a single deliverable (a video game) produced by a large team (an entire class of approximately 20 students). This model can be extended to other institutions very easily.	An integrated approach to project management through classic CS III and video game development	NA:NA	2018
Hilary Holz	NA	Session details: Status report of the SIGCSE committee on teaching computer science research methods	NA	2018
Hilary Holz:Anne Applin:William Joel	NA	Status report of the SIGCSE committee on teaching computer science research methods	NA:NA:NA	2018
Andrew McGettrick	NA	Session details: The current crisis in computing: what are the real issues?	NA	2018
Lillian (Boots) Cassel:Andrew McGettrick:Mark Guzdial:Eric Roberts	NA	The current crisis in computing: what are the real issues?	NA:NA:NA:NA	2018
Sara Miner More	NA	Session details: New ways to teach CS1	NA	2018
Gloria Childress Townsend:Suzanne Menzel:Katie A. Siek	This paper includes several reasons for the underrepresentation of women in computing, and then describes two low-cost project instances that address the reasons for the decline in women's enrollment in computing classes. One project spans seven semesters from fall 2000 to spring 2006 at a small liberal arts school; the other, the spring 2006 semester at a large research institution. Concluding sections provide anecdotal and statistical evidence that the project is successful over two time periods within two diverse schools.	Leveling the CS1 playing field	NA:NA:NA	2018
Thomas P. Murtagh	We describe a new introductory course based on an unusual approach to the development of a breadth-first curriculum. The course focuses on exploring examples that illustrate a broad collection of the facets of computer science, but it draws all of these examples from a single subfield, computer networks. We demonstrate how this approach provides a more coherent educational experience for students while emphasizing the essentials that tie all of the fields of our discipline together.	Weaving CS into CS1: a doubly depth-first approach	NA	2018
Kristy Elizabeth Boyer:Rachael S. Dwight:Carolyn S. Miller:C. Dianne Raubenheimer:Matthias F. Stallmann:Mladen A. Vouk	Prompted by changes in the numbers and demographics of students enrolled and being retained in computer science, the Department of Computer Science at NC State University is revising its undergraduate curriculum to better meet the needs of its students, and increase student attraction and retention. One set of changes concerns introductory computer science courses (CS1). This paper reports on a study conducted to assess the impact of class size and active learning in our CS1 courses. We find that smaller classes with integrated laboratories improve both learning and retention, as well as satisfaction of the students. Among other benefits, we found retention rates in small classes to be about 20% better than large classes.	A case for smaller class size with integrated lab for introductory computer science	NA:NA:NA:NA:NA:NA	2018
Robert McCartney	NA	Session details: It seemed like a good idea at the time	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Titus Winters:Stephen Edwards:Briana B. Morrison:David R. Musicant:Ian Utting:Carol Zander	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Brad Richards	NA	Session details: Bioinformatics	NA	2018
Russel Bruhn:Steven F. Jennings	Our multidisciplinary approach to a Bioinformatics Minor at the University of Arkansas at Little Rock (UALR) allows students from Information Science, Computer Science, and Biology programs to participate in the growing field of bioinformatics. Two separate tracks allow students to complent the skills that they learn in their majors with skills in either information science or the life sciences. This eighteen credit hour minor begins with all students enrolling in an Introduction to Bioinformatics course that is followed by eleven credit hours of complentary courses. Then, in a final, senior level, survey format Bioinformatics Theory and Applications course, they once again converge to apply their training to a sester-long, multidisciplinary team project. This minor allows students to choose a wide array of careers in the medical and health sciences fields and in the analysis of biological data. It is also an ideal program to prepare the students for graduate programs in bioinformatics.	A multidisciplinary bioinformatics minor	NA:NA	2018
Pamela Cutter	DNA analysis is a subject that is in the news almost every day, whether it be a new advance in medical research, a criminal trial, or some other application. BLAST (Basic Local Alignment Search Tool) is an important tool used by biologists worldwide to compare DNA and protein sequences and to infer functional and evolutionary relationships between them. This paper presents a project for CS2 based on BLAST. The primary goal for this project is to provide an interesting, real-world application that reinforces the data structures and algorithms presented in CS2. This project also demonstrates object-oriented design techniques, and introduces computer science students to the new field of bioinformatics.	Having a BLAST: a bioinformatics project in CS2	NA	2018
Jon Beck:Brent Buckner:Olga Nikolova	An interdisciplinary undergraduate research project in bioinformatics, jointly mentored by faculty in computer science and biology, has been developed and is being used to provide top-quality instruction to biology and computer science students. This paper explains the benefits of such a collaboration to computer science students and to the computer science discipline. Specific goals of the project include increased recruitment of students into computer science and increased retention within the discipline. The project is also intended to be particularly attractive to women students.	Using interdisciplinary bioinformatics undergraduate research to recruit and retain computer science students	NA:NA:NA	2018
Jaime Niño	NA	Session details: Kinesthetic learning activities	NA	2018
Paolo A. G. Sivilotti:Scott M. Pike	Kinesthetic learning is a process in which students learn by actively carrying out physical activities rather than by passively listening to lectures. Pedagogical research indicates that kinesthetic learning is a fundamental, powerful, and ubiquitous learning style. To date, efforts to incorporate this learning style within the computer science curriculum have focussed on introductory courses. Material in upper-level courses, however, can also benefit from a similar approach. In particular, courses on distributed computing, by the very nature of the material they cover, are uniquely suited to exploiting this learning technique. We have developed and piloted a collection of kinesthetic activities for a senior undergraduate or graduate-level course on distributed systems. We give detailed descriptions of these exercises and discuss factors that contribute to their success.	The suitability of kinesthetic learning activities for teaching distributed algorithms	NA:NA	2018
Darren Lim	This paper describes the use of a board game as a device for introducing graph theory to computer science students. By experiencing a hands-on demonstration of graphs, students can better understand the basic principles of graph theory and can better design algorithms and programs which manipulate graph data. The programming assignment tied to the game forces the students to come to grips with the algorithmic aspects of graph theory, including the proper choice of data structures and the implementation of graph algorithms.	Taking students out for a ride: using a board game to teach graph theory	NA	2018
Janet Davis:Samuel A. Rebelsky	We consider in some depth a common exercise for the first session of a typical introductory computer science course: The task of writing instructions to make a peanut butter and jelly sandwich. The exercise, although simple, can engage students and motivate a variety of topics important throughout the semester. We discuss reasons to use such an exercise on the first day of class, present lessons students can learn from the exercise, and give practical advice for the instructor who wishes to make the most of this exercise.	Food-first computer science: starting the first course right with PB&J	NA:NA	2018
Anita Verno	NA	Session details: Developing resources to support a national computer science curriculum for K-12	NA	2018
Anita Verno:Steve Cooper:Thomas J. Cortina:Barb Ericson:Bill Madden	This session will continue efforts by the ACM and Computer Science Teachers Association (CSTA) to create a comprehensive body of resources to support the implementation of a national K-12 computer science curriculum. The ACM K-12 Computer Science Curriculum Committee, with input from the Computer Science educational community, published a Model Curriculum [1] in 2003. The Model suggests a four-level curriculum. Level-I topics, primarily for the K-8 years, closely follow the well-defined ISTE Standards [2]. Level-II topics are suggested for all students in grades 9 or 10 and are comprised of introductory computer science content. Level-III topics focus on analysis and design with emphasis on the scientific and engineering aspects of computer science. The Level III course is intended for students who may be interested in continuing their education in computer science at the college level. AP Computer Science and special topics courses comprise Level-4. This special session will focus on the learning objectives and activities for Level III of the K-12 Computer Science Model curriculum. Attendees will be invited to provide critical feedback that will help move the curriculum project forward.	Developing resources to support a national computer science curriculum for K-12	NA:NA:NA:NA:NA	2018
Mohamad Neilforoshan	NA	Session details: Emerging instructional technologies	NA	2018
Jorge Barbosa:Rodrigo Hahn:Débora N. F. Barbosa:Cláudio F. R. Geyer	The increasing use of mobile devices and the dissemination of wireless networks have stimulated mobile and ubiquitous computing research. In this context, education is being considered one of the main application areas. This paper proposes the use of mobile and ubiquitous computing to support and improve learning in a new kind of academic structure called Undergraduate Course of Reference (nicknamed GRefe). The GRefe was proposed in Unisinos, a university located in south of Brazil. Currently, there are four GRefes. These courses are organized in Learning Programs and Learning Projects. They use a practical and multidisciplinary approach to stimulate the learning. We proposed the use of mobile and ubiquitous computing technology to articulate and improve the academic activities of a specific GRefe called Computer Engineering. We believe that GRefe organization simplified and stimulated the use of these technologies in a learning environment.	Mobile and ubiquitous computing in an innovative undergraduate course	NA:NA:NA:NA	2018
David Lindquist:Tamara Denning:Michael Kelly:Roshni Malani:William G. Griswold:Beth Simon	Research has shown that educational technology can broaden and enhance the use of active learning in large classrooms. An educational technology platform often relies on students to bring laptops or specialized wireless devices like clickers to interact through the system. Mobile phones are an attractive alternative, as most students already possess them, they have more capabilities than dedicated clickers, and yet are small enough to minimize interference with note taking on a classroom desk.This paper presents the design and use of a mobile phone extension to Ubiquitous Presenter, which allows students to submit solutions to active learning exercises in the form of text or photo messages. In an exploratory study, students found that text messaging worked well for exercises with multiple choice or short answers. Entering symbols common to computer science was difficult. Many problems were more suitable to photo messaging of a handwritten answer, although image quality must be managed. The phone's small size left space for the use of a notebook. The students had concerns about the message charges that would accrue in use. In conclusion, we offer recommendations to instructors and system designers interested in leveraging mobile phones to increase communication in the classroom.	Exploring the potential of mobile phones for active learning in the classroom	NA:NA:NA:NA:NA:NA	2018
David J. Malan	In recent months have teachers become publishers of content and students subscribers thereof by way of podcasts, feeds of audio, video, and other content that can be downloaded to clients like iTunes and devices like iPods. In the fall of 2005, we ourselves began to podcast Harvard Extension School's Computer Science E-1 in both audio and video formats, the first course within Harvard University to do so. Our goals were to provide students with more portable access to educational content and to involve them in technology itself.To evaluate this experiment, we have analyzed logs and surveys of students. We find that our students valued E-1's podcast more as a vehicle for review (45%) than as an alternative to attendance (18%). We also find that most students (71%) tended to listen to or watch lectures on their computers, with far fewer relying upon audio-only (19%) or video (10%) iPods. We argue, meanwhile, that podcasting, despite its widespread popularity, is but a marginal improvement on trends long in progress. It is this technology's reach that we claim is significant, not the technology itself. Logs suggest that E-1's own podcast, available not only to students but to the public at large, has acquired (as of September 2006) between 6,000 and 10,000 subscribers from over 50 countries. We argue, then, that podcasting offers to extend universities' educational reach more than it offers to improve education itself.	Podcasting computer science E-1	NA	2018
James Caristi	NA	Session details: Alice frenzy: an interactive group activity	NA	2018
James Caristi:Stephen Cooper:Judy Mullins	Participants will be given 15 minutes of instruction on programming in Alice. Then, working in small groups, participants will attempt to develop a program in 30 minutes from one of several given starting scenarios.	Alice Frenzy: an interactive group activity	NA:NA:NA	2018
Bettina Bair	NA	Session details: Gender issues	NA	2018
James P. Cohoon	We report on a pilot section of an introductory computing course offered at a top tier university through its engineering school. Although targeted for students with no prior programming experience, its goals were same as the goals of the other sections. The course enrolled 43 students. They were 49% female, 23% black, and 12% Hispanic. The demographics are different from the typical 1st year class at the school, which is 26% female, 6% black, and 3% Hispanic. Two important pedagogies differentiated the pilot section from other sections: computer availability at all class meetings and the methodology for selecting motivating examples. A priori only one student in the section intended a computing major, but upon completion the students chose a computing major at a higher rate than the rates for other sections: 19% versus 13%. More striking is that 33% of the pilot section women and 27% of its minority students chose a computing major. All students completed the course and no student left the school. These outcomes compare favorably to a school course withdrawal rate of 12% and a school attrition rate of 10%, a female attrition rate of 12%, and a minority rate attrition of 25%.	An introductory course format for promoting diversity and retention	NA	2018
Jon Beck	It has been demonstrated that an undergraduate women's computer science support group can provide significant benefits to female CS students. It can be difficult for students to establish such a group without institutional support. We successfully established a thriving, self-sustaining support group with a modest initial outlay of time and money. This program serves as a model and template to help other small to mid-sized undergraduate departments accomplish the same.	Forming a women's computer science support group	NA	2018
Mark E. Hoffman:David R. Vance	We administered a computer literacy survey of our incoming, first-year students for the past three years. Our purpose was not to measure application skill levels, but to understand students' perception of their own skills, to identify from whom they learned how to perform a set of technology tasks, and to understand how access to different Internet connection types affects perception and the sources of student technology learning. Over the years, fale, first-year students have increased to parity in self-reported skill levels over the set of technology tasks, and report significantly higher skill levels on communications-oriented tasks. Males report significantly higher skill levels on technology-oriented tasks. Our results suggest that adoption of DSL Internet connections by fales is contributing to the improvent.	Gender difference trends in computer literacy of first-year students	NA:NA	2018
Elinor M. Madigan:Marianne Goodfellow:Jeffrey A. Stone	Recent studies have found that gender gaps in information and communication technology (ICT) skills exist, despite changing gender role expectations for men and women. In this paper we report on survey results from an ongoing longitudinal study of ICT skills which found that--in general-- first-year students were confident in their ICT skills. However, comparison of student skills in four major technology domain areas indicates that there are differences between the male and fale first-year students in levels of confidence. We also report on a second, follow-up study designed to examine the actual ICT skills of the first-year students. This investigation indicates that both male and fale students have greater confidence than actual skill. The study also found that both male and fale students have approximately the same level of actual ICT skills. These findings suggest that fale students, although possessing ICT skills similar to their male counterparts, do not perceive thselves as competent users of technology. These differences in ICT skill confidence have implications for fluency with technology in acadia as well as the recruitment and retention of women in the Computer and Information Sciences.	Gender, perceptions, and reality: technological literacy among first-year students	NA:NA:NA	2018
Blair Taylor	NA	Session details: Curriculum issues	NA	2018
Timothy Davis:Robert Geist:Sarah Matzko:James Westall	The τεΧνη project, which provides an unusual alternative to the standard design of the computing curriculum for the bachelor's degree in computer science, is now entering full-scale implementation at Clemson University. The approach relies extensively on problem-based instruction, computer graphics, and the notion of cognitive apprenticeship. The novelty arises from the magnitude and origin of the problems to be integrated into the curriculum and the breadth of impact across the curriculum. The first three courses in the new curriculum are now being taught. The design of each course is described, and preliminary assessments from earlier trial sessions of the first two courses are offered.	τεΧνη: trial phase for the new curriculum	NA:NA:NA:NA	2018
Merrick Furst:Charles Isbell:Mark Guzdial	In his book The World is Flat, Thomas Friedman convincingly explains the challenges of a global marketplace [4]. One implication is that software development can be out-sourced, as can any narrow, skills-based occupation; however, as Friedman also points out, leadership, innovation, and insight are always in demand. We have recently created and are implementing threadstm, a new structuring principle for computing curricula. Threads provides one clear path for computer scientists seeking to reinvent and re-invigorate computer science degree programs. Threads form a cohesive, coordinated set of contexts for understanding computing. The union of all threads covers the breadth "computer science." The union of any two threads is sufficient to cover a computer science degree. In this paper, we describe Threads, our process, the impact so far, and some of our future plans. We close with recommendations for other schools, especially schools with smaller programs.	Threads™: how to restructure a computer science curriculum for a flat world	NA:NA:NA	2018
Mingrui Zhang:Eugene Lundak:Chi-Cheng Lin:Tim Gegg-Harrison:Joan Francioni	The Computer Science Department at Winona State University revised its curriculum to include an interdisciplinary approach adapted to the study of computer science. The new curriculum consists of a traditional Computer Science option and an Applied Computer Science option consisting of four separate tracks, namely: bioinformatics, computer information systems, geographic information technology, and human computer interaction. This paper describes the design strategy and implementation plan as well as the content of our multi-track Applied Computer Science curriculum.	Interdisciplinary application tracks in an undergraduate computer science curriculum	NA:NA:NA:NA:NA	2018
Dana Wortman:Penny Rheingans	Student retention is an important topic in Computer Science departments across the country. Keeping strong students and helping struggling students perform better are two fundamental components of improving retention. Isolating the cause(s) of students leaving the major is an important area of research. We endeavor to explore this problem using a visualization tool to probe student data within the beginning course sequence in Computer Science. We would like to see what patterns exist amongst students, focusing on success, failure, and repetition patterns throughout the first three courses. Identifying these patterns can help isolate some of the causes of decreased retention within the department, allowing us to address individual projects, courses, or exams that may be causing students exceptional difficulty or loss of interest. Due to the large amount of data and the variety of students' paths through their courses, it is essential that a visualization be developed to represent the data. Using graph layouts, parallel coordinates, color-mapping, and interactive selection, users can explore and query the data. Users can discover patterns within the data by selecting subgroups of students and examining the event sequences to find patterns of success, failure, and repetition amongst those students. Departments can use this information to isolate profiles of students for retention, remediation, and recruitment efforts as well as identify areas of the curriculum or instruction that can be improved.	Visualizing trends in student performance across computer science courses	NA:NA	2018
Ariel Ortiz	NA	Session details: Programming languages and compilers	NA	2018
Martin Ruckert	This paper presents an unusual programming language, textttklx, illustrating the type of compiler construction projects the author uses successfully to accompany a mostly traditional lecture on compilers.The target processor of textttklx is the PostScript interpreter, and the paper argues that this is a very good choice. A PostScript interpreter simulates an elegant stack machine with built-in graphic capabilities. It is the perfect target for languages like textttklx, making them easy to implement and fun to use. The exact definition of the source language is an integral part of the student project.The use of non standard languages and a non standard target fosters student creativity in language design and implementation. It invites "out of the box" thinking, and prepares the knowledge transfer from the rich tradition of compiler construction to new and forthcoming areas of computer science.	Teaching compiler construction and language design: making the case for unusual compiler projects with postscript as the target language	NA	2018
Li Xu	The recent report by the ACM Job Migration Task Force points to the immediate need to teach "programming-in-the-large", the skills to work with and develop large and complex production-grade software and systems, so young computing professionals can stay competitive in the face of IT globalization and offshoring of software [4, 13]. However, current computer science curricula are inadequate to prepare college graduates to meet the reality of computing. Most course projects fall into the "programming-in-the-small" mode, in which students implement small, isolated projects to explore the course subject matter and with little emphasis on how the smaller pieces can be integrated to build sophisticated larger scale systems.This paper presents a modern IDE-based approach to address this inadequacy. We develop RobotStudio --- an extensible framework for building IDEs targeting a simple yet versatile educational robot platform. Student projects are implemented as plugin modules of RobotStudio and, when put together, they form a comprehensive IDE for programming the robotic environment.This paper describes the architecture of the RobotStudio framework, its extension mechanisms, and the teaching practice of using RobotStudio in an introductory compiler construction class to illustrate "programming-in-the-large" principles.	RobotStudio: a modern IDE-based approach to reality computing	NA	2018
Christopher W. Brown:Eric A. Hardisty	This paper presents RegeXeX (Regular expression exercises), an interactive system for teaching students to write regular expressions. The system poses problems (prose descriptions of languages), students enter solutions (regular expressions defining these languages), and the system provides feedback. What is novel in this system is the type of feedback: students are not merely told that a submitted regular expression is wrong, they are given examples of strings that the expression either matches and shouldn't or does not match and should, and asked to try again. Additionally, student responses need only be equivalent to the solution, not identical. Results of classroom experience with this system are also reported, and demonstrate its effectiveness in teaching students to write regular expressions with little or no instructor interaction.RegeXeX is a freely available, portable system, written in C++ and using the Qt library for its GUI. It is distributed with several exercise sets, but is designed so instructors can easily write their own. The system logs student work and offers facilities for submitting log-files to instructors as well, allowing for automatic grading, or in-depth analysis of student performance and evolution of responses throughout the exercise set.	RegeXeX: an interactive system providing regular expression exercises	NA:NA	2018
Scott Sigman	Engaging and maintaining student engagement with the content of a course in formal language theory and the theory of computation is notoriously difficult. A major factor is student's perception of the relevance of the required mathematical material to computer science as they have studied the discipline. Usually, the mathematical material discourages students and for many it forms an insurmountable barrier. This paper describes the construction of a course using the discovery learning technique known as the Moore Method that directly addresses student engagement with this material. The results of the delivery of this course were that students remained engaged with the course throughout the semester and enthusiastically received the pedagogical approach employed. While the course described was delivered to a small class in a liberal arts college, it may be adapted to larger class sizes and taught in any computer science program.	Engaging students in formal language theory and theory of computation	NA	2018
Paul Piwowarski	NA	Session details: Software engineering	NA	2018
Michela Pedroni:Till Bay:Manuel Oriol:Andreas Pedroni	One of the main shortcomings of programming courses is the lack of practice with real-world systs. As a result, students feel unprepared for industry jobs. In parallel, open source software is accepting contributions even from inexperienced programmers and achieves software that competes both in quality and functionality with industrial systs. This article describes: first, a setting in which students were required to contribute to existing open source software; second, the evaluation of this experience using a motivation measuring technique; and third, an analysis of the efficiency and commitment of students over the time. The study shows that students are at first afraid of failing the assignment, but end up having the impression of a greater achievent. It ses also that students are inclined to keep working on the project to which they contributed after the end of the course.	Open source projects in programming courses	NA:NA:NA:NA	2018
Lucas Layman:Laurie Williams:Kelli Slaten	In addition to "learning by doing," programming assignments and projects are also the mechanism by which students learn about the utility of computer science -- or not. Recent research indicates that the current generation of students is in search of a career with meaning, and women and minorities have long been known to desire careers that help society. In this paper, we provide student testimonials on the importance and benefits of practical and socially-relevant assignments. We then examined approximately 200 first year (CS1) and software engineering assignments at top computer science institutions. Only 34% of the CS1 projects had a practical or socially-relevant context, 41% had no context at all, and 15% were games. For software engineering projects, 62% were practical or socially-relevant, but still 16% had no practical context. We recommend that educators, through their assignments, place increased emphasis on demonstrating that computer science can be used to aid society and/or produce products of practical value to society.	Note to self: make assignments meaningful	NA:NA:NA	2018
Barry L. Kurtz:James B. Fenwick, Jr.:Christopher C. Ellsworth:Xiaohong Yuan:Adam Steele:Xiaoping Jia	We have been funded by the National Science Foundation [6] to investigate the feasibility of distributing large software engineering projects across multiple universities at remote locations. This paper reports on the use of web services to make such inter-university cooperation feasible. The TRavel Itinerary Planner (TRIP), a year long project, was implemented at three universities: Appalachian State University, North Carolina A&T, and DePaul University. After discussing our methodology based on web services we describe the inter-university cooperation that was achieved on this project. We then describe problems encountered and their solutions and conclude with a brief description of a different project that we will develop during the 2006-2007 academic year.	Inter-University software engineering using web services	NA:NA:NA:NA:NA:NA	2018
J. D. Chase:Ed Oakes:Sean Ramsey	It is well understood and has been well documented that there is much to gain by using live projects, those that serve a real client with a real problem to solve, in the computer science classroom. However the use of live projects has always come with a variety of obstacles including providing support for the project once it is complete and limiting the scope of a project to the context of a single term. This paper describes the development of the Small Project Support Center at Radford University that has been designed to eliminate these obstacles.	Using live projects without pain: the development of the small project support center at Radford University	NA:NA:NA	2018
Linda B. Sherrell	NA	Session details: NSF-DGE GK-12 teaching: fellowships changing student perceptions about computer science	NA	2018
Linda B. Sherrell:Chang Liu:William M. Pottenger:Paul Gross	NA	NSF-DGE GK-12 teaching fellowships: changing student perceptions about computer science	NA:NA:NA:NA	2018
John Dooley	NA	Session details: Security and networks	NA	2018
Susan J. Lincke	Security courses can focus on encryption/authentication algorithm design, attack/defend methodologies, or security techniques. Our goal is to train computer personnel in how to secure networks. What better way than to work with real equipment and real organizations? This course includes a community-based project which involves students auditing part of a syst for local organizations. Auditing is common in industry, and requires students to be well-versed in security techniques, the auditing process, and the application of results. This paper outlines our experiences in bringing community-based audit projects into the classroom.	Network security auditing as a community-based learning project	NA	2018
Ken Wong:Tilman Wolf:Sergey Gorinsky:Jonathan Turner	The Open Network Laboratory (ONL) is an Internet-accessible virtual laboratory facility that can deliver a high quality laboratory experience in advanced networking [3,7]. Our experience with ONL indicates that it has potential to improve student understanding of fundamental networking concepts and increase enthusiasm for experimentation with complex technology. Furthermore, these benefits can be delivered with less effort from the instructor than using a traditional approach of socket programming and ns-2 simulation exercises. The system is built around a set of high-performance, extendible routers which connect personal computers acting as end systems. Users configure their virtual network through the Remote Laboratory Interface (RLI), an intuitive graphical interface. The RLI's real-time charts and user data facility make it easy to directly view the effect of system parameters on traffic behavior. These features can enhance learning by providing users with multiple representations of network phenomena. We describe how the ONL facilities have improved our ability to meet instructional objectives and discuss some approaches to improving the laboratory experience.	Teaching experiences with a virtual network laboratory	NA:NA:NA:NA	2018
Wenliang Du:Zhouxuan Teng:Ronghua Wang	To provide students with hands-on exercises in computer security education, we have developed a laboratory environment (SEED) for computer security education. It is based on VMware, Minix, and linux, all of which are free for educational uses. Based on this environment, we have developed ten labs, covering a wide range of security principles. We have used these labs in our three courses in the last four years. This paper presents our SEED lab environment, SEED labs, and our evaluation results.	SEED: a suite of instructional laboratories for computer SEcurity EDucation	NA:NA:NA	2018
Lisa Lancor:Robert Workman	This paper provides a description of how the topic of Google hacking was incorporated into a graduate course on web security which was offered in the Fall of 2005. It begins by providing an overview of Google hacking and describes what it is, how it is used, and most importantly how to defend against it. The paper then describes a series of exercises that students must complete providing them with hands-on Google hacking strategies, techniques and countermeasures.	Using google hacking to enhance defense strategies	NA:NA	2018
Michael Rogers	NA	Session details: Computer games in the classroom, or, how to get perfect attendance, even at 8 am	NA	2018
Bary Burd:John Goulden:Brian Ladd:Michael Rogers:Kris Stewart	In this special session, we will compare and contrast several game engines that have been used in game development courses, and describe our experiences teaching such courses.	Computer games in the classroom, or, how to get perfect attendance, even at 8 AM	NA:NA:NA:NA:NA	2018
Nick Parlante	NA	Session details: Nifty assignments	NA	2018
Nick Parlante:John Cigas:Angela B. Shiflet:Raja Sooriamurthi:Mike Clancy:Bob Noonan:David Reed	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA	2018
Alison Young	NA	Session details: Computer science education research	NA	2018
Linxiao Ma:John Ferguson:Marc Roper:Murray Wood	This paper describes an investigation into the viability of mental models used by novice programmers at the end of a first year Java programming course. The qualitative findings identify the range of mental models of value and reference assignment held by the participants. The quantitative analysis reveals that approximately one third of students held non-viable mental models of value assignment and only 17% of students held a viable mental model of reference assignment. Further, in terms of a comparison between the participants' mental models and their performance in in-course assessments and final examination, it was found that students with viable mental models performed significantly better than those with non-viable models. These findings are used to propose a more "constructivist" approach to teaching programming based on the integration of "cognitive conflict" and program visualisation.	Investigating the viability of mental models held by novice programmers	NA:NA:NA:NA	2018
Jonas Boustedt:Anna Eckerdal:Robert McCartney:Jan Erik Moström:Mark Ratcliffe:Kate Sanders:Carol Zander	Yes, and Yes.We are currently undertaking an pirical investigation of "Threshold Concepts" in Computer Science, with input from both instructors and students. We have found good pirical evidence that at least two concepts---Object-oriented programming and pointers--are Threshold Concepts, and that there are potentially many more others.In this paper, we present results gathered using various experimental techniques, and discuss how Threshold Concepts can affect the learning process.	Threshold concepts in computer science: do they exist and are they useful?	NA:NA:NA:NA:NA:NA:NA	2018
Michael R. Wick	In this paper, we describe an experiment designed to test the effect of a novel first day lecture on student attitudes toward programming. The lecture does not require any knowledge of a specific language or a specific paradigm. Student evaluation surveys indicate that the lecture is effective at helping students to see programming as more than the simple creation of an artifact but rather as a systematic problem-solving process.	Bridging the conceptual gap: assessing the impact on student attitudes toward programming	NA	2018
Josh Tenenberg:Sally Fincher	The Disciplinary Commons project had two primary objectives: to document and share knowledge about teaching and student learning in Computer Science (CS) classrooms, and to establish practices for the scholarship of teaching by making it public, peer-reviewed, and amenable for future use and development by other educators. The mechanism for achieving these goals was through a series of monthly meetings involving Computer Science faculty, one cohort of ten CS faculty in the US and one cohort of twenty in the UK. Meetings were focused on the teaching and learning within participants' classrooms, with each person documenting their teaching in a course portfolio. Surveyed on completing the project, participants discussed the value of the Disciplinary Commons in providing the time and structure to systematically reflect upon their practice, to exchange concrete ideas for teaching their courses with other CS educators in the discipline, to learn skills that apply directly to course and program evaluation, and to meet colleagues teaching CS at other institutions.	Opening the door of the computer science classroom: the disciplinary commons	NA:NA	2018
Lillian (Boots) Cassell	NA	Session details: The computing ontology project - the computing education application	NA	2018
Lillian N. Cassel:Robert H. Sloan:Gordon Davies:Heikki Topi:Andrew McGettrick	NA	The computing ontology project: the computing education application	NA:NA:NA:NA:NA	2018
Wei Kian Chen	NA	Session details: Courseware	NA	2018
Eric Roberts	Since the introduction of Java in 1995, educators have recognized the potential of Java applets as an educational resource. Sadly, the continuing evolution of Java has made it harder to use applets, largely because it is so difficult to keep those applets compatible with the many different versions of the Java runtime environment supported by existing browsers. Over the past two years, the ACM Java Task Force (JTF) has developed an effective strategy that makes it possible to write applets using up-to-date versions of Java that will nonetheless run on browsers that support only the JDK 1.1 environment. This paper describes the acm11.jar library, which uses this strategy to achieve the desired backward compatibility. It also describes a more general solution strategy for which we have a prototype, although we are unable to release the prototype until we get permission from Sun Microsystems. The acm11.jar library can be used with any Java applet and does not depend on adopting the JTF library packages. That library therefore represents a general resource for teachers and students who want to write Java code that runs in web environments.	Resurrecting the applet paradigm	NA	2018
Thomas P. Murtagh	Squint is a Java library developed to support the use of event-driven programming and network applications in programming examples for a CS1 curriculum. We present the design of the library, emphasizing techniques employed to minimize the effort students expend learning features specific to the library. We also compare Squint to an established library that supports event-driven programming in CS1, emphasizing ways in which the two libraries support similar pedagogical approaches.	Squint: barely visible library support for CS1	NA	2018
Michael Woodley:Samuel N. Kamin	Even after taking numerous programming courses, many students have poor programming skills. This is a problem not only in their post-graduation employment, but even in the higher-level Computer Science courses, where large programs are routinely assigned. Yet, teaching programming skills is expensive; like teaching writing, it can only be accomplished by a repeated cycle of writing, getting informed feedback, and rewriting. In this paper, we describe a computer science course designed around the concept of a studio course like those used in art and architecture. Its key elements are practice, public presentation, and review by peers in a small group. We discuss our experience in teaching the course for two years. We believe this course can be replicated and taught, at reasonable cost, even in large CS departments.	Programming studio: a course for improving programming skills in undergraduates	NA:NA	2018
Steven Robbins	This paper describes JES, a Java Execution Simulator that allows users to explore how a Java program executes. This interactive simulator displays a representation of a Java program and animates the running of the program. Instructors can use JES to demonstrate how data is moved when variables are assigned, when parameters are passed, and when values are returned by a method. JES is useful for comparing how primitive and object values are manipulated. The simulator also demonstrates scope rules, object creation, inheritance and polymorphism. While the simulator only supports variables of type double and object and does not support conditionals or looping, it allows users to write general Java programs that might be used as examples in the first weeks of a CS 1 course. JES also has support for arrays of doubles and objects. The simulator is written in Java and can be run as an application or an applet. Support for the simulator includes a simple mechanism for quickly running the simulator on a program developed with a standard Java development system.	A Java execution simulator	NA	2018
Clare Tang	NA	Session details: Computing and society	NA	2018
Brian J. Rosmaita	Service learning can play an important role in computer science education: it can address declining enrollments and increase current student satisfaction. Although computer science poses some serious problems for effectively implementing service learning, these can be surmounted by reconfiguring a course to include a substantial treatment of accessibility. I describe such a course, explain how it overcomes the problems, and discuss the results of the course from a student perspective.	Making service learning accessible to computer scientists	NA	2018
J. McGrath Cohoon	This investigation of gendered experiences in computer science and computer engineering (CSE) doctoral programs uses survey data from a nationwide stratified random sample. Analyses of data from 41 departments show that women CSE doctoral students have less confidence than men students that they can achieve their educational goals. Moreover, women's confidence is significantly affected by their comfort asking questions in class, which is in turn affected by faculty beliefs about the relationship between diversity and student quality. Program rank also has a negative effect on confidence, but affects men and women similarly.	Gendered experiences of computing graduate programs	NA	2018
Heidi J. C. Ellis:Ralph A. Morelli:Trishan R. de Lanerolle:Jonathan Damon:Jonathan Raye	In this paper, we present an example humanitarian open-source software project that has been used since January 2006 at a small liberal-arts college as an experiment in undergraduate CS education. Sahana (Sinhalese for relief) is a free and open-source disaster management system developed in Sri Lanka by a group of IT professionals following the 2004 Asian tsunami. It is a web-based tool that addresses the IT coordination problems that typically occur in trying to recover from a large-scale disaster. We are currently exploring the wider use of Sahana as a sustainable model and platform for teaching about open-source software development while at the same time allowing CS students and educators to make a socially useful contribution of their time, effort, and expertise. This paper presents our experiences with Sahana including the benefits for both academia and industry.	Can humanitarian open-source software development draw new students to CS?	NA:NA:NA:NA:NA	2018
Tarsem S. Purewal, Jr.:Chris Bennett:Frederick Maier	We propose the integration of service-learning into the early undergraduate computer science curriculum by way of a course on computing, ethics and society. We believe that such a course will fill a common gap in computer science and can be used to draw smart, motivated students to the discipline by embracing its social relevance. Additionally, we outline a particular service-learning project that can be undertaken by students in the course--initiating a community computer recycling program. We describe the successful implementation of such a recycling program and describe some logistical issues that may arise in organizing such a program in a service-learning course. We believe that a student-implemented community outreach project such as this can alter the public's perception of computer science and will assist in reversing the trend of declining undergraduate enrollment.	Embracing the social relevance: computing, ethics and the community	NA:NA:NA	2018
Soe Than	NA	Session details: Systems and databases	NA	2018
Edward Sciore	In this paper we examine the probl of how to give hands-on assignments in a database syst internals course. We argue that current approaches are inadequate, either because they are not sufficiently comprehensive or because they require using software that has a steep learning curve. We then describe SimpleDB, which is software written expressly for such a course. SimpleDB is a database syst in the spirit of Minibase. Unlike Minibase, however, it supports multiple users and transactions via JDBC, and its code is easy to read and modify. We then describe a course that we teach using SimpleDB, and discuss the educational benefits resulting from it.	SimpleDB: a simple java-based multiuser syst for teaching database internals	NA	2018
Haifeng Liu:Xianglan Chen:Yuchang Gong	In this paper, we present BabyOS, a compact educational kernel designed to facilitate the preliminary learning of operating systs. It is an in-mory syst running on real hardware, with a multi-phase project covering concurrency, scheduling, inter-process communication, mory management, and networking. Compared with other educational operating systs, BabyOS is a nontraditional project frame; an important distinction lies in that it reflects some design ideas in bedded operating systs. In this way, BabyOS provides a complentary approach to educational operating syst projects.	BabyOS: a fresh start	NA:NA:NA	2018
Chuck Pheatt	This paper introduces a client-server suite, which provides a readily configurable and simple to use network distributed computing framework. The suite will allow users to easily operate a distributed computing environment and solve real probls with a hybrid peer-to-peer (P2P) grid. This tool is most useful in a pedagogical setting such as an introductory computing course or as an adjunct to a computationally intensive course that addresses parallel computing issues.	An easy to use distributed computing framework	NA	2018
Charles Border	We have combined four industry standard technologies to create a flexible, modular and easily extensible virtual server environment for both distance and local students to use in our networking, security, and system administration classes. By combining the remote access technologies of Remote Desktop, the multi-user capabilities of Microsoft Terminal Services, the ability to share sessions of Remote Assistance, and the ability to manipulate virtual machines and virtual networks using VMWare Workstation, the Remote Laboratory Emulation System (RLES) allows students to conduct labs very similar to our local labs from either inside or outside our lab facility. While other people have been experimenting with various combinations of these technologies we have aggressively developed and implemented this system and feel that it has become a very important tool in our ability to cost-effectively provide computing infrastructure for local and distant students, and student and faculty research.	The development and deployment of a multi-user, remote access virtualization system for networking, security, and system administration classes	NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Randy Pausch	I have spent the last fifteen years of my life leading an incredible team. Our quest (which we did not even realize in the beginning) was to revolutionize the way computer programming is taught. Current versions of the Alice system (Alice v2.0, and Caitlin Kelleher's "Storytelling Alice") have been very effective in the college classroom and in tests with middle school girls. The use of drag-and-drop authoring to create 3D movies has proved to be a powerful motivator for students of all ages and both genders. In 2008, we will release Alice v3.0, which provides "real Java" programming and the characters from EA's "The Sims," the most popular PC video game in history. Damn shame I won't be there to see it. As you probably know, I'm dying of pancreatic cancer, as became widely known in my "Last Lecture." Like Moses, I get to see the promised land, but not set foot in it. But the vision is clear. Long before I became ill, Dennis Cosgrove took over the responsibility for the design of Alice v3.0, and he's doing a whale of a job. Steve Cooper (of St. Joseph's University), Wanda Dann, and Don Slater are handling the pedagogic materials for college and high school, and Caitlin Kelleher (now junior faculty at Washington University in St. Louis) is heading the efforts regarding middle school girls. This talk will address the history, philosophy, and future of the Alice project, and will include a behind-the-scenes look at a pre-release version of Alice v3.0. I will give this address in person if I am still alive and able, or by a combination of pre-taped video and help from the Alice team. I cannot imagine a better professional legacy than what the Alice team is currently building.	Alice: a dying man's passion	NA	2018
Vicki L. Almstrum:Bill Aspray:Mary Anne Egan:John Impagliazzo	NA	Perspectives on history in computing and education	NA:NA:NA:NA	2018
Michal Armoni:Noa Lewenstein:Mordechai Ben-Ari	Nondeterminism is a fundamental concept of computer science. However, since it is a very abstract concept, teaching and learning nondeterminism is difficult. In this paper we focus on one aspect of the teaching and learning processes of nondeterminism: the extent to which undergraduate students of computer science perceive that nondeterministic automata exhibit nondeterministic behavior, that is, they are unpredictable and inconsistent. First we show that students tend to think of nondeterministic automata as consistent machines; then we show that an explicit intervention can significantly affect students' mental models of nondeterministic automata in the direction of improving their perception of nondeterministic behavior.	Teaching students to think nondeterministically	NA:NA:NA	2018
Irene Polycarpou:Ana Pasztor:Malek Adjouadi	In this paper, we present an approach to teaching induction that we call the "conceptual route" of teaching induction. Proofs by induction are central to the study of computer science and students come across them in many courses of their curricula. It is documented in the literature that in general students have difficulties with proofs by induction. Even though through the years some solutions were proposed to improve the situation, recent studies show that students are still having difficulties. Currently, proofs by induction take up too little of the computer science curriculum, and they are taught as a step-by-step procedure to be followed, which is not sufficient for students to gain conceptual understanding. In contrast, our approach aims at students' conceptual understanding by shifting their focus from the syntactic form of proofs by induction to their substance. The theoretical underpinning of our approach is an operationalization of the Induction Principle.	A conceptual approach to teaching induction for computer science	NA:NA:NA	2018
Joan M. Lucas:Jonathan Jarvis	This paper describes our experience extending the educational software program JFLAP. JFLAP enables students to design and simulate automata such as Finite State Machines, push-down automata, and Turing Machines. It is a valuable aid in any Automata Theory course. We modified JFLAP so that students could write Java programs that alter the actual automaton itself. This utility greatly increases the students' ability to grasp such fundamental topics as the Church-Turing thesis and the theory of undecidability.	Incorporating transformations into jflap for enhanced understanding of automata	NA:NA	2018
Brian Hanks:Carol Wellington:Tom Reichlmayr:Cyril Coupal	NA	Integrating agility in the cs curriculum: practices through values	NA:NA:NA:NA	2018
Stuart Reges	This paper describes some unusual patterns that emerged from a statistical analysis of the 1988 Advanced Placement Exam in Computer Science. Most multiple-choice questions on the exam had few significant correlations with other parts of the exam. But a small set of five questions had a nontrivial correlation with many parts of the test. One question in particular demonstrated such correlations. It asked about the effect of the assignment statement "b := (b = false)" for a boolean variable b. One interpretation of this data is that these questions are testing general programming aptitude. The paper presents the analysis along with a discussion of the possible implications.	The mystery of "b := (b = false)"	NA	2018
David Ginat	We all are aware of the relevance of examining a task from diverse angles. We also are aware of the potential relevance of learning from one's mistakes. Yet computer science (CS) textbooks and teaching materials fall short in embedding these two notions. In this paper, we present an approach of elaborating divergent thinking in algorithm design, while capitalizing on erroneous solutions. Using a collected set of non-routine algorithmic tasks, we developed and applied a scheme of class activities, in which initial faulty solutions (due to novice tendencies) are carefully examined, and their falsifying inputs and characteristics are used for creative reasoning that yields fruitful outcomes. We present and illustrate our activities, refer to their cognitive aspects, and describe our experience with applying them in (an Introduction-to-Algorithms) class.	Learning from wrong and creative algorithm design	NA	2018
David Gries	There has been debate about whether OO should, or even can, be taught first in CS1 (using Java). We claim that OO can be taught successfully, provided certain principles are followed. These principles lead to the requirement of an appropriate model for classes and objects, which we provide.	A principled approach to teaching OO first	NA	2018
Greg Wilson:Christine Alvarado:Jennifer Campbell:Rubin Landau:Robert Sedgewick	NA	CS-1 for scientists	NA:NA:NA:NA:NA	2018
Marc L. Corliss:E. Christopher Lewis	This paper introduces the Bantam Java compiler project, a new language and compiler designed specifically for the classroom Bantam Java, the source programming language, is a small subset of the Java language, which is a commonly-used language in introductory programming courses. Because Bantam Java is similar to Java, it leverages the student's existing intuition and the student can automatically apply what they learn in the course directly to Java. The Bantam Java project is also customizable (it supports several tools and targets), which gives instructors flexibility in designing course assignments. Finally, the Bantam Java compiler project includes a free, comprehensive, student manual which can be used in conjunction with any compiler textbook.	Bantam: a customizable, java-based, classroom compiler	NA:NA	2018
Li Xu	Language engineering - the theory and practice of building language processors and compilers, has long been recognized as important subject in Computer Science curricula. However, due to lack of suitable target systems, educators face significant challenges to teach language engineering classes effectively. Leveraging the emerging inexpensive robot devices, this paper presents a new approach of using robots as system context to teach language engineering topics. We designed the Chirp-Scribbler Language, which targets the popular Scribbler robot; combined together, they provide an engaging and feature-rich platform to teach a wide range of topics in language engineering. This paper describes the Chirp-Scribbler Language, its integration with the target robot, and the teaching practice of using them to teach language translation basics in an undergraduate programming course.	Language engineering in the context of a popular, inexpensive robot platform	NA	2018
Ariel Ortiz	In this paper, the S-expression Interpreter Framework (SIF) is presented as a tool for teaching language design and implementation. The SIF is based on the interpreter design pattern and is written in the Ruby programming language. Its core is quite small, but it can be easily extended by adding primitive procedures and special forms. The SIF can be used to demonstrate advanced language concepts (variable scopes, continuations, etc.) as well as different programming styles (functional, imperative, and object oriented).	Language design and implementation using ruby and the interpreter pattern	NA	2018
Natalie Linnell:Richard Anderson:Jane Prey	In this paper we discuss cultural issues encountered while offering an Algorithms course from a US university at a Chinese university using Tutored Video Instruction (TVI). TVI is a distance learning methodology where lectures are recorded at one site and then shown to a group of students at a remote site by Teaching Assistants (TAs) who stop the video periodically for questions and discussion. In conducting this cross-cultural class, we were interested in determining if we could overcome the issues of using English language materials for Chinese students, achieve a sense of local ownership of the course, and create an interactive classroom environment. We were generally successful in achieving these goals by providing supporting materials and working closely with the Teaching Assistants who served as facilitators.	Cross-cultural issues in a tutored video instruction course	NA:NA:NA	2018
Maureen Doyle:Kevin G. Kirby:Gary Newell	In this paper, we describe projects that engage Hispanic middle-school age students with computing, and cast these projects within the ECC ("Engagement, Capacity, Continuity") framework. Our projects were undertaken in the Midwestern United States, where recent heavy immigration from Latin America has caused rapid demographic shifts. We have conducted computing workshops that are cognizant of the cultural milieu of recent immigrants, in that they are family-based, are offered at familiar sites in the community, and give participants a chance to be constructors of technology rather than mere "end-users." We present these efforts as forces that generate a flow that carries immigrant youths up to the point of beginning an undergraduate major in computing.	Engaging constructions: family-based computing experiences for immigrant middle school students	NA:NA:NA	2018
Tony Clear:Diana Kassabova	Recent calls for a new discipline of 'web science' have proposed extending computer science to incorporate the social dimensions of computing. In this paper we outline a Masters course in Collaborative Computing, which employs a combination of collaborative pedagogy, collaborative technologies, and a corpus of research data from Global Virtual Teams to blend the technology and the social dimensions within a research linked course context. We review the effectiveness of this model of learning and the conduct of the course over the five years since its inception.	A course in collaborative computing: collaborative learning and research with a global perspective	NA:NA	2018
Jon Beck	In a junior- or senior-level undergraduate software engineering course that uses real-world projects for real clients, different parts of a project are inherently unequal in difficulty, time requirements, and desirability. A perennial problem is assigning portions of the project to student teams equitably. Fair division is a highly effective strategy for making an equitable, proportional, and envy-free assignment of tasks and in serving as the basis for fair grading of assignments which vary in difficulty, desirability, and time requirements.	Fair division as a means of apportioning software engineering class projects	NA	2018
Tuukka Ahoniemi:Essi Lahtinen:Tommi Reinikainen	It is important for learning that students receive enough of educational feedback of their work. To get the students to be seriously disposed to the feedback it has to be personal, objective and consistent. In large classes ensuring such feedback can be difficult. Grading rubrics are a solution to the objectivity and consistency. ALOHA is an online grading tool based on rubrics which all the graders have to use. Particularly, ALOHA provides features that make the grading process more convenient for the graders and the teacher. By facilitating the graders work ALOHA allows them to focus more on feedback writing. To test the effectiveness of ALOHA in objectivity and consistency we did a comparative statistical analysis on the distribution of grades. The results supported the assumptions showing improvement resulting in similar distribution of grades amongst different graders who used the tool.	Improving pedagogical feedback and objective grading	NA:NA:NA	2018
Xiang Fu:Boris Peltsverger:Kai Qian:Lixin Tao:Jigang Liu	Providing consistent, instant, and detailed feedback to students has been a great challenge in teaching Web based computing. We present the prototype of an automated grading system called ProtoAPOGEE for enriching students' learning experience and elevating faculty productivity. Unlike other automated graders used in introductory programming classes, ProtoAPOGEE emphasizes the examination of quality attributes of student project submissions, in addition to the basic functionality requirements. The tool is able to generate step by step play-back guidance for failed test cases, hence providing informative feedback to help students make reflective and iterative improvements in learning.	APOGEE: automated project grading and instant feedback system for web based computing	NA:NA:NA:NA:NA	2018
Gaetano Borriello:Carl Hartung:Bruce Hemingway:Karl Koscher:Brian Mayton	Embedded systems are increasingly becoming connected through wireless networking. These devices now form the basis of many of today's consumer products including cell phones and video game controllers. In the "Software for Embedded Systems" class in the Department of Computer Science & Engineering at the University of Washington, we used the design of a multi-player video game as motivation for the principal concepts in wireless embedded systems. Each student in the class designed an accelerometer-based game controller and then, the class as a whole, developed a multi-player video game that allowed 28 players (the number of students in the course) to play simultaneously. In this paper, we first describe the context of the course and its goals followed by the hardware/software platform we used to realize the game controller. We then detail the pedagogical approach we used to collectively design the video game (loosely based on soccer) and conclude with the lessons learned from this group design experience and how we would enhance the project and course in the future.	Multi-player soccer and wireless embedded systems	NA:NA:NA:NA:NA	2018
James F. Bowring	The annual ACM International Collegiate Programming Contest produces a competitive paradigm that is at odds with the pedagogical goals of modern computer science and software engineering degree programs. This paradigm stresses the fast completion of a programming task and evaluates the results solely with black-box testing specified by the judges. In contrast, the pedagogical goals of contemporary college degree programs in computing emphasize the quality of processes inherent in software development and implementation. In 2007, the College of Charleston student chapter of the ACM hosted its annual high school programming competition by turning the conventional programming paradigm on its head to focus on quality-of-process rather than time-to-complete. The judging criteria included both technical and artistic merit. The implementation of the competition emphasized success by giving students working skeleton solution programs. This paper presents the motivation for the new paradigm, the details of its implementation for the 2007 competition, and the details of the new techniques for judging technical and artistic merit.	A new paradigm for programming competitions	NA	2018
Iretta B. Kearse:Charles R. Hardnett	Generating interest in specialized areas of Computer Science (CS) is one of the goals of the department of Computer and Information Science at Spelman College as with most departments. Achieving this goal in a new, exciting, and innovative manner provided the inspiration to establish the Spelman College Computer Science Olympiad (SC CS Olympiad). The SC CS Olympiad is patterned after the Olympics athletic event. Students participate in the Olympiad as a part of a team as with the Olympics. In addition, there are several events for competition as there are in the Olympics. The events are designed to expose students to the interesting breadth of CS over several days. In this paper, the events are in the following categories: Cryptography, Robotics, Website Design, Hardware and Software Integration, and Programming. Teams use their CS knowledge and problem-solving skills to complete hands-on exercises in each area. Each teams receives points based on the quality of their results from the exercise. In this paper, we present the implementation, results, and future directions of the Spelman College Computer Science Olympiad.	Computer science olympiad: exploring computer science through competition	NA:NA	2018
Scott A. Turner:Ricardo Quintana-Castillo:Manuel A. Pérez-Quiñones:Stephen H. Edwards	In this paper we present our experience using code reviews in a CS2 course. In particular, we highlight a series of misunderstandings of object-oriented (OO) concepts we observed as a by-product of the code review exercise. In our activity, we asked students to review code, rate it using a rubric, and to justify their explanation. The students were asked to review two solutions to a project from a previous year. Through examples of their explanations, we found that students had a number of basic misunderstandings of object-oriented principles. In this paper, we present our observations of the misunderstandings, and present some general observations of how code reviews can be used as an assessment tool in CS2.	Misunderstandings about object-oriented design: experiences using code reviews	NA:NA:NA:NA	2018
Ronald J. Leach:Legand L. Burge:Harry N. Keeling	A recent paper by David Lechner stated that for many long-lived systems, it is more efficient to reengineer portions of systems than to continually repair them. That paper made an implicit assumption about the ability of software engineers to determine precisely which software should be reengineered. We report the results of a study that addresses the readiness of graduates, who will soon be beginning software engineers, to make such an assessment, based on comprehension of reusable vs. reengineered software. We address this comprehension in the context of software engineering education.	Can students reengineer?	NA:NA:NA	2018
Yanqing WANG:LI Yijun:Michael Collins:Peijie LIU	The software industry is urging on universities and colleges to cultivate software engineers who can write high quality programs. Peer code review (PCR) is accepted as an ideal way to maximize the learning outcome of students in writing quality code. Using this learning process, students improve their skills while scientific and efficient management removes the extra burden from instructors such as checking programs written by every student. In this paper, the previous PCR process was improved and the definitions of the relevant roles and documents were refined as well. After implementing this process in two academic years, some problems were found. By means of summarizing the email submissions by the students and also interviewing a few students, the behavior of all participants was preliminarily analyzed. With regards to the further quality assurance and high efficiency, a web-based management information system with a built-in blind review mechanism was discussed for solving the problems with process control, and also a game theory model was proposed for addressing the ethical issues in the whole PCR process.	Process improvement of peer code review and behavior analysis of its participants	NA:NA:NA:NA	2018
Nick Parlante	NA	Nifty assignments	NA	2018
Robert Schnabel:Duncan Buell:Joanna Goode:J. Strother Moore:Chris Stephenson	NA	An open dialogue concerning the state of education policy in computer science	NA:NA:NA:NA:NA	2018
Aaron Kimball:Sierra Michels-Slettvet:Christophe Bisciglia	In this paper we present the design of a modern course in cluster computing and large-scale data processing. The defining differences between this and previously published designs are its focus on processing very large data sets and its use of Hadoop, an open source Java-based implementation of MapReduce and the Google File System as the platform for programming exercises. Hadoop proved to be a key element for successfully implementing structured lab activities and independent design projects. Through this course, offered at the University of Washington in 2007, we imparted new skills on our students, improving their ability to design systems capable of solving web-scale problems.	Cluster computing for web-scale data processing	NA:NA:NA	2018
Joel C. Adams:Tim H. Brom	A Beowulf cluster is a distributed memory multiprocessor built from commodity off-the-shelf PC hardware, an inexpensive network for inter-process communication, and open-source software. Today's multi-core CPUs make it possible to build a Beowulf cluster that is powerful, small, and inexpensive. This paper describes Microwulf, a Beowulf cluster that cost just $2470 to build, but provides 26.25 Gflops of measured performance. (For comparison: a 1996 Cray T3D MC256-8/464 provided 25.3 Gflops.) This makes Microwulf the first Beowulf with a price/performance ratio below $100/Gflop (for double-precision operations). The system measures just 11" x 12" x 17" (27.9 cm x 30.5 cm x 43.2 cm), runs at room temperature, and plugs into a standard wall outlet. These desirable characteristics combine to make Microwulf an attractive design for most computer science departments and/or individuals.	Microwulf: a beowulf cluster for every desk	NA:NA	2018
Barry Wilkinson:Clayton Ferner	Early undergraduate Grid computing courses generally took a bottom-up approach to Grid computing education starting with network protocols, client-server concepts, creating Web and Grid services, and then progressing through the underlying Grid computing middleware, security mechanisms and job submission all using a Linux command-line interface. We describe a new approach to teaching Grid computing beginning with a production-style Grid portal, registration process, and job submission, and then leading into infrastructure details. We incorporate seven assignments, several of which require students to install Grid computing software on their own computer or lab computers rather than using centralized servers. Students complete a "capstone" mini-project. Typical projects included creating a JSR 168 portlet user interface for an application. We describe our experiences using this new course structure.	Towards a top-down approach to teaching an undergraduate grid computing course	NA:NA	2018
Alessio Gaspar:Sarah Langevin:William Armitage:R. Sekar:T. Daniels	Over the past years, many problems related to the system administration of laboratories for undergraduate system-oriented courses have found elegant solutions in the deployment of virtualization suites. This technological advance enabled these courses to switch from a mostly descriptive content to learning activities which engage students in hands-on, authentic, problem-based learning. Since this type of activity requires students to be administrators of their own virtual machines (VM) or even virtual networks, the experience gained is intrinsically authentic. The potential impact on student learning, as compared to simulation or lecture only based setups is worth investigating for laboratories in operating systems, networking, computer security, system administration, etc. We propose to review the increasingly important role that virtualization is playing in computing education from 2 perspectives; (1) Classrooms' system administration and technological advances which support the development of new pedagogies (2) Pedagogical advances which instructors can now implement thanks to these technologies and their impact on students learning from either quantitative or qualitative perspectives The presenters will share their experience leading the Xen Worlds, V-NetLab and SOFTICE projects.	The role of virtualization in computing education	NA:NA:NA:NA:NA	2018
Christopher C. D. Head:Steven A. Wolfman	Most CS1 assignments are "known answer" assignments, requiring students to implement already-solved problems with no user but their grader and themselves. In this paper, we present Poogle: a freely available framework for designing unknown-answer assignments. Poogle assignments are open-ended, graphical, and multi-user. Poogle makes it easy for students to share their creations with their users: fellow students and the general public. We present two freely available CS1 assignments based on Poogle and discuss outcomes from use of one of them in a CS1 course.	Poogle and the unknown-answer assignment: open-ended, sharable cs1 assignments	NA:NA	2018
Daniel C. Cliburn:Susan Miller	In this paper, we describe a study designed to examine the types of projects college students prefer in an introductory programming course. For three assignments in a course, students were given a choice among three project types: a game, a "choose your own adventure" story, and a more traditional project (such as a problem from the text book). During the semester, 35 of 49 projects submitted by students were the game option (71.4%), with only two projects submitted that were stories. A statistical analysis revealed that student choices on assignments did not appear to be related to their overall performance in the course. On an end of term survey, students commented that they often chose projects that had all requirements clearly explained, and avoided assignments that were open-ended in nature.	Games, stories, or something more traditional: the types of assignments college students prefer	NA:NA	2018
T. M. Rao:Sandeep Mitra	We propose the use of a new design-first approach called Problem Stereotypes and Solution Frameworks, for teaching CS1 and CS2. A problem stereotype is a category of problems that can be solved using similar techniques. A solution framework is a typical solution to a problem, parts of which can be reused to solve other problems of this stereotype. Students are introduced to a stereotype through a selection of related problems, and common features among these are identified. Homework problems are selected from the same stereotype, with students expected to follow the "recipe" provided by the given examples to generate their own solutions. Using this approach reduces the stress level for beginner students, and prevents them falling prey to the "CS is HARD" myth. We present the results of our experience with this approach in two introductory classes and an upper-division Artificial Intelligence (AI) class at SUNY Brockport.	An early software engineering approach to teaching cs1, cs2 and ai	NA:NA	2018
Roxanne L. Canosa:Joan M. Lucas	Mock trials are an effective and fun way of eliciting thoughtful dialogue from students, and encouraging them to produce incisive analyses of current ethical dilemmas related to computers and society. This paper describes our experience using mock trials in two computer ethics courses. Each trial was centered on a specific controversial and ethically or legally ambiguous topic related to current computer usage in society. Students participated in a series of mock trials during the term, alternating their role in each trial between jury, proponent, and opponent. Class participation was nearly 100% for every trial, with many students electing to define their own sub-role within their assigned major role. The logistics of the trials were initially difficult to administer and monitor; however, they quickly became manageable as we gained more experience with the opportunities and pitfalls associated with the mock-trial system, and as students volunteered suggestions for improvements.	Mock trials and role-playing in computer ethics courses	NA:NA	2018
Carol Spradling:Leen-Kiat Soh:Charles Ansorge	A national web-based survey using SurveyMonkey.com was administered to 700 undergraduate computer science programs in the United States as part of a stratified random sample of 797 undergraduate computer science programs. The 251 program responses (36% response rate) regarding social and professional issues (computer ethics) are presented. This article describes the demographics of the respondents, presents results concerning whether programs teach social and professional issues, who teaches, the role of training in these programs, the decision making process as it relates to computer ethics and why some programs are not teaching computer ethics. Additionally, we provide suggestions for computer science programs regarding ethics training and decision-making and we share reasons why schools are not teaching computer ethics.	Ethics training and decision-making: do computer science programs need help?	NA:NA:NA	2018
Joseph D. Oldham	In Spring Semester 2007 our small liberal arts college offered a new course, Computer Science 150, Cyberporn: A Seminar in Computing and Society. I proposed and taught the course as a one-hour seminar style course with no prerequisite. This paper describes the course, including motivation and student response.	Experience offering a course centered on cyberporn	NA	2018
Laurie Murphy:Gary Lewandowski:Renée McCauley:Beth Simon:Lynda Thomas:Carol Zander	A qualitative analysis of debugging strategies of novice Java programmers is presented. The study involved 21 CS2 students from seven universities in the U.S. and U.K. Subjects "warmed up" by coding a solution to a typical introductory problem. This was followed by an exercise debugging a syntactically correct version with logic errors. Many novices found and fixed bugs using strategies such as tracing, commenting out code, diagnostic print statements and methodical testing. Some competently used online resources and debuggers. Students also used pattern matching to detect errors in code that "just didn't look right". However, some used few strategies, applied them ineffectively, or engaged in other unproductive behaviors. This led to poor performance, frustration for some, and occasionally the introduction of new bugs. Pedagogical implications and suggestions for future research are discussed.	Debugging: the good, the bad, and the quirky -- a qualitative analysis of novices' strategies	NA:NA:NA:NA:NA:NA	2018
Marie-Hélène Nienaltowski:Michela Pedroni:Bertrand Meyer	Novices find it difficult to understand and use compiler error messages. It is useful to refine this observation and study the effect of different message styles on how well and quickly students identify errors in programs. For example, does an increased level of detail simplify the understanding of errors and their correction? We analyzed messages produced by a number of compilers for five programming languages, and grouped them into three style categories from their level of detail and presentation format, and correlated the level of experience and error type with performance and speed of response. The study involved two groups of students taking an introductory programming course at two different institutions; they used messages in these three styles to debug erroneous code. The results indicate that more detailed messages do not necessarily simplify the understanding of errors but that it matters more where information is placed and how it is structured.	Compiler error messages: what can help novices?	NA:NA:NA	2018
Christian Murphy:Eunhee Kim:Gail Kaiser:Adam Cannon	The errors that Java programmers are likely to encounter can roughly be categorized into three groups: compile-time (semantic and syntactic), logical, and runtime (exceptions). While much work has focused on the first two, there are very few tools that exist for interpreting the sometimes cryptic messages that result from runtime errors. Novice programmers in particular have difficulty dealing with uncaught exceptions in their code and the resulting stack traces, which are by no means easy to understand. We present Backstop, a tool for debugging runtime errors in Java applications. This tool provides more user-friendly error messages when an uncaught exception occurs, and also provides debugging support by allowing users to watch the execution of the program and the changes to the values of variables. We also present the results of two preliminary studies conducted on introductory-level programmers using the two different features of the tool.	Backstop: a tool for debugging runtime errors	NA:NA:NA:NA	2018
Owen Astrachan:Peter Denning	NA	Innovating our self image	NA:NA	2018
Dennis P. Groth:Helen H. Hu:Betty Lauer:Hwajung Lee	Summer camps offer a ripe opportunity for increasing computer science diversity. This panel provides several examples of summer camps that specifically recruit from traditionally underrepresented demographics. The panelists run camps at a community college, a private liberal-arts college, and public universities. The camps are residential and day camps, coed and all-female camps, ranging from three-days to two-weeks long, with campers from 10-years-olds to high school seniors. In addition to describing their camps, the panelists will provide information on securing funding, recruiting campers from underrepresented populations, measuring impact, and lessons learned along the way. Demonstrations of what campers accomplished will also be shown.	Improving computer science diversity through summer camps	NA:NA:NA:NA	2018
Barry Lawson:Lewis Barnett	This paper describes a proof of concept for introducing iPods and iPodLinux into a one-semester introductory undergraduate operating systems course. iPodLinux is a version of the Linux operating system modified to run on iPods. We added a project to our course in which the students modified the iPodLinux kernel, and we supplemented lectures by discussing specifics of the Linux implementation as they relate to general operating systems concepts. We feel the course was much improved by these additions, with no substantive omission of regular material. Student response was very enthusiastic, and we feel the new material enhanced their course experience by providing a component that was empowering and helped to further improve their knowledge and skills.	Using iPodLinux in an introductory OS course	NA:NA	2018
John L. Donaldson	In this paper the author describes a two-part programming assignment that has been used in an undergraduate operating systems course. The assignment is to write a user-level thread library, similar to the POSIX pthreads library, for a Unix or linux system.	Implementation of threads as an operating systems project	NA	2018
Dennis Brylow	This paper describes Marquette University's efforts to build an experimental embedded systems laboratory for hands-on projects in an operating systems course. Our prototype laboratory is now serving as the basis for a coherent sequence of class projects threaded throughout courses in hardware systems, operating systems, networking, and embedded systems. We describe the major components of our Embedded XINU laboratory environment, the operating systems course, and related improvements in other core courses of our curriculum.	An experimental laboratory environment for teaching embedded operating systems	NA	2018
Stephen Cooper:Timothy Fossum:Harriet Taylor	NA	Exploring NSF funding opportunities	NA:NA:NA	2018
Marissa Mayer	This talk will cover the philosophies of innovation and design at Google, complete with examples of how these philosophies have affected and produced various Google services. Other topics to be covered include: how Google approaches building products with simplicity, its pragmatic and experimental approach to launching products, and a discussion of the academic computer science skills that large, distributed, web-based systems like Google require.	Innovation, design, and simplicity at google	NA	2018
Grant Braught:L. Martin Eby:Tim Wahls	Previous studies have reported significant educational benefits from the use of pair-programming, in which two students program together at the same computer. Here, we report the results of a controlled study designed to measure the effects of pair-programming on the development of individual programming ability. Our findings indicate significant improvements in individual programming skill for students with lower SAT scores. Additionally, we found that all students are more likely to complete the course successfully when using pair-programming.	The effects of pair-programming on individual programming skill	NA:NA:NA	2018
Leland L. Beck:Alexander W. Chizhik	An experiment was conducted to study the effectiveness of the cooperative learning approach to teaching CS1. The cooperative learning exercises, which used specific roles to focus students' attention on key concepts, were designed so they could be used in a variety of educational settings. Experimental results show that the benefits of cooperative learning clearly outweighed any possible losses due to reduced lecture time. These benefits were enjoyed by both male and female students, and by students from a variety of majors. Majority and minority students performed at approximately the same overall level when using the cooperative learning approach. There are indications that the educational benefits continue when students who had a cooperative learning experience in CS1 go on to CS2.	An experimental study of cooperative learning in cs1	NA:NA	2018
Sarah Monisha Pulimood:Ursula Wolz	Supporting a workforce that can create, not simply consume, computing technology requires a shift in pedagogy toward problem solving in a gender neutral, culturally and ethnically diverse community. It requires an authentic learning environment in which students solve real problems as a collaborative community with their peers from other disciplines. We report on three pedagogical approaches, namely student selected projects in a CS course, a multidisciplinary project-based course, and courses that partner across disciplines that provide on-demand content.	Problem solving in community: a necessary shift in cs pedagogy	NA:NA	2018
Josh Tenenberg:Sally Fincher:John Impagliazzo:Daniel Joyce	This panel is directed to members of the SIGCSE community who would like to learn more about the places to publish in computing education and how to get published there. This panel brings together conference, journal, and book-series editors to share their insights as "gatekeepers" of their respective publication venues.	Publishing in computing education	NA:NA:NA:NA	2018
Andrew McGettrick:Eric Roberts:Daniel D. Garcia:Chris Stevenson	NA	Rediscovering the passion, beauty, joy and awe: making computing fun again	NA:NA:NA:NA	2018
Susan Haller:Brian Ladd:Scott Leutenegger:John Nordlinger:Jody Paul:Henry Walker:Carol Zander	In this special session we present arguments for and against a game-centric computing curriculum. To highlight the issues and ensure equal time for arguments on either side, our session is staged as a debate with three speakers on each side. Our audience is educators and educational researchers interested in the role of game development in the CS curriculum.	Games: good/evil	NA:NA:NA:NA:NA:NA:NA	2018
Ray Bareiss:Martin Griss	Carnegie Mellon's West Coast Campus offers an MS in Software Engineering, with technical and development management tracks, targeted at working software professionals in Silicon Valley. We believe the program to be unique in that it is entirely team-based and project-centered. Students learn by doing as they are coached just in time by faculty in the context of authentic projects, and they are evaluated based on what they produce. Student satisfaction is high: 92% believe that the program has given them a competitive advantage with respect to their professional peers, and their promotion and salary histories bear out this belief.	A story-centered, learn-by-doing approach to software engineering education	NA:NA	2018
Andrew Begel:Beth Simon	How do new college graduates experience their first software development jobs? In what ways are they prepared by their educational experiences, and in what ways do they struggle to be productive in their new positions? We report on a "fly-on-the-wall" observational study of eight recent college graduates in their first six months of a software development position at Microsoft Corporation. After a total of 85 hours of on-the-job observation, we report on the common abilities evidenced by new software developers including how to program, how to write design specifications, and evidence of persistence strategies for problem-solving. We also classify some of the common ways new software developers were observed getting stuck: communication, collaboration, technical, cognition, and orientation. We report on some common misconceptions of new developers which often frustrate them and hinder them in their jobs, and conclude with recommendations to align Computer Science curricula with the observed needs of new professional developers.	Struggles of new college graduates in their first software development job	NA:NA	2018
Matthew C. Jadud:Jon Simpson:Christian L. Jacobsen	Pipeline, Delta, and Black Hole are three simple patterns used in concurrent software design. We recently presented these and other patterns for parallelism at a nine-hour workshop for professional embedded systems developers. By grounding these patterns in the context of robotic control on the LEGO Mindstorms, we provided an engaging and enjoyable educational experience for our "students," and reaffirmed that small, powerful languages have a place in education for beginners and experts alike.	Patterns for programming in parallel, pedagogically	NA:NA:NA	2018
Mark A. Holliday:J. Traynham Houston:E. Matthew Jones	Traditional coverage of network programming techniques in a computer networking course addresses sockets, remote procedure call, and object-oriented remote procedure call. We propose two innovations to that coverage. The first is to emphasize the historical development of those techniques as a sequence with each technique evolving from the previous one. The second innovation is to extend the historical development and the techniques to the important current technique of web services.	From sockets and RMI to web services	NA:NA:NA	2018
Vasil Y. Hnatyshin:Andrea F. Lobo	The national importance of creating "content reflecting cutting edge developments in STEM fields" has been recognized the National Science Foundation. The National Research Council has also noted that creating engaging laboratory and classroom experiences is a challenge to effective undergraduate education in STEM disciplines. In this paper we present our endeavors to address these issues in the field of computer networks. We discuss our experiences with novel laboratory and classroom projects using OPNET and Wireshark software products in undergraduate networking courses. These laboratories help undergraduate students understand fundamental networking concepts through modeling and simulation of computing systems. We have found that their use enhances student learning and interest in the subject of computer networks.	Undergraduate data communications and networking projects using opnet and wireshark software	NA:NA	2018
W. David Laverell:Zongming Fei:James N. Griffioen	Emulabs, network testbeds on which experiments can be carried out through a web interface, are widely recognized as useful research environments. We believe that Emulabs are also excellent platforms for teaching courses in operating systems and networking. Moreover, equipment costs have fallen, and Emulab software has evolved, to the point where any school could conceivably afford their own. This raises the obvious question: "Should institutions build and operate their own Emulab?". To get a handle on this question, we describe our experiences building and operating Edulabs--Emulabs specifically designed for education--at Calvin College and the University of Kentucky. We argue that with the right technical support, owning and operating one's own Emulab is a worthwhile endeavor that has many benefits. We acknowledge, however, that in the absence of good technical support, deploying one's own Emulab can be a difficult enterprise. We also describe how we enhanced Emulab to improve its utility in an educational setting.	Isn't it time you had an emulab?	NA:NA:NA	2018
Michela Pedroni:Manuel Oriol:Bertrand Meyer:Lukas Angerer	Formally defining the knowledge units taught in a course helps instructors ensure a sound coverage of topics and provides an objective basis for comparing the content of two courses. The main issue is to list and define the course concepts, down to basic knowledge units. Ontology learning techniques can help partially automate the process by extracting information from existing materials such as slides and textbooks. The TrucStudio course planning tool, discussed in this article, provides such support and relies on Text2Onto to extract concepts from course material. We conducted experiments on two different programming courses to assess the quality of the results.	Automatic extraction of notions from course material	NA:NA:NA:NA	2018
Ken Goldman:Paul Gross:Cinda Heeren:Geoffrey Herman:Lisa Kaczmarczyk:Michael C. Loui:Craig Zilles	A Delphi process is a structured multi-step process that uses a group of experts to achieve a consensus opinion. We present the results of three Delphi processes to identify topics that are important and difficult in each of three introductory computing subjects: discrete math, programming fundamentals, and logic design. The topic rankings can be used to guide both the coverage of standardized tests of student learning (i.e., concept inventories) and can be used by instructors to identify what topics merit emphasis.	Identifying important and difficult concepts in introductory computing courses using a delphi process	NA:NA:NA:NA:NA:NA:NA	2018
Christopher W. Starr:Bill Manaris:RoxAnn H. Stalvey	Traditionally, Bloom's Taxonomy has been used for creating exams and other student assessment instruments. In this paper, we advocate its use for specifying learning outcomes in computer science prior to assessment. We have found, over a period of three years, that this facilitates programmatic assessment and related accreditation activities; it benefits instructors selecting pedagogical tools and assignments; and it enhances communication among faculty engaged in curricular development. We describe Bloom's Taxonomy, illustrate a simple process for applying it in computer science (and other disciplines), and present a case study of how it may be applied in a CS1 course. We believe this process has considerably strengthened our department's assessment program and its ability to maintain its ABET accreditation.	Bloom's taxonomy revisited: specifying assessable learning objectives in computer science	NA:NA:NA	2018
Zachary Dodds:Ran Libeskind-Hadas:Christine Alvarado:Geoff Kuenning	This paper presents a thorough evaluation of CS for Scientists, a CS 1 course designed to provide future scientists with an overview of the discipline. The course takes a breadth-first approach that leverages its students' interest and experience in science, mathematics, and engineering. In contrast to many other styles of CS 1, this course does not presume that its students will study more computer science, but it does seek to prepare them should they choose to. We summarize the past year's worth of assessments of student learning, retention, and affect -- with particular attention paid to women's voices. Where possible, we contrast these student measures with those from a traditional, imperative-first CS1 that this new course replaced. The data thus far suggest that CS for Scientists significantly improves students' understanding of CS, its applications, and practice.	Evaluating a breadth-first cs 1 for scientists	NA:NA:NA:NA	2018
Robert H. Sloan:Patrick Troy	There are often problems when students enter a course with widely different experience levels with key course topics. If the material is covered too slowly, those with greater experience get bored and lose interest. If the material is covered too quickly, those with less experience get lost and feel incompetent. This problem with incoming students of our Computer Science Major led us to create CS 0.5: an introductory Computer Science course to target those CS majors who have little or no background with programming. Our goal is to provide these students with an engaging curriculum and prepare them to keep pace in future courses with those students who enter with a stronger background. Following the lead of Mark Guzdial's work on using media computation for non-majors at Georgia Tech, we use media computation as the tool to provide this engaging curriculum. We report here on our experience to date using the CS 0.5 approach with a media computation course.	CS 0.5: a better approach to introductory computer science for majors	NA:NA	2018
Wei Jin	In this paper, we describe a scaffolding technique - pre-programming-analysis guided programming (PAGP) - developed to help students grasp basic programming concepts. Two different ways to implement the PAGP process in a classroom were developed and then compared: one for students to fill out an analysis form, and the other for students to interact with online cognitive tutors. Our results show that the PAGP process helps students learn better and faster, especially with the assistance of the online tutors.	Pre-programming analysis tutors help students learn basic programming concepts	NA	2018
Orit Hazzan:Judith Gal-Ezer:Lenore Blum	This paper presents a model program for high school computer science education. It is based on an analysis of the structure of the Israeli high school computer science curriculum considered to be one of the leading curricula worldwide. The model consists of four key elements as well as interconnections between these elements. It is proposed that such a model be considered and/or adapted when a country wishes to implement a nation-wide program for high school computer science education.	A model for high school computer science education: the four key elements that make it!	NA:NA:NA	2018
Mindy Hart:James P. Early:Dennis Brylow	This paper describes a continuing series of summer workshops hosted by Purdue University entitled "Linking Mathematics and Computer Science." Each is designed to inform and inspire high school teachers of mathematics with an interest in computer science. Originally conceived as an extension of our existing K-12 outreach, our workshop aims to provide teachers with innovative activities and ideas that link their secondary school mathematics curriculum with computer science. By reaching out to high school math teachers, we hope to in turn reach a broader base of students outside of computer science classes. By fostering interest in this broader audience, we can increase the number of students entering undergraduate computer science programs, and reach a larger segment of underrepresented populations.	A novel approach to K-12 CS education: linking mathematics and computer science	NA:NA:NA	2018
Paolo A. G. Sivilotti:Stacey A. Laugel	A common approach for introducing computer science to middle school students is to teach them a simple yet engaging programming language A different approach is to teach them some advanced topic independent of any particular language or syntax We describe a 3-hour workshop module designed to do both This module has been piloted with a group of thirty 8th grade girls. It uses the Scratch programming language to develop the advanced software engineering concepts of specifications, refinement, and composition After this module, students were enthusiastic about continuing to program in Scratch independently and also felt they learned something about computer science as a discipline.	Scratching the surface of advanced topics in software engineering: a workshop module for middle school students	NA:NA	2018
Richard E. Ladner:Tammy VanDeGrift	In this hands-on special session, attendees will learn about and use a Game of Life cellular automata framework (Java) to assist with outreach activities. Using the framework, students with no prior programming experience can create interesting behaviors within thirty minutes. The special session leaders have successfully used this approach for thirteen years in a one-week summer workshop for disabled high school students. The SIGCSE special session will include an introduction to the framework and keys to its success as an outreach activity, followed by participants solving, programming, and proposing specific problems. Attendees will be equipped to guide Game of Life outreach activities at their own outreach events.	The game of life: an outreach model for high school students with disabilities	NA:NA	2018
Ursula Wolz:John Maloney:Sarah Monisha Pulimood	NA	'scratch' your way to introductory cs	NA:NA:NA	2018
Kelvin Sung:Michael Panitz:Scott Wallace:Ruth Anderson:John Nordlinger	We have designed and implemented game-themed programming assignment modules targeted specifically for adoption in existing introductory programming classes. These assignments are self-contained, so that faculty members with no background in graphics or gaming can selectively pick and choose a subset to combine with their own assignments in existing classes. This paper begins with a survey of previous results. Based on this survey, the paper summarizes the important considerations when designing materials for elective adoption. The paper then describes our design, implementation, and assessment efforts. Our result is a road map that guides faculty members in experimenting with game-themed programming assignments by incrementally adopting/customizing suitable materials for their classes.	Game-themed programming assignments: the faculty perspective	NA:NA:NA:NA:NA	2018
Alexander Repenning:Andri Ioannidou	Game development is quickly gaining popularity in introductory programming courses. Motivational and educational aspects of game development are hard to balance and often sacrifice principled educational goals. We are employing the notion of scalable game design as an approach to broaden participation by shifting the pedagogical focus from specific programming to more general design comprehension. Scalable game design combines the Flow psychological model, the FIT competency framework and the AgentSheets rapid game prototyping environment. The scalable aspect of our approach has allowed us to teach game design in a broad variety of contexts with students ranging from elementary school to CS graduate students, with projects ranging from simple Frogger-like to sophisticated Sims-like games, and with diverse cultures from the USA, Europe and Asia.	Broadening participation through scalable game design	NA:NA	2018
Daniel Frost	Ucigame (pronounced OO-see-GAH-me) is a Java package that supports the programming of 2D sprite-based computer games. Designed for novice programmers, it enables students in an introductory class to write computer games that have animated sprites, music and sound effects, and event-driven keyboard and mouse handling. Ucigame has also been used successfully in a senior-level class for experienced programmers.	Ucigame, a java library for games	NA	2018
Mark W. Bailey:Clark L. Coleman:Jack W. Davidson	Computer science faculty must attract and retain students by offering innovative courses that spark student interest, yet still teach core, computer science concepts. These efforts have become particularly important as computer science enrollments have declined, thus increasing concerns for attracting and retaining students. We describe an innovative course that leverages students' interest in computer security issues to attract and retain technically-oriented students. Our initial vision was to offer a course covering computer viruses - a subject that even a novice computer user has some familiarity. To avoid the controversy associated with teaching students how to write malicious software, we focused the course on techniques for defending against viruses, so we named the course Defense Against the Dark Arts. In teaching the course, we have found the subject matter provides an engaging way to introduce and reinforce many important computer science concepts that other courses often cover, most particularly, the traditional compiler course. We have taught the course three times at two separate institutions, with a third school soon to follow. The course has been well received by students - completely filling each semester with enrollments that are four to five times greater than the compiler course. Furthermore, student surveys indicate that the course raises students' awareness of computer security while introducing students to important program translation and analysis concepts.	Defense against the dark arts	NA:NA:NA	2018
Blair Taylor:Shiva Azadegan	In response to the national computer security crisis, colleges and universities have developed security tracks and specialized security courses. While security tracks are effective at producing security experts, they only reach a small subset of students and occur after students have established a foundation of coding techniques. Most undergraduate computing students learn programming and design with little regard to security issues. To complement our security track and reach all computing students at the beginning of their studies, we piloted security integration across sections of CS0 and CS1, using a series of security laboratory modules. Preliminary results show increased security knowledge in the security-targeted sections. This paper describes the details and results of this pilot, which serves as a model for further integration throughout the CS curriculum.	Moving beyond security tracks: integrating security in cs0 and cs1	NA:NA	2018
Alasdair McAndrew	Cryptography has become an important topic in undergraduate curricula in mathematics and computer science, not just for its intrinsic interest---``about the most fun you can have with mathematics''\cite{ferg04, but for its current standing as the basis for almost all computer security. From wireless networking to secure email to password protection, cryptographic methods are used to secure information, to protect users, and to protect data. At Victoria University, cryptography has been taught as part of a mathematics and computer science degree for several years. The students all have had at least a year of tertiary mathematics, and some exposure to a computer algebra system (Maple). However, the cost of Maple, and the current licensing agreement, means that students are unable to experiment with the software away from the computer laboratories at the University. For this reason we have decided to investigate the use of open-source computer algebra systems Maxima and Axiom. Although not as full-featured and powerful as the commercial systems Maple and Mathematica, we show they are in fact admirably suited for a subject such as cryptography. In some ways Maxima and Axiom even surpass Maple and Mathematica. Student response to the introduction of these systems has been very positive.	Teaching cryptography with open-source software	NA	2018
Steven Huss-Lederman:Donald Chinn:James Skrentny	In this special session, participants will learn how to use Peer-Led Team Learning (PLTL) effectively in computer science courses. This technique has been successful in reducing drop rates and increasing satisfaction among students. Therefore, it holds promise as a way to boost sagging computer science enrollments in general, and to increase participation of under-represented groups in particular. The goal of the session is to give participants practical information and hands-on experience.	Serious fun: peer-led team learning in CS	NA:NA:NA	2018
Kate Sanders:Jonas Boustedt:Anna Eckerdal:Robert McCartney:Jan Erik Moström:Lynda Thomas:Carol Zander	In this paper, we present the results of an experiment in which we sought to elicit students' understanding of object-oriented (OO) concepts using concept maps. Our analysis confirmed earlier research indicating that students do not have a firm grasp on the distinction between "class" and "instance." Unlike earlier research, we found that our students generally connect classes with both data and behavior. Students rarely included any mention of the hardware/software context of programs, their users, or their real-world domains. Students do mention inheritance, but not encapsulation or abstraction. And the picture they draw of OO is a static one: we found nothing that could be construed as referring to interaction among objects in a program. We then discuss the implications for teaching introductory OO programming.	Student understanding of object-oriented programming as expressed in concept maps	NA:NA:NA:NA:NA:NA:NA	2018
Sarnath Ramnath:Brahma Dathan	Object-Oriented Analysis and Design has established itself as an integral and critically vital part of the software development process. In this paper, we describe an integrated approach to teaching this subject so that it covers vital components of this vast field: analysis, object-oriented design principles such as the Liskov Substitution Principle, the design process, which shows how and where the rules are applied, modeling, design and architectural patterns, language features, and refactoring. The course has evolved over the past 10 years to one that revolves around three major case studies. This evolution has resulted in a course that covers all important aspects of OOAD in a manner that emphasizes their inter-relatedness and hence their relevance to overall design process. Feedback suggests that this approach has improved students' understanding of the OOAD concepts.	Evolving an integrated curriculum for object-oriented analysis and design	NA:NA	2018
Linxiao Ma:John D. Ferguson:Marc Roper:Isla Ross:Murray Wood	Recent research has found that many novice programmers often hold non-viable mental models of basic programming concepts such as assignment and object reference, which can limit their potential to develop programming skills. This paper proposes a constructivist-based teaching model that integrates cognitive conflict and program visualisation with the aim of supporting novice programmers in the formulation of appropriate mental models. The results of an initial empirical study produced three findings of note. Firstly, a teaching model based on either visualisation alone or cognitive conflict integrated with visualisation can help students develop viable models of value assignment. Secondly, there was evidence to suggest that cognitive conflict integrated with visualisation outperformed visualisation alone in helping students develop viable models of the more challenging concept of object reference assignment. And thirdly, there was evidence of an improvement in students' understanding of value and object reference assignment using the teaching model based on visualisation and cognitive conflict.	Using cognitive conflict and visualisation to improve mental models held by novice programmers	NA:NA:NA:NA:NA	2018
Michael Buckley:John Nordlinger:Devika Subramanian	In this paper, we introduce socially relevant computing as a new way to reinvigorate interest in computer science. Socially relevant computing centers on the use of computation to solve problems that students are most passionate about. It draws on both the solipsistic and altruistic side of the current generation of students. It presents computer science as a cutting-edge technological discipline that empowers them to solve problems of personal interest (socially relevant with a little s), as well as problems that are important to society at large (socially relevant with a capital s). We believe that socially relevant computing offers a vision of computer science that has the potential to improve the quantity, quality and diversity of students in our discipline. We describe preliminary results from two on-going curricular experiments at SUNY Buffalo and at Rice University that implement our vision of socially relevant computing.	Socially relevant computing	NA:NA:NA	2018
Christopher H. Brooks	This paper describes Community Connections, an ongoing service-learning project at the University of San Francisco aimed at bridging the digital divide. We discuss Community Connections' work both in San Francisco and in Peru, the advantages and learning outcomes of incorporating service-learning into a traditional computer science curriculum, outline some of the pitfalls and challenges in implementing this program, and provide advice for implementing technology-oriented service-learning programs at other institutions based on our experiences.	Community connections: lessons learned developing and maintaining a computer science service-learning program	NA	2018
Leigh Ann Sudol	This paper describes an experiment involving incorporating reading assignments into an introductory programming class at the university level. Results indicate that assignments of this type help students make connections between the concepts they are studying, and computer science in general, with their everyday lives.	Forging connections between life and class using reading assignments: a case study	NA	2018
Joanna Goode	In this paper, I describe features of computer science programs which have successfully attracted underrepresented students to study CS. Drawing from my own teaching experiences, research, and teacher education work; I provide strategies which have diversified K-12 CS courses. The paper also points out how many of these features rely on committed partnerships between schools, school districts, universities, and the CS industry.	Increasing diversity in k-12 computer science: strategies from the field	NA	2018
John H. Maloney:Kylie Peppler:Yasmin Kafai:Mitchel Resnick:Natalie Rusk	This paper describes Scratch, a visual, block-based programming language designed to facilitate media manipulation for novice programmers. We report on the Scratch programming experiences of urban youth ages 8-18 at a Computer Clubhouse 'an after school center' over an 18-month period. Our analyses of 536 Scratch projects collected during this time documents the learning of key programming concepts even in the absence of instructional interventions or experienced mentors. We discuss the motivations of urban youth who choose to program in Scratch rather than using one of the many other software packages available to them and the implications for introducing programming at after school settings in underserved communities.	Programming by choice: urban youth learning programming with scratch	NA:NA:NA:NA:NA	2018
Jim Owens:Jeanna Matthews	This paper describes CyberCivics, a novel approach to computer science outreach that integrates hands-on computing experiences with the study of contemporary social and political issues. We provide details of one such curriculum, focused on electronic voting, that we used with a high school AP Government course in Spring 2007. We describe our experience with this curriculum and how it enabled us to reach a larger, more diverse and more academically prepared group of students than prior outreach efforts targeted directly at computing courses. We also suggest a number of alternative approaches to outreach based on the CyberCivics idea.	Cybercivics: a novel approach to reaching k-12 students with the social relevance of computer science	NA:NA	2018
Lenore Blum:Thomas J. Cortina:Ed Lazowska:Joe Wise	NA	The expansion of CS4HS: an outreach program for high school teachers	NA:NA:NA:NA	2018
Edward F. Gehringer:Lillian Cassel:Katherine Deibel:William Joel	NA	Wikis: collaborative learning for cs education	NA:NA:NA:NA	2018
Jens Ma he:Amy Apon:Thomas Feilhauer:Barry Wilkinson	In 2003, MIT Technology Review listed Grid computing as one of 'Ten Emerging Technologies That Will Change the World' [5]. Five years later, is Grid computing ready for the undergraduate classroom? In this panel, a group of educators share their experiences in teaching Grid computing over the past several years and in various settings, and discuss how the subject materials should be developed for the future. Key points under discussion include the place in the undergraduate curriculum, the role of programming exercises, bottom-up versus top-down approaches, and the necessary Grid computing platform. This panel will be of interest to those who teach the subject, and those who wish to introduce Grid computing into their programs. It will also interest those who do not want to offer a full Grid computing course but may wish to introduce Grid computing into existing distributed systems, networking, or parallel programming courses.	Grid computing at the undergraduate level: can we do it?	NA:NA:NA:NA	2018
Nathan R. Sturtevant:H. James Hoover:Jonathan Schaeffer:Sean Gouglas:Michael H. Bowling:Finnegan Southey:Matthew Bouchard:Ghassan Zabaneh	Computer games are a multi-billion dollar industry and have become an important part of our private and social lives. It is only natural, then, that the technology used to create games should become part of a computing science curriculum. However, game development is more than a massive programming endeavor. Today's games are largely about generating content within multidisciplinary teams. CMPUT 250 is a new computing science course at the University of Alberta that emphasizes creating games in multidisciplinary teams. This paper describes our experiences with the course, emphasizing the issues of multidisciplinary interactions: teaching, teamwork, and evaluation.	Multidisciplinary students and instructors: a second-year games course	NA:NA:NA:NA:NA:NA:NA:NA	2018
Carol Spradling:Jody Strauch:Craig Warner	In this paper, we describe a new interdisciplinary Bachelor of Science degree in Interactive Digital Media at Northwest Missouri State University, developed and maintained by three departments, Art, Computer Science/Information Systems and Mass Communication. The majors share a common core of courses taught by the three departments with each having its own concentration of Visual Imaging, Computer Science Programming and New Media, respectively. This paper describes the process utilized to develop the major, the curriculum, some observations and the process to maintain the major.	An interdisciplinary major emphasizing multimedia	NA:NA:NA	2018
Christopher D. Hundhausen:N Hari Narayanan:Martha E. Crosby	While the demand for college graduates with computing skills continues to rise, such skills no longer equate to mere programming skills. Modern day computing jobs demand design, communication, and collaborative work skills as well. Since traditional instructional methods in computing education tend to focus on programming skills, we believe that a fundamental rethinking of computing education is in order. We are exploring a new "studio-based" pedagogy that actively engages undergraduate students in collaborative, design-oriented learning. Adapted from architectural education, the studio-based instructional model emphasizes learning activities in which students (a) construct personalized solutions to assigned computing problems, and (b) present solutions to their instructors and peers for feedback and discussion within the context of "design crits." We describe and motivate the studio-based approach, review previous efforts to apply it to computer science education, and propose an agenda for multi-institutional research into the design and impact of studio-based instructional models. We invite educators to participate in a community of research and practice to advance studio-based learning in computing education.	Exploring studio-based instructional models for computing education	NA:NA:NA	2018
J. McGrath Cohoon:Zhen Wu:Luo Luo	The research reported here confirms and deepens our understanding of factors that affect women's confidence in their ability to complete a computer science or computer engineering (CSE) doctoral degree. Analysis of data from a longitudinal study of women participating in the Computing Research Association's Graduate Cohort for Women identifies the conditions or experiences that women perceive as influential. More importantly, we found that women who are not confident in their ability to complete their programs are about four times more likely to think about leaving CSE than those who begin confidently.	Will they stay or will they go?	NA:NA:NA	2018
Maureen Biggers:Anne Brauer:Tuba Yilmaz	Students who develop a strong interest in another field can hardly be fair target for retention efforts. There are others, however, who might do very well in this field but who leave computer science because of misunderstandings about and a negative experience in this academic major. Retention literature suggests and provides numerous examples of initiatives that improve student retention. To determine how best to impact student retention in your computer science department, a comprehensive understanding of the student experience of your major is essential. Not only is it important to know why students leave your major, but an understanding of why they stay can be useful in developing high impact initiatives. The current study involves a comparative examination of students who graduated from the computer science (CS) major at Georgia Institute of Technology in Atlanta, Georgia (Stayers) with students who chose to leave the major (Leavers). Specifically, perceptions and experiences of computer science as a field in general and the climate of the major were studied. Comparative data collected provided insights into reasons why they entered into the major, about belief of adequate preparation and confidence going into the major, definitions of CS and other related factors. Results were analyzed to identify potential target areas and concrete implementation strategies are suggested for improved retention in the computer science major at this institution.	Student perceptions of computer science: a retention study comparing graduating seniors with cs leavers	NA:NA:NA	2018
Antonio M. Lopez, Jr.:Kun Zhang:Frederick G. Lopez	Worldwide, there is substantial evidence that cultural contexts may either support or hinder the number of women versus men participating in computing. There is also evidence that certain computing disciplines have more appeal to women than others. Hence research on any computing gender gap should be specific to a culture and a computing discipline. In the United States (US) a popular belief is that Computer Science (CS) has a decidedly 'masculine culture'. This paper reports on research that investigates this perception, comparing CS undergraduates to undergraduates in non-computing disciplines (NCD). The data were collected in a nationwide purposeful sampling of US citizens attending Historically Black Colleges and Universities (HBCUs) and Predominantly White Institutions (PWIs) with an ethnic compositional focus on African Americans and Caucasians. The paper describes a survey scale developed in the US to characterize a person's gender role as feminine, masculine, or androgynous. The data were analyzed using statistical and data mining techniques. Surprisingly, CS students were found to be more androgynous than masculine.	Cultural representations of gender among u. s. computer science undergraduates: statistical and data mining results	NA:NA:NA	2018
Tanya L. Crenshaw:Erin Wolf Chambers:Heather Metcalf	Computer science is seeing a decline in enrollment at all levels of education. One key strategy for reversing this decline is to improve methods of student retention. This paper, based on a 10-month case study at the Department of Computer Science at the University of Illinois at Urbana-Champaign, examines two aspects of student retention at both the graduate and undergraduate levels: community identity and community relationships. Our data shows that students feel isolated from each other, faculty, and members of the greater computer science community. Given our findings, we highlight existing programs and propose new programs which improve student-community interactions. While the lessons learned might not apply at every institution, they constitute a valuable case study for improving conditions for students at large research universities.	A case study of retention practices at the University of Illinois at Urbana-Champaign	NA:NA:NA	2018
Beth Simon:Krista Davis:William G. Griswold:Michael Kelly:Roshni Malani	Classroom note taking tends to be a private activity, hiding a wealth of knowledge in both content and method. With the advent of the web, whose technology and culture seemingly invites everyone to share everything, we are prompted to ask how making note taking a public activity -- noteblogging -- might advance learning. What does a blog about a computer science classroom look like? What supports are needed to enable noteblogging as a form of auxiliary instruction? In this paper we overview the design and use of noteblogging as part of the Ubiquitous Presenter digital classroom system. With NoteBlogger, students with Tablet PCs take handwritten notes digitally on top of the instructor's slides, and their notes are instantly reviewable by other students in class using a web browser. We examine the impact of noteblogging on a CS1 course through interviews with bloggers (to reveal their motivation and understand their choice of content) and blog watchers (to learn when and why they watch). We also analyze the blogs in this CS1 course to identify their educational contribution. We find that noteblogging enables a unique classroom participation model that specifically engages more advanced students. Blog content spans many levels of intellectual engagement, which can support a range of learners in CS1 as well as perhaps model for them various levels of reflection.	Noteblogging: taking note taking public	NA:NA:NA:NA:NA	2018
Sam Kamin:Michael Hines:Chad Peiper:Boris Capitanu	We describe a new system for building Tablet PC-based classroom software. The system, called SLICE, is built for extensibility, using a unique "explicit state" model. Applications developed thus far include presentation, classroom interaction, shared code review, and exam grading. The paper presents an overview of the system and describes these four applications. It then explains the extensibility model, showing how users can add new features.	A system for developing tablet pc applications for education	NA:NA:NA:NA	2018
Charlie Wiseman:Ken Wong:Tilman Wolf:Sergey Gorinsky	Virtual laboratories are a potential replacement for standard laboratory facilities. Use of these virtual resources can reduce cost and maintenance overheads for teaching institutions while still ensuring that students have access to real equipment. Previous work indicates that students respond well to such environments, but one important operational aspect has been overlooked. In this work, we consider instructor overhead by comparing the amount of work required to teach courses with and without the use of a virtual laboratory. In particular, we examine two graduate computer networking courses, each taught with the standard software-only approach and then taught later with the Open Network Laboratory. Our data show that the effort required by the instructor to use a virtual laboratory is not much more than in a software-only environment, and that the increased interaction between student and instructor can be beneficial as the student questions are primarily focused on fundamental networking concepts.	Operational experience with a virtual networking laboratory	NA:NA:NA:NA	2018
Jorge Barbosa:Rodrigo Hahn:Solon Rabello:Débora Barbosa	The increasing use of mobile devices and the dissemination of wireless networks have stimulated mobile and ubiquitous computing research. In this context, education is being considered one of the main application areas. New pedagogical opportunities are created through the use of location systems to track learners, and through context awareness support. This paper proposes a model to explore these opportunities using location information and context management as learning support tools. This model, called LOCAL, was conceived for small scale learning environments, but can be applied in large-scale as well. The model was implemented and the initial results show its utility to assist the teaching and learning processes.	Local: a model geared towards ubiquitous learning	NA:NA:NA:NA	2018
Joe Hummel:Carl Alphonce:Joe Bergin:Michael Caspersen:Stuart Hansen:James Heliotis:Michael Kölling	NA	Nifty objects for CS0 and CS1	NA:NA:NA:NA:NA:NA:NA	2018
Stephanie Ann Ludi:Thomas Reichlmayr	Despite advances in assistive technology, relatively few visually impaired students participate in university-level computing courses. Significant factors in this under representation include lack of relevant precollege preparation, lack of role models, access to resources, and the highly visual nature of modern computing. This paper describes the development of inclusive activities and materials for use in a summer workshop for precollege students with visual impairments. All activities utilized commercial technologies in the areas of robotics and programming using Lego Mindstorms NXT. The workshop activities are designed to provide a foundation in computing that encourages students to pursue computing in high school and beyond. In addition to activity design, initial results and lessons learned from the summer workshop will be presented.	Developing inclusive outreach activities for students with visual impairments	NA:NA	2018
Mary Elaine Califf:Mary M. Goodwin:Jake Brownell	In this paper, we describe some of the challenges of teaching computer science to a visually impaired student along with suggested solutions for these challenges. We include perspectives of both professors and a severely visually impaired student.	Helping him see: guiding a visually impaired student through the computer science curriculum	NA:NA:NA	2018
Jeffrey P. Bigham:Maxwell B. Aller:Jeremy T. Brudvik:Jessica O. Leung:Lindsay A. Yazzolino:Richard E. Ladner	Blind students are an underrepresented group in computer science. In this paper, we describe our experience preparing and leading the computer science track at the National Federation of the Blind Youth Slam. As part of this workshop, fifteen blind high school students created and personalized instant messaging chatbots, a project designed to be completely accessible to blind students. Chatbots enable students to infuse their own personalities into a socially-oriented program that incorporates ideas from artificial intelligence, natural language processing, and web services. We first outline the chatbots project and curriculum, which has wide appeal for all students, and then offer general design principles used to create it that can help ensure the accessibility of future projects. Students created their chatbots using a real programming language and were guided by both blind and sighted mentors. By programming from the start in a supportive environment, our students will gain the confidence to persevere in computer science in the future.	Inspiring blind high school students to pursue computer science with instant messaging chatbots	NA:NA:NA:NA:NA:NA	2018
Katherine Deibel	Inclusive education is the practice of making sure that all students of all abilities have positive learning experiences. The study presented in this paper explores the current state of inclusive practices in computing education by presenting four case studies of students with disabilities taking their first computing courses. Their experiences share many common themes that reveal insights into their college experiences and connect with current theories as to how to achieve inclusive education. New technologies, such as podcasting, for promoting inclusion are also suggested.	Course experiences of computing students with disabilities: four case studies	NA	2018
Carol Taylor:Rose Shumba	The topic of this proposed special session is security education with an emphasis on increasing the number of schools and programs that teach it. We will review the current status of security education as it is taught within the CS discipline including funding, curriculum standards and government programs. We will also address misconceptions people may have regarding teaching security and how these views hinder the development of programs and curriculum. Another area we cover which we feel is critical to increasing participation in security education is resources for teaching security including existing curriculum, expert assistance from Centers of Excellence schools and other resources. The format of the session will consist of both presentation periods with at least half the session devoted to participant question and answer. Session participants will be encouraged to share experiences and common concerns to the benefit of everyone attending.	Security education: a roadmap to the future	NA:NA	2018
Imad Rahal	The new interdisciplinary field of Data Mining emerged in the early 1990s as a response to the profusion of digital data generated in numerous fields such as biology, chemistry, astronomy, advertising, banking and finance, retail market, stock market, and the WWW. In this paper, I describe an undergraduate course in Data Mining offered at the College of Saint Benedict and Saint John's University in Spring of 2007 as a CSCI-317-upper-division "Topics in Computer Science"- course, entitled "Data Intelligence." One of the main objectives of the course was to engage students in experimental computing research through a number of carefully planned research activities resulting in better understanding of the course contents and deeper insights into the challenges faced by the data mining community.	Undergraduate research experiences in data mining	NA	2018
Teresa Dahlberg:Tiffany Barnes:Audrey Rorrer:Eve Powell:Lauren Cairco	Research experiences for undergraduates are considered an effective means for increasing student retention and encouraging undergraduate students to continue on to graduate school. However, managing a cohort of undergraduate researchers, with varying skill levels, can be daunting for faculty advisors. We have developed a program to engage students in research and outreach in visualization, virtual reality, networked robotics, and interactive games. Our program immerses students into the life of a lab, employing a situated learning approach that includes tiered mentoring and collaboration to enable students at all levels to contribute to research. Students work in research teams comprised of other undergraduates, graduate students and faculty, and participate in professional development and social gatherings within the larger cohort. Results from our first two years indicate this approach is manageable and effective for increasing students' ability and desire to conduct research.	Improving retention and graduate recruitment through immersive research experiences for undergraduates	NA:NA:NA:NA:NA	2018
Nick Feamster:Alexander Gray	This paper describes a course we have developed for preparing new Ph.D. students in computer science for a career in research. The course is intended to teach the skills needed for research and independent work, prepare students psychologically and socially for years lying before them, and help them find a good Ph.D. topic by providing principles and examples. In this course, we emphasize and encourage impact through cross-disciplinary research and broader societal outreach. To our knowledge, the course represents a first-of-its-kind systematic introduction to a graduate research career. This paper describes our high-level goals for this curricular initiative, the structure of the course (including lecture components and assignments), and the challenges we faced in developing this course. As we continue to develop this course, which is now in its second year, we hope it will serve as a model "introduction of Ph.D. research" course for other computer science departments.	Can great research be taught?: independent research with cross-disciplinary thinking and broader impact	NA:NA	2018
Raymond Lister:Ilona Box	This paper identifies the most commonly cited conferences, journals and books among the 1398 citations made in the 122 publications of the SIGCSE 2007 proceedings. The SIGCSE 2007 authors cited a very large array of conferences, journals and books, but the majority are only cited within a single paper. There are only a very small set of journals and conferences cited frequently. Most books cited are concerned with technical information or are textbooks. Only 2% of books are concerned with computer science education and 23% with education in general. The picture that emerges from this citation analysis is that the SIGCSE community does not have a substantial core set of educational literature. Also, the epistemology of the SIGCSE community is primarily objectivist, with a focus on content, rather than a constructivist, student-centered focus on learning.	A citation analysis of the sigcse 2007 proceedings	NA:NA	2018
Watts Humphrey:Robert Musson:Rafael Salazar	NA	Preparing students for industry's software engineering needs	NA:NA:NA	2018
Ali Erkan:Diyan Gochev	We outline a Data Structures project that visualizes the operation of depth first search (DFS) and breadth first search (BFS). We use color to illustrate how these two techniques differ as they traverse a search space. We present additional exercises that outline how students can further explore the underlying data structures, algorithmic concepts, and efficiency issues. We also provide a limited amount of student assessment to gauge the effectiveness of our approach.	An image background detection project for a visual exploration of DFS and BFS	NA:NA	2018
K. R. Subramanian:T. Cassen	We present the design and development of a Visual Learning Engine, a tool that can form the basis for interactive development of visually rich teaching and learning modules across multiple disciplines. The engine has three key features that makes it powerful and cross-disciplinary, (1) it is based on a finite state machine model, that supports concepts presented in any defined sequence, (2) instructional modules are designed and generated interactively using graphical interface widgets, facilitating non-programmers to use the system, and (3) ability to simultaneously present concepts and their visual representation that allows for a more intuitive and exploratory learning experience. We demonstrate a prototype of the learning engine by testing it on examples from Computer Science(sorting)algorithms, recursion) and Electrical Engineering (signal manipulations).	A cross-domain visual learning engine for interactive generation of instructional materials	NA:NA	2018
Brett Allenstein:Andrew Yost:Paul Wagner:Joline Morrison	The underlying processes that enable database query execution are fundamental to understanding database management systems. However, these processes are complex and can be difficult to explain and illustrate. To address this problem, we have developed a Java-based query simulation system that enables students to visualize the steps involved in processing DML queries. We performed a field experiment to evaluate the system, and the results suggest that the system improves student comprehension of the query execution process.	A query simulation system to illustrate database query execution	NA:NA:NA:NA	2018
Andrew B. Williams:David S. Touretzky:Ethan J. Tira-Thompson:LaVonne Manning:Chutima Boonthum:Clement S. Allen	A successful collaboration between Spelman College and Carnegie Mellon University led to an NSF-funded Broadening Participation in Computing project to set up robotics education laboratories and introduce undergraduate instruction in cognitive robotics at three other Historically Black Colleges and Universities (HBCUs). We give a brief overview of cognitive robotics and the Tekkotsu software architecture, and describe our experiences teaching computer science students with no previous robotics exposure to program sophisticated mobile robots.	Introducing an experimental cognitive robotics curriculum at historically black colleges and universities	NA:NA:NA:NA:NA:NA	2018
Janice Pearce:Mario Nakazawa	Across the US, plummeting CS enrollments and disappointing student retention have caused serious concern in recent years. Yet, in the Spring of 2007, the Berea College faculty unanimously adopted a CIS major in response to the rise in enrollment in CS0 and retention into CS1. This paper details how using a funnel approach to attract students into the discipline via multiple CS0-level courses resulted in the exception to the trend.	The funnel that grew our cis major in the cs desert	NA:NA	2018
Sami Khuri	In this paper, we describe the bioinformatics track we created to better prepare students for health, medical and life science professions. Our program was motivated by the fact that bioinformatics training is in high demand. Many universities have responded to this demand by creating majors in bioinformatics, while others by creating minors in bioinformatics. Our response was less extreme as we opted for a computer science track in bioinformatics which we describe in this article.	A bioinformatics track in computer science	NA	2018
Gloria Childress Townsend:Lecia Barker:Suzanne Menzel:J. McGrath Cohoon	This paper highlights several viewpoints concerning a small regional conference for women in computing, which is modeled after the successful and well-known Grace Hopper Celebration of Women in Computing. The viewpoints include rationale for the conference, descriptions of the celebration that provide a snapshot which captures the ease of organizing a similar event at other regional sites, additional sources for finding complete information (including a detailed how-to manual) and an account of the assessment of two recent regional celebrations performed by senior researchers at the National Center of Women and Information Technology (NCWIT).	Grace hopper visits the neighborhood	NA:NA:NA:NA	2018
Rita Manco Powell	This paper describes a study of undergraduate women's retention in the first-year of the computer science major at the University of Pennsylvania for the purpose of identifying the underlying issues responsible for attrition. The subsequent steps taken by the faculty to improve women's retention is also discussed.	Improving the persistence of first-year undergraduate women in computer science	NA	2018
Amruth N. Kumar	We examined whether using problem-solving software tutors in Computer Science I can help improve the self-confidence of female students. We analyzed the data collected by five software tutors in spring 2006. We found that 1) the self-confidence of female Computer Science I students before using the software tutors was in many cases lower than that of male students, as has been stated in prior literature; 2) Using problem-solving software tutors improved the self-confidence of female students to be on par with that of male students when female students started with lower prior self-confidence. Since researchers have suggested that self-confidence is one of the factors contributing to the shrinking pipeline, problem-solving software tutors can be used to improve the retention of female students in Computer Science.	The effect of using problem-solving software tutors on the self-confidence of female students	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Scott D. Anderson:Caroline M. Eastman:Daniel D. Garcia:Paul V. Gestwicki:Margaret S. Menzin	We often learn of successful pedagogical experiments, but we seldom hear of the the ones that failed. For this special session we solicited submissions from the SIGCSE membership, selected the best from among these, and will have presentations at the session by the selected authors. Our contributions describe pedagogical approaches that seemed to be good ideas but turned out as failures. Contributors will describe their pedagogical experiment, the rationale for the experiment, evidence of failure, and lessons learned.	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA	2018
Lillian N. Cassel:Michael Caspersen:Gordon Davies:Renee McCauley:Andrew McGettrick:Art Pyster:Robert Sloan	NA	Curriculum update from the ACM education board: CS2008 and a report on masters degrees	NA:NA:NA:NA:NA:NA:NA	2018
David Janzen:Hossein Saiedian	Coercing new programmers to adopt disciplined development practices such as thorough unit testing is a challenging endeavor. Test-driven development (TDD) has been proposed as a solution to improve both software design and testing. Test-driven learning (TDL) has been proposed as a pedagogical approach for teaching TDD without imposing significant additional instruction time. This research evaluates the effects of students using a test-first (TDD) versus test-last approach in early programming courses, and considers the use of TDL on a limited basis in CS1 and CS2. Software testing, programmer productivity, programmer performance, and programmer opinions are compared between test-first and test-last programming groups. Results from this research indicate that a test-first approach can increase student testing and programmer performance, but that early programmers are very reluctant to adopt a test-first approach, even after having positive experiences using TDD. Further, this research demonstrates that TDL can be applied in CS1/2, but suggests that a more pervasive implementation of TDL may be necessary to motivate and establish disciplined testing practice among early programmers.	Test-driven learning in early programming courses	NA:NA	2018
Matthew Thornton:Stephen H. Edwards:Roy P. Tan:Manuel A. Pérez-Quiñones	Tools like JUnit and its relatives are making software testing reachable even for introductory students. At the same time, however, many introductory computer sciences courses use graphical interfaces as an "attention grabber" for students and as a metaphor for teaching object-oriented programming. Unfortunately, developing software tests for programs that have significant graphical user interfaces is beyond the abilities of typical students (and, for that matter, many educators). This paper describes a framework for combining readily available tools to create an infrastructure for writing tests for Java programs that have graphical user interfaces. These tests are level-appropriate for introductory students and fit in with current approaches in computer science education that incorporate testing in programming assignments. An analysis of data collected during actual student use of the framework in a CS1 course is presented.	Supporting student-written tests of gui programs	NA:NA:NA:NA	2018
Jacques Philippe Sauvé:Osório Lopes Abath Neto	In this paper, we report our experience in teaching software development to Computer Science undergraduate students using acceptance test-driven development (ATDD) and the acceptance testing tool EasyAccept. A typical software design course in a Computer Science curriculum has been modified to include project assignments with executable analysis, which gives students more focus on meeting requirements, boosts confidence in the code being written and results in increased software correctness. We evaluate the benefits of the approach and give suggestions on how to cope with its limitations.	Teaching software development with ATDD and easyaccept	NA:NA	2018
Richard E. Ladner:Dan Comden	NA	Computer science for everyone: making your computing classes and departments accessible	NA:NA	2018
