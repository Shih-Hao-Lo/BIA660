Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: Opening Keynote	NA:NA	2018
Freeman A. Hrabowski	Rapid and dramatic demographic and technological changes require our nation's schools, colleges, and universities to work with agility in preparing students - particularly those from diverse backgrounds - for careers in science, technology, engineering, and math (STEM) fields, including computer science. Exploring the interplay of technology, education, and inclusion over the past 50 years, Dr. Hrabowski examines what this means for our future work in higher education. Computing education provides a critically important case. As the sector evolves rapidly, many well-paid jobs go unfilled and we must explore ways to draw on talent wherever it is found. Emphasizing themes from his TED talk on student success, Dr. Hrabowski focuses our attention on the importance of high expectations and hard work, building community among students, faculty engagement with students, and rigorous assessment of what works. He assesses the way innovative approaches - including course re-design, active and experiential learning, research, and partnerships with companies and agencies - promote student success, inclusive excellence, and achievement for all students both in STEM generally and computer science in particular.	Pursuing the Dream: A 50-Year Perspective on American Society, Technology, and Inclusion in Computing	NA	2018
Yingjun Cao	NA	Session details: Paper Session: Data	NA	2018
Debzani Deb:Muztaba Fuad:Keith Irwin	Big data and cloud computing collectively offer a paradigm shift in the way businesses are now acquiring, using and managing information technology. This creates the need for every CS student to be equipped with foundational knowledge in this collective paradigm and to possess some hands-on experience in deploying and managing big data applications in the cloud. We argue that, for substantial coverage of big data and cloud computing concepts and skills, the relevant topics need to be integrated into multiple core courses across the undergraduate CS curriculum rather than creating additional standalone core or elective courses and performing a major overhaul of the curriculum. Our approach to including these topics is to develop autonomous learning modules for specific core courses in which their coverage might find an appropriate context. In this paper, three such modules are discussed and our classroom experiences during these interventions are documented. So far, we have achieved reasonable success in attaining student learning outcomes, enhanced engagement, and interests. Our objective is to share our experience with the academics who aim at incorporating similar pedagogy and to receive feedback about our approach.	A Module-based Approach to Teaching Big data and Cloud Computing Topics at CS Undergraduate Level	NA:NA:NA	2018
Jessen Havill	In 2016, we launched an interdisciplinary, undergraduate Data Analytics major that extends the definition of "interdisciplinary" beyond computer science, mathematics, and statistics to the natural and social sciences, humanities, and fine arts. Our program was conceived, and continues to be administered, as an independent academic unit by a Committee of faculty representing ten disciplines. Students majoring in Data Analytics complete four or more mathematics and computer science courses, four project-oriented Data Analytics courses, three to four courses in one of seven applied domains, and a required summer internship. Data Analytics courses are taught by both dedicated Data Analytics faculty and other faculty from the Committee. Partnerships with campus offices, alumni, businesses, and nonprofits have enhanced both coursework and internship opportunities. The major's popularity has exceeded our expectations, and has succeeded in attracting students with a variety of academic interests, many of whom would not have otherwise pursued a computational or quantitative major.	Embracing the Liberal Arts in an Interdisciplinary Data Analytics Program	NA	2018
Thomas C. Bressoud:Gavin Thomas	The need for understanding data systems, from the structure and constraints of data models to the client-server mechanisms for acquiring and curating data, includes not just computer science students, but extends to data science students and students in a wide range of interdisciplinary programs. In this paper we describe the design and implementation of a second course in computer science, whose data-centric focus emphasizes structural models of data and the skills involved in acquiring and transforming data into forms amenable for analysis. We argue that, from a user-not-designer perspective, these topics need not wait for an upper-level database course, but to achieve sufficient depth, an introductory computer science course is appropriate and sufficient as a prerequisite.	A Novel Course in Data Systems with Minimal Prerequisites	NA:NA	2018
James Vanderhyde	NA	Session details: Paper Session: Collaboration and Communication	NA	2018
L.D. Miller:Leen-Kiat Soh:Markeya S. Peteranetz	Computer science (CS) courses are taught with increasing emphasis on group work and with non-programming exercises facilitating peer-based learning, computational thinking, and problem solving. However, relatively little work has been done to investigate the interaction of group work and non-programming exercises because collaborative, non-programming work is usually open-ended and requires analysis of unstructured, natural language responses. In this paper, we consider collaborative, non-programming work consisting of online wiki text from 236 groups in nine different CS1 and higher-level courses at a large Midwestern university. Our investigation uses analysis tools with natural language processing (NLP) and statistical analysis components. First, NLP uses IBM Watson Personality Insights to automatically convert students' collaborative wiki text into a Big Five model. This model is useful as a quality metric on group work since Big Five factors such as Openness and Conscientiousness are strongly related to both academic performance and learning. Then, statistical analysis generates regression models on group size and each Big Five trait that make up the factors. Our results show that increasing group size has a significant impact on collaborative, non-programming work in CS1 courses, but not for such work in higher-level courses. Furthermore, increasing group size can have either a positive or negative impact on the Big Five traits. These findings imply the feasibility of using such tools to automatically assess the quality of non-programming group exercises and offer evidence for effective group sizes.	Investigating the Impact of Group Size on Non-Programming Exercises in CS Education Courses	NA:NA:NA	2018
Janet Davis:Samuel A. Rebelsky	For the past four years, we have taught a reimagined software design course with typical and atypical components. Projects form the core of the course: Students work in teams of 4-6 people to develop non-mission-critical software for local non-profits, building their engagement with the community and helping them understand the broader impact of their work. These projects require multiple semesters to complete. Since students typically enroll for the course for one semester, this model gives students the novel experience of legacy software. We also provide each team with an alumni mentor who helps them navigate not only technical problems but also the challenges of working with a real-world, non-technical client. These aspects of the course also develop our students' soft skills. They learn to work with a team, to communicate with non-technical clients, to work with remote collaborators (or mentors), and to think ahead to those who will take on the project in the next semester. As we tell our students, these skills are often as crucial as their technical skills. In this paper, we report on the design of the course and describe some of the challenges associated with this model (e.g., projects that inadvertently reveal information, clients who switch management or expectations, and projects that become obsolete) and provide suggestions for those who might want to adopt a similar approach.	Developing Soft and Technical Skills Through Multi-Semester, Remotely Mentored, Community-Service Projects	NA:NA	2018
Lisa L. Lacher:Cydnee Biehl	Working effectively as part of a team is an incredibly important skill to learn. Most jobs require interacting and working with others and the outcome of a team project relies on the processes of the group members. Naturally, a positive team experience yields better results than a negative experience. The biggest indicators of a positive team experience are communication and collaboration, which are both soft skills associated with the social sensitivity of the group members. Previous research has found that social sensitivity influences the amount of communication and the ultimate performance of traditional face-to-face teams. However, virtual teamwork is becoming more common. Does social sensitivity have a similar influence in virtual teams? Virtual teams have different interactions than face-to-face teams because they use communication technologies, which can hinder certain human cognitive processes. Our current research focuses on the influence of social sensitivity on the amount of communication and the performance of students who work as a virtual team using text-based communication in Discord. We find that teams with higher average levels of social sensitivity communicate more and perform better, even if they work in a virtual environment using only text messaging.	Does Social Sensitivity Impact Virtual Teams?	NA:NA	2018
Eric Aaron	NA	Session details: Paper Session: Enrollment & Retention	NA	2018
Daniel T. Fokum:Daniel N. Coore:Eyton Ferguson:Gunjan Mansingh:Carl Beckford	As computing enrollments have grown in the last decade there have been anecdotal claims from faculty that the discipline has attracted weaker students. To the best of our knowledge the only paper that has studied, and debunked, this claim has been based on data from an exclusive North American university. In this paper we examine data from six courses drawn taught over a 3 year period at a public university in a developing country. We find that in the case of the CS1 course, the distribution of student grades has fluctuated over this period. In addition, courses in object-oriented programming, networking, algorithms and discrete mathematics have also shown variation in student grades. We provide discussion as to why the grades in the courses show variation. We also explain why our findings differ from previous claims of stability in student grades.	Student Performance in Computing Courses in the face of Growing Enrollments	NA:NA:NA:NA:NA	2018
Beth A. Quinn:Wendy M. DuBow:David Sul	Effective teaching requires understanding where students are coming from. Retaining students who have been historically underrepresented in computing requires the same, especially in introductory courses. This paper draws from surveys of students in introductory computing courses at seven geographically dispersed community colleges. We use K-means cluster analysis to differentiate students based on their responses to questions measuring constructs related to student success in computing courses and persistence. The resulting five clusters were compared on outcome variables, including final grades, intent to persist in computing, and gender and race/ethnicity. We focus on community colleges because they are uniquely well-positioned to broaden participation in computing; however, the implications extend beyond the community college context. We conclude by discussing methodological and pedagogical implications, including how findings can challenge assumptions and stereotypes about introductory computing students.	Understanding Who Enrolls in Introductory Computing Courses at Community Colleges	NA:NA:NA	2018
Heather M. Wright:N. Burçin Tamer	This research examines the relationship between undergraduate computing students' participation in technical conferences and psychological predictors of academic persistence. Studies have shown experiential educational activities, like conferences, encourage students' persistence in STEM; this is especially important for students underrepresented in the field, who are more likely than their well-represented peers to leave their degree programs. In recent years, academic literature has pointed to anecdotal evidence that conference participation for students early in their undergraduate education relates to students' persistence in STEM pathways. Using national survey data, we examine the relationship between conference participation and first and second year undergraduate students' persistence in computer science pathways. This paper presents results from a cross-sectional analysis and a two time-point analysis of national survey data collected from undergraduate students. Overall, we found that first and second year computing majors who attended a technical computing conference reported higher levels of belonging to their field and confidence to persist in their degree program than those who did not attend. We also found that conference participants' levels of belonging and self-confidence is higher than non-participants over time, even after controlling for initial levels at Time 1. Our analyses also showed that conference participation was associated with closing the gap in levels of belonging and self-confidence between students who are underrepresented in computing and those who are well-represented. Empirical results from this paper support anecdotal evidence that conference participation for students early in their undergraduate education may help retain students, and particularly underrepresented students, in computing majors in the long-term.	Can Sending First and Second Year Computing Students to Technical Conferences Help Retention?	NA:NA	2018
Charles Dierbach	NA	Session details: Paper Session: Tools 1	NA	2018
Michael Kölling:Neil C. C. Brown:Hamza Hamza:Davin McCall	Block-based programming languages and environments have several benefits for introductory programming courses, compared to more traditional text-based languages. In particular, blocks remove the burden of learning language syntax and dealing with syntax-related errors. Many blocks-based environments are tightly focused on developing graphical games, stories and simulations, while the more general programming environments are typically text-based. In this tool paper, we describe the incorporation of a Stride editor within the BlueJ programming environment. Stride is a frame-based programming language, intended to combine the best of blocks and text programming, usable both as a stepping stone towards text-based languages and as a comprehensive language in its own right. The incorporation of Stride into BlueJ brings some aspects of block programming into a general purpose educational environment.	Stride in BlueJ -- Computing for All in an Educational IDE	NA:NA:NA:NA	2018
Jacob Bailey:Craig Zilles	We describe uAssign, an assignment system for teaching and assessing command line terminal skills. uAssign allows instructors to create auto-graded terminal assignments that require students to perform a high-level action that can be completed in many ways. Assignments can be randomized so that students can't re-use old solutions. uAssign is implemented via an in-browser terminal emulator that uses WebSockets to connect to a Docker container. Performance testing and its use in a large-enrollment lecture course show that it is efficient enough to handle a large number of concurrent users. A survey of students shows significant improvement in terminal skill confidence after using uAssign and that students have a high level of satisfaction with uAssign assignments.	uAssign: Scalable Interactive Activities for Teaching the Unix Terminal	NA:NA	2018
Christopher Berns:Grace Chin:Joel Savitz:Jason Kiesling:Fred Martin	MYR is a browser-based, educational platform built to spark student interest in computer science by allowing users to write code that generates three-dimensional, animated scenes in virtual reality. The interface consists of two primary components: (1) an integrated editor, which leverages the MYR API and the A-Frame entity-component-system, and (2) a real-time renderer that displays the corresponding scene. The scenes, which vary in complexity, are viewable using virtual reality headsets, smartphones, and any device that supports a web browser. By providing access to the specific domain of virtual reality to students, the system aims to make computer science concepts tangible for novice programmers. The MYR development team conducted pilot tests with middle school students in order to collect feedback from this audience. The larger goal of the project is to develop MYR as a research tool to gain insight into computing students' success, motivation, and confidence in learning computing.	MYR: A Web-Based Platform for Teaching Coding Using VR	NA:NA:NA:NA:NA	2018
Paul Denny	NA	Session details: Paper Session: Practice & Problems	NA	2018
Antti Leinonen:Henrik Nygren:Nea Pirttinen:Arto Hellas:Juho Leinonen	When learning programming, students learn the syntax of a programming language, the semantics underlying the syntax, and practice applying the language in solving programming problems. Research has suggested that simply the syntax may be hard to learn. In this article, we study difficulty of learning the syntax of a programming language. We have constructed a tool that provides students code that they write character-by-character. When writing, the tool automatically highlights each character in code that is incorrectly typed, and through the highlight-based feedback directs students into writing correct syntax. We conducted a randomized controlled trial in an introductory programming course organized in Java. One half of the population had the tool in the course material immediately before programming exercises where the practiced syntax was used, while the other half of the course population did not have the tool, thus approaching the exercises in a traditional way. Our results imply that isolated syntax writing practice may not be a meaningful addition to the arsenal used for teaching programming, at least when the programming course utilizes a large set of small programming exercises. We encourage researchers to replicate our work in contexts where syntax seems to be an issue.	Exploring the Applicability of Simple Syntax Writing Practice for Learning Programming	NA:NA:NA:NA:NA	2018
Anderson Thomas:Troy Stopera:Pablo Frank-Bolton:Rahul Simha	Recent work [Erikson et al 2017 and Zavala et al 2018] has shown that mental program-execution exercises, in the form of Parson's puzzles or program-tracing, are effective in improving student performance in intro CS courses. This form of practice is promising because its low cost of creation and short duration (for the student) can promote the significant practice needed for learning. The goal of this paper is to enable wider use of such exercises through large-scale automated generation of short, multiple-choice mental execution questions. The challenge in automation is to algorithmically generate effective distractors (plausible, but incorrect choices), and to generate questions of varying levels of difficulty and whose difficulty level can be set by the instructor. In this paper, we propose a language-generalizable approach for automatically generating a practically unlimited number of such exercises, each constructed to a designated level of difficulty and incorporating the core programming-in-the-small themes: assignment, conditionals, loops, and arrays. The stochastic tree-based generation algorithm and a subsequent simulation of execution also enable generating effective distractors since all possible execution paths are readily available in the tree at the time of generation, and the distractors, therefore, correspond to reasonable (but ultimately incorrect) paths of execution. Furthermore, the approach is easily transferable to other languages with little effort. The generated questions are delivered through a mobile app that can be customized by the instructor to vary the questions generated and to introduce interleaving to take advantage of the spacing effect. Preliminary student feedback on the experience has been positive.	Stochastic Tree-Based Generation of Program-Tracing Practice Questions	NA:NA:NA:NA	2018
Rui Zhi:Thomas W. Price:Samiha Marwan:Alexandra Milliken:Tiffany Barnes:Min Chi	Research in a variety of domains has shown that viewing worked examples (WEs) can be a more efficient way to learn than solving equivalent problems. We designed a Peer Code Helper system to display WEs, along with scaffolded self-explanation prompts, in a block-based, novice programming environment called \snap. We evaluated our system during a high school summer camp with 22 students. Participants completed three programming problems with access to WEs on either the first or second problem. We found that WEs did not significantly impact students' learning, but may have impacted students' intrinsic cognitive load, suggesting that our WEs with scaffolded prompts may be an inherently different learning task. Our results show that WEs saved students time on initial tasks compared to writing code, but some of the time saved was lost in subsequent programming tasks. Overall, students with WEs completed more tasks within a fixed time period, but not significantly more. WEs may improve students' learning efficiency when programming, but these effects are nuanced and merit further study.	Exploring the Impact of Worked Examples in a Novice Programming Environment	NA:NA:NA:NA:NA:NA	2018
Razvan Alexandru Mezei	NA	Session details: Paper Session: Process & Performance	NA	2018
Ben Stephenson	This experience report describes a faculty member's effort to create educational videos that support students' learning in a programming intensive CS1 class, along with an evaluation of their use by students. The videos that were created were supplementary in nature, providing students with an optional opportunity to go back and re-watch live coding demonstrations performed in class. The production process used to create the videos is described, along with several lessons learned during this undertaking. Student usage data is reported, along with survey results collected from 164 students. Survey results show that a strong majority of students who watched the videos believed that the videos helped them learn the material in the course. Several risks that should be considered before creating custom programming video content for a course are also discussed.	Coding Demonstration Videos for CS1	NA	2018
Soohyun Nam Liao:Daniel Zingaro:Christine Alvarado:William G. Griswold:Leo Porter	A number of recent studies in computer science education have explored the value of various data sources for early prediction of students' overall course performance. These data sources include responses to clicker questions, prerequisite knowledge, instrumented student IDEs, quizzes, and assignments. However, these data sources are often examined in isolation or in a single course. Which data sources are most valuable, and does course context matter? To answer these questions, this study collected student grades on prerequisite courses, Peer Instruction clicker responses, online quizzes, and assignments, from five courses (over 1000 students) across the CS curriculum at two institutions. A trend emerges suggesting that for upper-division courses, prerequisite grades are most predictive; for introductory programming courses, where no prerequisite grades were available, clicker responses were the most predictive. In concert, prerequisites and clicker responses generally provide highly accurate predictions early in the term, with assignments and online quizzes sometimes providing incremental improvements. Implications of these results for both researchers and practitioners are discussed.	Exploring the Value of Different Data Sources for Predicting Student Performance in Multiple CS Courses	NA:NA:NA:NA:NA	2018
Lisa Yan:Nick McKeown:Chris Piech	In the ideal CS1 classroom, we should understand programming process---how student code evolves over time. However, for graphics-based programming assignments, the task of understanding and grading final solutions, let alone thousands of intermediate steps, is incredibly labor-intensive. In this work, we present a challenge, a dataset, and a promising first solution to autonomously use image output to identify functional, intermediate stages of a student solution. By using computer vision techniques to associate visual output of intermediate student code with functional progress, we supplement a lot of the teacher labor associated with understanding graphics-based, open-ended assignments. We hope our publication of the dataset used in our case study sparks discussion in the community on how to analyze programs with visual program output.	The PyramidSnapshot Challenge: Understanding Student Process from Visual Output of Programs	NA:NA:NA	2018
Karen Jin	NA	Session details: Paper Session: Autograders	NA	2018
Margaret Ellis:Clifford A. Shaffer:Stephen H. Edwards	We share approaches for coordinating the use of many online educational tools within a CS2 course, including an eTextbook, automated grading system, programming practice website, diagramming tool, and debugger. These work with other commonly used tools such as a response system, forum, version control system, and our learning management system. We describe a number of approaches to deal with the potential negative effects of adopting so many tools. To improve student success we scaffold tool use by staging the addition of tools and by introducing individual tools in phases, we test tool assignments before student use, and we adapt tool use based on student feedback and performance. We streamline course management by consulting mentors who have used the tools before, starting small with room to grow, and choosing tools that simplify student account and grade management across multiple tools.	Approaches for Coordinating eTextbooks, Online Programming Practice, Automated Grading, and More into One Course	NA:NA:NA	2018
Evan Maicus:Matthew Peveler:Stacy Patterson:Barbara Cutler	We present a container-based system to automatically run and evaluate networked applications that implement distributed algorithms. Our implementation of this design leverages lightweight, networked Docker containers to provide students with fast, accurate, and helpful feedback about the correctness of their submitted code. We provide a simple, easy-to-use interface for instructors to specify networks, deploy and run instances of student and instructor code, and to log and collect statistics concerning node connection types and message content. Instructors further have the ability to control network features such as message delay, drop, and reorder. Running student programs can be interfaced with via stream-controlled standard input or through additional containers running custom instructor software. Student program behavior can be automatically evaluated by analyzing console or file output and instructor-specified rules regarding network communications. Program behavior, including logs of all messages passed within the system, can optionally be displayed to the student to aid in development and debugging. We evaluate the utility of this design and implementation for managing the submission and robust and secure testing of programming projects in a large enrollment theory of distributed systems course. This research has been implemented as an extension to Submitty, an open source, language-agnostic course management platform with automated testing and automated grading of student programming assignments. Submitty supports all levels of courses, from introductory to advanced special topics, and includes features for manual grading by TAs, version control, team submission, discussion forums, and plagiarism detection.	Autograding Distributed Algorithms in Networked Containers	NA:NA:NA:NA	2018
Matthew Peveler:Evan Maicus:Barbara Cutler	With the continued growth of enrollment within computer science courses, it has become an increasing necessity to utilize autograding systems. These systems have historically graded assignments through either a jailed sandbox environment or within a virtual machine (VM). For a VM, each submission is given its own instantiation of a guest operating system and virtual hardware that runs atop the host system, preventing anything that runs within the VM communicating with any other VM or the host. However, using these VMs are costly in terms of system resources, making it less than ideal for running student submissions given reasonable, limited resources. Jailed sandboxes, on the other hand, run on the host itself, thus taking up minimal resources, and utilize a security model that restricts the process to specified directories on the system. However, due to running on the host machine, the approach suffers as new courses utilize autograding and bring their own set of potentially conflicting requirements for programming languages and system packages. Over the past several years, \em containers have seen growing popularity in usage within the software engineering industry as well as within autograding systems. Containers provide similar benefits of isolation as a VM while maintaining similar resource cost to running within a jailed sandbox environment. We present the implementation of both a jailed sandbox and container-based autograder, compare the running time and memory usage of the two implementations, and discuss the overall resource usage.	Comparing Jailed Sandboxes vs Containers Within an Autograding System	NA:NA:NA	2018
Michelle Friend	NA	Session details: Paper Session: Capstones & Projects	NA	2018
Steven Swanson	We describe our experience teaching an intensive capstone course in which pairs of students build the hardware and software for a remote-controller quad-rotor aircraft (i.e., a quadcopter or "drone'') from scratch in one 10-week quarter. The course covers printed circuit board (PCB) design and assembly, basic control theory and sensor fusion, and embedded systems programming. To reduce the workload on course staff and provide higher-quality feedback on student designs, we have implemented an automated PCB design checking tool/autograder. We describe the course content in detail, identify the challenges it presents to students and course staff, and propose changes to further increase student success and improve the scalability of the course.	Trial by Flyer: Building Quadcopters From Scratch in a Ten-Week Capstone Course	NA	2018
Yekaterina Kharitonova:Yi Luo:Jeho Park	Students need a wide variety of skills before they can successfully engage in real-world projects with paying customers. Some of these skills, such as the "soft skills" of communicating with a non-technical customer and working in a larger team to collaboratively develop a project, are generally not present in Computer Science courses. In this paper, we discuss our experience teaching these skills and explain the structure of our redesigned Software Development course and how it aligns with the Capstone experience. The main novelty of our approach is the specific implementation of the rotating project manager role and the introduction of the final portfolio reflection. We believe that the concepts we introduced during our redesign can be useful to any educator wanting to include collaborative project-based work in their courses. To enable faculty to apply and enhance these concepts, the resources that we used in this course, which include activities, templates, guidelines, rubrics, and questionnaires, are available as an open source project at https://team-repo.github.io/.	Redesigning a Software Development Course as a Preparation for a Capstone: An Experience Report	NA:NA:NA	2018
Stefan C. Christov:Mark E. Hoffman	The skills to effectively manage software development teams and to productively interact with a project manager are important in the computing professions. Teaching these skills in a traditional academic setting, however, is challenging. To support the experiential learning of these skills, we established a collaboration between two computing courses, a sophomore-level one and a senior-level one, where the seniors serve as managers of teams of sophomores on a semester-long project. This paper describes the collaboration and evaluates it in terms of student learning and experience based on three iterations of that collaboration. The associated course materials and evaluation instruments are made publicly available.	Experiential Learning of Software Project Management and Software Development via Course Collaboration	NA:NA	2018
Heather Bort:David P. Bunde:Zack Butler:Christopher Lynnly Hovey:Cynthia Taylor	Many great teaching techniques are presented every year at SIGCSE and other CS education conferences. Unfortunately, most of them achieve very limited adoption, with few instructors incorporating these ideas into their classrooms. There is significant literature on how to encourage instructors to adopt educational innovations in other STEM fields, but the CS education community has made only limited strides in this area. This session will feature an interactive discussion of some of the barriers that prevent the adoption of good ideas, what solutions are available, and a brief presentation of the results of an ITiCSE working group on this topic. Attendees will leave the session better equipped to promote the adoption of educational innovations, either their own or ones that they have decided to champion.	Propagating Educational Innovations	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:David DeLiema:Deborah A. Fields:Gary Lewandowski:Colleen Lewis	Computational thinking has become the calling card for re-introducing coding into schools. While much attention has focused on how students engage in designing systems, applications, and other computational artifacts as a measure of success for computational thinking, far fewer efforts have focused on what goes into remediating problems in designing systems and interactions because learners invariably make mistakes that need fixing-or debugging. In this panel, we examine the often overlooked practice of debugging that presents significant learning challenges (and opportunities) to students in completing assignments and instructional challenges to teachers in helping students to succeed in their classrooms. The panel participants will review what we know and don't know about debugging, discuss ways to conceptualize and study debugging, and present instructional approaches for helping teachers and students to engage productively in debugging situations.	Rethinking Debugging as Productive Failure for CS Education	NA:NA:NA:NA:NA	2018
Helen H. Hu:Chris Mayfield:Clifton Kussmaul	Process skills (also known as professional skills, lifelong learning skills, workplace skills, transferable skills, or soft skills) are an important aspect of computer science education. Learning objectives for computer science courses often include the development of process skills like critical thinking, problem solving, and teamwork, but many instructors struggle with how to encourage and measure the development of these skills. This special session will introduce detailed rubrics for assessing process skills in a manner that will model POGIL (Process Oriented Guided Inquiry Learning) facilitation techniques. Presenters will demonstrate how to use one set of these rubrics in an active learning classroom (i.e., POGIL) to provide students with feedback. The other set of rubrics assess process skills on student work and can be used with any classroom. Attendees will leave the session with a better understanding of key process skills in computer science, how to assess student interactions and student work for these skills, and how a POGIL classroom facilitates the development of critical thinking, information processing, and teamwork. This special session will appeal to any K-12 teacher or college instructor interested in developing students' process skills in a computer science class.	Special Session: Process Skills in Computer Science	NA:NA:NA	2018
Rajendra K. Raj:Vijay Anand:David Gibson:Siddharth Kaza:Andrew Phillips	The Curricular Guidelines for Post-Secondary Degree Programs in Cybersecurity (CSEC 2017) released by the Joint Task Force of the ACM, IEEE Computer Society, AIS and IFIP have begun to define the academic field of cybersecurity. Increasing numbers of institutions are now offering full-fledged undergraduate cybersecurity degree programs. However, as the CSEC 2017 guidelines do not define what constitutes a standalone undergraduate cybersecurity degree, the computing community needs to agree on parameters of what such a degree ought to be. To this end, ABET has created flexible accreditation criteria for cybersecurity programs guided extensively by CSEC 2017 and community input. These criteria were used to conduct pilot accreditation visits of four distinct cybersecurity programs in 2017-18. This panel discusses benefits, challenges, and costs of cybersecurity program accreditation. The panelists, who represent the first four ABET-accredited cybersecurity programs, will discuss major curricular features of their programs, their motivation for participating in the pilot accreditation, the effort in preparing for accreditation, and the benefits anticipated both for their programs and the larger computing community due to program accreditation	Cybersecurity Program Accreditation: Benefits and Challenges	NA:NA:NA:NA:NA	2018
Austin Cory Bart:Clifford A. Shaffer	The SIGCSE-Members listserv has been archiving posts by the Computer Science Education community for the past 22 years. This paper characterizes the post collection, in order to better understand the nature of the community from a quantitative perspective. We apply a number of email mining techniques, including a topical analysis through N-grams. Threads, posters, and posts are characterized in terms of duration and temporally. We also demonstrate how emails from the listserv can be successfully classified using machine learning algorithms, and report on an unsuccessful attempt to predict thread popularity. All of the scripts we used to collect, process, and analyze the data are freely available in the hopes that other researchers will replicate, refine, and extend our results.	What Have We Talked About?	NA:NA	2018
Melinda McDaniel:John Cigas:Briana B. Morrison:Henry Walker	How has CS education changed since SIGCSE first began in 1968? This panel of presenters, with 135 years of teaching instruction between them, will remind some attendees of what used to be and educate newer members on what life was like pre-internet. Topics to be discussed include changes in content, presentation medium, equipment and environment, students and audience, and pedagogy. Audience members will be engaged through peer instruction questions during and between topic discussions and may use their cell phones or laptops to respond to questions. This panel will allow our community to acknowledge the diversity and experience in our organization and celebrate our heritage. We believe old-timers who wish to reminisce and young, new instructors who are interested in a historical aspect will be interested in the session.	CS Education Then and Now: Recollections and Reflections	NA:NA:NA:NA	2018
Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: First Timer's Lunch Keynote & 2019 SIGCSE Award for Lifetime Service to the Computer Science Education Community	NA:NA	2018
Gloria Childress Townsend	SIGCSE addresses gender issues in computing year after year. At DePauw University, we learned from SIGCSE's lessons - and those taught by ACM's Council on Women in Computing - and recently awarded 47% of our computer science undergraduate degrees to women. This talk provides a rapid-fire countdown of ten of our most effective strategies that created our 47% class.	A Top-Ten List for 50-50	NA	2018
James H. Davenport	NA	Session details: Paper Session: Databases	NA	2018
Nada Basit:Abdeltawab Hendawi:Joseph Chen:Alexander Sun	We present a web application system where users can learn about and practice SQL injection attacks. Our system is designed for students in a university level database or computer security class, and is aimed towards students familiar with SQL but with little experience in web security. Our platform currently contains 12 levels, each of which demonstrates a SQL vulnerability that the user must exploit. For each level, we explain the goal of the challenge, and also provide detailed solutions. Our system provides advantages over other methods of teaching SQL injection because it is hands-on, the challenges provide a greater scope of vulnerability coverage, and is easily extensible, allowing instructors to add their own SQL injection problems for their students.	A Learning Platform for SQL Injection	NA:NA:NA:NA	2018
Cynthia Taylor:Saheel Sakharkar	In this position paper, we look at the representation of SQL injection within undergraduate database textbooks, and argue that both discussion of security issues and security of example code must be improved. SQL injection is a common database exploit which takes advantage of programs that incorrectly incorporate user input into SQL statements. Teaching students how to write parameterized SQL statements is key to preventing this wide-spread attack. We look at the current editions of seven textbooks used at the top 50 US CS programs, and analyze their coverage of SQL injection, use of parameterized queries, and correctness of examples. We find a wide variety in the amount of coverage given to the topic, from none at all to in-depth coverage of defenses. Additionally, we find cases of SQL injectable code given as examples of how to correctly write queries in two of seven textbooks.	');DROP TABLE textbooks;--: An Argument for SQL Injection Coverage in Database Textbooks	NA:NA	2018
Toni Taipalus:Piia Perälä	In the process of learning a new computer language, writing erroneous statements is part of the learning experience. However, some errors persist throughout the query writing process and are never corrected. Structured Query Language (SQL) consists of a number of different concepts such as expressions, joins, grouping and ordering, all of which by nature invite different possible errors in the query writing process. Furthermore, some of these errors are relatively easy for a student to fix when compared to others. Using a data set from three student cohorts with the total of 744 students, we set out to explore which types of errors are persistent, i.e., more likely to be left uncorrected by the students. Additionally, based on the results, we contemplate which types of errors different query concepts seem to invite. The results show that syntax and semantic errors are less likely to persist than logical errors and complications. We expect that the results will help us understand which kind of errors students struggle with, and e.g., help teachers generate or choose more appropriate data for students to use when learning SQL.	What to Expect and What to Focus on in SQL Query Teaching	NA:NA	2018
Suzanne J. Matthews	NA	Session details: Paper Session: Software Engineering	NA	2018
Jorge Melegati:Rafael Chanin:Xiaofeng Wang:Afonso Sales:Rafael Prikladnicki	The need of skills other than technical from software developers is becoming evident. The DevOps movement is an example of that applied to operational tasks. Startup development methodologies focus on business activities in innovative organizations. Several universities offer courses based on these methodologies to software engineering students, mainly to improve their creativity, problem solving, and business skills. This paper investigates how software engineering students learned startup development methodologies and discusses what are the challenges and benefits in their learning process. We conducted a multi-method study in three different universities. The data was collected in two phases and analyzed using thematic analysis. Our study reveals that students realized the importance of collaboration with other courses and the importance of user involvement in development. However, students tend to over-simplify concepts, trying to adapt them to what they are familiar with. The results indicate the necessity of business education for technical students and directions for improvements.	Perceived Benefits and Challenges of Learning Startup Methodologies for Software Engineering Students	NA:NA:NA:NA:NA	2018
Stacey Watson:Heather Richter Lipford	Educators are challenged to provide computer science students enough skills-based practice within the confines of a course. Yet it is also difficult to motivate students to spend additional time for further practice outside of course requirements. We are investigating games and gamification as methods for motivating students to engage in additional practice. In this paper, we report on the study of a fantasy-themed serious game to teach Ruby programming skills. We examine how well it motivated students to complete additional levels of the game than was assigned for course credit in an undergraduate Software Engineering course. Of the 185 student participants, 42.78% completed one or more optional game levels. These students spent more than twice as much time playing than their counterparts who only completed the mandatory game levels.	Motivating Students Beyond Course Requirements with a Serious Game	NA:NA	2018
Stan Kurkovsky:Stephanie Ludi:Linda Clark	Case studies are one of the best active learning approaches for teaching software engineering in general and requirements engineering in particular. They offer an effective approach to understanding a system or a phenomenon that are too large or too difficult to represent in a lab setting. As a tangible manipulative, LEGO works well to support designing hands-on case studies that mix studying software engineering concepts with the elements of team building and playful creativity. In our project, we study the role that LEGO has in engaging students in software engineering through a set of activities that leverage the case study and play aspects. This paper presents our design approach for requirements engineering activities, as well as current results from classroom testing with a focus on student engagement with the subject matter.	Active Learning with LEGO for Software Requirements	NA:NA:NA	2018
Ahmed Abukmail	NA	Session details: Paper Session: Advanced Topics	NA	2018
Nicholas Lytle:Mark Floryan:Tiffany Barnes	Program Visualizations (PVs) have been used as educational tools to allow students to visually inspect the runtime behavior of their code. However, many of these systems act as low-level visual debuggers not high-level abstractions of program behavior. Additionally, evaluations of these systems tend to focus more on student engagement or opinion in using the system and not on artifacts produced using the system. This paper discusses the effectiveness of a PV developed to aide students in an undergraduate Artificial Intelligence class on a pathfinding homework assignment. Students in 4 semesters of the course were tasked to develop pathfinding algorithms for an agent to navigate worlds in cases of both certain and uncertain world information. Students in 2 semesters of the course were given access to a PV that allowed them to see a visual representation of their agent navigating the world in either information condition. The final agents developed by these students were compared with those developed by students who never received the PV. Comparisons were made on the performance of these agents in both cases of uncertain and certain world information on several test worlds. Student written reports for the Experimental condition were also analyzed. The results showed significant differences in the performance of the algorithms developed in both certain and uncertain world information. Student reflections on using the PV within the written reports provide insight into how the PV informed the design and development of their submission.	Effects of a Pathfinding Program Visualization on Algorithm Development	NA:NA:NA	2018
Jean-François Lalande:Valérie Viet Triem Tong:Pierre Graux:Guillaume Hiet:Wojciech Mazurczyk:Habiba Chaoui:Pascal Berthomé	At present, computer science studies generally offer courses addressing mobile development and they use mobile technologies for illustrating theoretical concepts such as operating system, design patterns, and compilation because Android and iOS use a large variety of technologies for developing applications. Teaching courses on security is also becoming an important concern for academics, and the use of mobile platforms (such as Android) as supporting material is becoming a reasonable option. In this paper, we intend to bridge a gap in the literature by reversing this paradigm: Android is not only an opportunity to learn security concepts but requires strong pedagogical efforts for covering all the aspects of mobile security. Thus, we propose teaching Android mobile security through a two-dimensional approach. The first dimension addresses the cognitive process of the Bloom taxonomy, and the second dimension addresses the technical layers of the architecture of the Android operating system. We describe a set of comprehensive security laboratory courses covering various concepts, ranging from the application development perspective to a deep investigation of the Android Open Source Project and its interaction with the Linux kernel. We evaluated this approach, and our results verify that the designed security labs impart the required knowledge to the students.	Teaching Android Mobile Security	NA:NA:NA:NA:NA:NA:NA	2018
Amit Shesh	This paper reports an experience of offering an introductory computer graphics course in two languages, Java and C++, in the same section. This was done to target a more diverse audience of students coming from different majors and concentrations. Students chose between these languages and could switch at any time during the course. All materials related to lectures, code examples and assignments were provided in both languages. Technical support was provided for both languages throughout the course. In order to streamline this effort programming environments and supporting tools were chosen and standardized for both languages. Student experience was monitored throughout the semester using survey instruments. The experience involved significant planning, overhead and expected and unexpected issues throughout the semester. Although this experience deals with a computer graphics course, we believe other courses, especially higher-level electives, can be made multi-lingual to cater to students with different backgrounds.	Allowing and Fully Supporting Multiple Programming Languages in a Computer Graphics Course: An Experience	NA	2018
Barry Fagin	NA	Session details: Paper Session: Feedback	NA	2018
Alan de Oliveira Santana:Eduardo Aranha	Nowadays, researchers are looking for ways to adapt education to include technology and more engaging methods. For computer science courses, the use of problem-based learning, virtual tutors, learning style personalization and game programming are possible ways to achieve this goal. In this context, this work proposes and evaluates an approach to generate different kinds of virtual tutors (with various levels of interaction) for problem-based game programming classes. The system was evaluated in an experiment where two types of virtual tutors were proposed and generated considering two virtual game programming classes. Results showed that the use of virtual tutors promoted efficient learning and that the availability of different kinds of tutors can optimize individual engagement.	An Approach to Generate Virtual Tutors for Game Programming Classes	NA:NA	2018
Lisa Yan:Annie Hu:Chris Piech	In large undergraduate computer science classrooms, student learning on assignments is often gauged only by the work on their final solution, not by their programming process. As a consequence, teachers are unable to give detailed feedback on how students implement programming methodology, and novice students often lack a metacognitive understanding of how they learn. We introduce Pensieve as a drag-and-drop, open-source tool that organizes snapshots of student code as they progress through an assignment. The tool is designed to encourage sit-down conversations between student and teacher about the programming process. The easy visualization of code evolution over time facilitates the discussion of intermediate work and progress towards learning goals, both of which would otherwise be unapparent from a single final submission. This paper discusses the pedagogical foundations and technical details of Pensieve and describes results from a particular 207-student classroom deployment, suggesting that the tool has meaningful impacts on education for both the student and the teacher.	Pensieve: Feedback on Coding Process for Novices	NA:NA:NA	2018
Bob Edmison:Stephen H. Edwards	Automated grading systems provide feedback to students in a variety of ways, but usually focus on identifying incorrect program behaviors. Such systems provide notices of test case failures or runtime errors, but without debugging skills, students often become frustrated when they don't know where to start. They know their code has defects, but finding the problem may be beyond their experience, especially for beginners. An additional concern is balancing the need to provide enough direction to be useful, without giving the student so much direction that you effectively give them the answer. This paper presents our experience using heat maps to visually guide student attention to parts of their code that are most likely to contain problems. These visualizations are generated using existing tools that capture execution traces from instructor-written tests to identify which portions of the code are executed during tests that pass, and which portions are executed during tests that fail. Superimposing execution footprints allows statistical identification of locations in the student's code that are most likely to contain faults. This paper describes the results of using this feedback approach to help guide student attention with heat map visualizations over two semesters of CS1 involving over 700 students. Based on this experience, we analyze the utility of the heat maps, describe student perceptions of their helpfulness, and describe the unexpected challenges arising from students attempts to understand and apply this style of feedback. We conclude with concrete solutions proposed to improve how guiding feedback is presented to students.	Experiences Using Heat Maps to Help Students Find Their Bugs: Problems and Solutions	NA:NA	2018
Brian Railing	NA	Session details: Paper Session: Active Learning	NA	2018
Tyler Greer:Qiang Hao:Mengguo Jing:Bradley Barnes	This replication study aims at both quantifying the effects of active learning classrooms in introductory programming courses (CS1) and overcoming some design and methodological limits of prior studies on this topic. 156 students enrolled in three different sections of the same CS1 participated in this study. The three sections differed from each other either in terms of learning pedagogies (conventional lecture vs. peer instruction) or physical learning environments (lecture hall vs. active learning classroom). This study did not replicate the findings of prior studies on this topic. Instead, this study found that when learning pedagogies were controlled, learning environments did not have significant influences on student performance. On the other hand, learning pedagogies were found to have significant influences on student performance. When peer instruction is conducted other than conventional lecturing, students tended to have significantly better performance. Such findings highlight the importance of active learning in computing education, and the feasibility of conducting active learning in CS1 despite of physical environment constraints. Additionally, such findings emphasize the necessity of replication studies on the topic of active learning environments, and invite debates on the investment decisions in active learning classrooms.	On the Effects of Active Learning Environments in Computing Education	NA:NA:NA:NA	2018
Yeajin Ham:Brandon Myers	The computer organization course must help students acquire difficult conceptual knowledge and design skills, and improve their teamwork skills for subsequent project courses. Prior research supports that cooperative learning, in which students work together to achieve common goals, may address these challenges. We studied whether increasing the amount of guided inquiry activities and the cooperative support for it (teams and reflection) in an intermediate computer science course would improve achievement and engagement. The intervention group had lower scores on one of two achievement measures, lower engagement, and lower task value of collaborative activities. Qualitative analysis showed that students valued hands-on learning yet resisted guided inquiry, suggesting that sharing the purpose of each type of activity is important. Furthermore, the results showed that students valued learning with peers but were frustrated by group dysfunction, suggesting that instructors must address teamwork comprehensively to realize the benefits of cooperative learning.	Supporting Guided Inquiry with Cooperative Learning in Computer Organization	NA:NA	2018
Aman Yadav:Clif Kussmaul:Chris Mayfield:Helen H. Hu	Introductory computer science courses face multiple challenges, including a broad range of content, diverse teaching methods, and the need to help students develop skills such as problem solving, critical thinking, and teamwork. One evidence-based approach to address these challenges is Process Oriented Guided Inquiry Learning (POGIL), in which student teams work on classroom activities specifically designed to help them construct understanding and develop key skills. While POGIL has been widely used and studied in Chemistry and other STEM fields, much less is known about how it is used in Computer Science. In this study, we examined how faculty adopt POGIL for the first time in introductory CS classrooms. Using qualitative in-depth interviews, we investigated why faculty chose to adopt POGIL and their concerns about using it. Our results suggest that faculty motivations to use POGIL centered around improving student outcomes, including their learning and engagement. However, faculty also had concerns about using POGIL, which ranged from how POGIL impacts the curriculum to logistical and institutional barriers. We discuss the implications of these findings with respect to faculty development and active learning pedagogies.	POGIL in Computer Science: Faculty Motivation and Challenges	NA:NA:NA:NA	2018
Arno Pasternak	NA	Session details: Paper Session: Gender	NA	2018
Rebecca N. Wright:Sally J. Nadler:Thu D. Nguyen:Cynthia N. Sanchez Gomez:Heather M. Wright	We describe our experience developing and running a Computer Science Living-Learning Community (LLC) for first-year women at Rutgers University, now in its third year. Each year, around 20 first-year undergraduate women who intend to major in computer science (CS) apply and are selected to participate. LLC participants live in a common residence hall and are provided with an educational, mentoring, and community-building program that supports their progress as students and CS majors. Participants take a "house course," Great Ideas and Insights in Computer Science, as a group, and also take a course on Knowledge and Power: Issues in Women's Leadership. Program activities include study sessions and industry interactions, as well as opportunities to participate in K-12 outreach programs, hackathons, and computing research. To evaluate the program, participants and a similar comparison group are surveyed at the beginning and end of the academic year and a focus group is conducted with program participants. Program participants find the program valuable and would recommend it to others, but both program participants and the comparison group report some lack of confidence in their potential success as computer scientists.	Living-Learning Community for Women in Computer Science at Rutgers	NA:NA:NA:NA:NA	2018
William H. Bares:Bill Manaris:Renée McCauley:Christine Moore	Increasing gender balance in computing is widely recognized by academic institutions, industry, and government agencies as an imperative. This paper describes how providing opportunities for creative expression early on and throughout the four years of an undergraduate computing degree achieves this goal. Prior studies have demonstrated that opportunity for creative expression has a positive effect on recruitment and retention of women, while conversely, lack of opportunity for creative expression has a negative effect. We describe our approach, integrated into a four-course sequence combining computing and the arts, so that other institutions may consider adopting it. Results of a six-year longitudinal study show that these courses attract, retain, and graduate 46% female students, while the corresponding number in our ABET-accredited Computer Science curriculum is approximately 20%. The paper concludes with general observations and suggests directions for future action in CS curricula design.	Achieving Gender Balance through Creative Expression	NA:NA:NA:NA	2018
Amir Kamil:James Juett:Andrew DeOrio	Increasing participation of women and underrepresented minorities is a key challenge in the field of Computer Science Education. Balanced representation of these groups among teaching assistants in Computer Science courses influences recruitment and retention of underrepresented students. At the same time, the status-quo reduced participation of these students makes it more difficult to hire instructional staff from underrepresented groups. In this paper, we describe our experience evaluating candidates with teaching-demonstration videos, followed by in-person interviews, to hire a gender-balanced set of undergraduate TAs for a large-scale CS2 course. Our research goal is to quantitatively assess gender balance throughout the hiring process. Our initial applicant pool is just one-sixth women, but we found that women applicants perform better in our application process than men, resulting in a gender-balanced course staff without making hiring decisions based on the gender of applicants. We show that our approach results in a more gender-balanced teaching staff than hiring based on applicant GPA. We also use course-evaluation data to demonstrate that women perform as well as men as teaching assistants in CS2, and that the overall quality of our teaching assistants has remained high after the hiring-process change.	Gender-balanced TAs from an Unbalanced Student Body	NA:NA:NA	2018
Becky Grasser	NA	Session details: Paper Session: Curriculum Issues 1	NA	2018
Austin Cory Bart:Allie Sarver:Michael Friend:Larry Cox II	Rising enrollments and limited instructor resources underscores the growing need for reusable, scalable curriculum. In this paper, we describe an open-source introductory Python course for non-Computer Science majors in STEM, designed following best practices of Instructional Design (a process similar to Software Engineering). The created resources include 234 learning objectives, 51 lesson videos, 45 lecture slides, 170 programming problems, 281 quiz questions, 6 unit tested projects, and 4 ethical prompts. A teaching field guide has also been produced as a result of this effort, documenting how to deploy this curriculum on a daily level. We describe our experiences deploying over two semesters. The course serviced over 500 students, with 100s in some sections. Along the way, two interventions were conducted in an Action Design Research style: one using Worked Examples, and another using Structured Small Groups. We report on the mixed results of these experiments, plus evaluations of the assignments from student surveys and statistical measures of item effectiveness. Finally, we describe lessons learned when following Instructional Design processes.	PythonSneks: An Open-Source, Instructionally-Designed Introductory Curriculum with Action-Design Research	NA:NA:NA:NA	2018
Chris Proctor:Maxwell Bigman:Paulo Blikstein	Computer science is poised to become a core discipline in K12 education, however there are unresolved tensions between the definitions and purposes of computer science and public education. This study's goal is to explore how logistical and conceptual challenges emerge while designing a comprehensive K12 computer science program in a public school district. While the policy infrastructure for K12 computer science education is rapidly developing, few districts have yet implemented computer science as a core discipline in their K12 programs and very little research has explored the challenges involved in putting ideas into practice. This study reports on a committee designing a comprehensive K12 computer science education program at a small public school district in California. Through a grounded-theory qualitative interpretation of committee-member interviews and board meeting transcripts, we surfaced three themes which were the primary points of tension: how computer science is defined, how it ought to be taught, and what process ought to be used to answer these questions. Grounding these tensions in the academic discourse on K12 computer science education, this study offers recommendations to other districts designing comprehensive computer science education and suggests future directions of computer science education research that will be most useful to stakeholders of these processes.	Defining and Designing Computer Science Education in a K12 Public School District	NA:NA:NA	2018
Daisy W. Rutstein:Yuning Xu:Kevin McElhaney:Marie Bienkowski	As K-12 computer science (CS) education initiatives scale throughout the U.S., researchers seek to understand the context-specific relationships between CS instruction and student learning. Evaluation of instruction requires valid measures of curriculum implementation. We have developed measures for identifying conditions for successful implementation of an introductory high school computer science curriculum along two-dimensions: teaching quality and curriculum enactment. Additionally, we have defined three types of instructional strategies for teaching quality. Quantitative and qualitative data were collected from 53 teachers through surveys and interviews. Data were aggregated and integrated to derive scaled measures for the instructional strategies and curriculum adaptation, and implementation measures were correlated with student end-of-unit assessment data. We found potential factors that can enhance or impede the successful implementation of CS curriculum materials, and we have identified several broad issues associated with scaling up CS curricular implementation.	Developing Implementation Measures for K-12 Computer Science Curriculum Materials	NA:NA:NA:NA	2018
Bill Siever:Roger D. Chamberlain:Elliott Forbes:Ingrid Russell	Embedded systems pervade nearly every aspect of modern life. Moreover, the emergence of both mobile platforms and Internet of Things (IoT) is furthering their reach. Although embedded systems are one of the bodies of knowledge in the ACM/IEEE-CS Com- puter Engineering Curricula, they have only passing mention in the ACM/IEEE-CS Computer Science Curricula. Inclusion of embedded systems concepts in undergraduate computer science can facilitate many objectives: a) they are an example of Platform-Based Devel- opment, a prominent theme in the ACM 2013 CS Curricula, b) they are often a more suitable level of complexity for educational needs than other "real world" platforms (e.g., Arduinos may be used to introduce many AP CS Principles in a single course), c) they offer a novel form of engagement, which may enhance diversity, and d) emerging areas, like IoT, are increasing demand for professionals that understand the full span of systems, from low-level firmware, to middleware and cloud computing. This panel represents three methods of including embedded systems concepts in undergraduate computer science: 1) use of em- bedded systems to improve engagement in a non-major computing course, 2) a required course covering core content for both com- puter science and computer engineering majors, and 3) a degree program offering a formal emphasis in embedded systems via a complementary set of courses. The panelists will share their motiva- tions for including embedded systems concepts in their programs, their approaches to integrating the content into their curricula, the teaching methods they use, the challenges they faced, and chal- lenges that remain.	Including Embedded Systems in CS: Why? When? and How?	NA:NA:NA:NA	2018
Eric R. Banilower:Evelyn M. Gordon	The National Survey of Science and Mathematics Education has provided nationally representative data about the status of K-12 science and mathematics education periodically over the past 40 years. In 2018, the sixth iteration of the study, the study's scope was expanded to include a focus on K-12 computer science education and the study renamed The NSSME+. Data come from roughly 1,300 schools, 7,000 K-12 science and mathematics teachers (who were asked about their integration of computer science into their instruction), and 300 teachers of high school computer science. This session will engage participants with results related to computer science education in the U.S., including: how many, and which, students have access to computer science instruction; who teaches computer science and what pre-service preparation and in-service professional development they have; the nature of computer science instruction; and access to resources, including instructional materials, to support instruction.	Where Are We Now?: Results from a National Study of Computer Science Teachers and Teaching	NA:NA	2018
Tracy Camp:Wendy DuBow:Diane Levitt:Linda J. Sax:Valerie Taylor:Colleen Lewis	The CISE directorate of the NSF is rolling out a requirement that all NSF grants include a Broadening Participation in Computing (BPC) plan (www.nsf.gov/cise/bpc/). This has the potential to drive important institutional change across CS departments in the U.S. This panel of BPC experts will offer their perspectives on meaningful BPC activities, talk about existing BPC programs, and share BPC-related resources that can help PIs and departments craft high-quality BPC plans. The panelists will offer contrasting perspectives on topics such as K-12 outreach, the allocation of department funds for BPC, faculty engagement, and first steps departments should take. Ultimately, NSF review panels made up of CISE community members will evaluate BPC plans, but we hope to spark productive conversations in the interest of fostering institutional change to achieve the social imperative of BPC.	The New NSF Requirement for Broadening Participation in Computing (BPC) Plans: Community Advice and Resources	NA:NA:NA:NA:NA:NA	2018
Cara Tang:Cindy S. Tucker:Christian Servin:Markus Geissler:Melissa Stange	As projections of the shortage of cybersecurity workers grow [4], the spotlight is on cybersecurity education. In December of 2017, the Joint Task Force on Cybersecurity Education published Cybersecurity Curricula 2017: Curriculum Guidelines for Post-Secondary Degree Programs in Cybersecurity [6] (CSEC2017), representing a new discipline in ACM's Computing Curricula Series [5]. Now the ACM CCECC (Committee for Computing Education in Community Colleges) is leading creation of a similar set of guidelines for two-year cybersecurity programs at the associate-degree level, called CSEC2Y. This special session, led by the ACM CCECC, will engage participants in the curriculum development process for associate-degree programs in the increasingly important field of cybersecurity. Participants will have the opportunity to review the current CSEC2Y draft and related materials, to recommend changes, plan further revisions, and otherwise assist in crafting the curricular guidance.	Shaping Curricular Guidelines for Associate-Degree Cybersecurity Programs	NA:NA:NA:NA:NA	2018
Rebecca Bates:Valerie Summet:Nanette Veilleux:Judy Goldsmith:Naomi Kritzer	This special session will allow discussion of how many common goals of CS educators (conveying core CS concepts, creating community for our students, discussing ethics, etc.) can be furthered through the use of literature in CS courses. We will present five goals which are common in CS education, and discuss how incorporating literature relates to them. We will present small case studies showing concrete examples of assignments and courses which have successfully utilized literature in common, core CS courses. We will showcase a Q & A with author Naomi Kritzer, winner of the 2016 Hugo Award for her short story "Cat Pictures Please".	SIGCSE Reads 2019: Discussion and Q & A	NA:NA:NA:NA:NA	2018
James Caristi	NA	Session details: Session: [email protected] - CS1	NA	2018
Brett A. Becker:Keith Quille	The SIGCSE Technical Symposium is celebrating its 50th year, and a constant theme throughout this history has been to better understand how novices learn to program. In this paper, we present a perspective on the evolution of introductory programming education research at the Symposium over these 50 years. We also situate the Symposium's impact in the context of the wider literature on introductory programming research. Applying a systematic approach to collecting papers presented at the Symposium that focus on novice programming / CS1, we categorized hundreds of papers according to their main focus, revealing important introductory programming topics and their trends from 1970 to 2018. Some of these topics have faded from prominence and are less relevant today while others, including many topics focused on students, such as making learning programming more appropriate from gender, diversity, accessibility and inclusion standpoints, have garnered significant attention more recently. We present discussions on these trends and in doing so, we provide a checkpoint for introductory programming research. This may provide insights for future research on how we teach novices and how they learn to program.	50 Years of CS1 at SIGCSE: A Review of the Evolution of Introductory Programming Education Research	NA:NA	2018
William H. Bares	NA	Session details: Paper Session: Camps	NA	2018
Quinn Burke:Cinamon Sunrise Bailey	The purpose of this paper is to investigate student perspectives of how college computer science (CS) programs compare to those of coding bootcamps.  In particular, the research examines to what degree students report their respective programs instill the necessary interpersonal and intrapersonal skills (i.e., teamwork and resilience) necessary for workforce entry. Prior research from the authors suggests there is a perception among the software industry that college graduates often lack the necessary so-called "soft" skills for successful workforce entry; this research investigates to what degree students from each educational environment mirror this sensibility in the assessment of their own abilities, learning preferences, and educational experiences.  Data is based on a series of fifty (50) one-on-one interviews with students, 22 of whom come from a coding bootcamp background and 28 who come from a four-year college.   Alongside these interviews, students completed both pre-surveys (50 students) and post-surveys (19 students) on learning preferences and programmatic experience; 12 students also participated in follow-up interviews further articulating their learning experiences. Results indicate that despite significant differences in age and workforce experience, coding bootcamp students and undergraduates differ little in how they perceive themselves as learners; there were notable differences in reasons for application to respective programs as well as exposure to practical learning experiences through coursework. Discussion focuses on the degree to which the aforementioned "soft skills" are perceived as learned expertise versus a personal attribute, and to what degree such perception may contribute to higher education's pedagogical and curricular approaches to CS instruction.	Camp or College?	NA:NA	2018
Yesheng Chen:Zhen Chen:Shyamala Gumidyala:Annabella Koures:Seoyeon Lee:James Msekela:Halle Remash:Nolan Schoenle:Sarah Dahlby Albright:Samuel A. Rebelsky	Over the past decade, politicians, leaders, and pundits have called for computing and computer science education opportunities to be made available earlier and earlier. Such calls have led to the creation of a wide variety of offerings for students at middle-school and even elementary levels, including summer "code camps" targeted at middle-school students. Such camps often emphasize fun aspects of computing, such as games and robots. In contrast, research at the collegiate level suggests that meaningful applications of computing, such as computing for social good, are more successful at building and sustaining interest, particularly among students from groups traditionally underrepresented in computing. In this project, we developed and offered a summer camp that draws upon ideas and approaches from the digital humanities (DH), which explore the use of algorithms and computation in support of broader humanistic inquiry. Because DH reveals different ways to apply algorithmic and computational thinking, DH has the potential to attract students who might not otherwise consider computing. In this paper, we introduce central issues in the digital humanities, explain the rationale for the camp design, describe the camp curriculum, and reflect on successful and less successful aspects of the camp. Among other things, we consider how to introduce digital humanities topics to students who have not yet heard the term "humanities" and explore the utility of such topics for this age group. We also present preliminary data on the short-term effects of the camp on students' self-efficacy and interest in computing.	A Middle-School Code Camp Emphasizing Digital Humanities	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Caelin Bryant:Yesheng Chen:Zhen Chen:Jonathan Gilmour:Shyamala Gumidyala:Beatriz Herce-Hagiwara:Annabella Koures:Seoyeon Lee:James Msekela:Anh Thu Pham:Halle Remash:Marli Remash:Nolan Schoenle:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky	The underrepresentation within computer science of women, domestic students of color, and students with lower socioeconomic-status remains a national issue. Recent studies demonstrate two critical factors: Persistent stereotypes about "who does computer science" can preclude interest in the field for members of these groups; many also perceive computing as "irrelevant" and "asocial". While these issues must be addressed at multiple ages and levels, many suggest that we should start early, before students have developed stereotypes. As a step in combating (mis-)perceptions of ability and relevance, we developed and conducted a spectrum of week-long summer "code camps" for regional middle-school students. These camps emphasize meaningful uses of computing, on building self-efficacy, and on broadening understanding of who does and can do computer science. In this paper, we focus on our "data science for social good" (ds4sg) camp, in which students explored computational approaches to data science through a lens of computing for social good, discovering how computing helps them not only better understand societal issues but also convince others to address problems. We discuss the rationale for the curriculum and its content, including our uses of pair programming, personal projects, and a growth model that brings students from block-based programming to professional Jupyter data notebooks. We consider the short-term effects the camps have on students' self-efficacy and perceptions of computer science. We conclude with recommendations and guidelines for those intending to offer similar camps.	A Middle-School Camp Emphasizing Data Science and Computing for Social Good	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Caroline Budwell	NA	Session details: Paper Session: Story & Video	NA	2018
Mia Minnes:Christine Alvarado:Max Geislinger:Joyce Fang	Using instructional videos - either as supplemental content or in a flipped classroom - has become increasingly popular among students and instructors in higher education CS courses. However, producing or finding appropriate videos can be expensive and time-consuming. This experience report describes a novel, relatively low-cost approach to creating customized video resources that requires very little instructor time. This approach leverages widely available screen capture and podcasting technologies to produce a suite of 2-5 minute "podcast highlights" videos from full-length live lecture footage. Podcast highlights distill lecture concepts into short segments, and supplementary annotations help illustrate these concepts further. Podcast highlights can be created quickly by undergraduates with just a small amount of instructor supervision. We created podcast highlights videos for four undergraduate CS courses. In a pilot study with two of these classes, many students used the highlights videos regularly and praised their usefulness for both previewing and reviewing class concepts. This report presents the podcast highlights production process, student reaction to and use of podcast highlights videos, and best practices for creation and deployment of these customized educational videos.	Podcast Highlights: Targeted Educational Videos From Repurposed Lecture-capture Footage	NA:NA:NA:NA	2018
Ana I. González-Tablas:Pablo Martín-González	We present an active learning experience conducted on a Cryptography course within a Bachelor's Degree in Computer Science and Engineering with the goal of promoting better attitudes towards cryptography. Students were asked to create short videos that presented in an attractive way day-to-day topics or systems related with cryptography but not included in the course syllabus. Participation was optional although additional marks were assigned depending on a rubric-based assessment. Students, besides creating the videos, could participate also (or only) in evaluating some of the peer-created videos using the same rubric used by the teachers. Other active learning experiences consider student-generated videos but often topics are required to be within the course syllabus. We describe the experience design and how we have used YouTube and Microsoft Class Notebook to seamlessly deploy the experience as an extra curricular activity, with minimum teachers overhead. To measure the effect of the experience on the students attitude, we have carried on a survey (pre-test and post-test), adapted from an already existing attitudes towards statistics scale, on two student groups (intervention and control). Results show that intervention group presents higher increments in attitudes in the three analysed dimensions (usefulness, likeness, and motivation) respect to the control group. We have also conducted a satisfaction survey on intervention group, that show that a mean of 80% of students evaluate as positive (agree or strongly agree) the experience. Final grades, however, do not present significant differences.	Student-Generated Videos for Promoting Better Attitudes towards Cryptography	NA:NA	2018
Jennifer Parham-Mocello:Shannon Ernst:Martin Erwig:Lily Shellhammer:Emily Dominguez	Story Programming is an approach for teaching complex computational and algorithmic thinking skills using simple stories anyone can relate to. One could learn these skills independent of a computer or with the use of a computer as a tool to interact with the computation in the tale. This research study examines the use of Story Programming before teaching coding in a computer science orientation course to determine if it is a viable alternative to the code-focused way of teaching the class in the past. We measure the viability of the Story Programming approach by evaluating student-success and learning outcomes, as well as student reactions to post-survey questions.	Story Programming: Explaining Computer Science Before Coding	NA:NA:NA:NA:NA	2018
Kalpathi Subramanian	NA	Session details: Paper Session: Games & Gamification	NA	2018
Darina Dicheva:Keith Irwin:Christo Dichev	Although many CS courses require extensive practice, a large number of students show low motivation for engaging in non-graded, self-directed learning activities. To address this problem, we developed OneUp - a highly configurable course gamification platform that enables instructors to tailor the gamification features to fit their preferences. This paper presents a case study of using OneUp to gamify a Data Structures course. The focus is on encouraging students' self-study and better engagement with out-of-class online practicing. We describe the utilized game elements - badges, leaderboard, virtual currency, and learning dashboards, and provide a descriptive analysis of their use. The results of our evaluation show that this gamification intervention has been well received by the students, resulting in significantly increased student engagement and out-of-class practicing and in a reduced failing rate.	OneUp: Engaging Students in a Gamified Data Structures Course	NA:NA:NA	2018
John Anvik:Vincent Cote:Jace Riehl	Although there are many computer science learning games with the goal of teaching programming, such games typically require the person to either learn an existing programming language or the game's own specialized language. This can be intimidating, confusing or frustrating for an individual when they cannot get their "program" to work correctly (e.g. syntax error, infinite loop). Additionally, such games commonly use a puzzle-solving approach that does not appeal to some demographics. This paper presents a programming-language-independent approach to teaching fundamental programming and cybersecurity concepts using simple vocabulary. This approach also uses the familiar activity of playing cards against opponents to create a more dynamic and engaging learning experience. The approach is demonstrated by a web-based game called Program Wars. Results from a user study show that players are able to effectively connect game concepts to actual programming language structures; however, whether players' comprehension of computer programming is improved is unclear.	Program Wars: A Card Game for Learning Programming and Cybersecurity Concepts	NA:NA:NA	2018
Rafael G. de Pontes:Dalton D. S. Guerrero:Jorge C. A. de Figueiredo	In recent years, the use of game elements in non-game contexts has been widely adopted in different contexts, one of which education. Concerned with investigating the effect of gamification on student engagement in the context of an undergraduate Introductory Programming course that applied that Mastery Learning approach, a gamified web application was developed and integrated to a pre-existing online platform used to conduct the syllabus. N = 60 students were randomly assigned to one of two groups: an experimental group with access to the gamified platform and a control group without access to it. The randomization guaranteed a similar number of students in relation to advancement in the course, in each group. The main features explored in the gamified approach were anonymous weekly leaderboards, many categories of badges and personal record-tracking. Each student profile was private. A first 90-minute experiment showed that the experimental group solved 37% more exercises than the control group, on average. From that point onward, student activity was monitored for a period of four weeks, until the end of the course. Though student-activity decreased over time as students completed the course, the experimental group increasingly solved more exercises per week compared to the control group (at least 46% more, on average). After the course was concluded, the experimental group answered a survey which showed that the badges were the feature that motivated them the most. This research's source code is available and may be easily replicated or incremented.	Analyzing Gamification Impact on a Mastery Learning Introductory Programming Course	NA:NA:NA	2018
Mohsen Dorodchi	NA	Session details: Paper Session: Testing 1	NA	2018
Ayaan M. Kazerouni:Clifford A. Shaffer:Stephen H. Edwards:Francisco Servant	Software testing is an important aspect of the development process, one that has proven to be a challenge to formally introduce into the typical undergraduate CS curriculum. Unfortunately, existing assessment of testing in student software projects tends to focus on evaluation of metrics like code coverage over the finished software product, thus eliminating the possibility of giving students early feedback as they work on the project. Furthermore, assessing and teaching the process of writing and executing software tests is also important, as shown by the multiple variants proposed and disseminated by the software engineering community, e.g., test-driven development (TDD) or incremental test-last (ITL). We present a family of novel metrics for assessment of testing practices for increments of software development work, thus allowing early feedback before the software project is finished. Our metrics measure the balance and sequence of effort spent writing software tests in a work increment. We performed an empirical study using our metrics to evaluate the test-writing practices of 157 advanced undergraduate students, and their relationships with project outcomes over multiple projects for a whole semester. We found that projects where more testing effort was spent per work session tended to be more semantically correct and have higher code coverage. The percentage of method-specific testing effort spent before production code did not contribute to semantic correctness, and had a negative relationship with code coverage. These novel metrics will enable educators to give students early, incremental feedback about their testing practices as they work on their software projects.	Assessing Incremental Testing Practices and Their Impact on Project Outcomes	NA:NA:NA:NA	2018
Maurício Aniche:Felienne Hermans:Arie van Deursen	Software testing is an important topic in software engineering education, and yet highly challenging from an educational perspective: students are required to learn several testing techniques, to be able to distinguish the right technique to apply, to evaluate the quality of their test suites, and to write maintainable test code. In this paper, we describe how we have been adding a pragmatic perspective to our software testing course, and explore students' common mistakes, hard topics to learn, favourite learning activities, and challenges they face. To that aim, we analyze the feedback reports that our team of Teaching Assistants gave to the 230 students of our 2016-2017 software testing course at Delft University of Technology. We also survey 84 students and seven of our teaching assistants on their perceptions. Our results help educators not only to propose pragmatic software testing courses in their faculties, but also bring understanding on the challenges that software testing students face when taking software testing courses.	Pragmatic Software Testing Education	NA:NA:NA	2018
Lilian Passos Scatalon:Jeffrey C. Carver:Rogério Eduardo Garcia:Ellen Francine Barbosa	Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students' perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.	Software Testing in Introductory Programming Courses: A Systematic Mapping Study	NA:NA:NA:NA	2018
Debzani Deb	NA	Session details: Paper Session: Computation Thinking 1	NA	2018
Ashok Basawapatna:Alexander Repenning:Mark Savignano	The creation of computer science tutorials is becoming critically important as hundreds of millions of students each year get their first CS experience through self-directed online activities. Creating a "cliffhanger" activity, with high engagement during and motivation to continue learning post activity, is a balancing act. If tutorials provide too much detailed information, users may be able to follow instructions but can feel overwhelmed or bored. On the other hand, tutorials that do not sufficiently explain crucial steps risk frustrating users who might drop out of the activity. Zones of Proximal Flow (ZPF) tutorials are simple to create and provide a navigation structure of differentiated instruction allowing users to choose appropriate detail based on their self-assessed state of flow, from bored to anxious. Using Retention of Flow analysis, two Hour of Code game design tutorials were analyzed: a sophisticated online tutorial for the creation of Frogger, and a simple ZPF tutorial for the creation of Pac-Man. One hope was that the simple ZPF Pac-Man tutorial would not do much worse than the sophisticated Frogger tutorial, but surprisingly the ZPF Pac-Man tutorial significantly outperformed the Frogger tutorial in terms of student retention. The Pac-Man tutorial also displayed a high student motivation to continue programming past the end of differentiated instruction.	The Zones of Proximal Flow Tutorial: Designing Computational Thinking Cliffhangers	NA:NA:NA	2018
Lori Pollock:Chrystalla Mouza:Kevin R. Guidry:Kathleen Pusecker	In this work, we describe our effort to develop, pilot, and evaluate a model for infusing computational thinking into undergraduate curricula across a variety of disciplines using multiple methods that previously have been individually tried and tested, including: (1) multiple pathways of computational thinking, (2) faculty professional development, (3) undergraduate peer mentors, and (4) formative assessment. We present pilot instantiations of computational thinking integration in three different disciplines including sociology, mathematics and music. We also present our professional development approach, which is based on faculty support rather than a co-teaching model. Further, we discuss formative assessment during the pilot implementation, including data focusing on undergraduate students' understanding and dispositions towards computational thinking. Finally, we reflect on what worked, what did not work and why, and identify lessons learned. Our work is relevant to higher education institutions across the nation interested in preparing students who can utilize computational principles to address discipline-specific problems.	Infusing Computational Thinking Across Disciplines: Reflections & Lessons Learned	NA:NA:NA:NA	2018
Markeya S. Peteranetz:Leen-Kiat Soh:Elizabeth Ingraham	In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These "computational thinking" courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course.	Building Computational Creativity in an Online Course for Non-Majors	NA:NA:NA	2018
James W. McGuffee	NA	Session details: Paper Session: Assessment 1	NA	2018
Daniel Coore:Daniel Fokum	We present an initiative that introduced the use of a competitive programming platform as a mechanism for auto-grading assignments for an introductory course on algorithm design and analysis. The specific objective of the intervention was to increase the number of assessed programming exercises to an average of 1 per week. A traditionally large enrolment with only a few graduate assistants available meant that prior to the intervention, few assignments were given, and the duration that students waited for feedback was long. Fresh problems were developed for deployment on the platform, each one targeting the specific learning objectives of the week in which they were given. The assignments were given in the format of a contest, and students were permitted to submit multiple attempts without penalty. There was a public leaderboard that showed real-time standings, but a student's grades depended only on the number of test cases his submissions passed and not on its ranking on the leaderboard. Anecdotally, we observed an increased degree of engagement with the course content. However a statistical analysis shows that the impact of the intervention on student performance, relative to previous instances of the course, was mixed. We discuss these and other findings.	Facilitating Course Assessment with a Competitive Programming Platform	NA:NA	2018
Eric Wiebe:Jennifer London:Osman Aksit:Bradford W. Mott:Kristy Elizabeth Boyer:James C. Lester	The recognition of middle grades as a critical juncture in CS education has led to the widespread development of CS curricula and integration efforts. The goal of many of these interventions is to develop a set of underlying abilities that has been termed computational thinking (CT). This goal presents a key challenge for assessing student learning: we must identify assessment items associated with an emergent understanding of key cognitive abilities underlying CT that avoid specialized knowledge of specific programming languages. In this work we explore the psychometric properties of assessment items appropriate for use with middle grades (US grades 6-8; ages 11-13) students. We also investigate whether these items measure a single ability dimension. Finally, we strive to recommend a "lean" set of items that can be completed in a single 50-minute class period and have high face validity. The paper makes the following contributions: 1) adds to the literature related to the emerging construct of CT, and its relationship to the existing CTt and Bebras instruments, and 2) offers a research-based CT assessment instrument for use by both researchers and educators in the field.	Development of a Lean Computational Thinking Abilities Assessment for Middle Grades Students	NA:NA:NA:NA:NA:NA	2018
Paul Denny:Sathiamoorthy Manoharan:Ulrich Speidel:Giovanni Russello:Angela Chang	Academic dishonesty is a widely acknowledged problem in tertiary education, and a range of safeguards and tools exist to both deter and detect cheating. During tests and examinations students are often monitored closely by invigilators, however incidents of misconduct still occur. Multiple-choice questions (MCQs) are particularly susceptible in this regard due to the simplicity with which answers can be communicated. Nonetheless, they are commonly used in large classes due to their convenience. In this work we investigate multiple-variant MCQs, where answer options are randomly selected from predefined sets. This format is less prone to student cheating and overcomes several weaknesses of similar methods. We evaluate this approach in two large computer science courses through student questionnaires and simple item analysis. We find that multiple-variant MCQ exams are perceived as an effective way to reduce cheating behavior, however not all question variants are equally difficult. This introduces concerns around fairness and we discuss approaches to mitigate these issues in the future.	On the Fairness of Multiple-Variant Multiple-Choice Examinations	NA:NA:NA:NA:NA	2018
Diana Franklin	NA	Session details: Paper Session: Teaching Practice 1	NA	2018
Andrew J. Ko:Thomas D. LaToza:Stephen Hull:Ellen A. Ko:William Kwok:Jane Quichocho:Harshitha Akkaraju:Rishin Pandit	One way to teach programming problem solving is to teach explicit, step-by-step strategies. While prior work has shown these to be effective in controlled settings, there has been little work investigating their efficacy in classrooms. We conducted a 5-week case study with 17 students aged 15-18, investigating students' sentiments toward two strategies for debugging and code reuse, students' use of scaffolding to execute these strategies, and associations between students' strategy use and their success at independently writing programs in class. We found that while students reported the strategies to be valuable, many had trouble regulating their choice of strategies, defaulting to ineffective trial and error, even when they knew systematic strategies would be more effective. Students that embraced the debugging strategy completed more features in a game development project, but this association was mediated by other factors, such as reliance on help, strategy self-efficacy, and mastery of the programming language used in the class. These results suggest that teaching of strategies may require more explicit instruction on strategy selection and self-regulation.	Teaching Explicit Programming Strategies to Adolescents	NA:NA:NA:NA:NA:NA:NA:NA	2018
Sue Sentance:Jane Waite:Maria Kallia	PRIMM is an approach to teaching programming at K-12 that facilitates the structure of lessons in a purposeful way. PRIMM stands for Predict-Run-Investigate-Modify-Make, and draws on recent research in programming education. In particular the PRIMM approach recognises that starting with existing code and being able to explain what it does gives novice programmers the confidence to write their own programs. Using the PRIMM approach, teachers can devise scaffolded and targeted tasks for students which helps engender understanding, particularly for those who may have previously struggled to understand programming concepts. In this techniques paper, we consider what PRIMM is, and the experiences that teachers have had of using the structure in the classroom. PRIMM materials have been trialled in schools in a study involving around 500 students aged 11-14. From interviews with nine participating teachers we have found that teachers particularly value the collaborative approach taken in PRIMM, the structure given to lessons, and the way that resources can be differentiated. We propose that PRIMM is an approach that could be adopted in all phases of programming education as well as in teacher training.	Teachers' Experiences of using PRIMM to Teach Programming in School	NA:NA:NA	2018
Christopher Lynnly Hovey:Lecia Barker:Vaughan Nagy	In a previous paper, we explored results from the first stage of a two-part research project designed to uncover what influences computer science (CS) faculty to adopt new teaching practices. In the first phase, we conducted interviews, classroom observations, and focus groups with faculty to better understand the organizational, individual, and social factors that influence faculty adoption. Here we discuss findings from the second phase of the project, which uses survey data from 821 CS faculty at 595 institutions in the U.S. to investigate the prevalence of themes uncovered during the qualitative phase. Results show that faculty who tried an innovation were motivated primarily by concerns for students' learning and course experience, including their engagement and participation. Also important were the "fit" with existing practices and tools, and the logistics of implementing an innovation. Factors that reduced faculty willingness to try an innovation include a lack of time, logistical issues, and satisfaction with their current teaching practices. Faculty learned about the innovations they later adopted through presentations and workshops at conferences and at their home institutions, and through conversations with respected colleagues who teach in similar contexts. Implications for encouraging more widespread usage of teaching techniques that improve diversity and student learning are discussed.	Survey Results on Why CS Faculty Adopt New Teaching Practices	NA:NA:NA	2018
Jennifer M. Blaney:Linda J. Sax:David Feldon:Ann Gates	Broadening the participation of women in computing has increasingly become a focus of computing education research over the past several years. To be sure, the field of computing has unique challenges that merit close examination. At the same time, social scientists have built large bodies of literature related to gender equity across disciplines that span several decades, much of it critical to how we understand (in)equity in computing. This panel will provide perspectives from scholars with expertise in a variety of disciplines, including computer science, higher education, and educational psychology. Panelists will share relevant research from their home disciplines and initiate a discussion on the future of computing education research.	Broadening Participation in Computing: Putting Our Work in Context	NA:NA:NA:NA	2018
David Touretzky:Fred Martin:Deborah Seehorn:Cynthia Breazeal:Tess Posner	In May 2018, the Association for the Advancement of Artificial Intelligence (AAAI) and the Computer Science Teachers Association (CSTA) formed a joint working group to develop national guidelines for teaching K-12 students about artificial intelligence. Inspired by CSTA's national standards for K-12 computing education, the - AI for K-12 guidelines (ai4k12.org) will define what students in each grade band should know about artificial intelligence, machine learning, and robotics. The working group is also creating an online resource directory where teachers can find AI-related videos, demo software, and activity descriptions they can incorporate into their lesson plans. The goal of this session is to raise the SIGCSE community's awareness of the initiative, its deliverables, and outcomes, and to foster a community-wide conversation about AI education in K-12. This initiative parallels other recent initiatives in K-12 AI education and community-wide initiatives and discussions around CS For All and CS in K-12. This Special Session is aimed toward K-12 CS educators, researchers, and curriculum and tool designers.	Special Session: AI for K-12 Guidelines Initiative	NA:NA:NA:NA:NA	2018
Jamie Payton:Jamika D. Burge:Jill Denner	During the 2018 RESPECT Conference, a group of us facilitated a conversation about inclusion in computing. The discussion focused on critical issues of equity and inclusion and how to engage people from all groups in learning key concepts in computing. For this SIGCSE panel, we propose to continue the conversation through a broader conversation around the terms "broadening participation" and the roles of relationships, identity (cultural and personal), and academic, political, and professional perspectives when supporting equity and inclusion in computing education. This panel seeks to disrupt the conversation about computer science education, and participants to this session will leave having had a safe space in which to discuss issues of identify, race, and privilege that are critical to spaces like SIGCSE.	The Reality of Inclusion: The Role of Relationships, Identity, and Academic Culture in Inclusive and Equitable Practices for Broadening Participation in Computing Education	NA:NA:NA	2018
Andrea Danyluk:Paul Leidig:Lillian Cassel:Christian Servin	The ACM Data Science Task Force was established by the ACM Education Council and tasked with articulating the role of computing discipline-specific contributions to this emerging field. This special session seeks to introduce the work of the ACM Data Science Task Force as well as to engage the SIGCSE community in this effort. Members of the task force will introduce key components of a draft report, including a summary of data science curricular efforts to date, results of ACM academic and industry surveys on data science, as well as the initial articulation of computing competencies for undergraduate programs in data science. This session should be of interest to all SIGCSE attendees, but especially faculty developing college-level curricula in Data Science.	ACM Task Force on Data Science Education: Draft Report and Opportunity for Feedback	NA:NA:NA:NA	2018
Crystal Furman:Owen Astrachan:Daniel D. Garcia:David Musicant:Jennifer Rosato	With approximately 37,000 students entering college with an Advanced Placement CS Principles credit, students, parents, and teachers are wondering how that AP credit "counts" in college. In this panel, we will share perspectives from the College Board and higher education institutions of various pathways from CS Principles to a major in CS. While over 500 institutions have indicated they have credit and placement policies for CSP, they may vary quite a bit. (Credit gives students units of credit on their college record while placement means the AP credit can meet a particular course requirement.) For example, some institutions offer credit only, while others allow the course to count as part of a general education program, as a major elective, or even require CSP in the major. Panelists will share institutional context and reasoning behind their policies. Audience members will have a better understanding of the breadth of credit and placement options and considerations for their own institution.	CS Principles Higher Education Pathways	NA:NA:NA:NA:NA	2018
Mark Guzdial:Colleen M. Lewis:Lauren Margulieux:Greg L. Nelson:Leo Porter	As we celebrate the 50th SIGCSE Symposium, this panel explores how computing education researchers chart a course individually and as a community to build our research practices and collective knowledge of computing education. This navigation involves developing our research goals, which tools we use to work towards those goals, and which academic communities outside of computing education we seek to learn from and contribute to. However, these processes of navigation are rarely discussed as a community. Paper and grant submissions and reviews provide an imperfect way for our community to communicate our varied values and priorities. This panel brings together experts in computing education research who differ in their research goals, tools, and external communities. We can expect a lively discussion amongst the panelist and we hope to spark important discussions within the computing education research community!	Negotiating Varied Research Goals in Computing Education Research	NA:NA:NA:NA:NA	2018
Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: Morning Keynote & 2019 SIGCSE Award for Outstanding Contribution to Computer Science Education	NA:NA	2018
Mark Guzdial	Teaching programming as a way to express ideas, communicate with others, and understand our world is one of the oldest goals for computing education. The inventor of the term "computer science" saw it as the third leg of STEM literacy. In this talk, I lay out the history of the idea of universal computational literacy, some of what it will take to get there, and how our field will be different when we do.	Computing Education as a Foundation for 21st Century Literacy	NA	2018
Bernd Bruegge	NA	Session details: Paper Session: Online	NA	2018
Meen Chul Kim:Thomas H. Park:Ruixue Liu:Andrea Forte	Web development is a learning context with the potential to support rich computational thinking. Large-scale analysis of compilation and runtime errors have been used in introductory programming courses and similar approaches can be used to understand learning in web development environments. We investigated activity logs of a novel web coding game to uncover learning trajectories and what people struggle with when learning flexible box (flexbox), a collection of new CSS layout features. We designed a game called Flexbox Froggy, in which learners solve challenges by writing a few lines of CSS code, moving from simple levels that require knowledge of one flexbox property, to complex levels combining multiple properties. We investigate learning curves based on the changes in syntactic and semantic errors learners make as they complete the game. Our findings show that people performed better encountering a single new property than combined with properties they had already practiced. Clusters of learners at different levels did not demonstrate expected error rates based on learning curve theory. Also unexpectedly, advanced groups that mastered syntax had higher semantic error rates than the beginner group, especially when attempting new properties or complex use cases. We conclude with implications for designing and developing introductory web programming games and other instructional materials.	Understanding Learning Curves and Trajectories in CSS Layout	NA:NA:NA:NA	2018
Michael Whitney:Bryan Dallas	The expansion of computer science programs into the digital world has significantly increased the use of videos as an instructional medium. In an effort to improve student performance in a video driven learning environment, this paper explores the impact of captions on learning performance. Previous work has focused on the benefits of captions for persons with disabilities, those learning English as a second language, and reading instruction for children. This work expands on the caption knowledge base by investigating (1) if the inclusion of captions significantly improves knowledge retention amongst all students in an online computer science course, and (2) if students perceive videos with captions as beneficial to learning. Our results show a statistically significant performance improvement after watching videos with captions vs. videos without captions. Students reported using captions as a learning resource as they helped reinforce video material, maintain focus, and enhance comprehension.	Captioning Online Course Videos: An Investigation into Knowledge Retention and Student Perception	NA:NA	2018
Randy Connolly	Web development continues to grow as an essential skill and knowledge area for employed computer science graduates. Yet within the ACM CS2013 curriculum recommendation and within computing education research in general, web development has been shrinking or even disappearing all together. This paper uses an informal systematic literature review methodology to answer three research questions: what approaches are being advocated in existing web development education research, what are current trends in industry practice, and how should web development be taught in light of these current trends. Results showed a significant mismatch between the type of web development typically taught in higher education settings in comparison to web development in industry practice. Consequences for the pedagogy of web development courses, computer science curriculum in general, and for computing education research are also discussed	Facing Backwards While Stumbling Forwards: The Future of Teaching Web Development	NA	2018
Ben Stephenson	NA	Session details: Paper Session: Mistakes and Errors	NA	2018
Tobias Kohn	The interaction between a novice programmer, and the compiler plays a crucial role in the learning process of the novice programmer. Of particular importance is the compiler's feedback on errors in the program code. Accordingly, compiler error messages are an important and active field of research. Yet, a language that has largely been left out of this discussion so far is Python. We have collected Python programs from high school students taking introductory courses. For each collected erroneous program, we sought to classify the effective error, and assess if the student was able to fix the error. Our study is a precursor to providing improved error messages in Python, and assess their effectiveness. As such, we are eventually interested in finding ways to automatically determine the effective error, so as to base the displayed message on. From our data, we found that a considerable part of students' errors can be attributed to minor mistakes, which can easily be identified and corrected. However, beyond such minor mistakes, a proper error diagnosis might have to be based on a goal/plan analysis of the entire program. Likewise, proper assessment of whether an error has been fixed frequently requires more context than is provided by the program alone.	The Error Behind The Message: Finding the Cause of Error Messages in Python	NA	2018
James Prather:Raymond Pettit:Brett A. Becker:Paul Denny:Dastyni Loksa:Alani Peters:Zachary Albrecht:Krista Masci	When solving programming problems, novices are often not aware of where they are in the problem-solving process. For instance, students who misinterpret the problem prompt will most likely not form a valid conceptual model of the task and fail to make progress towards a working solution. Avoiding such errors, and recovering from them once they occur, requires metacognitive skills that enable students to reflect on their problem-solving processes. For these reasons, developing metacognitive awareness is crucially important for novice students. Previous research has shown that explicitly teaching key steps of programming problem-solving, and having students reflect on where they are in the problem-solving process, can help students complete future programming assignments. Such metacognitive awareness training can be done through personal tutoring, but can be difficult to implement without a high ratio of instructors to students. We explore a more scalable approach, making use of an automated assessment tool, and conduct a controlled experiment to see whether scaffolding the problem-solving process would increase metacognitive awareness and improve student performance. We collected all code submissions by students in both control and experimental groups, as well as data from direct observation using a think-aloud protocol. We found that students who received the intervention showed a higher degree of understanding of the problem prompt and were more likely to complete the programming task successfully.	First Things First: Providing Metacognitive Scaffolding for Interpreting Problem Prompts	NA:NA:NA:NA:NA:NA:NA:NA	2018
Rebecca Smith:Scott Rixner	The software development process often follows a circuitous path, littered with mistakes and backtracks. This is particularly true for novice programmers, who typically navigate through a variety of errors en route to their final solution. This paper presents a quantitative analysis of a large dataset of Python programs written by novice students. The analysis paints a multifaceted picture of the errors that students encounter, providing insight into the distribution, duration, and evolution of these errors. Ultimately, this paper aims to incite further conversation on the mistakes made by novice programmers, and to inform the decisions instructors make as they help students overcome these mistakes.	The Error Landscape: Characterizing the Mistakes of Novice Programmers	NA:NA	2018
Steven Bogaerts	NA	Session details: Paper Session: Instruments 1	NA	2018
Ana Liz Souto O. Araujo:Wilkerson L. Andrade:Dalton D. Serey Guerrero:Monilly Ramos Araujo Melo	While several approaches have been proposed to assess computational thinking (CT) abilities, it is still unclear how many and which these abilities are. Despite the undisputed importance of assessment, the fact is that there is not enough evidence on which abilities are merely theoretical and which can be empirically observed in the context of CT. This paper is part of a larger investigation in which we try to answer a simple question: can CT abilities be quantitatively defined and measured? In this particular study, we try to answer a simple question: How many CT abilities can be empirically observed using factor analysis? We approach this question, using a dataset containing answers of 1564 students from Lithuania in the Bebras Challenge from 2015. Firstly, we used confirmatory factor analysis to verify a theory that claims that five CT abilities are assessed by the contest. Our analysis shows the theory is not statistically supported. Secondly, we used principal component analysis as an exploratory analysis to try to derive an appropriate number of factors from the data. Surprisingly, the analysis suggests there are only two main recognizable factors. Finally, we briefly discuss these factors and hypothesize that the first is called evaluation ability, which would include abstraction, generalization, and decomposition, while factor 2 is algorithmic thinking and logical reasoning.	How Many Abilities Can We Measure in Computational Thinking?: A Study on Bebras Challenge	NA:NA:NA:NA	2018
Ryan Bockmon:Stephen Cooper:Jonathan Gratch:Mohsen Dorodchi	\beginabstract Cognitive tests have been long used as a measure of student knowledge, ability, and as a predictor for success in engineering and computer science. However, these tests are not without their own problems relating to priming, difficulty (resulting in test fatigue) and time on exam. This paper discusses efforts to modify Parker et al.'s Second CS1 aptitude test (SCS1) \citeParker16 to reduce the time spent on the exam, provide greater customization to match concepts taught across three universities, and reduce redundancy of test questions all while maintaining the instrument's reliability. This instrument was modified for use on an ongoing grant investigating whether spatial abilities impact the success of students in introductory CS courses. The instrument developed in this paper is a revised shortened version of Second Computer Science 1 (SCS1) aptitude test, designated as SCS1R. \endabstract	(Re)Validating Cognitive Introductory Computing Instruments	NA:NA:NA:NA	2018
Adrienne Decker:Monica M. McGill	As computing education research continues to grow and mature as a field, it becomes more important to focus on the quality and rigor of our research studies. One important aspect of any research study is its formal evaluation. Using standardized and validated instruments relevant to computer science education to perform evaluations can increase the quality of the study and the value of its results. However, researchers often create their own instruments rather than using existing ones, perhaps due to their lack of knowledge of the value of using an existing instrument or due to the challenge of finding such instruments. Through a review of relevant computing education literature, this paper presents a listing of 47 evaluation instruments specifically designed for measuring programs or constructs related to computing that can influence student achievement and learning. Analysis of purpose, target audience, reliability, and validity of the instruments is also presented. The paper ends with a call for the community to begin to make more regular use of validated instruments in their studies when possible and to develop and validate additional instruments in areas where few exist.	A Topical Review of Evaluation Instruments for Computing Education	NA:NA	2018
Clifford A. Shaffer	NA	Session details: Paper Session: Testing 2	NA	2018
Dee A. B. Weikle:Michael O. Lam:Michael S. Kirkpatrick	Introducing software testing has taken on a greater importance in undergraduate computer science curricula in the last several years, with many departments using JUnit or other testing frameworks in the programming sequence and software engineering courses. We have developed an automated framework for unit and integration testing and grading for our intermediate-level systems course projects. Our system--designed to test C programs--combines the Check unit testing framework, custom Bash scripts for integration testing, and the Valgrind Memcheck memory leak detection tool. Although our courses use Linux, the framework is platform-independent and has been tested on a variety of other platforms. We have used this framework for seven semesters with four different instructors as part of the computer science program at a primarily undergraduate university with an emphasis on liberal arts. We distribute both public and private tests so that students get immediate feedback on their progress without knowing the actual contents of every test. We have observed that knowing their code is not completely working motivates more students to figure out what they don't understand before the project deadline. It also gives students examples of different levels of tests to use to debug their code, encourages them to develop a deeper understanding of the project specification, and reduces student anxiety about grades.	Automating Systems Course Unit and Integration Testing: Experience Report	NA:NA:NA	2018
Gordon Fraser:Alessio Gambi:Marvin Kreis:José Miguel Rojas	Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game addresses this problem by letting students compete over code under test by either introducing faults ("attacking") or by writing tests ("defending") to reveal these faults. In this paper, we describe how we integrated Code Defenders as a semester-long activity of an undergraduate and graduate level university course on software testing. We complemented the regular course sessions with weekly Code Defenders sessions, addressing challenges such as selecting suitable code to test, managing games, and assessing performance. Our experience and our data show that the integration of Code Defenders was well-received by students and led them to practice testing thoroughly. Positive learning effects are evident as student performance improved steadily throughout the semester.	Gamifying a Software Testing Course with Code Defenders	NA:NA:NA:NA	2018
Kevin Buffardi:Pedro Valdivia:Destiny Rogers	Unit testing is widely adopted in software development to automate verification of individual functions. Likewise, computer science curricula are increasing their emphasis on teaching unit testing skills. However, coverage and other measurements of test quality have limitations and may even encourage poor practices when used as an assessment and/or feedback mechanism for students. In this paper, we introduce test accuracy as a measurement that compares how well unit tests perform at distinguishing acceptable from unacceptable function implementations. To study measurements of test quality, we evaluated an assignment where students (n=103) developed a class along with accompanying tests for each of its functions. Our quantitative analysis compares test accuracy with coverage and bug identification measurements by examining each of their relationships with a lack of bugs in the students' implementations. Of the three measurements, accuracy had the strongest positive correlation (p=.648, p<.001) with a lack of bugs in the entire program. When examining the subset of tests for a particular function-under-test, both accuracy and coverage were significant predictors of a lack of bugs within the corresponding function's implementation.	Measuring Unit Test Accuracy	NA:NA:NA	2018
Matthew Hertz	NA	Session details: Paper Session: Teaching Practice 2	NA	2018
Joe Michael Allen:Frank Vahid:Alex Edgcomb:Kelly Downey:Kris Miller	Modern program auto-graders enable new CS1 approaches. Instructors can easily create new assignments, with students receiving immediate score feedback and resubmitting assignments. With such auto-graders, one approach assigns many small programs (MSPs) each week instead of one large program (OLP). Earlier research showed MSPs in CS1 yielded happier students and better grades. Our university and other schools have switched to MSPs in CS1. This paper addresses common questions about MSPs. We analyzed submissions for a 76-student section of our MSP CS1 course. Given 7 MSPs per week each worth 10 points, students needed 50 points for full credit. Students averaged 17 minutes per MSP and 120 minutes per week. Given 7 days, students on average started 2.2 days ahead of the due date, with 37% starting at least 3 days ahead. 40% of students exceeded the required 50 points per week (no extra credit was given). 50% of students "pivoted" -- switching to another program before completing the previous one. 54% used MSPs to study for exams. Students used MSPs in ways beneficial to their learning and stress reduction: spending sufficient time, completing more than necessary, preparing for exams, and pivoting to avoid getting stuck. A common concern is that MSP CS1 students will do poorly in a CS2 using OLPs. We analyzed 5 quarters of CS2 and found MSP students do fine (in fact slightly better). These results encourage use and refinement of MSPs in CS1 and other courses.	An Analysis of Using Many Small Programs in CS1	NA:NA:NA:NA:NA	2018
Devon J. Merrill:Steven Swanson	Physical computing and building robots has important benefits for novice engineers and computer scientists. However, lab time and hardware debugging comes with a high cost of instructor time and effort. To reduce this workload, we implemented a computational design tool that simplifies printed circuit board (PCB) design and manufacture, assembly, and programming. We pilot tested our computational design tool in a one-unit introductory physical computing course for 196 CS1 students. The students designed, assembled, and programmed a custom robot with minimal instructor assistance. The robots are Arduino-based and each included a student designed PCB. The students assembled the robots from off-the-shelf electronic components according to automatically generated assembly instructions. Students programmed their robots using simple APIs that were automatically generated and customized for each unique robot. A minimum of two quarters after the completion of the course, grade point average (GPA) for the students who completed the course, was found to be 0.15 higher than a comparison group of similar student (n = 498, p<0.05). We present a detailed description of our computational design tool and course curriculum, identify challenges encountered by the students and instructional staff, make recommendations to increase student achievement, and address the scalability of the course.	Reducing Instructor Workload in an Introductory Robotics Course via Computational Design	NA:NA	2018
Christopher Lynnly Hovey:Lecia Barker:Margaret Luebs	Despite growing promotion of student-centered teaching, few studies have assessed how widely these practices have diffused throughout computer science (CS) higher education. Studies on teaching practices often treat instructor- and student-centered learning as being dichotomous. Recent research indicates that this reductionist model misinterprets what actually goes on in CS classrooms. For example, a recent study found that most CS faculty categorized their teaching practices as equally student-centered and instructor-centered. We contribute to this scholarship by reporting the results of a survey disseminated to 821 CS educators in 595 universities, colleges, and community colleges in the U.S. Participants were asked to report how frequently they employed several instructor- or student-centered teaching practices and tools during the most recent semester that they taught a specific course. Results indicate that when asked to reflect on specific behaviors within a certain timeframe, faculty reported using instructor-centered teaching practices, especially delivering content via lecture, more than student-centered practices. However, most faculty also reported using at least one student-centered technique, albeit less frequently, throughout the semester. This study found few differences across certain situational and demographic variables (e.g., institution type, tenure status, etc.). Faculty justify their teaching choices with concern for negative evaluations, desire for student learning, large enrollments, heavy teaching loads, and retaining underrepresented students.	Frequency of Instructor- and Student-Centered Teaching Practices in Introductory CS Courses	NA:NA:NA	2018
Eileen T. Kraemer	NA	Session details: Paper Session: Assessment 2	NA	2018
Sam Saarinen:Shriram Krishnamurthi:Kathi Fisler:Preston Tunnell Wilson	Generating questions to engage and measure students is often challenging and time-consuming. Furthermore, these questions do not always transfer well between student populations due to differences in background, course emphasis, or ambiguity in the questions or answers. We introduce a contributing student pedagogy activity facilitated by machine learning that can generate questions with associated answer-reasoning sets. We call this process Adaptive Tool-Driven Conception Generation. A tool implementing this process has been deployed, and it explicitly optimizes the process for questions that divide student opinion. In a study involving arrays in Java, this novel process: generates questions similar to expert-designed questions, produces novel questions that identify potential student misconceptions, and provides statistical estimates of the prevalence of misconceptions. This process allows the generation of quiz and discussion questions with less expert effort, facilitates a subprocess in the creation of concept inventories, and also raises the possibility of running reproduction studies relatively cheaply.	Harnessing the Wisdom of the Classes: Classsourcing and Machine Learning for Assessment Instrument Generation	NA:NA:NA:NA	2018
Peter Ohmann	Assessment of student knowledge is a crucial and challenging part of course design. Especially in computer science courses in the United States, written examinations are very common. While written exams offer a number of advantages in convenience and familiarity, they are also inflexible and prone to question misinterpretation. In contrast to written tests, oral exams offer the prospect of an interactive conversation where students can express their knowledge in a variety of ways while asking clarifying questions. In this paper, we present and assess our implementation of oral exams in an introductory computer science course. We describe the motivation for and resulting features of our design, including a simplified rubric style for equitable, on-the-fly grading. We also perform an assessment relative to more traditional written exams. We find the time commitment for instructors to be manageable and comparable to traditional exams. Through post-semester surveys, students self-report spending slightly more time studying for oral exams, but rate the difficulty as similar to written exams. Both qualitative and quantitative student feedback indicates that oral exams can be effective and well-received.	An Assessment of Oral Exams in Introductory CS	NA	2018
Brian Harrington:Jingyiran Li:Mohamed Moustafa:Marzieh Ahmadzadeh:Nick Cheng	Most computer science examinations tend to start with the easiest questions and progress towards the more difficult material. Whether this is because of the highly scaffolded nature of the course, an attempt to 'ease students in', or simply by convention, is unclear. However, there is a great deal of data from the psychology literature to suggest that human perception of the difficulty or discomfort of a task is disproportionately affected by the last part of the task completed. Therefore, is it possible that by structuring our exams in an easy-to-hard fashion, we are causing students to perceive the test as more difficult than it actually is? Could changing the question order allow us to change students' perception of their own achievement? What effect could this have on actual performance? This paper attempts to answer these questions by randomly assigning students to write exams ordered either easy-to-hard (referred as 'Easy-Difficult') or hard-to-easy ('Difficult-Easy), then ask them to predict their marks on per-question basis. We find that the question ordering has a small but not statistically significant effect on the performance, and virtually no effect on predicted marks when treating the entire class as one unstratified sample. However, the effect was significant for certain subgroups created via stratification. In particular, swapping the order of the questions may have hurt the performance of international students, but significantly raised both the performance and confidence of female students.	On the Effect of Question Ordering on Performance and Confidence in Computer Science Examinations	NA:NA:NA:NA:NA	2018
Eric Fouh	NA	Session details: Paper Session: CS1 1	NA	2018
June Mark:Kelsey Klein	ABSTRACT In 2016-17, the College Board launched the Advanced Placement (AP) Computer Science Principles (CSP) course and exam. The AP CSP course was designed with the goal of broadening participation in computer science, and aims to introduce students to the creative aspects of computing by engaging students in developing computational artifacts related to their interests. The big ideas of the course include programming, abstraction, algorithms, data and information, the Internet, and also the global and societal impacts of computing. With support from the National Science Foundation (NSF), the Beauty and Joy of Computing in New York City partnership created the Beauty and Joy of Computing (BJC) course that is aligned to the AP CSP framework and endorsed by the College Board. The partnership recruited over 100 NYC teachers to implement the course, provided professional development (PD) and implementation support, and conducted research on the course implementation and the effects on teachers and students. This paper reports on findings from the implementation of BJC as an AP CSP course in NYC from the 2016-17 school year. It addresses student performance on a content knowledge assessment, a survey of students' attitudes toward computer science, and the 2017 AP CSP exam. Given the intentional design of the BJC course and AP CSP framework to address diversity and equity, student outcomes are also disaggregated by gender and race/ethnicity.	Beauty and Joy of Computing: 2016-17 Findings from an AP CS Principles course	NA:NA	2018
Tom McKlin:Dana Wanzer:Taneisha Lee:Brian Magerko:Doug Edwards:Sabrina Grossman:Jason Freeman	The expansion of computer science into more classrooms invites researchers and evaluators to shift their focus from predominantly measuring student-level factors to measuring both student- and classroom-level variables. Research presented in this article uses multi-level modeling to study student-level factors within the larger context of classroom-level factors. Specifically, we analyze EarSketch, a collaborative and authentic learning tool, that introduces students to programming through music remixing, has previously been shown to increase student engagement, and increases learners' intentions to persist in computing. This article presents classroom implementation frameworks commonly used in math and science education but rarely, if ever, applied to computer science. The results from a multi-level modeling analysis show that classroom implementation correlates with students' intentions to persist in computing but may not be related to student attitudes toward computing or content knowledge acquisition. Further analysis reveals that one of the five classroom implementation factors, elaboration, emerges as the most salient. This article triangulates these results with qualitative findings from school administrators and teachers, and the article concludes by theorizing how classroom implementation frameworks may be adapted to meet the unique needs of computer science teachers, learners, researchers, evaluators, and curriculum developers.	Implementing EarSketch: Connecting Classroom Implementation to Student Outcomes	NA:NA:NA:NA:NA:NA:NA	2018
Yolanda A. Rankin:Jakita O. Thomas:India Irish	African American women who have little if any experience in computer programming prior to matriculation into college often struggle in introductory CS courses that emphasize programming from the outset. These same students feel underprepared and disadvantaged, oftentimes choosing to withdraw from such courses which contributes to the underrepresentation of African American women in CS. The challenge lies in creating equitable learning environments that bridge students' everyday experiences to fundamental CS concepts. In this experience report, we introduce the Dessert Wars Challenge, an alternative pedagogical strategy that leverages students' everyday experiences with food to forge meaningful connections to CS. We examine how African American women's participation in the Dessert Wars Challenge supports the development of their Computational Algorithmic Thinking (CAT) capabilities, the ability to design, implement, assess and adapt algorithms, and contributes to their retention in a college-level introductory CS course.	Food for Thought: Supporting African American Women's Computational Algorithmic Thinking in an Intro CS Course	NA:NA:NA	2018
Joseph Carroll-Miranda:Patricia Ordonez:Edusmildo Orozco:Milagros Bravo:Michelle Borrero:Luis Lopez:Gerriann Houser:Eliud Gerena:Dale Reed:Brenda Santiago:Agustin Corchado:Andreshka Santana	Exploring Computer Science (ECS) [1] spawned from the need to provide access to Computer Science to everyone in the US. The success and commitment to equity and diversity of the ECS curriculum in Latina/o communities inspired an interdisciplinary group of educators from the University of Puerto Rico to tackle the lack of K-12 CSE on the island. This group recognized the need to implode the self-perception of Latinas (os) as being foreign to computing [2] by educating them about Computer Science. Teachers were identified as the catalyst change agents to transform Puerto Ricans students into contributors and creators of technology through computing. The intended audience for this panel consists of practitioners and creators of curriculum looking for creative strategies to engage students from diverse cultural backgrounds in computing using their native language.	This is What Diversity Looks Like: Making CS Curriculum Culturally Relevant for Spanish-speaking Communities	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Mark Goadrich:Michael Goldweber:Matthew Jadud:S. Monisha Pulimood:Samuel A. Rebelsky	As outlined in the ACM Computer Science Curricula 2013 Guidelines section on Social Issues and Professional Practice, "Students must also be exposed to the larger societal context of computing to develop an understanding of the relevant social [and] ethical ... issues." In this panel, we demonstrate diverse approaches used to achieve this goal with respect to civic engagement. Drawing from experiences with non-major, introductory computing, mobile applications, software engineering, and interdisciplinary courses, we discuss how to move beyond surface-level discussions of ethical case studies toward an integration of civic engagement activities and personal reflection into standard computing curriculum.	Civic Engagement Across the Computing Curriculum	NA:NA:NA:NA:NA	2018
Miranda Parker:Jason T. Black:Helen H. Hu:Colleen M. Lewis	A meritocracy is an environment in which rewards are based solely on ability. The concept of privilege runs counter to this idea. Privilege is an unearned, unasked for advantage gained because of the way society views an aspect of your identity such as race, ethnicity, gender, perceived socioeconomic status, and language. Privilege can affect our students experiences in the classroom and beyond. However, privilege does not have to be viewed as an entitlement, but rather an opportunity to level the playing field for all people. In this session, we seek to visually display the world of privilege through adapting interactive activities known as a privilege walk and an asset walk. Come to learn and meet with other attendees who want to create a more inclusive society	Exploring our Privilege: Activities and Discussions	NA:NA:NA:NA	2018
Alison Clear:Allen S. Parrish:John Impagliazzo:Ming Zhang	This session presents an overview of the Computing Curricula 2020 (CC2020) project and provides a status report for the project. CC2020 seeks to generate a modern revision of the well-known CC2005 document by reflecting a more current view of computing, including the addition of new and emerging sub-disciplines like cybersecurity and data science. Further, CC2020 proposes a competency-based characterization of computing, as well as a bottom-up organization of computing into its sub-disciplines based on an analysis of competencies. This session imparts the results of the project to date and provides an opportunity for participants to infuse new ideas on the current computing disciplinary landscape, as well as input for the competency model it proposes.	Computing Curricula 2020: Introduction and Community Engagement	NA:NA:NA:NA	2018
Leigh Ann DeLyser:Joshua Elder:Alan Peterfreund:Stacey Sexton	In the summer of 2017, the National Science Foundation funded a cohort of Research Practice Partnership (RPP) projects focused on expanding access to Computer Science Education in the United States. Funded as one of the RPP projects was the RPPforCS project, a collaboration between Sagefox Consulting Group and CSforALL. The project operates as a community of practice for the individual RPP projects, holding regular webinars, producing a newsletter, and curating a discussion forum on Slack. In this special session we propose a structured poster session specifically for the RPP projects funded by the NSF.	Special Session: A Discussion of Research Practice Partnerships in CS Education	NA:NA:NA:NA	2018
Jean Ryoo:Gail Chapman:Julie Flapan:Joanna Goode:Jane Margolis:Christine Ong:Cynthia Estrada:Max Skorodinsky:Tiera Tanksley:Jamika D. Burge:Ryoko Yamaguchi:Frieda McAlear:Allison Scott:Alexis Martin:Sonia Koshy:Kamau Bobb:Lien Diaz	Efforts to broaden participation in computing address how systemic school structures, educator preparation, and curriculum can provide inclusive learning spaces for all students. The emerging multiplicity of scholarship in computer science (CS) education forwards diverse voices, perspectives, and positionalities, and together, provide a rich set of evidence-based narratives that can transform K-12 policies and practices. The four projects featured in this panel bring together CS education efforts with varying methodologies focused on equity-oriented pedagogies and learning for all youth across the US. This panel will focus not only on sharing the multi-pronged efforts of the featured projects, but also on developing a shared vision among participants and panelists for what equity" can and should be in the future of both SIGCSE and CS education as we celebrate SIGCSE's 50th anniversary. By highlighting the work of projects rather than individuals in this panel, audience members will have the opportunity to learn about how collaborative efforts create and examine contexts for equity in CS education across diverse stakeholders, while also providing a richer base for constructing visions of equity that go beyond mere platitudes, toward action items for broadening participation in computing.	Going Beyond the Platitudes of Equity: Developing a Shared Vision for Equity in Computer Science Education	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Roberto Hoyle	NA	Session details: Paper Session: Professional Tools & Practice	NA	2018
Ryan Rybarczyk:Lingma Acheson	Previous work demonstrated an effective strategy on how to teach two programming languages (Java and C++) side-by-side in a Computer Science II (CS2) course. The goal of this approach was twofold: first, to stress the importance of programming language selection as part of a career preparation module; secondly, to improve the overall success and satisfaction of the students. The results of this work led to additional questions, including how students (peers) could be leveraged to act as instructors in laboratory settings to aid in a peer-led learning exercise. One of the unique challenges associated with CS2 curricula is the varying degree of student experiences and expertise when entering the course. Course surveys have demonstrated that a subset of the student population enter the course with significant programming experience, while others report no prior experience with programming or programming languages. It is therefore the role of the instructor, to find the proper balance within the course in order to satisfy all students' learning needs. In the original work it was indicated, via student post-completion surveys, that peer-led discussion of coding "best practices" could improve overall student outcomes. This survey provided the motivation for this paper. In this paper, we propose using interactive peer-led code reviews to help introduce the students to widely accepted practices found throughout industry while allowing them to better master the material through a shared learning experience. We provide an outline for how this can be achieved in an existing course structure and discuss the outcomes from this study.	Interactive Peer-Led Code Reviews In CS2 Curricula	NA:NA	2018
David Liu:Andrew Petersen	Students learning to program often rely on feedback from the compiler and from instructor-provided test cases to help them identify errors in their code. This feedback focuses on functional correctness, and the output, which is often phrased in technical language, may be difficult to for novices to understand or effectively use. Static analyses may be effective as a complementary aid, as they can highlight common errors that may be potential sources of problems. In this paper, we introduce PyTA, a wrapper for pylint that provides custom checks for common novice errors as well as improved messages to help students fix the errors that are found. We report on our experience integrating PyTA into an existing online system used to deliver programming exercises to CS1 students and evaluate it by comparing exercise submissions collected from the integrated system to previously collected data. This analysis demonstrates that, for students who chose to read the PyTA output, we observed a decrease in time to solve errors, occurrences of repeated errors, and submissions to complete a programming problem. This suggests that PyTA, and static analyses in general, may help students identify functional issues in their code not highlighted by compiler feedback and that static analysis output may help students more quickly identify debug their code.	Static Analyses in Python Programming Courses	NA:NA	2018
Courtney Hsing:Vanessa Gennarelli	GitHub is a widely-used software development platform that supports version control, collaborative development, and project hosting. Currently, an estimated 18,000 educators use GitHub in programming classrooms. Depending on how GitHub is implemented in the classroom, students may rely on GitHub for activities such as, submitting assignments, collaborating on group projects, and receiving feedback. Despite GitHub's growing presence in programming classrooms, to date, few studies have explored how GitHub and the design of its implementation shape students' learning outcomes and classroom experiences. Building on previous research, we investigated how students in classrooms that used GitHub (GitHub classrooms), as opposed to classrooms that did not use GitHub (non-GitHub classrooms), differed across key variables. We surveyed 7530 students and 300 educators from GitHub and non-GitHub classrooms. Overall, we found that using GitHub in the classroom predicted better learning outcomes and classroom experiences. For example, students felt more prepared for the future, and they felt a greater sense of belonging in the classroom and in the field. Importantly, the design of implementation affected learning outcomes. For example, of the students who used GitHub in the classroom and received instructor feedback, those who received (versus did not receive) feedback via GitHub benefited more from the feedback. We discuss best practices for maximizing benefits to student learning when implementing GitHub in the classroom, study limitations, and future research directions. Our research is a step towards understanding how GitHub, a tool with a growing presence in programming classrooms, impacts students' learning experiences.	Using GitHub in the Classroom Predicts Student Learning Outcomes and Classroom Experiences: Findings from a Survey of Students and Teachers	NA:NA	2018
Craig Zilles	NA	Session details: Paper Session: Student Success	NA	2018
Efthimia Aivaloglou:Felienne Hermans	Programming education currently begins at the elementary school age. In this paper we are exploring what affects the learning performance of young students in programming classes. We present the results collected during an eight-week experimental Scratch programming course run in elementary schools. We emphasize factors that have been found to affect learning performance in adult students, including self-efficacy and motivation, and measure how they affect students of this age group. We further explore the students' view of programming as a career path, and measure the effects of the course, their performance, and the stereotypes that they assume for computer scientists. We find that students' intrinsic and extrinsic motivation and previous programming experience are important factors, being strongly correlated with their self-efficacy and their inclination towards a CS career. For female students only, we also find CS career orientation to be strongly correlated with their self-efficacy.	Early Programming Education and Career Orientation: The Effects of Gender, Self-Efficacy, Motivation and Stereotypes	NA:NA	2018
Diana R. Cukierman:Donna McGee Thompson:Wayne Sun	The Academic Enhancement Program (AEP) aims to help students succeed in their post-secondary studies by incorporating learning strategies and academic reflection activities into core first-year Computing Science (CS). Initially offered in a single CS course at our institution, the AEP has since been run as a required component in several CS courses. It has also been adapted collaboratively in other universities, and is customizable to other disciplines with plans to expand into other departments. We have regularly evaluated AEP based on students', academic advisors' and instructors' perceptions to support the continual improvement of the program. The current study relied on both students' self-perception and course performance data in two sections of the same course, with the same instructor, contents, and exams, where only students in one section participated in the program. Employing linear regression, this study sought to determine what non-trivial factors account for student success, measured by final exam scores. We determined that 22% of the variance in student success measured by final exam scores can be accounted for by basis of admission, admission GPA, number of credits registered in, and a newly defined construct embodying student CS programming background experience. While our model did not include AEP as a predictive factor, we are encouraged that 77% of AEP participants said that they would continue to use study skills learned in AEP in future courses. Implications for further investigation of learning support programs are discussed.	The Academic Enhancement Program: Assessing Programs Designed to Support Student Success	NA:NA:NA	2018
Iman YeckehZaare:Paul Resnick	In an introductory Python programming course intended for non-majors with little prior CS experience, with 85 male and 108 female students, we were able to capture electronic traces of students' studying and problem-solving. There was no significant difference in final exam scores by gender but we found that female students spent 12.1 more hours studying over the semester while male students on average earned 2.7 more points per hour of solving problem set questions over the first half of the semester. We were able to capture their learning behavior because students studied using the Runestone interactive textbook and completed weekly problem sets in the same platform for the first half of the semester. We analyzed these logs to determine three quantities for each student. One is study time, as measured by total use of Runestone outside of weekly assignments. The second is speed, as measured by the number of points students earned per hour working on problem sets. The third is earliness, as measured by how far before the deadlines they worked on weekly assignments. We conclude that male students were faster at completing problem sets early in the semester but that female students found an alternative pathway to success.	Speed and Studying: Gendered Pathways to Success	NA:NA	2018
Emily Lovell	NA	Session details: Paper Session: Instruments 2	NA	2018
Benjamin Xie:Matthew J. Davidson:Min Li:Andrew J. Ko	Tests serve an important role in computing education, measuring achievement and differentiating between learners with varying knowledge. But tests may have flaws that confuse learners or may be too difficult or easy, making test scores less valid and reliable. We analyzed the Second Computer Science 1 (SCS1) concept inventory, a widely used assessment of introductory computer science (CS1) knowledge, for such flaws. The prior validation study of the SCS1 used Classical Test Theory and was unable to determine whether differences in scores were a result of question properties or learner knowledge. We extended this validation by modeling question difficulty and learner knowledge separately with Item Response Theory (IRT) and performing expert review on problematic questions. We found that three questions measured knowledge that was unrelated to the rest of the SCS1, and four questions were too difficult for our sample of 489 undergrads from two universities.	An Item Response Theory Evaluation of a Language-Independent CS1 Knowledge Assessment	NA:NA:NA:NA	2018
Monica M. McGill:Adrienne Decker:Tom McKlin:Kathy Haynie	A growing body of evidence indicates that there is a deep effect of noncognitive factors on academic achievement and learning. In this study, we analyzed a set of 31 evaluation instruments designed to measure noncognitive constructs (e.g., self-efficacy, confidence, motivation) within computing education. Using the Lee and Shute framework, we assigned each of the 115 unique constructs found in the instruments into one of the four components (Student Engagement, Learning Strategies, School Climate, Social-familial Influences) and their subcomponents to determine which constructs are most frequently measured. We found that the majority of constructs were designed to measure Student Engagement (Affect and Cognition) and School Climate (Teacher Variables). Constructs measuring Learning Strategies and Social-Familial Influences (e.g., homework strategies, peer influences) occur the least. This study may enable further discussions of what noncognitive factors are/are not currently being measured within the computing education community.	A Gap Analysis of Noncognitive Constructs in Evaluation Instruments Designed for Computing Education	NA:NA:NA:NA	2018
Gayithri Jayathirtha:Yasmin B. Kafai	Just over a decade ago, various electronic textile construction kits have emerged with Arduino-based microcontrollers, sensors, and actuators that can be sewn together with conductive thread to create wearables augmented with new functionalities. These kits were designed to broaden participation in and perspectives about computing along with introducing learners to powerful ideas about circuitry and coding. In this paper, we synthesize 46 studies that have introduced crafts, circuitry, and coding concepts with e-textiles in K-16 education. We found that e-textiles have been successful in broadening participation and increasing interest in computing for many youth and adults, especially from underrepresented groups, inside and outside of school. While the e-textiles construction kits have been successful in deepening learning of circuitry concepts, learning of computer science, especially advanced concepts, has been far less attended to with the exception of projects designed by undergraduate students with already significant disciplinary expertise. In the discussion, we suggest directions for future research such as bringing more computing into e-textile designs, creating assessments to capture coding and circuitry learning, and developing models for more advanced projects to leverage the potential of e-textiles for computer science education.	Electronic Textiles in Computer Science Education: A Synthesis of Efforts to Broaden Participation, Increase Interest, and Deepen Learning	NA:NA	2018
Sotirios Kentros	NA	Session details: Paper Session: Security 1	NA	2018
Pranita Deshpande:Cynthia B. Lee:Irfan Ahmed	Peer instruction pedagogy is a student-centric approach that encourages students to read lecture material before coming to class and engages them in class via group discussion and preplanned conceptual questions. Peer instruction has shown promising results in core computer science courses such as Theory of Computation and Computer Architecture, as well as reducing failure rates and improving student retention in computer science major. This paper presents the results of the first-ever attempt to replicate these results in a cybersecurity course, using an action research methodology to implement and evaluate peer instruction in a semester-long cybersecurity course, Introduction to Computer Security. The evaluation consists of quizzes, subjective exams, peer instruction questions, and attitudinal surveys gathered over two control semesters and one peer instruction condition semester. We find evidence of learning gains during group discussion and improvements in dropout and failure rates compared to traditional lecture classes. In attitudinal surveys, most students report that they would recommend that other instructors use peer instruction.	Evaluation of Peer Instruction for Cybersecurity Education	NA:NA:NA	2018
Naja A. Mack:Kevin Womack:Earl W. Huff Jr.:Robert Cummings:Negus Dowling:Kinnis Gosha	Computing is not only a fundamental part of our daily lives - our national security depends on it. It is essential that members of the Reserve Officer Training Corps (ROTC) be well-versed in computing techniques designed to combat cyber-attacks that continually improve in sophistication and frequency levels. Through computer science education, prospective military leaders are being taught the critical and analytical thinking skills necessary to address these threats. This paper outlines and discusses how underrepresented minority Naval Reserve Officer Training Corps (NROTC) midshipmen, with the majority having little-to-no programming skills or background, were taught the foundational aspects of computer science and exposed to specific cybersecurity concepts in a 15-week program. The program produced many insightful outcomes, one being the development of a tool that collected and analyzed publicly available social media data through the application of data mining algorithms and techniques. Additionally, interviews, which were conducted upon the completion of the program, documented notable findings on the program's effectiveness and on key concepts for teaching computer science to minority beginners.	From Midshipmen to Cyber Pros: Training Minority Naval Reserve Officer Training Corp Students for Cybersecurity	NA:NA:NA:NA:NA:NA	2018
Pranita Deshpande:Irfan Ahmed	Concept maps are a well-known pedagogical tool for organizing and representing knowledge and developing a deep understanding of concepts. Unfortunately, the grading of concept maps tends to be manual and tedious thereby, posing serious limitation for an instructor to use them in class efficiently. To automate the assessment and grading, the topology and structural features of concept maps are utilized. However, they have never been explored for cybersecurity education. This paper evaluates the effectiveness of topological scoring of the concept maps for two cybersecurity courses: digital forensics, and SCADA system security. We create a dataset of 41 high-quality concept maps developed with expert knowledge. We utilize waterloo rubric to manually validate the quality of the concept maps based-on their contents and further compare the rubric outcome (obtained via manual analysis) with the automated topological scoring of the maps. The evaluation results show that the topological scoring is promising. However, it is not equally effective and warrants for advanced techniques to better utilize the topology of the maps. The dataset is made publicly available for further research on this topic.	Topological Scoring of Concept Maps for Cybersecurity Education	NA:NA	2018
Stephen H. Edwards	NA	Session details: Paper Session: Misconceptions	NA	2018
Leo C. Ureel II:Charles Wallace	The introductory programming lab, with small cycles of teaching, coding, testing, and critique from instructors, is an extraordinarily productive learning experience for novice programmers. We wish to extend the availability of such critique through automation, capturing the essence of interaction between student and instructor as closely as possible. Integrated Development Environments and Automated Grading Systems provide constant feedback through static analysis and unit testing. But we also wish to tailor automated feedback to acknowledge commonly recurring issues with novice programmers, in keeping with the practice of a human instructor. We argue that the kinds of mistakes that novice programmers make, and the way they are reported to the novices, deserve special care. In this paper we provide examples of early programming antipatterns that have arisen from our teaching experience, and describe different ways of identifying and dealing with them automatically through our tool WebTA. Novice students may produce code that is close to a correct solution but contains syntactic errors; WebTA attempts to salvage the promising portions of the student's submission and suggest repairs that are more meaningful than typical compiler error messages. Alternatively, a student misunderstanding may result in well-formed code that passes unit tests yet contains clear design flaws; through additional analysis, WebTA can identify and flag them. Finally, certain types of antipattern can be anticipated and flagged by the instructor, based on the context of the course and the programming exercise; WebTA allows for customizable critique triggers and messages.	Automated Critique of Early Programming Antipatterns	NA:NA	2018
Kathryn M. Rich:Carla Strickland:T. Andrew Binkowski:Diana Franklin	Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.	A K-8 Debugging Learning Trajectory Derived from Research Literature	NA:NA:NA:NA	2018
Maria Kallia:Sue Sentance	Computer programming is one of the most researched subjects within computer science education; within this much attention has been focused on exploring the difficulties and common misconceptions that students experience when learning to program. The study reported here has two aims: firstly, to investigate students' misconceptions around functions by setting up a programming test of advancing difficulty and complexity based on the Bloom and Solo taxonomies, and secondly, to explore the impact that misconceptions have on students' self-efficacy in programming, along with students' self-evaluation and self-efficacy in computer science. Our study revealed seven misconceptions in the area of functions, three of which have never before been reported in the literature, to our knowledge. Additionally, the results suggest that misconceptions do not only prohibit students' progress and learning but have a significant impact on students' self-efficacy in programming.	Learning to use Functions: The Relationship Between Misconceptions and Self-Efficacy	NA:NA	2018
N. Burçin Tamer	NA	Session details: Paper Session: Accessibility	NA	2018
Catherine M. Baker:Cynthia L. Bennett:Richard E. Ladner	As diversity efforts in computer science begin to recognize disabled programmers as an underrepresented group, we step back to chronicle the experiences of blind programmers in higher education. Through a survey and follow-up interviews with 10 blind programmers, we share reflections and barriers important for the computing education community to understand as we attempt to welcoming cultures for disabled programmers. Our findings illuminated a variety of barriers blind programmers faced in college and the impact that they had on their ability to succeed in the field. We found that barriers permeate all parts of these blind student's' education from accessing the materials and doing the homework to working with professors. These barriers increased feelings of the isolation, decreased motivation especially when tasks were inaccessible, and prevented them from learning all the concepts covered in their degree program.	Educational Experiences of Blind Programmers	NA:NA:NA	2018
Andreas Stefik:Richard E. Ladner:William Allee:Sean Mealin	The College Board's AP Computer Science Principles (CSP) content has become a major new course for introducing K-12 students to the discipline. The course was designed for many reasons, but one major goal was to broaden participation. While significant work has been completed toward equity by many research groups, we know of no systematic analysis of CSP content created by major vendors in relation to accessibility for students with disabilities, especially those who are blind or visually impaired. In this experience report, we discuss two major actions by our team to make CSP more accessible. First, with the help of accessibility experts and teachers, we modified the entire Code.org CSP course to make it accessible. Second, we conducted a one-week professional development workshop in the summer of 2018 for teachers of blind or visually impaired students in order to help them prepare to teach CSP or support those who do. We report here on lessons learned that are useful to teachers who have blind or visually impaired students in their classes, to AP CSP curriculum providers, and to the College Board.	Computer Science Principles for Teachers of Blind and Visually Impaired Students	NA:NA:NA:NA	2018
Emmanuel Schanzer:Sina Bahram:Shriram Krishnamurthi	Most programmers rely on visual tools (block-based editors, auto-indentation, bracket matching, syntax highlighting, etc.), which are inaccessible to visually-impaired programmers. While prior language-specific, downloadable tools have demonstrated benefits for the visually-impaired, we lack language-independent, cloud-based tools, both of which are critically needed. We present a new toolkit for building fully-accessible, browser-based programming environments for multiple languages. Given a parser that meets certain specifications, this toolkit will generate a block editor familiar to sighted users that also communicates the structure of a program using spoken descriptions, and allows for navigation using standard (accessible) keyboard shortcuts. This paper presents the toolkit and a first evaluation of it. While the toolkit allows for full editing of code, we chose to focus strictly on navigation for this evaluation, using the navigation-only study design of Baker, Milne and Ladner. Visually-impaired programmers completed several tasks with and without our tool, and we compared their results and experience. Users had improved accuracy when completing tasks, were significantly better able to orient when reading code, and felt better about completing the tasks when using the tool. Moreover, these improvements came with no significant change in task completion time over plain text, even for experienced programmers who navigate text using screen readers set to high words-per-minutes.	Accessible AST-Based Programming for Visually-Impaired Programmers	NA:NA:NA	2018
Afonso Sales	NA	Session details: Paper Session: Session 5G: Curriculum Issues 2	NA	2018
David Joyner:Ryan Arrison:Mehnaz Ruksana:Evi Salguero:Zida Wang:Ben Wellington:Kevin Yin	Large undergraduate CS courses receive thousands of code submissions per term. To help make sense of the large quantities of submissions, projects have emerged to dynamically cluster student submissions by approach for writing scalable feedback, tailoring hints, and conducting research. However, relatively little attention has been paid to the value of these tools for informing revision to core course materials and delivery methods. In this work, we applied one such technology-Sense, the eponymous product of its company-to an online CS1 class delivered simultaneously for credit to on-campus students and for free to MOOC students. Using Sense, we clustered student submissions to around 70 problems used throughout the course. In this work, we discuss the value of such clustering, the surprising trends we discovered through this process, and the changes made or planned to the course based on the results. We also discuss broader ideas on injecting clustering results into course design.	From Clusters to Content: Using Code Clustering for Course Improvement	NA:NA:NA:NA:NA:NA:NA	2018
Robert Ball:Linda Duhadway:Kyle Feuz:Joshua Jensen:Brian Rague:Drew Weidman	Creating curriculum with an ever-changing student body is difficult. Faculty members in a given department will have different perspectives on the composition and academic needs of the student body based on their personal instructional experiences. We present an approach to curriculum development that is designed to be objective by performing a comprehensive analysis of the preparation of declared majors in Computer Science (CS) BS programs at two universities. Our strategy for improving curriculum is twofold. First, we analyze the characteristics and academic needs of the student body by using a statistical, machine learning approach, which involves examining institutional data and understanding what factors specifically affect graduation. Second, we use the results of the analysis as the basis for applying necessary changes to the curriculum in order to maximize graduation rates. To validate our approach, we analyzed two four-year open enrollment universities, which share many trends that help or hinder students' progress toward graduating. Finally, we describe proposed changes to both curriculum and faculty mindsets that are a result of our findings. Although the specifics of this study are applied only to CS majors, we believe that the methods outlined in this paper can be applied to any curriculum regardless of the major.	Applying Machine Learning to Improve Curriculum Design	NA:NA:NA:NA:NA:NA	2018
Sander Valstar:William G. Griswold:Leo Porter	While it is widely believed that taking a class's prerequisites is critical for success, less is known about how proficiency with the prerequisite knowledge from those courses affects performance in later courses. Specifically, it is unclear how well students understand material from prerequisite courses and whether that understanding may impact their outcomes in the subsequent course. Additionally, in subsequent courses, do students strengthen their knowledge from prerequisite courses and, if they do, does that improvement matter for the subsequent course? This study examines the prerequisite knowledge of 208 students in an upper-division data structures class at a large North American research university. Prerequisite proficiency on entry to the course was surprisingly low, with nearly a third of students demonstrating low proficiency and only a quarter high proficiency. Students modestly improved their proficiency during the term, lifting a third of those with low proficiency to at least medium proficiency. Overall, final exam performance was significantly correlated with prerequisite knowledge. For those with low initial proficiency, improvement in proficiency was significantly correlated with performance on the final. These results suggest that more attention needs to be placed on reinforcing prerequisite knowledge for those with low proficiency.	The Relationship between Prerequisite Proficiency and Student Performance in an Upper-Division Computing Course	NA:NA:NA	2018
Marty J. Wolf:Don Gotterbarn:Michael S. Kirkpatrick	This special session will involve three related components. It will begin with a history of the ACM Code of Ethics and Professional Conduct (the Code), its evolving presence in the computing curriculum guidelines over time, and its documented use outside of academe. This will lead into an overview of the major changes to the Code that occurred in the most recent update. The third component and primary focus of the session will be to work with participants to identify ways that ACM and the ACM Committee on Professional Ethics (COPE) can help Computer Science educators integrate the Code as broadly as possible into diverse programs, ranging from Kindergarten to PhD-level. The outcome of the session would be a preliminary set of guidelines for programs and departments to adopt the Code, potential challenges to be addressed when formalizing those guidelines, and suggested approaches to resolve these difficulties. If attendance is sufficiently large, we would adopt a jigsaw model, breaking into smaller focus groups that are tasked with distinct portions of the Code. Each group reports back at the end, and members of COPE will collate the results into a document for future distribution and work.	ACM Code of Ethics: Looking Back and Forging Ahead	NA:NA:NA	2018
Amardeep Kahlon:Deborah Boisvert:Louise Lyon:Melanie Williamson:Wendy DuBow	While computer science (CS) jobs are growing rapidly, universities are not producing enough CS graduates to fill a projected shortage of almost a million workers by 2020 [1]. To add to this problem, there is a striking lack of diversity in the graduates of CS programs nationwide [2]. Of the degrees awarded, the overwhelming number - 80% - were awarded to males, while only 5% went to African-Americans, 18% to Asians, and 9% to Hispanics [3, 2]. Bringing community colleges (CCs) into the fold will enable us to confront this projected workforce shortage [2]. More importantly, it will enable us to diversify one of the most important fields of our time, computer and information sciences. Over half of community college (CC) students are non- white, and more than half of all Hispanic and Black undergraduates start at community college [4].	Four Models for Including Community Colleges in Broadening Participation: A Call to Action	NA:NA:NA:NA:NA	2018
Colleen M. Lewis:Wendy M. DuBow:Kyla McMullen	Many SIGCSE attendees are committed to inclusive teaching practices and creating an inclusive culture within their classrooms; yet, advocating for and sustaining these initiatives may require having difficult conversations with our colleagues and students. Understandably, many faculty are unsure about how to talk about sensitive topics such as race and gender with their colleagues and students. Research suggests that practicing some of these difficult conversations is essential to achieve the goals of inclusive teaching and culture. In our well attended session at SIGCSE in 2018, attendees learned strategies for responding to bias in academic settings. This was facilitated by playing two rounds of a research-based game developed by the NSF project CSTeachingTips.org (#1339404). This session will extend the work begun last year by helping attendees to replicate this activity with their colleagues. In this special session, attendees will first play the game to practice those strategies in small groups and will then receive facilitation tips and guidance for conducting this activity on their own. All attendees will receive a printed copy of the game and a link to download and print more copies.	Leading Conversations about Microaggressions, Bias, and Other Difficult Topics	NA:NA:NA	2018
Alison Derbenwick Miller:Christine Alvarado:Mehran Sahami:Elsa Villa:Stuart Zweben	This panel focuses on the challenges of collecting and analyzing data relating to retention of students in undergraduate computer science education programs. The panelists will share learnings and recommendations from the final report of the ACM Retention Committee and share their individual perspectives on data collection challenges, promising interventions, and recommendations for actively addressing retention for all students.	Wrestling with Retention in the CS Major: Report from the ACM Retention Committee	NA:NA:NA:NA:NA	2018
Ryan McFall:Zachary Kurmas:Phillip Conrad:Dennis Frailey	We believe that more Computing faculty should spend some time in industry in order to experience for themselves the types of jobs their students are likely to take at graduation and throughout their careers. Each panelist has spent at least one sabbatical in industry and found the experience to be far more beneficial than anticipated. We all found that our sabbatical experiences helped us to (1) develop our skills, (2) discover and practice the skills that are currently being used in industry, (3) gain credibility with our students, (4) improve our understanding of the computing profession beyond software development, and (5) build relationships with local businesses. Many of us returned to the classroom thinking "I can't believe they let me teach college without any industry experience".	Why and How to Spend a Sabbatical in Industry	NA:NA:NA:NA	2018
Leigh Ann Delyser	NA	Session details: Session: [email protected] - CS0	NA	2018
Thomas Babbitt:Charles Schooler:Kyle King	There is an immense interest in teaching computer science concepts- and programming specifically - to everyone. The United States Military Academy at West Point has required every student, regardless of major, to pass a computer science zero (CS0) course for the last 50 years: From punch cards to Python. We present a history of our CS0 course and the lessons learned from the most recent redesign of the course. We review the last decade of student assessments and how they influenced the latest iteration. We contrast the expectations of students in a CS0 course with those in a CS1 course. We discuss the national efforts to make CS accessible to all and explore the challenges unique to a CS0 course. We demonstrate similarities between our course and the Advance Placement CS Principles and show where differences are justified. We review the relevant pedagogical research for CS0 and present lessons learned over multiple iterations of the course. Based on our current course review and implementation, we believe that Computer Science for everyone is attainable and relevant to the needs of every student.	Punch Cards to Python: A Case Study of a CS0 Core Course	NA:NA:NA	2018
Barbara Anthony	NA	Session details: Paper Session: Physical Computing	NA	2018
Alexandra Gendreau Chakarov:Mimi Recker:Jennifer Jacobs:Katie Van Horne:Tamara Sumner	This experience report describes two iterations of a curriculum development process in which middle school teachers worked with our research team to collaboratively design and enact instructional units where students used sensors to investigate scientific phenomena. In this report, we examine the affordances of using a sensor platform to support the integration of disciplinary learning and computational thinking (CT) aligned with Next Generation Science Standards and the CT in STEM Taxonomy developed by Weintrop and colleagues. In the first unit, students investigated the conditions for mold growth within their school using a custom sensor system. After analyzing implementation experiences and student interest data, our team engaged in another round of co-design to develop a second instructional unit. This unit uses a different sensor system (the micro:bit) which supports additional CT in STEM practices due to its block-based programming interface and its real time data display. For the second unit we selected a different phenomenon: understanding and designing maglev trains.	Designing a Middle School Science Curriculum that Integrates Computational Thinking and Sensor Technology	NA:NA:NA:NA:NA	2018
Gabriella Anton:Uri Wilensky	National and state educational initiatives are increasingly prioritizing computer science and computational thinking as valued sets of skills and practices. However, despite ongoing efforts to broaden participation in computing, the field faces increasing underrepresentation of women and other racial and ethnic groups. In this paper, we argue that physical computing can provide rich, varied entryways into computing practices, and that kits that support social or collaborative use may be more compelling for underrepresented groups. We present the design of a scaled-up physical computing kit, called StegaCircuits, which we created to foster more social, exploratory introductions to computing. We present preliminary data collected during user tests at a Maker Faire that suggest StegaCircuits supports social introductions to physical computing through multi-user interaction. Finally, we highlight promising facets of the design that may positively impact cognitive and emotional responses to computing fields.	One Size Fits All: Designing for Socialization in Physical Computing	NA:NA	2018
Brian Krupp:Andrew Watkins	This paper presents our experience implementing a newly designed introduction to computing course for first year undergraduate students. The redesigned course focuses on the use of Raspberry Pi microcomputers as a common computing platform in order to encourage student experimentation and fun in a relatively low-cost environment. The course we describe represents a departure at our university from a traditional first-semester introduction to computing which emphasized foundational technical and mathematical skills but less exploration of the field of computing in a more wholistic manner. Our new course focuses on exposure to computing through experimentation. Additionally, it emphasizes community building among the students as well as affording them the opportunity to bring their creativity to bear in a final project showcase. As a result, the course is proving to be attractive not just to traditional computing majors but to a wider swath of the university community. This paper describes the topics selected in the redesign of the course, a summary of the labs involved, a discussion of assignments, and a description of the final project process. We discuss feedback received from students and the overall perception of the course among students and faculty. We also reflect on our experiences from redesigning the course and provide advice for those wishing to adopt a similar introductory course.	CS0: Introducing Computing with Raspberry Pis	NA:NA	2018
Victoria Hong	NA	Session details: Paper Session: Professional Skills	NA	2018
Jennifer K. Olsen:Armando Fox	A recent in-class exam in a software engineering course included a section in which students had to write code and/or tests under conditions they might face on real software engineering projects, including complex, multi-part coding questions in which later parts of the question build on earlier parts. To avoid "cascading penalties" on later questions that build on earlier ones, students could reveal the answer for any question during the exam for a "reveal penalty": If the student identified the correct place in the code to copy and paste the revealed answer, they would get 20% of the question points. That is, by simply revealing every answer and copy-pasting it correctly, even the weakest student should be able to achieve 20% of the points for the coding portion of the exam. In this paper, we study how students used this mechanism. Surprisingly, some students chose to take zero points for certain questions rather than revealing the answer, and some who asked for an answer to be revealed were unable to correctly incorporate it to get the question correct. We also find a correlation between student scores on the non-coding multiple-choice section of the exam, which had no hints/reveals available, and the coding section, even though students who performed poorly on the non-coding first half of the exam should have been able to score well on the coding part by using the reveal mechanism. That is, weak students did not benefit as much as would be expected from revealable answers. Pedagogical interpretation of these results informs our future use of the "buy a hint" format for coding-based exams.	Usage of Hints on Coding-Based Summative Assessments	NA:NA	2018
Lori Pollock	Computer science researchers spend significant time writing and presenting their research ideas to conference audiences, reviewers, funding agencies, collaborators, and other technical and general audiences. Good communication skills can increase a researcher's effectiveness and efficiency, while currently most students rely on their PhD mentor, technical writing courses, tutors, or self-teaching to improve their communication skills. This paper details a graduate level course to provide graduate students with a collaborative practicum in building strong communication skills for a technical research career in computer science. Each class meeting is activity-based, using collaborative small-group analysis of writing and presentation samples and peer reviewing with rubrics created by the students and refined by the instructor. Assignments require students to stretch their thinking and practice their communication skills. Students write weekly reflect blog entries guided by prompts to promote reflection about their communication experiences, challenges and successes. We summarize and reflect on initial outcomes from two instantiations of the course.	A Collaborative Practicum Targeting Communication Skills for Computer Science Researchers	NA	2018
Amanpreet Kapoor:Christina Gardner-McCune	Professional development is critical for preparing undergraduate CS students for their future careers. Industry internships offer students pathways for professional development. However, little is empirically known about the impact industry-based internships have on CS students' career paths as well as the effectiveness of CS degree programs in preparing students for these professional development opportunities. In this paper, we present a thematic analysis of open-ended survey responses of 40 CS undergraduate students in the US who participated in an internship. This study aimed to understand the impact that professional internships have on: CS students' career goals, students' perceptions of the gaps between academia and industry, and students' strategies for professional success. We found four themes that describe the impact of internships on CS students. Internships (1) strengthened students' commitment to CS degrees and careers; (2) encouraged exploration of CS careers and industries; (3) promoted personal/professional growth; and (4) developed awareness of professional expectations. We also analyzed students' perception of the curriculum's effectiveness and found that students were strategically working to improve their technical skills outside of coursework to secure employment. These findings have the potential to retain students in computing and reduce the gaps between academia and industry, thereby increasing CS students' competitiveness in the workforce.	Understanding CS Undergraduate Students' Professional Development through the Lens of Internship Experiences	NA:NA	2018
Bob Edmison	NA	Session details: Paper Session: Attitudinal	NA	2018
Dana Wanzer:Tom McKlin:Doug Edwards:Jason Freeman:Brian Magerko	Students who have positive attitudes towards computing are more likely to intend to persist in computing and ultimately persist in computing. Thus, this study describes the development and assessment of the Attitudes Towards Computing Scale, which was developed based on Williams et al. [20] Computer Science Attitude Survey. Assessment of the survey involved testing its reliability, dimensionality, and validity. Internal consistency reliability of the subscales and the total scale were strong. However, dimensionality tests using factor analysis did not support a five-factor structure; rather, the factor analyses suggested either using one item per subscale or mean composites of the subscales to form a total score of attitudes towards computing. This suggests there may not be meaningful differences among subscales. Tests of criterion validity show that the short-form of the scale, using a mean composite score of either one item per subscale or the composites of the subscales themselves, predict students' computing knowledge and intentions to persist just as well as using the subscales. Furthermore, an example is shown why using the subscales may be problematic due to multicollinearity issues. Recommendations for improving scales, such as not using reverse-coded items and having a sufficient number of items that differentiate between subscales, are provided. Ultimately, this study provides the computer science field with a scale of attitudes towards computing that demonstrates moderate validity and offers an example of how to assess other scales used in computer science education.	Assessing the Attitudes Towards Computing Scale: A Survey Validation Study	NA:NA:NA:NA:NA	2018
Hadi Hosseini:Laurel Perweiler	The use of gameful activities in education has been widely celebrated in recent years as an effective pedagogical method in engaging students, exciting cognitive abilities, and promoting mastery. Despite the popularity of game-based learning, to date, little has been done to analyze the impacts of introducing such interventions on students and instructors alike. We focus on hybrid teaching strategies that blend educational games with instructional scaffolding in introductory computer science teaching. We assess the effectiveness of incorporating these teaching strategies by leveraging various empirical evaluation techniques and study their impacts from three different dimensions: students' point of view, instructors' perspective, and students' performance. In addition, we establish correlations between students' approaches to learning and game-based learning, and further discuss how learning concentration and curiosity relate to students' perception of game-based activities.	Are You Game?	NA:NA	2018
Merilin Säde:Reelika Suviste:Piret Luik:Eno Tõnisson:Marina Lepp	A large number of students drop out in the first year of their Bachelor's studies in Computer Science (CS). It is a problem in many countries worldwide. The aim of this study was to develop a scale for measuring the motivation and perception factors that influence students' decision to start studying Computer Science (CS), and to find the differences between these factors. A questionnaire was conducted based on expectancy-value theory to measure students' motivation and perception. Data were collected from 140 students who started their Bachelor studies in CS at a university in Estonia. The scale, named FICSS (Factors Influencing Computer Science Studies), was conducted and validated using exploratory and confirmatory factor analyses. Two models were identified: a four-factor model describing students' motivation ("Intrinsic value", "Utility value", "Social influences" and "Time for family") and a five-factor model ("Satisfaction with choice of specialty", "Social dissuasion", "Demanding work", "Salary and job security" and "Social status") that describes students' perception. "Intrinsic value" and "Utility value" were the highest-rated motivational factors. The lowest-rated factor was "Social influences". Among the perception factors, the factors with the highest means were "Satisfaction with choice of specialty" and "Salary and job security" while "Social dissuasion" was rated lowest.	Factors That Influence Students' Motivation and Perception of Studying Computer Science	NA:NA:NA:NA:NA	2018
Carlos Cabrera	NA	Session details: Paper Session: Security 2	NA	2018
Monique Mezher:Ahmed Ibrahim	There is a lack of hands-on exercises in cryptanalysis offered at the university level for a variety of reasons. One reason is the high amount of computations needed to complete cryptanalysis attacks. However, enabling students to perform fixed prefix SHA-1 collision attacks on PDFs does not require any advanced computation power. This paper presents a hands-on exercise for university students and professionals to generate SHA-1 collisions. The exercise shows how SHA-1 is vulnerable to fixed-prefix collisions, and how students are able to leverage existing tools to create their own SHA-1 collisions between arbitrary PDF files. In our two classroom runs of the exercise, over 90% of the students who performed the exercise found it to be a useful tool to reinforce their knowledge of SHA-1 collisions. The exercise increases awareness about hash collisions and urges caution when dealing with digitally signed PDFs that utilize SHA-1 as their hashing mechanism. To our knowledge, this is the first exercise designed to introduce practical SHA-1 collisions for students in the classroom.	Introducing Practical SHA-1 Collisions to the Classroom	NA:NA	2018
Ákos Lédeczi:MiklÓs MarÓti:Hamid Zare:Bernard Yett:Nicole Hutchins:Brian Broll:Péter Völgyesi:Michael B. Smith:Timothy Darrah:Mary Metelko:Xenofon Koutsoukos:Gautam Biswas	The paper presents RoboScape, a collaborative, networked robotics environment that makes key ideas in computer science accessible to groups of learners in informal learning spaces and K-12 classrooms. RoboScape is built on top of NetsBlox, an open-source, networked, visual programming environment based on Snap! that is specifically designed to introduce students to distributed computation and computer networking. RoboScape provides a twist on the state of the art of robotics learning platforms. First, a user's program controlling the robot runs in the browser and not on the robot. There is no need to download the program to the robot and hence, development and debugging become much easier. Second, the wireless communication between a student's program and the robot can be overheard by the programs of the other students. This makes cybersecurity an immediate need that students realize and can work to address. We have designed and delivered a cybersecurity summer camp to 24 students in grades between 7 and 12. The paper summarizes the technology behind RoboScape, the hands-on curriculum of the camp and the lessons learned.	Teaching Cybersecurity with Networked Robots	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Maximilian Zinkus:Oliver Curry:Marina Moore:Zachary Peterson:Zoë J. Wood	As frequent users of social networking applications, middle and high school students are well-suited for curricular interventions that leverage these technologies. Allowing students to see "behind the curtain" of these applications provides them with a unique opportunity to better understand the discipline of computer science upon which these technologies are built and influences their perceptions of computer security and privacy. We present a novel social networking simulation that allows students to create a social network account, including profile data and images, and to manage privacy settings and friend connections. The platform, named Fakesbook, presents students with a visualization of the social network as a graph, enabling them to observe the spread of profile data (theirs and others') depending on friend connections and choices of privacy settings. We additionally present our lab curriculum which uses Fakesbook to enable active learning and adversarial thinking to engage students and build agency with regard to privacy and computing concepts. We deployed and, over several years, evaluated our platform and curriculum with hundreds of students from a diverse set of backgrounds at educational events designed to introduce these populations to computer science, cybersecurity, and privacy. Survey results indicate that students gained or deepened their understanding of online privacy and security and that 86% of participants found that Fakesbook helped them "think about privacy and computer security."	Fakesbook: A social networking platform for teaching security and privacy concepts to secondary school students	NA:NA:NA:NA:NA	2018
Meg Ray	NA	Session details: Paper Session: Computational Thinking 2	NA	2018
Megean Garvin:Heather Killen:Jan Plane:David Weintrop	Computational thinking (CT) is increasingly becoming a part of the K-12 educational landscape. While high schools with computer science teachers or technology coaches on staff are well positioned to help teachers integrate computational thinking into instruction, early childhood through middle schools (grades p-8) are often less well equipped. Further, the concept of CT is often poorly defined, especially as it relates to younger learners. Despite these challenges, teachers are being asked to integrate CT into other content lessons. To understand if and how this is happening, we conducted a statewide survey of primary (early childhood through middle school) Maryland teachers. The survey asked the teachers about their conceptualization of CT, CT resources they rely on, and their comfort levels to provide effective CT instruction for their students. The results of our survey demonstrate that teachers hold diverse views of the concept of CT and use a varied set of instructional resources in their classrooms. The contribution of this work is in helping advance our understanding of the current state of CT in primary classrooms.	Primary School Teachers' Conceptions of Computational Thinking	NA:NA:NA:NA	2018
Yihuan Dong:Veronica Catete:Robin Jocius:Nicholas Lytle:Tiffany Barnes:Jennifer Albert:Deepti Joshi:Richard Robinson:Ashley Andrews	One way to increase access to education on computing is to integrate computational thinking (CT) into K12 disciplinary courses. However, this challenges teachers to both learn CT and decide how to best integrate CT into their classes. In this position paper, we present PRADA, an acronym for Pattern Recognition, Abstraction, Decomposition, and Algorithms, as a practical and understandable way of introducing the core ideas of CT to non-computing teachers. We piloted the PRADA model in two, separate, week-long professional development workshops designed for in-service middle and high school teachers and found that the PRADA model supported teachers in making connections between CT and their current course material. Initial findings, which emerged from the analysis of teacher-created learning materials, survey responses, and focus group interviews, indicate that the PRADA model supported core content teachers in successfully infusing CT into their existing curricula and increased their self-efficacy in CT integration.	PRADA: A Practical Model for Integrating Computational Thinking in K-12 Education	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Line Have Musaeus:Peter Musaeus	Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to inform high-school teachers how to foster students' development of CT in computer science and other subjects. Evidence suggests that agent-based modeling is a valuable way for students to learn CT in different subjects. This paper reports a teaching experiment where researchers, developers, and high school teachers collaborated to develop six NetLogo models. The models were used in nine Danish High Schools in the following four subjects: Biotechnology, chemistry, biology, and social science. Teachers and students had no or very limited experience with programming. Students build CT and content knowledge by using, modifying, and creating code in the models. This paper provides details for others to adopt the models and the underlying CMC framework, which integrates: Coding, Modeling, and Content. The paper evaluates the results from an open-ended questionnaire with all participating students (n=210) and semi-structured interviews with all teachers (n=15). Thematic analysis was applied to categorize the qualitative data. Results showed that students were able to use, modify, and create code in NetLogo that enabled them to develop CT and content knowledge. The CMC framework represents a fruitful way for teachers to design and teach and for students to tinker with learning CT.	Computational Thinking in the Danish High School: Learning Coding, Modeling, and Content Knowledge with NetLogo	NA:NA	2018
Gursimran S. Walia	NA	Session details: Paper Session: Systems	NA	2018
Michael Abebe:Brad Glasbergen:Khuzaima Daudjee	The ubiquity of distributed computing systems has led to an increased focus on distributed systems in the undergraduate curriculum. In this paper, we describe the design of, and our experiences with, a new distributed systems project where students implement the core components of a distributed file system called WatDFS. The WatDFS project enables students to meet learning objectives from across the distributed systems curriculum and interact with real systems, while providing a high-quality testing environment that yields actionable feedback to students on their submissions.	WatDFS: A Project for Understanding Distributed Systems in the Undergraduate Curriculum	NA:NA:NA	2018
Ke Zhang:Yisong Chang:Mingyu Chen:Yungang Bao:Zhiwei Xu	Computer Organization and Design (COD) is a fundamentally required early-stage undergraduate course in most computer science and engineering curricula. During the two sessions (lecture and project part) of one COD course, educational platforms play an important role in cultivating students' computational thinking, especially the ability of viewing the hardware and software in a computer system as a whole (computer system thinking ability for short in this paper). In order to improve teaching quality, in this paper, we discuss the deployment of an inexpensive in-house Field Programmable Gate Array (FPGA) cloud platform, which can provide students with hardware-software co-design methodology and practice. The platform includes 32 FPGA nodes and the scale can be dynamically changed. Each cloud node is heterogeneously composed of an ARM processor and a tightly-coupled reconfigurable fabric to provide students with hands-on hardware and software programming experiences. We illustrate our efforts to make the FPGA cloud as an easy-to-use resource pool to elastically support a class with 92 undergrads via Internet access and to monitor students' experimental behaviors. We also present key insights in our teaching activities that indicate such appliance is feasible to provide practice of both basic principles and emerging co-design techniques for students. We believe that our cost-effective FPGA cloud is of significant interests to educators looking forward to improving computer system-related courses.	Computer Organization and Design Course with FPGA Cloud	NA:NA:NA:NA:NA	2018
Joel C. Adams:Elizabeth R. Koning:Christiaan D. Hazlett	Classic synchronization problems are often used to introduce students to the subtleties of concurrency and synchronization mechanisms, such as semaphores, monitors, locks, and condition variables. The Dining Philosophers, Producers-Consumers, and Readers-Writers are all classic problems in which a correct solution requires the actions of multiple processes or threads to be synchronized. In this paper, we present visualizations for these three problems and describe their use as pedagogical tools to help students build accurate mental models of concurrency abstractions such as starvation, deadlock, livelock, and correct execution. We also present the results of an experiment that indicate students find using these visualizations to be significantly more engaging than reading a textbook, with no significant difference in learning. We do not claim that our visualizations should replace a course text; rather we present them as engaging pedagogical tools to complement the textbook in courses on Operating Systems, Programming Languages, and other courses where concurrency and synchronization are covered.	Visualizing Classic Synchronization Problems: Dining Philosophers, Producers-Consumers, and Readers-Writers	NA:NA:NA	2018
Ria Galanos	NA	Session details: Paper Session: CS1 2	NA	2018
Cruz Izu:Cheryl Pope:Amali Weerasinghe	Iteration is one of the basic programming constructs taught in a CS1 course. Students learn to use loops by being exposed to a range of loop examples, initially with scalar values and then over composite data such as vectors. When writing a finite loop to iterate over a vector, we can iterate upwards or downwards. In many cases, the order does not change the outcome; however, for some tasks it is important to consider which direction is most suitable before writing a solution. For example, if we want to shift the elements of a vector one position to the right (left), we should choose a downward (upward) loop. However, when we asked undergraduate students to implement the shift right task, most of them used an upward loop. This outcome indicates the students didn't consider the loop direction before coding the iterative task. We hypothesise that this was in part due to course materials favouring upward loops. To confirm this hypothesis, we have analysed the examples presented in our local CS0/CS1 courses as well as four popular MOOCs. This analysis has corroborated an overwhelming bias towards upward loops. We have also found a lack of instruction regarding the possible impact of direction on code efficiency. Thus, in order to improve novice programmers' iteration skills, we propose CS1 examples that expose students to a more balanced mix of up/down loops and the explicit choice of direction.	Up or Down?: An Insight into Programmer's Acquisition of Iteration Skills	NA:NA:NA	2018
Elisabeth Sulmont:Elizabeth Patitsas:Jeremy R. Cooperstock	Machine learning (ML) has become an important topic for students across disciplines to understand because of its useful applications and its societal impacts. At the same time, there is little existing work on ML education, particularly about teaching ML to non-majors. This paper presents an exploration of the pedagogical content knowledge (PCK) for teaching ML to non-majors. Through ten interviews with instructors of ML courses for non-majors, we inquired about student preconceptions as well as what students find easy or difficult about learning ML. We identified PCK in the form of three preconceptions and five barriers faced by students, and six pedagogical tactics adopted by instructors. The preconceptions were found to concern themselves more with ML's reputation rather than its inner workings. Student barriers included underestimating human decision in ML and conflating human thinking with computer processing. Pedagogical tactics for teaching ML included strategically choosing datasets, walking through problems by hand, and customizing to the domain(s) of students. As we consider the lessons from these findings, we hope that this will serve as a first step toward improving the teaching of ML to non-majors.	Can You Teach Me To Machine Learn?	NA:NA:NA	2018
Jennifer Campbell:Andrew Petersen:Jacqueline Smith	This report documents the implementation of a self-paced, mastery learning inspired CS1 course. The course was designed to increase the completion rates observed in flipped and online CS1 formats already offered at our institution. We explore the experience of students in the course and evaluate performance outcomes using grade data from all three CS1 formats, student survey responses, and exit interviews. Our evaluation identifies three main challenges in our implementation. First, the course requires significant resources and administering it is significantly more time consuming for instructors than a regular course. Second, students hesitated to treat mastery quizzes as formative. Finally, the flexibility that the course provided, with little structure and few incentives to help students stay on track, led to considerable procrastination. These factors combined to lead students to delay coursework until the end of the semester -- and beyond. As a result, while our data shows an increase in completion relative to the online format, we saw no change in completion relative to the flipped CS1 offering and saw no change in student performance as evaluated by a final exam. However, students reported more deep engagement with and understanding of the material, which encourages us to further develop the course.	Self-paced Mastery Learning CS1	NA:NA:NA	2018
Colleen M. Lewis:Daniel D. Garcia:Helen H. Hu:Saber Khan:Nigamanth Sridhar:Bryan Twarek:Chinma Uche	SIGCSE is packed with teaching insights and inspiration. However, we get these insights and inspiration from hearing our colleagues talk about their teaching. Why not just watch them teach? This session does exactly that. Six exceptional educators will present their favorite piece of innovative lecture content just as they would their students. The moderator, Colleen Lewis, will describe the central pedagogical move within the innovation and how this connects to education research. The goal of the session is to inspire SIGCSE attendees by highlighting innovative instruction by exceptional educators. The specific content of the innovative instruction may be applicable for some attendees, and the discussion of the underlying pedagogical move within each innovation can be applied across the attendees' teaching.	Microteaching: Recursion, Coding Style, Creative Coding, Inheritance and Polymorphism, Loops, and the Internet	NA:NA:NA:NA:NA:NA:NA	2018
Jeffrey Forbes:Jumee Song:Louise Ann Lyon:Leslie Maxwell:Cindy Tucker	As traditional tech talent pools are being been tapped out and unable to meet the growing workforce demand, matriculation at a community college and transfer to a four-year institution for completion of a bachelor's degree plays a crucial role in diversifying the tech workforce. However, the important role of community colleges in the computer science education pipeline is often overlooked. This panel will provide an overview of the computing workforce landscape, discuss the role of community colleges to increase the diversity of students in computer science, and share case studies that highlight promising practices for the inclusion of community colleges in the CS educational pathway.	Community College Transfer Pathways	NA:NA:NA:NA:NA	2018
Darci Burdge:Gregory W. Hislop:Grant Braught:Josh Dehlinger:Christian Murphy:Joanna Klukowska:Lynn Lambert:Patricia Ordonez:Karl R. Wurst	This special session is intended for people who are curious about integrating Humanitarian Free and Open Source Software (HFOSS) into their courses and involving students in HFOSS projects. HFOSS participation provides an excellent vehicle to introduce students to computing for social good while also giving them experience with real-world software development. The session will begin with a series of lightning talks by faculty who have incorporated HFOSS participation into one or more of their courses. This will be followed by a small group activity to allow attendees to ask questions and discuss individual interests in integrating HFOSS activities and to become familiar with HFOSS educational resources available for instructors. The session will conclude with some closing comments on current and planned activities of instructors who are teaching with HFOSS and suggestions for faculty who would like to pursue this teaching approach themselves.	Curious about Student Participation in Humanitarian Open Source Software?	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Alison Derbenwick Miller	NA	Session details: Session: [email protected] - Broadening Participation	NA	2018
Mathilde Collain:Deborah Trytten	Margolis and Fisher's book, Unlocking the Clubhouse (UTC), has long been regarded as seminal to the understanding of the lack of gender diversity in computing. This book found that boys and girls had different experiences with computers in the home and school environment, and that these different experiences had a direct impact on the desire of students to study computing. We wanted to know if the explanations Margolis and Fisher found were applicable for students in a more typical CS program in 2017, so we conducted a study to investigate the home and pre-college experiences of students who are currently majoring in CS or Computer Engineering (CE), and these students' pathway into computing majors. We recruited 11 participants from a large public institution in the Midwest U.S., and conducted interviews of these students using a protocol adapted from UTC. We performed a qualitative iterative and inductive analysis of these interviews and found that while technology access had greatly improved, views and attitudes were much slower to change. We discovered that fathers preferentially teaching sons about computing, while less prevalent than it was in UTC, still occurs. We also found that the participants, including the women, had more diverse pathways into computing than what Margolis and Fisher found. This suggests that UTC needs to be fully replicated at broad range of institutions to get a more complete picture of the multitude of pathways women use to enter into computing careers.	"You don't have to be a white male that was learning how to program since he was five"	NA:NA	2018
Elizabeth K. Hawthorne	NA	Session details: Keynote	NA	2018
Blair Taylor	First, the bad news - Cybersecurity is here to stay. Threats are escalating and organizations are increasingly vulnerable. Hackers are smarter, there are more of them, and they continue to wreak havoc across critical infrastructure systems. There is a huge, growing shortfall of cyber talent. All students, and especially computer science students, need to learn cyber, but there is an acute shortage of cybersecurity faculty. The good news - Cybersecurity is here to stay. We continue to need skilled cyber workers. Students like cyber. Cyber can draw more students to Computer Science and create opportunities for Computer Science faculty. Dr. Blair Taylor will share her experiences building cyber curriculum from the classroom perspective and from her experience working with NSA to build a National Cybersecurity Curriculum Program.	Cybersecurity is Not a Fad: Why Cyber is a Game Changer for Computer Science Education	NA	2018
Diana Cukierman	NA	Session details: Paper Session: Professional Development 1	NA	2018
Siu-Cheung Kong:Andrew Chan-Chio Lao	To promote computational thinking (CT) education in primary schools, in-service teachers need to attend CT teacher development programmes. One of the intended learning outcomes of the programme is to improve CT practices of teachers, which is one of the three key elements in the CT framework proposed by Brennan and Resnick. Assessing one's CT practices is challenging because there is no universally agreed-upon assessment method on CT practices in the existing literature. This study adopted the Evidence-centered Assessment Design (ECD) method to design test questions to evaluate teachers' development of CT practices. This study provided two Teacher Development Courses (TDCs) to enable teachers to teach CT through programming. TDC 1 focused on developing CT concepts, practices and perspectives of teachers, while TDC 2 put emphasis on pedagogies of teaching CT. 80 teachers participated in the two courses. The CT practices tests were administered before the courses, between the two courses and after the courses respectively. Results indicated that CT practices were improved progressively when the in-service teachers attended the two courses. It indicated that it is useful for teachers to experience programming practices in their initial learning as well as during their pedagogical development.	Assessing In-service Teachers' Development of Computational Thinking Practices in Teacher Development Courses	NA:NA	2018
Saba Kawas:Laura Vonessen:Andrew J. Ko	Most CS students learn little about accessibility in higher education; this is partly because most CS faculty know little about accessibility. Unfortunately, higher education CS faculty lack a model of professional development for learning to teach new topics. Therefore, we investigated the feasibility of a "micro" professional development model for teaching accessibility in CS courses that could be used at scale. We conducted 18 semi-structured interviews with U.S. CS faculty, asking them to explore a prototype of a web-based professional development tool that linked accessibility topics to CS topics. We found that many organizational factors limited faculty's autonomy to integrate accessibility in many of their courses. We also found that individual values and knowledge constrained faculty's ability and willingness to both learn and integrate accessibility topics into their courses. However, many faculty expressed desire to teach accessibility in their courses if they had access to even basic accessibility content and materials to use in their courses.	Teaching Accessibility: A Design Exploration of Faculty Professional Development at Scale	NA:NA:NA	2018
Aarathi Prasad	NA	Session details: Paper Session: REU	NA	2018
Ben Jelen:Julia Dunbar:Susan Monsey:Olivia K. Richards:Katie A. Siek	In this paper, we describe how we integrated the Affinity Research Group (ARG) model into a 10-week summer research experience for undergraduates (REU) over the last three years. Each summer, ten REU students participated in: an annual two-day team-building orientation; a four day long ramp-up session to learn about REU projects and the skill sets they would need to master; weekly meetings with graduate and faculty mentors to define objectives, deliverables, and progress; and weekly skill development workshops to learn how to conduct research, prepare for future endeavors, and present oneself in professional settings. A total of seven faculty and twelve graduate students participated in ARG model process meetings to ensure students received comparable experiences and facilitated professional development activities. We provide an overview of our REU ARG model experience and reflect on improvements based on faculty mentor, graduate mentor, and undergraduate researchers' experiences.	Utilizing the Affinity Research Group Model in a Summer Research Experience for Undergraduates Program	NA:NA:NA:NA:NA	2018
Suzanne Menzel:Katie A. Siek:David Crandall	This paper describes the design and implementation of a three-day intensive research experience (IRE) workshop for undergraduate women in Computer Science. Expanding on a model pioneered at Carnegie Mellon University, we developed and piloted a regional variant called HelloResearch at Indiana University. Participants were actively recruited from our own and neighboring states. Industry partners provided travel scholarships for low-income and first-generation college students, people with disabilities, and students at Historically Black Colleges and Universities (HBCUs) across the country. The primary goal of HelloResearch was to encourage the pursuit of research careers, enabling participants to reach the highest levels of leadership in their fields. In this paper, we report on the demographics of our 92 participants, outline best practices to ensure an authentic short-term research experience for the students, describe our assessment plans, and share our survey instruments to assist others in jump-starting their own regional workshops.	Hello Research! Developing an Intensive Research Experience for Undergraduate Women	NA:NA:NA	2018
Brian Harrington	NA	Session details: Paper Session: Expectations	NA	2018
Tony Mason:Ada Gavrilovska:David A. Joyner	We outline how we detected programming plagiarism in an introductory online course for a master's of science in computer science program, how we achieved a statistically significant reduction in programming plagiarism by combining a clear explanation of university and class policy on academic honesty reinforced with a short but formal assessment, and how we evaluated plagiarism rates before and after implementing our policy and assessment.	Collaboration Versus Cheating: Reducing Code Plagiarism in an Online MS Computer Science Program	NA:NA:NA	2018
Brett A. Becker:Thomas Fitzpatrick	A well-received ITiCSE 2016 paper challenged the orthodox view that programming is hard to learn. It contended that CS1 educators' expectations are too high, which can result in poor teaching and learning, and could impact negatively on diversity and equity. The author posed a challenge to the community to collect research-based evidence of what novice programmers can achieve, and use evidence to derive realistic expectations for achievement. We argue that before rising to this challenge we must determine: What exactly do educators expect of introductory programming students? This paper presents our efforts toward answering this question. We manually curated hundreds of CS1 syllabi, providing a fresh perspective of expectation in CS1 courses. We analyzed learning outcomes and their concepts, in addition to languages utilized and other useful CS1 design and delivery information. This work contributes to a current picture of what is expected of introductory programming students, and provides an interactive online tool linked to all collected syllabi and containing all learning outcomes and other associated information. We hope this will aid the community in deciding whether or not we have unrealistic expectations of our CS1 students and if so, our contributions provide a starting point for the community to adjust them.	What Do CS1 Syllabi Reveal About Our Expectations of Introductory Programming Students?	NA:NA	2018
Alison Clear	NA	Session details: Paper Session: Outreach	NA	2018
Briana B. Morrison:Brian Dorn:Michelle Friend	Computational Thinking Bins are stand alone, individual boxes, each containing an activity for groups of students that teaches a computing concept.We have a devised a system that has allowed us to create an initial set, test the set, continually improve and add to our set. We currently use these bins in outreach events for middle and high school students. As we have shared this resource with K-12 teachers, many have expressed an interest in acquiring their own set. In this paper we will share our experience throughout the process, introduce the bins, and explain how you can create your own set.	Computational Thinking Bins: Outreach and More	NA:NA:NA	2018
Allison Mishkin	This paper applies self-determination theory (SDT), a macro-psychological theory of human motivation to explore what gets young women interested in computer science. SDT argues that when students feel equally competent, autonomous, and related to others, they will be intrinsically motivated to study. This paper applies SDT to young women in computer science to identify the best ways to motivate them towards intrinsic motivation to study computer science. Using a survey administered at Bit by Bit, a conference for young women in computer science, this paper identifies that relatedness is significantly more important for girls than either competency or autonomy. Additionally, it determines the psychological pathway through which feeling related to others influences students' motivation. Specifically, it determines that feeling related to others influences young women's sense of self-efficacy, which improves their computer science motivation. These findings contribute to our understanding of SDT and of how to motivate young women to study computer science.	Applying Self-Determination Theory towards Motivating Young Women in Computer Science	NA	2018
Shanon Reckinger	NA	Session details: Paper Session: Theory & Math	NA	2018
Nikki Sigurdson:Andrew Petersen	Experts and practitioners have long published reflections on how mathematics connects with computer science and how best to integrate mathematics within computing education. However, little literature exists that investigates this area empirically. One recent study used in-depth interviews to generate a theory of the relationship between student perceptions of mathematics and their attitude toward computer science. However, this theory is based on interactions with a limited number of students. Our study tests this theory in a larger population. We present a survey-based exploration of the attitudes 218 undergraduate computer science students hold on mathematics. We present quantitative evidence that supports the theory that student career inclinations are correlated with beliefs about mathematics. We also present additional qualitative data, obtained from free-response sections of the survey, that support the idea that student inclinations affect both their perception of the value of mathematics and academic decisions such as course selection.	A Survey-based Exploration of Computer Science Student Perspectives on Mathematics	NA:NA	2018
Megan Fowler:Michelle Cook:Kevin Plis:Tim Schwab:Yu-Shan Sun:Murali Sitaraman:Jason O. Hallstrom:Joseph E. Hollingsworth	Several research studies have shown the benefits of code tracing to promote student understanding of program behavior. While code tracing on specific input values is a useful starting point, students ultimately need to be able to reason rigorously and logically about the correctness of their code on all (i.e., arbitrary) inputs. Otherwise, they may make false generalizations and may achieve only a shallow understanding. Results of a multi-semester experiment to answer the following research questions: (1) With or without steps, can students learn the basics of tracing code on symbolic input values using an online tool? And how important is classroom instruction? (2) What is the impact of motivation on student attitudes in learning to reason with such a tool? Data was obtained from 297 subjects who used the online reasoning tool in a second-year software development course for CS majors. Analysis indicates that students can do symbolic reasoning to trace code and that instruction and motivation have significant impact.	Impact of Steps, Instruction, and Motivation on Learning Symbolic Reasoning Using an Online Tool	NA:NA:NA:NA:NA:NA:NA:NA	2018
Albert Chan	NA	Session details: Paper Session: Pair Programming	NA	2018
Hans Yuan:Yingjun Cao	Pair programming has been widely adopted as an effective pedagogical tool in CS1/2. The successful execution of pair programming depends on each partner contributing similar amounts of work. However, anecdotes from past research observed that some student pairs can contribute a drastically unequal amount towards their assignments. We address this through a pilot of a hybrid pair programming model. Here, students complete two halves of the assignment as independent programmers and then in partnerships. We conducted a randomized experiment on this model in a CS1 class and found that while pairs generally performed better than solo students in the checkpoint, pairs in the second stage who had worked independently during the checkpoint portion tend to be more resistant to sudden increases in difficulty. We found no significant difference on selected exam problems between the control and experiment groups. We identified lower contributors within pairs and these students showed improved scores on most exam questions directly related to their independent checkpoint work. Survey feedback on hybrid pair programming is positive. The hybrid model is easily adopted in CS classes and positions students to better face the obstacles presented by the assignment while allowing them to benefit from pair programming.	Hybrid Pair Programming - A Promising Alternative to Standard Pair Programming	NA:NA	2018
Kimberly Michelle Ying:Lydia G. Pezzullo:Mohona Ahmed:Kassandra Crompton:Jeremiah Blanchard:Kristy Elizabeth Boyer	Women continue to be underrepresented in computer science. Previous research has identified factors that contribute to women's decisions to pursue computing-related majors, but in order to truly address the problem of underrepresentation, we need to develop a deeper understanding of women's experiences within computer science courses. Pair programming is demonstrably beneficial in many ways, and we hypothesize that there are gender differences in student perceptions of this widely used collaboration framework. To explore these differences and move toward a thorough understanding of students' experiences, this paper investigates students' written responses about their experiences with pair programming in a university-level introductory computer science course. Using thematic analysis, we identified overarching themes and distinguished between what men and women reported. Both women and men wrote about their overwhelmingly positive perceptions of pair programming. Women often mentioned that pair programming helps with engagement, feeling less frustrated, building confidence, and making friends. Women also noted that it is easier to learn from peers. These findings shed light on how pair programming may lower barriers to women's participation and retention in computing and inform ongoing efforts to create more inclusive spaces in computing education.	In Their Own Words: Gender Differences in Student Perceptions of Pair Programming	NA:NA:NA:NA:NA:NA	2018
Joshua Elder	NA	Session details: Paper Session: CSP	NA	2018
Heather Killen:David Weintrop:Megean Garvin	The introduction of the Advanced Placement (AP) Computer Science Principles course changed the high school computer science (CS) landscape in the United States. For the first time an AP course was designed to broaden participation in computing and attract all students as opposed to being designed to challenge the highest performing students. The goal was to design a rigorous and comprehensive CS high school course that highlighted the breadth of the field of CS beyond just programming. With the course first offered for AP credit in the 2016-2017 school year, this study explores how this -introductory advanced" CS course impacted high school CS class offerings. Using data from a state-wide survey and the Maryland Longitudinal Data System Center (MLDSC), we found inconsistent impacts with the AP Computer Science Principles introduction. Some schools increased the number of CS courses while other schools decreased CS course offerings. This was counter to our expectation of an increase in CS classes at the high school level across the state. Responses from a teacher survey yielded insight into this unexpected outcome and informed explanations for these changes.	AP Computer Science Principles' Impact on the Landscape of High School Computer Science using Maryland as a Model	NA:NA:NA	2018
Steven McGee:Ronald I. Greenberg:Randi McGee-Tekula:Jennifer Duck:Andrew M. Rasmussen:Lucia Dettori:Dale F. Reed	This study investigated patterns in the development of computational thinking and programming expertise in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Prior research on programming expertise has identified three general areas of development --- program comprehension, program planning, and program generation. The pedagogical practices in ECS are consistent with problem solving approaches that support the development of programming expertise. The study took place in a large urban district during the 2016--17 school year with 28 ECS teachers and 1,931 students. A validated external assessment was used to measure the development of programming expertise. The results indicate that there were medium-sized, statistically significant increases from pretest to posttest, and there were no statistically significant differences by gender or race/ethnicity. After controlling for prior academic achievement, performance in the ECS course correlated with performance on the posttest. With respect to specific programming concepts, the results also provide evidence on the progression of the development of programming expertise. Students seem to develop comprehension and planning expertise prior to expertise in program generation. In addition, students seem to develop expertise with concrete tasks prior to abstract tasks.	An Examination of the Correlation of Exploring Computer Science Course Performance and the Development of Programming Expertise	NA:NA:NA:NA:NA:NA:NA	2018
Henry M. Walker:John F. Dooley	The submission and review process for the SIGCSE Symposium has evolved dramatically over the last half-century, reflecting changing expectations among SIGCSE members and advancing capabilities of technology. For almost 30 years, postal mail provided the vehicle for both paper submissions and reviews, and logistical constraints prevented the involvement of reviewers outside North America. Initial electronic submission and review options experimented with new technology and opened reviewing to SIGCSE members internationally. With growing experience, the home-grown submission and review system included new capabilities and could be expanded to additional conferences. Recently, cloud-based software has evolved to provide strong support for professional conferences. Over the years, the scale of the submission and reviewing process also has increased dramatically. In 1968, 18 papers were accepted from "over 40" submissions, whereas 161 papers were accepted from 459 submissions in 2018. This scale of activity impacts the overall process, and the software systems have required substantial alterations. Throughout, the focus of the submission and review system has remained the same: a fair, peer-reviewed system with a large number of volunteer reviewers, a quick turnaround of all reviews, and ease of use for all the stakeholders - contributors, attendees, reviewers, meta-reviewers, conference leaders, and system administrators. This article explores the evolution of the SIGCSE submission and review system, focusing on the last twenty years. Each phase of development highlights interactions among stakeholder interests, technological capabilities, and logistical requirements for handling the scope of papers submitted	The History of the SIGCSE Submission and Review Software: From Paper to the Cloud?	NA:NA	2018
Valerie Summet	NA	Session details: Paper Session: Professional Development 2	NA	2018
Hannah E. Chipman:Fernando J. Rodríguez:Kristy Elizabeth Boyer	The computer science education community has made great strides in promoting diversity and inclusion in computing fields and bringing K-12 CS learning opportunities to broader groups of learners. However, one area that has not been investigated fully is how assessments can influence a learner's confidence and attitudes towards CS. Stereotype threat and test modality have been shown to affect the performance of CS test takers. This experience report examines how novice CS learners respond to a CS assessment by investigating an increasingly important group of novice CS learners: K-8 classroom teachers. We conducted focus groups with elementary and middle school teachers as part of a week-long CS professional development workshop. The focus groups were held after teachers completed pre- and post-assessments. The assessment instrument featured multiple-choice and short-answer questions with block-based programming snippets. Many teachers reported a positive disposition towards learning CS after completing the pre-assessment, which they attributed to having a growth mindset. Themes related to their confidence involved the difficulty and format of the assessment, with comments about difficulty reducing after the post-assessment. When asked about their thoughts on the assessment from the perspective of their students, they provided suggestions with particular attention to its format. These findings provide insight for CS assessment design and implementation, as well as support further research on the impact of assessments on CS learners.	"I Impressed Myself With How Confident I Felt": Reflections on a Computer Science Assessment for K-8 Teachers	NA:NA:NA	2018
Martin Ukrop:Valdemar Švábenský:Jan Nehyba	Many starting teachers of computer science have great professional skill but often lack pedagogical training. Since providing expert mentorship directly during their lessons would be quite costly, institutions usually offer separate teacher training sessions for novice instructors. However, the reflection on teaching performed with a significant delay after the taught lesson limits the possible impact on teachers. To bridge this gap, we introduced a weekly semi-structured reflective practice to supplement the teacher training sessions at our faculty. We created a paper diary that guides the starting teachers through the process of reflection. Over the course of the semester, the diary poses questions of increasing complexity while also functioning as a reference to the topics covered in teacher training. Piloting the diary on a group of 25 novice teaching assistants resulted in overwhelmingly positive responses and provided the teacher training sessions with valuable input for discussion. The diary also turned out to be applicable in a broader context: it was appreciated and used by several experienced university teachers from multiple faculties and even some high-school teachers. The diary is freely available online, including source and print versions.	Reflective Diary for Professional Development of Novice Teachers	NA:NA:NA	2018
Paulina Haduong:Karen Brennan	K--12 introductory programming experiences are often highly scaffolded, and it can be challenging for teachers and learners to transition from these scaffolded experiences to experiences of learner-directed creative work, where learners are solving problems and fluently expressing ideas through code. Learners can often "get stuck" in this creative process due to a number of different factors: (1) imagination, (2) concepts, (3) bugs, (4) doubt, and (5) pedagogy. Teachers can support learners in overcoming these factors, but K--12 computing teachers often have minimal preparation and lack computer science backgrounds. However, effective professional development can support teachers in developing the computing skills and pedagogical frameworks for facilitating powerful learning experiences for young people. In this paper, we describe the design and implementation of Getting Unstuck, a 21-day, email-based learning experience for K--12 teachers interested in developing greater familiarity and fluency with Scratch. More than 1,900 people subscribed to the mailing list, with 400 people completing at least one day and 73 people completing all 21 days of activities. Participants received a daily email that invited them to: (1) create a Scratch project in response to a creative prompt that focused on a particular programming concept or Scratch feature, (2) share their work in the online community, and (3) reflect on their learning. We discuss our design decisions and how participants responded to them. We hope that this rich description of the course design will offer insights and inspiration for other CS educators who are designing similar K--12 professional development experiences.	Helping K--12 Teachers Get Unstuck with Scratch: The Design of an Online Professional Learning Experience	NA:NA	2018
Janet Davis	NA	Session details: Paper Session: Mentorship	NA	2018
Tam Nguyen Thanh:Michael Morgan:Matthew Butler:Kim Marriott	With the massive growth of online learning, there has been a decrease in students' face-to-face interactions, leading to rising feelings of isolation. This in turn contributes to several issues such as motivation loss, increased course attrition rates and poor learning experiences. Strong Online Learning Communities (OLCs) have been suggested as a means to help improve the situation, however the formation of OLCs is strongly influenced by learners' individual characteristics and their preferences regarding how and with whom they would want to form study groups. Taking students as its focus, this research attempts to develop a learning partner recommender system (LPRS) to facilitate finding compatible study peers in order to promote informal learning communities among students. From a synthesis of related literature and using data from a study of the student' preferences, a collection of learners' individual characteristics has been identified as a set of matching criteria in our LPRS model. A proof of concept based on the conceptual model has been developed and evaluated with a small group of target users. Results of the investigation showed positive feedback from participants and good prospects of the recommender system.	Perfect Match: Facilitating Study Partner Matching	NA:NA:NA:NA	2018
Chao Mbogo	The Kenyan university education system has been criticized for graduating students who are underprepared to meet the skills demand of the modern workplace, and who cannot formulate effective solutions to our most pressing socio-economic problems. To address the skills gap for Computer Science (CS) students, a structured 6-month mentorship program was designed to offer skills in personal and professional development, innovation, scholarship application, and community engagement. This paper presents the results of a mixed-method study comprising of 95 CS students from 12 Kenyan universities who have participated in the mentorship program since September 2016. The study examines if structured mentorship leads to successful upskilling for CS students. The findings indicate that at least 81% of the students in the mentorship program improve in skills such as innovation and professional preparedness. Results from this study demonstrate how CS education can be complemented with a structured mentorship model towards global competitiveness.	A Structured Mentorship Model for Computer Science University Students in Kenya	NA	2018
Heather Pon-Barry:Audrey St. John:Becky Wai-Ling Packard:Barbara Rotundo	The MaGE Training curriculum prepares computer science students for the task of inclusive peer mentoring and teaching. The curriculum raises awareness of the role of social identity in learning, emphasizes active learning within computer science, and provides preparation for technical code review. This article presents an overview of the MaGE Training curriculum where it has been used to train six cohorts of near-peer mentors and its impact on more than 500 students at a liberal arts college. While rapid growth in course enrollments has presented many challenges, results suggest that the MaGE curriculum has helped to address some of these challenges by maintaining high quality feedback to, and close interaction with, introductory students. Effectiveness is evidenced through increases in mentor self-efficacy, positive impact on student belongingness and continued enrollment, and reports of buffering the instructor workload. The flexibility of the curriculum is supported through a set of modules that can be engaged with via in-person discussions or viewed remotely. This enables easier adoption of the curriculum for use at other institutions.	A Flexible Curriculum for Promoting Inclusion through Peer Mentorship	NA:NA:NA:NA	2018
Gloria Washington	NA	Session details: Paper Session: Engagement	NA	2018
Beryl Hoffman:Ralph Morelli:Jennifer Rosato	The Mobile CS Principles (Mobile CSP) course is one of the NSF-supported, College Board-endorsed curricula for the new Computer Science Principles AP course. Since 2013, the Mobile CSP project has trained more than 700 teachers, and the course has been offered to more than 20,000 students throughout the United States. The organizing philosophy behind the Mobile CSP course is that student engagement in the classroom is the key to getting students, especially those traditionally underrepresented in CS, interested in pursuing further study and careers in CS. The main strategies used to engage Mobile CSP students are: (1) a focus on mobile computing throughout the course, taking advantage of current student interest in smartphones; (2) an emphasis on getting students building mobile apps from day one, by utilizing the highly accessible App Inventor programming language; and (3) an emphasis on building creative, 'socially useful' apps to get students thinking about ways that computing can help their communities. In this paper we present and summarize two years of data of various types (i.e., student surveys, teacher surveys, objective assessments, and anecdotal reports from students and teachers) to support the hypothesis that engagement of the sort practiced in the Mobile CSP course not only helps broaden participation in CS among hard-to-reach demographics, but also provides them with a solid grounding in computer science principles and practices.	Student Engagement is Key to Broadening Participation in CS	NA:NA:NA	2018
Mourya Reddy Narasareddygari:Gursimran S. Walia:Debra M. Duke:Vijayalakshmi Ramasamy:James Kiper:Debra Lee Davis:Andrew A. Allen:Hakam W. Alomari	Programming is a skill, often acquired through repeated practice and feedback. During traditional lectures, students not actively engaged in their own learning. It is imperative to pique students motivation and direct their focus on gaining the requisite knowledge. As the class size grows, instructors feedback is delayed that impacts student engagement and learning. Educational researchers have supported using web-based tools to help evaluate student work, provide timely feedback and increase the amount of time they spend improving their skills. Motivated by the previous work, our team has developed the SEP-CyLE (Software Engineering and Programming Cyber Learning Environment) - a cyber learning environment that contains digital learning content of software programming and testing concepts. SEP-CyLE incorporates collaborative learning, social networking and gamification-based learning engagement strategies (LESs) that has led to an improved motivation and understanding of programming concepts. This paper aims to assess the impact of different combinations of these LESs on student learning in the context of CS1 classrooms. We coordinated studies at two universities wherein different combination of LESs were utilized using SEP-CyLE in CS1 classrooms. We analyzed the impact of LESs on students' acquisition of programming concepts, their engagement and usage of SEP-CyLE. The pre and post test results indicated that the assorted LEs have shown a positive impact on student learning across all the institutions. The correlation results demonstrated that there is meaningful relationship between the LEs and the student performance.	Evaluating the Impact of Combination of Engagement Strategies in SEP-CyLE on Improve Student Learning of Programming Concepts	NA:NA:NA:NA:NA:NA:NA:NA	2018
Shuchi Grover:Patrik Lundh:Nicholas Jackiw	Programming-in a text-based or visual language-is a complex activity that novices find difficult to learn. In this paper, we present an experience report on how novel activities designed for early conceptual exploration can support middle school students' engagement with and learning of foundational programming concepts beginning programmers often struggle with, specifically, variables, expressions (Boolean, arithmetic, relational), loops, and abstraction. We drew on mathematics education research on dynamic representations to design and develop a set of four non-programming, (open access) web-based, interactive activities and micro-worlds and two unplugged activities as part of a suite of activities that can be embedded in a typical introductory programming curriculum to introduce learners to the target concepts before they encounter them in programming. This report describes the activities as well as our experience with their use as part of an introductory computer science course in three diverse, urban, middle school classrooms in the US	Non-Programming Activities for Engagement with Foundational Concepts in Introductory Programming	NA:NA:NA	2018
Jennifer Parham-Mocello	NA	Session details: Paper Session: Access	NA	2018
Jocelyn Simmonds:Francisco J. Gutierrez:Cecilia Casanova:Cecilia Sotomayor:Nancy Hitschfeld	In Latin America, computational thinking workshops are mostly developed in urban areas, charging participation fees. And although teachers are increasingly being expected to include technology in their classrooms, computational thinking and programming are not mandatory topics in teacher training programs. This hinders the development of digital skills among Latino students, and we expect that the digital gap between urban and rural populations will expand over time, especially in socio-economically vulnerable populations. Believing that teachers can be agents of change, we designed a 12 hour workshop to train the K-8 teaching staff in a rural and vulnerable school. The goal of this experience was to help these teachers develop basic computational thinking skills and devise new ways to incorporate what they learned in their classrooms. In this paper, we report our experience facilitating this workshop, and analyze the teacher perceptions before and after the intervention. Teacher attitudes changed drastically during the execution of the workshop, and they were able to come up with creative ways of incorporating computational thinking activities into their subjects. The reported experience can be used as input to develop public policies with respect to how computational thinking should be introduced in rural and vulnerable environments.	A Teacher Workshop for Introducing Computational Thinking in Rural and Vulnerable Environments	NA:NA:NA:NA:NA	2018
Jean Salac:Max White:Ashley Wang:Diana Franklin	Major metropolitan school districts around the United States are implementing computer science in elementary school classrooms as part of the CS for All (CS4All) initiative. Little is known, however, about the success of such a large-scale rollout, especially in terms of equity. In this study we analyze the performance of 4th grade classrooms completing three modules of an introductory computational thinking curriculum, looking at not only overall results but also the variance in performance between high-, mid-, and low-performing schools (as identified by their school report cards). We find that all classrooms are benefiting from the computational thinking (CT) curriculum, making great strides in providing equitable access to CT education. However, statistically-significant differences in performance are present, especially between the high- and low-performing schools, showing that there is still room for improvement in developing strategies and curricula for struggling learners.	An Analysis through an Equity Lens of the Implementation of Computer Science in K-8 Classrooms in a Large, Urban School District	NA:NA:NA:NA	2018
Jayce R. Warner:Carol L. Fletcher:Ryan Torbey:Lisa S. Garbrecht	Students living in rural areas are less likely to attend schools that offer computer science (CS) courses largely because educational institutions in these remote areas lack the resources to staff teaching positions for these courses. This study investigated the impact of WeTeach\_CS, a program designed to train teachers to become certified to teach high school CS in Texas. The WeTeach\_CS collective impact model may be well suited to influence rural areas at scale because it utilizes an existing network of organizations across the state to bring high-quality professional development opportunities to teachers in remote areas. Results from a comparative interrupted time series analysis showed a significant, positive change in the rate in which the number of certified CS teachers in rural areas increased during the period of time after WeTeach\_CS began compared to the period before the program was implemented, whereas the number of teachers certified in technology applications showed no such change. Furthermore, the growth rate in the number of certified CS teachers was much higher for rural schools than urban, suggesting that collective impact models like WeTeach\_CS may be especially beneficial for rural communities.	Increasing Capacity for Computer Science Education in Rural Areas through a Large-Scale Collective Impact Model	NA:NA:NA:NA	2018
Andrew J. Ko	NA	Session details: Paper Session: Culture & Language	NA	2018
Sara Vogel:Christopher Hoadley:Laura Ascenzi-Moreno:Kate Menken	Bilingual education has described a process called translanguaging by which students use linguistic resources across and beyond multiple named languages to learn. Here, we examine how bilingual learners translanguage while learning computer science. These middle schoolers participated in a curricular intervention which infused computational thinking into their Spanish-English bilingual language arts class. Through a descriptive qualitative methodology, we document classroom moments supporting four claims: 1) students' translanguaging blurs linguistic, disciplinary, and modal boundaries, 2) computational literacies are intertwined with students' other literacies, 3) students' attitudes about language and the contexts around them play a role in their translanguaging, and 4) students translanguage to engage in specific CT practices.	The Role of Translanguaging in Computational Literacies: Documenting Middle School Bilinguals' Practices in Computer Science Integrated Units	NA:NA:NA:NA	2018
James Davis:Michael Lachney:Zoe Zatz:William Babbitt:Ron Eglash	Broadening the participation of underrepresented students in computer science fields requires careful design and implementation of culturally responsive curricula and technologies. Culturally Situated Design Tools (CSDTs) address this by engaging students in historic, cultural, and meaningful design projects based on community practices. To date, CSDT research has only been conducted in short interventions outside of CS classrooms. This paper reports on the first semester-long introductory CS course based on CSDTs, which was piloted with 51 high school students during the 2017-2018 school year. The goal of this study was to examine if a culturally responsive computing curriculum could teach computer science principles and improve student engagement. Pre-post tests, field notes, weekly teacher meetings, formative assessments, and teacher and student interviews were analyzed to assess successes and failures during implementation. The results indicate students learned the conceptual material in 6 months rather than in the 9 months previously required by the teacher. Students were also able to apply these concepts afterward when programming in Python, implying knowledge transfer. However, student opinions about culture and computing didn't improve, and student engagement was below initial expectations. Thus we explore some of the many challenges: keeping a fully integrated cultural curriculum while satisfying CS standards, maintaining student engagement, and building student agency and self-regulation. We end with a brief description for how we intend to address some of these challenges in the second iteration of this program, scheduled for fall 2018. After which a study is planned to compare this curriculum to others.	A Cultural Computing Curriculum	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:Deborah A. Fields:Debora A. Lui:Justice T. Walker:Mia S. Shaw:Gayithri Jayathirtha:Tomoko M. Nakajima:Joanna Goode:Michael T. Giang	Many efforts of curricula design have concentrated on expanding participation in K-12 CS education by introducing innovative approaches but few have focused on addressing longstanding equity issues through their choices of culturally relevant materials and activities. In this paper, we describe our efforts in using electronic textiles which include Arduino-based microcontrollers that are sewn with conductive thread on fabrics to connect actuators and sensors and create interactive wearables. We report on the implementation of an electronic textiles curricular unit in the Exploring Computer Science introductory computing course in 13 high schools involving 272 high school students largely from underrepresented groups in a major metropolitan school district. We examined two issues relevant to broadening equitable participation in CS: (1) students' changed perceptions of computing, and (2) students' depth of learning of computing, circuitry and crafting in the final project. Pre/post surveys on students' perceptions of computing showed positive, significant gains in students' self-confidence in solving CS problems, fascination with computing and ability to be creative with computing. Teacher evaluations of students' final projects revealed robust learning in the areas of basic programming and computational circuitry as well as strong learning across more challenging computational concepts, with room for growth. We discuss factors that impacted student outcomes and outline steps for further analysis.	Stitching the Loop with Electronic Textiles: Promoting Equity in High School Students' Competencies and Perceptions of Computer Science	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Brandon Myers	NA	Session details: Paper Session: Inclusion	NA	2018
Heather Thiry:Sarah Hug	This paper builds from over a decade of engagement with an equity-focused initiative, the Computing Alliance for Hispanic Serving Institutions, an effort to both transform and supplement the educational experiences of computing students attending HSIs. This grassroots effort engages faculty, primarily department chairs in computer science and computer engineering programs at Hispanic-serving Institutions, in developing and implementing research-based educational practices to support the recruitment, retention, and advancement of Hispanics in computing fields. While we have addressed how CAHSI activities influence student experiences in becoming computer scientists in other work [1,2,3] we turn to the faculty to understand how faculty at Hispanic Serving Institutions act on their roles as educators at institutions with traditions of inclusive missions in a technical field. The research questions that direct the paper are: How do faculty perceive their role in educating underrepresented students in STEM? How do institutional contexts and current events in computing education constrain and support faculty action towards equitable practice in computing?	How Faculty Negotiate	NA:NA	2018
Jeff Gray:Kathy Haynie:Fran Trees:Owen Astrachan:Chinma Uche:Siobhan Cooney:Richard Kick	The Advanced Placement Computer Science Principles (AP CSP) course was the culmination of an eight-year NSF/College Board pilot project that exceeded all expectations in terms of enrollment in its first two official years. Four NSF-sponsored projects and six other projects have endorsed AP CSP curricula and professional development (PD), a first for an AP course. In this paper, we report on an NSF-sponsored multi-year effort to infuse cooperative learning (CL) structures into AP CSP classrooms to improve class participation and student learning. As we report, CL structures have been beneficial for both new and experienced teachers and across the curricula of the endorsed providers. Since AP CSP was designed to engage all learners, the CL structures used in our PD workshops and the CL resources designed by participating teachers in our project have the potential to positively impact all AP CSP classrooms. Research was conducted on the extent to which use of CL structures impacted student efficacy and student achievement. Three cohorts of AP CSP teachers participated in PD that focused on AP CSP pedagogical content knowledge using CL structures. A cumulative 143 teachers attended one-week PD workshops spanning July 2015, 2016, and 2017. We studied the effect of CL structures on student learning using AP scores as an outcomes measure. Use of CL structures was a statistically significant and positive predictor of student AP scores for participating classes in cohorts 2 and 3. Additionally, the use of pair programming was a significant and positive predictor of AP scores.	Infusing Cooperative Learning into AP Computer Science Principles Courses to Promote Engagement and Diversity	NA:NA:NA:NA:NA:NA:NA	2018
Sukanya Kannan Moudgalya:Kathryn M. Rich:Aman Yadav:Matthew J. Koehler	The representation of women in computer science (CS) is low in the United States and has been declining over the past few decades. Prior research has demonstrated that educators play an important role in increasing gender diversity. Not much, however, is known about their views regarding gender diversity in CS. Educators are often isolated as the only ones teaching CS in their schools, with limited opportunity to converse with each other about the underrepresentation of women in CS and other issues facing the field. Thus, to better understand educators rq questions and concerns about gender diversity, we conducted a qualitative exploratory study within an online discussion forum, Stack Exchange for CS educators. The conversations gave us insights into gender diversity issues that the forum members were interested in, such as enrollment, retention, and roles of teachers. We also analyzed the lenses through which the forum members spoke about gender representation. Results from this study suggest that researchers need to continue to examine educator perceptions so that we can design appropriate online teacher communities, teacher education courses, and professional development workshops to address equity and gender diversity issues in CS.	Computer Science Educators Stack Exchange: Perceptions of Equity and Gender Diversity in Computer Science	NA:NA:NA:NA	2018
Denise Case	NA	Session details: Paper Session: Blocks	NA	2018
Yihuan Dong:Samiha Marwan:Veronica Catete:Thomas Price:Tiffany Barnes	Tinkering has been shown to have a positive influence on students in open-ended making activities. Open-ended programming assignments in block-based programming resemble making activities in that both of them encourage students to tinker with tools to create their own solutions to achieve a goal. However, previous studies of tinkering in programming discussed tinkering as a broad, ambiguous term, and investigated only self-reported data. To our knowledge, no research has studied student tinkering behaviors while solving problems in block-based programming environments. In this position paper, we propose a definition for tinkering in block-based programming environments as a kind of behavior that students exhibit when testing, exploring, and struggling during problem-solving. We introduce three general categories of tinkering behaviors (test-based, prototype-based, and construction-based tinkering) derived from student data, and use case studies to demonstrate how students exhibited these behaviors in problem-solving. We created the definitions using a mixed-methods research design combining a literature review with data-driven insights from submissions of two open-ended programming assignments in iSnap, a block-based programming environment. We discuss the implication of each type of tinkering behavior for learning. Our study and results are the first in this domain to define tinkering based on student behaviors in a block-based programming environment.	Defining Tinkering Behavior in Open-ended Block-based Programming Assignments	NA:NA:NA:NA:NA	2018
Satabdi Basu	Free-choice, open-ended projects are commonly used to assess student learning in introductory block-based programming (BBP) environments. They are generally assessed in school based on criteria such as the social impact conveyed, whether the projects work without errors, and whether they are creative and engaging. Additionally, researchers have assessed such projects based on the frequency of use of various coding constructs like variables, conditionals, and iterations. This paper presents a novel multi-dimensional rubric for analyzing open-ended BBP projects that integrates assessment of front-end project design and back-end sophistication of use of coding constructs. Further, the novelty of the rubric lies in the fact that instead of relying solely on frequencies, it uses scaled scores based on sophistication of rubric components. Using this rubric, 160 Scratch and App Inventor projects were scored and analyzed. The paper establishes external validity of the rubric and examines what we can learn about student learning from this analysis. Our findings will help K-12 CS educators and curriculum developers recognize what aspects of CS middle school students need most support on, and how to leverage programming environments to provide this support.	Using Rubrics Integrating Design and Coding to Assess Middle School Students' Open-ended Block-based Programming Projects	NA	2018
David Weintrop:Heather Killen:Talal Munzar:Baker Franke	The success of block-based programming environments like Scratch and Alice has resulted in a growing presence of the block-based modality in classrooms. For example, in the United States, a new, nationally-administered computer science exam is evaluating students' understanding of programming concepts using both block-based and text-based presentations of short programs written in a custom pseudocode. The presence of the block-based modality on a written exam in an unimplemented pseudocode is a far cry from the informal, creative, and live coding contexts where block-based programming initially gained popularity. Further, the design of the block-based pseudocode used on the exam includes few of the features cited in the research as contributing to positive learner experiences. In this paper, we seek to understand the implications of the inclusion of an unimplemented block-based pseudocode on a written exam. To do so, we analyze responses from over 5,000 students to a 20 item assessment that included both block-based and text-based questions written in the same pseudocode as the national exam. Our analysis shows students performing better on questions presented in the block-based form compared to text-based questions. Further analysis shows that this difference is consistent across conceptual categories. This paper contributes to our understanding of the affordances of block-based programming and if and how the modality can help learners succeed in early computer science learning experiences.	Block-based Comprehension: Exploring and Explaining Student Outcomes from a Read-only Block-based Exam	NA:NA:NA:NA	2018
Frieda McAlear:Allison Scott:Kimberly Scott:Jamika Burge:Sonia Koshy	Women of color comprise a critical segment of the United States population, yet they remain underrepresented in computing education and the workforce and often overlooked in data collection and reporting, research, and interventions to increase diversity in computing. This panel of researchers will provide an overview of the current challenges facing women of color, and highlight initiatives to develop, test, and scale strategies to improve the outcomes of women of color in computing. This panel aims to increase audience understanding of the challenges and opportunities, while inspiring the audience to take action and apply emerging insights and strategies to their local contexts, in order to improve outcomes for women of color. The intention is that this panel is not merely intended to highlight programs, but more importantly, to begin to strategically, scientifically, and collaboratively improve the outcomes for women and girls of color across the computing pipeline. The intended audience for this panel include K-12 computing educators, computing faculty, education nonprofit leaders, researchers and the philanthropic community.	Women and Girls of Color in Computing: Exploring Current Trends, Emerging Opportunities, and Strategies for Meaningful Impact	NA:NA:NA:NA:NA	2018
Jason T. Black:Kamau Bobb:April Browne:Phillip T. Conrad:Colleen M. Lewis:Cherly A. Swanier:Sheila Tejada	The goal of the session is to help attendees who are committed to diversity and inclusion learn to talk about different dimensions of identity (e.g., race, class, gender, sex, sexuality, etc.). The landscape of terms is always changing and we want SIGCSE attendees to feel more comfortable using current language to talk about issues related to diversity and inclusion. This special session will include six lightning talks, individual reflection, small-group discussion, and a Q&A with presenters. This is a reprise of a special session held at the NCWIT Summit in 2018; it was well received and we hope to offer it to the larger SIGCSE audience.	Demystifying Language about Students' Varied Identities	NA:NA:NA:NA:NA:NA:NA	2018
Nick Parlante:Julie Zelenski	NA	Session details: Nifty Assignments	NA:NA	2018
Nick Parlante:Julie Zelenski:Benjamin Dicken:Ben Stephenson:Jeffrey L. Popyack:William M. Mongan:Kendall Bingham:Diane Horton:David Liu:Allison Obourn	The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce the assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials - handouts, data files, starter code, rubrics - that make each assignment ready to adopt. Each assignment presented has complete materials freely available on the Nifty Assignments home page nifty.stanford.edu. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Maya Israel:Shireen Hafeez:Emmanuel Schanzer:Rebecca Dovi:Emma Koslow:Todd Lash	Computer science (CS) education is rapidly expanding in the United States[4]. That said, the CS education field is still grappling with coming to consensus about definitions of K-12 CS and how to reach all students. While the CS education community has made great efforts to expand opportunity for under served groups, students with disabilities have regularly been left out of the conversation. According to the National Center for Education Statistics, approximately 13% of all students enrolled in public schools in the US receive special education services and 95% of these students are taught either part or full time in the regular classroom[3] . One aim of CSforALL is to increase equity in CS education and opportunities[5]. Recent studies have examined the challenges faced by students with disabilities in K12 CS education[1][2]. Including students with disabilities in CS classes not only increases their access to academic and career opportunities in CS, but it also gives them the opportunity to develop new ways of thinking and participating in the world that they would otherwise be potentially without. This panel addresses the inclusion of students with disabilities as part of the national all and seeks to augment the discussion initiated by the CSforALL Consortium and AccessCSforALL with the introduction of the Accessibility Pledge at the annual CSforALL Summit. This panel brings together four different experts, with a wide range of experience in regards to computer science education and students with disabilities, in an effort to expand both the national conversation and increase efforts related to including students with disabilities equitably in CS education. In this panel we present a group of CS education community members who represent multiple approaches to accessibility and serving students with disabilities, as well as diverse implementations; peer-to-peer mentoring, initiatives focused on a single subpopulation of students with disabilities, curriculum and platform providers, and district and state-wide solutions. The panelists, and the organizations they represent have a diversity of experiences to share, including current high school students and parents of students with disabilities.	Panel: Making K-12 CS Education Accessibility a Norm, not an Exception	NA:NA:NA:NA:NA:NA	2018
Paul Ruvolo:Darakhshan Mir:Zachary Dodds	CS majors are certainly not disappearing, but the interest and demand for computing from non-CS majors is a far larger part of our future, as members of CS departments, than those on the disciplinary-major path. As computing evolves from valuable specialty to a professional literacy, CS departments face several challenges. How do we support both the traditional CS-major path and provide computing curriculum to a far broader audience? How do we partner with sibling departments in order to foster their sense of ownership and identity with computing's mindsets and toolsets? And, perhaps especially poignant in 2018, how do we invest energy into the CS-for-All future during a time that demand in our major pathway is at historic highs? This workshop distills the experiences of three faculty members who have tried to answer these questions within the context of their departments. The presenters will share the results of those experiments, will offer hands-on exploration of a representative subset of the curricular materials, and will scaffold a strategic discussion of CS's future and identity in the era of "CS for All."	Embracing our Future: CS Courses and Curriculum for Non-CS-majors	NA:NA:NA	2018
Suzanne J. Matthews:Joel C. Adams:Richard A. Brown:Elizabeth Shoop	The ACM/IEEE CS 2013 report recommends fifteen hours of parallel & distributed computing (PDC) education for every undergraduate. This workshop illustrates the use of the Raspberry Pi as an inexpensive, multicore platform for teaching shared-memory parallel programming. The inexpensive and tactile nature of the Raspberry Pi enables each student to experience her own parallel multiprocessor through sight and touch. In this hands-on workshop, we will teach attendees how they can leverage the Raspberry Pi and the OpenMP library to teach shared-memory parallel concepts in their own classrooms. All CS educators who are interested in learning about the Raspberry Pi, shared memory parallelism, and OpenMP are encouraged to attend. In Part I of the workshop, each participant will connect to and learn about the Raspberry Pi's multicore capabilities. In Part II, each participant will engage in self-paced, hands-on exploration of basic parallel computing concepts using the OpenMP "patternlets" from CSinParallel.org. In Part III, participants will investigate more complex applications, such as numeric integration and drug design and study how these applications can be parallelized using OpenMP. We will conclude the workshop with a series of lightning talks discussing how the Raspberry Pi has been used to teach parallel computing concepts at different institutions. We will also present a summary of student perceptions of the Raspberry Pi. All materials from this workshop will be freely available from CSinParallel.org. Space is limited to 20 participants. A laptop is required.	Exploring Parallel Computing with OpenMP on the Raspberry Pi	NA:NA:NA:NA	2018
James W. McGuffee:David L. Largent:Christian Roberson	As proposed by Linda B. Nilson in "Specifications Grading: Restoring Rigor, Motivating Students, and Saving Faculty Time", specifications grading is an assessment construct that relies on pass/fail grading of assignments and assessments, the structuring of course content into modules linked to learning outcomes, and the bundling of assignments and assessments within those modules. One of the intentions of this type of course grading construct is to more closely align assessment with student attainment of intended learning outcomes. While there has been very visible work in incorporating specifications grading in some academic areas (e.g. in mathematics), examples of the use of specifications grading in computer science courses are less common. The goal of this workshop is to introduce the concepts of specifications grading, explain how to apply these concepts to a wide range of computing courses, and have the participants apply these concepts to one of their current or upcoming computer science courses. Each participant should leave the workshop with at least one revised course syllabus or assignment that incorporates specifications grading.	Transform Your Computer Science Course with Specifications Grading	NA:NA:NA	2018
Stephanie E. August:S. Megan Che:Eileen T. Kraemer:Mark Pauley:Murali Sitaraman	You develop a plan for testing the prototype for a new learning strategy in your class or across institutions. How can you ensure that your plan is clearly understood by reviewers and the managing NSF program officer? What goes through the reviewer's mind once a proposal is submitted? What prompts one proposal to be recommended for funding but another declined? Close examination of the panel review process can inform proposal writing and ensure that reviewers will understand an idea, identify its merit, and value a PI's vision of how the work will broaden participation in STEM education. This workshop steps through the NSF proposal review process from submission of proposal to award or decline, touching on NSF intellectual merit and broader impact criteria, mapping the project pipeline to appropriate evaluation. Participants gain insight into writing a good review and improving one's own proposal writing. For further information and travel support see: https://people.cs.clemson.edu/~etkraem/UPCSEd/. Laptops recommended.	Narratives and Evaluation: How to Write Competitive NSF CS Education Proposals	NA:NA:NA:NA:NA	2018
Kalpathi Subramanian:Jamie Payton:Erik Saule	This workshop introduces participants to the concepts and use of BRIDGES, a software infrastructure for programming assignments in data structures and algorithms courses.  BRIDGES provides two key capabilities, (1) easy to use interface to real world datasets spanning social networks, entertainment (movies on IMDB, song lyrics), scientific data (real-time USGIS Earthquake Data), civic issues (crime data), and literature (books); and (2) a visualization of the acquired data can be used in assignments by students to populate their implemented data structures, including the capability to bring out attributes of the dataset.  The visualizations are displayed on the BRIDGES website and are easily shared (with family, friends, peers, etc) via a weblink.  Workshop attendees will engage in hands-on experience with BRIDGES and multiple datasets and will have the opportunity to discuss how BRIDGES can be used in their own courses, as well as partner with the BRIDGES team.	Bringing Real-World Data and Visualizations of Student-Implemented Data Structures into Sophomore CS Courses Using BRIDGES	NA:NA:NA	2018
Chris Mayfield:Debra Duke:Margarethe Posch	This workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-4 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach that has been shown to improve student performance significantly. Workshop participants will work through POGIL activities as students and complete meta-activities designed to introduce core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses. For more information, see pogil.org and cspogil.org, where you will find activities for CS1, CS2, and other courses. Laptops optional.	Guiding Students to Discover CS Concepts and Develop Process Skills Using POGIL	NA:NA:NA	2018
Younghee Park:Hongxin Hu:Xiaohong Yuan	Software-Defined Networking (SDN) has been changing inflexible networks in software-based programmable networks for more flexibility, scalability, and visibility into networking. At the same time, it brings many new security challenges, but there are very few educational materials for students in learning about SDN security. In this workshop, we present our newly designed SDN security education materials, which can be used to meet the ever-increasing demand for high-quality cybersecurity professionals with expertise in SDN security. For effective hands-on learning, the security labs are designed in CloudLab, a free open cloud platform supported by NSF. Participants receive handouts describing security problems, lab instructions, techniques to use CloudLab, and worksheets for Q&A, which can be directly used for their networking classes at their home institutions. The workshop proceeds in three sessions in which we: present the way to use CloudLab and to understand SDN; practice in simulating three networking attacks in SDN on CloudLab; and discussion and critique in small groups for new SDN security labs.	Security Labs for Software Defined Networks in CloudLab	NA:NA:NA	2018
Debasis Bhattacharya:Mario Canul:Saxon Knight:Mohammad Q. Azhar:Rajiv Malkan	This workshop introduces participants to programming smart contracts using Ethereum Blockchains and the Solidity programming language. Cryptocurrencies such as Bitcoins use Blockchains and Smart Contracts to enforce transactions. Given the popularity of Bitcoins and related technologies in the press, this module provides a module for CS educators to introduce the underlying technology into their classrooms. Participants receive handouts describing sample programming techniques and worksheets for creating basic smart contracts. The workshop proceeds in three sessions in which we: present the underlying technology of Ethereum; practice the creation of smart contracts using the Solidity programming language; and discuss the implementation of this module in our classrooms in small groups. Further information, sample code and workshop handouts are at: http://maui.hawaii.edu/cybersecurity. Note: A laptop is needed for this workshop and handouts will be given out.	Programming Smart Contracts in Ethereum Blockchain using Solidity	NA:NA:NA:NA:NA	2018
Phillip Barry:Mia Minnes:Stephanie R. Taylor	Although many educators acknowledge the importance of written communication in computer science education, there are a number of challenges to using writing assignments in classes. These include assessing writing effectively and efficiently, especially in larger classes. The workshop will consist of a combination of short presentations, hands-on exercises, and discussion of a number of items related to writing assessment: the role of writing in computer science classes and how different types of assessment apply to different types of writing; how clarifying the goals of writing assignments often leads to better assessment; different techniques, such as rubrics, for grading writing; and strategies --- such as peer review and breaking a substantial writing assignment into a sequence of subassignments --- for scaling writing and its assessment to larger classes.	Assessing Writing in CS: A Hands-on Workshop	NA:NA:NA	2018
Mine Cetinkaya-Rundel	The goal of this workshop is to equip educators with concrete information on content and infrastructure for designing and painlessly running a modern data science course. This is a three-part workshop. Part 1 will outline a curriculum for an introductory data science course and discuss pedagogical decisions that go into the choice of topics and concepts as well as the choice of programming language (R) and syntax (primarily tidyverse), and the emphasis on literate programming for reproducibility (with R Markdown). Part 2 will discuss infrastructure choices around teaching data science with R: RStudio as an integrated development environment, cloud-based access with RStudio Cloud and Server, version control with Git, and collaboration with GitHub. Part 3 will focus on classroom management on GitHub (with ghclass). Workshop attendees will work through several exercises from the course and get first-hand experience with using the tool-chains and techniques described above. While the workshop content will focus on usage of R, many of the pedagogical takeaways will be language agnostic. All workshop content, including teacher facing documentation and student facing course materials, will also be available to participants via datasciencebox.org. Please bring a laptop with you.	Computing Infrastructure and Curriculum Design for Introductory Data Science	NA	2018
Leen-Kiat Soh:Markeya S. Peteranetz	In this workshop, participants will learn how to integrate in their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing two of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, panel-based Q&A, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop	Adopting, Integrating, and Evaluating Computational Creativity Exercises to Improve Student Learning	NA:NA	2018
Andreea Cotoranu:Li-Chiou Chen	This workshop aims to assist high school and college educators with implementing cybersecurity into their existing curriculum. The workshop will introduce Raspberry Pi as a teaching platform for topics such as network traffic analysis, cryptography and web security. We will discuss the Raspberry Pi hardware and software requirements, and will demonstrate network traffic analysis using Wireshark. Participants will receive a fully configured Raspberry Pi kit to use during the workshop and then take home at the end. Manuals on Raspberry Pi configuration will be shared for both Windows and Mac platforms, along with sample lesson plans on network analysis and its security implications. The workshop will send all participants home with flexible tools and new expertise in implementing cybersecurity curricula. Bring a laptop with an Ethernet port or adapter, and ensure that you have full administrator privileges to configure settings and install software on your device. Seats are limited.implementing cybersecurity curricula. Bring a laptop with an Ethernet port or adapter, and ensure that you have full administrator privileges to configure settings and install software on your device. Seats are limited.	Using Raspberry Pi as a Platform for Teaching Cybersecurity Concepts	NA:NA	2018
Briana Morrison:Lauren Margulieux:Adrienne Decker	Subgoal labeling is an instructional design framework for breaking down problems into pieces that are small enough for novices to grasp, and often difficult for instructors (i.e., experts) to articulate. Subgoal labels have been shown to improve student performance during problem solving in disciplines both in and out of computing. Improved student performance occurs because subgoal labels improve student transfer and retention of knowledge. With support from NSF (DUE-1712025, #1712231), subgoal labels have been identified and integrated into a CS1 course (variables, expressions, conditionals, loops, arrays, classes). This workshop will introduce participants to the materials and demonstrate how the subgoal labels and worked examples are integrated throughout the course. Materials include over 100 worked examples and practice problem pairs that increase in complexity and difficulty within each topic. The materials are designed to be integrated into CS1 courses as homework or classroom examples and activities. Assessment of topics using subgoal labels will also be discussed. Participants will also engage in an activity where they create an example for their own course using subgoal labels.	Using Subgoal Labeling in Teaching CS1	NA:NA:NA	2018
Bill Siever:Michael P. Rogers	Are you interested in a fun way to introduce a variety of students to significant contemporary CS topics, like wireless networking, robotics, and the Internet of Things (IoT)? Do you want to do so using a platform that is cheap, has a low-barrier to entry, but where learning can translate to the real world and where advanced students can pursue advanced topics? If so, you need a micro:bit! The micro:bit is a platform developed by the British Broadcasting Corporation (BBC) to encourage children to pursue computing and electronics. Although designed for children, its capabilities are sufficient for a variety of postsecondary applications. It includes a 32-bit processor, lights, buttons, an accelerometer, digital I/O, and wireless communication, making it ideal for wearables and robotics. It also leverages some of the latest trends in introductory computing, like support for block-based languages (àla Scratch), while also being sophisticated enough for complex topics in Operating Systems and Networking This workshop will introduce the micro:bit and focus on engaging, lightweight coverage of complex topics, including robotics, mesh networks, and IoT. Participants will work through classroom-ready exercises suitable for K-12 workshops, student recruiting events, CS0/1/2, or as bootstrap topics in IoT courses. The workshop will include some subjects not commonly covered in existing micro:bit material, like integration with mobile apps and IoT applications. Participants will be provided with hardware but will need a laptop with internet access and a mobile device (any OSes, but some features work better with iOS).	Micro: bit Magic: Engaging K-12, CS1/2, and Non-majors with IoT & Embedded	NA:NA	2018
Connor Bain:Gabriella Anton	Agent-based modeling (ABM) is a form of computational modeling whereby a phenomenon is modeled in terms of agents and their interactions. By looking at scientific phenomenon using ABMs, students can learn to understand the micro interactions that are responsible for so many of the seemingly complex systems in the world around them. In addition, by integrating CT skills into science classrooms, we can simultaneously broaden participation in computing, provide a more authentic scientific experience for learners, and encourage deeper scientific content learning. In this hands-on workshop, we introduce participants to two parallel agent-based modeling environments: NetTango (Olson & Horn, 2011), a blocks-based language, and NetLogo (Wilensky, 1999), a text-based language. The workshop will focus on contextualizing agent-based modeling activities within high school STEM classrooms, allowing participants to explore how computer science can be integrated into existing high school STEM curricula. Over the course of the workshop, participants will gain first-hand experience with ABM and how to design ABM activities in classrooms using NetTango and NetLogo. In addition, the workshop will feature open discussions in which participants will discuss the learning trajectories and affordances of the different programming modalities, brainstorm models that could be built for student exploration, and design activities that incorporate both scientific and computer science content for existing curricula.	Integrating Agent-based Modeling in STEM Classes: From Blocks to Text and Back?	NA:NA	2018
Joan Freese:Heather Benedict:Sarah Carter:Katie Hessen:Rita Karl:Karen Peterson:Cassandra Scharber	This workshop introduces participants to SciGirls Code, a unique, connected learning model for engaging middle school girls in computer science (CS) in out of school time. The pilot project, which ran nationally at 16 sites across the United States in 2017-18, included: three curriculum strands (mobile apps, robotics, and e-textiles); role model training for female technology professionals; professional development for informal STEM educators; and a research study that investigates the ways in which learning experiences impact the development of girls' computational thinking as well as their interest and attitudes toward computer science. Workshop participants will learn best strategies for engaging girls in CS and see how those strategies play out in a creative robotics activity using Hummingbird robots. (See https://sites.google.com/tpt.org/scigirlscode/robotics/12-hummingbird-art-bot.)	SciGirls Code: Creative Robotics for Tween Girls in Out of School Time	NA:NA:NA:NA:NA:NA:NA	2018
Amardeep Kahlon:Ann Kennedy:Linda Smarzik	Competency-based education (CBE) has been the focus of much attention lately - from institutions, employers, and policymakers alike. Institutions - from ivy leagues to community colleges to K-12 - are incorporating some form of CBE. In computer science, CBE is an excellent modality to measure mastery and thus prepare students for the next phase whether it is further education or a job. This workshop introduces participants to CBE with an emphasis on CBE course design and competency development. This workshop will be useful for faculty and course designers at all levels - from K-12 through graduate school.	Competency-Based Education: The Future of Learning	NA:NA:NA	2018
Joshua Littenberg-Tobias:Amanda Aparicio:Justin Reich	In computer science classrooms, the assumptions teachers have about students can significantly shape their interactions. Deeper understandings of the decisions impacting equity offers teacher educators and researchers new leverage in cultivating equitable teaching. Our work uses interactive online practice spaces to focus on specific teaching decisions that may be affected by teachers' assumptions about students. Teacher practice spaces are learning experiences, inspired by games and simulations, that allow teachers to rehearse and reflect on important decisions in teaching. Practice spaces are a potentially powerful approach for encoding equitable teaching strategies because they have the potential to reveal the different assumptions and interpretations which drive different teaching decisions We developed these practice spaces and embedded them within CS teacher preparation programs where they have been used by over 6,000 teachers. In this workshop, we'll use online practice spaces as a novel way to approach discussions about equity in computer science classrooms. We'll have participants try out different variations on these practice spaces, brainstorm ideas for improving existing practice space, and invite reflection about challenges they've observed in training CS teachers in equitable teaching. Participants will leave with links to practice spaces and related curriculum materials they can use in their own work.	Playing with and Creating Practice Spaces for Equitable Teaching	NA:NA:NA	2018
Ursula Wolz:Seoyen (Stella) Lee:James Mulligan:Paulina Valdivieso	This reprise of a highly successful SIGCSE 2018 workshop provides a novel perspective on: skills that are often labeled 'women's work' are the foundational principles of computer science developed from textile crafts. The 'Code Crafters' curriculum, which expands Andrea Mayer's Snap-based TurtleStitch embroidery programming project, is being successfully taught in 3 ways: as a full semester undergraduate course, as a weeklong summer workshop for middle and high school students, and as a half day event. The SIGCSE workshop will introduce participants to potential adaptations of this curriculum, report on its use as both a CS 0, and CS 1 course, and give participants hands-on experience in designing and rendering a machine embroidery pattern in TurtleStitch and Processing Stitch (Java). Key concepts from the full semester curriculum will be demonstrated: (1) crocheting as a vehicle for learning about primitive operations instruction codes for process control, and reading and writing patterns (algorithms); (2) programing machine embroidery provides exposure to agile design; (3) contrasting embroidery with quilting provides experience in abstraction and reuse; (4) weaving and tapestry provide concrete illustrations of manipulating two dimensional data structures; (5) studying embroidery machine file formats demonstrates how language translation takes place; (6) sharing a limited resource (a $500 programmable, single thread machine) provides concrete experience in scheduling, and product testing; (7) collaborative crochet and quilted projects provide experience in team dynamics. Participants in this workshop will be invited to join an online community of mutual support.	Code Crafting Curriculum: A Textile Crafts Approach to Computer Science	NA:NA:NA:NA	2018
Darakhshan Mir:Iris Howley:Janet Davis:Evan Peck:Deborah Tatar	This Workshop is intended to be a generative space for participants to create a module on ethics in a Computer Science course of their choice. Participants will choose an existing course in the typical CS curriculum; and coalesce around common themes to create a module that integrates critical reflection on ethical choices and societal impact of computing with the practice of computing. The workshop will offer a space to collaboratively work on designing an ethics module for a CS course chosen by the participants. The ethics module would integrate teaching specific concepts and practices in computing alongside a critical reflection of these practices. Ideally, these modules would be flexible enough to fit into curricula at various institutions.	Make and Take an Ethics Module: Ethics Across the CS Curriculum	NA:NA:NA:NA:NA	2018
Barbara Ericson:Jaclyn Cohen:Brad Miller	Runestone Interactive is an open-source ebook platform designed to create and publish interactive computer science textbooks. (See http://runestoneinteractive.org). Runestone ebooks support programming in the browser, code visualizations, and a wide variety of practice activities, from multiple choice and fill-in-the-blank questions to Parsons Problems (drag-and-drop mixed-up code). Free textbooks have been created for CS1, CS2, and Advanced Placement (AP) CS. The presenters have several years of experience creating and using Runestone ebooks. Several studies have demonstrated good usability and positive learning and attitude impacts on students using these ebooks. Runestone ebooks can be customizable to meet the needs of individual courses and teachers. Over 20,000 people a day use Runestone ebooks. The goal of this workshop is to introduce computer science teachers (both secondary and post-secondary) to Runestone ebooks. This hands-on session will start by leading participants through use of the ebooks as if they were students. Participants will try each of the interactive features. They will also create a custom course from an existing ebook, use the instructor dashboard to review student activity, modify the course, and grade students. Participants will create their own assignments using existing active learning components. They will also be shown how to create new material for assignments, such as multiple-choice questions for a quiz. Laptop Required.	Using and Customizing Open-Source Runestone Ebooks for Computer Science Classes	NA:NA:NA	2018
Christopher Lynnly Hovey:Cynthia Taylor:Heather Bort:David P. Bunde:Zack Butler	In computer science, educational innovation is constant, but many great ideas never achieve the type of widespread adoption necessary to make lasting and effective change to the way we teach and learn. Research across STEM education has shown that propagation planning is often an overlooked or undervalued part of educational innovation. Whether promoting our own projects or an outside innovation, barriers to success are more difficult to overcome when encountered without sufficient preparation. Plans for adoption and scaling of innovations are not one-size-fits-all, but there are lessons we can learn from both successful and unsuccessful previous projects. We will present a summary of these lessons based on our recent ITiCSE working group research experience on the topic. This writing workshop will focus on building propagation plans informed by best practices, within the context of individual project definitions of success. We will work in small groups to identify potential barriers to the success of our projects, learn about best practices for overcoming those barriers, and put in place a measurable and actionable plan for adoption and propagation. Participants will work toward a better plan for propagation while garnering advice from their peers, learning and generating new ideas about and methods for dissemination and adoption, and building a community of resources for future collaboration, champions for change, and peer feedback. Bringing a laptop is recommended.	To Dissemination... And Beyond!: Building Better Propagation Plans for Computer Science Education Innovations	NA:NA:NA:NA:NA	2018
Ariel Ortiz	A microservice architecture decomposes the entire functionally of an application into a set of services that can be deployed and scaled independently. Each service does only one job and does it well. Thus, it's simpler to develop, test and maintain. Additionally, it has its own database and provides access to datasets and services through a well-defined application programming interface (API). Highly successful Internet companies, such as Amazon, Netflix, and Twitter, use microservice architectures to build their software. This workshop is aimed at CS instructors that wish to teach students how to design and build microservice-based applications using cloud services and products provided by the Amazon Web Services (AWS) free tier. We'll start creating a cloud development environment with the AWS Cloud9 IDE. Afterwards, we'll code in Python several RESTful web services using AWS Lambda functions, which are serverless cloud computing services that are executed in response to events. The advantage of going serverless is that you build and run applications and services without thinking about servers. Your application still runs on servers, but all the server management is done by AWS. Finally, we'll demonstrate how to persist our information in a NoSQL database using the Amazon DynamoDB service. More information available at: http://microservices.arielortiz.info/ Laptop required.	Architecting Serverless Microservices on the Cloud with AWS	NA	2018
Stephanie E. August:Alexandra Medina-Borja:Mark Pauley:Michael M. Rook	By 2026, today's fifth graders will be entering college and our first-year college students will be the assistant professors. The workforce will see (r)evolutionary changes in the workplace at the human-technology frontier. Participants will be asked to think strategically about how we will reach the future we want to live. Content delivery mechanisms and active learning/project-based experiences for undergraduate students have developed and matured at a dramatic pace in recent years. How can we leverage what we already know, working to improve and broaden undergraduate STEM education and computing education in particular? How do we prepare students to solve the wicked societal problems of the future? Will students require problem-solving skills that transcend disciplines? Is interdisciplinarity teachable at the undergraduate computer science level? Which skills/knowledge will employers and graduate schools require in 10/20 years? The National Science Foundation Division of Undergraduate Education is preparing to have a nationwide dialogue with STEM communities and industry partners on this topic. Participants in this highly interactive session will collectively construct a shared vision for the future of computing sciences education, and outline a research agenda for the future.	NSF Interactive Discussion: Computer Science Undergraduate Education in 2026 and Beyond	NA:NA:NA:NA	2018
Xenia Mountrouidou:Vic Thomas	The primary purpose of this workshop is to help undergraduate liberal arts colleges integrate cyber security seamlessly into the curriculum with little to no additional investment. We believe Liberal Arts Colleges can provide to the cyber security workforce well-rounded individuals, equipped to tackle new and complex problems. However, liberal arts colleges rarely have the resources needed to provide the hands-on labs critical to attracting students to cyber security classes and for preparing students for the workforce. Our NSF funded project 'CyberPaths" addresses this by devising several active learning labs on topics such as ransomware, authentication, Distributed Denial of Service (DDoS), and remote network attacks. These labs are implemented on the cloud infrastructure GENI, an NSF funded free academic cloud infrastructure for realistic networking experimentation. We have developed a variety of labs that are suitable for non-CS majors as well as CS upper level courses. In addition, we propose interdisciplinary cyber security modules and multiple paths that can lead to the cyber security professions, starting from the general education courses, moving to an intro to cyber security course, and upper level CS courses. Our goal is to offer solutions to liberal arts institutions with cyber security active learning and introducing cyber security early in the curriculum with low overhead. This workshop will be highly interactive using a combination of hands-on labs and discussions. If you wish to do the hands-on exercises please bring a laptop with a browser and ssh client installed.	CyberPaths: Cyber Security Labs for Liberal Arts Institutions Using the NSF Global Environment for Network Innovations (GENI)	NA:NA	2018
Sushil Prasad:Sheikh Ghafoor:Charles Weems:Alan Sussman	Parallel and distributed computing (PDC) is now a pervasive aspect of deployed systems, and thus it is essential that students include parallelism and distribution in the computational thinking that they apply to problem solving, from the very beginning. Our students all have multicore laptops. Most of their favorite applications use vast numbers of distributed processors. Why are we still teaching them to solve problems using only sequential thinking? Come to this workshop to see how easy it is to open their eyes to exploiting concurrency in problem solving, starting in their earliest courses. You'll hear about and experience some unplugged activities, learn how to help students recognize examples of concurrency in the world around them, see how event driven user interfaces can easily exemplify issues related to multithreading, and how freely available libraries can be used to naturally exploit parallelism in working with large data structures. We will also highlight the two summer training programs that we are organizing, for which we have funding to support attendance by instructors. Having a laptop that can run Java and C++ will allow you to follow along with some code examples, but isn't necessary.	Modernizing Early CS Courses with Parallel and Distributed Computing	NA:NA:NA:NA	2018
Ria Galanos:Timothy Gallagher:Briana Morrison	Advanced Placement (AP) Computer Science A (CS A) is an introductory high school Java course equivalent to a CS1 course at the undergraduate level. Over 66,000 high school students sat for the AP CS A end-of-course examination in May 2018. The exam contains four free-response questions (FRQs) where students are to implement methods or a full class according to specifications. Each June, these exams are graded at the AP CS A Reading. This workshop provides a behind-the-scenes look at the Reading, during which the FRQs are read (scored) by more than 325 college faculty and high school AP teachers. You will learn how the FRQs are scored, the roles of the various Reading participants, and the steps to ensure consistent grading. You will engage in an AP Reading-style training by applying a rubric based on a past free-response question and then participate in a mock reading using the rubric. After attending this workshop, you will be able to understand the role and responsibilities of the Chief Reader, Question Leader, and Table Leader at the AP Reading; develop strategies for creating rubrics for code questions; consistently apply rubrics for free-response questions and similar assignments; and apply strategies to prepare students for the free-response portion of the AP Exam or to similar style questions in an introductory college-level course.	An Afternoon with an AP Computer Science A Exam Reader	NA:NA:NA	2018
David J. Malan:Doug Lloyd:Kareem Zidane	We present in this hands-on workshop a suite of interactive programming environments for teachers and students, each of them cloud-based and free. The first is CS50 Sandbox, a web app at sandbox.cs50.io that enables teachers and students to create temporary programming environments quickly and share copies of those sandboxes with others. With this app can a teacher start programs in class that students can then finish, distribute starter code for problems, and post interactive solutions. The second tool is CS50 Lab, a web app at lab.cs50.io that enables teachers to create step-by-step programming lessons, providing incremental feedback at each step, and enables students to progress from an empty file (or starter code) to working code, with hints and feedback along the way. Via this app can teachers author their own Codecademy-style lessons using just a GitHub repository of their own. And third in the suite is CS50 IDE, a web app at ide.cs50.io built atop Cloud9 that provides students with their own cloud-based Linux environment. Each of these environments offers a built-in file browser and code editor and, most importantly, an interactive terminal window with shell access to their very own container. And each enables students to write programs in any language. Throughout this workshop will we discuss lessons learned from having deployed these tools in CS50 at Harvard to hundreds of students on campus and thousands of students online. And we'll discuss challenges encountered and best practices adopted.	Interactive Programming Environments for Teachers and Students	NA:NA:NA	2018
Mark C. Lewis	Born from a Berkeley graduate project, the Apache Spark library has grown to be the most broadly used big data analytics platform. While Spark integrates with the older Hadoop ecosystem, it provides much more intuitive, faster, and powerful abstractions for manipulating distributed data than MapReduce. In this workshop, we will cover the basics of the Spark library with the goal of getting participants up to speed so that they can use the library or teach it in courses that involve big data or distributed processing. Participants will work with examples that range from calculating basic summary statistics to using the Spark Machine Learning library for performing sophisticated machine learning analyses on large datasets. Tasks during the session will be performed on smaller samples using the Spark local standalone implementation on participant's laptops. We will also discuss how Spark can be run on a local or cloud-based cluster and point participants toward resources for setting up those environments for their students.	Big Data Analytics with Spark	NA	2018
Brian K. Hare:David Heise	This tutorial will provide a foundation for faculty members either teaching a course in artificial intelligence for the first time or renewing a course that has been dormant. The growing ubiquity of AI and machine learning dictates that departments offer a course in this area, regardless of whether any such expertise exists locally. Furthermore, there are many possible approaches, from a general overview to a tight focus on a particular application area, either as a single elective or a specialization area within an undergraduate degree. An increasingly wide range of resources is available, but intelligent selection from the plethora of information can be a challenge, particularly in smaller programs where no local expertise is available. The tutorial is in two parts. Part 1 focuses on background knowledge, discussing major divisions within the broad field of AI, research trends and application areas, and commonly used tools. Part 2 addresses classroom implementation, assessment, textbook options, and online resources including code libraries, free-to-use data sets, development environments, and visualization tools. Participants will have the opportunity to brainstorm and discuss options for course focus. Sample syllabi using differing course approaches, sample exams and assignments, and a non-exhaustive list of useful resources will be provided.	Booting Into AI: Startup Instructions for Teaching Artificial Intelligence	NA:NA	2018
Mary Anne Egan:Mark Sherriff	NA	Session details: Birds of a Feather Flock #1	NA:NA	2018
Ursula Wolz:Stephanie R. Taylor	Professional behavior in the workplace needs to promote broad participation and inclusion. The competitive nature of the traditional classroom can thwart pedagogical goals to model, support and give practice to collaborative professionalism in the Tech industry and graduate level computing-based disciplines. Diverse populations, ingrained cultural expectations, and a significant range of opportunities for developing computing expertise prior to undergraduate opportunities can all exacerbate this problem. The goal of this BoF is to bring together educators who want to promote inclusive professionalism in the classroom and their community. We hope to use this collaborative setting to identify major issues and to set an agenda for further collaboration among the participants. The long-term goal is to create vehicles for best practice such as stories, curricular activities, and standards that can effect change in the CS community.	Towards a More Inclusive Tech Culture: Promoting Professionalism in CS Classrooms and Labs	NA:NA	2018
Christina Gardner-McCune:David Touretzky:Fred Martin:Deborah Seehorn	As CS expands into more K-12 classrooms and children become familiar with computational thinking, advances in AI pose new challenges for CS educators. Children now enjoy conversing with AI-powered agents such as Alexa and Siri, while their parents worry about the imminent arrival of autonomous robots and self-driving cars. As AI technologies become more prominent in our lives, we need to consider what every child should know about AI. This BOF provides a timely opportunity to introduce CS educators and researchers to several AI for K-12 efforts, including available curricula, tools, and resources. Attendees will discuss how AI can best be incorporated into the K-12 CS curriculum, the tools/resources that will be needed to support students and teachers learning about AI, and how AI education might impact their own work. This BOF is complementary to the SIGCSE 2019 Special Session: AI for K-12 Guidelines Initiative that introduces the current draft of our 'Big Ideas in AI." Further information about the initiative and resources is available at http://ai4k12.org.	AI for K-12: Making Room for AI in K-12 CS Curricula	NA:NA:NA:NA	2018
Matt Jadud:Jamika Burge:Jeffrey Forbes:Celine Latulipe:Yolanda Rankin:Kristin Searle:Ben Shapiro	Ibram X. Kendi, in his book Stamped from the Beginning, lays out the argument that structures (political, economic) drive inequitable systems, and it is our enculturation in those systems that lead to ignorance and bigotry. Our goal, in this BOF, is to discuss the dominant social, political, and curricular structures of the discipline of computing, and how we might strengthen or challenge those structures to increase access, equity, and justice within computing. To do so, we must confront the manifold ways in which the existing structures and practices of computing are exclusionary, from curricula to epistemology and the expressions of identity that typically represent what it means to be (and be recognized as) a computer scientist.	Toward an Anti-Racist Theory of Computational Curricula	NA:NA:NA:NA:NA:NA:NA	2018
Michael P. Rogers:Bill Siever	Makerspaces are areas set aside in schools, libraries, and other locations, where inventors and Do-It-Yourselfers gather to create and collaborate. Activities run the gamut from high(er) tech, such as electronic kit making and Arduino programming, 3D design and printing, to more traditional crafts such as sewing and woodworking. As makerspaces become more prevalent, the question arises where, if anywhere, do they fit into the post secondary environment, and specifically, in the computer science realm? Should computer science departments host them? What, exactly, can we do with them? They would be appear to be a good outlet for our students, allowing them to exercise their creative side, but can they do more? Can we use them to draw in non-majors, or to encourage collaboration between students in different fields? Can they be used to supplement various courses? If so, which, and how might they be used? We are interested in talking to others who have makerspace experience at the post-secondary level so that we can share ideas.	What to Make of Makerspaces	NA:NA	2018
Darina Dicheva:Christo Dichev:Keith Irwin:Elva J. Jones:Lillian (Boots) Cassel:Peter J. Clarke	Having to compete harder than ever for students' attention against cool social media sites, mobile apps, video games, messaging, etc., instructors are struggling to find new ways to motivate and engage learners. Gamification offers a promising framework for educational interventions that can increase students' motivation and engagement. This BOF will bring together instructors who have already explored the use of various game driven strategies and elements to increase the motivation of their students and also those who are looking for promising interventions to do that. The facilitators conducted a similar BOF at SIGCSE 2018, which was well attended, well received and sparked an interesting and lively discussion. This BOF will continue the conversation on what might be useful ways of incorporating game elements in Computer Science courses, what tools might be needed to support such efforts, how can the student experience of gamified learning be personalized, etc. Two NSF sponsored projects related to the use of gamification in STEM courses will seed the discussion. We hope to collectively contribute to the ongoing important discussion on successful strategies for applying of gamification in Computer Science education.	Can Game Elements Make Computer Science Courses More Attractive?	NA:NA:NA:NA:NA:NA	2018
Richard Weiss:Jens Mache:Blair Taylor:Siddharth Kaza:Ankur Chattopadhyay	The critical shortage of cyber security professionals remains an unsolved problem. We need to greatly expand the community in order to meet the increasing demand. The number of security-focused competitions and exercises has increased in recent years. As faculty we need to choose those that we can best integrate into our courses. As a community, we can think about how to create a more unified environment to contribute to each other's projects. We would like to bring together new and experienced faculty to build community and engage in this work. We have set up a dedicated Facebook to allow us to work together outside of SIGCSE events. During the BoF, we will encourage participants to sign up for the closed group, and we will ask the questions, 'What do you want from this learning community? What exercises have you heard about or tried?" One benefit of having a learning community is that it will be easier to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts (NSA's National Cybersecurity Curriculum Program), including our own (e.g. Security Injections, Security Knitting Kit, EDURange and UWGB GenCyber). The BoF also benefits experienced members, helping them to disseminate their work and reach other faculty with similar interests. We will discuss what works and what problems students and instructors have encountered. We will discuss ways to integrate security-related exercises into existing courses.	Discussion of Integrating Hands-on Cybersecurity Exercises into the Curriculum in 2019	NA:NA:NA:NA:NA	2018
Chris Gregg:Shawn Lupoli:Laney Strange	Many computer science departments have chosen to hire faculty to teach in teaching-track positions that parallel the standard tenure-track position, providing the possibility of promotion, longer- term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators, both experienced and new to teaching track positions, who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In particular, we will discuss how to support for new teaching track faculty, as many CS departments are expanding and adding teaching track positions.	Teaching Track Faculty in CS	NA:NA:NA	2018
Alison Clear:John Impagliazzo:Ming Zhang	This birds-of-a-feather session discusses the global project Computing Curricula 2020 (CC2020), a joint project launched by professional computing societies worldwide. CC2020 is a priority of the ACM Education Council; its sponsors include ACM, IEEE Computer Society, and eight professional organizations from around the world. The project team consists of a task force of 38 members representing 16 countries and six continents. A steering committee of 13 members functions as an executive board to manage the project. CC2020 examines the current state of curricular guidelines for academic programs granting bachelor's degrees in computing and it provides a vision for the future of computing. Audience discussion encompasses new ways computing programs can prepare graduates both academically and professionally. Since computing competencies is an underlying theme of the project, this birds-of-a-feather session discusses competencies, their definition, and their inclusion into future curricular reports. Discussion surrounds competencies in computing, their effect, and the possible ways to visualize their meaning. This birds-of-a-feather session also allows the audience to provide comment on the elements of the project, to engage them to serve as potential project reviewers, and to provide a forum for lively interaction on a global and encompassing computing project.	Computing Competencies and the CC2020 Project	NA:NA:NA	2018
Paula Gabbert:Wendy Powley:Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). The SIGCSE Board approved the charter, because the underrepresentation of women in computing is an international problem and an embarrassment for our profession. A BOF provides SIGCSE program advertising that will create a large audience for dissemination of information concerning successful gender issues projects and can provide time for discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ACM-W, NCWIT, ABI, CDC, CRA-W, etc. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organization and who do not customarily have an opportunity to share ideas face-to-face.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community	NA:NA:NA	2018
Austin Cory Bart:Michael Hilton:Bob Edmison:Phill Conrad	Packaging materials is a generalized term to capture a broad array of tasks (creating, revising, sharing, finding, crediting, etc.) for materials such as assignments, teacher notes, and evaluation data. Substantial effort has gone into creating materials over the years, but the community still struggles to find ways to effectively manage these. This BoF provides an opportunity to identify needs, concerns, prior efforts, and future plans. A primary goal is the formation of a Working Group tasked to develop a standard for curricular material creation and sharing, joining with broader efforts of standardization (e.g., CSSPLICE) and existing initiatives for creating repositories, tools, and materials.	The Problem of Packaging Curricular Materials	NA:NA:NA:NA	2018
Barbara Anthony:Mia Minnes:David Liben-Nowell:Peter-Michael Osera	The undergraduate computer science curriculum is ever-changing but has seen particular turmoil recently. Topics such as machine learning, data science, and concurrency and parallelism have grown in importance over the last few years. As the content of our curriculum changes, so too does the mathematical foundations on which it rests. Do our current theoretical courses adequately support these foundations or must we consider new pedagogy that is more relevant to our students' needs? In this BoF, we will discuss what a modern mathematics curriculum for computer scientists should cover and how we should go about accomplishing this in our classrooms.	Modernizing the Mathematics Taught in Computer Science	NA:NA:NA:NA	2018
Tamara Peyton:Aarathi Prasad:Sa Liu:Joslenne Pena	Many CSE programs have begun to mandate a human-centered design (HCD) course as part of degree requirements. Rather than abstracting out messy humans to a single generic 'user', HCD requires solution designers to use their innate creativity and empathy to work alongside a varied group of people who will be most impacted by a new system. However, many CSE students tend to keep a narrowed focus on system-only behavior and the human inter-relation skills necessary to do HCD well may not come naturally to CSE students. Within HCD projects, this becomes a problem given that project teams consist not just of designers, developers and project managers, but also increasingly of core users, in a co-design or participatory design process. Figuring out ways to get students to define a problem completely, account for human needs in solution ideas, and work alongside actual users can be a struggle for many in the CSE education field. This BOF is intended to share ideas for how to appropriately teach the mindset and methods skillset of HCD to typical CSE students. This session is directed at the sharing and collaborating around teaching resources, techniques, in-class activities and assignments for HCD education. Handouts.	Teaching Human-Centered Design in CSE Programs	NA:NA:NA:NA	2018
Gregory W. Hislop:Darci Burdge:Michael Goldweber:Samuel Rebelsky:Stewart Weiss	Computing often makes headlines for negative social impacts such as data breaches, algorithmic bias, and cyber warfare. The many ways that computing can create social good are similarly powerful but seem to get much less attention. This BoF will explore ways to incorporate the positive potential of computing for social good in undergraduate courses. The organizers are especially interested in active learning approaches where students can experience first-hand the positive social impact of computing. The discussion will allow faculty who have included computing for social good in their courses to exchange ideas and share their experiences. Faculty who are interested in this area but have not yet tried it in their courses are encouraged to join the discussion.	Incorporating Computing for Social Good in Computing Education	NA:NA:NA:NA:NA	2018
Kristin Stephens-Martinez:Brian Railling	Most student personal interactions with the course staff come through office hours. Particularly in large courses, the office hours are predominantly run by teaching assistants (TAs). TAs are best advantaged by support and training from more senior instructional staff, especially faculty. This BOF will provide a forum for discussing mentoring techniques and other individualized support of the TAs (particularly in computer science courses) to improve student learning and experience, as well as longer-term gains to the discipline. Second, we will be discussing what technological support exists, such as queue software or internal wikis, to improve student learning and experience in office hours. Finally, we will discuss ideas for more significant changes in office hour structures that could lead to future collaborations or research experiments.	How Can We Make Office Hours Better?	NA:NA	2018
Christian Murphy:Linda DuHadway:Matthew Hanson	Long hours, pressure to meet deadlines, and fear of failure are just some of the stressors that affect CS students and professionals alike, leading to burnout, anxiety and depression. These issues are particularly amplified in students who are already living with diagnosed mental illnesses such as bipolar mood disorder, schizophrenia, or autism spectrum disorder. A quarter of the world's population lives with some form of mental illness, and recent research suggests that 50% of those working in the tech community have been diagnosed with a mental illness, a statistic that may actually underestimate the problem because of stigmas in certain cultures and communities around seeking mental health services. These numbers suggest a significant need for awareness and support in the CS education community. This BOF will provide attendees an opportunity to discuss the mental illnesses that affect CS students and how to create a culture of understanding and support within their communities.	Supporting Students Living With Mental Illness	NA:NA:NA	2018
Mary Anne Egan:Mark Sherriff	NA	Session details: Birds of a Feather Flock #2	NA:NA	2018
Allen Parrish:Rajendra K. Raj:Lawrence Jones	This session is designed to attract participants with an interest in post-secondary academic cybersecurity programs. Despite the extraordinary interest in cybersecurity due to the job market, relatively little consensus exists on how to design academic programs. Divergence on issues such as degree title, program objectives and outcomes, program scope, whether only one distinct discipline of cybersecurity exists or several, whether a separate academic unit is needed to offer such degrees, and what role other (non-computing) disciplines should play in cybersecurity programs. Prior efforts in defining cybersecurity at the collegiate level include the US Department of Homeland Security and the US National Security Agency's Centers for Academic Excellence (CAE) programs, NIST's National Initiative for Cybersecurity Education (NICE), the Cyber Education Project, the Joint Task Force's CSEC 2017 draft curricular guidelines, and ABET accreditation criteria for cybersecurity programs. The audience is expected to consist of college faculty and administrators who are either in the process of starting cybersecurity programs or are seeking guidance for developing security content for other computing programs that must now teach security. This session will allow participants to share ideas regarding how to develop and teach cybersecurity in four-year, post-secondary academic programs.	Academic Cybersecurity Disciplinary Foundations and Accreditation	NA:NA:NA	2018
Pamela Cutter	Girls Who Code (GWC) Clubs are springing up all around the country, with almost 90,000 girls involved from all 50 states. Have you ever wondered what it takes to get a club started? How do clubs make use of the curriculum that GWC provides? Do clubs ever take their girls on field trips to local places that would show them the possibilities of what they can do in computing? Maybe you're already involved with a club and would like to know what other clubs are doing, or you're doing some cool things with your club that you'd like to share. Or maybe you've been thinking about getting a club started and would like some ideas. This BOF will provide a platform for the discussion of starting and running a GWC club, as well as for sharing ideas of the interesting things clubs have been doing.	Sponsoring Girls Who Code Clubs	NA	2018
Saverio Perugini:David J. Wright	This birds-of-a-feather provides a discussion forum to foster innovation in teaching operating systems (OS) at the undergraduate level. This birds-of-a-feather seeks to generate discussion and ideas around pedagogy for OS and, in particular, how we might develop a contemporary and innovative model, in both content and delivery, for an OS course---that plays a central role in a CS curriculum---and addresses significant issues of misalignment between existing OS courses and employee professional skills and knowledge requirements. We would like to exchange ideas regarding a re-conceptualized course model of OS curriculum and related pedagogy, especially in the areas of mobile OSs and Internet of Things; concurrent programming and synchronization; and cloud computing and big data processing.	Developing a Contemporary and Innovative Operating Systems Course	NA:NA	2018
Kathleen Freeman Hennessy:Jennifer Parham-Mocello:Henry Walker	Academic co-curricular activities (e.g., programming contests, hackathons, student ACM clubs, tutoring, internships, undergrad research) are popular with students, may promote academic engagement, and can give a leg up to students applying for jobs and grad schools. Yet information about co-curricular activities in departments and schools can be hard to come by. This BOF will provide participants with a forum for comparing notes: What co-curricular opportunities exist in your department? Does your department or school explicitly support or promote undergraduate co-curricular activities? If so, how (e.g., staff positions, faculty release time, student leadership - volunteer or for pay or credit) What have you learned from your experiences with co-curricular activities? Are co-curricular activities a good investment of department resources?	Co-Curricular Activities in Computer Science Departments	NA:NA:NA	2018
Richard E. Ladner:Andreas Stefik:Andrew J. Ko:Brianna Blaser	Approximately 10% of computer science and engineering majors have a disability. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing have limited accessibility to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll, will be shared.	Access to Computing Education for Students with Disabilities	NA:NA:NA:NA	2018
Mine Cetinkaya-Rundel:Andrea Danyluk:Jeff Forbes:Michael Posner	Data science encompasses elements of statistics, computer science, and mathematics as well as domain-specific knowledge, suggesting that with interdisciplinary conversations and collaborations we can make data science curricula more comprehensive and successful. Development of such programs provide an exciting collaboration opportunity for faculty in statistical and computer and mathematical sciences as well as a wide array of other disciplines. This BOF provides an opportunity for faculty involved/interested in the development of undergraduate data science curricula to come together and discuss forming collaborations across disciplines and what the disciplines can learn from each other. The discussion will be led by faculty from computer science and statistics departments who have been involved with both disciplinary and interdisciplinary data science education initiatives. One of the goals of this BOF is to jumpstart conversations across disciplines, which we hope the audience will continue at their home and/or nearby institutions.	Building Bridges for Data Science Education	NA:NA:NA:NA	2018
David J. Malan:Doug Lloyd:Erin Carvalho	Odds are we've all used (or tried!) quite a few tools to facilitate efficiency inside and outside of the classroom and empower students to learn more effectively. Some of those tools are perhaps homegrown and unique to one's own institution, but freely available educational technologies abound as well, some in the cloud, some for Macs and PCs, some open-source. And quite a few commercial tools offer free or discounted educational plans as well. In this BoF, we'll begin with a whirlwind tour of the tools we ourselves use, identifying the problems they solve and how well, then quickly open the floor to everyone to share their favorites as well. Along the way, we'll jot down every tool mentioned and share the results. Attendees should exit this session with a better understanding of the educational-technology landscape, familiarized with innovations they can bring back to their own classes.	Birds of a Feather Who'd Like to Share Software Together: Teaching Tools that Improve Efficiency and Outcomes	NA:NA:NA	2018
Paul E. Dickson:John Barr	Computer Science is a rapidly changing field where code bases and development strategies can change in months even if core concepts stay largely the same. In order to prepare our students for this environment we need to enable them to learn on their own and this concept appears in the literature as self-directed or self-regulated learning (SRL). The literature on SRL suggests that reflection is one of the most effective ways of promoting SRL. Reflective diaries, blogs, journals and questionnaires have all been used successfully in fields from the humanities to medicine to engineering to encourage students to engage in SRL. We believe that reflection has not caught on in CS as heavily as in some other fields because our students dismiss these common methods of reflection as mere busy work. The benefit of reflection, however, is not the writing itself but the process of thinking about and analyzing the actions and experiences of learning in order to master them. With this BOF we will describe reflection and its use in CS and start a discussion of reflective exercises relevant to computer science. As an example, students can reflect on how they learn new material by creating YouTube tutorials for others and adding to community knowledge. The intended result of this BOF is to begin the development of a repository of reflective activities that can be used in computer science classes.	Bringing Reflection into Computer Science Education	NA:NA	2018
Diba Mirza:Phillip Conrad:Colleen Lewis:Cynthia Lee	Undergraduates have been an important part of the teaching staff at many universities for decades, but this is not a universal practice. This BOF provides a forum to discuss undergraduate TA/mentor programs at various stages in their evolution. Attendees will have an opportunity to discuss the benefits, best practices, and research questions related to the use of undergraduates as teaching assistants and/or mentors. The audience is expected to consist of faculty that have already implemented such programs, and those who might be considering doing so, and want to share information about successes and challenges. Discussion Leader(s): Phill Conrad will facilitate the discussion and invite Colleen Lewis, Cynthia Lee and Diba Mirza to briefly speak about the Undergraduate TA/Mentor programs at their respective institutions. During the balance of the time participants will be invited to contribute ideas or ask questions related to the use of undergraduate TAs and mentors. Expertise of Discussion Leader(s): Diba Mirza and Phill Conrad are faculty in the Computer Science department at UC Santa Barbara, where they have created an undergraduate mentor program in the past two years. Colleen Lewis is an Associate Professor of CS at Harvey Mudd College, and is the lead PI for the csteachingtips.org project, a project to collect and document CS pedagogical content knowledge. Cynthia Lee is a Lecturer in CS at Stanford University, and works closely with the longstanding undergraduate TA program in the department.	Undergraduate TA and Mentor Programs in Computer Science	NA:NA:NA:NA	2018
Frank Vahid:Roman Lysecky	Program auto-graders used to be tough applications to install and use by instructors, meaning many instructors avoided them, and for those that used them, most assignments were created by specialists with scripting and other expertise. As such, creating new auto-graded programming assignments was a rare event done by just a few people. But modern cloud-based program auto-graders enable nearly any instructor or TA to create new auto-graded assignments in just tens of minutes, fully created and carried out via the web. This capability has led to an explosion in the number of instructors and TAs creating auto-graded programming assignments, benefiting students via immediate feedback and the option to resubmit, and saving teachers huge amounts of grading time. BUT, this new frontier is very different from hand-graded assignments, with plenty of pitfalls for teachers to avoid, and emerging best practices. This BOF allows teachers to share do's and don'ts, so each can improve their use of auto-graded labs, and teachers new to auto-graded labs can benefit from others' experiences. Special focus is on early CS classes (CS0, CS1, CS2) but topics may apply to many CS classes.	Auto-Graded Programming Labs: Dos and Don'ts for Less-Stressed Higher-Performing Students, Reduced Grading Time, and Happier Teachers,	NA:NA	2018
Debra Duke:Margarethe Posch	Process-Oriented Guided Inquiry Learning (POGIL) is a form of student-centered, engaged learning. It is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to experience it first-hand, and (2) bring together experienced POGIL practitioners to share experiences, insights, ideas, and concerns. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.	POGIL in Computer Science for Beginners and Experts	NA:NA	2018
Amardeep Kahlon:Deborah Boisvert:Cheryl Calhoun:Louise Ann Lyon:Jill Denner:Wendy DuBow:Melanie Williamson	Over half of community college (CC) students are non-white, and more than half of all Hispanic and Black undergraduates start at community college. Given that community colleges (CCs) enroll minorities and women in larger numbers than universities, it is imperative for both universities and CCs to engage in collaborative efforts to broaden the participation of diverse peoples in the computing field. Such efforts could include, but not be limited to, the creation of a national broadening participation in computing (BPC) alliance, structured transfer pathways from the CC to the university, the inclusion of a CS Principles course for college, and changing the commonly held perceptions of CCs. Brainstorming, and then building these strategic partnerships requires that experts from various backgrounds come together to share knowledge and experiences that contribute to a better understanding of the role such collaborative efforts could play with universities and CCs in BPC efforts in CS and information technology (IT).	Broadening Participation in Computing: A Call to Action for Universities and Community Colleges	NA:NA:NA:NA:NA:NA:NA	2018
Ronald M. Baecker:Elliot B. Koffman	We shall discuss ways of enriching courses on Computers and Society and Computer Ethics to better engage and stimulate students, including those from Computer Science as well as other disciplines. This topic is significant because society is experiencing increasing stress due to data breaches, privacy invasions, fake news, election hacking, corporate concentration with increased power by a few dominant high-tech firms; and recent advances in AI. Based upon participant interest, we shall discuss and share experiences dealing with issues such as: 1) prerequisites, 2) kinds of assignments and projects; 3) teaching materials including media; 4) the mix of individual and group assignments; 5) how to handle the increasing numbers of desirable topics; 6) how much of the course to focus on AI; 7) methods of teaching ethics; 8) level at which to teach the course, including use in secondary schools; 9) differences between CS courses and general education courses; 10) integration with other CS courses; 11) follow-on options for students wanting to learn more. BOF attendees will be able to hear multiple viewpoints and connect with other people in similar situations, so they can share resources and techniques for teaching such courses. The audience is expected to consist of professors and lecturers who teach, are planning to, or are considering teaching such courses.	Enriching Courses on Computers and Society and Computer Ethics	NA:NA	2018
Leo C. Ureel II:Michelle Jarvie-Eggart:Melanie Kueber Watkins:Russell Looks:Briana Bettin	Programming is becoming skill required by a wide range of students, not just CS majors. Furthermore, not only are non-CS majors learning to program, but many non-CS faculty find themselves teaching programming courses. Introducing these faculty and students to the craft of programming is accompanied by a number of unique challenges. How can non-CS faculty position themselves as programming experts, given they are not CS people? How can we convince non-CS students that coding is a necessary skill? Often our non-computing majors are reluctant, stating "Programming isn't what I signed up for!" Many non-CS students are not receptive to learning new programming languages due to a lack of intrinsic motivation coupled with technological anxiety. These factors often result in low-self efficacy, which must be overcome in order to explore, play, and learn. This Birds of a Feather discussion brings together instructors from diverse disciplines to discuss the teaching of programming to a range of students, the barriers that exist for non-computing students, and the interventions that attempt to mitigate these issues.	Exploring Programming Instruction in Multidisciplinary Contexts	NA:NA:NA:NA:NA	2018
Eileen T. Kraemer:Murali Sitaraman:S. Megan Che	In this BoF we discuss the tenets of culturally responsive computer science and how teachers, professors and providers of professional development can include culturally responsive perspectives in their classes. In contrast to other academic fields, which typically include rigid curricular tracks ostensibly based on academic performance, talent, or ability that pose structural barriers to access to rigorous academic instruction for underrepresented students, the field of computer science education is explicitly focused on broadening participation, as evidenced by the SIGCSE community's consistent emphasis on equitable representation. Culturally responsive computing (CRC) is founded on culturally responsive teaching (CRT) and on CRT's three tenets: asset building (in contrast to deficit approaches), reflection, and connectedness. CRC frames these tenets for the specifics of computing education. CRC's tenet that all students are capable of digital innovation should drive teachers' interactions and relationships with students. CRC also requires that teachers be continually reflective about their privilege and constraints and how those are connected with our worldviews. This topic is significant because teachers must be connected to their students in non-traditional ways that prize diversity as an asset to innovation. The participants are expected to include professors, lecturers, high school teachers and industry experts who are interested in employing culturally responsive computing approaches in their own teaching and professional development activities. A major goal of the BoF is to establish connections among the participants to promote the sharing of resources and best practices.	How Can We Engage in Inclusive, Culturally Responsive Computer Science?	NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #1	NA:NA	2018
Jeremy Sarachan:Sean O'Leary	Professors across various disciplines in the liberal arts increasingly find themselves incorporating programming into their classes. Examples include media professors teaching web design and video game development, art professors teaching Processing, and statistics and political science professors teaching R. In order to help meet the professional development needs of this group, an online publication published in late fall 2018 covers both the general trends related to coding across the liberal arts disciplines, as well as specific pedagogical strategies and assignments related primarily to media production. Specifically, the chapters are: 1) an overview of the use of coding within media departments nationwide; 2) a literature review and analysis of coding pedagogical discourse as it relates to the liberal arts; 3) a discussion of why journalism and media students need to know coding; and six case studies: 4) mobile app creation; 5) p5.js; 6) HTML/CSS 7) interactive documentaries; 8) data visualizations; 9) video games. This book takes an innovative trajectory by never being entirely complete. Authors may submit additional chapters for consideration at anytime with the goal of creating a large repository of coding pedagogy strategies for professors teaching programming outside of traditional Computer Science (and hopefully, Computer Science professors may find this source useful as well). This poster showcases some of the content of the online publication and invites new authors to consider submitting-after discussion with the editor who will be available at the poster session.	Coding Pedagogy for the Liberal Arts: An Online Publication	NA:NA	2018
Melinda McDaniel:David Joyner	As online offerings have matured and expanded, new efforts have recently been devoted to opening fully-accredited online versions of traditional on-campus classes. Such classes may be offered to on-campus students for greater flexibility during busy semesters, or to allow them to continue to make progress toward their degrees during internships or semesters away from campus. This trend intersects with a growing CS for All movement that sees more and more non-computer science majors enrolling in CS classes. As online offerings expand, it is important for us to understand who enrolls in online sections and the reasons for their choices, both to make sure that learning outcomes are similar across different delivery mechanisms, and to take advantage of opportunities to tailor course content to specific audiences. In this analysis, we look at two versions, one online and one traditional, of a CS1 class offered at a major public research university. We investigate demographic, motivational, and experiential components to identify which types of students are most likely to select each version and what implications this decision has for student success and course design.	Online or In Person?: Student Motivations in the Choice of a CS1 Experience	NA:NA	2018
Shamim Khan:Shuangbao Wang:Rania Hodhod	Unauthorized access to confidential information with malicious intent has become a growing challenge to individuals, businesses and governments. Recent media reports of attempted foreign interference in the domestic politics highlights the threat to data security from both within as well as outside the country. Adequate protection of information systems urgently requires a cybersecurity-educated workforce trained using a curriculum that covers the essential skills required for different cybersecurity work roles. The demand for effective cybersecurity education has led to efforts at the national level like the National Initiative for Cybersecurity Education (NICE) framework to guide cybersecurity curriculum design. However, the many-to-may relationships among components of the NICE framework makes it difficult for anyone but experienced cybersecurity experts to design courses or training programs. The much needed rapid expansion of cybersecurity education depends on the ability of educators to understand and reflect in their curriculum frameworks like NICE. This poster presentation describes the design and use of viCyber, an intelligent cybersecurity course design tool, currently under development with support from the National Security Agency. The goal of this tool is to guide inexperienced instructors through the curriculum design process and provide an evaluation of their design with suggestions for possible improvements. viCyber is available as a web-based tool for trial and evaluation by the cybersecurity education community. It is hoped that the dissemination of information through this presentation will help make educators aware of this publicly available web-based tool and elicit valuable feedback from cybersecurity educators.	viCyber: An Intelligent Curriculum Design Tool for Cybersecurity Education	NA:NA:NA	2018
Hillary Fleenor	Even though the computer science education community has not definitively established exactly what ?Computational Thinking" entails, most will agree that it is using a computing machine to solve problems. Like all tools for solving problems, this knowledge should be made available to everyone. Jeannette Wing sounded this call in 2006, writing that "computational methods and models give us the courage to solve problems and design systems that no one of us would be capable of tackling alone." These skills are not just for computer scientists, but for anyone and everyone who plans to solve problems. We already teach other forms of problem solving to all our students including: Mathematical Thinking, Critical Thinking, and Scientific Reasoning. Computational Thinking, as well as engineering and design's Design Thinking, should be equally exposed to all students. It is also important to illuminate that these tools are not used in isolation to solve problems. Perhaps the key to the acceptance of Computational Thinking (as well as Design Thinking) as essential educational tools is to highlight their overlap and interdependence with other problem solving skills. The next generation will need practice with every tool at their disposal to be prepared to solve tomorrow's problems. I propose embedding Computational Thinking in a problem solving framework that leverages teachers' (and students') existing knowledge of problem solving in mathematics, science, and language arts in order to encourage teachers in non CS disciplines to teach Computational Thinking in their classrooms.	Establishing Computational Thinking as Just Another Tool in the Problem Solving Tool Box	NA	2018
Caroline Hardin:Alexander Brooks:Joshua Gabai:Anthony Pellicone:Isaac Sung	In the space between the well documented shortage of access to computer science educational (CSed) opportunities, especially those that broaden participation, and the increasing consensus that computer science knowledge is a fundamental modern literacy lie an eclectic collection of non-traditional and informal CSed projects. An increasingly popular form of interest-based CSed product are board games, which are often justified as interventions due to their 'unplugged' nature and their supposedly natural appeal to diverse audiences of children. Through an exploration of the popular and academic discourses around the CSed board game genre, we found over 30 games which specifically aim to teach core CS content, often with a wide variety of rationales for utilizing a board game format. This poster will display the results of our preliminary work investigating how designers position cardboard as the exciting new alternative for teaching computer science education. Our examination of game makers' documentation and related research suggests that further work is required to determine how well the board game medium serves the various justifications presented by the game makers in our sample.	Questioning the Board in Computer Science Education Board Games	NA:NA:NA:NA:NA	2018
Susan P. Imberman:Robert J. Domanski	Responding to NYC Mayor Bill de Blasio's call to double the number of students graduating with Bachelor degrees in computer science, in 2017, the Tech-in-Residence Corps program - a first-of-its-kind multistakeholder partnership between academia, government, and private industry, was established to specifically address two challenges at the City University of New York; the capacity problem (not enough faculty to accommodate the growing student body) and creating curriculum that incorporates in-demand "applied knowledge" areas to increase students' job competitiveness. Moving industry practitioners into the classroom posed problems that both mirrored and went beyond those posed by the typical adjunct hire. First, accommodations had to be instituted to consider the industry adjunct's work schedule. Second, industry professionals professed a fear of not being able to develop materials and teach effectively. To address these concerns, we set up an administrative structure that paired industry adjuncts with campuses that fit their pedagogical strengths and goals, as well as their logistical needs. Industry adjuncts were assigned campus faulty mentors so that there was a point person with which to communicate other than the chairperson. Both industry adjuncts and faculty attended a two-day workshop focused on pedagogical best practices as well as campus logistics. This poster outlines the Tech-in-Residence Corps model and presents our initial results. Early data indicates that this program has proven quite effective for driving curriculum innovation and raising student awareness of industry trends and hiring practices, however, the jury is still out as to whether it helps address the institutional capacity problem.	Creating a Tech-in-Residence Corps of Industry Adjuncts: An Academic/Government/Industry Partnership	NA:NA	2018
Cheryl Resch:Christina Gardner-McCune	Encouraging Reflection in Support of Learning Data Structures Cheryl Resch, University of Florida Christina Gardner-McCune, University of Florida Contact: [email protected] Our research looks at using reflection in teaching Data Structures and Algorithms (DSA) to promote meaningful learning. This poster examines the differences in reflections produced by two different programming assignments in DSA at the University of Florida. In the first assignment, students were asked to implement a line editor using a linked list and in the reflection prompt students were asked to reflect on the use of the assigned data structure and what they would do differently if they could do the assignment again. In this assignment, the dominant reflection was a simple recounting of material taught in class. In 15% of the reflections, students identified an implementation improvement that could be used. In 25% of the reflections, students identified non-technical issues such as time management when reflecting on what they would do differently if they had to do the assignment again. In the second assignment, students were asked to code Google's page-rank algorithm and were allowed to choose a graph implementation. They were asked to reflect on their implementation and what they would do differently if they could do the assignment again. In this assignment, the dominant reflection, ?%, was about the appropriateness of the chosen graph implementation compared to other implementations. In their reflection on what they would do differently, only 12% of the reflections mentioned non-technical issues. This data suggests that giving students an opportunity to decide the implementation approach and providing more specific reflection prompts produces more technical reflections. DOI: HTTPS://DOI.ORG/10.1145/3287324.3293802	Encouraging Reflection in Support of Learning Data Structures	NA:NA	2018
Jessica Vandenberg:Jennifer Tsan:Zarifa Zakaria:Kristy Elizabeth Boyer:Collin Lynch:Eric Wiebe	Demand for K-6 computer science (CS) curricula is growing considerably. Many of the existing curricula have been developed by domain experts who are comfortable with specific and technical terminology, which they expect students to master. However, children are not always comfortable with these terms nor do they understand general concepts like 'coding' in the way that the curriculum designers intend. This is a problem because many researchers use self-report and attitudinal survey instruments with the implicit belief that the students' understanding of the terms and concepts resemble their own. This mismatch may invalidate results. For this project, we report on our modification of a validated survey to measure upper elementary students' attitudes about and perspectives on CS by attempting to understand the appropriate language to use when querying children about these topics. We use an iterative, design-based research approach that is informed by educational and psychological cognitive interview processes. We interviewed two groups (N=64) of upper elementary students on their understanding of computer science concepts and attitudes toward coding. Our findings indicate that 4th and 5th grade students could not explain the terms computer programs nor computer science as we had expected and that they struggled to understand how coding may connect with or support their learning in other domains. These results will help to guide the development of appropriate survey instruments and course materials for K-6 students, which both match their use of broad domain concepts and therefore inform their understanding and improve their outcomes.	The Development and Validation of Survey Items on Upper Elementary Students' Perspectives and Attitudes on CS	NA:NA:NA:NA:NA:NA	2018
Jeffrey Xavier:Alan Peterfreund:Rebecca Zarch:W. Richards Adrion:Renee Fall:Mark Guzdial:Barbara Ericson:Sarah Dunton:Tom Mcklin	Efforts to improve and promote CS education characterized by greater participation of underrepresented groups have taken off sharply in the six years since the Expanding Computing Education Pathways (ECEP) NSF alliance was first funded. Though many of these initiatives are occurring at the student and teacher level, ECEP and other national-level organizations have demonstrated the importance of focusing on change at the state level, as this can have important, long-term implications on policy and infrastructure. This poster describes ECEP's emergent design as a backbone organization helping state-level teams achieve educational change around CS. It also highlights key lessons learned through the alliance about how to foster CS education change at the state level. Four key lessons stand out. 1) The importance of understanding that engaging states requires appreciating the commonality of a framework around key areas to change (such as state standards, teacher certification and graduation requirements) but also respecting the uniqueness of state circumstances in these change areas. 2) The shared value created through a collective impact model to build a community that can support rich discussion and sharing of ideas. 3) The utility of an empirically derived a 4-stage model of state change used by ECEP that emphasized defining leaders, understanding the CS education landscape and finding allies to support efforts. and 4) The role of state team structures that can facilitate change when they are guided by identifying and engaging key stakeholders within a state and giving them a voice in driving the strategies and plans.	Fostering State-level Change In CS Education: The Expanding Computing Education Pathways Alliance	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Fatima Abu Deeb:Timothy Hickey	There has been a rapid proliferation of auto-graders for introductory programming courses to cope with rapidly expanding Computer Science enrollments. In this poster we report on our research in developing and deploying a problem solving learning environment, Spinoza 3.0, which goes beyond auto-grading and provides active learning exercises to teach debugging, testing, and good coding style in addition to providing immediate feedback on program correctness. The key idea is to collect all of the attempts by all students to a particular problem generated by a particular class and to form them into equivalence classes where two attempts are equivalent if they produce exactly the same values on all of the unit tests. This allows the system to find the most common errors made by that class. The system then generates a variety of different kinds of problems by selecting either one of the most common errors or one of the correct solutions and asking the students to critique it. After a student makes a critique they are shown (a subset of) the critiques of their fellow students and are asked to pick the best one before proceeding to the next problem. Since the system generates new problems precisely tailored to this particular class, by turning selected attempts into new problems, we call this approach Recursive Pedagogy. This poster reports on preliminary results we have obtained using Recursive Pedagogy in an Introduction to Python Programming course with 19 college students.	Teaching and Assessing Debugging, Testing, and Coding Style with Recursive Pedagogy using Spinoza	NA:NA	2018
Valdemar Švábenský:Jan Vykopal:Pavel Celeda	Capture the Flag games are software applications designed to exercise cybersecurity concepts, practice using security tools, and understand cyber attacks and defense. We develop and employ these games at our university for training purposes, unlike in the traditional competitive setting. During the gameplay, it is possible to collect data about players' in-game actions, such as typed commands or solution attempts, including the timing of these actions. Although such data was previously employed in computer security research, to the best of our knowledge, there were few attempts to use this data primarily to improve education. In particular, we see an open and challenging research problem in creating an artificial intelligence assistant that would facilitate the learning of each player. Our goal is to propose, apply, and experimentally evaluate data analysis and machine learning techniques to derive information about the players' interactions from the in-game data. We want to use this information to automatically provide each player with a personalized formative assessment. Such assessment will help the players identify their mastered concepts and areas for improvement, along with suggestions and actionable steps to take. Furthermore, we want to identify high- or low-performing players during the game, and subsequently, offer them game tasks more suitable to their skill level. These interventions would supplement or even replace feedback from instructors, which would significantly increase the learning impact of the games, enable more students to learn cybersecurity skills at an individual pace, and lower the costs.	Towards Learning Analytics in Cybersecurity Capture the Flag Games	NA:NA:NA	2018
Tamara Peyton	The interdisciplinary fields of Computer Science & Engineering and Human Computer Interaction are increasingly faced with developing human-centered solutions faster, with fewer project members. As a result, while learning the process of human-centered research and design within human-computer interaction classes, CSE students often appear to feel pressured to just go ahead and start building as quickly as possible. This is not the right approach, as students will then ignore the crucial problem identification phase of any project. In order to foster the right research and analysis mindset in students, it is often necessary to get them to think outside the box, break down the bumps in the project path, and analyze the action of everyday activities. This poster presents three different object lessons I have used in the undergraduate and graduate classroom that wake students up to the need to research issues, analyze evidence and think critically about connections between people, information and technology - all before they code or make. Handouts.	Boxes, Bumps & Breakfast: Object Lessons for Teaching Undergraduates the Importance of Human-Centered Research & Analysis	NA	2018
Jeremiah Blanchard	Computer science coursework at the undergraduate level at most institutions includes low-level systems coursework. Such coursework is often largely theoretical. When students complete assignments which involve writing software, they often do so in the context of operating systems not identified and/or connected with their everyday experiences (e.g., Minix or XINU). Approaches also tend to focus on kernel-level operations - leaving out the connections to higher levels of the OS (e.g. graphical user interfaces). To connect systems concepts and assignments to students' personal experiences and provide a mechanism to discuss high-level layers of interactive operating systems, we assembled a Linux/Android operating system variant specifically geared to be accessible to students taking introductory systems courses, dubbed "Reptilian". Reptilian, available as an Open Virtual Appliance (OVA) image, provides both an Ubuntu-derived user-space and the standard Android GUI user-space. The appliance provides a typical Linux kernel development environment for assignments while facilitating demonstration of connections between layers in a modern operating system. To investigate the impact of the use of Reptilian, we compared questions on student evaluations between two semesters - one using Minix as the target system for student assignments and another using Reptilian. The curricula topics were identical, and both courses were taught by the same instructor. Students the cohorts completed comparable projects focused on the process table and filesystem, while the Reptilian cohort also completed a GUI layering assignment. We found that students rated content relevance, learning, and engagement of critical thinking more highly in the Reptilian cohort compared to the Minix cohort.	Situated Learning in Systems-Level Coursework	NA	2018
Paul E. Dickson:John Barr	In computer science (CS) classes it is common to give students a large ill-defined problem and let them struggle with it. The mess of the problem forces students to identify knowledge needed to solve the problem and to learn problem-solving skills. This is the concept behind problem-based learning (PBL), a learner-centered pedagogy that has become a popular research topic in computer science. PBL in CS has 3 defining characteristics: 1) presenting students with large authentic projects, 2) enabling students to independently learn necessary concepts, and 3) enabling them to learn while working in groups. An examination of the CS PBL/project-based learning (PrBL) literature reveals that step 2, self-directed or self-regulated learning (SRL), is lacking in almost every description of PBL. However, extensive CS research literature explores effective methods of SRL, and these methods revolve around the concept of reflection. We therefore propose a new structure for PBL/PrBL that we term messy learning that explicitly incorporates large, ill-defined, authentic projects and reflective activities. We also describe our experience with using messy learning in a game development course and present some examples of how to apply messy learning.	Messy Learning: When Problem-based Learning Just Isn't Enough	NA:NA	2018
Yefei Dong:Michelle Craig:Jennifer Campbell	Studies in other disciplines demonstrate that writing summaries of videos or readings is an effective strategy for increasing student understanding. We explore a related strategy in computer science where we ask students to write explanations of program behaviour. Our experiments are conducted through an online application used by students to prepare for class by watching videos and solving follow-up exercises. With students randomly assigned to treatment groups, we evaluate the effect of different kinds of video follow-up questions by analyzing pre- and post-performance on subsequent select-all-that-apply multiple-choice questions. In experiment one, we found no difference in post-performance between students who wrote explanations and those who were not asked to do so. When the same prompt for explanations was accompanied by a motivational sentence, the quality of the student answers increased, but post-performance was unchanged. In a second experiment, students received either no experimental questions, questions requiring a written explanation or short-answer questions with a single correct response. Again, we found no difference in post-performance across the different treatments. This non-significant result might be explained by the post-performance question difficulty -- the question might not be hard enough to reveal differences in understanding. The question timing might also be a factor, since students complete all the questions soon after watching the video and there may not be enough time for students to need the extra retention benefit gained by doing the experimental questions.	Evaluating the Effect of Follow-up Questions in an Online Exercise	NA:NA:NA	2018
Robert M. Siegfried:Diane Liporace:Katherine G. Herbert-Berger	The CS1 course is arguably the most important course offered in a Computer Science major; if students struggle in the course, they are likely to drop out of the major, and if certain key topics are covered, they may struggle in other courses later in their undergraduate program. For this reason, it is not surprising that the programming language used in a CS1 course as well as the teaching methodology is frequently a contentious subject. Richard Reid of Michigan State University kept a list of programming languages used in CS1 courses from the early 1990s until his retirement in 1999, and Reid's former student, Frances Van Scoy, continued compiling the List until 2006. Siegfried et al. updated the List in 2011 and 2015. The historical data shows the different languages (and in some cases, approaches) used by the schools reported on the Reid List. Additionally, in compiling the last two lists, there were trends spotted, with some feedback from faculty at the Reid List schools, stating the reasons for changes that they made as well as why they currently use and previously used the various languages.	What Can the Reid List of First Programming Languages Teach Us About Teaching CS1?	NA:NA:NA	2018
Christopher A. Egert	Game engine design and development is a highly desirable area of exploration for students involved in the computing sciences. Equally, faculty find the use of game engines to be highly compelling in upper division computing courses as they consolidate application of systems topics and usually require a team-based approach in their architectural design and implementation. As an application domain, game engines exhibit a high degree of complexity and present students with challenges related to many areas of the curricula, including graphics programming, computer architecture, operating systems, compiler theory, artificial intelligence, and much more. However, at a practical level, the use of game engines as a motivator for computing concepts and large-scale software development is beginning to change. Educators are starting to question the utility of games engines in the computing classroom given the availability of high quality, easily accessible commercial engines. In this poster, the author examines how this changing landscape influences computing educators that wish to utilize game engines as a motivator in the computing classroom. The poster provides insight into the challenges related to the software construction of game engines and the reality of new approaches and techniques that are on the horizon. The poster provides examples of means and methods to provide balance, incorporating lessons learned from new industry approaches in relation to (and not exclusion) the foundational practices of the computing sciences.	Game Engines Construction to Motivate Computing Concepts: Build from Scratch or Leverage Existing Systems	NA	2018
Mehmet Celepkolu:Erin O'Halloran:Jamieka Wilkinson:Kristy Elizabeth Boyer	As efforts to integrate computer science into K-8 teaching in the US are dramatically rising, professional development workshops for teachers are becoming widespread. An open challenge for the CS education research community is to understand teachers' needs and develop empirically grounded best practices for professional development. This poster displays our findings from a five-day professional development workshop in which 22 third through eighth grade teachers from various subjects learned about fundamental CS concepts, practiced coding, and created lesson plans for integrating what they learned into their classroom. We present quantitative and qualitative outcomes, with emphasis on teachers' perception of CS and how to integrate CS into their classrooms. The quantitative results, based on pre- and post-tests, reveal that the teachers gained significant technical knowledge and improved their attitudes toward CS. The qualitative results, based on the focus groups conducted before and after the workshop, indicated that teachers' limited exposure to CS can lead to misconceptions and some negative attitudes. Moreover, limitations such as time constraints and lack of understanding of CS are barriers to integrating CS into classrooms. On the other hand, the workshop provided teachers a clearer sense of the potential of CS to enhance their classroom plans. Teachers noted that they felt able to use CS to help students learn critical thinking, prepare them for their futures, and address their individual needs. These results can inform future workshops that address the needs of teachers and students.	An Analysis of Upper Elementary and Middle Grade Teachers' Perceptions, Concerns and Goals for Integrating CS into Classrooms	NA:NA:NA:NA	2018
Shuchi Grover:Ximena Dominguez:Danae Kamdar:Phil Vahey:Savitha Moorthy:Ken Rafanan:Sara Gracely	How do we integrate requisite thinking skills into children's earliest informal and formal learning experiences in order to prepare the next generation of problem solvers? This project examines how Computational Thinking (CT) skills align to the abilities and interests of young children and can be integrated with other STEM learning activities in order to promote school readiness. The goals of the project are to (1) build a knowledge base on how CT can be promoted in early childhood through integration with mathematics and science, (2) develop learning blueprints to guide the development of integrated classroom and family resources, and (3) develop and evaluate prototype activities to identify design principles useful to future development efforts integrating CT and STEM in early childhood. In this work, a multidisciplinary research team with expertise in CT, early science and mathematics, technology and media, and home and school learning partners with preschool educators and parents to co-design and pilot test prototype activities. Emerging prototypes presented integrate fundamental science and mathematics concepts and practices with CT skills such as problem decomposition, logical and algorithmic thinking, abstraction and debugging. They include hands-on activities with manipulatives familiar to young children and developmentally appropriate technology with unique affordances for complementing and reinforcing the learning that occurs during hands-on experiences. With a goal of addressing CS For All, the co-design, development and pilot testing of prototype activities aim to take into account the needs and strengths of preschool programs and families from low-income and culturally diverse communities.	Integrating Computational Thinking in Informal and Formal Science and Math Activities for Preschool Learners	NA:NA:NA:NA:NA:NA:NA	2018
Katelyn Manzo:Stacy A. Doore:Sarah Harmon	It is not just K-12 students that have misconceptions about computer science. Undergraduate students entering into a post-secondary computer science major also have significant misconceptions about what a computer scientist actually does on a day-to-day basis, even at the end of their four-year undergraduate computer science program. While the Draw-A-Scientist Test (DAST) investigates student perceptions of scientists in general (Chambers, 1983) and the Draw-An- Engineer Test (DAET) examines student perceptions of engineers (Knight and Cunningham, 2004), there have been few adaptations investigating student perceptions of computer scientists (Martin, 2004). Based on previous research, our study assessed undergraduate computer science student perceptions of computer scientists at both a mid-size research university and a small liberal arts college. Students (n=120) were asked to describe computer scientists in both a visual format and a written format using an adaptation of the DAST. The authors share comparative results for computer science students (pre-test, post-test) perceptions when 1) exposed to an intentional but not explicit curriculum with diverse representation of computer scientist images and a broad range of computer science research areas, and 2) exposed to a regular curriculum without intentional messages about the diversity of computer scientists and the diversity of research areas within the discipline. The poster describes additional scoring measures introduced beyond those in previous instruments which help to better categorize and interpret perceptions of computer science students about their own discipline.	Undergraduate Computer Science Student Perceptions of their Own Field	NA:NA:NA	2018
Rachelle Kristof Hippler	Much research has been conducted demonstrating that women often have different experiences in computer science than their male classmates. Self-esteem research provides one way we can understand the effects of these experiences as self-esteem has long been associated with well-being and academic success. Some experiences may be positive and enhance self-esteem, where others may be negative and decrease self-esteem leaving students to doubt whether they belong in their computing major. This poster presents a workshop for students that is grounded in research on building what is called "authentic" self-esteem. Authentic self-esteem can be understood as a balance between competence (skills) and worthiness (feelings of connectedness and acceptance). Recent research by the poster presenter based on these two factors of self-esteem revealed that female computing student's feelings of worthiness and competence are unbalanced: (1) their feelings of worthiness are lower than their feelings of competence within their computing major; and, (2) the gap is largest among seniors. This gap between competence and worthiness manifests as doubt just at the time that students should be excited about graduation and interviewing for jobs. The workshop presented in this poster was developed with psychologist Christopher Mruk and is based on his Competence and Worthiness Training (CWT) program. The workshop is aimed at providing students with tools to build their authentic self-esteem through helping to close the gap between their feelings of competence and worthiness.	Overcoming Doubt: Workshop Aimed at Giving Students Strategies to Build Their Authentic Self-Esteem Within Their Computing Major	NA	2018
Michael J. McCarthy:Joseph Mertz:Martin L. Barrett:Michael Melville	Labs in a large lecture course provide highly scaffolded programming exercises. Despite positive student feedback, some students were not achieving the learning goals. This project attempted to increase student's conceptual understanding using short active learning exercises. The first iteration of this project used two versions of active learning: present several multiple-choice questions about the lab material, then either provide a full debrief of all answers or a partial debrief of only the correct answer. The control group was the previous semester's course when no debriefing was done. Two research questions were evaluated. First, does debriefing enhance learning in a computer science course? We found that students performed significantly better on debriefed items compared to students that were not debriefed. These results were unaffected by individual student GPA as a predictor. Second, does level of depth of debriefing affect learning? We found no significant difference between full debrief and partial debrief groups. These results were replicated in a second trial that compared full, partial, and no debriefing. In the second iteration of the project, each of three sections were given a full debrief, partial debrief, or no debrief (only the correct answer was given with no explanation). The full debrief group and the partial debrief group used the Think-Pair-Share method: pairs of students discussed the questions and various answers; one pair was chosen at random to answer each question. The research question is, does the level of depth of the debriefing intervention among the three treatments affect learning?	Debriefing Lab Content Using Active Learning	NA:NA:NA:NA	2018
Gary Krenz:Thomas Kaczmarek	The new graduate curriculum initiative, COSMIC: Change Opportunity - Start Masters in Computing, is aimed at an adult population that is typically under-served by computing programs at institutions of higher education. The COSMIC initiative provides an accelerated pathway to a professional Master of Science (MS) degree for individuals who do not have an undergraduate degree in computing, but who wish to cross over into the computing field. The COSMIC initiative is based on a highly focused summer bridge course combined with a customized curriculum pathway that allows people without computer science degrees to merge quickly and efficiently into a professional MS in Computing degree program. In this poster, we discuss our bridge course, additional bridge curriculum and its connection to our MS in Computing program; and present preliminary data from initial COSMIC cohorts. The COSMIC initiative's goal is to provide the computing profession with a documented model for training students that seek to cross over from non-computer science undergraduate degrees to work in the computing field.	Graduate Curriculum Initiative - COSMIC: Change Opportunity - Start Masters in Computing	NA:NA	2018
Audrey Rorrer:Julio César Bahamón	We describe a study of learning outcomes in an undergraduate C Programming course taught in two modalities: in-person and online. Because this course has been taught by the same instructor, using the same scaffolding activities, materials and approaches, we were uniquely positioned to conduct a quasi-experimental study of learning outcomes between courses and within students. Our goal was to glean knowledge and implications about assessment practices for undergraduate courses that are taught in two modalities. The objectives of our research are to discern what differential impacts are found between in-person and online delivery modalities. We aimed to discover learning outcome patterns among the students who participate in these modalities. Findings from this study provide valuable information for undergraduate Computer Science programs by identifying any differential learning outcomes that students experience between in-person and online course instruction. The research questions addressed were: 1) What impact does modality have on student learning outcomes? 2) What patterns are discernable across student groups 3) What relationship is there between final course grades and assignment module learning outcomes? We were surprised that no significant differences were obtained between course modality. While this is an encouraging finding, we believe that further data collection and analysis are needed, before making general conclusions. We are planning future studies to account for additional variables, such as instructor, multiple modalities, and online course design approaches.	An Investigation of Learning Outcomes Between Two Teaching Modalities to Improve Student Learning in Online Courses	NA:NA	2018
Lauren Elizabeth. Provost:Christopher Harrington	This poster session will discuss several dimensions of bias in curricular design that must be considered in the development of curriculum materials in undergraduate computer science education if we are to broaden interest, engagement and ultimately participation. Multiple dimensions of bias were used to identify gender, race and other biases in curricula that led to the authors' redesign of coursework materials and activities in two undergraduate courses: Computer Networks and Cybersecurity. Our goal was to assess current curricula and ultimately redesign curricula to include topics and authentic activities connected to industry while also broadening learner interest, engagement and accessibility. The design of materials intentionally shifted to social problems, data-driven problem solving and other new curricula foci areas that have been shown to broaden interest and engagement. In addition, materials are aligned with national standards and competencies in cybersecurity while maintaining course rigor. The expanded study includes the use of multiple measures to assess the effectiveness of curriculum design in relation to interest and other factors that influence the engagement of learners in their first two years of computer science coursework. The Computer Science Cultural Attitude and Identity Survey (CSAIS) was revised and used to measure constructs that influence the attitudes and identity of undergraduate students in computer science including interest as well as other factors such as self-efficacy and identity.	University-Industry Collaboration in Curriculum Design: A Case Study of Curriculum Design for Early Undergraduate Computer Science Coursework with an Eye on Equity	NA:NA	2018
Ashwin Satyanarayana:Lior Baron	Effective tutoring is not limited to humans alone. A significant amount of research in songbird learning has shown that birds' songs are not coded in the DNA like other behavioral features but learned over time through one-on-one tutoring involving experimentation, error detection and adaptation. Like students, juvenile songbirds use active listening to learn a tutor's song that is repeated multiple times. The songbird first divides the complex song into short syllables and later uses trial and error to match the syllables sequence to the tutor's song. Birds learn more effectively when listening to an adult bird from the same species. We draw a parallel to bird learning in humans by implementing one-on-one peer-based tutoring of first-year students by senior students, who share the same culture. This poster presents a successful ongoing mentoring and tutoring model used at the Computer Systems Technology department of New York City College of Technology (CUNY) for over five years. This peer-based model utilizes strategies shared by both first-year students and young birds involving social interaction, active learning and problem decomposition. Furthermore, the tutors hired were trained to use the same strategies observed in songbirds tutoring. This project has shown an increase in first-year student retention rate of 83% for students who participated in this program as compared to 61% retention for students who did not. The tutoring program impact demonstrated that the students' academic performance increased significantly (mixed model anova F(1, 247) = 29.11, p < 0.001).	A Peer Based Tutoring and Mentoring Model for First Year Computer Science Courses Based on Strategies Used by Songbirds for Learning	NA:NA	2018
Yuuki Yokoyama:Hironori Egi	In this research, we devised learning support strategies to change how teaching assistants (TAs) for basic university courses in information technology (IT) behave toward students during programming classes. Based on learning support strategies, we developed and evaluated a TA support system that presents student learning situations on mobile devices. In basic IT courses, a TA support system is often used to help and guide individual students. To help TAs using such support, a previous study visualizes the learning situation and offers advice. However, support in addition to presenting learning situations to the TA should include guidelines for interaction with the students. In order to provide adequate support to students, we propose learning support strategies for TAs. In practical computer science exercises, TAs mainly advise and answer questions from students. However, it is not clear how TAs could best support students. Therefore, we propose the following learning support three types of strategies: "Hope", "Priority", "Motivation". Futhermore, we researched what learning support from the TA was desired by the students and developed a TA support system that presents learning support strategies. According to each learning support strategy, the classroom's map governs seat colors for each student who is the recipient of advice. The TA prioritizes helping the students presented by the learning support strategy as mapped by the seat charts. The system we developed was practiced in class, and as a result we found that even students who wanted to work on sophisticated content did not consider the teacher and TA unnecessary.	Changing Teaching Assistant's Behavior Based on Learning Support Strategies for Programming Exercise	NA:NA	2018
Lina Battestilli:Sarah Korkes:Olivia Smith:Tiffany Barnes	Automated grading has become crucial in supporting large introductory Computer Science courses by assisting instructors in reducing grading time and course costs. However, novice programmers are often frustrated by auto-grading tools as they often provide minimal feedback or the questions are too complex. We propose using Bloom's Taxonomy to gradually increase the complexity of the programming question in an auto-grading tool. The easiest questions are based on Knowledge and Comprehension. Next are questions that require Application and Analysis. The most complex questions require Design and Creativity. We have developed programming questions that fit these categories. For example, for debugging the students have to understand and Analyze code. However, in order to write a program with more complex logic the students have to be Creative. The main goal is to lead novice programmers to learn more effectively and efficiently. In this poster, we present examples of the developed auto-graded programming problems based on Bloom's Taxonomy and the results of a pilot study in a CS-1 non-majors course	Using Bloom's Taxonomy to Write Effective Programming Questions for Autograding Tools	NA:NA:NA:NA	2018
Merijke Coenraad:Jen Palmer:Diana Franklin:David Weintrop	The underrepresentation of women and minorities in the field of computer science is well documented. Due to this lack of representation, efforts to broaden participation in computing abound. One manner with which to do this is through the development of culturally relevant curricula. Education literature encourages the use of culturally relevant techniques and topics to teach school content through the knowledge of diverse groups as well as teach about culturally diverse populations. In addition, partnering with the students who will learn with the curriculum is encouraged in order to co-develop ideas and learn more about students' interests and experiences. This poster describes the outcomes from a series of participatory design sessions with a diverse group of stakeholders (students, teachers, parents, and administrators) to design an intermediate computing curriculum for 5th - 7th grade students. Specifically, we examine the topics developed by the participants that are being utilized as themes for curricular units. Preliminary analysis shows that participants of all ages brainstormed and utilized themes related to both cultural heritage and contemporary culture, but more focus was placed on youth culture and pop culture topics. The poster will describe the design methods used during the participatory design sessions as well as the themes developed and an overall analysis of the categories from which the themes are drawn.	Utilizing Participatory Design to Develop a Culturally Relevant Computer Science Curriculum	NA:NA:NA:NA	2018
Harrison Chotzen:Alasdair J. Johnson:Parth M. Desai	This paper describes misconceptions students encounter as they design algorithms to implement linked list operations. The research was conducted in a qualitative manner [1], and aims to inform pedagogical practice in the data structures space. The design of our study involved conducting interviews with five undergraduate students, who were given a packet consisting of four questions involving arrays, linked lists, or binary search trees. Though participants showed a confident understanding of the way that linked lists work as static diagrams, when asked to reason about the reassignment of pointers during the design of insert and remove operations, the students seemed to struggle. The details of the representation of pointers as members of the linked list class appeared unclear to our participants, and we posit this gap of understanding was a primary source confusion. We posit increased attention to the object oriented implantation of linked lists in data structures education may result in improved learning outcomes.	Exploring the Mental Models of Undergraduate Programmers in the Context of Linked Lists	NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #2	NA:NA	2018
Qiong Cheng	In the Big Data era, essential data skills are critical for everybody in full participation of the workforce and modern society to better understand decisions from diverse levels of society. However not all graduates exit college with these needed skills. In this poster, the author(s) report on the integrating of data literacy into a college-wide computer and information literacy course with collaborative practices of project-based learning, which aims at increasing students' awareness of data science and boosting essential data skills of college-wide students. In the poster, we will demonstrate our module design on training essential data skills through examples, case students, and team-based projects within a college-wide computer and information literacy course. We will also present our comparative analysis on one data-enhanced course session with other two course regular sessions as control. In the data-enhanced session, students formed a team, choose a topic in the engaging context, specified questions that they want to ask and answered through data, analyzed data from different perspectives, evaluated results, and present in the course poster session. Two measures are used in assessing the effectiveness of exploratory and collaborative learning in data literacy: student performance in a poster session and student perceptions on Likert scales. Thus far the evaluation results and statistical analysis showed the innovative practice significantly intrigued students' interest in data science and boosted students' fundamental data skills, for both computer science or non-computer science majors.	Enhancing Essential Data Skills for College-wide Students	NA	2018
Hossain Shahriar:Kai Qian:Md Arabin Islam Talukder:Reza Parizi	The majority of malicious mobile attacks take advantage of vulnerabilities in mobile applications, such as sensitive data leakage via inadvertent or side channel, unsecured sensitive data storage, data transmission, and many others. Most of these mobile vulnerabilities can be detected in the mobile software testing phase. However, most development teams often have virtually no time to address them due to critical project deadlines. To combat this, the more defect removal filters there are in the software development life cycle, the fewer defects that can lead to vulnerabilities will remain in the software product when it is released. As part of Secure Mobile Software Development (SMSD) project, we are currently developing capacity to address the lack of pedagogical materials and real world learning environment in secure mobile software development through effective, engaging, and investigative approaches. In this session, we provide details of a new implemented module named data protection. We also share our initial experience and feedback on the developed module.	Data Protection with SMSD Labware	NA:NA:NA:NA	2018
Kalpathi Subramanian:Kiran Budhrani	Traditionally, students are introduced to programming oriented courses by covering a series of topics and having a programming project due at the end of each topic. Assigned projects are often not connected to each other, but are rather used to expose students to a variety programming constructs and concepts. Students take the most direct approach such as trial and error to complete these projects. While this scenario utilizes projects, it approaches the use of projects as a means to assess learning rather than a means for learning. In this poster, we present results from a project-based online course in object-oriented analysis and design. We present a model for structuring project modules that provide opportunities for students to prepare, design, implement and reflect on each project module. By providing multiple points for feedback and reflection, as well as assigning projects with visual components, the course aims to promote engagement of undergraduate students, while at the same time maintaining rigor. Preliminary results from this course are encouraging, and could potentially become a model for project based learning.	Applying Project-Based Learning for An Online Object-Oriented Systems Course	NA:NA	2018
Zhewei Hu:Edward Gehringer	Rising enrollments make it difficult for instructors and teaching assistants to give adequate feedback on each student's work. In our software engineering course, we have 50-120 students each semester. Our course projects require students to submit GitHub pull requests as deliverables for their open-source software (OSS) projects. We have set up a static code analyzer and a continuous integration service on GitHub to help students check code style and functionality. However, these tools cannot enforce system-specific customized guidelines and do not explicitly display detailed information. In this study, we discuss how we bypass the limitations of existing tools by implementing three Internet bots. The Expertiza Bot can help detect violations of more than 35 system-specific guidelines. The Travis CI Bot can explicitly display instant test execution results on the GitHub pull-request page. The Code Climate Bot can insert pull-request comments to remind students to fix issues detected by the static code analyzer. These bots are either open source or free for OSS projects, and can be easily integrated with GitHub repositories. Our survey results show that more than 70% of students think the advice given by the bots is useful. We tallied the amount of feedback given by the bots and the teaching staff for each GitHub pull request. Results show that bots can provide significantly more feedback (six times more on average) than teaching staff. Bots can also offer more timely feedback than teaching staff and help student contributions avoid more than 33% system-specific guideline violations.	Use Bots to Improve GitHub Pull-Request Feedback	NA:NA	2018
Ayaan M. Kazerouni:Riffat Sabbir Mansur:Stephen H. Edwards:Clifford A. Shaffer	Debugging is an important part of the software development process, studied by both the CS education and software engineering communities. Most prior work has focused either on novice or professional programmers. Intermediate-to-advanced students (such as those enrolled in post-CS2 Data Structures courses) who are working on large and complex projects have largely been ignored. We present results from an empirical observational study that examined junior-level undergraduate students' debugging practices on relatively large (4-week lifecycle) projects, using IDE clickstream data collected by a custom Eclipse plugin. Specifically, we hypothesize that there are differing debugging behaviors exhibited, and that differing behaviors lead to differing project out-comes. For example, how often do students use the symbolic debugger available in modern IDEs, versus how often do they use diagnostic print statements, or both? What triggers a debugging session? What follows a debugging session? Does it matter when in the project lifecycle that debugging takes place? We have a number of interesting preliminary results. When using the debugger, there was a negative relationship between step-over and step-into actions versus final course grades, indicating that when students "spin their wheels" while debugging, they tend to perform more poorly. Students also tend to perform better on the project when debugging takes place earlier in the overall project life-cycle. We developed an algorithm to identify diagnostic print statements in the students' projects. We found that over 90% used at least one diagnostic print statement, and about 75% used the symbolic debugger, at least once in any given project.	Student Debugging Practices and Their Relationships with Project Outcomes	NA:NA:NA:NA	2018
Mostafa Mohammed:Clifford A. Shaffer:Susan H. Rodger	The material taught in a Formal languages course is mathematical in nature and requires students to practice proofs and algorithms to understand the content. Traditional Formal Languages textbooks are heavy on prose rather than visuals, and homework consists of solving many paper exercises. Some instructors make use of Finite State Machine simulators like JFLAP. JFLAP allows students to build different models and apply algorithms on these models, which improves student interaction with the material. However, students still need to read a significant amount of text without direct and immediate feedback on their understanding. Inspired by the Programmed Instruction (PI) teaching method, we have begun developing a new Formal Languages eText-book capable of conveying these concepts more intuitively (through visualizations) and more interactively (through the use of PI methods). Under PI methods, students read a little, ideally a sentence or a paragraph, and then answer a question related to that information. Based on the question response, students can go further and complete other frames of information or retry to solve the same question. To evaluate the pedagogical effectiveness of our new eTextbook, we will conduct time and performance evaluations across two offerings of a Formal Languages course. We will compare the time spent by students using materials with text and exercises only, with text and visualizations, and with the PI frames to determine levels of students engagement. Students grades will be compared to assess learning gains.	Using Interactive Visualization and Programmed Instruction to Teach Formal Languages	NA:NA:NA	2018
Anisha Kaul:Julia Ann Pinedo:Anya Wallace	This study was a qualitative analysis of introductory-level computer science students' comprehension of sorting algorithms. We asked six students to read and summarize the code of a sorting algorithm. Next, we asked them to trace through the code, first using a provided array with pencil and paper, then again using sticky-notes to represent the array. Focused analysis of one interview found that a student who struggled to comprehend the algorithm during the pencil-and-paper trace quickly gained understanding when physically tracing the sticky-note array. We hypothesize that physical interaction with a sticky-note representation of an array facilitated student comprehension of sorting algorithms by consolidating multiple lines of code (LOC) into a single repeatable action. This research is relevant to computer science educators who may teach sorting algorithms to introductory-level students.	Benefits of Physical Interaction with Array Elements and Code Consolidation on Student Comprehension of Sorting Algorithms	NA:NA:NA	2018
Jennifer Tsan:Jessica Vandenberg:Xiaoting Fu:Jamieka Wilkinson:Danielle Boulden:Kristy Elizabeth Boyer:Collin Lynch:Eric Wiebe	Extensive prior research suggests that pair programming holds many benefits for novices. Pair programming has been well studied at the undergraduate level, and recently, the CS education research community has started to realize that younger learners may also benefit from pair programming. However, an important factor in pair programming success for young learners is the ability to resolve conflicts during the process. Little is known about what types of conflicts occur while elementary students pair program or how those conflicts are, or are not, resolved. To investigate this phenomenon, we analyzed the videos of six pairs of students completing a programming activity. We found that conflicts evolve in four general stages, which may not all be present in each conflict: initiation, escalation, de-escalation, and conclusion. Some conflicts are resolved when the students come to an agreement, others end passively. The analysis revealed that the pairs' conflicts began around disagreements about code, who should have control of the keyboard and mouse, and other interpersonal events. This research indicates that conflicts are a significant concern for young students, and supporting young learners in developing improved collaboration skills is a key direction for CS education research.	An Investigation of Conflicts Between Upper-Elementary Pair Programmers	NA:NA:NA:NA:NA:NA:NA:NA	2018
Miguel Lara:Kathryn Cunningham:Bude Su	Computing educators entice students with information about stable, readily available, and lucrative careers in computing. Do our promises turn into reality for all students? We report on an in-depth alumni survey of 50 college graduates from a 3-year cohort-based program (CSin3), one year post-graduation. The majority of graduates from the two first cohorts surveyed are Hispanic, first-generation college students from a rural area in California. More than a third of the respondents (36%) are female. Notwithstanding the fast pace of the program (three years instead of the traditional four), the vast majority of graduates (88%) were full-time employed at the time of the survey and were hired less than 3 months after graduation, on average. The most common challenges that alumni reported facing professionally are: Work-life balance (36%) Cost of living (36%) Lack of diversity (25%), and Stress in current position (25%) (they could select multiple choices). While no correlation was found between GPA and job satisfaction level or annual salary, significant low grades in upper division programming courses were a common factor among unemployed alumni. We also examined differences, based on gender, in annual salary and job satisfaction level; intention to remain in the technology sector; their level of satisfaction about how well the CSin3 program prepared them professionally; correlation between job satisfaction level and choice of CS as a career; and factors and alumni's perceptions of what contributed to their success in the job market, such as their participation in an internship program and the academic enrichment activities.	Job Placement Experience of Alumni from a 3-year CS Program	NA:NA:NA	2018
Cynthia Y. Lester:Pamela Leggett-Robinson	In 2016, Georgia Perimeter College consolidated with Georgia State University. The new Georgia State University with a student population of over 51,000 has become a national model in serving students from diverse backgrounds. Perimeter College is the 2-year arm of the university and provides instruction to approximately 18,000 students. As of fall 2018, there were over 1200 students who had declared computer science as a pathway and 40 percent were from groups historically underrepresented in STEM. The purpose of this poster to describe co-curricular programs that began in 2012, with the establishment of the Perimeter College STEM Office whose mission was to increase access and success. The poster will present programs that were developed and continue to be utilized to broaden participation, improve retention, and increase CS student identity and a sense of belonging especially among students who are first generation, at-risk, and from minority populations. Although created for students especially at the 2-year college level, programs are scalable to senior institutions. Data and findings will be presented to also include how the STEM Office helped grow programming at Perimeter College by 175 percent and how partnerships have helped to provide sustainability.	Creating Co-curricular Programs to Improve CS Student Identity and Sense of Belonging	NA:NA	2018
C.F. Larry Heimann:Sara Moussawi:Jeria Quesenberry:Raja Soriamurthi	Getting alumni effectively engaged as mentors with students is a topic that is of great interest to universities but often hard to do in practice. We have found that with proper structure and support, software project courses provide a good avenue to make these connections between alumni and student and that alumni input can improve the quality of outcomes in these project courses. In this poster the authors describe the alumni mentoring process and how it has evolved over the past three years. In addition, we have begun to collect data from both student teams and alumni to answer three questions: (1) what information are alumni sharing with student teams? (2) is a student team's perception of what was said matching up well with the mentor's perception?, (3) are student teams able to convert alumni feedback into actionable project items?, and (4) at what phase in a software engineering project are alumni mentors most effective? The poster will demonstrate the details of our mentoring process and display our preliminary findings in a colorful fashion convenient to allow others to assess for themselves the potential value of using alumni mentors in software project courses.	Engaging Alumni Mentors in Software Engineering Project Courses	NA:NA:NA:NA	2018
Carsten Kleiner:Arne Koschel	This poster presents our experiences in offering 10 years of CS/SE capstone projects in the distributed systems area. Based on a presentation of typical example projects over time we draw interesting conclusions. Our observations over this time span address suitable project subjects, development methodology as well as student motivation in projects and how to raise it. We will show that certain aspects have not changed much over time such as: system integration and its effort is always larger than expected. Similarly, using even a well-established enterprise open source technology usually requires more work than estimated upfront. Also, better students tend to prefer more challenging projects. Other aspects have improved making use of recent findings in research and technological development such as using agile development methodology or novel communication means. Also, we demonstrate that good students projects can contribute to research publications and that an international setting for capstone projects is both raising motivation for students as well as increasing organizational challenges. Overall we found that company sponsored projects generally increase result quality as the "real world touch" seems to be appealing.	Lessons Learned in 10 years of Distributed Systems Capstones	NA:NA	2018
Abhimanyu Ghosh:Daniel Sinkovits:Keith Wojciechowski	Students in non-CS STEM majors often have specific difficulties with programming content in their coursework. Instructor feedback is usually limited to the results obtained and major algorithmic errors, due to the nature of coding assignments. The authors' aim is to investigate whether presenting code and receiving feedback from their peers in class makes an appreciable difference in non-CS STEM-major students' learning of programming. The poster will present data collected over two semesters from five sections of three programming-heavy chemistry, engineering and math courses taught at the University of Wisconsin-Stout. Student groups were asked to present their homework attempts to the class, their peers were asked to fill out surveys containing Yes/No questions and comments on the attempts, and this feedback was passed on to the presenting students, who were then given time to improve their work before submitting their final versions. Comparison of student performance statistics in exams, between semesters during which the study was implemented and prior semesters, is used as a tool to assess student learning. Results of the study from two semesters have shown that group composition and the type of questions asked in the survey are the two major factors at play. The poster will also discuss the enhanced design of the study during the third and final semester in spring 2019 that will take these results into account. DOI: http://doi.org/10.1145/3287324.3293820	Improving Programming Skills Through Classroom Presentation of Assignments	NA:NA:NA	2018
Gina Sprint	Despite student interest in mobile app development (MAD) and a rise in demand for mobile app developers, many computer science departments have not yet incorporated a MAD course into their curriculum. For such departments, barriers such as resource and curriculum limitations stand in the way of offering a MAD course. To elaborate, it can be difficult to find an instructor with the expertise to teach a MAD course. If such expertise is not available, it can be time consuming for an educator to train him/herself to gain the necessary knowledge to the teach the course. Furthermore, the instructor must decide which MAD platform to utilize, Android, iOS, hybrid, or web? Since MAD is a relatively new field, there are few resources in the literature that can help with MAD course preparation and design. In this poster, I present my experiences navigating these MAD course barriers at a primarily undergraduate institution. Recently, I have designed and taught a 300-level Android/Java course (Fall 2017) and a 300-level iOS/Swift course (Fall 2018). My experience report includes a summary of MAD course preparation, design, and implementation for both courses. To help guide choosing a platform, I include a detailed comparison of Android and iOS for supporting undergraduate CS learning outcomes. The comparison is based on resources required, maintenance considerations, software design principles covered (OOP and design patterns), and student work and feedback. The experiences reported in this poster offer guidance and insights for educators considering teaching a MAD course at their own university.	Mobile App Development: Android or iOS? An Experience Report from Teaching Both Platforms	NA	2018
Todd Lash:Stephanie Wortel-London:Leigh Ann Delyser:Lauren Wright	Creating equitable, sustainable, and productive partnerships between computer science (CS) education researchers and practitioners is essential if we are to further improve CS educational outcomes, practice, and equity. Research-practice partnerships (RPPs) provide one promising approach for expanding how practice may inform research and research may inform practice. This early work, centered around a framework proposed by Henrick et al., and utilizing interview data from 11 participants, explores the ways in which six diverse RPP teams went about developing trusting and collaborative relationships as they worked together to solve local problems of practice. Barriers and challenges to collaboration and trust building, as well as mechanisms by which teams overcame those challenges, are discussed. The study revealed discrete team behaviors, norms, and structures that may contribute to building more collaborative, trusting, and sustainable RPP relationships. Limitations are presented and implications for current and future RPP teams, as well as possible future research directions, are addressed.	Building Trust in Computer Science Research-Practice Partnerships: A Theme Study	NA:NA:NA:NA	2018
Meng Han:Zhigang Li:Jing Selena He:Xin Shirley Tian	In this poster, the investigators report their experience in teaching five computer science courses that were developed specifically for non-CS major students. These courses were taught in a four-year period in a public research institution in the South-eastern region of the United States. The whole study demonstrates an emerging demand for computing education from non-CS major students. The investigators collected data from both the students and the instructors in the hope to seek empirical answers to the questions of why there are such emerging demands for computing education, where are the demands coming from, and what non-CS major students are looking for in computer science classes. The answers to these questions can help shed the light on what educators should provide to the students in these courses. Based on the analysis of the data gathered, the investigators proposed a list of four recommendations to help guide fellow educators in the development of non-CS major computer science courses: (a) focus on high-level programming and modeling with low syntactic overhead; (b) broaden the breath of application demonstration to help non-CS major students to apply the knowledge to their specific domain; (c) introduction of computational tools; (d) hands on projects that match students' background and interests.	Understand the Emerging Demands of Computing Education for Non-CS Major Students	NA:NA:NA:NA	2018
Katherine G. Herbert-Berger:Nina Goodey:Stephen Ruczszyk:Scott Kight:Thomas J. Marlowe	Contact: [email protected] The United States does not produce sufficient numbers of well-qualified professionals in STEM, and in computing/ technology in particular. The number of students pursuing undergraduate degrees in computer science or related field continues to grow but is still not pacing industry growth. Employers repeatedly suggest that good professional and technical competencies, including "soft skills", are a major factor in both obtaining and succeeding in STEM careers. Moreover, both the Council on Graduate Studies and the National Science Board in the NSF 2018 STEM Trends report support the need of such skills for success in STEM. These competencies comprise (1) communication, oral and written, and in technical, business and general settings; (2) working in and leading teams, in varying roles; (3) managing business and professional relationships; (4) planning, problem solving, and critical thinking; (5) mathematical capabilities including numeracy; and (6) an understanding of ethical, social, managerial, and economic perspectives; plus, responding to recent developments in science and science careers, (7) an interdisciplinary perspective and overview understanding of data science. In this poster we present a proposal for a post baccalaureate certificate curriculum, which we suggest also assists students transitioning from other fields, and can be applied more widely across STEM.	Infusing CS Graduate Transition Curriculum with Professional, Technical and Data Science Competencies	NA:NA:NA:NA:NA	2018
Selvarajah Mohanarajah:Gregorry Ross:Shan Suthaharan	Platform-independent encapsulated and self-contained labs can enhance the delivery of cybersecurity teaching modules in resource-limited academic institutions. Cybersecurity teaching modules usually incorporate hands-on labs using tools such as NETLAB+, NS-3, SEED, GENI, etc. There are two major problems in using such labs; students need to learn the underlying tool before doing labs, and setting-up a lab may require significant IT support and resources. In addition, development and delivery of security labs is barricaded by two other technical realities: built-in security controls in computer systems and networks (e.g. NX-bits, ASL-Randomization, Canaries, Firewalls, etc.), and heterogeneity in students-owned operating environments. In our proposed work, we have studied the concept of container-based educational solutions by leveraging the unique features of Docker containers (i.e., light-weight packaging of code and all of its system dependencies) to build platform-independent encapsulated cybersecurity labs. The benefits of our approach includes, cost-effective teaching environment, scalability over heterogeneous operating platforms, independence from hardware, software, and network controls, and hassle-free learning experience for students. As a proof of concept, we have developed an interoperable encapsulated lab for giving hands-on experience to students in one aspect of cybersecurity, buffer overflow. The lab was created using Docker and uploaded to a central repository. Students can pull this lab from anywhere, and can execute it on any platform that runs Docker daemon. We will use the knowledge and experience gained in this study to build our future research in the areas of building Learning Objects for cybersecurity education.	Towards Encapsulated Cyber Security Labs: A Container Based Approach	NA:NA:NA	2018
James H. Davenport:Rachid Hourizi	The UK is not the only country with a serious digital skills crisis, but it is one with a formal Government inquiry (The Shadbolt Report) and response. It also has very detailed tracking of people into, through and out of higher education into employment. The Institute of Coding (https://instituteofcoding.org/) is a new £40m+ initiative by the UK Government to transform the digital skills profile of England. It responds to the apparently contradictory data that the country has a digital skills shortage across a variety of sectors, yet has unemployed computing graduates every year. The Institute is a large-scale national intervention funded by Government, industry and universities to address some of the perceived issues with formal education versus industry skills and training, for example: technical skills versus soft skills, industry-readiness versus "deep education", and managing expectations for the diverse digital, data and computational skills demands of employers across a wide range of economic sectors. Its work ranges from the development of specialist, in-demand digital skills to the provision of work experience, employability skills and ensuring work-readiness of computing graduates, and the provision of digital skills for those from a non-digital background. It is also addressing under-representation and under-achievement by a variety of groups, notably women (only 16% of university students) but also ethnic minorities and other groups.	The Institute of Coding: A University-Industry Collaboration to Address the UK Digital Skills Crisis	NA:NA	2018
Margaret Ellis	Solving problems in various current subfields of computer science improves student motivation and helps level the playing field for students who are less-likely to be exposed to such topics and tools outside of their coursework. The importance of student mindset is well studied in education, confident students who find course material useful and interesting are likely to be motivated and perform well. For several decades computer science educators have recognized the need for computer science students to enhance and practice their problem-solving skills. More recently, computer science educators have become attentive to barriers to student success, particularly barriers that impact students from groups that are underrepresented in the field. Students with more computing experience outside of their college coursework, such as high school coursework or extracurricular computing activities, have an advantage and the students who lack such experience are likely to be intimidated in addition to less skilled. This updated version of a Computer Science Problem Solving course still addresses the long-recognized need for undergraduates to improve metacognitive and problem-solving skills, but also improves student motivation and engagement by using current computer science tools and demystifying potentially intimidating topics such as version control, security, command line tools, web development and machine learning. In this poster the author reports on the philosophy and design of a newly updated Computer Science Problem Solving course for computer science majors and presents preliminary data regarding student mindset, metacognition and computing experience outside of coursework.	Computer Science Problem Solving Course: Practical and Technical Thinking Skills for CS Majors	NA	2018
Stewart N. Weiss	Many computer science students are eager to learn about how to contribute to Free and Open Source Software (FOSS) projects, but like most computer science departments, ours has no courses to help them achieve that goal. Creating such courses requires buy-in by deans, department chairs, and other faculty, who, because of lack of knowledge, can have little interest in supporting such efforts. Our poster shows how we solved this problem and created a means for students to simultaneously learn how to be contributors to FOSS projects and earn credit toward their major. It shows how we sought and found interested students and engaged them through repeated, informal meetings, which we used to gain the support of the chair and dean, and how we simulated a prototype course by having the students sign up for independent study credit. The group then met at regular intervals, communicated and shared work using discussion forums, source code repositories, and IRC chat. All course content is based on open source materials, including free textbooks, an abundance of on-line tutorials and reference materials, lecture notes and assignments that we wrote, with open source licenses, and other materials borrowed from http://foss2serve.org. The success of this simulated course led to the creation of a pilot course for the Spring 2019 semester, endorsed by the college. The poster presents several assignments, discusses preliminary findings, and provides links to materials that we created for this course. It also shows how we encouraged students to work on humanitarian FOSS (HFOSS) projects.	Design of a Gateway for Open Source Software Development in a Traditional CS Curriculum	NA	2018
Becka Morgan	Humanitarian Free/Open Source Software (HFOSS) participation has been shown to promote real world experience and a create a portfolio of work for students that prove to be valuable assets for entering the work force. Creating a senior level software engineering elective that provides the scaffolding for students to participate in an HFOSS project allows professors to ease the often daunting steep learning curve that exists in contributing to these projects. Educators in computer science have recognized that building community within student cohorts provides many benefits for all students as well as being important for creating inclusive environments for underrepresented minorities. Based on the Communities of Practice model, developed by Lave and Wenger, mentorship also plays an important role in bridging entrance into professional communities. Using a classroom model that incorporates both levels of community by putting students into self-selected groups and using mentors from an HFOSS project provides the mechanisms for the aforementioned scaffolding. This poster will show the student perceived benefits of this course for their overall understanding of their place within the community of CS practitioners, their ability to participate with a diverse group of developers, and how this experience influences how they see their skills in relation to a project of this size. Included will also be lessons learned by teaching this course and resources for teachers to build the knowledge for teaching a course in HFOSS development.	Inclusive Experiences Using HFOSS in a Senior Computer Science Elective	NA	2018
Melissa Day:Javier Gonzalez-Sanchez	With large class sizes and instructors who may not be equipped to assist struggling students, many students abandon the field, deeming it to be too difficult and not for them. Consistent, constructive, supportive feedback through a Tutoring Companion can scaffold the learning process for students. This poster describes a reasoning model, using neural networks techniques, for a tutoring companion embedded into the Eclipse IDE. The companion provides support for students in a first-year university Java programming course. The companion collects data from students' events and programming assignments, analyzes it for relevant trends, and estimates each student's situation. The input data for the neural network comes from areas with which beginning computer science students often struggle, such as the presence of important keywords and the amount of time spent in a state with errors. Then, it determines the feedback to be provided for students to overcome a detected challenging situation, providing both hints on how to fix the problem with the code, as well as encouragement to help keep students motivated and learning. The effectiveness of the approach is examined among first-year computer science students through the completion of recursion and control flow programming assignments. The students complete surveys regarding their learning experience to assist in evaluating the companion's pedagogical effectiveness, which is discussed with an emphasis on the value of feedback provided.	A Neural Network Model for a Tutoring Companion Supporting Students in a Programming with Java Course	NA:NA	2018
Bita Akram:Wookhee Min:Eric Wiebe:Bradford Mott:Kristy Elizabeth Boyer:James Lester	With national K-12 education initiatives such as "CSForAll," block-based programming environments have emerged as widely used tools for teaching novice programming. A key challenge presented by block-based programming environments is assessing students' computational thinking (CT) and programming competencies. Developing assessment methods that can evaluate students' use of CT practices such as testing and refining, and developing and using appropriate algorithms, can help teachers evaluate students learning and provide appropriate scaffolding. In this work, we utilize an evidence-centered assessment design approach to devise a three-dimensional assessment to evaluate students' CT competencies based on evidence extracted from their programming trajectories in a block-based programming environment. In this assessment, the first dimension assesses students' knowledge of essential CT concepts, the second dimension assesses students' dynamic testing and refining strategies, and the third dimension assesses their overall problem-solving efficiency. We apply the assessment framework to data collected from students' interactions with a game-based learning environment designed to develop middle-grade students' CT competencies and programming skills. The results demonstrate that students' knowledge of basic CT constructs, such as appropriate use and combination of control structures, serves as the foundation for designing and implementing effective algorithms. Further, we assessed students testing and refining strategies over the three dimensions of novelty, positivity, and scale. The results demonstrate that students with higher algorithmic capabilities tend to make more novel, positive, and small-scale changes. The results reveal distinctive patterns in students' approaches to computational thinking problem solving and make a step toward identifying and assessing productive computational thinking practices.	Assessing Middle School Students' Computational Thinking Through Programming Trajectory Analysis	NA:NA:NA:NA:NA:NA	2018
Mary Smith:Srishti Srivastava	This research is a cross university study of evaluating whether there are differences between demographic factors (gender, age, class standing) and student engagement via unplugged activities introducing parallel and distributed computing (PDC) topics in CS1, CS2, and CS3 level courses in an undergraduate computer science (CS) curriculum. The collaboration stemmed from attending a NSF Center for Parallel and Distributed Computing Curriculum Development and Educational Resources (CDER) PDC Curriculum Early Adopter Grant and Summer Training Program. Initiatives by the National Science Foundation in conjunction with the Institute for Electronic and Electrical Engineers' Technical Committee of Parallel Processing (NSF/IEEE-TCPP) encourage and promote the introduction of PDC concepts in the early CS undergraduate courses. The researchers used the [Wiggins, 2017: Assessing Student Perspective of Engagement in Class (ASPECT)] survey to collect data from ~105 undergraduate CS students after each unplugged activity. Demographic data (gender, age, class standing) was added to the survey to determine if there are differences in these and student engagement. For the study, the researchers designed two unplugged activities to demonstrate the fundamental concepts of PDC. The first activity help students learn the key benefits of parallel computing, and the limitations imposed by Amdahl's and Gustafson's law. The second activity exhibits the concepts of scheduling and load balancing. Our findings indicate there are no significant differences between gender, age, class standing and student engagement. The researchers plan to continue their research on unplugged activities and student engagement. Additional activities will be developed to introduce other PDC topics.	Evaluating Student Engagement towards Integrating Parallel and Distributed Computing (PDC) Topics in Undergraduate Level Computer Science Curriculum	NA:NA	2018
Joseph A. Boyle:Georgiana Haldeman:Andrew Tjang:Monica Babes-Vroman:Ana Paula Centeno:Thu D. Nguyen	Computer science universities and colleges around the nation are experiencing large growth in enrollments. To maintain in-person interaction with students, large courses typically include multiple recitations, each led by a Teaching Assistant (TA). Students in each group struggle with various course content, and these weaknesses are best evaluated by the TAs working closely with the students. TAs, however, have only a superficial understanding of education theory, and instructors must closely monitor and evaluate the content of recitations. Existing instruction management systems can be used to organize course-wide content, but, to our knowledge, none of them operate at the granularity of recitations. This poster presents Dynamic Recitation, an open-source platform through which TAs and instructors can create and share practice problems and lesson plans tagged with the learning objectives that they cover. The poster illustrates the interface offered to the TAs for creating problems, designing lesson plans for individual sections, and submitting feedback about student progress. It shows examples of lesson plans created in the system, as well as reports that can be used to identify elements that promote desired learning objectives and refine recitations.	Dynamic Recitation: A Student-Focused, Goal-Oriented Recitation Management Platform	NA:NA:NA:NA:NA:NA	2018
Kenny Wong	A Massive Open Online Course (MOOC) is an effective way for a university to deliver course content that reaches a global audience. Such developments are not without substantial costs and risks [1]. On the Coursera platform, there are MOOC specializations, which package a sequence of related courses. Retaining learners is of particular interest to instructors as they progress through the courses of a long specialization. Learners that encounter delays, unfairness, or plagiarism in peer evaluations of assignments could become dissatisfied enough to withdraw, for example. We describe using trends in sentiment analysis of discussion forum postings across the courses. The idea is to detect, interpret, and address points of lower sentiment in a MOOC specialization, to avoid losing learners. We outline our findings with a MOOC specialization on software product management, which consists of six courses, involving a nominal 24 weeks of content [2,3]. Interestingly, higher sentiment in a course's content did not necessarily preserve enrollment numbers for the subsequent course.	Sentiment Analysis across the Courses of a MOOC Specialization	NA	2018
Aarathi Prasad	Classes on mobile computing are popular in schools all over the country, however, the author is not aware of any that include sessions on mobile app design. How do you help students understand what constitutes a good design? Faculty have used wireframes and affinity diagrams to teach design in the classroom, included user experience and design in final course projects, and incorporated problem-based learning, opportunities for service and video-making to develop further HCI skills. One option the author has tried in the past to teach mobile app design is to ask students to choose a few mobile apps that they consider the best and a few that they consider the worst in terms of aesthetics and usability and then lead a discussion on the different factors that make the app aesthetically pleasing and usable. A new approach the author attempted this year was to hold the class meeting at the art museum instead. Looking at the different art pieces, the class engaged in a discussion of the factors that allowed the artists to capture the attention of the audience and convey their message. This activity also introduces a cross-disciplinary approach into a computer science class.	Using an Art Museum Field Trip to Spark Classroom Discussions about Mobile App Design	NA	2018
Matthew Peveler:Tushar Gurjar:Evan Maicus:Andrew Aikens:Alexander Christoforides:Barbara Cutler	Prior education research, including Computer Science, has established that students will attempt to cheat and violate academic integrity, with one of the more common forms being code plagiarism. The majority of existing tools for software plagiarism are closed source, requiring instructors to use them in a prescribed configuration and sending student code to a third-party server for analysis. At the core of this analysis is the need to perform a language-specific tokenization of the input program and then to use "digital fingerprinting" on the code to identify significant markers. This has required developers to write their own parser for each supported language, which is time-consuming to create and keep up-to-date, and thus a barrier to creation of these tools. Instead we bootstrap new languages into our plagiarism system by leveraging the "Language Server Protocol", an initiative to create open-source parsers and tokenizers for many languages (principally to be used within a range of popular IDEs). In this poster, we present our work on Lichen, the open source plagiarism detection tool that is integrated into the Submitty course management platform we use at Rensselaer Polytechnic Institute. This tool is a pipeline of modules for the specific tasks of tokenizing, fingerprinting, and then comparing the fingerprints for any number of files. Through this, a similarity score is generated for pairs of files, and these are used to help instructors determine to what extent code plagiarism has occurred.	Lichen: Customizable, Open Source Plagiarism Detection in Submitty	NA:NA:NA:NA:NA:NA	2018
Andrew Aikens:Gagan Kumar:Shail Patel:Evan Maicus:Matthew Peveler:Barbara Cutler	Submitty is an open-source course management platform for assignment submission with automated testing and grading, immediate feedback with an option for resubmission, and manual grading from course instructors and TAs. We have added an integrated discussion forum to the Submitty environment, which enables the students to communicate with their peers and have a public dialogue with the teaching staff outside of the classroom. Compared to a collection of closed-source external applications, our single-system login for distribution of course materials, assignment submission, and discussion forum participation is more convenient and accessible for students and simplifies administrative tasks. Students use the forum to ask questions about course logistics, homework help, exam review problems, and Submitty-related questions. The forum supports image and code segment posts, which facilitates targeted debugging help and sharing of additional reference material. An instructor-moderated forum is especially helpful in larger classes where students can feel it is otherwise difficult to get their questions answered. Every thread is tagged with course-specific categories and we provide full-text search of the forum. The forum becomes a curated collection of relevant frequently asked questions, which reduces the number of duplicate questions that must be answered by the staff. The forum includes customizable system and email notifications for important events such as: instructor announcement, assignment posted, team invitation, forum question answered, grades released, etc. Our current work focuses on private channels to facilitate team assignments (which can be monitored for participation by staff) and a grading interface for discussion-based assignments within the forum.	Facilitating Discussion-Based Grading and Private Channels via an Integrated Forum	NA:NA:NA:NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #3	NA:NA	2018
Rafael del Vado Vírseda	The purpose of this poster is to provide practical arguments to stimulate debate and discussion on whether or not to introduce concepts of theoretical computer science in the pre-university education system, conveniently adapted within students' capability. Theoretical computer science is a hard subject to teach at the university level. Many students who enter the computer sciences courses have very little mathematical or theoretical background. For this reason, it is important that students acquire an appreciation of these concepts before they leave the secondary education. In anticipation that these contents would not be included or addressed in the context of a subject of Computer Science, a work in progress educational experience is presented during the 2018-2019 academic year for enhancing the algorithmic curriculum of pre-university computing and mathematical courses. We describe a collection of selected problems, puzzles and riddles from high school mathematics and introductory logic, to be added to the current secondary curriculum. We want to show attendees the use of our educational activities, offering practical aspects that could not be shown through the reading of a paper, so that they can learn to use them in their own classes. The preliminary experimental results show that the students who have undergone this educational experience have obtained a higher motivation that those who have followed the course in its traditional form. We believe that introducing these theoretical computer concepts can help students to perform better in some areas of computer science and be increasingly prepared and motivated for their university studies.	Introducing Theoretical Computer Concepts in Secondary Education	NA	2018
Sabrina Tsui	There is a large gender disparity in computing: women are underrepresented. By exposing girls to computing activities in a summer day camp, and using near-peers as teachers, we found differences in perceptions the girls held about computer scientists between those on the first day of camp with those on the last day of camp. We describe the day camp program, the participants, and the activity used to investigate the girls' perceptions of computer scientists. The "Draw a Computer Scientist' activity was used to determine how the stereotypes of a computer scientist and the day camp have influenced the girls. The only instruction given to the participants was to draw what they thought a computer scientist looked like. Key drawing characteristics were identified and quantified in a blind coding process, then compared across pre-camp and post-camp drawings. The results suggest that exposing girls to other female engineers and engaging them in age-appropriate engineering activities broadened their perspectives on what a computer scientist looks like.	Girls in Engineering Draw a Computer Scientist	NA	2018
Alfredo Perez:Hillary Fleenor	Currently, the state of Georgia requires a CS teacher endorsement (or the passing of the CS GACE exam) to teach middle/high school computer science in public schools. However, issues such as the cost of a CS endorsement and a lack of incentives to take the endorsement may undermine the long-term efforts to establish high-quality K12 CS education in the state. This may negatively affect the broadening of CS participation efforts in the state (47% of the population in GA belongs to a minority group). In this poster, we will present preliminary results of a survey conducted with more than 200 K-12 teachers across the state of Georgia in which we explore the attitudes towards teaching K12 computer science in the state. Our goal with the collection of the data is to understand better what it would take to become a long-term CS teacher in the state.	What does it take to Teach K12 Computer Science?: Exploring Teachers' Attitudes Towards Teaching CS K12 in Georgia	NA:NA	2018
D. Cenk Erdil:Darcy Ronan	As a prerequisite to ACM-IEEE CS1/CS2 curricula, common objectives of a CS0 course are: (i) to introduce CS to students who are interested, but do not have any prior CS skills, (ii) support student success while adapting to college life, and (iii) improve recruitment and retention of CS majors using the 'common first year' theme of many STEM programs. A previous CSO survey course at our institution focused on abstract logic, without any hands-on component, resulting in a CS0 "gate" course- a dull first encounter with computer science for most and an 'extremely fun and interesting' course for the few with pre-existing abstract thinking and reasoning skills. The missed opportunity to engage more students with CS, and thereby contribute to program viability and growth, spurred curriculum renewal. Given the existence of multiple high-quality offerings of CS curricula geared toward P-12 students, including at the AP-level, and also relying on our existing institutional partnership with a national non-profit organization dedicated to expanding access to CS in schools and addressing patterns of underrepresentation, we have implemented a new course based on a Computer Science Principles curriculum. This poster provides details of implementation as well as student experience and feedback with the first cohort of this brand-new course.	Implementing CS0 with Computer Science Principles Curriculum	NA:NA	2018
Aleata Hubbard	Pedagogical content knowledge (PCK), which includes knowledge of student understanding and knowledge of instructional strategies to support learning, is a component of teaching expertise that develops over time and with experience. In this poster, I present exploratory work to identify and categorize PCK amongst secondary teachers new to computing. Four teachers participating in a multi-year case study completed a questionnaire where they (a) listed student difficulties with linear data structures and (b) described how they address the topic in their teaching. Using a content analysis approach, I analyzed the quantity and type of responses provided. Since little research exists describing computing PCK, I also compared responses against public data sources gathered from experienced teachers who completed similar tasks. Results show that participants provided more ideas about student difficulties than teaching strategies and they focused equally on difficulties with programming notation and with programming pragmatics and plans. In contrast, the experienced educator list included a wider range of difficulty types. Ideas about teaching strategies focused mostly on presenting information, while the experienced educator list focused mostly on providing problem solving tasks. Unlike participants, the experienced educator list referenced real-life examples as an instructional strategy. Lastly, the responses provided by participants were not simply a subset of the experienced educator list and included unique ideas. On the poster I suggest possible contextual and experiential differences between new and experienced computing teachers that might lead to these differences.	Linear Data Structures: A Comparison of Novice and Expert Teacher Pedagogical Content Knowledge	NA	2018
Cassandra Scharber:Yu-Hui Chang:Sarah Barksdale:Lana Peterson:Angelina Constantine:Ramya Sivaraj:Jennifer Englund	SciGirls Code is a project which used the principles of connected learning with 16 STEM outreach partners to provide 160+ middle school girls with computational thinking (CT) and coding skills within informal education spaces. Programs completed 3 curricular strands (Mobile Apps, Robotics, E-Textiles) between September 2017-May 2018. SciGirls Code integrates a computational participation framework with connected learning. The research study investigates the ways in which computational learning experiences impact girls' development of CT; interest and attitudes toward computer science; and their understanding of how participation in technology creation impacts themselves and the world around them. This study utilizes an interpretive multi-site case study design. There are multiple data sources with different data collected at focal and participating sites. The seven (7) focal cases represent an array of settings (rural, suburban, urban) as well as a variety of programming contexts (museums, community centers, after school). The remaining nine (9) sites comprise the participating cases. Notably, interviews (in-person) from focal sites and shorts (videos) from participating sites were collected at three moments in the programming (beginning, middle, end) to document changes in understandings and skills. Content analysis was conducted, and further triangulated in teams, to develop themes for each case and cross-case comparison. Thus far, the study has found that a connected learning approach boosted the development of middle school girls' CT skills, positively impacted attitudes towards computing pathways/careers, and increased understandings of computational participation.	SciGirls Code: Computational Participation for Middle School Girls	NA:NA:NA:NA:NA:NA:NA	2018
Brian Krupp:Paul Peters:Tyler Hardy:Sydney Leither:Zach Egler	Large scale efforts, such as CS4All and Hour of Code, have made significant progress in attracting more students to computing as well as attracting underrepresented groups. However, even with these large efforts, there is still work to be done to help increase diversity and ensure computing jobs are not left unfilled. The authors will present their experiences in creating a Community Outreach program known as CS+ at Baldwin Wallace University. They will share the model that was created for CS+ to ensure continuity and scalability in the program. Even with a small team, CS+ has made significant progress towards their mission in providing opportunities for students to learn computing that have limited access to similar programs. The poster will include organizational details of the group including recruitment of students, positions they hold, and the vision and mission of the program. The poster will also share experiences in partnering with teachers at local school districts, attracting students to the program, and partnering with the education department as well as community organizations. The poster will include sample content that is used in camps and clubs as well as a site where all of the content can be accessed. While our efforts alone may not have the same impact as large organizations, by inspiring other institutions to start similar programs, we can reach underrepresented groups and those that lack confidence in computing to help bridge the gap in diversity and meet the demand of computing jobs that are available.	Every Little Bit Counts: Experiences and Lessons Learned Building a Community Outreach Program from the Ground Up	NA:NA:NA:NA:NA	2018
Ramsey Young:Jonathan Ringenberg	Machine learning and neural networks have become key techniques for solving some of society's most difficult problems. Many students are intimidated by, or ignorant of the mechanics of AI. Teaching machine learning to early computing students is possible; in doing so students will gain further confidence and interest in the field of Computer Science. Through an NSF funded grant to the University of Nebraska Omaha, a unit of study was created to teach machine learning to high school students. Focuses for the unit include; neural networks, genetic algorithms, sigmoid and perceptron networks, social impacts, ethics, history, and supervised and unsupervised learning techniques. The unit employs hands on learning approaches and media elements. Also included is a lab where students train an autonomous car. Students were administered pre and post Likert surveys for this unit using the Computing Attitude Survey V4.1 with additional topic specific questions. The study size was sixteen students from two sections of AP Computer Science Principles. Based on survey results, student perceived machine learning comprehension showed a positive delta value growth of 27.84% and negative results showed a delta value shrink of 20.45%. For questions related to computer science interest and confidence, students showed a positive delta value growth of 14.58% and a negative delta value shrink of 11.8%. We believe these results demonstrate that teaching machine learning topics to high school students is effective and has a positive impact on student desire and confidence to pursue further study in the field.	Machine Learning: An Introductory Unit of Study for Secondary Education	NA:NA	2018
Grégoire Fessard:Ilaria Renna:Patrick Wang	Learning elementary Computer Science (CS) concepts can often be difficult for young students. The literature presents two main practices to introduce programming: using digital environments (e.g., integrated development environments, command-line tools) or exploiting manipulations on programmable tangible objects such as robots. This second practice has recently gained traction thanks to the positive results concerning the use of programmable objects in introductory programming courses. However, and to the best of our knowledge, there is no study comparing learning gains between 'digital' and 'physical' computing. Our study focuses on highlighting possible differences between these two practices to learn CS at an introductory level. We compare the learning progress of two groups of students (total=36, male=27, female=9, aged 14-17) with little or no previous knowledge of programming; both groups are presented with the same pre-test, programming exercises, and post-test. All participants exploit a block-based programming environment to do the exercises and program either a tangible BBC micro:bit card or its digital simulation. The proposed programming exercises concern basic CS concepts: variables, conditional structures, and iterative structures. By running their programs on the tangible or digital card, students are able to visualize the results of their exercises thanks to the grid of LEDs that is present on the BBC micro:bit. Our objective is to determine if the learning of a specific CS concept is better achieved through the programming of a tangible object or an exact equivalent digital simulation of it. A statistical analysis will be presented to evaluate the results of this experiment.	Comparing the Effects of Using a Tangible Object or a Simulation in Learning Elementary CS Concepts: A Case Study with Block-Based Programming	NA:NA:NA	2018
Gayithri Jayathirtha:Yasmin B. Kafai:Debora A. Lui:Mia S. Shaw:Ji Yong Cho	The links between music and computation date back at least three decades. This trend has led to the development of learning environments for novices to make music and learn computational concepts. However, research connecting music and computation is mostly situated within the context of on-screen programming, with little research involving hybrid, tangible environments. Electronic textiles (e-textiles) is one such hybrid context where learners craft interactive physical artifacts by sewing microcontrollers, sensors, and actuators onto toys, clothes, or other fabric accessories. Prior studies show that Arduino-based e-textiles afford opportunities for students to learn basic concepts such as variables and control flow but not more advanced concepts such as arrays and for loops. In our study, we expand learning with e-textiles as learners compose and code music to address the following research question: What are the affordances of designing musical wearables to deepen computational conceptual learning? We present a case study of a group of four 15-17-year-old youth and an adult co-making a musical wearable-JazzHands-a glove augmented with actuators such as LEDs and speaker, and motion, touch, and light sensors. We analyzed videos of the group's collaborative design sessions, student daily journals, multiple versions of the code, and post-workshop, artifact-based interviews with the youth. Our analysis revealed that making musical wearables not only allowed the youth to express themselves and relate to computing as a creative endeavor but also afforded unique opportunities to work with constructs such as arrays indices, sensor data integration, and logical expressions to control for loops.	Collaborative Coding and Composing of JazzHands: Integrating the Learning of Advanced Computational Concepts with Electronic Textiles to Make Music Wearables	NA:NA:NA:NA:NA	2018
Hillary Fleenor:Yesem Peker:Ebone Cutts	Investing in raising a generation with more security-aware minds is essential in preventing many of the security incidents that threaten us and our nation. In addition there is a high need for well-trained cybersecurity professionals to protect our networks, computer systems, and infrastructure. Early exposure is key to developing awareness, piquing student interest, and laying a foundation for more complex skill development. Students of today are parents, professionals, and leaders of tomorrow. The impact of their actions is significant for the future. In this work, TSYS School of Computer Science at Columbus State University and Rothschild Leadership Academy, a Title I middle school in the Muscogee County School District of Georgia collaborated to develop, deliver, and assess a middle school cybersecurity curriculum for U.S. grade 8 students. The project had three student achievement goals: 1. Provide a good foundation for students in cybersecurity knowledge and skills, 2. Enhance students' ability to secure their environment, and 3. Increase students' interest in cybersecurity education The project included development of the standards, objectives, lessons, and assessment instruments for implementation within a year-long business and computer science course and training of the teacher in cybersecurity. The course was piloted with sixty grade 8 students in two classes during the 2017-2018 school year. Results show significant growth in mastery of key cybersecurity concepts via a pre- and post- test and artifacts from the course indicate an increase in student interest in cybersecurity.	Collaboration: Developing and Piloting a Cybersecurity Curriculum for Middle School	NA:NA:NA	2018
Allison Sauppé:Samantha S. Foley:Thomas Gendreau:Joshua T. Hertel:Mao Zheng	Computer science is in increasing demand at the K-12 level. However, due to a lack of qualified educators, numerous programs (e.g., Google's CS4HS, NSF's CSForAll) have been created to train teachers and increase student access to computer science. Although these programs have seen some success, schools in areas with lower population density continue to struggle to offer computer science opportunities. These schools face unique challenges due to their low population density, including increasing teaching demands in core subjects, smaller teaching staff, and a smaller pipeline of students, making it difficult to justify offering a course in computer science. This poster draws on our experience of collaborating with K-12 teachers in rural schools in western Wisconsin to help mitigate these unique challenges. We have obtained two Google CS4HS grants to hold educational computer science workshops with teachers from across the region. These workshops allowed us to work closely with teachers and help them become more comfortable with incorporating computer science into their classrooms, while also helping us to form relationships with both teachers and administrators in a number of districts. Building on these relationships, we are taking the next step of working more closely with individual school districts to form professional learning communities. Our goal in this work is to connect K-12 teachers within each district and help facilitate a robust pipeline of students interested in computer science and justify offering AP CS courses at the high school level.	Building Computer Science K-12 PLCs in Rural Communities	NA:NA:NA:NA:NA	2018
Lindsey Scheppegrell:Elyse Hiatt:Johanna Okerlund:David Wilson	Recently, there has been significant interest in integrating Maker-related experiences into formal education. A challenge is reconciling open-ended making and non-deterministic learning goals with standards that drive traditional education. In the context of our CS-focused STEM magnet school, we designed two 2nd grade lessons that not only align with grade-level standards and our school's computer science-oriented pedagogy, but also incorporate 3D printing and the philosophy of Makerspaces. The integrated Maker experience serves to scaffold computational thinking practices such as abstraction, modeling, and decomposition, which are essential for long-term success in STEM learning. To bring these aspects together, we created a rubric based on existing evaluation tools. Using this rubric, we evaluated the two lessons with a small sample of participants. Our pilot study shows promise of mastery in standard-related content, evidence of a making mindset, engagement in the activity, innovation in design, and solidarity in working with peers. Aligning state standards with open-ended Maker activities has potential for fostering student growth and engagement in the classroom. An additional component of our research was reflecting on our experience as teachers with no Makerspace experience who were newly submerged in the digital fabrication world. We present the two 3D printing-based lessons, one addressing extreme weather standards, the other incorporating understanding of urban, suburban, and rural communities. We also present the rubric we designed, the literature that guided this work, and reflections and recommendations from our experience of learning digital fabrication for the first time and integrating it into curriculum.	Computational Thinking in the Making: Lessons for Second Graders in a STEM Computer Science Immersion School	NA:NA:NA:NA	2018
N. Rich Nguyen:Iuliia Poliakova:Sahithi Meduri:Joshua Hutcheson:Ryan Ke	Increasing the representation of minorities in computer science (CS) has become a national priority. One of the many reasons minority students nationwide choose not to study CS is that they often lack mentors and role models to encourage them early in their learning. In her seminal article, Jeannette Wing argues that computational thinking (CT) is an emerging essential skill that should become an integral part of K-12 education. However, a big issue facing this initiative is that many K-12 teachers find themselves lack (1) relevant materials, (2) systematic training, and (3) a supportive community. The democratization of media, such as photos and videos, has provided a great variety of options to educate a broad audience on myriad topics. In this poster, we will describe the challenges and successes of using animated videos including its beauty, soundness, and utility as critical elements in establishing a strong CT comprehension while engaging K-12 teachers in a non-threatening way. Using a process of iterative design, we have found ways to integrate CT concepts in six non-CS disciplines in the K-12 curriculum. The teachers who have collaborated with us respond positively that this design approach provides them with a greater comprehension of the CT concepts while giving them exciting instructional activities. Therefore, this poster may be of interest to any CS educator who wishes to improve the engagement of K-12 teachers while sustaining a CT training program at their institution.	CodeNC: Integrating Computational Thinking into K-12 Instructional Activities using Animated Videos	NA:NA:NA:NA:NA	2018
Huda Khayrallah:Rebecca Knowles:Kevin Duh:Matt Post	The first step in the research process is developing an understanding of the problem at hand. Novices may be interested in learning about machine translation (MT), but often lack experience and intuition about the task of translation (either by human or machine) and its challenges. The goal of this work is to allow students to interactively discover why MT is an open problem, and encourage them to ask questions, propose solutions, and test intuitions. We present a hands-on activity in which students build and evaluate their own MT systems using curated parallel texts. By having students hand-engineer MT system rules in a simple user interface, which they can then run on real data, they gain intuition about why early MT research took this approach, where it fails, and what features of language make MT a challenging problem even today. Developing translation rules typically strikes novices as an obvious approach that should succeed, but the idea quickly struggles in the face of natural language complexity. This interactive, intuition-building exercise can be augmented by a discussion of state-of-the-art MT techniques and challenges, focusing on areas or aspects of linguistic complexity that the students found difficult. We envision this lesson plan being used in the framework of a larger AI or natural language processing course (where only a small amount of time can be dedicated to MT) or as a standalone activity. We describe and release the tool that supports this lesson, as well as accompanying data.	An Interactive Teaching Tool for Introducing Novices to Machine Translation	NA:NA:NA:NA	2018
Paige Prescott:Irene A. Lee:Kersti Tyson	The integration of computer science (CS) and computational thinking (CT) in STEM classes has been promoted as one strategy to engage all students in CS education. This approach aims to reduce inequities in access to computing education by placing CS within compulsory science classes. The Project GUTS CS in Science curriculum supports the integration of CT-rich computer modeling and simulation activities and has been promoted to serve the dual goals of exposing students to CS in a powerful context while simultaneously promoting students' understanding of modern scientific practices. This case study follows two middle school science teachers as they implement the curriculum that integrates CS within science classrooms through the use, modification, and creation of computer models of scientific phenomena. Their implementation stories represent the range of enactments from "use-only" in which computer models are used to demonstrate the behavior of a system, to "modify/create" in which teachers support students in the using, decoding and modifying computer models that are used as experimental test beds. These cases illuminate teacher characteristics and pedagogical decisions that impact enactment of the curriculum. Evidence is provided that teacher's belief in student capabilities is a factor correlated with enactment, and that has the potential to impact students' opportunities to learn. This finding suggests that addressing CS/CT skill building, content knowledge, and pedagogy within teacher professional development (PD) programs may be necessary but not sufficient to lead to enactment of CT-rich curricula and may inform others seeking to integrate CS in K-12 education.	Teacher Beliefs in Student Capabilities as a Mediating Factor in a Novel Understanding of Enactment of CT Curriculum	NA:NA:NA	2018
Tony Lowe:Sean Brophy:Monica Cardella	Our research group has studied how Kindergarteners through second graders can be introduced to the ideas of Computational Thinking (CT) through engineer design, unplugged, and programming activities. We often found it difficult to explain the boundaries and clear definitions for CT in research, to students and their teachers. Literature provides a variety of definitions from various perspectives, but these definitions often seem like capturing smoke. We see evidence CT, indicating fire, but how hot or lasting it burns cannot be measured by smoke alone. CT is typically defined by siloed concepts and skills. Some silos describe concrete ideas, which tend to be tied to programming principles. Many describe essential ideas, but over generalized becoming hard to teach and measure and distinguish from other types of problem solving. Is there a middle ground where we can clearly observe the presence and growing maturing of CT yet not limit the ways it can manifest, particularly without requiring coding? We hope this poster inspires conversation on 1.) the intersection of CT and programming skills, 2.) the priority and order for learning those skills, and 3.) how we can promote CT in disciplines who interact with and help define computational solutions yet are never expected to learn to program. We hope to share our perspective as well as garner feedback and possibly collaboration on better refining curriculum within Computer Science as well as promoting CT in other disciplines.	Exploring the Definition of Computational Thinking in Research and the Classroom	NA:NA:NA	2018
Natalie Linnell:Phil Gonsalves:Mayank Kakodkar:Vanessa Martinez:Tim Urdan:Bruno Ribiero:Janice Zdankus	The lack of diversity in computing is a well-known issue. This poster is a work-in-progress report on Curated Pathways to Innovation (CPI), a web-based tool which gathers existing online resources for computer science (CS) engagement and learning to allow students to learn more about CS careers and content, with a particular focus on improving participation of K-12 girls and under-represented minorities in CS. This project is a collaboration of people from academia in CS and social science, K-12 education, non-profit, and industry. We are about halfway through a 3-year pilot deployment of CPI with all students in a low-income, primarily Latino/a middle school with nearly 500 students, and smaller deployments have been undertaken and are planned for 2018-19. In addition to online content, we have created in-person experiences, including reverse science fairs, summer camps, and a hackathon, which are tracked in the CPI tool. To measure impact, we conduct regular surveys with the students measuring their interest in CS, self-efficacy, and other metrics. Our evaluation of the system based on survey data has helped inform the development of the system and curriculum, but remains preliminary. This poster also discusses the tool itself. It uses gamification in the form of badges to measure student progress. From the beginning, the vision was to use machine learning to customize recommendations based on students' demographics, background, and past performance. This integration is coming to fruition at the same time we are including more interesting visuals in the UI, such as an avatar and animations.	Curated Pathways to Innovation: Personalized CS Education to Promote Diversity	NA:NA:NA:NA:NA:NA:NA	2018
Fatemeh Jamshidi:Daniela Marghitu	The importance of imaginative assignments and innovative curriculum design in computer science (CS) education has been researched for some time now. In this poster, the authors discuss an interdisciplinary K12 informal education course called Computational Thinking in Music. The goal is to engage students in computer science by prioritizing personal expression, creativity, and aesthetics. The research includes a creative curriculum based on modeling theory of evidence-based pedagogical research, and an empirical one: by the time of the SIGCSE Symposium, the authors expect to have comparative results for control courses, where active learning curriculum was not used at all, as well as for the course with active learning curriculum. The Computational Thinking in Music course intends to broaden the number of individuals, particularly from underrepresented groups, who show interest and persist in the field of computer science through the use of student's intrinsic interests. Specifically, this study built an authentic STEAM learning environment through the use of EarSketch (https://earsketch.gatech.edu/landing) and Scratch (https://scratch.mit.edu/) two creative computing programs. The poster will display our findings in a creative fashion convenient for drawing informative conclusions. Two measures are used in assessing the effectiveness of creative curriculum: student scores on typical assessment instruments and student perceptions on Likert scales. Thus far the data are remarkably consistent over the various settings and indicates that participants of this camp benefitted more from an authentic learning environment allowing for music, creativity, and imagination than from a more traditional computing camp without the addition of musical concepts.	Using Music to Foster Engagement in Introductory Computing Courses	NA:NA	2018
Connor Bain:Uri Wilensky	For many years, beginning computer science students have been asked the seemingly simple question: what makes one algorithm better than another? Usually, this concept of "best-ness" is introduced with the many algorithms that are used to sort data. Thus, students are overwhelmed by the intricacies of sorting while simultaneously trying to understand one of the greatest questions in computer science. In this work we take inspiration from embodied cognition and describe a new, constructionist curriculum for approaching algorithmic efficiency. In order to help students construct understandings of both sorting algorithms and algorithmic efficiency, we present a curriculum that focuses around participatory simulations (PartSims) where students "play as" datapoints and experience sorting algorithms from an entirely different perspective. Instead of first experiencing the usual top-down approach to sorting where datapoints are manipulated by an "observer," each student follows a simple set of rules which, collectively, end in an emergent sorting algorithm. In this way, instead of talking in the abstract about the different pros and cons of sorting algorithms, students have different physical experiences across the different algorithms. With this embodied, grounded experience, students then construct for themselves metrics for comparing the different algorithms by evaluating the differences in their physical experiences. This two-week curriculum is targeted towards beginning computer science students (high-school or collegiate level) and utilizes the Parallax hackable Electronic Conference Badge and NetLogo to track the students experience in the PartSims throughout the curriculum.	Sorting Out Algorithms: What Makes One Better than Another?	NA:NA	2018
Wynne Becker:Kayley James:Maya Minier	Scope is a fundamental topic of computer science and its pervasive nature affects how programmers interpret code on every level. Thus, a strong understanding of scope is necessary for reading and writing code as well as tracing memory usage. This paper qualitatively analyzes students' misconceptions about scope, specifically involving parameters, variable declarations, and loop variables. Our study consisted of five one-on-one interviews where participants were given a set of scope-related problems in Java and Python to solve. We noticed that, despite demonstrating a general understanding of scope, some students became confused about the particular subtypes of scope mentioned previously. Our paper identifies four misconceptions about scope involving parameters, variable declarations, and loop variables: that variable declaration and use are indistinguishable, that where the variable is declared (eg. inside/outside of a method) is not relevant, that passing in a value as a parameter changes the parameter's value globally within the code, and that a loop variable defined to iterate through a for loop is accessible outside of the loop it is declared within. Many of these misconceptions indicate that some participants have an abstract notion about scope that is not equivalent to the programming languages' rules about scope. The information we gathered in this study could potentially help computer science (CS) teachers present scope in a way that prevents the four misconceptions and thus encourage a stronger understanding of scope as a whole.	Four Scope-Related Misconceptions Held by Computer Science Students	NA:NA:NA	2018
Michael Ball:Jens Mönig:Bernat Romagosa:Brian Harvey	Snap! is blocks-based programming language that inherits a design and vocabulary from Scratch, but has been extended with support for user-defined functions, and robust built-in libraries. The Snap! Cloud software has been running for over 5 years and recently passed 250,000 users and 2 million projects of which nearly 600,000 are shared publicly. We have been to do an exploratory analysis the database of public projects to better understand how students are programming an using Snap!. This analysis is being conducted using a cleaned up XML-based representation of Snap! projects, which allows querying for data using SQL to extract information from project files. So far, we've seen that projects in Snap! computationally more complex than those found in Scratch, and make use of Snap!'s advanced features. Combined with growing use, we hope to give context to the ways which Snap! (and other) blocks-based languages are being used in classrooms. While there has been a discussion of code smells in Scratch, we haven't seen any discussions using Snap! and hope to show its additional functionality helps write clean code. Finally, we are interested in presenting a clear story of growing use for Snap! that is a compelling case to teachers (and subsequently their students) that blocks-based languages can be quite popular.	Snap! A Look at 5 Years, 250,000 Users and 2 Million Projects	NA:NA:NA:NA	2018
Mohammed A. Qazi:Jeff Gray:Melody Russell:David M. Shannon	This poster provides a description of an NSF-sponsored project entitled "ECS4Alabama" that addresses one of the nation's areas of highest priority in K-12 education: To offer all children opportunities for preparation in authentic Computer Science, with a specific focus on students from rural high-minority schools. ECS4Alabama addresses this need locally in Alabama by preparing teachers to offer a stand-alone, College preparatory Computer Science course - Exploring Computer Science (ECS) - in the participating high schools. Over the last two years, 52 in-service teachers have received training on ECS who in turn are teaching the course to nearly 1,500 students. Approximately 80% of the enrollment is minority and 48% of the students are young women. In many communities, ECS4Alabama is bringing access to challenging Computer Science curricula in school districts that often lack preparatory experiences that are typically only available to students in more affluent districts. Teachers Leaders are emerging and are spearheading Professional Development Communities to assist their peers with ECS implementation. In addition to sharing ECS4Alabama's implementation successes and challenges, the poster will also describe the project's rigorous evaluative and Social Science research components. Initial findings reveal that ECS professional development opportunities enhance teachers' self-efficacy and confidence in teaching CS through a problem-based, engaging curriculum that teachers view as relatable and relevant to students' daily lives. Students report that teachers make great efforts to facilitate their involvement in cognitively demanding work to solve real problems, encourage autonomy and stimulate student interest in CS.	ECS4Alabama: A State-Wide Effort to Provide Access to Authentic Computer Science Education in Predominantly Rural and High Minority Schools	NA:NA:NA:NA	2018
Chris Shively:Sarbani Banerjee:Neal Mazur:Joseph Zawicki	Buffalo State College has hosted a number of summer institutes and conferences over the years to increase the availability of computer science (CS) courses taught in western and central New York high schools. These institutes and conferences have contributed to strong CS programs in suburban and private schools, but not in urban and rural/small town schools. In the summer of 2018, Buffalo State invited high school principals from across the area to a summit to discuss the future of CS. Forty-six principals participated in the summit and of those school leaders, 30% of them were from rural/small towns. In this poster, the research team will present the results of a mixed-methods school leadership study based on the value rural/small town principals place on CS. Results from a survey, conducted at the summit, and semi-structured interviews will be presented. A sociocultural approach was used to analyze the data since the principals' values and mediated actions toward CS were influenced by the socially situated environment of the schools they lead	Don't Forget About Us: Understanding Rural and Small Town Principals' Values Toward Computer Science	NA:NA:NA:NA	2018
Tikyna M. Dandridge:Hoda Ehsan:Elizabeth Gajdzik:Tony Lowe:Carson Ohland:Ibrahim H. Yeter:Sean Brophy:Monica E. Cardella	As computer science education is incorporated into the United States educational system, it is imperative that children, educators, and caregivers understand the requisite competencies called "computational thinking" (CT). CT has advanced since first described by Wing in 2006 as an algorithmic problem-solving approach. For three years, the INSPIRE Research Institute for Pre-College Engineering (INSPIRE) has studied integrated science, technology, engineering, mathematics, and computational thinking (STEM+C) learning for K-2 aged children, in both formal and informal settings. At the project's origin, the team focused on characterizing and operationalizing the CT competencies. Our studies then followed how children, instructors, and families engaged in the CT competencies within school and out-of-school. As the project evolved, our team created curricula to be used in K-2 classrooms, activities for out-of-school settings, a summer training for educators, a CT exhibit at a small Midwestern science center, and facilitated a field trip for elementary students. Our poster presents findings from all stages of our NSF-funded STEM+C project. For classroom settings, we report discoveries from integrated STEM+C curricula development and children's CT capabilities and engagement within the classroom and during homeschooling. For informal settings, we report children's abilities to engage in CT when engaging with a specially designed CT exhibit and an open-ended problem-solving task. We also discuss our data management for our project. Finally, we report the lessons and implications of CT for K-2 ask a viable skill for computer science education. For additional info ideas, handouts will be given during poster presentation.	Integrated STEM+C learning for K-2 aged children: CT competencies as a precursor to K-2 computer science education	NA:NA:NA:NA:NA:NA:NA:NA	2018
Chun Wai Liew:Huy Nguyen	There are many tutoring systems that are being used to teach basic concepts in grade schools and high schools. There are few that address the issues involved in teaching complex skills and concepts such as are taught in CS2. We designed, developed and implemented an intelligent tutoring system (ITS) to help teach the concepts underlying red black trees. Red black trees are a balanced tree structure that are created and maintained with fairly complex insertion and deletion algorithms. The ITS helped the students improve their understanding of red black trees and also changed the instructors view of the causes of the students' difficulties. This paper describes effects on student learning, the lessons we learned from using the ITS and how it affected the way in which teach red black trees in our class. We have used the ITS for four years in our data structures class and it has benefited us in many ways.	Using an Intelligent Tutoring System to Teach Red Black Trees	NA:NA	2018
Joslenne Pena:Carmen Cole:Mary Beth Rosson	Inspired by initiatives like Girls Who Code, the authors developed a similar learning opportunity in a higher education environment. Code for Her, a nine-week coding workshop series, was piloted to determine if interest existed in the academic community. With an overwhelming response (over 100 applicants), the authors saw a need in the community for an informal learning space targeting women and gender-diverse individuals. Currently, two distinct workshop sections, one for students and one for faculty and staff, are being conducted in a single academic semester, each focusing on learning three web development languages. The goal of this study is to investigate the impacts of the workshop series on its participants using a mixed methods approach. The authors will examine measures of self-efficacy, computing behavior, knowledge, and learning to determine, at an exploratory level, how the workshops have an effect on their learning, motivation, attitudes, and computational thinking. Preliminary results from a baseline survey indicate that keeping a flexible curriculum and learning environment is imperative to the ever-changing needs of participants week to week. Further, results indicate a slightly positive attitude towards achieving programming tasks, future predictors of their behavior after the workshop, and self-efficacy. The authors plan to conduct a post survey, collect participant projects as artifacts for analysis, and arrange follow-up focus groups to determine if participant attitudes, motivation, and retention of the content have changed over a period of time. The authors hope to improve future workshop offerings and expand our research efforts.	Code For Her: Exploring Female and Gender-Diverse Computing Workshops for Faculty, Staff, and Students	NA:NA:NA	2018
Daisuke Saito:Hironori Washizaki:Yoshiaki Fukazawa:Mariko Tamura:Yuki Sakuragi	As more children are exposed to computer science and programming, numerous indicators have been proposed to evaluate programming learning. Because these indicators are not divided by step in a learning goal, learner's growth cannot be evaluated in detail. Our research focuses on resolving this issue in the field of programming. Herein we propose a rubric to measure the progress of programming learning for elementary school students. This rubric, which is comprised of indices, aims to evaluate learning achievement of logical skills such as logical thinking and problem solving using a unified learning goal. Furthermore, this rubric consists of 30 evaluation items in 8 categories. Then we investigate whether this rubric can be adapted to existing workshops of programming learning. The workshops occurred in 2016 and 2017. in addition, A total of 101 students between 6 and 12 years old participated in the workshops. The rubric successfully evaluates programming learning workshops as it provides a unified evaluation that covers common learning objectives in existing indicators. Our rubric is available at https://g7programming.jp/plr/.	Rubric to Evaluate Programming Learning of Elementary School Students	NA:NA:NA:NA:NA	2018
Adam M. Gaweda:Collin F. Lynch	A significant issue Computer Science students face are syntax errors. This poster presents two studies on the use of typing exercises. In a usability and interaction study, 14 students were asked to complete typing, fill in the blank, and self-explanation style exercises. Fill in the blank were similar to typing exercises with 1 line of code omitted. Self-explanation exercises were graded on whether the student could adequately describe how the source code of a program worked. Students with "Poor"-labeled self-explanations experienced more typing errors and took more time completing exercises. In a semester-long study, 99 students in a CS2 course completed 538 submissions of 66 weekly typing exercises. Students were divided into four categories: users that joined but never used the platform, users that barely used the platform, regular viewers of exercises, and regular completers of exercises. Regular completers earned a minimum final letter grade of a B, compared to 90% regular viewers, 76% from barely used, and 81% from never used. Regular completers were not simply high performing students that did additional work, as 40% of regular completers scored a C or lower on the course's first midterm exam. Based on these findings, students who used the system performed similarly or better than students who did not. While not the only source of practice, typing exercises (and other novel exercises) can serve as a viable tool for teaching Computer Science and boosting low-performing students' abilities.	Giving Students Canned Code using Typing Exercises	NA:NA	2018
David L. Largent	Media computation provides a context within which computation can more easily be learned, allowing students to be creative while learning fundamental programming building blocks (like sequencing, iteration, selection, and two-dimensional arrays). Focusing on images, students can alter a picture's appearance by selectively changing its pixels. By combining different images, students can create collages. Creativity and success in CS1 have been studied. The effect media computation and an art show might have on student satisfaction and persistence, and promotion of the department is less understood. We articulate our experiences from five years of implementing media computation in CS1, with a strong focus on an accompanying public art show held to showcase the best student work produced each semester. We implemented the art show with a goal of raising visibility of our department within the university, and to highlight the ability to be creative in a CS degree program, with the hope of attracting students. It also allows our students to showcase their work to their peers and others, while motivating them to be creative and engaged. We briefly describe how we implement media computation within CS1 and describe in full detail how we conduct the public art show. Specifics about the student image collage project that is entered into the art show, the selection process, judging, show production, and promotion are provided. We describe how things have evolved over the ten shows spread over five years to provide perspective for others considering implementation of a similar experience for their students.	Using an Art Show in CS1 to Spark Interest in Computer Science	NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Lightning Talks #1	NA:NA	2018
Kathryn Atchison:Jandelyn Plane	This lightning talk describes the Maryland Center for Women in Computing (MCWIC) ambassador program that was designed to empower current undergraduate women to lead K-12 outreach efforts for MCWIC and build a community of within the undergraduate students interested in diversity, inclusion and education.  For the last 7 years, the MCWIC ambassadors led summer camps, after school programs in schools, weekend workshops, and programs that support current undergraduate population. The program has grown to the point that we now employ over 15 undergraduate students each semester to support these activities.  Come to this talk to learn more about how this program was created, how it is sustained, and how the ambassadors benefit from being a part of the program while also serving the greater community.	Building a Community of Undergraduate Women: Ambassadors for Computing Outreach	NA:NA	2018
Jared O'Leary	This lightning talk introduces ipsative assessment, which is an assessment undertaken by a student for the purpose of learning through reflection of prior work. This process differs from self-assessment where students evaluate their own efforts or results without making connections to prior creations or demonstrations of understandings. I begin this session by briefly reviewing applications of formative and summative assessment techniques and then introduce ipsative assessment as another possibility for assessing student work. After this brief introduction, I elaborate by providing examples of how I used ipsative assessment within the K-8 coding classes I designed and facilitated, and conclude the lightning talk by sharing assessment resources I created for elementary CS education professional development.	Introduction to Ipsative Assessment	NA	2018
Carol L. Fletcher	Broadening participation in K-12 CS education at a statewide level is a challenge that requires substantial structural changes that need to be addressed across the K-12 system. At the same time, it is vital to find early successes in order to build both political and financial support for broadening participation in computing (BPC) efforts. Leadership teams from Expanding Computing Education Pathways (ECEP) Alliance states are responding to these two apparently conflicting drivers as they develop goals and metrics that measure outcomes that are both realistic in the short term and that will lead to long-term success. This lightening talk will discuss a framework for goal development used by Texas that addresses four interdependent components of the K-12 CS education system: capacity, access, participation, and equity. Focusing on measurable outcomes for each of these components can both lead to early "wins" that are meaningful and easily communicated to stakeholders and that lay the foundation for substantive changes in CS engagement and success for students from traditionally underrepresented groups including women, students of color, and students of low socio-economic status.	Every Marathon Starts with the First Mile: Early Successes in Broadening Participation in K-12 CS	NA	2018
Steven Paul Floyd:Luigi Sorbara	As educational jurisdictions around the world begin to integrate computational thinking (CT) into their K-12 mandatory curriculum, there is a need to ensure that classroom activities are engaging, relate to student interests, and effectively promote the development of CT skills. The analysis of sports performance data fulfills this criteria for some students and teachers and presents an exciting context in which students from all K-12 grades can access complex CT concepts. This lightning talk investigates sports analytic tasks within the context of the CT in mathematics and science taxonomy introduced by Weintrop et al. (2015). Specific classroom activities are presented including analyzing the distribution of soccer goals, baseball salaries, the location of successful basketball shots, and the placement of volleyball serves. Examples of data analytics projects will be shared and the four main components of the taxonomy (data practices, modelling and simulation practices, computational problem-solving practices and systems thinking practices) will be identified within each project.	Sports Analytics as a Context for Computational Thinking in K-12 Education	NA:NA	2018
Jeremy H. Sarachan	This lightning talk describes a proposal for a class that includes a mix of programming and politics. Students would use the p5.js library to learn basic programming, making this class appropriate to undergraduate non-majors. With a focus on interfacing with an audience, students learn variables and arrays, loops, if then statements, text animation, and functions, as well as p5.js specific libraries for video and the Kinect. For a major/final project, students are asked to consider a social issue (e.g., poverty, global warming, gun reform) and create an interactive art exhibit using a PC, Kinect, keyboard, and/or mouse, and their choice of photography/graphics/video. All viewpoints are accepted. The integration of social science (e.g., Political Science, Sociology), humanities (e.g., American Studies, Gender Studies), and programming would offer a wide spectrum of students with an immediate and tangible product, while also broadening their concept of what can be accomplished and communicated through code. Additionally, students would study other example of interactive installations as a means to see what is possible and come to terms with what forms may constitute art. Most significantly, this alternative version of project-based learning would motivate students to apply and continue to learn what is necessary to implement their artistic vision and communicate their views. Furthermore, each student's unique project would minimize the risk of cheating and require students to synthesize not only specific programming tasks, but also an understanding of audience and concepts of usability relevant to the brief time a user may interact with the installation.	Programming Politics: Using p5.js to Create Interactive Art Connected to Current Events	NA	2018
Michael Hilton:Sreecharan Sankaranarayanan	This lightning talk presents an ongoing effort investigating the use of a collaborative programming paradigm originating in industry called Mob Programming, for effective collaborative learning in the classroom. In industry, Mob Programming involves the participation of a group of developers solving one problem at the same time and place. Developers take turns cycling through a structured process for collaboration having been assigned pre-defined roles responsible for brainstorming ideas, deciding on a path forward and implementing the consensus decision respectively. Pedagogically, there are several compelling reasons to motivate the adoption of Mob Programming in learning settings . First, the collaboration is well-structured meaning that the interaction between even a large group of students will not descend into chaos. Second, students are assigned to roles, which allows for the differentiation of responsibilities and development of skills in different aspects of solving the problem. Third, the rotation of assigned roles allows students to learn and exhibit multiple competencies as well as appreciate bringing different perspectives to bear on solving the problem. In order to investigate whether this promise is borne out in practice, the paradigm is currently being investigated in the context of a Cloud Computing course offered online to undergraduate and graduate students at a large American university and its satellite campuses. Since this effort is still underway, faculty who implement or are interested in implementing collaborative learning for this classrooms are invited to attend and provide feedback or consider joining the effort to investigate this paradigm for use in learning settings.	Online Mob Programming: Effective Collaborative Project-Based Learning	NA:NA	2018
Shuchi Grover	Computational thinking (CT) is a means to help learners engage in authentic disciplinary and problem-solving practices of computer science (CS). For CS classrooms, CT is considered "thinking like a computer scientist". CT is believed to be an important learning goal of introductory CS in addition to CS concepts and programming. Despite the growing attention on CT in K-12 CS education, there is lingering confusion on the what and how of CT, and CT's relationship to coding and CS. Education research on disciplinary thinking skills in science and mathematics education can provide guidance for teaching and learning of CT. For example, (a) The shift in emphasis on disciplinary thinking helps focus on deeper conceptual understanding rather than rote learning of knowledge and facts. Hence thinking like a scientist, or mathematician, historian or computer scientist, draws attention to authentic practices of those disciplines. (b) Thinking skills are best taught in context. Therefore, CT should be taught in CS classrooms or integrated into learning of other subjects rather than taught as a separate skill or subject. (c) Even if there is no transfer beyond the context in which they are taught, a focus on thinking skills helps in deeper conceptual learning; (d) Like critical or creative thinking, CT should be integrated into other subjects to enrich learning. Research on meaningful technology integration across subjects provides useful frameworks to inform CT integration efforts. This talk aims to productively move the discourse on CT toward concrete ideas for K-12 educators, researchers, and curricular designers.	Thinking about Computational Thinking: Lessons from Education Research	NA	2018
Jeffrey A. Stone	This lightning talk describes initial research to assess the impact of a set of multidisciplinary programming projects in introductory CS and IS courses. Students in these courses are given a series of programming projects designed around various components of sustainability (e.g. air pollution, wind power). These projects are intended to provide students with a lightweight, non-intrusive introduction to sustainability concepts while still assessing their ability to perform introductory programming tasks. This approach is intended to show students the applicability of programming towards sustainability concepts, but it is also intended help build students' knowledge and spark interest in applying sustainability concepts in their own communities and daily routine. Recently, we have undertaken an effort to more accurately assess the impact of these projects on students' knowledge, understanding, appreciation, and practice of sustainability concepts. Small post-project reflective writing exercises have been used to assess the influence that the sustainability-based projects have had on students' knowledge and behavior. This work has included initial development of custom reflective writing exercises and an accompanying grading rubric, as well as pre- and post-course surveys, but more work is needed to develop and/or refine these instruments and the overall approach. This assessment effort began in Spring 2018 and is currently in pilot. We are seeking additional interested faculty collaborators and feedback on the approach. Especially welcome are faculty who may have an interest in adopting and/or helping to develop assessment materials or sustainability-themed projects.	Assessing the Impact of Sustainability-Themed Programming Assignments	NA	2018
Gail Carmichael	We are designing a year-long program for internal Shopify employees who want to retrain as software developers. Our aim is to provide a better base in core computer science concepts than boot camps, but be less comprehensive than a degree. The design leverages the best of our Dev Degree work-integrated learning program that combines developer skills training and team placements at Shopify with a fully accredited computer science degree. Participants will spend six months on education full time, and six months in a team at Shopify with some continuing education an hour or two a week. By the end of the program, participants will have the opportunity to join a team as a back-end web developer. Our lightning talk will share key aspects of the program design and solicit feedback offline.	More than a Bootcamp, Less than a Degree: A One-Year Program to Retrain Industry Employees as Developers	NA	2018
Kenrick Mock	This lightning talk describes our experience using Discord as a platform for online tutoring at the University of Alaska Anchorage (UAA) for the past two and a half semesters. Discord is a free online chat system that is accessible via a web browser, computer program, or mobile app. It competes with apps including Skype, Slack, and TeamSpeak. We initially pitched Discord to our students as a way to deliver online tutoring. However, once a critical mass of students joined the system they began to use it for socializing, finding study partners, and other community-building activities. Utilization has been much higher than other online communication tools we have implemented in the past. With approximately 250 majors there are currently 261 users subscribed to our server with users actively posting messages every day. Students have reported positive experiences with the platform. To further facilitate tutoring in the future we are developing a bot and web tools into the platform to make it easier to share and run snippets of code.	Experiences using Discord as Platform for Online Tutoring and Building a CS Community	NA	2018
Chen-Hsiang Yu	At Wentworth Institute of Technology, we have advocated Externally-collaborative, Project-based, Interdisciplinary Curricula (EPIC) learning for years. EPIC learning provides opportunities for the students from different majors to work together on interdisciplinary projects, which have been proved interesting, useful and influential to the students' future career, either academia or industry. In 2016, we reported the success of applying mobile application development to biomedical education for creating a mobile health system for the students. To extend this success, we spent one year designing and teaching a new research-oriented interdisciplinary EPIC course for guiding undergraduate students to conduct research projects in biomedical field. In this talk, I will summarize our learning from this process, including (1) Why is it more difficult to teach a research-oriented EPIC course than a regular course for undergraduate students from different majors? (2) How to conquer some difficulties found in this process? (3) How to design suitable lectures and laboratory assignments to facilitate research collaboration? (4) How to motivate the undergraduate students to work on research projects? Although three out of six student teams' research work were accepted at a research conference, we believe there is a space to improve this process for this kind of research-oriented EPIC course in the future.	A Research-Oriented EPIC Course - Applying Mobile Technologies to Biomedical Research Questions	NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Lightning Talks: Lightning Talks #2	NA:NA	2018
Valerie Summet	Many universities and students look for opportunities to volunteer and contribute to their communities in a variety of ways. However, a host of factors including time, expense, and duration effect instructor adoption, student commitment and student perception of volunteer tasks. In CS curriculums, volunteer work most often takes the form of projects for local charities through a specific course (e.g., a senior capstone or software engineering course) or work in local elementary schools teaching younger students to program. The purpose of this talk is to stimulate a conversation about low-cost, low-commitment ways to incorporate service learning via micro-volunteering and virtual-volunteering into CS classes as pedagogically relevant assignments. Micro-volunteering refers to volunteer actions which take little time (usually less than 30 minutes) and have no expectation of continued involvement. Virtual-volunteering is defined as volunteering which a person can complete via the Internet from any location. While there exist many opportunities for semester-long, service learning-based projects in upper level courses, there is a lack of practical project ideas and assignments which could be incorporated into courses of all levels on a smaller scale. The goal of this project is to develop concrete assignments and short projects which incorporate micro- and virtual-volunteer opportunities in a variety of core Computer Science courses including introductory and non-major courses.	Micro-Volunteering and Virtual-Volunteering as Pedagogical Tools in Computer Science Instruction	NA	2018
Rafi Santo	This lightning talk shares emerging lessons on helping K12 school districts plan around CSforAll. The CSed community rightly spends a lot time thinking about what CS to teach and how to teach it. And as efforts to bring CSed to K12 schools grow, we're starting to think more about how to support teachers through effective professional development. But we don't really know a lot about how the institutional contexts in which CSforAll efforts will succeed, or, potentially, fail - K12 districts - can approach CSed holistically. If we want to reach all kids, then districts are going to be a key leverage point to ensure that CSed efforts are equitable, rigorous and sustainable. We also know that they're incredibly complex systems that are difficult to change. In this talk we share lessons emerging from a research-practice partnership with sixteen K12 school districts. Based on studying how these districts have engaged in strategic planning and decision making, we share five emerging lessons for supporting K12 districts on their journey to make CSforAll to their schools. We focus on (1) the importance answering the question of "why CS for all students?", (2) developing a local definition of what "counts' as CS learning goals, (3) mapping existing activities and expertise related to CS, (4) integrating CSed efforts not just with existing curricula but also broader, existing institutional infrastructures, and (5) establishing coherence across learning goals, professional development, curricula and a guiding vision for CS education in a district.	5 Lessons on Supporting CSforAll in K12 School Districts	NA	2018
Paul Salvador Inventado	Programming is a complex skill requiring computational thinking, knowledge of the programming language, and the ability to distinguish, combine, and manipulate appropriate components to solve a problem. Practice is an effective strategy for teaching programming because it fosters skill mastery especially when students get sufficient experience and feedback. However, properly implementing programming practice is difficult because instructors need to assign appropriate problems for each student, evaluate solutions, and provide feedback. We conducted a pilot study on an introductory C++ programming class that applied mastery learning to optimize practice, used a repository of programming problems to reduce instructor effort, and leveraged unit tests to provide feedback and facilitate grading. The class had a lecture component to introduce programming concepts and a lab component for practice. We used mastery learning to control the number of practice-problems students solved on a topic before moving to a more advanced one. We assumed mastery when students answered three programming problems correctly in a row without help. If they sought help, they had to successfully solve a new set of three problems in a row. We also assumed mastery if they solved ten problems because it should have given them sufficient practice. We observed that experienced students asked fewer questions and quickly progressed across topics, while other students got much-needed help from instructors. The repository saved time for preparing problems and the unit tests helped answer students' low-level questions. Unit tests already checked students' solutions against expected results, so it significantly reduced checking time.	Promoting Mastery Learning in an Introductory Programming Course	NA	2018
Barry Fagin	Once you introduce RSA and probabilistic primality testing to your cryptography class, one of your brighter students will ask "What happens if the test is wrong?" It turns out the answer can vary from "You'll find out immediately" to "It makes no difference" to "It depends". We explain the mathematics that determine where the answer lies, and illustrate with examples suitable for use in the undergraduate classroom. We conclude by showing how to construct a key pair that produces correct RSA results from composite numbers p and q, and thus whose composite nature is not detectable through RSA encryption and decryption alone.	Teaching RSA: What Happens When One of Your Primes Isn't?	NA	2018
Vance Kite:Soonhye Park:Eric Wiebe	In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of "computational thinking for everyone," and propose specific recommendations for expanding the current CT paradigm.	Recognizing and Questioning the CT Education Paradigm	NA:NA:NA	2018
Olivera Grujic	Recent popularity of computer science courses has caused class enrollments to skyrocket to mega level of several hundred students. Due to space and other constraints, multiple sections of each class are often taught by the same instructor. Students attending different section are taking the same exam, which requires the instructor to keep teaching repeating lectures consistently. This can be difficult and is further complicated by the varying number of students and questions posed during different sections. The lightning talk explores one faculty's solution to lecture consistency issue by making use of technology in the classroom: review and discussion of lecture recordings with students in attendance. All lectures were recorded during the first session. During the subsequent session, those recordings were played back to students in attendance on the large projector screen. This practice offered the opportunity to the instructor to further clarify concepts taught in class and receive continuous feedback how to improve her teaching in addition to delivering consistent lectures. More importantly, it offered students an opportunity to hear the questions asked by the students in attendance of the recorded session, before asking their own or offering additional discussion points. Class participation increased significantly as a result of this practice.	Consistency when Teaching Multiple Sections: Live Lecture Recordings Reviewed and Discussed with Students	NA	2018
Zachary J. Oster	Internships are widely recognized as a high-impact educational practice that effectively prepares students for successful careers in the computing industry. Unfortunately, not all students have equal access to computing internships. Students are often expected to find internships independently, but their classes generally do not teach them the skills needed to search for computing internships or to succeed in a technical interview. Furthermore, at a university in a rural area with little or no public transportation, students may not be able to accept an internship offer unless they have a car and enough time to travel to and from a work site in a nearby city. These problems are especially severe for students of opportunity (e.g., students with low socioeconomic status, first-generation students): the exact students for whom an internship can have the greatest impact. To address this problem, our university is starting a software development center to provide campus-based internships in which student teams develop software products for clients. Students hired by the center will benefit from dedicated workspace on or near our campus, ongoing training in common software development practices (e.g., version control, project management, requirements engineering) that are not covered consistently in a classroom setting, and on-site mentoring from experienced software professionals. We believe that this co-curricular experience will improve participants' ability to begin and persist in a career in software development after graduation. We will discuss our experience with several pilot projects and our vision and goals for the center.	Improving Access to Internships with an On-Campus Software Development Center	NA	2018
Rachel Stange	The efforts of a Generation Z student to improve K-12 cyber competency through curriculum design and educator professional development, is having a positive impact in Virginia. School Systems in Virginia and across the nation tend to focus on cyber bullying as the primary issue. The issue that is not addressed is what cyber mechanisms allow cyber bullying to occur. This is often due to administrators and educators themselves not understanding what cyber competencies are needed to protect oneself in today's technological world. Studies show that social engineering, hacking and defending, cyber awareness, and personal connections have more impact on Generation Z and Generation Alpha students. My efforts started out to help my peers and have spiraled into a crusade to improve cyber competency of K-12 students and educators. One school system has created a Digital Citizenship Committee to support the concept of cyber competency beyond just teaching cybersecurity courses to a select few. This is a pay forward approach as the student leading the charge was impacted by two other students who were bullied through cyber stalking and classroom discussion boards. This effort is being aided by national organizations such as Safe Surfin' Foundation, National Center for Women & IT (NCWIT), and National CyberWatch Center. My presentation will show attendees how to expand this movement into their community to help slow down some of the cyber challenges facing Generation Z and beyond.	Increase K-12 Cyber Competency to Prevent Cyberbullying	NA	2018
Steven Paul Floyd	It's an exciting time in computer science education on the K-12 landscape. Educational jurisdictions around the world are incorporating computer science concepts, as well as related computational thinking components, into their mandatory, K-12 curriculum. As we develop and implement curriculum initiatives with an eye on the future and the 21st century learner and citizen, what wisdom can we gleam from the past? In Ontario, Canada computer science education dates back to 1966 with the release of the Ministry of Education's Data Processing course that included a number of computer science and computer programming concepts and ideas. The document also frames computer education within the context of an emerging field and highlights the importance of students developing appropriate computer skills in order to thrive in the labor market and society. While we often consider computer science curriculum initiatives in K-12 education nascent, are important historical policy and initiatives being overlooked? This lightning talk shares preliminary findings from an analysis of five historical computer science curriculum documents. Grounded theory was used to discover emergent themes and concepts apparent in historical documents including ethical computing, the role of technology in society, and the cross-curricular nature of computer science skills. These preliminary findings inform the discussion surrounding the use of historical curriculum to establish best practice in existing curriculum and policy development.	Historical High School Computer Science Curriculum and Current K-12 Initiatives	NA	2018
Sotirios Kentros:Manish Wadhwa:Lakshmidevi Sreeramareddy:Komalpreet Kaur	We have introduced Peer-Educators through the Supplemental Instruction program and four Team-Based Learning laboratory assignments in our Introduction to Programming course. These four laboratory assignments are using Finch Robots to facilitate student comprehension of basic object-oriented programming concepts. In contrast to other lab assignments, Finch labs are team-based activities that revolve around programming Finch, a programmable robot to do activities like moving, sensing the environment, playing music, etc. Introducing the Finch labs has multiple benefits for the students. It helps better anchor the basic concepts of object-oriented programming, since interacting with the Finch robot is done by instantiating a Finch object and performing method calls on the object. This helps students understand many of the object oriented topics of the course, like object instantiation, method calls, passing arguments to a method and changing the state of an object. Furthermore, the labs facilitate peer learning in a natural way, since students group to work on a physical object. The goal of our intervention is to increase retention in our introduction to programming offerings. We are currently on the third year of our project and after having concluded in the interventions we want to adopt we are evaluating them through post-activity surveys, end of the semester surveys and comparison of retention data.	Improving Retention through Team-Based Learning Finch Labs and Peer-Educators in Intro to Programming	NA:NA:NA:NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Demonstrations	NA:NA	2018
Seth Haberman:Keren Perry-Shamir	At universities around the world, class sizes in Computer Science and other STEM courses are rapidly growing, as these skills become increasingly sought after in the marketplace, promising lucrative careers to graduates. Staffing-up to support the influx of students in this field presents challenges of its own. Hiring and training TAs to allow for quality and personal interactions with students, even as the class sizes grow, is expensive and difficult to maintain. Existing tools provide some automation by focusing mainly on output correctness but often overlook the student's approach to solving a problem. A solution is required in order to provide high-quality personalized feedback to very large numbers of student submissions for open-ended assignments, and in the timeframe that will keep today's instant-feedback-seeking students moving forward and not discouraged. The Sense platform utilizes algorithms from bioinformatics and genomics to identify patterns in student submissions and quickly surface insights about how students solved a problem. This enables the educator to provide rapid, equitable, in-depth feedback to each and every student, regardless of class size, and to use insights gained from this process to optimize their teaching methods and choice of assignments. In our presentation, we will show how our system identifies patterns in student submissions and uses those to generate clusters of students who have approached the problem in a similar way. We will use this time to facilitate a discussion about the specific insights that can be gleaned from the results for the students and for the educator.	Applying Bioinformatics to Assignment Evaluation: A New Approach for Pattern Recognition in Open-Ended CS Assignments	NA:NA	2018
Gautam Biswas:Nicole Hutchins:Ákos Lédeczi:Shuchi Grover:Satabdi Basu	C2STEM is a web-based learning environment founded on a novel paradigm that combines block-structured, visual programming with the concept of domain specific modeling languages (DSMLs) to promote the synergistic learning of discipline-specific and computational thinking (CT) concepts and practices. Our design-based, collaborative learning environment aims to provide students in K-12 classrooms with immersive experiences in CT through computational modeling in realistic scenarios (e.g., building models of scientific phenomena). The goal is to increase student engagement and include inclusive opportunities for developing key computational skills needed for the 21st century workforce. Research implementations that include a semester-long high school physics classroom study have demonstrated the effectiveness of our approach in supporting synergistic learning of STEM and CS/CT concepts and practices, especially when compared to a traditional classroom approach. This technology demonstration will showcase our CS+X (X = physics, marine biology, or earth science) learning environment and associated curricula. Participants can engage in our design process and learn how to develop curricular modules that cover STEM and CS/CT concepts and practices. Our work is supported by an NSF STEM+C grant and involves a multi-institutional team comprising Vanderbilt University, SRI International, Looking Glass Ventures, Stanford University, Salem State University, and ETR. More information, including example computational modeling tasks, can be found at C2STEM.org.	Integrating Computational Modeling in K-12 STEM Classrooms	NA:NA:NA:NA:NA	2018
David Burlinson:Erik Saule:Kalpathi Subramanian	Many newcomers to programming and computational thinking have been brought up on interactive, gamified learning environments. Introductory computer science courses at the university level need to dig deeper into these topics, but must do so with similarly engaging technologies and projects. To address this need, we have built a framework for a grid-based game API with event-based blocking and continuous non-blocking interfaces. The framework abstracts away much of the complexity of inputs and rendering and exposes a simple game grid similar to a 2D array indexed by rows and columns. As such, our project helps reinforce basic computing concepts (arrays, loops, OOP, recursion) with a customizable and engaging game interface. We have discussed the valuable influence of visual representations of student's data structures using BRIDGES in previous publications, and believe our game API can provide significance and intrigue for students in introductory courses and beyond. Our Bridges Games App website (http://bridges-games.herokuapp.com/) presents descriptions and instructions.	Building Simple Games With BRIDGES	NA:NA:NA	2018
Joseph E. Hollingsworth:Eileen T. Kraemer:Murali Sitaraman	Using freely available online automated reasoning tools, we will demonstrate a sequence of engaging reasoning activities that are suitable to introduce beginning programmers and software engineering students to reason logically and symbolically about code. The automated tools have an underlying verification engine that makes it possible for the tool to offer activities and directed logical feedback not possible with typical development environments. The tools have been used in undergraduate classrooms for multiple years by well over a thousand students. The imperative language used by the tool is integrated with the underlying verification engine, and because it closely resembles many commercial languages, it presents little barrier to student usage. A comprehensive activity-based "Reason with Components" tool takes 5-10 minutes of instructor introduction and allows student exploration of contracts, objects, loops, recursion, and reusable concepts. Multiple versions of "Begin to Reason" tools are designed to help students learn the basics of code tracing in intro CS courses "on their own". Students and instructors can create new activities and can fine-tune the existing activities to their specific needs.	Engaging in Logical Code Reasoning with an Activity-Based Online Tool	NA:NA:NA	2018
Richard Weiss:Jens Mache	The critical shortage of cyber security professionals has driven faculty interest in adding this to the curriculum, and it was added to the ACM/ IEEE Model Curriculum of 2013. This is a subject that demands hands-on exercises. There has been a modest increase in the number of such exercises, but the limit is usability. Most faculty do not have the time to create their own exercises, modify and install VMs, and set up assessment mechanisms. EDURange is a framework for accessing, developing and assessing interactive cybersecurity exercises. It has a range of exercises from introductory to advanced. We will demo an introductory exercise about using the command line and an advanced exercise about network scanning. We want to reach and engage as many faculty as possible, so that they can develop their own exercises. EDURange uses VMs in the cloud. Students only need an ssh-client. We have built tools to give faculty detailed information on how students are doing. This allows instructors to more easily see when students are stuck or heading in the wrong direction. The exercises we have created have manuals that instructors can use. Information about EDURange can be found at https://edurange.org.	Hands-on Cybersecurity Exercises that are Easy to Access	NA:NA	2018
Keith Irwin:Austin Hodge:Darina Dicheva	The low performance and drop-outs in Computer Science classes are frequently attributed to lack of engagement and motivation. Meanwhile, gamification - the application of game design principles and game mechanics to a non-game context - increasingly attracts the interest of educators due to its potential to foster motivation and behavioral changes in learning contexts. This Demo will introduce OneUp Learning, a platform aimed at facilitating the gamification of academic courses. OneUp enables instructors to define course activities and create exercise problems for practicing and self-assessment, as well as exams or quizzes for testing particular skills. The platform enables gamifying these practice activities. It is highly configurable and supports tailoring gamification features to meet the vision of the instructor. The gamification related configuration includes the choice of the game elements to be used along with specification of gaming rules for them. The system currently supports the following game elements: points (challenge points, skill points, and activity points), progress bar, virtual currency, badges, leaderboard, skill board, learning dashboard, and avatars. In the demo, we will show interested instructors how they can use OneUp in their classes. In particular, we will show them how to create problems and challenges, how to configure the gamification features they like to use, how to define their own badges, how to define rules for earning and spending virtual currency (in the course shop), and how to monitor the engagement and progress of their students. This work is supported by the NSF under Grants HBCU-UP TIP-1623236 and DUE-1821189.	Gamifying Computer Science Courses with OneUp	NA:NA:NA	2018
Gordon Fraser	Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game aims to address this problem by letting students compete over code under test by either introducing faults ("attacking") or by writing tests ("defending") to reveal these faults. We have empirically established that the game is engaging and players write better tests than outside the game scenario, and we have successfully integrated Code Defenders as a semester-long activity of an undergraduate and graduate level university course on software testing. This demonstration provides an introduction to Code Defenders from a student point of view (How to play the game?) as well as from a teacher point of view (How to set up games for my students, and how to integrate the game into my course?) A laptop is recommended to join in and try out the game.	Code Defenders: A Mutation Testing Game	NA	2018
Joshua W. Buck:Saverio Perugini	We demonstrate a graphical simulation tool for visually and interactively exploring the processing of a variety of events handled by an operating system when running a program. Our graphical simulator is available for use on the web by both instructors and students for purposes of pedagogy. Instructors can use it for live demonstrations of course concepts in class, while students can use it outside of class to explore the concepts. The graphical simulation tool is implemented using the React library for the fancy UI elements of the Node.js framework and is available as a web application at https://cpudemo.azurewebsites.net. The goals of this demonstration are to showcase the demonstrative capabilities of the tool for instruction, share student experiences in developing the engine underlying the simulation, and to inspire its use by other educators. An article describing this software simulation and demonstrating its pedagogical capabilities is available at https://arxiv.org/abs/1812.05160.	An Interactive, Graphical Simulator for Teaching Operating Systems	NA:NA	2018
Ákos Lédeczi:Hamid Zare:Gordon Stein	NetsBlox (https://netsblox.org) is a web-based collaborative learning environment extending Snap! with a few carefully selected abstractions that enable students to create distributed applications. These include online multi-player games and client-server applications that access online STEAM data such as maps, weather, earthquakes, movie information, etc. The distributed computing abstractions supported by NetsBlox also make it possible to write robot control programs. These programs issue wireless commands to the robots which in turn reply with acknowledgements and sensor readings. The programs run in the browser making debugging much easier and eliminating the need to download anything to the robots. Furthermore, the environment makes it possible for other users to eavesdrop on the wireless messages and hijack the robots of others. This provides an excellent motivation for cybersecurity and makes it easy to teach it in a hands-on manner. We have created a cybersecurity curriculum for a week-long summer camp for high school students. Lessons include Denial of Service attacks, their detection and mitigation, cryptography, secure key exchange, replay attacks, etc. Each day student teams solve challenge problems that their robots have to carry out while under cyber-attack by the other participants. This technology demonstration is a companion to the paper "Teaching Cybersecurity with Networked Robots." It will provide the audience with a more practical view of this novel approach to hands-on cybersecurity education.	NetsBlox and Wireless Robots Make Cybersecurity Fun	NA:NA:NA	2018
Lauren R. Milne:Richard E. Ladner	Block-based programming environments such as Scratch are designed to make programming easier to learn for both children and adults. Unfortunately, these environments rely so heavily on visual features that they are inaccessible to people who are blind and use screen readers. To address this problem, we created Blocks4All, a block-based environment for the Apple iPad, which uses the touchscreen and VoiceOver, the built-in screen reader for iOS, to help make the environment accessible. Blocks4All differs from existing block-based environments in three main ways: (1) it uses select, select, drop instead of drag and drop to move blocks, (2) the blocks are placed on the bottom of the screen and are a fixed size so that they can easily be found by touch even without sight, and (3) it uses both audio and spatial cues to convey information about statements nested inside repeat loops and conditionals. In our presentation, we will show the features we developed and demonstrate how to write code that uses both conditional statements and repeat loops. We anticipate the demo will be useful both for instructors with students with visual impairments and developers of block-based environments. Handouts will be provided that describe Blocks4All and information about how to download a beta version.	Blocks4All: Making Blocks-Based Programming Languages Accessible for Children with Visual Impairments	NA:NA	2018
Teerapong Leelanupab:Tiwipab Meephruek	Pair-programming is an Agile technique in Extreme Programming (XP) where traditionally two programmers need to be collocated and work together at one workstation. Previous research has shown that pair-programming is very beneficial in software engineering education. However, learning and practicing pair-programming are mostly limited in a class where students can only learn to collaboratively program with another student in controlled or laboratory settings. Although nowadays there exist some collaborative tools, such as CodePilot, Google Colaboratory and Git, they are not specifically pair-programming-oriented. This impedes a pairing's ability to discuss effective strategies in problem solving, to form productive or mutually learning pairs, and to predict pair compatibility. To encourage students in out-class practice of pair-programming, we present a demonstration of a novel web-based software development environment, called CodeBuddy, for remote pair-programming. CodeBuddy provides instructors and students with several features for managing laboratory classes and practicing pair-programming. Examples of CodeBuddy's features include: coding screen mirroring between a pair, output terminal to show compiled results, face-to-face like communication channels (i.e., video calling and instant text messaging), automatic and manual role switching, code quality analysis for monitoring coding students' progress and recommending a pair with targeted pairing goals, implicit code reviews using face detection for tracking a reviewer's engagement, line-by-line code commenting, etc. The demonstration consists of a walkthrough of two use-case scenarios: an instructor assigns a problem-solving task and two students remotely work together in a pair using CodeBuddy on two different workstations to solve it.	CodeBuddy (Collaborative Software Development Environment): In- and Out-Class Practice for Remote Pair-Programming with Monitoring Coding Students' Progress	NA:NA	2018
Jessica Schmidt:Stephen Hughes	NA	Session details: ACM SRC: ACM Student Research Competition	NA:NA	2018
Kevin Lin:David DeLiema	Educational researchers have increasingly drawn attention to how students develop computational thinking (CT) skills, including in science, math, and literacy contexts. A key component of CT is the process of abstraction, a particularly challenging concept for novice programmers, but one vital to problem solving. We propose a framework based on situated cognition that can be used to document how instructors and students communicate about abstractions during the problem solving process. We develop this framework in a multimodal interaction analysis of a 32-minute long excerpt of a middle school student working in the PixelBots JavaScript programming environment at a two-week summer programming workshop taught by undergraduate CS majors. Through a microgenetic analysis of the process of teaching and learning about abstraction in this excerpt, we document the extemporaneous prioritization of subgoals and the back-and-forth coordination of problem solving phases. In our case study, we identify that (a) problem solving phases are nested with several instances of context-switching within a single phase; (b) the introduction of new ideas and information creates bridges or opportunities to move between different problem solving phases; (c) planning to solve a problem is a non-linear process; and (d) pedagogical moves such as modeling and prompting highlight situated resources and advance problem solving. Future research should address how to help students structure subgoals and reflect on connections between problem solving phases, and how to help instructors reflect on their routes to supporting students in the problem solving process.	Subgoals, Problem Solving Phases, and Sources of Knowledge	NA:NA	2018
Vinitha Subburaj:Jacob McInite:Jordan Fite:Petterson Pham	Online contests often have a wide skill range between each participant, making it feel overwhelming for high school students to compete in. On sites like HackerRank or TopCoder, students could be competing against professionals with years of work. The project narrows down the skill gap to a young audience so that they can compete against one another without having to compete with these professionals. In addition, this project provides the participants with the necessary environment and tools to run their programs without the hassle of having to installing necessary tools and its required files to run these programs. During the contest, participants can access a scoreboard, giving them a view of their progress against other participants. The purpose of the scoreboard is to show each participant their progress, as well as motivating them to achieve higher scores. The contest tool then grades based on time before correctness to provide fairness towards most students as the goal to solve problems early rather than optimize their program. With this, the focus is to improve their problem solving skills, pique curiosity, or serve as an impetus, to become a computer science engineering student.	Young Aspirants Developer Contest	NA:NA:NA:NA	2018
Ka Ki Fung:Thitaree Tanprasert	Previous research has documented correlations between spatial reasoning ability and success in STEM fields [7-9]. While connection between spatial reasoning and other STEM fields like physics and calculus may seem obvious, there are no theories to explain this correlation of CS (computer science) performance and spatial reasoning. [5,7,8]. We aim to better understand this correlation, specifically between CS performance in an introductory course and spatial reasoning by observing the common characteristics between students' strategies in solving CS and spatial reasoning problems. We conducted interviews with eight students who have prior experience in CS but have taken only two introductory CS courses. In the interview, we asked the participants to solve a total of four problems; two CS problems and two spatial reasoning problems. [1,6]. The CS problems were code-reading problems in Python, which focus on basic programming concepts, including nested loops and functions. We analyzed the participants' problem-solving strategies and recorded their explanation for each problem. We observed for both types of problem, participants appeared to first observe the problem for its fundamental structures then decomposes the problem into smaller sub-problems. We conjecture that problem decomposition may be a required skill to solve both CS and spatial reasoning problems, and thus, could be a possible factor that contributes to the correlation between the two fields. Further study into utilization of problem decomposition in CS and spatial reasoning may provide more insights into the correlation between success in CS and spatial reasoning ability.	Problem Decomposition in Introductory Computer Science and Spatial Reasoning	NA:NA	2018
Sarah Almeda	Communities that use visual languages like American Sign Language (ASL) to communicate are underrepresented in the domain of translation and language learning tools. Translating between a visual, gestural language like ASL and a spoken, written language like English presents multiple unique challenges. The visual elements of hand shape, location, orientation, and motion used in ASL can be challenging to detect, interpret, and represent. We present an algorithm to recognize the 24 static signs in the ASL fingerspelling alphabet using the Leap Motion Controller. This algorithm can be used in ASL teaching applications, as well as to translate finger-spelled words. Existing Sign Language Recognition systems use cameras to extract low resolution images of hands where positions of individual fingers are difficult to detect. Our program utilizes the Leap Motion device, a motion sensor that provides skeletal hand tracking functionality. Based on joint coordinate and orientation information provided by the device, we extract a number of features including finger configuration (extended, bent, or curled), distance between fingers, and palm orientation. We then use a decision tree to classify signs as individual letters. This method does not require large amounts of training data like other machine learning based approaches. Preliminary results indicate that our method is successful in recognizing most of the static signs in the ASL fingerspelling alphabet.	Accessible American Sign Language Recognition with the Leap Motion Controller	NA	2018
Elizabeth Koning:Joel C. Adams:Christiaan D. Hazlett	Classic synchronization problems are often used to introduce students to the subtleties of concurrency and synchronization mechanisms, such as semaphores, monitors, locks, and condition variables. The Dining Philosophers, Producers-Consumers, and Readers-Writers are all classic problems in which a correct solution requires the actions of multiple processes or threads to be synchronized. In this work, we present visualizations for these three problems and demonstrate their use in helping students build accurate mental models of concurrency abstractions. We also present the results of an experiment that indicate students find using these visualizations to be significantly more engaging than reading a textbook, with no significant difference in learning.	Visualizing Classic Synchronization Problems	NA:NA:NA	2018
Jackie Chan:Kirby Mitchell	Research around computer networks has been rapidly expanding as the Internet becomes more prevalent in day-to-day life. Despite this rapid expansion in academic interest, computer networks, especially home networks, remain a challenge for inexperienced users to configure and maintain. To remedy this, new data needs to be collected to understand this new audience as computer networks move from academic/institutional to residential settings. This study examines the terminology that homeowners prefer when discussing bandwidth and connectivity issues on their home networks. We generated a list of common terms from web forums and user interviews and had participants classify these terms using an open card sort to determine their effectiveness. Our initial results indicate that participants were more likely to misclassify bandwidth-related and technical terms. This study demonstrates the importance of designing home networks to better meet the needs and diverse expertise levels of users.	Understanding the Usage and Familiarity of Home Network Terminology Using Open Card Sorting Analysis	NA:NA	2018
Shannon Collier:Mara Downing	Conditional logic and control structures are typically considered an important part of introductory computer science education, yet novices often struggle to correctly write and navigate such program logic. Previous research has largely attended to student difficulties with parsing Boolean expressions, but has not had much focus on the control structures themselves. To investigate how students work through complicated logic, we conducted a qualitative analysis of four one-on-one interviews with undergraduate students in which we gave students a piece of code with a complicated conditional control structure and asked them to write test cases for all paths. We found that several students struggled to determine the output the function would provide for a given input, and we hypothesize this occurred because they incorrectly treated an if statement as an else-if statement. One student simply wrote an incorrect output, which we believe occurred because they made this particular mistake, while another student got partway through the problem before verbally seeming to correct themself and re-identify a statement as an else-if. Based on our results, we hypothesize that novices may sometimes misidentify a sequential if statement as an else-if, which may lead them to incorrectly interpret a conditional control structure.	A Qualitative Analysis of Students' Understanding of Conditional Control Structures	NA:NA	2018
Ovidiu-Gabriel Baciu-Ureche:Carlie Sleeman:Karlee Scott:William Moody:Suzanne J. Matthews	Cyber security and on-line safety practices are not commonly taught in schools. However, there is an increasing need for education in these topics as children are joining the Internet community at a much earlier age than previous generations. It is crucial that young people understand the risks they may face on-line and how to mitigate them, ideally as soon as they begin using the Internet unsupervised. The Adventures of ScriptKitty (AOSK) introduces students to basic cyber security concepts using the Raspberry Pi, a single board computer that retails for $35.00. We created AOSK to help facilitate a culture of good cyber security practices and raise interest in STEM. The material is presented in the form of comics paired with instructional sections, including sections of more detailed technical information for readers who wish to learn more about key concepts. We piloted a portion of AOSK to a group of local middle school students. Our time with the students was limited, so we administered a short quiz, then discussed the Raspberry Pi. Next, students completed the packet sniffing exercise from Chapter 2, with the authors available to answer questions and help troubleshoot. Students were asked to re-take the quiz afterward. Our preliminary results show that students achieved a greater understanding of the material, with improved scores of 14%. A custom Pi image preloaded with Kali Linux and all needed software is included with the material. All the materials are published and available for free through GitBook at: https://suzannejmatthews.gitbooks.io/aosk/content	The Adventures of ScriptKitty: Teaching Middle School Students Cyber Awareness with Comics on the Raspberry Pi	NA:NA:NA:NA:NA	2018
Darren Jefferson:Tina Boyle Whyte	The number of students enrolling into CS(Computer Science) is currently recovering from a period of declining numbers. Although the number of students enrolling in CS isn't declining anymore, there is still a lot of ground to be covered as far as student enrollment in CS goes. This is because the number of computer science jobs, on the other hand, is and has been steadily rising. The disconnect between students enrolling in CS and the increase of Jobs for CS leaves a deficiency for in the CS work field for qualified workers. We wish to look for ways to increase K-12 student interest in CS related fields in an attempt to increase the number of students pursuing CS. This first starts with the teachers teaching the class. To address these issues, we investigated the implementation of teachers who had been through Computer Science professional developments in the K12 school environment. Using the data, gathered from a qualitative study approach, we present results found from interviews conducted on K12 teachers from all across Wisconsin to demonstrate the impact of professional development on teacher's ability to teach.	A Qualitative Study of Wisconsin Computer Science in K-12	NA:NA	2018
Adam Koehler	Research has shown that self-efficacy, a student's confidence in his or her ability, contributes to student success. Here, we examine if teaching students to recognize common programming errors increases student self-efficacy in an introductory programming course. We provided students with exercises containing examples of typical novice programming errors and methods for fixing them. At the beginning of the course we assess self-efficacy and administer a test to measure programming competence. We repeat these measurements at the end of the course. To assess self-efficacy, students rate their confidence in completing various programming tasks on a scale of 0 to 100. The test has fourteen questions; thirteen are short answer and one is multiple choice. Short answer questions require the student to write at most a few lines of C++ code, with most requiring only a single line. We analyze student self-efficacy in relation to our pre- and post-test, student course grade, assignment grade, and final exam grade. Our analysis shows improvements between the experimental term compared to the control terms across eleven measures of self-efficacy, but only three of these improvements are significant (p < 0.05).	Improving Student Self-efficacy in CS 1 Using Examples of Erroneous Code	NA	2018
Jared O'Leary	This study examined 245,098 discussion forum posts within a website dedicated to chiptunes, which are electronic music compositions or performances either emulating the sounds of or created through early computer and video game sound chips. Corpus-assisted discourse analysis tools and techniques assisted with revealing patterns of discourse across 10,892,645 words written between December 30th, 2009 and November 13th, 2017 within chipmusic.org. Findings indicate seven interconnected themes of chiptune-related practices that demonstrate potential transdisciplinary connections between computer science education and music education: (a) music composition practices, (b) music performance practices, (c) maker practices, (d) coding practices, (e) entrepreneurial practices, (f), visual art practices, and (g) community practices. Members of chipmusic.org engaged in computer science practices such as designing, manufacturing, and modifying electronic hardware for performing and recording chiptunes, as well as coding practices such as creating or modifying software for chiptune-related purposes. Such practices were guided by an interest in making music through old computer and video game hardware, and demonstrate several potential connections between computer science education and music education. For example, members engaged in computer science practices such as hardware and software modification to enable the ability to compose and perform music through the Nintendo Game Boy. Findings from this study not only demonstrate potential connections between computer science education and music education, they also raise questions about spaces and curricula with blurred disciplinary boundaries. For example, where might chiptune-related practices that blur concepts and practices from a multitude of disciplines and standards occur within a formalized education environment?	A Corpus-assisted Discourse Analysis of Chiptune-related Practices Discussed within Chipmusic.org	NA	2018
Valdemar Švábenský	Capture the Flag games are software applications designed to exercise cybersecurity concepts, practice using security tools, and understand cyber attacks and defense. We develop and employ these games at our university for training purposes, unlike in the traditional competitive setting. During the gameplay, it is possible to collect data about players' in-game actions, such as typed commands or solution attempts, including the timing of these actions. Although such data was previously employed in computer security research, to the best of our knowledge, there were few attempts to use this data primarily to improve education. In particular, we see an open and challenging research problem in creating an artificial intelligence assistant that would facilitate the learning of each player. Our goal is to propose, apply, and experimentally evaluate data analysis and machine learning techniques to derive information about the players' interactions from the in-game data. We want to use this information to automatically provide each player with a personalized formative assessment. Such assessment will help the players identify their mastered concepts and areas for improvement, along with suggestions and actionable steps to take. Furthermore, we want to identify high- or low-performing players during the game, and subsequently, offer them game tasks more suitable to their skill level. These interventions would supplement or even replace feedback from instructors, which would significantly increase the learning impact of the games, enable more students to learn cybersecurity skills at an individual pace, and lower the costs.	Analyzing User Interactions with Cybersecurity Games	NA	2018
Noha Elsherbiny	Course alignment refers to the degree to which curriculum, assessments and instruction methods are in agreement with each other. Course alignment can be used by instructors to evaluate the effectiveness of their instructional content and assessments and whether they are meeting their learning objectives. Applying alignment models is time consuming and laborious, making them difficult for a course instructor to use. Current alignment models require a panel of experts to review documents and make judgments about the degree of alignment of the course objectives and assessments. With that in mind, we devised a practical strategy to be used by a course instructor, as part of course design, to assess the alignment between the course content, learning objectives and assessment methods. We developed a process for evaluating the degree of alignment of a course based on attributes from Webb's alignment model and we developed data structures based on Porter's matrix to facilitate the assessment of the alignment. The devised strategy will be applied to various CS courses by instructors and the results of the process will be used to refine the alignment strategy. An alignment process that can be applied timely and simple to follow may encourage instructors to apply it to their course, becoming a common practice for any instructor when modifying their course.	Applying Alignment to Improve the Effectiveness of CS Education	NA	2018
Zhiyi Li	Automatic grading systems such as Web-CAT are widely used when students learn programming, especially in CS1/CS2 courses in colleges and universities. Current feedback mechanism in these systems benefits students with performance-based information. They have negative effects to often frustrate students especially novice programmers to belief of fixed mindset - their programming abilities are native and limited. Students with fixed mindset can seriously influence female and minority enrollment and retention rate in CS major. It is important to move students to growth mindset instead - belief their programming skills can be improved by practice and hard work. Recently effort were made to improve feedback mechanism in automatic grading systems. One effort was the design and implementation of a group of indicators to reflect students' progress and effort, based on their programming submissions. Another effort was the design of virutalTA Maria to deliver positive comments to encourage and reinforce students. We demonstrate the design of boosters (rewards) component and positive encourage and reinforcement comments feedback by virtualTA, based on indicators information. We simulated boosters (rewards) and comments component with a historical programming dataset to validate boosters (rewards) strategy. Simulated results found only 32 percent students did not get any Booster (rewards). 68 percent students won four types of booster range from Tier 1 to Tier 4. This result is what we are as expected. We also designed positive encouraging and reinforcement comments feedback from VirtualTA in adaptive style, based on indicator information. We plan to apply these two designed components to classroom for evaluation.	Reinforcement Learning: Improve Feedback Mechanism with Indicator based Reward, VirtualTA towards Growth Mindset	NA	2018
Olivia Nche	This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715	Engaging African American Elementary School Children in Code Understanding	NA	2018
Scott Kolodziej	Source code documentation is an important part of teaching students how to be effective programmers. But what evidence do we have to support what good documentation looks like? This study utilizes a randomized controlled trial to experimentally compare several different types of documentation, including traditional comments, self-documenting naming, and an automatic documentation generator. The results of this experiment show that the relationship between documentation and source code understanding is more complex than simply "more is better," and poorly documented code may even lead to a more correct understanding of the source code.	Empirical Assessment of Software Documentation Strategies: A Randomized Controlled Trial	NA	2018
Sreecharan Sankaranarayanan	This work presents a new paradigm for collaborative project-based computer science education called Online Mob Programming (OMP). OMP is adapted from the industrial practice of Mob Programming, where groups of developers work on the same problem, at the same time, in the same place. OMP was designed and implemented as a technique where a group of 4-6 students collaborate online through a structured process for solving programming tasks. In OMP, students rotate through clearly defined roles to collectively contribute towards a solution to a programming challenge. These roles require students to brainstorm potential solutions, decide on a path forward, and implement the correct course of action respectively. OMP was investigated in the context of a 6-week free online course on Cloud Computing. During the course, students participated in four intelligent conversational agent-coordinated OMP sessions. By instrumenting the online development environment, all student code revisions and chat logs were collected in addition to qualitative data from questionnaires. Analyses show evidence of success in terms of students following the structure of OMP and further investigations into differences in mob behavior based on the size, and problem outcome provide pedagogically valuable insights and a path toward building OMP into the computer science education curriculum.	Online Mob Programming: Effective Collaborative Project-Based Learning	NA	2018
Amanpreet Kapoor	Internships play a crucial role in helping CS undergraduate students to commit to CS degrees and computing careers. Internships also promote students' personal and professional growth. Studies have also shown that pursuing an internship is positively correlated with an improved chance of getting a full-time job offer and a higher starting salary. However, previous research has shown that only 52.1% of undergraduate students pursue an internship before they graduate. In this poster, we present findings from a cross-sectional study focused on understanding the characteristics of CS undergraduate students who have interned at one or more companies and those who have not interned. We surveyed 97 and interviewed 14 CS undergraduates. We found that 41.2% of 97 students participated in one or more internships. The key characteristics that distinguish students who successfully interned and those who did not were: 1) 95% students who interned had career goals - either to join industry or pursue graduate school after they graduate. In contrast, 21% of the students who did not intern were unsure or confused about their career goals; 2) students who interned were more likely to have participated in an undergraduate research experience or a student organization; 3) students who interned intentionally prepared for interviews, while those who did not intern were not actively preparing, not confident enough to apply, or were unsuccessful in the interview process because of lack of preparation. This poster provides insight into CS students' competitiveness for securing internships and for developing programs to support professional development.	Deconstructing Successful and Unsuccessful Computer Science Undergraduate Interns	NA	2018
