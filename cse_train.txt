Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: Opening Keynote	NA:NA	2018
Freeman A. Hrabowski	Rapid and dramatic demographic and technological changes require our nation's schools, colleges, and universities to work with agility in preparing students - particularly those from diverse backgrounds - for careers in science, technology, engineering, and math (STEM) fields, including computer science. Exploring the interplay of technology, education, and inclusion over the past 50 years, Dr. Hrabowski examines what this means for our future work in higher education. Computing education provides a critically important case. As the sector evolves rapidly, many well-paid jobs go unfilled and we must explore ways to draw on talent wherever it is found. Emphasizing themes from his TED talk on student success, Dr. Hrabowski focuses our attention on the importance of high expectations and hard work, building community among students, faculty engagement with students, and rigorous assessment of what works. He assesses the way innovative approaches - including course re-design, active and experiential learning, research, and partnerships with companies and agencies - promote student success, inclusive excellence, and achievement for all students both in STEM generally and computer science in particular.	Pursuing the Dream: A 50-Year Perspective on American Society, Technology, and Inclusion in Computing	NA	2018
Yingjun Cao	NA	Session details: Paper Session: Data	NA	2018
Debzani Deb:Muztaba Fuad:Keith Irwin	Big data and cloud computing collectively offer a paradigm shift in the way businesses are now acquiring, using and managing information technology. This creates the need for every CS student to be equipped with foundational knowledge in this collective paradigm and to possess some hands-on experience in deploying and managing big data applications in the cloud. We argue that, for substantial coverage of big data and cloud computing concepts and skills, the relevant topics need to be integrated into multiple core courses across the undergraduate CS curriculum rather than creating additional standalone core or elective courses and performing a major overhaul of the curriculum. Our approach to including these topics is to develop autonomous learning modules for specific core courses in which their coverage might find an appropriate context. In this paper, three such modules are discussed and our classroom experiences during these interventions are documented. So far, we have achieved reasonable success in attaining student learning outcomes, enhanced engagement, and interests. Our objective is to share our experience with the academics who aim at incorporating similar pedagogy and to receive feedback about our approach.	A Module-based Approach to Teaching Big data and Cloud Computing Topics at CS Undergraduate Level	NA:NA:NA	2018
Jessen Havill	In 2016, we launched an interdisciplinary, undergraduate Data Analytics major that extends the definition of "interdisciplinary" beyond computer science, mathematics, and statistics to the natural and social sciences, humanities, and fine arts. Our program was conceived, and continues to be administered, as an independent academic unit by a Committee of faculty representing ten disciplines. Students majoring in Data Analytics complete four or more mathematics and computer science courses, four project-oriented Data Analytics courses, three to four courses in one of seven applied domains, and a required summer internship. Data Analytics courses are taught by both dedicated Data Analytics faculty and other faculty from the Committee. Partnerships with campus offices, alumni, businesses, and nonprofits have enhanced both coursework and internship opportunities. The major's popularity has exceeded our expectations, and has succeeded in attracting students with a variety of academic interests, many of whom would not have otherwise pursued a computational or quantitative major.	Embracing the Liberal Arts in an Interdisciplinary Data Analytics Program	NA	2018
Thomas C. Bressoud:Gavin Thomas	The need for understanding data systems, from the structure and constraints of data models to the client-server mechanisms for acquiring and curating data, includes not just computer science students, but extends to data science students and students in a wide range of interdisciplinary programs. In this paper we describe the design and implementation of a second course in computer science, whose data-centric focus emphasizes structural models of data and the skills involved in acquiring and transforming data into forms amenable for analysis. We argue that, from a user-not-designer perspective, these topics need not wait for an upper-level database course, but to achieve sufficient depth, an introductory computer science course is appropriate and sufficient as a prerequisite.	A Novel Course in Data Systems with Minimal Prerequisites	NA:NA	2018
James Vanderhyde	NA	Session details: Paper Session: Collaboration and Communication	NA	2018
L.D. Miller:Leen-Kiat Soh:Markeya S. Peteranetz	Computer science (CS) courses are taught with increasing emphasis on group work and with non-programming exercises facilitating peer-based learning, computational thinking, and problem solving. However, relatively little work has been done to investigate the interaction of group work and non-programming exercises because collaborative, non-programming work is usually open-ended and requires analysis of unstructured, natural language responses. In this paper, we consider collaborative, non-programming work consisting of online wiki text from 236 groups in nine different CS1 and higher-level courses at a large Midwestern university. Our investigation uses analysis tools with natural language processing (NLP) and statistical analysis components. First, NLP uses IBM Watson Personality Insights to automatically convert students' collaborative wiki text into a Big Five model. This model is useful as a quality metric on group work since Big Five factors such as Openness and Conscientiousness are strongly related to both academic performance and learning. Then, statistical analysis generates regression models on group size and each Big Five trait that make up the factors. Our results show that increasing group size has a significant impact on collaborative, non-programming work in CS1 courses, but not for such work in higher-level courses. Furthermore, increasing group size can have either a positive or negative impact on the Big Five traits. These findings imply the feasibility of using such tools to automatically assess the quality of non-programming group exercises and offer evidence for effective group sizes.	Investigating the Impact of Group Size on Non-Programming Exercises in CS Education Courses	NA:NA:NA	2018
Janet Davis:Samuel A. Rebelsky	For the past four years, we have taught a reimagined software design course with typical and atypical components. Projects form the core of the course: Students work in teams of 4-6 people to develop non-mission-critical software for local non-profits, building their engagement with the community and helping them understand the broader impact of their work. These projects require multiple semesters to complete. Since students typically enroll for the course for one semester, this model gives students the novel experience of legacy software. We also provide each team with an alumni mentor who helps them navigate not only technical problems but also the challenges of working with a real-world, non-technical client. These aspects of the course also develop our students' soft skills. They learn to work with a team, to communicate with non-technical clients, to work with remote collaborators (or mentors), and to think ahead to those who will take on the project in the next semester. As we tell our students, these skills are often as crucial as their technical skills. In this paper, we report on the design of the course and describe some of the challenges associated with this model (e.g., projects that inadvertently reveal information, clients who switch management or expectations, and projects that become obsolete) and provide suggestions for those who might want to adopt a similar approach.	Developing Soft and Technical Skills Through Multi-Semester, Remotely Mentored, Community-Service Projects	NA:NA	2018
Lisa L. Lacher:Cydnee Biehl	Working effectively as part of a team is an incredibly important skill to learn. Most jobs require interacting and working with others and the outcome of a team project relies on the processes of the group members. Naturally, a positive team experience yields better results than a negative experience. The biggest indicators of a positive team experience are communication and collaboration, which are both soft skills associated with the social sensitivity of the group members. Previous research has found that social sensitivity influences the amount of communication and the ultimate performance of traditional face-to-face teams. However, virtual teamwork is becoming more common. Does social sensitivity have a similar influence in virtual teams? Virtual teams have different interactions than face-to-face teams because they use communication technologies, which can hinder certain human cognitive processes. Our current research focuses on the influence of social sensitivity on the amount of communication and the performance of students who work as a virtual team using text-based communication in Discord. We find that teams with higher average levels of social sensitivity communicate more and perform better, even if they work in a virtual environment using only text messaging.	Does Social Sensitivity Impact Virtual Teams?	NA:NA	2018
Eric Aaron	NA	Session details: Paper Session: Enrollment & Retention	NA	2018
Daniel T. Fokum:Daniel N. Coore:Eyton Ferguson:Gunjan Mansingh:Carl Beckford	As computing enrollments have grown in the last decade there have been anecdotal claims from faculty that the discipline has attracted weaker students. To the best of our knowledge the only paper that has studied, and debunked, this claim has been based on data from an exclusive North American university. In this paper we examine data from six courses drawn taught over a 3 year period at a public university in a developing country. We find that in the case of the CS1 course, the distribution of student grades has fluctuated over this period. In addition, courses in object-oriented programming, networking, algorithms and discrete mathematics have also shown variation in student grades. We provide discussion as to why the grades in the courses show variation. We also explain why our findings differ from previous claims of stability in student grades.	Student Performance in Computing Courses in the face of Growing Enrollments	NA:NA:NA:NA:NA	2018
Beth A. Quinn:Wendy M. DuBow:David Sul	Effective teaching requires understanding where students are coming from. Retaining students who have been historically underrepresented in computing requires the same, especially in introductory courses. This paper draws from surveys of students in introductory computing courses at seven geographically dispersed community colleges. We use K-means cluster analysis to differentiate students based on their responses to questions measuring constructs related to student success in computing courses and persistence. The resulting five clusters were compared on outcome variables, including final grades, intent to persist in computing, and gender and race/ethnicity. We focus on community colleges because they are uniquely well-positioned to broaden participation in computing; however, the implications extend beyond the community college context. We conclude by discussing methodological and pedagogical implications, including how findings can challenge assumptions and stereotypes about introductory computing students.	Understanding Who Enrolls in Introductory Computing Courses at Community Colleges	NA:NA:NA	2018
Heather M. Wright:N. Burçin Tamer	This research examines the relationship between undergraduate computing students' participation in technical conferences and psychological predictors of academic persistence. Studies have shown experiential educational activities, like conferences, encourage students' persistence in STEM; this is especially important for students underrepresented in the field, who are more likely than their well-represented peers to leave their degree programs. In recent years, academic literature has pointed to anecdotal evidence that conference participation for students early in their undergraduate education relates to students' persistence in STEM pathways. Using national survey data, we examine the relationship between conference participation and first and second year undergraduate students' persistence in computer science pathways. This paper presents results from a cross-sectional analysis and a two time-point analysis of national survey data collected from undergraduate students. Overall, we found that first and second year computing majors who attended a technical computing conference reported higher levels of belonging to their field and confidence to persist in their degree program than those who did not attend. We also found that conference participants' levels of belonging and self-confidence is higher than non-participants over time, even after controlling for initial levels at Time 1. Our analyses also showed that conference participation was associated with closing the gap in levels of belonging and self-confidence between students who are underrepresented in computing and those who are well-represented. Empirical results from this paper support anecdotal evidence that conference participation for students early in their undergraduate education may help retain students, and particularly underrepresented students, in computing majors in the long-term.	Can Sending First and Second Year Computing Students to Technical Conferences Help Retention?	NA:NA	2018
Charles Dierbach	NA	Session details: Paper Session: Tools 1	NA	2018
Michael Kölling:Neil C. C. Brown:Hamza Hamza:Davin McCall	Block-based programming languages and environments have several benefits for introductory programming courses, compared to more traditional text-based languages. In particular, blocks remove the burden of learning language syntax and dealing with syntax-related errors. Many blocks-based environments are tightly focused on developing graphical games, stories and simulations, while the more general programming environments are typically text-based. In this tool paper, we describe the incorporation of a Stride editor within the BlueJ programming environment. Stride is a frame-based programming language, intended to combine the best of blocks and text programming, usable both as a stepping stone towards text-based languages and as a comprehensive language in its own right. The incorporation of Stride into BlueJ brings some aspects of block programming into a general purpose educational environment.	Stride in BlueJ -- Computing for All in an Educational IDE	NA:NA:NA:NA	2018
Jacob Bailey:Craig Zilles	We describe uAssign, an assignment system for teaching and assessing command line terminal skills. uAssign allows instructors to create auto-graded terminal assignments that require students to perform a high-level action that can be completed in many ways. Assignments can be randomized so that students can't re-use old solutions. uAssign is implemented via an in-browser terminal emulator that uses WebSockets to connect to a Docker container. Performance testing and its use in a large-enrollment lecture course show that it is efficient enough to handle a large number of concurrent users. A survey of students shows significant improvement in terminal skill confidence after using uAssign and that students have a high level of satisfaction with uAssign assignments.	uAssign: Scalable Interactive Activities for Teaching the Unix Terminal	NA:NA	2018
Teerapong Leelanupab:Tiwipab Meephruek	Pair-programming is an Agile technique in Extreme Programming (XP) where traditionally two programmers need to be collocated and work together at one workstation. Previous research has shown that pair-programming is very beneficial in software engineering education. However, learning and practicing pair-programming are mostly limited in a class where students can only learn to collaboratively program with another student in controlled or laboratory settings. Although nowadays there exist some collaborative tools, such as CodePilot, Google Colaboratory and Git, they are not specifically pair-programming-oriented. This impedes a pairing's ability to discuss effective strategies in problem solving, to form productive or mutually learning pairs, and to predict pair compatibility. To encourage students in out-class practice of pair-programming, we present a demonstration of a novel web-based software development environment, called CodeBuddy, for remote pair-programming. CodeBuddy provides instructors and students with several features for managing laboratory classes and practicing pair-programming. Examples of CodeBuddy's features include: coding screen mirroring between a pair, output terminal to show compiled results, face-to-face like communication channels (i.e., video calling and instant text messaging), automatic and manual role switching, code quality analysis for monitoring coding students' progress and recommending a pair with targeted pairing goals, implicit code reviews using face detection for tracking a reviewer's engagement, line-by-line code commenting, etc. The demonstration consists of a walkthrough of two use-case scenarios: an instructor assigns a problem-solving task and two students remotely work together in a pair using CodeBuddy on two different workstations to solve it.	CodeBuddy (Collaborative Software Development Environment): In- and Out-Class Practice for Remote Pair-Programming with Monitoring Coding Students' Progress	NA:NA	2018
Jessica Schmidt:Stephen Hughes	NA	Session details: ACM SRC: ACM Student Research Competition	NA:NA	2018
Kevin Lin:David DeLiema	Educational researchers have increasingly drawn attention to how students develop computational thinking (CT) skills, including in science, math, and literacy contexts. A key component of CT is the process of abstraction, a particularly challenging concept for novice programmers, but one vital to problem solving. We propose a framework based on situated cognition that can be used to document how instructors and students communicate about abstractions during the problem solving process. We develop this framework in a multimodal interaction analysis of a 32-minute long excerpt of a middle school student working in the PixelBots JavaScript programming environment at a two-week summer programming workshop taught by undergraduate CS majors. Through a microgenetic analysis of the process of teaching and learning about abstraction in this excerpt, we document the extemporaneous prioritization of subgoals and the back-and-forth coordination of problem solving phases. In our case study, we identify that (a) problem solving phases are nested with several instances of context-switching within a single phase; (b) the introduction of new ideas and information creates bridges or opportunities to move between different problem solving phases; (c) planning to solve a problem is a non-linear process; and (d) pedagogical moves such as modeling and prompting highlight situated resources and advance problem solving. Future research should address how to help students structure subgoals and reflect on connections between problem solving phases, and how to help instructors reflect on their routes to supporting students in the problem solving process.	Subgoals, Problem Solving Phases, and Sources of Knowledge	NA:NA	2018
Vinitha Subburaj:Jacob McInite:Jordan Fite:Petterson Pham	Online contests often have a wide skill range between each participant, making it feel overwhelming for high school students to compete in. On sites like HackerRank or TopCoder, students could be competing against professionals with years of work. The project narrows down the skill gap to a young audience so that they can compete against one another without having to compete with these professionals. In addition, this project provides the participants with the necessary environment and tools to run their programs without the hassle of having to installing necessary tools and its required files to run these programs. During the contest, participants can access a scoreboard, giving them a view of their progress against other participants. The purpose of the scoreboard is to show each participant their progress, as well as motivating them to achieve higher scores. The contest tool then grades based on time before correctness to provide fairness towards most students as the goal to solve problems early rather than optimize their program. With this, the focus is to improve their problem solving skills, pique curiosity, or serve as an impetus, to become a computer science engineering student.	Young Aspirants Developer Contest	NA:NA:NA:NA	2018
Ka Ki Fung:Thitaree Tanprasert	Previous research has documented correlations between spatial reasoning ability and success in STEM fields [7-9]. While connection between spatial reasoning and other STEM fields like physics and calculus may seem obvious, there are no theories to explain this correlation of CS (computer science) performance and spatial reasoning. [5,7,8]. We aim to better understand this correlation, specifically between CS performance in an introductory course and spatial reasoning by observing the common characteristics between students' strategies in solving CS and spatial reasoning problems. We conducted interviews with eight students who have prior experience in CS but have taken only two introductory CS courses. In the interview, we asked the participants to solve a total of four problems; two CS problems and two spatial reasoning problems. [1,6]. The CS problems were code-reading problems in Python, which focus on basic programming concepts, including nested loops and functions. We analyzed the participants' problem-solving strategies and recorded their explanation for each problem. We observed for both types of problem, participants appeared to first observe the problem for its fundamental structures then decomposes the problem into smaller sub-problems. We conjecture that problem decomposition may be a required skill to solve both CS and spatial reasoning problems, and thus, could be a possible factor that contributes to the correlation between the two fields. Further study into utilization of problem decomposition in CS and spatial reasoning may provide more insights into the correlation between success in CS and spatial reasoning ability.	Problem Decomposition in Introductory Computer Science and Spatial Reasoning	NA:NA	2018
Sarah Almeda	Communities that use visual languages like American Sign Language (ASL) to communicate are underrepresented in the domain of translation and language learning tools. Translating between a visual, gestural language like ASL and a spoken, written language like English presents multiple unique challenges. The visual elements of hand shape, location, orientation, and motion used in ASL can be challenging to detect, interpret, and represent. We present an algorithm to recognize the 24 static signs in the ASL fingerspelling alphabet using the Leap Motion Controller. This algorithm can be used in ASL teaching applications, as well as to translate finger-spelled words. Existing Sign Language Recognition systems use cameras to extract low resolution images of hands where positions of individual fingers are difficult to detect. Our program utilizes the Leap Motion device, a motion sensor that provides skeletal hand tracking functionality. Based on joint coordinate and orientation information provided by the device, we extract a number of features including finger configuration (extended, bent, or curled), distance between fingers, and palm orientation. We then use a decision tree to classify signs as individual letters. This method does not require large amounts of training data like other machine learning based approaches. Preliminary results indicate that our method is successful in recognizing most of the static signs in the ASL fingerspelling alphabet.	Accessible American Sign Language Recognition with the Leap Motion Controller	NA	2018
Elizabeth Koning:Joel C. Adams:Christiaan D. Hazlett	Classic synchronization problems are often used to introduce students to the subtleties of concurrency and synchronization mechanisms, such as semaphores, monitors, locks, and condition variables. The Dining Philosophers, Producers-Consumers, and Readers-Writers are all classic problems in which a correct solution requires the actions of multiple processes or threads to be synchronized. In this work, we present visualizations for these three problems and demonstrate their use in helping students build accurate mental models of concurrency abstractions. We also present the results of an experiment that indicate students find using these visualizations to be significantly more engaging than reading a textbook, with no significant difference in learning.	Visualizing Classic Synchronization Problems	NA:NA:NA	2018
Jackie Chan:Kirby Mitchell	Research around computer networks has been rapidly expanding as the Internet becomes more prevalent in day-to-day life. Despite this rapid expansion in academic interest, computer networks, especially home networks, remain a challenge for inexperienced users to configure and maintain. To remedy this, new data needs to be collected to understand this new audience as computer networks move from academic/institutional to residential settings. This study examines the terminology that homeowners prefer when discussing bandwidth and connectivity issues on their home networks. We generated a list of common terms from web forums and user interviews and had participants classify these terms using an open card sort to determine their effectiveness. Our initial results indicate that participants were more likely to misclassify bandwidth-related and technical terms. This study demonstrates the importance of designing home networks to better meet the needs and diverse expertise levels of users.	Understanding the Usage and Familiarity of Home Network Terminology Using Open Card Sorting Analysis	NA:NA	2018
Shannon Collier:Mara Downing	Conditional logic and control structures are typically considered an important part of introductory computer science education, yet novices often struggle to correctly write and navigate such program logic. Previous research has largely attended to student difficulties with parsing Boolean expressions, but has not had much focus on the control structures themselves. To investigate how students work through complicated logic, we conducted a qualitative analysis of four one-on-one interviews with undergraduate students in which we gave students a piece of code with a complicated conditional control structure and asked them to write test cases for all paths. We found that several students struggled to determine the output the function would provide for a given input, and we hypothesize this occurred because they incorrectly treated an if statement as an else-if statement. One student simply wrote an incorrect output, which we believe occurred because they made this particular mistake, while another student got partway through the problem before verbally seeming to correct themself and re-identify a statement as an else-if. Based on our results, we hypothesize that novices may sometimes misidentify a sequential if statement as an else-if, which may lead them to incorrectly interpret a conditional control structure.	A Qualitative Analysis of Students' Understanding of Conditional Control Structures	NA:NA	2018
Ovidiu-Gabriel Baciu-Ureche:Carlie Sleeman:Karlee Scott:William Moody:Suzanne J. Matthews	Cyber security and on-line safety practices are not commonly taught in schools. However, there is an increasing need for education in these topics as children are joining the Internet community at a much earlier age than previous generations. It is crucial that young people understand the risks they may face on-line and how to mitigate them, ideally as soon as they begin using the Internet unsupervised. The Adventures of ScriptKitty (AOSK) introduces students to basic cyber security concepts using the Raspberry Pi, a single board computer that retails for $35.00. We created AOSK to help facilitate a culture of good cyber security practices and raise interest in STEM. The material is presented in the form of comics paired with instructional sections, including sections of more detailed technical information for readers who wish to learn more about key concepts. We piloted a portion of AOSK to a group of local middle school students. Our time with the students was limited, so we administered a short quiz, then discussed the Raspberry Pi. Next, students completed the packet sniffing exercise from Chapter 2, with the authors available to answer questions and help troubleshoot. Students were asked to re-take the quiz afterward. Our preliminary results show that students achieved a greater understanding of the material, with improved scores of 14%. A custom Pi image preloaded with Kali Linux and all needed software is included with the material. All the materials are published and available for free through GitBook at: https://suzannejmatthews.gitbooks.io/aosk/content	The Adventures of ScriptKitty: Teaching Middle School Students Cyber Awareness with Comics on the Raspberry Pi	NA:NA:NA:NA:NA	2018
Darren Jefferson:Tina Boyle Whyte	The number of students enrolling into CS(Computer Science) is currently recovering from a period of declining numbers. Although the number of students enrolling in CS isn't declining anymore, there is still a lot of ground to be covered as far as student enrollment in CS goes. This is because the number of computer science jobs, on the other hand, is and has been steadily rising. The disconnect between students enrolling in CS and the increase of Jobs for CS leaves a deficiency for in the CS work field for qualified workers. We wish to look for ways to increase K-12 student interest in CS related fields in an attempt to increase the number of students pursuing CS. This first starts with the teachers teaching the class. To address these issues, we investigated the implementation of teachers who had been through Computer Science professional developments in the K12 school environment. Using the data, gathered from a qualitative study approach, we present results found from interviews conducted on K12 teachers from all across Wisconsin to demonstrate the impact of professional development on teacher's ability to teach.	A Qualitative Study of Wisconsin Computer Science in K-12	NA:NA	2018
Adam Koehler	Research has shown that self-efficacy, a student's confidence in his or her ability, contributes to student success. Here, we examine if teaching students to recognize common programming errors increases student self-efficacy in an introductory programming course. We provided students with exercises containing examples of typical novice programming errors and methods for fixing them. At the beginning of the course we assess self-efficacy and administer a test to measure programming competence. We repeat these measurements at the end of the course. To assess self-efficacy, students rate their confidence in completing various programming tasks on a scale of 0 to 100. The test has fourteen questions; thirteen are short answer and one is multiple choice. Short answer questions require the student to write at most a few lines of C++ code, with most requiring only a single line. We analyze student self-efficacy in relation to our pre- and post-test, student course grade, assignment grade, and final exam grade. Our analysis shows improvements between the experimental term compared to the control terms across eleven measures of self-efficacy, but only three of these improvements are significant (p < 0.05).	Improving Student Self-efficacy in CS 1 Using Examples of Erroneous Code	NA	2018
Jared O'Leary	This study examined 245,098 discussion forum posts within a website dedicated to chiptunes, which are electronic music compositions or performances either emulating the sounds of or created through early computer and video game sound chips. Corpus-assisted discourse analysis tools and techniques assisted with revealing patterns of discourse across 10,892,645 words written between December 30th, 2009 and November 13th, 2017 within chipmusic.org. Findings indicate seven interconnected themes of chiptune-related practices that demonstrate potential transdisciplinary connections between computer science education and music education: (a) music composition practices, (b) music performance practices, (c) maker practices, (d) coding practices, (e) entrepreneurial practices, (f), visual art practices, and (g) community practices. Members of chipmusic.org engaged in computer science practices such as designing, manufacturing, and modifying electronic hardware for performing and recording chiptunes, as well as coding practices such as creating or modifying software for chiptune-related purposes. Such practices were guided by an interest in making music through old computer and video game hardware, and demonstrate several potential connections between computer science education and music education. For example, members engaged in computer science practices such as hardware and software modification to enable the ability to compose and perform music through the Nintendo Game Boy. Findings from this study not only demonstrate potential connections between computer science education and music education, they also raise questions about spaces and curricula with blurred disciplinary boundaries. For example, where might chiptune-related practices that blur concepts and practices from a multitude of disciplines and standards occur within a formalized education environment?	A Corpus-assisted Discourse Analysis of Chiptune-related Practices Discussed within Chipmusic.org	NA	2018
Valdemar Švábenský	Capture the Flag games are software applications designed to exercise cybersecurity concepts, practice using security tools, and understand cyber attacks and defense. We develop and employ these games at our university for training purposes, unlike in the traditional competitive setting. During the gameplay, it is possible to collect data about players' in-game actions, such as typed commands or solution attempts, including the timing of these actions. Although such data was previously employed in computer security research, to the best of our knowledge, there were few attempts to use this data primarily to improve education. In particular, we see an open and challenging research problem in creating an artificial intelligence assistant that would facilitate the learning of each player. Our goal is to propose, apply, and experimentally evaluate data analysis and machine learning techniques to derive information about the players' interactions from the in-game data. We want to use this information to automatically provide each player with a personalized formative assessment. Such assessment will help the players identify their mastered concepts and areas for improvement, along with suggestions and actionable steps to take. Furthermore, we want to identify high- or low-performing players during the game, and subsequently, offer them game tasks more suitable to their skill level. These interventions would supplement or even replace feedback from instructors, which would significantly increase the learning impact of the games, enable more students to learn cybersecurity skills at an individual pace, and lower the costs.	Analyzing User Interactions with Cybersecurity Games	NA	2018
Noha Elsherbiny	Course alignment refers to the degree to which curriculum, assessments and instruction methods are in agreement with each other. Course alignment can be used by instructors to evaluate the effectiveness of their instructional content and assessments and whether they are meeting their learning objectives. Applying alignment models is time consuming and laborious, making them difficult for a course instructor to use. Current alignment models require a panel of experts to review documents and make judgments about the degree of alignment of the course objectives and assessments. With that in mind, we devised a practical strategy to be used by a course instructor, as part of course design, to assess the alignment between the course content, learning objectives and assessment methods. We developed a process for evaluating the degree of alignment of a course based on attributes from Webb's alignment model and we developed data structures based on Porter's matrix to facilitate the assessment of the alignment. The devised strategy will be applied to various CS courses by instructors and the results of the process will be used to refine the alignment strategy. An alignment process that can be applied timely and simple to follow may encourage instructors to apply it to their course, becoming a common practice for any instructor when modifying their course.	Applying Alignment to Improve the Effectiveness of CS Education	NA	2018
Zhiyi Li	Automatic grading systems such as Web-CAT are widely used when students learn programming, especially in CS1/CS2 courses in colleges and universities. Current feedback mechanism in these systems benefits students with performance-based information. They have negative effects to often frustrate students especially novice programmers to belief of fixed mindset - their programming abilities are native and limited. Students with fixed mindset can seriously influence female and minority enrollment and retention rate in CS major. It is important to move students to growth mindset instead - belief their programming skills can be improved by practice and hard work. Recently effort were made to improve feedback mechanism in automatic grading systems. One effort was the design and implementation of a group of indicators to reflect students' progress and effort, based on their programming submissions. Another effort was the design of virutalTA Maria to deliver positive comments to encourage and reinforce students. We demonstrate the design of boosters (rewards) component and positive encourage and reinforcement comments feedback by virtualTA, based on indicators information. We simulated boosters (rewards) and comments component with a historical programming dataset to validate boosters (rewards) strategy. Simulated results found only 32 percent students did not get any Booster (rewards). 68 percent students won four types of booster range from Tier 1 to Tier 4. This result is what we are as expected. We also designed positive encouraging and reinforcement comments feedback from VirtualTA in adaptive style, based on indicator information. We plan to apply these two designed components to classroom for evaluation.	Reinforcement Learning: Improve Feedback Mechanism with Indicator based Reward, VirtualTA towards Growth Mindset	NA	2018
Olivia Nche	This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715	Engaging African American Elementary School Children in Code Understanding	NA	2018
Scott Kolodziej	Source code documentation is an important part of teaching students how to be effective programmers. But what evidence do we have to support what good documentation looks like? This study utilizes a randomized controlled trial to experimentally compare several different types of documentation, including traditional comments, self-documenting naming, and an automatic documentation generator. The results of this experiment show that the relationship between documentation and source code understanding is more complex than simply "more is better," and poorly documented code may even lead to a more correct understanding of the source code.	Empirical Assessment of Software Documentation Strategies: A Randomized Controlled Trial	NA	2018
Sreecharan Sankaranarayanan	This work presents a new paradigm for collaborative project-based computer science education called Online Mob Programming (OMP). OMP is adapted from the industrial practice of Mob Programming, where groups of developers work on the same problem, at the same time, in the same place. OMP was designed and implemented as a technique where a group of 4-6 students collaborate online through a structured process for solving programming tasks. In OMP, students rotate through clearly defined roles to collectively contribute towards a solution to a programming challenge. These roles require students to brainstorm potential solutions, decide on a path forward, and implement the correct course of action respectively. OMP was investigated in the context of a 6-week free online course on Cloud Computing. During the course, students participated in four intelligent conversational agent-coordinated OMP sessions. By instrumenting the online development environment, all student code revisions and chat logs were collected in addition to qualitative data from questionnaires. Analyses show evidence of success in terms of students following the structure of OMP and further investigations into differences in mob behavior based on the size, and problem outcome provide pedagogically valuable insights and a path toward building OMP into the computer science education curriculum.	Online Mob Programming: Effective Collaborative Project-Based Learning	NA	2018
Amanpreet Kapoor	Internships play a crucial role in helping CS undergraduate students to commit to CS degrees and computing careers. Internships also promote students' personal and professional growth. Studies have also shown that pursuing an internship is positively correlated with an improved chance of getting a full-time job offer and a higher starting salary. However, previous research has shown that only 52.1% of undergraduate students pursue an internship before they graduate. In this poster, we present findings from a cross-sectional study focused on understanding the characteristics of CS undergraduate students who have interned at one or more companies and those who have not interned. We surveyed 97 and interviewed 14 CS undergraduates. We found that 41.2% of 97 students participated in one or more internships. The key characteristics that distinguish students who successfully interned and those who did not were: 1) 95% students who interned had career goals - either to join industry or pursue graduate school after they graduate. In contrast, 21% of the students who did not intern were unsure or confused about their career goals; 2) students who interned were more likely to have participated in an undergraduate research experience or a student organization; 3) students who interned intentionally prepared for interviews, while those who did not intern were not actively preparing, not confident enough to apply, or were unsuccessful in the interview process because of lack of preparation. This poster provides insight into CS students' competitiveness for securing internships and for developing programs to support professional development.	Deconstructing Successful and Unsuccessful Computer Science Undergraduate Interns	NA	2018
Christopher Berns:Grace Chin:Joel Savitz:Jason Kiesling:Fred Martin	MYR is a browser-based, educational platform built to spark student interest in computer science by allowing users to write code that generates three-dimensional, animated scenes in virtual reality. The interface consists of two primary components: (1) an integrated editor, which leverages the MYR API and the A-Frame entity-component-system, and (2) a real-time renderer that displays the corresponding scene. The scenes, which vary in complexity, are viewable using virtual reality headsets, smartphones, and any device that supports a web browser. By providing access to the specific domain of virtual reality to students, the system aims to make computer science concepts tangible for novice programmers. The MYR development team conducted pilot tests with middle school students in order to collect feedback from this audience. The larger goal of the project is to develop MYR as a research tool to gain insight into computing students' success, motivation, and confidence in learning computing.	MYR: A Web-Based Platform for Teaching Coding Using VR	NA:NA:NA:NA:NA	2018
Paul Denny	NA	Session details: Paper Session: Practice & Problems	NA	2018
Antti Leinonen:Henrik Nygren:Nea Pirttinen:Arto Hellas:Juho Leinonen	When learning programming, students learn the syntax of a programming language, the semantics underlying the syntax, and practice applying the language in solving programming problems. Research has suggested that simply the syntax may be hard to learn. In this article, we study difficulty of learning the syntax of a programming language. We have constructed a tool that provides students code that they write character-by-character. When writing, the tool automatically highlights each character in code that is incorrectly typed, and through the highlight-based feedback directs students into writing correct syntax. We conducted a randomized controlled trial in an introductory programming course organized in Java. One half of the population had the tool in the course material immediately before programming exercises where the practiced syntax was used, while the other half of the course population did not have the tool, thus approaching the exercises in a traditional way. Our results imply that isolated syntax writing practice may not be a meaningful addition to the arsenal used for teaching programming, at least when the programming course utilizes a large set of small programming exercises. We encourage researchers to replicate our work in contexts where syntax seems to be an issue.	Exploring the Applicability of Simple Syntax Writing Practice for Learning Programming	NA:NA:NA:NA:NA	2018
Anderson Thomas:Troy Stopera:Pablo Frank-Bolton:Rahul Simha	Recent work [Erikson et al 2017 and Zavala et al 2018] has shown that mental program-execution exercises, in the form of Parson's puzzles or program-tracing, are effective in improving student performance in intro CS courses. This form of practice is promising because its low cost of creation and short duration (for the student) can promote the significant practice needed for learning. The goal of this paper is to enable wider use of such exercises through large-scale automated generation of short, multiple-choice mental execution questions. The challenge in automation is to algorithmically generate effective distractors (plausible, but incorrect choices), and to generate questions of varying levels of difficulty and whose difficulty level can be set by the instructor. In this paper, we propose a language-generalizable approach for automatically generating a practically unlimited number of such exercises, each constructed to a designated level of difficulty and incorporating the core programming-in-the-small themes: assignment, conditionals, loops, and arrays. The stochastic tree-based generation algorithm and a subsequent simulation of execution also enable generating effective distractors since all possible execution paths are readily available in the tree at the time of generation, and the distractors, therefore, correspond to reasonable (but ultimately incorrect) paths of execution. Furthermore, the approach is easily transferable to other languages with little effort. The generated questions are delivered through a mobile app that can be customized by the instructor to vary the questions generated and to introduce interleaving to take advantage of the spacing effect. Preliminary student feedback on the experience has been positive.	Stochastic Tree-Based Generation of Program-Tracing Practice Questions	NA:NA:NA:NA	2018
Rui Zhi:Thomas W. Price:Samiha Marwan:Alexandra Milliken:Tiffany Barnes:Min Chi	Research in a variety of domains has shown that viewing worked examples (WEs) can be a more efficient way to learn than solving equivalent problems. We designed a Peer Code Helper system to display WEs, along with scaffolded self-explanation prompts, in a block-based, novice programming environment called \snap. We evaluated our system during a high school summer camp with 22 students. Participants completed three programming problems with access to WEs on either the first or second problem. We found that WEs did not significantly impact students' learning, but may have impacted students' intrinsic cognitive load, suggesting that our WEs with scaffolded prompts may be an inherently different learning task. Our results show that WEs saved students time on initial tasks compared to writing code, but some of the time saved was lost in subsequent programming tasks. Overall, students with WEs completed more tasks within a fixed time period, but not significantly more. WEs may improve students' learning efficiency when programming, but these effects are nuanced and merit further study.	Exploring the Impact of Worked Examples in a Novice Programming Environment	NA:NA:NA:NA:NA:NA	2018
Razvan Alexandru Mezei	NA	Session details: Paper Session: Process & Performance	NA	2018
Ben Stephenson	This experience report describes a faculty member's effort to create educational videos that support students' learning in a programming intensive CS1 class, along with an evaluation of their use by students. The videos that were created were supplementary in nature, providing students with an optional opportunity to go back and re-watch live coding demonstrations performed in class. The production process used to create the videos is described, along with several lessons learned during this undertaking. Student usage data is reported, along with survey results collected from 164 students. Survey results show that a strong majority of students who watched the videos believed that the videos helped them learn the material in the course. Several risks that should be considered before creating custom programming video content for a course are also discussed.	Coding Demonstration Videos for CS1	NA	2018
Soohyun Nam Liao:Daniel Zingaro:Christine Alvarado:William G. Griswold:Leo Porter	A number of recent studies in computer science education have explored the value of various data sources for early prediction of students' overall course performance. These data sources include responses to clicker questions, prerequisite knowledge, instrumented student IDEs, quizzes, and assignments. However, these data sources are often examined in isolation or in a single course. Which data sources are most valuable, and does course context matter? To answer these questions, this study collected student grades on prerequisite courses, Peer Instruction clicker responses, online quizzes, and assignments, from five courses (over 1000 students) across the CS curriculum at two institutions. A trend emerges suggesting that for upper-division courses, prerequisite grades are most predictive; for introductory programming courses, where no prerequisite grades were available, clicker responses were the most predictive. In concert, prerequisites and clicker responses generally provide highly accurate predictions early in the term, with assignments and online quizzes sometimes providing incremental improvements. Implications of these results for both researchers and practitioners are discussed.	Exploring the Value of Different Data Sources for Predicting Student Performance in Multiple CS Courses	NA:NA:NA:NA:NA	2018
Lisa Yan:Nick McKeown:Chris Piech	In the ideal CS1 classroom, we should understand programming process---how student code evolves over time. However, for graphics-based programming assignments, the task of understanding and grading final solutions, let alone thousands of intermediate steps, is incredibly labor-intensive. In this work, we present a challenge, a dataset, and a promising first solution to autonomously use image output to identify functional, intermediate stages of a student solution. By using computer vision techniques to associate visual output of intermediate student code with functional progress, we supplement a lot of the teacher labor associated with understanding graphics-based, open-ended assignments. We hope our publication of the dataset used in our case study sparks discussion in the community on how to analyze programs with visual program output.	The PyramidSnapshot Challenge: Understanding Student Process from Visual Output of Programs	NA:NA:NA	2018
Karen Jin	NA	Session details: Paper Session: Autograders	NA	2018
Margaret Ellis:Clifford A. Shaffer:Stephen H. Edwards	We share approaches for coordinating the use of many online educational tools within a CS2 course, including an eTextbook, automated grading system, programming practice website, diagramming tool, and debugger. These work with other commonly used tools such as a response system, forum, version control system, and our learning management system. We describe a number of approaches to deal with the potential negative effects of adopting so many tools. To improve student success we scaffold tool use by staging the addition of tools and by introducing individual tools in phases, we test tool assignments before student use, and we adapt tool use based on student feedback and performance. We streamline course management by consulting mentors who have used the tools before, starting small with room to grow, and choosing tools that simplify student account and grade management across multiple tools.	Approaches for Coordinating eTextbooks, Online Programming Practice, Automated Grading, and More into One Course	NA:NA:NA	2018
Evan Maicus:Matthew Peveler:Stacy Patterson:Barbara Cutler	We present a container-based system to automatically run and evaluate networked applications that implement distributed algorithms. Our implementation of this design leverages lightweight, networked Docker containers to provide students with fast, accurate, and helpful feedback about the correctness of their submitted code. We provide a simple, easy-to-use interface for instructors to specify networks, deploy and run instances of student and instructor code, and to log and collect statistics concerning node connection types and message content. Instructors further have the ability to control network features such as message delay, drop, and reorder. Running student programs can be interfaced with via stream-controlled standard input or through additional containers running custom instructor software. Student program behavior can be automatically evaluated by analyzing console or file output and instructor-specified rules regarding network communications. Program behavior, including logs of all messages passed within the system, can optionally be displayed to the student to aid in development and debugging. We evaluate the utility of this design and implementation for managing the submission and robust and secure testing of programming projects in a large enrollment theory of distributed systems course. This research has been implemented as an extension to Submitty, an open source, language-agnostic course management platform with automated testing and automated grading of student programming assignments. Submitty supports all levels of courses, from introductory to advanced special topics, and includes features for manual grading by TAs, version control, team submission, discussion forums, and plagiarism detection.	Autograding Distributed Algorithms in Networked Containers	NA:NA:NA:NA	2018
Matthew Peveler:Evan Maicus:Barbara Cutler	With the continued growth of enrollment within computer science courses, it has become an increasing necessity to utilize autograding systems. These systems have historically graded assignments through either a jailed sandbox environment or within a virtual machine (VM). For a VM, each submission is given its own instantiation of a guest operating system and virtual hardware that runs atop the host system, preventing anything that runs within the VM communicating with any other VM or the host. However, using these VMs are costly in terms of system resources, making it less than ideal for running student submissions given reasonable, limited resources. Jailed sandboxes, on the other hand, run on the host itself, thus taking up minimal resources, and utilize a security model that restricts the process to specified directories on the system. However, due to running on the host machine, the approach suffers as new courses utilize autograding and bring their own set of potentially conflicting requirements for programming languages and system packages. Over the past several years, \em containers have seen growing popularity in usage within the software engineering industry as well as within autograding systems. Containers provide similar benefits of isolation as a VM while maintaining similar resource cost to running within a jailed sandbox environment. We present the implementation of both a jailed sandbox and container-based autograder, compare the running time and memory usage of the two implementations, and discuss the overall resource usage.	Comparing Jailed Sandboxes vs Containers Within an Autograding System	NA:NA:NA	2018
Michelle Friend	NA	Session details: Paper Session: Capstones & Projects	NA	2018
Steven Swanson	We describe our experience teaching an intensive capstone course in which pairs of students build the hardware and software for a remote-controller quad-rotor aircraft (i.e., a quadcopter or "drone'') from scratch in one 10-week quarter. The course covers printed circuit board (PCB) design and assembly, basic control theory and sensor fusion, and embedded systems programming. To reduce the workload on course staff and provide higher-quality feedback on student designs, we have implemented an automated PCB design checking tool/autograder. We describe the course content in detail, identify the challenges it presents to students and course staff, and propose changes to further increase student success and improve the scalability of the course.	Trial by Flyer: Building Quadcopters From Scratch in a Ten-Week Capstone Course	NA	2018
Yekaterina Kharitonova:Yi Luo:Jeho Park	Students need a wide variety of skills before they can successfully engage in real-world projects with paying customers. Some of these skills, such as the "soft skills" of communicating with a non-technical customer and working in a larger team to collaboratively develop a project, are generally not present in Computer Science courses. In this paper, we discuss our experience teaching these skills and explain the structure of our redesigned Software Development course and how it aligns with the Capstone experience. The main novelty of our approach is the specific implementation of the rotating project manager role and the introduction of the final portfolio reflection. We believe that the concepts we introduced during our redesign can be useful to any educator wanting to include collaborative project-based work in their courses. To enable faculty to apply and enhance these concepts, the resources that we used in this course, which include activities, templates, guidelines, rubrics, and questionnaires, are available as an open source project at https://team-repo.github.io/.	Redesigning a Software Development Course as a Preparation for a Capstone: An Experience Report	NA:NA:NA	2018
Stefan C. Christov:Mark E. Hoffman	The skills to effectively manage software development teams and to productively interact with a project manager are important in the computing professions. Teaching these skills in a traditional academic setting, however, is challenging. To support the experiential learning of these skills, we established a collaboration between two computing courses, a sophomore-level one and a senior-level one, where the seniors serve as managers of teams of sophomores on a semester-long project. This paper describes the collaboration and evaluates it in terms of student learning and experience based on three iterations of that collaboration. The associated course materials and evaluation instruments are made publicly available.	Experiential Learning of Software Project Management and Software Development via Course Collaboration	NA:NA	2018
Heather Bort:David P. Bunde:Zack Butler:Christopher Lynnly Hovey:Cynthia Taylor	Many great teaching techniques are presented every year at SIGCSE and other CS education conferences. Unfortunately, most of them achieve very limited adoption, with few instructors incorporating these ideas into their classrooms. There is significant literature on how to encourage instructors to adopt educational innovations in other STEM fields, but the CS education community has made only limited strides in this area. This session will feature an interactive discussion of some of the barriers that prevent the adoption of good ideas, what solutions are available, and a brief presentation of the results of an ITiCSE working group on this topic. Attendees will leave the session better equipped to promote the adoption of educational innovations, either their own or ones that they have decided to champion.	Propagating Educational Innovations	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:David DeLiema:Deborah A. Fields:Gary Lewandowski:Colleen Lewis	Computational thinking has become the calling card for re-introducing coding into schools. While much attention has focused on how students engage in designing systems, applications, and other computational artifacts as a measure of success for computational thinking, far fewer efforts have focused on what goes into remediating problems in designing systems and interactions because learners invariably make mistakes that need fixing-or debugging. In this panel, we examine the often overlooked practice of debugging that presents significant learning challenges (and opportunities) to students in completing assignments and instructional challenges to teachers in helping students to succeed in their classrooms. The panel participants will review what we know and don't know about debugging, discuss ways to conceptualize and study debugging, and present instructional approaches for helping teachers and students to engage productively in debugging situations.	Rethinking Debugging as Productive Failure for CS Education	NA:NA:NA:NA:NA	2018
Helen H. Hu:Chris Mayfield:Clifton Kussmaul	NA	Special Session: Process Skills in Computer Science	NA:NA:NA	2018
Rajendra K. Raj:Vijay Anand:David Gibson:Siddharth Kaza:Andrew Phillips	The Curricular Guidelines for Post-Secondary Degree Programs in Cybersecurity (CSEC 2017) released by the Joint Task Force of the ACM, IEEE Computer Society, AIS and IFIP have begun to define the academic field of cybersecurity. Increasing numbers of institutions are now offering full-fledged undergraduate cybersecurity degree programs. However, as the CSEC 2017 guidelines do not define what constitutes a standalone undergraduate cybersecurity degree, the computing community needs to agree on parameters of what such a degree ought to be. To this end, ABET has created flexible accreditation criteria for cybersecurity programs guided extensively by CSEC 2017 and community input. These criteria were used to conduct pilot accreditation visits of four distinct cybersecurity programs in 2017-18. This panel discusses benefits, challenges, and costs of cybersecurity program accreditation. The panelists, who represent the first four ABET-accredited cybersecurity programs, will discuss major curricular features of their programs, their motivation for participating in the pilot accreditation, the effort in preparing for accreditation, and the benefits anticipated both for their programs and the larger computing community due to program accreditation	Cybersecurity Program Accreditation: Benefits and Challenges	NA:NA:NA:NA:NA	2018
Austin Cory Bart:Clifford A. Shaffer	The SIGCSE-Members listserv has been archiving posts by the Computer Science Education community for the past 22 years. This paper characterizes the post collection, in order to better understand the nature of the community from a quantitative perspective. We apply a number of email mining techniques, including a topical analysis through N-grams. Threads, posters, and posts are characterized in terms of duration and temporally. We also demonstrate how emails from the listserv can be successfully classified using machine learning algorithms, and report on an unsuccessful attempt to predict thread popularity. All of the scripts we used to collect, process, and analyze the data are freely available in the hopes that other researchers will replicate, refine, and extend our results.	What Have We Talked About?	NA:NA	2018
Melinda McDaniel:John Cigas:Briana B. Morrison:Henry Walker	How has CS education changed since SIGCSE first began in 1968? This panel of presenters, with 135 years of teaching instruction between them, will remind some attendees of what used to be and educate newer members on what life was like pre-internet. Topics to be discussed include changes in content, presentation medium, equipment and environment, students and audience, and pedagogy. Audience members will be engaged through peer instruction questions during and between topic discussions and may use their cell phones or laptops to respond to questions. This panel will allow our community to acknowledge the diversity and experience in our organization and celebrate our heritage. We believe old-timers who wish to reminisce and young, new instructors who are interested in a historical aspect will be interested in the session.	CS Education Then and Now: Recollections and Reflections	NA:NA:NA:NA	2018
Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: First Timer's Lunch Keynote & 2019 SIGCSE Award for Lifetime Service to the Computer Science Education Community	NA:NA	2018
Gloria Childress Townsend	SIGCSE addresses gender issues in computing year after year. At DePauw University, we learned from SIGCSE's lessons - and those taught by ACM's Council on Women in Computing - and recently awarded 47% of our computer science undergraduate degrees to women. This talk provides a rapid-fire countdown of ten of our most effective strategies that created our 47% class.	A Top-Ten List for 50-50	NA	2018
James H. Davenport	NA	Session details: Paper Session: Databases	NA	2018
Nada Basit:Abdeltawab Hendawi:Joseph Chen:Alexander Sun	We present a web application system where users can learn about and practice SQL injection attacks. Our system is designed for students in a university level database or computer security class, and is aimed towards students familiar with SQL but with little experience in web security. Our platform currently contains 12 levels, each of which demonstrates a SQL vulnerability that the user must exploit. For each level, we explain the goal of the challenge, and also provide detailed solutions. Our system provides advantages over other methods of teaching SQL injection because it is hands-on, the challenges provide a greater scope of vulnerability coverage, and is easily extensible, allowing instructors to add their own SQL injection problems for their students.	A Learning Platform for SQL Injection	NA:NA:NA:NA	2018
Cynthia Taylor:Saheel Sakharkar	In this position paper, we look at the representation of SQL injection within undergraduate database textbooks, and argue that both discussion of security issues and security of example code must be improved. SQL injection is a common database exploit which takes advantage of programs that incorrectly incorporate user input into SQL statements. Teaching students how to write parameterized SQL statements is key to preventing this wide-spread attack. We look at the current editions of seven textbooks used at the top 50 US CS programs, and analyze their coverage of SQL injection, use of parameterized queries, and correctness of examples. We find a wide variety in the amount of coverage given to the topic, from none at all to in-depth coverage of defenses. Additionally, we find cases of SQL injectable code given as examples of how to correctly write queries in two of seven textbooks.	');DROP TABLE textbooks;--: An Argument for SQL Injection Coverage in Database Textbooks	NA:NA	2018
Toni Taipalus:Piia Perälä	In the process of learning a new computer language, writing erroneous statements is part of the learning experience. However, some errors persist throughout the query writing process and are never corrected. Structured Query Language (SQL) consists of a number of different concepts such as expressions, joins, grouping and ordering, all of which by nature invite different possible errors in the query writing process. Furthermore, some of these errors are relatively easy for a student to fix when compared to others. Using a data set from three student cohorts with the total of 744 students, we set out to explore which types of errors are persistent, i.e., more likely to be left uncorrected by the students. Additionally, based on the results, we contemplate which types of errors different query concepts seem to invite. The results show that syntax and semantic errors are less likely to persist than logical errors and complications. We expect that the results will help us understand which kind of errors students struggle with, and e.g., help teachers generate or choose more appropriate data for students to use when learning SQL.	What to Expect and What to Focus on in SQL Query Teaching	NA:NA	2018
Suzanne J. Matthews	NA	Session details: Paper Session: Software Engineering	NA	2018
Jorge Melegati:Rafael Chanin:Xiaofeng Wang:Afonso Sales:Rafael Prikladnicki	The need of skills other than technical from software developers is becoming evident. The DevOps movement is an example of that applied to operational tasks. Startup development methodologies focus on business activities in innovative organizations. Several universities offer courses based on these methodologies to software engineering students, mainly to improve their creativity, problem solving, and business skills. This paper investigates how software engineering students learned startup development methodologies and discusses what are the challenges and benefits in their learning process. We conducted a multi-method study in three different universities. The data was collected in two phases and analyzed using thematic analysis. Our study reveals that students realized the importance of collaboration with other courses and the importance of user involvement in development. However, students tend to over-simplify concepts, trying to adapt them to what they are familiar with. The results indicate the necessity of business education for technical students and directions for improvements.	Perceived Benefits and Challenges of Learning Startup Methodologies for Software Engineering Students	NA:NA:NA:NA:NA	2018
Stacey Watson:Heather Richter Lipford	Educators are challenged to provide computer science students enough skills-based practice within the confines of a course. Yet it is also difficult to motivate students to spend additional time for further practice outside of course requirements. We are investigating games and gamification as methods for motivating students to engage in additional practice. In this paper, we report on the study of a fantasy-themed serious game to teach Ruby programming skills. We examine how well it motivated students to complete additional levels of the game than was assigned for course credit in an undergraduate Software Engineering course. Of the 185 student participants, 42.78% completed one or more optional game levels. These students spent more than twice as much time playing than their counterparts who only completed the mandatory game levels.	Motivating Students Beyond Course Requirements with a Serious Game	NA:NA	2018
Stan Kurkovsky:Stephanie Ludi:Linda Clark	Case studies are one of the best active learning approaches for teaching software engineering in general and requirements engineering in particular. They offer an effective approach to understanding a system or a phenomenon that are too large or too difficult to represent in a lab setting. As a tangible manipulative, LEGO works well to support designing hands-on case studies that mix studying software engineering concepts with the elements of team building and playful creativity. In our project, we study the role that LEGO has in engaging students in software engineering through a set of activities that leverage the case study and play aspects. This paper presents our design approach for requirements engineering activities, as well as current results from classroom testing with a focus on student engagement with the subject matter.	Active Learning with LEGO for Software Requirements	NA:NA:NA	2018
Ahmed Abukmail	NA	Session details: Paper Session: Advanced Topics	NA	2018
Nicholas Lytle:Mark Floryan:Tiffany Barnes	Program Visualizations (PVs) have been used as educational tools to allow students to visually inspect the runtime behavior of their code. However, many of these systems act as low-level visual debuggers not high-level abstractions of program behavior. Additionally, evaluations of these systems tend to focus more on student engagement or opinion in using the system and not on artifacts produced using the system. This paper discusses the effectiveness of a PV developed to aide students in an undergraduate Artificial Intelligence class on a pathfinding homework assignment. Students in 4 semesters of the course were tasked to develop pathfinding algorithms for an agent to navigate worlds in cases of both certain and uncertain world information. Students in 2 semesters of the course were given access to a PV that allowed them to see a visual representation of their agent navigating the world in either information condition. The final agents developed by these students were compared with those developed by students who never received the PV. Comparisons were made on the performance of these agents in both cases of uncertain and certain world information on several test worlds. Student written reports for the Experimental condition were also analyzed. The results showed significant differences in the performance of the algorithms developed in both certain and uncertain world information. Student reflections on using the PV within the written reports provide insight into how the PV informed the design and development of their submission.	Effects of a Pathfinding Program Visualization on Algorithm Development	NA:NA:NA	2018
Jean-François Lalande:Valérie Viet Triem Tong:Pierre Graux:Guillaume Hiet:Wojciech Mazurczyk:Habiba Chaoui:Pascal Berthomé	At present, computer science studies generally offer courses addressing mobile development and they use mobile technologies for illustrating theoretical concepts such as operating system, design patterns, and compilation because Android and iOS use a large variety of technologies for developing applications. Teaching courses on security is also becoming an important concern for academics, and the use of mobile platforms (such as Android) as supporting material is becoming a reasonable option. In this paper, we intend to bridge a gap in the literature by reversing this paradigm: Android is not only an opportunity to learn security concepts but requires strong pedagogical efforts for covering all the aspects of mobile security. Thus, we propose teaching Android mobile security through a two-dimensional approach. The first dimension addresses the cognitive process of the Bloom taxonomy, and the second dimension addresses the technical layers of the architecture of the Android operating system. We describe a set of comprehensive security laboratory courses covering various concepts, ranging from the application development perspective to a deep investigation of the Android Open Source Project and its interaction with the Linux kernel. We evaluated this approach, and our results verify that the designed security labs impart the required knowledge to the students.	Teaching Android Mobile Security	NA:NA:NA:NA:NA:NA:NA	2018
Amit Shesh	This paper reports an experience of offering an introductory computer graphics course in two languages, Java and C++, in the same section. This was done to target a more diverse audience of students coming from different majors and concentrations. Students chose between these languages and could switch at any time during the course. All materials related to lectures, code examples and assignments were provided in both languages. Technical support was provided for both languages throughout the course. In order to streamline this effort programming environments and supporting tools were chosen and standardized for both languages. Student experience was monitored throughout the semester using survey instruments. The experience involved significant planning, overhead and expected and unexpected issues throughout the semester. Although this experience deals with a computer graphics course, we believe other courses, especially higher-level electives, can be made multi-lingual to cater to students with different backgrounds.	Allowing and Fully Supporting Multiple Programming Languages in a Computer Graphics Course: An Experience	NA	2018
Barry Fagin	NA	Session details: Paper Session: Feedback	NA	2018
Alan de Oliveira Santana:Eduardo Aranha	Nowadays, researchers are looking for ways to adapt education to include technology and more engaging methods. For computer science courses, the use of problem-based learning, virtual tutors, learning style personalization and game programming are possible ways to achieve this goal. In this context, this work proposes and evaluates an approach to generate different kinds of virtual tutors (with various levels of interaction) for problem-based game programming classes. The system was evaluated in an experiment where two types of virtual tutors were proposed and generated considering two virtual game programming classes. Results showed that the use of virtual tutors promoted efficient learning and that the availability of different kinds of tutors can optimize individual engagement.	An Approach to Generate Virtual Tutors for Game Programming Classes	NA:NA	2018
Lisa Yan:Annie Hu:Chris Piech	In large undergraduate computer science classrooms, student learning on assignments is often gauged only by the work on their final solution, not by their programming process. As a consequence, teachers are unable to give detailed feedback on how students implement programming methodology, and novice students often lack a metacognitive understanding of how they learn. We introduce Pensieve as a drag-and-drop, open-source tool that organizes snapshots of student code as they progress through an assignment. The tool is designed to encourage sit-down conversations between student and teacher about the programming process. The easy visualization of code evolution over time facilitates the discussion of intermediate work and progress towards learning goals, both of which would otherwise be unapparent from a single final submission. This paper discusses the pedagogical foundations and technical details of Pensieve and describes results from a particular 207-student classroom deployment, suggesting that the tool has meaningful impacts on education for both the student and the teacher.	Pensieve: Feedback on Coding Process for Novices	NA:NA:NA	2018
Bob Edmison:Stephen H. Edwards	Automated grading systems provide feedback to students in a variety of ways, but usually focus on identifying incorrect program behaviors. Such systems provide notices of test case failures or runtime errors, but without debugging skills, students often become frustrated when they don't know where to start. They know their code has defects, but finding the problem may be beyond their experience, especially for beginners. An additional concern is balancing the need to provide enough direction to be useful, without giving the student so much direction that you effectively give them the answer. This paper presents our experience using heat maps to visually guide student attention to parts of their code that are most likely to contain problems. These visualizations are generated using existing tools that capture execution traces from instructor-written tests to identify which portions of the code are executed during tests that pass, and which portions are executed during tests that fail. Superimposing execution footprints allows statistical identification of locations in the student's code that are most likely to contain faults. This paper describes the results of using this feedback approach to help guide student attention with heat map visualizations over two semesters of CS1 involving over 700 students. Based on this experience, we analyze the utility of the heat maps, describe student perceptions of their helpfulness, and describe the unexpected challenges arising from students attempts to understand and apply this style of feedback. We conclude with concrete solutions proposed to improve how guiding feedback is presented to students.	Experiences Using Heat Maps to Help Students Find Their Bugs: Problems and Solutions	NA:NA	2018
Brian Railing	NA	Session details: Paper Session: Active Learning	NA	2018
Tyler Greer:Qiang Hao:Mengguo Jing:Bradley Barnes	This replication study aims at both quantifying the effects of active learning classrooms in introductory programming courses (CS1) and overcoming some design and methodological limits of prior studies on this topic. 156 students enrolled in three different sections of the same CS1 participated in this study. The three sections differed from each other either in terms of learning pedagogies (conventional lecture vs. peer instruction) or physical learning environments (lecture hall vs. active learning classroom). This study did not replicate the findings of prior studies on this topic. Instead, this study found that when learning pedagogies were controlled, learning environments did not have significant influences on student performance. On the other hand, learning pedagogies were found to have significant influences on student performance. When peer instruction is conducted other than conventional lecturing, students tended to have significantly better performance. Such findings highlight the importance of active learning in computing education, and the feasibility of conducting active learning in CS1 despite of physical environment constraints. Additionally, such findings emphasize the necessity of replication studies on the topic of active learning environments, and invite debates on the investment decisions in active learning classrooms.	On the Effects of Active Learning Environments in Computing Education	NA:NA:NA:NA	2018
Yeajin Ham:Brandon Myers	The computer organization course must help students acquire difficult conceptual knowledge and design skills, and improve their teamwork skills for subsequent project courses. Prior research supports that cooperative learning, in which students work together to achieve common goals, may address these challenges. We studied whether increasing the amount of guided inquiry activities and the cooperative support for it (teams and reflection) in an intermediate computer science course would improve achievement and engagement. The intervention group had lower scores on one of two achievement measures, lower engagement, and lower task value of collaborative activities. Qualitative analysis showed that students valued hands-on learning yet resisted guided inquiry, suggesting that sharing the purpose of each type of activity is important. Furthermore, the results showed that students valued learning with peers but were frustrated by group dysfunction, suggesting that instructors must address teamwork comprehensively to realize the benefits of cooperative learning.	Supporting Guided Inquiry with Cooperative Learning in Computer Organization	NA:NA	2018
Aman Yadav:Clif Kussmaul:Chris Mayfield:Helen H. Hu	Introductory computer science courses face multiple challenges, including a broad range of content, diverse teaching methods, and the need to help students develop skills such as problem solving, critical thinking, and teamwork. One evidence-based approach to address these challenges is Process Oriented Guided Inquiry Learning (POGIL), in which student teams work on classroom activities specifically designed to help them construct understanding and develop key skills. While POGIL has been widely used and studied in Chemistry and other STEM fields, much less is known about how it is used in Computer Science. In this study, we examined how faculty adopt POGIL for the first time in introductory CS classrooms. Using qualitative in-depth interviews, we investigated why faculty chose to adopt POGIL and their concerns about using it. Our results suggest that faculty motivations to use POGIL centered around improving student outcomes, including their learning and engagement. However, faculty also had concerns about using POGIL, which ranged from how POGIL impacts the curriculum to logistical and institutional barriers. We discuss the implications of these findings with respect to faculty development and active learning pedagogies.	POGIL in Computer Science: Faculty Motivation and Challenges	NA:NA:NA:NA	2018
Arno Pasternak	NA	Session details: Paper Session: Gender	NA	2018
Rebecca N. Wright:Sally J. Nadler:Thu D. Nguyen:Cynthia N. Sanchez Gomez:Heather M. Wright	We describe our experience developing and running a Computer Science Living-Learning Community (LLC) for first-year women at Rutgers University, now in its third year. Each year, around 20 first-year undergraduate women who intend to major in computer science (CS) apply and are selected to participate. LLC participants live in a common residence hall and are provided with an educational, mentoring, and community-building program that supports their progress as students and CS majors. Participants take a "house course," Great Ideas and Insights in Computer Science, as a group, and also take a course on Knowledge and Power: Issues in Women's Leadership. Program activities include study sessions and industry interactions, as well as opportunities to participate in K-12 outreach programs, hackathons, and computing research. To evaluate the program, participants and a similar comparison group are surveyed at the beginning and end of the academic year and a focus group is conducted with program participants. Program participants find the program valuable and would recommend it to others, but both program participants and the comparison group report some lack of confidence in their potential success as computer scientists.	Living-Learning Community for Women in Computer Science at Rutgers	NA:NA:NA:NA:NA	2018
William H. Bares:Bill Manaris:Renée McCauley:Christine Moore	Increasing gender balance in computing is widely recognized by academic institutions, industry, and government agencies as an imperative. This paper describes how providing opportunities for creative expression early on and throughout the four years of an undergraduate computing degree achieves this goal. Prior studies have demonstrated that opportunity for creative expression has a positive effect on recruitment and retention of women, while conversely, lack of opportunity for creative expression has a negative effect. We describe our approach, integrated into a four-course sequence combining computing and the arts, so that other institutions may consider adopting it. Results of a six-year longitudinal study show that these courses attract, retain, and graduate 46% female students, while the corresponding number in our ABET-accredited Computer Science curriculum is approximately 20%. The paper concludes with general observations and suggests directions for future action in CS curricula design.	Achieving Gender Balance through Creative Expression	NA:NA:NA:NA	2018
Amir Kamil:James Juett:Andrew DeOrio	Increasing participation of women and underrepresented minorities is a key challenge in the field of Computer Science Education. Balanced representation of these groups among teaching assistants in Computer Science courses influences recruitment and retention of underrepresented students. At the same time, the status-quo reduced participation of these students makes it more difficult to hire instructional staff from underrepresented groups. In this paper, we describe our experience evaluating candidates with teaching-demonstration videos, followed by in-person interviews, to hire a gender-balanced set of undergraduate TAs for a large-scale CS2 course. Our research goal is to quantitatively assess gender balance throughout the hiring process. Our initial applicant pool is just one-sixth women, but we found that women applicants perform better in our application process than men, resulting in a gender-balanced course staff without making hiring decisions based on the gender of applicants. We show that our approach results in a more gender-balanced teaching staff than hiring based on applicant GPA. We also use course-evaluation data to demonstrate that women perform as well as men as teaching assistants in CS2, and that the overall quality of our teaching assistants has remained high after the hiring-process change.	Gender-balanced TAs from an Unbalanced Student Body	NA:NA:NA	2018
Becky Grasser	NA	Session details: Paper Session: Curriculum Issues 1	NA	2018
Austin Cory Bart:Allie Sarver:Michael Friend:Larry Cox II	Rising enrollments and limited instructor resources underscores the growing need for reusable, scalable curriculum. In this paper, we describe an open-source introductory Python course for non-Computer Science majors in STEM, designed following best practices of Instructional Design (a process similar to Software Engineering). The created resources include 234 learning objectives, 51 lesson videos, 45 lecture slides, 170 programming problems, 281 quiz questions, 6 unit tested projects, and 4 ethical prompts. A teaching field guide has also been produced as a result of this effort, documenting how to deploy this curriculum on a daily level. We describe our experiences deploying over two semesters. The course serviced over 500 students, with 100s in some sections. Along the way, two interventions were conducted in an Action Design Research style: one using Worked Examples, and another using Structured Small Groups. We report on the mixed results of these experiments, plus evaluations of the assignments from student surveys and statistical measures of item effectiveness. Finally, we describe lessons learned when following Instructional Design processes.	PythonSneks: An Open-Source, Instructionally-Designed Introductory Curriculum with Action-Design Research	NA:NA:NA:NA	2018
Chris Proctor:Maxwell Bigman:Paulo Blikstein	Computer science is poised to become a core discipline in K12 education, however there are unresolved tensions between the definitions and purposes of computer science and public education. This study's goal is to explore how logistical and conceptual challenges emerge while designing a comprehensive K12 computer science program in a public school district. While the policy infrastructure for K12 computer science education is rapidly developing, few districts have yet implemented computer science as a core discipline in their K12 programs and very little research has explored the challenges involved in putting ideas into practice. This study reports on a committee designing a comprehensive K12 computer science education program at a small public school district in California. Through a grounded-theory qualitative interpretation of committee-member interviews and board meeting transcripts, we surfaced three themes which were the primary points of tension: how computer science is defined, how it ought to be taught, and what process ought to be used to answer these questions. Grounding these tensions in the academic discourse on K12 computer science education, this study offers recommendations to other districts designing comprehensive computer science education and suggests future directions of computer science education research that will be most useful to stakeholders of these processes.	Defining and Designing Computer Science Education in a K12 Public School District	NA:NA:NA	2018
Daisy W. Rutstein:Yuning Xu:Kevin McElhaney:Marie Bienkowski	As K-12 computer science (CS) education initiatives scale throughout the U.S., researchers seek to understand the context-specific relationships between CS instruction and student learning. Evaluation of instruction requires valid measures of curriculum implementation. We have developed measures for identifying conditions for successful implementation of an introductory high school computer science curriculum along two-dimensions: teaching quality and curriculum enactment. Additionally, we have defined three types of instructional strategies for teaching quality. Quantitative and qualitative data were collected from 53 teachers through surveys and interviews. Data were aggregated and integrated to derive scaled measures for the instructional strategies and curriculum adaptation, and implementation measures were correlated with student end-of-unit assessment data. We found potential factors that can enhance or impede the successful implementation of CS curriculum materials, and we have identified several broad issues associated with scaling up CS curricular implementation.	Developing Implementation Measures for K-12 Computer Science Curriculum Materials	NA:NA:NA:NA	2018
Bill Siever:Roger D. Chamberlain:Elliott Forbes:Ingrid Russell	Embedded systems pervade nearly every aspect of modern life. Moreover, the emergence of both mobile platforms and Internet of Things (IoT) is furthering their reach. Although embedded systems are one of the bodies of knowledge in the ACM/IEEE-CS Com- puter Engineering Curricula, they have only passing mention in the ACM/IEEE-CS Computer Science Curricula. Inclusion of embedded systems concepts in undergraduate computer science can facilitate many objectives: a) they are an example of Platform-Based Devel- opment, a prominent theme in the ACM 2013 CS Curricula, b) they are often a more suitable level of complexity for educational needs than other "real world" platforms (e.g., Arduinos may be used to introduce many AP CS Principles in a single course), c) they offer a novel form of engagement, which may enhance diversity, and d) emerging areas, like IoT, are increasing demand for professionals that understand the full span of systems, from low-level firmware, to middleware and cloud computing. This panel represents three methods of including embedded systems concepts in undergraduate computer science: 1) use of em- bedded systems to improve engagement in a non-major computing course, 2) a required course covering core content for both com- puter science and computer engineering majors, and 3) a degree program offering a formal emphasis in embedded systems via a complementary set of courses. The panelists will share their motiva- tions for including embedded systems concepts in their programs, their approaches to integrating the content into their curricula, the teaching methods they use, the challenges they faced, and chal- lenges that remain.	Including Embedded Systems in CS: Why? When? and How?	NA:NA:NA:NA	2018
Eric R. Banilower:Evelyn M. Gordon	The National Survey of Science and Mathematics Education has provided nationally representative data about the status of K-12 science and mathematics education periodically over the past 40 years. In 2018, the sixth iteration of the study, the study's scope was expanded to include a focus on K-12 computer science education and the study renamed The NSSME+. Data come from roughly 1,300 schools, 7,000 K-12 science and mathematics teachers (who were asked about their integration of computer science into their instruction), and 300 teachers of high school computer science. This session will engage participants with results related to computer science education in the U.S., including: how many, and which, students have access to computer science instruction; who teaches computer science and what pre-service preparation and in-service professional development they have; the nature of computer science instruction; and access to resources, including instructional materials, to support instruction.	Where Are We Now?: Results from a National Study of Computer Science Teachers and Teaching	NA:NA	2018
Tracy Camp:Wendy DuBow:Diane Levitt:Linda J. Sax:Valerie Taylor:Colleen Lewis	The CISE directorate of the NSF is rolling out a requirement that all NSF grants include a Broadening Participation in Computing (BPC) plan (www.nsf.gov/cise/bpc/). This has the potential to drive important institutional change across CS departments in the U.S. This panel of BPC experts will offer their perspectives on meaningful BPC activities, talk about existing BPC programs, and share BPC-related resources that can help PIs and departments craft high-quality BPC plans. The panelists will offer contrasting perspectives on topics such as K-12 outreach, the allocation of department funds for BPC, faculty engagement, and first steps departments should take. Ultimately, NSF review panels made up of CISE community members will evaluate BPC plans, but we hope to spark productive conversations in the interest of fostering institutional change to achieve the social imperative of BPC.	The New NSF Requirement for Broadening Participation in Computing (BPC) Plans: Community Advice and Resources	NA:NA:NA:NA:NA:NA	2018
Cara Tang:Cindy S. Tucker:Christian Servin:Markus Geissler:Melissa Stange	As projections of the shortage of cybersecurity workers grow [4], the spotlight is on cybersecurity education. In December of 2017, the Joint Task Force on Cybersecurity Education published Cybersecurity Curricula 2017: Curriculum Guidelines for Post-Secondary Degree Programs in Cybersecurity [6] (CSEC2017), representing a new discipline in ACM's Computing Curricula Series [5]. Now the ACM CCECC (Committee for Computing Education in Community Colleges) is leading creation of a similar set of guidelines for two-year cybersecurity programs at the associate-degree level, called CSEC2Y. This special session, led by the ACM CCECC, will engage participants in the curriculum development process for associate-degree programs in the increasingly important field of cybersecurity. Participants will have the opportunity to review the current CSEC2Y draft and related materials, to recommend changes, plan further revisions, and otherwise assist in crafting the curricular guidance.	Shaping Curricular Guidelines for Associate-Degree Cybersecurity Programs	NA:NA:NA:NA:NA	2018
Rebecca Bates:Valerie Summet:Nanette Veilleux:Judy Goldsmith:Naomi Kritzer	This special session will allow discussion of how many common goals of CS educators (conveying core CS concepts, creating community for our students, discussing ethics, etc.) can be furthered through the use of literature in CS courses. We will present five goals which are common in CS education, and discuss how incorporating literature relates to them. We will present small case studies showing concrete examples of assignments and courses which have successfully utilized literature in common, core CS courses. We will showcase a Q & A with author Naomi Kritzer, winner of the 2016 Hugo Award for her short story "Cat Pictures Please".	SIGCSE Reads 2019: Discussion and Q & A	NA:NA:NA:NA:NA	2018
James Caristi	NA	Session details: Session: [email protected] - CS1	NA	2018
Brett A. Becker:Keith Quille	The SIGCSE Technical Symposium is celebrating its 50th year, and a constant theme throughout this history has been to better understand how novices learn to program. In this paper, we present a perspective on the evolution of introductory programming education research at the Symposium over these 50 years. We also situate the Symposium's impact in the context of the wider literature on introductory programming research. Applying a systematic approach to collecting papers presented at the Symposium that focus on novice programming / CS1, we categorized hundreds of papers according to their main focus, revealing important introductory programming topics and their trends from 1970 to 2018. Some of these topics have faded from prominence and are less relevant today while others, including many topics focused on students, such as making learning programming more appropriate from gender, diversity, accessibility and inclusion standpoints, have garnered significant attention more recently. We present discussions on these trends and in doing so, we provide a checkpoint for introductory programming research. This may provide insights for future research on how we teach novices and how they learn to program.	50 Years of CS1 at SIGCSE: A Review of the Evolution of Introductory Programming Education Research	NA:NA	2018
William H. Bares	NA	Session details: Paper Session: Camps	NA	2018
Quinn Burke:Cinamon Sunrise Bailey	The purpose of this paper is to investigate student perspectives of how college computer science (CS) programs compare to those of coding bootcamps.  In particular, the research examines to what degree students report their respective programs instill the necessary interpersonal and intrapersonal skills (i.e., teamwork and resilience) necessary for workforce entry. Prior research from the authors suggests there is a perception among the software industry that college graduates often lack the necessary so-called "soft" skills for successful workforce entry; this research investigates to what degree students from each educational environment mirror this sensibility in the assessment of their own abilities, learning preferences, and educational experiences.  Data is based on a series of fifty (50) one-on-one interviews with students, 22 of whom come from a coding bootcamp background and 28 who come from a four-year college.   Alongside these interviews, students completed both pre-surveys (50 students) and post-surveys (19 students) on learning preferences and programmatic experience; 12 students also participated in follow-up interviews further articulating their learning experiences. Results indicate that despite significant differences in age and workforce experience, coding bootcamp students and undergraduates differ little in how they perceive themselves as learners; there were notable differences in reasons for application to respective programs as well as exposure to practical learning experiences through coursework. Discussion focuses on the degree to which the aforementioned "soft skills" are perceived as learned expertise versus a personal attribute, and to what degree such perception may contribute to higher education's pedagogical and curricular approaches to CS instruction.	Camp or College?	NA:NA	2018
Yesheng Chen:Zhen Chen:Shyamala Gumidyala:Annabella Koures:Seoyeon Lee:James Msekela:Halle Remash:Nolan Schoenle:Sarah Dahlby Albright:Samuel A. Rebelsky	Over the past decade, politicians, leaders, and pundits have called for computing and computer science education opportunities to be made available earlier and earlier. Such calls have led to the creation of a wide variety of offerings for students at middle-school and even elementary levels, including summer "code camps" targeted at middle-school students. Such camps often emphasize fun aspects of computing, such as games and robots. In contrast, research at the collegiate level suggests that meaningful applications of computing, such as computing for social good, are more successful at building and sustaining interest, particularly among students from groups traditionally underrepresented in computing. In this project, we developed and offered a summer camp that draws upon ideas and approaches from the digital humanities (DH), which explore the use of algorithms and computation in support of broader humanistic inquiry. Because DH reveals different ways to apply algorithmic and computational thinking, DH has the potential to attract students who might not otherwise consider computing. In this paper, we introduce central issues in the digital humanities, explain the rationale for the camp design, describe the camp curriculum, and reflect on successful and less successful aspects of the camp. Among other things, we consider how to introduce digital humanities topics to students who have not yet heard the term "humanities" and explore the utility of such topics for this age group. We also present preliminary data on the short-term effects of the camp on students' self-efficacy and interest in computing.	A Middle-School Code Camp Emphasizing Digital Humanities	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Caelin Bryant:Yesheng Chen:Zhen Chen:Jonathan Gilmour:Shyamala Gumidyala:Beatriz Herce-Hagiwara:Annabella Koures:Seoyeon Lee:James Msekela:Anh Thu Pham:Halle Remash:Marli Remash:Nolan Schoenle:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky	The underrepresentation within computer science of women, domestic students of color, and students with lower socioeconomic-status remains a national issue. Recent studies demonstrate two critical factors: Persistent stereotypes about "who does computer science" can preclude interest in the field for members of these groups; many also perceive computing as "irrelevant" and "asocial". While these issues must be addressed at multiple ages and levels, many suggest that we should start early, before students have developed stereotypes. As a step in combating (mis-)perceptions of ability and relevance, we developed and conducted a spectrum of week-long summer "code camps" for regional middle-school students. These camps emphasize meaningful uses of computing, on building self-efficacy, and on broadening understanding of who does and can do computer science. In this paper, we focus on our "data science for social good" (ds4sg) camp, in which students explored computational approaches to data science through a lens of computing for social good, discovering how computing helps them not only better understand societal issues but also convince others to address problems. We discuss the rationale for the curriculum and its content, including our uses of pair programming, personal projects, and a growth model that brings students from block-based programming to professional Jupyter data notebooks. We consider the short-term effects the camps have on students' self-efficacy and perceptions of computer science. We conclude with recommendations and guidelines for those intending to offer similar camps.	A Middle-School Camp Emphasizing Data Science and Computing for Social Good	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Caroline Budwell	NA	Session details: Paper Session: Story & Video	NA	2018
Mia Minnes:Christine Alvarado:Max Geislinger:Joyce Fang	Using instructional videos - either as supplemental content or in a flipped classroom - has become increasingly popular among students and instructors in higher education CS courses. However, producing or finding appropriate videos can be expensive and time-consuming. This experience report describes a novel, relatively low-cost approach to creating customized video resources that requires very little instructor time. This approach leverages widely available screen capture and podcasting technologies to produce a suite of 2-5 minute "podcast highlights" videos from full-length live lecture footage. Podcast highlights distill lecture concepts into short segments, and supplementary annotations help illustrate these concepts further. Podcast highlights can be created quickly by undergraduates with just a small amount of instructor supervision. We created podcast highlights videos for four undergraduate CS courses. In a pilot study with two of these classes, many students used the highlights videos regularly and praised their usefulness for both previewing and reviewing class concepts. This report presents the podcast highlights production process, student reaction to and use of podcast highlights videos, and best practices for creation and deployment of these customized educational videos.	Podcast Highlights: Targeted Educational Videos From Repurposed Lecture-capture Footage	NA:NA:NA:NA	2018
Ana I. González-Tablas:Pablo Martín-González	We present an active learning experience conducted on a Cryptography course within a Bachelor's Degree in Computer Science and Engineering with the goal of promoting better attitudes towards cryptography. Students were asked to create short videos that presented in an attractive way day-to-day topics or systems related with cryptography but not included in the course syllabus. Participation was optional although additional marks were assigned depending on a rubric-based assessment. Students, besides creating the videos, could participate also (or only) in evaluating some of the peer-created videos using the same rubric used by the teachers. Other active learning experiences consider student-generated videos but often topics are required to be within the course syllabus. We describe the experience design and how we have used YouTube and Microsoft Class Notebook to seamlessly deploy the experience as an extra curricular activity, with minimum teachers overhead. To measure the effect of the experience on the students attitude, we have carried on a survey (pre-test and post-test), adapted from an already existing attitudes towards statistics scale, on two student groups (intervention and control). Results show that intervention group presents higher increments in attitudes in the three analysed dimensions (usefulness, likeness, and motivation) respect to the control group. We have also conducted a satisfaction survey on intervention group, that show that a mean of 80% of students evaluate as positive (agree or strongly agree) the experience. Final grades, however, do not present significant differences.	Student-Generated Videos for Promoting Better Attitudes towards Cryptography	NA:NA	2018
Jennifer Parham-Mocello:Shannon Ernst:Martin Erwig:Lily Shellhammer:Emily Dominguez	Story Programming is an approach for teaching complex computational and algorithmic thinking skills using simple stories anyone can relate to. One could learn these skills independent of a computer or with the use of a computer as a tool to interact with the computation in the tale. This research study examines the use of Story Programming before teaching coding in a computer science orientation course to determine if it is a viable alternative to the code-focused way of teaching the class in the past. We measure the viability of the Story Programming approach by evaluating student-success and learning outcomes, as well as student reactions to post-survey questions.	Story Programming: Explaining Computer Science Before Coding	NA:NA:NA:NA:NA	2018
Kalpathi Subramanian	NA	Session details: Paper Session: Games & Gamification	NA	2018
Darina Dicheva:Keith Irwin:Christo Dichev	Although many CS courses require extensive practice, a large number of students show low motivation for engaging in non-graded, self-directed learning activities. To address this problem, we developed OneUp - a highly configurable course gamification platform that enables instructors to tailor the gamification features to fit their preferences. This paper presents a case study of using OneUp to gamify a Data Structures course. The focus is on encouraging students' self-study and better engagement with out-of-class online practicing. We describe the utilized game elements - badges, leaderboard, virtual currency, and learning dashboards, and provide a descriptive analysis of their use. The results of our evaluation show that this gamification intervention has been well received by the students, resulting in significantly increased student engagement and out-of-class practicing and in a reduced failing rate.	OneUp: Engaging Students in a Gamified Data Structures Course	NA:NA:NA	2018
John Anvik:Vincent Cote:Jace Riehl	Although there are many computer science learning games with the goal of teaching programming, such games typically require the person to either learn an existing programming language or the game's own specialized language. This can be intimidating, confusing or frustrating for an individual when they cannot get their "program" to work correctly (e.g. syntax error, infinite loop). Additionally, such games commonly use a puzzle-solving approach that does not appeal to some demographics. This paper presents a programming-language-independent approach to teaching fundamental programming and cybersecurity concepts using simple vocabulary. This approach also uses the familiar activity of playing cards against opponents to create a more dynamic and engaging learning experience. The approach is demonstrated by a web-based game called Program Wars. Results from a user study show that players are able to effectively connect game concepts to actual programming language structures; however, whether players' comprehension of computer programming is improved is unclear.	Program Wars: A Card Game for Learning Programming and Cybersecurity Concepts	NA:NA:NA	2018
Rafael G. de Pontes:Dalton D. S. Guerrero:Jorge C. A. de Figueiredo	In recent years, the use of game elements in non-game contexts has been widely adopted in different contexts, one of which education. Concerned with investigating the effect of gamification on student engagement in the context of an undergraduate Introductory Programming course that applied that Mastery Learning approach, a gamified web application was developed and integrated to a pre-existing online platform used to conduct the syllabus. N = 60 students were randomly assigned to one of two groups: an experimental group with access to the gamified platform and a control group without access to it. The randomization guaranteed a similar number of students in relation to advancement in the course, in each group. The main features explored in the gamified approach were anonymous weekly leaderboards, many categories of badges and personal record-tracking. Each student profile was private. A first 90-minute experiment showed that the experimental group solved 37% more exercises than the control group, on average. From that point onward, student activity was monitored for a period of four weeks, until the end of the course. Though student-activity decreased over time as students completed the course, the experimental group increasingly solved more exercises per week compared to the control group (at least 46% more, on average). After the course was concluded, the experimental group answered a survey which showed that the badges were the feature that motivated them the most. This research's source code is available and may be easily replicated or incremented.	Analyzing Gamification Impact on a Mastery Learning Introductory Programming Course	NA:NA:NA	2018
Mohsen Dorodchi	NA	Session details: Paper Session: Testing 1	NA	2018
Ayaan M. Kazerouni:Clifford A. Shaffer:Stephen H. Edwards:Francisco Servant	Software testing is an important aspect of the development process, one that has proven to be a challenge to formally introduce into the typical undergraduate CS curriculum. Unfortunately, existing assessment of testing in student software projects tends to focus on evaluation of metrics like code coverage over the finished software product, thus eliminating the possibility of giving students early feedback as they work on the project. Furthermore, assessing and teaching the process of writing and executing software tests is also important, as shown by the multiple variants proposed and disseminated by the software engineering community, e.g., test-driven development (TDD) or incremental test-last (ITL). We present a family of novel metrics for assessment of testing practices for increments of software development work, thus allowing early feedback before the software project is finished. Our metrics measure the balance and sequence of effort spent writing software tests in a work increment. We performed an empirical study using our metrics to evaluate the test-writing practices of 157 advanced undergraduate students, and their relationships with project outcomes over multiple projects for a whole semester. We found that projects where more testing effort was spent per work session tended to be more semantically correct and have higher code coverage. The percentage of method-specific testing effort spent before production code did not contribute to semantic correctness, and had a negative relationship with code coverage. These novel metrics will enable educators to give students early, incremental feedback about their testing practices as they work on their software projects.	Assessing Incremental Testing Practices and Their Impact on Project Outcomes	NA:NA:NA:NA	2018
Maurício Aniche:Felienne Hermans:Arie van Deursen	Software testing is an important topic in software engineering education, and yet highly challenging from an educational perspective: students are required to learn several testing techniques, to be able to distinguish the right technique to apply, to evaluate the quality of their test suites, and to write maintainable test code. In this paper, we describe how we have been adding a pragmatic perspective to our software testing course, and explore students' common mistakes, hard topics to learn, favourite learning activities, and challenges they face. To that aim, we analyze the feedback reports that our team of Teaching Assistants gave to the 230 students of our 2016-2017 software testing course at Delft University of Technology. We also survey 84 students and seven of our teaching assistants on their perceptions. Our results help educators not only to propose pragmatic software testing courses in their faculties, but also bring understanding on the challenges that software testing students face when taking software testing courses.	Pragmatic Software Testing Education	NA:NA:NA	2018
Lilian Passos Scatalon:Jeffrey C. Carver:Rogério Eduardo Garcia:Ellen Francine Barbosa	Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students' perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.	Software Testing in Introductory Programming Courses: A Systematic Mapping Study	NA:NA:NA:NA	2018
Debzani Deb	NA	Session details: Paper Session: Computation Thinking 1	NA	2018
Ashok Basawapatna:Alexander Repenning:Mark Savignano	The creation of computer science tutorials is becoming critically important as hundreds of millions of students each year get their first CS experience through self-directed online activities. Creating a "cliffhanger" activity, with high engagement during and motivation to continue learning post activity, is a balancing act. If tutorials provide too much detailed information, users may be able to follow instructions but can feel overwhelmed or bored. On the other hand, tutorials that do not sufficiently explain crucial steps risk frustrating users who might drop out of the activity. Zones of Proximal Flow (ZPF) tutorials are simple to create and provide a navigation structure of differentiated instruction allowing users to choose appropriate detail based on their self-assessed state of flow, from bored to anxious. Using Retention of Flow analysis, two Hour of Code game design tutorials were analyzed: a sophisticated online tutorial for the creation of Frogger, and a simple ZPF tutorial for the creation of Pac-Man. One hope was that the simple ZPF Pac-Man tutorial would not do much worse than the sophisticated Frogger tutorial, but surprisingly the ZPF Pac-Man tutorial significantly outperformed the Frogger tutorial in terms of student retention. The Pac-Man tutorial also displayed a high student motivation to continue programming past the end of differentiated instruction.	The Zones of Proximal Flow Tutorial: Designing Computational Thinking Cliffhangers	NA:NA:NA	2018
Lori Pollock:Chrystalla Mouza:Kevin R. Guidry:Kathleen Pusecker	In this work, we describe our effort to develop, pilot, and evaluate a model for infusing computational thinking into undergraduate curricula across a variety of disciplines using multiple methods that previously have been individually tried and tested, including: (1) multiple pathways of computational thinking, (2) faculty professional development, (3) undergraduate peer mentors, and (4) formative assessment. We present pilot instantiations of computational thinking integration in three different disciplines including sociology, mathematics and music. We also present our professional development approach, which is based on faculty support rather than a co-teaching model. Further, we discuss formative assessment during the pilot implementation, including data focusing on undergraduate students' understanding and dispositions towards computational thinking. Finally, we reflect on what worked, what did not work and why, and identify lessons learned. Our work is relevant to higher education institutions across the nation interested in preparing students who can utilize computational principles to address discipline-specific problems.	Infusing Computational Thinking Across Disciplines: Reflections & Lessons Learned	NA:NA:NA:NA	2018
Markeya S. Peteranetz:Leen-Kiat Soh:Elizabeth Ingraham	In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These "computational thinking" courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course.	Building Computational Creativity in an Online Course for Non-Majors	NA:NA:NA	2018
James W. McGuffee	NA	Session details: Paper Session: Assessment 1	NA	2018
Daniel Coore:Daniel Fokum	We present an initiative that introduced the use of a competitive programming platform as a mechanism for auto-grading assignments for an introductory course on algorithm design and analysis. The specific objective of the intervention was to increase the number of assessed programming exercises to an average of 1 per week. A traditionally large enrolment with only a few graduate assistants available meant that prior to the intervention, few assignments were given, and the duration that students waited for feedback was long. Fresh problems were developed for deployment on the platform, each one targeting the specific learning objectives of the week in which they were given. The assignments were given in the format of a contest, and students were permitted to submit multiple attempts without penalty. There was a public leaderboard that showed real-time standings, but a student's grades depended only on the number of test cases his submissions passed and not on its ranking on the leaderboard. Anecdotally, we observed an increased degree of engagement with the course content. However a statistical analysis shows that the impact of the intervention on student performance, relative to previous instances of the course, was mixed. We discuss these and other findings.	Facilitating Course Assessment with a Competitive Programming Platform	NA:NA	2018
Eric Wiebe:Jennifer London:Osman Aksit:Bradford W. Mott:Kristy Elizabeth Boyer:James C. Lester	The recognition of middle grades as a critical juncture in CS education has led to the widespread development of CS curricula and integration efforts. The goal of many of these interventions is to develop a set of underlying abilities that has been termed computational thinking (CT). This goal presents a key challenge for assessing student learning: we must identify assessment items associated with an emergent understanding of key cognitive abilities underlying CT that avoid specialized knowledge of specific programming languages. In this work we explore the psychometric properties of assessment items appropriate for use with middle grades (US grades 6-8; ages 11-13) students. We also investigate whether these items measure a single ability dimension. Finally, we strive to recommend a "lean" set of items that can be completed in a single 50-minute class period and have high face validity. The paper makes the following contributions: 1) adds to the literature related to the emerging construct of CT, and its relationship to the existing CTt and Bebras instruments, and 2) offers a research-based CT assessment instrument for use by both researchers and educators in the field.	Development of a Lean Computational Thinking Abilities Assessment for Middle Grades Students	NA:NA:NA:NA:NA:NA	2018
Paul Denny:Sathiamoorthy Manoharan:Ulrich Speidel:Giovanni Russello:Angela Chang	Academic dishonesty is a widely acknowledged problem in tertiary education, and a range of safeguards and tools exist to both deter and detect cheating. During tests and examinations students are often monitored closely by invigilators, however incidents of misconduct still occur. Multiple-choice questions (MCQs) are particularly susceptible in this regard due to the simplicity with which answers can be communicated. Nonetheless, they are commonly used in large classes due to their convenience. In this work we investigate multiple-variant MCQs, where answer options are randomly selected from predefined sets. This format is less prone to student cheating and overcomes several weaknesses of similar methods. We evaluate this approach in two large computer science courses through student questionnaires and simple item analysis. We find that multiple-variant MCQ exams are perceived as an effective way to reduce cheating behavior, however not all question variants are equally difficult. This introduces concerns around fairness and we discuss approaches to mitigate these issues in the future.	On the Fairness of Multiple-Variant Multiple-Choice Examinations	NA:NA:NA:NA:NA	2018
Diana Franklin	NA	Session details: Paper Session: Teaching Practice 1	NA	2018
Andrew J. Ko:Thomas D. LaToza:Stephen Hull:Ellen A. Ko:William Kwok:Jane Quichocho:Harshitha Akkaraju:Rishin Pandit	One way to teach programming problem solving is to teach explicit, step-by-step strategies. While prior work has shown these to be effective in controlled settings, there has been little work investigating their efficacy in classrooms. We conducted a 5-week case study with 17 students aged 15-18, investigating students' sentiments toward two strategies for debugging and code reuse, students' use of scaffolding to execute these strategies, and associations between students' strategy use and their success at independently writing programs in class. We found that while students reported the strategies to be valuable, many had trouble regulating their choice of strategies, defaulting to ineffective trial and error, even when they knew systematic strategies would be more effective. Students that embraced the debugging strategy completed more features in a game development project, but this association was mediated by other factors, such as reliance on help, strategy self-efficacy, and mastery of the programming language used in the class. These results suggest that teaching of strategies may require more explicit instruction on strategy selection and self-regulation.	Teaching Explicit Programming Strategies to Adolescents	NA:NA:NA:NA:NA:NA:NA:NA	2018
Sue Sentance:Jane Waite:Maria Kallia	PRIMM is an approach to teaching programming at K-12 that facilitates the structure of lessons in a purposeful way. PRIMM stands for Predict-Run-Investigate-Modify-Make, and draws on recent research in programming education. In particular the PRIMM approach recognises that starting with existing code and being able to explain what it does gives novice programmers the confidence to write their own programs. Using the PRIMM approach, teachers can devise scaffolded and targeted tasks for students which helps engender understanding, particularly for those who may have previously struggled to understand programming concepts. In this techniques paper, we consider what PRIMM is, and the experiences that teachers have had of using the structure in the classroom. PRIMM materials have been trialled in schools in a study involving around 500 students aged 11-14. From interviews with nine participating teachers we have found that teachers particularly value the collaborative approach taken in PRIMM, the structure given to lessons, and the way that resources can be differentiated. We propose that PRIMM is an approach that could be adopted in all phases of programming education as well as in teacher training.	Teachers' Experiences of using PRIMM to Teach Programming in School	NA:NA:NA	2018
Christopher Lynnly Hovey:Lecia Barker:Vaughan Nagy	In a previous paper, we explored results from the first stage of a two-part research project designed to uncover what influences computer science (CS) faculty to adopt new teaching practices. In the first phase, we conducted interviews, classroom observations, and focus groups with faculty to better understand the organizational, individual, and social factors that influence faculty adoption. Here we discuss findings from the second phase of the project, which uses survey data from 821 CS faculty at 595 institutions in the U.S. to investigate the prevalence of themes uncovered during the qualitative phase. Results show that faculty who tried an innovation were motivated primarily by concerns for students' learning and course experience, including their engagement and participation. Also important were the "fit" with existing practices and tools, and the logistics of implementing an innovation. Factors that reduced faculty willingness to try an innovation include a lack of time, logistical issues, and satisfaction with their current teaching practices. Faculty learned about the innovations they later adopted through presentations and workshops at conferences and at their home institutions, and through conversations with respected colleagues who teach in similar contexts. Implications for encouraging more widespread usage of teaching techniques that improve diversity and student learning are discussed.	Survey Results on Why CS Faculty Adopt New Teaching Practices	NA:NA:NA	2018
Jennifer M. Blaney:Linda J. Sax:David Feldon:Ann Gates	Broadening the participation of women in computing has increasingly become a focus of computing education research over the past several years. To be sure, the field of computing has unique challenges that merit close examination. At the same time, social scientists have built large bodies of literature related to gender equity across disciplines that span several decades, much of it critical to how we understand (in)equity in computing. This panel will provide perspectives from scholars with expertise in a variety of disciplines, including computer science, higher education, and educational psychology. Panelists will share relevant research from their home disciplines and initiate a discussion on the future of computing education research.	Broadening Participation in Computing: Putting Our Work in Context	NA:NA:NA:NA	2018
David Touretzky:Fred Martin:Deborah Seehorn:Cynthia Breazeal:Tess Posner	NA	Special Session: AI for K-12 Guidelines Initiative	NA:NA:NA:NA:NA	2018
Jamie Payton:Jamika D. Burge:Jill Denner	During the 2018 RESPECT Conference, a group of us facilitated a conversation about inclusion in computing. The discussion focused on critical issues of equity and inclusion and how to engage people from all groups in learning key concepts in computing. For this SIGCSE panel, we propose to continue the conversation through a broader conversation around the terms "broadening participation" and the roles of relationships, identity (cultural and personal), and academic, political, and professional perspectives when supporting equity and inclusion in computing education. This panel seeks to disrupt the conversation about computer science education, and participants to this session will leave having had a safe space in which to discuss issues of identify, race, and privilege that are critical to spaces like SIGCSE.	The Reality of Inclusion: The Role of Relationships, Identity, and Academic Culture in Inclusive and Equitable Practices for Broadening Participation in Computing Education	NA:NA:NA	2018
Andrea Danyluk:Paul Leidig:Lillian Cassel:Christian Servin	The ACM Data Science Task Force was established by the ACM Education Council and tasked with articulating the role of computing discipline-specific contributions to this emerging field. This special session seeks to introduce the work of the ACM Data Science Task Force as well as to engage the SIGCSE community in this effort. Members of the task force will introduce key components of a draft report, including a summary of data science curricular efforts to date, results of ACM academic and industry surveys on data science, as well as the initial articulation of computing competencies for undergraduate programs in data science. This session should be of interest to all SIGCSE attendees, but especially faculty developing college-level curricula in Data Science.	ACM Task Force on Data Science Education: Draft Report and Opportunity for Feedback	NA:NA:NA:NA	2018
Crystal Furman:Owen Astrachan:Daniel D. Garcia:David Musicant:Jennifer Rosato	With approximately 37,000 students entering college with an Advanced Placement CS Principles credit, students, parents, and teachers are wondering how that AP credit "counts" in college. In this panel, we will share perspectives from the College Board and higher education institutions of various pathways from CS Principles to a major in CS. While over 500 institutions have indicated they have credit and placement policies for CSP, they may vary quite a bit. (Credit gives students units of credit on their college record while placement means the AP credit can meet a particular course requirement.) For example, some institutions offer credit only, while others allow the course to count as part of a general education program, as a major elective, or even require CSP in the major. Panelists will share institutional context and reasoning behind their policies. Audience members will have a better understanding of the breadth of credit and placement options and considerations for their own institution.	CS Principles Higher Education Pathways	NA:NA:NA:NA:NA	2018
Mark Guzdial:Colleen M. Lewis:Lauren Margulieux:Greg L. Nelson:Leo Porter	As we celebrate the 50th SIGCSE Symposium, this panel explores how computing education researchers chart a course individually and as a community to build our research practices and collective knowledge of computing education. This navigation involves developing our research goals, which tools we use to work towards those goals, and which academic communities outside of computing education we seek to learn from and contribute to. However, these processes of navigation are rarely discussed as a community. Paper and grant submissions and reviews provide an imperfect way for our community to communicate our varied values and priorities. This panel brings together experts in computing education research who differ in their research goals, tools, and external communities. We can expect a lively discussion amongst the panelist and we hope to spark important discussions within the computing education research community!	Negotiating Varied Research Goals in Computing Education Research	NA:NA:NA:NA:NA	2018
Elizabeth K. Hawthorne:Manuel A. Perez-Quinones	NA	Session details: Morning Keynote & 2019 SIGCSE Award for Outstanding Contribution to Computer Science Education	NA:NA	2018
Mark Guzdial	Teaching programming as a way to express ideas, communicate with others, and understand our world is one of the oldest goals for computing education. The inventor of the term "computer science" saw it as the third leg of STEM literacy. In this talk, I lay out the history of the idea of universal computational literacy, some of what it will take to get there, and how our field will be different when we do.	Computing Education as a Foundation for 21st Century Literacy	NA	2018
Bernd Bruegge	NA	Session details: Paper Session: Online	NA	2018
Meen Chul Kim:Thomas H. Park:Ruixue Liu:Andrea Forte	Web development is a learning context with the potential to support rich computational thinking. Large-scale analysis of compilation and runtime errors have been used in introductory programming courses and similar approaches can be used to understand learning in web development environments. We investigated activity logs of a novel web coding game to uncover learning trajectories and what people struggle with when learning flexible box (flexbox), a collection of new CSS layout features. We designed a game called Flexbox Froggy, in which learners solve challenges by writing a few lines of CSS code, moving from simple levels that require knowledge of one flexbox property, to complex levels combining multiple properties. We investigate learning curves based on the changes in syntactic and semantic errors learners make as they complete the game. Our findings show that people performed better encountering a single new property than combined with properties they had already practiced. Clusters of learners at different levels did not demonstrate expected error rates based on learning curve theory. Also unexpectedly, advanced groups that mastered syntax had higher semantic error rates than the beginner group, especially when attempting new properties or complex use cases. We conclude with implications for designing and developing introductory web programming games and other instructional materials.	Understanding Learning Curves and Trajectories in CSS Layout	NA:NA:NA:NA	2018
Michael Whitney:Bryan Dallas	The expansion of computer science programs into the digital world has significantly increased the use of videos as an instructional medium. In an effort to improve student performance in a video driven learning environment, this paper explores the impact of captions on learning performance. Previous work has focused on the benefits of captions for persons with disabilities, those learning English as a second language, and reading instruction for children. This work expands on the caption knowledge base by investigating (1) if the inclusion of captions significantly improves knowledge retention amongst all students in an online computer science course, and (2) if students perceive videos with captions as beneficial to learning. Our results show a statistically significant performance improvement after watching videos with captions vs. videos without captions. Students reported using captions as a learning resource as they helped reinforce video material, maintain focus, and enhance comprehension.	Captioning Online Course Videos: An Investigation into Knowledge Retention and Student Perception	NA:NA	2018
Randy Connolly	Web development continues to grow as an essential skill and knowledge area for employed computer science graduates. Yet within the ACM CS2013 curriculum recommendation and within computing education research in general, web development has been shrinking or even disappearing all together. This paper uses an informal systematic literature review methodology to answer three research questions: what approaches are being advocated in existing web development education research, what are current trends in industry practice, and how should web development be taught in light of these current trends. Results showed a significant mismatch between the type of web development typically taught in higher education settings in comparison to web development in industry practice. Consequences for the pedagogy of web development courses, computer science curriculum in general, and for computing education research are also discussed	Facing Backwards While Stumbling Forwards: The Future of Teaching Web Development	NA	2018
Ben Stephenson	NA	Session details: Paper Session: Mistakes and Errors	NA	2018
Tobias Kohn	The interaction between a novice programmer, and the compiler plays a crucial role in the learning process of the novice programmer. Of particular importance is the compiler's feedback on errors in the program code. Accordingly, compiler error messages are an important and active field of research. Yet, a language that has largely been left out of this discussion so far is Python. We have collected Python programs from high school students taking introductory courses. For each collected erroneous program, we sought to classify the effective error, and assess if the student was able to fix the error. Our study is a precursor to providing improved error messages in Python, and assess their effectiveness. As such, we are eventually interested in finding ways to automatically determine the effective error, so as to base the displayed message on. From our data, we found that a considerable part of students' errors can be attributed to minor mistakes, which can easily be identified and corrected. However, beyond such minor mistakes, a proper error diagnosis might have to be based on a goal/plan analysis of the entire program. Likewise, proper assessment of whether an error has been fixed frequently requires more context than is provided by the program alone.	The Error Behind The Message: Finding the Cause of Error Messages in Python	NA	2018
James Prather:Raymond Pettit:Brett A. Becker:Paul Denny:Dastyni Loksa:Alani Peters:Zachary Albrecht:Krista Masci	When solving programming problems, novices are often not aware of where they are in the problem-solving process. For instance, students who misinterpret the problem prompt will most likely not form a valid conceptual model of the task and fail to make progress towards a working solution. Avoiding such errors, and recovering from them once they occur, requires metacognitive skills that enable students to reflect on their problem-solving processes. For these reasons, developing metacognitive awareness is crucially important for novice students. Previous research has shown that explicitly teaching key steps of programming problem-solving, and having students reflect on where they are in the problem-solving process, can help students complete future programming assignments. Such metacognitive awareness training can be done through personal tutoring, but can be difficult to implement without a high ratio of instructors to students. We explore a more scalable approach, making use of an automated assessment tool, and conduct a controlled experiment to see whether scaffolding the problem-solving process would increase metacognitive awareness and improve student performance. We collected all code submissions by students in both control and experimental groups, as well as data from direct observation using a think-aloud protocol. We found that students who received the intervention showed a higher degree of understanding of the problem prompt and were more likely to complete the programming task successfully.	First Things First: Providing Metacognitive Scaffolding for Interpreting Problem Prompts	NA:NA:NA:NA:NA:NA:NA:NA	2018
Rebecca Smith:Scott Rixner	The software development process often follows a circuitous path, littered with mistakes and backtracks. This is particularly true for novice programmers, who typically navigate through a variety of errors en route to their final solution. This paper presents a quantitative analysis of a large dataset of Python programs written by novice students. The analysis paints a multifaceted picture of the errors that students encounter, providing insight into the distribution, duration, and evolution of these errors. Ultimately, this paper aims to incite further conversation on the mistakes made by novice programmers, and to inform the decisions instructors make as they help students overcome these mistakes.	The Error Landscape: Characterizing the Mistakes of Novice Programmers	NA:NA	2018
Steven Bogaerts	NA	Session details: Paper Session: Instruments 1	NA	2018
Ana Liz Souto O. Araujo:Wilkerson L. Andrade:Dalton D. Serey Guerrero:Monilly Ramos Araujo Melo	While several approaches have been proposed to assess computational thinking (CT) abilities, it is still unclear how many and which these abilities are. Despite the undisputed importance of assessment, the fact is that there is not enough evidence on which abilities are merely theoretical and which can be empirically observed in the context of CT. This paper is part of a larger investigation in which we try to answer a simple question: can CT abilities be quantitatively defined and measured? In this particular study, we try to answer a simple question: How many CT abilities can be empirically observed using factor analysis? We approach this question, using a dataset containing answers of 1564 students from Lithuania in the Bebras Challenge from 2015. Firstly, we used confirmatory factor analysis to verify a theory that claims that five CT abilities are assessed by the contest. Our analysis shows the theory is not statistically supported. Secondly, we used principal component analysis as an exploratory analysis to try to derive an appropriate number of factors from the data. Surprisingly, the analysis suggests there are only two main recognizable factors. Finally, we briefly discuss these factors and hypothesize that the first is called evaluation ability, which would include abstraction, generalization, and decomposition, while factor 2 is algorithmic thinking and logical reasoning.	How Many Abilities Can We Measure in Computational Thinking?: A Study on Bebras Challenge	NA:NA:NA:NA	2018
Ryan Bockmon:Stephen Cooper:Jonathan Gratch:Mohsen Dorodchi	\beginabstract Cognitive tests have been long used as a measure of student knowledge, ability, and as a predictor for success in engineering and computer science. However, these tests are not without their own problems relating to priming, difficulty (resulting in test fatigue) and time on exam. This paper discusses efforts to modify Parker et al.'s Second CS1 aptitude test (SCS1) \citeParker16 to reduce the time spent on the exam, provide greater customization to match concepts taught across three universities, and reduce redundancy of test questions all while maintaining the instrument's reliability. This instrument was modified for use on an ongoing grant investigating whether spatial abilities impact the success of students in introductory CS courses. The instrument developed in this paper is a revised shortened version of Second Computer Science 1 (SCS1) aptitude test, designated as SCS1R. \endabstract	(Re)Validating Cognitive Introductory Computing Instruments	NA:NA:NA:NA	2018
Adrienne Decker:Monica M. McGill	As computing education research continues to grow and mature as a field, it becomes more important to focus on the quality and rigor of our research studies. One important aspect of any research study is its formal evaluation. Using standardized and validated instruments relevant to computer science education to perform evaluations can increase the quality of the study and the value of its results. However, researchers often create their own instruments rather than using existing ones, perhaps due to their lack of knowledge of the value of using an existing instrument or due to the challenge of finding such instruments. Through a review of relevant computing education literature, this paper presents a listing of 47 evaluation instruments specifically designed for measuring programs or constructs related to computing that can influence student achievement and learning. Analysis of purpose, target audience, reliability, and validity of the instruments is also presented. The paper ends with a call for the community to begin to make more regular use of validated instruments in their studies when possible and to develop and validate additional instruments in areas where few exist.	A Topical Review of Evaluation Instruments for Computing Education	NA:NA	2018
Clifford A. Shaffer	NA	Session details: Paper Session: Testing 2	NA	2018
Dee A. B. Weikle:Michael O. Lam:Michael S. Kirkpatrick	Introducing software testing has taken on a greater importance in undergraduate computer science curricula in the last several years, with many departments using JUnit or other testing frameworks in the programming sequence and software engineering courses. We have developed an automated framework for unit and integration testing and grading for our intermediate-level systems course projects. Our system--designed to test C programs--combines the Check unit testing framework, custom Bash scripts for integration testing, and the Valgrind Memcheck memory leak detection tool. Although our courses use Linux, the framework is platform-independent and has been tested on a variety of other platforms. We have used this framework for seven semesters with four different instructors as part of the computer science program at a primarily undergraduate university with an emphasis on liberal arts. We distribute both public and private tests so that students get immediate feedback on their progress without knowing the actual contents of every test. We have observed that knowing their code is not completely working motivates more students to figure out what they don't understand before the project deadline. It also gives students examples of different levels of tests to use to debug their code, encourages them to develop a deeper understanding of the project specification, and reduces student anxiety about grades.	Automating Systems Course Unit and Integration Testing: Experience Report	NA:NA:NA	2018
Gordon Fraser:Alessio Gambi:Marvin Kreis:José Miguel Rojas	Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game addresses this problem by letting students compete over code under test by either introducing faults ("attacking") or by writing tests ("defending") to reveal these faults. In this paper, we describe how we integrated Code Defenders as a semester-long activity of an undergraduate and graduate level university course on software testing. We complemented the regular course sessions with weekly Code Defenders sessions, addressing challenges such as selecting suitable code to test, managing games, and assessing performance. Our experience and our data show that the integration of Code Defenders was well-received by students and led them to practice testing thoroughly. Positive learning effects are evident as student performance improved steadily throughout the semester.	Gamifying a Software Testing Course with Code Defenders	NA:NA:NA:NA	2018
Kevin Buffardi:Pedro Valdivia:Destiny Rogers	Unit testing is widely adopted in software development to automate verification of individual functions. Likewise, computer science curricula are increasing their emphasis on teaching unit testing skills. However, coverage and other measurements of test quality have limitations and may even encourage poor practices when used as an assessment and/or feedback mechanism for students. In this paper, we introduce test accuracy as a measurement that compares how well unit tests perform at distinguishing acceptable from unacceptable function implementations. To study measurements of test quality, we evaluated an assignment where students (n=103) developed a class along with accompanying tests for each of its functions. Our quantitative analysis compares test accuracy with coverage and bug identification measurements by examining each of their relationships with a lack of bugs in the students' implementations. Of the three measurements, accuracy had the strongest positive correlation (p=.648, p<.001) with a lack of bugs in the entire program. When examining the subset of tests for a particular function-under-test, both accuracy and coverage were significant predictors of a lack of bugs within the corresponding function's implementation.	Measuring Unit Test Accuracy	NA:NA:NA	2018
Matthew Hertz	NA	Session details: Paper Session: Teaching Practice 2	NA	2018
Joe Michael Allen:Frank Vahid:Alex Edgcomb:Kelly Downey:Kris Miller	Modern program auto-graders enable new CS1 approaches. Instructors can easily create new assignments, with students receiving immediate score feedback and resubmitting assignments. With such auto-graders, one approach assigns many small programs (MSPs) each week instead of one large program (OLP). Earlier research showed MSPs in CS1 yielded happier students and better grades. Our university and other schools have switched to MSPs in CS1. This paper addresses common questions about MSPs. We analyzed submissions for a 76-student section of our MSP CS1 course. Given 7 MSPs per week each worth 10 points, students needed 50 points for full credit. Students averaged 17 minutes per MSP and 120 minutes per week. Given 7 days, students on average started 2.2 days ahead of the due date, with 37% starting at least 3 days ahead. 40% of students exceeded the required 50 points per week (no extra credit was given). 50% of students "pivoted" -- switching to another program before completing the previous one. 54% used MSPs to study for exams. Students used MSPs in ways beneficial to their learning and stress reduction: spending sufficient time, completing more than necessary, preparing for exams, and pivoting to avoid getting stuck. A common concern is that MSP CS1 students will do poorly in a CS2 using OLPs. We analyzed 5 quarters of CS2 and found MSP students do fine (in fact slightly better). These results encourage use and refinement of MSPs in CS1 and other courses.	An Analysis of Using Many Small Programs in CS1	NA:NA:NA:NA:NA	2018
Devon J. Merrill:Steven Swanson	Physical computing and building robots has important benefits for novice engineers and computer scientists. However, lab time and hardware debugging comes with a high cost of instructor time and effort. To reduce this workload, we implemented a computational design tool that simplifies printed circuit board (PCB) design and manufacture, assembly, and programming. We pilot tested our computational design tool in a one-unit introductory physical computing course for 196 CS1 students. The students designed, assembled, and programmed a custom robot with minimal instructor assistance. The robots are Arduino-based and each included a student designed PCB. The students assembled the robots from off-the-shelf electronic components according to automatically generated assembly instructions. Students programmed their robots using simple APIs that were automatically generated and customized for each unique robot. A minimum of two quarters after the completion of the course, grade point average (GPA) for the students who completed the course, was found to be 0.15 higher than a comparison group of similar student (n = 498, p<0.05). We present a detailed description of our computational design tool and course curriculum, identify challenges encountered by the students and instructional staff, make recommendations to increase student achievement, and address the scalability of the course.	Reducing Instructor Workload in an Introductory Robotics Course via Computational Design	NA:NA	2018
Christopher Lynnly Hovey:Lecia Barker:Margaret Luebs	Despite growing promotion of student-centered teaching, few studies have assessed how widely these practices have diffused throughout computer science (CS) higher education. Studies on teaching practices often treat instructor- and student-centered learning as being dichotomous. Recent research indicates that this reductionist model misinterprets what actually goes on in CS classrooms. For example, a recent study found that most CS faculty categorized their teaching practices as equally student-centered and instructor-centered. We contribute to this scholarship by reporting the results of a survey disseminated to 821 CS educators in 595 universities, colleges, and community colleges in the U.S. Participants were asked to report how frequently they employed several instructor- or student-centered teaching practices and tools during the most recent semester that they taught a specific course. Results indicate that when asked to reflect on specific behaviors within a certain timeframe, faculty reported using instructor-centered teaching practices, especially delivering content via lecture, more than student-centered practices. However, most faculty also reported using at least one student-centered technique, albeit less frequently, throughout the semester. This study found few differences across certain situational and demographic variables (e.g., institution type, tenure status, etc.). Faculty justify their teaching choices with concern for negative evaluations, desire for student learning, large enrollments, heavy teaching loads, and retaining underrepresented students.	Frequency of Instructor- and Student-Centered Teaching Practices in Introductory CS Courses	NA:NA:NA	2018
Eileen T. Kraemer	NA	Session details: Paper Session: Assessment 2	NA	2018
Sam Saarinen:Shriram Krishnamurthi:Kathi Fisler:Preston Tunnell Wilson	Generating questions to engage and measure students is often challenging and time-consuming. Furthermore, these questions do not always transfer well between student populations due to differences in background, course emphasis, or ambiguity in the questions or answers. We introduce a contributing student pedagogy activity facilitated by machine learning that can generate questions with associated answer-reasoning sets. We call this process Adaptive Tool-Driven Conception Generation. A tool implementing this process has been deployed, and it explicitly optimizes the process for questions that divide student opinion. In a study involving arrays in Java, this novel process: generates questions similar to expert-designed questions, produces novel questions that identify potential student misconceptions, and provides statistical estimates of the prevalence of misconceptions. This process allows the generation of quiz and discussion questions with less expert effort, facilitates a subprocess in the creation of concept inventories, and also raises the possibility of running reproduction studies relatively cheaply.	Harnessing the Wisdom of the Classes: Classsourcing and Machine Learning for Assessment Instrument Generation	NA:NA:NA:NA	2018
Peter Ohmann	Assessment of student knowledge is a crucial and challenging part of course design. Especially in computer science courses in the United States, written examinations are very common. While written exams offer a number of advantages in convenience and familiarity, they are also inflexible and prone to question misinterpretation. In contrast to written tests, oral exams offer the prospect of an interactive conversation where students can express their knowledge in a variety of ways while asking clarifying questions. In this paper, we present and assess our implementation of oral exams in an introductory computer science course. We describe the motivation for and resulting features of our design, including a simplified rubric style for equitable, on-the-fly grading. We also perform an assessment relative to more traditional written exams. We find the time commitment for instructors to be manageable and comparable to traditional exams. Through post-semester surveys, students self-report spending slightly more time studying for oral exams, but rate the difficulty as similar to written exams. Both qualitative and quantitative student feedback indicates that oral exams can be effective and well-received.	An Assessment of Oral Exams in Introductory CS	NA	2018
Brian Harrington:Jingyiran Li:Mohamed Moustafa:Marzieh Ahmadzadeh:Nick Cheng	Most computer science examinations tend to start with the easiest questions and progress towards the more difficult material. Whether this is because of the highly scaffolded nature of the course, an attempt to 'ease students in', or simply by convention, is unclear. However, there is a great deal of data from the psychology literature to suggest that human perception of the difficulty or discomfort of a task is disproportionately affected by the last part of the task completed. Therefore, is it possible that by structuring our exams in an easy-to-hard fashion, we are causing students to perceive the test as more difficult than it actually is? Could changing the question order allow us to change students' perception of their own achievement? What effect could this have on actual performance? This paper attempts to answer these questions by randomly assigning students to write exams ordered either easy-to-hard (referred as 'Easy-Difficult') or hard-to-easy ('Difficult-Easy), then ask them to predict their marks on per-question basis. We find that the question ordering has a small but not statistically significant effect on the performance, and virtually no effect on predicted marks when treating the entire class as one unstratified sample. However, the effect was significant for certain subgroups created via stratification. In particular, swapping the order of the questions may have hurt the performance of international students, but significantly raised both the performance and confidence of female students.	On the Effect of Question Ordering on Performance and Confidence in Computer Science Examinations	NA:NA:NA:NA:NA	2018
Eric Fouh	NA	Session details: Paper Session: CS1 1	NA	2018
June Mark:Kelsey Klein	ABSTRACT In 2016-17, the College Board launched the Advanced Placement (AP) Computer Science Principles (CSP) course and exam. The AP CSP course was designed with the goal of broadening participation in computer science, and aims to introduce students to the creative aspects of computing by engaging students in developing computational artifacts related to their interests. The big ideas of the course include programming, abstraction, algorithms, data and information, the Internet, and also the global and societal impacts of computing. With support from the National Science Foundation (NSF), the Beauty and Joy of Computing in New York City partnership created the Beauty and Joy of Computing (BJC) course that is aligned to the AP CSP framework and endorsed by the College Board. The partnership recruited over 100 NYC teachers to implement the course, provided professional development (PD) and implementation support, and conducted research on the course implementation and the effects on teachers and students. This paper reports on findings from the implementation of BJC as an AP CSP course in NYC from the 2016-17 school year. It addresses student performance on a content knowledge assessment, a survey of students' attitudes toward computer science, and the 2017 AP CSP exam. Given the intentional design of the BJC course and AP CSP framework to address diversity and equity, student outcomes are also disaggregated by gender and race/ethnicity.	Beauty and Joy of Computing: 2016-17 Findings from an AP CS Principles course	NA:NA	2018
Tom McKlin:Dana Wanzer:Taneisha Lee:Brian Magerko:Doug Edwards:Sabrina Grossman:Jason Freeman	The expansion of computer science into more classrooms invites researchers and evaluators to shift their focus from predominantly measuring student-level factors to measuring both student- and classroom-level variables. Research presented in this article uses multi-level modeling to study student-level factors within the larger context of classroom-level factors. Specifically, we analyze EarSketch, a collaborative and authentic learning tool, that introduces students to programming through music remixing, has previously been shown to increase student engagement, and increases learners' intentions to persist in computing. This article presents classroom implementation frameworks commonly used in math and science education but rarely, if ever, applied to computer science. The results from a multi-level modeling analysis show that classroom implementation correlates with students' intentions to persist in computing but may not be related to student attitudes toward computing or content knowledge acquisition. Further analysis reveals that one of the five classroom implementation factors, elaboration, emerges as the most salient. This article triangulates these results with qualitative findings from school administrators and teachers, and the article concludes by theorizing how classroom implementation frameworks may be adapted to meet the unique needs of computer science teachers, learners, researchers, evaluators, and curriculum developers.	Implementing EarSketch: Connecting Classroom Implementation to Student Outcomes	NA:NA:NA:NA:NA:NA:NA	2018
Yolanda A. Rankin:Jakita O. Thomas:India Irish	African American women who have little if any experience in computer programming prior to matriculation into college often struggle in introductory CS courses that emphasize programming from the outset. These same students feel underprepared and disadvantaged, oftentimes choosing to withdraw from such courses which contributes to the underrepresentation of African American women in CS. The challenge lies in creating equitable learning environments that bridge students' everyday experiences to fundamental CS concepts. In this experience report, we introduce the Dessert Wars Challenge, an alternative pedagogical strategy that leverages students' everyday experiences with food to forge meaningful connections to CS. We examine how African American women's participation in the Dessert Wars Challenge supports the development of their Computational Algorithmic Thinking (CAT) capabilities, the ability to design, implement, assess and adapt algorithms, and contributes to their retention in a college-level introductory CS course.	Food for Thought: Supporting African American Women's Computational Algorithmic Thinking in an Intro CS Course	NA:NA:NA	2018
Joseph Carroll-Miranda:Patricia Ordonez:Edusmildo Orozco:Milagros Bravo:Michelle Borrero:Luis Lopez:Gerriann Houser:Eliud Gerena:Dale Reed:Brenda Santiago:Agustin Corchado:Andreshka Santana	Exploring Computer Science (ECS) [1] spawned from the need to provide access to Computer Science to everyone in the US. The success and commitment to equity and diversity of the ECS curriculum in Latina/o communities inspired an interdisciplinary group of educators from the University of Puerto Rico to tackle the lack of K-12 CSE on the island. This group recognized the need to implode the self-perception of Latinas (os) as being foreign to computing [2] by educating them about Computer Science. Teachers were identified as the catalyst change agents to transform Puerto Ricans students into contributors and creators of technology through computing. The intended audience for this panel consists of practitioners and creators of curriculum looking for creative strategies to engage students from diverse cultural backgrounds in computing using their native language.	This is What Diversity Looks Like: Making CS Curriculum Culturally Relevant for Spanish-speaking Communities	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Mark Goadrich:Michael Goldweber:Matthew Jadud:S. Monisha Pulimood:Samuel A. Rebelsky	As outlined in the ACM Computer Science Curricula 2013 Guidelines section on Social Issues and Professional Practice, "Students must also be exposed to the larger societal context of computing to develop an understanding of the relevant social [and] ethical ... issues." In this panel, we demonstrate diverse approaches used to achieve this goal with respect to civic engagement. Drawing from experiences with non-major, introductory computing, mobile applications, software engineering, and interdisciplinary courses, we discuss how to move beyond surface-level discussions of ethical case studies toward an integration of civic engagement activities and personal reflection into standard computing curriculum.	Civic Engagement Across the Computing Curriculum	NA:NA:NA:NA:NA	2018
Miranda Parker:Jason T. Black:Helen H. Hu:Colleen M. Lewis	A meritocracy is an environment in which rewards are based solely on ability. The concept of privilege runs counter to this idea. Privilege is an unearned, unasked for advantage gained because of the way society views an aspect of your identity such as race, ethnicity, gender, perceived socioeconomic status, and language. Privilege can affect our students experiences in the classroom and beyond. However, privilege does not have to be viewed as an entitlement, but rather an opportunity to level the playing field for all people. In this session, we seek to visually display the world of privilege through adapting interactive activities known as a privilege walk and an asset walk. Come to learn and meet with other attendees who want to create a more inclusive society	Exploring our Privilege: Activities and Discussions	NA:NA:NA:NA	2018
Alison Clear:Allen S. Parrish:John Impagliazzo:Ming Zhang	This session presents an overview of the Computing Curricula 2020 (CC2020) project and provides a status report for the project. CC2020 seeks to generate a modern revision of the well-known CC2005 document by reflecting a more current view of computing, including the addition of new and emerging sub-disciplines like cybersecurity and data science. Further, CC2020 proposes a competency-based characterization of computing, as well as a bottom-up organization of computing into its sub-disciplines based on an analysis of competencies. This session imparts the results of the project to date and provides an opportunity for participants to infuse new ideas on the current computing disciplinary landscape, as well as input for the competency model it proposes.	Computing Curricula 2020: Introduction and Community Engagement	NA:NA:NA:NA	2018
Leigh Ann DeLyser:Joshua Elder:Alan Peterfreund:Stacey Sexton	NA	Special Session: A Discussion of Research Practice Partnerships in CS Education	NA:NA:NA:NA	2018
Jean Ryoo:Gail Chapman:Julie Flapan:Joanna Goode:Jane Margolis:Christine Ong:Cynthia Estrada:Max Skorodinsky:Tiera Tanksley:Jamika D. Burge:Ryoko Yamaguchi:Frieda McAlear:Allison Scott:Alexis Martin:Sonia Koshy:Kamau Bobb:Lien Diaz	Efforts to broaden participation in computing address how systemic school structures, educator preparation, and curriculum can provide inclusive learning spaces for all students. The emerging multiplicity of scholarship in computer science (CS) education forwards diverse voices, perspectives, and positionalities, and together, provide a rich set of evidence-based narratives that can transform K-12 policies and practices. The four projects featured in this panel bring together CS education efforts with varying methodologies focused on equity-oriented pedagogies and learning for all youth across the US. This panel will focus not only on sharing the multi-pronged efforts of the featured projects, but also on developing a shared vision among participants and panelists for what equity" can and should be in the future of both SIGCSE and CS education as we celebrate SIGCSE's 50th anniversary. By highlighting the work of projects rather than individuals in this panel, audience members will have the opportunity to learn about how collaborative efforts create and examine contexts for equity in CS education across diverse stakeholders, while also providing a richer base for constructing visions of equity that go beyond mere platitudes, toward action items for broadening participation in computing.	Going Beyond the Platitudes of Equity: Developing a Shared Vision for Equity in Computer Science Education	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Roberto Hoyle	NA	Session details: Paper Session: Professional Tools & Practice	NA	2018
Ryan Rybarczyk:Lingma Acheson	Previous work demonstrated an effective strategy on how to teach two programming languages (Java and C++) side-by-side in a Computer Science II (CS2) course. The goal of this approach was twofold: first, to stress the importance of programming language selection as part of a career preparation module; secondly, to improve the overall success and satisfaction of the students. The results of this work led to additional questions, including how students (peers) could be leveraged to act as instructors in laboratory settings to aid in a peer-led learning exercise. One of the unique challenges associated with CS2 curricula is the varying degree of student experiences and expertise when entering the course. Course surveys have demonstrated that a subset of the student population enter the course with significant programming experience, while others report no prior experience with programming or programming languages. It is therefore the role of the instructor, to find the proper balance within the course in order to satisfy all students' learning needs. In the original work it was indicated, via student post-completion surveys, that peer-led discussion of coding "best practices" could improve overall student outcomes. This survey provided the motivation for this paper. In this paper, we propose using interactive peer-led code reviews to help introduce the students to widely accepted practices found throughout industry while allowing them to better master the material through a shared learning experience. We provide an outline for how this can be achieved in an existing course structure and discuss the outcomes from this study.	Interactive Peer-Led Code Reviews In CS2 Curricula	NA:NA	2018
David Liu:Andrew Petersen	Students learning to program often rely on feedback from the compiler and from instructor-provided test cases to help them identify errors in their code. This feedback focuses on functional correctness, and the output, which is often phrased in technical language, may be difficult to for novices to understand or effectively use. Static analyses may be effective as a complementary aid, as they can highlight common errors that may be potential sources of problems. In this paper, we introduce PyTA, a wrapper for pylint that provides custom checks for common novice errors as well as improved messages to help students fix the errors that are found. We report on our experience integrating PyTA into an existing online system used to deliver programming exercises to CS1 students and evaluate it by comparing exercise submissions collected from the integrated system to previously collected data. This analysis demonstrates that, for students who chose to read the PyTA output, we observed a decrease in time to solve errors, occurrences of repeated errors, and submissions to complete a programming problem. This suggests that PyTA, and static analyses in general, may help students identify functional issues in their code not highlighted by compiler feedback and that static analysis output may help students more quickly identify debug their code.	Static Analyses in Python Programming Courses	NA:NA	2018
Courtney Hsing:Vanessa Gennarelli	GitHub is a widely-used software development platform that supports version control, collaborative development, and project hosting. Currently, an estimated 18,000 educators use GitHub in programming classrooms. Depending on how GitHub is implemented in the classroom, students may rely on GitHub for activities such as, submitting assignments, collaborating on group projects, and receiving feedback. Despite GitHub's growing presence in programming classrooms, to date, few studies have explored how GitHub and the design of its implementation shape students' learning outcomes and classroom experiences. Building on previous research, we investigated how students in classrooms that used GitHub (GitHub classrooms), as opposed to classrooms that did not use GitHub (non-GitHub classrooms), differed across key variables. We surveyed 7530 students and 300 educators from GitHub and non-GitHub classrooms. Overall, we found that using GitHub in the classroom predicted better learning outcomes and classroom experiences. For example, students felt more prepared for the future, and they felt a greater sense of belonging in the classroom and in the field. Importantly, the design of implementation affected learning outcomes. For example, of the students who used GitHub in the classroom and received instructor feedback, those who received (versus did not receive) feedback via GitHub benefited more from the feedback. We discuss best practices for maximizing benefits to student learning when implementing GitHub in the classroom, study limitations, and future research directions. Our research is a step towards understanding how GitHub, a tool with a growing presence in programming classrooms, impacts students' learning experiences.	Using GitHub in the Classroom Predicts Student Learning Outcomes and Classroom Experiences: Findings from a Survey of Students and Teachers	NA:NA	2018
Craig Zilles	NA	Session details: Paper Session: Student Success	NA	2018
Efthimia Aivaloglou:Felienne Hermans	Programming education currently begins at the elementary school age. In this paper we are exploring what affects the learning performance of young students in programming classes. We present the results collected during an eight-week experimental Scratch programming course run in elementary schools. We emphasize factors that have been found to affect learning performance in adult students, including self-efficacy and motivation, and measure how they affect students of this age group. We further explore the students' view of programming as a career path, and measure the effects of the course, their performance, and the stereotypes that they assume for computer scientists. We find that students' intrinsic and extrinsic motivation and previous programming experience are important factors, being strongly correlated with their self-efficacy and their inclination towards a CS career. For female students only, we also find CS career orientation to be strongly correlated with their self-efficacy.	Early Programming Education and Career Orientation: The Effects of Gender, Self-Efficacy, Motivation and Stereotypes	NA:NA	2018
Diana R. Cukierman:Donna McGee Thompson:Wayne Sun	The Academic Enhancement Program (AEP) aims to help students succeed in their post-secondary studies by incorporating learning strategies and academic reflection activities into core first-year Computing Science (CS). Initially offered in a single CS course at our institution, the AEP has since been run as a required component in several CS courses. It has also been adapted collaboratively in other universities, and is customizable to other disciplines with plans to expand into other departments. We have regularly evaluated AEP based on students', academic advisors' and instructors' perceptions to support the continual improvement of the program. The current study relied on both students' self-perception and course performance data in two sections of the same course, with the same instructor, contents, and exams, where only students in one section participated in the program. Employing linear regression, this study sought to determine what non-trivial factors account for student success, measured by final exam scores. We determined that 22% of the variance in student success measured by final exam scores can be accounted for by basis of admission, admission GPA, number of credits registered in, and a newly defined construct embodying student CS programming background experience. While our model did not include AEP as a predictive factor, we are encouraged that 77% of AEP participants said that they would continue to use study skills learned in AEP in future courses. Implications for further investigation of learning support programs are discussed.	The Academic Enhancement Program: Assessing Programs Designed to Support Student Success	NA:NA:NA	2018
Iman YeckehZaare:Paul Resnick	In an introductory Python programming course intended for non-majors with little prior CS experience, with 85 male and 108 female students, we were able to capture electronic traces of students' studying and problem-solving. There was no significant difference in final exam scores by gender but we found that female students spent 12.1 more hours studying over the semester while male students on average earned 2.7 more points per hour of solving problem set questions over the first half of the semester. We were able to capture their learning behavior because students studied using the Runestone interactive textbook and completed weekly problem sets in the same platform for the first half of the semester. We analyzed these logs to determine three quantities for each student. One is study time, as measured by total use of Runestone outside of weekly assignments. The second is speed, as measured by the number of points students earned per hour working on problem sets. The third is earliness, as measured by how far before the deadlines they worked on weekly assignments. We conclude that male students were faster at completing problem sets early in the semester but that female students found an alternative pathway to success.	Speed and Studying: Gendered Pathways to Success	NA:NA	2018
Emily Lovell	NA	Session details: Paper Session: Instruments 2	NA	2018
Benjamin Xie:Matthew J. Davidson:Min Li:Andrew J. Ko	Tests serve an important role in computing education, measuring achievement and differentiating between learners with varying knowledge. But tests may have flaws that confuse learners or may be too difficult or easy, making test scores less valid and reliable. We analyzed the Second Computer Science 1 (SCS1) concept inventory, a widely used assessment of introductory computer science (CS1) knowledge, for such flaws. The prior validation study of the SCS1 used Classical Test Theory and was unable to determine whether differences in scores were a result of question properties or learner knowledge. We extended this validation by modeling question difficulty and learner knowledge separately with Item Response Theory (IRT) and performing expert review on problematic questions. We found that three questions measured knowledge that was unrelated to the rest of the SCS1, and four questions were too difficult for our sample of 489 undergrads from two universities.	An Item Response Theory Evaluation of a Language-Independent CS1 Knowledge Assessment	NA:NA:NA:NA	2018
Monica M. McGill:Adrienne Decker:Tom McKlin:Kathy Haynie	A growing body of evidence indicates that there is a deep effect of noncognitive factors on academic achievement and learning. In this study, we analyzed a set of 31 evaluation instruments designed to measure noncognitive constructs (e.g., self-efficacy, confidence, motivation) within computing education. Using the Lee and Shute framework, we assigned each of the 115 unique constructs found in the instruments into one of the four components (Student Engagement, Learning Strategies, School Climate, Social-familial Influences) and their subcomponents to determine which constructs are most frequently measured. We found that the majority of constructs were designed to measure Student Engagement (Affect and Cognition) and School Climate (Teacher Variables). Constructs measuring Learning Strategies and Social-Familial Influences (e.g., homework strategies, peer influences) occur the least. This study may enable further discussions of what noncognitive factors are/are not currently being measured within the computing education community.	A Gap Analysis of Noncognitive Constructs in Evaluation Instruments Designed for Computing Education	NA:NA:NA:NA	2018
Gayithri Jayathirtha:Yasmin B. Kafai	Just over a decade ago, various electronic textile construction kits have emerged with Arduino-based microcontrollers, sensors, and actuators that can be sewn together with conductive thread to create wearables augmented with new functionalities. These kits were designed to broaden participation in and perspectives about computing along with introducing learners to powerful ideas about circuitry and coding. In this paper, we synthesize 46 studies that have introduced crafts, circuitry, and coding concepts with e-textiles in K-16 education. We found that e-textiles have been successful in broadening participation and increasing interest in computing for many youth and adults, especially from underrepresented groups, inside and outside of school. While the e-textiles construction kits have been successful in deepening learning of circuitry concepts, learning of computer science, especially advanced concepts, has been far less attended to with the exception of projects designed by undergraduate students with already significant disciplinary expertise. In the discussion, we suggest directions for future research such as bringing more computing into e-textile designs, creating assessments to capture coding and circuitry learning, and developing models for more advanced projects to leverage the potential of e-textiles for computer science education.	Electronic Textiles in Computer Science Education: A Synthesis of Efforts to Broaden Participation, Increase Interest, and Deepen Learning	NA:NA	2018
Sotirios Kentros	NA	Session details: Paper Session: Security 1	NA	2018
Pranita Deshpande:Cynthia B. Lee:Irfan Ahmed	Peer instruction pedagogy is a student-centric approach that encourages students to read lecture material before coming to class and engages them in class via group discussion and preplanned conceptual questions. Peer instruction has shown promising results in core computer science courses such as Theory of Computation and Computer Architecture, as well as reducing failure rates and improving student retention in computer science major. This paper presents the results of the first-ever attempt to replicate these results in a cybersecurity course, using an action research methodology to implement and evaluate peer instruction in a semester-long cybersecurity course, Introduction to Computer Security. The evaluation consists of quizzes, subjective exams, peer instruction questions, and attitudinal surveys gathered over two control semesters and one peer instruction condition semester. We find evidence of learning gains during group discussion and improvements in dropout and failure rates compared to traditional lecture classes. In attitudinal surveys, most students report that they would recommend that other instructors use peer instruction.	Evaluation of Peer Instruction for Cybersecurity Education	NA:NA:NA	2018
Naja A. Mack:Kevin Womack:Earl W. Huff Jr.:Robert Cummings:Negus Dowling:Kinnis Gosha	Computing is not only a fundamental part of our daily lives - our national security depends on it. It is essential that members of the Reserve Officer Training Corps (ROTC) be well-versed in computing techniques designed to combat cyber-attacks that continually improve in sophistication and frequency levels. Through computer science education, prospective military leaders are being taught the critical and analytical thinking skills necessary to address these threats. This paper outlines and discusses how underrepresented minority Naval Reserve Officer Training Corps (NROTC) midshipmen, with the majority having little-to-no programming skills or background, were taught the foundational aspects of computer science and exposed to specific cybersecurity concepts in a 15-week program. The program produced many insightful outcomes, one being the development of a tool that collected and analyzed publicly available social media data through the application of data mining algorithms and techniques. Additionally, interviews, which were conducted upon the completion of the program, documented notable findings on the program's effectiveness and on key concepts for teaching computer science to minority beginners.	From Midshipmen to Cyber Pros: Training Minority Naval Reserve Officer Training Corp Students for Cybersecurity	NA:NA:NA:NA:NA:NA	2018
Pranita Deshpande:Irfan Ahmed	Concept maps are a well-known pedagogical tool for organizing and representing knowledge and developing a deep understanding of concepts. Unfortunately, the grading of concept maps tends to be manual and tedious thereby, posing serious limitation for an instructor to use them in class efficiently. To automate the assessment and grading, the topology and structural features of concept maps are utilized. However, they have never been explored for cybersecurity education. This paper evaluates the effectiveness of topological scoring of the concept maps for two cybersecurity courses: digital forensics, and SCADA system security. We create a dataset of 41 high-quality concept maps developed with expert knowledge. We utilize waterloo rubric to manually validate the quality of the concept maps based-on their contents and further compare the rubric outcome (obtained via manual analysis) with the automated topological scoring of the maps. The evaluation results show that the topological scoring is promising. However, it is not equally effective and warrants for advanced techniques to better utilize the topology of the maps. The dataset is made publicly available for further research on this topic.	Topological Scoring of Concept Maps for Cybersecurity Education	NA:NA	2018
Stephen H. Edwards	NA	Session details: Paper Session: Misconceptions	NA	2018
Leo C. Ureel II:Charles Wallace	The introductory programming lab, with small cycles of teaching, coding, testing, and critique from instructors, is an extraordinarily productive learning experience for novice programmers. We wish to extend the availability of such critique through automation, capturing the essence of interaction between student and instructor as closely as possible. Integrated Development Environments and Automated Grading Systems provide constant feedback through static analysis and unit testing. But we also wish to tailor automated feedback to acknowledge commonly recurring issues with novice programmers, in keeping with the practice of a human instructor. We argue that the kinds of mistakes that novice programmers make, and the way they are reported to the novices, deserve special care. In this paper we provide examples of early programming antipatterns that have arisen from our teaching experience, and describe different ways of identifying and dealing with them automatically through our tool WebTA. Novice students may produce code that is close to a correct solution but contains syntactic errors; WebTA attempts to salvage the promising portions of the student's submission and suggest repairs that are more meaningful than typical compiler error messages. Alternatively, a student misunderstanding may result in well-formed code that passes unit tests yet contains clear design flaws; through additional analysis, WebTA can identify and flag them. Finally, certain types of antipattern can be anticipated and flagged by the instructor, based on the context of the course and the programming exercise; WebTA allows for customizable critique triggers and messages.	Automated Critique of Early Programming Antipatterns	NA:NA	2018
Kathryn M. Rich:Carla Strickland:T. Andrew Binkowski:Diana Franklin	Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.	A K-8 Debugging Learning Trajectory Derived from Research Literature	NA:NA:NA:NA	2018
Maria Kallia:Sue Sentance	Computer programming is one of the most researched subjects within computer science education; within this much attention has been focused on exploring the difficulties and common misconceptions that students experience when learning to program. The study reported here has two aims: firstly, to investigate students' misconceptions around functions by setting up a programming test of advancing difficulty and complexity based on the Bloom and Solo taxonomies, and secondly, to explore the impact that misconceptions have on students' self-efficacy in programming, along with students' self-evaluation and self-efficacy in computer science. Our study revealed seven misconceptions in the area of functions, three of which have never before been reported in the literature, to our knowledge. Additionally, the results suggest that misconceptions do not only prohibit students' progress and learning but have a significant impact on students' self-efficacy in programming.	Learning to use Functions: The Relationship Between Misconceptions and Self-Efficacy	NA:NA	2018
N. Burçin Tamer	NA	Session details: Paper Session: Accessibility	NA	2018
Catherine M. Baker:Cynthia L. Bennett:Richard E. Ladner	As diversity efforts in computer science begin to recognize disabled programmers as an underrepresented group, we step back to chronicle the experiences of blind programmers in higher education. Through a survey and follow-up interviews with 10 blind programmers, we share reflections and barriers important for the computing education community to understand as we attempt to welcoming cultures for disabled programmers. Our findings illuminated a variety of barriers blind programmers faced in college and the impact that they had on their ability to succeed in the field. We found that barriers permeate all parts of these blind student's' education from accessing the materials and doing the homework to working with professors. These barriers increased feelings of the isolation, decreased motivation especially when tasks were inaccessible, and prevented them from learning all the concepts covered in their degree program.	Educational Experiences of Blind Programmers	NA:NA:NA	2018
Andreas Stefik:Richard E. Ladner:William Allee:Sean Mealin	The College Board's AP Computer Science Principles (CSP) content has become a major new course for introducing K-12 students to the discipline. The course was designed for many reasons, but one major goal was to broaden participation. While significant work has been completed toward equity by many research groups, we know of no systematic analysis of CSP content created by major vendors in relation to accessibility for students with disabilities, especially those who are blind or visually impaired. In this experience report, we discuss two major actions by our team to make CSP more accessible. First, with the help of accessibility experts and teachers, we modified the entire Code.org CSP course to make it accessible. Second, we conducted a one-week professional development workshop in the summer of 2018 for teachers of blind or visually impaired students in order to help them prepare to teach CSP or support those who do. We report here on lessons learned that are useful to teachers who have blind or visually impaired students in their classes, to AP CSP curriculum providers, and to the College Board.	Computer Science Principles for Teachers of Blind and Visually Impaired Students	NA:NA:NA:NA	2018
Emmanuel Schanzer:Sina Bahram:Shriram Krishnamurthi	Most programmers rely on visual tools (block-based editors, auto-indentation, bracket matching, syntax highlighting, etc.), which are inaccessible to visually-impaired programmers. While prior language-specific, downloadable tools have demonstrated benefits for the visually-impaired, we lack language-independent, cloud-based tools, both of which are critically needed. We present a new toolkit for building fully-accessible, browser-based programming environments for multiple languages. Given a parser that meets certain specifications, this toolkit will generate a block editor familiar to sighted users that also communicates the structure of a program using spoken descriptions, and allows for navigation using standard (accessible) keyboard shortcuts. This paper presents the toolkit and a first evaluation of it. While the toolkit allows for full editing of code, we chose to focus strictly on navigation for this evaluation, using the navigation-only study design of Baker, Milne and Ladner. Visually-impaired programmers completed several tasks with and without our tool, and we compared their results and experience. Users had improved accuracy when completing tasks, were significantly better able to orient when reading code, and felt better about completing the tasks when using the tool. Moreover, these improvements came with no significant change in task completion time over plain text, even for experienced programmers who navigate text using screen readers set to high words-per-minutes.	Accessible AST-Based Programming for Visually-Impaired Programmers	NA:NA:NA	2018
Afonso Sales	NA	Session details: Paper Session: Session 5G: Curriculum Issues 2	NA	2018
David Joyner:Ryan Arrison:Mehnaz Ruksana:Evi Salguero:Zida Wang:Ben Wellington:Kevin Yin	Large undergraduate CS courses receive thousands of code submissions per term. To help make sense of the large quantities of submissions, projects have emerged to dynamically cluster student submissions by approach for writing scalable feedback, tailoring hints, and conducting research. However, relatively little attention has been paid to the value of these tools for informing revision to core course materials and delivery methods. In this work, we applied one such technology-Sense, the eponymous product of its company-to an online CS1 class delivered simultaneously for credit to on-campus students and for free to MOOC students. Using Sense, we clustered student submissions to around 70 problems used throughout the course. In this work, we discuss the value of such clustering, the surprising trends we discovered through this process, and the changes made or planned to the course based on the results. We also discuss broader ideas on injecting clustering results into course design.	From Clusters to Content: Using Code Clustering for Course Improvement	NA:NA:NA:NA:NA:NA:NA	2018
Robert Ball:Linda Duhadway:Kyle Feuz:Joshua Jensen:Brian Rague:Drew Weidman	Creating curriculum with an ever-changing student body is difficult. Faculty members in a given department will have different perspectives on the composition and academic needs of the student body based on their personal instructional experiences. We present an approach to curriculum development that is designed to be objective by performing a comprehensive analysis of the preparation of declared majors in Computer Science (CS) BS programs at two universities. Our strategy for improving curriculum is twofold. First, we analyze the characteristics and academic needs of the student body by using a statistical, machine learning approach, which involves examining institutional data and understanding what factors specifically affect graduation. Second, we use the results of the analysis as the basis for applying necessary changes to the curriculum in order to maximize graduation rates. To validate our approach, we analyzed two four-year open enrollment universities, which share many trends that help or hinder students' progress toward graduating. Finally, we describe proposed changes to both curriculum and faculty mindsets that are a result of our findings. Although the specifics of this study are applied only to CS majors, we believe that the methods outlined in this paper can be applied to any curriculum regardless of the major.	Applying Machine Learning to Improve Curriculum Design	NA:NA:NA:NA:NA:NA	2018
Sander Valstar:William G. Griswold:Leo Porter	While it is widely believed that taking a class's prerequisites is critical for success, less is known about how proficiency with the prerequisite knowledge from those courses affects performance in later courses. Specifically, it is unclear how well students understand material from prerequisite courses and whether that understanding may impact their outcomes in the subsequent course. Additionally, in subsequent courses, do students strengthen their knowledge from prerequisite courses and, if they do, does that improvement matter for the subsequent course? This study examines the prerequisite knowledge of 208 students in an upper-division data structures class at a large North American research university. Prerequisite proficiency on entry to the course was surprisingly low, with nearly a third of students demonstrating low proficiency and only a quarter high proficiency. Students modestly improved their proficiency during the term, lifting a third of those with low proficiency to at least medium proficiency. Overall, final exam performance was significantly correlated with prerequisite knowledge. For those with low initial proficiency, improvement in proficiency was significantly correlated with performance on the final. These results suggest that more attention needs to be placed on reinforcing prerequisite knowledge for those with low proficiency.	The Relationship between Prerequisite Proficiency and Student Performance in an Upper-Division Computing Course	NA:NA:NA	2018
Marty J. Wolf:Don Gotterbarn:Michael S. Kirkpatrick	This special session will involve three related components. It will begin with a history of the ACM Code of Ethics and Professional Conduct (the Code), its evolving presence in the computing curriculum guidelines over time, and its documented use outside of academe. This will lead into an overview of the major changes to the Code that occurred in the most recent update. The third component and primary focus of the session will be to work with participants to identify ways that ACM and the ACM Committee on Professional Ethics (COPE) can help Computer Science educators integrate the Code as broadly as possible into diverse programs, ranging from Kindergarten to PhD-level. The outcome of the session would be a preliminary set of guidelines for programs and departments to adopt the Code, potential challenges to be addressed when formalizing those guidelines, and suggested approaches to resolve these difficulties. If attendance is sufficiently large, we would adopt a jigsaw model, breaking into smaller focus groups that are tasked with distinct portions of the Code. Each group reports back at the end, and members of COPE will collate the results into a document for future distribution and work.	ACM Code of Ethics: Looking Back and Forging Ahead	NA:NA:NA	2018
Amardeep Kahlon:Deborah Boisvert:Louise Lyon:Melanie Williamson:Wendy DuBow	While computer science (CS) jobs are growing rapidly, universities are not producing enough CS graduates to fill a projected shortage of almost a million workers by 2020 [1]. To add to this problem, there is a striking lack of diversity in the graduates of CS programs nationwide [2]. Of the degrees awarded, the overwhelming number - 80% - were awarded to males, while only 5% went to African-Americans, 18% to Asians, and 9% to Hispanics [3, 2]. Bringing community colleges (CCs) into the fold will enable us to confront this projected workforce shortage [2]. More importantly, it will enable us to diversify one of the most important fields of our time, computer and information sciences. Over half of community college (CC) students are non- white, and more than half of all Hispanic and Black undergraduates start at community college [4].	Four Models for Including Community Colleges in Broadening Participation: A Call to Action	NA:NA:NA:NA:NA	2018
Colleen M. Lewis:Wendy M. DuBow:Kyla McMullen	Many SIGCSE attendees are committed to inclusive teaching practices and creating an inclusive culture within their classrooms; yet, advocating for and sustaining these initiatives may require having difficult conversations with our colleagues and students. Understandably, many faculty are unsure about how to talk about sensitive topics such as race and gender with their colleagues and students. Research suggests that practicing some of these difficult conversations is essential to achieve the goals of inclusive teaching and culture. In our well attended session at SIGCSE in 2018, attendees learned strategies for responding to bias in academic settings. This was facilitated by playing two rounds of a research-based game developed by the NSF project CSTeachingTips.org (#1339404). This session will extend the work begun last year by helping attendees to replicate this activity with their colleagues. In this special session, attendees will first play the game to practice those strategies in small groups and will then receive facilitation tips and guidance for conducting this activity on their own. All attendees will receive a printed copy of the game and a link to download and print more copies.	Leading Conversations about Microaggressions, Bias, and Other Difficult Topics	NA:NA:NA	2018
Alison Derbenwick Miller:Christine Alvarado:Mehran Sahami:Elsa Villa:Stuart Zweben	This panel focuses on the challenges of collecting and analyzing data relating to retention of students in undergraduate computer science education programs. The panelists will share learnings and recommendations from the final report of the ACM Retention Committee and share their individual perspectives on data collection challenges, promising interventions, and recommendations for actively addressing retention for all students.	Wrestling with Retention in the CS Major: Report from the ACM Retention Committee	NA:NA:NA:NA:NA	2018
Ryan McFall:Zachary Kurmas:Phillip Conrad:Dennis Frailey	We believe that more Computing faculty should spend some time in industry in order to experience for themselves the types of jobs their students are likely to take at graduation and throughout their careers. Each panelist has spent at least one sabbatical in industry and found the experience to be far more beneficial than anticipated. We all found that our sabbatical experiences helped us to (1) develop our skills, (2) discover and practice the skills that are currently being used in industry, (3) gain credibility with our students, (4) improve our understanding of the computing profession beyond software development, and (5) build relationships with local businesses. Many of us returned to the classroom thinking "I can't believe they let me teach college without any industry experience".	Why and How to Spend a Sabbatical in Industry	NA:NA:NA:NA	2018
Leigh Ann Delyser	NA	Session details: Session: [email protected] - CS0	NA	2018
Thomas Babbitt:Charles Schooler:Kyle King	There is an immense interest in teaching computer science concepts- and programming specifically - to everyone. The United States Military Academy at West Point has required every student, regardless of major, to pass a computer science zero (CS0) course for the last 50 years: From punch cards to Python. We present a history of our CS0 course and the lessons learned from the most recent redesign of the course. We review the last decade of student assessments and how they influenced the latest iteration. We contrast the expectations of students in a CS0 course with those in a CS1 course. We discuss the national efforts to make CS accessible to all and explore the challenges unique to a CS0 course. We demonstrate similarities between our course and the Advance Placement CS Principles and show where differences are justified. We review the relevant pedagogical research for CS0 and present lessons learned over multiple iterations of the course. Based on our current course review and implementation, we believe that Computer Science for everyone is attainable and relevant to the needs of every student.	Punch Cards to Python: A Case Study of a CS0 Core Course	NA:NA:NA	2018
Barbara Anthony	NA	Session details: Paper Session: Physical Computing	NA	2018
Alexandra Gendreau Chakarov:Mimi Recker:Jennifer Jacobs:Katie Van Horne:Tamara Sumner	This experience report describes two iterations of a curriculum development process in which middle school teachers worked with our research team to collaboratively design and enact instructional units where students used sensors to investigate scientific phenomena. In this report, we examine the affordances of using a sensor platform to support the integration of disciplinary learning and computational thinking (CT) aligned with Next Generation Science Standards and the CT in STEM Taxonomy developed by Weintrop and colleagues. In the first unit, students investigated the conditions for mold growth within their school using a custom sensor system. After analyzing implementation experiences and student interest data, our team engaged in another round of co-design to develop a second instructional unit. This unit uses a different sensor system (the micro:bit) which supports additional CT in STEM practices due to its block-based programming interface and its real time data display. For the second unit we selected a different phenomenon: understanding and designing maglev trains.	Designing a Middle School Science Curriculum that Integrates Computational Thinking and Sensor Technology	NA:NA:NA:NA:NA	2018
Gabriella Anton:Uri Wilensky	National and state educational initiatives are increasingly prioritizing computer science and computational thinking as valued sets of skills and practices. However, despite ongoing efforts to broaden participation in computing, the field faces increasing underrepresentation of women and other racial and ethnic groups. In this paper, we argue that physical computing can provide rich, varied entryways into computing practices, and that kits that support social or collaborative use may be more compelling for underrepresented groups. We present the design of a scaled-up physical computing kit, called StegaCircuits, which we created to foster more social, exploratory introductions to computing. We present preliminary data collected during user tests at a Maker Faire that suggest StegaCircuits supports social introductions to physical computing through multi-user interaction. Finally, we highlight promising facets of the design that may positively impact cognitive and emotional responses to computing fields.	One Size Fits All: Designing for Socialization in Physical Computing	NA:NA	2018
Brian Krupp:Andrew Watkins	This paper presents our experience implementing a newly designed introduction to computing course for first year undergraduate students. The redesigned course focuses on the use of Raspberry Pi microcomputers as a common computing platform in order to encourage student experimentation and fun in a relatively low-cost environment. The course we describe represents a departure at our university from a traditional first-semester introduction to computing which emphasized foundational technical and mathematical skills but less exploration of the field of computing in a more wholistic manner. Our new course focuses on exposure to computing through experimentation. Additionally, it emphasizes community building among the students as well as affording them the opportunity to bring their creativity to bear in a final project showcase. As a result, the course is proving to be attractive not just to traditional computing majors but to a wider swath of the university community. This paper describes the topics selected in the redesign of the course, a summary of the labs involved, a discussion of assignments, and a description of the final project process. We discuss feedback received from students and the overall perception of the course among students and faculty. We also reflect on our experiences from redesigning the course and provide advice for those wishing to adopt a similar introductory course.	CS0: Introducing Computing with Raspberry Pis	NA:NA	2018
Victoria Hong	NA	Session details: Paper Session: Professional Skills	NA	2018
Jennifer K. Olsen:Armando Fox	A recent in-class exam in a software engineering course included a section in which students had to write code and/or tests under conditions they might face on real software engineering projects, including complex, multi-part coding questions in which later parts of the question build on earlier parts. To avoid "cascading penalties" on later questions that build on earlier ones, students could reveal the answer for any question during the exam for a "reveal penalty": If the student identified the correct place in the code to copy and paste the revealed answer, they would get 20% of the question points. That is, by simply revealing every answer and copy-pasting it correctly, even the weakest student should be able to achieve 20% of the points for the coding portion of the exam. In this paper, we study how students used this mechanism. Surprisingly, some students chose to take zero points for certain questions rather than revealing the answer, and some who asked for an answer to be revealed were unable to correctly incorporate it to get the question correct. We also find a correlation between student scores on the non-coding multiple-choice section of the exam, which had no hints/reveals available, and the coding section, even though students who performed poorly on the non-coding first half of the exam should have been able to score well on the coding part by using the reveal mechanism. That is, weak students did not benefit as much as would be expected from revealable answers. Pedagogical interpretation of these results informs our future use of the "buy a hint" format for coding-based exams.	Usage of Hints on Coding-Based Summative Assessments	NA:NA	2018
Lori Pollock	Computer science researchers spend significant time writing and presenting their research ideas to conference audiences, reviewers, funding agencies, collaborators, and other technical and general audiences. Good communication skills can increase a researcher's effectiveness and efficiency, while currently most students rely on their PhD mentor, technical writing courses, tutors, or self-teaching to improve their communication skills. This paper details a graduate level course to provide graduate students with a collaborative practicum in building strong communication skills for a technical research career in computer science. Each class meeting is activity-based, using collaborative small-group analysis of writing and presentation samples and peer reviewing with rubrics created by the students and refined by the instructor. Assignments require students to stretch their thinking and practice their communication skills. Students write weekly reflect blog entries guided by prompts to promote reflection about their communication experiences, challenges and successes. We summarize and reflect on initial outcomes from two instantiations of the course.	A Collaborative Practicum Targeting Communication Skills for Computer Science Researchers	NA	2018
Amanpreet Kapoor:Christina Gardner-McCune	Professional development is critical for preparing undergraduate CS students for their future careers. Industry internships offer students pathways for professional development. However, little is empirically known about the impact industry-based internships have on CS students' career paths as well as the effectiveness of CS degree programs in preparing students for these professional development opportunities. In this paper, we present a thematic analysis of open-ended survey responses of 40 CS undergraduate students in the US who participated in an internship. This study aimed to understand the impact that professional internships have on: CS students' career goals, students' perceptions of the gaps between academia and industry, and students' strategies for professional success. We found four themes that describe the impact of internships on CS students. Internships (1) strengthened students' commitment to CS degrees and careers; (2) encouraged exploration of CS careers and industries; (3) promoted personal/professional growth; and (4) developed awareness of professional expectations. We also analyzed students' perception of the curriculum's effectiveness and found that students were strategically working to improve their technical skills outside of coursework to secure employment. These findings have the potential to retain students in computing and reduce the gaps between academia and industry, thereby increasing CS students' competitiveness in the workforce.	Understanding CS Undergraduate Students' Professional Development through the Lens of Internship Experiences	NA:NA	2018
Bob Edmison	NA	Session details: Paper Session: Attitudinal	NA	2018
Dana Wanzer:Tom McKlin:Doug Edwards:Jason Freeman:Brian Magerko	Students who have positive attitudes towards computing are more likely to intend to persist in computing and ultimately persist in computing. Thus, this study describes the development and assessment of the Attitudes Towards Computing Scale, which was developed based on Williams et al. [20] Computer Science Attitude Survey. Assessment of the survey involved testing its reliability, dimensionality, and validity. Internal consistency reliability of the subscales and the total scale were strong. However, dimensionality tests using factor analysis did not support a five-factor structure; rather, the factor analyses suggested either using one item per subscale or mean composites of the subscales to form a total score of attitudes towards computing. This suggests there may not be meaningful differences among subscales. Tests of criterion validity show that the short-form of the scale, using a mean composite score of either one item per subscale or the composites of the subscales themselves, predict students' computing knowledge and intentions to persist just as well as using the subscales. Furthermore, an example is shown why using the subscales may be problematic due to multicollinearity issues. Recommendations for improving scales, such as not using reverse-coded items and having a sufficient number of items that differentiate between subscales, are provided. Ultimately, this study provides the computer science field with a scale of attitudes towards computing that demonstrates moderate validity and offers an example of how to assess other scales used in computer science education.	Assessing the Attitudes Towards Computing Scale: A Survey Validation Study	NA:NA:NA:NA:NA	2018
Hadi Hosseini:Laurel Perweiler	The use of gameful activities in education has been widely celebrated in recent years as an effective pedagogical method in engaging students, exciting cognitive abilities, and promoting mastery. Despite the popularity of game-based learning, to date, little has been done to analyze the impacts of introducing such interventions on students and instructors alike. We focus on hybrid teaching strategies that blend educational games with instructional scaffolding in introductory computer science teaching. We assess the effectiveness of incorporating these teaching strategies by leveraging various empirical evaluation techniques and study their impacts from three different dimensions: students' point of view, instructors' perspective, and students' performance. In addition, we establish correlations between students' approaches to learning and game-based learning, and further discuss how learning concentration and curiosity relate to students' perception of game-based activities.	Are You Game?	NA:NA	2018
Merilin Säde:Reelika Suviste:Piret Luik:Eno Tõnisson:Marina Lepp	A large number of students drop out in the first year of their Bachelor's studies in Computer Science (CS). It is a problem in many countries worldwide. The aim of this study was to develop a scale for measuring the motivation and perception factors that influence students' decision to start studying Computer Science (CS), and to find the differences between these factors. A questionnaire was conducted based on expectancy-value theory to measure students' motivation and perception. Data were collected from 140 students who started their Bachelor studies in CS at a university in Estonia. The scale, named FICSS (Factors Influencing Computer Science Studies), was conducted and validated using exploratory and confirmatory factor analyses. Two models were identified: a four-factor model describing students' motivation ("Intrinsic value", "Utility value", "Social influences" and "Time for family") and a five-factor model ("Satisfaction with choice of specialty", "Social dissuasion", "Demanding work", "Salary and job security" and "Social status") that describes students' perception. "Intrinsic value" and "Utility value" were the highest-rated motivational factors. The lowest-rated factor was "Social influences". Among the perception factors, the factors with the highest means were "Satisfaction with choice of specialty" and "Salary and job security" while "Social dissuasion" was rated lowest.	Factors That Influence Students' Motivation and Perception of Studying Computer Science	NA:NA:NA:NA:NA	2018
Carlos Cabrera	NA	Session details: Paper Session: Security 2	NA	2018
Monique Mezher:Ahmed Ibrahim	There is a lack of hands-on exercises in cryptanalysis offered at the university level for a variety of reasons. One reason is the high amount of computations needed to complete cryptanalysis attacks. However, enabling students to perform fixed prefix SHA-1 collision attacks on PDFs does not require any advanced computation power. This paper presents a hands-on exercise for university students and professionals to generate SHA-1 collisions. The exercise shows how SHA-1 is vulnerable to fixed-prefix collisions, and how students are able to leverage existing tools to create their own SHA-1 collisions between arbitrary PDF files. In our two classroom runs of the exercise, over 90% of the students who performed the exercise found it to be a useful tool to reinforce their knowledge of SHA-1 collisions. The exercise increases awareness about hash collisions and urges caution when dealing with digitally signed PDFs that utilize SHA-1 as their hashing mechanism. To our knowledge, this is the first exercise designed to introduce practical SHA-1 collisions for students in the classroom.	Introducing Practical SHA-1 Collisions to the Classroom	NA:NA	2018
Ákos Lédeczi:MiklÓs MarÓti:Hamid Zare:Bernard Yett:Nicole Hutchins:Brian Broll:Péter Völgyesi:Michael B. Smith:Timothy Darrah:Mary Metelko:Xenofon Koutsoukos:Gautam Biswas	The paper presents RoboScape, a collaborative, networked robotics environment that makes key ideas in computer science accessible to groups of learners in informal learning spaces and K-12 classrooms. RoboScape is built on top of NetsBlox, an open-source, networked, visual programming environment based on Snap! that is specifically designed to introduce students to distributed computation and computer networking. RoboScape provides a twist on the state of the art of robotics learning platforms. First, a user's program controlling the robot runs in the browser and not on the robot. There is no need to download the program to the robot and hence, development and debugging become much easier. Second, the wireless communication between a student's program and the robot can be overheard by the programs of the other students. This makes cybersecurity an immediate need that students realize and can work to address. We have designed and delivered a cybersecurity summer camp to 24 students in grades between 7 and 12. The paper summarizes the technology behind RoboScape, the hands-on curriculum of the camp and the lessons learned.	Teaching Cybersecurity with Networked Robots	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Maximilian Zinkus:Oliver Curry:Marina Moore:Zachary Peterson:Zoë J. Wood	As frequent users of social networking applications, middle and high school students are well-suited for curricular interventions that leverage these technologies. Allowing students to see "behind the curtain" of these applications provides them with a unique opportunity to better understand the discipline of computer science upon which these technologies are built and influences their perceptions of computer security and privacy. We present a novel social networking simulation that allows students to create a social network account, including profile data and images, and to manage privacy settings and friend connections. The platform, named Fakesbook, presents students with a visualization of the social network as a graph, enabling them to observe the spread of profile data (theirs and others') depending on friend connections and choices of privacy settings. We additionally present our lab curriculum which uses Fakesbook to enable active learning and adversarial thinking to engage students and build agency with regard to privacy and computing concepts. We deployed and, over several years, evaluated our platform and curriculum with hundreds of students from a diverse set of backgrounds at educational events designed to introduce these populations to computer science, cybersecurity, and privacy. Survey results indicate that students gained or deepened their understanding of online privacy and security and that 86% of participants found that Fakesbook helped them "think about privacy and computer security."	Fakesbook: A social networking platform for teaching security and privacy concepts to secondary school students	NA:NA:NA:NA:NA	2018
Meg Ray	NA	Session details: Paper Session: Computational Thinking 2	NA	2018
Megean Garvin:Heather Killen:Jan Plane:David Weintrop	Computational thinking (CT) is increasingly becoming a part of the K-12 educational landscape. While high schools with computer science teachers or technology coaches on staff are well positioned to help teachers integrate computational thinking into instruction, early childhood through middle schools (grades p-8) are often less well equipped. Further, the concept of CT is often poorly defined, especially as it relates to younger learners. Despite these challenges, teachers are being asked to integrate CT into other content lessons. To understand if and how this is happening, we conducted a statewide survey of primary (early childhood through middle school) Maryland teachers. The survey asked the teachers about their conceptualization of CT, CT resources they rely on, and their comfort levels to provide effective CT instruction for their students. The results of our survey demonstrate that teachers hold diverse views of the concept of CT and use a varied set of instructional resources in their classrooms. The contribution of this work is in helping advance our understanding of the current state of CT in primary classrooms.	Primary School Teachers' Conceptions of Computational Thinking	NA:NA:NA:NA	2018
Yihuan Dong:Veronica Catete:Robin Jocius:Nicholas Lytle:Tiffany Barnes:Jennifer Albert:Deepti Joshi:Richard Robinson:Ashley Andrews	One way to increase access to education on computing is to integrate computational thinking (CT) into K12 disciplinary courses. However, this challenges teachers to both learn CT and decide how to best integrate CT into their classes. In this position paper, we present PRADA, an acronym for Pattern Recognition, Abstraction, Decomposition, and Algorithms, as a practical and understandable way of introducing the core ideas of CT to non-computing teachers. We piloted the PRADA model in two, separate, week-long professional development workshops designed for in-service middle and high school teachers and found that the PRADA model supported teachers in making connections between CT and their current course material. Initial findings, which emerged from the analysis of teacher-created learning materials, survey responses, and focus group interviews, indicate that the PRADA model supported core content teachers in successfully infusing CT into their existing curricula and increased their self-efficacy in CT integration.	PRADA: A Practical Model for Integrating Computational Thinking in K-12 Education	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Line Have Musaeus:Peter Musaeus	Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to inform high-school teachers how to foster students' development of CT in computer science and other subjects. Evidence suggests that agent-based modeling is a valuable way for students to learn CT in different subjects. This paper reports a teaching experiment where researchers, developers, and high school teachers collaborated to develop six NetLogo models. The models were used in nine Danish High Schools in the following four subjects: Biotechnology, chemistry, biology, and social science. Teachers and students had no or very limited experience with programming. Students build CT and content knowledge by using, modifying, and creating code in the models. This paper provides details for others to adopt the models and the underlying CMC framework, which integrates: Coding, Modeling, and Content. The paper evaluates the results from an open-ended questionnaire with all participating students (n=210) and semi-structured interviews with all teachers (n=15). Thematic analysis was applied to categorize the qualitative data. Results showed that students were able to use, modify, and create code in NetLogo that enabled them to develop CT and content knowledge. The CMC framework represents a fruitful way for teachers to design and teach and for students to tinker with learning CT.	Computational Thinking in the Danish High School: Learning Coding, Modeling, and Content Knowledge with NetLogo	NA:NA	2018
Gursimran S. Walia	NA	Session details: Paper Session: Systems	NA	2018
Michael Abebe:Brad Glasbergen:Khuzaima Daudjee	The ubiquity of distributed computing systems has led to an increased focus on distributed systems in the undergraduate curriculum. In this paper, we describe the design of, and our experiences with, a new distributed systems project where students implement the core components of a distributed file system called WatDFS. The WatDFS project enables students to meet learning objectives from across the distributed systems curriculum and interact with real systems, while providing a high-quality testing environment that yields actionable feedback to students on their submissions.	WatDFS: A Project for Understanding Distributed Systems in the Undergraduate Curriculum	NA:NA:NA	2018
Ke Zhang:Yisong Chang:Mingyu Chen:Yungang Bao:Zhiwei Xu	Computer Organization and Design (COD) is a fundamentally required early-stage undergraduate course in most computer science and engineering curricula. During the two sessions (lecture and project part) of one COD course, educational platforms play an important role in cultivating students' computational thinking, especially the ability of viewing the hardware and software in a computer system as a whole (computer system thinking ability for short in this paper). In order to improve teaching quality, in this paper, we discuss the deployment of an inexpensive in-house Field Programmable Gate Array (FPGA) cloud platform, which can provide students with hardware-software co-design methodology and practice. The platform includes 32 FPGA nodes and the scale can be dynamically changed. Each cloud node is heterogeneously composed of an ARM processor and a tightly-coupled reconfigurable fabric to provide students with hands-on hardware and software programming experiences. We illustrate our efforts to make the FPGA cloud as an easy-to-use resource pool to elastically support a class with 92 undergrads via Internet access and to monitor students' experimental behaviors. We also present key insights in our teaching activities that indicate such appliance is feasible to provide practice of both basic principles and emerging co-design techniques for students. We believe that our cost-effective FPGA cloud is of significant interests to educators looking forward to improving computer system-related courses.	Computer Organization and Design Course with FPGA Cloud	NA:NA:NA:NA:NA	2018
Joel C. Adams:Elizabeth R. Koning:Christiaan D. Hazlett	Classic synchronization problems are often used to introduce students to the subtleties of concurrency and synchronization mechanisms, such as semaphores, monitors, locks, and condition variables. The Dining Philosophers, Producers-Consumers, and Readers-Writers are all classic problems in which a correct solution requires the actions of multiple processes or threads to be synchronized. In this paper, we present visualizations for these three problems and describe their use as pedagogical tools to help students build accurate mental models of concurrency abstractions such as starvation, deadlock, livelock, and correct execution. We also present the results of an experiment that indicate students find using these visualizations to be significantly more engaging than reading a textbook, with no significant difference in learning. We do not claim that our visualizations should replace a course text; rather we present them as engaging pedagogical tools to complement the textbook in courses on Operating Systems, Programming Languages, and other courses where concurrency and synchronization are covered.	Visualizing Classic Synchronization Problems: Dining Philosophers, Producers-Consumers, and Readers-Writers	NA:NA:NA	2018
Ria Galanos	NA	Session details: Paper Session: CS1 2	NA	2018
Cruz Izu:Cheryl Pope:Amali Weerasinghe	Iteration is one of the basic programming constructs taught in a CS1 course. Students learn to use loops by being exposed to a range of loop examples, initially with scalar values and then over composite data such as vectors. When writing a finite loop to iterate over a vector, we can iterate upwards or downwards. In many cases, the order does not change the outcome; however, for some tasks it is important to consider which direction is most suitable before writing a solution. For example, if we want to shift the elements of a vector one position to the right (left), we should choose a downward (upward) loop. However, when we asked undergraduate students to implement the shift right task, most of them used an upward loop. This outcome indicates the students didn't consider the loop direction before coding the iterative task. We hypothesise that this was in part due to course materials favouring upward loops. To confirm this hypothesis, we have analysed the examples presented in our local CS0/CS1 courses as well as four popular MOOCs. This analysis has corroborated an overwhelming bias towards upward loops. We have also found a lack of instruction regarding the possible impact of direction on code efficiency. Thus, in order to improve novice programmers' iteration skills, we propose CS1 examples that expose students to a more balanced mix of up/down loops and the explicit choice of direction.	Up or Down?: An Insight into Programmer's Acquisition of Iteration Skills	NA:NA:NA	2018
Elisabeth Sulmont:Elizabeth Patitsas:Jeremy R. Cooperstock	Machine learning (ML) has become an important topic for students across disciplines to understand because of its useful applications and its societal impacts. At the same time, there is little existing work on ML education, particularly about teaching ML to non-majors. This paper presents an exploration of the pedagogical content knowledge (PCK) for teaching ML to non-majors. Through ten interviews with instructors of ML courses for non-majors, we inquired about student preconceptions as well as what students find easy or difficult about learning ML. We identified PCK in the form of three preconceptions and five barriers faced by students, and six pedagogical tactics adopted by instructors. The preconceptions were found to concern themselves more with ML's reputation rather than its inner workings. Student barriers included underestimating human decision in ML and conflating human thinking with computer processing. Pedagogical tactics for teaching ML included strategically choosing datasets, walking through problems by hand, and customizing to the domain(s) of students. As we consider the lessons from these findings, we hope that this will serve as a first step toward improving the teaching of ML to non-majors.	Can You Teach Me To Machine Learn?	NA:NA:NA	2018
Jennifer Campbell:Andrew Petersen:Jacqueline Smith	This report documents the implementation of a self-paced, mastery learning inspired CS1 course. The course was designed to increase the completion rates observed in flipped and online CS1 formats already offered at our institution. We explore the experience of students in the course and evaluate performance outcomes using grade data from all three CS1 formats, student survey responses, and exit interviews. Our evaluation identifies three main challenges in our implementation. First, the course requires significant resources and administering it is significantly more time consuming for instructors than a regular course. Second, students hesitated to treat mastery quizzes as formative. Finally, the flexibility that the course provided, with little structure and few incentives to help students stay on track, led to considerable procrastination. These factors combined to lead students to delay coursework until the end of the semester -- and beyond. As a result, while our data shows an increase in completion relative to the online format, we saw no change in completion relative to the flipped CS1 offering and saw no change in student performance as evaluated by a final exam. However, students reported more deep engagement with and understanding of the material, which encourages us to further develop the course.	Self-paced Mastery Learning CS1	NA:NA:NA	2018
Colleen M. Lewis:Daniel D. Garcia:Helen H. Hu:Saber Khan:Nigamanth Sridhar:Bryan Twarek:Chinma Uche	SIGCSE is packed with teaching insights and inspiration. However, we get these insights and inspiration from hearing our colleagues talk about their teaching. Why not just watch them teach? This session does exactly that. Six exceptional educators will present their favorite piece of innovative lecture content just as they would their students. The moderator, Colleen Lewis, will describe the central pedagogical move within the innovation and how this connects to education research. The goal of the session is to inspire SIGCSE attendees by highlighting innovative instruction by exceptional educators. The specific content of the innovative instruction may be applicable for some attendees, and the discussion of the underlying pedagogical move within each innovation can be applied across the attendees' teaching.	Microteaching: Recursion, Coding Style, Creative Coding, Inheritance and Polymorphism, Loops, and the Internet	NA:NA:NA:NA:NA:NA:NA	2018
Jeffrey Forbes:Jumee Song:Louise Ann Lyon:Leslie Maxwell:Cindy Tucker	As traditional tech talent pools are being been tapped out and unable to meet the growing workforce demand, matriculation at a community college and transfer to a four-year institution for completion of a bachelor's degree plays a crucial role in diversifying the tech workforce. However, the important role of community colleges in the computer science education pipeline is often overlooked. This panel will provide an overview of the computing workforce landscape, discuss the role of community colleges to increase the diversity of students in computer science, and share case studies that highlight promising practices for the inclusion of community colleges in the CS educational pathway.	Community College Transfer Pathways	NA:NA:NA:NA:NA	2018
Darci Burdge:Gregory W. Hislop:Grant Braught:Josh Dehlinger:Christian Murphy:Joanna Klukowska:Lynn Lambert:Patricia Ordonez:Karl R. Wurst	This special session is intended for people who are curious about integrating Humanitarian Free and Open Source Software (HFOSS) into their courses and involving students in HFOSS projects. HFOSS participation provides an excellent vehicle to introduce students to computing for social good while also giving them experience with real-world software development. The session will begin with a series of lightning talks by faculty who have incorporated HFOSS participation into one or more of their courses. This will be followed by a small group activity to allow attendees to ask questions and discuss individual interests in integrating HFOSS activities and to become familiar with HFOSS educational resources available for instructors. The session will conclude with some closing comments on current and planned activities of instructors who are teaching with HFOSS and suggestions for faculty who would like to pursue this teaching approach themselves.	Curious about Student Participation in Humanitarian Open Source Software?	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Alison Derbenwick Miller	NA	Session details: Session: [email protected] - Broadening Participation	NA	2018
Mathilde Collain:Deborah Trytten	Margolis and Fisher's book, Unlocking the Clubhouse (UTC), has long been regarded as seminal to the understanding of the lack of gender diversity in computing. This book found that boys and girls had different experiences with computers in the home and school environment, and that these different experiences had a direct impact on the desire of students to study computing. We wanted to know if the explanations Margolis and Fisher found were applicable for students in a more typical CS program in 2017, so we conducted a study to investigate the home and pre-college experiences of students who are currently majoring in CS or Computer Engineering (CE), and these students' pathway into computing majors. We recruited 11 participants from a large public institution in the Midwest U.S., and conducted interviews of these students using a protocol adapted from UTC. We performed a qualitative iterative and inductive analysis of these interviews and found that while technology access had greatly improved, views and attitudes were much slower to change. We discovered that fathers preferentially teaching sons about computing, while less prevalent than it was in UTC, still occurs. We also found that the participants, including the women, had more diverse pathways into computing than what Margolis and Fisher found. This suggests that UTC needs to be fully replicated at broad range of institutions to get a more complete picture of the multitude of pathways women use to enter into computing careers.	"You don't have to be a white male that was learning how to program since he was five"	NA:NA	2018
Elizabeth K. Hawthorne	NA	Session details: Keynote	NA	2018
Blair Taylor	First, the bad news - Cybersecurity is here to stay. Threats are escalating and organizations are increasingly vulnerable. Hackers are smarter, there are more of them, and they continue to wreak havoc across critical infrastructure systems. There is a huge, growing shortfall of cyber talent. All students, and especially computer science students, need to learn cyber, but there is an acute shortage of cybersecurity faculty. The good news - Cybersecurity is here to stay. We continue to need skilled cyber workers. Students like cyber. Cyber can draw more students to Computer Science and create opportunities for Computer Science faculty. Dr. Blair Taylor will share her experiences building cyber curriculum from the classroom perspective and from her experience working with NSA to build a National Cybersecurity Curriculum Program.	Cybersecurity is Not a Fad: Why Cyber is a Game Changer for Computer Science Education	NA	2018
Diana Cukierman	NA	Session details: Paper Session: Professional Development 1	NA	2018
Siu-Cheung Kong:Andrew Chan-Chio Lao	To promote computational thinking (CT) education in primary schools, in-service teachers need to attend CT teacher development programmes. One of the intended learning outcomes of the programme is to improve CT practices of teachers, which is one of the three key elements in the CT framework proposed by Brennan and Resnick. Assessing one's CT practices is challenging because there is no universally agreed-upon assessment method on CT practices in the existing literature. This study adopted the Evidence-centered Assessment Design (ECD) method to design test questions to evaluate teachers' development of CT practices. This study provided two Teacher Development Courses (TDCs) to enable teachers to teach CT through programming. TDC 1 focused on developing CT concepts, practices and perspectives of teachers, while TDC 2 put emphasis on pedagogies of teaching CT. 80 teachers participated in the two courses. The CT practices tests were administered before the courses, between the two courses and after the courses respectively. Results indicated that CT practices were improved progressively when the in-service teachers attended the two courses. It indicated that it is useful for teachers to experience programming practices in their initial learning as well as during their pedagogical development.	Assessing In-service Teachers' Development of Computational Thinking Practices in Teacher Development Courses	NA:NA	2018
Saba Kawas:Laura Vonessen:Andrew J. Ko	Most CS students learn little about accessibility in higher education; this is partly because most CS faculty know little about accessibility. Unfortunately, higher education CS faculty lack a model of professional development for learning to teach new topics. Therefore, we investigated the feasibility of a "micro" professional development model for teaching accessibility in CS courses that could be used at scale. We conducted 18 semi-structured interviews with U.S. CS faculty, asking them to explore a prototype of a web-based professional development tool that linked accessibility topics to CS topics. We found that many organizational factors limited faculty's autonomy to integrate accessibility in many of their courses. We also found that individual values and knowledge constrained faculty's ability and willingness to both learn and integrate accessibility topics into their courses. However, many faculty expressed desire to teach accessibility in their courses if they had access to even basic accessibility content and materials to use in their courses.	Teaching Accessibility: A Design Exploration of Faculty Professional Development at Scale	NA:NA:NA	2018
Aarathi Prasad	NA	Session details: Paper Session: REU	NA	2018
Ben Jelen:Julia Dunbar:Susan Monsey:Olivia K. Richards:Katie A. Siek	In this paper, we describe how we integrated the Affinity Research Group (ARG) model into a 10-week summer research experience for undergraduates (REU) over the last three years. Each summer, ten REU students participated in: an annual two-day team-building orientation; a four day long ramp-up session to learn about REU projects and the skill sets they would need to master; weekly meetings with graduate and faculty mentors to define objectives, deliverables, and progress; and weekly skill development workshops to learn how to conduct research, prepare for future endeavors, and present oneself in professional settings. A total of seven faculty and twelve graduate students participated in ARG model process meetings to ensure students received comparable experiences and facilitated professional development activities. We provide an overview of our REU ARG model experience and reflect on improvements based on faculty mentor, graduate mentor, and undergraduate researchers' experiences.	Utilizing the Affinity Research Group Model in a Summer Research Experience for Undergraduates Program	NA:NA:NA:NA:NA	2018
Suzanne Menzel:Katie A. Siek:David Crandall	This paper describes the design and implementation of a three-day intensive research experience (IRE) workshop for undergraduate women in Computer Science. Expanding on a model pioneered at Carnegie Mellon University, we developed and piloted a regional variant called HelloResearch at Indiana University. Participants were actively recruited from our own and neighboring states. Industry partners provided travel scholarships for low-income and first-generation college students, people with disabilities, and students at Historically Black Colleges and Universities (HBCUs) across the country. The primary goal of HelloResearch was to encourage the pursuit of research careers, enabling participants to reach the highest levels of leadership in their fields. In this paper, we report on the demographics of our 92 participants, outline best practices to ensure an authentic short-term research experience for the students, describe our assessment plans, and share our survey instruments to assist others in jump-starting their own regional workshops.	Hello Research! Developing an Intensive Research Experience for Undergraduate Women	NA:NA:NA	2018
Brian Harrington	NA	Session details: Paper Session: Expectations	NA	2018
Tony Mason:Ada Gavrilovska:David A. Joyner	We outline how we detected programming plagiarism in an introductory online course for a master's of science in computer science program, how we achieved a statistically significant reduction in programming plagiarism by combining a clear explanation of university and class policy on academic honesty reinforced with a short but formal assessment, and how we evaluated plagiarism rates before and after implementing our policy and assessment.	Collaboration Versus Cheating: Reducing Code Plagiarism in an Online MS Computer Science Program	NA:NA:NA	2018
Brett A. Becker:Thomas Fitzpatrick	A well-received ITiCSE 2016 paper challenged the orthodox view that programming is hard to learn. It contended that CS1 educators' expectations are too high, which can result in poor teaching and learning, and could impact negatively on diversity and equity. The author posed a challenge to the community to collect research-based evidence of what novice programmers can achieve, and use evidence to derive realistic expectations for achievement. We argue that before rising to this challenge we must determine: What exactly do educators expect of introductory programming students? This paper presents our efforts toward answering this question. We manually curated hundreds of CS1 syllabi, providing a fresh perspective of expectation in CS1 courses. We analyzed learning outcomes and their concepts, in addition to languages utilized and other useful CS1 design and delivery information. This work contributes to a current picture of what is expected of introductory programming students, and provides an interactive online tool linked to all collected syllabi and containing all learning outcomes and other associated information. We hope this will aid the community in deciding whether or not we have unrealistic expectations of our CS1 students and if so, our contributions provide a starting point for the community to adjust them.	What Do CS1 Syllabi Reveal About Our Expectations of Introductory Programming Students?	NA:NA	2018
Alison Clear	NA	Session details: Paper Session: Outreach	NA	2018
Briana B. Morrison:Brian Dorn:Michelle Friend	Computational Thinking Bins are stand alone, individual boxes, each containing an activity for groups of students that teaches a computing concept.We have a devised a system that has allowed us to create an initial set, test the set, continually improve and add to our set. We currently use these bins in outreach events for middle and high school students. As we have shared this resource with K-12 teachers, many have expressed an interest in acquiring their own set. In this paper we will share our experience throughout the process, introduce the bins, and explain how you can create your own set.	Computational Thinking Bins: Outreach and More	NA:NA:NA	2018
Allison Mishkin	This paper applies self-determination theory (SDT), a macro-psychological theory of human motivation to explore what gets young women interested in computer science. SDT argues that when students feel equally competent, autonomous, and related to others, they will be intrinsically motivated to study. This paper applies SDT to young women in computer science to identify the best ways to motivate them towards intrinsic motivation to study computer science. Using a survey administered at Bit by Bit, a conference for young women in computer science, this paper identifies that relatedness is significantly more important for girls than either competency or autonomy. Additionally, it determines the psychological pathway through which feeling related to others influences students' motivation. Specifically, it determines that feeling related to others influences young women's sense of self-efficacy, which improves their computer science motivation. These findings contribute to our understanding of SDT and of how to motivate young women to study computer science.	Applying Self-Determination Theory towards Motivating Young Women in Computer Science	NA	2018
Shanon Reckinger	NA	Session details: Paper Session: Theory & Math	NA	2018
Nikki Sigurdson:Andrew Petersen	Experts and practitioners have long published reflections on how mathematics connects with computer science and how best to integrate mathematics within computing education. However, little literature exists that investigates this area empirically. One recent study used in-depth interviews to generate a theory of the relationship between student perceptions of mathematics and their attitude toward computer science. However, this theory is based on interactions with a limited number of students. Our study tests this theory in a larger population. We present a survey-based exploration of the attitudes 218 undergraduate computer science students hold on mathematics. We present quantitative evidence that supports the theory that student career inclinations are correlated with beliefs about mathematics. We also present additional qualitative data, obtained from free-response sections of the survey, that support the idea that student inclinations affect both their perception of the value of mathematics and academic decisions such as course selection.	A Survey-based Exploration of Computer Science Student Perspectives on Mathematics	NA:NA	2018
Megan Fowler:Michelle Cook:Kevin Plis:Tim Schwab:Yu-Shan Sun:Murali Sitaraman:Jason O. Hallstrom:Joseph E. Hollingsworth	Several research studies have shown the benefits of code tracing to promote student understanding of program behavior. While code tracing on specific input values is a useful starting point, students ultimately need to be able to reason rigorously and logically about the correctness of their code on all (i.e., arbitrary) inputs. Otherwise, they may make false generalizations and may achieve only a shallow understanding. Results of a multi-semester experiment to answer the following research questions: (1) With or without steps, can students learn the basics of tracing code on symbolic input values using an online tool? And how important is classroom instruction? (2) What is the impact of motivation on student attitudes in learning to reason with such a tool? Data was obtained from 297 subjects who used the online reasoning tool in a second-year software development course for CS majors. Analysis indicates that students can do symbolic reasoning to trace code and that instruction and motivation have significant impact.	Impact of Steps, Instruction, and Motivation on Learning Symbolic Reasoning Using an Online Tool	NA:NA:NA:NA:NA:NA:NA:NA	2018
Albert Chan	NA	Session details: Paper Session: Pair Programming	NA	2018
Hans Yuan:Yingjun Cao	Pair programming has been widely adopted as an effective pedagogical tool in CS1/2. The successful execution of pair programming depends on each partner contributing similar amounts of work. However, anecdotes from past research observed that some student pairs can contribute a drastically unequal amount towards their assignments. We address this through a pilot of a hybrid pair programming model. Here, students complete two halves of the assignment as independent programmers and then in partnerships. We conducted a randomized experiment on this model in a CS1 class and found that while pairs generally performed better than solo students in the checkpoint, pairs in the second stage who had worked independently during the checkpoint portion tend to be more resistant to sudden increases in difficulty. We found no significant difference on selected exam problems between the control and experiment groups. We identified lower contributors within pairs and these students showed improved scores on most exam questions directly related to their independent checkpoint work. Survey feedback on hybrid pair programming is positive. The hybrid model is easily adopted in CS classes and positions students to better face the obstacles presented by the assignment while allowing them to benefit from pair programming.	Hybrid Pair Programming - A Promising Alternative to Standard Pair Programming	NA:NA	2018
Kimberly Michelle Ying:Lydia G. Pezzullo:Mohona Ahmed:Kassandra Crompton:Jeremiah Blanchard:Kristy Elizabeth Boyer	Women continue to be underrepresented in computer science. Previous research has identified factors that contribute to women's decisions to pursue computing-related majors, but in order to truly address the problem of underrepresentation, we need to develop a deeper understanding of women's experiences within computer science courses. Pair programming is demonstrably beneficial in many ways, and we hypothesize that there are gender differences in student perceptions of this widely used collaboration framework. To explore these differences and move toward a thorough understanding of students' experiences, this paper investigates students' written responses about their experiences with pair programming in a university-level introductory computer science course. Using thematic analysis, we identified overarching themes and distinguished between what men and women reported. Both women and men wrote about their overwhelmingly positive perceptions of pair programming. Women often mentioned that pair programming helps with engagement, feeling less frustrated, building confidence, and making friends. Women also noted that it is easier to learn from peers. These findings shed light on how pair programming may lower barriers to women's participation and retention in computing and inform ongoing efforts to create more inclusive spaces in computing education.	In Their Own Words: Gender Differences in Student Perceptions of Pair Programming	NA:NA:NA:NA:NA:NA	2018
Joshua Elder	NA	Session details: Paper Session: CSP	NA	2018
Heather Killen:David Weintrop:Megean Garvin	The introduction of the Advanced Placement (AP) Computer Science Principles course changed the high school computer science (CS) landscape in the United States. For the first time an AP course was designed to broaden participation in computing and attract all students as opposed to being designed to challenge the highest performing students. The goal was to design a rigorous and comprehensive CS high school course that highlighted the breadth of the field of CS beyond just programming. With the course first offered for AP credit in the 2016-2017 school year, this study explores how this -introductory advanced" CS course impacted high school CS class offerings. Using data from a state-wide survey and the Maryland Longitudinal Data System Center (MLDSC), we found inconsistent impacts with the AP Computer Science Principles introduction. Some schools increased the number of CS courses while other schools decreased CS course offerings. This was counter to our expectation of an increase in CS classes at the high school level across the state. Responses from a teacher survey yielded insight into this unexpected outcome and informed explanations for these changes.	AP Computer Science Principles' Impact on the Landscape of High School Computer Science using Maryland as a Model	NA:NA:NA	2018
Steven McGee:Ronald I. Greenberg:Randi McGee-Tekula:Jennifer Duck:Andrew M. Rasmussen:Lucia Dettori:Dale F. Reed	This study investigated patterns in the development of computational thinking and programming expertise in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Prior research on programming expertise has identified three general areas of development --- program comprehension, program planning, and program generation. The pedagogical practices in ECS are consistent with problem solving approaches that support the development of programming expertise. The study took place in a large urban district during the 2016--17 school year with 28 ECS teachers and 1,931 students. A validated external assessment was used to measure the development of programming expertise. The results indicate that there were medium-sized, statistically significant increases from pretest to posttest, and there were no statistically significant differences by gender or race/ethnicity. After controlling for prior academic achievement, performance in the ECS course correlated with performance on the posttest. With respect to specific programming concepts, the results also provide evidence on the progression of the development of programming expertise. Students seem to develop comprehension and planning expertise prior to expertise in program generation. In addition, students seem to develop expertise with concrete tasks prior to abstract tasks.	An Examination of the Correlation of Exploring Computer Science Course Performance and the Development of Programming Expertise	NA:NA:NA:NA:NA:NA:NA	2018
Henry M. Walker:John F. Dooley	The submission and review process for the SIGCSE Symposium has evolved dramatically over the last half-century, reflecting changing expectations among SIGCSE members and advancing capabilities of technology. For almost 30 years, postal mail provided the vehicle for both paper submissions and reviews, and logistical constraints prevented the involvement of reviewers outside North America. Initial electronic submission and review options experimented with new technology and opened reviewing to SIGCSE members internationally. With growing experience, the home-grown submission and review system included new capabilities and could be expanded to additional conferences. Recently, cloud-based software has evolved to provide strong support for professional conferences. Over the years, the scale of the submission and reviewing process also has increased dramatically. In 1968, 18 papers were accepted from "over 40" submissions, whereas 161 papers were accepted from 459 submissions in 2018. This scale of activity impacts the overall process, and the software systems have required substantial alterations. Throughout, the focus of the submission and review system has remained the same: a fair, peer-reviewed system with a large number of volunteer reviewers, a quick turnaround of all reviews, and ease of use for all the stakeholders - contributors, attendees, reviewers, meta-reviewers, conference leaders, and system administrators. This article explores the evolution of the SIGCSE submission and review system, focusing on the last twenty years. Each phase of development highlights interactions among stakeholder interests, technological capabilities, and logistical requirements for handling the scope of papers submitted	The History of the SIGCSE Submission and Review Software: From Paper to the Cloud?	NA:NA	2018
Valerie Summet	NA	Session details: Paper Session: Professional Development 2	NA	2018
Hannah E. Chipman:Fernando J. Rodríguez:Kristy Elizabeth Boyer	The computer science education community has made great strides in promoting diversity and inclusion in computing fields and bringing K-12 CS learning opportunities to broader groups of learners. However, one area that has not been investigated fully is how assessments can influence a learner's confidence and attitudes towards CS. Stereotype threat and test modality have been shown to affect the performance of CS test takers. This experience report examines how novice CS learners respond to a CS assessment by investigating an increasingly important group of novice CS learners: K-8 classroom teachers. We conducted focus groups with elementary and middle school teachers as part of a week-long CS professional development workshop. The focus groups were held after teachers completed pre- and post-assessments. The assessment instrument featured multiple-choice and short-answer questions with block-based programming snippets. Many teachers reported a positive disposition towards learning CS after completing the pre-assessment, which they attributed to having a growth mindset. Themes related to their confidence involved the difficulty and format of the assessment, with comments about difficulty reducing after the post-assessment. When asked about their thoughts on the assessment from the perspective of their students, they provided suggestions with particular attention to its format. These findings provide insight for CS assessment design and implementation, as well as support further research on the impact of assessments on CS learners.	"I Impressed Myself With How Confident I Felt": Reflections on a Computer Science Assessment for K-8 Teachers	NA:NA:NA	2018
Martin Ukrop:Valdemar Švábenský:Jan Nehyba	Many starting teachers of computer science have great professional skill but often lack pedagogical training. Since providing expert mentorship directly during their lessons would be quite costly, institutions usually offer separate teacher training sessions for novice instructors. However, the reflection on teaching performed with a significant delay after the taught lesson limits the possible impact on teachers. To bridge this gap, we introduced a weekly semi-structured reflective practice to supplement the teacher training sessions at our faculty. We created a paper diary that guides the starting teachers through the process of reflection. Over the course of the semester, the diary poses questions of increasing complexity while also functioning as a reference to the topics covered in teacher training. Piloting the diary on a group of 25 novice teaching assistants resulted in overwhelmingly positive responses and provided the teacher training sessions with valuable input for discussion. The diary also turned out to be applicable in a broader context: it was appreciated and used by several experienced university teachers from multiple faculties and even some high-school teachers. The diary is freely available online, including source and print versions.	Reflective Diary for Professional Development of Novice Teachers	NA:NA:NA	2018
Paulina Haduong:Karen Brennan	K--12 introductory programming experiences are often highly scaffolded, and it can be challenging for teachers and learners to transition from these scaffolded experiences to experiences of learner-directed creative work, where learners are solving problems and fluently expressing ideas through code. Learners can often "get stuck" in this creative process due to a number of different factors: (1) imagination, (2) concepts, (3) bugs, (4) doubt, and (5) pedagogy. Teachers can support learners in overcoming these factors, but K--12 computing teachers often have minimal preparation and lack computer science backgrounds. However, effective professional development can support teachers in developing the computing skills and pedagogical frameworks for facilitating powerful learning experiences for young people. In this paper, we describe the design and implementation of Getting Unstuck, a 21-day, email-based learning experience for K--12 teachers interested in developing greater familiarity and fluency with Scratch. More than 1,900 people subscribed to the mailing list, with 400 people completing at least one day and 73 people completing all 21 days of activities. Participants received a daily email that invited them to: (1) create a Scratch project in response to a creative prompt that focused on a particular programming concept or Scratch feature, (2) share their work in the online community, and (3) reflect on their learning. We discuss our design decisions and how participants responded to them. We hope that this rich description of the course design will offer insights and inspiration for other CS educators who are designing similar K--12 professional development experiences.	Helping K--12 Teachers Get Unstuck with Scratch: The Design of an Online Professional Learning Experience	NA:NA	2018
Janet Davis	NA	Session details: Paper Session: Mentorship	NA	2018
Tam Nguyen Thanh:Michael Morgan:Matthew Butler:Kim Marriott	With the massive growth of online learning, there has been a decrease in students' face-to-face interactions, leading to rising feelings of isolation. This in turn contributes to several issues such as motivation loss, increased course attrition rates and poor learning experiences. Strong Online Learning Communities (OLCs) have been suggested as a means to help improve the situation, however the formation of OLCs is strongly influenced by learners' individual characteristics and their preferences regarding how and with whom they would want to form study groups. Taking students as its focus, this research attempts to develop a learning partner recommender system (LPRS) to facilitate finding compatible study peers in order to promote informal learning communities among students. From a synthesis of related literature and using data from a study of the student' preferences, a collection of learners' individual characteristics has been identified as a set of matching criteria in our LPRS model. A proof of concept based on the conceptual model has been developed and evaluated with a small group of target users. Results of the investigation showed positive feedback from participants and good prospects of the recommender system.	Perfect Match: Facilitating Study Partner Matching	NA:NA:NA:NA	2018
Chao Mbogo	The Kenyan university education system has been criticized for graduating students who are underprepared to meet the skills demand of the modern workplace, and who cannot formulate effective solutions to our most pressing socio-economic problems. To address the skills gap for Computer Science (CS) students, a structured 6-month mentorship program was designed to offer skills in personal and professional development, innovation, scholarship application, and community engagement. This paper presents the results of a mixed-method study comprising of 95 CS students from 12 Kenyan universities who have participated in the mentorship program since September 2016. The study examines if structured mentorship leads to successful upskilling for CS students. The findings indicate that at least 81% of the students in the mentorship program improve in skills such as innovation and professional preparedness. Results from this study demonstrate how CS education can be complemented with a structured mentorship model towards global competitiveness.	A Structured Mentorship Model for Computer Science University Students in Kenya	NA	2018
Heather Pon-Barry:Audrey St. John:Becky Wai-Ling Packard:Barbara Rotundo	The MaGE Training curriculum prepares computer science students for the task of inclusive peer mentoring and teaching. The curriculum raises awareness of the role of social identity in learning, emphasizes active learning within computer science, and provides preparation for technical code review. This article presents an overview of the MaGE Training curriculum where it has been used to train six cohorts of near-peer mentors and its impact on more than 500 students at a liberal arts college. While rapid growth in course enrollments has presented many challenges, results suggest that the MaGE curriculum has helped to address some of these challenges by maintaining high quality feedback to, and close interaction with, introductory students. Effectiveness is evidenced through increases in mentor self-efficacy, positive impact on student belongingness and continued enrollment, and reports of buffering the instructor workload. The flexibility of the curriculum is supported through a set of modules that can be engaged with via in-person discussions or viewed remotely. This enables easier adoption of the curriculum for use at other institutions.	A Flexible Curriculum for Promoting Inclusion through Peer Mentorship	NA:NA:NA:NA	2018
Gloria Washington	NA	Session details: Paper Session: Engagement	NA	2018
Beryl Hoffman:Ralph Morelli:Jennifer Rosato	The Mobile CS Principles (Mobile CSP) course is one of the NSF-supported, College Board-endorsed curricula for the new Computer Science Principles AP course. Since 2013, the Mobile CSP project has trained more than 700 teachers, and the course has been offered to more than 20,000 students throughout the United States. The organizing philosophy behind the Mobile CSP course is that student engagement in the classroom is the key to getting students, especially those traditionally underrepresented in CS, interested in pursuing further study and careers in CS. The main strategies used to engage Mobile CSP students are: (1) a focus on mobile computing throughout the course, taking advantage of current student interest in smartphones; (2) an emphasis on getting students building mobile apps from day one, by utilizing the highly accessible App Inventor programming language; and (3) an emphasis on building creative, 'socially useful' apps to get students thinking about ways that computing can help their communities. In this paper we present and summarize two years of data of various types (i.e., student surveys, teacher surveys, objective assessments, and anecdotal reports from students and teachers) to support the hypothesis that engagement of the sort practiced in the Mobile CSP course not only helps broaden participation in CS among hard-to-reach demographics, but also provides them with a solid grounding in computer science principles and practices.	Student Engagement is Key to Broadening Participation in CS	NA:NA:NA	2018
Mourya Reddy Narasareddygari:Gursimran S. Walia:Debra M. Duke:Vijayalakshmi Ramasamy:James Kiper:Debra Lee Davis:Andrew A. Allen:Hakam W. Alomari	Programming is a skill, often acquired through repeated practice and feedback. During traditional lectures, students not actively engaged in their own learning. It is imperative to pique students motivation and direct their focus on gaining the requisite knowledge. As the class size grows, instructors feedback is delayed that impacts student engagement and learning. Educational researchers have supported using web-based tools to help evaluate student work, provide timely feedback and increase the amount of time they spend improving their skills. Motivated by the previous work, our team has developed the SEP-CyLE (Software Engineering and Programming Cyber Learning Environment) - a cyber learning environment that contains digital learning content of software programming and testing concepts. SEP-CyLE incorporates collaborative learning, social networking and gamification-based learning engagement strategies (LESs) that has led to an improved motivation and understanding of programming concepts. This paper aims to assess the impact of different combinations of these LESs on student learning in the context of CS1 classrooms. We coordinated studies at two universities wherein different combination of LESs were utilized using SEP-CyLE in CS1 classrooms. We analyzed the impact of LESs on students' acquisition of programming concepts, their engagement and usage of SEP-CyLE. The pre and post test results indicated that the assorted LEs have shown a positive impact on student learning across all the institutions. The correlation results demonstrated that there is meaningful relationship between the LEs and the student performance.	Evaluating the Impact of Combination of Engagement Strategies in SEP-CyLE on Improve Student Learning of Programming Concepts	NA:NA:NA:NA:NA:NA:NA:NA	2018
Shuchi Grover:Patrik Lundh:Nicholas Jackiw	Programming-in a text-based or visual language-is a complex activity that novices find difficult to learn. In this paper, we present an experience report on how novel activities designed for early conceptual exploration can support middle school students' engagement with and learning of foundational programming concepts beginning programmers often struggle with, specifically, variables, expressions (Boolean, arithmetic, relational), loops, and abstraction. We drew on mathematics education research on dynamic representations to design and develop a set of four non-programming, (open access) web-based, interactive activities and micro-worlds and two unplugged activities as part of a suite of activities that can be embedded in a typical introductory programming curriculum to introduce learners to the target concepts before they encounter them in programming. This report describes the activities as well as our experience with their use as part of an introductory computer science course in three diverse, urban, middle school classrooms in the US	Non-Programming Activities for Engagement with Foundational Concepts in Introductory Programming	NA:NA:NA	2018
Jennifer Parham-Mocello	NA	Session details: Paper Session: Access	NA	2018
Jocelyn Simmonds:Francisco J. Gutierrez:Cecilia Casanova:Cecilia Sotomayor:Nancy Hitschfeld	In Latin America, computational thinking workshops are mostly developed in urban areas, charging participation fees. And although teachers are increasingly being expected to include technology in their classrooms, computational thinking and programming are not mandatory topics in teacher training programs. This hinders the development of digital skills among Latino students, and we expect that the digital gap between urban and rural populations will expand over time, especially in socio-economically vulnerable populations. Believing that teachers can be agents of change, we designed a 12 hour workshop to train the K-8 teaching staff in a rural and vulnerable school. The goal of this experience was to help these teachers develop basic computational thinking skills and devise new ways to incorporate what they learned in their classrooms. In this paper, we report our experience facilitating this workshop, and analyze the teacher perceptions before and after the intervention. Teacher attitudes changed drastically during the execution of the workshop, and they were able to come up with creative ways of incorporating computational thinking activities into their subjects. The reported experience can be used as input to develop public policies with respect to how computational thinking should be introduced in rural and vulnerable environments.	A Teacher Workshop for Introducing Computational Thinking in Rural and Vulnerable Environments	NA:NA:NA:NA:NA	2018
Jean Salac:Max White:Ashley Wang:Diana Franklin	Major metropolitan school districts around the United States are implementing computer science in elementary school classrooms as part of the CS for All (CS4All) initiative. Little is known, however, about the success of such a large-scale rollout, especially in terms of equity. In this study we analyze the performance of 4th grade classrooms completing three modules of an introductory computational thinking curriculum, looking at not only overall results but also the variance in performance between high-, mid-, and low-performing schools (as identified by their school report cards). We find that all classrooms are benefiting from the computational thinking (CT) curriculum, making great strides in providing equitable access to CT education. However, statistically-significant differences in performance are present, especially between the high- and low-performing schools, showing that there is still room for improvement in developing strategies and curricula for struggling learners.	An Analysis through an Equity Lens of the Implementation of Computer Science in K-8 Classrooms in a Large, Urban School District	NA:NA:NA:NA	2018
Jayce R. Warner:Carol L. Fletcher:Ryan Torbey:Lisa S. Garbrecht	Students living in rural areas are less likely to attend schools that offer computer science (CS) courses largely because educational institutions in these remote areas lack the resources to staff teaching positions for these courses. This study investigated the impact of WeTeach\_CS, a program designed to train teachers to become certified to teach high school CS in Texas. The WeTeach\_CS collective impact model may be well suited to influence rural areas at scale because it utilizes an existing network of organizations across the state to bring high-quality professional development opportunities to teachers in remote areas. Results from a comparative interrupted time series analysis showed a significant, positive change in the rate in which the number of certified CS teachers in rural areas increased during the period of time after WeTeach\_CS began compared to the period before the program was implemented, whereas the number of teachers certified in technology applications showed no such change. Furthermore, the growth rate in the number of certified CS teachers was much higher for rural schools than urban, suggesting that collective impact models like WeTeach\_CS may be especially beneficial for rural communities.	Increasing Capacity for Computer Science Education in Rural Areas through a Large-Scale Collective Impact Model	NA:NA:NA:NA	2018
Andrew J. Ko	NA	Session details: Paper Session: Culture & Language	NA	2018
Sara Vogel:Christopher Hoadley:Laura Ascenzi-Moreno:Kate Menken	Bilingual education has described a process called translanguaging by which students use linguistic resources across and beyond multiple named languages to learn. Here, we examine how bilingual learners translanguage while learning computer science. These middle schoolers participated in a curricular intervention which infused computational thinking into their Spanish-English bilingual language arts class. Through a descriptive qualitative methodology, we document classroom moments supporting four claims: 1) students' translanguaging blurs linguistic, disciplinary, and modal boundaries, 2) computational literacies are intertwined with students' other literacies, 3) students' attitudes about language and the contexts around them play a role in their translanguaging, and 4) students translanguage to engage in specific CT practices.	The Role of Translanguaging in Computational Literacies: Documenting Middle School Bilinguals' Practices in Computer Science Integrated Units	NA:NA:NA:NA	2018
James Davis:Michael Lachney:Zoe Zatz:William Babbitt:Ron Eglash	Broadening the participation of underrepresented students in computer science fields requires careful design and implementation of culturally responsive curricula and technologies. Culturally Situated Design Tools (CSDTs) address this by engaging students in historic, cultural, and meaningful design projects based on community practices. To date, CSDT research has only been conducted in short interventions outside of CS classrooms. This paper reports on the first semester-long introductory CS course based on CSDTs, which was piloted with 51 high school students during the 2017-2018 school year. The goal of this study was to examine if a culturally responsive computing curriculum could teach computer science principles and improve student engagement. Pre-post tests, field notes, weekly teacher meetings, formative assessments, and teacher and student interviews were analyzed to assess successes and failures during implementation. The results indicate students learned the conceptual material in 6 months rather than in the 9 months previously required by the teacher. Students were also able to apply these concepts afterward when programming in Python, implying knowledge transfer. However, student opinions about culture and computing didn't improve, and student engagement was below initial expectations. Thus we explore some of the many challenges: keeping a fully integrated cultural curriculum while satisfying CS standards, maintaining student engagement, and building student agency and self-regulation. We end with a brief description for how we intend to address some of these challenges in the second iteration of this program, scheduled for fall 2018. After which a study is planned to compare this curriculum to others.	A Cultural Computing Curriculum	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:Deborah A. Fields:Debora A. Lui:Justice T. Walker:Mia S. Shaw:Gayithri Jayathirtha:Tomoko M. Nakajima:Joanna Goode:Michael T. Giang	Many efforts of curricula design have concentrated on expanding participation in K-12 CS education by introducing innovative approaches but few have focused on addressing longstanding equity issues through their choices of culturally relevant materials and activities. In this paper, we describe our efforts in using electronic textiles which include Arduino-based microcontrollers that are sewn with conductive thread on fabrics to connect actuators and sensors and create interactive wearables. We report on the implementation of an electronic textiles curricular unit in the Exploring Computer Science introductory computing course in 13 high schools involving 272 high school students largely from underrepresented groups in a major metropolitan school district. We examined two issues relevant to broadening equitable participation in CS: (1) students' changed perceptions of computing, and (2) students' depth of learning of computing, circuitry and crafting in the final project. Pre/post surveys on students' perceptions of computing showed positive, significant gains in students' self-confidence in solving CS problems, fascination with computing and ability to be creative with computing. Teacher evaluations of students' final projects revealed robust learning in the areas of basic programming and computational circuitry as well as strong learning across more challenging computational concepts, with room for growth. We discuss factors that impacted student outcomes and outline steps for further analysis.	Stitching the Loop with Electronic Textiles: Promoting Equity in High School Students' Competencies and Perceptions of Computer Science	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Brandon Myers	NA	Session details: Paper Session: Inclusion	NA	2018
Heather Thiry:Sarah Hug	This paper builds from over a decade of engagement with an equity-focused initiative, the Computing Alliance for Hispanic Serving Institutions, an effort to both transform and supplement the educational experiences of computing students attending HSIs. This grassroots effort engages faculty, primarily department chairs in computer science and computer engineering programs at Hispanic-serving Institutions, in developing and implementing research-based educational practices to support the recruitment, retention, and advancement of Hispanics in computing fields. While we have addressed how CAHSI activities influence student experiences in becoming computer scientists in other work [1,2,3] we turn to the faculty to understand how faculty at Hispanic Serving Institutions act on their roles as educators at institutions with traditions of inclusive missions in a technical field. The research questions that direct the paper are: How do faculty perceive their role in educating underrepresented students in STEM? How do institutional contexts and current events in computing education constrain and support faculty action towards equitable practice in computing?	How Faculty Negotiate	NA:NA	2018
Jeff Gray:Kathy Haynie:Fran Trees:Owen Astrachan:Chinma Uche:Siobhan Cooney:Richard Kick	The Advanced Placement Computer Science Principles (AP CSP) course was the culmination of an eight-year NSF/College Board pilot project that exceeded all expectations in terms of enrollment in its first two official years. Four NSF-sponsored projects and six other projects have endorsed AP CSP curricula and professional development (PD), a first for an AP course. In this paper, we report on an NSF-sponsored multi-year effort to infuse cooperative learning (CL) structures into AP CSP classrooms to improve class participation and student learning. As we report, CL structures have been beneficial for both new and experienced teachers and across the curricula of the endorsed providers. Since AP CSP was designed to engage all learners, the CL structures used in our PD workshops and the CL resources designed by participating teachers in our project have the potential to positively impact all AP CSP classrooms. Research was conducted on the extent to which use of CL structures impacted student efficacy and student achievement. Three cohorts of AP CSP teachers participated in PD that focused on AP CSP pedagogical content knowledge using CL structures. A cumulative 143 teachers attended one-week PD workshops spanning July 2015, 2016, and 2017. We studied the effect of CL structures on student learning using AP scores as an outcomes measure. Use of CL structures was a statistically significant and positive predictor of student AP scores for participating classes in cohorts 2 and 3. Additionally, the use of pair programming was a significant and positive predictor of AP scores.	Infusing Cooperative Learning into AP Computer Science Principles Courses to Promote Engagement and Diversity	NA:NA:NA:NA:NA:NA:NA	2018
Sukanya Kannan Moudgalya:Kathryn M. Rich:Aman Yadav:Matthew J. Koehler	The representation of women in computer science (CS) is low in the United States and has been declining over the past few decades. Prior research has demonstrated that educators play an important role in increasing gender diversity. Not much, however, is known about their views regarding gender diversity in CS. Educators are often isolated as the only ones teaching CS in their schools, with limited opportunity to converse with each other about the underrepresentation of women in CS and other issues facing the field. Thus, to better understand educators rq questions and concerns about gender diversity, we conducted a qualitative exploratory study within an online discussion forum, Stack Exchange for CS educators. The conversations gave us insights into gender diversity issues that the forum members were interested in, such as enrollment, retention, and roles of teachers. We also analyzed the lenses through which the forum members spoke about gender representation. Results from this study suggest that researchers need to continue to examine educator perceptions so that we can design appropriate online teacher communities, teacher education courses, and professional development workshops to address equity and gender diversity issues in CS.	Computer Science Educators Stack Exchange: Perceptions of Equity and Gender Diversity in Computer Science	NA:NA:NA:NA	2018
Denise Case	NA	Session details: Paper Session: Blocks	NA	2018
Yihuan Dong:Samiha Marwan:Veronica Catete:Thomas Price:Tiffany Barnes	Tinkering has been shown to have a positive influence on students in open-ended making activities. Open-ended programming assignments in block-based programming resemble making activities in that both of them encourage students to tinker with tools to create their own solutions to achieve a goal. However, previous studies of tinkering in programming discussed tinkering as a broad, ambiguous term, and investigated only self-reported data. To our knowledge, no research has studied student tinkering behaviors while solving problems in block-based programming environments. In this position paper, we propose a definition for tinkering in block-based programming environments as a kind of behavior that students exhibit when testing, exploring, and struggling during problem-solving. We introduce three general categories of tinkering behaviors (test-based, prototype-based, and construction-based tinkering) derived from student data, and use case studies to demonstrate how students exhibited these behaviors in problem-solving. We created the definitions using a mixed-methods research design combining a literature review with data-driven insights from submissions of two open-ended programming assignments in iSnap, a block-based programming environment. We discuss the implication of each type of tinkering behavior for learning. Our study and results are the first in this domain to define tinkering based on student behaviors in a block-based programming environment.	Defining Tinkering Behavior in Open-ended Block-based Programming Assignments	NA:NA:NA:NA:NA	2018
Satabdi Basu	Free-choice, open-ended projects are commonly used to assess student learning in introductory block-based programming (BBP) environments. They are generally assessed in school based on criteria such as the social impact conveyed, whether the projects work without errors, and whether they are creative and engaging. Additionally, researchers have assessed such projects based on the frequency of use of various coding constructs like variables, conditionals, and iterations. This paper presents a novel multi-dimensional rubric for analyzing open-ended BBP projects that integrates assessment of front-end project design and back-end sophistication of use of coding constructs. Further, the novelty of the rubric lies in the fact that instead of relying solely on frequencies, it uses scaled scores based on sophistication of rubric components. Using this rubric, 160 Scratch and App Inventor projects were scored and analyzed. The paper establishes external validity of the rubric and examines what we can learn about student learning from this analysis. Our findings will help K-12 CS educators and curriculum developers recognize what aspects of CS middle school students need most support on, and how to leverage programming environments to provide this support.	Using Rubrics Integrating Design and Coding to Assess Middle School Students' Open-ended Block-based Programming Projects	NA	2018
David Weintrop:Heather Killen:Talal Munzar:Baker Franke	The success of block-based programming environments like Scratch and Alice has resulted in a growing presence of the block-based modality in classrooms. For example, in the United States, a new, nationally-administered computer science exam is evaluating students' understanding of programming concepts using both block-based and text-based presentations of short programs written in a custom pseudocode. The presence of the block-based modality on a written exam in an unimplemented pseudocode is a far cry from the informal, creative, and live coding contexts where block-based programming initially gained popularity. Further, the design of the block-based pseudocode used on the exam includes few of the features cited in the research as contributing to positive learner experiences. In this paper, we seek to understand the implications of the inclusion of an unimplemented block-based pseudocode on a written exam. To do so, we analyze responses from over 5,000 students to a 20 item assessment that included both block-based and text-based questions written in the same pseudocode as the national exam. Our analysis shows students performing better on questions presented in the block-based form compared to text-based questions. Further analysis shows that this difference is consistent across conceptual categories. This paper contributes to our understanding of the affordances of block-based programming and if and how the modality can help learners succeed in early computer science learning experiences.	Block-based Comprehension: Exploring and Explaining Student Outcomes from a Read-only Block-based Exam	NA:NA:NA:NA	2018
Frieda McAlear:Allison Scott:Kimberly Scott:Jamika Burge:Sonia Koshy	Women of color comprise a critical segment of the United States population, yet they remain underrepresented in computing education and the workforce and often overlooked in data collection and reporting, research, and interventions to increase diversity in computing. This panel of researchers will provide an overview of the current challenges facing women of color, and highlight initiatives to develop, test, and scale strategies to improve the outcomes of women of color in computing. This panel aims to increase audience understanding of the challenges and opportunities, while inspiring the audience to take action and apply emerging insights and strategies to their local contexts, in order to improve outcomes for women of color. The intention is that this panel is not merely intended to highlight programs, but more importantly, to begin to strategically, scientifically, and collaboratively improve the outcomes for women and girls of color across the computing pipeline. The intended audience for this panel include K-12 computing educators, computing faculty, education nonprofit leaders, researchers and the philanthropic community.	Women and Girls of Color in Computing: Exploring Current Trends, Emerging Opportunities, and Strategies for Meaningful Impact	NA:NA:NA:NA:NA	2018
Jason T. Black:Kamau Bobb:April Browne:Phillip T. Conrad:Colleen M. Lewis:Cherly A. Swanier:Sheila Tejada	The goal of the session is to help attendees who are committed to diversity and inclusion learn to talk about different dimensions of identity (e.g., race, class, gender, sex, sexuality, etc.). The landscape of terms is always changing and we want SIGCSE attendees to feel more comfortable using current language to talk about issues related to diversity and inclusion. This special session will include six lightning talks, individual reflection, small-group discussion, and a Q&A with presenters. This is a reprise of a special session held at the NCWIT Summit in 2018; it was well received and we hope to offer it to the larger SIGCSE audience.	Demystifying Language about Students' Varied Identities	NA:NA:NA:NA:NA:NA:NA	2018
Nick Parlante:Julie Zelenski	NA	Session details: Nifty Assignments	NA:NA	2018
Nick Parlante:Julie Zelenski:Benjamin Dicken:Ben Stephenson:Jeffrey L. Popyack:William M. Mongan:Kendall Bingham:Diane Horton:David Liu:Allison Obourn	The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce the assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials - handouts, data files, starter code, rubrics - that make each assignment ready to adopt. Each assignment presented has complete materials freely available on the Nifty Assignments home page nifty.stanford.edu. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Maya Israel:Shireen Hafeez:Emmanuel Schanzer:Rebecca Dovi:Emma Koslow:Todd Lash	Computer science (CS) education is rapidly expanding in the United States[4]. That said, the CS education field is still grappling with coming to consensus about definitions of K-12 CS and how to reach all students. While the CS education community has made great efforts to expand opportunity for under served groups, students with disabilities have regularly been left out of the conversation. According to the National Center for Education Statistics, approximately 13% of all students enrolled in public schools in the US receive special education services and 95% of these students are taught either part or full time in the regular classroom[3] . One aim of CSforALL is to increase equity in CS education and opportunities[5]. Recent studies have examined the challenges faced by students with disabilities in K12 CS education[1][2]. Including students with disabilities in CS classes not only increases their access to academic and career opportunities in CS, but it also gives them the opportunity to develop new ways of thinking and participating in the world that they would otherwise be potentially without. This panel addresses the inclusion of students with disabilities as part of the national all and seeks to augment the discussion initiated by the CSforALL Consortium and AccessCSforALL with the introduction of the Accessibility Pledge at the annual CSforALL Summit. This panel brings together four different experts, with a wide range of experience in regards to computer science education and students with disabilities, in an effort to expand both the national conversation and increase efforts related to including students with disabilities equitably in CS education. In this panel we present a group of CS education community members who represent multiple approaches to accessibility and serving students with disabilities, as well as diverse implementations; peer-to-peer mentoring, initiatives focused on a single subpopulation of students with disabilities, curriculum and platform providers, and district and state-wide solutions. The panelists, and the organizations they represent have a diversity of experiences to share, including current high school students and parents of students with disabilities.	Panel: Making K-12 CS Education Accessibility a Norm, not an Exception	NA:NA:NA:NA:NA:NA	2018
Paul Ruvolo:Darakhshan Mir:Zachary Dodds	CS majors are certainly not disappearing, but the interest and demand for computing from non-CS majors is a far larger part of our future, as members of CS departments, than those on the disciplinary-major path. As computing evolves from valuable specialty to a professional literacy, CS departments face several challenges. How do we support both the traditional CS-major path and provide computing curriculum to a far broader audience? How do we partner with sibling departments in order to foster their sense of ownership and identity with computing's mindsets and toolsets? And, perhaps especially poignant in 2018, how do we invest energy into the CS-for-All future during a time that demand in our major pathway is at historic highs? This workshop distills the experiences of three faculty members who have tried to answer these questions within the context of their departments. The presenters will share the results of those experiments, will offer hands-on exploration of a representative subset of the curricular materials, and will scaffold a strategic discussion of CS's future and identity in the era of "CS for All."	Embracing our Future: CS Courses and Curriculum for Non-CS-majors	NA:NA:NA	2018
Suzanne J. Matthews:Joel C. Adams:Richard A. Brown:Elizabeth Shoop	The ACM/IEEE CS 2013 report recommends fifteen hours of parallel & distributed computing (PDC) education for every undergraduate. This workshop illustrates the use of the Raspberry Pi as an inexpensive, multicore platform for teaching shared-memory parallel programming. The inexpensive and tactile nature of the Raspberry Pi enables each student to experience her own parallel multiprocessor through sight and touch. In this hands-on workshop, we will teach attendees how they can leverage the Raspberry Pi and the OpenMP library to teach shared-memory parallel concepts in their own classrooms. All CS educators who are interested in learning about the Raspberry Pi, shared memory parallelism, and OpenMP are encouraged to attend. In Part I of the workshop, each participant will connect to and learn about the Raspberry Pi's multicore capabilities. In Part II, each participant will engage in self-paced, hands-on exploration of basic parallel computing concepts using the OpenMP "patternlets" from CSinParallel.org. In Part III, participants will investigate more complex applications, such as numeric integration and drug design and study how these applications can be parallelized using OpenMP. We will conclude the workshop with a series of lightning talks discussing how the Raspberry Pi has been used to teach parallel computing concepts at different institutions. We will also present a summary of student perceptions of the Raspberry Pi. All materials from this workshop will be freely available from CSinParallel.org. Space is limited to 20 participants. A laptop is required.	Exploring Parallel Computing with OpenMP on the Raspberry Pi	NA:NA:NA:NA	2018
James W. McGuffee:David L. Largent:Christian Roberson	As proposed by Linda B. Nilson in "Specifications Grading: Restoring Rigor, Motivating Students, and Saving Faculty Time", specifications grading is an assessment construct that relies on pass/fail grading of assignments and assessments, the structuring of course content into modules linked to learning outcomes, and the bundling of assignments and assessments within those modules. One of the intentions of this type of course grading construct is to more closely align assessment with student attainment of intended learning outcomes. While there has been very visible work in incorporating specifications grading in some academic areas (e.g. in mathematics), examples of the use of specifications grading in computer science courses are less common. The goal of this workshop is to introduce the concepts of specifications grading, explain how to apply these concepts to a wide range of computing courses, and have the participants apply these concepts to one of their current or upcoming computer science courses. Each participant should leave the workshop with at least one revised course syllabus or assignment that incorporates specifications grading.	Transform Your Computer Science Course with Specifications Grading	NA:NA:NA	2018
Stephanie E. August:S. Megan Che:Eileen T. Kraemer:Mark Pauley:Murali Sitaraman	You develop a plan for testing the prototype for a new learning strategy in your class or across institutions. How can you ensure that your plan is clearly understood by reviewers and the managing NSF program officer? What goes through the reviewer's mind once a proposal is submitted? What prompts one proposal to be recommended for funding but another declined? Close examination of the panel review process can inform proposal writing and ensure that reviewers will understand an idea, identify its merit, and value a PI's vision of how the work will broaden participation in STEM education. This workshop steps through the NSF proposal review process from submission of proposal to award or decline, touching on NSF intellectual merit and broader impact criteria, mapping the project pipeline to appropriate evaluation. Participants gain insight into writing a good review and improving one's own proposal writing. For further information and travel support see: https://people.cs.clemson.edu/~etkraem/UPCSEd/. Laptops recommended.	Narratives and Evaluation: How to Write Competitive NSF CS Education Proposals	NA:NA:NA:NA:NA	2018
Kalpathi Subramanian:Jamie Payton:Erik Saule	This workshop introduces participants to the concepts and use of BRIDGES, a software infrastructure for programming assignments in data structures and algorithms courses.  BRIDGES provides two key capabilities, (1) easy to use interface to real world datasets spanning social networks, entertainment (movies on IMDB, song lyrics), scientific data (real-time USGIS Earthquake Data), civic issues (crime data), and literature (books); and (2) a visualization of the acquired data can be used in assignments by students to populate their implemented data structures, including the capability to bring out attributes of the dataset.  The visualizations are displayed on the BRIDGES website and are easily shared (with family, friends, peers, etc) via a weblink.  Workshop attendees will engage in hands-on experience with BRIDGES and multiple datasets and will have the opportunity to discuss how BRIDGES can be used in their own courses, as well as partner with the BRIDGES team.	Bringing Real-World Data and Visualizations of Student-Implemented Data Structures into Sophomore CS Courses Using BRIDGES	NA:NA:NA	2018
Chris Mayfield:Debra Duke:Margarethe Posch	This workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-4 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach that has been shown to improve student performance significantly. Workshop participants will work through POGIL activities as students and complete meta-activities designed to introduce core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses. For more information, see pogil.org and cspogil.org, where you will find activities for CS1, CS2, and other courses. Laptops optional.	Guiding Students to Discover CS Concepts and Develop Process Skills Using POGIL	NA:NA:NA	2018
Younghee Park:Hongxin Hu:Xiaohong Yuan	Software-Defined Networking (SDN) has been changing inflexible networks in software-based programmable networks for more flexibility, scalability, and visibility into networking. At the same time, it brings many new security challenges, but there are very few educational materials for students in learning about SDN security. In this workshop, we present our newly designed SDN security education materials, which can be used to meet the ever-increasing demand for high-quality cybersecurity professionals with expertise in SDN security. For effective hands-on learning, the security labs are designed in CloudLab, a free open cloud platform supported by NSF. Participants receive handouts describing security problems, lab instructions, techniques to use CloudLab, and worksheets for Q&A, which can be directly used for their networking classes at their home institutions. The workshop proceeds in three sessions in which we: present the way to use CloudLab and to understand SDN; practice in simulating three networking attacks in SDN on CloudLab; and discussion and critique in small groups for new SDN security labs.	Security Labs for Software Defined Networks in CloudLab	NA:NA:NA	2018
Debasis Bhattacharya:Mario Canul:Saxon Knight:Mohammad Q. Azhar:Rajiv Malkan	This workshop introduces participants to programming smart contracts using Ethereum Blockchains and the Solidity programming language. Cryptocurrencies such as Bitcoins use Blockchains and Smart Contracts to enforce transactions. Given the popularity of Bitcoins and related technologies in the press, this module provides a module for CS educators to introduce the underlying technology into their classrooms. Participants receive handouts describing sample programming techniques and worksheets for creating basic smart contracts. The workshop proceeds in three sessions in which we: present the underlying technology of Ethereum; practice the creation of smart contracts using the Solidity programming language; and discuss the implementation of this module in our classrooms in small groups. Further information, sample code and workshop handouts are at: http://maui.hawaii.edu/cybersecurity. Note: A laptop is needed for this workshop and handouts will be given out.	Programming Smart Contracts in Ethereum Blockchain using Solidity	NA:NA:NA:NA:NA	2018
Phillip Barry:Mia Minnes:Stephanie R. Taylor	Although many educators acknowledge the importance of written communication in computer science education, there are a number of challenges to using writing assignments in classes. These include assessing writing effectively and efficiently, especially in larger classes. The workshop will consist of a combination of short presentations, hands-on exercises, and discussion of a number of items related to writing assessment: the role of writing in computer science classes and how different types of assessment apply to different types of writing; how clarifying the goals of writing assignments often leads to better assessment; different techniques, such as rubrics, for grading writing; and strategies --- such as peer review and breaking a substantial writing assignment into a sequence of subassignments --- for scaling writing and its assessment to larger classes.	Assessing Writing in CS: A Hands-on Workshop	NA:NA:NA	2018
Mine Cetinkaya-Rundel	The goal of this workshop is to equip educators with concrete information on content and infrastructure for designing and painlessly running a modern data science course. This is a three-part workshop. Part 1 will outline a curriculum for an introductory data science course and discuss pedagogical decisions that go into the choice of topics and concepts as well as the choice of programming language (R) and syntax (primarily tidyverse), and the emphasis on literate programming for reproducibility (with R Markdown). Part 2 will discuss infrastructure choices around teaching data science with R: RStudio as an integrated development environment, cloud-based access with RStudio Cloud and Server, version control with Git, and collaboration with GitHub. Part 3 will focus on classroom management on GitHub (with ghclass). Workshop attendees will work through several exercises from the course and get first-hand experience with using the tool-chains and techniques described above. While the workshop content will focus on usage of R, many of the pedagogical takeaways will be language agnostic. All workshop content, including teacher facing documentation and student facing course materials, will also be available to participants via datasciencebox.org. Please bring a laptop with you.	Computing Infrastructure and Curriculum Design for Introductory Data Science	NA	2018
Leen-Kiat Soh:Markeya S. Peteranetz	In this workshop, participants will learn how to integrate in their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing two of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, panel-based Q&A, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop	Adopting, Integrating, and Evaluating Computational Creativity Exercises to Improve Student Learning	NA:NA	2018
Andreea Cotoranu:Li-Chiou Chen	This workshop aims to assist high school and college educators with implementing cybersecurity into their existing curriculum. The workshop will introduce Raspberry Pi as a teaching platform for topics such as network traffic analysis, cryptography and web security. We will discuss the Raspberry Pi hardware and software requirements, and will demonstrate network traffic analysis using Wireshark. Participants will receive a fully configured Raspberry Pi kit to use during the workshop and then take home at the end. Manuals on Raspberry Pi configuration will be shared for both Windows and Mac platforms, along with sample lesson plans on network analysis and its security implications. The workshop will send all participants home with flexible tools and new expertise in implementing cybersecurity curricula. Bring a laptop with an Ethernet port or adapter, and ensure that you have full administrator privileges to configure settings and install software on your device. Seats are limited.implementing cybersecurity curricula. Bring a laptop with an Ethernet port or adapter, and ensure that you have full administrator privileges to configure settings and install software on your device. Seats are limited.	Using Raspberry Pi as a Platform for Teaching Cybersecurity Concepts	NA:NA	2018
Briana Morrison:Lauren Margulieux:Adrienne Decker	Subgoal labeling is an instructional design framework for breaking down problems into pieces that are small enough for novices to grasp, and often difficult for instructors (i.e., experts) to articulate. Subgoal labels have been shown to improve student performance during problem solving in disciplines both in and out of computing. Improved student performance occurs because subgoal labels improve student transfer and retention of knowledge. With support from NSF (DUE-1712025, #1712231), subgoal labels have been identified and integrated into a CS1 course (variables, expressions, conditionals, loops, arrays, classes). This workshop will introduce participants to the materials and demonstrate how the subgoal labels and worked examples are integrated throughout the course. Materials include over 100 worked examples and practice problem pairs that increase in complexity and difficulty within each topic. The materials are designed to be integrated into CS1 courses as homework or classroom examples and activities. Assessment of topics using subgoal labels will also be discussed. Participants will also engage in an activity where they create an example for their own course using subgoal labels.	Using Subgoal Labeling in Teaching CS1	NA:NA:NA	2018
Bill Siever:Michael P. Rogers	Are you interested in a fun way to introduce a variety of students to significant contemporary CS topics, like wireless networking, robotics, and the Internet of Things (IoT)? Do you want to do so using a platform that is cheap, has a low-barrier to entry, but where learning can translate to the real world and where advanced students can pursue advanced topics? If so, you need a micro:bit! The micro:bit is a platform developed by the British Broadcasting Corporation (BBC) to encourage children to pursue computing and electronics. Although designed for children, its capabilities are sufficient for a variety of postsecondary applications. It includes a 32-bit processor, lights, buttons, an accelerometer, digital I/O, and wireless communication, making it ideal for wearables and robotics. It also leverages some of the latest trends in introductory computing, like support for block-based languages (àla Scratch), while also being sophisticated enough for complex topics in Operating Systems and Networking This workshop will introduce the micro:bit and focus on engaging, lightweight coverage of complex topics, including robotics, mesh networks, and IoT. Participants will work through classroom-ready exercises suitable for K-12 workshops, student recruiting events, CS0/1/2, or as bootstrap topics in IoT courses. The workshop will include some subjects not commonly covered in existing micro:bit material, like integration with mobile apps and IoT applications. Participants will be provided with hardware but will need a laptop with internet access and a mobile device (any OSes, but some features work better with iOS).	Micro: bit Magic: Engaging K-12, CS1/2, and Non-majors with IoT & Embedded	NA:NA	2018
Connor Bain:Gabriella Anton	Agent-based modeling (ABM) is a form of computational modeling whereby a phenomenon is modeled in terms of agents and their interactions. By looking at scientific phenomenon using ABMs, students can learn to understand the micro interactions that are responsible for so many of the seemingly complex systems in the world around them. In addition, by integrating CT skills into science classrooms, we can simultaneously broaden participation in computing, provide a more authentic scientific experience for learners, and encourage deeper scientific content learning. In this hands-on workshop, we introduce participants to two parallel agent-based modeling environments: NetTango (Olson & Horn, 2011), a blocks-based language, and NetLogo (Wilensky, 1999), a text-based language. The workshop will focus on contextualizing agent-based modeling activities within high school STEM classrooms, allowing participants to explore how computer science can be integrated into existing high school STEM curricula. Over the course of the workshop, participants will gain first-hand experience with ABM and how to design ABM activities in classrooms using NetTango and NetLogo. In addition, the workshop will feature open discussions in which participants will discuss the learning trajectories and affordances of the different programming modalities, brainstorm models that could be built for student exploration, and design activities that incorporate both scientific and computer science content for existing curricula.	Integrating Agent-based Modeling in STEM Classes: From Blocks to Text and Back?	NA:NA	2018
Joan Freese:Heather Benedict:Sarah Carter:Katie Hessen:Rita Karl:Karen Peterson:Cassandra Scharber	This workshop introduces participants to SciGirls Code, a unique, connected learning model for engaging middle school girls in computer science (CS) in out of school time. The pilot project, which ran nationally at 16 sites across the United States in 2017-18, included: three curriculum strands (mobile apps, robotics, and e-textiles); role model training for female technology professionals; professional development for informal STEM educators; and a research study that investigates the ways in which learning experiences impact the development of girls' computational thinking as well as their interest and attitudes toward computer science. Workshop participants will learn best strategies for engaging girls in CS and see how those strategies play out in a creative robotics activity using Hummingbird robots. (See https://sites.google.com/tpt.org/scigirlscode/robotics/12-hummingbird-art-bot.)	SciGirls Code: Creative Robotics for Tween Girls in Out of School Time	NA:NA:NA:NA:NA:NA:NA	2018
Amardeep Kahlon:Ann Kennedy:Linda Smarzik	Competency-based education (CBE) has been the focus of much attention lately - from institutions, employers, and policymakers alike. Institutions - from ivy leagues to community colleges to K-12 - are incorporating some form of CBE. In computer science, CBE is an excellent modality to measure mastery and thus prepare students for the next phase whether it is further education or a job. This workshop introduces participants to CBE with an emphasis on CBE course design and competency development. This workshop will be useful for faculty and course designers at all levels - from K-12 through graduate school.	Competency-Based Education: The Future of Learning	NA:NA:NA	2018
Joshua Littenberg-Tobias:Amanda Aparicio:Justin Reich	In computer science classrooms, the assumptions teachers have about students can significantly shape their interactions. Deeper understandings of the decisions impacting equity offers teacher educators and researchers new leverage in cultivating equitable teaching. Our work uses interactive online practice spaces to focus on specific teaching decisions that may be affected by teachers' assumptions about students. Teacher practice spaces are learning experiences, inspired by games and simulations, that allow teachers to rehearse and reflect on important decisions in teaching. Practice spaces are a potentially powerful approach for encoding equitable teaching strategies because they have the potential to reveal the different assumptions and interpretations which drive different teaching decisions We developed these practice spaces and embedded them within CS teacher preparation programs where they have been used by over 6,000 teachers. In this workshop, we'll use online practice spaces as a novel way to approach discussions about equity in computer science classrooms. We'll have participants try out different variations on these practice spaces, brainstorm ideas for improving existing practice space, and invite reflection about challenges they've observed in training CS teachers in equitable teaching. Participants will leave with links to practice spaces and related curriculum materials they can use in their own work.	Playing with and Creating Practice Spaces for Equitable Teaching	NA:NA:NA	2018
Ursula Wolz:Seoyen (Stella) Lee:James Mulligan:Paulina Valdivieso	This reprise of a highly successful SIGCSE 2018 workshop provides a novel perspective on: skills that are often labeled 'women's work' are the foundational principles of computer science developed from textile crafts. The 'Code Crafters' curriculum, which expands Andrea Mayer's Snap-based TurtleStitch embroidery programming project, is being successfully taught in 3 ways: as a full semester undergraduate course, as a weeklong summer workshop for middle and high school students, and as a half day event. The SIGCSE workshop will introduce participants to potential adaptations of this curriculum, report on its use as both a CS 0, and CS 1 course, and give participants hands-on experience in designing and rendering a machine embroidery pattern in TurtleStitch and Processing Stitch (Java). Key concepts from the full semester curriculum will be demonstrated: (1) crocheting as a vehicle for learning about primitive operations instruction codes for process control, and reading and writing patterns (algorithms); (2) programing machine embroidery provides exposure to agile design; (3) contrasting embroidery with quilting provides experience in abstraction and reuse; (4) weaving and tapestry provide concrete illustrations of manipulating two dimensional data structures; (5) studying embroidery machine file formats demonstrates how language translation takes place; (6) sharing a limited resource (a $500 programmable, single thread machine) provides concrete experience in scheduling, and product testing; (7) collaborative crochet and quilted projects provide experience in team dynamics. Participants in this workshop will be invited to join an online community of mutual support.	Code Crafting Curriculum: A Textile Crafts Approach to Computer Science	NA:NA:NA:NA	2018
Darakhshan Mir:Iris Howley:Janet Davis:Evan Peck:Deborah Tatar	This Workshop is intended to be a generative space for participants to create a module on ethics in a Computer Science course of their choice. Participants will choose an existing course in the typical CS curriculum; and coalesce around common themes to create a module that integrates critical reflection on ethical choices and societal impact of computing with the practice of computing. The workshop will offer a space to collaboratively work on designing an ethics module for a CS course chosen by the participants. The ethics module would integrate teaching specific concepts and practices in computing alongside a critical reflection of these practices. Ideally, these modules would be flexible enough to fit into curricula at various institutions.	Make and Take an Ethics Module: Ethics Across the CS Curriculum	NA:NA:NA:NA:NA	2018
Barbara Ericson:Jaclyn Cohen:Brad Miller	Runestone Interactive is an open-source ebook platform designed to create and publish interactive computer science textbooks. (See http://runestoneinteractive.org). Runestone ebooks support programming in the browser, code visualizations, and a wide variety of practice activities, from multiple choice and fill-in-the-blank questions to Parsons Problems (drag-and-drop mixed-up code). Free textbooks have been created for CS1, CS2, and Advanced Placement (AP) CS. The presenters have several years of experience creating and using Runestone ebooks. Several studies have demonstrated good usability and positive learning and attitude impacts on students using these ebooks. Runestone ebooks can be customizable to meet the needs of individual courses and teachers. Over 20,000 people a day use Runestone ebooks. The goal of this workshop is to introduce computer science teachers (both secondary and post-secondary) to Runestone ebooks. This hands-on session will start by leading participants through use of the ebooks as if they were students. Participants will try each of the interactive features. They will also create a custom course from an existing ebook, use the instructor dashboard to review student activity, modify the course, and grade students. Participants will create their own assignments using existing active learning components. They will also be shown how to create new material for assignments, such as multiple-choice questions for a quiz. Laptop Required.	Using and Customizing Open-Source Runestone Ebooks for Computer Science Classes	NA:NA:NA	2018
Christopher Lynnly Hovey:Cynthia Taylor:Heather Bort:David P. Bunde:Zack Butler	In computer science, educational innovation is constant, but many great ideas never achieve the type of widespread adoption necessary to make lasting and effective change to the way we teach and learn. Research across STEM education has shown that propagation planning is often an overlooked or undervalued part of educational innovation. Whether promoting our own projects or an outside innovation, barriers to success are more difficult to overcome when encountered without sufficient preparation. Plans for adoption and scaling of innovations are not one-size-fits-all, but there are lessons we can learn from both successful and unsuccessful previous projects. We will present a summary of these lessons based on our recent ITiCSE working group research experience on the topic. This writing workshop will focus on building propagation plans informed by best practices, within the context of individual project definitions of success. We will work in small groups to identify potential barriers to the success of our projects, learn about best practices for overcoming those barriers, and put in place a measurable and actionable plan for adoption and propagation. Participants will work toward a better plan for propagation while garnering advice from their peers, learning and generating new ideas about and methods for dissemination and adoption, and building a community of resources for future collaboration, champions for change, and peer feedback. Bringing a laptop is recommended.	To Dissemination... And Beyond!: Building Better Propagation Plans for Computer Science Education Innovations	NA:NA:NA:NA:NA	2018
Ariel Ortiz	A microservice architecture decomposes the entire functionally of an application into a set of services that can be deployed and scaled independently. Each service does only one job and does it well. Thus, it's simpler to develop, test and maintain. Additionally, it has its own database and provides access to datasets and services through a well-defined application programming interface (API). Highly successful Internet companies, such as Amazon, Netflix, and Twitter, use microservice architectures to build their software. This workshop is aimed at CS instructors that wish to teach students how to design and build microservice-based applications using cloud services and products provided by the Amazon Web Services (AWS) free tier. We'll start creating a cloud development environment with the AWS Cloud9 IDE. Afterwards, we'll code in Python several RESTful web services using AWS Lambda functions, which are serverless cloud computing services that are executed in response to events. The advantage of going serverless is that you build and run applications and services without thinking about servers. Your application still runs on servers, but all the server management is done by AWS. Finally, we'll demonstrate how to persist our information in a NoSQL database using the Amazon DynamoDB service. More information available at: http://microservices.arielortiz.info/ Laptop required.	Architecting Serverless Microservices on the Cloud with AWS	NA	2018
Stephanie E. August:Alexandra Medina-Borja:Mark Pauley:Michael M. Rook	By 2026, today's fifth graders will be entering college and our first-year college students will be the assistant professors. The workforce will see (r)evolutionary changes in the workplace at the human-technology frontier. Participants will be asked to think strategically about how we will reach the future we want to live. Content delivery mechanisms and active learning/project-based experiences for undergraduate students have developed and matured at a dramatic pace in recent years. How can we leverage what we already know, working to improve and broaden undergraduate STEM education and computing education in particular? How do we prepare students to solve the wicked societal problems of the future? Will students require problem-solving skills that transcend disciplines? Is interdisciplinarity teachable at the undergraduate computer science level? Which skills/knowledge will employers and graduate schools require in 10/20 years? The National Science Foundation Division of Undergraduate Education is preparing to have a nationwide dialogue with STEM communities and industry partners on this topic. Participants in this highly interactive session will collectively construct a shared vision for the future of computing sciences education, and outline a research agenda for the future.	NSF Interactive Discussion: Computer Science Undergraduate Education in 2026 and Beyond	NA:NA:NA:NA	2018
Xenia Mountrouidou:Vic Thomas	The primary purpose of this workshop is to help undergraduate liberal arts colleges integrate cyber security seamlessly into the curriculum with little to no additional investment. We believe Liberal Arts Colleges can provide to the cyber security workforce well-rounded individuals, equipped to tackle new and complex problems. However, liberal arts colleges rarely have the resources needed to provide the hands-on labs critical to attracting students to cyber security classes and for preparing students for the workforce. Our NSF funded project 'CyberPaths" addresses this by devising several active learning labs on topics such as ransomware, authentication, Distributed Denial of Service (DDoS), and remote network attacks. These labs are implemented on the cloud infrastructure GENI, an NSF funded free academic cloud infrastructure for realistic networking experimentation. We have developed a variety of labs that are suitable for non-CS majors as well as CS upper level courses. In addition, we propose interdisciplinary cyber security modules and multiple paths that can lead to the cyber security professions, starting from the general education courses, moving to an intro to cyber security course, and upper level CS courses. Our goal is to offer solutions to liberal arts institutions with cyber security active learning and introducing cyber security early in the curriculum with low overhead. This workshop will be highly interactive using a combination of hands-on labs and discussions. If you wish to do the hands-on exercises please bring a laptop with a browser and ssh client installed.	CyberPaths: Cyber Security Labs for Liberal Arts Institutions Using the NSF Global Environment for Network Innovations (GENI)	NA:NA	2018
Sushil Prasad:Sheikh Ghafoor:Charles Weems:Alan Sussman	Parallel and distributed computing (PDC) is now a pervasive aspect of deployed systems, and thus it is essential that students include parallelism and distribution in the computational thinking that they apply to problem solving, from the very beginning. Our students all have multicore laptops. Most of their favorite applications use vast numbers of distributed processors. Why are we still teaching them to solve problems using only sequential thinking? Come to this workshop to see how easy it is to open their eyes to exploiting concurrency in problem solving, starting in their earliest courses. You'll hear about and experience some unplugged activities, learn how to help students recognize examples of concurrency in the world around them, see how event driven user interfaces can easily exemplify issues related to multithreading, and how freely available libraries can be used to naturally exploit parallelism in working with large data structures. We will also highlight the two summer training programs that we are organizing, for which we have funding to support attendance by instructors. Having a laptop that can run Java and C++ will allow you to follow along with some code examples, but isn't necessary.	Modernizing Early CS Courses with Parallel and Distributed Computing	NA:NA:NA:NA	2018
Ria Galanos:Timothy Gallagher:Briana Morrison	Advanced Placement (AP) Computer Science A (CS A) is an introductory high school Java course equivalent to a CS1 course at the undergraduate level. Over 66,000 high school students sat for the AP CS A end-of-course examination in May 2018. The exam contains four free-response questions (FRQs) where students are to implement methods or a full class according to specifications. Each June, these exams are graded at the AP CS A Reading. This workshop provides a behind-the-scenes look at the Reading, during which the FRQs are read (scored) by more than 325 college faculty and high school AP teachers. You will learn how the FRQs are scored, the roles of the various Reading participants, and the steps to ensure consistent grading. You will engage in an AP Reading-style training by applying a rubric based on a past free-response question and then participate in a mock reading using the rubric. After attending this workshop, you will be able to understand the role and responsibilities of the Chief Reader, Question Leader, and Table Leader at the AP Reading; develop strategies for creating rubrics for code questions; consistently apply rubrics for free-response questions and similar assignments; and apply strategies to prepare students for the free-response portion of the AP Exam or to similar style questions in an introductory college-level course.	An Afternoon with an AP Computer Science A Exam Reader	NA:NA:NA	2018
David J. Malan:Doug Lloyd:Kareem Zidane	We present in this hands-on workshop a suite of interactive programming environments for teachers and students, each of them cloud-based and free. The first is CS50 Sandbox, a web app at sandbox.cs50.io that enables teachers and students to create temporary programming environments quickly and share copies of those sandboxes with others. With this app can a teacher start programs in class that students can then finish, distribute starter code for problems, and post interactive solutions. The second tool is CS50 Lab, a web app at lab.cs50.io that enables teachers to create step-by-step programming lessons, providing incremental feedback at each step, and enables students to progress from an empty file (or starter code) to working code, with hints and feedback along the way. Via this app can teachers author their own Codecademy-style lessons using just a GitHub repository of their own. And third in the suite is CS50 IDE, a web app at ide.cs50.io built atop Cloud9 that provides students with their own cloud-based Linux environment. Each of these environments offers a built-in file browser and code editor and, most importantly, an interactive terminal window with shell access to their very own container. And each enables students to write programs in any language. Throughout this workshop will we discuss lessons learned from having deployed these tools in CS50 at Harvard to hundreds of students on campus and thousands of students online. And we'll discuss challenges encountered and best practices adopted.	Interactive Programming Environments for Teachers and Students	NA:NA:NA	2018
Mark C. Lewis	Born from a Berkeley graduate project, the Apache Spark library has grown to be the most broadly used big data analytics platform. While Spark integrates with the older Hadoop ecosystem, it provides much more intuitive, faster, and powerful abstractions for manipulating distributed data than MapReduce. In this workshop, we will cover the basics of the Spark library with the goal of getting participants up to speed so that they can use the library or teach it in courses that involve big data or distributed processing. Participants will work with examples that range from calculating basic summary statistics to using the Spark Machine Learning library for performing sophisticated machine learning analyses on large datasets. Tasks during the session will be performed on smaller samples using the Spark local standalone implementation on participant's laptops. We will also discuss how Spark can be run on a local or cloud-based cluster and point participants toward resources for setting up those environments for their students.	Big Data Analytics with Spark	NA	2018
Brian K. Hare:David Heise	This tutorial will provide a foundation for faculty members either teaching a course in artificial intelligence for the first time or renewing a course that has been dormant. The growing ubiquity of AI and machine learning dictates that departments offer a course in this area, regardless of whether any such expertise exists locally. Furthermore, there are many possible approaches, from a general overview to a tight focus on a particular application area, either as a single elective or a specialization area within an undergraduate degree. An increasingly wide range of resources is available, but intelligent selection from the plethora of information can be a challenge, particularly in smaller programs where no local expertise is available. The tutorial is in two parts. Part 1 focuses on background knowledge, discussing major divisions within the broad field of AI, research trends and application areas, and commonly used tools. Part 2 addresses classroom implementation, assessment, textbook options, and online resources including code libraries, free-to-use data sets, development environments, and visualization tools. Participants will have the opportunity to brainstorm and discuss options for course focus. Sample syllabi using differing course approaches, sample exams and assignments, and a non-exhaustive list of useful resources will be provided.	Booting Into AI: Startup Instructions for Teaching Artificial Intelligence	NA:NA	2018
Mary Anne Egan:Mark Sherriff	NA	Session details: Birds of a Feather Flock #1	NA:NA	2018
Ursula Wolz:Stephanie R. Taylor	Professional behavior in the workplace needs to promote broad participation and inclusion. The competitive nature of the traditional classroom can thwart pedagogical goals to model, support and give practice to collaborative professionalism in the Tech industry and graduate level computing-based disciplines. Diverse populations, ingrained cultural expectations, and a significant range of opportunities for developing computing expertise prior to undergraduate opportunities can all exacerbate this problem. The goal of this BoF is to bring together educators who want to promote inclusive professionalism in the classroom and their community. We hope to use this collaborative setting to identify major issues and to set an agenda for further collaboration among the participants. The long-term goal is to create vehicles for best practice such as stories, curricular activities, and standards that can effect change in the CS community.	Towards a More Inclusive Tech Culture: Promoting Professionalism in CS Classrooms and Labs	NA:NA	2018
Christina Gardner-McCune:David Touretzky:Fred Martin:Deborah Seehorn	As CS expands into more K-12 classrooms and children become familiar with computational thinking, advances in AI pose new challenges for CS educators. Children now enjoy conversing with AI-powered agents such as Alexa and Siri, while their parents worry about the imminent arrival of autonomous robots and self-driving cars. As AI technologies become more prominent in our lives, we need to consider what every child should know about AI. This BOF provides a timely opportunity to introduce CS educators and researchers to several AI for K-12 efforts, including available curricula, tools, and resources. Attendees will discuss how AI can best be incorporated into the K-12 CS curriculum, the tools/resources that will be needed to support students and teachers learning about AI, and how AI education might impact their own work. This BOF is complementary to the SIGCSE 2019 Special Session: AI for K-12 Guidelines Initiative that introduces the current draft of our 'Big Ideas in AI." Further information about the initiative and resources is available at http://ai4k12.org.	AI for K-12: Making Room for AI in K-12 CS Curricula	NA:NA:NA:NA	2018
Matt Jadud:Jamika Burge:Jeffrey Forbes:Celine Latulipe:Yolanda Rankin:Kristin Searle:Ben Shapiro	Ibram X. Kendi, in his book Stamped from the Beginning, lays out the argument that structures (political, economic) drive inequitable systems, and it is our enculturation in those systems that lead to ignorance and bigotry. Our goal, in this BOF, is to discuss the dominant social, political, and curricular structures of the discipline of computing, and how we might strengthen or challenge those structures to increase access, equity, and justice within computing. To do so, we must confront the manifold ways in which the existing structures and practices of computing are exclusionary, from curricula to epistemology and the expressions of identity that typically represent what it means to be (and be recognized as) a computer scientist.	Toward an Anti-Racist Theory of Computational Curricula	NA:NA:NA:NA:NA:NA:NA	2018
Michael P. Rogers:Bill Siever	Makerspaces are areas set aside in schools, libraries, and other locations, where inventors and Do-It-Yourselfers gather to create and collaborate. Activities run the gamut from high(er) tech, such as electronic kit making and Arduino programming, 3D design and printing, to more traditional crafts such as sewing and woodworking. As makerspaces become more prevalent, the question arises where, if anywhere, do they fit into the post secondary environment, and specifically, in the computer science realm? Should computer science departments host them? What, exactly, can we do with them? They would be appear to be a good outlet for our students, allowing them to exercise their creative side, but can they do more? Can we use them to draw in non-majors, or to encourage collaboration between students in different fields? Can they be used to supplement various courses? If so, which, and how might they be used? We are interested in talking to others who have makerspace experience at the post-secondary level so that we can share ideas.	What to Make of Makerspaces	NA:NA	2018
Darina Dicheva:Christo Dichev:Keith Irwin:Elva J. Jones:Lillian (Boots) Cassel:Peter J. Clarke	Having to compete harder than ever for students' attention against cool social media sites, mobile apps, video games, messaging, etc., instructors are struggling to find new ways to motivate and engage learners. Gamification offers a promising framework for educational interventions that can increase students' motivation and engagement. This BOF will bring together instructors who have already explored the use of various game driven strategies and elements to increase the motivation of their students and also those who are looking for promising interventions to do that. The facilitators conducted a similar BOF at SIGCSE 2018, which was well attended, well received and sparked an interesting and lively discussion. This BOF will continue the conversation on what might be useful ways of incorporating game elements in Computer Science courses, what tools might be needed to support such efforts, how can the student experience of gamified learning be personalized, etc. Two NSF sponsored projects related to the use of gamification in STEM courses will seed the discussion. We hope to collectively contribute to the ongoing important discussion on successful strategies for applying of gamification in Computer Science education.	Can Game Elements Make Computer Science Courses More Attractive?	NA:NA:NA:NA:NA:NA	2018
Richard Weiss:Jens Mache:Blair Taylor:Siddharth Kaza:Ankur Chattopadhyay	The critical shortage of cyber security professionals remains an unsolved problem. We need to greatly expand the community in order to meet the increasing demand. The number of security-focused competitions and exercises has increased in recent years. As faculty we need to choose those that we can best integrate into our courses. As a community, we can think about how to create a more unified environment to contribute to each other's projects. We would like to bring together new and experienced faculty to build community and engage in this work. We have set up a dedicated Facebook to allow us to work together outside of SIGCSE events. During the BoF, we will encourage participants to sign up for the closed group, and we will ask the questions, 'What do you want from this learning community? What exercises have you heard about or tried?" One benefit of having a learning community is that it will be easier to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts (NSA's National Cybersecurity Curriculum Program), including our own (e.g. Security Injections, Security Knitting Kit, EDURange and UWGB GenCyber). The BoF also benefits experienced members, helping them to disseminate their work and reach other faculty with similar interests. We will discuss what works and what problems students and instructors have encountered. We will discuss ways to integrate security-related exercises into existing courses.	Discussion of Integrating Hands-on Cybersecurity Exercises into the Curriculum in 2019	NA:NA:NA:NA:NA	2018
Chris Gregg:Shawn Lupoli:Laney Strange	Many computer science departments have chosen to hire faculty to teach in teaching-track positions that parallel the standard tenure-track position, providing the possibility of promotion, longer- term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators, both experienced and new to teaching track positions, who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In particular, we will discuss how to support for new teaching track faculty, as many CS departments are expanding and adding teaching track positions.	Teaching Track Faculty in CS	NA:NA:NA	2018
Alison Clear:John Impagliazzo:Ming Zhang	This birds-of-a-feather session discusses the global project Computing Curricula 2020 (CC2020), a joint project launched by professional computing societies worldwide. CC2020 is a priority of the ACM Education Council; its sponsors include ACM, IEEE Computer Society, and eight professional organizations from around the world. The project team consists of a task force of 38 members representing 16 countries and six continents. A steering committee of 13 members functions as an executive board to manage the project. CC2020 examines the current state of curricular guidelines for academic programs granting bachelor's degrees in computing and it provides a vision for the future of computing. Audience discussion encompasses new ways computing programs can prepare graduates both academically and professionally. Since computing competencies is an underlying theme of the project, this birds-of-a-feather session discusses competencies, their definition, and their inclusion into future curricular reports. Discussion surrounds competencies in computing, their effect, and the possible ways to visualize their meaning. This birds-of-a-feather session also allows the audience to provide comment on the elements of the project, to engage them to serve as potential project reviewers, and to provide a forum for lively interaction on a global and encompassing computing project.	Computing Competencies and the CC2020 Project	NA:NA:NA	2018
Paula Gabbert:Wendy Powley:Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). The SIGCSE Board approved the charter, because the underrepresentation of women in computing is an international problem and an embarrassment for our profession. A BOF provides SIGCSE program advertising that will create a large audience for dissemination of information concerning successful gender issues projects and can provide time for discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ACM-W, NCWIT, ABI, CDC, CRA-W, etc. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organization and who do not customarily have an opportunity to share ideas face-to-face.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community	NA:NA:NA	2018
Austin Cory Bart:Michael Hilton:Bob Edmison:Phill Conrad	Packaging materials is a generalized term to capture a broad array of tasks (creating, revising, sharing, finding, crediting, etc.) for materials such as assignments, teacher notes, and evaluation data. Substantial effort has gone into creating materials over the years, but the community still struggles to find ways to effectively manage these. This BoF provides an opportunity to identify needs, concerns, prior efforts, and future plans. A primary goal is the formation of a Working Group tasked to develop a standard for curricular material creation and sharing, joining with broader efforts of standardization (e.g., CSSPLICE) and existing initiatives for creating repositories, tools, and materials.	The Problem of Packaging Curricular Materials	NA:NA:NA:NA	2018
Barbara Anthony:Mia Minnes:David Liben-Nowell:Peter-Michael Osera	The undergraduate computer science curriculum is ever-changing but has seen particular turmoil recently. Topics such as machine learning, data science, and concurrency and parallelism have grown in importance over the last few years. As the content of our curriculum changes, so too does the mathematical foundations on which it rests. Do our current theoretical courses adequately support these foundations or must we consider new pedagogy that is more relevant to our students' needs? In this BoF, we will discuss what a modern mathematics curriculum for computer scientists should cover and how we should go about accomplishing this in our classrooms.	Modernizing the Mathematics Taught in Computer Science	NA:NA:NA:NA	2018
Tamara Peyton:Aarathi Prasad:Sa Liu:Joslenne Pena	Many CSE programs have begun to mandate a human-centered design (HCD) course as part of degree requirements. Rather than abstracting out messy humans to a single generic 'user', HCD requires solution designers to use their innate creativity and empathy to work alongside a varied group of people who will be most impacted by a new system. However, many CSE students tend to keep a narrowed focus on system-only behavior and the human inter-relation skills necessary to do HCD well may not come naturally to CSE students. Within HCD projects, this becomes a problem given that project teams consist not just of designers, developers and project managers, but also increasingly of core users, in a co-design or participatory design process. Figuring out ways to get students to define a problem completely, account for human needs in solution ideas, and work alongside actual users can be a struggle for many in the CSE education field. This BOF is intended to share ideas for how to appropriately teach the mindset and methods skillset of HCD to typical CSE students. This session is directed at the sharing and collaborating around teaching resources, techniques, in-class activities and assignments for HCD education. Handouts.	Teaching Human-Centered Design in CSE Programs	NA:NA:NA:NA	2018
Gregory W. Hislop:Darci Burdge:Michael Goldweber:Samuel Rebelsky:Stewart Weiss	Computing often makes headlines for negative social impacts such as data breaches, algorithmic bias, and cyber warfare. The many ways that computing can create social good are similarly powerful but seem to get much less attention. This BoF will explore ways to incorporate the positive potential of computing for social good in undergraduate courses. The organizers are especially interested in active learning approaches where students can experience first-hand the positive social impact of computing. The discussion will allow faculty who have included computing for social good in their courses to exchange ideas and share their experiences. Faculty who are interested in this area but have not yet tried it in their courses are encouraged to join the discussion.	Incorporating Computing for Social Good in Computing Education	NA:NA:NA:NA:NA	2018
Kristin Stephens-Martinez:Brian Railling	Most student personal interactions with the course staff come through office hours. Particularly in large courses, the office hours are predominantly run by teaching assistants (TAs). TAs are best advantaged by support and training from more senior instructional staff, especially faculty. This BOF will provide a forum for discussing mentoring techniques and other individualized support of the TAs (particularly in computer science courses) to improve student learning and experience, as well as longer-term gains to the discipline. Second, we will be discussing what technological support exists, such as queue software or internal wikis, to improve student learning and experience in office hours. Finally, we will discuss ideas for more significant changes in office hour structures that could lead to future collaborations or research experiments.	How Can We Make Office Hours Better?	NA:NA	2018
Christian Murphy:Linda DuHadway:Matthew Hanson	Long hours, pressure to meet deadlines, and fear of failure are just some of the stressors that affect CS students and professionals alike, leading to burnout, anxiety and depression. These issues are particularly amplified in students who are already living with diagnosed mental illnesses such as bipolar mood disorder, schizophrenia, or autism spectrum disorder. A quarter of the world's population lives with some form of mental illness, and recent research suggests that 50% of those working in the tech community have been diagnosed with a mental illness, a statistic that may actually underestimate the problem because of stigmas in certain cultures and communities around seeking mental health services. These numbers suggest a significant need for awareness and support in the CS education community. This BOF will provide attendees an opportunity to discuss the mental illnesses that affect CS students and how to create a culture of understanding and support within their communities.	Supporting Students Living With Mental Illness	NA:NA:NA	2018
Mary Anne Egan:Mark Sherriff	NA	Session details: Birds of a Feather Flock #2	NA:NA	2018
Allen Parrish:Rajendra K. Raj:Lawrence Jones	This session is designed to attract participants with an interest in post-secondary academic cybersecurity programs. Despite the extraordinary interest in cybersecurity due to the job market, relatively little consensus exists on how to design academic programs. Divergence on issues such as degree title, program objectives and outcomes, program scope, whether only one distinct discipline of cybersecurity exists or several, whether a separate academic unit is needed to offer such degrees, and what role other (non-computing) disciplines should play in cybersecurity programs. Prior efforts in defining cybersecurity at the collegiate level include the US Department of Homeland Security and the US National Security Agency's Centers for Academic Excellence (CAE) programs, NIST's National Initiative for Cybersecurity Education (NICE), the Cyber Education Project, the Joint Task Force's CSEC 2017 draft curricular guidelines, and ABET accreditation criteria for cybersecurity programs. The audience is expected to consist of college faculty and administrators who are either in the process of starting cybersecurity programs or are seeking guidance for developing security content for other computing programs that must now teach security. This session will allow participants to share ideas regarding how to develop and teach cybersecurity in four-year, post-secondary academic programs.	Academic Cybersecurity Disciplinary Foundations and Accreditation	NA:NA:NA	2018
Pamela Cutter	Girls Who Code (GWC) Clubs are springing up all around the country, with almost 90,000 girls involved from all 50 states. Have you ever wondered what it takes to get a club started? How do clubs make use of the curriculum that GWC provides? Do clubs ever take their girls on field trips to local places that would show them the possibilities of what they can do in computing? Maybe you're already involved with a club and would like to know what other clubs are doing, or you're doing some cool things with your club that you'd like to share. Or maybe you've been thinking about getting a club started and would like some ideas. This BOF will provide a platform for the discussion of starting and running a GWC club, as well as for sharing ideas of the interesting things clubs have been doing.	Sponsoring Girls Who Code Clubs	NA	2018
Saverio Perugini:David J. Wright	This birds-of-a-feather provides a discussion forum to foster innovation in teaching operating systems (OS) at the undergraduate level. This birds-of-a-feather seeks to generate discussion and ideas around pedagogy for OS and, in particular, how we might develop a contemporary and innovative model, in both content and delivery, for an OS course---that plays a central role in a CS curriculum---and addresses significant issues of misalignment between existing OS courses and employee professional skills and knowledge requirements. We would like to exchange ideas regarding a re-conceptualized course model of OS curriculum and related pedagogy, especially in the areas of mobile OSs and Internet of Things; concurrent programming and synchronization; and cloud computing and big data processing.	Developing a Contemporary and Innovative Operating Systems Course	NA:NA	2018
Kathleen Freeman Hennessy:Jennifer Parham-Mocello:Henry Walker	Academic co-curricular activities (e.g., programming contests, hackathons, student ACM clubs, tutoring, internships, undergrad research) are popular with students, may promote academic engagement, and can give a leg up to students applying for jobs and grad schools. Yet information about co-curricular activities in departments and schools can be hard to come by. This BOF will provide participants with a forum for comparing notes: What co-curricular opportunities exist in your department? Does your department or school explicitly support or promote undergraduate co-curricular activities? If so, how (e.g., staff positions, faculty release time, student leadership - volunteer or for pay or credit) What have you learned from your experiences with co-curricular activities? Are co-curricular activities a good investment of department resources?	Co-Curricular Activities in Computer Science Departments	NA:NA:NA	2018
Richard E. Ladner:Andreas Stefik:Andrew J. Ko:Brianna Blaser	Approximately 10% of computer science and engineering majors have a disability. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing have limited accessibility to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll, will be shared.	Access to Computing Education for Students with Disabilities	NA:NA:NA:NA	2018
Mine Cetinkaya-Rundel:Andrea Danyluk:Jeff Forbes:Michael Posner	Data science encompasses elements of statistics, computer science, and mathematics as well as domain-specific knowledge, suggesting that with interdisciplinary conversations and collaborations we can make data science curricula more comprehensive and successful. Development of such programs provide an exciting collaboration opportunity for faculty in statistical and computer and mathematical sciences as well as a wide array of other disciplines. This BOF provides an opportunity for faculty involved/interested in the development of undergraduate data science curricula to come together and discuss forming collaborations across disciplines and what the disciplines can learn from each other. The discussion will be led by faculty from computer science and statistics departments who have been involved with both disciplinary and interdisciplinary data science education initiatives. One of the goals of this BOF is to jumpstart conversations across disciplines, which we hope the audience will continue at their home and/or nearby institutions.	Building Bridges for Data Science Education	NA:NA:NA:NA	2018
David J. Malan:Doug Lloyd:Erin Carvalho	Odds are we've all used (or tried!) quite a few tools to facilitate efficiency inside and outside of the classroom and empower students to learn more effectively. Some of those tools are perhaps homegrown and unique to one's own institution, but freely available educational technologies abound as well, some in the cloud, some for Macs and PCs, some open-source. And quite a few commercial tools offer free or discounted educational plans as well. In this BoF, we'll begin with a whirlwind tour of the tools we ourselves use, identifying the problems they solve and how well, then quickly open the floor to everyone to share their favorites as well. Along the way, we'll jot down every tool mentioned and share the results. Attendees should exit this session with a better understanding of the educational-technology landscape, familiarized with innovations they can bring back to their own classes.	Birds of a Feather Who'd Like to Share Software Together: Teaching Tools that Improve Efficiency and Outcomes	NA:NA:NA	2018
Paul E. Dickson:John Barr	Computer Science is a rapidly changing field where code bases and development strategies can change in months even if core concepts stay largely the same. In order to prepare our students for this environment we need to enable them to learn on their own and this concept appears in the literature as self-directed or self-regulated learning (SRL). The literature on SRL suggests that reflection is one of the most effective ways of promoting SRL. Reflective diaries, blogs, journals and questionnaires have all been used successfully in fields from the humanities to medicine to engineering to encourage students to engage in SRL. We believe that reflection has not caught on in CS as heavily as in some other fields because our students dismiss these common methods of reflection as mere busy work. The benefit of reflection, however, is not the writing itself but the process of thinking about and analyzing the actions and experiences of learning in order to master them. With this BOF we will describe reflection and its use in CS and start a discussion of reflective exercises relevant to computer science. As an example, students can reflect on how they learn new material by creating YouTube tutorials for others and adding to community knowledge. The intended result of this BOF is to begin the development of a repository of reflective activities that can be used in computer science classes.	Bringing Reflection into Computer Science Education	NA:NA	2018
Diba Mirza:Phillip Conrad:Colleen Lewis:Cynthia Lee	Undergraduates have been an important part of the teaching staff at many universities for decades, but this is not a universal practice. This BOF provides a forum to discuss undergraduate TA/mentor programs at various stages in their evolution. Attendees will have an opportunity to discuss the benefits, best practices, and research questions related to the use of undergraduates as teaching assistants and/or mentors. The audience is expected to consist of faculty that have already implemented such programs, and those who might be considering doing so, and want to share information about successes and challenges. Discussion Leader(s): Phill Conrad will facilitate the discussion and invite Colleen Lewis, Cynthia Lee and Diba Mirza to briefly speak about the Undergraduate TA/Mentor programs at their respective institutions. During the balance of the time participants will be invited to contribute ideas or ask questions related to the use of undergraduate TAs and mentors. Expertise of Discussion Leader(s): Diba Mirza and Phill Conrad are faculty in the Computer Science department at UC Santa Barbara, where they have created an undergraduate mentor program in the past two years. Colleen Lewis is an Associate Professor of CS at Harvey Mudd College, and is the lead PI for the csteachingtips.org project, a project to collect and document CS pedagogical content knowledge. Cynthia Lee is a Lecturer in CS at Stanford University, and works closely with the longstanding undergraduate TA program in the department.	Undergraduate TA and Mentor Programs in Computer Science	NA:NA:NA:NA	2018
Frank Vahid:Roman Lysecky	Program auto-graders used to be tough applications to install and use by instructors, meaning many instructors avoided them, and for those that used them, most assignments were created by specialists with scripting and other expertise. As such, creating new auto-graded programming assignments was a rare event done by just a few people. But modern cloud-based program auto-graders enable nearly any instructor or TA to create new auto-graded assignments in just tens of minutes, fully created and carried out via the web. This capability has led to an explosion in the number of instructors and TAs creating auto-graded programming assignments, benefiting students via immediate feedback and the option to resubmit, and saving teachers huge amounts of grading time. BUT, this new frontier is very different from hand-graded assignments, with plenty of pitfalls for teachers to avoid, and emerging best practices. This BOF allows teachers to share do's and don'ts, so each can improve their use of auto-graded labs, and teachers new to auto-graded labs can benefit from others' experiences. Special focus is on early CS classes (CS0, CS1, CS2) but topics may apply to many CS classes.	Auto-Graded Programming Labs: Dos and Don'ts for Less-Stressed Higher-Performing Students, Reduced Grading Time, and Happier Teachers,	NA:NA	2018
Debra Duke:Margarethe Posch	Process-Oriented Guided Inquiry Learning (POGIL) is a form of student-centered, engaged learning. It is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to experience it first-hand, and (2) bring together experienced POGIL practitioners to share experiences, insights, ideas, and concerns. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.	POGIL in Computer Science for Beginners and Experts	NA:NA	2018
Amardeep Kahlon:Deborah Boisvert:Cheryl Calhoun:Louise Ann Lyon:Jill Denner:Wendy DuBow:Melanie Williamson	Over half of community college (CC) students are non-white, and more than half of all Hispanic and Black undergraduates start at community college. Given that community colleges (CCs) enroll minorities and women in larger numbers than universities, it is imperative for both universities and CCs to engage in collaborative efforts to broaden the participation of diverse peoples in the computing field. Such efforts could include, but not be limited to, the creation of a national broadening participation in computing (BPC) alliance, structured transfer pathways from the CC to the university, the inclusion of a CS Principles course for college, and changing the commonly held perceptions of CCs. Brainstorming, and then building these strategic partnerships requires that experts from various backgrounds come together to share knowledge and experiences that contribute to a better understanding of the role such collaborative efforts could play with universities and CCs in BPC efforts in CS and information technology (IT).	Broadening Participation in Computing: A Call to Action for Universities and Community Colleges	NA:NA:NA:NA:NA:NA:NA	2018
Ronald M. Baecker:Elliot B. Koffman	We shall discuss ways of enriching courses on Computers and Society and Computer Ethics to better engage and stimulate students, including those from Computer Science as well as other disciplines. This topic is significant because society is experiencing increasing stress due to data breaches, privacy invasions, fake news, election hacking, corporate concentration with increased power by a few dominant high-tech firms; and recent advances in AI. Based upon participant interest, we shall discuss and share experiences dealing with issues such as: 1) prerequisites, 2) kinds of assignments and projects; 3) teaching materials including media; 4) the mix of individual and group assignments; 5) how to handle the increasing numbers of desirable topics; 6) how much of the course to focus on AI; 7) methods of teaching ethics; 8) level at which to teach the course, including use in secondary schools; 9) differences between CS courses and general education courses; 10) integration with other CS courses; 11) follow-on options for students wanting to learn more. BOF attendees will be able to hear multiple viewpoints and connect with other people in similar situations, so they can share resources and techniques for teaching such courses. The audience is expected to consist of professors and lecturers who teach, are planning to, or are considering teaching such courses.	Enriching Courses on Computers and Society and Computer Ethics	NA:NA	2018
Leo C. Ureel II:Michelle Jarvie-Eggart:Melanie Kueber Watkins:Russell Looks:Briana Bettin	Programming is becoming skill required by a wide range of students, not just CS majors. Furthermore, not only are non-CS majors learning to program, but many non-CS faculty find themselves teaching programming courses. Introducing these faculty and students to the craft of programming is accompanied by a number of unique challenges. How can non-CS faculty position themselves as programming experts, given they are not CS people? How can we convince non-CS students that coding is a necessary skill? Often our non-computing majors are reluctant, stating "Programming isn't what I signed up for!" Many non-CS students are not receptive to learning new programming languages due to a lack of intrinsic motivation coupled with technological anxiety. These factors often result in low-self efficacy, which must be overcome in order to explore, play, and learn. This Birds of a Feather discussion brings together instructors from diverse disciplines to discuss the teaching of programming to a range of students, the barriers that exist for non-computing students, and the interventions that attempt to mitigate these issues.	Exploring Programming Instruction in Multidisciplinary Contexts	NA:NA:NA:NA:NA	2018
Eileen T. Kraemer:Murali Sitaraman:S. Megan Che	In this BoF we discuss the tenets of culturally responsive computer science and how teachers, professors and providers of professional development can include culturally responsive perspectives in their classes. In contrast to other academic fields, which typically include rigid curricular tracks ostensibly based on academic performance, talent, or ability that pose structural barriers to access to rigorous academic instruction for underrepresented students, the field of computer science education is explicitly focused on broadening participation, as evidenced by the SIGCSE community's consistent emphasis on equitable representation. Culturally responsive computing (CRC) is founded on culturally responsive teaching (CRT) and on CRT's three tenets: asset building (in contrast to deficit approaches), reflection, and connectedness. CRC frames these tenets for the specifics of computing education. CRC's tenet that all students are capable of digital innovation should drive teachers' interactions and relationships with students. CRC also requires that teachers be continually reflective about their privilege and constraints and how those are connected with our worldviews. This topic is significant because teachers must be connected to their students in non-traditional ways that prize diversity as an asset to innovation. The participants are expected to include professors, lecturers, high school teachers and industry experts who are interested in employing culturally responsive computing approaches in their own teaching and professional development activities. A major goal of the BoF is to establish connections among the participants to promote the sharing of resources and best practices.	How Can We Engage in Inclusive, Culturally Responsive Computer Science?	NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #1	NA:NA	2018
Jeremy Sarachan:Sean O'Leary	Professors across various disciplines in the liberal arts increasingly find themselves incorporating programming into their classes. Examples include media professors teaching web design and video game development, art professors teaching Processing, and statistics and political science professors teaching R. In order to help meet the professional development needs of this group, an online publication published in late fall 2018 covers both the general trends related to coding across the liberal arts disciplines, as well as specific pedagogical strategies and assignments related primarily to media production. Specifically, the chapters are: 1) an overview of the use of coding within media departments nationwide; 2) a literature review and analysis of coding pedagogical discourse as it relates to the liberal arts; 3) a discussion of why journalism and media students need to know coding; and six case studies: 4) mobile app creation; 5) p5.js; 6) HTML/CSS 7) interactive documentaries; 8) data visualizations; 9) video games. This book takes an innovative trajectory by never being entirely complete. Authors may submit additional chapters for consideration at anytime with the goal of creating a large repository of coding pedagogy strategies for professors teaching programming outside of traditional Computer Science (and hopefully, Computer Science professors may find this source useful as well). This poster showcases some of the content of the online publication and invites new authors to consider submitting-after discussion with the editor who will be available at the poster session.	Coding Pedagogy for the Liberal Arts: An Online Publication	NA:NA	2018
Melinda McDaniel:David Joyner	As online offerings have matured and expanded, new efforts have recently been devoted to opening fully-accredited online versions of traditional on-campus classes. Such classes may be offered to on-campus students for greater flexibility during busy semesters, or to allow them to continue to make progress toward their degrees during internships or semesters away from campus. This trend intersects with a growing CS for All movement that sees more and more non-computer science majors enrolling in CS classes. As online offerings expand, it is important for us to understand who enrolls in online sections and the reasons for their choices, both to make sure that learning outcomes are similar across different delivery mechanisms, and to take advantage of opportunities to tailor course content to specific audiences. In this analysis, we look at two versions, one online and one traditional, of a CS1 class offered at a major public research university. We investigate demographic, motivational, and experiential components to identify which types of students are most likely to select each version and what implications this decision has for student success and course design.	Online or In Person?: Student Motivations in the Choice of a CS1 Experience	NA:NA	2018
Shamim Khan:Shuangbao Wang:Rania Hodhod	Unauthorized access to confidential information with malicious intent has become a growing challenge to individuals, businesses and governments. Recent media reports of attempted foreign interference in the domestic politics highlights the threat to data security from both within as well as outside the country. Adequate protection of information systems urgently requires a cybersecurity-educated workforce trained using a curriculum that covers the essential skills required for different cybersecurity work roles. The demand for effective cybersecurity education has led to efforts at the national level like the National Initiative for Cybersecurity Education (NICE) framework to guide cybersecurity curriculum design. However, the many-to-may relationships among components of the NICE framework makes it difficult for anyone but experienced cybersecurity experts to design courses or training programs. The much needed rapid expansion of cybersecurity education depends on the ability of educators to understand and reflect in their curriculum frameworks like NICE. This poster presentation describes the design and use of viCyber, an intelligent cybersecurity course design tool, currently under development with support from the National Security Agency. The goal of this tool is to guide inexperienced instructors through the curriculum design process and provide an evaluation of their design with suggestions for possible improvements. viCyber is available as a web-based tool for trial and evaluation by the cybersecurity education community. It is hoped that the dissemination of information through this presentation will help make educators aware of this publicly available web-based tool and elicit valuable feedback from cybersecurity educators.	viCyber: An Intelligent Curriculum Design Tool for Cybersecurity Education	NA:NA:NA	2018
Hillary Fleenor	Even though the computer science education community has not definitively established exactly what ?Computational Thinking" entails, most will agree that it is using a computing machine to solve problems. Like all tools for solving problems, this knowledge should be made available to everyone. Jeannette Wing sounded this call in 2006, writing that "computational methods and models give us the courage to solve problems and design systems that no one of us would be capable of tackling alone." These skills are not just for computer scientists, but for anyone and everyone who plans to solve problems. We already teach other forms of problem solving to all our students including: Mathematical Thinking, Critical Thinking, and Scientific Reasoning. Computational Thinking, as well as engineering and design's Design Thinking, should be equally exposed to all students. It is also important to illuminate that these tools are not used in isolation to solve problems. Perhaps the key to the acceptance of Computational Thinking (as well as Design Thinking) as essential educational tools is to highlight their overlap and interdependence with other problem solving skills. The next generation will need practice with every tool at their disposal to be prepared to solve tomorrow's problems. I propose embedding Computational Thinking in a problem solving framework that leverages teachers' (and students') existing knowledge of problem solving in mathematics, science, and language arts in order to encourage teachers in non CS disciplines to teach Computational Thinking in their classrooms.	Establishing Computational Thinking as Just Another Tool in the Problem Solving Tool Box	NA	2018
Caroline Hardin:Alexander Brooks:Joshua Gabai:Anthony Pellicone:Isaac Sung	In the space between the well documented shortage of access to computer science educational (CSed) opportunities, especially those that broaden participation, and the increasing consensus that computer science knowledge is a fundamental modern literacy lie an eclectic collection of non-traditional and informal CSed projects. An increasingly popular form of interest-based CSed product are board games, which are often justified as interventions due to their 'unplugged' nature and their supposedly natural appeal to diverse audiences of children. Through an exploration of the popular and academic discourses around the CSed board game genre, we found over 30 games which specifically aim to teach core CS content, often with a wide variety of rationales for utilizing a board game format. This poster will display the results of our preliminary work investigating how designers position cardboard as the exciting new alternative for teaching computer science education. Our examination of game makers' documentation and related research suggests that further work is required to determine how well the board game medium serves the various justifications presented by the game makers in our sample.	Questioning the Board in Computer Science Education Board Games	NA:NA:NA:NA:NA	2018
Susan P. Imberman:Robert J. Domanski	Responding to NYC Mayor Bill de Blasio's call to double the number of students graduating with Bachelor degrees in computer science, in 2017, the Tech-in-Residence Corps program - a first-of-its-kind multistakeholder partnership between academia, government, and private industry, was established to specifically address two challenges at the City University of New York; the capacity problem (not enough faculty to accommodate the growing student body) and creating curriculum that incorporates in-demand "applied knowledge" areas to increase students' job competitiveness. Moving industry practitioners into the classroom posed problems that both mirrored and went beyond those posed by the typical adjunct hire. First, accommodations had to be instituted to consider the industry adjunct's work schedule. Second, industry professionals professed a fear of not being able to develop materials and teach effectively. To address these concerns, we set up an administrative structure that paired industry adjuncts with campuses that fit their pedagogical strengths and goals, as well as their logistical needs. Industry adjuncts were assigned campus faulty mentors so that there was a point person with which to communicate other than the chairperson. Both industry adjuncts and faculty attended a two-day workshop focused on pedagogical best practices as well as campus logistics. This poster outlines the Tech-in-Residence Corps model and presents our initial results. Early data indicates that this program has proven quite effective for driving curriculum innovation and raising student awareness of industry trends and hiring practices, however, the jury is still out as to whether it helps address the institutional capacity problem.	Creating a Tech-in-Residence Corps of Industry Adjuncts: An Academic/Government/Industry Partnership	NA:NA	2018
Cheryl Resch:Christina Gardner-McCune	Encouraging Reflection in Support of Learning Data Structures Cheryl Resch, University of Florida Christina Gardner-McCune, University of Florida Contact: [email protected] Our research looks at using reflection in teaching Data Structures and Algorithms (DSA) to promote meaningful learning. This poster examines the differences in reflections produced by two different programming assignments in DSA at the University of Florida. In the first assignment, students were asked to implement a line editor using a linked list and in the reflection prompt students were asked to reflect on the use of the assigned data structure and what they would do differently if they could do the assignment again. In this assignment, the dominant reflection was a simple recounting of material taught in class. In 15% of the reflections, students identified an implementation improvement that could be used. In 25% of the reflections, students identified non-technical issues such as time management when reflecting on what they would do differently if they had to do the assignment again. In the second assignment, students were asked to code Google's page-rank algorithm and were allowed to choose a graph implementation. They were asked to reflect on their implementation and what they would do differently if they could do the assignment again. In this assignment, the dominant reflection, ?%, was about the appropriateness of the chosen graph implementation compared to other implementations. In their reflection on what they would do differently, only 12% of the reflections mentioned non-technical issues. This data suggests that giving students an opportunity to decide the implementation approach and providing more specific reflection prompts produces more technical reflections. DOI: HTTPS://DOI.ORG/10.1145/3287324.3293802	Encouraging Reflection in Support of Learning Data Structures	NA:NA	2018
Jessica Vandenberg:Jennifer Tsan:Zarifa Zakaria:Kristy Elizabeth Boyer:Collin Lynch:Eric Wiebe	Demand for K-6 computer science (CS) curricula is growing considerably. Many of the existing curricula have been developed by domain experts who are comfortable with specific and technical terminology, which they expect students to master. However, children are not always comfortable with these terms nor do they understand general concepts like 'coding' in the way that the curriculum designers intend. This is a problem because many researchers use self-report and attitudinal survey instruments with the implicit belief that the students' understanding of the terms and concepts resemble their own. This mismatch may invalidate results. For this project, we report on our modification of a validated survey to measure upper elementary students' attitudes about and perspectives on CS by attempting to understand the appropriate language to use when querying children about these topics. We use an iterative, design-based research approach that is informed by educational and psychological cognitive interview processes. We interviewed two groups (N=64) of upper elementary students on their understanding of computer science concepts and attitudes toward coding. Our findings indicate that 4th and 5th grade students could not explain the terms computer programs nor computer science as we had expected and that they struggled to understand how coding may connect with or support their learning in other domains. These results will help to guide the development of appropriate survey instruments and course materials for K-6 students, which both match their use of broad domain concepts and therefore inform their understanding and improve their outcomes.	The Development and Validation of Survey Items on Upper Elementary Students' Perspectives and Attitudes on CS	NA:NA:NA:NA:NA:NA	2018
Jeffrey Xavier:Alan Peterfreund:Rebecca Zarch:W. Richards Adrion:Renee Fall:Mark Guzdial:Barbara Ericson:Sarah Dunton:Tom Mcklin	Efforts to improve and promote CS education characterized by greater participation of underrepresented groups have taken off sharply in the six years since the Expanding Computing Education Pathways (ECEP) NSF alliance was first funded. Though many of these initiatives are occurring at the student and teacher level, ECEP and other national-level organizations have demonstrated the importance of focusing on change at the state level, as this can have important, long-term implications on policy and infrastructure. This poster describes ECEP's emergent design as a backbone organization helping state-level teams achieve educational change around CS. It also highlights key lessons learned through the alliance about how to foster CS education change at the state level. Four key lessons stand out. 1) The importance of understanding that engaging states requires appreciating the commonality of a framework around key areas to change (such as state standards, teacher certification and graduation requirements) but also respecting the uniqueness of state circumstances in these change areas. 2) The shared value created through a collective impact model to build a community that can support rich discussion and sharing of ideas. 3) The utility of an empirically derived a 4-stage model of state change used by ECEP that emphasized defining leaders, understanding the CS education landscape and finding allies to support efforts. and 4) The role of state team structures that can facilitate change when they are guided by identifying and engaging key stakeholders within a state and giving them a voice in driving the strategies and plans.	Fostering State-level Change In CS Education: The Expanding Computing Education Pathways Alliance	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Fatima Abu Deeb:Timothy Hickey	There has been a rapid proliferation of auto-graders for introductory programming courses to cope with rapidly expanding Computer Science enrollments. In this poster we report on our research in developing and deploying a problem solving learning environment, Spinoza 3.0, which goes beyond auto-grading and provides active learning exercises to teach debugging, testing, and good coding style in addition to providing immediate feedback on program correctness. The key idea is to collect all of the attempts by all students to a particular problem generated by a particular class and to form them into equivalence classes where two attempts are equivalent if they produce exactly the same values on all of the unit tests. This allows the system to find the most common errors made by that class. The system then generates a variety of different kinds of problems by selecting either one of the most common errors or one of the correct solutions and asking the students to critique it. After a student makes a critique they are shown (a subset of) the critiques of their fellow students and are asked to pick the best one before proceeding to the next problem. Since the system generates new problems precisely tailored to this particular class, by turning selected attempts into new problems, we call this approach Recursive Pedagogy. This poster reports on preliminary results we have obtained using Recursive Pedagogy in an Introduction to Python Programming course with 19 college students.	Teaching and Assessing Debugging, Testing, and Coding Style with Recursive Pedagogy using Spinoza	NA:NA	2018
Valdemar Švábenský:Jan Vykopal:Pavel Celeda	Capture the Flag games are software applications designed to exercise cybersecurity concepts, practice using security tools, and understand cyber attacks and defense. We develop and employ these games at our university for training purposes, unlike in the traditional competitive setting. During the gameplay, it is possible to collect data about players' in-game actions, such as typed commands or solution attempts, including the timing of these actions. Although such data was previously employed in computer security research, to the best of our knowledge, there were few attempts to use this data primarily to improve education. In particular, we see an open and challenging research problem in creating an artificial intelligence assistant that would facilitate the learning of each player. Our goal is to propose, apply, and experimentally evaluate data analysis and machine learning techniques to derive information about the players' interactions from the in-game data. We want to use this information to automatically provide each player with a personalized formative assessment. Such assessment will help the players identify their mastered concepts and areas for improvement, along with suggestions and actionable steps to take. Furthermore, we want to identify high- or low-performing players during the game, and subsequently, offer them game tasks more suitable to their skill level. These interventions would supplement or even replace feedback from instructors, which would significantly increase the learning impact of the games, enable more students to learn cybersecurity skills at an individual pace, and lower the costs.	Towards Learning Analytics in Cybersecurity Capture the Flag Games	NA:NA:NA	2018
Tamara Peyton	The interdisciplinary fields of Computer Science & Engineering and Human Computer Interaction are increasingly faced with developing human-centered solutions faster, with fewer project members. As a result, while learning the process of human-centered research and design within human-computer interaction classes, CSE students often appear to feel pressured to just go ahead and start building as quickly as possible. This is not the right approach, as students will then ignore the crucial problem identification phase of any project. In order to foster the right research and analysis mindset in students, it is often necessary to get them to think outside the box, break down the bumps in the project path, and analyze the action of everyday activities. This poster presents three different object lessons I have used in the undergraduate and graduate classroom that wake students up to the need to research issues, analyze evidence and think critically about connections between people, information and technology - all before they code or make. Handouts.	Boxes, Bumps & Breakfast: Object Lessons for Teaching Undergraduates the Importance of Human-Centered Research & Analysis	NA	2018
Jeremiah Blanchard	Computer science coursework at the undergraduate level at most institutions includes low-level systems coursework. Such coursework is often largely theoretical. When students complete assignments which involve writing software, they often do so in the context of operating systems not identified and/or connected with their everyday experiences (e.g., Minix or XINU). Approaches also tend to focus on kernel-level operations - leaving out the connections to higher levels of the OS (e.g. graphical user interfaces). To connect systems concepts and assignments to students' personal experiences and provide a mechanism to discuss high-level layers of interactive operating systems, we assembled a Linux/Android operating system variant specifically geared to be accessible to students taking introductory systems courses, dubbed "Reptilian". Reptilian, available as an Open Virtual Appliance (OVA) image, provides both an Ubuntu-derived user-space and the standard Android GUI user-space. The appliance provides a typical Linux kernel development environment for assignments while facilitating demonstration of connections between layers in a modern operating system. To investigate the impact of the use of Reptilian, we compared questions on student evaluations between two semesters - one using Minix as the target system for student assignments and another using Reptilian. The curricula topics were identical, and both courses were taught by the same instructor. Students the cohorts completed comparable projects focused on the process table and filesystem, while the Reptilian cohort also completed a GUI layering assignment. We found that students rated content relevance, learning, and engagement of critical thinking more highly in the Reptilian cohort compared to the Minix cohort.	Situated Learning in Systems-Level Coursework	NA	2018
Paul E. Dickson:John Barr	In computer science (CS) classes it is common to give students a large ill-defined problem and let them struggle with it. The mess of the problem forces students to identify knowledge needed to solve the problem and to learn problem-solving skills. This is the concept behind problem-based learning (PBL), a learner-centered pedagogy that has become a popular research topic in computer science. PBL in CS has 3 defining characteristics: 1) presenting students with large authentic projects, 2) enabling students to independently learn necessary concepts, and 3) enabling them to learn while working in groups. An examination of the CS PBL/project-based learning (PrBL) literature reveals that step 2, self-directed or self-regulated learning (SRL), is lacking in almost every description of PBL. However, extensive CS research literature explores effective methods of SRL, and these methods revolve around the concept of reflection. We therefore propose a new structure for PBL/PrBL that we term messy learning that explicitly incorporates large, ill-defined, authentic projects and reflective activities. We also describe our experience with using messy learning in a game development course and present some examples of how to apply messy learning.	Messy Learning: When Problem-based Learning Just Isn't Enough	NA:NA	2018
Yefei Dong:Michelle Craig:Jennifer Campbell	Studies in other disciplines demonstrate that writing summaries of videos or readings is an effective strategy for increasing student understanding. We explore a related strategy in computer science where we ask students to write explanations of program behaviour. Our experiments are conducted through an online application used by students to prepare for class by watching videos and solving follow-up exercises. With students randomly assigned to treatment groups, we evaluate the effect of different kinds of video follow-up questions by analyzing pre- and post-performance on subsequent select-all-that-apply multiple-choice questions. In experiment one, we found no difference in post-performance between students who wrote explanations and those who were not asked to do so. When the same prompt for explanations was accompanied by a motivational sentence, the quality of the student answers increased, but post-performance was unchanged. In a second experiment, students received either no experimental questions, questions requiring a written explanation or short-answer questions with a single correct response. Again, we found no difference in post-performance across the different treatments. This non-significant result might be explained by the post-performance question difficulty -- the question might not be hard enough to reveal differences in understanding. The question timing might also be a factor, since students complete all the questions soon after watching the video and there may not be enough time for students to need the extra retention benefit gained by doing the experimental questions.	Evaluating the Effect of Follow-up Questions in an Online Exercise	NA:NA:NA	2018
Robert M. Siegfried:Diane Liporace:Katherine G. Herbert-Berger	The CS1 course is arguably the most important course offered in a Computer Science major; if students struggle in the course, they are likely to drop out of the major, and if certain key topics are covered, they may struggle in other courses later in their undergraduate program. For this reason, it is not surprising that the programming language used in a CS1 course as well as the teaching methodology is frequently a contentious subject. Richard Reid of Michigan State University kept a list of programming languages used in CS1 courses from the early 1990s until his retirement in 1999, and Reid's former student, Frances Van Scoy, continued compiling the List until 2006. Siegfried et al. updated the List in 2011 and 2015. The historical data shows the different languages (and in some cases, approaches) used by the schools reported on the Reid List. Additionally, in compiling the last two lists, there were trends spotted, with some feedback from faculty at the Reid List schools, stating the reasons for changes that they made as well as why they currently use and previously used the various languages.	What Can the Reid List of First Programming Languages Teach Us About Teaching CS1?	NA:NA:NA	2018
Christopher A. Egert	Game engine design and development is a highly desirable area of exploration for students involved in the computing sciences. Equally, faculty find the use of game engines to be highly compelling in upper division computing courses as they consolidate application of systems topics and usually require a team-based approach in their architectural design and implementation. As an application domain, game engines exhibit a high degree of complexity and present students with challenges related to many areas of the curricula, including graphics programming, computer architecture, operating systems, compiler theory, artificial intelligence, and much more. However, at a practical level, the use of game engines as a motivator for computing concepts and large-scale software development is beginning to change. Educators are starting to question the utility of games engines in the computing classroom given the availability of high quality, easily accessible commercial engines. In this poster, the author examines how this changing landscape influences computing educators that wish to utilize game engines as a motivator in the computing classroom. The poster provides insight into the challenges related to the software construction of game engines and the reality of new approaches and techniques that are on the horizon. The poster provides examples of means and methods to provide balance, incorporating lessons learned from new industry approaches in relation to (and not exclusion) the foundational practices of the computing sciences.	Game Engines Construction to Motivate Computing Concepts: Build from Scratch or Leverage Existing Systems	NA	2018
Mehmet Celepkolu:Erin O'Halloran:Jamieka Wilkinson:Kristy Elizabeth Boyer	As efforts to integrate computer science into K-8 teaching in the US are dramatically rising, professional development workshops for teachers are becoming widespread. An open challenge for the CS education research community is to understand teachers' needs and develop empirically grounded best practices for professional development. This poster displays our findings from a five-day professional development workshop in which 22 third through eighth grade teachers from various subjects learned about fundamental CS concepts, practiced coding, and created lesson plans for integrating what they learned into their classroom. We present quantitative and qualitative outcomes, with emphasis on teachers' perception of CS and how to integrate CS into their classrooms. The quantitative results, based on pre- and post-tests, reveal that the teachers gained significant technical knowledge and improved their attitudes toward CS. The qualitative results, based on the focus groups conducted before and after the workshop, indicated that teachers' limited exposure to CS can lead to misconceptions and some negative attitudes. Moreover, limitations such as time constraints and lack of understanding of CS are barriers to integrating CS into classrooms. On the other hand, the workshop provided teachers a clearer sense of the potential of CS to enhance their classroom plans. Teachers noted that they felt able to use CS to help students learn critical thinking, prepare them for their futures, and address their individual needs. These results can inform future workshops that address the needs of teachers and students.	An Analysis of Upper Elementary and Middle Grade Teachers' Perceptions, Concerns and Goals for Integrating CS into Classrooms	NA:NA:NA:NA	2018
Shuchi Grover:Ximena Dominguez:Danae Kamdar:Phil Vahey:Savitha Moorthy:Ken Rafanan:Sara Gracely	How do we integrate requisite thinking skills into children's earliest informal and formal learning experiences in order to prepare the next generation of problem solvers? This project examines how Computational Thinking (CT) skills align to the abilities and interests of young children and can be integrated with other STEM learning activities in order to promote school readiness. The goals of the project are to (1) build a knowledge base on how CT can be promoted in early childhood through integration with mathematics and science, (2) develop learning blueprints to guide the development of integrated classroom and family resources, and (3) develop and evaluate prototype activities to identify design principles useful to future development efforts integrating CT and STEM in early childhood. In this work, a multidisciplinary research team with expertise in CT, early science and mathematics, technology and media, and home and school learning partners with preschool educators and parents to co-design and pilot test prototype activities. Emerging prototypes presented integrate fundamental science and mathematics concepts and practices with CT skills such as problem decomposition, logical and algorithmic thinking, abstraction and debugging. They include hands-on activities with manipulatives familiar to young children and developmentally appropriate technology with unique affordances for complementing and reinforcing the learning that occurs during hands-on experiences. With a goal of addressing CS For All, the co-design, development and pilot testing of prototype activities aim to take into account the needs and strengths of preschool programs and families from low-income and culturally diverse communities.	Integrating Computational Thinking in Informal and Formal Science and Math Activities for Preschool Learners	NA:NA:NA:NA:NA:NA:NA	2018
Katelyn Manzo:Stacy A. Doore:Sarah Harmon	It is not just K-12 students that have misconceptions about computer science. Undergraduate students entering into a post-secondary computer science major also have significant misconceptions about what a computer scientist actually does on a day-to-day basis, even at the end of their four-year undergraduate computer science program. While the Draw-A-Scientist Test (DAST) investigates student perceptions of scientists in general (Chambers, 1983) and the Draw-An- Engineer Test (DAET) examines student perceptions of engineers (Knight and Cunningham, 2004), there have been few adaptations investigating student perceptions of computer scientists (Martin, 2004). Based on previous research, our study assessed undergraduate computer science student perceptions of computer scientists at both a mid-size research university and a small liberal arts college. Students (n=120) were asked to describe computer scientists in both a visual format and a written format using an adaptation of the DAST. The authors share comparative results for computer science students (pre-test, post-test) perceptions when 1) exposed to an intentional but not explicit curriculum with diverse representation of computer scientist images and a broad range of computer science research areas, and 2) exposed to a regular curriculum without intentional messages about the diversity of computer scientists and the diversity of research areas within the discipline. The poster describes additional scoring measures introduced beyond those in previous instruments which help to better categorize and interpret perceptions of computer science students about their own discipline.	Undergraduate Computer Science Student Perceptions of their Own Field	NA:NA:NA	2018
Rachelle Kristof Hippler	Much research has been conducted demonstrating that women often have different experiences in computer science than their male classmates. Self-esteem research provides one way we can understand the effects of these experiences as self-esteem has long been associated with well-being and academic success. Some experiences may be positive and enhance self-esteem, where others may be negative and decrease self-esteem leaving students to doubt whether they belong in their computing major. This poster presents a workshop for students that is grounded in research on building what is called "authentic" self-esteem. Authentic self-esteem can be understood as a balance between competence (skills) and worthiness (feelings of connectedness and acceptance). Recent research by the poster presenter based on these two factors of self-esteem revealed that female computing student's feelings of worthiness and competence are unbalanced: (1) their feelings of worthiness are lower than their feelings of competence within their computing major; and, (2) the gap is largest among seniors. This gap between competence and worthiness manifests as doubt just at the time that students should be excited about graduation and interviewing for jobs. The workshop presented in this poster was developed with psychologist Christopher Mruk and is based on his Competence and Worthiness Training (CWT) program. The workshop is aimed at providing students with tools to build their authentic self-esteem through helping to close the gap between their feelings of competence and worthiness.	Overcoming Doubt: Workshop Aimed at Giving Students Strategies to Build Their Authentic Self-Esteem Within Their Computing Major	NA	2018
Michael J. McCarthy:Joseph Mertz:Martin L. Barrett:Michael Melville	Labs in a large lecture course provide highly scaffolded programming exercises. Despite positive student feedback, some students were not achieving the learning goals. This project attempted to increase student's conceptual understanding using short active learning exercises. The first iteration of this project used two versions of active learning: present several multiple-choice questions about the lab material, then either provide a full debrief of all answers or a partial debrief of only the correct answer. The control group was the previous semester's course when no debriefing was done. Two research questions were evaluated. First, does debriefing enhance learning in a computer science course? We found that students performed significantly better on debriefed items compared to students that were not debriefed. These results were unaffected by individual student GPA as a predictor. Second, does level of depth of debriefing affect learning? We found no significant difference between full debrief and partial debrief groups. These results were replicated in a second trial that compared full, partial, and no debriefing. In the second iteration of the project, each of three sections were given a full debrief, partial debrief, or no debrief (only the correct answer was given with no explanation). The full debrief group and the partial debrief group used the Think-Pair-Share method: pairs of students discussed the questions and various answers; one pair was chosen at random to answer each question. The research question is, does the level of depth of the debriefing intervention among the three treatments affect learning?	Debriefing Lab Content Using Active Learning	NA:NA:NA:NA	2018
Gary Krenz:Thomas Kaczmarek	The new graduate curriculum initiative, COSMIC: Change Opportunity - Start Masters in Computing, is aimed at an adult population that is typically under-served by computing programs at institutions of higher education. The COSMIC initiative provides an accelerated pathway to a professional Master of Science (MS) degree for individuals who do not have an undergraduate degree in computing, but who wish to cross over into the computing field. The COSMIC initiative is based on a highly focused summer bridge course combined with a customized curriculum pathway that allows people without computer science degrees to merge quickly and efficiently into a professional MS in Computing degree program. In this poster, we discuss our bridge course, additional bridge curriculum and its connection to our MS in Computing program; and present preliminary data from initial COSMIC cohorts. The COSMIC initiative's goal is to provide the computing profession with a documented model for training students that seek to cross over from non-computer science undergraduate degrees to work in the computing field.	Graduate Curriculum Initiative - COSMIC: Change Opportunity - Start Masters in Computing	NA:NA	2018
Audrey Rorrer:Julio César Bahamón	We describe a study of learning outcomes in an undergraduate C Programming course taught in two modalities: in-person and online. Because this course has been taught by the same instructor, using the same scaffolding activities, materials and approaches, we were uniquely positioned to conduct a quasi-experimental study of learning outcomes between courses and within students. Our goal was to glean knowledge and implications about assessment practices for undergraduate courses that are taught in two modalities. The objectives of our research are to discern what differential impacts are found between in-person and online delivery modalities. We aimed to discover learning outcome patterns among the students who participate in these modalities. Findings from this study provide valuable information for undergraduate Computer Science programs by identifying any differential learning outcomes that students experience between in-person and online course instruction. The research questions addressed were: 1) What impact does modality have on student learning outcomes? 2) What patterns are discernable across student groups 3) What relationship is there between final course grades and assignment module learning outcomes? We were surprised that no significant differences were obtained between course modality. While this is an encouraging finding, we believe that further data collection and analysis are needed, before making general conclusions. We are planning future studies to account for additional variables, such as instructor, multiple modalities, and online course design approaches.	An Investigation of Learning Outcomes Between Two Teaching Modalities to Improve Student Learning in Online Courses	NA:NA	2018
Lauren Elizabeth. Provost:Christopher Harrington	This poster session will discuss several dimensions of bias in curricular design that must be considered in the development of curriculum materials in undergraduate computer science education if we are to broaden interest, engagement and ultimately participation. Multiple dimensions of bias were used to identify gender, race and other biases in curricula that led to the authors' redesign of coursework materials and activities in two undergraduate courses: Computer Networks and Cybersecurity. Our goal was to assess current curricula and ultimately redesign curricula to include topics and authentic activities connected to industry while also broadening learner interest, engagement and accessibility. The design of materials intentionally shifted to social problems, data-driven problem solving and other new curricula foci areas that have been shown to broaden interest and engagement. In addition, materials are aligned with national standards and competencies in cybersecurity while maintaining course rigor. The expanded study includes the use of multiple measures to assess the effectiveness of curriculum design in relation to interest and other factors that influence the engagement of learners in their first two years of computer science coursework. The Computer Science Cultural Attitude and Identity Survey (CSAIS) was revised and used to measure constructs that influence the attitudes and identity of undergraduate students in computer science including interest as well as other factors such as self-efficacy and identity.	University-Industry Collaboration in Curriculum Design: A Case Study of Curriculum Design for Early Undergraduate Computer Science Coursework with an Eye on Equity	NA:NA	2018
Ashwin Satyanarayana:Lior Baron	Effective tutoring is not limited to humans alone. A significant amount of research in songbird learning has shown that birds' songs are not coded in the DNA like other behavioral features but learned over time through one-on-one tutoring involving experimentation, error detection and adaptation. Like students, juvenile songbirds use active listening to learn a tutor's song that is repeated multiple times. The songbird first divides the complex song into short syllables and later uses trial and error to match the syllables sequence to the tutor's song. Birds learn more effectively when listening to an adult bird from the same species. We draw a parallel to bird learning in humans by implementing one-on-one peer-based tutoring of first-year students by senior students, who share the same culture. This poster presents a successful ongoing mentoring and tutoring model used at the Computer Systems Technology department of New York City College of Technology (CUNY) for over five years. This peer-based model utilizes strategies shared by both first-year students and young birds involving social interaction, active learning and problem decomposition. Furthermore, the tutors hired were trained to use the same strategies observed in songbirds tutoring. This project has shown an increase in first-year student retention rate of 83% for students who participated in this program as compared to 61% retention for students who did not. The tutoring program impact demonstrated that the students' academic performance increased significantly (mixed model anova F(1, 247) = 29.11, p < 0.001).	A Peer Based Tutoring and Mentoring Model for First Year Computer Science Courses Based on Strategies Used by Songbirds for Learning	NA:NA	2018
Yuuki Yokoyama:Hironori Egi	In this research, we devised learning support strategies to change how teaching assistants (TAs) for basic university courses in information technology (IT) behave toward students during programming classes. Based on learning support strategies, we developed and evaluated a TA support system that presents student learning situations on mobile devices. In basic IT courses, a TA support system is often used to help and guide individual students. To help TAs using such support, a previous study visualizes the learning situation and offers advice. However, support in addition to presenting learning situations to the TA should include guidelines for interaction with the students. In order to provide adequate support to students, we propose learning support strategies for TAs. In practical computer science exercises, TAs mainly advise and answer questions from students. However, it is not clear how TAs could best support students. Therefore, we propose the following learning support three types of strategies: "Hope", "Priority", "Motivation". Futhermore, we researched what learning support from the TA was desired by the students and developed a TA support system that presents learning support strategies. According to each learning support strategy, the classroom's map governs seat colors for each student who is the recipient of advice. The TA prioritizes helping the students presented by the learning support strategy as mapped by the seat charts. The system we developed was practiced in class, and as a result we found that even students who wanted to work on sophisticated content did not consider the teacher and TA unnecessary.	Changing Teaching Assistant's Behavior Based on Learning Support Strategies for Programming Exercise	NA:NA	2018
Lina Battestilli:Sarah Korkes:Olivia Smith:Tiffany Barnes	Automated grading has become crucial in supporting large introductory Computer Science courses by assisting instructors in reducing grading time and course costs. However, novice programmers are often frustrated by auto-grading tools as they often provide minimal feedback or the questions are too complex. We propose using Bloom's Taxonomy to gradually increase the complexity of the programming question in an auto-grading tool. The easiest questions are based on Knowledge and Comprehension. Next are questions that require Application and Analysis. The most complex questions require Design and Creativity. We have developed programming questions that fit these categories. For example, for debugging the students have to understand and Analyze code. However, in order to write a program with more complex logic the students have to be Creative. The main goal is to lead novice programmers to learn more effectively and efficiently. In this poster, we present examples of the developed auto-graded programming problems based on Bloom's Taxonomy and the results of a pilot study in a CS-1 non-majors course	Using Bloom's Taxonomy to Write Effective Programming Questions for Autograding Tools	NA:NA:NA:NA	2018
Merijke Coenraad:Jen Palmer:Diana Franklin:David Weintrop	The underrepresentation of women and minorities in the field of computer science is well documented. Due to this lack of representation, efforts to broaden participation in computing abound. One manner with which to do this is through the development of culturally relevant curricula. Education literature encourages the use of culturally relevant techniques and topics to teach school content through the knowledge of diverse groups as well as teach about culturally diverse populations. In addition, partnering with the students who will learn with the curriculum is encouraged in order to co-develop ideas and learn more about students' interests and experiences. This poster describes the outcomes from a series of participatory design sessions with a diverse group of stakeholders (students, teachers, parents, and administrators) to design an intermediate computing curriculum for 5th - 7th grade students. Specifically, we examine the topics developed by the participants that are being utilized as themes for curricular units. Preliminary analysis shows that participants of all ages brainstormed and utilized themes related to both cultural heritage and contemporary culture, but more focus was placed on youth culture and pop culture topics. The poster will describe the design methods used during the participatory design sessions as well as the themes developed and an overall analysis of the categories from which the themes are drawn.	Utilizing Participatory Design to Develop a Culturally Relevant Computer Science Curriculum	NA:NA:NA:NA	2018
Harrison Chotzen:Alasdair J. Johnson:Parth M. Desai	This paper describes misconceptions students encounter as they design algorithms to implement linked list operations. The research was conducted in a qualitative manner [1], and aims to inform pedagogical practice in the data structures space. The design of our study involved conducting interviews with five undergraduate students, who were given a packet consisting of four questions involving arrays, linked lists, or binary search trees. Though participants showed a confident understanding of the way that linked lists work as static diagrams, when asked to reason about the reassignment of pointers during the design of insert and remove operations, the students seemed to struggle. The details of the representation of pointers as members of the linked list class appeared unclear to our participants, and we posit this gap of understanding was a primary source confusion. We posit increased attention to the object oriented implantation of linked lists in data structures education may result in improved learning outcomes.	Exploring the Mental Models of Undergraduate Programmers in the Context of Linked Lists	NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #2	NA:NA	2018
Qiong Cheng	In the Big Data era, essential data skills are critical for everybody in full participation of the workforce and modern society to better understand decisions from diverse levels of society. However not all graduates exit college with these needed skills. In this poster, the author(s) report on the integrating of data literacy into a college-wide computer and information literacy course with collaborative practices of project-based learning, which aims at increasing students' awareness of data science and boosting essential data skills of college-wide students. In the poster, we will demonstrate our module design on training essential data skills through examples, case students, and team-based projects within a college-wide computer and information literacy course. We will also present our comparative analysis on one data-enhanced course session with other two course regular sessions as control. In the data-enhanced session, students formed a team, choose a topic in the engaging context, specified questions that they want to ask and answered through data, analyzed data from different perspectives, evaluated results, and present in the course poster session. Two measures are used in assessing the effectiveness of exploratory and collaborative learning in data literacy: student performance in a poster session and student perceptions on Likert scales. Thus far the evaluation results and statistical analysis showed the innovative practice significantly intrigued students' interest in data science and boosted students' fundamental data skills, for both computer science or non-computer science majors.	Enhancing Essential Data Skills for College-wide Students	NA	2018
Hossain Shahriar:Kai Qian:Md Arabin Islam Talukder:Reza Parizi	The majority of malicious mobile attacks take advantage of vulnerabilities in mobile applications, such as sensitive data leakage via inadvertent or side channel, unsecured sensitive data storage, data transmission, and many others. Most of these mobile vulnerabilities can be detected in the mobile software testing phase. However, most development teams often have virtually no time to address them due to critical project deadlines. To combat this, the more defect removal filters there are in the software development life cycle, the fewer defects that can lead to vulnerabilities will remain in the software product when it is released. As part of Secure Mobile Software Development (SMSD) project, we are currently developing capacity to address the lack of pedagogical materials and real world learning environment in secure mobile software development through effective, engaging, and investigative approaches. In this session, we provide details of a new implemented module named data protection. We also share our initial experience and feedback on the developed module.	Data Protection with SMSD Labware	NA:NA:NA:NA	2018
Kalpathi Subramanian:Kiran Budhrani	Traditionally, students are introduced to programming oriented courses by covering a series of topics and having a programming project due at the end of each topic. Assigned projects are often not connected to each other, but are rather used to expose students to a variety programming constructs and concepts. Students take the most direct approach such as trial and error to complete these projects. While this scenario utilizes projects, it approaches the use of projects as a means to assess learning rather than a means for learning. In this poster, we present results from a project-based online course in object-oriented analysis and design. We present a model for structuring project modules that provide opportunities for students to prepare, design, implement and reflect on each project module. By providing multiple points for feedback and reflection, as well as assigning projects with visual components, the course aims to promote engagement of undergraduate students, while at the same time maintaining rigor. Preliminary results from this course are encouraging, and could potentially become a model for project based learning.	Applying Project-Based Learning for An Online Object-Oriented Systems Course	NA:NA	2018
Zhewei Hu:Edward Gehringer	Rising enrollments make it difficult for instructors and teaching assistants to give adequate feedback on each student's work. In our software engineering course, we have 50-120 students each semester. Our course projects require students to submit GitHub pull requests as deliverables for their open-source software (OSS) projects. We have set up a static code analyzer and a continuous integration service on GitHub to help students check code style and functionality. However, these tools cannot enforce system-specific customized guidelines and do not explicitly display detailed information. In this study, we discuss how we bypass the limitations of existing tools by implementing three Internet bots. The Expertiza Bot can help detect violations of more than 35 system-specific guidelines. The Travis CI Bot can explicitly display instant test execution results on the GitHub pull-request page. The Code Climate Bot can insert pull-request comments to remind students to fix issues detected by the static code analyzer. These bots are either open source or free for OSS projects, and can be easily integrated with GitHub repositories. Our survey results show that more than 70% of students think the advice given by the bots is useful. We tallied the amount of feedback given by the bots and the teaching staff for each GitHub pull request. Results show that bots can provide significantly more feedback (six times more on average) than teaching staff. Bots can also offer more timely feedback than teaching staff and help student contributions avoid more than 33% system-specific guideline violations.	Use Bots to Improve GitHub Pull-Request Feedback	NA:NA	2018
Ayaan M. Kazerouni:Riffat Sabbir Mansur:Stephen H. Edwards:Clifford A. Shaffer	Debugging is an important part of the software development process, studied by both the CS education and software engineering communities. Most prior work has focused either on novice or professional programmers. Intermediate-to-advanced students (such as those enrolled in post-CS2 Data Structures courses) who are working on large and complex projects have largely been ignored. We present results from an empirical observational study that examined junior-level undergraduate students' debugging practices on relatively large (4-week lifecycle) projects, using IDE clickstream data collected by a custom Eclipse plugin. Specifically, we hypothesize that there are differing debugging behaviors exhibited, and that differing behaviors lead to differing project out-comes. For example, how often do students use the symbolic debugger available in modern IDEs, versus how often do they use diagnostic print statements, or both? What triggers a debugging session? What follows a debugging session? Does it matter when in the project lifecycle that debugging takes place? We have a number of interesting preliminary results. When using the debugger, there was a negative relationship between step-over and step-into actions versus final course grades, indicating that when students "spin their wheels" while debugging, they tend to perform more poorly. Students also tend to perform better on the project when debugging takes place earlier in the overall project life-cycle. We developed an algorithm to identify diagnostic print statements in the students' projects. We found that over 90% used at least one diagnostic print statement, and about 75% used the symbolic debugger, at least once in any given project.	Student Debugging Practices and Their Relationships with Project Outcomes	NA:NA:NA:NA	2018
Mostafa Mohammed:Clifford A. Shaffer:Susan H. Rodger	The material taught in a Formal languages course is mathematical in nature and requires students to practice proofs and algorithms to understand the content. Traditional Formal Languages textbooks are heavy on prose rather than visuals, and homework consists of solving many paper exercises. Some instructors make use of Finite State Machine simulators like JFLAP. JFLAP allows students to build different models and apply algorithms on these models, which improves student interaction with the material. However, students still need to read a significant amount of text without direct and immediate feedback on their understanding. Inspired by the Programmed Instruction (PI) teaching method, we have begun developing a new Formal Languages eText-book capable of conveying these concepts more intuitively (through visualizations) and more interactively (through the use of PI methods). Under PI methods, students read a little, ideally a sentence or a paragraph, and then answer a question related to that information. Based on the question response, students can go further and complete other frames of information or retry to solve the same question. To evaluate the pedagogical effectiveness of our new eTextbook, we will conduct time and performance evaluations across two offerings of a Formal Languages course. We will compare the time spent by students using materials with text and exercises only, with text and visualizations, and with the PI frames to determine levels of students engagement. Students grades will be compared to assess learning gains.	Using Interactive Visualization and Programmed Instruction to Teach Formal Languages	NA:NA:NA	2018
Anisha Kaul:Julia Ann Pinedo:Anya Wallace	This study was a qualitative analysis of introductory-level computer science students' comprehension of sorting algorithms. We asked six students to read and summarize the code of a sorting algorithm. Next, we asked them to trace through the code, first using a provided array with pencil and paper, then again using sticky-notes to represent the array. Focused analysis of one interview found that a student who struggled to comprehend the algorithm during the pencil-and-paper trace quickly gained understanding when physically tracing the sticky-note array. We hypothesize that physical interaction with a sticky-note representation of an array facilitated student comprehension of sorting algorithms by consolidating multiple lines of code (LOC) into a single repeatable action. This research is relevant to computer science educators who may teach sorting algorithms to introductory-level students.	Benefits of Physical Interaction with Array Elements and Code Consolidation on Student Comprehension of Sorting Algorithms	NA:NA:NA	2018
Jennifer Tsan:Jessica Vandenberg:Xiaoting Fu:Jamieka Wilkinson:Danielle Boulden:Kristy Elizabeth Boyer:Collin Lynch:Eric Wiebe	Extensive prior research suggests that pair programming holds many benefits for novices. Pair programming has been well studied at the undergraduate level, and recently, the CS education research community has started to realize that younger learners may also benefit from pair programming. However, an important factor in pair programming success for young learners is the ability to resolve conflicts during the process. Little is known about what types of conflicts occur while elementary students pair program or how those conflicts are, or are not, resolved. To investigate this phenomenon, we analyzed the videos of six pairs of students completing a programming activity. We found that conflicts evolve in four general stages, which may not all be present in each conflict: initiation, escalation, de-escalation, and conclusion. Some conflicts are resolved when the students come to an agreement, others end passively. The analysis revealed that the pairs' conflicts began around disagreements about code, who should have control of the keyboard and mouse, and other interpersonal events. This research indicates that conflicts are a significant concern for young students, and supporting young learners in developing improved collaboration skills is a key direction for CS education research.	An Investigation of Conflicts Between Upper-Elementary Pair Programmers	NA:NA:NA:NA:NA:NA:NA:NA	2018
Miguel Lara:Kathryn Cunningham:Bude Su	Computing educators entice students with information about stable, readily available, and lucrative careers in computing. Do our promises turn into reality for all students? We report on an in-depth alumni survey of 50 college graduates from a 3-year cohort-based program (CSin3), one year post-graduation. The majority of graduates from the two first cohorts surveyed are Hispanic, first-generation college students from a rural area in California. More than a third of the respondents (36%) are female. Notwithstanding the fast pace of the program (three years instead of the traditional four), the vast majority of graduates (88%) were full-time employed at the time of the survey and were hired less than 3 months after graduation, on average. The most common challenges that alumni reported facing professionally are: Work-life balance (36%) Cost of living (36%) Lack of diversity (25%), and Stress in current position (25%) (they could select multiple choices). While no correlation was found between GPA and job satisfaction level or annual salary, significant low grades in upper division programming courses were a common factor among unemployed alumni. We also examined differences, based on gender, in annual salary and job satisfaction level; intention to remain in the technology sector; their level of satisfaction about how well the CSin3 program prepared them professionally; correlation between job satisfaction level and choice of CS as a career; and factors and alumni's perceptions of what contributed to their success in the job market, such as their participation in an internship program and the academic enrichment activities.	Job Placement Experience of Alumni from a 3-year CS Program	NA:NA:NA	2018
Cynthia Y. Lester:Pamela Leggett-Robinson	In 2016, Georgia Perimeter College consolidated with Georgia State University. The new Georgia State University with a student population of over 51,000 has become a national model in serving students from diverse backgrounds. Perimeter College is the 2-year arm of the university and provides instruction to approximately 18,000 students. As of fall 2018, there were over 1200 students who had declared computer science as a pathway and 40 percent were from groups historically underrepresented in STEM. The purpose of this poster to describe co-curricular programs that began in 2012, with the establishment of the Perimeter College STEM Office whose mission was to increase access and success. The poster will present programs that were developed and continue to be utilized to broaden participation, improve retention, and increase CS student identity and a sense of belonging especially among students who are first generation, at-risk, and from minority populations. Although created for students especially at the 2-year college level, programs are scalable to senior institutions. Data and findings will be presented to also include how the STEM Office helped grow programming at Perimeter College by 175 percent and how partnerships have helped to provide sustainability.	Creating Co-curricular Programs to Improve CS Student Identity and Sense of Belonging	NA:NA	2018
C.F. Larry Heimann:Sara Moussawi:Jeria Quesenberry:Raja Soriamurthi	Getting alumni effectively engaged as mentors with students is a topic that is of great interest to universities but often hard to do in practice. We have found that with proper structure and support, software project courses provide a good avenue to make these connections between alumni and student and that alumni input can improve the quality of outcomes in these project courses. In this poster the authors describe the alumni mentoring process and how it has evolved over the past three years. In addition, we have begun to collect data from both student teams and alumni to answer three questions: (1) what information are alumni sharing with student teams? (2) is a student team's perception of what was said matching up well with the mentor's perception?, (3) are student teams able to convert alumni feedback into actionable project items?, and (4) at what phase in a software engineering project are alumni mentors most effective? The poster will demonstrate the details of our mentoring process and display our preliminary findings in a colorful fashion convenient to allow others to assess for themselves the potential value of using alumni mentors in software project courses.	Engaging Alumni Mentors in Software Engineering Project Courses	NA:NA:NA:NA	2018
Carsten Kleiner:Arne Koschel	This poster presents our experiences in offering 10 years of CS/SE capstone projects in the distributed systems area. Based on a presentation of typical example projects over time we draw interesting conclusions. Our observations over this time span address suitable project subjects, development methodology as well as student motivation in projects and how to raise it. We will show that certain aspects have not changed much over time such as: system integration and its effort is always larger than expected. Similarly, using even a well-established enterprise open source technology usually requires more work than estimated upfront. Also, better students tend to prefer more challenging projects. Other aspects have improved making use of recent findings in research and technological development such as using agile development methodology or novel communication means. Also, we demonstrate that good students projects can contribute to research publications and that an international setting for capstone projects is both raising motivation for students as well as increasing organizational challenges. Overall we found that company sponsored projects generally increase result quality as the "real world touch" seems to be appealing.	Lessons Learned in 10 years of Distributed Systems Capstones	NA:NA	2018
Abhimanyu Ghosh:Daniel Sinkovits:Keith Wojciechowski	Students in non-CS STEM majors often have specific difficulties with programming content in their coursework. Instructor feedback is usually limited to the results obtained and major algorithmic errors, due to the nature of coding assignments. The authors' aim is to investigate whether presenting code and receiving feedback from their peers in class makes an appreciable difference in non-CS STEM-major students' learning of programming. The poster will present data collected over two semesters from five sections of three programming-heavy chemistry, engineering and math courses taught at the University of Wisconsin-Stout. Student groups were asked to present their homework attempts to the class, their peers were asked to fill out surveys containing Yes/No questions and comments on the attempts, and this feedback was passed on to the presenting students, who were then given time to improve their work before submitting their final versions. Comparison of student performance statistics in exams, between semesters during which the study was implemented and prior semesters, is used as a tool to assess student learning. Results of the study from two semesters have shown that group composition and the type of questions asked in the survey are the two major factors at play. The poster will also discuss the enhanced design of the study during the third and final semester in spring 2019 that will take these results into account. DOI: http://doi.org/10.1145/3287324.3293820	Improving Programming Skills Through Classroom Presentation of Assignments	NA:NA:NA	2018
Gina Sprint	Despite student interest in mobile app development (MAD) and a rise in demand for mobile app developers, many computer science departments have not yet incorporated a MAD course into their curriculum. For such departments, barriers such as resource and curriculum limitations stand in the way of offering a MAD course. To elaborate, it can be difficult to find an instructor with the expertise to teach a MAD course. If such expertise is not available, it can be time consuming for an educator to train him/herself to gain the necessary knowledge to the teach the course. Furthermore, the instructor must decide which MAD platform to utilize, Android, iOS, hybrid, or web? Since MAD is a relatively new field, there are few resources in the literature that can help with MAD course preparation and design. In this poster, I present my experiences navigating these MAD course barriers at a primarily undergraduate institution. Recently, I have designed and taught a 300-level Android/Java course (Fall 2017) and a 300-level iOS/Swift course (Fall 2018). My experience report includes a summary of MAD course preparation, design, and implementation for both courses. To help guide choosing a platform, I include a detailed comparison of Android and iOS for supporting undergraduate CS learning outcomes. The comparison is based on resources required, maintenance considerations, software design principles covered (OOP and design patterns), and student work and feedback. The experiences reported in this poster offer guidance and insights for educators considering teaching a MAD course at their own university.	Mobile App Development: Android or iOS? An Experience Report from Teaching Both Platforms	NA	2018
Todd Lash:Stephanie Wortel-London:Leigh Ann Delyser:Lauren Wright	Creating equitable, sustainable, and productive partnerships between computer science (CS) education researchers and practitioners is essential if we are to further improve CS educational outcomes, practice, and equity. Research-practice partnerships (RPPs) provide one promising approach for expanding how practice may inform research and research may inform practice. This early work, centered around a framework proposed by Henrick et al., and utilizing interview data from 11 participants, explores the ways in which six diverse RPP teams went about developing trusting and collaborative relationships as they worked together to solve local problems of practice. Barriers and challenges to collaboration and trust building, as well as mechanisms by which teams overcame those challenges, are discussed. The study revealed discrete team behaviors, norms, and structures that may contribute to building more collaborative, trusting, and sustainable RPP relationships. Limitations are presented and implications for current and future RPP teams, as well as possible future research directions, are addressed.	Building Trust in Computer Science Research-Practice Partnerships: A Theme Study	NA:NA:NA:NA	2018
Meng Han:Zhigang Li:Jing Selena He:Xin Shirley Tian	In this poster, the investigators report their experience in teaching five computer science courses that were developed specifically for non-CS major students. These courses were taught in a four-year period in a public research institution in the South-eastern region of the United States. The whole study demonstrates an emerging demand for computing education from non-CS major students. The investigators collected data from both the students and the instructors in the hope to seek empirical answers to the questions of why there are such emerging demands for computing education, where are the demands coming from, and what non-CS major students are looking for in computer science classes. The answers to these questions can help shed the light on what educators should provide to the students in these courses. Based on the analysis of the data gathered, the investigators proposed a list of four recommendations to help guide fellow educators in the development of non-CS major computer science courses: (a) focus on high-level programming and modeling with low syntactic overhead; (b) broaden the breath of application demonstration to help non-CS major students to apply the knowledge to their specific domain; (c) introduction of computational tools; (d) hands on projects that match students' background and interests.	Understand the Emerging Demands of Computing Education for Non-CS Major Students	NA:NA:NA:NA	2018
Katherine G. Herbert-Berger:Nina Goodey:Stephen Ruczszyk:Scott Kight:Thomas J. Marlowe	Contact: [email protected] The United States does not produce sufficient numbers of well-qualified professionals in STEM, and in computing/ technology in particular. The number of students pursuing undergraduate degrees in computer science or related field continues to grow but is still not pacing industry growth. Employers repeatedly suggest that good professional and technical competencies, including "soft skills", are a major factor in both obtaining and succeeding in STEM careers. Moreover, both the Council on Graduate Studies and the National Science Board in the NSF 2018 STEM Trends report support the need of such skills for success in STEM. These competencies comprise (1) communication, oral and written, and in technical, business and general settings; (2) working in and leading teams, in varying roles; (3) managing business and professional relationships; (4) planning, problem solving, and critical thinking; (5) mathematical capabilities including numeracy; and (6) an understanding of ethical, social, managerial, and economic perspectives; plus, responding to recent developments in science and science careers, (7) an interdisciplinary perspective and overview understanding of data science. In this poster we present a proposal for a post baccalaureate certificate curriculum, which we suggest also assists students transitioning from other fields, and can be applied more widely across STEM.	Infusing CS Graduate Transition Curriculum with Professional, Technical and Data Science Competencies	NA:NA:NA:NA:NA	2018
Selvarajah Mohanarajah:Gregorry Ross:Shan Suthaharan	Platform-independent encapsulated and self-contained labs can enhance the delivery of cybersecurity teaching modules in resource-limited academic institutions. Cybersecurity teaching modules usually incorporate hands-on labs using tools such as NETLAB+, NS-3, SEED, GENI, etc. There are two major problems in using such labs; students need to learn the underlying tool before doing labs, and setting-up a lab may require significant IT support and resources. In addition, development and delivery of security labs is barricaded by two other technical realities: built-in security controls in computer systems and networks (e.g. NX-bits, ASL-Randomization, Canaries, Firewalls, etc.), and heterogeneity in students-owned operating environments. In our proposed work, we have studied the concept of container-based educational solutions by leveraging the unique features of Docker containers (i.e., light-weight packaging of code and all of its system dependencies) to build platform-independent encapsulated cybersecurity labs. The benefits of our approach includes, cost-effective teaching environment, scalability over heterogeneous operating platforms, independence from hardware, software, and network controls, and hassle-free learning experience for students. As a proof of concept, we have developed an interoperable encapsulated lab for giving hands-on experience to students in one aspect of cybersecurity, buffer overflow. The lab was created using Docker and uploaded to a central repository. Students can pull this lab from anywhere, and can execute it on any platform that runs Docker daemon. We will use the knowledge and experience gained in this study to build our future research in the areas of building Learning Objects for cybersecurity education.	Towards Encapsulated Cyber Security Labs: A Container Based Approach	NA:NA:NA	2018
James H. Davenport:Rachid Hourizi	The UK is not the only country with a serious digital skills crisis, but it is one with a formal Government inquiry (The Shadbolt Report) and response. It also has very detailed tracking of people into, through and out of higher education into employment. The Institute of Coding (https://instituteofcoding.org/) is a new £40m+ initiative by the UK Government to transform the digital skills profile of England. It responds to the apparently contradictory data that the country has a digital skills shortage across a variety of sectors, yet has unemployed computing graduates every year. The Institute is a large-scale national intervention funded by Government, industry and universities to address some of the perceived issues with formal education versus industry skills and training, for example: technical skills versus soft skills, industry-readiness versus "deep education", and managing expectations for the diverse digital, data and computational skills demands of employers across a wide range of economic sectors. Its work ranges from the development of specialist, in-demand digital skills to the provision of work experience, employability skills and ensuring work-readiness of computing graduates, and the provision of digital skills for those from a non-digital background. It is also addressing under-representation and under-achievement by a variety of groups, notably women (only 16% of university students) but also ethnic minorities and other groups.	The Institute of Coding: A University-Industry Collaboration to Address the UK Digital Skills Crisis	NA:NA	2018
Margaret Ellis	Solving problems in various current subfields of computer science improves student motivation and helps level the playing field for students who are less-likely to be exposed to such topics and tools outside of their coursework. The importance of student mindset is well studied in education, confident students who find course material useful and interesting are likely to be motivated and perform well. For several decades computer science educators have recognized the need for computer science students to enhance and practice their problem-solving skills. More recently, computer science educators have become attentive to barriers to student success, particularly barriers that impact students from groups that are underrepresented in the field. Students with more computing experience outside of their college coursework, such as high school coursework or extracurricular computing activities, have an advantage and the students who lack such experience are likely to be intimidated in addition to less skilled. This updated version of a Computer Science Problem Solving course still addresses the long-recognized need for undergraduates to improve metacognitive and problem-solving skills, but also improves student motivation and engagement by using current computer science tools and demystifying potentially intimidating topics such as version control, security, command line tools, web development and machine learning. In this poster the author reports on the philosophy and design of a newly updated Computer Science Problem Solving course for computer science majors and presents preliminary data regarding student mindset, metacognition and computing experience outside of coursework.	Computer Science Problem Solving Course: Practical and Technical Thinking Skills for CS Majors	NA	2018
Stewart N. Weiss	Many computer science students are eager to learn about how to contribute to Free and Open Source Software (FOSS) projects, but like most computer science departments, ours has no courses to help them achieve that goal. Creating such courses requires buy-in by deans, department chairs, and other faculty, who, because of lack of knowledge, can have little interest in supporting such efforts. Our poster shows how we solved this problem and created a means for students to simultaneously learn how to be contributors to FOSS projects and earn credit toward their major. It shows how we sought and found interested students and engaged them through repeated, informal meetings, which we used to gain the support of the chair and dean, and how we simulated a prototype course by having the students sign up for independent study credit. The group then met at regular intervals, communicated and shared work using discussion forums, source code repositories, and IRC chat. All course content is based on open source materials, including free textbooks, an abundance of on-line tutorials and reference materials, lecture notes and assignments that we wrote, with open source licenses, and other materials borrowed from http://foss2serve.org. The success of this simulated course led to the creation of a pilot course for the Spring 2019 semester, endorsed by the college. The poster presents several assignments, discusses preliminary findings, and provides links to materials that we created for this course. It also shows how we encouraged students to work on humanitarian FOSS (HFOSS) projects.	Design of a Gateway for Open Source Software Development in a Traditional CS Curriculum	NA	2018
Becka Morgan	Humanitarian Free/Open Source Software (HFOSS) participation has been shown to promote real world experience and a create a portfolio of work for students that prove to be valuable assets for entering the work force. Creating a senior level software engineering elective that provides the scaffolding for students to participate in an HFOSS project allows professors to ease the often daunting steep learning curve that exists in contributing to these projects. Educators in computer science have recognized that building community within student cohorts provides many benefits for all students as well as being important for creating inclusive environments for underrepresented minorities. Based on the Communities of Practice model, developed by Lave and Wenger, mentorship also plays an important role in bridging entrance into professional communities. Using a classroom model that incorporates both levels of community by putting students into self-selected groups and using mentors from an HFOSS project provides the mechanisms for the aforementioned scaffolding. This poster will show the student perceived benefits of this course for their overall understanding of their place within the community of CS practitioners, their ability to participate with a diverse group of developers, and how this experience influences how they see their skills in relation to a project of this size. Included will also be lessons learned by teaching this course and resources for teachers to build the knowledge for teaching a course in HFOSS development.	Inclusive Experiences Using HFOSS in a Senior Computer Science Elective	NA	2018
Melissa Day:Javier Gonzalez-Sanchez	With large class sizes and instructors who may not be equipped to assist struggling students, many students abandon the field, deeming it to be too difficult and not for them. Consistent, constructive, supportive feedback through a Tutoring Companion can scaffold the learning process for students. This poster describes a reasoning model, using neural networks techniques, for a tutoring companion embedded into the Eclipse IDE. The companion provides support for students in a first-year university Java programming course. The companion collects data from students' events and programming assignments, analyzes it for relevant trends, and estimates each student's situation. The input data for the neural network comes from areas with which beginning computer science students often struggle, such as the presence of important keywords and the amount of time spent in a state with errors. Then, it determines the feedback to be provided for students to overcome a detected challenging situation, providing both hints on how to fix the problem with the code, as well as encouragement to help keep students motivated and learning. The effectiveness of the approach is examined among first-year computer science students through the completion of recursion and control flow programming assignments. The students complete surveys regarding their learning experience to assist in evaluating the companion's pedagogical effectiveness, which is discussed with an emphasis on the value of feedback provided.	A Neural Network Model for a Tutoring Companion Supporting Students in a Programming with Java Course	NA:NA	2018
Bita Akram:Wookhee Min:Eric Wiebe:Bradford Mott:Kristy Elizabeth Boyer:James Lester	With national K-12 education initiatives such as "CSForAll," block-based programming environments have emerged as widely used tools for teaching novice programming. A key challenge presented by block-based programming environments is assessing students' computational thinking (CT) and programming competencies. Developing assessment methods that can evaluate students' use of CT practices such as testing and refining, and developing and using appropriate algorithms, can help teachers evaluate students learning and provide appropriate scaffolding. In this work, we utilize an evidence-centered assessment design approach to devise a three-dimensional assessment to evaluate students' CT competencies based on evidence extracted from their programming trajectories in a block-based programming environment. In this assessment, the first dimension assesses students' knowledge of essential CT concepts, the second dimension assesses students' dynamic testing and refining strategies, and the third dimension assesses their overall problem-solving efficiency. We apply the assessment framework to data collected from students' interactions with a game-based learning environment designed to develop middle-grade students' CT competencies and programming skills. The results demonstrate that students' knowledge of basic CT constructs, such as appropriate use and combination of control structures, serves as the foundation for designing and implementing effective algorithms. Further, we assessed students testing and refining strategies over the three dimensions of novelty, positivity, and scale. The results demonstrate that students with higher algorithmic capabilities tend to make more novel, positive, and small-scale changes. The results reveal distinctive patterns in students' approaches to computational thinking problem solving and make a step toward identifying and assessing productive computational thinking practices.	Assessing Middle School Students' Computational Thinking Through Programming Trajectory Analysis	NA:NA:NA:NA:NA:NA	2018
Mary Smith:Srishti Srivastava	This research is a cross university study of evaluating whether there are differences between demographic factors (gender, age, class standing) and student engagement via unplugged activities introducing parallel and distributed computing (PDC) topics in CS1, CS2, and CS3 level courses in an undergraduate computer science (CS) curriculum. The collaboration stemmed from attending a NSF Center for Parallel and Distributed Computing Curriculum Development and Educational Resources (CDER) PDC Curriculum Early Adopter Grant and Summer Training Program. Initiatives by the National Science Foundation in conjunction with the Institute for Electronic and Electrical Engineers' Technical Committee of Parallel Processing (NSF/IEEE-TCPP) encourage and promote the introduction of PDC concepts in the early CS undergraduate courses. The researchers used the [Wiggins, 2017: Assessing Student Perspective of Engagement in Class (ASPECT)] survey to collect data from ~105 undergraduate CS students after each unplugged activity. Demographic data (gender, age, class standing) was added to the survey to determine if there are differences in these and student engagement. For the study, the researchers designed two unplugged activities to demonstrate the fundamental concepts of PDC. The first activity help students learn the key benefits of parallel computing, and the limitations imposed by Amdahl's and Gustafson's law. The second activity exhibits the concepts of scheduling and load balancing. Our findings indicate there are no significant differences between gender, age, class standing and student engagement. The researchers plan to continue their research on unplugged activities and student engagement. Additional activities will be developed to introduce other PDC topics.	Evaluating Student Engagement towards Integrating Parallel and Distributed Computing (PDC) Topics in Undergraduate Level Computer Science Curriculum	NA:NA	2018
Joseph A. Boyle:Georgiana Haldeman:Andrew Tjang:Monica Babes-Vroman:Ana Paula Centeno:Thu D. Nguyen	Computer science universities and colleges around the nation are experiencing large growth in enrollments. To maintain in-person interaction with students, large courses typically include multiple recitations, each led by a Teaching Assistant (TA). Students in each group struggle with various course content, and these weaknesses are best evaluated by the TAs working closely with the students. TAs, however, have only a superficial understanding of education theory, and instructors must closely monitor and evaluate the content of recitations. Existing instruction management systems can be used to organize course-wide content, but, to our knowledge, none of them operate at the granularity of recitations. This poster presents Dynamic Recitation, an open-source platform through which TAs and instructors can create and share practice problems and lesson plans tagged with the learning objectives that they cover. The poster illustrates the interface offered to the TAs for creating problems, designing lesson plans for individual sections, and submitting feedback about student progress. It shows examples of lesson plans created in the system, as well as reports that can be used to identify elements that promote desired learning objectives and refine recitations.	Dynamic Recitation: A Student-Focused, Goal-Oriented Recitation Management Platform	NA:NA:NA:NA:NA:NA	2018
Kenny Wong	A Massive Open Online Course (MOOC) is an effective way for a university to deliver course content that reaches a global audience. Such developments are not without substantial costs and risks [1]. On the Coursera platform, there are MOOC specializations, which package a sequence of related courses. Retaining learners is of particular interest to instructors as they progress through the courses of a long specialization. Learners that encounter delays, unfairness, or plagiarism in peer evaluations of assignments could become dissatisfied enough to withdraw, for example. We describe using trends in sentiment analysis of discussion forum postings across the courses. The idea is to detect, interpret, and address points of lower sentiment in a MOOC specialization, to avoid losing learners. We outline our findings with a MOOC specialization on software product management, which consists of six courses, involving a nominal 24 weeks of content [2,3]. Interestingly, higher sentiment in a course's content did not necessarily preserve enrollment numbers for the subsequent course.	Sentiment Analysis across the Courses of a MOOC Specialization	NA	2018
Aarathi Prasad	Classes on mobile computing are popular in schools all over the country, however, the author is not aware of any that include sessions on mobile app design. How do you help students understand what constitutes a good design? Faculty have used wireframes and affinity diagrams to teach design in the classroom, included user experience and design in final course projects, and incorporated problem-based learning, opportunities for service and video-making to develop further HCI skills. One option the author has tried in the past to teach mobile app design is to ask students to choose a few mobile apps that they consider the best and a few that they consider the worst in terms of aesthetics and usability and then lead a discussion on the different factors that make the app aesthetically pleasing and usable. A new approach the author attempted this year was to hold the class meeting at the art museum instead. Looking at the different art pieces, the class engaged in a discussion of the factors that allowed the artists to capture the attention of the audience and convey their message. This activity also introduces a cross-disciplinary approach into a computer science class.	Using an Art Museum Field Trip to Spark Classroom Discussions about Mobile App Design	NA	2018
Matthew Peveler:Tushar Gurjar:Evan Maicus:Andrew Aikens:Alexander Christoforides:Barbara Cutler	Prior education research, including Computer Science, has established that students will attempt to cheat and violate academic integrity, with one of the more common forms being code plagiarism. The majority of existing tools for software plagiarism are closed source, requiring instructors to use them in a prescribed configuration and sending student code to a third-party server for analysis. At the core of this analysis is the need to perform a language-specific tokenization of the input program and then to use "digital fingerprinting" on the code to identify significant markers. This has required developers to write their own parser for each supported language, which is time-consuming to create and keep up-to-date, and thus a barrier to creation of these tools. Instead we bootstrap new languages into our plagiarism system by leveraging the "Language Server Protocol", an initiative to create open-source parsers and tokenizers for many languages (principally to be used within a range of popular IDEs). In this poster, we present our work on Lichen, the open source plagiarism detection tool that is integrated into the Submitty course management platform we use at Rensselaer Polytechnic Institute. This tool is a pipeline of modules for the specific tasks of tokenizing, fingerprinting, and then comparing the fingerprints for any number of files. Through this, a similarity score is generated for pairs of files, and these are used to help instructors determine to what extent code plagiarism has occurred.	Lichen: Customizable, Open Source Plagiarism Detection in Submitty	NA:NA:NA:NA:NA:NA	2018
Andrew Aikens:Gagan Kumar:Shail Patel:Evan Maicus:Matthew Peveler:Barbara Cutler	Submitty is an open-source course management platform for assignment submission with automated testing and grading, immediate feedback with an option for resubmission, and manual grading from course instructors and TAs. We have added an integrated discussion forum to the Submitty environment, which enables the students to communicate with their peers and have a public dialogue with the teaching staff outside of the classroom. Compared to a collection of closed-source external applications, our single-system login for distribution of course materials, assignment submission, and discussion forum participation is more convenient and accessible for students and simplifies administrative tasks. Students use the forum to ask questions about course logistics, homework help, exam review problems, and Submitty-related questions. The forum supports image and code segment posts, which facilitates targeted debugging help and sharing of additional reference material. An instructor-moderated forum is especially helpful in larger classes where students can feel it is otherwise difficult to get their questions answered. Every thread is tagged with course-specific categories and we provide full-text search of the forum. The forum becomes a curated collection of relevant frequently asked questions, which reduces the number of duplicate questions that must be answered by the staff. The forum includes customizable system and email notifications for important events such as: instructor announcement, assignment posted, team invitation, forum question answered, grades released, etc. Our current work focuses on private channels to facilitate team assignments (which can be monitored for participation by staff) and a grading interface for discussion-based assignments within the forum.	Facilitating Discussion-Based Grading and Private Channels via an Integrated Forum	NA:NA:NA:NA:NA:NA	2018
Laurence D. Merkle:S. Monisha Pulimood	NA	Session details: Poster Session #3	NA:NA	2018
Rafael del Vado Vírseda	The purpose of this poster is to provide practical arguments to stimulate debate and discussion on whether or not to introduce concepts of theoretical computer science in the pre-university education system, conveniently adapted within students' capability. Theoretical computer science is a hard subject to teach at the university level. Many students who enter the computer sciences courses have very little mathematical or theoretical background. For this reason, it is important that students acquire an appreciation of these concepts before they leave the secondary education. In anticipation that these contents would not be included or addressed in the context of a subject of Computer Science, a work in progress educational experience is presented during the 2018-2019 academic year for enhancing the algorithmic curriculum of pre-university computing and mathematical courses. We describe a collection of selected problems, puzzles and riddles from high school mathematics and introductory logic, to be added to the current secondary curriculum. We want to show attendees the use of our educational activities, offering practical aspects that could not be shown through the reading of a paper, so that they can learn to use them in their own classes. The preliminary experimental results show that the students who have undergone this educational experience have obtained a higher motivation that those who have followed the course in its traditional form. We believe that introducing these theoretical computer concepts can help students to perform better in some areas of computer science and be increasingly prepared and motivated for their university studies.	Introducing Theoretical Computer Concepts in Secondary Education	NA	2018
Sabrina Tsui	There is a large gender disparity in computing: women are underrepresented. By exposing girls to computing activities in a summer day camp, and using near-peers as teachers, we found differences in perceptions the girls held about computer scientists between those on the first day of camp with those on the last day of camp. We describe the day camp program, the participants, and the activity used to investigate the girls' perceptions of computer scientists. The "Draw a Computer Scientist' activity was used to determine how the stereotypes of a computer scientist and the day camp have influenced the girls. The only instruction given to the participants was to draw what they thought a computer scientist looked like. Key drawing characteristics were identified and quantified in a blind coding process, then compared across pre-camp and post-camp drawings. The results suggest that exposing girls to other female engineers and engaging them in age-appropriate engineering activities broadened their perspectives on what a computer scientist looks like.	Girls in Engineering Draw a Computer Scientist	NA	2018
Alfredo Perez:Hillary Fleenor	Currently, the state of Georgia requires a CS teacher endorsement (or the passing of the CS GACE exam) to teach middle/high school computer science in public schools. However, issues such as the cost of a CS endorsement and a lack of incentives to take the endorsement may undermine the long-term efforts to establish high-quality K12 CS education in the state. This may negatively affect the broadening of CS participation efforts in the state (47% of the population in GA belongs to a minority group). In this poster, we will present preliminary results of a survey conducted with more than 200 K-12 teachers across the state of Georgia in which we explore the attitudes towards teaching K12 computer science in the state. Our goal with the collection of the data is to understand better what it would take to become a long-term CS teacher in the state.	What does it take to Teach K12 Computer Science?: Exploring Teachers' Attitudes Towards Teaching CS K12 in Georgia	NA:NA	2018
D. Cenk Erdil:Darcy Ronan	As a prerequisite to ACM-IEEE CS1/CS2 curricula, common objectives of a CS0 course are: (i) to introduce CS to students who are interested, but do not have any prior CS skills, (ii) support student success while adapting to college life, and (iii) improve recruitment and retention of CS majors using the 'common first year' theme of many STEM programs. A previous CSO survey course at our institution focused on abstract logic, without any hands-on component, resulting in a CS0 "gate" course- a dull first encounter with computer science for most and an 'extremely fun and interesting' course for the few with pre-existing abstract thinking and reasoning skills. The missed opportunity to engage more students with CS, and thereby contribute to program viability and growth, spurred curriculum renewal. Given the existence of multiple high-quality offerings of CS curricula geared toward P-12 students, including at the AP-level, and also relying on our existing institutional partnership with a national non-profit organization dedicated to expanding access to CS in schools and addressing patterns of underrepresentation, we have implemented a new course based on a Computer Science Principles curriculum. This poster provides details of implementation as well as student experience and feedback with the first cohort of this brand-new course.	Implementing CS0 with Computer Science Principles Curriculum	NA:NA	2018
Aleata Hubbard	Pedagogical content knowledge (PCK), which includes knowledge of student understanding and knowledge of instructional strategies to support learning, is a component of teaching expertise that develops over time and with experience. In this poster, I present exploratory work to identify and categorize PCK amongst secondary teachers new to computing. Four teachers participating in a multi-year case study completed a questionnaire where they (a) listed student difficulties with linear data structures and (b) described how they address the topic in their teaching. Using a content analysis approach, I analyzed the quantity and type of responses provided. Since little research exists describing computing PCK, I also compared responses against public data sources gathered from experienced teachers who completed similar tasks. Results show that participants provided more ideas about student difficulties than teaching strategies and they focused equally on difficulties with programming notation and with programming pragmatics and plans. In contrast, the experienced educator list included a wider range of difficulty types. Ideas about teaching strategies focused mostly on presenting information, while the experienced educator list focused mostly on providing problem solving tasks. Unlike participants, the experienced educator list referenced real-life examples as an instructional strategy. Lastly, the responses provided by participants were not simply a subset of the experienced educator list and included unique ideas. On the poster I suggest possible contextual and experiential differences between new and experienced computing teachers that might lead to these differences.	Linear Data Structures: A Comparison of Novice and Expert Teacher Pedagogical Content Knowledge	NA	2018
Cassandra Scharber:Yu-Hui Chang:Sarah Barksdale:Lana Peterson:Angelina Constantine:Ramya Sivaraj:Jennifer Englund	SciGirls Code is a project which used the principles of connected learning with 16 STEM outreach partners to provide 160+ middle school girls with computational thinking (CT) and coding skills within informal education spaces. Programs completed 3 curricular strands (Mobile Apps, Robotics, E-Textiles) between September 2017-May 2018. SciGirls Code integrates a computational participation framework with connected learning. The research study investigates the ways in which computational learning experiences impact girls' development of CT; interest and attitudes toward computer science; and their understanding of how participation in technology creation impacts themselves and the world around them. This study utilizes an interpretive multi-site case study design. There are multiple data sources with different data collected at focal and participating sites. The seven (7) focal cases represent an array of settings (rural, suburban, urban) as well as a variety of programming contexts (museums, community centers, after school). The remaining nine (9) sites comprise the participating cases. Notably, interviews (in-person) from focal sites and shorts (videos) from participating sites were collected at three moments in the programming (beginning, middle, end) to document changes in understandings and skills. Content analysis was conducted, and further triangulated in teams, to develop themes for each case and cross-case comparison. Thus far, the study has found that a connected learning approach boosted the development of middle school girls' CT skills, positively impacted attitudes towards computing pathways/careers, and increased understandings of computational participation.	SciGirls Code: Computational Participation for Middle School Girls	NA:NA:NA:NA:NA:NA:NA	2018
Brian Krupp:Paul Peters:Tyler Hardy:Sydney Leither:Zach Egler	Large scale efforts, such as CS4All and Hour of Code, have made significant progress in attracting more students to computing as well as attracting underrepresented groups. However, even with these large efforts, there is still work to be done to help increase diversity and ensure computing jobs are not left unfilled. The authors will present their experiences in creating a Community Outreach program known as CS+ at Baldwin Wallace University. They will share the model that was created for CS+ to ensure continuity and scalability in the program. Even with a small team, CS+ has made significant progress towards their mission in providing opportunities for students to learn computing that have limited access to similar programs. The poster will include organizational details of the group including recruitment of students, positions they hold, and the vision and mission of the program. The poster will also share experiences in partnering with teachers at local school districts, attracting students to the program, and partnering with the education department as well as community organizations. The poster will include sample content that is used in camps and clubs as well as a site where all of the content can be accessed. While our efforts alone may not have the same impact as large organizations, by inspiring other institutions to start similar programs, we can reach underrepresented groups and those that lack confidence in computing to help bridge the gap in diversity and meet the demand of computing jobs that are available.	Every Little Bit Counts: Experiences and Lessons Learned Building a Community Outreach Program from the Ground Up	NA:NA:NA:NA:NA	2018
Ramsey Young:Jonathan Ringenberg	Machine learning and neural networks have become key techniques for solving some of society's most difficult problems. Many students are intimidated by, or ignorant of the mechanics of AI. Teaching machine learning to early computing students is possible; in doing so students will gain further confidence and interest in the field of Computer Science. Through an NSF funded grant to the University of Nebraska Omaha, a unit of study was created to teach machine learning to high school students. Focuses for the unit include; neural networks, genetic algorithms, sigmoid and perceptron networks, social impacts, ethics, history, and supervised and unsupervised learning techniques. The unit employs hands on learning approaches and media elements. Also included is a lab where students train an autonomous car. Students were administered pre and post Likert surveys for this unit using the Computing Attitude Survey V4.1 with additional topic specific questions. The study size was sixteen students from two sections of AP Computer Science Principles. Based on survey results, student perceived machine learning comprehension showed a positive delta value growth of 27.84% and negative results showed a delta value shrink of 20.45%. For questions related to computer science interest and confidence, students showed a positive delta value growth of 14.58% and a negative delta value shrink of 11.8%. We believe these results demonstrate that teaching machine learning topics to high school students is effective and has a positive impact on student desire and confidence to pursue further study in the field.	Machine Learning: An Introductory Unit of Study for Secondary Education	NA:NA	2018
Grégoire Fessard:Ilaria Renna:Patrick Wang	Learning elementary Computer Science (CS) concepts can often be difficult for young students. The literature presents two main practices to introduce programming: using digital environments (e.g., integrated development environments, command-line tools) or exploiting manipulations on programmable tangible objects such as robots. This second practice has recently gained traction thanks to the positive results concerning the use of programmable objects in introductory programming courses. However, and to the best of our knowledge, there is no study comparing learning gains between 'digital' and 'physical' computing. Our study focuses on highlighting possible differences between these two practices to learn CS at an introductory level. We compare the learning progress of two groups of students (total=36, male=27, female=9, aged 14-17) with little or no previous knowledge of programming; both groups are presented with the same pre-test, programming exercises, and post-test. All participants exploit a block-based programming environment to do the exercises and program either a tangible BBC micro:bit card or its digital simulation. The proposed programming exercises concern basic CS concepts: variables, conditional structures, and iterative structures. By running their programs on the tangible or digital card, students are able to visualize the results of their exercises thanks to the grid of LEDs that is present on the BBC micro:bit. Our objective is to determine if the learning of a specific CS concept is better achieved through the programming of a tangible object or an exact equivalent digital simulation of it. A statistical analysis will be presented to evaluate the results of this experiment.	Comparing the Effects of Using a Tangible Object or a Simulation in Learning Elementary CS Concepts: A Case Study with Block-Based Programming	NA:NA:NA	2018
Gayithri Jayathirtha:Yasmin B. Kafai:Debora A. Lui:Mia S. Shaw:Ji Yong Cho	The links between music and computation date back at least three decades. This trend has led to the development of learning environments for novices to make music and learn computational concepts. However, research connecting music and computation is mostly situated within the context of on-screen programming, with little research involving hybrid, tangible environments. Electronic textiles (e-textiles) is one such hybrid context where learners craft interactive physical artifacts by sewing microcontrollers, sensors, and actuators onto toys, clothes, or other fabric accessories. Prior studies show that Arduino-based e-textiles afford opportunities for students to learn basic concepts such as variables and control flow but not more advanced concepts such as arrays and for loops. In our study, we expand learning with e-textiles as learners compose and code music to address the following research question: What are the affordances of designing musical wearables to deepen computational conceptual learning? We present a case study of a group of four 15-17-year-old youth and an adult co-making a musical wearable-JazzHands-a glove augmented with actuators such as LEDs and speaker, and motion, touch, and light sensors. We analyzed videos of the group's collaborative design sessions, student daily journals, multiple versions of the code, and post-workshop, artifact-based interviews with the youth. Our analysis revealed that making musical wearables not only allowed the youth to express themselves and relate to computing as a creative endeavor but also afforded unique opportunities to work with constructs such as arrays indices, sensor data integration, and logical expressions to control for loops.	Collaborative Coding and Composing of JazzHands: Integrating the Learning of Advanced Computational Concepts with Electronic Textiles to Make Music Wearables	NA:NA:NA:NA:NA	2018
Hillary Fleenor:Yesem Peker:Ebone Cutts	Investing in raising a generation with more security-aware minds is essential in preventing many of the security incidents that threaten us and our nation. In addition there is a high need for well-trained cybersecurity professionals to protect our networks, computer systems, and infrastructure. Early exposure is key to developing awareness, piquing student interest, and laying a foundation for more complex skill development. Students of today are parents, professionals, and leaders of tomorrow. The impact of their actions is significant for the future. In this work, TSYS School of Computer Science at Columbus State University and Rothschild Leadership Academy, a Title I middle school in the Muscogee County School District of Georgia collaborated to develop, deliver, and assess a middle school cybersecurity curriculum for U.S. grade 8 students. The project had three student achievement goals: 1. Provide a good foundation for students in cybersecurity knowledge and skills, 2. Enhance students' ability to secure their environment, and 3. Increase students' interest in cybersecurity education The project included development of the standards, objectives, lessons, and assessment instruments for implementation within a year-long business and computer science course and training of the teacher in cybersecurity. The course was piloted with sixty grade 8 students in two classes during the 2017-2018 school year. Results show significant growth in mastery of key cybersecurity concepts via a pre- and post- test and artifacts from the course indicate an increase in student interest in cybersecurity.	Collaboration: Developing and Piloting a Cybersecurity Curriculum for Middle School	NA:NA:NA	2018
Allison Sauppé:Samantha S. Foley:Thomas Gendreau:Joshua T. Hertel:Mao Zheng	Computer science is in increasing demand at the K-12 level. However, due to a lack of qualified educators, numerous programs (e.g., Google's CS4HS, NSF's CSForAll) have been created to train teachers and increase student access to computer science. Although these programs have seen some success, schools in areas with lower population density continue to struggle to offer computer science opportunities. These schools face unique challenges due to their low population density, including increasing teaching demands in core subjects, smaller teaching staff, and a smaller pipeline of students, making it difficult to justify offering a course in computer science. This poster draws on our experience of collaborating with K-12 teachers in rural schools in western Wisconsin to help mitigate these unique challenges. We have obtained two Google CS4HS grants to hold educational computer science workshops with teachers from across the region. These workshops allowed us to work closely with teachers and help them become more comfortable with incorporating computer science into their classrooms, while also helping us to form relationships with both teachers and administrators in a number of districts. Building on these relationships, we are taking the next step of working more closely with individual school districts to form professional learning communities. Our goal in this work is to connect K-12 teachers within each district and help facilitate a robust pipeline of students interested in computer science and justify offering AP CS courses at the high school level.	Building Computer Science K-12 PLCs in Rural Communities	NA:NA:NA:NA:NA	2018
Lindsey Scheppegrell:Elyse Hiatt:Johanna Okerlund:David Wilson	Recently, there has been significant interest in integrating Maker-related experiences into formal education. A challenge is reconciling open-ended making and non-deterministic learning goals with standards that drive traditional education. In the context of our CS-focused STEM magnet school, we designed two 2nd grade lessons that not only align with grade-level standards and our school's computer science-oriented pedagogy, but also incorporate 3D printing and the philosophy of Makerspaces. The integrated Maker experience serves to scaffold computational thinking practices such as abstraction, modeling, and decomposition, which are essential for long-term success in STEM learning. To bring these aspects together, we created a rubric based on existing evaluation tools. Using this rubric, we evaluated the two lessons with a small sample of participants. Our pilot study shows promise of mastery in standard-related content, evidence of a making mindset, engagement in the activity, innovation in design, and solidarity in working with peers. Aligning state standards with open-ended Maker activities has potential for fostering student growth and engagement in the classroom. An additional component of our research was reflecting on our experience as teachers with no Makerspace experience who were newly submerged in the digital fabrication world. We present the two 3D printing-based lessons, one addressing extreme weather standards, the other incorporating understanding of urban, suburban, and rural communities. We also present the rubric we designed, the literature that guided this work, and reflections and recommendations from our experience of learning digital fabrication for the first time and integrating it into curriculum.	Computational Thinking in the Making: Lessons for Second Graders in a STEM Computer Science Immersion School	NA:NA:NA:NA	2018
N. Rich Nguyen:Iuliia Poliakova:Sahithi Meduri:Joshua Hutcheson:Ryan Ke	Increasing the representation of minorities in computer science (CS) has become a national priority. One of the many reasons minority students nationwide choose not to study CS is that they often lack mentors and role models to encourage them early in their learning. In her seminal article, Jeannette Wing argues that computational thinking (CT) is an emerging essential skill that should become an integral part of K-12 education. However, a big issue facing this initiative is that many K-12 teachers find themselves lack (1) relevant materials, (2) systematic training, and (3) a supportive community. The democratization of media, such as photos and videos, has provided a great variety of options to educate a broad audience on myriad topics. In this poster, we will describe the challenges and successes of using animated videos including its beauty, soundness, and utility as critical elements in establishing a strong CT comprehension while engaging K-12 teachers in a non-threatening way. Using a process of iterative design, we have found ways to integrate CT concepts in six non-CS disciplines in the K-12 curriculum. The teachers who have collaborated with us respond positively that this design approach provides them with a greater comprehension of the CT concepts while giving them exciting instructional activities. Therefore, this poster may be of interest to any CS educator who wishes to improve the engagement of K-12 teachers while sustaining a CT training program at their institution.	CodeNC: Integrating Computational Thinking into K-12 Instructional Activities using Animated Videos	NA:NA:NA:NA:NA	2018
Huda Khayrallah:Rebecca Knowles:Kevin Duh:Matt Post	The first step in the research process is developing an understanding of the problem at hand. Novices may be interested in learning about machine translation (MT), but often lack experience and intuition about the task of translation (either by human or machine) and its challenges. The goal of this work is to allow students to interactively discover why MT is an open problem, and encourage them to ask questions, propose solutions, and test intuitions. We present a hands-on activity in which students build and evaluate their own MT systems using curated parallel texts. By having students hand-engineer MT system rules in a simple user interface, which they can then run on real data, they gain intuition about why early MT research took this approach, where it fails, and what features of language make MT a challenging problem even today. Developing translation rules typically strikes novices as an obvious approach that should succeed, but the idea quickly struggles in the face of natural language complexity. This interactive, intuition-building exercise can be augmented by a discussion of state-of-the-art MT techniques and challenges, focusing on areas or aspects of linguistic complexity that the students found difficult. We envision this lesson plan being used in the framework of a larger AI or natural language processing course (where only a small amount of time can be dedicated to MT) or as a standalone activity. We describe and release the tool that supports this lesson, as well as accompanying data.	An Interactive Teaching Tool for Introducing Novices to Machine Translation	NA:NA:NA:NA	2018
Paige Prescott:Irene A. Lee:Kersti Tyson	The integration of computer science (CS) and computational thinking (CT) in STEM classes has been promoted as one strategy to engage all students in CS education. This approach aims to reduce inequities in access to computing education by placing CS within compulsory science classes. The Project GUTS CS in Science curriculum supports the integration of CT-rich computer modeling and simulation activities and has been promoted to serve the dual goals of exposing students to CS in a powerful context while simultaneously promoting students' understanding of modern scientific practices. This case study follows two middle school science teachers as they implement the curriculum that integrates CS within science classrooms through the use, modification, and creation of computer models of scientific phenomena. Their implementation stories represent the range of enactments from "use-only" in which computer models are used to demonstrate the behavior of a system, to "modify/create" in which teachers support students in the using, decoding and modifying computer models that are used as experimental test beds. These cases illuminate teacher characteristics and pedagogical decisions that impact enactment of the curriculum. Evidence is provided that teacher's belief in student capabilities is a factor correlated with enactment, and that has the potential to impact students' opportunities to learn. This finding suggests that addressing CS/CT skill building, content knowledge, and pedagogy within teacher professional development (PD) programs may be necessary but not sufficient to lead to enactment of CT-rich curricula and may inform others seeking to integrate CS in K-12 education.	Teacher Beliefs in Student Capabilities as a Mediating Factor in a Novel Understanding of Enactment of CT Curriculum	NA:NA:NA	2018
Tony Lowe:Sean Brophy:Monica Cardella	Our research group has studied how Kindergarteners through second graders can be introduced to the ideas of Computational Thinking (CT) through engineer design, unplugged, and programming activities. We often found it difficult to explain the boundaries and clear definitions for CT in research, to students and their teachers. Literature provides a variety of definitions from various perspectives, but these definitions often seem like capturing smoke. We see evidence CT, indicating fire, but how hot or lasting it burns cannot be measured by smoke alone. CT is typically defined by siloed concepts and skills. Some silos describe concrete ideas, which tend to be tied to programming principles. Many describe essential ideas, but over generalized becoming hard to teach and measure and distinguish from other types of problem solving. Is there a middle ground where we can clearly observe the presence and growing maturing of CT yet not limit the ways it can manifest, particularly without requiring coding? We hope this poster inspires conversation on 1.) the intersection of CT and programming skills, 2.) the priority and order for learning those skills, and 3.) how we can promote CT in disciplines who interact with and help define computational solutions yet are never expected to learn to program. We hope to share our perspective as well as garner feedback and possibly collaboration on better refining curriculum within Computer Science as well as promoting CT in other disciplines.	Exploring the Definition of Computational Thinking in Research and the Classroom	NA:NA:NA	2018
Natalie Linnell:Phil Gonsalves:Mayank Kakodkar:Vanessa Martinez:Tim Urdan:Bruno Ribiero:Janice Zdankus	The lack of diversity in computing is a well-known issue. This poster is a work-in-progress report on Curated Pathways to Innovation (CPI), a web-based tool which gathers existing online resources for computer science (CS) engagement and learning to allow students to learn more about CS careers and content, with a particular focus on improving participation of K-12 girls and under-represented minorities in CS. This project is a collaboration of people from academia in CS and social science, K-12 education, non-profit, and industry. We are about halfway through a 3-year pilot deployment of CPI with all students in a low-income, primarily Latino/a middle school with nearly 500 students, and smaller deployments have been undertaken and are planned for 2018-19. In addition to online content, we have created in-person experiences, including reverse science fairs, summer camps, and a hackathon, which are tracked in the CPI tool. To measure impact, we conduct regular surveys with the students measuring their interest in CS, self-efficacy, and other metrics. Our evaluation of the system based on survey data has helped inform the development of the system and curriculum, but remains preliminary. This poster also discusses the tool itself. It uses gamification in the form of badges to measure student progress. From the beginning, the vision was to use machine learning to customize recommendations based on students' demographics, background, and past performance. This integration is coming to fruition at the same time we are including more interesting visuals in the UI, such as an avatar and animations.	Curated Pathways to Innovation: Personalized CS Education to Promote Diversity	NA:NA:NA:NA:NA:NA:NA	2018
Fatemeh Jamshidi:Daniela Marghitu	The importance of imaginative assignments and innovative curriculum design in computer science (CS) education has been researched for some time now. In this poster, the authors discuss an interdisciplinary K12 informal education course called Computational Thinking in Music. The goal is to engage students in computer science by prioritizing personal expression, creativity, and aesthetics. The research includes a creative curriculum based on modeling theory of evidence-based pedagogical research, and an empirical one: by the time of the SIGCSE Symposium, the authors expect to have comparative results for control courses, where active learning curriculum was not used at all, as well as for the course with active learning curriculum. The Computational Thinking in Music course intends to broaden the number of individuals, particularly from underrepresented groups, who show interest and persist in the field of computer science through the use of student's intrinsic interests. Specifically, this study built an authentic STEAM learning environment through the use of EarSketch (https://earsketch.gatech.edu/landing) and Scratch (https://scratch.mit.edu/) two creative computing programs. The poster will display our findings in a creative fashion convenient for drawing informative conclusions. Two measures are used in assessing the effectiveness of creative curriculum: student scores on typical assessment instruments and student perceptions on Likert scales. Thus far the data are remarkably consistent over the various settings and indicates that participants of this camp benefitted more from an authentic learning environment allowing for music, creativity, and imagination than from a more traditional computing camp without the addition of musical concepts.	Using Music to Foster Engagement in Introductory Computing Courses	NA:NA	2018
Connor Bain:Uri Wilensky	For many years, beginning computer science students have been asked the seemingly simple question: what makes one algorithm better than another? Usually, this concept of "best-ness" is introduced with the many algorithms that are used to sort data. Thus, students are overwhelmed by the intricacies of sorting while simultaneously trying to understand one of the greatest questions in computer science. In this work we take inspiration from embodied cognition and describe a new, constructionist curriculum for approaching algorithmic efficiency. In order to help students construct understandings of both sorting algorithms and algorithmic efficiency, we present a curriculum that focuses around participatory simulations (PartSims) where students "play as" datapoints and experience sorting algorithms from an entirely different perspective. Instead of first experiencing the usual top-down approach to sorting where datapoints are manipulated by an "observer," each student follows a simple set of rules which, collectively, end in an emergent sorting algorithm. In this way, instead of talking in the abstract about the different pros and cons of sorting algorithms, students have different physical experiences across the different algorithms. With this embodied, grounded experience, students then construct for themselves metrics for comparing the different algorithms by evaluating the differences in their physical experiences. This two-week curriculum is targeted towards beginning computer science students (high-school or collegiate level) and utilizes the Parallax hackable Electronic Conference Badge and NetLogo to track the students experience in the PartSims throughout the curriculum.	Sorting Out Algorithms: What Makes One Better than Another?	NA:NA	2018
Wynne Becker:Kayley James:Maya Minier	Scope is a fundamental topic of computer science and its pervasive nature affects how programmers interpret code on every level. Thus, a strong understanding of scope is necessary for reading and writing code as well as tracing memory usage. This paper qualitatively analyzes students' misconceptions about scope, specifically involving parameters, variable declarations, and loop variables. Our study consisted of five one-on-one interviews where participants were given a set of scope-related problems in Java and Python to solve. We noticed that, despite demonstrating a general understanding of scope, some students became confused about the particular subtypes of scope mentioned previously. Our paper identifies four misconceptions about scope involving parameters, variable declarations, and loop variables: that variable declaration and use are indistinguishable, that where the variable is declared (eg. inside/outside of a method) is not relevant, that passing in a value as a parameter changes the parameter's value globally within the code, and that a loop variable defined to iterate through a for loop is accessible outside of the loop it is declared within. Many of these misconceptions indicate that some participants have an abstract notion about scope that is not equivalent to the programming languages' rules about scope. The information we gathered in this study could potentially help computer science (CS) teachers present scope in a way that prevents the four misconceptions and thus encourage a stronger understanding of scope as a whole.	Four Scope-Related Misconceptions Held by Computer Science Students	NA:NA:NA	2018
Michael Ball:Jens Mönig:Bernat Romagosa:Brian Harvey	Snap! is blocks-based programming language that inherits a design and vocabulary from Scratch, but has been extended with support for user-defined functions, and robust built-in libraries. The Snap! Cloud software has been running for over 5 years and recently passed 250,000 users and 2 million projects of which nearly 600,000 are shared publicly. We have been to do an exploratory analysis the database of public projects to better understand how students are programming an using Snap!. This analysis is being conducted using a cleaned up XML-based representation of Snap! projects, which allows querying for data using SQL to extract information from project files. So far, we've seen that projects in Snap! computationally more complex than those found in Scratch, and make use of Snap!'s advanced features. Combined with growing use, we hope to give context to the ways which Snap! (and other) blocks-based languages are being used in classrooms. While there has been a discussion of code smells in Scratch, we haven't seen any discussions using Snap! and hope to show its additional functionality helps write clean code. Finally, we are interested in presenting a clear story of growing use for Snap! that is a compelling case to teachers (and subsequently their students) that blocks-based languages can be quite popular.	Snap! A Look at 5 Years, 250,000 Users and 2 Million Projects	NA:NA:NA:NA	2018
Mohammed A. Qazi:Jeff Gray:Melody Russell:David M. Shannon	This poster provides a description of an NSF-sponsored project entitled "ECS4Alabama" that addresses one of the nation's areas of highest priority in K-12 education: To offer all children opportunities for preparation in authentic Computer Science, with a specific focus on students from rural high-minority schools. ECS4Alabama addresses this need locally in Alabama by preparing teachers to offer a stand-alone, College preparatory Computer Science course - Exploring Computer Science (ECS) - in the participating high schools. Over the last two years, 52 in-service teachers have received training on ECS who in turn are teaching the course to nearly 1,500 students. Approximately 80% of the enrollment is minority and 48% of the students are young women. In many communities, ECS4Alabama is bringing access to challenging Computer Science curricula in school districts that often lack preparatory experiences that are typically only available to students in more affluent districts. Teachers Leaders are emerging and are spearheading Professional Development Communities to assist their peers with ECS implementation. In addition to sharing ECS4Alabama's implementation successes and challenges, the poster will also describe the project's rigorous evaluative and Social Science research components. Initial findings reveal that ECS professional development opportunities enhance teachers' self-efficacy and confidence in teaching CS through a problem-based, engaging curriculum that teachers view as relatable and relevant to students' daily lives. Students report that teachers make great efforts to facilitate their involvement in cognitively demanding work to solve real problems, encourage autonomy and stimulate student interest in CS.	ECS4Alabama: A State-Wide Effort to Provide Access to Authentic Computer Science Education in Predominantly Rural and High Minority Schools	NA:NA:NA:NA	2018
Chris Shively:Sarbani Banerjee:Neal Mazur:Joseph Zawicki	Buffalo State College has hosted a number of summer institutes and conferences over the years to increase the availability of computer science (CS) courses taught in western and central New York high schools. These institutes and conferences have contributed to strong CS programs in suburban and private schools, but not in urban and rural/small town schools. In the summer of 2018, Buffalo State invited high school principals from across the area to a summit to discuss the future of CS. Forty-six principals participated in the summit and of those school leaders, 30% of them were from rural/small towns. In this poster, the research team will present the results of a mixed-methods school leadership study based on the value rural/small town principals place on CS. Results from a survey, conducted at the summit, and semi-structured interviews will be presented. A sociocultural approach was used to analyze the data since the principals' values and mediated actions toward CS were influenced by the socially situated environment of the schools they lead	Don't Forget About Us: Understanding Rural and Small Town Principals' Values Toward Computer Science	NA:NA:NA:NA	2018
Tikyna M. Dandridge:Hoda Ehsan:Elizabeth Gajdzik:Tony Lowe:Carson Ohland:Ibrahim H. Yeter:Sean Brophy:Monica E. Cardella	As computer science education is incorporated into the United States educational system, it is imperative that children, educators, and caregivers understand the requisite competencies called "computational thinking" (CT). CT has advanced since first described by Wing in 2006 as an algorithmic problem-solving approach. For three years, the INSPIRE Research Institute for Pre-College Engineering (INSPIRE) has studied integrated science, technology, engineering, mathematics, and computational thinking (STEM+C) learning for K-2 aged children, in both formal and informal settings. At the project's origin, the team focused on characterizing and operationalizing the CT competencies. Our studies then followed how children, instructors, and families engaged in the CT competencies within school and out-of-school. As the project evolved, our team created curricula to be used in K-2 classrooms, activities for out-of-school settings, a summer training for educators, a CT exhibit at a small Midwestern science center, and facilitated a field trip for elementary students. Our poster presents findings from all stages of our NSF-funded STEM+C project. For classroom settings, we report discoveries from integrated STEM+C curricula development and children's CT capabilities and engagement within the classroom and during homeschooling. For informal settings, we report children's abilities to engage in CT when engaging with a specially designed CT exhibit and an open-ended problem-solving task. We also discuss our data management for our project. Finally, we report the lessons and implications of CT for K-2 ask a viable skill for computer science education. For additional info ideas, handouts will be given during poster presentation.	Integrated STEM+C learning for K-2 aged children: CT competencies as a precursor to K-2 computer science education	NA:NA:NA:NA:NA:NA:NA:NA	2018
Chun Wai Liew:Huy Nguyen	There are many tutoring systems that are being used to teach basic concepts in grade schools and high schools. There are few that address the issues involved in teaching complex skills and concepts such as are taught in CS2. We designed, developed and implemented an intelligent tutoring system (ITS) to help teach the concepts underlying red black trees. Red black trees are a balanced tree structure that are created and maintained with fairly complex insertion and deletion algorithms. The ITS helped the students improve their understanding of red black trees and also changed the instructors view of the causes of the students' difficulties. This paper describes effects on student learning, the lessons we learned from using the ITS and how it affected the way in which teach red black trees in our class. We have used the ITS for four years in our data structures class and it has benefited us in many ways.	Using an Intelligent Tutoring System to Teach Red Black Trees	NA:NA	2018
Joslenne Pena:Carmen Cole:Mary Beth Rosson	Inspired by initiatives like Girls Who Code, the authors developed a similar learning opportunity in a higher education environment. Code for Her, a nine-week coding workshop series, was piloted to determine if interest existed in the academic community. With an overwhelming response (over 100 applicants), the authors saw a need in the community for an informal learning space targeting women and gender-diverse individuals. Currently, two distinct workshop sections, one for students and one for faculty and staff, are being conducted in a single academic semester, each focusing on learning three web development languages. The goal of this study is to investigate the impacts of the workshop series on its participants using a mixed methods approach. The authors will examine measures of self-efficacy, computing behavior, knowledge, and learning to determine, at an exploratory level, how the workshops have an effect on their learning, motivation, attitudes, and computational thinking. Preliminary results from a baseline survey indicate that keeping a flexible curriculum and learning environment is imperative to the ever-changing needs of participants week to week. Further, results indicate a slightly positive attitude towards achieving programming tasks, future predictors of their behavior after the workshop, and self-efficacy. The authors plan to conduct a post survey, collect participant projects as artifacts for analysis, and arrange follow-up focus groups to determine if participant attitudes, motivation, and retention of the content have changed over a period of time. The authors hope to improve future workshop offerings and expand our research efforts.	Code For Her: Exploring Female and Gender-Diverse Computing Workshops for Faculty, Staff, and Students	NA:NA:NA	2018
Daisuke Saito:Hironori Washizaki:Yoshiaki Fukazawa:Mariko Tamura:Yuki Sakuragi	As more children are exposed to computer science and programming, numerous indicators have been proposed to evaluate programming learning. Because these indicators are not divided by step in a learning goal, learner's growth cannot be evaluated in detail. Our research focuses on resolving this issue in the field of programming. Herein we propose a rubric to measure the progress of programming learning for elementary school students. This rubric, which is comprised of indices, aims to evaluate learning achievement of logical skills such as logical thinking and problem solving using a unified learning goal. Furthermore, this rubric consists of 30 evaluation items in 8 categories. Then we investigate whether this rubric can be adapted to existing workshops of programming learning. The workshops occurred in 2016 and 2017. in addition, A total of 101 students between 6 and 12 years old participated in the workshops. The rubric successfully evaluates programming learning workshops as it provides a unified evaluation that covers common learning objectives in existing indicators. Our rubric is available at https://g7programming.jp/plr/.	Rubric to Evaluate Programming Learning of Elementary School Students	NA:NA:NA:NA:NA	2018
Adam M. Gaweda:Collin F. Lynch	A significant issue Computer Science students face are syntax errors. This poster presents two studies on the use of typing exercises. In a usability and interaction study, 14 students were asked to complete typing, fill in the blank, and self-explanation style exercises. Fill in the blank were similar to typing exercises with 1 line of code omitted. Self-explanation exercises were graded on whether the student could adequately describe how the source code of a program worked. Students with "Poor"-labeled self-explanations experienced more typing errors and took more time completing exercises. In a semester-long study, 99 students in a CS2 course completed 538 submissions of 66 weekly typing exercises. Students were divided into four categories: users that joined but never used the platform, users that barely used the platform, regular viewers of exercises, and regular completers of exercises. Regular completers earned a minimum final letter grade of a B, compared to 90% regular viewers, 76% from barely used, and 81% from never used. Regular completers were not simply high performing students that did additional work, as 40% of regular completers scored a C or lower on the course's first midterm exam. Based on these findings, students who used the system performed similarly or better than students who did not. While not the only source of practice, typing exercises (and other novel exercises) can serve as a viable tool for teaching Computer Science and boosting low-performing students' abilities.	Giving Students Canned Code using Typing Exercises	NA:NA	2018
David L. Largent	Media computation provides a context within which computation can more easily be learned, allowing students to be creative while learning fundamental programming building blocks (like sequencing, iteration, selection, and two-dimensional arrays). Focusing on images, students can alter a picture's appearance by selectively changing its pixels. By combining different images, students can create collages. Creativity and success in CS1 have been studied. The effect media computation and an art show might have on student satisfaction and persistence, and promotion of the department is less understood. We articulate our experiences from five years of implementing media computation in CS1, with a strong focus on an accompanying public art show held to showcase the best student work produced each semester. We implemented the art show with a goal of raising visibility of our department within the university, and to highlight the ability to be creative in a CS degree program, with the hope of attracting students. It also allows our students to showcase their work to their peers and others, while motivating them to be creative and engaged. We briefly describe how we implement media computation within CS1 and describe in full detail how we conduct the public art show. Specifics about the student image collage project that is entered into the art show, the selection process, judging, show production, and promotion are provided. We describe how things have evolved over the ten shows spread over five years to provide perspective for others considering implementation of a similar experience for their students.	Using an Art Show in CS1 to Spark Interest in Computer Science	NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Lightning Talks #1	NA:NA	2018
Kathryn Atchison:Jandelyn Plane	This lightning talk describes the Maryland Center for Women in Computing (MCWIC) ambassador program that was designed to empower current undergraduate women to lead K-12 outreach efforts for MCWIC and build a community of within the undergraduate students interested in diversity, inclusion and education.  For the last 7 years, the MCWIC ambassadors led summer camps, after school programs in schools, weekend workshops, and programs that support current undergraduate population. The program has grown to the point that we now employ over 15 undergraduate students each semester to support these activities.  Come to this talk to learn more about how this program was created, how it is sustained, and how the ambassadors benefit from being a part of the program while also serving the greater community.	Building a Community of Undergraduate Women: Ambassadors for Computing Outreach	NA:NA	2018
Jared O'Leary	This lightning talk introduces ipsative assessment, which is an assessment undertaken by a student for the purpose of learning through reflection of prior work. This process differs from self-assessment where students evaluate their own efforts or results without making connections to prior creations or demonstrations of understandings. I begin this session by briefly reviewing applications of formative and summative assessment techniques and then introduce ipsative assessment as another possibility for assessing student work. After this brief introduction, I elaborate by providing examples of how I used ipsative assessment within the K-8 coding classes I designed and facilitated, and conclude the lightning talk by sharing assessment resources I created for elementary CS education professional development.	Introduction to Ipsative Assessment	NA	2018
Carol L. Fletcher	Broadening participation in K-12 CS education at a statewide level is a challenge that requires substantial structural changes that need to be addressed across the K-12 system. At the same time, it is vital to find early successes in order to build both political and financial support for broadening participation in computing (BPC) efforts. Leadership teams from Expanding Computing Education Pathways (ECEP) Alliance states are responding to these two apparently conflicting drivers as they develop goals and metrics that measure outcomes that are both realistic in the short term and that will lead to long-term success. This lightening talk will discuss a framework for goal development used by Texas that addresses four interdependent components of the K-12 CS education system: capacity, access, participation, and equity. Focusing on measurable outcomes for each of these components can both lead to early "wins" that are meaningful and easily communicated to stakeholders and that lay the foundation for substantive changes in CS engagement and success for students from traditionally underrepresented groups including women, students of color, and students of low socio-economic status.	Every Marathon Starts with the First Mile: Early Successes in Broadening Participation in K-12 CS	NA	2018
Steven Paul Floyd:Luigi Sorbara	As educational jurisdictions around the world begin to integrate computational thinking (CT) into their K-12 mandatory curriculum, there is a need to ensure that classroom activities are engaging, relate to student interests, and effectively promote the development of CT skills. The analysis of sports performance data fulfills this criteria for some students and teachers and presents an exciting context in which students from all K-12 grades can access complex CT concepts. This lightning talk investigates sports analytic tasks within the context of the CT in mathematics and science taxonomy introduced by Weintrop et al. (2015). Specific classroom activities are presented including analyzing the distribution of soccer goals, baseball salaries, the location of successful basketball shots, and the placement of volleyball serves. Examples of data analytics projects will be shared and the four main components of the taxonomy (data practices, modelling and simulation practices, computational problem-solving practices and systems thinking practices) will be identified within each project.	Sports Analytics as a Context for Computational Thinking in K-12 Education	NA:NA	2018
Jeremy H. Sarachan	This lightning talk describes a proposal for a class that includes a mix of programming and politics. Students would use the p5.js library to learn basic programming, making this class appropriate to undergraduate non-majors. With a focus on interfacing with an audience, students learn variables and arrays, loops, if then statements, text animation, and functions, as well as p5.js specific libraries for video and the Kinect. For a major/final project, students are asked to consider a social issue (e.g., poverty, global warming, gun reform) and create an interactive art exhibit using a PC, Kinect, keyboard, and/or mouse, and their choice of photography/graphics/video. All viewpoints are accepted. The integration of social science (e.g., Political Science, Sociology), humanities (e.g., American Studies, Gender Studies), and programming would offer a wide spectrum of students with an immediate and tangible product, while also broadening their concept of what can be accomplished and communicated through code. Additionally, students would study other example of interactive installations as a means to see what is possible and come to terms with what forms may constitute art. Most significantly, this alternative version of project-based learning would motivate students to apply and continue to learn what is necessary to implement their artistic vision and communicate their views. Furthermore, each student's unique project would minimize the risk of cheating and require students to synthesize not only specific programming tasks, but also an understanding of audience and concepts of usability relevant to the brief time a user may interact with the installation.	Programming Politics: Using p5.js to Create Interactive Art Connected to Current Events	NA	2018
Michael Hilton:Sreecharan Sankaranarayanan	This lightning talk presents an ongoing effort investigating the use of a collaborative programming paradigm originating in industry called Mob Programming, for effective collaborative learning in the classroom. In industry, Mob Programming involves the participation of a group of developers solving one problem at the same time and place. Developers take turns cycling through a structured process for collaboration having been assigned pre-defined roles responsible for brainstorming ideas, deciding on a path forward and implementing the consensus decision respectively. Pedagogically, there are several compelling reasons to motivate the adoption of Mob Programming in learning settings . First, the collaboration is well-structured meaning that the interaction between even a large group of students will not descend into chaos. Second, students are assigned to roles, which allows for the differentiation of responsibilities and development of skills in different aspects of solving the problem. Third, the rotation of assigned roles allows students to learn and exhibit multiple competencies as well as appreciate bringing different perspectives to bear on solving the problem. In order to investigate whether this promise is borne out in practice, the paradigm is currently being investigated in the context of a Cloud Computing course offered online to undergraduate and graduate students at a large American university and its satellite campuses. Since this effort is still underway, faculty who implement or are interested in implementing collaborative learning for this classrooms are invited to attend and provide feedback or consider joining the effort to investigate this paradigm for use in learning settings.	Online Mob Programming: Effective Collaborative Project-Based Learning	NA:NA	2018
Shuchi Grover	Computational thinking (CT) is a means to help learners engage in authentic disciplinary and problem-solving practices of computer science (CS). For CS classrooms, CT is considered "thinking like a computer scientist". CT is believed to be an important learning goal of introductory CS in addition to CS concepts and programming. Despite the growing attention on CT in K-12 CS education, there is lingering confusion on the what and how of CT, and CT's relationship to coding and CS. Education research on disciplinary thinking skills in science and mathematics education can provide guidance for teaching and learning of CT. For example, (a) The shift in emphasis on disciplinary thinking helps focus on deeper conceptual understanding rather than rote learning of knowledge and facts. Hence thinking like a scientist, or mathematician, historian or computer scientist, draws attention to authentic practices of those disciplines. (b) Thinking skills are best taught in context. Therefore, CT should be taught in CS classrooms or integrated into learning of other subjects rather than taught as a separate skill or subject. (c) Even if there is no transfer beyond the context in which they are taught, a focus on thinking skills helps in deeper conceptual learning; (d) Like critical or creative thinking, CT should be integrated into other subjects to enrich learning. Research on meaningful technology integration across subjects provides useful frameworks to inform CT integration efforts. This talk aims to productively move the discourse on CT toward concrete ideas for K-12 educators, researchers, and curricular designers.	Thinking about Computational Thinking: Lessons from Education Research	NA	2018
Jeffrey A. Stone	This lightning talk describes initial research to assess the impact of a set of multidisciplinary programming projects in introductory CS and IS courses. Students in these courses are given a series of programming projects designed around various components of sustainability (e.g. air pollution, wind power). These projects are intended to provide students with a lightweight, non-intrusive introduction to sustainability concepts while still assessing their ability to perform introductory programming tasks. This approach is intended to show students the applicability of programming towards sustainability concepts, but it is also intended help build students' knowledge and spark interest in applying sustainability concepts in their own communities and daily routine. Recently, we have undertaken an effort to more accurately assess the impact of these projects on students' knowledge, understanding, appreciation, and practice of sustainability concepts. Small post-project reflective writing exercises have been used to assess the influence that the sustainability-based projects have had on students' knowledge and behavior. This work has included initial development of custom reflective writing exercises and an accompanying grading rubric, as well as pre- and post-course surveys, but more work is needed to develop and/or refine these instruments and the overall approach. This assessment effort began in Spring 2018 and is currently in pilot. We are seeking additional interested faculty collaborators and feedback on the approach. Especially welcome are faculty who may have an interest in adopting and/or helping to develop assessment materials or sustainability-themed projects.	Assessing the Impact of Sustainability-Themed Programming Assignments	NA	2018
Gail Carmichael	We are designing a year-long program for internal Shopify employees who want to retrain as software developers. Our aim is to provide a better base in core computer science concepts than boot camps, but be less comprehensive than a degree. The design leverages the best of our Dev Degree work-integrated learning program that combines developer skills training and team placements at Shopify with a fully accredited computer science degree. Participants will spend six months on education full time, and six months in a team at Shopify with some continuing education an hour or two a week. By the end of the program, participants will have the opportunity to join a team as a back-end web developer. Our lightning talk will share key aspects of the program design and solicit feedback offline.	More than a Bootcamp, Less than a Degree: A One-Year Program to Retrain Industry Employees as Developers	NA	2018
Kenrick Mock	This lightning talk describes our experience using Discord as a platform for online tutoring at the University of Alaska Anchorage (UAA) for the past two and a half semesters. Discord is a free online chat system that is accessible via a web browser, computer program, or mobile app. It competes with apps including Skype, Slack, and TeamSpeak. We initially pitched Discord to our students as a way to deliver online tutoring. However, once a critical mass of students joined the system they began to use it for socializing, finding study partners, and other community-building activities. Utilization has been much higher than other online communication tools we have implemented in the past. With approximately 250 majors there are currently 261 users subscribed to our server with users actively posting messages every day. Students have reported positive experiences with the platform. To further facilitate tutoring in the future we are developing a bot and web tools into the platform to make it easier to share and run snippets of code.	Experiences using Discord as Platform for Online Tutoring and Building a CS Community	NA	2018
Chen-Hsiang Yu	At Wentworth Institute of Technology, we have advocated Externally-collaborative, Project-based, Interdisciplinary Curricula (EPIC) learning for years. EPIC learning provides opportunities for the students from different majors to work together on interdisciplinary projects, which have been proved interesting, useful and influential to the students' future career, either academia or industry. In 2016, we reported the success of applying mobile application development to biomedical education for creating a mobile health system for the students. To extend this success, we spent one year designing and teaching a new research-oriented interdisciplinary EPIC course for guiding undergraduate students to conduct research projects in biomedical field. In this talk, I will summarize our learning from this process, including (1) Why is it more difficult to teach a research-oriented EPIC course than a regular course for undergraduate students from different majors? (2) How to conquer some difficulties found in this process? (3) How to design suitable lectures and laboratory assignments to facilitate research collaboration? (4) How to motivate the undergraduate students to work on research projects? Although three out of six student teams' research work were accepted at a research conference, we believe there is a space to improve this process for this kind of research-oriented EPIC course in the future.	A Research-Oriented EPIC Course - Applying Mobile Technologies to Biomedical Research Questions	NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Lightning Talks: Lightning Talks #2	NA:NA	2018
Valerie Summet	Many universities and students look for opportunities to volunteer and contribute to their communities in a variety of ways. However, a host of factors including time, expense, and duration effect instructor adoption, student commitment and student perception of volunteer tasks. In CS curriculums, volunteer work most often takes the form of projects for local charities through a specific course (e.g., a senior capstone or software engineering course) or work in local elementary schools teaching younger students to program. The purpose of this talk is to stimulate a conversation about low-cost, low-commitment ways to incorporate service learning via micro-volunteering and virtual-volunteering into CS classes as pedagogically relevant assignments. Micro-volunteering refers to volunteer actions which take little time (usually less than 30 minutes) and have no expectation of continued involvement. Virtual-volunteering is defined as volunteering which a person can complete via the Internet from any location. While there exist many opportunities for semester-long, service learning-based projects in upper level courses, there is a lack of practical project ideas and assignments which could be incorporated into courses of all levels on a smaller scale. The goal of this project is to develop concrete assignments and short projects which incorporate micro- and virtual-volunteer opportunities in a variety of core Computer Science courses including introductory and non-major courses.	Micro-Volunteering and Virtual-Volunteering as Pedagogical Tools in Computer Science Instruction	NA	2018
Rafi Santo	This lightning talk shares emerging lessons on helping K12 school districts plan around CSforAll. The CSed community rightly spends a lot time thinking about what CS to teach and how to teach it. And as efforts to bring CSed to K12 schools grow, we're starting to think more about how to support teachers through effective professional development. But we don't really know a lot about how the institutional contexts in which CSforAll efforts will succeed, or, potentially, fail - K12 districts - can approach CSed holistically. If we want to reach all kids, then districts are going to be a key leverage point to ensure that CSed efforts are equitable, rigorous and sustainable. We also know that they're incredibly complex systems that are difficult to change. In this talk we share lessons emerging from a research-practice partnership with sixteen K12 school districts. Based on studying how these districts have engaged in strategic planning and decision making, we share five emerging lessons for supporting K12 districts on their journey to make CSforAll to their schools. We focus on (1) the importance answering the question of "why CS for all students?", (2) developing a local definition of what "counts' as CS learning goals, (3) mapping existing activities and expertise related to CS, (4) integrating CSed efforts not just with existing curricula but also broader, existing institutional infrastructures, and (5) establishing coherence across learning goals, professional development, curricula and a guiding vision for CS education in a district.	5 Lessons on Supporting CSforAll in K12 School Districts	NA	2018
Paul Salvador Inventado	Programming is a complex skill requiring computational thinking, knowledge of the programming language, and the ability to distinguish, combine, and manipulate appropriate components to solve a problem. Practice is an effective strategy for teaching programming because it fosters skill mastery especially when students get sufficient experience and feedback. However, properly implementing programming practice is difficult because instructors need to assign appropriate problems for each student, evaluate solutions, and provide feedback. We conducted a pilot study on an introductory C++ programming class that applied mastery learning to optimize practice, used a repository of programming problems to reduce instructor effort, and leveraged unit tests to provide feedback and facilitate grading. The class had a lecture component to introduce programming concepts and a lab component for practice. We used mastery learning to control the number of practice-problems students solved on a topic before moving to a more advanced one. We assumed mastery when students answered three programming problems correctly in a row without help. If they sought help, they had to successfully solve a new set of three problems in a row. We also assumed mastery if they solved ten problems because it should have given them sufficient practice. We observed that experienced students asked fewer questions and quickly progressed across topics, while other students got much-needed help from instructors. The repository saved time for preparing problems and the unit tests helped answer students' low-level questions. Unit tests already checked students' solutions against expected results, so it significantly reduced checking time.	Promoting Mastery Learning in an Introductory Programming Course	NA	2018
Barry Fagin	Once you introduce RSA and probabilistic primality testing to your cryptography class, one of your brighter students will ask "What happens if the test is wrong?" It turns out the answer can vary from "You'll find out immediately" to "It makes no difference" to "It depends". We explain the mathematics that determine where the answer lies, and illustrate with examples suitable for use in the undergraduate classroom. We conclude by showing how to construct a key pair that produces correct RSA results from composite numbers p and q, and thus whose composite nature is not detectable through RSA encryption and decryption alone.	Teaching RSA: What Happens When One of Your Primes Isn't?	NA	2018
Vance Kite:Soonhye Park:Eric Wiebe	In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of "computational thinking for everyone," and propose specific recommendations for expanding the current CT paradigm.	Recognizing and Questioning the CT Education Paradigm	NA:NA:NA	2018
Olivera Grujic	Recent popularity of computer science courses has caused class enrollments to skyrocket to mega level of several hundred students. Due to space and other constraints, multiple sections of each class are often taught by the same instructor. Students attending different section are taking the same exam, which requires the instructor to keep teaching repeating lectures consistently. This can be difficult and is further complicated by the varying number of students and questions posed during different sections. The lightning talk explores one faculty's solution to lecture consistency issue by making use of technology in the classroom: review and discussion of lecture recordings with students in attendance. All lectures were recorded during the first session. During the subsequent session, those recordings were played back to students in attendance on the large projector screen. This practice offered the opportunity to the instructor to further clarify concepts taught in class and receive continuous feedback how to improve her teaching in addition to delivering consistent lectures. More importantly, it offered students an opportunity to hear the questions asked by the students in attendance of the recorded session, before asking their own or offering additional discussion points. Class participation increased significantly as a result of this practice.	Consistency when Teaching Multiple Sections: Live Lecture Recordings Reviewed and Discussed with Students	NA	2018
Zachary J. Oster	Internships are widely recognized as a high-impact educational practice that effectively prepares students for successful careers in the computing industry. Unfortunately, not all students have equal access to computing internships. Students are often expected to find internships independently, but their classes generally do not teach them the skills needed to search for computing internships or to succeed in a technical interview. Furthermore, at a university in a rural area with little or no public transportation, students may not be able to accept an internship offer unless they have a car and enough time to travel to and from a work site in a nearby city. These problems are especially severe for students of opportunity (e.g., students with low socioeconomic status, first-generation students): the exact students for whom an internship can have the greatest impact. To address this problem, our university is starting a software development center to provide campus-based internships in which student teams develop software products for clients. Students hired by the center will benefit from dedicated workspace on or near our campus, ongoing training in common software development practices (e.g., version control, project management, requirements engineering) that are not covered consistently in a classroom setting, and on-site mentoring from experienced software professionals. We believe that this co-curricular experience will improve participants' ability to begin and persist in a career in software development after graduation. We will discuss our experience with several pilot projects and our vision and goals for the center.	Improving Access to Internships with an On-Campus Software Development Center	NA	2018
Rachel Stange	The efforts of a Generation Z student to improve K-12 cyber competency through curriculum design and educator professional development, is having a positive impact in Virginia. School Systems in Virginia and across the nation tend to focus on cyber bullying as the primary issue. The issue that is not addressed is what cyber mechanisms allow cyber bullying to occur. This is often due to administrators and educators themselves not understanding what cyber competencies are needed to protect oneself in today's technological world. Studies show that social engineering, hacking and defending, cyber awareness, and personal connections have more impact on Generation Z and Generation Alpha students. My efforts started out to help my peers and have spiraled into a crusade to improve cyber competency of K-12 students and educators. One school system has created a Digital Citizenship Committee to support the concept of cyber competency beyond just teaching cybersecurity courses to a select few. This is a pay forward approach as the student leading the charge was impacted by two other students who were bullied through cyber stalking and classroom discussion boards. This effort is being aided by national organizations such as Safe Surfin' Foundation, National Center for Women & IT (NCWIT), and National CyberWatch Center. My presentation will show attendees how to expand this movement into their community to help slow down some of the cyber challenges facing Generation Z and beyond.	Increase K-12 Cyber Competency to Prevent Cyberbullying	NA	2018
Steven Paul Floyd	It's an exciting time in computer science education on the K-12 landscape. Educational jurisdictions around the world are incorporating computer science concepts, as well as related computational thinking components, into their mandatory, K-12 curriculum. As we develop and implement curriculum initiatives with an eye on the future and the 21st century learner and citizen, what wisdom can we gleam from the past? In Ontario, Canada computer science education dates back to 1966 with the release of the Ministry of Education's Data Processing course that included a number of computer science and computer programming concepts and ideas. The document also frames computer education within the context of an emerging field and highlights the importance of students developing appropriate computer skills in order to thrive in the labor market and society. While we often consider computer science curriculum initiatives in K-12 education nascent, are important historical policy and initiatives being overlooked? This lightning talk shares preliminary findings from an analysis of five historical computer science curriculum documents. Grounded theory was used to discover emergent themes and concepts apparent in historical documents including ethical computing, the role of technology in society, and the cross-curricular nature of computer science skills. These preliminary findings inform the discussion surrounding the use of historical curriculum to establish best practice in existing curriculum and policy development.	Historical High School Computer Science Curriculum and Current K-12 Initiatives	NA	2018
Sotirios Kentros:Manish Wadhwa:Lakshmidevi Sreeramareddy:Komalpreet Kaur	We have introduced Peer-Educators through the Supplemental Instruction program and four Team-Based Learning laboratory assignments in our Introduction to Programming course. These four laboratory assignments are using Finch Robots to facilitate student comprehension of basic object-oriented programming concepts. In contrast to other lab assignments, Finch labs are team-based activities that revolve around programming Finch, a programmable robot to do activities like moving, sensing the environment, playing music, etc. Introducing the Finch labs has multiple benefits for the students. It helps better anchor the basic concepts of object-oriented programming, since interacting with the Finch robot is done by instantiating a Finch object and performing method calls on the object. This helps students understand many of the object oriented topics of the course, like object instantiation, method calls, passing arguments to a method and changing the state of an object. Furthermore, the labs facilitate peer learning in a natural way, since students group to work on a physical object. The goal of our intervention is to increase retention in our introduction to programming offerings. We are currently on the third year of our project and after having concluded in the interventions we want to adopt we are evaluating them through post-activity surveys, end of the semester surveys and comparison of retention data.	Improving Retention through Team-Based Learning Finch Labs and Peer-Educators in Intro to Programming	NA:NA:NA:NA	2018
Lina Battestilli:Peter-Michael Osera	NA	Session details: Demonstrations	NA:NA	2018
Seth Haberman:Keren Perry-Shamir	At universities around the world, class sizes in Computer Science and other STEM courses are rapidly growing, as these skills become increasingly sought after in the marketplace, promising lucrative careers to graduates. Staffing-up to support the influx of students in this field presents challenges of its own. Hiring and training TAs to allow for quality and personal interactions with students, even as the class sizes grow, is expensive and difficult to maintain. Existing tools provide some automation by focusing mainly on output correctness but often overlook the student's approach to solving a problem. A solution is required in order to provide high-quality personalized feedback to very large numbers of student submissions for open-ended assignments, and in the timeframe that will keep today's instant-feedback-seeking students moving forward and not discouraged. The Sense platform utilizes algorithms from bioinformatics and genomics to identify patterns in student submissions and quickly surface insights about how students solved a problem. This enables the educator to provide rapid, equitable, in-depth feedback to each and every student, regardless of class size, and to use insights gained from this process to optimize their teaching methods and choice of assignments. In our presentation, we will show how our system identifies patterns in student submissions and uses those to generate clusters of students who have approached the problem in a similar way. We will use this time to facilitate a discussion about the specific insights that can be gleaned from the results for the students and for the educator.	Applying Bioinformatics to Assignment Evaluation: A New Approach for Pattern Recognition in Open-Ended CS Assignments	NA:NA	2018
Gautam Biswas:Nicole Hutchins:Ákos Lédeczi:Shuchi Grover:Satabdi Basu	C2STEM is a web-based learning environment founded on a novel paradigm that combines block-structured, visual programming with the concept of domain specific modeling languages (DSMLs) to promote the synergistic learning of discipline-specific and computational thinking (CT) concepts and practices. Our design-based, collaborative learning environment aims to provide students in K-12 classrooms with immersive experiences in CT through computational modeling in realistic scenarios (e.g., building models of scientific phenomena). The goal is to increase student engagement and include inclusive opportunities for developing key computational skills needed for the 21st century workforce. Research implementations that include a semester-long high school physics classroom study have demonstrated the effectiveness of our approach in supporting synergistic learning of STEM and CS/CT concepts and practices, especially when compared to a traditional classroom approach. This technology demonstration will showcase our CS+X (X = physics, marine biology, or earth science) learning environment and associated curricula. Participants can engage in our design process and learn how to develop curricular modules that cover STEM and CS/CT concepts and practices. Our work is supported by an NSF STEM+C grant and involves a multi-institutional team comprising Vanderbilt University, SRI International, Looking Glass Ventures, Stanford University, Salem State University, and ETR. More information, including example computational modeling tasks, can be found at C2STEM.org.	Integrating Computational Modeling in K-12 STEM Classrooms	NA:NA:NA:NA:NA	2018
David Burlinson:Erik Saule:Kalpathi Subramanian	Many newcomers to programming and computational thinking have been brought up on interactive, gamified learning environments. Introductory computer science courses at the university level need to dig deeper into these topics, but must do so with similarly engaging technologies and projects. To address this need, we have built a framework for a grid-based game API with event-based blocking and continuous non-blocking interfaces. The framework abstracts away much of the complexity of inputs and rendering and exposes a simple game grid similar to a 2D array indexed by rows and columns. As such, our project helps reinforce basic computing concepts (arrays, loops, OOP, recursion) with a customizable and engaging game interface. We have discussed the valuable influence of visual representations of student's data structures using BRIDGES in previous publications, and believe our game API can provide significance and intrigue for students in introductory courses and beyond. Our Bridges Games App website (http://bridges-games.herokuapp.com/) presents descriptions and instructions.	Building Simple Games With BRIDGES	NA:NA:NA	2018
Joseph E. Hollingsworth:Eileen T. Kraemer:Murali Sitaraman	Using freely available online automated reasoning tools, we will demonstrate a sequence of engaging reasoning activities that are suitable to introduce beginning programmers and software engineering students to reason logically and symbolically about code. The automated tools have an underlying verification engine that makes it possible for the tool to offer activities and directed logical feedback not possible with typical development environments. The tools have been used in undergraduate classrooms for multiple years by well over a thousand students. The imperative language used by the tool is integrated with the underlying verification engine, and because it closely resembles many commercial languages, it presents little barrier to student usage. A comprehensive activity-based "Reason with Components" tool takes 5-10 minutes of instructor introduction and allows student exploration of contracts, objects, loops, recursion, and reusable concepts. Multiple versions of "Begin to Reason" tools are designed to help students learn the basics of code tracing in intro CS courses "on their own". Students and instructors can create new activities and can fine-tune the existing activities to their specific needs.	Engaging in Logical Code Reasoning with an Activity-Based Online Tool	NA:NA:NA	2018
Richard Weiss:Jens Mache	The critical shortage of cyber security professionals has driven faculty interest in adding this to the curriculum, and it was added to the ACM/ IEEE Model Curriculum of 2013. This is a subject that demands hands-on exercises. There has been a modest increase in the number of such exercises, but the limit is usability. Most faculty do not have the time to create their own exercises, modify and install VMs, and set up assessment mechanisms. EDURange is a framework for accessing, developing and assessing interactive cybersecurity exercises. It has a range of exercises from introductory to advanced. We will demo an introductory exercise about using the command line and an advanced exercise about network scanning. We want to reach and engage as many faculty as possible, so that they can develop their own exercises. EDURange uses VMs in the cloud. Students only need an ssh-client. We have built tools to give faculty detailed information on how students are doing. This allows instructors to more easily see when students are stuck or heading in the wrong direction. The exercises we have created have manuals that instructors can use. Information about EDURange can be found at https://edurange.org.	Hands-on Cybersecurity Exercises that are Easy to Access	NA:NA	2018
Keith Irwin:Austin Hodge:Darina Dicheva	The low performance and drop-outs in Computer Science classes are frequently attributed to lack of engagement and motivation. Meanwhile, gamification - the application of game design principles and game mechanics to a non-game context - increasingly attracts the interest of educators due to its potential to foster motivation and behavioral changes in learning contexts. This Demo will introduce OneUp Learning, a platform aimed at facilitating the gamification of academic courses. OneUp enables instructors to define course activities and create exercise problems for practicing and self-assessment, as well as exams or quizzes for testing particular skills. The platform enables gamifying these practice activities. It is highly configurable and supports tailoring gamification features to meet the vision of the instructor. The gamification related configuration includes the choice of the game elements to be used along with specification of gaming rules for them. The system currently supports the following game elements: points (challenge points, skill points, and activity points), progress bar, virtual currency, badges, leaderboard, skill board, learning dashboard, and avatars. In the demo, we will show interested instructors how they can use OneUp in their classes. In particular, we will show them how to create problems and challenges, how to configure the gamification features they like to use, how to define their own badges, how to define rules for earning and spending virtual currency (in the course shop), and how to monitor the engagement and progress of their students. This work is supported by the NSF under Grants HBCU-UP TIP-1623236 and DUE-1821189.	Gamifying Computer Science Courses with OneUp	NA:NA:NA	2018
Gordon Fraser	Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game aims to address this problem by letting students compete over code under test by either introducing faults ("attacking") or by writing tests ("defending") to reveal these faults. We have empirically established that the game is engaging and players write better tests than outside the game scenario, and we have successfully integrated Code Defenders as a semester-long activity of an undergraduate and graduate level university course on software testing. This demonstration provides an introduction to Code Defenders from a student point of view (How to play the game?) as well as from a teacher point of view (How to set up games for my students, and how to integrate the game into my course?) A laptop is recommended to join in and try out the game.	Code Defenders: A Mutation Testing Game	NA	2018
Joshua W. Buck:Saverio Perugini	We demonstrate a graphical simulation tool for visually and interactively exploring the processing of a variety of events handled by an operating system when running a program. Our graphical simulator is available for use on the web by both instructors and students for purposes of pedagogy. Instructors can use it for live demonstrations of course concepts in class, while students can use it outside of class to explore the concepts. The graphical simulation tool is implemented using the React library for the fancy UI elements of the Node.js framework and is available as a web application at https://cpudemo.azurewebsites.net. The goals of this demonstration are to showcase the demonstrative capabilities of the tool for instruction, share student experiences in developing the engine underlying the simulation, and to inspire its use by other educators. An article describing this software simulation and demonstrating its pedagogical capabilities is available at https://arxiv.org/abs/1812.05160.	An Interactive, Graphical Simulator for Teaching Operating Systems	NA:NA	2018
Ákos Lédeczi:Hamid Zare:Gordon Stein	NetsBlox (https://netsblox.org) is a web-based collaborative learning environment extending Snap! with a few carefully selected abstractions that enable students to create distributed applications. These include online multi-player games and client-server applications that access online STEAM data such as maps, weather, earthquakes, movie information, etc. The distributed computing abstractions supported by NetsBlox also make it possible to write robot control programs. These programs issue wireless commands to the robots which in turn reply with acknowledgements and sensor readings. The programs run in the browser making debugging much easier and eliminating the need to download anything to the robots. Furthermore, the environment makes it possible for other users to eavesdrop on the wireless messages and hijack the robots of others. This provides an excellent motivation for cybersecurity and makes it easy to teach it in a hands-on manner. We have created a cybersecurity curriculum for a week-long summer camp for high school students. Lessons include Denial of Service attacks, their detection and mitigation, cryptography, secure key exchange, replay attacks, etc. Each day student teams solve challenge problems that their robots have to carry out while under cyber-attack by the other participants. This technology demonstration is a companion to the paper "Teaching Cybersecurity with Networked Robots." It will provide the audience with a more practical view of this novel approach to hands-on cybersecurity education.	NetsBlox and Wireless Robots Make Cybersecurity Fun	NA:NA:NA	2018
Lauren R. Milne:Richard E. Ladner	Block-based programming environments such as Scratch are designed to make programming easier to learn for both children and adults. Unfortunately, these environments rely so heavily on visual features that they are inaccessible to people who are blind and use screen readers. To address this problem, we created Blocks4All, a block-based environment for the Apple iPad, which uses the touchscreen and VoiceOver, the built-in screen reader for iOS, to help make the environment accessible. Blocks4All differs from existing block-based environments in three main ways: (1) it uses select, select, drop instead of drag and drop to move blocks, (2) the blocks are placed on the bottom of the screen and are a fixed size so that they can easily be found by touch even without sight, and (3) it uses both audio and spatial cues to convey information about statements nested inside repeat loops and conditionals. In our presentation, we will show the features we developed and demonstrate how to write code that uses both conditional statements and repeat loops. We anticipate the demo will be useful both for instructors with students with visual impairments and developers of block-based environments. Handouts will be provided that describe Blocks4All and information about how to download a beta version.	Blocks4All: Making Blocks-Based Programming Languages Accessible for Children with Visual Impairments	NA:NA	2018
Dan Garcia:Tiffany Barnes	NA	Session details: Opening Keynote	NA:NA	2018
Brenda Darden Wilkerson	As founder of the original Computer Science for All (CS4All) initiative in the Chicago Public Schools, Brenda Darden Wilkerson set the standard for integrating computer science classes into the curriculum for every student. Now, she's leading the charge to break down barriers for women and members of other underrepresented minorities in the tech industry. She argues that, while many administrators and community leaders see CS4All as merely a key component of a new core curriculum, CS educators are actually sowing the seeds of the next workplace revolution. In this inspirational keynote, Brenda will share the ways that educators on the front lines of this inclusive movement can expect to reap the fruits of their labor -- not just professionally, but personally -- in surprising ways. And she'll spotlight the historic role of women, and people of color, in technology and computer science, offering examples that will better allow us all to reclaim our rightful seats at the table.	The Evolution Before the Revolution	NA	2018
Becky Grasser	NA	Session details: Paper Session: Automated Support for Education	NA	2018
Luciana Benotti:Federico Aloi:Franco Bulgarelli:Marcos J. Gomez	In this paper we do three things. First, we describe a web-based coding tool that is open-source, publicly available and provides formative feedback and assessment. Second, we compare several metrics on student performance in courses that use the tool versus courses that do not use it when learning to program in Haskell. We find that the dropout rates are significantly lower in those courses that use the tool at two different universities. Finally we apply the technology acceptance model to analyse students perceptions.	The Effect of a Web-based Coding Tool with Automatic Feedback on Students' Performance and Perceptions	NA:NA:NA:NA	2018
Emmanuel Schanzer:Kathi Fisler:Shriram Krishnamurthi	Bootstrap:Algebra is a curricular module designed to integrate introductory computing into an algebra class; the module aims to help students improve on various essential learning outcomes from state and national algebra standards. In prior work, we published initial findings about student performance gains on algebra problems after taking Bootstrap. While the results were promising, the dataset was not large, and had students working on algebra problems that had been scaffolded with Bootstrap's pedagogy. This paper reports on a more detailed study with (a) data from more than three times as many students, (b) analysis of performance changes in incorrect answers, (c) some problems in which the Bootstrap scaffolds have been removed, and (d) an IRT analysis across the elements of Bootstrap's program-design pedagogy. Our results confirm that students improve on algebraic word problems after completing the module, even on unscaffolded problems. The nature of incorrect answers to symbolic-form questions also appears to improve after Bootstrap.	Assessing Bootstrap: Algebra Students on Scaffolded and Unscaffolded Word Problems	NA:NA:NA	2018
Laura Zavala:Benito Mendoza	In introductory programming courses, proficiency is typically achieved through substantial practice in the form of relatively small assignments and quizzes. Unfortunately, creating programming assignments and quizzes is both, time-consuming and error-prone. We use Automatic Item Generation (AIG) in order to address the problem of creating numerous programming exercises that can be used for assignments or quizzes in introductory programming courses. AIG is based on the use of test-item templates with embedded variables and formulas which are resolved by a computer program with actual values to generate test-items. Thus, hundreds or even thousands of test-items can be generated with a single test-item template. We present a semantic-based AIG that uses linked open data (LOD) and automatically generates contextual programming exercises. The approach was incorporated into an existing self-assessment and practice tool for students learning computer programming. The tool has been used in different introductory programming courses to generate a set of practice exercises different for each student, but with the same difficulty and quality.	On the Use of Semantic-Based AIG to Automatically Generate Programming Exercises	NA:NA	2018
Patrick Kinnicutt	NA	Session details: Paper Session: Courses for Non-majors	NA	2018
Zoë J. Wood:John Clements:Zachary Peterson:David Janzen:Hugh Smith:Michael Haungs:Julie Workman:John Bellardo:Bruce DeBruhl	Since 2010, the Cal Poly Computer Science Department has required computing majors to select from a variety of CS0 courses to start their academic year. The broad objective of the course is to attract and retain undergraduates that have no prior experience in CS by using authentic problems that demonstrate the relevance and highlight the role of computers in solving "real world" problems. The course is offered in a variety of thematic "flavors" that leverage a student's pre-existing interests (e.g. in music or art), but all share the common goals of introducing students to the basics of programming, teamwork, and college-level study. While there is overlap in overall goals, the courses vary drastically in topic matter (e.g. robotics, gaming, music, computational art, mobile apps, security) and in pedagogical approach (e.g. principles of design, project-based student driven learning, and traditional topic-based programming modules). The introduction of this CS0 course has increased students' commitment to their major and success in follow-on classes. We present these successes and show that student GPAs in a follow-on object oriented programming course do not vary significantly for the differing subtopics and teaching pedagogies employed in the various flavors. Our report includes examining two student subgroups (those experienced with programming and those new to programming). Our evaluations suggest that the existence and goal of the course matter more than the specific content, with all subtopics and pedagogical approaches performing well.	Mixed Approaches to CS0: Exploring Topic and Pedagogy Variance after Six Years of CS0	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Jessica Q. Dawson:Meghan Allen:Alice Campbell:Anasazi Valair	Demand for computing courses from students in disciplines outside of Computer Science is growing. This growth has created increasing challenges in offering one-size-fits-all CS1 courses. We found that non-CS majors' experiences and outcomes in our existing CS1 course were worse than those of intended CS majors. In response, we developed an introductory programming course, CS0.5, aimed at meeting the needs of the diverse population of non-CS major students interested in our courses. In this paper, we present the motivation, curriculum design, and evidence of effectiveness for this new course. We describe the specific design decisions we made in response to the experiences of non-CS majors in CS1. We also demonstrate that students' outcomes in CS0.5--measured in terms of students' pass rates, satisfaction, and attitudes--all not only improve compared to non-CS majors in CS1, but also largely match those of CS majors in CS1. Finally, we present student feedback, gathered through surveys and Appreciative Inquiry focus groups, that illustrates how our curriculum design choices better meet our non-major students' needs. The most-valued course design elements, as identified by focus group participants, provide insight for other CS educators who are designing similar courses.	Designing an Introductory Programming Course to Improve Non-Majors' Experiences	NA:NA:NA:NA	2018
Chris S. Crawford:Christina Gardner-McCune:Juan E. Gilbert	As CS + X courses become more common, it is important for us to investigate ways to leverage interdisciplinary learning tools to expand the types of experiences available to students. This paper discusses our experiences introducing CS undergraduates to basic Brain-Computer Interface (BCI) concepts using NeuroBlock. Neuroblock is a visual programming environment that allows users to build applications driven by near-real-time neurophysiological (i.e., brainwaves) data. Brainwave data is captured using a commercial-grade BCI device. Students use brainwave data from the BCI device to create interactive hybrid-BCI applications (e.g., games) featuring objects that respond to students' affective states (e.g. engagement, relaxation, and attention) and keyboard events. In this paper, we describe NeuroBlock, three example activities, and results from an exploratory empirical study that suggests exposure to NeuroBlock increased students' confidence in their ability to develop applications that leverage neurophysiological signals. NeuroBlock and the discussed activities have the potential to supplement future CS + X courses by providing students hands-on experiences with emerging physiological devices.	Brain-Computer Interface for Novice Programmers	NA:NA:NA	2018
Leigh Ann Delyser	NA	Session details: Paper Session: CS4All	NA	2018
Sohail Alhazmi:Margaret Hamilton:Charles Thevathayan	Increasingly, students enrolled into foundational CS courses such as programming fundamentals include those from many non-CS majors including Data Analytics, Business, Science and Social Sciences. Staff teaching foundational programming courses must therefore cater for varying student backgrounds, cognitive abilities and interests while teaching abstract concepts such as encapsulation, inheritance and polymorphism. In the past assignments played a major role in learning such abstract concepts as they allowed students to construct their own meanings experientially. However, a single assignment in a given domain pitched at an average student cannot cater effectively to students with varying cognitive abilities and backgrounds resulting in poor learning outcomes and student satisfaction. In this paper we report our experience, substantially improving learning outcomes and student satisfaction in a Master's level introductory programming course with weak learning outcomes and poor student satisfaction by offering a choice of assignments. Our novel approach requires designing assignments which take into account the interests of students and their zone of proximal development which determines the extent to which a learner can grasp new concepts. Our pre and post assignment tests and survey feedback clearly show a substantial improvement in learning outcomes and student perception.	CS for All: Catering to Diversity of Master's Students through Assignment Choices	NA:NA:NA	2018
Cheri Fancsali:Linda Tigani:Paulina Toro Isaza:Rachel Cole	NYC's Computer Science for All (CS4All) is a 10-year, districtwide initiative aimed at providing high-quality computer science (CS) education to all NYC public school students. It aspires to greatly increase the number of students, teachers, and schools exposed to CS in NYC, and to offer meaningful learning experiences that build on prior exposure and skills at every grade level. These plans include providing high-quality professional development (PD) to some 5,000 teachers, designed to help them learn new programs and pedagogies in CS education, as well as strategies for integrating CS into existing courses. This paper presents findings from an assessment of CS in NYC, conducted in the second year of the CS4All initiative. Using a telephone survey of a representative sample of schools, we describe the current state of CS programming and training in the City. Overall, we found high participation in CS teacher training opportunities (both through and independent of the initiative) and widespread offering of CS courses Specifically, we estimate just over half of schools districtwide (56%) participated in some type of CS training in the 2015-16 school year, and about two thirds of schools (64%) offered students some kind of CS coursework in the 2016-17 school year (through either stand-alone CS courses or the integration of CS into other subjects). The type of programming and training varied by school level (elementary, middle and high). We also explored the extent to which programming and training are reaching schools and students who are historically underrepresented in CS--including women and girls, students of color, low-income students and students with disabilities. We found that schools offering CS courses and activities served fewer Black and Latino students and more White and Asian Students, compared with schools not offering CS. This work is unique, as it is the only districtwide assessment of CS education conducted anywhere in the country to date, thus adding to an under-researched but important and growing field of study	A Landscape Study of Computer Science Education in NYC: Early Findings and Implications for Policy and Practice	NA:NA:NA:NA	2018
Steven McGee:Randi McGee-Tekula:Jennifer Duck:Catherine McGee:Lucia Dettori:Ronald I. Greenberg:Eric Snow:Daisy Rutstein:Dale Reed:Brenda Wilkerson:Don Yanek:Andrew M. Rasmussen:Dennis Brylow	This study investigated patterns in the development of computational thinking practices in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Past research indicates that the personal relevance of the ECS experience influences students' expectancy-value towards computer science. Expectancy-value is a construct that is predictive of career choices. We extended our research to examine whether expectancy-value influences the development of computational thinking practices. This study took place in the context of two ECS implementation projects across two states. Twenty teachers, who implemented ECS in 2016-17, participated in the research. There were 906 students who completed beginning and end of year surveys and assessments. The surveys included demographic questions, a validated expectancy-value scale, and questions about students' course experiences. The assessments were developed and validated by SRI International as a companion to the ECS course. Overall, student performance statistically increased from pretest to posttest with effect size of 0.74. There were no statistically significant differences in performance by gender or race/ethnicity. These results are consistent with earlier findings that a personally relevant course experience positively influences students' expectancy for success. These results expanded on prior research by indicating that students' expectancy-value for computer science positively influenced student learning.	Equal Outcomes 4 All: A Study of Student Learning in ECS	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Roberto Hoyle	NA	Session details: Paper Session: Cybersecurity #1	NA	2018
Valdemar Švábenský:Jan Vykopal	Cybersecurity games are an attractive and popular method of active learning. However, the majority of current games are created for advanced players, which often leads to frustration in less experienced learners. Therefore, we decided to focus on a diagnostic assessment of participants entering the games. We assume that information about the players' knowledge, skills, and experience enables tutors or learning environments to suitably assist participants with game challenges and maximize learning in their virtual adventure. In this paper, we present a pioneering experiment examining the predictive value of a short quiz and self-assessment for identifying learners' readiness before playing a cybersecurity game. We hypothesized that these predictors would model players' performance. A linear regression analysis showed that the game performance can be accurately predicted by well-designed prerequisite testing, but not by self-assessment. At the same time, we identified major challenges related to the design of pretests for cybersecurity games: calibrating test questions with respect to the skills relevant for the game, minimizing the quiz's length while maximizing its informative value, and embedding the pretest in the game. Our results are relevant for educational researchers and cybersecurity instructors of students at all learning levels.	Challenges Arising from Prerequisite Testing in Cybersecurity Games	NA:NA	2018
Michael H. Dunn:Laurence D. Merkle	It is well documented that there is a sizable shortage of workers in cybersecurity and related careers. Exacerbating this problem are severe imbalances with respect to gender and other underrepresented categories, with one recent study finding only 11% of cybersecurity professionals are women. One approach to addressing these shortages is to attempt to increase interest in cybersecurity careers through extracurricular cybersecurity competitions. CyberPatriot is the largest cybersecurity competition for middle and high school students in North America, with over 14,000 young people participating during the 2016-2017 school year. This paper assesses the impact of this competition on participants' interest in cybersecurity careers. Survey data previously collected by the competition organizers is analyzed with rigorous statistical methods. Results show that participants' interest in cybersecurity increased meaningfully in several dimensions relevant to career selection. Further analysis also finds that despite lower initial interest in cybersecurity careers among female participants, this interest increased by an even greater amount than it did for male participants.	Assessing the Impact of a National Cybersecurity Competition on Students' Career Interests	NA:NA	2018
Ge Jin:Manghui Tu:Tae-Hoon Kim:Justin Heffron:Jonathan White	Cybersecurity is critical to the national infrastructure, federal and local government, military, industry, and personal privacy. To defend the U.S. against the cyber threats, a significant demand for skilled cybersecurity workforce is predicted in government and industrial sectors. To address this issue, National Security Agency and the National Science Foundation jointly funded GenCyber program to stimulate the K-12 students' interest in the cybersecurity field and raise their awareness of cybersecurity and safe online behavior. Purdue University Northwest has successfully launched four GenCyber summer camps in 2016 and 2017 to 181 high school students, with 51.3% underrepresented minority ratio (Africa American and Hispanics), and about 2:1 male to female ratio. We delivered GenCyber summer camp activities in the format of game based learning and hands-on labs. The use of game-based learning in the camp was an excellent platform to teach concepts of cyber security principles. For example, in Cyber Defense Tower Game, students need to protect their servers from the different types of cyber-attack. They need to select the correct type of defense to stop each wave of cyber-attack. As the students advanced through the game, combinations of the different attacks would come faster, making it more difficult for the students to defend their servers. This game was well received by the students, support staffs, instructors, and site visit team. Learning through these activities provided high school students with an immersive, learner-centered experience, which has been proven very effective on cybersecurity awareness training and practical skill acquisition for learners from diverse backgrounds. Further analysis of survey data revealed that the gamification of cybersecurity education to raise students' interests in computer science and cybersecurity was more effective in male high school students than in female students.	Game based Cybersecurity Training for High School Students	NA:NA:NA:NA:NA	2018
Sarah Heckman	NA	Session details: Paper Session: Introductory Courses	NA	2018
Iris Gaber:Amir Kirsh	Students in Computer Science programming courses often have difficulty with coding, which results in flawed exercises. We asked students working on programming exercises to report known defects in their submission. We distinguish between three types of defects: bugs in the program, missing features, and poorly written code. Results show that students detect and report missing features and bugs quite accurately (59% of the bugs and 61% of the missing features were reported), but they are much less aware of the quality of their code (only 28% of the code issues were reported). After comparing their grades to the grades of the previous year we argue that the request to report defects helps student in submitting exercises with fewer bugs. Finally, the students affirmed that the request to report defects helped them in detecting problems and improved their time management.	The Effect of Reporting Known Issues on Students' Work	NA:NA	2018
Chris Wilcox:Albert Lionelle	The superior performance of students with prior exposure to programming has long been evident to faculty that teach introductory courses. In this paper we replicate previous studies that quantify the difference between students with and without previous programming experience, and we provide further focus on gender differences. Our research is based on an initial CS1 course that we divided into a section with students having previous programming experience (P) and two sections for students without (N). Both sections of CS1 were taught with the same curriculum and assessments. We find that the advantages of prior experience are substantial, with P students outscoring N students by more than 6% on exams and 10% on programming quizzes. However, the performance gap between P and N students narrows considerably by the end of the following CS2 course, with no significant difference in overall scores. Analyzing results by gender, our data shows that 22% of N students in CS1 are female versus only 12% of P students. However, the female students with prior exposure outperform their male peers in all areas. Another finding of our research is the confirmation of a significant difference in confidence between female and male students.	Quantifying the Benefits of Prior Programming Experience in an Introductory Computer Science Course	NA:NA	2018
Nabeel Alzahrani:Frank Vahid:Alex Edgcomb:Kevin Nguyen:Roman Lysecky	Many teachers of CS 1 (introductory programming) have switched to Python rather than C, C++, or Java. One reason is the belief that Python's interpreted nature plus simpler syntax and semantics ease a student's learning, but data supporting that belief is scarce. This paper addresses the question: Do Python learners struggle less than C++ learners? We analyzed student submissions on small coding exercises in CS 1 courses at 20 different universities, 10 courses using Python, and 11 using C++. Each course used either the Python or C++ version of an online textbook from one publisher, each book having 100+ small coding exercises, expected to take 2-5 minutes each. We considered 11 exercises whose Python and C++ versions were nearly identical and that appeared in various chapters. We defined struggle rate for exercises, where struggle means a student spent excessive time or attempts on an exercise. Based on that rate, we found the learning for Python was not eased; in fact, Python students had significantly higher struggle rates than C++ students (26% vs. 13%). Higher rates were seen even when considering only classes with no prerequisites, classes for majors only, or classes for non-majors only. We encourage the community to do further analyses, to help guide teachers when choosing a CS 1 language.	Python Versus C++: An Analysis of Student Struggle on Small Coding Exercises in Introductory Programming Courses	NA:NA:NA:NA:NA	2018
Peter Froehlich	NA	Session details: Paper Session: Systems Courses	NA	2018
Suzanne J. Matthews:Joel C. Adams:Richard A. Brown:Elizabeth Shoop	With the requirement that parallel & distributed computing (PDC) topics be covered in the core computer science curriculum, educators are exploring new ways to engage students in this area of computing. In this paper, we discuss the use of the Raspberry Pi single-board computer (SBC) to provide students with hands-on multicore learning experiences. We discuss how the authors use the Raspberry Pi to teach parallel computing, and present assessment results that indicate such devices are effective at achieving CS2013 PDC learning outcomes, as well as motivating further study of parallelism. We believe our results are of significant interest to CS educators looking to integrate parallelism in their classrooms, and support the use of other SBCs for teaching parallel computing.	Portable Parallel Computing with the Raspberry Pi	NA:NA:NA:NA	2018
Sam Silvestro:Timothy T. Yuen:Corey Crosser:Dakai Zhu:Turgay Korkmaz:Tongping Liu	This paper presents the design and evaluation of a novel project designed to facilitate the learning of memory management concepts and interactions between different components. This project removes the complexity of a full or specific operating system by implementing memory management inside the user space. Evaluation results show that the mean exam scores improved by about 29% to 34%. On average, the total code size is less than 300 lines and time spent working on this project is under 17 hours. Therefore, this project is beneficial in helping students learn memory management while maintaining a reasonable project workload.	A User Space-based Project for Practicing Core Memory Management Concepts	NA:NA:NA:NA:NA:NA	2018
Brian P. Railing:Randal E. Bryant	This work describes our experience in revising one of the major programming assignments for the second-year course Introduction to Computer Systems, in which students implement a version of the malloc memory allocator. The revisions involved fully supporting a 64-bit address space, promoting a more modern programming style, and creating a set of benchmarks and grading standards that provide an appropriate level of challenge. With this revised assignment, students were able to implement more sophisticated allocators than they had in the past, and they also achieved higher performance on the related questions on the final exam.	Implementing Malloc: Students and Systems Programming	NA:NA	2018
Mohsen Dorodchi	NA	Session details: Paper Session: Pedagogy #1	NA	2018
Lisa Yan:Nick McKeown:Mehran Sahami:Chris Piech	As computer science classes grow, instructor workload also increases: teachers must simultaneously teach material, provide assignment feedback, and monitor student progress. At scale, it is hard to know which students need extra help, and as a result some students can resort to excessive collaboration--using online resources or peer code--to complete their work. In this paper, we present TMOSS, a tool that analyzes the intermediate steps a student takes to complete a programming assignment. We find that for three separate course offerings, TMOSS is almost twice as effective as traditional software similarity detectors in identifying the number of students who exhibit excessive collaboration. We also find that such students spend significantly less time on their assignment, use fewer class tutoring resources, and perform worse on exams than their peers. Finally, we provide a theory of the parametric distribution of typical student assignment similarity, which allows for probabilistic interpretation.	TMOSS: Using Intermediate Assignment Work to Understand Excessive Collaboration in Large Classes	NA:NA:NA:NA	2018
Matti Nelimarkka:Arto Hellas	Being able to seek help is a crucial part of any learning process. This includes both collaborative models such as asking for help from others as well as independent models such as using course materials and the vast resources provided by the Web. Currently, MOOC research has addressed social help-seeking within the MOOC course, either using MOOC platform tools (forum, chat) or arranging activities using external platforms (Google Hangout, Facebook groups). However, MOOC learning activities take place in a larger social ecology, including friends and teachers, general online communities and alumni communities. Using survey data from a programming MOOC, we show a typology of social learning strategies: non-use of social help-seeking, seeking help from friends and seeking help from alumni and teacher communities. We further show that students using social help-seeking strategies orient themselves more with a surface approach but are also less likely to drop the course. We conclude this work by addressing the various design possibilities identified by this work.	Social Help-seeking Strategies in a Programming MOOC	NA:NA	2018
Mia Minnes:Christine Alvarado:Leo Porter	With surging enrollments in computer science, large classes are becoming standard, even at the upper division. Unfortunately, this new reality can leave students feeling anonymous and unsupported. This work examines the impact of several lightweight interventions on students' sense of connection with instructors and the class. These strategies were employed in a range of large courses at a public research-focused university. The implemented techniques include: opportunities for one-on-one tutoring, seating assignments with consistent teaching staff members seated in class, and assigned small discussion sections, among others. All strategies are lightweight and require only the usual staffing resources afforded to a class. In this report, we evaluate student sense of community and reflect on the benefits and challenges of these techniques.	Lightweight Techniques to Support Students in Large Classes	NA:NA:NA	2018
Ali Erkan:John Barr:Valerie Barr:Michael Goldweber:Deepak Kumar	Computer science curricula has been well defined for many years through the publication of the Computer Science Curricula reports developed jointly by the two major professional societies, the Association for Computing Machinery (ACM) and the IEEE Computer Society. These documents define computer science curricula by providing knowledge areas and course exemplars. The most recent curriculum report, the Computer Science Curricula 2013 (CSC13 [1]), provides 18 knowledge areas (KAs). Though it stresses that KAs do not necessary represent courses, computer science departments have traditionally created courses around the KAs. Indeed, the course exemplars presented in the CSC13 report, for the most part, center around KAs.	Holistic Approaches to Computer Science	NA:NA:NA:NA:NA	2018
Douglas H. Fisher:Jacqueline Cameron:Tamara Clegg:Stephanie August	Computing for social good has become a common topic in computing circles, with professional organizations and conferences sponsoring discussions on the relevance of "social good" material for computer science research [e.g., 1] and for education [e.g., 12,13,18].	Integrating Social Good into CS Education	NA:NA:NA:NA	2018
Colleen M. Lewis:Catherine Ashcraft:Kyla McMullen	Many SIGCSE attendees are committed to inclusive teaching practices and creating an inclusive culture within their classrooms; yet, advocating for and sustaining these initiatives may require having difficult conversations with our colleagues and students. Understandably, many faculty are unsure about how to talk about sensitive topics such as race and gender with their colleagues and students. Research suggests that practicing some of these difficult conversations is essential to achieve the goals of inclusive teaching and culture. Most SIGCSE attendees probably use active learning throughout their teaching, but we rarely see active learning at SIGCSE - let's try it! In this interactive session, attendees will learn strategies for responding to bias in academic settings. Attendees will then practice those strategies in small groups. This will be facilitated by playing two rounds of a research-based game learning approach developed by the NSF project CSTeachingTips.org (#1339404), which has been tested in group of 200 teaching assistants. This is the fifth iteration of the game-learning approach and all attendees will receive a printed copy of the game and a link to download and print more copies.	What Would You Say if...: Responding to Microaggressions, Bias, and Other Nonsense	NA:NA:NA	2018
Sushil K. Prasad:Charles C. Weems:John P. Dougherty:Debzani Deb	NA	NSF/IEEE-TCPP Curriculum Initiative on Parallel and Distributed Computing: Status Report	NA:NA:NA:NA	2018
Dan Garcia:Tiffany Barnes	NA	Session details: First Timer's Lunch Keynote & 2018 SIGCSE Award for Lifetime Service to the Computer Science Education Community	NA:NA	2018
Eric Roberts	Academic computer science is at a critical juncture that offers both challenges and opportunities. More students than ever before are choosing to major in computer science and an even larger number of students are taking computer science courses in recognition of the fact that knowledge of computing is essential in the modern world. That interest, of course, is exciting. At the same time, most computer science departments are overwhelmed by the growing demand from students. In this talk, I draw on my own experience as a young faculty member in the similarly challenging 1980s to offer advice on how to make the most of the opportunities that are intrinsic to teaching in such a vibrant field.	Teaching Computer Science in a Time of Opportunities and Challenges	NA	2018
Elizabeth Hawthorne	NA	Session details: Paper Session: Computational Thinking #1	NA	2018
Fredrik Heintz:Linda Mannila	The Swedish government has recently introduced digital competence including programming in the Swedish K-9 curriculum starting no later than fall 2018. This means that 100 000 teachers need to learn programming and digital competence in less than a year. In this paper we report on our experience working with professional teacher training in Sweden's fifth largest city. The city has about 150 000 inhabitants and about 50 schools with about 14 000 students in primary education. The project has been carried out in close cooperation with the municipality. The work started in the fall of 2014 with a pilot study with 10 teachers in different subjects that was carried out during spring 2015. The pilot study was successful as the teachers were able to introduce activities related to programming and computational thinking in their subjects after only two half day workshops. The next step was to scale this up to include all the schools in the city. As expected, this turned out to be a larger challenge. More than 70 teachers were involved in the second part of the project. Some of the lessons learned are that it is quite easy to provide teacher training, but harder to get teachers to actually change their teaching and even more challenging to get teachers to help their colleagues introduce programming or computational thinking in their teaching. Based on our experience we draw some general conclusions and make suggestions for how to scale up the teaching of programming and computational thinking to all.	Computational Thinking for All: An Experience Report on Scaling up Teaching Computational Thinking to All Students in a Major City in Sweden	NA:NA	2018
Bushra Chowdhury:Austin Cory Bart:Dennis Kafura	Collaborative learning can help reduce the anxiety level of learners, improve understanding and thus create a positive atmosphere for learning. This study analyzes students' collaborative learning experiences within small interdisciplinary "cohorts" while learning computational thinking in a university-level class. The cohort allows students from different disciplines to contribute diverse perspectives, socially interact with each other and in turn create situations where two or more students learn together. This study uses both qualitative and quantitative means to explore students' collaborative learning experiences. Ethnographically-informed qualitative data using Stahl's collaborative framework is analyzed. The analysis revealed that most students found the cohort model to be valuable in learning computational thinking by allowing them to ask about and explain problems, especially with students from different disciplines who perceive and explain a problem differently. Quantitative data from a multi-term survey complements and confirms the findings from the qualitative data. Our study helps to inform those teaching foundational computing concepts to a diverse audience of learners.	Analysis of Collaborative Learning in a Computational Thinking Class	NA:NA:NA	2018
Jakita O. Thomas	Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that the solution solves the problem, and evaluating the solution based on some set of criteria. Supporting Computational Algorithmic Thinking (SCAT) is both a longitudinal between-subjects exploratory research project and a free enrichment program supporting and guiding African-American middle school girls over three years as they iteratively design a set of games for social change. This paper explores the CAT Capability Flow, which begins to describe the processes and sub-skills and capabilities involve in CAT. To do this, we engage in an approach which results in an initial flowchart that depicts the processes students are engaging in as an iteratively-refined articulation of the steps involved in computational algorithmic thinking.	The Computational Algorithmic Thinking (CAT) Capability Flow: An Approach to Articulating CAT Capabilities over Time in African-American Middle-school Girls	NA	2018
Dee A.B. Weikle	NA	Session details: Paper Session: Creativity	NA	2018
Markeya S. Peteranetz:Shiyuan Wang:Duane F. Shell:Abraham E. Flanigan:Leen-Kiat Soh	The purpose of the present study was to investigate how the inclusion of computational creativity exercises (CCEs) merging computational and creative thinking in undergraduate computer science (CS) courses affected students' course grades, learning of core CS knowledge, self-efficacy, and creative competency. CCEs were done in lower- and upper-division CS courses at a single university. Students in CCE implementation courses were compared to students in the same courses in different semesters. Propensity score matching was used to create comparable groups (control and implementation) based on students' GPA, motivation, and engagement. Results showed that implementing CCEs in undergraduate CS courses enhanced grades, learning of core CS knowledge, and self-efficacy for creatively applying CS knowledge. However, CCEs did not impact creative competency. The effect of the CCEs was consistent across upper- and lower-division courses for all outcomes. Unlike previous studies that only established the support for CCEs, such as positive dosage effects, the results of this study indicate that CCEs have a causal effect on students' achievement, learning, and self-efficacy, and this effect is independent of general academic achievement, motivation, and engagement. These findings establish the CCEs as a validated, evidence-based instructional method.	Examining the Impact of Computational Creativity Exercises on College Computer Science Students' Learning, Achievement, Self-Efficacy, and Creativity	NA:NA:NA:NA:NA	2018
Emmanuel Schanzer:Shriram Krishnamurthi:Kathi Fisler	Game programming projects are concrete and motivational for students, especially when used to teach more abstract concepts such as algebra. These projects must have open-ended elements to allow for creativity, but too much freedom makes it hard to reach specific learning outcomes. How many degrees of freedom do students need to make a game feel like one they genuinely designed? What kinds of personalization do they undertake of their games? And how do these factors correlate with their prior game-playing experience or with their identified gender? This paper studies these questions in the concrete setting of the Bootstrap:Algebra curriculum. In this curriculum, students are only given four parameters they can customize and only a few minutes in which to do so. Our study shows that despite this very limited personalization, students still feel a strong sense of ownership, originality, and pride in their creations. We also find that females find videogame creation just as satisfying as males, which contradicts some prior research but may also reflect the nature of games created in this curriculum and the opportunities it offers for self-expression.	Creativity, Customization, and Ownership: Game Design in Bootstrap: Algebra	NA:NA:NA	2018
Dianna Xu:Ursula Wolz:Deepak Kumar:Ira Greenburg	This paper reports on the results of a multi-year project in which we identified essential pedagogy and curriculum for teaching introductory computing courses focused on Creative Computation using Processing. The curriculum aligns with a traditional 'CS1' approach as well as 'AP CS A', and goes well beyond "CS Principles" standards to teach foundations of computer science and programming. We addressed the bridge between high school and entry-level college curriculum in computer science (American freshman high school to freshman college) and demonstrated how algorithmic art provides a powerful vehicle for diverse student populations within a broad range of pedagogical frameworks ranging from traditional structured classrooms to inquiry-based student-driven project labs. A secondary result is that instructors require long-term engagement with mentors to extend their own knowledge of computing, visual arts and appropriate pedagogy.	Updating Introductory Computer Science with Creative Computation	NA:NA:NA:NA	2018
Sotirios Kentros	NA	Session details: Paper Session: Cybersecurity #2	NA	2018
Jan Vykopal:Radek Ošlejšek:Karolína Burská:Kristína Zákopčanová	Cyber defence exercises are intensive, hands-on learning events for teams of professionals who gain or develop their skills to successfully prevent and respond to cyber attacks. The exercises mimic the real-life, routine operation of an organization which is being attacked by an unknown offender. Teams of learners receive very limited immediate feedback from the instructors during the exercise; they can usually see only a scoreboard showing the aggregated gain or loss of points for particular tasks. An in-depth analysis of learners' actions requires considerable human effort, which results in days or weeks of delay. The intensive experience is thus not followed by proper feedback facilitating actual learning, and this diminishes the effect of the exercise. In this initial work, we investigate how to provide valuable feedback to learners right after the exercise without any unnecessary delay. Based on the scoring system of a cyber defence exercise, we have developed a new feedback tool that presents an interactive, personalized timeline of exercise events. We deployed this tool during an international exercise, where we monitored participants' interactions and gathered their reflections. The results show that learners did use the new tool and rated it positively. Since this new feature is not bound to a particular defence exercise, it can be applied to all exercises that employ scoring based on the evaluation of individual exercise objectives. As a result, it enables the learner to immediately reflect on the experience gained.	Timely Feedback in Unstructured Cybersecurity Exercises	NA:NA:NA:NA	2018
Muhammad Rizwan Asghar:Andrew Luxton-Reilly	Teaching cyber security techniques can be challenging due to the complexity associated with building secure systems. The major issue is these systems could easily be broken if proper protection techniques are not employed. This requires students to understand the offensive approaches that can be used to breach security in order to better understand how to properly defend against cyber attacks. We present a novel approach to teaching cyber security in a graduate course using an innovative assessment task that engages students in both software obfuscation and reverse engineering of obfuscated code. Students involved in the activities gain an appreciation of the challenges in defending against attacks. Our results demonstrate a positive change in the students' perception during the learning process.	Teaching Cyber Security Using Competitive Software Obfuscation and Reverse Engineering Activities	NA:NA	2018
Younghee Park:Hongxin Hu:Xiaohong Yuan:Hongda Li	Software-Defined Networking (SDN) represents a major shift from ossified hardware-based networks to programmable software-based networks. It introduces significant granularity, visibility, and flexibility into networking, but at the same time brings new security challenges. Although the research community is making progress in addressing both the opportunities in SDN and the accompanying security challenges, very few educational materials have been designed to incorporate the latest research results and engage students in learning about SDN security. In this paper, we presents our newly designed SDN security education materials, which can be used to meet the ever-increasing demand for high quality cybersecurity professionals with expertise in SDN security. The designed security education materials incorporate the latest research results in SDN security and are integrated into CloudLab, an open cloud platform, for effective hands-on learning. Through a user study, we demonstrate that students have a better understanding of SDN security after participating in these well-designed CloudLab-based security labs, and they also acquired strong research interests in SDN security.	Enhancing Security Education Through Designing SDN Security Labs in CloudLab	NA:NA:NA:NA	2018
Meghan Allen	NA	Session details: Paper Session: Diverse Topics in CS Ed	NA	2018
Amanpreet Kapoor:Christina Gardner-McCune	Understanding professional goals and identities of undergraduate Computer Science (CS) students is critical for curriculum decisions, workforce development, and retention programs. This paper aims to explore the ways in which undergraduate CS students describe their professional goals and identities, and gauge how these goals and identities vary across gender and academic standing. This paper is part of a larger study aimed at understanding how students form their professional goals and identities. In the study presented in this paper, we surveyed 109 CS undergraduate students and interviewed 14 CS undergraduate students across gender and academic standing. The data were qualitatively analyzed using inductive coding and thematic analysis. Our findings indicate that most students identify themselves professionally as software development professionals, various specialized CS professionals, and by their majors. We also found that both male and female students were interested in becoming entrepreneurs, and females were more likely to have professional goals to move into management. This paper contributes to the fields' growing knowledge of undergraduate students' professional goals and professional identities. This knowledge can help CS departments to better align their degree programs, curriculum, and specialization tracks with student goals. Such an alignment has the potential to increase retention in the major as well as prepare students to be competitive in the workforce.	Understanding Professional Identities and Goals of Computer Science Undergraduate Students	NA:NA	2018
Kristen Shinohara:Saba Kawas:Andrew J. Ko:Richard E. Ladner	Industry demand for software developers with knowledge of accessibility has increased substantially in recent years. However, there is little knowledge about the prevalence of higher education teaching about accessibility or faculty's perceived barriers to teaching accessibility. To address this gap, we surveyed 14,176 computing and information science faculty in the United States. We received a representative sample of at least one response from 318 of the 352 institutions we surveyed, totaling 1,857 responses. We found that 175 institutions (50%) had at least one instructor teaching accessibility and that no fewer than 2.5% of faculty overall teach accessibility. Faculty that teach accessibility are twice as likely to be female, to have expertise in HCI and software engineering, and to know people with disabilities. The most critical barriers to teaching accessibility that faculty reported were the absence of clear and discipline-specific accessibility learning objectives and the lack of faculty knowledge about accessibility. Faculty desired resources that were specific to the areas of computing in which they teach rather than general accessibility resources and guidelines.	Who Teaches Accessibility?: A Survey of U.S. Computing Faculty	NA:NA:NA:NA	2018
Lori Postner:Heidi J.C. Ellis:Gregory W. Hislop	Studies have shown that Humanitarian Free and Open Source Software (HFOSS) projects provide a rich learning environment for students, allowing them to gain a range of both technical and professional skills. Although there have been a number of studies on student attitudes toward learning within HFOSS projects, little has been documented about instructors' experiences supporting their students in the classroom. This paper examines survey results from 26 faculty members who participated in an NSF-funded Professors' Open Source Software Experience workshop with the goal of incorporating HFOSS into their curriculum. The survey was designed to identify barriers to using HFOSS in the classroom, to understand the type of classes where instructors incorporated HFOSS, the successes attained and challenges faced by instructors, and to understand instructors' future plans. The data gathered was used to enhance semi-structured interviews that are currently being analyzed. This paper focuses on the hurdles reported by faculty members, the cross-section of uses of HFOSS in the classroom as well as factors that may influence one's ability to integrate HFOSS into the curriculum. The results of the survey demonstrate that faculty have successfully incorporated HFOSS into a wide range of courses across all four years of the curriculum with both large and small classes. The major hurdles are time to prepare materials for one's course as well as finding time within an existing course to integrate HFOSS material.	A Survey of Instructors' Experiences Supporting StudentLearning using HFOSS Projects	NA:NA:NA	2018
Brandon Myers	NA	Session details: Paper Session: Pedagogy #2	NA	2018
Nuno Gil Fonseca:Luís Macedo:António José Mendes	Several studies showed that teacher's support is essential to the students learning process. Often it is difficult for teachers to follow all their student's evolution and make timely interventions when needed. Often, in the same class, there are students with substantially different performance levels, and many times a teacher intervention is cructial to help lower performing students. To help the teacher identify these students, we propose the use of CodeInsights, a tool able to capture autonomously and unobtrusively real-time information about the students' performance based on snapshots of their code. The information available can be used by the teachers to support the adoption of the necessary measures to address each student needs or difficulties in a more grounded manner. We present the system and some results of a field test involving students from an introductory course on PHP programming.	Supporting Differentiated Instruction in Programming Courses through Permanent Progress Monitoring	NA:NA:NA	2018
Nicole Herbert	Many undergraduate ICT degrees culminate with students completing a team-based capstone project under academic supervision. Capstone projects provided by external clients facilitate authentic experiential learning, but sourcing external projects can be difficult, and there can be issues managing industry clients within an academic setting. Capstone projects also provide an opportunity for professional skill development to increase student employability, though to fully assess generic learning outcomes requires evaluating more than the final product created for the client. Teamwork can have a positive impact on student learning, however it is challenging to determine a process of assessment that enables formative and summative assessment that does not require an academic to immerse themselves within a team to evaluate an individual's contribution. Team members are often the best source of meaningful information, and self and peer assessment is commonly used as part of an assessment scheme, but to ensure the objectivity and integrity of the final grade it is necessary to correlate data from a variety of sources. This experience report reflects on a team-based capstone project approach that has been offered for 17 years and proposes some effective strategies for coordinating the more challenging aspects of capstone projects.	Reflections on 17 years of ICT Capstone Project Coordination: Effective Strategies for Managing Clients, Teams and Assessment	NA	2018
Paul Gestwicki	This paper describes the design, evolution, and evaluation of a second-year undergraduate course on professional software development practices. The course design arose from two properties of a curriculum revision: the removal of redundancy across Discrete Mathematics, Data Structures, and Algorithms coursework and the identification of desired skills for students entering the upper-division courses. A research-informed design for the course incorporates code quality, version control, teamwork, user-centered design, risk management, design thinking, and reflective practice, presented in keeping with the values of agile software development. We describe the evolution of the course over its six years of implementation, including a transition from a Java-specific textbook to a more generic book about code quality and the transition from a six-week to a nine-week project. The course has become a linchpin for mid-major assessment of students' software development skills, and we discuss the strengths, weaknesses, and results of our assessment strategy. We provide a reflection of the role this course has had within our program and advice for those who might wish to adopt or adapt this design.	Design and Evaluation of an Undergraduate Course on Software Development Practices	NA	2018
Suzanne Matthews	NA	Session details: Paper Session: Science Education	NA	2018
Bjørn Fjukstad:Nina Angelvik:Maria Wulff Hauglann:Joachim Sveia Knutsen:Morten Grønnesby:Hedinn Gunhildrud:Lars Ailo Bongo	We describe our citizen science approach and technologies designed to introduce students in upper secondary schools to computational thinking and engineering. Using an Arduino microcontroller and low-cost sensors we have developed the air:bit, a programmable sensor kit that students build and program to collect air quality data. In our course, students develop their own research questions regarding air quality before using their own air quality sensor kit to answer their respective questions. This project combines electronics and coding with natural sciences providing a truly interdisciplinary course. We have open-sourced the teaching materials including the building and coding instructions. In addition, students can contribute to our web-based platform for storing, visualizing, and exploring the collected air quality data. It also provides an open API for anyone to download air quality data collected by the students. Through the website, available at airbit.uit.no, students are motivated to contribute air quality data open to the public. We describe lessons learned from our pilot project in a Norwegian upper secondary school and how we are deploying it in 10 schools across Northern Norway. In the pilot, students successfully built and coded the air:bits, and after two months of data collection they could correctly describe local patterns in the air quality. We believe that by combining electronics and coding with the natural sciences we motivate students to engage in all scientific disciplines.	Low-Cost Programmable Air Quality Sensor Kits in Science Education	NA:NA:NA:NA:NA:NA:NA	2018
Tanya Berger-Wolf:Boris Igic:Cynthia Taylor:Robert Sloan:Rachel Poretsky	We present the curriculum and evaluation of a pilot Biology-themed CS1 course offering at a large public university. Inspired by Harvey Mudd's CS 5 Green, we adapt CS1 + Bio to fit the needs of our student body, which is much more typical for those US institutions that produce the bulk of the nation's CS undergraduate degrees. This course was team-taught by a computer science professor and a biology professor, and combined typical CS1 topics with relevant biology content. Our initial offering attracted students who would not otherwise have taken CS1, and was the only one of our three CS1 courses where more students reported planning to major in CS after the course than before it.	A Biology-themed Introductory CS Course at a Large, Diverse Public University	NA:NA:NA:NA:NA	2018
Anna Ritz	Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.	Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts	NA	2018
Cliff Shaffer	NA	Session details: Paper Session: Visualization	NA	2018
Ryosuke Ishizue:Kazunori Sakamoto:Hironori Washizaki:Yoshiaki Fukazawa	Many researchers have proposed program visualization tools for memory management because this is a challenging concept for novice programmers. For example, SeeC and PythonTutor (PT) are state-of-the-art tools for C languages. However, three problems hinder the use of these and other tools: capability (P1), installability (P2), and usability (P3). (P1) Tools do not fully support dynamic memory allocation or File Input / Output (I/O) and Standard Input. (P2) Novice programmers often have difficulty installing SeeC due to its dependence on Clang and setting up an offline environment that uses PT. (P3) Revisualization of the modified source code in SeeC requires several steps. To alleviate these issues, we propose a new visualization tool called PlayVisualizerC (PVC). PVC, which is designed for novice C language programmers to provide solutions (S1-3) for P1-3. S1 offers complete support for dynamic memory allocation, standard I/O, and file I/O. S2 involves installation in a user web browser and its server program is initiated by executing a jar file. S3 reduces the steps required for revisualization. To evaluate PVC, we conducted an experiment and questionnaire involving 30 students. Students using PVC solved a set of four programming tasks on average 1.7 times faster and with 19% more correct answers than those using a current state-of-the-art visualization tool.	PVC: Visualizing C Programs on Web Browsers for Novices	NA:NA:NA:NA	2018
Jinyue Xia:David C. Wilson	The use of online video in learning environments is prevalent -- serving in a variety of roles, such as multimedia textbook, video lecture, or medium for documenting student coursework. For instructors who employ video as a learning material, it is becoming increasingly important to gain a deeper understanding of the fit of video content across student cohorts, as well as the impact on student engagement, learning, and success. In order to better understand instructor interests and needs in this regard, we developed a learning analytics visualization tool that links data on student viewing and video interactions with student demographics and performance measures. Instructors can use the tool to generate and compare correlated heatmap visualizations representing student engagement across segments of the video. This paper describes an initial user study conducted with instructors in an HCI course context to understand how this kind of feedback can inform their use of video in the classroom. Results show that instructors find such feedback very useful across a variety of use cases.	Instructor Perspectives on Comparative Heatmap Visualizations of Student Engagement with Lecture Video	NA:NA	2018
Kalle Ilves:Juho Leinonen:Arto Hellas	In this article, we study how visualizations could be used to support students' self-regulation in online learning. We conducted a randomized controlled trial with three groups: one control group without visualization, one treatment group with textual visualization, and one treatment with graphical visualization with information on peers' average achievement. We studied how different visualizations affect students' academic performance and behavior. We focused on four factors; starting, scheduling, earliness and exercise points, where the first three are related to time management and self-regulation. The last factor measures course performance in terms of completed exercises. Our results suggest that the lowest performing students can benefit from a visualization, whereas the highest performing students are not affected by the presence or absence of a visualization. We also found that visualizations that do not provide the means to compare your own performance with others may even be harmful to performance oriented students.	Supporting Self-Regulated Learning with Visualizations in Online Learning Environments	NA:NA:NA	2018
Liz Hutter:Halcyon M. Lawrence:Melinda McDaniel:Marguerite Murrell	NA	Fostering Meaningful Collaboration in an Interdisciplinary Capstone Course	NA:NA:NA:NA	2018
Keith O'Hara:Sven Anderson:David Musicant:Amber Stubbs:Thomas Way	This panel will include experience reports from five computer science faculty members who have team-taught courses with professors from outside the sciences. Specifically, we will discuss lessons learned and best practices with collaborating with faculty from the arts and humanities. Courses that look outward have the potential to broaden participation and promote computing's role in the broader world beyond software engineering concerns. The panelists will highlight how to: find a topic, find a collaborator(s), design the course, maintain rigor in both disciplines, target the right audience, assess how well it worked, and do it more than once.	Team-Teaching with Colleagues in the Arts and Humanities	NA:NA:NA:NA:NA	2018
Cheri Fancsali:Linda Tigani:Paulina Toro Isaza:Rachel Cole:Wendy Martin	The objective of this session is to increase evaluator capacity to study CS education initiatives and to share knowledge and resources with the CS education research community. We plan to use the session to share our own experience as evaluators of the NYC CS4All initiative, and to brainstorm effective strategies and approaches to address the challenges inherent in evaluating such efforts. In the session, we will pay particular attention to identifying and developing reliable and valid measures of teacher, student and district outcomes.	SIGCSE Special Session: Evaluating CS4All Initiatives---Challenges and Opportunities	NA:NA:NA:NA:NA	2018
Colleen M. Lewis:Leslie Aaronson:Eric Allatta:Zachary Dodds:Jeffrey Forbes:Kyla McMullen:Mehran Sahami	SIGCSE is packed with teaching insights and inspiration. However, we get these insights and inspiration from hearing our colleagues talk about their teaching. Why not just watch them teach? This session does exactly that. Each of six exceptional educators will be given ten minutes to teach the audience something. After this, the moderator will draw the attention of the audience to particular pedagogical moves that the instruction included. Attendees can see a new approach to introducing a topic or a new pedagogical move. No matter what, we expect attendees will be taking ideas from this session directly back to their teaching! The format is based upon a practice in chemistry of sharing "Five Slides About," which introduce a topic in a novel or concise way (https://www.ionicviper.org/types/five_slides_about). Resources from each of the presenters will be shared on the website CSTeachingTips.org.	Five Slides About: Abstraction, Arrays, Uncomputability, Networks, Digital Portfolios, and the CS Principles Explore Performance Task	NA:NA:NA:NA:NA:NA:NA	2018
Jessica Schmidt	NA	Session details: SRC Session	NA	2018
Gabrielle I. Zahuantitla:Aryanna Holder	Currently, there is a push for integrating computer science education and computational thinking into the classroom. For example, major local and national organizations such as CS4ALL: NYC and Code.org aim to expose all students, including typically underrepresented groups, to computer science education nurturing students' intrinsic motivation. Furthermore, current research indicates that first-exposure to computer science is an important deciding factor as to whether students are open to computer science in future endeavors. Being one of the most diverse campuses in the nation, and a commuter campus, The State University of New York (SUNY) Old Westbury provides a unique opportunity to pilot how one might go about creating a motivating first exposure to computer science. Through a four point student-led strategy, we explore student pre-conceived attitudes towards computer science and programming to better understand what strategies might increase CS engagement. In order to do this, we host workshops revolving around creative computer science activities such as 3D game design and multimedia art projects. During these workshops, we collect pre and post questionnaires and use their data to gain insight into the Old Westbury student body's notions of computer science. Initial analyzed pre-survey data shows that 70% of students thought Computer Science was difficult. However, post-survey data shows that, after the experience, approximately 90% of students want to take additional workshops involving Computer Science.	A Four Point Student-Led Strategy for Attracting Diverse Small College Commuter Campus Students to Computer Science: (Abstract Only)	NA:NA	2018
Pedro Valdivia	Many software engineering students make the transition from an academic setting to professional software development careers. Due to its popularity in the software industry, it is important for students to learn software testing skills and adhere to professional practices to prepare them for their transition and be successful. Software testing is an important skill for students but there are many different approaches that enables students to gain this skill. We created a unique approach that enables students to learn software testing with a unique mentality and developed a tool to make educational assessments and feedback quick and scalable. Our approach is implemented within an undergraduate classroom where students are separated into two groups. Each group develops software tests through Test-Driven Development (TDD) with a different mentality. With this approach, we hope to see an improvement in the quality of software that students produce.	A Mental Approach to Software Testing: (Abstract Only)	NA	2018
William Zamora	Software Engineering courses are essential for undergraduates to achieve a smooth transition from higher education to a career. However, many of these courses encounter complications that forbid them from meeting their goals such as: Real products and customers, project duration, software sophistication and more. At Chico State, we have implemented the Tech Startup Model in which the Software Engineering students partner with entrepreneurship students to allow for more collaboration and the creation of a customer-employee relation to address some of these issues. This model utilizes both Lean Startup as well as Agile Development to continuously test a student's ability to adapt to the customer's needs. The data accumulated from the past couple of semesters allowed us to analyze student behavior when exposed to the Tech Startup Model as opposed to other methods tested from previous semesters.	Software Engineering Education: (Abstract Only)	NA	2018
Nina Angelvik	We have developed an applied computer science project to introduce students in upper secondary schools to computer science and engineering. In the project, students build and code their own air quality sensor kits before investigating a research question by analyzing their collected data. An important part of the analysis is to investigate the air quality data in context of other data sources, such as data from other sensor kits or climate data. The task of curating such datasets are too complex for such an introductory project and it therefore requires a specialized service. In this poster we present the design and implementation of an air pollution data analysis platform that stores air quality measurements collected by students, combines it with open environmental data, and provides students with an open interface to analyze their data. During spring 2018, ten school classes from Northern Norway are going to use the platform, online at airbit.uit.no, to study air quality patterns across Northern Norway. We also provide the source code for the platform at the same address.	Air Pollution Data Analysis Platform for Computer Science Education Projects: (Abstract Only)	NA	2018
Blayde Dill	With the integrated use of technology in daily activities, the need for more end-users who can program solutions in their domain of expertise is increasing. There is also growing interest to introduce children to coding activities that are engaging and appropriate for their experience level. Additional resources are needed that initiate and teach computer science in a way that incorporates hardware components to children and first-learners. This poster introduces a new block-based programming environment (called CodePlayground) built from Google's Blockly Developer Tools. The Blockly library injects an editor into an HTML file that represents coding concepts as interlocking blocks, and then outputs the blocks as syntactically correct code. CodePlayground was designed to be compatible with the Adafruit Circuit Playground, which was released as an all-in-one low cost device that can be used for education. CodePlayground allows teachers to utilize the Circuit Playground as an educational device that includes both hardware and software elements. The Circuit Playground uses the firmata provided by Adafruit to communicate with Python code generated by CodePlayground. Blockly Developer Tools was used to create the frame for the language and Atom was used to insert the specialized JavaScript for code generation. After the language was complete, 90 sample programs were created and evaluated to demonstrate the ability of CodePlayground to serve as a programming environment for first learners.	Developing a Blocked Based Language for the Adafruit Circuit Playground: (Abstract Only)	NA	2018
Eric Tilley	NADER (NEXRAD Algorithm Development Environment) is a desktop-based programming environment that allows users to build algorithms for the analysis of NEXRAD level-II Doppler weather radar data. NEXRAD level-II data provides a high-resolution 3D mapping of precipitation intensity and wind speeds around a radar site. These datasets are available from NCEI (National Centers for Environmental Information, a division of the National Oceanic and Atmospheric Administration) both from archives and in real-time, providing nearly endless opportunities for automated algorithmic analysis of weather features. The language provided by NADER is block-based and is built on the powerful Google Blockly platform. In addition to blocks for logic, math, and control flow functions, NADER also presents the user with a succinct set of blocks providing abstractions for common radar data structures. NADER also includes a visualization tool for level-II data, allowing users to clearly see exactly what data is passed into their algorithms and exactly what data is output. With NADER, users can develop a huge variety of algorithms' for example, an algorithm for hail detection, an algorithm for tracking snowfall, or even an algorithm for estimating tornado damage. NADER strives to accomplish two main objectives. One objective is to provide beginning programmers with a straightforward programming environment with an intriguing, real-life application. The other objective is to provide meteorology experts with a rapid-feedback prototyping environment for developing new algorithms.	Weather Radar Algorithm Development using Google Blockly: (Abstract Only)	NA	2018
Ayaan M. Kazerouni	Assessment of software tends to focus on postmortem evaluation of metrics like correctness, mergeability, and code coverage. This is evidenced in the current practices of continuous integration and deployment that focus on software's ability to pass unit tests before it can be merged into a deployment pipeline. However, little attention or tooling is given to the assessment of the software development process itself. Good process becomes both more challenging and more critical as software complexity increases. Real-time evaluation and feedback about a software developer's skills, such as incremental development, testing, and time management, could greatly increase productivity and improve the ability to write tested andcorrect code. My work focuses on the collection and analysis of fine-grained programming process data to help quantitatively model the programming process in terms of these metrics. I report on my research problem, presenting past work involving the collection and analysis of IDE event data from junior level students working on large and complex projects. The goal is to quantify the programming process in terms of incremental development and procrastination. I also present a long-term vision for my research and present work planned in the short term as a step toward that vision.	Toward Continuous Assessment of the Programming Process: (Abstract Only)	NA	2018
Ramin Ayanzadeh	Natural Language Processing and Semantic Web include several NP complete/hard problems that are intractable for classical computing machines. Even though distributed computing has provided remarkable advances (more precisely in dealing with big data), non-decomposable NP problems are still intractable in many real-world applications. And, from quantum computing perspective, solving complex problems with universal quantum gates requires developing of quantum algorithms. Considering commercializing quantum annealing machines by D-Wave, achieving global optimum for discrete optimization problems has been realized. In this study, a novel approach has been introduced to convert symbolic AI problems into quadratic unconstrained binary optimization (QUBO) form. More narrowly, this method represents classification of text documents (fragments) as optimizing a QUBO function. After embedding the train corpus into a QUBO function, D-Wave quantum annealer is used to classify new observations with finding the minimum energy level of the system.	Quantum Artificial Intelligence for Natural Language Processing Applications: (Abstract Only)	NA	2018
Blaine Billings:Xenia Mountrouidou	In October of 2016, we saw a Denial of Service (DoS) attack, the Mirai botnet, which made use of machines on a global scale, primarily targeting often-unprotected devices like webcams and routers. Due to the widespread use of the Internet of Things (IoT), and, specifically, webcams, the attack surface available to malicious actors has increased dramatically. Whereas some researchers tackle this problem by measuring and increasing the efficiency of existing Intrusion Detection Systems (IDSs) or by creating models for the purpose of characterizing cyber-attacks, such solutions do not investigate the problem of identifying when a system itself is behaving under incorrect operation. Through our research, we established a set of stochastic models that are able to accurately and efficiently model the correct operation and behavior of webcams. In order to verify the efficacy and validity of such models, we ran a multitude of normal-operation scenarios and cyber-attacks against webcams using an isolated network. Using the data from these emulated experiments, we correlated network traffic data and audit logs to verify the correctness and accuracy of our models.	Modelling Correct Operation of Webcams for Security Purposes: (Abstract Only)	NA:NA	2018
Jiaqi Wu:Terry Wen	Research has shown that the cheat sheet preparation process helps students with performance in exams. However, results have been inconclusive in determining the most effective guiding principles in creating and using cheat sheets. The traditional method of collecting and annotating cheat sheets is time consuming and exhaustive, and fails to capture students' preparation process. This work examines the development and impacts of a new web-based study preparation tool, Study Genie, supporting collaborative note creation, editing, sharing, and cheat sheet organization. This new educational technology enables big-data learning analytics, permitting quantitative data modeling on connecting formal and informal digital learning footprints. Study Genie also systematically automates cheat-sheet quality evaluation, which traditionally could only have been done qualitatively. A classroom study was conducted to measure the technology and learning effects in an introductory computer science programming course. Results suggest that actions associated with editing and organizing cheat sheets are positively correlated with exam performance, and that there is a significant difference between the activity of high-performing and low-performing students. Through these results, Study Genie presents itself as an opportunity for mass data collection, providing insight into the assembly process rather than just the finished product in cheat sheet creation.	Study Genie: An Intelligent and Collaborative Web-based Study Platform (Abstract Only)	NA:NA	2018
Luke Gusukuma	Automated feedback needs instructor input to be most effective. The increasing demand in computing education necessitates automated feedback systems for teaching programming. However, most current automated feedback tools do not incorporate instructor input. Great strides are being made with identification and code edit steps for automated student feedback, but tools for instructor crafted feedback are lacking in the field of computing. My research, currently targeted at novice programmers aims to close that gap with a hybrid approach of a teacher in the loop feedback system I facilitate writing instructor feedback delivered to students in an automated fashion to give meaningful, instruction enhancing feedback. I also evaluate these mechanisms in classrooms by measuring learning gains, student perception, and other metrics.	Automation for Instruction Enhancing Feedback: (Abstract Only)	NA	2018
Sherry Seibel	The gender disparity in technology related fields is well known and well documented. Only 18% of computer science undergraduates and 26% of computer science professionals are women. Despite numerous interventions in the past decade, there is still not gender parity in the undergraduate pipeline. However, 43% of post-baccalaureate "coding bootcamp" participants were women in 2016, indicating that this population may have different characteristics, attitudes, and mindsets than younger women and girls. In this project, the authors have investigated these changes in gender role perceptions that create barriers for girls but are seemingly resolved for some adult women. We hypothesize that older women come to view their own abilities as well as the impact of failure differently than girls and younger women. By recruiting a subject pool of women who have entered the computer science profession through traditional baccalaureate as well as non-traditional bootcamp pathways and posing reflective as well as current questions in semi-structured interviews we assess the changes in attitudes regarding the subjects' self-efficacy and mindset with respect to technical work. From these findings, we hope to identify triggers and possible interventions.	Social Motivators and Inhibitors for Women Entering Software Engineering through Coding Bootcamps vs. Computer Science Bachelor's Degrees: (Abstract Only)	NA	2018
Elisabeth Kimmich Mitchell:Toby Dragon	Collaborative learning can be beneficial for students, but its success is highly dependent on the characteristics of the students grouped together. Structuring group interactions enhances the effectiveness of collaborative learning [1] and therefore the structuring must be done appropriately. Creating successful groups is challenging for instructors, who generally do not have the ability to hand-select groups. We have created a system to dynamically recommend student groups for short-term collaboration. Instructors can request group suggestions based on various criteria related to students' performance on assessment materials. This system creates groups based on different pedagogical theories we find to be salient to group learning.	Intelligent Group Suggestions Based on Students' Conceptual Understanding: (Abstract Only)	NA:NA	2018
Caitlin Fanning	Students often encounter assembly language during the course of their education as part of learning about the low-level operation of computer systems. While there are many assembly languages ranging from simple to complex, x86-64 is widely used in introductory level computer systems courses. Unfortunately, students often have difficulty visualizing the execution of an x86-64 program. Interactions between instructions, relevant registers, and the effect that instructions have on memory are all concepts that students struggle to understand. While students can use GDB or other debuggers to help them step through the execution of a program, there are currently no x86-64 simulators aimed at introductory computing students.  Below C Level (BCL) is an x86-64 simulator aimed at helping novices overcome the barriers to learning this challenging language. BCL visualizes program state, specifically the program stack and register file in order to assist novice x86-64 programmers in tracing the execution of their programs.  One of the primary motives for the creation of BCL was the desire for a simulator with a simple and intuitive interface that enables the user to spend more time focusing on the task at hand rather than attempting to understand a complex program. BCL provides this simple interface, which allows users to view firsthand the effects their code has upon the program stack and registers.	Below C Level: A Simulator for Visualizing x86-64 (Abstract Only)	NA	2018
Duc Manh Doan:Clayton Gordon:Dong H. Jeong	Since data size is continuously increasing, analyzing large-scale data is considered as one of the major research challenges in computational data analysis. Although researchers have proposed numerous approaches, most of them still suffer from analyzing the data efficiently. To overcome the limitation, identifying the optimal number of features is critical for analyzing the data. In this paper, we introduce a newly designed feature selection technique, called Summit Selection, which boosts model performances by determining optimal features in noisy mixed data. First, testing all features is conducted to determine an initial base feature that satisfies a pre-defined criterion for maintaining the highest performance score. Then, a continuous evaluation is managed to build a model by successively adding or removing features based solely on the performance score tested with chosen computational models. To show the effectiveness of our proposed technique, a performance evaluation study was conducted to determine fraudulent activities in the UCSD Data Mining Contest 2009 Dataset. We compared our proposed technique with different feature extraction techniques such as PCA, ANOVA test, and Mutual Information (MI). Specifically, multiple machine learning techniques such as Decision Tree, Random Forest, and k-Nearest Neighbor (KNN) are tested with the feature extraction techniques to determine performance differences. As results, we found that our proposed technique showed about 8.78% performance improvement in detecting fraudulent activities. Since our technique can be extended to a cloud computing environment, we also performed a scalability testing with a known distributed cloud computing model (i.e., Apache Spark).	Summit Selection: Designing a Feature Selection Technique to Support Mixed Data Analysis (Abstract Only)	NA:NA:NA	2018
Don Kerrigan	Current tools required for teaching computer science at any level of education are expensive and require a dedicated lab. With an increasing desire for early computer science education, pairing with the expensive costs for computers, there is an increasing need for a solution. In this paper, I will investigate a mobile-based solution to more effectively, both educationally and financially, solve this problem. I will describe the system and how it could be used as an effective solution.	Creating a Classroom Programming Lab Using Android and Blockly: (Abstract Only)	NA	2018
Sydney Pugh:David Binkley	As the complexity of software systems grows, it becomes increasingly difficult for developers to be aware of all the dependencies that exist between a system's artifacts (e.g., its files or methods). Change impact analysis has been proposed as a technique to overcome this problem, as it suggests to a developer relevant source-code artifacts related to his/her changes. Association rule mining has shown promise for determining change impact by uncovering relevant patterns in a system's change history.  State-of-the-art change impact mining typically makes use of a history of tens of thousands of transactions. This makes a priori generation of all possible rules costly and thus led to the introduction of targeted association rule mining, which only generates rules for transactions relevant to a particular query. Because the set of relevant transactions is much smaller than the complete history, these algorithms are more efficient. However, they still require processing the history's complete set of relevant transactions.  Our work considers the dynamic selection of relevant transactions. It can be viewed as a further constrained version of targeted association rule mining, in which as few as a single relevant transaction might be considered when determining change impact. This initial look at dynamic algorithms empirically studies seven algorithm families. These are referred to as families because some are parameterized and thus give rise to multiple algorithms. Using over 20,000 queries from 19 systems, we empirically show that dynamic algorithms are viable, can be just as applicable as start-of-the-art algorithms, and even outperform them for certain queries.	Change Impact using Dynamic History Analysis: (Abstract Only)	NA:NA	2018
Pierce Stegman	In recent years, advances in electroencephalography (EEG) brain-computer interfaces (BCIs) have led to the development of applications that allow users to control prosthetic arms, fly drones, and play video games using only their thoughts. However, these use cases are occasionally restricted to laboratory environments. As BCI software is often designed to work with research-grade equipment, it can be inaccessible to the average consumer. This research poster describes why JavaScript-based BCIs would be more accessible to developers and students. We also discuss the current issues with JavaScript-based BCIs and introduce a new library, WebBCI, which is designed to take the initial step towards addressing these issues. Example BCI systems that can be created with WebBCI are described in this poster, along with the outputs of these systems given sample EEG data.	WebBCI: An Electroencephalography Toolkit Built on Modern Web Technologies (Abstract Only)	NA	2018
Caitlin Duncan	Across the world there has been a paradigm shift in school education, as many countries are incorporating Computer Science (CS), programming, and Computational Thinking (CT), into their K-12 curriculums for the first time. In 2018 these subjects will be introduced to the New Zealand (NZ) Digital Technologies curriculum under the subject of "Computational Thinking". Like the majority of countries who have introduced these topics, NZ faces challenges in preparing teachers, and in successfully implementing a curriculum which achieves its educational goals. To support this curriculum, we have been conducting studies in primary schools across NZ, trialing resources with teachers and students.  Building on a 2014 exploratory study on CS and programming in intermediate school, this project investigates the existing assumptions around CT education in K-12. It aims to address the specific questions: How do we teach CT concepts and approaches to primary aged students? If they learn CT, does it have the expected positive impacts on students learning? And, what other positive and negative impacts does this have? Throughout 2015 and 2016 a study was conducted with 18 primary school teachers from across NZ, who used CS Unplugged and educational programming languages in their classrooms. Teachers submitted feedback on these classes through an online form, and participated in semi-structured interviews. The feedback responses and interview transcripts were analysed using a thematic approach, which revealed many positive impacts on students general learning, minimal negative impacts, and observations of CT development.	Reported Development of Computational Thinking, Through Computer Science and Programming, and its Benefits for Primary School Students: (Abstract Only)	NA	2018
Rick Parker	My research investigates the role of practical experience on professionalization and confidence in students of software engineering during their university-to-work transition. Practical experience comes in many forms, including internships, capstone projects, and "year-in-industry" experiences. These hands-on opportunities place the learner into an authentic role using professional methods and tools to accomplish legitimate work. Improved understanding of the positive and negative influences of practical experience during the university-to-work transition may support ongoing discussions of the potential for integrating such experiences earlier in the learning pipeline. I apply a mixed-methods approach to studying the implementation of a computer science software engineering capstone course at an R1 research institution. My work integrates a case study of the artifacts produced during the capstone, qualitative interviews of student reflections about their experiences in the capstone, and a pilot run of a quantitative survey on professional identity and behaviors. Taken together, the three methods shed light on different roles that professional experience plays during the university-to-work transition.	Developing Software Engineers: A Study of Professionalization in a CS Senior Capstone (Abstract Only)	NA	2018
Megan Fowler:Tim Schwab	Computer science (CS) students often evaluate the behavior of the code they write by running it on specific inputs, studying the outputs, and then inductively reasoning to a more general understanding of the code. This is a good starting point in the student's career, but successful graduates must be able to reason deductively about the code they create and encounter. They must be able to reason about the code on all inputs, without running the code. This paper describes an online system named "BeginToReason" that is designed to introduce symbolic reasoning, and the results of its use. One hundred and fourteen students were asked to use BeginToReason after receiving no prior instructions on formal reasoning. Several weeks later, a question on their final exam tested their ability to utilize formal reasoning. Across all question variations presented to the students, they completed an average of at least 80% correctly indicating that the online tool is a useful tool for teaching formal reasoning. Subsequent analysis of the results indicates that student responses may have been influenced by the phrasing of the questions as well as their use of concrete numerical examples to solve the problem.	BeginToReason: An Introduction to Symbolic Reasoning (Abstract Only)	NA:NA	2018
Zhiyi Li	When students learn programming, the assignment feedback information from current automatic programming assessment systems, such as Web-CAT [1] is often negative, objective, and unfriendly. These feedback information can easily frustrate students to lose interest in programming related activities. The negative feedback information can have possible serious consequences to students. We work to improve current feedback mechanism in mindset perspective: encourage students by positive feedback with a group of fifteen progress indicators and possible reward. The fifteen progress indicators were designed and implemented based on students' sequential programming submissions. These fifteen indicators include seven general purpose indicators about various aspects when students construct solutions for assignments; eight other software testing indicators concentrate on students' progress when students self-checking their code [3]. We did statistical analysis for these fifteen indicators' suitability to a collection of programming assignments data set including 257 students. In order to validate fifteen progress indicators' effectiveness, we also apply a student performance model: Recent-Performance Finite Analysis model (R-PFA) [4] to the same programming assignment data set we used before. We calculate R-PFA model's prediction accuracy and apply learning curves analysis. In learning curve analysis, eight software test indicators demonstrate students gradually learn positively when they work on their assignment submissions. Based on progress indicators information, we plan to give students possible reward when they make progress. We will research on reward mechanism, reward format, and timing, etc. In this way, moves students to growth mindset [2] - belief that hard work and practices can improve their skills and capabilities.	Improve Feedback Mechanism in Programming Assessment Systems with Progress Indicators and Reward to Foster Students' Growth Mindset: (Abstract Only)	NA	2018
Adam Koehler	Students in introductory computer science courses (CS 1) typically receive little formal instruction in proper programming style. They may gain limited understanding of proper style by reading code samples, observing an instructor write code with proper style, or by receiving feedback on homework submissions. In our research, we evaluate the effectiveness of an alternative pedagogical approach in which students are provided brief instruction on proper style and are then asked to critique examples of improper style. This research answers three questions: First, when a student knows style will be graded, is proper style utilized? Second, does the student's ability to use proper style correlate with academic performance? Third, do our exercises increase the student's ability to employ proper style? We investigated the first two of these questions using data from three CS 1 courses with distinct forms of style assessment: 1) no style grading and no feedback; 2) automated style grading with feedback; and 3) hand-graded style with feedback. We investigated the third research question, by augmenting the first two course forms with our pedagogical approach. In all courses, a CS 1 style guide was distributed at the beginning of the term and similar lecture examples were used. We found that grading of style is necessary to motivate students, and that our approach shows some promise in increasing ability to use proper style.	Teaching Programming Style in CS 1 with Erroneous Examples: (Abstract Only)	NA	2018
Paul Cao	NA	Session details: Paper Session: Auto-graders	NA	2018
Georgiana Haldeman:Andrew Tjang:Monica Babeş-Vroman:Stephen Bartos:Jay Shah:Danielle Yucht:Thu D. Nguyen	Autograding systems are increasingly being deployed to meet the challenge of teaching programming at scale. We propose a methodology for extending autograders to provide meaningful feedback for incorrect programs. Our methodology starts with the instructor identifying the concepts and skills important to each programming assignment, designing the assignment, and designing a comprehensive test suite. Tests are then applied to code submissions to learn classes of common errors and produce classifiers to automatically categorize errors in future submissions. The instructor maps the errors to concepts and skills and writes hints to help students find their misconceptions and mistakes. We have applied the methodology to two assignments from our Introduction to Computer Science course. We used submissions from one semester of the class to build classifiers and write hints for observed common errors. We manually validated the automatic error categorization and potential usefulness of the hints using submissions from a second semester. We found that the hints given for erroneous submissions should be helpful for 96% or more of the cases. Based on these promising results, we have deployed our hints and are currently collecting submissions and feedback from students and instructors.	Providing Meaningful Feedback for Autograding of Programming Assignments	NA:NA:NA:NA:NA:NA:NA	2018
Stephan Krusche:Andreas Seitz	The increasing number of students in computer science courses leads to high efforts in manual assessment of exercises. Existing assessment systems are not designed for exercises with immediate feedback in large classes. In this paper, we present an AuTomated assEssment Management System for interactive learning. ArTEMiS assesses solutions to programming exercises automatically and provides instant feedback so that students can iteratively solve the exercise. It is open source and highly scalable based on version control, regression testing and continuous integration. ArTEMiS offers an online code editor with interactive exercise instructions, is programming language independent and applicable to a variety of computer science courses. By using it, students gain experiences in version control, dependency management and continuous integration. We used ArTEMiS in 3 university and 1 online courses and report about our experiences. We figured out that ArTEMiS is suitable for beginners, helps students to realize their progress and to gradually improve their solutions. It reduces the effort of instructors and enhances the learning experience of students.	ArTEMiS: An Automatic Assessment Management System for Interactive Learning	NA:NA	2018
Debzani Deb:Muztaba Fuad:James Etim:Clay Gloster	Classroom formative assessment augmented with timely and frequent feedback has become one of the most prominent teaching practices in education research. On the context of Computer Science (CS) courses that expose students to the functionality and dynamic aspects of various algorithms, traditionally, students are evaluated by exploring in-class paper-based exercises. In these exercises, they simulate the steps of an algorithm by drawing several instances of a diagram. This traditional approach is time consuming, is inherently difficult for students to express the dynamics of an algorithm, does not allow timely feedback, and restricts the number of exercises that students can practice and receive feedback on. Mobile Response System (MRS) is a software environment that facilitates in-class exercises and their real-time assessment using mobile devices and therefore focuses on addressing many of the above-mentioned problems. In this paper, we present results of eight semester-long studies using MRS in two of the required CS courses at Winston-Salem State University (WSSU). Our experimental evaluation shows the educational benefits of the proposed approach in terms of enhanced student retention of covered concepts, reduced failing rate, and increased student engagement and satisfaction.	MRS: Automated Assessment of Interactive Classroom Exercises	NA:NA:NA:NA	2018
Scott Turner	NA	Session details: Paper Session: Computational Thinking #2	NA	2018
Patricia Ordóñez Franco:Joseph Carroll-Miranda:María López Delgado:Eliud Gerena López:Grace Rodríguez Gómez	This paper intends to share both the experience of teachers and document the research of the design, implementation, and evaluation of a massive open online course (MOOC). The primary purpose of the MOOC was to do outreach and build community to interest teachers from any discipline in Puerto Rico to incorporate Computational Thinking (CT) into their curriculum and peak their interest in Computer Science Education (CSE). Additional objectives were to use CT as a way to build self-efficacy in high school teachers as integrators of this newly gained knowledge while investigators learned the state of CSE and technology integration in schools of Puerto Rico. The MOOC titled Integrating Computational Thinking into the Curriculum was the first free online Professional Development offered to educators in Puerto Rico and has served as the launching board for the Computer Science Teachers' Association (CSTA) in Puerto Rico. This paper will describe the course's development, content and pertinent activities as they relate to the established goals of the project. Finally, it will share some vignettes of the educators' experiences as well as the results of a survey that was administered to 164 participants of the MOOC in its second rendition and had a 32% response rate.	Incorporating Computational Thinking in the Classrooms of Puerto Rico: How a MOOC Served as an Outreach and Recruitment Tool for Computer Science Education	NA:NA:NA:NA:NA	2018
Russell Feldhausen:Joshua Levi Weese:Nathan H. Bean	This paper describes our experiences developing and teaching two different interventions focused on computational thinking and computer science at a yearly STEM outreach program hosted by a local school district. We describe the creation of our lesson plans, how we worked with experienced and pre-service teachers alike to deliver the lessons, and how we assessed the effectiveness of each intervention. We will discuss our successes and failures, and provide information on our future plans to incorporate more formalized education theory, pedagogy, and research methodology in future years to further this project. Based on our assessment results, we observed statistically significant gains in student self-efficacy with creating computer programs that perform a variety of operations. In addition, students reported a significantly higher understanding of how computer programming can be used in daily life. Our survey also highlighted differences in student self-efficacy between the two interventions, and we discuss possible sources for that result. We discuss observed results based on student groups with various backgrounds, previous STEM experiences, and socioeconomic status.	Increasing Student Self-Efficacy in Computational Thinking via STEM Outreach Programs	NA:NA:NA	2018
Youwen Ouyang:Katherine L. Hayden:Julie Remold	Many programs offer informal experiences in programming for select students who may qualify or whose parents pay fees for attending. Integrating computational thinking (CT) in the formal classroom setting provides equal opportunities to develop valuable problem-solving skills for all students. However, such integration poses challenges since teachers may have limited experiences in computing and may be pressured by time constraints due to the need to cover Common Core and Next Generation Science Standards (NGSS) as well as district specific initiatives. A 2-year intervention has been designed to target upper elementary level self-contained classrooms to increase teachers' knowledge and ability for integrating CT into science lessons. Twenty teachers from four school districts in Southern California participated in the first year of the project's professional development activities. These schools have varying levels of diversity and socioeconomic status of student populations. Instead of using popular drag-and-drop programming tools such as Scratch or Tynker, the first year of the project focused on key CT concepts and helped teachers connect these concepts with skills important for student success in science activities. This paper reports on the study of the project's impact on student learning of key CT concepts among students from project classrooms. The main elements of the professional development are also described.	Introducing Computational Thinking through Non-Programming Science Activities	NA:NA:NA	2018
Debra M. Duke	NA	Session details: Paper Session: Databases	NA	2018
Sriram Mohan	An increase in data tracking by organizations has created a need for systems that can handle a variety of data models at scale. NoSQL databases and Polyglot persistence - the industry's preferred solution to modern data problems is not covered in sufficient detail, if covered at all in the undergraduate curriculum. The paper reports on our experience of introducing NoSQL paradigms using a four-tiered learning model to undergraduate students over the last two years. We believe that our methodology exposes these new ideas in an approachable manner and would provide a great starting point for other programs interested in teaching modern database paradigms and distributed data modeling and processing.	Teaching NoSQL Databases to Undergraduate Students: A Novel Approach	NA	2018
Don Goelman:Suzanne W. Dietrich	The goal of the presented pedagogical tool is to engage all disciplines in learning how to understand their data and the relationships among the data, and subsequently representing those data in a relational database. The tool provides a visual introduction to important concepts in database design using Entity Relationship Diagrams as the primary visual design model, relating these same concepts to other models, such as UML diagrams and the crow's feet notation used in MySQL Workbench. Once the conceptual design is realized, the tool visually presents a methodology for mapping the various data concepts to a collection of relations. Relational databases are ubiquitous and conceptually simple for all majors to understand based on the analogy of a spreadsheet with named columns. A unique feature of this tool is a built-in formative self-assessment feature, called a checkpoint, to engage learners in reflecting on what they have learned. The checkpoint provides 20 questions, multiple-choice and true/false, over a given conceptual design to test the student's understanding of the design features and mapping to relations. Another novel capability of this tool is its ability for instructors to customize the example to their discipline, supporting the introduction of database topics within the context of the domain to which it is being applied. There are already customizations of the tool available in several disciplines, broadening the accessibility of data design to many majors. Experience has shown that the tool supports visual learners in all majors, including computer science.	A Visual Introduction to Conceptual Database Design for All	NA:NA	2018
Saturnino Garcia	Numerous studies have demonstrated the effectiveness of flipped classrooms (e.g. peer instruction) in computer science courses. Flipped classrooms rely on students having obtained first exposure to concepts through pre-class activities such as viewing videos or reading a textbook. Having engaged with the material before class, class time can be spent on more challenging activities with feedback from the instructor and classmates. These pre-class activities can be a challenge for students, who often do not have the skills necessary to critically engage with the assigned reading/viewing. As a result students often come to class under-prepared despite completing the pre-class activities. This paper presents the author's experience with adding guided practice worksheets to improve student preparedness in two courses: a CS1 course and a lower-division "Introduction to Computer Systems" course. These pre-class worksheets provided a structured set of learning objectives for students to focus on in their reading as well as exercises to test those objectives. Limited results indicate a high worksheet completion rate and a strong positive correlation between individual completion rates and final course grade. This paper also presents recommendations for those instructors wishing to adopt guided practice in their class.	Improving Classroom Preparedness Using Guided Practice	NA	2018
Michelle Craig	NA	Session details: Paper Session: Pedagogy #3	NA	2018
Giuseppe De Ruvo:Ewan Tempero:Andrew Luxton-Reilly:Nasser Giacaman	Design smells are design structures that indicate poor design quality. Many identified smells are difficult to teach as they require a degree of experience and judgement that novices, by definition, do not have. We have identified a design smell, which we call "unencapsulated collection", that is common in novice designs. It is simple to describe, allowing it to be objectively detected, and the refactoring steps needed to remove the smell are usually simple to illustrate. We give a description of the smell and present the results of an empirical study showing its prevalence. We outline the general steps for refactoring the smell, and illustrate it with a case study. The simplicity of this smell makes it a good candidate for teaching good design principles to novices.	Unencapsulated Collection: A Teachable Design Smell	NA:NA:NA:NA	2018
Luke Gusukuma:Austin Cory Bart:Dennis Kafura:Jeremy Ernst:Katherine Cennamo	This paper reports on a systematic method used to improve an existing unit of instruction. The method is distinctive in combining steps of instructional design with "knowledge components" from a cognitively-based framework of learning. Instructional design is used to develop assessment instruments that incorporate information about student misconceptions. The method uses the assessment instruments to evaluate student performance and learning gains, while statistical analysis evaluates the quality of the instruments themselves using measures of difficulty and discrimination. Fine-grain insight into possible improvements is enabled by the knowledge components implicated by the assessment. The method is illustrated and evaluated by applying it to a unit of instruction on collection-based iteration in a computational thinking class. Data gathered during this evaluation highlights a number of opportunities within the unit to refine the instruction.	Instructional Design + Knowledge Components: A Systematic Method for Refining Instruction	NA:NA:NA:NA:NA	2018
Benjamin Xie:Greg L. Nelson:Andrew J. Ko	We propose and evaluate a lightweight strategy for tracing code that can be efficiently taught to novice programmers, building off of recent findings on "sketching" when tracing. This strategy helps novices apply the syntactic and semantic knowledge they are learning by encouraging line-by-line tracing and providing an external representation of memory for them to update. To evaluate the effect of teaching this strategy, we conducted a block-randomized experiment with 24 novices enrolled in a university-level CS1 course. We spent only 5-10 minutes introducing the strategy to the experimental condition. We then asked both conditions to think-aloud as they predicted the output of short programs. Students using this strategy scored on average 15% higher than students in the control group for the tracing problems used the study (p<0.05). Qualitative analysis of think-aloud and interview data showed that tracing systematically (line-by-line and "sketching" intermediate values) led to better performance and that the strategy scaffolded and encouraged systematic tracing. Students who learned the strategy also scored on average 7% higher on the course midterm. These findings suggest that in <1 hour and without computer-based tools, we can improve CS1 students' tracing abilities by explicitly teaching a strategy.	An Explicit Strategy to Scaffold Novice Program Tracing	NA:NA:NA	2018
Briana Morrison	NA	Session details: Paper Session: Retention in CS	NA	2018
Markeya S. Peteranetz:Abraham E. Flanigan:Duane F. Shell:Leen-Kiat Soh	Retaining students in computer science (CS) courses and majors is a concern for many undergraduate CS programs in the United States. A large proportion of students who initially declare a major in CS do not complete a CS degree. The impact of future-oriented motivational constructs such as career aspirations and future connectedness on retention has received relatively little research attention, but these are potential contributors to students' retention in CS courses. The purpose of this study was to investigate how future-oriented motivation related to CS students' retention in CS courses over three consecutive semesters. Students enrolled in CS courses (four 100-level courses, one 200-level course, three 300-level courses, and five 400-level courses) completed survey measures of future-oriented motivation, and course enrollment data were collected for the three semesters. Logistic regression was used to determine whether motivation variables could distinguish between students who were enrolled in at least one CS course during a given semester and students who were not enrolled in any CS courses. Results indicate that, across all three semesters, career aspirations and knowledge of CS career paths were associated with a greater likelihood of continuing to take CS courses, and stronger future connectedness was associated with a lower likelihood of continuing to take CS courses. Implications for CS educators are discussed.	Future-Oriented Motivation and Retention in Computer Science	NA:NA:NA:NA	2018
Barbara Ericson:Tom McKlin	Rise Up 4 CS was created at Georgia Tech in the spring of 2013 to help African American students succeed in their Advanced Placement (AP) Computer Science A (CSA) high school course and on the exam. The AP CSA course is intended to be equivalent to a college level CS1 course. In the fall of 2014, Sisters Rise Up 4 CS was also created to help female students succeed. Rise Up (RU) and Sisters Rise Up (SRU) both offer remote and in-person help sessions led by undergraduate students, who serve as near-peer role models. The long-term goal of these projects is to attract more underrepresented students to computing careers by increasing their self-efficacy. Self-efficacy is the belief that one can succeed in a particular task or field. Thanks to generous support from Google, RU and SRU have been offered at several other colleges and universities as well. This paper summarizes the results from spring 2013 to summer 2016, reports on an alumni survey answered by 68 (32%) of the 211 alumni, and includes excerpts from five semi-structured interviews. The majority (63%) of the alumni survey respondents, who are in college, are majoring in computing. A similar percentage of the alumni who are still in high school intend to major in computing (62%). When asked about the programs' impact on their career choices and interest in computing, 61% of respondents indicated that the program increased their interest in computer science and 24% indicated that it changed their career plans to computing.	Helping Underrepresented Students Succeed in AP CSA and Beyond	NA:NA	2018
Rahman Tashakkori:Cindy Norris:Mary E. Searcy	In 1999, the National Science Foundation created the "Computer Science, Engineering, and Mathematics Scholarships" (CSEMS) program to provide funding for institutions to supply scholarships for academically talented and financially needy students to complete an associate, baccalaureate, or graduate degree in computer science, computer technology, engineering, engineering technology, or mathematics. In 2004, the program was renamed to "Scholarships for Science, Technology, Engineering, and Mathematics" (S-STEM) and modified to include students from physical and life sciences. Appalachian State University (ASU) has been the recipient of four CSEMS/S-STEM awards since 2001 and the scholarships have funded 161 students. Nearly all of these students have high levels of financial need and the majority are first generation college students. Overall, the program has retained 87 percent of these students; 12 percent of the scholars completed a bachelor's and then continued on to complete a master's degree or are in the process of doing so. The retention rate has increased as our program has improved. The retention rate of the current cohort of S-STEM students is 92.3 percent; 31 percent of the students in the current program completed a bachelor's degree and are pursuing or have completed a master's degree. These retention numbers are significantly higher than the 31 percent national average reported by the U.S. Department of Education. In addition, these retention numbers are higher than those found at our own institution for all Computer Science and Mathematics majors. This paper discusses the components of our successful program.	The Components of a Successful S-STEM Program: What Works at Appalachian State University	NA:NA:NA	2018
Elva J. Jones	NA	Session details: Paper Session: Robotics	NA	2018
Michael V. Doran:George W. Clark	The study of robotics is often an excellent recruitment motivation for students entering a computing curriculum. It is also often cited that Artificial Intelligence (AI) and related robotics is a critical area of future innovation in computing. However, there are a number of challenges to implementing a robotic curriculum at the university level. A few of those challenges include, lack of a uniform hardware platform, incongruity in the software used, and the missing significant deliverable artifacts by students at the end of a term to encourage learning and further interest. Educational robotic activities are often treated as advanced research topics with high associated costs that prohibit widespread integration into the curriculum. In this paper, we present the deployment of a multi-stage robotic platform that attempts to address these challenges and overcome the obstacles. We detail the evolution of the hardware from using a readily available LEGO Mindstorm base platform to next include the addition of an Arduino and Raspberry Pi. Likewise, we detail the transition from the basic LEGO Mindstorm software to the use of leJOS and PYTHON. At each stage, additional sensors and software libraries can likewise be added. Finally, we present an achievable academic goal for students to use the hardware and software platforms to develop a model autonomous vehicle with aspects of intelligent control, learning and adaptive behaviour. All levels of projects can be undertaken at the appropriate level of maturity for the students in the computing curriculum.	Enhancing Robotic Experiences throughout the Computing Curriculum	NA:NA	2018
Stephanie Ludi:Debra Bernstein:Karen Mutch-Jones	Making technology and computer science learning experiences accessible to students with disabilities is an important step in preparing them to enter the workforce of the future--one in which many jobs will require skills to solve problems with technology. This paper presents the tool and curricular enhancements developed to make the Exploring Computer Science Robotics unit accessible to students with visual impairments (VI). It describes the evolution of enhancements, based on formative evaluation studies, to increase support as VI students engaged in building and programming LEGO Mindstorms robots. Results describe the ways in which enhancements were iteratively designed in response to student engagement and confidence, as well as their emerging understanding of top-down and bottom-up processes in robotics design and programming.	Enhanced Robotics!: Improving Building and Programming Learning Experiences for Students with Visual Impairments	NA:NA:NA	2018
Farha N. Ali	With the increasing impact of the Internet of Things (IoT) in our everyday lives, it is imperative that a work force would be needed not only to develop the new IoT solutions but also to maintain the established IoT systems. In this paper, we discuss our experiences in curriculum development for three courses on the topic of IoT. This paper's main focus is course development for the latest offering (Spring 2017), and a discussion about what we changed from the previous two offerings. We discuss our weekly lecture plans for IoT topics' coverage along with programming assignments and other assessment activities. We also discuss our observation of students' interest levels, and how we used an incremental project development approach to keep students engaged and motivated. We conclude with our observations of what did and didn't worked for us. We also discuss what we missed because of time constraints but would try to include in our next offering.	Experiences in Teaching the Internet of Things Courses	NA	2018
Carlos Cabrera	NA	Session details: Paper Session: Security Education	NA	2018
Vandana P. Janeja:Abu Zaher Md Faridee:Aryya Gangopadhyay:Carolyn Seaman:Amy Everhart	The focus of this paper is an evaluation of our peer mentoring framework designed to encourage more students to seek cybersecurity career pathways through providing peer interactions. We present and compare results from two years (Spring 2016 and 2017) of interaction between students in an introductory Information Systems class (IS 300: Management of Information Systems) and an upper-level elective Cybersecurity course (IS 471: Data Analytics for Cybersecurity). Our results show a continuation of the general trend observed in the 2016 study. The students who receive peer mentoring show more interest in cybersecurity issues and careers and gain more overall knowledge throughout the semester, than those who don't. This is reflected by the results of an anonymous survey and overall grade improvements. These students show more variations regarding their choice of cybersecurity as a career compared to students who did not receive any mentoring, demonstrating that they are able to make more informed decisions. Female students exhibit more pronounced responses to peer mentoring in contrast to their male counterparts.	Enhancing Interest in Cybersecurity Careers: A Peer Mentoring Perspective	NA:NA:NA:NA:NA	2018
Madiha Tabassum:Stacey Watson:Bill Chu:Heather Richter Lipford	Security vulnerabilities are still prevalent in today's software, yet many can be prevented with standard secure programming techniques. Thus, educators of future developers need to teach students not just how to program, but how to program securely. Many researchers advocate integrating secure programming knowledge and skills across the computer science curriculum. In this paper, we report the results of a study comparing two such methods: our own tool ESIDE, which provides students with security warnings on assignment code, and a security-clinic approach, a one-on-one session with a teaching assistant. Both methods suffered from challenges in incentivizing students to incorporate secure programming techniques into their code. We discuss the relative strengths and weaknesses of these methods, and the challenges of timing and motivation of secure programming education.	Evaluating Two Methods for Integrating Secure Programming Education	NA:NA:NA:NA	2018
Manish Bhatt:Irfan Ahmed:Zhiqiang Lin	Historically, hands-on cybersecurity exercises helped reinforce the basic cybersecurity concepts. However, most of them focused on the user level attacks and defenses and did not provide a convenient way of studying the kernel level security. Since OS kernels provide foundations for applications, any compromise to OS kernels will lead to a computer that cannot be trusted. Moreover, there has been a great interest in using virtualization to profile, characterize, and observe kernel events including security incidents. Virtual Machine Introspection (VMI) is a technique that has been deeply investigated in intrusion detection, malware analysis, and memory forensics. Inspired by the great success of VMI, we used it to develop hands-on labs for teaching kernel level security. In this work, we present three VMI-based labs on (1) stack-based buffer over-flow, (2) direct kernel object manipulation (DKOM), and (3) kernel integrity checker which have been made available online. Then, we analyze the differences in approaches taken by VMI-based labs and traditional labs and conclude that VMI-based labs are better as opposed to traditional labs from a teaching standpoint because they provide more visibility than the traditional labs and superior ability to manipulate kernel memory which provides more insight into kernel security concepts.	Using Virtual Machine Introspection for Operating Systems Security Education	NA:NA:NA	2018
Mia Minnes:Bruce Maxwell:Stephanie R. Taylor:Phillip Barry	The importance of written communication and critical thinking in Computer Science is widely acknowledged. It was called out specifically in the curriculum guidelines ACM CS2013 [6] and has been the topic of a number of previous SIGCSE papers, for example [1-4]. Moreover, writing as a pedagogical practice can help make CS more accessible for a broader population. However, special challenges may arise for students who are English-language learners or have writing-specific learning differences.	Writing in CS: Why and How?	NA:NA:NA:NA	2018
Richard Weiss:James Caristi:Jesse M. Heines:Aaron Koehl:Kelly Rossum	One of the ways to attract a more diverse group of students to computer science is by offering courses that are interdisciplinary. Some of the first examples of this combined multimedia with programming. There are many more possibilities, but as computer scientists, we often do not have the domain knowledge to teach these courses alone. Team teaching offers a solution to this dilemma. The goal of this panel is to present some of the problems we have encountered and to discuss some of the solutions.	Perfect Harmony: Team Teaching Computing & Music	NA:NA:NA:NA:NA	2018
Lucia Dettori:Ronald I. Greenberg:Steven McGee:Dale Reed:Brenda Wilkerson:Don Yanek	Since President Obama's announcement of the Computer Science for All Initiative in 2016, there has been a surge in the number of districts that are planning for or newly implementing computer science (CS) offerings at their schools. Chicago Public Schools (CPS) is the first large school district to have adopted Computer Science as a high school graduation requirement, taking this significant step along the path towards systemic change. The foundation was laid eight years ago when an informal alliance was formed between a CPS high school CS teacher, a CPS administrator, and three university computer scientists.	CS as a Graduation Requirement: Catalyst for Systemic Change	NA:NA:NA:NA:NA:NA	2018
Alla Webb:Ray Gonzales	1.SUMMARY This special session will focus on a multi-year project based on an AAC&U Teaching to Increase Diversity and Equity in STEM (TIDES) grant focused on integrating Culturally Responsive Teaching (CRT) in Computer Science courses at Montgomery College, a highly diverse urban-suburban community college in Maryland. The presenters will discuss the project's development of a CRT model based on a "Discover-Adjust-Assess" process that took into account the realities of the college's faculty and student contexts. Attendees will participate in awareness-raising activities, analyze case studies involving common teaching-learning challenges using CRT-based concepts and tools, and be presented with sample data in the form of student/faculty survey results and interview responses. Several CRT resources created as part of the project will also be presented.	Striving for Excellence in Introductory Computer Science Courses Using Culturally Responsive Teaching (CRT)	NA:NA	2018
Dan Garcia:Tiffany Barnes	NA	Session details: Morning Keynote & 2018 SIGCSE Award for Outstanding Contributions to Computer Science Education	NA:NA	2018
Tim Bell	Computer Science is seen in many different ways in society; some may consider it to be an esoteric collection of jargon-laden skills, while others view it as an essential topic of study for all citizens. Many of us are very passionate about sharing our enthusiasm for the subject with others, and we are at a time in history where much of the hard work to get the public to understand that it is something special is starting to bear fruit, as we see Computer Science and Computational thinking appearing in K-12 curricula around the world. But what is it about Computer Science that makes it so important and exciting? Is it a subject in its own right that deserves space in the curriculum? We will explore the reasons that young students should become engaged with the subject, illustrated using an Unplugged perspective.	What's the Big Idea with CS Education in K-12?	NA	2018
Matthew Hertz	NA	Session details: Paper Session: CS1 #1	NA	2018
Celine Latulipe:Audrey Rorrer:Bruce Long	We present results of a college wide undergraduate retention study tracking student retention in computing, comparing students who experience a flipped, active learning version of CS1 against those who experience a traditional lecture and lab version of CS1. We examine demographic subgroups to understand retention differences between sexes and racial/ethnic groups. Specifically, we examine which students exit computing majors in the semester immediately after taking CS1, and those who leave following one academic year. This allows us to focus on how the immediate experience of the CS1 teaching approach impacts desire to continue in computer science during the critical first year in CS. Our dataset includes 698 CS majors who took CS1 in either the flipped or traditional style, between Fall 2013 and Fall 2016, at a large, comprehensive, urban research university in the US. Our results show that women were less likely to switch majors after taking the flipped version than after taking the traditional version. Conversely, male students were more likely to be retained following the traditional course, and less likely to be retained following the flipped course. Performance of CS majors in CS1, as measured by DFW rates, is statistically higher in the flipped classes than performance in the traditional classes. One-year retention in the major for under-represented groups (women and racial minorities) was higher in the flipped classes for new freshmen taking CS1, but not for transfer students.	Longitudinal Data on Flipped Class Effects on Performance in CS1 and Retention after CS1	NA:NA:NA	2018
Adalbert Gerald Soosai Raj:Kasama Ketsuriyonk:Jignesh M. Patel:Richard Halverson	Computer Science (CS) is taught in India, using English as the medium of instruction, to students whose native language is not English. This places a high cognitive load on students who learn programming for the first time and who are not very proficient in English. The problems these students face become even harder since learning to program can be an incredibly difficult task. Our study aims to find out if a student's native language has any effect on the student's ability to learn programming. We taught linked list, a basic concept in CS, to two groups of undergraduate students for a week in Tamil Nadu, India. We used English to teach one group of students and English and Tamil (the native language in Tamil Nadu) to teach the other group. Our intervention consisted of three lectures and one live-coding session. We collected quantitative and qualitative data using technical tests and open-ended feedback respectively. We found that although teaching programming using both English and Tamil is no different when compared to using only English with respect to student learning, students have expressed positive opinions about teaching and learning CS using two languages.	Does Native Language Play a Role in Learning a Programming Language?	NA:NA:NA:NA	2018
Brian Harrington:Nick Cheng	Much work has been done on the achievement gap between code tracing and code writing in CS1 students. The generally accepted explanation for this gap is that tracing and writing form separate steps in a learning scaffolding; students must first learn to trace code before they can be expected to write code. The expectation is that once students have mastered these skills, future grades will be driven by their ability to understand the deeper learning concepts, and so the gap between tracing and writing should disappear. In this paper, we detail and evaluate a study on 384 CS2 students to evaluate whether a tracing-writing gap still exists, and assess whether anything can be deduced about students who continue to exhibit such a gap. We find that not only does the gap seem to have closed by CS2, students are equally likely to show a reverse gap in the writing-tracing direction. However, further analysis shows a strong correlation between students who do continue to have a gap (in either direction) and poor overall performance in the course.	Tracing vs. Writing Code: Beyond the Learning Hierarchy	NA:NA	2018
Chris Gregg	NA	Session details: Paper Session: Curriculum Issues #1	NA	2018
Michael J. Oudshoorn:Stan Thomas:Rajendra K. Raj:Allen Parrish	The Computing Accreditation Commission of ABET accredits over 300 Computer Science programs worldwide under the Computer Science program criteria. In the past few years, the Commission has engaged the computing community to modify and update these criteria, and has now signed off on an updated set of program criteria that take into account factors such as the CS2013 curricular guidelines, impact on currently accredited programs, structural changes to clarify the criteria, and the reduction of the assessment burden. These recent changes to the Computer Science program criteria primarily impact student outcomes (what program graduates are expected to know and be able to do by graduation) and curriculum. Those changes will impact computer science programs in a variety of ways and degrees---some programs will be impacted significantly while others will be affected in a relatively minor way. This paper examines the changes that will take effect starting in the 2019-20 accreditation cycle, covering the rationale for those changes and exploring the likely impact on computer science programs that are currently accredited or seeking accreditation in the near future.	Understanding the New ABET Computer Science Criteria	NA:NA:NA:NA	2018
Cara Tang:Cindy Tucker:Christian Servin:Markus Geissler	After two years of intense curriculum development effort, the ACM CCECC (Committee for Computing Education in Community Colleges) published Computer Science Curricular Guidance for Associate-Degree Transfer Programs with Infused Cybersecurity, known as CSTransfer2017. Based on Computer Science Curricula 2013 (CS2013), this guidance was specially designed to aid in the smooth transfer from associate degrees to baccalaureate degrees. The curriculum contains 17 of CS2013's 18 knowledge areas, and a variety of knowledge units appropriate in the first two years of a computer science degree. The guidance comprises over 200 learning outcomes, 64 of which are infused with cybersecurity, along with a three-tiered assessment rubric using measurable verbs from Bloom's Revised Taxonomy. In addition to the CSTransfer2017 task group consisting of 20 community college educators, input from both two- and four-year educators was collected via surveys administered to a global audience, as well as two rounds of public review and comment on drafts of the guidance. Examples of degree and certificate programs that align with CSTransfer2017 are part of a growing repository hosted on the CCECC website, ccecc.acm.org. These program examples demonstrate the adaptability of this competency-based curriculum approach to a variety of computing programs. The CCECC invites institutions to highlight their computer science degree program by submitting a program example at ccecc.acm.org/correlations.	Computer Science Curricular Guidance for Associate-Degree Transfer Programs	NA:NA:NA:NA	2018
Susana Masapanta-Carrión:J. Ángel Velázquez-Iturbide	Bloom's taxonomy is a model that allows characterizing students' learning achievements. It is frequently used in computer science education (CSE), but its use is not straightforward. We present a systematic review conducted to know actual use of the taxonomy in CSE. We found that it was mostly used in programming education and to assess students' performance. A more relevant contribution is a classification of authors' difficulties. In particular, the most often reported difficulty is determining the level of the taxonomy where an assessment task can be classified. In addition, we present authors' hypotheses about possible causes of the difficulties and the solutions they adopted.	A Systematic Review of the Use of Bloom's Taxonomy in Computer Science Education	NA:NA	2018
Kinnis Gosha	NA	Session details: Paper Session: Diversity #1	NA	2018
Danielle Cummings:Loretta Cheeks:Rosario Robinson	The intersection between Science, Technology and the Arts is providing an insightful and rich playground for engaging historically underrepresented and underserved youth. This paper discusses an innovative and effective approach for learning Science, Technology, Engineering, the Arts and Mathematics (STEAM) with an emphasis on using expressive arts as a culturally-centered engagement tool. Our framework incorporates a multimodal model that considers unconventional learning styles that appeal to underrepresented and underserved students, the power of cultural cues and the presence of minority STEM professionals to shape students learning experiences. In addition to demonstrating the importance of culturally-centered learning approaches, we've identified methods of engaging students' families and communities as a means of strengthening the pipeline to continued education in STEM.	Culturally-Centric Outreach and Engagement for Underserved Groups in STEM	NA:NA:NA	2018
Jennifer M. Blaney	While the gender gap in undergraduate computing is often discussed in reference to the representation of women in the computing major, less is known about leadership and other affective outcomes for women and men in computing. This study examines how gender shapes (a) introductory computing students' perceptions of their leadership, including measures of both general self-rated leadership ability and perceived capacity for leadership in computing, (b) how these perceptions change during the introductory computing course, and (c) the experiences that are related to change in leadership outcomes. Findings reveal gender differences in how incoming introductory course students report both their general leadership abilities and their perceived capacity for leadership in computing. Additionally, both women and men experienced a decline in their perceived capacity for leadership in computing during the introductory course. These and other findings are discussed, with attention given to the implications for both researchers and instructors seeking to broaden women's participation in computing.	Looking Beyond Representation: How Women Develop Their Leadership Perceptions During the Introductory Computing Course	NA	2018
Penny Rheingans:Erica D'Eramo:Crystal Diaz-Espinoza:Danyelle Ireland	At our university, women are a minority in all computing and engineering majors. This situation is mirrored at other universities nationwide, as well as in technical industries. Stereotype threat, the risk of confirming a negative stereotype about one's social group, can result in women not performing as well as their male counterparts in computing, mathematics, and engineering courses. The aftermath of these experiences cause women to fear they do not belong or are not "smart enough", resulting in women switching to a different major. Even high-performing women can be subject to these pressures. We present a Scholar model for increasing gender diversity in technology fields and an evaluation of its impact on the retention and success of women in computing and engineering majors. We compare the performance of Scholars to that of non-Scholars with similar demographic and academic backgrounds who entered into the College of Engineering and Information Technology at the University of Maryland, Baltimore County.	A Model for Increasing Gender Diversity in Technology	NA:NA:NA:NA	2018
Paul T. Tymann:Dale Reed:Chinma Uche:Carol S. Yarbrough	NA	The Impact of AP Computer Science Principles: Are You Ready to Change Your Undergraduate Courses?	NA:NA:NA:NA	2018
Mia Minnes	NA	Session details: Paper Session: Peers and Cohorts	NA	2018
Scott Vandenberg:Sharon G. Small:Meg Fryling:Robin Flatland:MaryAnne Egan	Computer Science (CS) is not taught in enough high schools thus many students arrive at college or university knowing little about it and often do not consider taking a CS course during their first year. At the same time, we encounter many college or university juniors and seniors who, while taking their first CS course, discover an aptitude and interest, at which point it is too late. We describe an innovative one-week residential summer program designed to educate non-computer science majors, before their second year of college or university, about the field's many areas and long-term prospects. The program has succeeded at encouraging undecided students to major or minor in CS and thus somewhat ameliorates the lack of CS in K-12 education and furthers the conference goal of "CS For All".	A Summer Program to Attract Potential Computer Science Majors	NA:NA:NA:NA:NA	2018
Pablo Frank-Bolton:Rahul Simha	This study presents and evaluates a scalable approach for improving learning outcomes by having students "teach" peers in the same course via video. The approach was tested in a standard upper-level undergraduate computer algorithms course with material commonly considered challenging to teach: combinatorial optimization and NP-complete problems. An important design goal was to incentivize students to learn deeply in crafting their instructional videos while minimizing the added burden on instructors to review their products, allowing for scalability. A learning assessment administered to two successive cohorts (N=89) showed statistically significant improvement (P<0.0001) in learning for students who make the videos compared to those who merely study the materials or view the videos. Students not only enjoyed applying their creativity in making videos but, in the process, also strengthened their conceptual learning. While much of the existing research on student-created videos has shown its effectiveness in motivating students, few studies exist that directly isolate learning gains in those who craft instructional videos.	Docendo Discimus: Students Learn by Teaching Peers Through Video	NA:NA	2018
Lina Battestilli:Apeksha Awasthi:Yingjun Cao	Programming projects are widely used in CS1 classes to develop students' coding skills. To improve the learning impact of these projects, we propose and study a special project format named two-stage project in an introductory computer science course. For the first stage, students submit their programming projects individually followed by a second stage where they are paired to work on the same project in order to create an improved solution. Through peer collaboration, students review each other's work from the first stage, and write correctly-styled, well-documented, and more thoroughly tested code during the second stage. We used isomorphic assessments before and after the second stage of a project to measure students' understanding of the course material. Results indicate that two-stage projects tend to improve student understanding of course learning objectives. We also studied students' perceptions and experiences with two-stage projects, and their confidence toward computing. Students liked working on two-stage projects because they saw new ways to approach the same problem, and they liked discussions with their peers.	Two-Stage Programming Projects: Individual Work Followed by Peer Collaboration	NA:NA:NA	2018
Cheryl Seals	NA	Session details: Paper Session: Service Learning	NA	2018
Lori Pollock:James Atlas:Tim Bell:Tracy Henderson	Study abroad offers students the opportunity to experience other cultures, languages, and environments while obtaining credits toward their degree. Students are also taught to appreciate the diversity of people and culture, such that they may dismiss stereotypes and learn to communicate and collaborate cross-culturally in a global economy. Unfortunately, few universities offer study abroad programs directed specifically to computer science and particularly in combining student technical learning with service learning for broadening participation in computing throughout the world. In this paper, we describe a service-learning-based model for computer science students and other university students with minimal prior computer science experience to engage and inspire themselves and the next generation of computational thinkers through learning, teaching and creating web-based learning games along with local children and teachers in a foreign country. We describe the model focusing on learning objectives, curriculum, field component, planning, and partnership building. We describe the products that undergraduates were able to create in four weeks and their CS education service learning field experiences. Finally, we investigate the impact of the study abroad model on undergraduates' content knowledge, and their career and personal development.	A Computer Science Study Abroad with Service Learning: Design and Reflections	NA:NA:NA:NA	2018
Spencer Robinson:Margeret Hall	Experiential learning is ever-more popular with educators, industry, and with students themselves. Finding and delivering appropriate applied use cases can be challenging though, as on one hand industry partners may not willing to give insights to non-employees into their systems for creating truly meaningful case studies, and on the other hand the appropriate balance between instruction and application is ill-defined. Service learning projects are one solution for filling in the applied project gap. This case study takes place in the nexus between blended classrooms, applied software development, and service learning. Junior and senior level students partnered with a community actor to develop deployable software applying the Agile methodology. The service-learning project enabled students to engage in a full-cycle development project, from requirements gathering to hypercare. However, significant trade-offs in structure and classroom management must be made when the focus of the class is a full implementation. Blended technologies and course delivery were found to aid delivery and project management in a seamless manner. Drawing on feedback from stakeholders and students, this experience report makes a series of recommendations for implementing applied software development. Our contribution is the introduction and assessment of a method to marry (online) information systems education with service learning.	Combining Agile Software Development and Service-learning: A Case Study in Experiential IS Education	NA:NA	2018
Brian Thoms:Evren Eryilmaz	Service-learning continues to play an increasing role in higher education as instructors look to incorporate high impact practices that challenge students through active and experiential learning. Yet limitations in learning management systems (LMS) can be barriers to service-learning project success. In this paper, we present an experience report on the design and implementation of an interdisciplinary service-learning course for computer science. We also present on the design and implementation of specialized social networking software as a mechanism to support service-learning across interdisciplinary computer science courses. More specifically, this research introduces customized social software, consisting of blogging, wiki and discussion software as tools for facilitating the specialized needs of these courses. These needs range from the ability for project management and milestone tracking, which are supported through wiki technology and messaging, self-reflection, which is supported through blogging and information exchange and knowledge sharing, which are supported through online discussion boards, social bookmarking and file-sharing. Results were largely positive, with a majority of students indicating that the course learning environment supported learning, collaboration and course community.	Social Software Design To Facilitate Service-learning In Interdisciplinary Computer Science Courses	NA:NA	2018
Joseph Chao	NA	Session details: Paper Session: Summer and Boot Camps	NA	2018
Quinn Burke:Cinamon Bailey:Louise Ann Lyon:Emily Green	This study reports on the perceived capacity of coding boot camps versus computer science (CS) undergraduate programs to instill a range of software development skills from an industry perspective. We present findings from a series of national focus groups and individual interviews with representatives from the software development industry, who spoke about their hiring procedures and preferences as well as how they perceived coding boot camp applicants in comparison to graduates from four-year CS degree programs. We also present findings on how the boot camp and university participants viewed their role in developing necessary skills for employability. Results indicate that hiring managers filling positions, generally have a favorable perspective of coding boot camp hires in relation to their demonstration of "soft" skills, such as teamwork, passion, and persistence; With regards to four-year university hires, several industry representatives indicated that a four-year degree is mandatory for hire, while also listing a solid understanding of CS principles and substantial exposure to mathematics. The Discussion section focuses on the future potential of coding boot camps as an alternative training ground for the software development industry.	Understanding the Software Development Industry's Perspective on Coding Boot Camps versus Traditional 4-year Colleges	NA:NA:NA:NA	2018
Yu-Cheng Tu:Gillian Dobbie:Ian Warren:Andrew Meads:Cameron Grout	Recently, there has been a strong demand for talented ICT (Information and Communication Technology) graduates in the software industry in New Zealand. To meet this demand, in 2015, the government of New Zealand provided funding for three new ICT Graduate Schools. The challenge for the schools was twofold: to provide a qualification for students transitioning into ICT and to prepare those with an ICT education for the workforce. Each of the Schools offer different programmes. We offer two postgraduate programmes for growing talent and knowledge to support the New Zealand's ICT sector. In this paper, we describe our experience with delivering one of the postgraduate programmes, the Postgraduate Certificate in Information Technology. The programme consists of two courses, Programming for Industry and Programming with Web Technologies. The courses focus on providing industry-focused education to students with non-ICT backgrounds for a career in IT. The programme has been running for 2 years and runs over one semester (12 weeks) in a "boot-camp" style, which has proved to be successful. In this paper, we provide an overview of the features of the programme, which incorporates industry-focused activities for building students' knowledge relevant to the software industry. Finally, we discuss key challenges and identify directions for improvement.	An Experience Report on a Boot-Camp Style Programming Course	NA:NA:NA:NA:NA	2018
Kelvin Sung:Karen Gourd:Ann McMahon:Kulsoom Mansoor:Riley Gaggero	Summer coding or programming camps are popular. With sufficient organization, offering these camps at higher education institutions can facilitate outreach objectives including engaging underrepresented groups. However, the challenges involved in organizing and offering a camp are many, including: recruitment of instructors and campers, camp management, finances, and curriculum development. We addressed these challenges by engaging a non-profit summer camp provider, Pacific Science Center (PSC), to handle camp logistics; and offered a new course for students with backgrounds in computer science (CS) or education (ED) to learn to teach Java programming and develop a curriculum appropriate for middle school aged campers. The university students then worked as paid summer camp instructors. Three professors, one each from CS, ED, and the Office of Research, co-planned and co-facilitated the course. Reflecting a hands-on and collaborative learning philosophy of PSC camps, the course grouped students into multidisciplinary teams and challenged the teams to learn by collaboratively developing and practice teaching the content. By the end of the course, we had classroom-ready instructors with technical knowledge in both programming and learning theories and a customized curriculum ready for use. This paper details our project, including results from the summer camps. With all developed materials freely available. Interested institutions can either adapt the curriculum or offer a similar course.	A Collaborative Course for Learning How to Teach Summer Java Coding Camps	NA:NA:NA:NA:NA	2018
Ben Stephenson	NA	Session details: Paper Session: Tools and Exercises	NA	2018
John MacCormick	Computational and complexity theory are core components of the computer science curriculum, and in the vast majority of cases are taught using decision problems as the main paradigm. For experienced practitioners, decision problems are the best tool. But for undergraduates encountering the material for the first time, we present evidence that non-decision problems (such as optimization problems and search problems) are preferable. In addition, we describe technical definitions and pedagogical strategies that have been used successfully for teaching the theory course using non-decision problems as the central concept.	Strategies for Basing the CS Theory Course on Non-decision Problems	NA	2018
Amruth N. Kumar	Performance on Parsons puzzles has been found to correlate with that on code-writing exercises. Parsons puzzles are preferred by students over alternative programming tasks. In order to make Parsons puzzles widely available to students in the introductory programming course, we developed a tool that administers the puzzles in C++, Java and C#, called epplets. Our design of the tool improves upon the work done by earlier researchers in several ways: students rearrange lines of code rather than program fragments; they get credit based on the number of actions they take to reassemble the code; they get feedback that helps them fix their incorrect answer; and the tool adapts to the needs of the student. The tool runs as a Java Web application. We describe our experience using the tool for two years: how it benefited the students; the revisions made to address the feedback provided by the users; and our plans for future work. We found that practicing with the tool helped reduce the time and actions with which students solved successive puzzles.	Epplets: A Tool for Solving Parsons Puzzles	NA	2018
Mark McCartin-Lim:Beverly Woolf:Andrew McGregor	This paper describes a new method for helping students improve their ability to develop proofs, a skill necessary for comprehending and appreciating the foundational topics of computer science. Our method transforms ordinary pen-and-paper homework problems into a puzzle-like game, where students connect dots to justify assertions, in a quest to reach a desired goal. We have implemented a software tutoring system using this method, for students to use at home as an optional study aid. Potentially, our system could one day become a full replacement for traditional hand-written homework, which has the additional benefit for course instructors of automating the grading of student work. Our system is also easy to adapt to any class that requires students to write proofs, and it is easy for instructors to create new problems to use with this system. This stands in contrast to many other educational tools for teaching proofs, which are limited to specific topic domains. We have demonstrated the versatility of our system by testing it in two computer science classes at a large public university. One was a Sophomore-level discrete mathematics course where the students were learning first-order prepositional logic, and the other was a Junior-level algorithms course where students were being first exposed to the concept of NP-completeness. Students from our experiments reported that they would like our system to be used in more of their classes.	Connect the Dots to Prove It: A Novel Way to Learn Proof Construction	NA:NA:NA	2018
Eric Roberts:Tracy Camp:David Culler:Charles Isbell:Jodi Tims	NA	Rising CS Enrollments: Meeting the Challenges	NA:NA:NA:NA:NA	2018
Richard E. Ladner:Ramin Ayanzadah:Samsara N. Counts:Kavita Krishnaswamy:Kevin Wolfe	A panel of students with disabilities who are pursuing computing degrees will describe their experiences both in and out of the classroom. The goal of the panel is to provide the audience with an opportunity to hear first-hand how their educational needs were met as non-traditional computing students. In addition to the panelists' short presentations, the moderator will facilitate a dialog between the members of the audience and the panelists.	2018 Panel of Computing Students with Disabilities	NA:NA:NA:NA:NA	2018
John Cigas:Adrienne Decker:Crystal Furman:Timothy Gallagher	With the record growth in computing classes, it has been challenging for faculty to keep up with the logistics of the classroom, particularly in assessment. Automatic grading software and unit tests have been employed successfully in many settings to help ensure proper scoring of programming assignments. However, assignments that are not necessarily complete programs (in-class short quizzes, homework problems or worksheets, exams) present different challenges for scoring. In this session, we propose some tips and techniques for scoring such assessment items quickly and consistently, with the added benefit that grading criteria are clearer to the students.	How am I Going to Grade All These Assignments?: Thinking About Rubrics in the Large	NA:NA:NA:NA	2018
Patrick Virtue:Steven A. Wolfman:John P. Dougherty	In a session with live music and collaborative parody, we celebrate the long tradition of computing parody songs ("filks") and their potential to contribute to education and a fun environment in CS courses. We perform several new and classic CS filks, such as "Like it Called on Me (QuickSort)" [1], interspersing discussion of how and why these parodies were written. We also propose a song for the audience to parody and walk them through a structured small-group activity to help them brainstorm topics and lyrical phrases and fit them to the existing lyrics and music. Attendees should expect to laugh (and possibly cry) with the singing and to leave inspired to incorporate filks and other creative activities into their computing education practice: playing, performing, or writing songs themselves, and encouraging their students to do so as well.	SIGCSE Filk Circle: CS Parody Songs for Learning, Engagement, and Fun	NA:NA:NA	2018
Muztaba Fuad	NA	Session details: Paper Session: Algorithms	NA	2018
Arthur Nunes-Harwitt:Matthew Gambogi:Travis Whitaker	The traditional functional formulation of quick-sort is simple and elegant. But is it fast? Through a dialog, we observe that this traditional formulation does not retain certain crucial properties of the imperative version. We include a known derivation of a higher performing functional implementation together with a graph that illustrates the differences. Our pet peeve is that the faster quick-sort is frequently left out of texts on functional programming.	Quick-Sort: A Pet Peeve	NA:NA:NA	2018
James D. Teresco:Razieh Fathi:Lukasz Ziarek:MariaRose Bamundo:Arjol Pengu:Clarice F. Tarbay	We present the algorithm visualization capabilities of the METAL project. Using METAL's graph data which represents highway systems, a selection of interactive algorithm visualizations are performed. Progress of the algorithm is shown by changing the colors of the graph's vertices and/or edges overlaid on Google Maps and in color-coded tabular form, including contents of important data structures. Advantages include the real-world data set and the variety of data sizes available, enhancing student engagement. While many visualizations and visualization tools exist for graph and related algorithms, most focus on small, synthetic graphs. We describe our algorithm visualization capabilities, which include implementations of sequential search, graph traversals, Dijkstra's algorithm, and convex hulls. These can be executed on graphs ranging in size from a few vertices and edges to hundreds. We also present results of a survey of students who have used METAL's algorithm visualizations.	Map-based Algorithm Visualization with METAL Highway Data	NA:NA:NA:NA:NA:NA	2018
Shamama Zehra:Aishwarya Ramanathan:Larry Yueli Zhang:Daniel Zingaro	Dynamic Programming (DP) is considered to be one of the most difficult topics for students to understand in theoretical CS. Prior work suggests that misconceptions arise even when students have completed a course in which there is considerable focus on learning how to solve DP problems. We conducted think-aloud interviews with students who have completed the DP portion of the Algorithms course at a top North American research university. We report on three themes and their misconceptions discovered through this process. The first theme delves into students' struggles defining the notion of a subproblem and identifying particular subproblems. The second theme focuses on the understanding and usage of DP solution techniques compared to other algorithmic approaches. The third theme is composed of misconceptions related to defining and using recurrences. Analysis of each misconception provides insight into student thinking and offers ideas for improving the education of DP to university students.	Student Misconceptions of Dynamic Programming	NA:NA:NA:NA	2018
Christopher Moretti	NA	Session details: Paper Session: CS1 #2	NA	2018
Chris Piech:Chris Gregg	This paper presents BlueBook, a lightweight, cross-platform, computer-based, open source examination environment that overcomes traditional hurdles with computerized testing for computer science courses. As opposed to paper exam testing, BlueBook allows students to type coding problems on their laptops in an environment similar to their normal programming routine (e.g., with syntax highlighting), but purposefully does not provide them the ability to compile and/or run their code. We seamlessly transitioned from paper exams to BlueBook and found that students appreciated the ability to type their responses. Additionally, we are just beginning to harness the benefits to grading by having student answers in digital form. In the paper, we discuss the pedagogical benefits and trade-offs to using a computerized exam format, and we argue that both the students and the graders benefit from it.	BlueBook: A Computerized Replacement for Paper Tests in Computer Science	NA:NA	2018
Terence Nip:Elsa L. Gunter:Geoffrey L. Herman:Jason W. Morphew:Matthew West	While most efforts to improve students' learning in computer science education have focused on designing new pedagogies or tools, comparatively little research has focused on redesigning examinations to improve students' learning. Cognitive science research, however, has robustly demonstrated that getting students to practice using their knowledge in testing environments can significantly improve learning through a phenomenon known as the testing effect. The testing effect has been shown to improve learning more than rehearsal strategies such as re-reading a textbook or re-watching lectures. In this paper, we present a quasi-experimental study to examine the effect of using frequent, automated examinations in an advanced computer science course, "Programming Languages and Compilers" (CS 421). In Fall 2014, students were given traditional paper-based exams, but in Fall 2015 a computer-based testing facility enabled the course to offer more frequent examinations while other aspects of the course were held constant. A comparison of 292 student scores across the two semesters revealed a significant change in the distribution of students' grades with fewer students failing the final examination, and proportionately more students now earning grades of B and C instead. This data suggests that focusing on redesigning the nature of examinations may indeed be a relatively untapped opportunity to improve students' learning.	Using a Computer-based Testing Facility to Improve Student Learning in a Programming Languages and Compilers Course	NA:NA:NA:NA:NA	2018
Lisa L. Lacher:Albert Jiang:Yu Zhang:Mark C. Lewis	In an effort to improve student performance in a flipped classroom environment, this paper explores the impact of including auto-graded coding questions in gate check quizzes associated with videos for a flipped CS1 course. Previous work showed that having students complete multiple choice questions that were intended to verify that they had done the preparation work did not have a statistically significant impact on outcomes as measured through written quizzes and exams. In an attempt to engage higher-level processing of learned information, this work builds on top of that by adding questions that require students to write short segments of code for most of the quizzes in addition to doing some multiple choice questions. We found that students who were given these coding video quizzes performed better on written assessments, especially for the final exam.	Including Coding Questions in Video Quizzes for a Flipped CS1	NA:NA:NA:NA	2018
Xuesong Zhang	NA	Session details: Paper Session: Curriculum Issues #2	NA	2018
Laura Benvenuti:Erik Barendsen:Gerrit C. van der Veer:Johan Versendaal	Computing is an interdisciplinary field that can be approached from different points of view. Each point of view has its goals, aims and fundamental assumptions. This makes computing a complex discipline. Moreover, new computing disciplines appear regularly. With the trend that ICT-professionals should have non-ICT competences as well, and non-ICT-professionals should have ICT-competences, new computing curricula are often hybrid in nature. As a hybrid computing curriculum cannot cover the full range of computing, it is interesting to investigate the 'computing part' of such curricula. Our analysis framework consists of three elements: the curricular components 'goals and objectives' and 'instructional strategies', and the underlying epistemological view on the discipline ('cultural styles'). Taking a historical perspective, we describe the origins of the ACM/IEEE Curriculum Recommendation series. We discuss the three main cultural styles of computing: theoretical, scientific and engineering. Observing that in a curriculum the above elements should be aligned, we present three trade-offs for the case of hybrid computing curricula. We apply our results to two concrete examples, Liberal Arts and Computer Science and Front End Development. Based on our investigation, we formulate recommendations for designers of hybrid computing curricula. We recommend, for example, discussing disciplinary boundaries and resulting trade-offs explicitly while designing and documenting curricula.	Understanding Computing in a Hybrid World: On the Undergraduate Curriculum Front-End Development	NA:NA:NA:NA	2018
Gail Carmichael:Christine Jordan:Andrea Ross:Alison Evans Adnani	Work-integrated learning is a common approach to add practical, real-world work experience to academic settings. Traditional co-op programs in colleges and universities alternate courses with semesters spent as an intern at a relevant workplace. We have designed an academic-industry partnership that takes work-integrated learning further by deliberately aligning workplace experience to the academic curriculum. Our students earn a Bachelor of Computer Science from the university, and are paid employees of the industry partner throughout their degree. While advanced courses and electives are taken on campus as usual, some core computer science classes and practicum courses are delivered with the industry partner so as to integrate them with placements on site. Assessment remains the responsibility of the university. In this report, we describe the partnership from the perspective of the industry partner. We describe our goals, partnership design, and first two iterations of the implementation. We discuss the challenges we have faced with our first cohort, and share suggestions for others looking to create similar programs.	Curriculum-Aligned Work-Integrated Learning: A New Kind of Industry-Academic Degree Partnership	NA:NA:NA:NA	2018
Ryan Rybarczyk:Lingma Acheson	A key learning objective of the CS2 curriculum is for a student to obtain the necessary computer science skills to be proficient in the understanding and usage of software objects in an object-oriented programming language. In typical CS programs there are two prevalent object-oriented languages that are used to fulfill this requirement: Java and C++. In most instances, one language is selected as the primarily tool in which to teach these concepts. In other instances, both languages may be used, but not in a side-by-side fashion which can often leave the students confused or with an incomplete understanding of both languages. Each language has its documented trade-offs (benefits and drawbacks) when it comes to adequately preparing students. An aspect that is often overlooked as part of this traditional course structure is the ability to leverage a teaching component that allows the students to analyze trade-offs between languages and the Why/When/How to select a given language based upon their analysis. We provide an outline for how these two languages can be successfully taught in a side-by-side, or simultaneous, fashion that will still satisfy all of the existing expectations and requirements of a course. We describe how this component can be integrated into a career preparation module that will further augment the students' overall learning experience and their academic preparation. Results of this trial demonstrate that student satisfaction, understanding, learning of concepts, and educational preparation can be improved while maintaining the necessary standards set forth as part of the CS2 curriculum.	Integrating A Career Preparedness Module into CS2 Curricula Through The Teaching C++ and Java Side-by-Side	NA:NA	2018
Andrea Lawrence	NA	Session details: Paper Session: Diversity #2	NA	2018
Andrew J. Ko:Leanne Hwa:Katie Davis:Jason C. Yip	Influencing adolescent interest in computing is key to engaging diverse teens in computer science learning. Prior work suggests that informal mentorship may be a powerful way to trigger and maintain interest in computing, but we still know little about how mentoring relationships form, how mentors trigger and maintain interest, or what qualities adolescents value in informal mentors. In a 3-week career exploration class with 18 teens from underrepresented groups, we had students write extensively about their informal computing mentors. In analyzing their writing, we found that most teens had informal computing mentors, that mentors were typically teachers, friends, and older siblings (and not parents or school counselors), and that what teens desired most were informal mentors that were patient, helpful, inspiring, and knowledgeable. These findings suggest that computing mentors can come in many forms, that they must be patient, helpful, and inspiring, but that they also require content knowledge about computing to be meaningful. Future work might explore what knowledge of computing is sufficient to empower teachers, parents, peers, and family to be effective computing mentors.	Informal Mentoring of Adolescents about Computing: Relationships, Roles, Qualities, and Impact	NA:NA:NA:NA	2018
Audrey Smith Rorrer:Joseph Allen:Huifang Zuo	In this paper, we describe a large-scale, long-term study of a National Science Foundation undergraduate research program via the Computer and Information Science and Engineering (CISE) Research Experiences for Undergraduates (REU) Evaluation Toolkit project. The overarching research questions are: what attitudinal shifts occur for undergraduate research experience student participants, and do experience perceptions differ based upon student demographics? Results across two cohort years showed statistically significant gains for several key program level outcomes. However, intent to go to graduate school decreased in both cohorts. Gender and ethnicity differences were observed. Women and underrepresented minority group students had significantly higher scores for several factors. These findings are discussed in context of culturally relevant pedagogy for undergraduate research programs. This study is unique in its scale and scope, providing a depiction of student outcomes across multiple cohorts of a national sample including over 58 computing research sites and more than 900 undergraduate students.	A National Study of Undergraduate Research Experiences in Computing: Implications for Culturally Relevant Pedagogy	NA:NA:NA	2018
Heather E. Metcalf:Tanya L. Crenshaw:Erin Wolf Chambers:Cinda Heeren	While we celebrate the dramatic increase in women's undergraduate enrollment at computer science programs around the country, to see this surge translate into career-long outcomes, we cannot ignore ongoing gendered and racialized disparities in computing, particularly as they relate to a student's sense of belonging. Even in times of high enrollment, fostering a sense of belonging cannot occur just through ad-hoc methods, the goodwill of a few faculty, or a standalone mentoring program. Policies and structures must be put into place and enacted holistically. We report on a multi-phase, 10-year case study of undergraduate student experiences at the University of Illinois (2007, n=61; 2017, n=339). Our 2017 study explores the policies and structures enacted over a decade and their impact on departmental culture. We report on three areas: i) Inclusive classroom experiences; ii) Quality of mentorship opportunities; iii) Student sense of identity. While there have been significant departmental improvements, there are some cultural, policy, and structural issues to be addressed in order to foster a sense of belonging and success for all students.	Diversity Across a Decade: A Case Study on Undergraduate Computing Culture at the University of Illinois	NA:NA:NA:NA	2018
Cecily Heiner	NA	Session details: Paper Session: Elementary #1	NA	2018
Johanna Joentausta:Arto Hellas	Worked examples are step-by-step instructions that are used to demonstrate and teach problem-solving processes. Subgoal labels are used to group the steps of worked examples into cohesive units that may help the learner to identify key information about the process. We conducted a study on the applicability of subgoal labeled worked examples with 9 and 10-year-old pupils (n=43) who were learning the principles of programming using LightBot. Using a between groups design, pupils in three classes were working with LightBot. One of the groups had no additional instructional materials for the LightBot environment, one of the groups had a set of worked examples without subgoal labels, and the last group had the same set of worked examples with subgoal labels. We measured pupils' success in terms of how many LightBot levels they completed during the class. In addition, pupils' beliefs and attitudes towards programming were assessed before and after the experiment. Our results indicate that in a programming environment such as LightBot, simple worked examples provide no significant benefit over no examples, but worked examples with subgoal labels can help pupils complete more levels. At the same time, the instructional materials in the study had no significant influence on the pupils' beliefs towards computer use or programming.	Subgoal Labeled Worked Examples in K-3 Education	NA:NA	2018
Jennifer Tsan:Fernando J. Rodríguez:Kristy Elizabeth Boyer:Collin Lynch	Collaboration plays an essential role in computer science. While there is growing recognition that learners of all ages can benefit from collaborative learning, little is known about how elementary-age children engage in collaborative problem solving in computer science. This paper reports on the analysis of a dataset of elementary students collaborating on a programming project. We found that children tend to make several different types of suggestions. In turn, their partners address those suggestions in different ways such as by implementing them directly in code or by replying through dialogue. We observe that students regularly accept or reject suggestions without explanation or explicit acknowledgement and that it is often unclear whether they understand the substance of the suggestion. These behaviors may inhibit the development of a shared understanding between the partners and limit the value of the collaborative process. These results can inform instructional practice and the development of new adaptive tools that facilitate productive collaborative problem solving in computer science.	"I Think We Should...": Analyzing Elementary Students' Collaborative Processes for Giving and Taking Suggestions	NA:NA:NA:NA	2018
Michelle Friend:Michael Matthews:Victor Winter:Betty Love:Deanna Moisset:Ian Goodwin	As computer science becomes more prevalent in the K-12 world, elementary schools are increasingly adopting computing curricula. Computer scientists have recognized the connection between math and computer science, but little work has demonstrated how and whether computer science can support improved learning in math. This paper reports on a project in which elementary students in a gifted program used Bricklayer, a functional programming environment that supports artistic and mathematical expression. A pre- and post-test design demonstrates significant learning gains in coordinate graphing and visual-spatial skills.	Bricklayer: Elementary Students Learn Math through Programming and Art	NA:NA:NA:NA:NA:NA	2018
Brian Railing	NA	Session details: Paper Session: Errors	NA	2018
Brett A. Becker:Cormac Murray:Tianyi Tao:Changheng Song:Robert McCartney:Kate Sanders	In order to help students learning to develop computer programs, several computing education researchers have analyzed the compiler error messages generated by novices' attempts to compile their programs. The goal is to help students diagnose the errors they make through the messages generated by the compiler. This paper builds on that previous work by applying a technique based on a heuristic well-known to programmers - fix the first error and ignore the rest - to the analysis of over 21 million compiler error messages from the Blackbox dataset. We find that the ranks and frequencies obtained by considering all error messages are generally consistent with previously published lists, but when we consider first messages only, these ranks and frequencies are different. These differences could have important implications for teaching, and can inform tool design and future research efforts.	Fix the First, Ignore the Rest: Dealing with Multiple Compiler Error Messages	NA:NA:NA:NA:NA:NA	2018
Brett A. Becker:Kyle Goslin:Graham Glanville	There is an active strand of research in the literature exploring the effects of Enhanced Compiler Error Messages on student programming behavior, however many results seem conflicting. This is compounded by the fact that directly comparing these results is difficult as these studies utilize different metrics, and what metrics are best suited to measure the effects of enhanced compiler error messages is not known. Common to most studies to-date is that the metrics employed measure how many errors students produce, and/or rectify while writing programs. This study takes a different approach by measuring how many pre-existing syntax errors are rectified by students while debugging programs. Specifically, we measured the effect of enhanced compiler error messages in an empirical control/intervention experiment where students were given the task of removing syntax errors from non-compiling source code they did not write. We find a significant positive effect on the overall number of errors rectified, as well as the number of certain specific error types, but no significant effect on the number of non-compiling submissions or student scores. These results (in different ways) support the findings of several recent studies and suggest that their results may not be as conflicting as they seem. This is evidence that enhanced error messages may be effective, but also that the signal of these effects are relatively weak, indicating that how and what is measured when attempting to observe these effects is important.	The Effects of Enhanced Compiler Error Messages on a Syntax Error Debugging Test	NA:NA:NA	2018
Cruz Izu:Claudio Mirolo:Amali Weerasinghe	We want undergraduate students to develop higher-order thinking skills that enable them to master program behaviour. Nonetheless, many students of both introductory and advanced programming courses appear to struggle with the abstraction required for this purpose. In particular, a recent think-aloud study showed a group of students were able to reason about and reverse the effect of assignments and vector updates, but most of them failed when asked to reverse a seemingly simple conditional statement. We have extended that study by assigning a similar task to two cohorts of novice programmers as part of their final exam paper. Students' answers, including code and short explanations, have been analysed through the lens of the SOLO taxonomy: 28% of the solutions were correct (classified as relational); an additional 23% were partially correct but failed to identify the overlap between the two paths of the conditional statement (classified as multistructural). Furthermore, the concept of reversibility and related "low-ceiling" tasks, such as the one discussed in this study, could be useful resources for educators to assess and develop students' understanding of program behaviour.	Novice Programmers' Reasoning about Reversing Conditional Statements	NA:NA:NA	2018
Durga Suresh	NA	Session details: Paper Session: Peer Mentoring	NA	2018
Devorah Kletenik:Deborah Sturm	We report our experience teaching elective game development courses at two colleges at a public university. Over the past nine years these courses have been taught in a variety of languages on several platforms. As the courses evolved we introduced serious games with game-based-learning as a focus for the projects and ultimately offered a special topics elective in serious game development. In this paper, we discuss the merits of using serious games as a focus in game programming, including the benefits for students without a strong interest in gaming. We also describe the novel restructuring of one college's Computer Science elective sequence in response to recommendations from students, alumni, and an advisory board of computing professionals. By introducing 200-level electives, students are able to sample advanced topics including game development early in their academic sequence. This has led to involving more students in game-based undergraduate research which can result in increased interest and retention in Computer Science. We discuss our curriculum design and lessons learned including challenges and successes, and data from student surveys indicating student motivation and engagement.	Game Development with a Serious Focus	NA:NA	2018
Meg Fryling:MaryAnne Egan:Robin Y. Flatland:Scott Vandenberg:Sharon Small	Recruiting and retaining STEM majors has been an ongoing challenge for colleges and universities. This research paper describes two initiatives to recruit and retain Computer Science (CS) majors that were implemented at Siena College starting in the fall of 2014. Both initiatives are directed at rising sophomores who have completed the first year CS sequence as an early strategy to encourage them to declare and complete the CS major. The first initiative is an early internship program directed at providing students an opportunity to apply those technical skills, extend their skill set, and introduce them to meaningful real-world projects between their freshman and sophomore years. The second initiative is a lab/classroom assistant program where sophomore or older students provide mentoring during lecture and lab sessions for the introductory CS courses. The paper provides preliminary findings, lessons learned, and directions for the future.	Catch 'em Early: Internship and Assistantship CS Mentoring Programs for Underclassmen	NA:NA:NA:NA:NA	2018
Jody Clarke-Midura:Frederick Poole:Katarina Pantic:Megan Hamilton:Chongning Sun:Vicki Allan	In response to the national demand to increase participation in CS, we argue that youth's interest in computer science (CS) can be sparked by providing them with role models who are relatable and who resonate with their identities. To that end, we developed a mentoring model in which we train high schoolers to be near-peer mentors for middle schoolers learning to program in summer camps. In this paper, we present results from a mixed-methods study where we examined the relationship between mentor relatability and middle school campers' self-efficacy and interest in CS. Pre- and post-surveys were used to measure campers' affective outcomes around computing and mentor relatability. In addition, interviews and observations were used to illustrate the mechanisms that led to change in affect. Our findings suggest that mentor relatability is a significant predictor of campers' self-efficacy and interest in CS. Results from the qualitative data further exemplify how mentor relatability was perceived and manifested in the camps.	How Near Peer Mentoring Affects Middle School Mentees	NA:NA:NA:NA:NA:NA	2018
Kathleen J. Lehman:Maureen Doyle:Louise Ann Lyon:Kyle Thayer	Declaring a computer science (CS) major at the outset of college and going on to earn a computing degree may be the most direct route to a career in computing, but it is certainly not the only pathway. However, much of the work on pathways to computing careers focuses on those who have taken this traditional route, while less attention has been paid to those who pursue alternative pathways into computing. Understanding alternative pathways into computing may be particularly important to discussions about diversity in the field, as some research has shown that women and underrepresented minority (URM) students who enroll in CS courses are more likely than men and other majority students to be non-computing majors and to take computing courses later in their academic careers. This panel will provide perspectives from individuals with expertise in several alternative pathways into computing, such as through coding boot camps, undecided students, community colleges, and retrained end-user programmers.	Alternative Paths to Computing Careers and Their Role in Broadening Participation	NA:NA:NA:NA	2018
Ursula Wolz:Lina Battestilli:Bruce Maxwell:Susan Rodger:Michelle Trim	The New York Times published an op-ed by Anita Hill [3] suggesting that women in tech consider class action to remedy the gender bias that is increasingly being reported in the mass-media. This panel raises the question "what are we doing in undergraduate programs to reduce the 'Mad Men', 'Brogrammer' culture she describes that is increasingly being reported in the popular press. Part of our mission as educators is to develop professional behavior so that our students entering the workforce not only understand what it means to act professionally, but understand that it is their responsibility to actively push back on the existing bias within the tech culture. As moderator Ursula Wolz brings a depth of insight from 40 years of industrial and academic experience, including a National Science Foundation project to broaden participation in computing [5]. She does not believe this problem can be solved through quantitative data collection on who does well in computer science, but that SIGCSE needs to begin to collect good stories (ala Sally Fincher [2]) on what constitute best practices to support diversity. The panelists present a range of perspectives that have the potential to establish new cultural norms in the single most influential industry in our economy.	Best Practices in Academia to Remedy Gender Bias in Tech	NA:NA:NA:NA:NA	2018
Lucia Dettori:Don Yanek:Helen Hu:Dennis Brylow	NA	The Role of Researcher-Practitioner Partnerships in CS4All: Lessons from the Field	NA:NA:NA:NA	2018
Austin Cory Bart:Kalpathi Subramanian:Ruth E. Anderson:Nadeem Abdul Hamid	Working with real-world data has increasingly become a popular context for introductory computing courses. As a valuable 21st century skill, preparing students to be able to divine meaning from data can be useful to their long-term careers. Because Data Science aligns so closely with computing, many of the topics and problems it affords as a context can support the core learning objectives in introductory computing classes. In many instances, incorporating a real-world dataset to provide concrete context for an activity or assignment can improve student engagement and understanding of the abstract educational content being presented. However, there are many problems inherent to bringing real-world data into introductory courses. How do instructors, with finite amounts of time and energy, find and prepare suitable datasets for their pedagogical needs? Once the datasets are ready, how can students conveniently interact with and draw meaning from the datasets, especially when they are used in complex projects that are typical of later introductory courses? On the other hand, how does an instructor balance the complexities of using real-world datasets in the classroom, making sure that students appreciate the meaningfulness of course activities and their connection to learning objectives? This panel brings together experts with experience in using real-world data in introductory computing courses. Each panelist provides unique perspectives and skills to the problem of preparing, interacting, visualizing, and using pedagogical datasets. This panel should be of particular interest to instructors who are considering integrating current and real-world data into their assignments and projects, and to educational developers who want to create and manage datasets for pedagogical purposes. The panel will follow a conventional format: 5 minutes of introduction, 10 minutes for each panelist to present, and then 30 minutes for audience Q&A.	Preparing, Visualizing, and Using Real-world Data in Introductory Courses	NA:NA:NA:NA	2018
Rafi Santo:Sara Vogel:Leigh Ann DeLyser:June Ahn	The rapid expansion of the Computer Science for All (CSforAll) movement in the United States has catalyzed promising policies, tools, and pedagogies for K-12 universal CS education. It has also created significant challenges for schools and districts, namely, decision-making around the programs, curricula, and professional development that will best align to their communities' broader visions and goals around equitable computing education for all.	Asking "CS4What?" as a Basis for CS4All: Workshop Tools to Support Sustainable K-12 CS Implementations	NA:NA:NA:NA	2018
Brian Harrington	NA	Session details: Paper Session: CS1 #3	NA	2018
Daniel Zingaro:Michelle Craig:Leo Porter:Brett A. Becker:Yingjun Cao:Phill Conrad:Diana Cukierman:Arto Hellas:Dastyni Loksa:Neena Thota	Replication research is rare in CS education. For this reason, it is often unclear to what extent our findings generalize beyond the context of their generation. The present paper is a replication and extension of Achievement Goal Theory research on CS1 students. Achievement goals are cognitive representations of desired competence (e.g., topic mastery, outperforming peers) in achievement settings, and can predict outcomes such as grades and interest. We study achievement goals and their effects on CS1 students at six institutions in four countries. Broad patterns are maintained --- mastery goals are beneficial while appearance goals are not --- but our data additionally admits fine-grained analyses that nuance these findings. In particular, students' motivations for goal pursuit can clarify relationships between performance goals and outcomes.	Achievement Goals in CS1: Replication and Extension	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Jane G. Stout:N. Burçin Tamer:Christine J. Alvarado	Underrepresented students in computing (women and non-White/non-Asian men) are known to feel a weaker sense of belonging than majority students (Asian/White men). This difference is important because a low sense of belonging can lead to disengagement and attrition in education settings. In the current study, we assessed whether and how early formal research experience might narrow this gap in sense of belonging. The sample for this study derives from a longitudinal study on undergraduate students affiliated with computing departments across the United States. We used propensity scores to generate an appropriate sub-sample of students to compare against formal research participants (n = 110 formal research students; n = 110 students with no formal research experience). We found formal research experience during students/ first year was associated with a strong sense of mentor support during their second year. Perceived mentor support predicted a strong sense of belonging for underrepresented students, but not majority students. Importantly, the typical gap in sense of belonging among underrepresented and majority students disappeared among students with high mentor support. Our work suggests that formal research, when introduced early, might promote greater diversity in computing in the long term. We present a model for early undergraduate research, and resources for readers who wish to adopt the model.	Formal Research Experiences for First Year Students: A Key to Greater Diversity in Computing?	NA:NA:NA	2018
Jonathan P. Munson:Joshua P. Zitovsky	There is much interest in predicting student performance in computer programming courses early in the semester to identify weak students who might benefit from targeted support. To this end, we analyzed detailed keystroke transcripts and outputs of compilation attempts during programming activities, both in and out of class. In linear regression models predicting grades, we identified multiple behavioral indicators and performance indicators that explained a significant portion of the variation in final grades using only the data collected within the first three weeks. Because the indicators identify specific behaviors and are generated automatically, they may be used as the basis for interventions instructors may use when counseling weaker students concerning their performance early in the course before they fall too far behind. Furthermore, in contrast with some other automated struggling-student detection models, our predictors are based on generic behaviors and generic performance metrics that can be extended to a wide range of introductory programming contexts. Our models also predict performance on a continuous scale rather than a binary "weak"/"not weak" classification, which would allow instructors to offer interventions to marginal students who want to improve, or to promising students who want to excel.	Models for Early Identification of Struggling Novice Programmers	NA:NA	2018
Jeff Forbes	NA	Session details: Paper Session: Diversity #3	NA	2018
Sathya Narayanan:Kathryn Cunningham:Sonia Arteaga:William J. Welch:Leslie Maxwell:Zechariah Chawinga:Bude Su	CSin3 is a cohort-based, three-year computer science bachelor's degree program that has increased graduation rates of traditionally underrepresented computer science students. A collaborative effort between a community college and a public university, CSin3 provides a clear pathway for upward socio-economic mobility into the high-paying technology industry. CSin3 students are 90% from traditionally underrepresented groups, 80% first-generation, 32% female, and have a three-year graduation rate of 71%, compared to a 22% four-year graduation rate for traditional computer science students. Upon graduation, CSin3 students score similarly on a standardized exam of computer science knowledge as compared to traditional students who graduate in 4 years or more. The first graduates had a job placement rate of 78% within two months of graduation, including positions at large technology companies like Apple, Salesforce, and Uber. By implementing a cohort-based learning community, a pre-defined course pathway, just-in-time academic and administrative support, comprehensive financial aid, and a focus on 21st century skills, the CSin3 program has demonstrated promising results in addressing the capacity, cost, quality, and diversity challenges present in the technology industry.	Upward Mobility for Underrepresented Students: A Model for a Cohort-Based Bachelor's Degree in Computer Science	NA:NA:NA:NA:NA:NA:NA	2018
Nwannediya Ada Ibe:Rebecca Howsmon:Lauren Penney:Nathaniel Granor:Leigh Ann DeLyser:Kevin Wang	In the US, many groups of students are underrepresented in computer science (CS) classes at the K-12 level [23,25]. Many of the activities of TEALS (Technology Education and Literacy in Schools), a national computer science education program, have the potential to impact the diversity of students enrolled in computer science classes, student performance on AP exams, and student attitudes towards CS careers. TEALS works with high schools to build and grow sustainable computer science programs through teaching partnerships between classroom teachers and volunteers who work in the tech industry. In 2016, TEALS initiated a Diversity, Equity, and Inclusion Working Group (DEIWG) to holistically address the overall impact of the program on increasing diversity in CS, including TEALS' approach to: selection of schools, student recruitment efforts into CS courses, recruitment and training of TEALS volunteers, curriculum design and resources, and instructional support of volunteers and teachers. The working group compared national, regional, and state-wide outcomes and demographics to those of TEALS partner schools, students, volunteers, and teachers to identify best practices and areas in need of investment. This paper describes these findings and presents strategies for future work.	Reflections of a Diversity, Equity, and Inclusion Working Group based on Data from a National CS Education Program	NA:NA:NA:NA:NA:NA	2018
Stephanie Ludi:Matt Huenerfauth:Vicki Hanson:Nidhi Rajendra Palan:Paula Garcia	An increasing importance of accessibility awareness and knowledge emanates from a moral imperative and as an employment differentiator. It is important that educational programs have a demonstrated ability to teach these skills. In this paper, we focus on the role that educational courses can play in increasing accessibility awareness for undergraduate students. We review literature indicating that a number of accessibility teaching interventions have been reported; yet the evaluation of their effectiveness has not been conducted in a consistent manner. We report on our 3-semester evaluation of undergraduate students' accessibility awareness and knowledge following a week of accessibility lectures as part of courses on Human-Computer Interaction (HCI), where a subset of students also interact with stakeholders with disabilities during the conduct of the course projects. Gains in awareness and knowledge occur when accessibility lectures were part of the course. These gains are compared across the teams who interacted with a person with a disability and teams with no such interaction. In addition, we provide the test battery developed to measure these skills, to enable other researchers to conduct evaluations of the effectiveness of interventions for teaching inclusive thinking in undergraduate computing at their own institutions.	Teaching Inclusive Thinking to Undergraduate Students in Computing Programs	NA:NA:NA:NA:NA	2018
Ashok Basawapatna	NA	Session details: Paper Session: Elementary #2	NA	2018
Michele Roberts:Kiki Prottsman:Jeff Gray	Much well-deserved attention in K-12 Computer Science (CS) education has focused recently on the successful launch of the College Board's new AP CS Principles course, which is breaking participation records and broadening CS participation. To further leverage the national investment in a successful high school CS program, however, it is important to create, sustain and study a continuous CS pipeline that begins early and spans all grade levels. This experience report articulates the characteristics of Code.org's K-5 CS Fundamentals (CSF) program and summarizes the experiences of adopting the CSF curriculum to support large-scale, university-driven K-5 Professional Development (PD) programs across two states in different geographical regions of the USA. An overview of Code.org's CSF curriculum and PD survey data is provided, followed by a summary of each state's experience. A set of lessons learned offers recommendations for those considering implementation of statewide PD programs in K-5 CS; future plans are discussed to investigate observations from this experience report within a formal research setting.	Priming the Pump: Reflections on Training K-5 Teachers in Computer Science	NA:NA:NA	2018
Cecily Heiner	Robotics can be a meaningful and motivating application of computer science that helps make abstract concepts concrete and visible, but most elementary school robotics thus far has focused on design and after school extra-curricular activities with small groups of select students rather than in-school, school-wide robotics for all the students within a school. This paper describes our experience designing, implementing, and trying to evaluate a robotics curriculum and program for all the students within an elementary school; the primary focus of this paper is scale. We describe challenges and opportunities we experienced as part of this project and reflect on the degree to which they are unique to our relatively small, isolated rural town and the timing of our project. We present data points suggesting that robotics can be effectively and economically implemented in the elementary school curriculum.	A Robotics Experience for All the Students in an Elementary School	NA	2018
Ashish Aggarwal:David S. Touretzky:Christina Gardner-McCune	Over the last decade, CS Education researchers have developed different curricula, resources, and strategies to foster computer science learning in K-12 education. However, there is a lack of research about how elementary school students develop the ability to reason about programs. Reasoning about programs consists of a student's ability to read, write, debug, trace, and predict program behavior. This paper presents results from a think-aloud study of fourth and fifth grade students learning to program in Kodu. The goal of this study was to track students' understanding of how Kodu interprets and executes rules of a program. To understand students' reasoning of program execution, we explicitly taught them the Laws of Kodu computation which govern the decision making and execution process of Kodu rules. We collected students' responses on pre- and post-assessments, and we conducted think-aloud interviews with students where students explained their answers to assessment questions. We found that explicitly teaching students how Kodu rules are interpreted significantly improved their ability to understand the execution of programs and to explain program behavior. The results of this study provide insight into how elementary school students reason about simple programs, and how this ability can be scaffolded.	Demonstrating the Ability of Elementary School Students to Reason About Programs	NA:NA:NA	2018
Shuchi Grover	NA	Session details: Paper Session: K thru 12	NA	2018
Karla Hamlen:Nigamanth Sridhar:Lisa Bievenue:Debbie K. Jackson:Anil Lalwani	Common barriers to broad-based adoption of Computer Science in secondary schools include 1) insufficient numbers of trained teachers who are capable of teaching CS courses in K-12 schools, and 2) a narrow base of students interested in taking CS courses which does not include a large number of females or students from traditionally underrepresented racial groups. In an effort to overcome these obstacles, we developed and employed a teacher professional development program to develop both content and pedagogical strategies to teach Computer Science Principles while also broadening and expanding participation in CS. Teachers were selected for this program in an effort to understand the impact of the intervention with teachers of diverse backgrounds, who teach in a variety of types of schools and with diverse student populations, and with a range of previous Computer Science content knowledge and teaching experience. Teacher content mastery, confidence and attitudes, as well as student content mastery and confidence were assessed at multiple times. Key goals of the program were to develop ability and confidence in programming skills among teachers and students, and to train and encourage teachers to use peer instruction, allowing for a great deal of interaction among students and engagement with the content facilitating the development of expertise among students. Significant findings showed that teachers improved in both knowledge and confidence after taking the workshop, and the gains were evident for their students as well. Their students also demonstrated improvement in both skills and confidence after taking CS Principles, regardless of gender, race, or ethnicity.	Effects of Teacher Training in a Computer Science Principles Curriculum on Teacher and Student Skills, Confidence, and Beliefs	NA:NA:NA:NA:NA	2018
Rui Zhi:Nicholas Lytle:Thomas W. Price	Instructional supports (Supports) help students learn more effectively in intelligent tutoring systems and gamified educational environments. However, the implementation and success of Supports vary by environment. We explored Support design in an educational programming game, BOTS, implementing three different strategies: instructional text (Text), worked examples (Examples) and buggy code (Bugs). These strategies are adapted from promising Supports in other domains and motivated by established educational theory. We evaluated our Supports through a pilot study with middle school students. Our results suggest Bugs may be a promising strategy, as demonstrated by the lower completion time and solution code length in assessment puzzles. We end reflecting on our design decisions providing recommendations for future iterations. Our motivations, design process, and study's results provide insight into the design of Supports for programming games.	Exploring Instructional Support Design in an Educational Game for K-12 Computing Education	NA:NA:NA	2018
Amber Dryer:Nicole Walia:Ankur Chattopadhyay	Today's organizations, including online businesses, use the art of data-driven decision-making i.e. business-intelligence (BI) to benefit from all the data out in the open. Given the current market demand for BI skill-sets, including the knowledge of different sources and tools for data-collection plus processing, today's youth need a basic understanding of data-driven intelligence, and an awareness of big-data related ethics and privacy. However, there has been limited research and development work towards designing an effective educational module in this regard at the K-12 level. We intend to address this particular limitation by presenting a uniquely engaging middle-school learning module based upon a combination of useful topics, like data-mining, predictive-analytics, data-visualization, big-data, ethics and privacy, using the free RapidMiner software-tool. The novelty of our module lies in the use of a GUI-based visual hands-on platform (RapidMiner), a Hollywood movie-theme based educational activity, as well as an added focus on big-data ethics and privacy, and its conceptual mapping to the NSA-GenCyber security-first principles. We discuss and analyze the survey data obtained from over hundred participants through several offerings of our module as an educational workshop through our Google-IgniteCS and NSA-GenCyber programs. The collected learning-analytics data indicate that our module can become a simple yet effective means for introducing data-mining, big-data, ethical and privacy issues, and GenCyber security-first principles at the middle-school level. Our results show prospects of motivating middle-school participants towards further learning of topics in data-science, data-ethics and data-security, which is necessary today in a variety of professions.	A Middle-School Module for Introducing Data-Mining, Big-Data, Ethics and Privacy Using RapidMiner and a Hollywood Theme	NA:NA:NA	2018
Swapneel Sheth	NA	Session details: Paper Session: Pair Programming	NA	2018
Onni Aarne:Petrus Peltola:Juho Leinonen:Arto Hellas	We explore educational pair programming in a university context with high student autonomy and individual responsibility. The data comes from two separate introductory programming courses with optional pair programming assignments. We analyze lab attendance and course outcomes to determine whether students' previous programming experience or gender influence attendance. We further compare these statistics to self-reported data on study motivation, study strategies, and student enjoyment of pair programming. The influence of grading systems on pair programming behavior and course outcomes is also examined. Our results suggest that gender and previous programming experience correlate with participation in pair programming labs. At the same time, there are no significant differences in self-reported enjoyment of pair programming between any of the groups, and the results from commonly used study motivation and strategy questionnaires provide little insight into students/ actual behavior.	A Study of Pair Programming Enjoyment and Attendance using Study Motivation and Strategy Metrics	NA:NA:NA:NA	2018
Mehmet Celepkolu:Kristy Elizabeth Boyer	Collaborative learning frameworks such as pair programming have been shown to be highly effective for computer science learning. Skeptics of this approach often refer to the risk of one student relying on a stronger partner to solve the problem. Lending weight to this skepticism, many theories emphasize the importance of learner autonomy. Therefore, it is reasonable to hypothesize that a hybrid pair programming paradigm-one in which partners work together side-by-side at two separate computers and produce their own versions of the code-may be even more effective than traditional pair programming. To investigate this hypothesis, we conducted a study in which 200 introductory programming students were paired and then placed in either a pair-programming condition (two students at one computer) or a hybrid condition (two students at two computers). The results show that traditional pair programming fostered comparable learning gains as measured on an individual post-test, and significantly higher student satisfaction, than the hybrid approach. These findings highlight the importance of not just collaborating, but working together on shared code, for novice computer science learners.	The Importance of Producing Shared Code Through Pair Programming	NA:NA	2018
Mehmet Celepkolu:Kristy Elizabeth Boyer	Pair programming is a successful approach for improving student performance, retention, and motivation toward computer science. However, not all students benefit equally from this approach. An open challenge for researchers is to develop a deep understanding of the student experience in pair programming, particularly for novices. This paper reports on a study of the cognitive, affective, and social experiences of students in an introductory programming course in which pair programming was utilized throughout the term. Students reported their experience through reflection essays written at the end of the semester. We analyzed 137 student reflection papers in a mixed-methods study. The quantitative results show that overall, students have a positive attitude toward pair programming. Looking more deeply at the reflection essays, thematic analysis revealed themes centered around cognitive, affective, and social dimensions. In the cognitive dimension, students expressed the importance of exposure to different ideas and developing deeper understanding. Affectively, students reported that working with a partner reduced their frustration and increased their confidence. Students also pointed out the social benefits of forming friendships and helpful connections. These results highlight the powerful benefits of pair programming and point to ways in which this collaborative approach could be adapted to better meet student needs.	Thematic Analysis of Students' Reflections on Pair Programming in CS1	NA:NA	2018
Hubert Johnson	NA	Session details: Paper Session: Professional Development	NA	2018
Mark Meysenburg:Tessa Durham Brooks:Raychelle Burks:Erin Doyle:Timothy Frey	The DIVAS (Digital Imaging and Vision Applications in Science) project addresses workforce challenges in science, technology, engineering, and mathematics by creating a pedagogical and programmatic "on-ramp" that empowers natural science majors to engage in authentic computational problems as members of skilled, professional teams. We are developing and testing institutional practices and curricular innovations that engage and train STEM undergraduate students to use Python programming, and image processing in particular, in their undergraduate research projects. Students are recruited into the DIVAS program in the first semester of their first year. DIVAS scholars and other participating students can experience a variety of interventions including: 1) a one-credit DIVAS seminar exploring several imaging and computing topics; 2) image capture and analysis modules in introductory- or upper-level biology and chemistry courses; 3) a week-long, intensive coding bootcamp that introduces bash, git, Python programming, and the OpenCV image processing library; 4) pair programming exercises to solve genuine morphometric and colorimetric problems; 5) an extended summer research project involving image processing; and 6) weekly code reviews to check on progress and provide guidance. The DIVAS projects measures the impact of these interventions on students' self-reported efficacy in using computation to solve problems, their attitudes towards computation, and their computational thinking skills, using both established and newly developed instruments. Our first year results show that multiple interventions have had significant positive impact on students' self-efficacy and interest in using computing in their future careers, and certain computational thinking skills.	DIVAS: Outreach to the Natural Sciences through Image Processing	NA:NA:NA:NA:NA	2018
Yunjeong Chang:Leslie Cintron:James P. Cohoon:Luther Tychonievich	Although computing occupations increasingly dominate the workforce, the computing discipline does not attract sufficient and diverse students to meet societal workforce needs. LIGHTHOUSE FOR CS is a collection of professional development efforts seeking to increase computing diversity through faculty education. LIGHTHOUSE CC provides an open online course extending a decade of successful face-to-face TAPESTRY workshops. LIGHTHOUSE CC targets community college computing faculty, building off of research suggesting that online professional development can be as effective as in-person professional development. We believe it is one of the first attempts to validate that finding for community college computing faculty. The paper examines participant motivations and perceptions of online and face-to-face diversity-focused professional development for community college computing educators. To meet the needs of the community college computing faculty, we began with a needs assessment survey. Its feedback and prior face-to-face workshop experiences were integrated with several instructional design principles and theories to engage community college faculty, notably the ARCS motivational design model (Keller, 1987) and the Community of Practice model (Wenger, 1998). Project analyses involved both surveys and focus group interviews. The paper also provides directions for future improvements and suggestions for others who are considering online or diversity-focused professional development.	Diversity-focused Online Professional Development for Community College Computing Faculty: Participant Motivations and Perceptions	NA:NA:NA:NA	2018
Beth A. Quinn:Wendy M. DuBow:Jamie Huber Ward	This paper describes the creation of a virtual, interactive professional development course to build the capacity of community college faculty to recruit and retain women and underrepresented minorities in computing programs. The project was designed in response to community college faculty reporting need for practical methods to broaden participation in their programs and their feelings of isolation from like-minded faculty. The 12-session prototype has been piloted with eight community college faculty. The finalized PD will be available as free, standalone web-based modules. The course includes instruction on research-based practices for recruiting and retaining women and underrepresented minorities in computing. Evaluation mechanisms are developed to assess the impacts of the PD on faculty attitudes and teaching practices, and the effect of changed practices on introductory computing students' engagement and persistence. Here we report preliminary findings from interviews. The project outputs will include polished online content modules, validated student survey instruments, a classroom observation protocol, and student and faculty interview instruments.	Broadening Participation in Computing via Professional Development for Community College CS/IT Faculty	NA:NA:NA	2018
S. Monisha Pulimood	NA	Session details: Paper Session: Software Engineering	NA	2018
Sarah Heckman:Jason King	Situated learning theory supports engaging students with materials and resources that reflect professional standards and best practices. Starting with our introductory courses, we incorporate situated learning to support student engagement in software engineering practices and processes through the use of industrial strength open-source tools in several classes throughout the undergraduate computer science curriculum at NC State University. Additionally, these tools support several logistical and educational needs in computer science classrooms, including assignment submission systems and automated grading. In this tools paper, we present our Canary Framework for supporting software engineering practices through the use of Eclipse for development; GitHub for submission and collaboration; and Jenkins for continuous integration and automated grading. These tools are used in five of ten core courses by more than 3000 students over ten semesters. While the use of these tools in education is not unique, we want to share our model of using professional tools in a classroom setting and our experiences on how this framework can support multiple courses throughout the curriculum and at scale.	Developing Software Engineering Skills using Real Tools for Automated Grading	NA:NA	2018
Gene Fisher:Corrigan Johnson	In 2016 we introduced a tool called "Spest// for the automated generation of software tests from formal specifications. That introductory presentation of Spest described its basic functionality and our initial results of using Spest in software engineering courses. Here we describe further experience of using Spest in classes, including qualitative and quantitative analyses of its effectiveness. The analysis consists of a qualitative survey of students/ experience, a quantitative study of the readability of Spest-generated tests, and a quantitative analysis that compares the coverage quality of hand-written student tests with Spest-generated tests. The results of the analyses are mixed. The experience survey finds that a majority of students did not enjoy using Spest nor fully understand how to use it effectively. The results of the readability study show that Spest-generated tests are not as readable for students as tests written by human experts, however the differences in readability are not extreme. Finally, the results of the coverage comparison are good, showing that Spest-generated tests achieve better code coverage than students/ hand-written tests. Given the mixed results, we discuss how we are moving forward to make Spest a more usable and effective tool.	Specification-Based Testing in Software Engineering Courses	NA:NA	2018
Maria Lydia Fioravanti:Bruno Sena:Leo Natan Paschoal:Laíza R. Silva:Ana P. Allian:Elisa Y. Nakagawa:Simone R.S. Souza:Seiji Isotani:Ellen F. Barbosa	Software Engineering (SE) is an important topic to be taught in Computer Science courses. However, teaching of theoretical concepts with no link to their practical applications or no examples in the student's context may discourage learning, justifying why teaching and learning are great challenges of education in universities. In attempt to bridge such gap, several approaches have been proposed and applied to improve teaching and learning SE such as project based learning (PBL), a well-known approach already applied to teach SE. Nevertheless, there's a lack of understanding about how to better apply PBL and how to take advantage of this approach, for future use. There is also a lack of experience report describing how to use, its challenges and difficulties, what could be hampering to widely adopt it. We present our experience applying a PBL approach combined with project management to create an environment considering aspects such as dealing with managers and real stakeholders. The goal is to bring students closer to the reality of developing a software project in the business context. Our experience indicates positive results on the adoption of a PBL approach. In general, students were enthusiastic and positive about the use of this approach, the presence of a manager and the importance of using real-world problems with real stakeholders.	Integrating Project Based Learning and Project Management for Software Engineering Teaching: An Experience Report	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Crystal Furman:Timothy Gallagher:Richard Kick	With the launch of the new AP Computer Science Principles course many high school and higher education institutions are curious how these two courses will work together and what credit each course should be awarded. In this session, participants will be presented with a comparison of these two courses, an overview of existing credit and placement policies, and hear from two high school teachers who have successfully implemented both of these courses at their schools. Higher Ed faculty will have an opportunity to share how their individual schools are awarding credit or placement for these courses.	AP Computer Science: Two Complementary Courses	NA:NA:NA	2018
Joel C. Adams:Richard A. Brown:Jalal Kawash:Suzanne J. Matthews:Elizabeth Shoop	The Raspberry Pi (R-Pi) is a single board computer priced at 35 USD -- less than the cost of many textbooks. The current model (3B) includes a quad-core ARM 64-bit CPU, 1GB of RAM, a GPU, and numerous communication ports, including USB, HDMI, Ethernet, WiFi and Bluetooth. This combination of low cost and high functionality creates many new pedagogical possibilities for CS educators, ranging from using the R-Pi to teach assembly language to using it as a multiprocessor. Relatedly, mathematics educators have produced an extensive literature on the use of pedagogical tools known as "manipulatives" that have been shown to be effective at starting students through a "concrete, representational, abstract" progression of understanding of an abstract topic. We believe that by using the R-Pi as a manipulative, this same "concrete, representational, abstract" progression can be used to help CS students master many topics that are often taught as abstractions. By providing a "concrete" foundation on which to build, a single board computer like the R-Pi can provide the first step in helping students build mental models of such abstractions, and thus enhance student learning. Experience also indicates that many students find the R-Pi to be a fun and enjoyable way to learn about these abstractions. In this panel session, four CS educators will share their experiences using the R-Pi in their courses, followed by a Q&A conversation between the audience and the panelists.	Leveraging the Raspberry Pi for CS Education	NA:NA:NA:NA:NA	2018
Amardeep Kahlon:Deborah Boisvert:Louise Ann Lyon:Melanie Williamson:Cheryl Calhoun	NA	The Authentic Inclusion and Role of Community Colleges in National Efforts to Broaden Participation in Computing	NA:NA:NA:NA:NA	2018
Adrienne Decker:Monica M. McGill:Jason Ravitz:Eric Snow:Rebecca Zarch	With the growth of computing education research in the last decade, we have found a call for a strengthening of empiricism within the computing education research community. Computer science education researchers are being asked to focus not only the innovation that the research creates or the question it answers, but also on validating the claims we made about the work. In this session, we will explore the relationship between evaluation and computing education research and why it is so vital to the success of the many computing education initiatives underway. It will also help computing faculty engaged in computer science education research understand why it is essential to integrate evaluation and validation from the very first conceptual stages of their intervention programs.	Connecting Evaluation and Computing Education Research: Why is it so Important?	NA:NA:NA:NA:NA	2018
Helen H. Hu:Clifton Kussmaul:Lisa M. Olivieri	As a form of active learning, POGIL (Process Oriented Guided Inquiry Learning) engages students by grouping them in teams to work collaboratively through activities and construct their own understanding of computer science content. POGIL activities are carefully designed to foster student learning by guiding students through a learning cycle of exploration, concept invention and application. Computer science assignments typically emphasize application questions and problems, where students are expected to apply the new concept to different applications (e.g., writing multiple programs involving while-loops). In contrast, POGIL activities require students to first explore a model, possibly by asking critical thinking questions about some code and its output, before leading students to recognize patterns in the model, thereby helping them to form a better understanding of the new CS concept. Only after students have explored and developed an understanding of the concept, do the POGIL activities proceed to more traditional application questions. Studies of POGIL's effectiveness in STEM classrooms have generally found that (1) attrition is lower for POGIL than for traditional courses; (2) content mastery is greater than for traditional instruction; (3) students prefer POGIL over traditional methods; (4) students have more positive attitudes about the course and the instructors; and (5) learning skills appear to improve during the course. These advantages have drawn many Computer Science instructors to adopt POGIL in their classrooms, but very few instructors are developing POGIL activities for Python, even though Python lends itself well to learning cycle questions as an interpreted language. All CS instructors, but especially Python instructors, can benefit from adding exploration and concept invention questions to assignments before asking application questions.The growing popularity of Jupyter Notebooks makes it even easier for instructors to embed learning cycle questions in Python (or any other Jupyter supported programming language). This special session will provide SIGCSE attendees the opportunity to experience a CS POGIL activity for themselves, before introducing attendees to the learning cycle. Attendees will be view several examples of exploration and concept invention questions, which should be helpful to anyone creating CS assignments, not just POGIL instructors. The presenters will provide a short tour of two collections of POGIL activities in Python before the question and answer period.	Special Session: Exploring and Discovering Concepts via POGIL	NA:NA:NA	2018
Stan Kurkovsky	NA	Session details: Paper Session: Active Learning #1	NA	2018
Lijuan Cao:Audrey Rorrer	It has been long established that discrete structures is an important and foundational component of the computer science curriculum. However, the topics covered in this course tend to be more abstract than those covered in most other introductory computer science courses. This leads to additional challenges for instructors and students. To deal with these challenges, we introduce a new pedagogy for teaching this course. Our approach is based on a variant of the flipped classroom paradigm and is comprised of four main components: before class preparatory work, in-class mini lecture, in-class team based problem solving activities, and weekly individual assignments. In this paper, we discuss these components in detail. Our approach is informed by several cutting-edge teaching methodologies including active learning, light weight teams, and gamification. We conclude the paper by discussing the results of a survey taken by the students and a summary of the grades attained in the class. These show that our approach was well received by the students and has led to good learning outcomes.	An Active and Collaborative Approach to Teaching Discrete Structures	NA:NA	2018
Saúl A. Blanco	In this paper, we describe the active learning and collaborative learning activities implemented in an introductory mid-size discrete mathematics course for Informatics majors. Active learning and collaborative learning have been used to increase student engagement, but incorporating them in smaller classes is a completely different experience from doing so in larger classes. We offer some tips and suggestions on how to incorporate these activities in larger classes including the utilization of undergraduate teaching assistants during lectures, and allowing students to work together on worksheets during lectures with the help of the teaching staff. Course questionnaires collected from five different sections that ran in the spring, summer, and fall of 2016 with around 60 to 70 students suggest that this approach has been well-received. Furthermore, the DFW rate (the proportion of students that received a D, F, or withdrew from the class) of these sections was lower than the DFW rate of other sections that shared the same evaluations (exams, homework assignments, and quizzes) and grading scheme to determine the final letter grade.	Active Learning in a Discrete Mathematics Class	NA	2018
Darina Dicheva:Austin Hodge	Data Structures is a fundamental Computer Science discipline, challenging students/ abstract thinking, problem solving and programming skills. In this paper, we present an educational game intended to explicate several features hindering students/ understanding of the data structure Stack on conceptual and practical level. The game targets all three aspects of teaching data structures: conceptualization, application and implementation. These aspects are embodied as three parts of the game tied together through a meaningful storyline. The application part targets the use of stacks to solve problems, such as converting arithmetic expressions from infix to postfix notation and evaluating postfix and infix expressions. The implementation part involves solving Parson/s problems and writing Java code for implementing the methods of the Stack class. The results of the conducted evaluation of the game show statistically significant learning gains for the students and a strong positive attitude towards this type of active learning.	Active Learning through Game Play in a Data Structures Course	NA:NA	2018
Patricia Ordóñez	NA	Session details: Paper Session: CS Education Around the Globe	NA	2018
Tom Neutens:Francis Wyffels	The Progra-MEER professional development workshop is a one year program organized collaboratively by the computer science departments of three Flemish universities. It aims to improve the computer science knowledge of in service teachers in a physical computing context. Since Flemish schools are starting to implement STEM in their schools, the program links computer science to STEM and project based learning. This paper gives a description of the design and implementation of the program while providing an analysis of its strengths and weaknesses. We show that the program leads to the successful implementation of different physical computing projects. However, it needs to further support the practical project implementations while spending more attention on assessment and context definition. Additionally, the program has to invest more effort in creating a sustainable community of practice so knowledge and experiences can still be shared even after the program has finished.	Bringing Computer Science Education to Secondary School: A Teacher First Approach	NA:NA	2018
Karsten Lundqvist:Craig Anslow:Michael Homer:Kris Bubendorfer:Dale Carnegie	The Information and Communications Technology (ICT) industry in New Zealand is growing rapidly. The traditional university courses are preparing an insufficient number of graduates to sustain the growth. Many of the traditional graduate students lack key soft skills that are important in team based software development. This paper reports on the development of a conversion Master of Software Development degree. The students are all graduates with little or no computer science degrees, are taught key programming skills, with a focus on agile development. The programme begins by focusing on individual programming skills through solving problems. Later industrial partners are engaged by providing industrial problems to agile teams of students. The industrial partners are active partners in the agile teams as product owners. By solving the problems, the students develop both technical and non-technical skills while utilizing the skills obtained from previous studies. The results from the first year of the programme are encouraging. A key result is that a high number of students found work in paid IT positions before graduating. The main issue of the first year was introducing too many topics at the same time, over-assessment, not enough communication and contact time, little opportunity for the students to make their own experiences, and learning by making mistakes. The programme has been changed for the next year/s cohort to introduce less topics at once, provide time and space for learning, and a redesign of scheduling assessments.	An Agile Conversion Masters Degree Programme in Software Development	NA:NA:NA:NA:NA	2018
Simon:Raina Mason:Tom Crick:James H. Davenport:Ellen Murphy	Parallel surveys of introductory programming courses were conducted in Australasia and the UK, with a view to examining the programming languages being used, the preferred integrated development environments (if any), and the reasons for these choices, alongside a number of other key aspects of these courses. This paper summarises some of the similarities and differences between the findings of the two surveys. In the UK, Java is clearly the dominant programming language in introductory programming courses, with Eclipse as the dominant environment. Java was also the dominant language in Australasia six years ago, but now shares the lead with Python; we speculate on the reasons for this. Other differences between the two surveys are equally interesting. Overall, however, there appears to be a reasonable similarity in the way these undergraduate courses are conducted in the UK and in Australasia. While the degree structures differ markedly between and within these regions -- a possible explanation for some of the differences -- some of the similarities are noteworthy and have the potential to provide insight into approaches in other regions and countries.	Language Choice in Introductory Programming Courses at Australasian and UK Universities	NA:NA:NA:NA:NA	2018
Tracy Lewis-Williams	NA	Session details: Paper Session: Data Structures	NA	2018
Leo Porter:Daniel Zingaro:Cynthia Lee:Cynthia Taylor:Kevin C. Webb:Michael Clancy	Establishing learning goals for a course allows instructors to design course content to address those goals, helps students to focus their learning appropriately, and enables researchers to assess learning of those goals. In this work, we propose six learning goals for a topic prevalent in CS2 courses: Basic Data Structures. These learning goals arise from reviewing several CS2 courses at a variety of institutions, surveying faculty experts who commonly teach CS2, and meeting and working closely with these experts. We outline our process for creating learning goals, identify important topics underlying these goals, and provide examples of how the goals developed on the path to consensus. We also document that the term "CS2" does not have a unified interpretation within the CS education community and describe how this hurdle influenced our decision to focus on Basic Data Structures.	Developing Course-Level Learning Goals for Basic Data Structures in CS2	NA:NA:NA:NA:NA:NA	2018
Matthew Mcquaigue:David Burlinson:Kalpathi Subramanian:Erik Saule:Jamie Payton	In recent years, interactive textbooks have gained prominence in an effort to overcome student reluctance to routinely read textbooks, complete assigned homeworks, and to better engage students to keep up with lecture content. Interactive textbooks are more structured, contain smaller amounts of textual material, and integrate media and assessment content. While these are an arguable improvement over traditional methods of teaching, issues of academic integrity and engagement remain. In this work we demonstrate preliminary work on building interactive teaching modules for data structures and algorithms courses with the following characteristics, (1) the modules are highly visual and interactive, (2) training and assessment are tightly integrated within the same module, with sufficient variability in the exercises to make it next to impossible to violate academic integrity, (3) a data logging and analytic system that provides instantaneous student feedback and assessment, and (4) an interactive visual analytic system for the instructor to see students/ performance at the individual, sub-group or class level, allowing timely intervention and support for selected students. Our modules are designed to work within the infrastructure of the OpenDSA system, which will promote rapid dissemination to an existing user base of CS educators. We demonstrate a prototype system using an example dataset.	Visualization, Assessment and Analytics in Data Structures Learning Modules	NA:NA:NA:NA:NA	2018
Jeffrey Young:Eric Walkingshaw	Explanations of data structures and algorithms are complex interactions of several notations, including natural language, mathematics, pseudocode, and diagrams. Currently, such explanations are created ad hoc using a variety of tools and the resulting artifacts are static, reducing explanatory value. We envision a domain-specific language for developing rich, interactive explanations of data structures and algorithms. In this paper, we analyze this domain to sketch requirements for our language. We perform a grounded theory analysis to generate a qualitative coding system for explanation artifacts collected online. This coding system implies a common structure among explanations of algorithms and data structures. We believe this structure can be reused as the semantic basis of a domain-specific language for creating interactive explanation artifacts. This work is part of our effort to develop the paradigm of explanation-oriented programming, which shifts the focus of programming from computing results to producing rich explanations of how those results were computed.	A Domain Analysis of Data Structure and Algorithm Explanations in the Wild	NA:NA	2018
Manuel Perez-Quinones	NA	Session details: Paper Session: High School #1	NA	2018
Christine Alvarado:Gustavo Umbelino:Mia Minnes	Many college computer science majors have little or no pre-college computing experience. Previous work has shown that inexperienced students under-perform their experienced peers when placed in the same introductory courses, and are more likely to drop out of the CS program. However, not much is known about what, if any, differences may persist beyond the introductory sequence for students who remain in the program. We conducted a study across all levels of a CS program at a large public university in the United States to determine whether grade differences exist between students with and without pre-college experience, and if so, for what types of experiences. We find significant grade differences in courses at all levels of the program. We further find that students who took AP Computer Science receive significantly higher average grades---by up to a half grade---in nearly all courses we studied. Pre-college experience appears to have a weaker relationship with retention and with low-stakes assessment grades. We discuss the limitations of these findings and implications for high school and college level CS courses and programs.	The Persistent Effect of Pre-College Computing Experience on College CS Course Grades	NA:NA:NA	2018
Kevin Robinson:Keyarash Jahanian:Justin Reich	Equity is a core component of many computer science teacher preparation programs. One promising approach is addressing unconscious bias in teachers, which may impact teacher expectations and interactions with students. Since early intervention literature indicates that asking individuals to suppress biases is counterproductive, our work uses online interactive case studies as practice spaces to focus on teaching decisions that may be impacted by unconscious bias. Our initial findings indicate that when embedded within teacher preparation programs, practice spaces produce rich learning opportunities, and our analysis yields insights into how beliefs or biases may interfere with principles of equity like disrupting preparatory privilege.	Using Online Practice Spaces to Investigate Challenges in Enacting Principles of Equitable Computer Science Teaching	NA:NA:NA	2018
Yvonne Kao:Katie D'Silva:Aleata Hubbard:Joseph Green:Kimkinyona Cully	Pedagogical content knowledge (PCK) is specialized knowledge necessary to teach a subject. PCK integrates subject-matter content knowledge with knowledge of students and of teaching strategies so that teachers can perform the daily tasks of teaching. Studies in mathematics education have found correlations between measures of PCK and student learning. Finding robust, scalable ways for developing and measuring computer science (CS) teachers' PCK is particularly important in CS education in the United States, given the lack of formal CS teacher preparation programs and certifications. However, measuring pedagogical content knowledge is a challenge for all subject areas. It can be difficult to write assessment items that elicit the different aspects of PCK and there are often multiple appropriate pedagogical choices in any given teaching scenario. In this paper, we describe a framework and pilot data from a questionnaire intended to elicit PCK from teachers of high school introductory CS courses and we propose future directions for this work.	Applying the Mathematical Work of Teaching Framework to Develop a Computer Science Pedagogical Content Knowledge Assessment	NA:NA:NA:NA:NA	2018
Abby Funabiki	NA	Session details: Paper Session: K thru 8 #1	NA	2018
Moran Tsur:Natalie Rusk	In this paper, we present our experience developing introductory coding environments called Scratch Microworlds. These interactive environments enable learners to get started with coding by creating projects, rather than solving puzzles. The primary educational goal of these microworlds is to engage learners (ages 8 to 14) who otherwise may not be drawn to coding. The microworlds are simplified versions of the Scratch coding environment that contain a small set of blocks and are designed to encourage exploration and experimentation. They are also interest-based, so learners can choose to work on a topic that is motivating to them (such as dance, music, or soccer). We present three main design principles and related challenges that we addressed through the iterative process of developing Scratch Microworlds: (1) how to simplify initial experiences while still supporting creativity, (2) how to provide scaffolding while maintaining learners' agency, and (3) how to provide starting points that spark rather than limit the imagination. We share observations and feedback from workshops with children and educators, which informed our iterative design process. We conclude by considering next steps for providing more entry points into coding that support children as creative thinkers.	Scratch Microworlds: Designing Project-Based Introductions to Coding	NA:NA	2018
Meg J. Ray:Maya Israel:Chung eun Lee:Virginie Do	Despite the proliferation of K-12 computer science (CS) programs and implementation of "CS for All" initiatives in U.S. schools, little research has been conducted on effective pedagogical approaches in K-12 CS. Even less research has focused on meeting the needs of students with disabilities. This paper presents findings from a qualitative case study examining the experiences of teachers who taught CS classes that included students with disabilities. The goal of this study was to identify pedagogical approaches that the teachers used to meet the needs of all students. Results indicated that teachers implemented three primary instructional strategies to address the needs of students with disabilities including facilitating student collaboration, using the Universal Design for Learning (UDL) framework, and using explicit instruction to teach CS concepts.	A Cross-Case Analysis of Instructional Strategies to Support Participation of K-8 Students with Disabilities in CS for All	NA:NA:NA:NA	2018
Philip Sheridan Buffum:Kimberly Michelle Ying:Xiaoxi Zheng:Kristy Elizabeth Boyer:Eric N. Wiebe:Bradford W. Mott:David C. Blackburn:James C. Lester	The K-12 Computer Science Framework has established that students should be learning about the computer science concept of variables as early as middle school, although the field has not yet determined how this and other related concepts should be introduced. Secondary school computer science curricula such as Exploring CS and AP CS Principles often teach the concept of variables in the context of algebra, which most students have already encountered in their mathematics courses. However, when strategizing how to introduce the concept at the middle school level, we confront the reality that many middle schoolers have not yet learned algebra. With that challenge in mind, this position paper makes a case for introducing the concept of variables in the context of middle school science. In addition to an analysis of existing curricula, the paper includes discussion of a day-long pilot study and the consequent teacher feedback that further supports the approach. The CS For All initiative has increased interest in bringing computer science to middle school classrooms; this paper makes an argument for doing so in a way that can benefit students' learning of both computer science and core science content.	Introducing the Computer Science Concept of Variables in Middle School Science Classrooms	NA:NA:NA:NA:NA:NA:NA:NA	2018
Julie Zelenski	NA	Session details: Paper Session: Nifty Session	NA	2018
Nick Parlante:Julie Zelenski:Ben Stephenson:Ali Malik:Phil Ventura:Michael Guerzhoy:David Reed:Josh Hug	I suspect that students learn more from our programming assignments than from our much worried-over lectures, with their slide transitions and attempts at live coding in lecture. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Jan. Plane:Rebecca Zarch:Marie desJardins:Dianne O'Grady-Cunniff:Scott Nichols:Pat Yongpradit	NA	Maryland Computing Education Expansion: From Grassroots to the MCCE	NA:NA:NA:NA:NA:NA	2018
Michael E. Caspersen:Judith Gal-Ezer:Enrico Nardelli:Jan Vahrenhold:Mirko Westermeier	Recent years have seen an increase in activities geared towards making Computer Science courses available to all K-12 students. However, due to administrative regulations, such activities and their implementation often need to be localized on a national or even local context; these constraints, often paired with subtle but important terminology differences, hinder those wanting to compare the status quo across the boundaries of administrative units and to draw on experiences made elsewhere.	The CECE Report: Creating a Map of Informatics in European Schools	NA:NA:NA:NA:NA	2018
Diana Burley:Matt Bishop:Siddharth Kaza:David S. Gibson:Scott Buck:Allen Parrish:Herb Mattord	In this special session, members of the Joint Task Force (JTF) on Cybersecurity Education will provide an overview of the CSEC2017 curricular guidelines (finalized in December 2017) and engage session participants in a discussion of the curricular framework and body of knowledge. The session will conclude with an interactive panel discussion on implementing the curricular guidance.	Special Session: Joint Task Force on Cybersecurity Education	NA:NA:NA:NA:NA:NA:NA	2018
Adrienne Decker:Monica M. McGill:Leigh Ann DeLyser:Beth Quinn:Miles Berry:Kathy Haynie:Tom McKlin	Over the last few years, a number of repositories of information relevant to the computing education community have come online, each with different content and purpose. In this special session, we present an overview of these repositories and the content that each provides. Demonstrations of the functionality of the repositories will be shown and attendees are encouraged to come with their questions and suggestions for improvement if they are currently users of the repositories.	Repositories You Shouldn't Be Living Without	NA:NA:NA:NA:NA:NA:NA	2018
Chris Mayfield	NA	Session details: Paper Session: Active Learning #2	NA	2018
Ricardo Caceffo:Guilherme Gama:Rodolfo Azevedo	We present our experience in a Computer Science (CS) introductory course, where three teaching practices were implemented and compared: lectured-based learning, problem-based learning, and peer instruction. We chose Information Systems, a first-term undergraduate course, for this study. It overviews a variety of topics in CS, such as algorithms, data structures and programming logic. We initially conducted interviews with previous instructors, who assisted in the collection of data, requirements, and needs pertaining to both students and instructors. We also carried out a survey among students enrolled in the program, in order to identify suggestions on how the classes could become more dynamic and motivating. In sequence, the experiment was designed to format and evaluate classes in the chosen paradigms. We focused on assessing and analyzing how the students' motivation and learning process were affected, as well as how difficult it was for instructors to prepare classes and how much time they expended in doing so. Results indicate that a paradigm shift from traditional teaching is not only expected by students and instructor; it is well received, and had a positive influence on the students' learning and motivation. We also found, however, that the proposed changes brought on an unwelcome overhead for the instructors, as additional time and effort are required to implement such practices.	Exploring Active Learning Approaches to Computer Science Classes	NA:NA:NA	2018
Shannon Duvall:Dugald Ralph Hutchings:Robert C. Duvall	Pedagogical approaches abound in computer science. Common approaches include flipped classrooms, active learning, gamification, and the traditional lecture-based approach. There are also a wide variety of computer science learning materials including videos, interactive tutorials, and textbooks (whether presented online or on paper). Instructor choices of approach and materials present a series of trade-offs and may favor some groups of students over others. We propose a method, Scrumage, (SCRUM for AGile Education) in an attempt to overcome the necessity of making trade-offs. We allow each student in a course to select among several pedagogical approaches and sets of materials to fit each individual student's learning needs and desires. Scrumage adapts concepts from the Scrum project management technique. In Scrum, project teams are developing a product for a client. In Scrumage, student teams are developing knowledge with support from the instructor. We define and motivate Scrumage and discuss the implementation and outcomes of the technique in a class at our undergraduate institution.	Scrumage: A Method for Incorporating Multiple, Simultaneous Pedagogical Styles in the Classroom	NA:NA:NA	2018
Qiang Hao:Bradley Barnes:Ewan Wright:Eunjung Kim	This research investigated the impacts of active learning environments and instructional methods adapted to such environments on the academic performance of computer science students. Two consecutive studies involving a total of 267 novice students in the same course were conducted across two different semesters. The course was taught by the same instructor and set up with two different sections. One section was taught in a conventional lecture hall, while the other was taught in an active-learning classroom with adapted instructional methods. Active learning environments and the adapted instructional methods were found to have significantly positive effects on students' learning outcomes. Fine-grained results grouped by major were discussed. The findings of this study demonstrate positive effects of active learning environments in computer science education, thereby adding to the literature on both computer science education and learning environments.	Effects of Active Learning Environments and Instructional Methods in Computer Science Education	NA:NA:NA:NA	2018
Ruth Anderson	NA	Session details: Paper Session: Ethics	NA	2018
Michael Skirpan:Nathan Beard:Srinjita Bhaduri:Casey Fiesler:Tom Yeh	Our paper offers several novel activities for teaching ethics in the context of a computer science (CS) class. Rather than approaches that teach ethics as an isolated course, we outline and discuss multiple ethics education interventions meant to work in the context of an existing technical course. We piloted these activities in an Human Centered Computing course and found strong engagement and interest from our students in ethics topics without sacrificing core course material. Using a pre/post survey and examples from student assignments, we evaluate the impact of these interventions and discuss their relevance to other CS courses. We further make suggestions for embedding ethics in other CS education contexts.	Ethics Education in Context: A Case Study of Novel Ethics Activities for the CS Classroom	NA:NA:NA:NA:NA	2018
Michael Skirpan:Jacqueline Cameron:Tom Yeh	This paper presents Quantified Self: Immersive Data and Theater Experience (QSelf) as a case study in collaborative and interdisciplinary learning and toward a project-based education model that promotes technical art projects. 22 students from several departments engaged in a semester-long effort to produce an immersive theater show centered on ethical uses of personal data, a show that drew more than 240 people over 6 performances. The project was housed out of the computer science department and involved multiple computer science undergraduate and graduate students who had the chance to work with students from the department of theater and dance. By analyzing the technical artifacts students created and post-interviews, we found this project created a novel and productive space for computer science students to gain applied experience and learn about the social impacts of their work while the arts students gained a fluency and understanding around the technical issues presented.	Quantified Self: An Interdisciplinary Immersive Theater Project Supporting a Collaborative Learning Environment for CS Ethics	NA:NA:NA	2018
Jeffrey S. Saltz:Neil I. Dewar:Robert Heckman	Data science is a new field that integrates aspects of computer science, statistics and information management. As a new field, ethical issues a data scientist may encounter have received little attention to date, and ethics training within a data science curriculum has received even less attention. To address this gap, this article explores the different codes of conduct and ethics frameworks related to data science. We compare this analysis with the results of a systematic literature review focusing on ethics in data science. Our analysis identified twelve key ethics areas that should be included within a data science ethics curriculum. Our research notes that none of the existing codes or frameworks covers all of the identified themes. Data science educators and program coordinators can use our results as a way to identify key ethical concepts that can be introduced within a data science program.	Key Concepts for a Data Science Ethics Curriculum	NA:NA:NA	2018
Howard Francis	NA	Session details: Paper Session: High School #2	NA	2018
Robin Flatland:Ira Goldstein:MaryAnne L. Egan:Scott Vandenberg:Meg Fryling:Sharon Small	In this paper, we describe our experiences with a new model for in-service computer science (CS) professional development that embeds college/university faculty into local high school classrooms partnered with a high school teacher. The high schools we have worked with had not previously offered any rigorous CS courses, and the teachers had little or no CS background. Our goal is to provide the development necessary for the high school teachers to be able to independently teach an engaging and rigorous college level CS course. We have leveraged the local nature of our program to ensure an on-going partnership between the high schools and the college/university lasting beyond the structured professional development program. Here we describe our program, the teachers and schools we have worked with, our community building efforts, and our next steps. We also present outcomes and data from our initial evaluations.	Connecting Colleges/Universities and Local High Schools: A New Model for High School CS Teacher Development	NA:NA:NA:NA:NA:NA	2018
Monica M. McGill:Adrienne Decker:Zachary Abbott	This paper provides a detailed examination of pre-college computing activities as reported in three Association of Computing Machinery (ACM) venues (2012-2016). Ninety-two articles describing informal learning activities were reviewed for 24 program elements (i.e., activity components, and student/instructor demographics). These 24 program elements were defined and shaped by a virtual focus group study and the articles themselves. Results indicate that the majority of authors adequately report age/grade levels of participants, number of participants, the type of activity, when the activity was offered, the tools/languages used in the activity, and whether the activity was required or elective. However, there is a deficiency in reporting many other important and foundational program elements, including contact hours of activity participants, clear learning objectives, the prior experience of participants (students and instructors), and many more. In conjunction with previous work, this paper provides recommendations to reduce these deficiencies. The Recommendations for Reporting Pre-College Computing Activities (Version 1.0) are presented to help researchers improve the quality of papers, set a standard of necessary data needed to replicate studies, and provide a basis for comparing activities and activity outcomes across multiple studies and experiences.	Improving Research and Experience Reports of Pre-College Computing Activities: A Gap Analysis	NA:NA:NA	2018
Chris Rhoton	Virginia House Bill 831 (2016) put the state on a path toward K-12 Standards of Learning that include computer science (CS) at all levels. Accompanying the initiative is an effort to define the "State of the State['s]" current CS offerings. The author examined course offerings at 251 of the state's 320 high schools to determine how accessible on-site CS courses were across the state. The results indicate a significant disparity between school systems located in rural communities and small townships when compared with suburban/city locales. Perhaps more striking was the emerging connection between the region where one lives in the state and that individual's access to (or lack thereof) in-person CS instruction. The results also suggest fewer than half the schools in Virginia are running a CS class as of spring 2017 when the study was conducted.	Examining the State of CS Education in Virginia's High Schools	NA	2018
Anya Tafliovich	NA	Session details: Paper Session: Interdisciplinary Perspectives	NA	2018
Sebastien Siva:Tacksoo Im:Tom McKlin:Jason Freeman:Brian Magerko	EarSketch is a curriculum and learning environment designed to engage diverse student populations in introductory computing courses through an approach that connects coding and computational thinking with the composition, production, and remixing of popular music. Prior studies at the high school level have shown significant impacts on student engagement and intention to persist in computing, especially for female students. This paper describes an adaptation of EarSketch for use in an introductory undergraduate-level programming course for non-majors at an open-access four-year college. The paper describes a quasi-experimental study comparing student engagement, content knowledge, and intention to persist between course sections using EarSketch and non-EarSketch flavors of the curriculum, along with a path analysis exploring factors related to student engagement and intention to persist. The findings suggest that STEAM learning interventions such as EarSketch can significantly impact gains in student content knowledge, engagement, and intention to persist across diverse undergraduate student populations.	Using Music to Engage Students in an Introductory Undergraduate Programming Course for Non-Majors	NA:NA:NA:NA:NA	2018
Richert Wang:Vincent Olivieri	This paper describes our experience and observations in creating an experimental interdisciplinary course focusing on sound design and its implementation in computer games. This paper provides a model for others that may want to develop similar courses that focus on interdisciplinary collaboration in this genre. The course was targeted to motivated computer science and sound design / art students, and was not designed as an introduction to computer science. Rather, it was designed as a project course where students can apply topics in sound design by creating a video game within a diverse team, enabling a collaborative learning opportunity. Students applied both creative sound design principles and technical implementation using industry-standard tools such as QLab, Wwise, and Unity.	Sound Design for Video Games: An Interdisciplinary Course for Computer Science and Art Students	NA:NA	2018
Tom McKlin:Brian Magerko:Taneisha Lee:Dana Wanzer:Doug Edwards:Jason Freeman	STEAM education is an approach to engage students in STEM topics by prioritizing personal expression, creativity, and aesthetics. EarSketch, a collaborative and authentic learning tool, introduces students to programming through music remixing, has previously been shown to increase student engagement, and increases learner's intentions to persist in computing. The goal of EarSketch is to broaden participation in computing through a thickly authentic learning environment that has personal and real world relevance in both computational and music domains. This article reports a quasi-experimental study suggesting that an authentic learning environment predicts increased intentions to persist via identity/belongingness and creativity. We ran a path analysis that exposed the creativity subscales, and this analysis reveals that "sharing" is the one creativity sub-construct that predicts increased intention to persist. This work makes a significant contribution to computer science education by revealing how an authentic STEAM curriculum affects student attitudes and knowledge, by presenting scales to measure authenticity and personal creativity, and by discussing how identity/belongingness may affect student success.	Authenticity and Personal Creativity: How EarSketch Affects Student Persistence	NA:NA:NA:NA:NA:NA	2018
James Heliotis	NA	Session details: Paper Session: K thru 8 #2	NA	2018
Francisco J. Gutierrez:Jocelyn Simmonds:Cecilia Casanova:Cecilia Sotomayor:Nancy Hitschfeld	Advancing computational thinking in elementary education has been rapidly gaining attention due to the prospective of developing 21st century skills. However, interventions in this domain risk failure if they do not explicitly address the particular socio-cultural traits of the deployment scenario. This is the case in most countries of Latin America, where computing has not reached a sustainable penetration in K-12 education. In order to bridge this gap, we designed a one-week workshop for advancing computational thinking targeted to 10-12 years old Chilean students with no prior experience in programming. This paper describes our intervention and presents the results of a qualitative study analyzing positive and negative aspects of the experience. Although most participants effectively acquired basic programming skills by the end of the intervention, we also identified several inaccurate views on computing and computer scientists. For instance, computing was mostly perceived as a set of informal experiences rather than a way for enabling creation, automation, and work. The word "hacking" appears to be used as a metaphor for more technical terms, such as "programming" or "algorithm". Finally, negative stereotypical views of computer scientists resulting from the intervention were not as frequent as initial perceptions. These results provide fresh evidence on how to design, adapt, and evaluate computational thinking interventions targeted to K-6 students in Latin America.	Coding or Hacking?: Exploring Inaccurate Views on Computing and Computer Scientists among K-6 Learners in Chile	NA:NA:NA:NA:NA	2018
Shuchi Grover:Satabdi Basu:Patricia Schank	Block-based programming environments such as Scratch, App Inventor, and Alice are a key part of introductory K-12 computer science (CS) experiences. Free-choice, open-ended projects are encouraged to promote learner agency and leverage the affordances of these novice-programming environments that also support creative engagement in CS. This mixed methods research examines what we can learn about student learning from such programming artifacts. Using an extensive rubric created to evaluate these projects along several dimensions, we coded a sample of ~80 Scratch and App Inventor projects randomly selected from 20 middle school classrooms in a diverse urban school district in the US. We present key elements of our rubric, and report on noteworthy trends including the types of artifacts created and which key programming constructs are or are not commonly used. We also report on how factors such as students' gender, grade, and teachers' teaching experience influenced students' projects. We discuss differences between programming environments in terms of artifacts created, use of computing constructs, complexity of projects, and use of features of the environment for creativity, interactivity, and engagement. Our findings will help educators of introductory computing be more cognizant of how best to leverage the programming environments they are using, and what aspects they need to focus on as they attempt to address the learning needs of all in "CS For All."	What We Can Learn About Student Learning From Open-Ended Programming Projects in Middle School Computer Science	NA:NA:NA	2018
Luis Gustavo J. Araujo:Roberto A. Bittencourt:David M.B. Santos	Previous studies have presented approaches to teach programming based on contexts close to students, such as games, robotics, and media. Those contexts may turn learning easier and more motivating. Media manipulation is one of such contexts relevant to teenage students, for their thorough use of image applications and social networks. In this work, we design and evaluate a spiral approach to teach programming to ninth-grade students of a middle school in Brazil's countryside. The approach is contextualized by media, i.e., image creation and manipulation, and we use the Python language with turtle graphics and JES tools to support it. Results point out to the influence of context and tools on learning, significant changes of perception about computing, high motivation to learn how to code, as well as a positive correlation between learning and motivation.	An Analysis of a Media-Based Approach to Teach Programming to Middle School Students	NA:NA:NA	2018
Maria Jump	NA	Session details: Paper Session: Recursion	NA	2018
Ramy Esteero:Mohammed Khan:Mohamed Mohamed:Larry Yueli Zhang:Daniel Zingaro	Recursion and iteration are two key topics taught in introductory Computer Science. This is especially so for CS2 students, as CS2 is the course where recursion is typically taught and where control-flow concepts are solidified. When asked to solve a problem that could feasibly be solved with recursion or iteration, what do CS2 students choose to do? And how does this choice relate to the correctness of their code? This paper provides one answer to these questions through an analysis of student exam responses to a problem on finding deepest common ancestors in trees. We find that 19% of students choose to use iteration, 51% choose recursion, and 16% choose to combine both iteration and recursion. In terms of correctness, we find that students who choose iteration perform better than those who choose recursion and the combination of both. Additionally, we find concern in the number of students who seemingly do not understand what the question is asking. We end the paper with some comments on helping students choose an appropriate control-flow strategy and a discussion of this type of question on a final exam.	Recursion or Iteration: Does it Matter What Students Choose?	NA:NA:NA:NA:NA	2018
Robert Ball:Linda DuHadway:Spencer Hilton:Brian Rague	Teaching CS1 can be daunting. The first courses in the CS curriculum help determine which students will ultimately matriculate into the program. There have been various studies on how to improve motivation and reduce attrition by using visual-based environments and assignments. We performed a year-long study in which we addressed two research questions: 1) How is student performance affected by drag-and-drop GUI assignments when compared to traditional text-based assignments? 2) If given the choice, would students select GUI-based or text-based assignments? For the first question, there was no statistical significance, indicating that student performance is not affected by this visual component. For the second question, we discovered more students selected the text-based assignments over the GUI-assignments. Separating the students into groups based on what they chose revealed that the students that selected the GUI-assignments scored on average one letter grade higher, enjoyed the assignments more and spent less time on the assignments. We recorded the reported motivations behind why students chose to do the GUI-based assignments versus the text-based assignments: Overall, the GUI Group's responses trended toward self-improvement (e.g. more like the real world, improve skills, more challenging) while the Text Group's responses trended toward ease (e.g. easier/simpler, save time). Lastly, at the end of each course we asked the students if, given the hypothetical case in which they were not pressed for time, they would create the Java application with or without a GUI? 93% of the students responded that they would create a GUI Java application.	GUI-Based vs. Text-Based Assignments in CS1	NA:NA:NA:NA	2018
Preston Tunnell Wilson:Kathi Fisler:Shriram Krishnamurthi	We evaluate a notional machine for recursion based on algebraic substitution. To do this, we decompose recursion into a progression of function call patterns, parameter name reuse, and data structure complexity. At each stage, we test students' ability to trace programs using substitution. We evaluate the correctness of their traces along multiple dimensions, finding that students generally do well, and also observe shortcuts and identify misconceptions. For comparison, we also have students trace two problems using a traditional, imperative notional machine. Even though the substitution model is unwieldy to use with compound data, students still perform better with it than with the traditional notional machine.	Evaluating the Tracing of Recursion in the Substitution Notional Machine	NA:NA:NA	2018
Brett Becker	NA	Session details: Paper Session: Undergrad Education: Data Science and Gaming	NA	2018
Austin Cory Bart:Dennis Kafura:Clifford A. Shaffer:Eli Tilevich	Data science keeps growing in popularity as an introductory computing experience, in which students answer real-world questions by processing data. Armed with carefully prepared pedagogical datasets, computing educators can contextualize assignments and projects in societally meaningful ways, thereby benefiting students' long-term professional careers. However, integrating data science into introductory computing courses requires that the datasets be sufficiently complex, follow appropriate organizational structure, and possess ample documentation. Moreover, the impact of a data science context on students' motivation remains poorly understood. To address these issues, we have created an open-sourced manual for developing pedagogical datasets (freely available at https://think.cs.vt.edu/pragmatics). Structured as a collection of patterns, this manual shares the expertise that we have gained over the last several years, collecting and curating a large collection of real-world datasets, used in a dozen of universities worldwide. We also present new evidence confirming the efficacy of integrating data science in an introductory computing course. As a significant extension of our ongoing work, this study not only validates existing positive assessment, but also provides fine-grained nuance to the potential of data science as a motivational educational element.	Reconciling the Promise and Pragmatics of Enhancing Computing Pedagogy with Data Science	NA:NA:NA:NA	2018
Sarah Dahlby Albright:Titus H. Klinge:Samuel A. Rebelsky	As part of the development of a new interdisciplinary initiative in data science that draws from statistics, mathematics, computer science, and the social sciences, we have developed a new introductory CS course that emphasizes data science and that we refer to as DataCSCi. Unlike other introductory data science courses, such as Berkeley's Data 8, our course retains the broad array of concepts necessary not only to introduce programming principles related to data science, but also to prepare students for the second course in our standard introductory computer science sequence. In particular, the course includes coverage of recursion (numeric and structural), unit testing, linked data structures, and other concepts we rely upon in subsequent courses in computer science. At the same time, we introduce students to a wide variety of techniques and approaches that support them in their subsequent work in data science, including techniques for wrangling, cleaning, and visualizing data. We achieve this combination of breadth and depth through two core approaches: We focus on a spiral "use then implement" approach and we focus on a functional model of programming using Scheme/Racket. While Python and R are the most commonly used languages for data science, we find that Scheme works particularly well to introduce students to concepts both complex, like map-reduce, and simple, like list filtering. In this paper, we report on the design of the curriculum, particularly the capstone project and the ways in which we incorporate the burgeoning subfield of data science for social good.	A Functional Approach to Data Science in CS1	NA:NA:NA	2018
David Frye:Mary Lou Maher:Deborah Seehorn:Sam Morris	Broadening participation in computing education for K-12 students requires all levels of the education system to collaborate on five critical needs: 1) creating diverse student opportunities and access to CS activities; 2) empowering highly qualified, highly skilled CS teachers; 3) developing relevant and accessible CS courses and curricula; 4) establishing CS policy and leadership at the local and state levels; and 5) engaging communities and industry partners in broadening participation in CS.	CS4NC Summit 2017: Lessons Learned in Developing a Coordinated Statewide CS For All Initiative	NA:NA:NA:NA	2018
Ria Galanos:Michael Ball:John Dougherty:Joe Hummel:David J. Malan	The pace of technology for use in computing education is staggering. In recent years, the following technologies have completely transformed our teaching: Piazza, GradeScope, YouTube, Google Docs, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part. We love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the configuration options required to make their technology "sing". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any "gotchas" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite "can't live without" technologies as well.	Technology We Can't Live Without!, revisited	NA:NA:NA:NA:NA	2018
Mihaela Sabin:John Impagliazzo:Hala Alrumaih:Cara Tang:Ming Zhang	ACM and IEEE have developed a computing curriculum report titled Information Technology Curricular 2017: Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, also known as IT2017 [4]. The development of this report has received content contributions from industry and academia through surveys as well as many international conferences and workshops. Open online publication of the report became available in fall of 2017. In this special session, five members of the IT2017 executive committee will present a digest of the content of the report, describe the proposed IT curricular framework, and facilitate open and vigorous discussion of the report/s guidelines for developing new information technology programs or enhancing existing ones. The novelty of the report is its focus on industry-informed competencies that IT graduates should have to meet the growing demands of a changing technological world in the next decade. The experience should provide a better understanding of IT in a modern age.	IT2017 Report: Implementing A Competency-Based Information Technology Program	NA:NA:NA:NA:NA	2018
Douglas Baldwin	The SIGCSE Committee on Computing Education in the Liberal Arts seeks to identify distinctive needs of liberal arts computing educators, and to suggest ways of addressing those needs. This session will be the initial presentation of the Committee's findings and recommendations, and a chance for the community to comment on the results prior to our final written report. The Committee found considerable variety among liberal arts computing programs, but enough common features to consider "liberal arts computing program" to be a distinct category with needs that arise from its shared features. The liberal arts computing community expressed a very strong desire for a permanent organization to support its members and represent its interests to the rest of the world. Conversely, we see evidence that the computing education community as a whole values liberal arts computing perspectives and would benefit from a well-defined source for those perspectives. The Committee's main recommendation is therefore to establish a permanent liberal arts computing organization that can serve both to support computing education in the liberal arts and to represent that community in larger conversations.	Draft Report of the SIGCSE Committee on Computing Education in the Liberal Arts	NA	2018
Dan Garcia:Tiffany Barnes	NA	Session details: Closing Keynote	NA:NA	2018
Ruthe Farmer	Over the last few years, efforts to reinvigorate K-12 computer science (CS) education have emerged from the inner circles of education and become a global movement. CS is now seen as a competitive advantage in the global economy and a way up the economic ladder for countries of all sizes. Nations including the UK, South Korea, New Zealand, Israel and Estonia have taken the lead in establishing CS as a core subject. Using the US-based Computer Science for All (CSforALL) initiative as a case study, Ruthe Farmer, Chief Evangelist at CSforALL and former Senior Policy Advisor for Tech Inclusion under President Obama, will share lessons learned and challenges faced in the work to bring CS to all US students such as education policy transformation, weathering changes in political leadership, and leveraging the "long tail" of the CS stakeholder community to achieve sustainable change through collective impact and local engagement. This talk will offer examples and opportunities for all SIGCSE attendees to contribute to the CSforALL movement and become nodes in the distributed national network of organizations and initiatives, both big and small, that will make CSforAll a reality.	CSforALL: Nodes and Networks for National Impact	NA	2018
Brian Kokensparger:Wade Peyou	CS instructors are sometimes tasked with modifying CS1 courses to teach introductory programming for the Digital Humanities. Training computer science students in DH programming methods may also have some additional benefits, such as bringing more women into computing, and helping in the recruitment and retention of CS students overall. DH projects may also provide Service-Learning opportunities that will give students experiential learning opportunities not provided in industry. The presenters have developed six assignments in Python that are oriented towards DH topics while still providing CS students solid experiences in core programming concepts. This workshop introduces the participants to five of the assignments and gives them immersive abbreviated experiences in each. The topics include Computing Change over Time (calculating burials in a historic cemetery), Visualization of Change over Time (visualizing the burials in the historic cemetery), Textual Analysis (finding word frequencies and "stop words" in public domain texts), Stylometrics (comparing measured features of graphic images), and Social Network Analysis (analyzing extended relationships in historic social circles). A balance of direct coding experience and discussion of gotchas and best practices in classroom management will give workshop participants confidence in offering and managing these assignments in their own classrooms. Participants should bring a laptop/keying-friendly mobile device that has a Python 3.x IDE already installed, and some familiarity with the Python language.	Programming for the Humanities: A Whirlwind Tour of Assignments (Abstract Only)	NA:NA	2018
Ariel Ortiz	Node.js is one of the hottest open source web platforms currently available. It's used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Node.js allows you to use JavaScript to write all kinds of network servers in just a few lines of code, definitely easier than using other platforms based on languages such as C++, C# or Java. If you know how to use JavaScript on the front end (i.e., the browser), it's a breeze to use it on the back end (i.e., the server). This workshop is aimed at CS instructors that wish to teach students how to use and write RESTful web services (a.k.a. web APIs) using Node.js on a cloud platform. The only thing you need is a computer with a modern web browser and a Wi-Fi connection. Participants will use the free service provided by the Cloud9 platform (https://c9.io/) to learn how to write scalable web services using Node.js, the Express web framework, MySQL, and Ajax via jQuery. Web services allows us to build powerful web based applications using data from multiple online sources. And, by using a cloud platform, we have all our tools readily available through a web browser, thus eliminating the hassle related to installing a complete and fully functional web development environment. Participants are expected to have a working knowledge of JavaScript, SQL and HTML. Additional information available at http://node.arielortiz.info/ Laptop required.	Programming Web Services on the Cloud with Node.js: (Abstract Only)	NA	2018
Siddharth Kaza:Blair Taylor	The ACM CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area, the ACM Community College curricular guidelines, CSTransfer2017, places great emphasis on cybersecurity as well. However, introducing security in introductory programming courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, CS2, and AP CS A classes. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include learning objectives focused on cybersecurity based on ACM and CAE guidelines. Laptop recommended.	Introducing Secure Coding in Undergraduate (CS0, CS1, and CS2) and High School (AP Computer Science A) Programming Courses: (Abstract Only)	NA:NA	2018
Christine Alvarado:Neil Spring	Engaging undergraduates in research has been shown to improve retention, increase students' sense of science identity, and increase the chances that they will continue to graduate school. Yet many undergraduates don't participate in research until very late in their undergraduate program, while most undergraduates don't participate in research at all. On the other hand, many faculty are eager and willing to do research with undergraduates, but are unsure how to mentor and supervise them, particularly early undergraduates who may have very little specific technical knowledge and skills. This workshop will provide participants with concrete skills and techniques for engaging early undergraduates (first and second-year students) in real research projects, and, if desired, for developing or growing a department-wide early undergraduate research program. Participants will engage in hands-on activities where they will learn how to develop appropriately scoped research projects, manage and mentor early undergraduates successfully, and teach core research skills like reading research papers and writing research proposals. The workshop will also cover how to mitigate specific challenges faced by students from groups underrepresented in computer science. The materials presented in this workshop are based on the successful NSF-funded Early Research Scholars Program at UC San Diego (ersp.ucsd.edu), which is in its fourth year, and engages 40 second-year students per year--the majority of whom are women and/or students from underrepresented racial or ethnic groups--in academic-year research apprenticeships.	Successfully Engaging Early Undergraduates in CS Research: (Abstract Only)	NA:NA	2018
Charles Wallace	This workshop presents a novel approach to teaching the mathematical foundations of computing commonly known as Discrete Structures. Following the common model of the programming lab, we provide interactive learning experiences in relational algebra, predicate logic, and graph theory that are both human- and computer-mediated. Students use the Alloy language and analyzer to express constraints in formal mathematical notation and search for models that satisfy the constraints. Alloy is an industrial-strength tool, but with careful scaffolding even students in introductory discrete structures can benefit from highly interactive and visual guided explorations mediated through Alloy code. We design exercises carefully to take students from observers of Alloy program behavior to tweakers of established code and later to builders of their own code. We find that the feedback provided by the Alloy Analyzer eliminates common misconceptions among students. Compared to a traditional approach where students simply submit written answers to homework problems, students working on Alloy problems get immediate critique of the well-formedness and satisfiability of their responses. The interactive nature of Alloy allows them to explore, discover new concepts, and challenge their assumptions with unexpected corner cases. After an introduction to Alloy, teams of workshop participants will engage in learning activities in discrete structures, using the Alloy tool for exploration and application of concepts. Teams will reflect on their experiences and comment on the applicability of this socio-technical learning approach in their own teaching contexts. A laptop is recommended for participation in the workshop.	Learning Discrete Structures Interactively With Alloy: (Abstract Only)	NA	2018
Jeffrey C. Carver:Sarah Heckman:Mark Sherriff	One of the most important, and difficult, aspects of starting an education research project is identifying an interesting, answerable, repeatable, measurable, and appropriately scoped research question. The lack of a valid research question reduces the potential impact of the work and could result in wasted effort. The goal of this workshop is to help educational researchers get off on the right foot by defining such a research question. This workshop is part of the larger Designing Empirical Education Research Studies (DEERS) project, which consists of an ongoing series of workshops in which researcher cohorts work with experienced empirical researchers to design, implement, evaluate, and publish empirical work in computer science education. In addition to instruction on the various aspects of good research questions, DEERS alumni will join us to mentor attendees in development of their own research questions in small group breakout sessions. At the end of the workshop, attendees will leave with a valid research question that can then be the start for designing a research study. Attendees will also receive information on how to apply to attend the full summer workshop, where they can fully flesh out the empirical study design, and join a DEERS research cohort. More information about DEERS can be found at http://empiricalcsed.org.	Designing Empirical Education Research Studies (DEERS): Creating an Answerable Research Question (Abstract Only)	NA:NA:NA	2018
Remi Sharrock:Baptiste Gaultier:Petra Taylor:Michael Goudzwaard:Mathias Hiron:Ella Hamonic	Any CS educator has to explain sooner or later a portion of code or a structured text to learners. The Codecast tool http://www.codecast.info has been specially designed by CS educators and developed initially for MOOCs to replace non-interactive screencasts. This workshop is a hands-on lab to Codecast: an open-source innovative tool to create in-browser interactive coding tutorials. Codecast supports syntax highlighting for over 110 languages and as of 2017 can compile/interpret and execute a subset of the C and Arduino languages. In this workshop, participants will explore how, using our Codecast tool, a CS educator can explain the creation of a computer program while their audio as well as their interactions with the code editor and interpreter are being recorded for interactive playback. Workshop participants will furthermore experience how different aspects of the coding process like testing, running, debugging and optimizing can be illustrated with the help of several data, memory and algorithm visualization modules. Participants will create recordings and experience (like learners) how they can be played back interactively by taking control over and modify the coding process at any time. Codecast enables the learner to interact directly with the code and experiment with different ideas while listening to the instructor's explanation. The learner can make changes to the code, test it with different inputs, run the code step-by-step to better understand its behavior and visualize other parts of the algorithm or the data. Workshop participants will also integrate their creations in their online curricula.	Coding Tutorials for any Programming Language or Interactive Tutorials for C and Arduino: (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
Shimon Schocken	We present a full semester course in which students build a complete computer system - hardware and software - from the ground up. Also known as "Nand to Tetris", the course is presently taught at 100+ universities, and is listed in Coursera's top-rated courses. The course synthesizes many abstractions, algorithms, and data structures learned in CS courses, and makes them concrete by building a complete computer system from first principles. The methodology is based on guiding students through a set of 12 homework assignments that gradually construct and unit-test a simple hardware platform and a modern software hierarchy, yielding a surprisingly powerful computer system. We'll start the workshop by demonstrating some interactive computer games running on this platform. The hardware projects are done in a simple hardware description language and a hardware simulator supplied by us. The software projects (assembler, VM, compiler and OS) can be done in any language, using API's and test programs supplied by us. The result is a general-purpose computer system, simulated on the student's PC. The course is completely self-contained, requiring only programming as a pre-requisite. Also, it is highly modular, and can be viewed as a set of 12 exciting, stand-along homework assignments. The course and the workshop assume no specific knowledge of, or bent for, computer organization/architecture, and are aimed at any instructor who wishes to strengthen his or her courses with engaging programming projects and with an integrated and hands-on understanding of how modern computer systems work, and how they are built.	Nand to Tetris: Building a Modern Computer System from First Principles (Abstract Only)	NA	2018
Stan Kurkovsky:Stephanie Ludi	LEGO is a construction toy familiar to many students. Creating software, regardless of scale, is often similar to building with tangible objects, such as houses or bridges--an analogy that is often used in the classroom. In this workshop, we will show how to use LEGO bricks as a surrogate representing the lines of code, software objects, or other artifacts in the process of constructing software systems. LEGO-based analogies and case studies enacted as hands-on exercises for student teams help develop a better understanding of the underlying concepts, while keeping students deeply engaged in the course material. This workshop is intended for faculty teaching undergraduate and graduate courses focusing on software development, software engineering, and related concepts. This workshop will also benefit other educators looking for ways to supplement their courses with engaging and playful hands-on activities aimed to strengthen the teamwork, oral communication, problem solving, and design skills of students. We will practice several hands-on LEGO-based activities during the workshop. Specific topics of these activities will include change management and object-oriented interfaces, as well as activities specific to the phases of software development. Workshop participants will learn about other LEGO-based activities that focus on a broad range of topics including requirements engineering, architectural design, and software dependability. A laptop is not required for this workshop. This work is supported in part by the National Science Foundation Awards 1611905, 1709244 and a 2015 ACM SIGCSE Special Project grant. For more information visit http://www.cs.ccsu.edu/~stan/sigcse2018/	LEGO-based Active Learning Exercises for Teaching Software Development: (Abstract Only)	NA:NA	2018
Karen Anewalt:Jennifer Polack	Active learning techniques are widely reported to enhance student learning and increase student engagement. They provide a powerful tool to reinforce course concepts and allow students with diverse backgrounds and learning styles to master essential concepts efficiently. In addition, many students and faculty find hands-on activities to be fun and memorable. Workshop attendees will participate in five hands-on activities covering concepts that are commonly taught in introductory programming courses including variable declaration, object instantiation, parameter passing, memory management, and the software development process. Workshop participants will be challenged to create additional activities to be included in an online repository. Instructors of introductory programming courses at the undergraduate and K-12 level who are interested in creating memorable learning experiences using free and low-cost props will find this participatory workshop to be relevant to their teaching. Come ready to play!	Playing to Learn: Using Hands-on Activities to Boost Learning in Computer Science (Abstract Only)	NA:NA	2018
Ali Erkan:John Barr	NA	Geographic Information Systems (GIS): Opportunities of Spatial Data Processing for Computer Science Education (Abstract Only)	NA:NA	2018
Richard Brown:Joel Adams:Suzanne Matthews:Elizabeth Shoop	CS2013 brings parallel and distributed computing (PDC) into the CS curricular mainstream. The Message Passing Interface (MPI) is a platform independent, industry-standard library for parallel and distributed computing. The MPI standard includes support for C, C++, and Fortran; third parties have created implementations for Python and Java. This hands-on workshop introduces MPI basics and applications in C/C++ using Raspberry Pi single-board computers, as an inexpensive and engaging hardware platform for studying PDC. The workshop includes: (i) personal experience with the Raspberry Pi (units provided) accessed via participant laptops (Windows, Mac, or Linux); (ii) assembly of Beowulf clusters of Raspberry Pis quickly in the classroom; (iii) self-paced hands-on experimentation with the working MPI programs; and (iv) a discussion of how such clusters can be used to engage students in and out of the classroom. Participants will experience how to teach distributed computing essentials with MPI by means of reusable, effective "parallel programming patterns," including single program multiple data (SPMD) execution, send-receive message passing, the master-worker, parallel loop, and other common patterns. Participants will then explore more in-depth "exemplar" applications, such as drug design and epidemiology. All materials including the Raspberry Pi software system setup from this workshop will be freely available from CSinParallel.org. No prior experience with MPI, PDC, or the Raspberry Pi is required. Windows, Mac, or Linux laptop required.	Teaching Parallel and Distributed Computing with MPI on Raspberry Pi Clusters: (Abstract Only)	NA:NA:NA:NA	2018
Denise Case:Douglas Hawley	This workshop will provide participants with several small, fun classroom activities culminating in a useful web-based application that allows individuals to fully customize the page resulting from opening a new tab in Google Chrome. Attendees will participate in, and receive Canvas lessons introducing popular web-based techniques including HTML, JSON, Cascading Style Sheets, JavaScript and Google Chrome extension creation and distribution. The workshop proceeds in six short lessons in which we will: (1) download and install all software required, (2) introduce basic concepts in HTML, (3) create and link cascading style sheets, (4) construct a JavaScript file implementing some basic, and fun logic constructs into our web page, (5) create a JSON manifest file that allows our application to run as a Google Chrome extension, and (6) make our extension available to the public in the chrome web store. With these lessons, participants will be able to create a universal "New Tab" page for their school with Google Chrome. This page can be re-customized and re-distributed by anyone taking these six lessons. Online lessons will be provided. A laptop is recommended.	Chrome Home: Six Fun Activities Introducing Basic Web Programming Techniques (Abstract Only)	NA:NA	2018
Sami Khuri	The workshop is intended for CS educators who would like to get an overview of some of the major techniques used in bioinformatics and a hands-on experience with some of its most popular algorithms. Attendees will be exposed to topics, examples, and problems that can be added to their repertoire of projects for CS1/CS2, data structures and algorithms, and other CS courses, including bioinformatics. No prior knowledge of biology is needed. Whether in an elective bioinformatics course, or in introductory or data structures and algorithm classes, the attendees will be able to incorporate the topics presented in the workshop. We consider interdisciplinary problems drawn from the field of biology. After formulating them as computational problems, we use traditional algorithmic techniques to solve them. The workshop may also be appropriate for high school teachers who want to use bioinformatics as a domain for their programming assignments. All material, including lecture notes, sample programs, hands-on exercises, and links to visualization packages, will be available to the attendees, before the workshop, through our university/s web page. The hands-on exercises using online publicly available tools will enhance the understanding of the common bioinformatics tasks.	Introducing Bioinformatics Algorithms in Computer Science Courses: (Abstract Only)	NA	2018
Ursula Wolz:Gwen Charles:Laura Feire:Elanor Nicolson	Broadening participation in computing invites a diverse constituency into a traditional computing culture. This workshop provides a novel perspective: skills that are often labeled 'women's work' are the foundational principles of computer science developed from textile crafts. The 'Code Crafters' curriculum, which expands Andrea Mayer's Snap-based TurtleStitch embroidery programming project, is being successfully taught in 3 ways: as a full semester undergraduate course, as a weeklong summer workshop for middle and high school students, and as a half day event. The SIGCSE workshop will introduce participants to potential adaptations of this curriculum, report on its use as both a CS 0, and CS 1 course, and give participants hands-on experience in designing and rendering a machine embroidery pattern in TurtleStitch and Processing Stitch (Java). Key concepts from the full semester curriculum will be demonstrated: (1) crocheting is a vehicle for learning about primitive operations instruction codes for process control, and reading and writing patterns (algorithms); (2) programing machine embroidery provides exposure to agile design; (3) contrasting embroidery with quilting provides experience in abstraction and reuse; (4) weaving and tapestry provide concrete illustrations of manipulating two dimensional data structures; (5) studying embroidery machine file formats demonstrates how language translation takes place; (6) sharing a limited resource (a $500 programmable, single thread embroidery machine) provides concrete experience in scheduling, and product testing; (7) collaborative crochet and quilted projects provide experience in team dynamics. Participants should bring a laptop, and will be invited to join an online community of mutual support.	Code Crafters Curriculum: A Textile Crafts Approach To Computer Science (Abstract Only)	NA:NA:NA:NA	2018
Douglas Blank:Lisa Meeden:Jim Marshall	This workshop is a hands-on exploration of Deep Learning techniques and topics for use in the classrooms of Computer Science and related fields. Deep Learning denotes the latest in a series of advances in neural network training algorithms and hardware that allow Artificial Neural Networks (ANNs) to learn quickly and effectively, even with many, stacked layers. These types of networks can be applied to almost any learning problem, such as driving a car, describing images, controlling a robot, or understanding language. This workshop will start with the mathematical and algorithmic foundations of Deep Learning, and introduce an accessible Python-based library, called "conx," which is based on the Keras library and was developed by the workshop instructors. The workshop will demonstrate ideas through animation and visualizations, examine the path to advanced topics, and explore ideas for incorporating Deep Learning topics into the classroom. The workshop is designed to allow participants to gain a foothold with these complex topics, and to help them develop their own materials for teaching. Workshop materials will be made freely available before the workshop as Jupyter notebooks.	Deep Learning in the Classroom: (Abstract Only)	NA:NA:NA	2018
Aaron Bloomfield:Blythe Samuels:Andrew Norton	This workshop will show participants how to host a successful programming competition aimed at high school students, and will also be broadly applicable to collegiate level competitions. These contests encourage high school students to major in computer science and can have a positive effect on the recruitment for the host institution. In addition, our anecdotal evidence has shown a high participation rate from under-represented groups at such contests. Running a successful contest, however, is a challenging endeavor. With potentially hundreds of people attending -- both students and coaches -- there are many logistical issues to address. Beyond that, generating an appropriate problem set and ensuring the contest submission system that runs smoothly are critical to a successful event. A poorly run contest can do more harm than good, as the participants will leave with a negative view of the contest, the institution, and possibly even the field. The workshop will cover problem generation and submission system usage, as well as provide discussions and handouts covering all the logistical aspects for hosting such a high school contest. Documentation covering all aspects of the contest will be provided to participants. The workshop organizers include a faculty advisor, a high school coach, and a former student who both participated in -- and later ran -- the contest. At least one organizer has been in every one of the roles in this type of contest. We have successfully run seven such contests, with the last four having 200 high school contestants.	Organizing a High School Programming Contest: (Abstract Only)	NA:NA:NA	2018
Helen H. Hu:Clifton Kussmaul:Chris Mayfield	his workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-4 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach, and has been shown to significantly improve student performance. Workshop participants will work through POGIL activities as students, and work through POGIL meta-activities that are designed to help teachers learn core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses and concepts. For more information (including activities for CS1, CS2, and other courses), see http://IntroCSpogil.org and http://pogil.org. Laptops optional.	Guiding Students to Discover CS Concepts & Develop Process Skills Using POGIL: (Abstract Only)	NA:NA:NA	2018
Colleen M. Lewis:Eleanor Rackoff:Emily Cao:Saber Khan:Cynthia Lee:Saturnino Garcia	Meaningful and engaging assignments are important to retention in CS. An interesting problem context may be able to make routine practice of programming basics more interesting for students. Problem contexts also provide the opportunity to bring in content related to social justice topics, which are important for providing students a well-rounded education. With funding from the NSF (#1339404), we have developed eight homework assignments that integrate social justice topics as the problem context for CS1 assignments. Workshop attendees will work in small groups to revise or adapt existing assignments, translate existing assignments into the language of their course, or develop a new assignment. Attendees will be encouraged to submit their work to Nifty Assignments for 2019 and NCWIT's peer-reviewed curriculum repository, Engage CS Edu (engage-csedu.org). All assignments will be posted on CSTeachingTips.org to be shared with the community.	Integrating Social Justice Topics into CS1: (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
J.D. Chase:Prem Uppuluri	Challenge-Based Learning (CBL) is an active learning approach using just-in-time instruction where students are introduced to instructional material in the context of solving a particular challenge. The CBL approach has proven very effective as an introductory instructional strategy, especially when working with K-12 outreach. For example, in Cybersecurity, many universities are reaching out to high school and community college students using the Capture the Flag contests with learning materials built in for each challenge. In this workshop, we will explore building just such a virtual, challenge-based, contest environment. Workshhop participants will walk through the process of setting up the Mellivora contest environment, be given the opportunity to create challenges on their own, and be provided with a tutorial on the administrative tools available. Similarly, participants will be provided an introduction to the installation and management of a virtual environment that will provide virtual machines of various platforms (Windows, Linux, etc.) for the challenges. Participants will also be provided a brief overview of the creation of short, high-impact instructional materials to accompany challenges. Finally, participants will compete in a short Capture the Flag contest to demonstrate the efficacy of the CBL approach.	Building a Virtual Challenge-Based Learning Environment: (Abstract Only)	NA:NA	2018
Meghan Allen:Steven A. Wolfman:Anasazi Valair	In this workshop, we as a group use Appreciative Inquiry (AI) techniques to explore and develop our strengths as CS educators. As a participant, you will gain appreciation for your strengths as an educator, with concrete plans for building on these strengths. You will also learn about AI as a qualitative research methodology that is complementary to more common CS research methodologies, and that you can apply to evaluate and improve your own educational practice. Appreciative Inquiry drives change by building on what's already working well in an organization. Similarly to other qualitative methods, AI generates rich, deep feedback that is grounded in stakeholders' experiences, but in contrast to other methods its focus on strengths and positives surfaces unique, strength-based findings and make it an energizing and fulfilling approach to professional development and the scholarship of teaching and learning. AI is commonly used in education and organizational research and is an effective and community-building way to drive organizational or program change and positively impact participants' morale. We will share our materials and key tips to enable you to apply Appreciative Inquiry in your own work. You may wish to run Appreciative Inquiry workshops with students as an evaluation method, or run them with colleagues for professional development or for promoting positive change in your unit or program, or take smaller steps integrating the appreciative mindset into your teaching or other professional work.	Playing to Your Strengths: Appreciative Inquiry as a Scholarly Tool for Your Computing Education Practice and Professional Development (Abstract Only)	NA:NA:NA	2018
Leigh Ann DeLyser:Jumee Song	The SCRIPT, the School CSforALL Resource & Implementation Planning Tool, is a new tool created by the CSforALL Consortium that will serve as a framework and platform to guide CSforALL advocates and district staff in the creation of CSforALL implementation plans that adhere to CSforALL values and reflect the unique needs and goals of any school district. The SCRIPT engages school districts in self reflection, review of examples, and goal setting for 6 areas designed from the literature supporting curriculum adoption and organizational change. These areas include: (1) Leadership, (2) Technology Infrastructure, (3) Teacher Capacity, (4) Curriculum and Materials Selection and Refinement, (5) Partners, and (6) Community. The goal of this workshop is to train any CSforALL advocate to be able to lead a school district in an implementation planning session to create a K-12 district wide computer science education plan, by following the SCRIPT. Based on an extensive needs assessment conducted by the CSforALL Consortium (publication under review), districts require professional development and resources to (1) understand the goals of the CSforALL movement and how it can benefit their students, (2) identify ways to create meaningful K-12 pathways for students, and (3) navigate available resources in order to identify appropriate partners and resources to support the implementation of CS education. The SCRIPT was created to address these needs in a replicable way that could be used at scale by any CSforALL advocate.	CSforALL School District Implementation Facilitators Workshop: Just Follow the SCRIPT! (Abstract Only)	NA:NA	2018
Lori Pollock:Terry Harvey:James Atlas:Chrystalla Mouza	This workshop's goal is to help faculty who want to establish a course (or alternate vehicle) for mentoring undergraduates with some CS background to participate in K-12 teaching CS in local schools with engaging pedagogy. The workshop leverages the experiences and lessons learned from ten semesters of the organizers leading a course that meets once a week on campus for mentoring to support the undergraduates' field experience in local schools and libraries. The workshop will dive deep into logistics including how to establish and maintain strong teacher partnerships, establishing student-teacher matches and weekly field experience schedules, weekly in-class activities and assignments to support the field experience, weekly student reflective journal prompts, and surveys for formative evaluation. Participants will actively reflect on their own contexts with potential opportunities and challenges, and organizers will facilitate small group discussions of how to address the challenges, different models for different contexts, and how to get started. Participants should leave with a plan for next steps toward offering a mentored undergraduate field experience in teaching computer science and access to a community of faculty who are working to help to broaden participation in computer science in K-12 while providing opportunities for undergraduates to hone their communication and leadership skills, increase their self confidence, and participate in giving back to the community using their technical skills. The activities do not require a laptop, only pens and handouts provided by the organizers.	Customizing a Field Experience for CS Undergrads in Teaching Computer Science for Your School Context: (Abstract Only)	NA:NA:NA:NA	2018
Leland Beck:Alexander Chizhik:Patty Kraft:Alan Riggins	Many approaches to active learning rely on a set of tasks that help students engage cognitively with the material. Studies have shown that this approach can significantly improve student learning. However, for best results it is not enough simply to have students solve problems: the activities must be carefully designed to produce the desired learning outcomes. In many cases, it is helpful to define a sequence of activities that lead students though a developmental progression toward a desired learning goal. This kind of approach is sometimes described in educational research as a "learning trajectory." In this workshop, we will help you get started on the path to developing your own active learning classroom activities. We'll begin by looking at examples that have been used successfully in a variety of different courses, and discussing some of the principles involved. Participants will be encouraged to bring examples of topics they have found challenging to teach. We'll work together with you to help develop possible approaches and get started on the design of active learning activities to address those topics.	Designing Classroom Activities to Improve Student Engagement and Learning: (Abstract Only)	NA:NA:NA:NA	2018
Ambareen Siraj:Sheikh Ghafoor	Since security education is not required in CS curriculum, many CS undergraduates can successfully achieve their degree without being exposed to any security courses during their course of study and enter the digital workforce with no knowledge or basic understanding of information security -- one of the essential skill sets for the 21st century. To address this concern, Information Assurance and Security (IAS) has been designated as a new knowledge area in the new ACM/IEEE-CS Curricula 2013. This workshop empowers CS faculty to access and use freely available resources to integrate security in to their CS curriculum will help institutions to meet ACM/IEEE-CS guideline. With support from NSF (Award# DUE-1140864, #1438861), at the CyberSecurity Education, Research and Outreach Center at Tennessee Tech, we have developed a set of readily available resources called SecKnitKit (Security Knitting Kit, www.secknitkit.org), which offers a suite of instructional material for non-security faculty (faculty whose primary teaching/research focus is not security) to integrate security in upper division CS courses such as operating systems, software engineering, computer networks and databases. Resources include lecture slides with notes, assessment questions and homework/classroom assignments with all details and technical support. The participants will receive access to all SecKnitKit materials (instructional and assessment) of interest and demonstrated use of the active learning exercises. There are six participant slots for each of the four courses mentioned above and participants will have an option to select their courses of choice at registration time.	CReST-Security Knitting Kit: Readily Available Teaching Resources to Integrate Security Topics into Traditional CS Courses (Abstract Only)	NA:NA	2018
Joe Gibbs Politz:Kathi Fisler:Shriram Krishnamurthi:Benjamin S. Lerner	Data Science is at the center of many current curricular efforts. It is emerging as an integrated field that has far-reaching and important applications, from news media to policy making to business. While these applications can provide compelling uses of computer science techniques, an introduction to one is not an introduction to the other. How do topics like data structures and program design emerge from data science applications? How do we transition from data science applications to computer science topics? How can data science be integrated into other contexts with little overhead? This workshop presents assignments and curricula designed to answer these questions, and tools that support them.	From Spreadsheets to Programs: Data Science and CS1 in Pyret (Abstract Only)	NA:NA:NA:NA	2018
Kevin Robinson:Justin Reich	Equity is a core component of many computer science teacher preparation programs. One promising approach is addressing unconscious bias in teachers related to the race, ethnicity or gender of students. These biases may impact teacher expectations and interactions with students in a variety of classroom scenarios. Early literature on interventions targeting unconscious bias suggests that asking individuals to suppress biases is counterproductive. Our work uses the affordances of interactive online practice spaces to instead focus on specific teaching decisions that may be impacted by unconscious bias. We developed practice spaces and embedded them within CS teacher preparation programs. Our early findings indicate that practice spaces produce rich learning opportunities and analysis yields insight into what biases or beliefs may be interfering with teachers enacting principles of equity like disrupting preparatory privilege. In this workshop, we'll use online practice spaces to examine how we approach different classroom situations related to equity, and practice how we respond. We'll try two different variations on these practice spaces, and create space for participants to try a variety of other iterations on their own. We'll close by inviting folks to share their own stories of important classroom moments that problematized how they approached equitable teaching, and prototype creating practice spaces from those experiences. Participants will leave with links to practice spaces, and related curriculum materials they can use in CS teacher preparation courses, in teacher-led PLC groups, online CS teacher groups, or with local CSTA chapters.	Playing with and Creating Practice Spaces for Equitable Teaching: (Abstract Only)	NA:NA	2018
Alexandra Milliken:Michael Ball:Lauren Mock	The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 400 high school teachers. BJC covers the big ideas and computational thinking practices required in the AP CSP curriculum framework, using an easy-to-learn blocks-based programming language called Snap! (based on Scratch). During this workshop, we will provide an overview of the BJC curriculum, share our experiences as instructors of the course at the university and high school levels, and share details of potential summer professional development opportunities. Attendees should be prepared to program a BJC project in the Snap! environment. Please bring laptops with the Chrome browser installed.	AP CS Principles and The Beauty and Joy of Computing Curriculum: (Abstract Only)	NA:NA:NA	2018
Bill Siever:Michael P. Rogers	Are you interested in a fun way to introduce a variety of students to significant contemporary CS topics, like wireless networking, robotics, and the Internet of Things (IoT)? Do you want to do so using a platform that is cheap, has a low barrier to entry, but where learning can translate to the real world and where advanced students can pursue advanced topics? If so, you need a micro:bit! The micro:bit is a platform developed by the British Broadcasting Corporation (BBC) to encourage children to pursue computing and electronics. Although designed for children, its capabilities are sufficient for a variety of postsecondary applications. It includes a 32-bit processor, lights, buttons, an accelerometer, digital I/O, and wireless communication, making it ideal for wearables and robotics. It also leverages some of the latest trends in introductory computing, like support for block-based languages (àla Scratch), while also being sophisticated enough for complex topics in Operating Systems and Networking. This workshop will introduce the micro:bit and focus on engaging, lightweight coverage of complex topics, including robotics, mesh networks, and IoT. Participants will work through classroom-ready exercises suitable for K-12 workshops, student recruiting events, CS1/2, or as bootstrap topics in IoT courses. The workshop will include some subjects not commonly covered in existing micro:bit material, like integration with mobile apps and IoT applications. Participants will be provided with hardware but will need a laptop with internet access and a mobile device (any OSes).	Micro:bit Magic: Engaging K-12, CS1/2, and Non-majors with IoT & Embedded (Abstract Only)	NA:NA	2018
Stephanie E. August:Mark Pauley:S. Megan Che:Eileen T. Kraemer:Murali Sitaraman	You develop the prototype for a new learning strategy, and want to test it in class or across institutions. You identify an NSF program that supports proposals for the idea, and then what? What goes through the minds of reviewers once a proposal is submitted? What prompts one proposal to be recommended for funding while another is declined? Close examination of the panel review process can inform proposal writing and ensure that reviewers will understand a PI's idea, identify its merit, and value a PI's vision of how the work will broaden participation in STEM education. This workshop steps through the NSF proposal review process from submission of proposal to award or decline, touching on elements of a good review, NSF intellectual merit and broader impact criteria, elements of a good proposal, assessment and evaluation, and volunteering to review proposals. Participants gain insight into writing a good review and improving one's own proposal writing. The interactive workshop leads participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and providing "expert" opinion on these issues. Examples include funded and non-funded projects and a Top Ten List of Do's and Don'ts. For further information see: https://people.cs.clemson.edu/~etkraem/UPCSEd/	Understanding the Essence of Successful Computing Education Projects through Analyzing NSF Proposals: (Abstract Only)	NA:NA:NA:NA:NA	2018
David Hayes	With the increasing breadth and sophistication of open-source languages, libraries, frameworks, standards, tools and resources, Mobile Web App development is possible for a broad audience. The barriers to participation in app development have been reduced; learners can quickly begin creating simple apps and can use online resources to expand their knowledge and skill. In this workshop, participants will learn how to build simple (and not-so-simple) data-driven, mobile apps using the Mobile Web App model, and they'll learn how to scaffold projects to focus students' efforts on specific lesson, unit or assignment goals. The workshop is intended for post-secondary, secondary and even middle school educators who want to increase student engagement by including app projects in their courses. The material may also be of interest to those who provide CS education in other, less-structured environments. Participants will create several apps and will leave with sample projects. All languages, libraries, frameworks, standards, tools and resources are open-source and run in the browser. Because participants will be developing apps during the workshop, they will need a laptop or will need to work with a colleague.	Mobile Web App Development for All!: (Abstract Only)	NA	2018
Russell McMahon	Improvisation is viewed by many people as jazz musicians jamming in the early morning hours or comedians ad-libbing to create a funny skit, but it is so much more. Improv is about listening and moving a conversation (or music) forward in a positive and supportive manner. Above all, it is about supporting all members of the team. These precepts can be found in the Agile, UX (user experience), and the AI worlds and companies are using improv methods as a way of creating more innovative and collaborative teams and which are so necessary for success in today's work environment. Dick Costolo, the former CEO of Twitter and a computer scientist, is an accomplished improviser and credits these techniques in advancing his professional life. The skills learned through using improv are as important as the technical skills for all computer scientists and they can help one to become better a learner, listener, and communicator. This workshop will cover some of the basics of improvisation and its rules as well as ideas on how it can be used in a classroom or a place of employment. Come and learn about improv and why organizations such as IDEO, Marriott, and NASA have embraced improv to create more than just teams, but ensembles of highly functioning creative and caring individuals. This workshop is interactive and attendees will have fun learning and practicing the skills within a safe and accepting environment.	Improv for Computer Scientists: (Abstract Only)	NA	2018
Leen-Kiat Soh:Elizabeth Ingraham:Duane F. Shell	In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include "how-to" presentations, panel-based Q&A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!	Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only)	NA:NA:NA	2018
Shannon Duvall:Dugald Ralph Hutchings:Robert Duvall	While the "flipped classroom" style has some educational benefits, there are also known benefits to other pedagogical approaches such as lectures, educational games, class discussions, and case studies. In addition to a wide variety of pedagogical approaches, there are a wide variety of computer science learning materials, including videos, interactive tutorials, e-textbooks and traditional textbooks. The choices of approach and materials present a series of trade-offs and may favor some groups of students over others. In this workshop, we present a methodology called Scrumage, (SCRUM for AGile Education) which allows each student in a course to adopt the pedagogical approach and materials that best fit each student's individual learning needs. Scrumage adapts concepts from the Scrum project management technique to manage student teams where the project is learning. Each team learns with the style they prefer, so that multiple pedagogical styles and materials are in use in the course simultaneously. Participants in this workshop will be introduced to the methodology, benefits, and tools of this approach and will work through guided steps to implementing it in the course of their choice.	Beyond the Flipped Classroom: Implementing Multiple, Simultaneous Pedagogical Styles Using Scrumage (Abstract Only)	NA:NA:NA	2018
Richard E. Ladner:Brianna Blaser:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing have limited accessibility to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll, will be shared.	Access to Computing Education for Students with Disabilities: (Abstract Only)	NA:NA:NA	2018
Henry M. Walker:Mehran Sahami:Christine Alvarado	For many years, computing faculty have devoted substantial time and energy to the retention of diverse populations. But how are we doing really? The ACM Retention Committee has identified at least 5 populations of interest in tracking student retention: * Students who start college expecting to major in computing. * Students who enter college with some interest in computing, but also with other interests. * Students who enter college with interests outside computing, but who take computing early as part of a broad education. * Students who enter college with little or no interest in computing, but need a computing course to satisfy a general education requirement or a prerequisite in another discipline. * Students who transfer into a four-year university from a two-year college, partway into a computer science program. In practice, each group has different characteristics, and retention rates may vary dramatically. On some campuses, gathering data for the first group may be manageable--particularly if students declare majors as they enter college. Data collection and tracking for others is difficult, since these populations may not be known in early years. This BoF will identify approaches for tracking students and for exploring retention rates. Further, this BoF will encourage sharing and brainstorming for further mechanisms to help data collection. As we better identify retention rates among various populations, the ACM Retention Committee hopes we can better understand obstacles and opportunities related to retention. Session Agenda: Context/Introduction, Data most relevant locally, What data are currently tracked, Thoughts about a common data gathering instrument	Challenges and Approaches for Data Collection to Understand Student Retention: (Abstract Only)	NA:NA:NA	2018
Michael S. Kirkpatrick:Dee Weikle	The ACM Code of Ethics provides a framework for ethical conduct within the computing industry. The Code describes ethical conduct for individuals and organizations, as well as the basic moral principles underlying these prescriptions. Principles defined in the Code include: Avoid harm; be fair and take action not to discriminate; respect privacy; ensure the public good is the central concern during all professional computing work. While these principles are intuitive in many situations, students, faculty, and industry professionals often struggle to apply these concepts to computing. It is not obvious how to apply the concepts of harm, privacy, or the public good in courses on Operating Systems or Programming Languages, so discussion of the Code is often restricted to specialized Ethical Issues in Computing or Software Engineering courses. We believe this approach misses an educational opportunity to build on moral sensitivity--the ability to detect a potential moral problem within a particular context--as a foundation. Integrating the Code throughout the CS curriculum provides an opportunity to increase students' exposure to subtle moral dilemmas and improve their moral sensitivity. In this birds-of-a-feather (BoF) session, we will discuss: Which topics can be used to introduce ethical discussions into core Computer Science courses? How do you write and facilitate case study discussions? What other active learning techniques can be used to examine ethical issues? What concerns would faculty have in introducing ethical discussions into technical courses? What portions of the Code might be difficult for students and future practitioners to uphold?	Active Learning Strategies for Integrating the ACM Code of Ethics into CS Courses: (Abstract Only)	NA:NA	2018
Rajendra K. Raj:Allen Parrish	Due to the ongoing demand for cybersecurity professionals, universities have begun to step up to the challenge of providing degrees in cybersecurity or related disciplines. However, growth in academic programs has been unfocused, in part because there is no standard definition of what a cybersecurity undergraduate program should contain and no cohesive community of practice with which those programs are aligned. This session is intended to establish dialog intended to lead to a community of practice for undergraduate cybersecurity education. The presenters will briefly review prior efforts in defining cybersecurity at the collegiate level, including the Centers for Academic Excellence (CAE), National Initiative for Cybersecurity Education (NICE), Cyber Education Project, CSEC2017 curricular guidelines and ABET cybersecurity accreditation. Session participants will examine current efforts, explore the development of a cybersecurity community of practice, and get clarity about where their own efforts fit into overall computing education.	Bringing Up Cybersecurity Degree Programs: (Abstract Only)	NA:NA	2018
Clifford A. Shaffer:Peter Brusilovsky:Kenneth R. Koedinger:Stephen H. Edwards	CS Education makes heavy use of online educational tools like IDEs, Learning Management Systems, eTextbooks, interactive programming environments, and other smart content. Instructors and students would benefit from greater interoperability between tools. CS Ed researchers increasingly make use of the large collections of data generated by click streams coming from them. However, we all face barriers that slow progress: (1) Educational tools do not integrate well. (2) Information about CS learning process and outcome data generated by one system is not compatible with that from other systems. (3) CS problem solving and learning (e.g., coding solutions) is different from the type of data (discrete answers to questions or verbal responses) that current educational data mining focuses on. This BOF will discuss ways that we might support and better coordinate efforts to build community and capacity among CS Ed researchers, data scientists, and learning scientists toward reducing these barriers. CS Ed infrastructure should support broader re-use of innovative learning content that is instrumented for rich data collection, formats and tools for analysis of learner data, and best practices to make large collections of learner data available to researchers. Achieving these goals requires engaging a large community of researchers to define, develop, and use critical elements of this infrastructure to address specific data-intensive research questions.	CS Education Infrastructure for All: Interoperability for Tools and Data Analytics (Abstract Only)	NA:NA:NA:NA	2018
David Reed:Fred Martin:Deborah Seehorn:Chinma Uche	The Computer Science Teachers Association (CSTA) is an ACM-affiliated member organization of more than 26,000 educators and supporters of K-12 computer science. CSTA supports local communities of educators and partners through more than 70 local chapters, made up of educators, administrators, college faculty, and industry supporters, which meet regularly for networking and professional development. In addition, CSTA provides valuable resources to teachers and CS advocates, such as the newly revised K-12 CS Standards, research reports, a member listserv, a bimonthly newsletter, and recorded sessions from the annual conference. This session will provide a brief overview of CSTA, its chapters, and available resources for teachers. College faculty who are interested in connecting with local K-12 teachers will be encouraged to network and explore mutually beneficial partnerships. An open forum will follow for discussing CSTA's mission, possible initiatives, and benefits to K-12 and college educators. The major goals of this Birds-of-a-Feather session are: To inform K-12 teachers and college faculty of the current initiatives underway at CSTA, as well as possible initiatives that are under development.To allow K-12 teachers and college faculty with common interests to connect and potentially partner in supporting computer science in K-12.To provide a forum for discussing the needs and desires of K-12 educators, which will then inform future CSTA initiatives and college partnerships.To receive feedback from the community on current and possible initiatives.	CSTA: Connecting Colleges and K-12 CS Teachers (Abstract Only)	NA:NA:NA:NA	2018
Lillian Cassel:Christo Dichev:Darina Dicheva:Don Goelman:Michael A. Posner	Participants in this Birds-of-Feather session will share thoughts and experiences in offering an introductory course in this exploding field. It will be the third consecutive year that these facilitators will conduct a SIGCSE session on a first course in Data Science. The interest in the field has increased greatly over the years, and attendees of varying backgrounds, points of view and experience are welcome. Whether the course will serve as an outreach vehicle to students of all majors, including non-technical ones, or as a first course in a formal program of some sort, we will be exchanging points of view regarding both topic coverage and pedagogical approaches. Regarding topics, we'll raise questions on the relative emphases of statistics, programming (should R be the vehicle? how about Python? other languages?), machine learning (which algorithms?), other tools, and appropriate data sets. Participants who have taught such a course will be invited to describe some of their approaches, especially if they've used such active learning methods as flipped classrooms. The facilitators, PI's on an NSF IUSE grant now winding down, bring experience from two institutions and three departments, including one interdisciplinary course. They hope to expand the community begun through the grant and these sessions, hosted at http://computingportal.org/DataScienceCommunity.	Designing an Introductory Course in Data Science: Topics and Pedagogy (Abstract Only)	NA:NA:NA:NA:NA	2018
Sarah T. Dunton:Stephanie Rodriguez	Afterschool and summer learning programs are an essential tool to support and expand K-12 computer science education. When used strategically, they can fill out a pathway of CS opportunities across the grade-span, spark interest, deepen engagement, and connect in- and out-of-school learning. Because African-American and Hispanic youth, and youth from low-income households, participate in afterschool programs in higher numbers (America After 3pm, 2014), and because more schools offer informal CS than offer formal coding classes (Google/Gallup, 2016), these programs provide access to "preparatory privilege"--the additional exposures that prime well-resourced students' confidence with computing (Margolis, 2008).	Examining the Role of Informal Education in K-12 Computing Pathways & CS Education Reform Efforts: (Abstract Only)	NA:NA	2018
Farzana Rahman:Perry Fizzano:Evan M. Peck:Shameem Ahmed:Stu Thompson	There has been a dramatic increase in computer science undergraduate research activity at colleges and universities in recent years. However, developing a research culture that is explicitly designed to empower undergraduates (student-centered research) requires different models and objectives than those traditionally employed at more research-oriented universities. The goal of this BOF is to explore what effective techniques are employed by other primarily undergraduate institutions to build a culture of research that benefits undergraduate students. Some of the key issues covered in this BOF will be: defining student-centered research and its impact (How does student-centered research differ from traditional research? What secondary effects in the classroom and community might undergraduate research have?), redefining success metrics in student-centered research (How can we capture impact beyond publications and grants? How can we define measures that align with student impact?), exploring issues of accessibility and participation (How might student-centered research change models of student selection? How might it change faculty's scope and focus of research?), and structural mechanisms to empower student-centered research (Given constraints on time and/or resources, how can faculty enable undergraduate research?). Through this BOF, we also plan to build a sustainable community of interested academics leaders (using private Google+ or Facebook group) interested to share and collaborate on future undergraduate research efforts.	How to Build a Student-Centered Research Culture for the Benefit of Undergraduate Students: (Abstract Only)	NA:NA:NA:NA:NA	2018
Cynthia Taylor:Jaime Spacco:David Bunde:Joe Hummel:David Hovemeyer	Peer Instruction (PI) is an active learning technique with over 25 years of research supporting its efficacy. Documented benefits in CS include lower WDF rates, higher exam scores, and improved retention in the CS major. One key difference between PI and traditional lecture is the use of "clicker questions" in class to challenge students' conceptual understanding. Students discuss and answer these questions in small groups before the instructor goes over the question with the entire class. This BoF is for both those using PI and those interested in starting. Attendees will meet other PI practitioners, discuss tips and tricks, and exchange materials. We will provide pointers to PI materials for a variety of courses, including CS1 & CS2, Machine Organization, Programming Languages, OS and more.	Peer Instruction: Tips, Techniques and Resources (Abstract Only)	NA:NA:NA:NA:NA	2018
Jennifer Bivens:Ashwin Satyanarayana:Jan Way Chen	In the last decade, data analytics has been successfully applied in the field of education to predict student performance. There exists an obvious opportunity for this educational data to make a positive impact on computer science instruction. Machine learning models can use historical data containing behavioral and education-related attributes, such as previous course work, grades and time spent in class discussions, to make predictions about academic performance for prospective students. Even with proven predictive success, many questions related to the application of performance prediction remain unanswered, particularly in the context of larger debates about risk identification, grouping, and bias. This BoF will provide a platform for exploring the following questions: (a) How should computer science instructors use prediction data? Could results be used to group students by predicted academic performance levels? Could predictions help in the identification of students with low performance predictions for additional mentoring? (b) Should predictions be shared with students/instructors? (c) If so, how could instructor bias resulting from these predictions be minimized to ensure fair evaluation of students' actual performance? (d) Do computer science instructors attending this BoF currently implement any predictive tools or risk grouping? Would they consider doing either? (e) How much importance would instructors place on the results of performance predictions? To what degree would the accuracy of a model affect adoption?	Pros and Cons of Using Data Analytics for Predicting Academic Performance in Computer Science Courses: (Abstract Only)	NA:NA:NA	2018
Catherine Bareiss	Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Topics include: sharing classes, increasing enrollment, general education, and specialized courses.	Small Department Initiative: (Abstract Only)	NA	2018
Chris Gregg:Mark Sherriff	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position, providing the possibility of promotion, longer-term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information.	Teaching Track Faculty in Computer Science: (Abstract Only)	NA:NA	2018
Amardeep Kahlon:Cheryl Calhoun:Wendy DuBow:Jill Denner:Louis Ann ("Lou Ann") Lyon:Deborah Boisvert:Melanie Williamson	Over half of community college (CC) students are non-white, and more than half of all Hispanic and Black undergraduates start at community college. Given that community colleges (CCs) enroll minorities and women in larger numbers than four-year institutions, it is imperative for both, CCs and four-year institutions, to engage in collaborative efforts to broaden the participation of diverse peoples into computing and facilitate unobstructed pathways from the two-year to four-year educations. While CCs are rich in diversity, their students face an inordinate number of obstacles transferring to a bachelor's degree particularly in computer science (CS). The complexities of the CC landscape require that experts from various backgrounds come together to share knowledge and experiences to contribute to a better understanding of the role CCs can play with four-year institutions in broadening the participation efforts in CS and information technology (IT).	The Authentic Inclusion and Role of Community Colleges in National Efforts to Broaden Participation in Computing: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2018
Briana B. Morrison:Adrienne Decker	Subgoal labels are function-based instructional explanations that describe the problem-solving steps to the learner, highlighting the solution process. There is strong evidence that the use of subgoal labels within worked examples improves student learning in other STEM fields. Initial research shows that using subgoal labels within computer science improves student learning, but this has only been tested using a single programming concept (indefinite loops) with text-based programming languages. The proposers are currently expanding subgoal labels to the main programming concepts taught in an introductory programming course using an imperative programming language. In this BOF we seek to uncover tacit knowledge that programming instructors have in order to develop instructional materials that bridge the gap between students, who are CS novices, and instructors, who are CS experts, to improve learning for students who are under-prepared for or struggle in CS1. We will be seeking feedback on the selection of programming topics to be covered, the defined subgoals for those topics and the worked examples created for instructional purposes.	Using Subgoals to Improve Student Performance in CS1: (Abstract Only)	NA:NA	2018
Michael P. Rogers:Bill Siever	There is no doubt that Computer Organization (Comp Org) is not as central a topic as it once was. In the ACM's curricular guidelines, the number of hours devoted to Computer Architecture and Organization has fallen from 36 core hours in 2001 and 2008 to 16 tier 2 hours in 2013, and, incredibly, students are not always as enthralled with the subject as their instructor. Therefore, we are compelled to ask? what to do about Comp Org? How might we revamp it to make it more relevant and appealing? Should we concentrate on one ISA? Use CISC, RISC, or both? Do we need to use real, contemporary hardware, or stick with simulators? More radically, can micro-controllers, used for Internet of Things (IoT) platforms, be used to broaden the course, to weave together both traditional Comp Org topics and IoT?	What to do about Comp Org?: (Abstract Only)	NA:NA	2018
Sloan Davis:Olga Garcia:Chris Stephenson	The demand for CS teacher professional development (PD) is increasing rapidly, but not all education stakeholders are equipped to identify CS PD needs, evaluate CS PD options, and track teacher and student outcomes. In this BOF, representatives of Google's CS educator PD grant program (formerly CS4HS) will share conclusions from the 2016 PD grant cycle and a recent literature review. Participants will discuss how the CS education community can disseminate knowledge about CS PD to the communities that need it most. At SIGCSE 2017, Google discussed CS PD best practices and common successes and challenges in creating sustainable PD programs. This year, we will discuss how to equitably scale these best practices so that education stakeholders are equipped to implement quality CS education, ensuring all students have quality CS learning experiences. This session is intended to be highly interactive and solution-oriented. Discussion themes and outcomes will be documented and shared with attendees.	Working Together to Provide Equitable CS K-12 Educator Professional Development at Scale: (Abstract Only)	NA:NA:NA	2018
John P. Russo	Increasingly we teach a diverse population of students, many with learning differences such as ADHD and Autism Spectrum Disorder. An educational framework called universal design for learning guides the development of flexible learning environments that can accommodate individual learning differences. This BOF will look at employing universal design to CS courses in order to accommodate the diverse learning styles of today's students.	Designing CS Courses using Universal Design Concepts: (Abstract Only)	NA	2018
Gloria Childress Townsend:Paula Gabbert:Wendy Powley	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). The SIGCSE Board approved the charter, because the underrepresentation of women in computing is an international problem and an embarrassment for our profession. A BOF provides SIGCSE program advertising that will create a large audience for dissemination of information concerning successful gender issues projects and can provide time for discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ACM-W, NCWIT, ABI, CDC, CRA-W, etc. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organization and who do not customarily have an opportunity to share ideas face-to-face.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA:NA:NA	2018
Brian P. Railing:Cynthia Taylor:Saturnino Garcia	Research shows the benefit of using active learning in computer science education; however, only limited resources (such as, prior publications) exist for systems courses (including architecture, networking, operating systems). This BoF brings together practitioners of various levels of experience to discuss ways to augment or replace traditional lecturing. We will discuss different techniques, possible materials available, and results measured. This BoF should benefit both instructors considering adopting techniques and instructors looking to discuss issues with their usage.	Active Learning in Systems Courses: (Abstract Only)	NA:NA:NA	2018
Linda Ott:Leo C. Ureel:Charles Wallace	The need for K-12 students to engage in Computer Science has been acknowledged in the White House call for "Computer Science for All" and supported through a variety of institutions. Implicit in many initiatives, and explicit in Google's CS4HS initiative, is the notion of a "Community of Practice" involving K-12 teachers. Communities of Practice are mutually supportive groups to assist newcomers as they find their way in a new endeavor. Teachers can support one another at multiple levels: technical, pedagogical, political, and emotional. Maintaining a Community of Practice for CS teachers, however, can be challenging. Demands on teacher time, lack of institutional buy-in, physical isolation, and lack of appropriate peer institutions are some confounding factors. A true community of practice requires maintenance: ways to identify newcomers or other participants in need, and ways to identify and share the resources that can help others. In this BoF, educators who are working to expand CS within K-12 education will discuss the challenges in the Community of Practice approach and share proven ways of addressing them.	Building and Nurturing Communities of Practice among K-12 CS Teachers: (Abstract Only)	NA:NA:NA	2018
Jacqueline Smith:Diane Horton	Booming interest in computer science and innovations in the way we teach it have allowed us to teach a larger, more demographically and geographically diverse group of students. One of the new challenges facing us now is that it can be harder for instructors to get to know many of their students, and for students to connect with their peers. Building community in our physical and virtual classrooms is difficult, but important for the success and learning experience of our students. Community is especially important for "non-traditional" CS students, who are more likely to struggle with imposter syndrome, or to feel like they don't belong in a CS classroom. Building Community in Large or Virtual Classrooms In this BoF session, we'll discuss the strategies, activities, and interventions we've tried and found successful or unsuccessful in building course community, and helping students believe they belong in CS.	Building Community in Large or Virtual Classrooms: (Abstract Only)	NA:NA	2018
Lori Carter:Derek Schuurman	Computing is not neutral. The way that we collect and manipulate data, the decisions that are programmed into autonomous devices, even the ways that we use each other's code reflects someone's values. Because technology has more and more influence in society, consideration of these values should be a part of a Computer Science student's education. The ACM/IEEE 2013 Curricula Guidelines for Computer Science programs reflects this imperative. The writers of the document suggest that between 11 and 16 of the core hours be devoted to Social Issues and Professional Practice. Where and how should we include the essential discussions of values, ethical considerations, social issues, and professional practice in the curricula? Should a whole course be devoted to the topic? If so, when in the program should it appear? Should we instead incorporate values topics related to the subject matter in each computing course? If so how? Perhaps we should leave the discussion to the philosophers or ethicists on campus. Will our students then be able to make the connection between computing and general ethics/values frameworks? Which aspects of values judgments should be addressed? Can we generalize in a way that will still apply to future advances in our fields? We'd like to hear from you.	Computing and Values: (Abstract Only)	NA:NA	2018
Karen C. Davis:Brandeis Marshall:Lancie Affonso	Widespread interest in developing and enhancing undergraduate data science education is evidenced by the interim report Envisioning the Data Science Discipline: The Undergraduate Perspective recently released by the National Academies of Science/Engineering/Medicine. The report identifies data modeling as one of the key concepts for developing and applying data acumen (making good decisions and judgements with data). We define data modeling as a process for documenting how data is connected, processed, and stored; a particular data model may address one or more of these aspects. This BoF session is proposed to focus specifically on data modeling skills for data science study. Traditional data models taught in computing curriculum include Entity-Relationship, UML, and relational models; these topics can be covered at various points in the curriculum, but are typically included in database courses. The proliferation of advanced data models and systems (for example, but not limited to, document stores, graph databases, column stores, key-value stores, and relational + map reduce) provides an opportunity for developing/enhancing database curriculum at the undergraduate level to support programs in data science. A goal of this BoF is to identify faculty who wish to develop and share best practices for teaching data modeling for data science, including course learning objectives and outcomes, techniques, and materials.	Data Modeling for Undergraduate Data Science: (Abstract Only)	NA:NA:NA	2018
Farzana Rahman:Mohsen Dorodchi	The use of Process-Oriented Guided Inquiry Learning model (POGIL) in introductory computer science courses has shown to be very useful in active learning delivery of fundamentals of computer science. Moreover, the aspect of organized teamwork in POGIL helps students develop professional skills to be ready to participate in team-based upper division CS courses such as software engineering or capstone courses. POGIL introduces a structured, yet flexible model for group activities. It also resolves the issue of member participations in activities since everyone needs to take a role and switch them in different activities. Time-management is also enhanced with POGIL. Though POGIL is a promising pedagogy, it also presents some unique challenge such as how to adopt the current activities to specific model of the classrooms. The implementation of courses can follow various approaches depending on factors like: class size, institutional culture, background of the students, the nature of facilities, and instructor preferences. In particular, faculty might need to invest significant amount of time to develop and/or work on modifying existing materials for specific courses. Therefore, instructors who choose to be POGIL facilitators has various decision choices. Detailed discussion about all these challenges, choices, options, and approaches are provided which can benefit faculty who are using and/or interested in adopting POGIL in CS courses. The discussions could be helpful to those who are only interested in group-based active learning teaching of CS courses.	Effective POGIL Implementation Approaches in Computer Science Courses: (Abstract Only)	NA:NA	2018
Amardeep Kahlon:Bonnie MacKellar:Anastasia Kurdia	Plagiarism is of great concern to faculty in all fields, including computer science as it leads to one certain outcome -- a compromise not just in student learning but also in the entire academic process. Faculty have tried to find ways to deal with this epidemic such as writing new course materials each semester, putting a larger or entire grade focus on exams, or even asking individual students to explain their assignments. However, plagiarism remains a source of frustration for both faculty and administrators. This BOF will bring interested faculty together to discuss the various and surprising ways in which students plagiarize, the methods of countering plagiarism, and the currently available tools for detecting plagiarism. Questions we will be discussing include: Do students understand plagiarism in the context of writing software? How can we develop an atmosphere that discourages plagiarism? Does such a thing as a "plagiarism-proof" assignment exist? If programmers go to online repositories, modify the code, and use it in professional programs then is it fair to expect the students to do just the opposite?	Combating the Wide Web of Plagiarism: the Discussion Continues (Abstract Only)	NA:NA:NA	2018
Barbara Boucher Owens:Alison Clear:John Impagliazzo:Mirella Moro:Ming Zhang	SIGCSE members are part of a worldwide community of computing educators and professionals. This discussion provides participants an opportunity to share global differences in vocabulary and interpretation of idioms and assumptions that pervade teachers and researchers. Lack of cultural knowledge can hinder understanding meaning of terms; communication among colleagues can be confusing. Lack of understanding also inhibits the leveraging of scholarly work and cooperation among colleagues from different cultures. E.g., information technology in Australia means the field of computing, and the baccalaureate degree "Computer Science and Technology" in China is equivalent to a degree in computer engineering. Terminology that Americans use such as AP for Advance Placement or K-12 for pre-undergraduate education is meaningless in many parts of the world. This discussion is an outgrowth of an ad hoc subcommittee formed by the ACM Education Council on global issues. Serving as a reference for the discussion is the seminal article by Clear, A. et al. "What's in a Name?: International Interpretations of Computing Education Terminology," in The Proceedings of the 2015 ITiCSE on Working Group Reports. Attending this BOF should heighten awareness of what changes might lead to a truly global computing education community. In addition to Owens, Alison Clear from New Zealand, Ming Zhang from China, and John Impagliazzo from the USA have agreed to help lead the discussion.	Global Awareness for Computing Educators and Scholars: (Abstract Only)	NA:NA:NA:NA:NA	2018
Christopher Gregg:Benjamin Hescott	In their "Generation: CS" report this past year, The Computing Research Association detailed the explosive growth of computer science majors across both large and small institutions calling it "larger today than any time previously". Using data from The Taulbee Survey they show a 500% increase in the number of majors in computer science, but only a 50% increase in full-time faculty. Unfortunately, this growth has major consequences outside the classroom setting. The ability for faculty to engage in meaningful advising relationships with students has been severely impacted by this record growth. One solution could be to hire staff to assist students in course selection and degree requirements, but meaningful mentorship is much more than checking boxes and exemptions. Can we be effective advisors when advising loads have skyrocketed? In 2004, The CRA, lists effective mentoring as one of the challenges faced by broadening participation in computer science. In particular, they advocate for better training for mentors. Now faced with extreme ratios the need for creative mentoring practices is paramount. This BOF will provide a platform to discuss and share solutions from a variety of institutions. Questions such as: "How can we identify students who would like to do research and continue to graduate school?", "How do we expose students to independent learning in large classes?", "Can we leverage peer mentoring?" "How can we make advising better?" "What processes can be automated?".	How Do We Provide Effective Student Advising and Mentoring During Record Growth?: (Abstract Only)	NA:NA	2018
Richard Weiss:Ambareen Siraj:Jens Mache:Blair Taylor:Siddharth Kaza:Ankur Chattopadhyay:Michael E. Locasto	We need to greatly expand the community of faculty teaching cybersecurity using hands-on exercises. The number of security-focused competitions and exercises has increased in recent years so that faculty need to choose those that can best be integrated into their courses. As a community, we can contribute to each other/s projects. We would like to bring together both new and experienced faculty to build community. Our Facebook group (https://www.facebook.com/groups/TeachingCyber/) allows us to work together outside of SIGCSE events, and we are developing a critical mass of users. In the BoF, participants can sign up for the closed group. Participants will discuss answers to specific questions on teaching security. One goal of our BoF is to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts, including our own (e.g. Security Injections, the Security Knitting Kit project, and EDURange). The BoF also benefits experienced members, helping them to disseminate their work and reach other faculty with similar interests. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. We will discuss ways to integrate security-related exercises into existing courses. The questions we will ask are, What materials and exercises have you tried? What are your experiences? How do we expand and improve cybersecurity education?	Integrating Hands-on Cybersecurity Exercises into the Curriculum in 2018: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2018
John Owen:Carol Fletcher:Pat Yongpradit:David Benedetto	Currently, 27 states and the District of Columbia have some form of teacher certification in computer science. This includes a variety of pathways such as endorsement, certification, licensure or other authorization that explicitly names CS. Many of these states, as well as those that have no CS teacher certification, are in the process of reviewing certification standards and pathways with the goal of increasing the number and quality of K-12 CS instructors and thus, access to high quality CS coursework in K-12. The Praxis exam is one of the few nationally recognized measures of CS teacher content knowledge but the current exam is out of date. A group of state leaders have been working with ETS to update the competencies measured by the Praxis. The objective of this BOF is to bring together stakeholders interested in contributing to the conversation around what a beginning CS teacher should know and be able to do to in CS, provide an overview of what has happened thus far to address these questions, share the recently revised Praxis draft framework, and give individuals an opportunity to provide input on the development of a national consensus related to new K-12 CS teacher competencies.	K-12 CS Teacher Certification: What Should New CS Teachers Know and Be Able to Do? (Abstract Only)	NA:NA:NA:NA	2018
Darci Burdge:Gregory W. Hislop:Joanna Klukowska	Free and Open Source Software (FOSS) is interesting to many students and provides an excellent opportunity to observe and practice many aspects of software product development and management. There is an active community of faculty fostering student participation in open source within computing curricula (see http://teachingopensource.org). However, the opportunity to add coverage of FOSS varies considerably from institution to institution, and there are always limits to what can be done with existing computing curricula. One approach to solving this limitation is for students to learn about and participate in FOSS projects as an extra-curricular activity. This BoF will provide a forum for faculty members to discuss open source student clubs. The Mozilla Foundation has been developing a program to support open source clubs. The initial clubs were primarily located in Asia, but Mozilla started an effort to expand the clubs to the U.S. during the current academic year. The BoF will include discussion of this effort and materials developed by Mozilla. (See https://opensource.mozilla.community/)	Open Source Student Clubs: (Abstract Only)	NA:NA:NA	2018
Paul Ruvolo:Jeff Dusek:Larry Goldberg	What is needed to help CS professors teach their students about the fundamental concepts of accessible design? How can every CS student become competent in the development of mainstream technologies that meet the needs of people with disabilities? Society is demanding such capabilities and companies such as Microsoft, Facebook, Oath (Yahoo), Adobe, and Google are today working with major universities to assure that new hires graduate college with this essential skillset. The Teach Access project is actively addressing the barriers, incentives and mechanisms through curriculum change, influencing accreditation, faculty bootcamps, industry guest lectures, online tutorials, and student engagement programs. What works for you and how can more university and faculty champions be engaged?	Teach Access: Teaching the Design and Development of Inclusive Technologies for All (Abstract Only)	NA:NA:NA	2018
Darina Dicheva:Christo Dichev:Elva J. Jones:Peter J. Clarke:Lillian N. Cassel	The low performance and drop-outs in Computer Science classes are frequently attributed to lack of engagement and motivation. Meanwhile, gamification - the application of game design principles and game mechanics to a non-game context -- increasingly attracts the interest of educators due to its potential to foster motivation and behavioral changes in learning contexts. Course gamification is about using game elements, such as instant feedback, freedom to fail, freedom of choice, achievements, leveling, progress mechanics, badges, and leaderboards, as interventions in the learning process. This BOF will provide a platform for a discussion of when and how course gamification strategies can be beneficial for improving student motivation, engagement and achievements in Computer Science classes. Questions to be discussed include: What game elements could be useful in gamifying a computer science course? How can an instructor incorporate game elements in the design of their courses? What support the instructor may need for gamifying their courses? Could some game elements have potential drawbacks on student motivation and performance? The discussion leaders and attendees with experience in applying gamification in their courses will share examples of successes or failures, challenges, problems, tips, and techniques for gamifying learning with each other and those new to the use of gamification. Two NSF sponsored projects related to the use of gamification in STEM courses will seed the discussion. As an outcome of the discussion, we hope to collectively identify some lessons learned and challenges to be overcome for a successful application of gamification in Computer Science education.	Using Gamification Strategies to Motivate and Engage Students in Computer Science Courses: (Abstract Only)	NA:NA:NA:NA:NA	2018
Christian Murphy:Jennifer Akullian	Long hours, pressure to meet deadlines, and fear of failure are just some of the stressors that affect CS students and professionals alike, leading to burnout, anxiety, depression, and other mental illnesses. A quarter of the world's population lives with some form of mental illness, and a 2015 UC-Berkeley study reported that nearly 50% of STEM graduate students live with depression. Furthermore, recent research suggests that 50% of those working in the tech community have been diagnosed with a mental illness, a statistic that may actually underestimate the problem because of stigmas in certain cultures and communities around seeking mental health services. These numbers all suggest a significant need for awareness and support in the tech industry. This BOF will provide attendees an opportunity to discuss the mental illnesses that affect CS students, including how to recognize symptoms, what resources are available, and how to create a culture of understanding and support within their communities. More importantly, we hope to create a space in which those living with mental illness can share their stories so that other participants can get a first-hand appreciation of the challenges they face.	We're All in This Together: CS Students, the Tech Industry, and Mental Health (Abstract Only)	NA:NA	2018
Stefan C. Christov:Mark E. Hoffman	The ability to manage software development teams is an important skill in the computing professions. The Software Engineering Body of Knowledge devotes a separate knowledge area to this skill. It is difficult, however, to effectively teach software project management (SPM) in a traditional undergraduate setting, because it is logistically challenging to find software development teams that students can manage over a sufficiently long period of time. Thus, students often cannot apply in practice the SPM theory they learn in class and, in particular, the soft-skill aspects of SPM. To enhance student learning and experience of SPM, we have established a collaboration between a senior-level SPM course and a sophomore-level introduction to software development (ISD) course. In this collaboration, SPM students serve as managers of teams of ISD students during a semester-long project. We designed a methodology to evaluate the collaboration in terms of student learning and experience. This methodology is based on student surveys, reflections, meetings with students, and analysis of student artifacts (e.g., meeting minutes). We are in the third year of a longitudinal study in which we evaluate the collaboration after each semester it runs and evolve that collaboration based on the collected evidence. This poster describes the collaboration, the evaluation methodology, the continuous improvement process for evolving the collaboration, lessons learned on the educational benefits of the collaboration, and issues, such as the amount of managers/ authority, nature of managers/ tasks, logistics, and scheduling.	The Ongoing Development of a Collaboration between a Software Project Management Course and an Introduction to Software Development Course: (Abstract Only)	NA:NA	2018
Mark M. Meysenburg	This poster summarizes the product of the author/s 2016 ACM SIGCSE Special Projects grant. The author created a Reacting to the Past (RTTP) historical role-playing game entitled "Charles Babbage, Ada Lovelace, and the Dawn of Computing." According to the RTTP Web site, RTTP "...consists of elaborate games, set in the past, in which students are assigned roles informed by classic texts in the history of ideas. Class sessions are run entirely by students; instructors advise and guide students and grade their oral and written work. It seeks to draw students into the past, promote engagement with big ideas, and improve intellectual and academic skills." In the Babbage game, students take on the personae of the key figures in early Victorian science and engineering, and debate whether or not the British government should provide funding for the development of Babbage/s Difference and Analytical Engines. Game sessions take place at Babbage/s home, the London Mechanic/s Institute, and the Royal Society. The game can be played in six, seven, or eight class sessions, and includes three optional labs. There are 28 playable characters in the game. The game can be used in history of science or history of computing courses, and also in general-audience first-year seminar courses, to encourage students to study computing. The poster covers the background of RTTP games in general; some of the specifics of the Babbage game in particular; and includes pictures and insights from the first playtesting of the game during the author's fall 2017 first-year seminar course.	Charles Babbage, Ada Lovelace, and the Dawn of Computing: (Abstract Only)	NA	2018
Sven Jatzlau:Ralf Romeike	Since the emergence of block-based visual programming languages as a new take on programming environments, they have served as a successful entry point into programming for novice learners. Over time, they have been developed and improved to become increasingly accessible, intuitive, and easy to use. In the course of this evolution, both uncommon and entirely new language concepts have been introduced, such as the cloning of objects, or nesting of sprites. However, the question of how to teach them has yet to be answered: the mostly visual representation of program flow, output and code, and the way a user interacts with these aspects can make traditional teaching practices inadequate. Instead, block-based languages require new practices, methods, and strategies, which will be developed in this research project. To this end, new concepts must be evaluated with regards to their strengths, weaknesses, and applications. Following this step, strategies with which to teach these concepts can be developed. Therefore, this poster presents the initial findings of a research project concerned with the theory of teaching block-based programming. In this preliminary study, we have identified new concepts found in Scratch, Snap! and GP, members of the most common block-based language family. In the next phase of the project, strategies for teaching these new concepts will be developed and assessed.	New Teaching Strategies for New Concepts -- What is Different with Block-based Programming?: (Abstract Only)	NA:NA	2018
Adam Fischbach:Yana Kortsarts:Suk-Chung Yoon	We present our experience developing and managing new interdisciplinary programs in computer forensics and digital media informatics -- the results of successful collaboration with social science faculty. The computer forensics minor is an interdisciplinary program that integrates criminal justice and computer science and combines both theoretical concepts and practical skills to prepare students for a career in the area of information security and digital forensics. The digital media informatics major is an interdisciplinary program run jointly by the computer science and communication studies departments. The program provides both broad and targeted perspectives on the field of informatics and helps students develop unique skills that can be adapted to the rapidly changing computer and media environment through four specialized concentrations: (1) audio-visual, (2) graphics, mobile, & web development, (3) gaming & artificial intelligence, and (4) digital writing. We describe the various stages in developing the interdisciplinary programs including an analysis of competitive academic programs, evaluation of current resources, qualifications and faculty considerations, the process of developing the program objectives and learning outcomes, and assessment strategies. We focus on common issues that arose during the development process such as the challenge of designing balanced curricula for interdisciplinary programs, the need for designing new courses and renovating existing courses. We also discuss the anticipated costs of the programs, required resources, recruitment strategies, and the administrative approval mechanism.	Developing Interdisciplinary Programs: Challenges and Opportunities (Abstract Only)	NA:NA:NA	2018
Brandon Myers	Research shows that active learning can increase student performance and engagement, but access to materials is a notable barrier to using research-based instruction strategies in CS and Engineering. We present results of a project-in-progress that aims to create, pilot, revise, and disseminate POGIL activities for Computer Organization and Architecture. POGIL is a research-based instruction strategy that comprises self-managed teams, guided inquiry (or, exploration), and development of process skills, such as critical thinking and assessment. The strategy has been shown to improve student performance and engagement in courses in scientific disciplines and, more recently, CS. This poster presents how we have applied the methodology for POGIL activities to Computer Organization and Architecture and highlights one activity in depth. From 2 pilots with 36 and 70 students we produced revisions and timings for 6 activities. We also discuss lessons learned in a) facilitation, such as the importance of roles and the tradeoffs of class-level synchrony and b) authorship, such as the appropriate choice of model (or, subject of inquiry) and level of guidance in the exploration phase of an activity. The intended outcome of this project is to make these activities publicly available on cspogil.org.	POGIL Activities for Computer Organization and Architecture: (Abstract Only)	NA	2018
Zhen Zeng:Yuli Deng:Sharon Hsiao:Dijiang Huang:Chun-Jen Chung	Engaged students are more likely to spend longer time on study, and obtain a better academic performance. Previous studies investigated the role of student engagement in virtual learning environments (e.g., online course, online discussion forum, and intelligent tutoring systems). However, it is still challenging to engage students on a virtual hands-on lab system. Comparing to other virtual learning environment, students have a unique learning model -- learning by doing in virtual hands-on lab. To successfully engage students in a large hands-on lab in cybersecurity education, instructors need to understand how students engage in a lab session, and how their engagement affect lab learning outcome in this specific educational setting. In this paper, we developed a conceptual model, especially for virtual hands-on lab education, to describe student engagement during learning processes in working on virtual hands-on lab tasks. This model adopts two existing educational models on engagement behavior. Preliminary data was collected from 109 students' lab project in a computer network security course at Arizona State University in 2016 Fall semester. Pearson correlation coefficient analysis results reveal two statistically significant preliminary results: the longer time a student spends on reading lab instructional material, the more likely the student works longer time on lab tasks (p < 0.01); the longer time a student works on lab tasks, a better learning performance the student archives (p < 0.01).	Conceptualizing Student Engagement in Virtual Hands-on Lab: Preliminary Findings from a Computer Network Security Course (Abstract Only)	NA:NA:NA:NA:NA	2018
Isabella Corradini:Michael Lodi:Enrico Nardelli	The term "coding" is more and more used to talk about the diffusion of computer science in school. While computer scientists, computing professionals, and educators consider this term very close or even equivalent to "programming", media tend to use it to describe something new and different from the "old boring CS". We provide here the main results of a large-scale investigation among primary school teachers (N=972) exploring their viewpoint on coding and its relation to programming. We asked to describe what coding is for them: only 40% of the relevant answers used terms explicitly mentioning programming. An additional 19%, while not directly mentioning programming, made reference to an information processing agent executing instructions. An additional small subset of teachers, while considering coding different from programming, described such difference using "tolerable" characterizations. We also analyzed the (sometime conflicting) misconceptions of teachers trying to explain why coding and programming are different.	Coding and Programming: What Do Italian Primary School Teachers Think? (Abstract Only)	NA:NA:NA	2018
Rentaro Yoshioka:Tastuki Kawaguchi	The importance of problem solving skills in addition to computational skills for computer science graduates is increasing. The authors present a curriculum of a creativity development program for undergraduate computer science students that aims at exposing them to problem solving and software development through a series of three courses spanning a period of six months. The focus of this initiative is to teach problem solving skills and software development skills as an integrated skill-set and take advantage of the combined effect to address the challenge for students to connect computer science knowledge to real-world problems, an issue apparent in our current curriculum. The curriculum starts with the first course on creativity development in which students propose solutions to a real-world problem through field-work and information gathering/analysis spanning five days. The second course introduces project management and software development through another five-day software development team project. In the final course, student teams work on a software development request from customers during a period of 4 months. All three courses use the same problem. The program is in its first year of offering with a relatively small group of students. The presentation will display our findings from program assessment including student scores on individual performance tests and student perception. Details of the project can be found at: https://www.u-aizu.ac.jp/enpit/	How to Foster Creativity?: Curriculum of Creativity Development Program for Computer Science Students (Abstract Only)	NA:NA	2018
Xiaojun Wu:Yongqiang Chen	The ACM International Collegiate Programming Contest (ICPC) is the most popular programming competition for universities worldwide. This contest examines the comprehensive ability of teams to program to solve problems. Teamwork is important besides team members' personal skills and capabilities. There have been literature on computer algorithms, personal training for programming contests, and team strategies during the contests. However, few articles involve team building and teamwork training for programming contests. This poster hopes to provide guidance and reference for coaches and contestants in teamwork training for programming contests, so that a team can benefit most from limited time of training to make as great progress as possible. This poster shares the authors' experience in team training for ICPC. Knowledge, skills, and attitudes (KSAs) of teamwork for programming contests are concluded and presented in details. The authors represent various teamwork methods graphically, so that it is visually helpful for study and discussion. These teamwork methods are pure teamwork, no-teamwork, some paired methods, and the method preferred by the authors. A team training form is then proposed to record the team behaviors in team training. By examining the training record, the coach and the team themselves can discover the team's strengths and weaknesses in various aspects, and evaluate the teamwork quality in the ways of communication, coordination, balance of member contributions and mutual support. Handouts will be available showing various teamwork methods in a graphical representation and some real training record forms.	Teamwork Training for Programming Contests: (Abstract Only)	NA:NA	2018
Rebecca N. Wright:Jane Stout:Geraldine Cochran:Thu Nguyen:Cynthia Sanchez Gomez	We have developed the Douglass-SAS-DIMACS Computer Science Living-Learning Community (LLC) for first-year women at Rutgers, now in its second year. Each year, around 20 first-year women undergraduates at Rutgers who intend to major in computer science are selected for the LLC. LLC participants live in a common dorm and are provided with an educational, mentoring, and community-building program that supports their progress as Rutgers students and as computer science majors. To our knowledge, this is the first undergraduate living-learning community for women in computer science at any university. A focus group conducted with women from the inaugural cohort revealed that faculty support contributed to feelings of belonging, both in the program and in the CS department, among the participants; participants valued the academic support they received as part of the program and felt communication structures within the program were effective; and participants expressed a desire for advanced undergraduate peer mentors. A quasi-experimental study of this cohort indicated that LLC participants showed a decrease in satisfaction with the CS department at Rutgers; a decrease in computing-related self-efficacy; and an increase in the belief that computing ability is inborn. Follow up interviews suggested that the efficacy of the LLC might be dependent on two factors: participants' commitment to a CS major coming into the program and participants' level of involvement with the LLC group. In response to these results, we have made some changes to the program and continue to carefully study the program in order to maximize its effectiveness.	Computer Science Living-Learning Community for Women at Rutgers: Initial Experiences and Outcomes (Abstract Only)	NA:NA:NA:NA:NA	2018
Subhajit Chakrabarty:Fred Martin	Student success rates in introductory computer science courses at colleges and universities across worldwide are scandalously low - 30% to 50% of students fail a first-semester course. At our university, over the past ten semesters, 40.6% of our students failed our first-semester computer science course. A survey (204 computer science students) was administered at the beginning of Fall 2016 to measure two hypothesized constructs: one on prior engagement in activities (such as summer camp, jobs) related to computer science, and another on prior experience in computer science topics. The prior experience bank consisted of several yes/no questions asking about familiarity with specific topics found in a first-year computer science course (e.g. globals, arrays, conditionals). The survey data was matched with the final course grades. Results revealed that the prior experience variables could be construed as a construct, but this was not the case with the prior engagement variables. We discovered a statistically significant relation between prior experience and course grade, with more experience predicting higher grades. Except ethnicity, other variables such as gender and transfer status were not found to be significant. This study emphasizes the need to consider the prior knowledge of students in building introductory computer science curricula, such as creating multiple tracks with students self-selecting into higher or lower prior-experience cohorts.	Role of Prior Experience on Student Performance in the Introductory Undergraduate CS Course: (Abstract Only)	NA:NA	2018
Xiaochun Yang:Jiawei Liang	With the increasing demand for understanding the theory of machine learning, professional people without technical background need to work with machine learning to solve the problem and to facilitate fostering work. The poster describes machine learning online education experience for professional industry people without technical background and machine learning knowledge. Firstly, the poster lists machine learning application requirements of professional people from various of industry area. Secondly, the poster analyzes the demand and typical characteristics of professional people. Based on above analysis, the poster proposes course framework including assignment, small projects and reading materials to assist professional people to understand the theory of machine learning and utilize Python machine learning open source framework to solve the problem in the industry and facilitate industry development. From the perspective of the application, the poster presents classical machine learning algorithms to help professionals to resolve collaborative filtering, classification, clustering, and optimization problem. Also, the poster introduces the instruction process of deep learning by using TensorFlow and teaches the student to understand complicated conception along with philosophy thinking. To broaden students/ horizons, a general-purpose reasoning system, Non-Axiomatic Reasoning System which is different from conventional reasoning systems is introduced. To help the student understand mathematics related conception, the author describes the instruction techniques including the graphical representation of knowledge, teaching with dialogue, to guide students to think deeply and to attract attention. To evaluate the objective of the course, the author summarizes the development progress, feedback from students and future improvement teaching action.	Machine Learning Online Education Experience for Non-technical People: (Abstract Only)	NA:NA	2018
Laura Hobbes LeGault:Matthew Berland	Pair programming in CS1 courses has been shown to have many benefits (both to students and instructors), and it is widely employed. Other than assignment by instructors, how do students select their partners, and what are their perceptions of working with a partner? In our study, students in a CS1 course for non-majors were required to complete a brief, anonymized survey after each homework assignment; we analyzed their survey responses over the course of the semester and compared the results of students who worked with a partner and students who worked alone. Pairs and individuals judged assignments to be about the same difficulty, but pairs spent less time on assignments. Individuals generally worked alone out of preference, but a minority of them reported interest in working with partners but could not find one on their own. Through our analysis we model relationships between survey constructs, student success, and student satisfaction.	Students' Perceptions of Pair Programming in CS1: (Abstract Only)	NA:NA	2018
Amanda Dickes:Shari Metcalf:Amy Kamarainen:Joe Reilly:Karen Brennan:Tina Grotzer:Chris Dede	In recent years, the field of education has challenged researchers and practitioners to incorporate computing as an essential focus of K12 STEM education. Widely recognized as a "basic skill" necessary for economic opportunity and social mobility, integrating computing within K12 STEM supports learners of all ages in applying computational thinking within established and accessible contexts while co-developing practices essential to mathematical and scientific expertise. The EcoMOD project is an example of such an integration. In EcoMOD, immersive virtual environments are blended with interactive computational modeling tools designed specifically for younger children in an attempt to support ecological knowledge, complex causal reasoning and computational creation in third grade students. Our curricular design is grounded in the Science-as-Practice perspective and literature on young children's computing. In this proposal, we present outcomes from early pilot work with 35 third graders across the greater Boston area. This work has implications for designers of educational technologies by illuminating aspects of children's understanding that researchers and designers can leverage to support deeper and earlier understandings of ecological dynamics and computational practices.	EcoMOD: Integrating Computational Thinking into Ecosystems Science Education via Modeling in Immersive Virtual Worlds (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2018
William Gregory Johnson:Raj Sunderraman:Anu G. Bourgeois	A recent 2017 study from HigherEd.com, shows that roughly 35% of students transfer colleges during their academic career. While much research has focused on the impact of undergraduate student success factors such as flipped classrooms, hybrid learning, and technology usage, we found no studies comparing transfer students versus non-transfer (native). In our research, we measure impact based on CS course load per semester related to pass/fail rates and contrast student status of transfer versus non-transfer (native). We show that transfer students tend to enroll in more CS courses per semester, beyond the department's recommended two. We also show that their performance is consistently different than that of native students, namely higher CS course fail rates and lower CS GPA scores. The detrimental effects and realization in this study is reason for further investigation. More features will be gathered to be used in our continued analysis and we see the need to examine the difficulty of CS courses taken to indicate why one cohort performs poorly and one does not. We conjecture that most transfer students tend to complete their core classes and are left with only CS courses to complete upon transfer. This results in the transfer students taking a heavier CS load and thus impacting their performance negatively, as compared to native students. Considering that many transfer students start their path way in 2-year institutions, it is imperative that better advising strategies are developed to enable the students to succeed upon their transition.	Performance Impact of Computer Science Course Load and Transfer Status: (Abstract Only)	NA:NA:NA	2018
Cheryl Calhoun	With an expanding need for a diverse STEM workforce, community colleges play an instrumental role in filling the need with qualified technicians. This research project will identify and synthesize the experiences of developing and implementing online course components in technical education programs, including information technology and cybersecurity, with an emphasis on projects supported by the National Science Foundation's Advanced Technological Education program (ATE). This study presents findings from a multiple case study of seventeen community colleges programs. The research questions guiding this study include 1) how online education is being used in technical courses and programs and 2) how challenges and benefits are perceived from implementing online education. Two participants from each project (PI and Faculty) were interviewed and program artifacts were collected. The interviews were thematically coded and data were analyzed to determine how hands-on work occurs in online technical courses including key challenges and benefits. The findings include descriptions of synchronous vs asynchronous models, use of didactic and lab based curriculum, fidelity of experience and teaching strategies. Benefits and challenges experienced by both faculty and students are discussed. Findings from this study contribute knowledge about how colleges are implementing online technical education including broader changes that occur concerning structure and philosophy. This project is important to the CSforALL initiative in that it evaluates online implementations of Cybersecurity and Information Technology programs and it provides an insight into best practices for implementing online, hybrid and flipped classroom models.	Online Technical Education in Advanced Technical Education Funded Programs: (Abstract Only)	NA	2018
Katelyn Bright Alderfer:Brian K. Smith:Santiago Ontañón:Bruce Char:Jessica Nebolsky:Jichen Zhu:Anushay Furqan:Evan Freed:Justin Patterson:Josep Valls-Vargas	In parallel programming, there is a shift away from the single execution path of sequential programming to situations where non-deterministic operation force consideration of multiple paths of execution. Compared to the substantial computer science education literature on helping students to learn sequential programming, there are fewer studies of the cognitive difficulties that students follow when learning parallel programming. To address this, we created a computer game, Parallel involving concurrent situations. The game is an abstract representation of concurrency problems where players are asked to solve a progression of puzzles involving arrows moving concurrently on tracks. Play does not require coding. The goals of our research were to 1) explore how students acquire skills in the design of solutions with parallelism, and 2) explore how interactive games can substitute or compliment conventional parallel programming courses. Through two user studies of the game (n=7) where students played the game and used a talk-aloud protocol alongside a researcher, three major themes emerged, that of non-determinism where students were able to make the connection of non-deterministic behavior in parallel programming to the game, self-efficacy where students were stating they felt their knowledge of parallel programming increased after playing the game, and expertise where researchers learned that expertise was important to successful connection of the game to parallel programming concepts These findings show that students are beginning to see the connection between the game/s presentation of concurrency to programming concepts such as non-determinism.	Lessons Learned From an Interactive Educational Computer Game About Concurrent Programming: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Mohsen Dorodchi:Aileen Bendict:Devansh Desai:Mohammad J. Mahzoon	Reflection is a way to get quick opinions from users, clients, etc. Analysis of reflection often involves subjective review and interpretations. On the other hand, data analytics provides guidelines to collect and measure as well as analyze and reflect on data. In our case, learning analytics of students' reflections reveals information about learners, their learning experience, and all their related contexts. Eventually, learning analytics aim is to understand and optimize learning and the corresponding environments (in which learning occurs). It plays a critical role in evaluating students performance and making decisions on how to improve students' success and overall retention. In our study, we focus on applying learning analytics to a heterogeneous data set collected in the introductory programming course. This data set integrated self-assessment reflections along with the existing active learning group activities. By integrating self-assessment reflections, large amounts of valuable data can be gathered to facilitate continuous assessment of students' learning. Using activity-based active learning and peer-instruction, the effectiveness of the content interventions targeting students to understand the fundamental concepts of computer programming is also evaluated. For analysis purposes, we applied a time-based learning analytics model called sequence analysis to learn about the pattern of our at-risk students and use the learned model to predict at-risk students based on their reflections as well as performance in the course.	Reflections are Good!: Analysis of Combination of Grades and Students' Reflections using Learning Analytics (Abstract Only)	NA:NA:NA:NA	2018
Darren Tirto:Alexander Hamme:Keith J. O'Hara:Sven Anderson	Bard College introduces all incoming students to computing through a coding module in its long established writing-intensive program, Language and Thinking (L&T). The L&T program is a mandatory three-week experience for first-year students that has taken place every year at the college since 1981. We present a new version of the computing module that focuses on introducing all first-year students to computer programming through the lens of literature and creative writing. We designed and implemented an interactive text-based game that taught the basics of computer programming using Twine. After playing the game, students attended an undergraduate-led workshop where they transformed paper-based writing pieces into interactive essays in Twine that execute code. We discuss the outcomes of the module and also evaluate the design of a coding experience designed to meet the needs of a writing-intensive course.	Language, Thinking, Code: Interactive Essays with Twine (Abstract Only)	NA:NA:NA:NA	2018
Yvonne S. Kao	When creating assessments, computer science educators and researchers must balance items? cognitive complexity and authenticity against scoring efficiency. In this poster, the author reports results from an end-of-course assessment administered to over 500 high school students in an introductory block-based programming course. The poster focuses on three atypical multiple-choice items, in which students had to select all the correct responses. The items were designed to be more cognitively complex than simple multiple choice questions while remaining easy to score. Results show that this type of item was challenging for students but was predictive of their overall performance.	Alternatives to Simple Multiple-Choice Questions: Computer Scorable Questions that Reveal and Challenge Student Thinking (Abstract Only)	NA	2018
Shannon Ernst:Jennifer Parham-Mocello	This study examines the results of establishing a rubric for design in freshmen computer science courses. The rubric consists of six categories (Understanding the Problem, Relationship Among Parts, Logic, Diagrams, Code Present, Testing) on a binary scale indicating if the category was included or not. The analysis examines four terms of data, one course per term, where students are required to submit a program design a week before they submit their assignment code. The terms differ in population (traditional and non-traditional), content (CS 1 and CS 2) and the level of design guidance (increased guidance/details in the syllabus). Each qualitative design was evaluated using the same rubric to facilitate comparisons between different courses, correlation to assignment grades and overall course grades, there were notable differences between what the populations included in their designs and how frequently the populations included the various categories of the rubric over time. In particular, non-traditional students tend to include more diagrams, logic and relationship among parts than traditional students, and in a CS 1 class without object oriented programming (OOP) versus a CS 2 class with OOP, CS 2 students tend to provide a more global picture of the program than specific details outlined in CS 1 designs, which lacked a big-picture perspective. These insights allow us to better understand how students from varying populations and different course content approach problem solving and design in computer science differently.	Analysis of the Difference in Designs between CS 1 and CS 2 Students: (Abstract Only)	NA:NA	2018
Mahnas Jean Mohammadi-Aragh:Phyllis J. Beck:Amy Barton:Donna Reese:Bryan A. Jones:Monika Jankun-Kelly	Learning to program is a complex task and is a documented persistent challenge. We are intermingling Writing-to-Learn (WTL) strategies in support of learning to program. Initial efforts examined existing writing in the form of guided source code comments. This poster displays the results for the following three research questions: RQ1) What do source code comments tell us about novice programmers' thinking processes while coding? RQ2) What do source code comments tell us about how students visually organize their source code? RQ3) What differences exists for students receiving traditional instruction versus WTL instruction? To answer these questions, we analyzed students' programming assignments from an introductory programming course with and without WTL instruction. The analysis generated a qualitative codebook that can be used to classify source code comments with respect to thinking processes and organizational patterns. The resultant qualitative codebook is displayed and audience members can use the codebook to classify comments. We are soliciting feedback regarding the reliability, validity, and completeness of the codebook, and future project plans. This material is based upon work supported by the National Science Foundation under Grant No. DUE-1612132. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.	Coding the Coders: Creating a Qualitative Codebook for Students? Commenting Patterns (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
Jian Zhang:Marie-Anne Demuynck:Don Edwards:Mari Tietze	It is projected that over 51% of all STEM jobs will be in CS-related fields by 2018 (Georgetown University Center on Education and the Workforce Report). CS4All is the initiative to "empower a generation of American students with the computer science skills they need to thrive in a digital economy" (Computer Science for All, 2016). While embracing this initiative enthusiastically, the undergraduate computer science education community faces many challenges including the curriculum and program development to meet the non-CS major's background and retain their interests in computer science skills in their own degree program. One starting implementation point in the CS4All initiative is to broaden the awareness of computer science in other disciplines. Efforts such as CS+X focus on the joint majors/degree plans between CS and other humanities disciplines (Joint Majors: CS+X). At Texas Woman's University, the Mathematics and Computer Science department developed several new Informatics degree programs that were crafted to be interprofessional and interdisciplinary with a core of traditional computer science courses. In this poster, the authors describe the holistic design and development of those programs, the obstacles and challenges during the degree program approval process, the competency based education practice, and corresponding challenges observed on the traditional undergraduate CS program in the department.	Computer Science at the Interdisciplinary/Interprofessional Education Crossroad: Informatics at Texas Woman's University (Abstract Only)	NA:NA:NA:NA	2018
Stephen H. Edwards:Mukund B.M. Manniam Rajagopal:Nischel Kandru	Pedagogical agents have received a large amount of interest in the recent years. Equipped with the ability to express emotions, these agents can influence the user attitudes, perceptions and behaviour. In our study, we are leveraging these emotionally-intelligent pedagogical agents to deliver effective and efficient feedback to students about their programming assignments and also act as a teaching assistant for any general programming related queries. We have integrated the pedagogical agent as part of Web-CAT - an automated online grading tool for students' programs. One of our main objectives is to communicate clearly the feedback about student programs while motivating them to perform better. Displaying the feedback and motivational messages to students all the time can quickly become noise and students tend to ignore them. Our study is to strategically have the pedagogical agent communicate with the student to provide them growth mindset feedback and also provide motivation to improve upon their work. The feedback would be based upon few indicators which would be triggered based on the student's program and the agent would guide the students to the correct solution by providing appropriate suggestions. The students can also voluntarily ask the agent for feedback and areas of improvement in their work. In addition, the agent can also help the students with any programming related queries or ways to fix a specific error encountered in the student's program. We will conduct a user study to gather feedback from students about the influence of the agent in helping them achieve their goal	Pedagogical Agent as a Teaching Assistant for Programming Assignments: (Abstract Only)	NA:NA:NA	2018
David P. Bunde:Cynthia Taylor:Jaime Spacco:Andrew Petersen:Soohyun Nam Liao:Leo Porter	Peer Instruction is an active learning pedagogy that has been shown to improve student outcomes in computing, including lower failure rates, higher exam scores, and better retention in the CS major. A key classroom mechanism for Peer Instruction is the "clicker question": a formative multiple-choice question on which students vote, then discuss, then vote again. While research indicates that clicker questions lead to learning gains for students, relatively little is known about the questions themselves and how faculty employ them. Additionally, much of the work has examined clicker data collected by CS Education researchers operating in a quasi-experimental setting. In this project, we examine clicker data collected incidentally by multiple instructors using clickers as a pedagogical technique in their classroom. This work represents a first effort to systematically evaluate how instructors use clicker questions, including how many clicker questions are used in a course, how difficult the questions used are, and whether instructors add or modify questions over time.	A Multi-Institution Exploration of Peer Instruction in Practice: (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
Caelin Bryant:Jonathan Gilmour:Beatriz Herce-Hagiwara:Anh Thu Pham:Halle Remash:Marli Remash:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky	Quick. Think of an outreach activity in computer science and a target audience. If you're like most people, you think of the target audience as middle-school students or high-school students and you think of activities like robotics, app development, or games. As a computer science educator, you might also note that these outreach activities should not just be designed to bring more people to CS, they should be designed to bring more people underrepresented in computing to CS-female students, domestic students of color, and lower-socio-economic-status students. But at the College level, what topics have shown the most efficacy in diversifying the discipline? It's not necessarily robotics, app development, or games. For example, the Media Computing project, led by Mark Guzdial, has shown the power of computing for the arts as a motivating factor for college-age female students. Can such an approach work for younger students? In this project, we developed and presented a week-long "craft of code" camp for elementary school students in which they used block-based languages to explore three kinds of creative computing, two of which had tangible output: programmable embroidery using TurtleStitch, programmable 3D models using BeetleBlocks, and programmable storytelling using Scratch. In this poster, we describe the curriculum for the camp, explore design issues, present results, and suggest approaches for others interested in developing similar camps. Our curriculum and materials are available at https://codecamp.sites.grinnell.edu/craftofcode/.	The Craft of Code: Exposing Elementary Students to Computing Through Tangible Crafts (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Amanpreet Kapoor:Christina Gardner-McCune	Understanding the development of professional identity in Computer Science (CS) undergraduate students can help better evaluate CS degree program's effectiveness in preparing students for their career goals. This poster presents findings from a study where we surveyed 105 CS undergraduate students about their self-perceptions of technical competencies in their chosen CS professions, the mechanisms to develop their competencies, as well as their motivations behind attaining these skill sets. Preliminary analysis of this data indicates that most CS students (93.3%), identified themselves into 7 different computing professions including Software Engineering (81.0%), Web Development (37.1%), User Experience (19.0%), and Computer Security (12.4%). They indicated using multiple mechanisms to develop their technical competencies including coursework, internship/professional experience, and research. Motivations behind their learning included self-interest as well as industry demands. We analyzed the relationships between students' skill proficiencies, motivations, and mechanisms for learning and found differences between novice, intermediate, and advanced learners. We found that students who self-assessed their proficiencies as novices in their chosen professional identity had a single mechanism for learning, most commonly coursework preparation. On the other hand, students who rated themselves as intermediate or advanced learners had multiple mechanisms and motivational factors behind attaining their skill set. These findings are important for better understanding students' learning needs and career aspirations. CS departments can use this information for better aligning their degree programs to student goals and creating pathways that ensure the development of CS students professional identity.	Understanding How Computer Science Undergraduate Students are Developing their Professional Identities: (Abstract Only)	NA:NA	2018
Pankaj Kamthan:Samia Hilal	To be successful in their program and in their subsequent professional commitments, the students of Requirements Engineering, in general, and Agile Requirements Engineering, in particular, need to acquire a certain set of cognitive, behavioral, social, and technical skills. These skills can be instilled through practice. The students also need to have a "toolbox" with a diverse collection of tools which complement each other. This poster aims to show that paper remains one of those tools which can help towards developing aforementioned skills within the framework of an active learning classroom environment. In that regard, the authors' approach is described, preliminary results of the authors' experience with the graduate students over the period of two semesters are presented, and recommendations for educators who may be interested in putting the approach into practice are given.	On the Role of Paper in Agile and Active Requirements Engineering Education: (Abstract Only)	NA:NA	2018
Travis Mandel:Jens Mache:Richard Weiss:Peter Drake	Abstract: Data science is on the rise, being a high-demand skill for a number of employers, both in the tech field and in various scientific disciplines. Since it is a new field, only a handful of schools offer a data science program, most of those being large research institutions. This presents a unique opportunity for smaller schools to combine an exciting and highly relevant topic with the personalized education, small class sizes, and individual attention they are known for. On the flip side, building out data science at small schools also presents numerous challenges, including finding sufficient faculty time and expertise, attracting a sufficient number of students, forging interdepartmental connections, and convincing the administration to approve the new courses and program. In this poster, we present lessons learned from data science efforts at three small institutions, including one which recently successfully developed a data science certificate (containing four new data science courses).	Building Out Data Science at Small Colleges: (Abstract Only)	NA:NA:NA:NA	2018
Matthew Neis:Vincent Cefalu:Ankur Chattopadhyay	With the growing demand for cybersecurity workforce, as we look to prepare our youth in cybersecurity, a lack of basic awareness about mobile device security and limited practical knowledge in securing mobile devices may expose our young generation to data hacks and cyber-attacks. The current IEEE/ACM CS2013 curricular recommendations and the latest CSEC2017 cybersecurity curriculum guidelines clearly point to a need for inclusion of mobile security related topics within the present CS knowledge areas. However, even though there are limited mobile security-based curriculum development initiatives at the K-12 level, none of them focus on the theme of mobile app related permissions, vulnerabilities and exploits. Therefore, in order to address this gap in mobile security based K-12 experiential learning, we have designed and developed a unique Android app-driven information security-based learning module for educating middle-school (fifth to ninth grade) learners about relevant cybersecurity topics, like good password practices, ethics, Android app permissions, vulnerabilities, exploit-based hacking, using an Android device. This poster will describe our creative mobile security theme-driven middle-school educational module, including our original unique Android app, which has been successfully used to conduct several hands-on workshop sessions for middle-school students as part of our Google IgniteCS outreach program and the NSA GenCyber camp program. Our poster will also present the survey data collected from middle-school participants in an effort to evaluate mobile security-based experiential learning model as a potential cybersecurity educational interface for engaging K-12 students.	Developing a Unique Android App-driven Nifty Middle-School Educational Module on Mobile Security for Driving Basic Information Security Awareness and Generating Interests in Cybersecurity: (Abstract Only)	NA:NA:NA	2018
Rebecca Grasser	In 2015, it became apparent that the traditional lecture/lab courses were not working for the Computer Science/Software Engineering students at our community college. The students wanted more out of the class, and the lecture model was, frankly, boring for all of us. This began a four-year long project to convert the three major programming courses from standard lecture to a variation on project based learning. In each course, the project would be slowly introduced and appropriately scaffolded, with each new skill tied to the text and lectures. At the end of the term, students presented their work, as a written and oral report, to faculty and staff they did not know. While this project started out as a grand experiment, students were overwhelmingly positive about not only the project, but how much they learned that wasn/t in the text or lectures, and just as important, how much they learned about themselves. The growth in student confidence was clear. The poster will display information about two current projects, typical student artifacts, and an assortment of student comments from their final presentations. We will also discuss how the project idea was scaffolded to balance formal and informal student learning in the classroom.	A Year of Living Actively: Hybrid PBL in a Community College CS Curriculum (Abstract Only)	NA	2018
Yu Cai	There is a growing acceptance that a holistic cybersecurity approach incorporating technical, human, and business factors is needed to address the myriad cyber threats nowadays. This paper introduces a new holistic and case-analysis (HCA) teaching approach for cybersecurity education by dissecting recent high-profile cybersecurity breaches. The traditional way of teaching cybersecurity usually introduces a list of technical security topics in an isolated context with little or no effort to link these topics together. It is also not easy to find a good place to teach human and business factors in cybersecurity. The proposed HCA model starts with selected real-world cyber breaches including the Target Corporation breach, the Anthem Inc. breach, and selected Distributed Denial of Service (DDoS) attacks. Students look into the details of these attacks and learn how these attacks took place from the beginning to the end. During the process of case analysis, a list of security topics reflecting different aspects of these breaches is introduced. Student learning will be reinforced through in-class discussion, selected readings materials, and hands-on labs. Compared with traditional methods, the proposed HCA model has a few advantages. First, it can draw students' attention and increase their interest with real-world cases. Second, it can improve student analytical skills by helping them obtain a whole picture of cybersecurity systems in an enterprise environment. Third, it can help the student gain a holistic view of cybersecurity by incorporating complicated socio-technical factors.	A Holistic and Case-Analysis Approach for Cybersecurity Education: (Abstract Only)	NA	2018
Miriam E. Armstrong:Keith S. Jones:Akbar Siami Namin:David C. Newton	There is a growing need for cybersecurity professionals with the knowledge, skills, and abilities (KSAs) necessary for risk and vulnerability analysis. Cybersecurity curricula should emphasize KSAs most important in cyber work. To determine which KSAs should be prioritized in curricula, we interviewed 38 cyber professionals with a specialty in vulnerability assessment and management. Interviews took place at the premier hacking conferences Black Hat and DEF CON in 2016 and 2017. Participants rated the importance of 31 KSAs taken from the National Initiative for Cybersecurity Education's Cybersecurity Workforce Framework. Of the 31 KSAs, 12 were rated as being significantly important to vulnerability assessment and management work. Half of these KSAs dealt with system and application vulnerabilities (e.g., Skills in conducting vulnerability scans and recognizing vulnerabilities). The other 6 most important KSAs concerned attacks (e.g., Knowledge of different classes of attacks), penetration testing (e.g., Skill in the use of penetration testing tools and techniques), and network protocols (e.g., Knowledge of network protocols). Overall, results suggest that vulnerability assessment students should graduate with: 1) knowledge of and skills in identifying vulnerabilities and robustness of systems and applications; 2) conceptual familiarity with classes of attacks and attack stages; 3) knowledge of and skills in penetration testing principles and tools, and 4) knowledge of network traffic and network protocols. Handouts will be provided.	What Vulnerability Assessment and Management Cybersecurity Professionals Think Their Future Colleagues Need to Know: (Abstract Only)	NA:NA:NA:NA	2018
Debarati Basu:N. Dwight Barnette:Godmar Back:David McPherson:William M. Naciri:Paul E. Plassmann:Calvin J. Ribbens:Vinod K. Lohani:Margaret Ellis:Kira R. Gantt	The current emphasis on cybersecurity worldwide, demonstrates the importance of this topic. This poster describes a unique NSF funded project that aims to create cybersecurity education opportunities at Virginia Tech (VT). It is a collaborative effort among faculty and graduate students in the Engineering Education, Computer Science (CS), Electrical and Computer Engineering (includes two majors, Electrical Engineering (EE) and Computer Engineering (CPE)) Departments, and the Hume Center in the College of Engineering at VT. The goal is to integrate cybersecurity modules into eight required CS and CPE courses, from freshman to junior levels, utilizing Jeremy Bruner's spiral-theory-based1,2 curriculum model. A spiraling theme of "handling threats to software for securing information" is chosen that will be returned to repeatedly as learners advance in their knowledge and intellectual capacity. Cybersecurity goals of the Confidentiality, Integrity, Availability, Authenticity, Anonymity, Assurance (CIA/AAA) triad, as appropriate for various academic levels, are adopted to develop the cybersecurity modules. Each module engages students in an authentic activity that reinforces the cybersecurity concepts. The project includes an engineering education research component, which is focused on evaluating the effectiveness of the curriculum in enhancing students' knowledge, skills, and motivation in cybersecurity concepts. The first year of the project has been completed by introducing cybersecurity modules into four courses (CS: Introduction to Software Design, and Software Design and Data Structures, and CPE: Engineering Problem Solving with C++, and Data Structures and Algorithms) impacting ~1600 students. The details of curriculum development, implementation and, preliminary findings of the research will be presented.	Development and Analysis of a Spiral Theory-based Cybersecurity Curriculum: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Sonal Dekhane:Nannette Napier	While many efforts exist to recruit underrepresented minorities in computing, retention of those that choose the field, still remains a challenge. To retain more women in computing at an open access, baccalaureate degree granting institution, the authors have been hosting a programming boot camp (PBC) for women IT and MIS majors at the institution since May 2014. PBC is a holistic program that focuses on academic preparation, professional development and mentoring. Freshman and sophomore women are invited to participate in this annual PBC each year. While some candidates accept the invitation to participate in the boot camp, some elect not to. The goal of this study is to investigate if participants progress and persist at a different rate than the invited candidates (non-participants) in their chosen field of study. This study compares the academic progression and retention data of candidates vs. participants over a period of three years (2014-2016). The authors look at measures such as current academic status, graduation rates, current (or graduation) major, and completion rates of programming sequence. Preliminary findings indicate that recruitment is a challenge without any incentives for participation. While participation in PBC alone cannot impact retention, this study investigates if students' participation or non-participation can be an indicator of their persistence in their chosen program. This information can be further used to create targeted initiatives meeting students' needs.	Does Participation in a Programming Boot Camp Impact Retention of Women in Computing?: (Abstract Only)	NA:NA	2018
Jian Zhang:Kimberly Huett:Jonathan Gratch	The importance of rigorous standards in computer science education research to include a description of hypotheses, research questions, methodologies, and results has been recognized in the computer science education community. The driving force for computer science education research is to understand the learning needs of our students who are human subjects. Therefore, some computer science education researchers may need to answer a critical question before they start their planned research: Do I need Institutional Review Board (IRB) approval to conduct this research using my students as research subjects? The key goal of the IRB is to protect human subjects from physical or psychological harm ("Code of Federal Regulations, Title 45, Public Welfare, Part 46, Protection of Human Subjects"). Although commonly used in the fields of health and social sciences, the role and purpose of IRB, the different categories of IRB reviews, the timeline from planning and submission of an IRB application, and the general rules for citing IRB in publications and grant proposals are not widely understood in the computer science education research community. In this poster, the authors describe the history, the purpose, review categories, and guidelines for reporting on the IRB. The authors will tailor the discussions on the different IRB review categories to computer science educators interested in conducting computer science education research with their students.	Do I Need an IRB?: Computer Science Education Research and Institutional Review Board (IRB) (Abstract Only)	NA:NA:NA	2018
Candido Cabo:Ashwin Satyanarayana	First-year, college-level computing courses are gateway courses with low passing rates, resulting in student attrition and transfers out of computer science degrees. Learning Communities (LC) are a group of students who enroll in two or more courses, generally in different disciplines that are linked together by a common theme, in an academic semester. LCs capture and combine two important parts of college life: education and student cooperation. At our institution we have implemented a LC linking three first-year courses (Introduction to Computer Systems, CS0; Problem Solving with Computer Programming, CS1; and English Composition I) for over five years. In this study, we empirically show the pedagogical impact of LCs on student academic retention and performance outcomes in first-year computing courses (CS0 and CS1). We compared performance, attendance and study habits of students taking the computer courses as part of a LC (LC group) with students taking the same courses outside the LC (nLC group). Our results show that when first-year students take computing courses as part of the LC, retention rates increase and students perform significantly better. For example, student performance in three basic programming skills (sequence, selection and repetition) increases significantly from 66% (nLC; n = 146) to 82% (LC; n = 112) when students take the CS1 course as part of a LC. We also found that LCs promote class attendance and that the nature of students' relationships with classmates may play a critical role in the improvement of student performance observed in LC students.	Building a Community of First Year Students Improves Student Retention and Performance in Computing Courses: (Abstract Only)	NA:NA	2018
Paul-Marie Moulema	In an ever changing and globalizing work environment, Educational institutions in the field of Information Technology (IT) face a constant challenge in developing relevant and competitive courses and curricula that stay up to date with changes in technology. Developing curriculum should go beyond the supply-centered educational approach where institutions and faculty alone are responsible for the design of curricula and instead, should be from end-to-end a collaborative effort from all stakeholders. However, the current collaborative efforts in developing curricula only involve industry and academia. Even though students are the raison d'être of the curriculum, they are still perceived as merely consumers of knowledge. Students are kept out of the curriculum development process and their expectations, perceptions, and opinions often are not taken into consideration. In this poster, the author proposes a distributed and collaborative curricula design framework that promotes a closer integration of all stakeholders namely academia, industry, and students. Similar to the PIECE (Partnering Industry and Education for Curricular Enhancement) model, the proposed framework prescribes a multi-stage curriculum design process from initial analysis to final assessment. In addition, the author plans to conduct an anonymous survey of CS/IT major students at WNEU and explores the benefits of integrating students in the curriculum development process. Preliminary investigation suggests that the integration of students in the curriculum development process would improve students' engagement in classes, and create an atmosphere of trust and a sense of ownership for students. Ultimately, this would enable institutions to create consumer-friendly curriculum and programs.	On Integrating Students in the Development and Review of IT Undergraduate Curriculum: (Abstract Only)	NA	2018
Mostafa Mohammed:Sushma Mandava:Jieun Chon:Margaret Ellis:Clifford A. Shaffer	Understanding basic manipulation of object references is a conceptual prerequisite to understanding many data structures, beginning with linked lists and trees. Unfortunately, there is often a gap between introductory programming courses that introduce reference variables and creation of objects, and second-semester programming courses that immediately skip to introducing linked lists. As a consequence, students begin using references extensively during Data Structures and Algorithms courses without enough knowledge about how references work. To fill this gap, we created a tutorial about basic use of references and the manipulation of objects using references. The tutorial, implemented as part of the OpenDSA eTextbook system, focuses on learning through visualizations and interactive exercises. Students work a series of small code-writing exercises, inspired by the JhavePOP system. These exercises use simple program visualization to let students see the result of running their program. Manipulative exercises test student proficiency at reading and understanding small sections of code that use references to link objects. All exercises are automatically assessed, providing immediate feedback. Our evaluation of the tutorial's effectiveness will focus on identifying and correcting student misconceptions. Optional sections of the tutorial introduce the program stack and the dynamic memory heap.	An Interactive Tutorial for Learning to Manipulate References: (Abstract Only)	NA:NA:NA:NA:NA	2018
Reza Soltanpoor:Charles Thevathayan	Introductory programming students unable to grasp and apply abstract concepts are known to become disengaged and drop out of the course. The large class sizes, increasing diversity and inadequate teaching support have exacerbated the problems leading to failure rates as high as 50% in exams. To address this issue, we employed a novel learning analytics technique named Personalized Prescriptive Quiz (PPQ). Our approach combined the rich metadata captured for each question including topic, cognitive level, difficulty index, and the underlying concepts(s) with individual student performance in the past to arrive at personalized learning pathways designed to correct the root-causes for their misunderstandings. Over 90% of surveyed students agreed that the PPQ has been effective in clarifying their misconceptions before the final exam. Following our experiments, the exam pass rate has gone up by over 40%.	Correcting Novice Programmers' Misconceptions Through Personalized Quizzes: (Abstract Only)	NA:NA	2018
Godmar Back:Lance Chao:Pratik Anand:Thomas Lux:Bo Li:Ali Butt:Kirk Cameron	Computer systems form the backbone of computing from very small, mobile devices to the huge datacenters that power the digital economy. These systems often exhibit large degrees of variability in their performance that is little understood, but such variability threatens to severely diminish the effectiveness of critical systems upon which society relies. Funded by a large NSF grant, the VarSys project at Virginia Tech researches the sources of variability in computer systems and develops methods to overcome it. We believe it is crucial to raise awareness of the phenomena surrounding variability in computer systems at the undergraduate level. Towards this end, we are connecting the research techniques developed as part of this NSF award to ongoing classroom projects in a core systems course. Our key insight is to expose students to the phenomenon as it occurs in the systems software modules (e.g. a memory allocator, a fork-join thread pool) they are themselves developing in the course. We have implemented a web-based system that allows students to submit their own systems-level code to a specialized cluster which then benchmarks it while systematically varying a number of ordinal and categorical variables. These variables reflect environmental factors that can influence the performance of complex systems. Students are then presented with a visual statistical analysis of the results and asked to interpret those results. We have successfully deployed this system in 2 semesters to over 250 students and collected student data about their experience with this system and are documenting our progress towards these important learning objectives.	Teaching Variability in a Core Systems Course: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2018
Michael H. Dunn:Robert J. Caruso:Laurence D. Merkle:Ray Trygstad	Cybersecurity is a significant challenge facing our society, and the industry is in desperate need of more talent. With a projected worker shortage of 1.8 million by 2022, it is imperative to recruit more young people to study and work in this critical field. One time-tested method of engaging young people to explore prospective careers is through Scouting's advancement program. The Girl Scouts of the USA has recognized this need, and recently announced that they will be introducing a series of cybersecurity badges for their programs. This poster outlines a proposal for a Cybersecurity merit badge for the Boy Scouts of America (BSA). A background on the merit badge program is presented, including research supporting the idea that badges can be an effective method at engaging young people in experiential learning. A set of draft recommended requirements is presented. The authors have drafted a proposal for consideration by the BSA, and this poster reports the status of that proposal and the authors' efforts at engaging the BSA.	Proposed Cybersecurity Merit Badge for the Boy Scouts of America: (Abstract Only)	NA:NA:NA:NA	2018
N. Rich Nguyen	Increasing women's representation in computer science (CS) has become a national priority. One of the many reasons female students nationwide choose not to finish their study in CS is that they do not feel a deep sense of belonging in the major. To foster the sense of belonging among female CS students, the affective learning outcomes, which are adapted from Bloom's Taxonomy on human learning, are integrated into the context of peer tutoring as five successive stages. Through the five stages of affective peer tutoring, students gradually deepen their sense of belonging in CS by: (1) being aware of the tutoring services; (2) proactively seeking answers to their programming questions; (3) recognizing the value of self-efficacy; (4) discussing learning issues in a supportive environment; and (5) contributing to a peer-led learning program to help others. Our data indicate that affective peer tutoring has resulted in an increased level of peer-to-peer interaction outside of the classrooms, significantly better grade performance in introductory programming courses, and improved retention rate among female CS students. Therefore, this poster may be of interest to any CS educator who wishes to improve the interaction, performance, and retention among female CS students while sustaining a peer-led learning program at their institution.	Affective Peer Tutoring: (Abstract Only)	NA	2018
Zack Butler:Ivona Bezakova:Kimberly Fluet	End-of-course evaluations and other student surveys typically include the opportunity for students to provide free-form comments. These are rich sources of data but are often only subjectively taken into account to further improve course delivery or analyze the effectiveness of assignments. We designed several puzzle-based assignments for typical CS1/2 topics and surveyed students as part of our efforts to analyze the assignments' efficacy and improve them over time. The surveys included traditional measures such as demographic data, Likert-scaled questions about assignment perceptions, and open-ended comments. With thousands of survey responses, we wanted to see if the open-ended comments yield additional, statistically significant, insights on either the assignments or students' learning. We developed a coding scheme for the comments using grounded theory analysis to represent patterns among the data. After refining the coding scheme we statistically analyzed the comments and found some interesting relationships, not apparent from the Likert-scaled questions, among certain codes. We also conducted extensive semi-structured interviews with instructors and student teaching assistants, also using grounded theory analysis to develop a set of codes for these different perspectives. The coding processes themselves allowed for a deeper understanding of the concerns about and appreciation for the assignments from both groups of participants. This poster reports on how the statistical results and the coding schemes, including the overlap and dissonance between the two coding schemes, inform our continued efforts to improve both assignment development and future research on the teaching and learning of CS concepts.	Qualitative Analysis of Open-ended Comments in Introductory CS Courses: (Abstract Only)	NA:NA:NA	2018
Michael A. Posner:Darina Dicheva:Christo Dichev:Don Goelman:Lillian (Boots) Cassel	Data Science, often described at the intersection of computer science, statistical thinking and analysis, and subject matter expertise, has seen an exponential growth in the past few years. Courses (and entire programs) have been appearing at such a fast rate at most institutions of higher education, as well as some high schools, that comparisons between curricular and delivery models and rigorous discipline-based education research are often overlooked in order to gain competitive advantages. This study attempts to rectify that absence by evaluating, comparing, and discussing four different courses offered at two different institutions of higher education. Funded by NSF via a collaborative grant (DUE-1432438), faculty from Computer Science and Statistics departments collaborated on the development and evaluation of introductory courses in Data Science for all students, using a discipline-based education research approach. Data on students were gathered including demographics, curriculum, statistical knowledge, and attitudes towards Data Science. Post-course growth was measured, when available, and compared through formal statistical inference. End-of-course evaluations, with supplemental questions about student learning, were reviewed and will be summarized. Finally, reflections on successes, challenges, and lessons learned will be shared.	1 Grant + 2 Institutions + 3 Course Variations = Data Science 4 All: (Abstract Only)	NA:NA:NA:NA:NA	2018
Md Mahmudur Rahman	A core challenge in introductory programming courses during the freshmen year is getting students to understand how a static textual representation (source code) maps to a highly dynamic process (program execution). Most students nowadays are visual learners who learn programming concept better through web-based visual and interactive learning instead of learning from traditional black board lecturing styles. This presentation will report our experience with positive learning outcomes in teaching an introductory programming course in Python by using a dynamic visual programming development environment based on flow-charts (RAPTOR) and active learning with an interactive eBook (zyBook). In this study, eleven sections of COSC 111 were included over three semesters as control and experimental groups. Analysis showed a marginally significant difference (F (1,5) = 5.87; p = 0.060) between sections taught via the traditional method and sections taught with the proposed pedagogical innovation. We also found that there are statistically significant positive correlations in between uses of the interactive book (eBook) and performances of students in tests. To add to our understanding of what students were experiencing, we also administered a survey to students at the end of the course. Regarding learning styles and tools, survey result showed that the eBook was helpful in understanding programming concepts (71.5%), that the instant feedback that the online book provided was helpful (82.9%), that the class discussion and interaction were helpful (85.7%). Overall, it seems that the proposed pedagogical approaches have made a positive difference by increasing student motivation and engagement, and reducing failure rates.	Infusing Visual Programming and Interactive Learning to Teach an Introductory Programming Course with Positive Learning Outcomes: (Abstract Only)	NA	2018
Todd Lash:Maya Israel	Now more than ever, students with disabilities are participating in computer science (CS) education. As CS increasingly becomes a part of the general curriculum in grades K-8, ensuring that these learning experiences are equitable and accessible for a wide range of learners may help broaden the diversity of individuals who choose to engage in computing experiences throughout their schooling and into their professional lives (Qualls & Sherrell, 2010). Therefore, it is essential to identify pedagogical approaches that lower barriers for students with disabilities and give teachers new tools to help those students succeed. Initial findings will be presented from a National Science Foundation STEM+C project derived from a series of qualitative case studies about challenges faced by K-8 students with disabilities in CS education. These findings have been converted to practitioner-oriented pedagogy briefs, written in the form of vignettes, and grounded in our own research findings as well as special education best practice. These pedagogy briefs are disseminated to practitioners and used for professional development and intervention work. Current topics include: Universal Design for Learning, project planning, co-teaching, working with paraeducators, and promoting student collaboration. Pedagogy briefs will be available and can be found on the Creative Technology Research Lab (CTRL) website: http://ctrl.illinois.education.edu	Bridging the Research to Practice Gap with Project TACTICal Briefs: (Abstract Only)	NA:NA	2018
Matthew Peveler:Evan Maicus:Buster Holzbauer:Barbara Cutler	Traditionally, automated testing and grading of student programming assignments has been done in either a jailed sandbox environment or within a virtual machine (VM). For a VM, each submission is given its own instantiation of a guest operating system (OS) running atop the host OS, with no ability for a given submission to affect anything outside the VM. However, using a VM is expensive in terms of system resource usages, especially for RAM and memory, making it less than ideal for solutions without unlimited resources. Jailed sandboxes on the other hand allow student submissions to run directly on the server. Sufficient security measures must be implemented to ensure that students cannot access each other's submissions or the server at large, and must prevent runaway programs, over-utilization of system resources. Jailed sandboxes have a larger attack vector than VMs. Within the past several years, container systems have been gaining popularity and usage within the computer science industry, primarily through solutions such as Docker. These containers give similar security protections as a VM, but with better performance due to being able to utilize of resources installed within the host OS and other containers. However, containers do not have the full isolation of a VM, and thus implementing Docker for autograding ends up facing its own set of security concerns, as well as with the increased system resource usage. In this poster, we will analyze how well containers work, measuring system resources and throughput of submissions of containers against the traditional jailed environment.	Analysis of Container Based vs. Jailed Sandbox Autograding Systems: (Abstract Only)	NA:NA:NA:NA	2018
Mehmet Ergezer:Bryon Kucharski:Aaron Carpenter	Artificial intelligence (AI) and machine learning are rapidly developing fields, garnering increased attention from the public, as well as academia and industry. Recent advances allow us to use our smart devices at home to control TVs, speakers, and lights. A smart speaker that is plugged into the wall can handle powerful processing that can service complex user requests. However, as we rely more and more on AI conveniences, we expect them to be at our disposal when we are moving around. In this poster, we present preliminary work on the development of a new upper-level undergraduate course open to all computer science, electrical engineering, and applied mathematics students at Wentworth Institute of Technology (WIT). The new course, titled Embedded AI (EAI), introduces topics from embedded systems, artificial intelligence, digital signal processing, linear algebra, and probability and statistics. The proposed course includes lectures introducing the theory behind each topic and laboratory assignments that provide the students with the hands-on experience. At the end of the semester, students develop an embedded AI project of their own. An interdisciplinary academic team of computer scientists and electrical and computer engineers has been working on a curriculum and researching different platforms, datasets and sensors that will ultimately enable students at WIT to develop an embedded device that can support AI tasks as well as give the students the practical skills that employers seek. Handouts will be prepared with sample curriculum and breakdown of topics.	Curriculum Design for a Multidisciplinary Embedded Artificial Intelligence Course: (Abstract Only)	NA:NA:NA	2018
Yifan Guo:Yang Song:Edward F. Gehringer	Open-source course projects offer students a glimpse of real-world projects and opportunities to learn about architectural design and coding style. While students often have more difficulties with these projects than with traditional "toy" projects, instructors are also spending excessive time on grading miscellaneous projects. There is an improvising need for means to help students and instructors with their difficulties. This poster presents our work on predicting which course projects are likely to fail at an early stage with machine learning approaches. We collected metadata from 247 course projects in a graduate-level Object-Oriented Design and Development course over the past 5 years, built models to fit the course projects and use the classifier to help instructors to identify potential failing projects, thus to help students to salvage their works. By assuming that the project acceptances are related to the working patterns of project teams, we made innovations of adding temporal-based patterns into the training data, and achieved 86.36% classification accuracy with the addition of those features. We also proved several observations, such as most of the rejected projects are those begun relatively late during the project period, and the projects which modified more files/code does not result in better possibility of being accepted. By contrast, accepted projects tend to deliver a volume of code that is neither very small nor very large, compared to rejected ones. Our results also suggest that setting milestone checkpoints at roughly a week before the submission deadlines would enable more students to succeed in their OSS projects.	Early Detection on Students' Failing Open-Source based Course Projects using Machine Learning Approaches: (Abstract Only)	NA:NA:NA	2018
Caelin Bryant:Jonathan Gilmour:Beatriz Herce-Hagiwara:Anh Thu Pham:Halle Remash:Marli Remash:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky	The underrepresentation of women, students of color, and people from lower-SES (socio-economic-status) backgrounds within computer science remains a national issue. Recent studies demonstrate one reason: persistent stereotypes about "who does computer science" can cause minority groups to preclude interest in the field. Unfortunately, these stereotypes are not the only threat to diversifying the discipline. Engaging a diverse group of individuals in computer science is unlikely so long as computing curriculum is perceived as "irrelevant" and "asocial/". Confronting the stigma of triviality applied to computer science, much like approaching student perceptions about who can do computer science, is a necessary step for increasing the perceived applicability of the discipline.  As a step in combating the perception that programming curriculum is irrelevant, we developed and ran a week-long summer coding camp for local middle school students that camp applied principles of computing for social good with data science approaches to encourage campers to consider how computing could help them explore societal issues. Throughout the week, campers learned how to extract meaning from their work and gained experience collaborating in pairs to solve problems.  In this poster, we discuss the camp curriculum and its emphasis on the applications of computing. We consider the effects of the camp on the self-efficacy of campers and their perceptions of computer science. We then present some recommendations for those intending to conduct similar camps.	A Middle-School Code Camp Experience Emphasizing Data Science for Social Good: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Zhiping Xiao:Siqi Li:Zachary Pardos	NA	AutoQuiz: A Personalized, Adaptive, Test Practice System (Abstract Only)	NA:NA:NA	2018
Maddie Zug:Hanna Hoffman:Forest Kobayashi:Miles President:Zachary Dodds	"CS for All" has set computer science on an unusual journey. Literacies are skills asked of us all: thus, "CS for All" identifies computing skills as a full-fledged human literacy. Yet, Computer Science departments are not uniformly ready to build a computing literacy for all students. This project has investigated on how different institutions are coping with this challenge.  We share the results of a 50-institution curricular survey, tracking CS course offerings for a variety of cohorts outside the CS major. We add additional detail to this big-picture snapshot with data from a ten-year experiment offering a biology-and-computing introductory course. The downstream outcomes are heartening in both computing skills (no difference at all in subsequent performance relative to a peer control-group) and in spurring overlapping interest. We also share several new paths, termed "bridges" and "injections," to help computing contribute to the academic identities of students in other disciplines.  Just as cogent writing, critical reading, and compelling speaking are today/s hallmarks of literacy, the future may ask us to make computing part of our common goals and expectations. Through local and national data, this project is exploring new curricular paths with the goal that CS in many forms -- as a discipline, as an academic department, and as an identity of its own -- can fully support the challenge of "CS for All."	CS for All Academic Identities: (Abstract Only)	NA:NA:NA:NA:NA	2018
Fay Zhong	How to actively engage students using a more personalized approach in both online and face-to-face classes is an important topic in Computer Science discipline. Studies showed that adaptive learning approach can be used to redesign a course to achieve a better and more effective learning experience for the students. As a result, the Data Structures and Algorithms course at CSUEB has been redesigned using Smart Sparrow platform, with engaging adaptive learning objects embedded in the Blackboard LMS. Other tools like Open Educational Resources and ZyBook, as well as project-based group assignments were also utilized to transform the classes and student learning at the same time. The author reports on some preliminary results of a collaborative NSF grant that promotes the STEM education to a more diverse student body. Comparative results for control courses and the redesigned course demonstrate our findings and confirm the effectiveness of adaptive learning.	Designing Adaptive Learning Objects for Enhanced Student Engagement in Data Structures and Algorithms: (Abstract Only)	NA	2018
Samuel Breese:Evan Maicus:Matthew Peveler:Barbara Cutler	A flexible late submission policy can be used to help address breaches of academic integrity and student stress as they relate to programming assignments. To this end, we examine the use of late days -- earned, penalty free deadline extensions -- during our large format, two-semester introductory programming sequence. In particular, we examine correlations between patterns of student assignment submission and student plagiarism. Lexical-analysis-based techniques are used to identify probable cases of plagiarism across student submissions. Furthermore, we present metrics for estimating student stress at submission time. Our metric utilizes the automated grading score of the student"s current and previous submission attempts, the imminence of the assignment"s deadline, and the availability of late days. We corroborate these patterns with self-reported student surveys conducted at the end of the academic year.	Correlation of a Flexible Late Day Policy with Student Stress and Programming Assignment Plagiarism: (Abstract Only)	NA:NA:NA:NA	2018
Stefan Seegerer:Ralf Romeike	As the importance of Computer Science for all grows, questions about the foundation of CS related skills and knowledge everyone should be familiar with arise. Different education institutions or initiatives offer courses or other materials to provide CS knowledge and skills necessary to participate in future life, or any profession. Among these institutions are numerous universities and colleges which started to offer Computer Science courses explicitly aimed at non-CS majors. These course materials form an extensive data pool for determining crucial CS knowledge for non-majors. While the courses differ with regards to intention and topics, reflect a personal perception of the designer, or address specific local demands, they may still contain a foundation of CS for everyone. By examining multiple university and college courses, one can determine this foundation. In this preliminary study, we analyzed an initial sample of thirty different international Computer Science for all courses offered at colleges and universities between 2010 and 2017. The materials - syllabi and schedules of these different courses - were examined using a qualitative content analysis as proposed by Mayring. Based on coding results from the content analysis we identified the types of learning objectives those courses aim at. We also list inductively derived topic categories (e.g., representation of data, security, and social implications) and present different programming languages or tools used within those courses. Afterwards, the frequencies of topics in proportion to the number of courses were reported and associated with the previously identified learning objectives.	Goals, Topics and Tools of Computer Science for All University or College Courses: (Abstract Only)	NA:NA	2018
Ana Milanova:Barbara Cutler:Buster Holzbauer:Evan Maicus:Samuel Breese:Elizabeth Dinella:Matthew Peveler	With surging enrollment in Computer Science courses at both the introductory and advanced level, it is critical to leverage automated testing and grading to ensure consistent assessment of student learning. Program analysis tools allow us to streamline the grading process so instructors and TAs can spend more time teaching, one-on-one tutoring, and mentoring students. We present complex use cases of automated assignment testing and grading within the open-source homework submission system, Submitty. Students receive immediate and detailed feedback from the automated grader, and can resubmit to correct errors. Submitty uses custom-built grading tools, including difference checking of plaintext program output, instructor authored assignment-specific custom graders, and static analysis tools that reason about program structure. In addition, it employs a variety of external tools, including version control (Git and SVN), unit testing frameworks (JUnit), memory debugging tools (Valgrind and DrMemory), and code coverage tools (Emma). In this poster we describe our experience with memory debugging and code coverage tools, and outline plans to include immutability inference and verification.	Program Analysis Tools in Automated Grading of Homework Assignments: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2018
Juan Chen:Li Shen:Jianping Yin:Chunyuan Zhang	With the increasing demand of big data technology, there has been a growing interest of introducing high performance computing in computer science curriculum. One challenge in helping students understand the nature of efficiency and scalability issues in high performance computing is the lack of opportunities for them to be engaged in large-scale applications that run on supercomputer system architecture. This poster presents a collection of example projects that have been used in a parallel computing course in multiple universities in China, including National University of Defense Technology, Sun Yat-sen University and Hunan University. These projects were adopted from a wide range of scientific computing applications such as CFD, text mining of biomedical literature and so on. The large-scale computing resource for courses is supported by two National Supercomputing Centers, one in Guangzhou and the other in Changsha. The poster describes the background, objective, structure, task, practice process and outcome for each project. It also discusses the impact on student understanding all kinds of key topics and major challenges related to computational efficiency and scalability. Such projects build a positive practical environment to make students indulge in doing all kinds of interesting and helpful trials to validate their assumptions, especially when they have different perspectives or results for one problem. The poster presents our design evaluation rubric to reflect the effectiveness of our practice, as well as the statistics about the students" achievements for the last three semesters.	Design of Practical Experiences to Improve Student Understanding of Efficiency and Scalability Issues in High Performance Computing: (Abstract Only)	NA:NA:NA:NA	2018
Ke Zhang:Mingyu Chen:Yungang Bao	To cultivate students" capability of computer system thinking and software/hardware programming, experimental curriculum of computer system is regarded as one of the most effective methods. Some universities have set up hardware labs equipped with several or dozens of FPGA (Field Programmable Gate Array) boards for these courses. However, these lab kits are always in a relatively low utilization rate and how the students" capability is improved by these assets is not easy to be evaluated. Inspired by the merits of FPGA public cloud (e.g. Amazon AWS F1 instance), an in-house-designed FPGA-based online cloud platform (named ZyForce) is proposed to deploy in UCAS. This platform is equipped with 40 custom designed boards using Xilinx Zynq UltraScale+ MPSoC FPGAs and the utilization rate of these education resources is boosted by means of advanced cloud computing technology. With ZyForce, students remotely carry out lab assignments (e.g. MIPS, RISC-V or domain-specific architecture processor design with cache/memory, DMA, accelerator and performance counter) as using local FPGA boards; instructors can analyze the downloaded operation log file for each student and know how these kits are being used. It"s believed that this kind of online hardware lab appliances provides a novel pay-as-you-go service model for those universities in remote regions who cannot afford to set up their own hardware laboratories, and also facilitates our students, the future scientists and engineers, with this promising cloud development approach.	ZyForce: An FPGA-based Cloud Platform for Experimental Curriculum of Computer System in University of Chinese Academy of Sciences (Abstract Only)	NA:NA:NA	2018
Yu Zhang	The rapidly growing scale of modern computer systems has been increasing the skill gaps between graduating students and industry expectations. The Compiler Course, as one of the core CS courses, is not only a course introducing the theory and practice of programming language translation, but also a comprehensive course cultivating students/ multidimensional competencies, such as programming, language design, software engineering, communication and collaboration, etc. Writing a compiler for a toy language is a common assignment in many compiler courses. Yet our compiler practice system differs from most of its peers in several aspects: integrated with real open source LLVM compiler, practice of some modern compilation mechanisms, process control and version management (using git), team work, etc. We designed two kinds of projects to integrate the LLVM compiler, one is coding class, e.g. developing an LLVM IR generator and a JIT-compiler on LLVM IR; the other is source code understanding class, e.g. providing guidance and issues for understanding the mechanisms of Clang parser or static analyzer. We also designed some team projects to let students investigate some modern language features and their implementation mechanisms, to discuss within and among teams, and finally to give team presentation. The poster describes the components of our compiler practice system, related practice support package and guidance. Some tradeoffs among difficulty, complexity, time and knowledge points are discussed. So far we have been practiced and improved the practice system for 4 years, and lessons as well as experiences are shared on the poster as well.	Compiler Practice System Integrated with Real Open Source Compiler: (Abstract Only)	NA	2018
Stacey Watson:Julio César Bahamón:Harini Ramaprasad:Heather Richter Lipford	Soft skills such as collaboration, communication and time management are essential to the success of computer science students both in school and after they enter the IT profession. While employers value these skills highly, there are so many technical skills to cover in computer science programs that these soft skills are not typically primary learning objectives for CS classes. As such, it is difficult to find time and space to address them directly. In this study, we investigate whether Classcraft, a game-based classroom behavior management platform designed for K-12 students, can motivate undergraduate students to develop their soft skills in large computing classes. To this end, we utilized Classcraft with 234 students across two face-to-face sections and one online section of an undergraduate "Introduction to Operating Systems and Networking" course to determine whether gamifying the engagement component of the course would motivate students to participate in co-curricular activities, enhance student collaboration and improve communication and time management. There were no in-game activities - the students in each section of the class earned experience points in Classcraft as a reward for completing class activities ahead of time, collaborative learning and teamwork, and asking or answering questions in class or via discussion forums in our learning management system. In this poster, we report our preliminary results of the impact of such a platform on student engagement in soft skills.	Developing Soft Skills with a Classroom Behavior Management Game: (Abstract Only)	NA:NA:NA:NA	2018
Paulina Haduong:Karen Brennan	Debugging is an essential practice in programming. Yet for many novice programmers, the process of finding and fixing errors in code can be frustrating. Debugging is rarely explicitly taught in introductory programming courses, perhaps because best practices of teaching debugging are largely undefined. In K-12, teachers new to teaching CS may also experience trepidation about supporting student-directed work in languages and environments unfamiliar to them. In this poster, we build on previous research that documented the individual and social debugging strategies employed by young novice programmers, from studying projects to asking for help (Brennan, 2013). With a focus on classroom settings, we have designed a set of debugging activities for young people working in Scratch--the Getting Unstuck activities. Through these interactive activities, students and teachers explore creative and collaborative strategies for debugging Scratch projects. In July 2017, the authors piloted these strategies with 17 novice programmers, ages 14 to 18. This poster describes this new resource, reports on findings from the pilot testing, and offers recommendations for the design of K-12 programming activities.	Getting Unstuck: New Resources for Teaching Debugging Strategies in Scratch (Abstract Only)	NA:NA	2018
Peter E.J. Kemp:Miles G. Berry:Billy Wong	In 2014 English schools undertook a shift from a mainly ICT based curriculum to one that focuses on computer science. Qualifications in computing have been introduced and ICT was subsequently phased out. The question now arises as to whether the students who would have previously taken ICT qualifications are now taking the new computer science courses. Using student data for all English examinations taken by 16 and 18 year olds, we have profiled the student cohorts taking ICT and computing, as well as the schools offering them. We have analyzed the differences between these two cohorts in terms of prior attainment, course outcomes, gender, socio-economic groupings, ethnicity, and geographic spread. We find that there are large differences between the two groups: computing has far fewer female, working class and particular minority ethnic students. Computing students tend to have achieved better in mathematics than their ICT peers, and there is some evidence that academic selection criteria are being used to restrict entry. We conclude that it is unlikely that all, or even most, students who would have previously sat ICT qualifications will now sit qualifications in computer science. The shift in curriculum and examinations may have produced a less inclusive subject.	The New Computing Curriculum in English Schools: A Statistical Analysis of Student Participation (Abstract Only)	NA:NA:NA	2018
Gina Sprint:Andy O'Fallon	Many universities offer an optional CS0 course taken prior to traditional CS1 and CS2 courses. Students enrolling in CS0 represent a variety of programming experience levels and majors. To more successfully recruit students to CS0 and retain students as CS majors, it is important to engage students in the course materials early on and frequently. There are several types of course materials (e.g. lesson notes, in class activities) and approaches to design engaging material (e.g. team-based learning, POGIL). In this poster, we focus on programming assignments that incorporate engagement practices put forth by the National Center for Women in Information Technology (NCWIT). NCWIT sponsors a program called EngageCSEdu, which is a collection of peer-reviewed introductory CS materials that are contributed by faculty. All materials in the database have demonstrated evidence of NCWIT"s engagement practices. In this poster, we present seven of our programming assignments that have been accepted into the EngageCSEdu database, two of which have won Engagement Excellence awards. The assignments cover the topics in a Python-based CS0 course at Washington State University. The poster presents the assignments, their learning outcomes, and their engagement practices. We include student commentary and examples of student submissions that demonstrate students" interest and creativity. Lastly, we present advertising materials we deployed that showcase the CS0 programming assignments to recruit more students to take the course. The assignments, student examples, and advertising efforts we present offer insights for educators about recruiting, engaging, and retaining students of all majors in introductory CS courses.	Engaging Programming Assignments to Recruit and Retain CS0 Students: (Abstract Only)	NA:NA	2018
Neal Mazur:Joseph Zawicki:Sarbani Banerjee	The poster describes an innovative approach to help secondary school teachers enhance their computer science (CS) knowledge through the Google funded CS4HS (Computer Science for High School) program. Through a 4-day professional training workshop teachers learn different computational thinking skills, CS concepts and related tools in an attempt to promote CS education by establishing a computer club and eventually teaching CS courses in their schools. The training includes units from the Exploring Computer Science curriculum and brainstorming sessions on starting clubs, club activities, and strategies for recruiting more girls and minorities in clubs. Participating teachers are invited back during the school year to participate in events including a CS conference and a competition and showcase for their students to continue the momentum started by the workshop. Teachers share the barriers to establishing clubs and success stories of being the first teachers to introduce computer science into their schools. More than 150 teachers from more than 50 secondary schools have participated in the CS4HS workshops since the program"s inception. The result is that many of the participating teachers now have established computer clubs; many teach CS courses and many bring their club students to participate in the annual CS4HS Showcase and Competition event at Buffalo State College; all contributing to the goals of CS4HS which is to promote CS education in every secondary schools of Western New York. This will create a pipeline of aspiring CS students and help to alleviate the current and predicted shortage of CS professionals.	Attracting Secondary School Students to Computer Science through Training Teachers to Establish Computer Clubs: (Abstract Only)	NA:NA:NA	2018
Shannon Campe:Jill Denner:Emily Green:Linda Werner	Pair programming is considered a best practice since it has been shown to reduce the gender gap and increases confidence for university students in introductory computer programming courses. However, little is known about what it looks like in middle school. This study was designed to provide detailed descriptions of what pair programming looks like, how it varies across demographic groups, and how it changes over time. The data presented in this poster is from a subset of a larger study (81 middle school students) which consists of 66 (28 girls; 38 boys) students (55% Latino/a; 23% White) who worked in 33 same-gender pairs (42% female) to design and program their own video game. Data include video and audio recordings, screen capture files and logging files. The findings suggest that students are spending log periods of time not interacting, and those with more experience have a third person present more often while programming. When pairs are interacting specifically about their game the girls spend more time engaging constructively around ideas and solutions in comparison to boys. The results will be used to inform strategies to support effective pair programming in middle school, and to inform future studies.	Pair Programming Interactions in Middle School: Collaborative, Constructive, Dismissive, or Disengaged? (Abstract Only)	NA:NA:NA:NA	2018
Kris Jordan:Gabi Stein	This poster investigated the data from the past year of CS1 and found overwhelming evidence that students who have taken calculus are significantly more likely to succeed and less likely to fail that those who do not. On a Fall 2016 CS1 final exam, students who had not earned credit for a first course in college-level calculus were 2.8 times more likely to fail it than those who had (p=<0.0001,N=844). The mean final score for students with calculus was an 84, and those without was 61 (p=<0.0001). The result surprised the instructor, course staff, and faculty familiar with the course because the course itself does not emphasize mathematical or scientific computing. The course was Java-based, objects-early, and introduces both object-oriented and imperative programming fundamentals. The effect was evident across a range of problems, none seemingly requiring beyond basic algebra. In the Spring of 2017, the instructor and course staff set forth to explore these questions and close the math gap discovered in the Fall of 2016. This poster further proposes to develop interventions to aid those with a lower math maturity level through introducing a specialized CS1 to better accommodate those with a lower math maturity level by reducing the pace and installing prerequisites for the established CS1. Prospective Computer Science students at liberal arts colleges and universities enter with a wide range of mathematical backgrounds. Failing to acknowledge these disparities is demoralizing to students during their first course in CS and is counter-productive to inclusivity.	The Math Gap in an Inclusive CS1 Course: (Abstract Only)	NA:NA	2018
Andrea Bonani:Vincenzo Del Fatto:Gabriella Dodero:Rosella Gennari	Smart interactive tangible objects (briefly, tangibles) can help teachers in the scaffolding of algorithmic thinking of 10-13 years old children. In this work, tangibles deal with graph algorithmic thinking. By following an action-research design approach, tangibles were rapidly developed and used in studies with children and teachers (Bonani et al., 2017, 2018). This poster shows their evolution and the most recent experience: a field study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. Data collected by researchers were mixed (qualitative and quantitative), concerning engagement and learning (e.g., Gennari et al., 2017). Results suggest that tangibles engage pupils and help them understand simple and connected graphs. Future work will seek their adaptation to classes (e.g., Di Mascio et al., 2012).	Tangibles for Graph Algorithmic Thinking: Experience with Children (Abstract Only)	NA:NA:NA:NA	2018
Shan Jiang:Gary K.W. Wong	In recent years, we have seen an increasing interest in bringing programming back to K-12 education. Many educators begin to recognize the necessity of helping children develop computational thinking (CT) as an essential skill to address 21st century challenges. In this poster, we report the preliminary findings from the first year of a 3-year longitudinal study based on a coding curriculum for Grade 4 to Grade 6. This 3-year study aims to gain an understanding of how coding activities helps children at upper primary school ages develop CT for problem solving, and if this problem-solving mindset is transferrable to other contexts, for example, daily life scenario and mathematical field. A part of the research focuses on a comparative study between students' intrinsic motivation of coding (i.e. "plugged") activities and "unplugged" activities (i.e. learning concepts from computer science through paper-based games without programming), which helps us understand the advantages and disadvantages of different learning approaches to CT. At the end of the first year, around 600 fourth graders" were assessed with their CT competence and affective tendency through: (1) a pre/post-test on the CT skill and mathematical ability; (2) a questionnaire on intrinsic motivation in plugged and unplugged activities. The preliminary findings indicate that students have gained a good programming-related knowledge and improved problem-solving skills through our curriculum. They were intrinsically motivated to participated in both types of activities. However, students did not show the ability to transfer computational thinking to mathematical context.	Are Children More Motivated with Plugged or Unplugged Approach to Computational Thinking?: (Abstract Only)	NA:NA	2018
Dale R. Thompson:Bryan Hill:David Shannon:Himasri Lekkala:Wen-Juo Lo	Training Arkansas Computing Teachers (TACT) is an NSF-funded three-year project, designed to rapidly address both a) Arkansas' pressing need for computer science (CS) talent and b) the new law requiring all Arkansas high schools to provide access to CS instruction for their students. The goal is to train high school teachers on computational thinking practices and the seven big ideas from the AP CS Principles curriculum framework and to make them CS-certified teachers. The TACT professional development (PD) consists of a two-week face-to-face hands-on workshop for high school teachers during the summer and offers online support throughout the year. During the first week, TACT hosts the UTeach CS Principles course, a classroom-ready curriculum designed in alignment with the CS Principles framework. During the second week, TACT hosts the TACT CS Boot Camp designed to cover CS topics that are typically covered in licensure exams. Effectiveness of the project is measured through the surveys taken by teachers before and after the PD regarding their integration and confidence levels of topics corresponding to seven big ideas. The poster will display details of the PD, example survey questions and our findings in a tabular format. See https://tact.uark.edu.	Preliminary Results of TACT Integration and Confidence Levels on Seven Big Ideas of CS: (Abstract Only)	NA:NA:NA:NA:NA	2018
Fred Martin:Chike Abuah:Subhajit Chakrabarty:David Nguyen:Mark Sherman:Diane Schilder	Assessing students' learning of concepts in programming is an essential part of teaching computer science. We developed the Tablet Game, an embedded assessment that measures students' skill in identifying programming structures used to create various behaviors in MIT App Inventor. The assessment was implemented as an app for Android devices. Students conducted an activity in the app, and identified which code-blocks would create those behaviors. Students' responses were transmitted to our custom data-collection server. In two five-day app development summer camps held with middle school students, students completed the same Tablet Game assessment on day 1 and day 5. Students also completed pre/post surveys which gathered ethnographic data and asked about interest levels in computer science and prior programming experience. Using data from 44 students with pre/post assessments matched to surveys, our results indicated that (1) students with high self-reported prior experience in App Inventor outperformed students with low prior experience on the Tablet Game pre-test, indicating that the assessment measures programming skill and (2) students with low prior experience achieved equivalent results as the high prior experience cohort in the post-test, indicating that the camp was successful in imparting programming skills. Both of these results are statistically significant. Further, (3) there were no statistically significant differences in gender composition of the two experience cohorts, indicating that the camp was equally accessible to girls and boys.	The Tablet Game: An Embedded Assessment for Measuring Students' Programming Skill in App Inventor (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
Sara-Lynn Gopalkrishna	In states, school districts, individual schools, and alone in classrooms, educators are providing access to computer science (CS) for more students than ever before. Many are learning as they go. Education leaders and teachers are finding effective tools for hurdles to expanding CS access through their own experiences, formal and informal networks, and partnerships with external organizations. However, much is known in the education policy community which can be applied to CS for All efforts. This poster presents the framework for a doctoral dissertation which examines the implementation of a CS for All policy using a policy implementation lens. The site of the study is a school district that was an early adopter of CS for All; Computational thinking activities were inserted into K-8 classrooms and all high schools introduced accessible and rigorous CS classes. The "story" of this district provides both models and cautions for those undertaking CS for All initiatives. Replicating implementation is unrealistic since educational environments are unique and complex. The questions inspiring this work are not about how to implement a CS for All policy, but rather about the conditions under which CS for All policy was implemented in this school district (Honig, 2006). The framework presented is developed from education implementation literature with consideration for the challenges unique to CS for All. Those working in CS education will identify how their experiences fit into the framework and can use it to move their own work ahead.	Implementation of a District-Level CS for All Policy: What Can We Learn? (Abstract Only)	NA	2018
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan	Spatial reasoning skills are highly predictive of STEM achievement and self-efficacy, yet they are not often part of computer science curricula. In an effort to support spatial reasoning and STEM development, we have created several activities using SAS® CodeSnaps, a free coding environment that brings coding to the physical world through 3-dimensional problem solving and tangible coding blocks. In these activities students represent and navigate real-world obstacle courses in order to solve coding challenges. Tangible coding blocks allow students to organize and interact with code in ways that both build upon and use spatial reasoning skills. These blocks are then scanned and executed by a robot -- bringing their code, and any mistakes, off the screen and into the real world. Together these features offer opportunities for developing spatial reasoning while using existing skills in support of CS learning. This approach meets students where they are; thinking, engaging and interacting with the physical world.	SpatialCS: CS to Support Spatial Reasoning (Abstract Only)	NA:NA:NA	2018
Jayce R. Warner:Carol L. Fletcher:Wesley Monroe:Lisa S. Garbrecht	With the goal of better understanding how to increase the computer science (CS) teacher workforce, this study examined the factors that predict eventual success in achieving teacher certification in CS. Participants (N = 500) were teachers who were certified in other subject areas and who expressed an interest in becoming certified to teach computer science in Texas. Results showed that teachers were more likely to become certified in CS if they already held a certification in another STEM field or if they had some prior knowledge in CS. The extent to which teachers participated in an online professional development course predicted certification success after controlling for prior CS knowledge and other factors whereas the number of hours spent in face-to-face CS professional development did not. These findings have important implications for policy makers and professional development providers who make investments of time and money to grow CS teacher capacity and increase student access to computer science education at the high school level.	Growing the High School CS Teacher Workforce: Predictors of Success in Achieving CS Certification (Abstract Only)	NA:NA:NA:NA	2018
Thea Charles:Amber Oliver:Kate Mulloy	Initial research shows the promise of instructional and learning benefits for students when computational thinking is effectively integrated across the curriculum. Benefits include building higher-order thinking and problem-solving skills, creating real-world applied contexts, and enabling students to create, produce and interact with information. These are critical levers to wide adoption. To address this challenge, in partnership with the Education Development Center, we have developed a three-year study in which we will work closely with five high-poverty New York City elementary schools that, with the help of an external implementation partner, are trying out distinctly different approaches to integrating CT into elementary instruction, in order to understand how those models work in various contexts, and which models may be particularly effective.Our poster will display the proposed integration model of our first demonstration site as well as the indicators and instruments we are using to understand how this model works.	Effective Models for Integrating Computational Thinking into NYC Elementary Schools: A Proposed Research Agenda (Abstract Only)	NA:NA:NA	2018
Carol Ramsey:Justin Cannady:Michael DeGraff	Gender and racial/ethnic participation gaps in computing is a well-documented problem motivating several interventions aimed at attracting and retaining women and underrepresented students (Black or African American, Latinx, and Native American students) in this high-need area. One such effort is the College Board's Computer Science Principles (CSP) course, a survey course designed to engage students who have traditionally opted-out of computer science in secondary education. UTeach CSP is UTeach's Project-Based Learning (PBL) curriculum designed for the CSP course. Students learning from teachers implementing the UTeach CSP curriculum scored higher on the 2017 College Board AP CSP assessment, when compared with students taught with other curriculum. Scores were significantly higher for girls and Latinx students, even after adjustments were made to standardize the demographic characteristics of the schools where the UTeach CSP curriculum was implemented. This poster presents curriculum design research that suggests explanations for the higher results. The research can also provide CS teachers with ideas for moving beyond traditional lecture-based CS instruction for increased student performance and more diverse engagement. Handouts will be provided with a sample UT CSP project including lesson plan, student handout, video link, pacing guide, assessment, and rubric.	Closing the Gender and Underrepresented Minority Gap in CS: UTeach Computer Science Principles AP Assessment Results (Abstract Only)	NA:NA:NA	2018
Roxana Hadad:C. Meghan Hausman Jacobson:Kate Thomas:Germania Solórzano:Mila Kachovska:Yue Yin	Work in culturally responsive pedagogy and culturally responsive computing (CRC)(Scott, et al., 2014) holds promise for how to include underrepresented students into making communities as they develop their computational thinking (CT) skills. Cultural responsiveness involves instructors using what they know about students' individual identities to develop learning opportunities; having high expectations; and understanding students' sociopolitical contexts (Ladson-Billings, 1995). By integrating these approaches, students encounter a makerspace without pre-determined cultural norms that encourages questioning assumptions that limit the development of inclusive technology. This poster explores preliminary results from a mixed methods multiple case study. Sixteen high school students participated in a two-week summer making program that focused on CT and physics skills. Students shared elements of their identities, brought in artifacts for "show and tell", collected data on how they spend their time, and categorized assets in their communities to then incorporate into their own projects. Researchers analyzed classroom observations, videos, interviews, and student notebooks, as well as students' pre-post tests and attitudinal surveys. Findings reflect the importance of valuing student identity, building community, and highlighting how CT and physics affect students' lives. More information: https://actmaproject.wordpress.com/ Keywords: computational thinking, cultural responsiveness, makerspaces. DOI: https://doi.org/10.1145/3159450.3162291	Using Cultural Responsiveness to Elicit Computational Thinking in Maker Environments: (Abstract Only)	NA:NA:NA:NA:NA:NA	2018
Diane Levitt:Judith Spitz	While 57% of US undergraduate degrees are awarded to women, women account for only 18% of computer science and related degrees. Studies of recent interventions have shown promise in increasing the number of women who choose to major or minor in computing or related disciplines. Two key findings from this research indicate the promising impact of high school outreach and providing a "mission driven" context for computer science for young women. We will present early findings from Summer Guild, a two-week immersive experience for rising freshman women offered in the summer between graduation from high school and the start of their first year of college. During this experiential learning program, students are engage in a compressed digital product development lifecycle including all of the elements of design thinking, prototyping and iteration in the context of a real-world civic or business challenge. In addition, they gain an introduction to Python and work with professional developers to build their digital solutions. We present the results of changes in student's self-reported attitudes, academic plans and acquisition of computing skills based on pre- and post-surveys, a selection and analysis of qualitative data provided by students via daily exit tickets, and the number of students registered for computer science or related classes during their freshman year.	Impact of a Pre-College Summer Workshop on Women's Confidence and Interest in Pursuing Undergraduate Computer Science Studies: (Abstract Only)	NA:NA	2018
Kim C. Huett:Carl Westine	The remoteness of rural K-12 school districts brings unique challenges to school leaders seeking to expand access to computer science education. Limited resources and perceived relevance of computer science education to rural life are but some of the challenges rural school leaders may face. To ensure the success of the current computer science education reform movement, reformers should incorporate needs assessment into their rationale for change. Supported by insights from a needs assessment, school district leaders are equipped to make the case to stakeholders for the need for computer science education. In the current study, two university-based educational researchers in the State of Georgia conducted a qualitative needs assessment single-case study to explore the challenges and opportunities a rural school district faces in broadening access to computer science education. The researchers used a collaborative process to guide the assessment of the school district's resources, educational programming, and outcomes. Data collection and analysis included documents, archival records, school walk-throughs of the district's five schools, and 15 in-depth interviews with administrators and teachers. Findings included the identification and prioritization of needs as well as themes related to challenges faced by the school district in broadening access to computing. Visitors to this poster session will have the opportunity to learn about one rural school district's unique case and what it suggests for expanding rural computer science initiatives.	Using Needs Assessment to Inform a Rural School District's Efforts to Expand Access to Computer Science Education: (Abstract Only)	NA:NA	2018
Leigh Ann DeLyser:Lauren Wright	The landscape of computer science education curriculum and tools is rapidly expanding. After President Obama made a call to action for Computer Science For All, the National Science Foundation (NSF) has continued to award curriculum writing projects, and recently non-profits and for-profit offerings have expanded. This poster presents a landscape analysis of a subset of the curriculum available for K-12 computer science (CS). The subset is derived from CSforAll Consortium's (www.csforall.org) 208 current members that are classified as content providers, a resource for stakeholders in CS education who are looking to see the breadth of offerings available, or choose a particular curriculum. The landscape presented in this poster is organized by grade band and concept areas as defined by the K-12 CS Education Framework. In this poster, we will describe a methodology for categorizing the content providers, evaluate whether they have available curriculum for review, and provide summary landscape statistics about the alignment between the content reviewed and the K12 CS Framework.[1] This will enable us to demonstrate both the breadth of CS content areas available in curriculum for stakeholders in CS, as well as the areas in which curriculum is not widely available.	Creating a Landscape of K-12 CS Curriculum: (Abstract Only)	NA:NA	2018
Jill Denner:Shannon Campe	Latino/a youth are interested in computer science, but studies show they have less access to computers and role models, and lower confidence to pursue computer science activities than their peers in the US. Little is known about how to create learning environments outside of school that attract and retain Latino/a youth who come with a range of computer science interest, preparation, and resources. This poster will describe how one community technology center in a low income rural community provides opportunities and supports for students to pursue technical education and work experiences, and the role it plays in creating computer science (CS) pathways. Survey data from 97 high school students were used to describe variations in students' motivation to participate at the center, how those motivations change over time, and the factors that contribute to students entering a CS pathway. Interviews with 20 students were used to identify the different ways that students entered a CS pathway, including the influence of natural mentors, relationships with peers, and digital badges, as well as the factors that prevent them from participating in computational activities. The data were used to generate case studies that provide an in-depth look at the factors that promote or undermine CS pathways over time. The findings have implications for designing learning ecologies that support high school students from under resourced communities to enter and stay on computer science pathways.	Computer Science Pathways for Latino/a Youth in a Community Technology Center: (Abstract Only)	NA:NA	2018
Samuel Adam Micka:Brittany Terese Fasy:Stacey A. Hancock:Jachiike C. Madubuko:Allison Shay Theobold	Montana is home to a large American Indian population and a rich history. The Indian Education for All (IEFA) Act, passed in 1999, reinforces the educational goals stated in Montana's 1972 Constitution that "every Montanan, whether Indian or non-Indian, be encouraged to learn about the distinct and unique heritage of American Indians in a culturally responsive manner." IEFA requires that American Indian education be integrated into "the education of each Montana citizen," making Montana the only state to mandate Indian education by law. We propose an integration of CS concepts into existing content standards using the IEFA curricula. To make these concepts approachable, we utilize Alice, a drag-and-drop programming environment. This software allows students to animate stories while learning programming techniques in a user-friendly way. Furthermore, Alice 2 allows customized models; in particular, we can create models specific to American Indian culture. In this poster, we present an overview of the Storytelling project and preliminary results, an example lesson plan, evaluation techniques, and a description of the 3D model creation process. With these lesson plans and customized models, we strive to broaden participation of students from rural and American Indian communities in CS and related fields.	American Indian Storytelling with Alice: (Abstract Only)	NA:NA:NA:NA:NA	2018
David S. Touretzky:Christina Gardner-McCune:Joseph Isaac, Jr.:Laura M. Tomokiyo	We believe teaching elementary school students to reason about programs is as important as teaching them to write programs. To facilitate development of this skill in young children one must choose a developmentally appropriate domain. Microsoft's Kodu Game Lab is a pattern-matching rule-based language whose semantics is significantly different than Scratch or Python. We chose Kodu because one can write non-trivial programs in two to four lines, and analyzing these programs is within the abilities of a typical 8 year old. Reasoning about programs requires students to understand the structure of code. The approach we're advocating is analogous to sentence diagramming, where one starts with a sequence of words and develops a representation of their syntactic and semantic relationships. One can similarly analyze Kodu programs by characterizing rules and recognizing relationships between rules. In this poster we describe "couplets", an analysis technique that reveals the presence within a program of an important Kodu design pattern called Pursue and Consume. Using this technique leads to accurate predictions about program behavior, and uncovers bugs if the pattern is not fully realized. As part of a study of 40 third graders who were learning Kodu, we provided brief instruction in the couplets technique. We found that they were able to apply couplets to 3-4 line programs and answer prediction questions with a roughly 85% success rate. Our results demonstrate that elementary school children can learn to reason abstractly about programs if given the right mental tools.	Couplets: Helping Elementary School Students Recognize Structure in Code (Abstract Only)	NA:NA:NA:NA	2018
Karen H. Jin	Loops are a fundamental concept in computing and well known to be difficult for novices. Recent research shows that the open-ended learning approach often used in teaching block-based programming can be insufficient to help young students gain a solid understanding of computing concepts. Misconceptions about loop are very common despite the user-friendly block-based programming syntax. This study aims to contribute to the current understanding of how elementary-aged students can learn the concept of loops through a more structured instructional design. We engage students in structured learning activities consisting of "tangible" programming concept demo and progressive problem solving exercises. These activities were used to teach a group of 3-5th graders two types of loops: counting loops that repeat a set number of times without logic conditions, and conditional loops where the loop iteration is controlled by a Boolean condition. The evaluation results indicate that most students are able to understand and use counting loops correctly in their programs after the weeklong class. The understanding of conditional loops, however, remains difficult for elementary-aged students. Our study suggests that computing concepts may be learned more effectively with a structured instruction setting. Nonetheless, teaching young students conditional loops, especially how to apply them in computational problem solving is a very challenging task even in block-based environments.	A "Loopy" Encounter: Teaching Elementary Students the Concept of Loops (Abstract Only)	NA	2018
Jeremiah J. Blanchard:Christina Gardner-McCune:Lisa Anthony	The computing and STEM industries face challenges in attracting people to fill expanding needs. The literature shows that computing preconceptions shape interest in and impact decisions of whether or not to enter computing disciplines, especially for women and underrepresented minorities. In this study, our research questions focused on how perceptions of programming in elementary and middle school students varied based on prior programming experience. We examined the programming constructs they found challenging. Our study was in the context of a week-long summer camp dedicated to Scratch-based game development. We conducted semi-structured interviews at the beginning, middle, and end of the weeklong program with 28 students who agreed to participate. During the interviews, we asked students about their perceptions of programming in general and which programming constructs they found easy and/or hard. We found that all students perceived programming as a means of creating artifacts, but that students with prior programming experience went deeper by associating programming with process and function. We also characterize the specific Scratch programming constructs that beginning versus experienced children perceive as easy and/or hard. These findings will help experts and educators better understand how children think about programming and how experience changes these perceptions over time. These findings also have implications on the design of curricula and instructional resources to address difficulties children face while learning to program.	How Perceptions of Programming Differ in Children with and without Prior Experience: (Abstract Only)	NA:NA:NA	2018
Yifat Amir	One method of increasing accessibility to computer science education is through massive open online courses (MOOCs). The Beauty and Joy of Computing MOOC (BJCx) on edX is an introductory computer science course aimed to reach a broad audience of learners and designed to fulfill the AP CS Principles curriculum. However, like most MOOCs, BJCx faces high rates of student attrition. Some of this can be attributed to variance in student intentions; there are students who enroll only to browse the material with no plan of completing the course. On the other hand, the attrition of those students who intend to finish but drop out along the way is a point of concern. It could be reduced if course staff could predict it using the students' behavior and intervene. In this project, I explore how patterns of student engagement with course material can predict attrition. Using a recurrent neural network, I model student behavior over time. I am then able to analyze the behavioral patterns which are likely to precede dropping out. Furthermore, I explore which topics in the course curriculum most often immediately precede students dropping out. I visualize the time-series trends overlaid with the curriculum in order to gain insights into correlations between introductory computer science topics and student attrition. This information, along with the predictive student engagement model, can potentially allow teachers to design interventions at MOOC scale, something that is otherwise lacking in comparison to traditional classroom settings where the teacher can directly gauge student behavior.	Modeling Student Engagement and Attrition in BJCx, a CS Principles MOOC: (Abstract Only)	NA	2018
June Mark	The Beauty and Joy of Computing (BJC; bjc.edc.org) is curriculum and professional development program developed jointly by EDC and UC Berkeley and endorsed by the College Board for the Advanced Placement (AP) Computer Science Principles (CSP) exam. The purpose of this course is to attract more students, and particularly girls and underrepresented minority students, to the breadth and depth of ideas in modern computer science. BJC is aimed at helping students develop computational habits of mind including abstraction, modularity, algorithms, and modeling. BJC uses Snap!, a visual programming language based on Scratch, to expose students to the beauty and joy of programming using a project-based learning approach (including games, art, mathematics, language, etc.) and addresses social issues of computing (e.g., privacy, copyright, artificial intelligence, networking, and cybersecurity). This poster will share curriculum examples, results of early research on teacher and student use in New York City schools, teacher and student experiences and feedback, implementation challenges and supports, and preliminary results and outcomes including engagement, attitudes, and achievement.	Broadening Participation in Advanced Placement Computer Science Principles: (Abstract Only)	NA	2018
Meg J. Ray:Diane Levitt:Maya Israel	As CS for All initiatives expand in K-12 districts across the country, there is a need to create ongoing teacher support and training. Cornell Tech's Teacher in Residence program builds computational agency. Agency is often defined as the power to freely act and make choices. The Teacher in Residence program seeks to build the agency of school administrators, teachers, and students to make choices about CS education and to act on them based on a foundation of content knowledge rather than programs bound to specific tools or individuals. The Teacher in Residence program is grounded in evidence-based practices, but has made unique adaptations in order to support teachers who are new to CS content. The writers will share practices, learnings, and preliminary outcomes from the first year and a half of the program. His data includes qualitative measures of teacher confidence, agency, and accuracy as well as initial data on student engagement and generalization. The Teacher in Residence program includes K-8 teachers who are incorporating CS instruction into their classrooms. In this program, a master teacher is embedded in a school community for a limited amount of time to coach teachers, offer professional development, and consult with the administration about implementation. It focuses on three elements: content proficiency, appropriate pedagogy, and giving equitable access to all students. Handouts will be provided.	Teacher in Residence: (Abstract Only)	NA:NA:NA	2018
Amber Solomon:Vedant Pradeep:Sarah Li:Mark Guzdial	Computer science teachers want to know what their students are and are not learning and understanding. Gestures, or spontaneous hand movements produced when talking, could help teachers understand what their students are thinking. During communication, gestures often reflect thoughts not expressed when people talk (Goldin-Meadow & Wagner, 2005). Listeners can then extract meaningful information from the gestures they see. When learning computer science, gestures may be an external representation of students' understandings of code. In this research, we conducted a qualitative study observing and interviewing a high school CS class to understand how and when gestures were used. When students trace code, their gestures show how well they understand the code's execution. In another context when students described their code to the teacher or other students, the students' gestures showed how abstracted their knowledge was. Students who understood their code made more general gestures, while struggling students made pointing gestures for each line of their code. These findings suggest that teachers could use students' gestures as a formative assessment to understand how well their students are learning.	The Role of Gestures in Learning Computer Sciences: (Abstract Only)	NA:NA:NA:NA	2018
Frieda McAlear:Allison Scott:Sonia Koshy:Alexis Martin	In order to inform ongoing efforts to broaden participation in computing, this study examines a CS initiative which provides a three summer sequence of rigorous, culturally relevant, and project based exposure opportunities for underrepresented secondary school students of color. Previous studies demonstrated that the CS initiative increased the rate of majoring in CS in college more than eight fold. This study uses quantitative data from the summer 2017 CS program and subsequent CS academic year data to examine persistence in CS on a more granular scale. In particular, instructional practices, social and emotional learning outcomes, and course taking data are examined to understand the factors which increase student persistence in taking secondary computer science courses. Findings include a significant relationship between social and emotional learning outcomes and persistence in CS for underrepresented students of color and the importance of student participation and relevant assignments to the development of resilience in CS. A handout will also be given to poster audiences in order to stimulate discussion, exchange best practices within the CS education research community, and to contribute to the growing evidence base to broaden participation in CS.	Do Social and Emotional Learning Outcomes and Instructional Practices Promote Persistence in Computer Science for Underrepresented Secondary Students of Color?: (Abstract Only)	NA:NA:NA:NA	2018
S. Monisha Pulimood	NA	Session details: Lightning Talk #1	NA	2018
Madeleine Lorås:Trond Aalberg	This lightning talk will present experiences from using a student-centered approach when implementing educational innovations in computer science programs. The Norwegian Center for Excellent IT education (Excited) is currently researching new ways to organize computer science education and innovative educational structures. By involving students from day one of the research and development process we hope to learn more about what educational and structural changes and innovations are most effective and why. However, we have faced some challenges in this effort. One challenge is the fact that many of the courses in need of innovation has a large student population. This can make it difficult to implement changes without substantial bureaucracy and organizational efforts, as well as the risk of damaging the students' educational progress. Another challenge is that the students do not respond well to the proposed changes. This was somewhat surprising; however, it is a problem that must be solved in order to succeed in creating better computer science education. Therefore, we have proposed using a student-centered approach to the implementation and evaluation of new initiatives. By organizing changes in smaller pilot-groups with students involved the whole time, we can hopefully reduce the bureaucracy and risk attached to changing large and important courses. Additionally, with the students involved every step of the way the resistance to change might decrease. The project has just begun, and this talk will present the initiative in more detail, experiences from the first semester and further plans.	Exploring a Student-centered Approach to Innovating Computer Science Education: (Abstract Only)	NA:NA	2018
Alex Edgcomb:Frank Vahid	Introductory programming courses often use a full-featured programming language, such as Python, Java, or C++, wherein students concurrently learn programming concepts along with language syntax. However, many instructors believe that learning programming concepts first, then learning a specific language's syntax, may be more effective than learning both concurrently. Thus, some courses first teach programming via flowcharts and pseudocode. Some tools and materials support teaching programming via flowcharts, but we felt much improvement was needed. Therefore, we developed a new flowchart language, named Coral-Charts, specifically intended to teach fundamental programming constructs like assignments, branches, loops, functions, and arrays. We developed a web-based graphical simulator for Coral-Charts; no local tool installation is necessary (unlike the most common existing flowchart tool). The simulator always displays the values of variables, which helps students comprehend the impact of statements. The simulator enforces a layout that intentionally mirrors textual code's top-to-bottom execution and sub-statement indentation, easing the transition to a textual language. Furthermore, we defined a new pseudocode-like language, named Coral (corallanguage.org), that is executable and that matches Coral-Charts. Syntax is ultra-simple and only essential constructs are included. Certain features automatically detect or eliminate many new-learner errors. Students can type Coral code, from which a Coral-Charts flowchart is auto-generated, and students can execute both the code and flowcharts. Coral was carefully designed to naturally lead into languages Python, Java, or C++. Coral and Coral-Charts are used in the textbook Fundamental Programming Concepts (zybooks.com/catalog/fundamental-programming-concepts). We welcome feedback on the approach and potential collaborators in implementing experiments.	Interactive, Language-neutral Flowcharts and Pseudocode for Teaching Core CS0/1 Programming Concepts: (Abstract Only)	NA:NA	2018
Cruz Izu:Olga Sanchez Castro	This lighting talk provides a literature review that supports the concept that small failures can have a positive effect on learning compared with more traditional scaffolding techniques that prevent students from failing. From a sociocultural approach to education, scaffolding is provided through mediated dialogue within the students' zone of proximal development (ZDP) to minimize failure. However, productive failure has been found to promote wider exploration and to provide deeper learning experiences by assisting learners to self-identify knowledge gaps. Related to the idea of scaffolding in teaching, is the concept of task difficulty. Selecting problem-solving tasks that are neither too difficult nor too easy is critical in assisting learning as this reduces learner frustration and can foster development of learner self-efficacy. Many issues need to be addressed when exploring the ideal mediated task difficulty including: (1) how to assess learners' ZDP, (2) how to find an adequate balance between challenging tasks that seek to traverse learners' ZPD and the degree and type of failure they can trigger, and (3) how to provide support to learn from experienced failure. Our first goal, in collaboration with interdisciplinary multi-institutional partners, is to design sequenced activities that ask students to attempt a problem-solving task prior to any instruction/scaffolding activities usually provided to guide task completion. This will trigger foreseeable small failures, which can be used as learning opportunities. Note that this approach may not only foster learning, as observed at high school level, but also build resilience.	Designing Active Mediated Learning Tasks: Can Small Failures Enhance Student Learning? (Abstract Only)	NA:NA	2018
Jared O'Leary	This lightning talk describes considerations for designing interest-driven coding projects. I provide examples of what an interest-driven coding class looks like and how projects are designed for a variety of experience levels and interests within a shared space. I discuss some of the research informing this approach, share examples of interest-driven projects, and provide suggestions for creating interest-driven coding projects and resources.	Interest-driven Coding Projects: (Abstract Only)	NA	2018
Michael Ball	This lightning talk will give a very quick introduction to "Item Response Theory", or IRT. IRT evolved from psychometrics as one method for evaluating the Quality of survey questions. In the classroom, IRT is a fantastic way to gain better insights into the quality and efficacy of the assessments we offer. IRT has been used by testing companies to evaluate exams like the GRE, SAT, and AP, but the same ideas can be applied to our classrooms. By applying some ideas from IRT we can start to look at exam scores with just a few simple charts, and we can begin to assess whether assigned questions are effective. We'll start by looking at correlations between individual question scores and overall assessment scores. While this is a simplification of IRT, we'll look at how we can use it to diagnose potential exam errors. The goal is to better understand the exams we give our students, and we can use this as a jumping off point to continue to evaluate our assessments.	IRT in 5 Minutes: Easy Ways to Better Understand an Assessment (Abstract Only)	NA	2018
Jared O'Leary	This lightning talk describes considerations for facilitating multiple programming languages in one space. I provide video examples of what it looks like when young coders select from four different programming languages to create projects of interest. Following an overview of what coders created in the classes I designed and facilitated, I discuss considerations for simultaneously facilitating multiple languages. This discussion includes quick suggestions for selecting and creating resources, questioning techniques, peer-to-peer mentoring, room setup, and more.	Facilitating Multiple Programming Languages in One Space: (Abstract Only)	NA	2018
Paul Dickson	We often give students large projects because solving them teaches students so much. If we give them messy problems with a lot of structured ambiguity, we can make it so that they learn even more because they will have to really think about the problems they are solving. This concept is often applied through project/problem-based learning. If only this were true, we could just give our students a lot of poorly defined problems and in so doing create extremely competent graduates. The idea breaks down because we as faculty think about how much students will learn from the process and gain insight through doing, while students tend to focus on their final product/grade and ignore the journey. Students learn a lot but not as much as they could. The problem is not with the projects and their intrinsic messiness but instead with our students' focus. We propose the concept of messy learning, which couples project/problem-based learning with reflection to solve this problem. Messy learning involves giving deliberately ambiguous problems where we want students to focus on learning about how to solve the ambiguous parts of the problem. Reflection is the method that we propose to use to make the messy learning projects effective for our students by using it to focus attention on appropriate parts of the messy problems.	We Should Give Messy Problems and Make Students Reflect on What They Learn: (Abstract Only)	NA	2018
Roman Lysecky:Frank Vahid	This lightning talk presents new free, online material to provide new programmers with a solid foundation in debugging. Nearly every instructor who teaches programming notices that students have weak debugging skills. Faced with a failing program, many students make random changes and hope things improve. Or they shrug their shoulders, say "I have no idea what/s wrong", and ask an instructor for help. Most textbooks and websites provide insufficient coverage or training of debugging. This new material teaches a basic systematic process for debugging: Create a hypothesis, test the hypothesis, repeat. Seems obvious, but it/s not to most students. The material first teaches a general troubleshooting process using everyday systems, like smartphones can cars. With a solid foundation of the basic systematic process, the material then teaches basic debugging using a generic programming language. The material starts from the basics, following that adage that one must walk before they can run. Students typically don/t have the concept of "Hypothesize / Test". But after repeated examples that stress those items, they will hopefully have developed a habit of thinking of troubleshooting more systematically. The material is targeted at the fifth week of a CS1 course, when students have some programming experience and are beginning to face harder debugging challenges, but is also beneficial for any programming class beyond CS1, where it could be used in the first week. The material is delivered as free two-chapter online book available with sign in at http://www.zybooks.com/catalog/troubleshooting-basics/.	Teaching Students a Systematic Approach to Debugging: (Abstract Only)	NA:NA	2018
Toby Dragon	This lightning talk describes our current effort to create a system that helps teachers organize the content of their computer science courses while simultaneously providing a basis for intelligent support. This work blends the disciplines of computer science education, artificial intelligence in education, and instructional design to create a holistic system that helps teachers create a unified vision of their course from diverse learning resources and assessment techniques. The vision is created in the form of a concept map with links to external materials and assessments (including traditional materials like textbooks and exams, and more advanced technology like online interactive practice environments). We are creating these concept maps for our computer science curriculum at Ithaca College and we have found clear benefits to organization and content. Beyond these improvements to courses, we seek to use the resulting concept map to offer intelligent support for students and instructors. Students can benefit by seeing their assessment automatically summarized by concept rather than by assignment, and receive suggestions of materials crucial to their understanding. Instructors can benefit from assessment summaries about individuals/ or entire classes/ understanding of specific concepts. The system can also make recommendations for dynamic groups to be formed for short-term in-class collaboration. Currently we have basic prototypes of this functionality and we/re seeking feedback from others who may have engaged (even informally) in similar techniques, as well as any collaborators who are interested in trying this technique in their courses or integrating their materials with our system.	Improving Course Content and Providing Intelligent Support Simultaneously: (Abstract Only)	NA	2018
Lea Wittie:Anastasia Kurdia:Meriel Huggard	A concept inventory is a research-based multiple-choice test that measures a student's knowledge of a set of concepts while also capturing conceptions and misconceptions they may have about the topic under consideration. It can aid educators and researchers in a variety of ways. When administered at both the beginning and end of a course, it measures the amount of knowledge that students gain during the course. For a given student, a concept inventory points out the topics that they need to focus on and can give their instructor specific misconceptions to tackle. For a researcher, concept inventories routinely administered at the end of a course show the effects that different teaching methods have on student understanding. Concept inventories for computer science currently exist for many topics but not for a course on basic data structures, commonly refereed to as Computer Science 2 (CS2). To aid in assessing students' understanding of the material of this core course in the computer science curriculum, we are developing a concept inventory for CS2. We are seeking input from instructors and researchers with knowledge and experience of CS2 (experts) to establish the set of important and challenging topics that are fundamental to a CS2 course, using an iterative consensus-reaching methodology (the Delphi method). These topics will be used to create a concept inventory, which will then undergo validity and reliability checking. Interested members of the SIGCSE community are invited to attend the presentation and consider participating as experts.	Recruiting Experts: Toward a Concept Inventory for Computer Science 2 (Abstract Only)	NA:NA:NA	2018
Michael S. Kirkpatrick	The goal of the OpenCSF project is to develop an on- line, interactive textbook focused on the Computer Systems Fundamentals (CSF) Core Tier 1 teaching objectives of the ACM 2013 Computing Curriculum. This area includes material that would traditionally be taught in courses such as Computer Organization, Operating Systems, Computer Networks, and Parallel & Distributed Systems. The CSF Knowledge Area highlights the most vital concepts and themes for these courses, emphasizing that this material should be core for all CS graduates. OpenCSF is built on the OpenDSA framework. This framework includes built-in capabilities for interactive activities designed to assess student reading comprehension. Furthermore, as a web-based resource, the intention of OpenCSF is to use HTML5 features to support interactive illustrations and exercises embedded along with the readings. Additionally, the OpenDSA framework supports integrating these activities with the Canvas Learning Management System to track student reading completion; this feature is not currently enabled in OpenCSF. At the time of this writing, drafts of five chapters have been written: Processes and OS Basics; Concurrency with IPC; Multithreading; Synchronization Primitives; Synchronization Problems. The goals for this lightning talk are to demonstrate these initial chapters, to discuss plans for future interactive components, and to gather feedback from those present. OpenCSF is publicly available at https://opencsf.org/.	OpenCSF: An Online Interactive Textbook for Computer Systems Fundamentals (Abstract Only)	NA	2018
Adam Fischbach:Yana Kortsarts:Suk-Chung Yoon	This lightning talk will discuss our experience of developing and managing a new Computer Forensics Minor. The Computer Forensics minor is an interdisciplinary program that integrates criminal justice and computer science and combines both theoretical concepts and practical skills to prepare students for a career in computer forensics-related fields. Students will be prepared for a career in law enforcement or corporate security as a digital investigator and evidence examiner as well as pursue graduate education in the area of information security, digital forensics, or law. The lighting talk will describe the various stages in developing the minor including an analysis of competitive academic programs, evaluation of the current resources, qualifications and faculty considerations, the process of developing the program objectives and learning outcomes, and assessment strategies. The program will be run jointly by Criminal Justice and Computer Science departments, and faculty will communicate regularly to track the number of students in the minor and their progress through the curriculum. Both departments will ensure that the minor provides appropriate course content and learning experiences for graduates seeking employment. In our discussion, we will focus on challenges of designing the balanced curriculum to make it accessible for criminal justice and other non-computer science/computer information systems majors, the need of designing new courses and renovating existing courses to answer growing need to address this new emerging field. Lightning talk will also discuss the anticipated cost of the program, required resources, recruitment strategies, and the administrative approval mechanism.	Developing Computer Forensics Minor -- Challenges and Opportunities: (Abstract Only)	NA:NA:NA	2018
Debasis Bhattacharya	This lightning talk describes the current effort to distill the essence of the growth of bitcoins, blockchains and their implications to cybersecurity. Crypto currencies are becoming popular with banks, consumers and various industries. There is a need for consumers to understand the basic underlying technology behind these crypto currencies and the underlying security risks and concerns. This talk provides a broad overview of the topic and the benefits/risks involved. This talk also describes how these topics are integrated into a classroom curriculum in a standard business and accounting course found in many universities.	Bitcoins, Blockchains and Cybersecurity: Teaching Emerging Technologies in the Classroom (Abstract Only)	NA	2018
S. Monisha Pulimood	NA	Session details: Lightning Talk #2	NA	2018
Robert Montante	ntroductory computer networks courses often include descriptive coverage of the network protocol headers. A straightforward listing of the headers and their meanings can lead to questions like "Will this be on the test"? Programming exercises may involve selecting values for some aspects of a protocol but tend to abstract away the details, and depend on prior programming skills. In addition, campuses without dedicated network lab facilities may have limited ability to experiment with protocols on an existing institutional network. The Python-based Scapy package provides explicit, detailed control of the contents of header fields, and includes graphical visualization features that offer easy feedback. Programming ability is helpful but not necessary; the interactive Python environment permits step-by-step and guided exploration of the various protocols. Effective use of scapy requires root (administrator) privileges; a virtual machine environment such as that provided by Oracle VirtualBox allows complete control and access to the operating system. This talk is about scapy-based lab modules that the author is developing, which provide active, hands-on exposure to and manipulation of network headers. So far, a Transport-layer activity and a preliminary Link-layer activity have been written. The current activities will be discussed, along with ideas for additional modules.	Using Scapy in Teaching Network Header Formats: Programming Network Headers for Non-Programmers (Abstract Only)	NA	2018
Elizabeth Boese	Experience for yourself an unplugged active learning experience to understand how arrays are stored in memory differently than linked-lists. You will participate in a short demo just as my students experience this exercise, to gain a fuller understanding of how to apply this in your own classroom. Each student receives a card with a memory address. Inside the card, if it is allocated for a linked list then there is a letter and a next pointer; if it is part of an array there is just the letter. First the students with addresses for the array stand up; acknowledge how they are all contiguous in memory. Next, the student with a head pointer stands up and calls out the address they are pointing to. The student with that address on their card stands up, and calls out the address of their pointer. This continues until a student calls out their pointer is NULL. Now acknowledge how distributed through memory a linked-list can be! Come see how powerful learning can be with this physically engaging exercise! Successfully used in classes up to 200 students.	Linked-List vs Array in Memory: an Unplugged Active Learning Experience (Abstract Only)	NA	2018
Robert Ravenscroft	It is often difficult to teach dynamic data structures such as linked lists by modeling them on a static medium such as a white board or slides. This lightning talk introduces Dynamic Data Structures-Linked List (DDS-LL), an HTML5 browser application that allows the user to build and manipulate graphical models of linked lists. DDS-LL is not an algorithm visualization tool. Instead the user models their data using only actions that are consistent with a language such as Java. Nodes must be instantiated and linked together. Lists must be traversed to access a node. Reference assignment is modeled by dragging links. DDS-LL removes the old links, keeping the model accurate. With the wrong reference assignment, garbage can be created. Though still under development, DDS-LL has been used in an introductory data structures course to motivate linked lists, trace algorithms, and model scenarios. Its use provided several benefits. Scenarios can be prepared ahead of time. Models can be manipulated without drawing/erasing the white board. Scenarios can be quickly reloaded in response to student questions. Since the original intent of this tool was to assist the instructor with modeling linked lists, no attempt was made at this time to measure the impact on student engagement or learning. After a quick introduction to DDS-LL, this talk discusses the instructor's experience using it in the classroom, and presents some possible enhancements, including features to allow the tool to be used for student assignments. Handouts and links to online resources will be provided at the talk.	An HTML5 Browser Application for Modeling and Teaching Linked Lists: (Abstract Only)	NA	2018
Ramachandra B. Abhyankar	"Logic for Computer Science" courses have traditionally emphasized algorithmic approaches: Resolution, Semantic Tableau, and Sequent Systems. The Athena System, described in a new book ("Fundamental Proof Methods in Computer Science" by Konstantine Arkoudas and David Musser, MIT Press, 2017), emphasizes Natural Deduction. Natural Deduction has the well-known advantage of matching human intuition. Athena is a language that combines computation and deduction, and is a system to aid the development of natural deduction proofs. The central insight realized in Athena is that the development of a proof is similar to the development of programs using stepwise refinement. Athena is not a theorem prover, but is integrated with theorem provers and SMT solvers. Athena users can make use of these integrated tools without having to learn details of the usage of these tools, as Athena provides seamless integration with these tools, and a convenient interface to these tools for Athena users. While Athena uses these tools to aid the development of natural deduction proofs, I have found that a combined use of Athena with theorem provers, SMT solvers and model builders can help impart to students a more well-rounded introduction to deduction.	Teaching Deduction Using Athena and Related Tools: (Abstract Only)	NA	2018
Lisa Lacher:Cydnee Biehl	This lightning talk describes our current effort to implement and use Discord - a new tool to facilitate group work that an instructor can use to moderate the level of group participation of students. By utilizing Discord's features to their full extent, an instructor can actively moderate the group's interactions, keep track of who is/isn't participating, and even send messages to student groups. Instructors have the ability to create a Discord server, which acts as a virtual classroom, and then use the server to store student accounts, sort students into groups, and enable group chatrooms. Within these chatrooms, the instructor can observe for language, how well teams are keeping on task, and most importantly, level of participation. This tool keeps students accountable for how often they collaborate with the team by using a chat log with timestamps that the instructor can audit. A goal of implementing Discord is to introduce a user-friendly tool that instructors can use to moderate group interactions and hold students accountable for their level of participation within their groups. A second goal of this project is to utilize the ability to programmatically access the communications in an effort to automate content and sentiment analysis to determine team effectiveness.	Using Discord to Understand and Moderate Collaboration and Teamwork: (Abstract Only)	NA:NA	2018
Wensheng Wu	We present SLASH, a learning tool currently under development in our graduate program. SLASH aims to help students review concepts in lectures slides using flash cards automatically generated from the slides. Many courses in our program have weekly quizzes and students can get stressed quite easily. So we hope that SLASH can make the process of reviewing lectures more fun and interesting to the students. Extracting concepts from lectures slides is itself an interesting but challenging problem, since the contents of the slides may be fragmented (e.g., point-based, with an incomplete sentence for each point) and noisy (e.g., containing formulas and codes). Past research on text mining has tried to "glue" together the points to construct a grammatically correct sentence, which is then used to extract concepts and relationships. In contrast, we focus on discovering popular concepts in the slides and generating flash cards with (just) sufficient contexts to help students recall the concepts. To the best of our knowledge, this is the first work on the automatic generation of concept-based flash cards from lecture slides. In the presentation, we will show our preliminary work, example flash cards, student feedback, and challenges in developing SLASH. We believe that SLASH may benefit all instructors who are using PowerPoint for lecture presentation, and may be used to largely stimulate students' interests in learning the subjects.	SLASH: Automatically Generating Flash Cards for Reviewing Concepts in Lectures Slides (Abstract Only)	NA	2018
Dante Ciolfi	This Lightning Talk describes a current effort to create an online learning system to address the unique learning needs of under-served groups. To ensure success in the most challenging scenarios, our first project iteration targets United Sates migrant farm workers and their families. Our goal is to teach migrant farm worker parents and children computer programming. Central to our project is the introduction of a new learning delivery model, the LMS/Support Model. The primary components of the model are: 1) a learning management system, featuring an open source course on the Go Programming Language hosted on a corporate cloud service), 2) live tutoring support provided by bilingual volunteers, and 3) a solar-powered, mobile wi-fi network on school buses. We have created the first course iteration and have made initial contact with a few non-governmental organizations (NGOs). We seek to form an interdisciplinary cadre, with scientists from the following fields: computer science, sociology, psychology and political science. We also seek to interface our educational effort with established social service efforts of universities near a high concentration of migrant farm workers. Our model scales well and can be replicated nationally and internationally. Successful deployment of our model in its initial iteration will significantly impact the lives of tens of thousands of overlooked migrant farm worker families. More importantly, it will lay the foundation for changing the lives of millions of children and adults internationally. In our allotted five minutes, we will discuss project details, assessment instruments and our inspiration for the project.	Computer Programming Training for Under-Served Groups: (Abstract Only)	NA	2018
Sven Jatzlau:Ralf Romeike	Since the emergence of block-based visual programming languages as a new take on programming environments, they have served as a successful entry point into programming for novice learners. Over time, they have been developed and improved to become increasingly accessible, intuitive, and easy to use. In the course of this evolution, both uncommon and entirely new language concepts have been introduced, such as the cloning of objects, or nesting of sprites. However, the question of how to teach them has yet to be answered: the mostly visual representation of program flow, output and code, and the way a user interacts with these aspects can make traditional teaching practices inadequate. Instead, block-based languages require new practices, methods, and strategies, which will be developed in this research project. Therefore, this Lightning Talk presents the initial findings of a research project concerned with the theory of teaching block-based programming. In a preliminary study, we have identified new concepts found in members of the most common block-based language family. In the next phase of the project, strategies for teaching these new concepts will be developed and assessed. This phase will be the focus of this Lightning Talk.	Toward Teaching Strategies for Block-based Languages: Possibilities, Challenges, and Experiences (Abstract Only)	NA:NA	2018
Ryan Clarke:Sarah Judd	Girls Who Code, a national nonprofit founded in 2012 with the mission to close the gender gap in the computer science (CS) fields, has reached tens of thousands of girls through our CS enrichment programs. To date, our Summer Immersion Program (SIP) has provided nearly 5,000 rising 11th- and 12th-grade girls from across the U.S. with the opportunity to engage in a seven-week introductory CS course. In this lightning talk we will describe our recently established Research Team's efforts to understand the ways SIP is affecting girls, describe challenges and limitations of this work, and offer a glimpse at how we hope to assess the program's longer-term impact on CS persistence and longevity by leveraging our organization's growing alumni network.	Evaluating the Impact of the Girls Who Code Summer Immersion Program: (Abstract Only)	NA:NA	2018
Jeffrey Miller	This lightning talk describes the benefits of exposing K12 students to Computer Science through short camp programs. The [email protected] Summer Camps (http://summercamps.usc.edu), founded jointly with the Institute for Education, provide girls, minorities, and low-income K12 students with an opportunity to learn about Computer Science through one week camps held during summer. Now in our third year, the camps have given nearly 1500 students the experience of being in college for a week on campus at the University of Southern California, changing classrooms, eating at the dormitory cafeteria, seeing college students in their natural environment, and learning from current Computer Science majors. Students learn about Computer Science through programming platforms, including Scratch Jr. (K-2nd), Scratch (3rd-8th), Java (7th-12th), and Python (7th-12th). The camps are provided for free or reduced cost based on donations from individuals and organizations. Through camp surveys, student interest in STEM fields raises from around 50% of students highly interested to over 80% by the end of the camp. Although the camp is only 32 hours long, early exposure to Computer Science can provide students of all ethnicities (nearly 75% of the attendees are Hispanic or African American) and genders (47% of the attendees are girls) with the foundation needed to prepare them for making an educated decision about STEM careers.	Benefits of Exposure Programs to K12 Student Interest in Computer Science: (Abstract Only)	NA	2018
Abril Vela	There is currently a dire need to improve efforts to integrate a better understanding of career and college pathways in all computing fields into our Computer Science (CS) curricula; versus continuing to label and advertise everything we do as "computer science". This effort is essential to improving post-secondary opportunities for students being introduced to computing through the nationwide CS for All commitment. For high school students in Chicago, this effort starts with Exploring Computer Science (ECS), which serves as our foundational CS course at [email protected], now that CS is a graduation requirement. I am examining the potential long term outcomes and benefits of segmenting each unit of ECS -- Human Computer Interaction, Problem Solving, Web Design, Programming, Big Data, and Robotics -- into different fields of computing and identifying the skillsets gained in these computing fields in order to articulate this to students with these interests. This effort is just underway and those interested in providing students with post graduation opportunities, as well as those personally interested in exploring career and college opportunities in computing fields, are invited to attend this talk, share feedback, and consider collaborating with CS4All.	Exploring Computer Science Beyond High School: Introducing Career and College Pathways (Abstract Only)	NA	2018
Adrienne Smith:Rebecca Zulli	Asset maps serve as a simple, yet impactful tool for helping underrepresented groups connect with important people, programs, and resources that would support their recruitment and retention in computing. At the end of this talk, individuals will walk away with a list of steps that they can use to develop a comprehensive map that could be distributed immediately to current and future computer science majors (including high school seniors). These steps include identifying current assets within an array of existing categories (e.g., tutoring centers, individual faculty mentors, local chapters of computing associations) designed to help mappers think expansively about existing supports. Additional steps involve reviewing contact lists and asking others to assist in the identification of assets, performing internet searches of the school/organization website looking for key words, and reading through the university directory to highlight offices that work on diversity issues or support the individuals targeted. The assets can be plotted directly onto a campus map and supplied to underrepresented groups so they are aware of and can locate the resources and supports available to them. (An enhancement would be an online version that links directly to web pages, contact information, and directions to further increase the accessibility of supports.)	Asset Maps: A Simple Tool for Recruiting and Retaining Underrepresented Populations in Computer Science (Abstract Only)	NA:NA	2018
Orit Hazzan	In the industry, the Dual Career Ladder allows employees to be promoted along either a supervisory or technical track. Such programs are common in the engineering, scientific and medical industries. In the Lightning Talk, I will borrow the metaphor of Dual Ladder and explore two kinds of experience -- academic and industrial experience -- that undergraduate computer science students can be offered to equip them with the needed tools for the future job market. Specifically, I will address the questions: What kind of real world experience should undergraduate students in computer science get and how? How should answers to this question be expressed in the computer science undergraduate programs? My talk will focus on the case of Israel -- the Start Up Nation (Senor and Singer, 2009) -- and the crucial role of computer science graduates in this job market. Data will be presented from the Technion -- Israel Institute of Technology, which is the ranked 1st among the Israeli universities. I will share our findings and data analysis, and propose possible ways to let students get both an academic and industrial experience in a way that prepare them both for academic and industrial careers.	The Dual Ladder -- Academic vs. Industrial Experience: What kind of Experience should Computer Science Students Gain during their Undergraduate Studies and How? (Abstract Only)	NA	2018
Peter-Michael Osera	NA	Session details: Demonstrations	NA	2018
Gina Likins:Jen Krieger	Electronic Textiles, or eTextiles, are textiles that directly incorporate conductive fibers or elements. eTextile projects are engaging and hands-on, and can serve as an introduction to computing, electrical engineering, and the Internet of Things. In addition, evidence suggests eTextile projects are especially well-suited for girls and young women, and may help improve their overall attitudes and confidence about computing. This demo will prepare instructors to lead a successful eTextiles workshop. Attendees will learn by doing -- up to 20 participants will experience the fun of eTextiles by adding an LED sequin to an article of clothing they bring. In addition, the demo will cover: what information should be included in an eTextiles workshop -- and what can be skipped; variants to accommodate experience and knowledge levels; and how instructors can ensure that workshops go off without a hitch. Participants should bring an article of clothing to "hack" (such as a t-shirt or hoodie).	Teaching "Blinky Flashy": Best Practices and Helpful Tips for Teaching eTextiles to a Wide Range of Students (Abstract Only)	NA:NA	2018
John Maloney	Scratch and other blocks languages have introduced millions of young people to coding. However, as students get older they naturally seek new horizons and new programming languages. At the same time, CS educators in higher grades want to explore concepts that go beyond the scope of Scratch. Unfortunately, text-based languages present challenges. Syntax issues, cryptic error messages, and complex programming environments can alienate students and consume valuable classroom time. GP allows exploration of computational ideas in the context of a welcoming, media-rich blocks language.	GP: A New Blocks Language for CS Education (Abstract Only)	NA	2018
David S. Touretzky:Christina Gardner-McCune	In light of our field/s progress in making programming accessible to novices, we contemplate an even more ambitious goal: make AI accessible to all. The Cozmo robot by Anki is revolutionizing consumer and educational robotics through built-in computer vision and artificial intelligence algorithms. Calypso is a scaffolded robot programming environment for Cozmo inspired by Microsoft/s Kodu Game Lab. Calypso allows novices to program with advanced features such as visual recognition of objects and faces, simultaneous localization and mapping (SLAM), landmark-based navigation, and speech input. Like Kodu, Calypso emphasizes rule-based programming with high-level primitives such as "see", "hear", "move toward", and "grab", and it uses an Xbox game controller as its primary interface. User testing of Calypso has shown that children as young as eight can easily use it to program Cozmo.   This demo will show off some of Calypso/s most striking features, including real-time graphical display of the robot/s world map, object detection with OpenCV, and speech recognition. We will share a Calypso curriculum that can be adapted to students from primary school through undergraduates. The demo will conclude with a discussion of the changes coming in both K-12 and undergraduate robotics instruction as we move from simple control of servos to true vision-guided mobile manipulators. For an advance look at Calypso, please see https://Calypso.software.	Calypso for Cozmo: Robotic AI for Everyone (Abstract Only)	NA:NA	2018
Leo C. Ureel, II:Charles R. Wallace	We present a demonstration of our WebTA tool, which facilitates the teaching of programming by providing automatic critique and grading of student source code. Programming is in fact a complex set of interconnected activities. Learning to design, analyze, implement, test, and revise software is crucial for student success, not just for computer science students but for a broad and growing body of students in other disciplines as well. Our approach is to teach students agile development methods through small cycles of teaching, coding integrated with testing, and immediate feedback. WebTA facilitates our teaching approach by providing automatic critique of student source code. WebTA provides immediate feedback to students and gives them experience with interactive, test-driven development. Students using WebTA are engaged in communication-by-proxy with the instructor. This communication does not replace instructor feedback; rather, it codifies common feedback scenarios, triggered by errors, warnings, or textual code analysis, to assist the instructor in reaching students just when the student is engaged in problem solving and learning. This prompts the student to reflect and refactor in an iterative design process. WebTA compiles student code and executes it over a series of shakedown tests. It also analyzes student performance and generates preliminary grading reports. Students are coached through code critiques and suggestions that prompt them to reflect and refactor. The demonstration consists of a walkthrough of two use-case scenarios: Student use of WebTA as a code snippet critiquer and its use by faculty as an automated grading system.	WebTA: Online Code Critique and Assignment Feedback (Abstract Only)	NA:NA	2018
Barbara Cutler:Matthew Peveler:Samuel Breese:Evan Maicus:Ana Milanova:Buster Holzbauer:Andrew Aikens:James Anderson:Josh Barthelmess:Timothy Cyrus:Marisa Lee:Leon Montealegre:Jessica Wang	Submitty is an open source programming assignment submission system from the Rensselaer Center for Open Source Software (RCOS) at Rensselaer Polytechnic Institute (RPI) accessed via an online interface. Submitty allows students to submit their code through file upload or version control, such as an internal Git/SVN server or Github, where it is then tested with a highly configurable and customizable automated grader. For each assignment, instructors can specify whether or not students can work in teams. For team assignments, the instructor can either assign teammates or allow the students to choose. In addition to the auto-grading for submissions, Submitty supports human grading. The human graded rubric is developed by the graders as they work, allowing reuse of common feedback messages and partial credit points. The rubric can be searched and modified during and after grading is complete for consistency. By default, grading is handled by instructors and TAs who are assigned to sections of students, which can be rotated through the semester. However, an instructor can choose to incorporate peer grading, which will allow students to anonymously view and submit grades for each other, receiving multiple peer grades per assignment. Submitty has been used at RPI for several years for a variety of courses, serving over 1500 students and 50 instructors and TAs each semester, and has recently been used by several other universities. We will present "case studies" of assignment configurations for autograding and manual grading and demonstrate the grading interface in support of team submissions and peer grading.	Supporting Team Submissions and Peer Grading within Submitty: (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Rita Garcia:Katria Falkner:Rebecca Vivian	Parsons Problems is an effective Introductory Programming teaching tool that allows students to arrange code to form a functional program, reducing their cognitive load so they can focus on programming concepts. This demonstration shows how Parsons Problems can be used as a pedagogical strategy in a Massive Open Online Course (MOOC) for introductory programming. A MOOC is a learning platform, where compilers and IDEs have already been embedded for CS students to immerse themselves in a single learning environment. The Parsons Problems package, js-parsons, available at https://github.com/js-parsons/js-parsons has been successfully integrated into the University of Adelaide's edX's MOOC platform as a component that can potentially be made available for other edX platforms. The demonstration presents the educators' interface to add new questions and receive students' results, along with students' perspective, including subgoals. The demonstration prototypes new feedback models when students encounter Parsons Problems errors, opening discussion up to the audience for opinions and input. This demonstration is intended for anyone wanting to know how to use Parsons Problems within MOOCs as a pedagogical approach; those seeking to incorporate MOOCs into their coursework with focused exercises; and those wanting to contribute to future Parsons Problems enhancements. Laptops are recommended, since participants will have the hands-on opportunity to evaluate the package during the demonstration.	Parsons Problems usage within a MOOC Pedagogy: (Abstract Only)	NA:NA:NA	2018
Timothy Hickey:Fatima Abu Deeb	Enrollments in Computer Science classes have been increasing at an exponential rate in many colleges and universities, which has resulted in a rapid increase in class size especially for the Introduction to Programming classes. The Spinoza system was developed as a way to add active learning to very large CS1 classes taught in Python. The main goals were to keep all students actively involved in learning how to code and how to debug. The key innovation of Spinoza is the Solve-Then-Debug activity in which students first solve a problem by getting their code to pass a suite of unit tests and then they debug the most common incorrect attempts of their classmates. The instructor has access to a wide variety of tools for viewing performance of the class and the individual students in real-time. In this demo, we will show you how to use Spinoza in your own classes. In particular, we show how to create a class, create a problem, and how to monitor the progress of the students in both the solving and the crowdsourced debugging phase, and how to use the other orchestration features to effectively explore the concepts exposed by that problem.	SPINOZA: In-class Python Problem Solving with Classroom Orchestration (Abstract Only)	NA:NA	2018
Seongtaek Lim:Rama Adithya Varanasi:Tapan Parikh	Despite software engineering's inherently collaborative nature, collaboration with others hasn't been the primary way for students to learn how to program. Although various collaboration frameworks, such as Git, are widely used in software engineering, they've been treated as separate skills to acquire in addition to learning programming languages, rather than ways of learning, working, and thinking while learning to program. One collaborative software development task that students often want to engage in is building websites. However, the complexity of web syntax and architecture has been a hurdle in teaching and learning web design and development, especially for beginners without sufficient technical background. Specifically, syntactic barriers in several different languages for a webpage, inherent coupling of content and design in HTML, difficulty in understanding server-client model, and need for hosting resources for deployment contribute to a steep learning curve in building websites "from scratch". This work aims to address these issues by developing GLIDE (Git-Learning Integrated Development Environment) - a set of tools and curriculum that support in-class collaborative development in web engineering courses. GLIDE structures the website development process as a teacher-guided Git workflow for a team of students collaborating in groups in a Git repository. The application also provides a web programming model that separates content, from design, from implementation, allowing students to take on different roles and responsibilities during the development process. This demo presents a tutorial on how a group of students can build websites collaboratively with teacher's assistance based on the GLIDE software platform and curriculum.	GLIDE (Git-Learning IDE; Integrated Development Environment): In-class Collaboration in Web Engineering Curriculum for Youths (Abstract Only)	NA:NA:NA	2018
Mark Mahoney	There is value in instructors guiding students through complex programming problems. An instructor can describe how they start a program, decide what to do next, recover from poor problem solving choices, and check their work. Worked examples give students an inside look at an expert/s mental model and show how an expert approaches a problem. Live coding demonstrations of complex problems can be difficult for instructors to do well, however. This demonstration will show a tool that allows programmers to guide an audience through the evolution of some code without requiring a live performance. The open source tool, Storyteller (https://github.com/markm208/storyteller), integrates with a popular text editor to record all file editing and file operations so that they can be replayed in an animated, annotated playback. Instructors can replay their work to reflect on it. They can insert comments (text, drawings, screenshots, and audio) to describe their code and to explain the reasons why certain decisions were made. These comments are linked not only to a place in the code but to a point in time during the evolution of the code. The comments are recorded and are visible in future playbacks of the code. The author of a playback can create a narrative describing how and why their code is changing. These can be used by instructors to provide worked examples for their students. The demonstration will show some example playbacks and how they were used in class along with how to create and share playbacks with the tool.	Storyteller: A New Medium for Guiding Students Through Code Examples (Abstract Only)	NA	2018
John Sweller	Cognitive load theory uses our knowledge of human cognitive architecture to devise instructional procedures, most of which are directly relevant to computer science education. There are several basic aspects of human cognition that are critical to instructional design. First, based on evolutionary educational psychology, cognitive load theory assumes that most topics taught in educational and training institutions are ones that we have not specifically evolved to learn. Such topics require biologically secondary knowledge rather than the biologically primary knowledge that we have evolved to acquire. Second, these instructionally relevant topics require learners to acquire domain-specific rather than generic cognitive skills. Third, while generic cognitive knowledge does not require explicit instruction because we have evolved to acquire it, domain-specific concepts and skills that provide the content of educational syllabi, do require explicit instruction. These three factors interact with the well-known capacity and duration constraints of working memory and the unlimited capacity and duration characteristics of long-term memory to delineate a cognitive architecture relevant to instructional design. The working memory limits do not apply to biologically primary, generic knowledge acquired without explicit instruction but do apply to the biologically secondary, domain-specific knowledge that requires explicit instruction and that is relevant to computer science education. Human cognition when dealing with such knowledge constitutes a natural information processing system that has evolved to mimic the architecture of biological evolution. Cognitive load theory uses this architecture to generate a large range of instructional effects concerned with procedures for reducing extraneous working memory load in order to facilitate the acquisition of knowledge in long-term memory. This talk reviews the theory and indicates the instructional implications relevant to computer education.	Cognitive Load Theory and Computer Science Education	NA	2016
Barbara Boucher Owens	"Service is the rent we pay for the space we take up on earth", my dad's mantra, and one used by many. Participating in professional organizations such as SIGCSE and its parent organization, ACM, has been for me an incredibly rewarding obligation. Many have given of their time and talents to help me on my way. Some of those who have followed in my footsteps have also forged paths of service making mine pale in comparison. This computer science education community affords incredibly rich opportunities for service in venues ranging from local to international. Service in SIGCSE and similar communities can reap untold benefits for both the volunteer and the community served.	Service as Rent	NA	2016
Jan Cuny	Computer Science (CS) education has caught a wave -- of media attention, public support, public/private commitments, broad-based participation by educators, and a surge in student enrollments at the undergraduate level. It is a startling change over just the last 5 years. Over that 5 years, much has been accomplished at the high school level. The Exploring Computer Science and Advanced Placement® CS Principles courses were created to engage and inspire a diverse mix of students. Hundreds of teachers and university faculty have collaborated to develop course materials, assessments, MOOCS, and models of teacher professional development. Over 2,000 high schools now offer new CS courses, but that leaves out more than 34,000. Even then, students will need more than a single course, they will need a K-16 CS pathway. At the K-8 level, CS does not have the decades of research on the teaching and learning that is available to many other, more established disciplines. A stronger evidence base is needed as the basis for pedagogy, curricula, standards, and teacher preparation. The CS community must put greater emphasis on research in CS education and broadening participation, and it must build stronger collaborations with researchers in related disciplines. Over the last 5 years, college-level CS departments have been inundated with students. This growth is fueled by a strong job market for CS majors and an increasing awareness that computation is fundamental to many other industry sectors and academic disciplines. How will departments cope with increasing numbers without sacrificing access or quality? How will they respond to increasing diversity of ethnicity and gender, but also of interests, and career goals of their students? For those interested in CS education, it's an exciting time, but it comes with some urgency. This talk will discuss how to catch the current wave, using it to full advantage.	CS Education: Catching the Wave	NA	2016
Karen Lee Ashcraft	Occupations, like individuals, take on social identities such as gender and race. The social identity of an occupation has profound effects, for example, on wages and prestige, degree of professionalization, and ability to recruit and retain diverse populations. Sifting the historical evidence on technical work, Dr. Ashcraft develops a new concept---the "glass slipper"---which explains how durable associations between occupations and people arise and how they circulate among us like powerful brands. Despite appearances, this process is neither natural nor determined. It is political, however, revealing a reality more daunting than recent advice to "lean in" suggests. But if the social identities of occupations are strategically constructed, they also can be challenged through creative re-branding.	Lean In to the Evidence: Breaking the "Glass Slipper" of Technical Professions	NA	2016
Tiffany Barnes	NA	Session details: Demonstration Session	NA	2016
Clifford A. Shaffer	The open-source OpenDSA eTextbook system is seeing rapidly growing use around the world. It combines textbook-quality tutorial material with many algorithm visualizations (AVs), simulations, and a large collection of interactive exercises, including small programming exercises. Its materials are re-configurable for specific classes. Being implemented in HTML5, it requires only a web browser to be accessible to students. Available content now includes comprehensive coverage for Data Structures and Algorithms courses, and rapidly growing content for Programming Languages, Translators, and Formal Languages courses. This session will provide a demonstration of the most innovative features of OpenDSA as they might be used by students and instructors in a range of Computer Science courses.	OpenDSA: An Interactive eTextbook for Computer Science Courses	NA	2016
Daniel M. Olivares:Christopher D. Hundhausen	In order best to support learning analytics in computing education, learning management systems (LMS) should be interfaced with computer programming environments, in which computing students spend much of their time. To this end, we have developed OSBLE+, an outgrowth of the OSBLE (Online Studio- Based Learning Environment) LMS we have been developing over the past eight years. OSBLE+ supports two innovations that make it particularly well-suited to supporting learning analytics in computing education. First, it connects to the Microsoft Visual Studio computer programming environment via a plugin that gives it access to all programming process data within Visual Studio, including edits, compilation attempts, compilation errors, debugging attempts, and run-time exceptions. This enables OSBLE+ to provide students and instructors with a visual analytics environment in which they can explore, compare, and contrast the programming activities of students in the class. Second, the plugin turns Visual Studio into a social programming environment by injecting into it a social media-style activity stream, which enables students (a) to pose and answer programming questions, and (b) to see and explore the programming activities of their peers. Students' social activities within the activity stream are sent to OSBLE+, and are subsequently included as data in the visual analytics environment. OSBLE+ is open source and freely hosted at http://plus.osble.org. While OSBLE+ presently interfaces only with Visual Studio, a plug-in for the Eclipse programming environment is under active development.	OSBLE+: A Next-Generation Learning Management and Analytics Environment for Computing Education	NA:NA	2016
Albert Chan	NA	Session details: Paper Session: Data Structures	NA	2016
Scott Grissom:Laurie Murphy:Renée McCauley:Sue Fitzgerald	This paper reports on a study of goal-plans and errors produced by students who wrote recursive solutions for a binary tree operation. This work extends a previous study of difficulties CS2 students experienced while writing solutions on paper-based exams. In this study, participants solved the same recursive binary tree problem as part of a hands-on computer-based exam where students had access to an IDE and Java API documentation. Not surprisingly, students who took the computer-based exams were more successful than those who took the paper-based exams (58% vs. 17% correct solutions). However, even with the advantage of access to an IDE, documentation, and test cases, 42% of students taking the computer-based exam still made errors, indicating that students exhibit persistent errors even with support. The most common errors observed included incorrect calculations, missing method calls and missing and incorrect base cases.	Paper vs. Computer-based Exams: A Study of Errors in Recursive Binary Tree Algorithms	NA:NA:NA:NA	2016
Holger Danielsiek:Jan Vahrenhold	This paper reports on first steps towards identifying factors indicating students' performance in a CS2 course. We discuss a study undertaken to investigate the predictive and explanation power as well as the limits of weekly test items based on concept inventory questions, homework grades, and performance in a preceding CS1 course. We relate our findings for two subgroups to results on academic success in general and performance in a CS1 course in particular.	Stay on These Roads: Potential Factors Indicating Students' Performance in a CS2 Course	NA:NA	2016
David Burlinson:Mihai Mehedint:Chris Grafer:Kalpathi Subramanian:Jamie Payton:Paula Goolkasian:Michael Youngblood:Robert Kosara	Although undergraduate enrollment in Computer Science has remained strong and seen substantial increases in the past decade, retention of majors remains a significant concern, particularly for students at the freshman and sophomore level that are tackling foundational courses on algorithms and data structures. In this work, we present BRIDGES, a software infrastructure designed to enable the creation of more engaging assignments in introductory data structures courses by providing students with a simplified API that allows them to populate their own data structure implementations with live, real-world, and interesting data sets, such as those from popular social networks (e.g., Twitter, Facebook). BRIDGES also provides the ability for students to create and explore {\em visualizations} of the execution of the data structures that they construct in their course assignments, which can promote better understanding of the data structure and its underlying algorithms; these visualizations can be easily shared via a weblink with peers, family, and instructional staff. In this paper, we present the BRIDGES system, its design, architecture and its use in our data structures course over two semesters.	BRIDGES: A System to Enable Creation of Engaging Data Structures Assignments with Real-World Data and Visualizations	NA:NA:NA:NA:NA:NA:NA:NA	2016
Monisha Pulimood	NA	Session details: Paper Session: Computational Thinking	NA	2016
Adam Eck:Leen-Kiat Soh:Duane F. Shell	Introductory computer science courses are being increasingly taught using technology-mediated instruction and e-learning environments. The software and technology in such courses could benefit from the use of student models to inform and guide customized support tailored to the needs of individual students. In this paper, we investigate how student motivated engagement profiles developed in educational research can be used as such models to predict student behaviors. These models are advantageous over those learned directly from observing individual students, as they rely on different data that can be available a priori before students use the technology. Using tracked behaviors of 249 students from 7 CS1 courses over the span of 3 semesters, we discover that students with different engagement profiles indeed behave differently in an online, wiki-based CSCL system while performing collaborative creative thinking exercises, and the differences between students are primarily as expected based on the differences in the profiles. Thus, such profiles could be useful as student models for providing customized support in e-learning environments in CS1 courses.	Investigating Differences in Wiki-based Collaborative Activities between Student Engagement Profiles in CS1	NA:NA:NA	2016
Dave Mason:Irfan Khan:Vadim Farafontov	Computers and computational thinking are becoming ubiquitous in our world. They are part of the transportation systems we use, the security systems we confront, our entertainment systems, our communication systems, our financial systems, and even our social and political instruments. Computational thinking is a fundamental part of decision-making on a large and increasing number of fronts. It is sometimes hard for a computer scientist to imagine how people without access to those tools can navigate the world in an informed way. We have designed a course to bring the social, historical, cultural and technical context of these systems to the attention of students and citizens who would not otherwise have access to them, so they can better understand the world in which they will live and work. The course is a Computer Science course because it is talking about the science of computers, albeit in an approachable form for an audience without any assumed previous programming experience. The course ran in Winter 2014 and Winter 2015 meeting most of its goals, including engaging the non-traditional student who took it.	Computational Thinking as a Liberal Study	NA:NA:NA	2016
Sarah Monisha Pulimood:Kim Pearson:Diane C. Bates	This paper reports on a multi-semester study of the impact on student perceptions of their computational thinking abilities as a result of collaboration between students in computer science (CS) and journalism courses to solve a problem for a community partner, Habitat for Humanity. Interdisciplinary computing collaborations have become a popular mode of instruction in upper-level CS courses. In many cases, these collaborations have been with other STEM disciplines. However, there are non-STEM fields that have been transformed by computer science and can also serve as fruitful test beds for curricular innovation; journalism is one such field. In this study, undergraduate students in CS and journalism courses focused on creating a computational solution to address a real community need. The study investigates whether immersion in multidisciplinary collaborative experiences increases the computational thinking abilities of both CS and non-CS students. 41 CS students participated in the study alongside 96 students in a range of other STEM and non-STEM majors. Quantitative data were collected to gauge students' attainment of concepts and skills constitutive to computational thinking. Pre-test data indicate that CS students were no different from other STEM students in their own assessment of computational thinking and skills. Post-test data indicate that while all students made significant gains in self-assessment of skills and knowledge, CS majors fared significantly better than their peers. It is particularly noteworthy that CS majors' gains outpaced those of computer engineering majors. Further research is planned to gain additional insight into the possible reasons behind these results.	A Study on the Impact of Multidisciplinary Collaboration on Computational Thinking	NA:NA:NA	2016
Bo Brinkman	NA	Session details: Paper Session: Research on Learning	NA	2016
Cindy Norris	This paper investigates the impact of layers of quizzing on student performance on subsequent tests and the final exam. The first layer of quizzes are on-line "pre-quizzes" designed to prepare students for follow-on classroom discussions. The second layer quizzes are short "post-quizzes" that are given during class time after discussing questions about the material covered by pre-quizzes. A study involving fifteen semesters of data and 348 students indicated that students performed better on tests and the final exam with this quizzing strategy compared to a more traditional homework based approach. These results agree with the body of research that indicates that testing enhances learning. Significantly, we found an 8 point pass rate increase on the Computer Systems I final exam and a 10 point pass rate increase on the Systems II final.	An Examination of Layers of Quizzing in Two Computer Systems Courses	NA	2016
Briana B. Morrison:Lauren E. Margulieux:Barbara Ericson:Mark Guzdial	We report on a study that used subgoal labels to teach students how to write while loops with a Parsons problem learning assessment. Subgoal labels were used to aid learning of programming while not overloading students' cognitive abilities. We wanted to compare giving learners subgoal labels versus asking learners to generate subgoal labels. As an assessment for learning we asked students to solve a Parsons problem -- to place code segments in the correct order. We found that students who were given subgoal labels performed statistically better than the groups that did not receive subgoal labels or were asked to generate subgoal labels. We conclude that a low cognitive load assessment, Parsons problems, can be more sensitive to student learning gains than traditional code generation problems.	Subgoals Help Students Solve Parsons Problems	NA:NA:NA:NA	2016
Mehran Sahami:Chris Piech	In recent years, enrollments in undergraduate computer science programs have seen tremendous growth nationally. Often accompanying such growth is a concern from faculty that the additional students choosing to pursue computing may not have the same aptitude for the subject as was seen in prior student populations. Thus such students may exhibit weaker performance in computing courses. To help address this question, we present a statistical analysis using mixture modeling of students' performance in an introductory programming class at Stanford University over an eight year period, during which enrollments in the course more than doubled. Importantly, in this setting many variables that would normally confound such a study are directly controlled for. We find that the distribution of student performance during this period, as reflected in their programming assignment scores, remains remarkably stable despite the large growth in enrollment. We then explain how the notion of having "more weak students" and the fact that the distribution of student ability is unchanged can readily co-exist and lead to misperceptions about the quality of incoming students during an enrollment boom.	As CS Enrollments Grow, Are We Attracting Weaker Students?	NA:NA	2016
Andy Grover	NA	Session details: Paper Session: Professional Development	NA	2016
Chrystalla Mouza:Lori Pollock:Kathleen Pusecker:Kevin Guidry:Ching-Yi Yeh:James Atlas:Terry Harvey	One of the greatest challenges in broadening participation in computer science is teacher preparation, as few middle and high school teachers have a formal background in computing. Further, without a credentialing program, there are limited ways to learn content and pedagogical strategies for effective computer science instruction. As a result, professional development is key to successful reform in the teaching of computer science. In this paper, we describe our three-pronged approach to the design of a professional development model for middle and high school teachers interested in implementing the Computer Science Principles (CSP) curriculum in their classrooms or infusing CSP modules into STEM curricula. We describe our model focusing on content, pedagogical strategies and follow-up classroom support during the academic year. We subsequently report on participating teacher outcomes, in terms of self-rated understandings, attitudes and implementation practices. We share lessons learned and offer recommendations for professional development designers.	Implementation and Outcomes of a Three-Pronged Approach to Professional Development for CS Principles	NA:NA:NA:NA:NA:NA:NA	2016
Helen H. Hu:Cecily Heiner:Jay McCarthy	Exploring Computer Science (ECS) is a high school introductory computer science class designed to increase student interest in CS. Utah is the first state to offer ECS statewide and use it to meet a high school graduation requirement. Over the past four years, 150 teachers have been trained as Utah ECS teachers and over 10,000 Utah students have taken the class. The Utah initiative is unique because it is the first to deploy ECS in a non-urban environment and with a modified half-year curriculum that includes no additional equipment costs. This paper discusses how the Utah deployment was organized, reports its results and unique difficulties, and offers lessons for deployments with similar characteristics: statewide, rural, and limited resources.	Deploying Exploring Computer Science Statewide	NA:NA:NA	2016
Nathaniel Granor:Leigh Ann DeLyser:Kevin Wang	Rising demand for high school computer science courses in the United States has created pressure to increase the number of computer science(CS) teachers in a short amount of time[3]. In this experience report, we present the TEALS program as a unique, high-touch, professional development model, pairing computing industry professionals with classroom teachers. By combining the relative strengths of the team (content and pedagogy) TEALS has been able to successfully train new CS teachers. We present the history of the TEALS program, the volunteer and teacher recruitment process, the volunteer training program, data from a study of the pedagogical content knowledge of the TEALS volunteers, and program growth and efficacy data. Additionally, we offer achievement of students on the AP CS A exam as an externally valid measurement of learning outcomes in TEALS classrooms.	TEALS: Teacher Professional Development Using Industry Volunteers	NA:NA:NA	2016
Christine A. Shannon:James Kiper:Samuel A. Rebelsky:Janet Davis	NA	Engaging CS Alumni from Afar	NA:NA:NA:NA	2016
Daniel D. Garcia:Josh Caldwell:Pamela Fox:Jeremy Keeshin	In his keynote at SIGCSE 2007, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following seven SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: What we've done / seen: Highlighting successful PBJA initiatives they have done or have seen and wish to trumpet. What we should do (curriculum): Pointing out, as Grady Booch did, where our curriculum is lacking in PBJA, and how to fix it. How we should do it (pedagogy): Sharing how a change in attitude / focus / behavior / etc. can make strides to improving PBJA. While the initial PBJA sessions evolved from a need to understand and combat the enrollment crisis of nine years ago, we are now seeing an explosion of interest in our field. There are colleges where the numbers have vast exceeded historic highs, with computer science enrollments up 22% in 2014. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques to make computing fun for beginners. This year we have gathered three educators who represent online, self-paced curriculum, platforms and community that together have reached millions of people. How does the online experience support or prevent PBJA in ways traditional classrooms don't? What innovative ideas did they employ to support collaboration, and how do they manage the "bad elements" of their user base? What is the right balance between easy-to-autograde, follow-me curriculum and wide-open, "be creative" experiences for the first-time user? Which works best, blocks-based or text-based programming? How can the "big data" from the mistakes of others be leveraged to give each user a personalized experience? The hope with this panel is to explore best practices of self-paced online offerings in these crucial early years, for participants of any age, in terms of extolling the PBJA of computing.	Rediscovering the Passion, Beauty, Joy, and Awe: Making Computing Fun Again, part 8	NA:NA:NA:NA	2016
Joel C. Adams:Jacob Caswell:Suzanne J. Matthews:Charles Peck:Elizabeth Shoop:David Toth:James Wolfer	Just as a micro-computer is a personal, portable computer, a micro-cluster is a personal, portable, Beowulf cluster. In this special session, six cluster designers will bring and demonstrate micro-clusters they have built using inexpensive single-board computers (SBCs). The educators will describe how they have used their clusters to provide their students with hands-on experience using the shared-memory, distributed-memory, and heterogeneous computing paradigms, and thus achieve the parallel and distributed computing (PDC) objectives of CS 2013 [1].	The Micro-Cluster Showcase: 7 Inexpensive Beowulf Clusters for Teaching PDC	NA:NA:NA:NA:NA:NA:NA	2016
Amber Settle	NA	Session details: Paper Session: Pair Programming	NA	2016
Mohammed Seyam:D. Scott McCrickard	Pair Programming has demonstrated benefits for education, but unique concerns of mobile software design raise questions about the effectiveness of Pair Programming in this evolving field. This paper probes unique challenges for Pair Programming when used in mobile software design classes, focusing on five mobile design topics: dealing with interface and data management, using camera, handling multi-device connectivity, using sensors and collecting GPS data, and using microphones and speakers. The paper highlights successes and challenges for Pair Programming and mobile applications, concluding with recommendations on building assignments, managing student interaction, and implementing Pair Programming for instructors considering using it in their mobile development classes.	Teaching Mobile Development with Pair Programming	NA:NA	2016
Omar Ruvalcaba:Linda Werner:Jill Denner	Sixty-nine pairs of Latino and white middle school students were video recorded as they pair programmed for approximately 20 minutes. We quantitatively analyzed the partners' interactions specifically looking at characteristics of their collaboration. A qualitative analysis of interactions of three girl pairs was conducted to gain insight into how students' experience in diverse cultural communities may relate to their collaboration during pair programming.	Observations of Pair Programming: Variations in Collaboration Across Demographic Groups	NA:NA:NA	2016
Ian McChesney	In the software engineering industry the technique of pair programming can be used as a means of enhancing programmer productivity and the quality of the software development process. Pair programming has also been used in computer science education as a mechanism to address some of the educational challenges faced by students learning to program. An action research study is described in which pair programming is used as part of the learning and assessment regime in introductory programming. Module data has been used over a three year cycle to evaluate the impact of pair programming on student performance and confidence in programming, and to gain insights into its practical application. Within-subject analysis confirms previously reported observations of overall improved student performance. Qualitative analysis identifies areas for refinement in the practical application of pair programming for learning and assessment, particularly in relation to pairwise communication, establishing protocols for conflict resolution and development of professional competencies.	Three Years of Student Pair Programming: Action Research Insights and Outcomes	NA	2016
Meghan Allen	NA	Session details: Paper Session: Engagement and Diversity	NA	2016
Sarnath Ramnath:John H. Hoover	A framework for developing computing courses is presented, that has the potential to increase student engagement by enhancing student perception of relevance. The framework employs established andragogical approaches, course design methodologies, and measurement tools. A preliminary report on the application of this framework is presented. The results are encouraging, and the framework can be easily adapted to a variety of environments.	Enhancing Engagement by Blending Rigor and Relevance	NA:NA	2016
Burçin Tamer:Jane G. Stout	College and university professors serve as role models and leaders. Unfortunately, in computing fields, only a small fraction of the professorate is women and/or members of minority racial groups. To address this issue, the current research assessed the role of research experiences for undergraduate students (REUs) on underrepresented students' interest in pursuing a career as a computing professor. We found that REUs utilizing a set of specific practices are linked with underrepresented students' interest in becoming a computing professor. On the other hand, no specific REU practice was associated with majority students' (i.e., White and Asian men's) level of interest in becoming a professor. Thus, this research not only identifies aspects of REUs that may be especially important for increasing diversity in the professorate but also highlights that REUs may serve different purposes for underrepresented versus majority students.	Understanding How Research Experiences for Undergraduate Students May Foster Diversity in the Professorate	NA:NA	2016
Bo Brinkman:Amanda Diekman	The lack of diversity in the tech industry is a widely remarked phenomenon. The majority of workers in tech roles are either white or Asian men, with all other groups being under-represented. Some authors point to cultural factors influencing self-efficacy, leading to a lack of diversity at the start of the "pipeline" of IT talent. Others point to toxic workplace culture that can lead skilled tech workers to drop out of the industry. While these effects are very real and important, this paper focuses on a third concept contributing to lack of diversity, communal goal congruity. We present a growing body of evidence suggesting that working with others, and in the service of others, are important career goals that many believe tech careers lack. We describe prior work that shows that these beliefs also have a significant impact on the pipeline of tech talent. We then report on the first pieces of data out of the first long-term intervention designed with this communal goal congruity perspective in mind. We have created a cohort-based service-learning program in computer science, computer engineering, electrical engineering, and software engineering. The result is a program with 26.3% women and 31.6% African American and/or Hispanic students, including 15.8% African American and/or Hispanic women, at an institution that has never previously seen this level of diversity in its computing majors.	Applying the Communal Goal Congruity Perspective to Enhance Diversity and Inclusion in Undergraduate Computing Degrees	NA:NA	2016
Leigh Ann Sudol-DeLyser	NA	Session details: Paper Session: CS Ed Research 1	NA	2016
Brett A. Becker	One of the many challenges novice programmers face from the time they write their first program is inadequate compiler error messages. These messages report details on errors the programmer has made and are the only feedback the programmer gets from the compiler. For students they play a particularly essential role as students often have little experience to draw upon, leaving compiler error messages as their primary guidance on error correction. However these messages are frequently inadequate, presenting a barrier to progress and are often a source of discouragement. We have designed and implemented an editor that provides enhanced compiler error messages and conducted a controlled empirical study with CS1 students learning Java. We find a reduced frequency of overall errors and errors per student. We also identify eight frequent compiler error messages for which enhancement has a statistically significant effect. Finally we find a reduced number of repeated errors. These findings indicate fewer students struggling with compiler error messages.	An Effective Approach to Enhancing Compiler Error Messages	NA	2016
Juho Leinonen:Krista Longi:Arto Klami:Arto Vihavainen	Studies on retention and success in introductory programming course have suggested that previous programming experience contributes to students' course outcomes. If such background information could be automatically distilled from students' working process, additional guidance and support mechanisms could be provided even to those, who do not wish to disclose such information. In this study, we explore methods for automatically distinguishing novice programmers from more experienced programmers using fine-grained source code snapshot data. We approach the issue by partially replicating a previous study that used students' keystroke latencies as a proxy to introductory programming course outcomes, and follow this by an exploration of machine learning methods to separate those students with little to no previous programming experience from those with more experience. Our results confirm that students' keystroke latencies can be used as a metric for measuring course outcomes. At the same time, our results show that students programming experience can be identified to some extent from keystroke latency data, which means that such data has potential as a source of information for customizing the students' learning experience.	Automatic Inference of Programming Performance and Experience from Typing Patterns	NA:NA:NA:NA	2016
Ahmed Al-Zubidy:Jeffrey C. Carver:Sarah Heckman:Mark Sherriff	The computer science education (CSEd) research community consists of a large group of passionate CS educators who often contribute to other disciplines of CS research. There has been a trend in other disciplines toward more rigorous and empirical evaluation of various hypotheses. Prior investigations of the then-current state of CSEd research showed a distinct lack of rigor in the top research publication venues, with most papers falling in the general category of experience reports. In this paper, we present our examination of the two most recent proceedings of the SIGCSE Technical Symposium, providing a snapshot of the current state of empiricism at the largest CSEd venue. Our goal to categorize the current state of empiricism in the SIGCSE Technical Symposium and identify where the community might benefit from increased empiricism when conducting CSEd research. We found an increase in empirical validation of CSEd research to over 70%; however, our findings suggest that current CSEd research minimizes replication precluding meta-analysis and theory building.	A (Updated) Review of Empiricism at the SIGCSE Technical Symposium	NA:NA:NA:NA	2016
David Naugler	NA	Session details: Paper Session: CS0	NA	2016
Cindy Marling:David Juedes	This paper describes the design and initial implementation of a new CS0 course for CS majors at Ohio University and an associated computer science placement exam. It was our expectation that this course would help improve overall retention and academic performance of CS majors. The new CS0 course was intended for new students with little or no programming experience. Hence, we designed CS0 by selecting some of the best components of other CS0 efforts from the literature, namely, introductory programming in Python, computational thinking, and motivational material aimed at instilling ownership of the major. In order to direct students into CS0 or CS1 appropriately, a placement exam was given to students during orientation. The placement process resulted in a mixed cohort consisting of students with no programming experience as well as other students with programming experience who did not pass the placement exam. Longitudinal analysis of student grades in CS0 and CS1 showed that these were two distinct populations with very different needs. A statistically significant difference was found in the CS1 grades for CS0 students from these populations. Surprisingly, CS0 students without prior programming experience got significantly higher grades in CS1 than CS0 students who had programmed before. We share lessons learned from our experience, including a revised placement process to address these separate populations.	CS0 for Computer Science Majors at Ohio University	NA:NA	2016
Sagar Raina:Siddharth Kaza:Blair Taylor	Student skipping content is common in traditional learning modules that present a large amount of content in a linear format. This can lead to lower student engagement, and may yield poor learning. In this paper, we compare student learning between enhanced learning modules (2.0) and traditional modules (1.0) aimed at providing knowledge on secure coding to students in lower-level programming courses. We discuss the results of a quasi-experiment across two sections of CS0. The study compares students' secure coding awareness, general software security awareness and students' ability to identify security vulnerabilities (integer overflow, input validation and buffer overflow) in three separate code segments. A total of 53 students participated in the study. While results indicate significant improvement in secure coding and general software security awareness in both 1.0 and 2.0 modules, students using 2.0 modules performed significantly better than students using 1.0 modules in applying secure coding knowledge by identifying security vulnerabilities in code segments.	Security Injections 2.0: Increasing Ability to Apply Secure Coding Knowledge using Segmented and Interactive Modules in CS0	NA:NA:NA	2016
Deborah A. Fields:Lisa Quirke:Janell Amely:Jason Maughan	In this paper we explore how to assess novice youths' learning of programming in an open-ended, project-based learning environment. Our goal is to combine analysis of frequent, automated snapshots of programming (e.g., "big" data) within the "thick" social context of kids? learning for deeper insights into their programming trajectories. This paper focuses on the first stage of this endeavor: the development of exploratory quantitative measures of youths? learning of computer science concepts. Analyses focus on kids? learning in a series of three Scratch Camps where 64 campers aged 10-13 used Scratch 2.0 to make a series of creative projects over 30 hours in five days. In the discussion we consider the highlights of the insights-and blind spots-of each data source with regard to youths' learning.	Combining Big Data and Thick Data Analyses for Understanding Youth Learning Trajectories in a Summer Coding Camp	NA:NA:NA:NA	2016
Rania Hodhod:Shamim Khan:Yesem Kurt-Peker:Lydia Ray	Computational thinking (CT), which encompasses strategies for problem analysis and solution design, is highly applicable in all STEM disciplines, including computer science, for learning concepts as well as solving problems. Yet, the exposure of K-12 students to CT in many schools is practically non-existent. For students to acquire this important skill, teachers require in-depth knowledge of the problem solving strategies that define CT, and strategies for integrating CT into their lesson plans. The proposed special session will be both a tutorial on CT and an interactive session for sharing the experience and results from a CT workshop held at Columbus State University for middle and high school STEM subject teachers. This workshop, offered as a part of the ACT4STEM (Applying Computational Thinking for STEM Disciplines) project, took place in the summer of 2015. It brought together teachers from the metropolitan Columbus area in Georgia with priority given to teachers from high-need schools (as determined by the GA Department of Education [1]). The workshop introduced the participants to CT concepts and demonstrated how CT strategies of pattern recognition, generalization, problem decomposition and algorithmic thinking can be used to improve student learning of STEM concepts. The proposed special session will present sample CT modules developed for the ACT4STEM workshop in the form of a tutorial and projects and lesson plans designed by participants during the workshop. It will include interactive, hands-on activities and discussions in addition to results from the teachers' actual experiences on applying these lesson plans in their classes. This special session will benefit K12 teachers of STEM subjects interested in improving their students' comprehension of discipline related concepts and their application. Moreover, computer science faculty interested in helping K-12 teachers by organizing training sessions will gain valuable insights from the first-hand accounts of the presenters of their own experience with such an effort.	Training Teachers to Integrate Computational Thinking into K-12 Teaching	NA:NA:NA:NA	2016
Daniel D. Garcia:David Ginat	One man's "magic" is another man's engineering. -- Robert A. Heinlein Some beginning students have fuzzy mental models of how the computer works, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. This is a continuation of our standing-room only SIGCSE 2012 and SIGCSE 2013 special sessions. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that the audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of new magic tricks whose answer is grounded in computer science: modulo arithmetic, human-computer interfaces, algorithms, binary encoding, invariants, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	Demystifying Computing with Magic, part III	NA:NA	2016
Gregory Kulczycki:Murali Sitaraman:Nigamanth Sridhar:Bruce W. Weide	A central goal of computer science education is to teach students how to reason about the correctness of the code they write. Typically, students use a trial and error process and check that their logic "works" by running it on test inputs. Typically, instructors encour-age them towards logical reasoning through manual tracing of the code. Rarely reasoning tools are used in the process, at least partly because few instructors are familiar with them and fewer have the time to investigate and experiment. The purpose of this panel is to introduce the attendees to a variety of reasoning tools the presenters have used in their classrooms. In some cases, the tools have been used in only one or two classes of a course to illustrate specific points. In other cases, entire projects have been done using the tools. The courses range from the introductory sequence and dis-crete structures to software engineering and graduate-level courses. The tools are freely available on the web and attendees will be encouraged to experiment with the reasoning tools on their own laptops to solve simple reasoning problems.	Panel: Engage in Reasoning with Tools	NA:NA:NA:NA	2016
Martha Kosa	NA	Session details: Demonstration Session	NA	2016
Rebecca Bates:Euisung Kim	Speech recognition and natural language processing are interesting and relevant applications of many CS principles. Unfortunately, the barrier to entry for using existing tools is quite high, often requiring many hours installing, compiling, testing, and debugging tools before students can even begin exploring the technical concepts. The "Speech Recognition Virtual Kitchen" environment is an NSF-sponsored collaborative research infrastructure project that has the goals to promote community sharing of research techniques, foster innovative experimentation, and provide solid reference systems as a tool for education, research, and evaluation. The core of the research infrastructure is the use of virtual machines (VMs) that provide a consistent experimental environment. We liken the virtual machines to a "kitchen" because they provide the infrastructure into which one can install "appliances" (e.g., speech recognition tool-kits), "recipes" (scripts for creating state-of-the art systems), and "ingredients" (language data). A web-based community platform allows physically disconnected users to jointly explore VMs, learn from each other, and collaborate in research. This demo will provide an overview of available VMs, suggestions for use in undergraduate and graduate computer science courses and capstone projects, and a demonstration of our teaching VM, highlighting the ease of working with available tools. We invite participation in our community through downloading and uploading VMs, which can be an entry to open-source software development. More information can be found at speechkitchen.org.	The Speech Recognition Virtual Kitchen Toolkit	NA:NA	2016
Qusay H. Mahmoud:Dhimiter Qendri:Michael Lescisin	Sensorian is an add-on sensor shield that transforms the Raspberry Pi into an IoT platform. This academic project has been successfully funded through a Kickstarter campaign. The product has been developed and 400 boards have already been shipped. The objective of this demo is not to sell the shield at SIGCSE 2016, but rather to tell the story of the Sensorian shield and demo how students can build on this open source project and learn to tinker with software and hardware technologies. It can be used for a variety of courses, from introducing programming IoT applications in CS1 to Linux and embedded systems. More information about the Sensorian shield can be found at www.sensorian.io.	The Sensorian Shield: Transforming the Raspberry Pi into an IoT Platform	NA:NA:NA	2016
Deepak Kumar	NA	Session details: Paper Session: Big Data	NA	2016
Dugald Ralph Hutchings:Megan Squire	We present VisMap, a Web-based software tool that supports student exploration of possible data visualizations during a typical process of data science practice. Specifically, we detail visualization approaches within three major kinds of data analysis (part-to-whole and rank, correlation, and geospatial) and discuss how VisMap allows students to visually explore visualization options that correspond to the kind of analysis. The discussion is rooted in our experiences developing an introductory undergraduate course in data science and in our classroom observations of the limitations of existing software tools. These limitations include inefficiency of visualization comparison, difficulty in manipulating data to achieve visualization goals, and current challenges novices face when using professional tools simultaneous with learning about visualization. We finally offer a variety of future paths to further evaluate and refine VisMap.	VisMap: Exploratory Visualization Support for Introductory Data Science and Visualization	NA:NA	2016
Bina Ramamurthy	This paper details our experiences with design and implementation of data science curriculum at University at Buffalo (UB). We discuss (i) briefly the history of project, (ii) a certificate program that we created, (iii) a data-intensive computing course that forms the core of the curriculum and (iv) some of the challenges we faced and how we addressed them. Major goal of the project was to improve the preparedness of our workforce for the emerging data-intensive computing area. We measured this through assessment of student learning on various concepts and topics related to data-intensive computing. We also discuss the best practices in building a data science program. We highlight the importance of external funding support and multi-disciplinary collaborations in the success of the project. The pedagogical resources created for the project are freely available to help educators and other learners navigate the path to learning data science. We expect this paper about our experience will provide a road map for educators who desire to introduce data science in their curriculum.	A Practical and Sustainable Model for Learning and Teaching Data Science	NA	2016
Joshua Eckroth	Both industry and academia are confronting the challenge of big data, i.e., data processing that involves data so voluminous or arriving at such high velocity that no single commodity machine is capable of storing or processing them all. A common approach to handling big data is to divide and distribute the processing job to a cluster of machines. Ideally, a course that teaches students how to work with big data would provide students access to a cluster for hands-on practice. However, a cluster of physical, on-premise machines may be prohibitively expensive, particularly at smaller institutions with smaller budgets. In this report, we summarize our experiences developing and using a virtual cluster in a big data mining and analytics course at a small private liberal arts college. A single moderately-sized server hosts a cluster of virtual machines, which run the popular Apache Hadoop system. The virtual cluster gives students hands-on experience and costs less than an equal number of physical machines. It is also easily constructed and reconfigured. We describe our implementation, analyze its performance characteristics, and compare costs with physical clusters and the Amazon Elastic MapReduce cloud service. We summarize our use of the virtual cluster in the classroom and show student feedback.	Teaching Big Data with a Virtual Cluster	NA	2016
Leen-Kiat Soh	NA	Session details: Paper Session: Teaching with Teams	NA	2016
Yang Li:Stephan Krusche:Christian Lescher:Bernd Bruegge	Globalization has long since found its way into software engineering. Many companies transfer part of their development activities to distributed countries in order to ensure their global competitiveness, gain access to local markets and react to the prevailing lack of specialized workforce. The global distribution of project teams introduces new challenges: Geographic separation, different time zones, remote communications, and culture and language barriers make the collaboration between team members more difficult. Instructors in universities are faced with the problem of how to make students with little or no experience aware of the challenges of Global Software Engineering and equip them with skills to deal with them. International practical courses are effective but require high organizational effort. In this paper, we describe an exercise for teaching Global Software Engineering in a single classroom and report on our experiences. The exercise simulates a global software project within three sites. Through the exercise, students experienced some of the aforementioned challenges and tried to deal with them in a simulated environment.	Teaching Global Software Engineering by Simulating a Global Project in the Classroom	NA:NA:NA:NA	2016
Anya Tafliovich:Andrew Petersen:Jennifer Campbell	The subject of this work is evaluation methods of student software development team projects. Over a two year period in three courses, we study student preferences for team evaluation methods, the reasons behind their preferences, the changes in preference that occur within a single course and across courses, and misconceptions that educators hold about student preferences. Data was collected from peer evaluations and surveys. We find evidence that students' preferences for evaluation method are influenced by their year of study, familiarity with teammates, and overall happiness with the team experience. Other factors we explored, including gender and perceived ability, did not appear to influence evaluation preferences in our courses.	Evaluating Student Teams: Do Educators Know What Students Think?	NA:NA:NA	2016
Stephen MacNeil:Celine Latulipe:Bruce Long:Aman Yadav	In both flipped classroom settings and distance learning, educational content is typically delivered via video lectures that students watch alone. While flipped classrooms typically provide students with opportunities for social interaction that feature active learning, online learners are not typically afforded these opportunities. Cooperative learning techniques like Lightweight Teams provide social, collaborative learning opportunities to students in flipped classrooms but extending these techniques to distance learning settings is not straightforward. In this paper, we present our experiences with online, distributed Lightweight Teams. We present an in-the-wild study that compares learning outcomes and student preferences between co-located and distributed Lightweight Teams against the base case of individual learning. Our results show that while there are no significant learning differences between the two team conditions and the individual condition, students significantly prefer the team conditions.	Exploring Lightweight Teams in a Distributed Learning Environment	NA:NA:NA:NA	2016
Imad Rahal	NA	Session details: Paper Session: Program Design	NA	2016
Kathi Fisler:Shriram Krishnamurthi:Janet Siegmund	Plan composition is an important but under-studied topic in programming education. Most studies were done three decades ago, under assumptions that miss important issues that today's students must confront. This paper presents rationale and details for a modernized study of plan composition that accommodates a broader range of programming languages and problem features. Our study design has two novelties: the problems require students to deal with data-processing challenges (such as noisy data), and the questions ask students to not only produce but also evaluate programs. We present preliminary results from using our study in multiple courses from different linguistic paradigms. We discuss several future studies that are prompted by these results.	Modernizing Plan-Composition Studies	NA:NA:NA	2016
Francisco Enrique Vicente Castro:Kathi Fisler	When students are faced with a programming problem unlike any they have solved before, prior research suggests that they develop code backwards from essential computations in the problem. Some curricula, however, teach students to first write scaffolding code based on the type of the input data. How do these two approaches interact? We gave CS1 students who were taught to write scaffolding code a programming problem unlike any they had seen before. We found that while students put essential computations into the scaffolds, they often overuse affordances of the scaffolds in ways that lead to plan-composition errors. We propose that steering students away from on-the-fly decomposition while programming could help avoid some of these errors.	On the Interplay Between Bottom-Up and Datatype-Driven Program Design	NA:NA	2016
Chenglie Hu	In this paper, we first present an assessment on students' software design abilities based on qualitative data from a design class. We will then provide, using the assessment as a backdrop, a discussion on the nature of software design, the challenges of teaching design, and ways to improve design education.	Can Students Design Software?: The Answer Is More Complex Than You Think	NA	2016
Mark S. Hall	NA	Session details: Paper Session: Scratch	NA	2016
David E. Johnson	In this paper, we describe ITCH, an automatic testing system for projects in the Scratch programming language. While Scratch lacks traditional input/output mechanisms, ITCH overcomes this by exploiting the persistent saved project state to embed ITCH-specific lists that retain project output. In addition, the ITCH system replaces Scratch user input commands with automatically assigned test values. ITCH can gather variable state from running code, redirect output to a file, and capture drawings done by a Scratch project to save in a report format. The ITCH system has been successfully used in a large computer science explorations class where small practice code questions are assigned before extending work to larger, more creative projects without further burdening course graders. Examples of course projects and the ITCH-tested practice questions are given.	ITCH: Individual Testing of Computer Homework for Scratch Assignments	NA	2016
Jason Arnold:Heather Bort:Ryan Naugle:Casey O'Hare:Dennis Brylow	High school programming competitions often follow the traditional model of collegiate competitions, exemplified by the ACM International Collegiate Programming Contest (ICPC). This tradition has been reinforced by the nature of Advanced Placement Computer Science (AP CS A), for which ICPC-style problems are considered an excellent practice regimen. As more and more students in high school computer science courses approach the field from broader starting points, such as Exploring Computer Science (ECS), or the new AP CS Principles course, an analogous structure for high school outreach events becomes of greater importance. This paper describes our work on developing a Scratch-based alternative competition for high school students, that can be run in parallel with a traditional morning of ICPC-style problems.	Multi-Track Programming Competitions with Scratch	NA:NA:NA:NA:NA	2016
Diana Franklin:Charlotte Hill:Hilary A. Dwyer:Alexandria K. Hansen:Ashley Iveland:Danielle B. Harlow	With the growing movement to use visual block-based languages (VBBLs) in elementary and middle school classrooms, questions arise about the learning outcomes of such activities. While some schools are content to use VBBLs to spark interest and motivation for the future pursuit of computing, others are asking, "Does this early exposure produce knowledge that transfers to traditional text-based languages (TBLs)?" If transfer is a goal, then a corollary is, "How do we design the transition to maximize the transfer?" This paper focuses on initialization of state and variables, exploring the differences between Scratch and two TBLs: C and Java. Based on observations of 9-12 year old students in a VBBL curriculum, we identify four "pieces of knowledge" that are critical for C and Java but are not nearly as obvious in Scratch, including whether, when, and how to perform initialization. We conclude with suggestions for instruction and development environment that may improve transfer.	Initialization in Scratch: Seeking Knowledge Transfer	NA:NA:NA:NA:NA:NA	2016
Diana Burley:Matt Bishop:Elizabeth Hawthorne:Siddharth Kaza:Scott Buck:Lynn Futcher	In this special session, members of the ACM Joint Task Force on Cyber Education to Develop Undergraduate Curricular Guidance will provide an overview of the task force mission, objectives, and work plan. After the overview, task force members will engage session participants in the curricular development process.	Special Session: ACM Joint Task Force on Cyber Education	NA:NA:NA:NA:NA:NA	2016
Daniel D. Garcia:Leslie Aaronson:Shawn Kenner:Colleen Lewis:Susan Rodger	The pace of technology for use in computing education is staggering. In the last few years, the following technologies have completely transformed our teaching: Piazza, GradeScope, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the particular configuration options required to make their technology "sing". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any "gotchas" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite "can't live without" technologies as well.	Technology We Can't Live Without!, revisited	NA:NA:NA:NA:NA	2016
Erin Mindell Cannon:Priya Chawla:Katherine Lo:Haley Adams	NA	igniteCS: Addressing Undergraduate CS Retention	NA:NA:NA:NA	2016
Austin Cory Bart:Clifford A. Shaffer	This special session will explore practical results from the educational theory of Instructional Design (ID), with particular focus on the widespread similarities between a process for creating successful courses and a process for creating successful software. We present a small set of specific practices that should be easy for CS educators to adopt. In particular, the session will cover the popular Dick & Carey model, meant for beginners to ID. This model helps instructors rigorously define who they will teach to, what they will teach, how they will assess, and (only then) how they will teach. The approach is parallel to Software Engineering techniques such as Test-Driven Development, Requirements Engineering, and Iterative Development. The session will be a blend of presentation, participation, and assessment. Participants will work in small groups both to foster discussion and to provide learning support. The content of the presentation will particularly focus on how the model can be applied practically. It is our hope that attendees, whether new to teaching or experienced, will adopt or be influenced by the model in order to approach their courses with the same rigor they apply to software development.	Instructional Design is to Teaching as Software Engineering is to Programming	NA:NA	2016
Tiffany Barnes	NA	Session details: Demonstration Session	NA	2016
Jessica B. Hamrick	Many courses in scientific fields require students not just to write code, but to also visualize their data, work through a mathematical derivation, or write a paragraph interpreting their results. The Jupyter notebook (formerly known as the IPython notebook) is an ideal platform for creating assignments that include all of these question types, due to its interactive document format that weaves together code, prose, images, and math. Instructors can provide students with self-contained notebooks that include instructions, coding exercises, and written responses all in the same place. Students can write and execute code in these notebooks, and any text or images produced by the code are displayed immediately beneath the input that produced them. However, while having all exercises in the same place makes for better assignments, it also makes them difficult to grade. This demo presents nbgrader, an open-source tool developed by the Jupyter project that solves this problem by providing an interface that blends the autograding of notebook-based assignments with manual human grading. Additionally, nbgrader streamlines the process of assignment creation, distribution, collection, grading, and feedback-a process that is often logistically difficult for instructors. To give students access to the notebook, this demo illustrates how it can be deployed in the cloud, and how this complements the grading process. Information about the Jupyter notebook can be found at http://jupyter.org/, and a demo of the notebook at https://try.jupyter.org/. Information about nbgrader can be found at https://github.com/jupyter/nbgrader. A laptop is recommended for this demo. Handouts will be provided.	Creating and Grading IPython/Jupyter Notebook Assignments with NbGrader	NA	2016
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan	Robotics and block-based languages have been growing in popularity as a way to introduce computer science topics to young audiences. This approach focuses on capturing interests by reducing the complexity required to learn to program. Unfortunately, many K-12 classrooms do not have the budgets necessary to provide each student with the technologies required by these approaches. As a solution, we developed CodeSnaps, a tool that provides an engaging coding experience for an entire classroom with minimal technology requirements. CodeSnaps brings the interest and simplicity of block-based robotic programming to any student in a classroom with at least one iPad and one Sphero Robot (www.sphero.com). With CodeSnaps, students can program at their desks independently or in groups using printable paper coding blocks similar to Blockly (developers.google.com/blockly). When their program is ready, students can "snap" their code (i.e., take a picture) with the iPad. The CodeSnaps app then translates their work to a digital version that is finally executed by Sphero. The CodeSnaps environment will also be freely available with the goal of reaching as many budding computer scientists as possible.	CodeSnaps: Block-Based Robotic Programming for the Low-Budget Classroom	NA:NA:NA	2016
Kim Bruce	NA	Session details: Paper Session: Peer Techniques	NA	2016
Alessio Gaspar:Joni Torsella:Nora Honken:Sohum Sohoni:Colin Arnold	Peer learning principles have been successfully applied to novice programmers. Pedagogies such as Pair Programming, Peer Testing, Peer review of code or tests, or, more generally Peer Instruction, have repeatedly demonstrated their effectiveness in improving both individual performance and retention rates. This paper proposes to supplement the existing literature by investigating how students interact with one another during collaborative programming tasks. More specifically, we are interested in comparing the learning principles used during student-student interactions with those used during student-instructor or student-teaching assistant dialogs. Students in online and face to face courses, who worked collaboratively on programming assignments, were surveyed to gain an understanding of the frequency with which they engaged in specific activities. These that are representative of the learning principles that have been supported by research to promote learning. Results suggest that some learning principles, may be absent from student-student interactions. We discuss how the success of collaborative programming pedagogies put into question the role of these principles and whether they may contribute to further improve peer-based approaches.	Differences in the Learning Principles Dominating Student-Student vs. Student-Instructor Interactions while Working on Programming Tasks	NA:NA:NA:NA:NA	2016
Joonsuk Park:Kimberley Williams	Recently, there has been a growing interest in peer- and self-assessment (PSA) in the research community, especially with the development of massive open online courses (MOOCs). One prevalent theme in the literature is the consideration of PSA as a partial or full replacement for traditional assessments performed by the instructor. And since the traditional role of the students in assessment processes is the assessee, existing works on PSA typically focus on devising methods to make the grades more reliable and beneficial for the assessees. What has been missing in the picture is the assessor: How are those conducting peer- and self-assessment impacted by the process? This question has become relevant from educational perspective, because in PSA, the students take on the role of the assessor, as well. We present PSA as an active learning exercise for the assessors and examine its impact. For this, we incorporated PSA into a university-level Introduction to Natural Language Processing course consisting of more than 100 students and analyzed student surveys and exam results of peer-, self-, and no-assessment groups. The final exam performance suggests that PSA is helpful for learning, which is consistent with the student survey results. Also, students generally enjoyed conducting PSA.	The Effects of Peer- and Self-assessment on the Assessors	NA:NA	2016
Joe Gibbs Politz:Joseph M. Collard:Arjun Guha:Kathi Fisler:Shriram Krishnamurthi	In in-flow peer review, students provide feedback to one another on intermediate artifacts on their way to a final submission. Prior work has studied examples and tests as a potentially useful initial artifact for review. Unfortunately, large test suites are onerous to produce and especially to review. We instead propose the notion of a sweep, an artificially constrained set of tests that illustrates common and interesting behavior. We present experimental data across several courses that show that sweeps have reasonable quality, and are also a good target for peer review; for example, students usually (over half the time) suggest new tests to one another in a review.	The Sweep: Essential Examples for In-Flow Peer Review	NA:NA:NA:NA:NA	2016
Ravi Gandha	NA	Session details: Paper Session: Artistic Approaches	NA	2016
Kayla DesPortes:Monet Spells:Betsy DiSalvo	The MoveLab was an educational research intervention centering on a community of African American and Hispanic girls as they began to transform their self-concept in relation to computing and dance while creating technology enhanced dance performances. Students within underrepresented populations in computing often do not perceive the identity of a computer scientist as aligning with their interests or value system, leading to rejection of opportunities to participate within the discipline. To engage diverse populations in computing, we need to better understand how to support students in navigating conflicts between identities with computing and their personal interest and values. Using the construct of self-concept, we observed students in the workshop creating both congruence and dissension between their self-concept and computing. We found that creating multiple roles for participation, fostering a socially supportive community, and integrating student values within the curriculum led to students forming congruence between their self-concept and the disciplines of computing and dance.	The MoveLab: Developing Congruence Between Students' Self-Concepts and Computing	NA:NA:NA	2016
Dianna Xu:Aaron Cadle:Darby Thompson:Ursula Wolz:Ira Greenberg:Deepak Kumar	In this paper we describe the success of bringing Creative Computation via Processing into two very different high schools that span the range of possibilities of grades 9-12 in American education. Creative Computation is an emerging discipline that requires a thorough grounding in both media arts and computing. We report on how contextualized computing that supports integration of media arts, design, and computer science can successfully attract and motivate students to learn foundations of programming and come back for more. The work of two high school teachers with divergent pedagogical styles is presented. They successfully adapted a college-level Creative Computation curriculum to their individual school cultures providing a catalyst for significant increases in total enrollment as well as female participation in high school computer science.	Creative Computation in High School	NA:NA:NA:NA:NA:NA	2016
Zoe J. Wood:Paul Muhl:Katelyn Hicks	Introducing computer science to high school students in a creative context, and fitting such a course into an overly packed high school curriculum, is a challenge. This paper describes a fruitful collaboration to create and teach an alternative introductory computing curriculum for high school students targeted at introducing students to computing via an artistic context. This curriculum allows students to be introduced to computing in a highly interest based context, attracting diverse student body participation (25% female students in the first offering and 38% female students in the present 2015-16 offering). This curriculum also fulfills student's fine art course requirement making it more readily accessible to a wide audience to `try out' CS while making progress on their academic goals. This curriculum has been used as a successful introduction to computing at the Santa Barbara High School CS Academy in the 2014-2015 school year and is currently being offered again this year. In this paper, we present the curriculum and evaluation of this initial offering.	Computational Art: Introducing High School Students to Computing via Art	NA:NA:NA	2016
Don Blaheta	NA	Session details: Paper Session: Tests and Outcomes	NA	2016
Michelle Craig:Diane Horton:Daniel Zingaro:Danny Heap	In addition to their role as a summative measure, midterm tests can provide formative feedback that can be used by students to identify areas of weakness and adjust studying approaches. Unfortunately, low levels of test pickup often preclude this type of learning from tests. Even when students do collect their marked tests, it is unclear how much they reflect on or learn from the feedback. Exam wrappers have been designed and used in other sciences to promote reflection on tests and improve study practices. In this paper, we introduce exam wrappers into a CS course. We outline our adoption of exam wrappers, and illustrate how we as educators can learn from student responses on exam wrappers. We also describe an experiment comparing three styles of exam wrapper. Although it did not find significant differential impact on exam scores, we find, for all wrapper styles, improved test pickup rates and qualitative evidence that students successfully reflect on past behaviour and recognize improved study strategies.	Introducing and Evaluating Exam Wrappers in CS2	NA:NA:NA:NA	2016
Robert Deloatch:Brian P. Bailey:Alex Kirlik	The modality students use to complete programming-centric exams is shifting from paper to computer. We developed and distributed a survey to investigate how exam modality affects student perceptions of test anxiety and performance during programming-centric exams. We examine the distribution of modality preference among students and understand how students cope with test anxiety. We found a majority of students report at least moderate perceived anxiety (rating -- 4 on 7-pt scale) on paper- (69%) and computer-based (64%) exams. Though moderate anxiety was experienced by a majority of the students, we found 1 in 5 students had no strategy to cope with anxiety. Additionally, we examine how students perceived anxiety during testing affects their thought process and behavior. We found computer-based exams were perceived as more beneficial to the quality and speed of student's solutions and a majority of students preferred computer-based testing (67%). Lastly, we introduce possible technological solutions to benefit students experiencing test anxiety while not impeding less anxious students.	Measuring Effects of Modality on Perceived Test Anxiety for Computer Programming Exams	NA:NA:NA	2016
Daniel Zingaro:Leo Porter	Achievement goals are cognitively-represented end states that individuals strive to reach in competence situations. Well-studied by educational psychologists, achievement goals are robust predictors of grades, interest, and motivation of students. In this paper, we apply achievement goal theory to measure CS1 students' achievement goals and consequent interest in CS and final exam grade. We find that students aiming for topic mastery become interested in CS and, contrary to theoretical expectations, perform well on the exam. A more complex pattern of results surrounds students who orient toward competence demonstration or normative comparison, and the link between such performance goals and outcomes is less clear. We argue for the continued appropriation of educational theory to inform our studies of CS success.	Impact of Student Achievement Goals on CS1 Outcomes	NA:NA	2016
Howard Francis	NA	Session details: Paper Session: High School Diversity	NA	2016
Marie E. Vachovsky:Grace Wu:Sorathan Chaturapruek:Olga Russakovsky:Richard Sommer:Li Fei-Fei	The field of computer science suffers from a lack of diversity. The Stanford Artificial Intelligence Laboratory's Outreach Summer (SAILORS), a two-week non-residential free summer program, recruits high school girls to computer science, specifically to Artificial Intelligence (AI). The program was organized by graduate student and professor volunteers. The goals of the pilot program are to increase interest in AI, contextualize technically rigorous AI concepts through societal impact, and address barriers that could discourage 10th grade girls from pursuing computer science. In this paper we describe the curriculum designed to achieve these goals. Survey results show students had a statistically significant increase in technical knowledge, interest in pursuing careers in AI, and confidence in succeeding in AI and computer science. Additionally, survey results show that the majority of the students found new role models, faculty support, and a sense of community in AI and computer science.	Toward More Gender Diversity in CS through an Artificial Intelligence Summer Program for High School Girls	NA:NA:NA:NA:NA:NA	2016
Jody Clarke-Midura:Vicki Allan:Kevin Close	In order to affect career decisions, it is important to reach youth at early ages. While some have focused on using mentors in order to successfully teach mentees, few have focused on the benefits to the mentors themselves. To our knowledge, no other research has been conducted on the effect that serving as a near-peer mentor has on increasing the mentors' interest, self-efficacy, value-beliefs, and skills in computer science. Our paid mentorships provided youth two weeks of participation in computer science camps using App Inventor. The mentors in our pilot study increased self-efficacy and interest after the mentoring activity, on average. This all-female mentoring experience provided opportunities to transcend barriers such as negative stereotyping and lack of role models. We feel that being able to reach high school girls at a critical stage makes this pedagogical approach ideal. The positive results, even with the short duration of the intervention, are encouraging.	Investigating the Role of Being a Mentor as a Way of Increasing Interest in CS	NA:NA:NA	2016
Barbara J. Ericson:Miranda C. Parker:Shelly Engelman	Female students are underrepresented in computing careers and in computing majors at the college or university level. This underrepresentation starts in high school. Only 20% of Advanced Placement (AP) Computer Science (CS) A exam takers in 2014 nationally were female. In addition to being underrepresented, female students tend to have a lower pass rate on the exam than male students. Failing the exam could reduce interest in computing as a career. Sisters Rise Up 4 CS was created at the Georgia Institute of Technology (Georgia Tech) to help more female high school students pass the AP CS A exam. It offers help sessions, near-peer role models, exposure to a college campus, and a community of learners. Sisters Rise Up 4 CS is based on Project Rise Up 4 CS, which was also created at Georgia Tech to help increase the number of African-American students that pass the AP CS A exam. However, Sisters Rise Up 4 CS does not include the financial incentives offered by Project Rise Up 4 CS. Project Rise Up 4 CS has resulted in statistically significant positive changes in attitudes for participants and a large increase in the participants' perception of their ability to pass the exam. Even students who did not pass the exam have reported positive benefits from being in Project Rise Up 4 CS. This paper summarizes the findings from Project Rise Up 4 CS from 2013-2015 and presents the findings from the pilot of Sisters Rise Up 4 CS from 2014-2015. We used a mixed-methods approach to evaluate the project and to judge the effectiveness of the project elements.	Sisters Rise Up 4 CS: Helping Female Students Pass the Advanced Placement Computer Science A Exam	NA:NA:NA	2016
Neil C.C. Brown:Jens Mönig:Anthony Bau:David Weintrop	Blocks-based programming is becoming the way that learners are being introduced to programming and computer science. Led by the popularity of tools like Scratch, Alice, and Code.org's Hour of Code activities, many new programming environments and initiatives are employing the blocks-based modality. This trend can be seen in the growing number of classroom computer science curricula incorporating blocksbased environments into their materials. Despite this rise in use, many open questions remain surrounding blocks-based programming. In this panel, we discuss the current state of blocks-based programming environments, review what we know about learning with blocks-based tools, and look to the future, discussing what form next-generation blocks-based, or blocks-inspired, programming environments might take. Research looking at blocks-based programming is revealing that modality matters: that the representations used to present programming concepts affect learners' conceptual understanding [6], programming practices [3], and perceptions of programming and computer science [5]. This panel brings together leading designers and researchers looking to advance graphical, blocks-based programming through new, innovate designs. The panel will open with a review of current research literature on learning with blocks-based programming and then continue with presentations of three recently designed blocks-based programming environments (Greenfoot 3, GP, Pencil Code), each of which look to push the boundaries of the approach in diffierent directions. These short presentations will frame the discussion of pertinent questions facing designers and educators who use blocksbased programming environments.	Panel: Future Directions of Block-based Programming	NA:NA:NA:NA	2016
Daniel D. Garcia:Colleen Lewis:Stuart Reges:Nathan Ensmenger	There are always some students who succeed and some students who don't. Our four panelists are committed to the success of all students, but have different explanations for students' lack of success. This panel discussion will highlight both their shared beliefs and disagreements between veteran CS educators Stuart Reges and Dan Garcia, CS education researcher Colleen Lewis, and Professor of History and Philosophy of Science Nathan Ensmenger. We hope this lively discussion will bring together divergent and complementary positions and expertise, as well as invite significant audience participation.	Why Don't Some CS0 Students Succeed?: How Important Are Background, Experience, Culture, Aptitude, Habits and Attitude?	NA:NA:NA:NA	2016
Jennifer Campbell:Stan Kurkovsky:Chun Wai Liew:Anya Tafliovich	NA	Scrum and Agile Methods in Software Engineering Courses	NA:NA:NA:NA	2016
Judith Bishop:Carlos Jensen:Walt Scacchi:Arfon Smith	There are many papers about projects that release their software as open source. Our panel looks at why open source is a good idea for education, and how it can best be leveraged. The panel represents industry and academia and its members have years of experience in the field. Specific questions that panelists will address, in addition to their position statements, are: What makes open source particularly attractive for educators and students' What are barriers to use? What areas of computer science and what levels of study are most appropriate for introducing open source? Finally, this panel takes a step back and looks at the broad issues associated with using that software in education. We will mention the specific details of releasing, curating, licensing and using open source software. But most of all this panel wants to explore how, for educators, open source works. We believe it is because open source fosters an ecosystem of collaborators who can pool resources and expertise to build new collaborative ways of solving hard research projects. We look forward to the contributions from the audience and energetic debate.	How to Use Open Source Software in Education	NA:NA:NA:NA	2016
Ellen L. Walker	NA	Session details: Paper Session: Problem Solving	NA	2016
Diane Horton:Jennifer Campbell:Michelle Craig	When students can choose to take a course online or face-to-face, who chooses each format? Why do students select one format instead of the other? We compare an online section of CS1 to a concurrent face-to-face section and find that the populations in the two sections are very different. In particular, students in the online section have less prior programming experience and are less likely to intend to major in computer science. We also examine the reasons why students choose their section, many of which relate to convenience, desire for interaction with others, and degree of familiarity with the course material. Finally, we compare course outcomes for the two sections. We find significant differences in drop rates, but not in final exam scores. We investigate whether the differences we find can be explained by differences in the populations who choose to take the course online vs face-to-face.	Online CS1: Who Enrols, Why, and How Do They Do?	NA:NA:NA	2016
Alex Lishinski:Aman Yadav:Richard Enbody:Jon Good	Previous research has suggested that cognitive tests, including instruments seeking to measure problem solving, are significant predictors of students' programming performance. This paper seeks to expand upon this previous research by using a more theoretically grounded approach to measuring problem solving as a means of predicting performance in an introductory undergraduate programming course. Programming course performance has typically been measured by overall course grades; however, in this paper we used a more fine-grained approach to measuring student programming performance. Specifically, we utilized different types of course assignments (projects and tests) to measure programming outcomes. Results from this study indicate that problem solving ability significantly correlates with performance on programming assignments, but does not correlate with performance on multiple-choice exams.	The Influence of Problem Solving Abilities on Students' Performance on Different Assessment Tasks in CS1	NA:NA:NA:NA	2016
Swapneel Sheth:Christian Murphy:Kenneth A. Ross:Dennis Shasha	At its core, Computer Science is the study of algorithmic problem solving. Although it is necessary to teach programming, data structures, computer organization, etc., students should ultimately learn to use these things to solve problems, understand what is good and bad about their solutions, and share their solutions with others. This paper describes a course that focuses on the four steps of the problem solving process: algorithmic thinking, implementation, analysis, and communication. This course, based on Knuth's popular seminar at Stanford, has been extremely successful at the authors' three institutions. In addition to discussing the course's objectives and methodology, we present sample problems, summarize the outcomes and feedback from students, and give advice to other educators looking to create a similar course.	A Course on Programming and Problem Solving	NA:NA:NA:NA	2016
Ruth Anderson	NA	Session details: Paper Session: Novel Learning Approaches	NA	2016
Vikash Singh:Sarah Abdellahi:Mary Lou Maher:Celine Latulipe	Video usage in educational environments has increased significantly with the expansion of online learning opportunities. However, current video-based applications used for learning are designed for passive consumption of video content and do not support small-group collaboration. Specifically, they lack interaction affordances for active and collaborative learning through video materials. In this paper, we present the affordances and user experience of a web-based video application called Video Collaboratory that is designed with multiple affordances for group-based learning around video content. We surveyed students and analyzed the use of the Video Collaboratory in an HCI course. Students found the Video Collaboratory helpful because they could learn from their peers. Students also used the application beyond the activities required for credit.	The Video Collaboratory as a Learning Environment	NA:NA:NA:NA	2016
Elizabeth Boese	Computer Science education has to change - the students are demanding a new paradigm in this Just Google It era. This paper discusses what Just in Time Learning is, how it is more effective than the traditional educational process, and how to change education to embrace the Internet through incorporating the Just-In-Time Learning model. There are five parts to incorporating the Just-In-Time Learning model: one - recognizing that the textbook is dead, as students Just Google It, two - help students learn how to vet the information they find online, three - incorporate real-world problems and support creative student ideas, four - modify the classroom to include an active-learning environment to fully support Just-In-Time Learning, and five - the role of the teacher is now as a tutor, helping students learn and learn how to learn. By incorporating these five parts of the Just-In-Time Learning model, there is no longer the concept of cheating, and students are learning the core necessary skills: problem-solving, critical thinking, good decision making, self-learning, and effective communication.	Just-In-Time Learning for the Just Google It Era	NA	2016
Arnab Nandi:Meris Mandernach	Hackathons are fast-paced events where competitors work in teams to go from an idea to working software or hardware within a single day or a weekend and demonstrate their creation to a live audience of peers. Due to the "fun" and informal nature of such events, they make for excellent informal learning platforms that attract a diverse spectrum of students, especially those typically uninterested in traditional classroom settings. In this paper, we investigate the informal learning aspects of Ohio State's annual hackathon events over the past two years, with over 100 student participants in 2013 and over 200 student participants in 2014. Despite the competitive nature of such events, we observed a significant amount of peer-learning -- students teaching each other how to solve specific challenges and learn new skills. The events featured mentors from both the university and industry, who provided round-the-clock hands-on support, troubleshooting and advice. Due to the gamified format of the events, students were heavily motivated to learn new skills due to practical applicability and peer effects, rather than merely academic metrics. Some teams continued their hacks as long-term projects, while others formed new student groups to host lectures and practice building prototypes on a regular basis. Using a combined analysis of post-event surveys, student academic records and source-code commit log data from the event, we share insights, demographics, statistics and anecdotes from hosting these hackathons.	Hackathons as an Informal Learning Platform	NA:NA	2016
Kathi Fisler	NA	Session details: Paper Session: CS Ed Research 2	NA	2016
Leo Porter:Dennis Bouvier:Quintin Cutts:Scott Grissom:Cynthia Lee:Robert McCartney:Daniel Zingaro:Beth Simon	Peer Instruction (PI) is a student-centric pedagogy in which students move from the role of passive listeners to active participants in the classroom. Over the past five years, there have been a number of research articles regarding the value of PI in computer science. The present work adds to this body of knowledge by examining outcomes from seven introductory programming instructors: three novices to PI and four with a range of PI experience. Through common measurements of student perceptions, we provide evidence that introductory computing instructors can successfully implement PI in their classrooms. We find encouraging minimum (74%) and average (92%) levels of success as measured through student valuation of PI for their learning. This work also documents and hypothesizes reasons for comparatively poor survey results in one course, highlighting the importance of the choice of grading policy (participation vs. correctness) for new PI adopters.	A Multi-institutional Study of Peer Instruction in Introductory Computing	NA:NA:NA:NA:NA:NA:NA:NA	2016
Ricardo Caceffo:Steve Wolfman:Kellogg S. Booth:Rodolfo Azevedo	A Concept Inventory (CI) is a set of multiple choice questions used to reveal student's misconceptions related to some topic. Each available choice (besides the correct choice) is a distractor that is carefully developed to address a specific misunderstanding, a student wrong thought. In computer science introductory programming courses, the development of CIs is still beginning, with many topics requiring further study and analysis. We identify, through analysis of open-ended exams and instructor interviews, introductory programming course misconceptions related to function parameter use and scope, variables, recursion, iteration, structures, pointers and boolean expressions. We categorize these misconceptions and define high-quality distractors founded in words used by students in their responses to exam questions. We discuss the difficulty of assessing introductory programming misconceptions independent of the syntax of a language and we present a detailed discussion of two pilot CIs related to parameters: an open-ended question (to help identify new misunderstandings) and a multiple choice question with suggested distractors that we identified.	Developing a Computer Science Concept Inventory for Introductory Programming	NA:NA:NA:NA	2016
R. Paul Wiegand:Anthony Bucci:Amruth N. Kumar:Jennifer L. Albert:Alessio Gaspar	What are the concepts in introductory programming that are easy/hard for students? We propose to use Dimension Extraction algorithm (DECA) inspired by coevolution and co-optimization theory to answer this question. We propose and use the metrics of informatively easy/hard concepts to identify programming concepts that are solved correctly by the most "dominated student" versus solved incorrectly by the most "dominant student". As a proof of concept, we applied DECA to analyze the data collected by software tutors called problets used by introductory programming students in Spring 2014. We present the results, i.e., informatively easy/hard concepts on a dozen different topics covered in a typical introductory programming course. It is hoped that these results will inform programming instructors on the concepts they should (de)/emphasize in class. They will also contribute towards creating a concept inventory for introductory programming.	A Data-Driven Analysis of Informatively Hard Concepts in Introductory Programming	NA:NA:NA:NA:NA	2016
Brian Krupp	NA	Session details: Paper Session: K-8 Diversity	NA	2016
Jennifer Tsan:Kristy Elizabeth Boyer:Collin F. Lynch	Elementary computer science has gained increasing attention within the computer science education research community. We have only recently begun to explore the many unanswered questions about how young students learn computer science, how they interact with each other, and how their skill levels and backgrounds vary. One set of unanswered questions focuses on gender equality for young computer science learners. This paper examines how the gender composition of collaborative groups in elementary computer science relates to student achievement. We report on data collected from an in-school 5th grade computer science elective offered over four quarters in 2014-2015. We found a significant difference in the quality of artifacts produced by learner groups depending upon their gender composition, with groups of all female students performing significantly lower than other groups. Our analyses suggest important factors that are influential as these learners begin to solve computer science problems. This new evidence of gender disparities in computer science achievement as young as ten years of age highlights the importance of future study of these factors in order to provide effective, equitable computer science education to learners of all ages.	How Early Does the CS Gender Gap Emerge?: A Study of Collaborative Problem Solving in 5th Grade Computer Science	NA:NA:NA	2016
Alexandria K. Hansen:Eric R. Hansen:Hilary A. Dwyer:Danielle B. Harlow:Diana Franklin	As computer science moves from an outreach activity to a normal classroom activity in the multi-subject, mainstream elementary school classroom, curricula need to be examined to ensure they are meeting the needs of diverse students. In this paper, we present how Universal Design for Learning (UDL) was used to develop and refine a programming environment and curriculum for upper-elementary school classrooms (students aged 9-12). We then present our accommodations and modifications to emphasize the ways our development environment and/or curriculum enabled such uses. Ensuring introductory computer science experiences are equitable and accessible for a wide range of student learners may broaden the diversity of individuals who perceive themselves as capable of pursuing computer science in the future.	Differentiating for Diversity: Using Universal Design for Learning in Elementary Computer Science Education	NA:NA:NA:NA:NA	2016
Philip Sheridan Buffum:Megan Hardy Frankosky:Kristy Elizabeth Boyer:Eric N. Wiebe:Bradford W. Mott:James C. Lester	The important goal of broadening participation in computing has inspired many successful outreach initiatives. Yet many of these initiatives, such as out-of-school activities or innovative new computer science courses for secondary school students, may disproportionately attract students who already have prior interest and experience in computing. How, then, do we engage the silent majority of students who do not self-select computer science? This paper examines this question in the context of ENGAGE, an in-school outreach initiative for middle school students. ENGAGE's learning activities center on a game-based learning environment for computer science. Results reveal that the initiative improved the computer science attitudes of students who were not already predisposed to study computer science, in a way that a corresponding after-school program could not. The results illustrate how an in-school initiative can empower young students who might not otherwise consider studying computer science.	Empowering All Students: Closing the CS Confidence Gap with an In-School Initiative for Middle School Students	NA:NA:NA:NA:NA:NA	2016
Sandra Czajka:Lien Diaz:Crystal Furman	College Board is thrilled to announce the launch of a pilot program, Advanced Placement® (AP) with We.org Service, in a partnership with international charity and educational partner, Free the Children. AP Computer Science is among six AP courses that will participate in this pilot program. The College Board and Free The Children share a passion for enriching students' learning experiences and developing well-rounded citizens. The program combines the academic challenge and rigor of AP Computer Science with Free The Children's WE.org education and citizenship model. AP Computer Science with WE.org Service creates an opportunity for students to consider their classroom work and how it applies to the real world, while working closely with peers to address social issues.	AP Computer Science and Service Learning with We.org	NA:NA:NA	2016
Cara Tang:Cindy S. Tucker:Elizabeth K. Hawthorne	NA	Updating Curricular Guidelines for Associate-Degree Computer Science Programs	NA:NA:NA	2016
Daniel D. Garcia:Jennifer Campbell:John DeNero:Mary Lou Dorf:Stuart Reges	"Be careful what you wish for, you just might get it." - Proverb In 2005, computing education was experiencing a crisis. Enrollments had "fallen to such an extent that some academic computing programs were facing significant reductions in staffing levels or even elimination". The community responded, with panels to investigate and highlight ways to infuse "passion, beauty, joy and awe" into the introductory experiences, the CS10K project to bring computing to 10,000 teachers and 100,000 students, and better messaging of career opportunities, to name a few of the initiatives to bring students back into our seats. Well, by golly, it worked! It certainly didn't hurt our cause that Wall Street almost collapsed, young whiz kids were becoming TECH billionaires, an inspiring video and an interactive website led millions of people to code for an hour every December, or smart devices put computing into the hands of young people, and social media became the killer app. Whatever it was, CS became hot again. And we mean HOT. There are now several institutions around the world that have well over a thousand students taking CS1 in the Fall of 2015. There's just so much lemonade one can make before the seams start to burst, and the wheels come off the bus, as many shared at SIGCSE 2015 at the Birds of the Feather session. The goal of this panel is to bring together educators who were charged with delivering face-to-face CS1 on the grandest scale the field has ever seen. How did they cope? Does it become all people management with an army of Teaching Assistants? What were the differences and common themes in their survival plans? What is working? What mistakes were made? How are they supporting differential learning for the students who don't have the same experience as others? How is diversity being affected? Finally, what advice would they have for others interested in venturing into the tsunami, and broaden participation at a massive scale?	CS10K Teachers by 2017?: Try CS1K+ students NOW! Coping with the Largest CS1 Courses in History	NA:NA:NA:NA:NA	2016
Tracy Camp:Stuart Zweben:Duncan Buell:Jane Stout	The main goal of this panel is to share survey data being collected on booming enrollments in computer science. Survey data are being collected from two source types: institutions and students. The institution data are being collected through both the CRA Taulbee Survey, which represents computer science departments in North America with doctoral degrees, and the ACM NDC Survey, which represents computer science departments at U.S. 4-year and master's universities and colleges. The student data are being collected via the Data Buddies Project, run by the CRA's Center for Evaluating the Research Pipeline. The institution data will allow us to answer questions such as "what 'boom' are institutions seeing and how are different types of institutions responding to this boom?" The student data will allow us to answer questions such as "why are students suddenly eager for our classes?". The survey data will help us understand (1) the intensity of the "boom" at different types of institutions, (2) how institutions are responding to the increasing demand for computing education, and (3) whether the current enrollment "boom" represents the "third bubble" or whether it is here to stay. The data will also allow us to ask questions that attempt to understand the impact of the boom on underrepresented students. Data collection is ongoing; we will present results "hot off the presses".	Booming Enrollments: Survey Data	NA:NA:NA:NA	2016
Tiffany Barnes	NA	Session details: Demonstration Session	NA	2016
Samantha S. Foley:Joshua Hursey	The OnRamp project provides a web portal which coaches users, primarily computer science (CS) undergraduate students, through a collection of interactive curriculum modules teaching them about parallel computing and the software ecosystem while allowing them to launch parallel applications on parallel compute environments (PCEs) from day one. There are a number of hurdles for instructors to incorporating a parallel and distributed computing (PDC) curriculum module into an existing course -- from setting up the materials to preparing the students to work on a remote PCE. The OnRamp project removes these hurdles allowing instructors to easily connect to PCEs, deploy existing PDC curriculum modules, and setup user accounts for a course in just a few minutes. This demonstration of the OnRamp project will show the process an instructor will go through to set up a "workspace" for a class with a few PCEs and curriculum modules. Additionally, we will show how students will interact with this workspace to explore the curriculum module and launch parallel jobs on actual PCEs. We will have time for questions following the demonstration and provide materials for instructors to get started using OnRamp in their courses.	OnRamp to Parallel and Distributed Computing: Web-portal for Teaching Parallel and Distributed Computing	NA:NA	2016
Jay Aikat:Michael K. Reiter:Kevin Jeffay	We have developed education modules for topics in networking, security, and cloud computing. A networking instructor could use our modules to enhance the teaching of basic concepts by demonstrating these concepts with real experiments on GENI testbeds. Any systems instructor could use our security or cloud computing modules to begin teaching new topics, or enhance existing topics by adding hands-on experiments on GENI and CloudLab testbeds. Our NSF funded projects to develop these curricular modules have been successfully used by several instructors. Attendees at SIGCSE would comprise exactly the kind of audience, from varied institutions and dedicated to enhancing their curriculum, for whom we've built these modules. Our modules are freely available, and we are committed to helping instructors use our modules in their courses. The underlying testbeds, GENI and CloudLab, are also NSF-funded and thus freely available for instructors to use. Attendees will be provided a handout that contains relevant information, including contact for help, as they go back and begin using our education modules in their curriculum.	Education Modules for Networking, Cloud Computing, and Security in Systems Courses	NA:NA:NA	2016
Cliff Shaffer	NA	Session details: Paper Session: Databases	NA	2016
Alireza Ahadi:Vahid Behbood:Arto Vihavainen:Julia Prior:Raymond Lister	The computing education community has studied extensively the errors of novice programmers. In contrast, little attention has been given to student's mistake in writing SQL statements. This paper represents the first large scale quantitative analysis of the student's syntactic mistakes in writing different types of SQL queries. Over 160 thousand snapshots of SQL queries were collected from over 2000 students across eight years. We describe the most common types of syntactic errors that students make. We also describe our development of an automatic classifier with an overall accuracy of 0.78 for predicting student performance in writing SQL queries.	Students' Syntactic Mistakes in Writing Seven Different Types of SQL Queries and its Application to Predicting Students' Success	NA:NA:NA:NA:NA	2016
Borja Sotomayor:Adam Shaw	We present chidb, a medium to large-scale programming project where students implement the main components of a relational database management system, including B-tree data structures for tables and indexes, a database machine with registers and a selection of high-level and low-level instructions, and a SQL compiler targeting that machine. Moreover, chidb's SQL compiler's internal representation is a direct encoding of the relational algebra, whereby the theory that might otherwise be relegated to notes and blackboards is directly connected to practice and experience. The project uses the C programming language and is demonstrably suitable for use in advanced undergraduate courses; we have administered this project through five iterations of our databases course for advanced undergraduates. chidb is freely available online and customizable to suit the needs and tastes of any particular instructor.	chidb: Building a Simple Relational Database System from Scratch	NA:NA	2016
Yasin N. Silva:Isadora Almeida:Michell Queiroz	The Structured Query Language (SQL) is the main programing language designed to manage data stored in database systems. While SQL was initially used only with relational database management systems (RDBMS), its use has been significantly extended with the advent of new types of database systems. Specifically, SQL has been found to be a powerful query language in highly distributed and scalable systems that process Big Data, i.e., datasets with high volume, velocity and variety. While traditional relational databases represent now only a small fraction of the database systems landscape, most database courses that cover SQL consider only the use of SQL in the context of traditional relational systems. In this paper, we propose teaching SQL as a general language that can be used in a broad range of database systems from traditional RDBMSs to Big Data systems. This paper presents well-structured guidelines to introduce SQL in the context of new types of database systems including MapReduce, NoSQL and NewSQL. A key contribution of this paper is the description of an array of course resources, e.g., virtual machines, sample projects, and in-class exercises, to enable a hands-on experience with SQL across a broad set of modern database systems.	SQL: From Traditional Databases to Big Data	NA:NA:NA	2016
Dennis Bouvier	NA	Session details: Paper Session: International Perspectives	NA	2016
Daniel T. Fokum:Daniel N. Coore:Yewande E. Lewis-Fokum	We examine the gender balance of students in the Computer Science programme at a prominent Caribbean university---with campuses in Jamaica, Barbados, and Trinidad---from three perspectives: enrollment, retention and completion. In the US, in 2011, females accounted for approximately 17.7% of all graduands with a computing degree. These numbers are considered low, especially since when all subjects are taken into account, women account for more than 50% of American college graduates. On one campus of the Caribbean University, for the same year, the proportion of females graduating in Computer Science was 44.2%. These numbers are higher than the US national averages, even after normalizing them for the high female student population on the campus (approximately 70%). We introduce the notion of gender neutrality to represent these normalized ratios. Notably, we did not observe any statistically significant difference in the average performance of males and that of females, which is similar to the result found in the US. We discuss the methods that we used to make these comparisons.	The Performance of Female Computer Science Students across Three Caribbean Islands	NA:NA:NA	2016
Nora A. Escherle:Silvia I. Ramirez-Ramirez:Ashok R. Basawapatna:Dorit Assaf:Alexander Repenning:Carmine Maiello:Yasko Ch. Endo:Juan A. Nolazco-Flores	Computer Science Education Week activities, featuring online? programming tools embedded with tutorials, report large participation numbers. However, to truly broaden participation, activities need to be made accessible in international contexts. In 2014, Tecnológico de Monterrey and Instituto de Innovación y Transferencia de Tecnología de Nuevo León, modified the Scalable Game Design CS Ed Week activity to include a Mexican feasibility pilot study. The goal of the pilot was to broaden participation in Computer Science in Mexico by creating interest and demand in further activities, including launching of 2015 Mexico CS Ed Week. This paper reviews the initial results of this 2014 pilot, including the discussion of the unique challenges faced in this context, and examines efforts to make this activity more accessible and successful. In addition to pilot data highlighting future activity improvements, initial retention results show that despite challenges, Mexican students were able to effectively use the modified activity to create games on par with U.S. students.	Piloting Computer Science Education Week in Mexico	NA:NA:NA:NA:NA:NA:NA:NA	2016
Saquib Razak:Huda Gedawy:Wanda P. Dann:Donald J. Slater	In this paper, we describe the initial results of the formative phase of a project that crosses international borders. Alice in the Middle East (Alice ME) is a project designed to adapt the Alice software, develop new curricular materials, and provide professional development for teachers and students in the Middle East. For those who may be considering a collaborative project that would be conducted across international borders, we share lessons learned.	Alice in the Middle East: An Experience Report from the Formative Phase	NA:NA:NA:NA	2016
Ria Galanos	NA	Session details: Paper Session: Software Testing	NA	2016
Chris Wilcox	Enrollments in introductory computer science courses are growing rapidly, thereby taxing scarce teaching resources and motivating the increased use of automated tools for program grading. Such tools commonly rely on regression testing methods from industry. However, the goals of automated grading differ from those of testing for software production. In academia, a primary motivation for testing is to provide timely and accurate feedback to students so that they can understand and fix defects in their programs. Testing strategies for program grading are therefore distinct from those of traditional software testing. This paper enumerates and describes a number of testing strategies that improve the quality of feedback for different types of programming assignments.	Testing Strategies for the Automated Grading of Student Programs	NA	2016
Bruno Henrique Pachulski Camara:Marco Aurélio Graciotto Silva	Students usually have difficulties assimilating basic contents of introductory programming disciplines. Test-Driven Development (TDD) is an interesting approach to address this issue, but it does not focus on quality with respect to software testing. This study aims to verify the effectiveness of the use of software testing criteria for producing test cases with higher quality in the context of education with TDD. We used the test-driven development technique with a change in the refactoring step, adding an activity for creating test cases using software testing criteria. We performed two experimental studies to evaluate the effectiveness of the technique. Each study comprised two groups: one using traditional TDD and the other using TDD with test criteria, both having developed the same software. The results showed that groups applying the proposed intervention produced better test cases, with greater coverage, and not disrupting TDD. Moreover, we could observe that, in general, the test set for groups using TDD with criteria was more efficient, getting greater coverage with fewer test cases than groups using plain TDD.	A Strategy to Combine Test-Driven Development and Test Criteria to Improve Learning of Programming Skills	NA:NA	2016
Grant Braught:James Midkiff	This paper examines the effects of tool design on student testing behavior in an introductory course. Two tools are considered: BlueJ and WebCAT. A small modification was made to the BlueJ test recording interface to encourage students to engage more deeply in the testing process. A larger percentage of tests submitted by students using the modified BlueJ interface were correct. Further, the solutions they submitted contained fewer lines of code while being similarly complete and correct. Evidence is given that students using both BlueJ versions often rely on Web-CAT to validate their solution methods before testing the methods themselves. In response a new Web-CAT grading plug-in is proposed that we believe will better promote an incremental code-a-little test-a-little development style.	Tool Design and Student Testing Behavior in an Introductory Java Course	NA:NA	2016
Tiffany Barnes	NA	Session details: Paper Session: CS Principles	NA	2016
Jeff Gray:Jonathan Corley:Brian P. Eddy	CS Principles is a new AP course being developed by the College Board and introduced into high schools across the nation. To aid and encourage the adoption of the new CSP course, we have developed a Massively-Open Online Course (MOOC) over the past two years that serves as a professional development (PD) offering for CS Principles. Additionally, we have provided a parallel face-to-face workshop for a smaller group of MOOC participants. In this paper, we discuss our experiences conducting PD using a MOOC. We investigated the impact of the face-to-face event and online community on participants' completion and performance in the course. Our analysis suggests that participants who have even just a few days of face-to-face engagement tend to be more successful in completing a multi-week MOOC.	An Experience Report Assessing A Professional Development MOOC For CS Principles	NA:NA:NA	2016
Jean Griffin:Tammy Pirmann:Brent Gray	This paper reports on an investigative, qualitative case study of the teaching practices of two public high school Computer Science teachers as they teach courses that are fully or partially aligned with the CS Principles framework. One teaches at an urban, high minority STEM school, the other at a middle class suburban school. Ethnographic methods were used to collect data via classroom observations and teacher interviews. Within-case and across-case analyses are presented which characterize the teachers' practices regarding pedagogy, curricula, creative activities, problem-solving activities, and management of social interactions. The findings provide detailed insights regarding the challenges these teachers face and the strategies they use, which may be useful to teachers in a variety of settings at both the high school and college/university levels.	Two Teachers, Two Perspectives on CS Principles	NA:NA:NA	2016
Thomas W. Price:Veronica Cateté:Jennifer Albert:Tiffany Barnes:Daniel D. Garcia	Computer Science Principles (CSP) will become an Advanced Placement course during the 2016-17 school year, and there is an immediate need to train new teachers to be leaders in computing classrooms. From 2012-2015, the Beauty and Joy of Computing team offered professional development (PD) to 133 teachers, resulting in 89 BJC CSP courses taught in high schools. Our data show that the PD improved teachers' confidence in our four core content categories and met its primary goal of training teachers in equitable, inquiry-based instruction. In this paper, we present the evolution of the BJC PD, its challenges and lessons that we learned while continually adapting to teachers' needs and contexts.	Lessons Learned from "BJC" CS Principles Professional Development	NA:NA:NA:NA:NA	2016
Roy Pargas	NA	Session details: Paper Session: Beale St. Sampler	NA	2016
Benedict Chukuka:Michael Locasto	Existing ethical agreements, as applicable in the teaching of information security courses, typically spell out rules on what students should and should not do. The main problem is that the question of what students should or should not do is not a settled issue, because personal stances on questions of morality and ethics fundamentally influence the ethical recommendations that teachers present to their students. In light of the growing level of malice in the computing domain, experts have highlighted the importance of information security ethics by debating the need for a standard code of ethics for information security. Arguably, differences in ethical stance, with the effect of divergent ethical agreements, will not efficiently serve the purpose of effective universal application of ethics in the field of information security education. Examining current ethical policies in information security courses can provide insight about the prevailing ethics within the information security community. Moreover, understanding what the prevailing philosophies on ethics are within the community, in terms of how they actually diverge or converge, will present a good projection of how a standard policy on ethics may be feasibly applicable in a future regulatory environment. This way, we may be able to forecast the nature of ethical norms that future professionals will accept or allow to be imposed on them. Therefore, in our survey, we analyze ethical agreements on information security courses to identify the nature of existing agreements. We determine the commonalities of these agreements and derive an ethical policy prototype that includes the common elements of 329 ethical policies.	A Survey of Ethical Agreements in Information Security Courses	NA:NA	2016
James W. McGuffee:E. Kent Palmer:Indira R. Guzman	In December 2013, the ACM and IEEE-Computer Society sponsored joint Task Force on Computing Curricula released the comprehensive Computer Science Curricula 2013 (CS2013). At the same time, a geographically diverse group of volunteers, known as the CS2013 Assessment Council, met to begin the work of creating a valid three option multiple-choice exam to comprehensively assess the tier-1 core learning outcomes of CS2013. This project has been facilitated by the Institute for the Certification of Computing Professionals (ICCP). This paper describes the motivation and desire to create an assessment exam for the CS2013 tier-1 core learning outcomes, a brief review of the relevant research in psychometrics and educational assessment, the process used to create test items for this exam, the alpha testing and analysis of test questions, the beta testing and analysis of the complete exam, and the current state of the completed exam that is now available for use.	Assessing the Tier-1 Core Learning Outcomes of CS2013	NA:NA:NA	2016
Joel C. Adams:Patrick A. Crain:Christopher P. Dilley:Serita M. Nelesen:Javin B. Unger:Mark B. Vander Stel	Multicore processors are now the standard CPU architecture, and parallel and distributed computing (PDC) is in the CS2013 core curriculum [9]. It is now the task of CS educators to begin creating pedagogical materials that will help their students understand PDC concepts. In this paper, we present TSGL (the thread-safe graphics library), a C++11 library that safely supports multithreaded graphics. We also present several multithreaded visualizations that illustrate how TSGL can be used to visualize the Parallel Loop design pattern, and present evidence that TSGL can improve student mastery of this parallel abstraction.	Seeing Is Believing: Helping Students Visualize Multithreaded Behavior	NA:NA:NA:NA:NA:NA	2016
Mark C. Lewis:Douglas Blank:Kim Bruce:Peter-Michael Osera	NA	Uncommon Teaching Languages	NA:NA:NA:NA	2016
Martha Kosa	NA	Session details: Lightning Talk Session	NA	2016
Jennifer A. Rode:Andrea Marshall:Houda El Mimouni:Jennifer Booker	While unquestionably research on CSE education is centered in the SIGCSE conference, other venues such as the International Joint Conference on Pervasive and Ubiquitous Computing (Ubicomp), and the Conference on Tangible, Embedded and Embodied Interaction (TEI), and the Conference on Interaction Design and Children (ICD) explore CS education focusing on educational play and novel off the desktop techniques for CS education. Unfortunately, this literature remains isolated from the mainstream CSE literature, and this lightning talk attempts to help contribute to rectifying this by presenting a core recent educational theory "Computational Making" and discuss its contributions to CSE.	Computational Making (Abstract Only)	NA:NA:NA:NA	2016
Colleen M. Lewis	Let's talk about how we teach upper-division courses! CS pedagogical content knowledge - i.e., knowledge of how to teach computer science - is mostly undocumented. This is particularly true for upper-division courses and in some cases this upper-division content is much more difficult to teach than CS1 or CS2 content! CSTeachingTips.org is an NSF-sponsored project to help curate tips that allow teachers to anticipate students' difficulties and build upon students' strengths. The lightning talk will be a call to action: first to share tips on Twitter @CSTeachingTips and at our CSTeachingTips booth and second to create research directions that will help us develop pedagogical content knowledge that extends beyond CS1.	You Wouldn't Know It from SIGCSE Proceedings, but We Don't Only Teach CS1 (Abstract Only)	NA	2016
Mark McCartin-Lim	This lightning talk describes the development of Complexity Tutor, an interactive tutoring system to assist students in understanding theoretical models of computation and computational complexity. Many computer science students, especially ones lacking a strong background in mathematics, struggle to learn these subjects with the traditional regimen of lectures and written homework assignments. When they are in the process of developing proofs for these homework assignments, they receive no immediate feedback that would illuminate their errors. We intend to remedy this. The main components of our system will entail a novel framework for constructing proofs, as well as a framework for producing algorithmic reductions. The first framework provides continuous feedback to the student on their approach and progress toward the needed proof. The second framework involves analyzing code the student writes in a pseudocode-like language, such as Python. Currently, we have prototypes, which show how to use our frameworks to construct NP-completeness reduction proofs. We are planning to test the efficacy of this system in theoretical computer science courses at the University of Massachusetts Amherst.	Complexity Tutor: Developing an Interactive Tutoring System for Computational Complexity (Abstract Only)	NA	2016
Yousra Javed:Heather Richter Lipford	The importance of usability in security and privacy technologies is now widely accepted. A vibrant and growing research community in usable security and privacy has contributed a wide range of results in the past 15 years. Despite this, the vast majority of computing students are being exposed to very little of this discipline. In this presentation, we describe our ongoing efforts to enable broader education in this area. We are leading the construction of a body of knowledge for usable security and privacy education, to serve as an organizing framework for the discipline. We are also creating online learning modules for several key topics, as resources for faculty and students. We seek feedback on these resources as well as faculty participants who are interested in utilizing and evaluating the learning modules.	A Body of Knowledge for Usable Security and Privacy Education (Abstract Only)	NA:NA	2016
James C. Finocchiaro	This lightning talk describes the U.S. Army's Cyber Leader Development Program (CLDP) which is a recently implemented initiative designed to increase and improve undergraduate cyber education for United States Military Academy (USMA) and Reserve Officers' Training Corps (ROTC) cadets. The CLDP takes a holistic viewpoint towards cyber education. Its methodology provides a model for all educators on how to integrate out-of-class enrichment opportunities with an in-class curriculum. CLDP is a voluntary program that has about 800 hours of required out-of-class activities. These required activities include being assigned a formal mentor, participation in a security or hacking club, attending a security conference, participating in security training, and participating in an internship. This program is in its inaugural year with ROTC and in its second year at the United States Military Academy. The focus of this lightning talk will be to highlight the central aspects of the program and to describe how such programs would improve the holistic development of any students, security or otherwise. CLDP is not just a working military program -- it is an exportable concept that presents an applicable model for the development of cyber security students destined to support corporate America as well as government agencies at federal, state, and local levels.	U.S. Army's Cyber Leader Development Program (Abstract Only)	NA	2016
Michael A. Ball	This lightning talk describes the idea of "chat ops" applied to the classroom. Chat Ops is a (growing) industry practice which uses instant messaging (such as IRC, or Slack) to automate common development or monitoring tasks, such as maintaining and deploying a website. Instead of deploying a site, we use the process of ChatOps to help run large classes, and even individual class sections by automating tasks that are tedious or error prone. We've extended a bot framework, Hubot, with the tools that we need. We can automate releasing student scores, updating student's access to assignments, or handling in-class check offs with just a line of plain text. Chat messages also have the benefit that they are loggable and show everyone on the staff what's going on and why. We'd like to show why augmenting traditional email systems with chat messages can help improve communication and save time, but can also be an enjoyable way to build a community.	Using Instant Chat for Fun and for Profit to Run a Large Class (Abstract Only)	NA	2016
Adam S. Carter:Christopher D. Hundhausen	With the widespread availability of massive amounts of student programming data, we are witnessing a digital gold rush as researchers attempt to make sense of students' programming behaviors. In prior research, we incorporated programming data into a statistical model that accounted for a significant amount of a student's course performance. In a separate line of research, we explored how online social networking tools might be leveraged for pedagogical purposes. Rather than treating our explorations of students' programming and social behaviors as separate research spaces, we are next considering the interplay between social behavior, programming behavior, and course performance. As a first step, we incorporated online social participation into our statistical model of programming behaviors. The outcome was quite promising: we witnessed a 30% increase in our model's effect size. This result would seem to indicate that neither programming behavior nor social behavior alone can fully account for student performance. Encouraged by this result, we are now considering how social interaction influences programming decisions and vice versa. In particular: After receiving help on a social network, what changes are made to code? Are these changes more or less likely to move the student closer to a correct solution? How do students address coding problems when their questions are left unanswered? At what points in the programming process are students more likely to pose questions? Similarly, when are students more willing to offer help? How can we use this knowledge to better identify students who are struggling?	Crossing the Streams: Exploring the Interplay between Students' Online Social Activity and Programming Behavior (Abstract Only)	NA:NA	2016
Bonnie K. MacKellar	Many university software engineering/capstone courses attempt to teach students the importance of communication by having them work collaboratively on a large scale project. This can be a sink-or-swim approach. There is a real risk of complete project failure, and while students may learn that coordination is important, it isn't clear they learn how to do it effectively. The CoordinationTracker project uses social network analysis both to study coordination in student project teams, and to develop an automated tool to support students learning this skill. In this talk, I will briefly present some results using social network analysis and socio-technical congruence measures to study communication in a software engineering course, and then will describe the design of the proposed CoordinationTracker tool, which will use socio-technical congruence measures to give feedback to students. For example, as a student works on a file, an automated reminder capability will suggest who the student should be communicating with in order to prevent unwanted effects on components dependent on the file. The system also will have a reporting component which will allow each student, as well as the instructor, to view his or her coordination performance via graphs. Once CoordinationTracker has been implemented, it will be tested on several iterations of the software engineering course in order to determine whether students improve their coordination while using the tool. I am interested in audience feedback on the design of this tool as well as possible involvment with the project.	Social Network Analysis as a Tool for Understanding Student Interaction in Project-based Courses (Abstract Only)	NA	2016
Anurag Nagar	This lightning talk will focus on our experience of teaching a graduate level Big Data course. Traditionally, such courses have relied on "WordCount" style problems, which involve computing the simple count of words in a corpus of documents using the distributed MapReduce framework. While this is certainly a good way of introducing the students to the BigData framework, more real world examples are needed to motivate students. Further, since a majority of courses require students to work on a large project as part of this course, it is essential that they have access to a diverse and interesting set of data. In our course, we experimented with various data sources, such as text from real-time, streaming news articles, twitter feeds, and property price data from various zip codes in a county. The students were involved in gathering the data, designing and implementing MapReduce style algorithms for distributed processing, and presenting their findings. The feedback was extremely positive and we would like to develop this approach further. In this talk, we will present some ideas on how to collect and analyze real world datasets that are suitable for Big Data analysis. We would also encourage further inputs from the audience about this topic.	Enhancing Teaching of Big Data by Using Real World Datasets	NA	2016
Jane Stout:Burçin Tamer	Cultural stereotypes about women's "fit" and ability in technical fields, like computing, are alive and well. These cultural beliefs can make their way into women's personal belief system. When this happens, women's self-conceptions in computing suffer, namely, self-efficacy, sense of belonging, and identification with computing. The current research examines whether collaborative learning methods (pair programing; supplemental instruction) can erase the negative relationship between women's endorsement of negative gender stereotypes and their computing self-concept. Longitudinal survey data from 48 women computing majors indicated that participation in collaborative learning activities nullified the negative impact of gender stereotype endorsement on women's self-efficacy, sense of belonging, and identification with computing. These findings showcase the benefits of existing pedagogical strategies in computing on increasing the likelihood that women will persist in a computing career path.	Collaborative Learning Eliminates the Negative Impact of Gender Stereotypes on Women's Self-Concept (Abstract Only)	NA:NA	2016
Natalie Linnell:Nicholas Tran	We have transformed our first programming course from an introduction to programming, to an introduction to Computer Science. We have done this in part by broadening the topics discussed. We now incorporate discussion of social topics like privacy and humanitarian technology, and "big ideas in CS" like how the Internet and databases work. We have also embedding many of our programming examples in applications from fields like biology and psychology. The other major feature of this course is that we have separated teaching problem-solving from teaching a programming language. In lecture, we discuss problem-solving with high-level programming constructs like conditionals and loops, using only pseudocode. In our new lab section, students are taught how to translate those ideas into C++ code. This allows us to free the initial learning of problem-solving from the complications of a language like C++. A unique feature of these changes is that it is possible to offer multiple different labs, in different languages, in conjunction with the same lecture section. It is our intention to start offering labs in different languages starting in Fall 2016. Our primary goal in making these changes was to improve recruitment and retention, especially among women. We also hoped to improve the course's utility as an elective for non-majors. Our evaluation of a pilot offering suggests that the re-designed course is likely to improve retention, without negatively impacting programming knowledge. We have now completely adopted the re-designed course, and are continuing to gather data to evaluate the new design.	A "Grand Tour" of Computer Science: Re-Designing CS1 for Breadth and Retention (Abstract Only)	NA:NA	2016
Amber Wagner:Jeff Gray:Daniela Marghitu:Andreas Stefik	Block languages (e.g., Scratch, Snap!, Alice, App Inventor, Blockly) offer a gentle introduction to programming and have been adopted widely in both K-12 and CS0 courses. However, block languages often are dependent on the mouse/keyboard for input and typically are visual in their output and representation. Because of these dependencies, students with a disability (e.g., mobility limitations or vision impairment) generally are unable to use block languages, thereby reducing the opportunities for broader participation in computational learning activities. Given the increasing need to broaden the participation of computing to those with diverse skills and backgrounds, it is important that the tools used to initiate the earliest entre into computing do not erect immediate roadblocks that impede initial interest and opportunity. There are many variations of user interfaces and assistive technologies that benefit those who may have difficulties utilizing traditional Graphical User Interfaces (GUIs), but these tools often cannot be used universally across block languages. As more block languages are being developed and integrated into K12 and University curriculum, it is imperative that accessible solutions are discussed and implemented. These discussions require participation from the block language developer community, accessible computing community, and those educators who encounter accessibility needs among the students in their classrooms. The goal of this lightning talk is to call attention to the need for more accessible block-based programming environments and to spark conversation surrounding possible standard accessibility APIs that could possibly be supported by block language environment tool developers.	Raising the Awareness of Accessibility Needs in Block Languages (Abstract Only)	NA:NA:NA:NA	2016
Helen Hu	NA	Session details: Paper Session: Computer Engineering	NA	2016
Meriel Huggard:Ciarán Mc Goldrick	Unmanned aerial vehicles, also known as drones, are often characterized as representing the next big disruptive change in our everyday interaction with technology. Indeed some commentators have suggested that their impact will be as significant as that of the Internet. It is thus incumbent upon modern, foresightful educators to integrate these platforms into the curriculum in order to more fully equip the next generation of professional engineers and computer scientists with the skillsets and competences needed to realize the full potential of these devices. In this paper we reflect on the challenges encountered when integrating drone technology into an existing project-based freshman design module. The objective was to introduce the drone as a relatively seamless extension of an existing problem set for a design project involving an autonomous vehicle. In doing so, critical factors such as engineering ethics, health and safety, and regulatory constraints; in addition to implementation challenges; are directly addressed and quantified. Lessons learned and reflections on best practice for the use of drone technology in the laboratory are adduced and articulated.	Droning On: Reflections on Integrating UAV Technology into a Computer Engineering Design Laboratory	NA:NA	2016
Jalal Kawash:Andrew Kuipers:Leonard Manzara:Robert Collier	It is widely recognized that motivating students in an undergraduate assembly language course is a tremendous challenge, principally because of the perception that the subject matter is both difficult and tedious. The Raspberry Pi is a small and inexpensive single-board computer that was created for educational purposes, and in this paper we describe how we successfully incorporated this device into the curriculum of an undergraduate assembly language course. We describe, in detail, the objectives for this course and the dedicated lab that uses the Raspberry Pi as an embedded device, and then evaluate the effectiveness of our approach. Our findings (obtained by exploring changes in student performance and examining the results of an engagement/enjoyment survey) strongly indicate that the introduction of the Raspberry Pi was well received by the students and contributed positively to their learning outcomes.	Undergraduate Assembly Language Instruction Sweetened with the Raspberry Pi	NA:NA:NA:NA	2016
Viggo Kann:Anna-Karin Högfeldt	Study programs are a central component of the higher education system, in particular for professional education. However, for many education programs, especially in engineering, a large part of the beginner students fail to reach graduation. A reason for this could be lack of program coherence. In order to strengthen the program coherence of the computer science and engineering program at KTH, a program integrating course was introduced in 2010. The course runs at low speed through the first three years of the program. It consists of reflection seminars in small cross-grade groups of students, led by a professor as a mentor. In the seminars the students exercise self-regulated learning abilities, such as metacognitive skills, when reflecting, discussing and acting upon different topics, such as study techniques, procrastination, studying abroad, plagiarism and responsibility, and the professional life after the studies. We have studied and found both perceived and measurable positive effects of the program integrating course. In this paper we describe effects on the students' study skills, their ability to reflect and interest in exchange studies.	Effects of a Program Integrating Course for Students of Computer Science and Engineering	NA:NA	2016
David J. Stucki	NA	Session details: Paper Session: Out-of-school Activities	NA	2016
Matthew Forshaw:Ellis Solaiman:Oonagh McGee:Hugo Firth:Paul Robinson:Ryan Emerson	This paper describes the development and delivery of a course, in close collaboration with industry, over a ten-year period. We describe the details of this collaboration, which aims to equip students with collaborative software development experience, incorporating open source, Enterprise Middleware technologies and industry best practices. In presenting our case study we share valuable insights, into the challenges and opportunities, for all parties involved. We present the reflections of all stakeholders, including; the course leader, the industrial partner, lab demonstrators, and students. We also present the results of our investigations to track the employment of our graduates over the last five years, identifying that all students who responded are employed within relevant positions or undertaking further study. Based on our successful delivery of the course, in this paper we make all tools and teaching materials available to the open source community, for delivery at other institutions. We emphasise the importance of the continued involvement of industry partners to inform pedagogical practices within Computer Science.	Meeting Graduate Employability Needs through Open-source Collaboration with Industry	NA:NA:NA:NA:NA:NA	2016
Graham Farr:Barbara Ainsworth:Chris Avram:Judy Sheard	Computer history tours are a new way to educate people about our discipline and its history. We describe the introduction of such tours and their use in curriculum enrichment, outreach, and academic community-building. These tours give historical and social context to the development of topics in the curriculum, and demonstrate to students the universality of some of the principles they learn. The city of Melbourne, Australia, serves as an illustration, but computer history tours can be run in many cities of various sizes, and we give advice on how to do this.	Computer History on the Move	NA:NA:NA:NA	2016
Maureen Doyle:Candace Gibson:Michelle Melish:Rees Storm	We describe and report on a study away course held in the spring of 2015 that brought computer science students from a Midwestern university to visit companies in the Bay Area in California as part of their study of agile software development. While it may be a sufficient goal to offer study away as an encouragement for future participation in study abroad programs, study away has benefits in and of itself. In actuality, study away can build students' self-confidence, aid them in being accepting of different ideas, and help them to understand a different area of the world. The class was offered as a 1-credit computer science course and students met weekly leading up to the trip, then once again after. The class included a one-week visit to the San Francisco area, with visits to two universities and five high-tech companies. Eight undergraduates and one post-baccalaureate participated at a cost of $1700 each. Students were required to submit a five-page paper and were separated into two teams to develop and present posters at the university's student research symposium. The course was a success due to the investment of the Chief Information Officer of the university, the Office of Education Abroad, the department of Computer Science, and academic advising. Students reported upon immediate return-then once again three months later-that their interest in computer science had increased, that they had gained an understanding of a different region of the United States and that they were more accepting of different ideas.	Agile Software Development Study Away	NA:NA:NA:NA	2016
Sue Fitzgerald	NA	Session details: Paper Session: Classroom Techniques	NA	2016
Roya Hosseini:Teemu Sirkiä:Julio Guerra:Peter Brusilovsky:Lauri Malmi	Code examples are commonly used learning resources that help students grasp various programming structures and concepts. However, example code usually requires explanations about what each line or part of the code does. Otherwise, students may find it difficult to follow an example. In this paper, we compare two types of code examples that use different techniques to describe important concepts in the code: annotated and animated examples. The former displays an explanation for a subset of lines in plain text, whereas the latter visualizes code execution. We studied the use and impact of these enhanced examples, provided as non-mandatory practice content, in three introductory Java courses. Our results suggest that animated examples are more engaging and have a positive impact on students' learning. As compared to annotated examples, students spent more time with animated examples and more likely completed them. Also, a positive relationship was found between the number of explored animated examples and the overall course grade.	Animated Examples as Practice Content in a Java Programming Course	NA:NA:NA:NA:NA	2016
Amanda M. Holland-Minkley:Thomas Lombardi	This paper describes the introduction of a feedback-revision-resubmission cycle for homework assignments in two introductory courses. The goal was to increase student engagement with homework assignments as an important tool for concept practice and mastery. A review of the effects in both an object-oriented programming course and a relational databases course shows positive outcomes as reflected in both course evaluations and a decision tree analysis of student performance on assignments.	Improving Engagement in Introductory Courses with Homework Resubmission	NA:NA	2016
Toby Dragon:Paul E. Dickson	Hand-drawn memory diagrams are frequently used in computer science to demonstrate new programming concepts and support students' understanding of program functionality. These diagrams often vary among courses, instructors, and languages, which confuse students moving through the curriculum. Consistent memory diagrams throughout a curriculum not only alleviate confusion but offer a scaffold for students to transfer their understanding between courses taught at different levels of complexity and in different languages. We describe our standardized system for memory diagrams as it is used in our curriculum to demonstrate this scaffolding process through multiple concepts and programming languages.	Memory Diagrams: A Consistant Approach Across Concepts and Languages	NA:NA	2016
Robert McCartney	NA	Session details: Paper Session: Computing in Middle School	NA	2016
Brenda Castro:Terrence Diaz:Marissa Gee:Rebekah Justice:David Kwan:Preethi Seshadri:Zachary Dodds	This paper shares the five-year development and deployment of MyCS, a CS curriculum for "middle-years students," roughly in US grades 4-10. Consistent with many middle-years curricula, MyCS promotes positive individual identification with its field, CS, especially as it intersects with other facets of students' maturing identities. A detailed assessment of students' MyCS experiences reveal significant positive outcomes relative to a control group, as well as many neutral (no-distinction) results relative to the control. Feedback from teacher and administrators have refined MyCS and, perhaps more importantly, built curricular bridges to both elementary- and high-school CS. By tracing MyCS's assessment and evolution, this work highlights how two districts used a middle-years CS foothold from which to establish deeper, district-wide changes in identity.	MyCS at 5: Assessing a Middle-years CS Curriculum	NA:NA:NA:NA:NA:NA:NA	2016
Shuchi Grover:Roy Pea:Stephen Cooper	In this paper, we describe research conducted around a 7-week curriculum designed to introduce middle school students to computer science with a focus on algorithmic thinking and programming. The pedagogical ideas employed in this curriculum were drawn from past research. Empirical investigations over two studies in a public middle school in the US examined changes in students' understanding of algorithmic constructs and the factors affecting that learning. Multi-level analyses revealed that students in both studies (1) achieved substantial learning gains in algorithmic thinking skills and significant growth towards a more mature understanding of computing as a discipline, and (2) found certain CT ideas and constructs more difficult than others. Prior computing experiences and math and English ability were found to be predictors of learning outcomes. Extracurricular experiences with technology also appeared to impact outcomes.	Factors Influencing Computer Science Learning in Middle School	NA:NA:NA	2016
Shuchi Grover:Daisy Rutstein:Eric Snow	Nationwide, efforts are focusing on taking computer science (CS) to scale in high school classrooms through the Exploring Computer Science (ECS) and AP CS Principles (CSP) courses. Recent inroads are also being made to take structured introductory curricula to middle school classrooms. Often, a starting point for teaching CS in middle and high school is a discussion around the seemingly simple question "What is a computer?" The question is aimed to help learners understand through debate and discussion what makes a computer a computer. This paper reports our analysis of (a) middle school students' discussions around this question, and (b) high school students' responses to an assessment question measuring this understanding. Our analyses of students' comments and responses reveal that a discussion around "what is a computer?" may be problematic for students, as it tends to focus on the tool, the "computer." We suggest that the discussion needs re-framing to focus instead on computing and computation.	"What Is A Computer": What do Secondary School Students Think?	NA:NA:NA	2016
Joe Hummel	NA	Session details: Paper Session: Games	NA	2016
Chang Yun:Hesam Panahi:Zhigang Deng	In this paper, we introduce a multidisciplinary and multifaceted pedagogical approach to enhance game design education in computer science curriculum and assess its effectiveness using outcomes from Microsoft US and World Imagine Cup competitions in the game design category. We offer team project-based courses that cover multiple disciplines such as computer science, art and animation, game design, production, and business and entrepreneurship. Our students gain fundamental knowledge and skills from the multidisciplinary approach and utilize them to undergo a systematic game development process over two semesters. We also implement a unique grading system that includes ranking duels to promote the competitiveness among students which ultimately improves the quality of every game designed in our courses. We successfully demonstrate the effectiveness of our approach with results from the Microsoft Imagine Cup competitions - dozens of our student teams have been nationally and internationally recognized in the past eight consecutive years.	A Multidisciplinary, Multifaceted Approach to Improve the Computer Science based Game Design Education: Methodology and Assessment	NA:NA:NA	2016
Britton Horn:Christopher Clark:Oskar Strom:Hilery Chao:Amy J. Stahl:Casper Harteveld:Gillian Smith	Computer Science (CS) education at the middle school level using educational games has seen recent growth and shown promising results. Typically these games teach the craft of programming and not the perspectives required for computational thinking, such as abstraction and algorithm design, characteristic of a CS curriculum. This research presents a game designed to teach computational thinking via the problem of minimum spanning trees to middle school students, a set of evaluation instruments, and the results of an experimental pilot study. Results show a moderate increase in minimum spanning tree performance; however, differences between gender, collaboration method, and game genre preference are apparent. Based on these results, we discuss design considerations for future CS educational games focused on computational thinking.	Design Insights into the Creation and Evaluation of a Computer Science Educational Game	NA:NA:NA:NA:NA:NA:NA	2016
Stephan Krusche:Barbara Reichart:Paul Tolstoi:Bernd Bruegge	Games development brings fun into the software engineering curriculum, but it is a practical activity that educators cannot teach in traditional lecture-based environments. Including pedagogical aspects of problem-based, cooperative, blended and experiential learning is necessary to achieve a high learning experience. In this paper we describe and evaluate a block course in which we ask students with almost no mobile application development experience to create games in just two weeks. We offer the course in two different modes, for beginners who learn games development, and for tutors who help us in the organization of the course and in the teaching activities. Apart from games development and game design, students learn modeling, design patterns and software configuration management. They practice soft skills in team work, present their games to their classmates using Pecha Kucha and publish their games into the App Store. Our evaluations show that students appreciate the great learning experience.	Experiences from an Experiential Learning Course on Games Development	NA:NA:NA:NA	2016
Nick Parlante:Julie Zelenski:Baker Franke:Arvind Bhusnurmath:Karen Her:Kristen Gee:Eric Manley:Timothy Urness:Marvin Zhang:Brian Hou:John DeNero:Josh Hug:Kevin Wayne	I suspect that students learn more from our programming assignments than from our much sweated-over lectures, with their slide transitions, clip art, and joke attempts. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials -- handouts, data files, starter code -- that make each assignment ready to adopt. The Nifty Assignments home page, http://nifty.stanford.edu, gathers all the assignments and makes them and their support materials freely available. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments. See the nifty.stanford.edu home page for more information.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2016
Martha Kosa	NA	Session details: Demonstration Session	NA	2016
Kalpathi Subramanian:Jamie Payton:David Burlinson:Mihai Mehedint	This demo introduces participants to the concepts and application of BRIDGES, a software infrastructure designed to facilitate hands-on experience for solving traditional problems in introductory computer science courses using data from real-world systems that are of interest to students, such as Facebook, Twitter, and Google Maps. BRIDGES provides access to real-world data sets for use in traditional data structures programming assignments, without requiring students to work with complex and varied APIs to acquire such data. BRIDGES also helps the students to explore and understand the use of data structures by providing each student with a visualization of operations performed on the student's own implementation of a data structure. BRIDGES visualizations can be easily shared (via a weblink) with peers, friends, and family. Demo attendees will see (and possibly engage in) hands-on experience with BRIDGES and will have the opportunity to discuss how BRIDGES can be used to support various introductory computer science courses. Additionally, the demo will complement our oral presentation of our work at SIGCSE, by providing hands-on demonstrations of BRIDGES.	Bringing Real-World Data And Visualizations Into Data Structures Courses Using BRIDGES	NA:NA:NA:NA	2016
Amey Karkare:Nimisha Agrawal	Compiler design is an important subject in the computer science curriculum for undergraduates. In a typical Compiler's course, about 15%-22% of the total time is spent on syntax analysis phase (also called parsing techniques). A number of concepts are introduced to explain the internals of parsers, for example first set, follow set, item set, goto and closure set, parse tables and the parsing algorithms, making the understanding difficult. While parser generators (YACC and its variants) allow the students to experiment with grammars, the working of the parser generated by the tools is still opaque. We present ParseIT, a web based tool to help students understand the concept of parsing in an undergraduate Compiler Design course. Given a grammar, the tool generates multiple choice questions for concepts related to parsing. The tool evaluates students' attempts and provide hints for incorrect attempts. The hints are also generated in the form of specific questions about any correct choice that is missed or any incorrect choice that is selected. For grammars that can be parsed through the textbook LL or LR algorithms, an interesting form of hint generated is an input string that helps student identify incorrectly filled cells of a parsing table. The tool enables interactive and active learning of parsing concepts, resulting in a better understanding.	ParseIT: A Tool for Teaching Parsing Techniques	NA:NA	2016
Judy Sheard	NA	Session details: Paper Session: Security	NA	2016
Nathan Backman	Attack/Defend computer security contests require participants to leverage knowledge obtained from a variety of courses across a computer science curriculum, providing undergraduates with a novel and exciting opportunity to challenge both themselves and their peers. However, there are limited opportunities to participate in such contests and none of them is well suited for novices in computer security. This paper describes the design of an Attack/Defend security contest that is geared towards undergraduates who have little exposure to computer security and require a more gentle introduction. We provide implementation details of the framework that supports this contest and offer lessons learned over the past three years in growing our contest into an intercollegiate event that is deployed on a cloud infrastructure to support multiple, concurrently operating contest sites which span three timezones.	Facilitating a Battle Between Hackers: Computer Security Outside of the Classroom	NA	2016
Serge Egelman:Julia Bernd:Gerald Friedland:Dan Garcia	A basic understanding of online privacy is essential to being an informed digital citizen, and therefore basic privacy education is becoming ever more necessary. Recently released high school and college computer science curricula acknowledge the significantly increased importance of fundamental knowledge about privacy, but do not yet provide concrete content in the area. To address this need, over the past two years, we have developed the Teaching Privacy Project (TPP) curriculum, http://teachingprivacy.org, which educates the general public about online privacy issues. We performed a pilot of our curriculum in a university course for non-CS majors and found that it was effective: weeks after last being exposed, students' privacy attitudes had shifted. In this paper, we describe our curriculum, our evaluation of it in the classroom, and our vision for future privacy education.	The Teaching Privacy Curriculum	NA:NA:NA:NA	2016
Richard Weiss:Michael E. Locasto:Jens Mache	Assessing student performance in cybersecurity labs and exercises is a difficult and time-consuming task. Simply recording the number of correct answers is inferior to in-depth assessment. Faculty are often best placed to offer expert feedback, advice, and guidance based on assessing student achievement and quality of performance for time-constrained exercises. Since this often takes place in the context of large classes and complex exercises, it can present obstacles to offering qualitative feedback. Yet, in some cases there is more information available that could simplify this task. This paper explores the use of command line history and visualization to add additional information and simplify the problem.	A Reflective Approach to Assessing Student Performance in Cybersecurity Exercises	NA:NA:NA	2016
Lillian N. Cassel	NA	Session details: Paper Session: Alternative Learning Experiences	NA	2016
Aaron Bloomfield:Borja Sotomayor	The ACM's International Collegiate Programming Contest (ICPC) is the world's oldest and largest programming contest. Although students can benefit both pedagogically and professionally from participating in this contest, participation in North America is far smaller than in the rest of the world, which we partially attribute to the perceived low payoff of participating in ICPC. We discuss the pedagogical benefits of participation in ICPC, which include higher student enthusiasm for computer science studies and better career prospects post-graduation, and present a set of cohesive strategies aimed at increasing involvement and success within the ICPC. For aspiring coaches and contestants, we also provide links and references for further study.	A Programming Contest Strategy Guide	NA:NA	2016
David S. Touretzky:Christina Gardner-McCune:Ashish Aggarwal	This paper introduces reasoning about lawful behavior as an important computational thinking skill and provides examples from a novel introductory programming curriculum using Microsoft's Kodu Game Lab. We present an analysis of assessment data showing that rising 5th and 6th graders can understand the lawfulness of Kodu programs. We also discuss some misconceptions students may develop about Kodu, their causes, and potential remedies.	Teaching "Lawfulness" With Kodu	NA:NA:NA	2016
Craig Anslow:John Brosz:Frank Maurer:Mike Boyes	Large amounts of data are becoming increasingly available through open data repositories as well as companies and governments collecting data to improve decision making and efficiencies. Consequently there is a need to increase the data literacy of computer science students. Data science is a relatively new area within computer science and the curriculum is rapidly evolving along with the tools required to perform analytics which students need to learn how to effectively use. To address the needs of students learning key data science and analytics skills we propose augmenting existing data science curriculums with hackathon events that focus on data also known as datathons. In this paper we present our experience at hosting and running four datathons that involved students and members from the community coming together to solve challenging problems with data from not-for-profit social good organizations and publicly open data. Our reported experience from our datathons will help inform other academics and community groups who also wish to host datathons to help facilitate their students and members to learn key data science and analytics skills.	Datathons: An Experience Report of Data Hackathons for Data Science Education	NA:NA:NA:NA	2016
Neil Brown	NA	Session details: Paper Session: CS Ed Research 3	NA	2016
Alexander Repenning:Ashok Basawapatna:Dorit Assaf:Carmine Maiello:Nora Escherle	High profile computer science education events such as the Hour of Code can reach millions of students but without proper evaluation it is not clear what motivational and educational consequences the participation has. If, for instance, participants' levels of motivation towards the end of an hour long activity are significantly fading, then their perception of programming to be "hard and boring" may actually get reinforced. By simply measuring how far participants progressed with their projects we have been able to collect retention data from thousands of participants in a way that allows us to interpret these data in terms of not only cognitive but also technical and practical activity challenges. Inflection points overlaying a negative exponential retention distribution serve as indicators of these challenges with potential impact on Flow. Retention of Flow is an evaluation approach to analyze computer science education activities, including interactive tutorials and online programming environments, with respect to cognitive as well as affective challenges.	Retention of Flow: Evaluating a Computer Science Education Week Activity	NA:NA:NA:NA:NA	2016
Duane F. Shell:Leen-Kiat Soh:Abraham E. Flanigan:Markeya S. Peteranetz	The goal of this study was to investigate how students' entering motivation for the course in a suite of CS1 introductory computer science courses was associated with their subsequent course achievement and retention. Courses were tailored for specific student populations (CS majors, engineering majors, business-CS combined honors program). Students' goal orientations (learning, performance, task), perceived instrumentality (endogenous, exogenous), career connectedness, self-efficacy, and mindsets (growth or fixed) were assessed at the start of the course. Grades were significantly predicted from entering motivation; but prediction was highly variable across courses, ranging from not predicted for the engineering courses to highly predictable for the business-CS honors program. Course withdrawal was significantly predicted. Likelihood of withdrawing was decreased by future time career connectedness and learning approach goal orientation and increased by having an incremental theory of intelligence. Findings suggest that CS1 students who set learning approach goals for their classes have better academic outcomes and higher retention. Other motivational beliefs were inconsistent in their impacts and varied by course and student population. Except for students in an honors program, entering motivational beliefs weakly predicted achievement and retention, suggesting that impacts of the course itself on motivation and how motivation changes during the course are perhaps more important than student's initial motivation.	Students' Initial Course Motivation and Their Achievement and Retention in College CS1 Courses	NA:NA:NA:NA	2016
Adrienne Decker:Monica M. McGill:Amber Settle	In the past six years, dozens of conference papers and journal articles have been presented in Association of Computing Machinery (ACM) and Institute of Electrical and Electronics Engineers (IEEE) educational forums concerning computing outreach activities. Nearly half of these (47.5%) appeared in SIGCSE venues. In this study, we used the free-form question "What type of data has been collected in formal, peer-reviewed research that has been conducted on computing outreach activities in recent years"? as a basis for a systematic literature review in these venues from 2009-2015. During the analysis of the articles, it was discovered that a majority of efforts focused on middle school and high school students, a majority of the reported events took place in the United States, and almost half had a goal of increasing gender diversity in computing. This paper summarizes the information about the studies, including their data collection techniques and the data that was collected. We also present a list of recommended practices for data collection, methodologies, and reporting for educational researchers engaged in these activities in an effort to provide comparative data and allow us as a community to more scientifically understand the impact that these activities are having on the participants.	Towards a Common Framework for Evaluating Computing Outreach Activities	NA:NA:NA	2016
Jan Vahrenhold	NA	Session details: Paper Session: K-12 Teaching	NA	2016
George Veletsianos:Bradley Beth:Calvin Lin	Little is known about how K-12 Computer Science (CS) teachers use technology and problem-based learning (PBL) to teach CS content in the context of CS Principles curricula. Significantly, little qualitative research has been conducted in these areas in computer science education, so we lack an in-depth understanding of the complicated realities of CS teachers' experiences. This paper describes the practices and experiences of six teachers' use of technology that was implemented to support PBL in the context of a dual enrollment CS Principles course. Results from an early offering of this course suggest that (1) while CS teachers used technology, they did not appear to use it to support student inquiry, (2) local adaptations to the curriculum were largely teacher-centric, and (3) the simultaneous adoption of new instructional practices, technologies, and curricula was overwhelming to teachers. This paper then describes how these results were used to modify the curriculum and professional development, leading to increased teacher satisfaction and student success in the course.	CS Teacher Experiences with Educational Technology, Problem-BasedLearning, and a CS Principles Curriculum	NA:NA:NA	2016
Arno Pasternak	In this paper we will report on the design, teaching and evaluation of a Computer Science course in the lower secondary education from grade 6 to grade 10 based on contextualised ideas. With this study we are able to demonstrate that students can indeed be taught Computer Science as a (main) subject from early grades to the end of lower secondary education. We will present quantitative and qualitative results. We will analyse the results of the course with the instrument of the effect size d and draw first consequences. So it becomes apparent that Computer Science can be taught just like any other science worth full curriculum credit even starting at the beginning of the lower secondary education.	Contextualized Teaching in the Lower Secondary EducationLong-term Evaluation of a CS Course from Grade 6 to 10	NA	2016
Jennifer Wang:Hai Hong:Jason Ravitz:Sepehr Hejazi Moghadam	Through surveys of 1,673 students, 1,685 parents, 1,013 teachers, 9,693 principals, and 1,865 superintendents across the United States, this study explores perceptions, access, and barriers to computer science education at the K-12 level. We found most respondents were unable to distinguish computer literacy activities from computer science, with female, Black, or Hispanic respondents even less likely to do so. Perceptions of who does computer science were narrow and stereotypical (White, male, smart), but there was high value and demand for computer science across all populations, particularly among parents. Results indicate discrepancies in access to technology and computer science. Over 75% of principals reported their school did not offer computer science with programming/coding, but Hispanic students reported lower exposure to computers at home and in school and Black students and lower income students reported less access to computer science learning in school. Hispanic students and female students were also less likely to have learned computer science or have confidence to learn computer science compared to their counterparts. Finally, we explored barriers to access and identified a harsh disconnect: parent and student demand for computer science education was high while administrators' perceptions of this demand was low. Additionally, the most common barriers to offering computer science cited by principals and superintendents were the need to dedicate time to other courses and testing requirements and the lack of qualified teachers, with technology less common of a barrier.	Landscape of K-12 Computer Science Education in the U.S.: Perceptions, Access, and Barriers	NA:NA:NA:NA	2016
Bina Ramamurthy	NA	Session details: Paper Session: Tools	NA	2016
Tommy Färnqvist:Fredrik Heintz:Patrick Lambrix:Linda Mannila:Chunyan Wang	Traditionally, theoretical foundations in data structures and algorithms (DSA) courses have been covered through lectures followed by tutorials, where students practise their understanding on pen-and-paper tasks. In this paper, we present findings from a pilot study on using the interactive e-book OpenDSA as the main material in a DSA course. The goal was to redesign an already existing course by building on active learning and continuous examination through the use of OpenDSA. In addition to presenting the study setting, we describe findings from four data sources: final exam, OpenDSA log data, pre and post questionnaires as well as an observation study. The results indicate that students performed better on the exam than during previous years. Students preferred OpenDSA over traditional textbooks and worked actively with the material, although a large proportion of them put off the work until the due date approaches.	Supporting Active Learning by Introducing an Interactive Teaching Tool in a Data Structures and Algorithms Course	NA:NA:NA:NA:NA	2016
Rachel Harsley:Nick Green:Mehrdad Alizadeh:Sabita Acharya:Davide Fossati:Barbara Di Eugenio:Omar AlZoubi	Analogies and worked out examples are effective means of instruction in a wide variety of learning environments. However, the extent of their effectiveness in Computer Science (CS) education has not been fully explored. We extended our intelligent tutoring system (ITS) for CS data structures, ChiQat-Tutor, to incorporate worked out examples and analogy as teaching strategies. We compare three versions of the system: one that uses standard worked out examples, one that uses analogical worked out examples, and one that uses a pure analogical explanation with separate worked out examples. A study with 66 students showed that students using the standard worked out examples had greater learning gains than students in both analogy conditions. We also found that analogy can be less effective for students with higher prior knowledge. Additionally, we show that some interaction patterns highly correlate with student gains. Overall, the system implementation and results represent a step towards exploring the use of well-established instructional strategies in a computer science ITS.	Incorporating Analogies and Worked Out Examples as Pedagogical Strategies in a Computer Science Tutoring System	NA:NA:NA:NA:NA:NA:NA	2016
John Malloy:Janet Burge	Decision-making is central to software development. Most problems do not have straightforward solutions but instead require assessing and evaluating multiple candidate solutions depending on the requirements (functional and non-functional) for the specific project. Real problems may have more than one valid solution and software engineering students need to be able to synthesize design alternatives and reason about them to make the best decision for the specific problem under consideration. The work described here uses a web-based system to administer rationale-based assignments where the students are required to explicitly present their rationale for a series of decisions and use the capabilities of the tool to justify their choices. Students using the tool report that it helped them consider more alternatives and put more thought into their decision-making process.	SEURAT_Edu: A Tool to Assist and Assess Student Decision-Making in Design	NA:NA	2016
Owen Astrachan:R. Brook Osborne	The AP CS Principles (APCSP) course begins as an AP course in 2016, fully realized after eight years with several presentations as part of SIGCSE conferences[1-3]. APCSP was designed to broaden participation in computer science in high school and beyond, and to be accessible to teachers who might be new to computer science, in some cases with limited previous experience in teaching courses in the area. The APCSP project has been grounded in an inclusive, community-driven approach to building a new course that is nearly unprecedented. Initially funded by the College Board and NSF, as this community of educators nears the official launch of APCSP the project has become more of a public/private partnership, garnering significant interest in building programs with NSF, non-profit, and industry support.	Advanced Placement Computer Science Principles (APCSP): A Report from Teachers	NA:NA	2016
Clifton Kussmaul:Helen H. Hu:Tammy Pirmann	Employer surveys and other sources indicate that CS students need process skills such as communication, teamwork, critical thinking, and problem solving. Further, the AP CS Principles practices include communicating and collaborating. POGIL (Process Oriented Guided Inquiry Learning) can be used to teach these process skills in high school or college courses. Instead of sitting in lecture or working together with minimal guidance, student teams work through POGIL activities to discover concepts on their own, while the instructor circulates and facilitates learning of key concepts and the development of process skills. Structured roles help students learn to communicate and work in teams more effectively. In this special session, attendees will experience a POGIL activity, learn how process skills are developed and reinforced by POGIL (through a POGIL meta-activity), and see the range of activities available at http://cspogil.org. We will share POGIL activities and discuss how POGIL can transform CS classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Special Session: Helping Students to Develop Communication, Teamwork, and Other Process Skills with POGIL	NA:NA:NA	2016
Jeffrey A. Stone	Sustainability, defined by Penn State University as "the simultaneous pursuit of human health and happiness, environmental quality and economic well-being for current and future generations", is becoming a more frequent theme in colleges and universities. There is currently little published research involving the use of sustainability-themed modules or courses in Computer Science. As part of an institutional effort to integrate sustainability concepts into undergraduate courses, the author constructed a series of projects and activities to educate students about sustainability issues in three distinct CS1-style courses for non-majors. These projects and activities involve traditional introductory topics (e.g. loops, arrays) but each focuses a specific sustainability-related issue or domain. Examples of project issues included the impact of acid rain; the construction of an optimal planting schedule; the impact of air pollution; the benefits of trees on air quality; and the benefits of water catchment systems. These projects and activities included a discussion of the sustainability concept at hand while providing the student an opportunity to demonstrate his/her knowledge of the particular language and algorithmic concepts. Supporting efforts include the integration of speakers on sustainability topics and a parallel effort by undergraduate researchers to create graphics and animations for the project concepts. This poster will describe the results of the pilot study, the lessons learned, and future adjustments.	Integrating Sustainability Concepts into Introductory Programming Courses (Abstract Only)	NA	2016
Gary K.W. Wong:Kening Zhu:Xiaojuan Ma:John Huen	Computational Thinking (CT) has been widely introduced and investigated in recent years, particularly in the U.S. since the born of visual, block-based, drag-drop programming environments such as Kodu, Scratch, Minecraft and App Inventor. Although the user interface is mainly in English, the characteristics of these easy-to-use, game-based, and interactive tools attract many teachers and researchers in the world to pay much attention to the possibilities and opportunities of introducing these tools to students. Recently, some primary school teachers in Hong Kong begin to independently introduce some of these programming tools to students at age 7 - 11 as a part of learning activities in their computer lessons. Their motives are similar but not the same, such as making a fun learning and teaching experience, motivating students for active and collaborative participation, and introducing CT concepts to develop generic skills (e.g. problem solving skills, creativity, and critical thinking). However, there is an absence of well-developed and planned curriculum for "coding education" to introduce computational thinking systematically to students in the local context with expected learning outcomes. Due to the uniqueness of K-12 curriculum in Hong Kong, the existing curriculum model in the U.S. may need to be customized and redesigned to become suitable for integrating into the curriculum in Hong Kong. In this poster, it describes the first proposed coding education curriculum in Hong Kong primary education (Primary 4 to Primary 6) with relevant objectives, structures, contents, and learning outcomes. A new pedagogical design framework for CT is introduced in this poster, which could be generalizable and yet to be evaluated. This new curriculum will serve as the curriculum guide to local teachers, and is the first research initiative of a three-year longitudinal study investigating the impact of CT activities to students particularly in Hong Kong. The experience of this curriculum development for CT concepts in K-12 education can inspire teachers and researchers in other parts of the world when adopting and internationalizing CT activities based on the curriculum model developed under the U.S. education.	The Development of Internationalized Computational Thinking Curriculum in Hong Kong Primary Education (Abstract Only)	NA:NA:NA:NA	2016
Joanna Klukowska:Stewart N. Weiss	We present a sequence of programming projects for the CS2 introductory computer science course which provides a holistic experience for students in preparation for their future roles in any workplace in which software is developed, whether in academia, government, industry, or elsewhere. The progression of projects has several key features: (1) they are easily reused simply by changing the underlying input data set; (2) they offer a flexible degree of analysis objectives; (3) they take advantage of freely available open source data sets and encourage their use; (4) they are designed to be small models of the kinds of problems likely to be encountered outside of the classroom environment; (5) they facilitate the introduction of increasingly more sophisticated software testing concepts, starting with the most elementary; (6) a student who attempts to do them in earnest, even if unsuccessful, can still learn important lessons about the different facets of programming and problem solving; and (7) a student's understanding of the relationship between choice of data representation and performance will likely mature if he or she successfully completes the assignments. In our poster, we present the first and last assignments of the sequence that we have employed in a CS2 course, and discuss some results. We also show how these assignments can serve as a paradigm that may be used in other CS2-like courses. Many of the underlying concepts can also be applied to CS1-like courses as well as more advanced computer science courses.	A Holistic Sequence of Programming Assignments for CS2 (Abstract Only)	NA:NA	2016
Shaundra B. Daily:Alison E. Leonard:Sophie Jörg:Sabarish Babu:Nikeetha DSouza:Dhaval Parmar:Kara Gundersen:Joseph Isaac:Serita Acker	Fifty-four middle school girls were a part of weeklong program geared towards encouraging young women in STEM careers. During a two-day computer science intervention, we introduced students to our VEnvI software where students program virtual characters to perform choreography. During this time, students were introduced programming concepts: sequencing, loops, and variables. They also spent time performing to learn some of the movements in VEnvI and discussed different aspects of the VEnvI software design including motion capture & Unity 3D Development. The latter conversations were couched in relation to being a computer scientist. Data were collected from the students on the first day of the camp as well as at the end of the second day. Each student was given a piece of paper that only contained a code corresponding to her. The instructions were to write, "What do computer scientists do?" on one side of the page, and to draw a picture of a computer scientist on the other side. Our findings suggest that, at least in the short term, this type of intervention can impact students' perceptions of computer science as well as broaden their perspectives of computer scientists. More students drew female computer scientists in the post-test and showed computer scientists working in teams rather than alone. Further, students' ideas of what computer scientists "do" shifted from fixing computers and making websites to creating, designing, and inventing with computers.	Combating Perceptions of Computer Scientists: A Short-term Intervention (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2016
Declan Andrew McClintock:Niral Shah	This poster delves into the interactions of pair programming students to observe the equality or inequality across three modes of discussion. These three modes are coding, designing and logistics. Coding being when students are discussing code, designing being the discussion of aesthetic aspects, and logistics being the discussion of saving or manipulating files. The students whose interactions are reviewed and assessed in this poster are participants in a three-week elementary computer science program taking place in Northern California in the years 2009, 2012, and 2013. The students' ages range between ten and eleven years old. This poster will compare and contrast specific interactions and examples to highlight how modes can present an interaction as equitable, inequitable, or both. The poster will also present tables to aid in the explanation of how one mode in an interaction can be equitable while the other two modes are not.	Coding, Designing, and Logistics: How Modes Affect Equity in Computer Science Education (Abstract Only)	NA:NA	2016
Abhay Doke:Niranjan Pedanekar	Several hundred Massively Open Online Courses (MOOCs) are available for students of Computer Science (CS) across the Internet. Yet, it has been observed that students exhibit a short attention span while watching MOOC videos. At the same time, as a viewer, they are likely to watch much longer movies and even educational films. In this poster, we propose that production of MOOCs needs to borrow certain affective features from more professionally produced educational films. To support this argument, we first present the results of a limited survey indicating an affective preference of users towards educational films over video lectures from MOOCs. Taking a cue from films in general, we present an analysis of certain affective audio-visual features of educational films vis-à-vis MOOC videos. These features include visual features related to the variety of color, number of scenes and movement, and audio features related to liveliness of speech. We then use these features to classify two groups of educational videos, and conclude that MOOC-like videos often tend to lack such affective audio-visual features. We also indicate possible directions of research in educational videos based on our initial findings.	Lights, Camera, but No Action: Exploring Affective Audio-Visual Features of Educational Videos (Abstract Only)	NA:NA	2016
Michael Weeks:Yi Pan:Yanqing Zhang	This poster documents three approaches that we are undertaking to increase security awareness within undergraduate computer science classes. The first approach is a verbal password entry system, with surreptitious photos being taken when the mobile device is stolen. The second approach is a lab where students develop a password entry and verification system between a mobile device and a remote server. The third approach is a captcha system, where students implement a simple challenge that can be verified. Like password entry, the captcha communications must be secure and difficult to automatically manipulate. Unlike password entry, the captcha is meant to allow humans access while denying other computers.	Increasing Security Awareness in Undergraduate Courses with Labware (Abstract Only)	NA:NA:NA	2016
Mohammed F. Farghally:Eric Fouh:Sally Hamouda:Kyu Han Koh:Clifford A. Shaffer	Data Structures and Algorithms (DSA) courses are considered critical in any computer science curriculum. DSA courses emphasize topics related to procedural dynamics (how an algorithm works) and algorithm analysis (the algorithm's efficiency). Historically, algorithm visualizations (AVs) have dealt almost exclusively with portraying algorithm dynamics, and there are few examples of visualizations related to algorithm analysis topics. We have developed a new generation of visualizations that we term Algorithm Analysis Visualizations (AAVs) to convey algorithm analysis concepts. We present the motivation behind AAVs, and outlines a methodology for their evaluation. We present results from student surveys and the analysis of student interaction logs from the OpenDSA eTextbook used by several CS3-level classes during the period of Fall 2014 through Fall 2015. Initial results from Fall 2014 revealed that students were not spending enough time reading the algorithm analysis material presented as textual content. Our results from a preliminary deployment of AAVs in Spring 2015 showed that students interacted with AAVs for significantly longer than the control group spent reading the previous text-based algorithm analysis material. We will present additional results from our ongoing experiment in Fall2015 (control group without AAVs) and Spring2016 (test group with additional AAVs).	Visualizing Algorithm Analysis Topics (Abstract Only)	NA:NA:NA:NA:NA	2016
Steven Huss-Lederman	From 2013 to 2014, a fairly standard CS2 course was changed to a dynamic classroom using clicker questions and OpenDSA textbook (embedded animations with animated and multiple choice questions allowing instructor review of results). Through these changes, class time focused on conceptual ideas and discussion rather than the mechanics of data structures. The clicker questions were used to engage students by strategically asking questions that differentiated between correct ideas and common misconceptions. To assess these changes, surveys of central CS2013 topics were given to students in 2013 (before the changes) and in 2014 and 2015 (after the changes) where the course is offered each spring. Additionally, the drop rate and knowledge from assignments and exams were examined. The analysis showed that after the first year students showed greater learning gains and substantial decline in drop rate (57% to 27%) but found the course less valuable (class time, discussions and readings). In the second year there was a drop in learning gains, an even greater reduction in drop rate (12%) but students now found the course time more valuable than the first year. These results are attributed to regularly informing students in the third year to the reasons for the new methodologies and the fact that a greater diversity of students completed the course each year. The author hopes to engage others in a discussion of their experiences about interactive courses, and how clicker questions can be constructed to engage and educate our students.	The Impact on Student Learning and Satisfaction When a CS2 Course Became Interactive (Abstract Only)	NA	2016
Dahai Guo:Anna Koufakou	We are proposing an undergraduate course to introduce cloud computing technologies with guidance from an industry recognized certification: Amazon Certified Associate Developer. Today, cloud computing providers provide many services. For example, Amazon Web Services provide 46 broad types of services, without mentioning the combinations of these services. It is impossible to introduce all or even most of them in one course. This poster addresses the question of how to select an important and representative subset of cloud computing technologies for developing an undergraduate course on cloud computing. We propose to align our education with what the Amazon Certified Associate Developer certification covers. This certification addresses the core technologies that need to be mastered by software developers that use the Amazon Web Services, clearly the leader in cloud computing. The learning outcomes in the proposed course will be found to be consistent with the four domains identified by the certification.	A Certification-Guided Course for Cloud Computing (Abstract Only)	NA:NA	2016
Corey Ford:Clinton Staley	Important information regarding the learning experience and relative preparedness of Computer Science students can be obtained by analyzing their coding activity at a fine-grained level, using an online IDE that records student code editing, compiling, and testing activities down to the individual keystroke. We report results from analyses of student coding patterns using such an online IDE. In particular, we gather data from a group of students performing an assigned programming lab, using the online IDE indicated to gather statistics. We extract high-level statistics from the student data, and apply supervised learning techniques to identify those that are the most salient prediction of student success as measured by later performance in the class. We use these results to make predictions of course performance for another student group, and report on the reliability of those predictions	Automated Analysis of Student Programmer Coding Behavior Patterns (Abstract Only)	NA:NA	2016
Ryan Hardt:Grant Wuerker	Online courses are growing in popularity in the forms of Massive Open Online Courses (MOOCs), Small Private Online Courses (SPOCs), and flipped classrooms. Some MOOC interfaces provided by websites like Coursera, edX, Khan Academy and Udacity allow students to comment on lectures, but they do so using a different component than that used for consuming lecture content. Their comment systems are effectively message boards linked to by lecture pages. This component separation has been shown to create a cognitive overhead for students. Additionally, comments made in these systems typically apply to the lecture as a whole rather than to more finely-grained lecture content. Some SPOC interfaces allow fine-grained, timeline-based comments, but suffer from a "seeding" issue in which students who view the lecture early lack incentive to participate. Our system, the "Small Private Online Course Keeper" (SPOCK), is an online lecture environment for SPOCs. SPOCK is distinguished by (1) its tight integration between timeline-based lecture content and anonymous student questions, answers, and comments, (2) its use of gamification to encourage student interaction and address the seeding issue, (3) and by its loose coupling with lecture videos, which may be referenced from other websites like YouTube.	SPOCK: A System for Encouraging Interaction in Small Private Online Courses (Abstract Only)	NA:NA	2016
Xenia Mountrouidou:Xiangyang Li	Cybersecurity is a broad, dynamic, and ever changing field that is difficult to be integrated into undergraduate Computer Science (CS) curriculum. In this poster, we will report our plan and progress on an ongoing NSF-funded three-year project. First, we develop manageable standalone course modules and labs to be integrated non-intrusively into the core Liberal Arts curriculum, and create two new Cybersecurity courses and a set of capstone projects for students motivated to pursue deeper Cybersecurity learning. With the Liberal Arts education in mind, these courses and modules will encompass law, policy, and societal impacts of Cybersecurity. Second, we use the Global Environment for Network Innovations (GENI) infrastructure in lab and project assignments to offer an active Cybersecurity learning experience for all students. This offers a solution to Predominantly Undergraduate Institutions that do not have the infrastructure or maintenance capability for sophisticated computer labs. This project is built on the collaboration between a Predominantly Undergraduate Liberal Arts college, Wofford College, and two primary research universities, Johns Hopkins University and University of South Florida that have well-known Cybersecurity programs.	Broadening the Path to Cybersecurity Profession in Predominantly Undergraduate and Liberal Arts Institutions (Abstract Only)	NA:NA	2016
Stephen MacNeil:Celine Latulipe	Active learning is becoming increasingly popular as a way to engage students and to provide social support. Providing social support is important because it has been shown to improve both student retention (Slavin 1990, Tinto 1987, Wenger 1999) and performance (Hsiung 2012, Kulkarni 2015, MacNeil 2015). Most forms of active learning use a flipped classroom model of teaching where students are expected to interact with materials, such as lecture videos, alone before class and then engage in active learning during class time (Lage 2000). In our previous work with team-based learning, students generally preferred learning in face-to-face teams (MacNeil 2016). To support co-located teams outside of class, we propose the design for a mobile app that is currently in development which uses students' location to form ad-hoc social learning opportunities for students that are located near each other. We take inspiration from flash teams, which create dynamic expert teams based on the availability of experts online (Retelny 2014). Our app will create teams based on the availability of students and their range of expertise, while leveraging additional context, such as student's location and intention. Students upload course topics that they are struggling with and a general geo-location. The app opportunistically pairs students and suggests that they arrange to meet based on either a geo-location match, a topic match, or preferably, both. In designing our prototype, we consider the possibility of suggesting exercises or assignments that students could work on together. Finally, we provide a brief discussion of the theoretical opportunities and challenges associated with using student's location for ad-hoc social learning.	Leveraging Context to Create Opportunistic Co-Located Learning Environments (Abstract Only)	NA:NA	2016
Rick Parker	We are studying how students navigate the school to work transition in the context of the CS senior capstone project course. We conducted semi-structured qualitative interviews with eleven of the seventy-two seniors completing their capstone project in the CS department at our institution. The interview instrument explores how students prioritized candidate projects during project selection, student perceptions of external evaluation, and self-evaluation of the success of their project experience. We used the concept of legitimate peripheral participation (LPP) as a theoretical lens to inform the coding and interpretation of the qualitative data. LPP is a situated learning theory that highlights the importance of embedding learners within a community of practice. This embedding supports participants' development of their professional identities, and engages them in the use of tools and practices authentic to the community. Through analysis of the interview transcripts, we identified the following themes: 1) shift in authority from classroom to project sponsor, 2) the capstone experience serving as a knowledge integration forum, and 3) sufficient project scope to support a sense of ownership and transformative agency. These findings are consistent with a shift in identity from school-oriented to work-oriented, and highlight how the course lends legitimacy to the project work performed by the students. This poster represents preliminary research efforts into the questions of student identity formation within CS, and its impact on long term retention in the computer science discipline.	Student Perceptions of Success in Computer Science Senior Capstone Projects (Abstract Only)	NA	2016
Victor Norman:Serita Nelesen	It is well known that active learning strategies, like Peer Instruction and Cooperative Learning promote deep learning of material in the classroom. These techniques are typically accomplished by having students use cell phones or laptops. However, research has also shown that use by students of these technologies detract from learning. In this poster we examine our low-tech solution: the use of inexpensive, handheld whiteboards in our classrooms. We provide examples of activities which make use of the boards, in contexts ranging from introductory programming to upper-level networking.	Using Small Whiteboards to Engage Students in Active Learning (Abstract Only)	NA:NA	2016
Jinsheng Xu:Xiaohong Yuan:Ashrith Velma	Encryption is critical in protecting the confidentiality of users' data on mobile devices. However, research has shown that many mobile apps are not correctly using the ciphers, which makes them vulnerable to the attacks. The existing resources on cipher programming education do not provide enough practical scenarios to help students learn the cipher programming in the context of real world situations with programs that have complex interacting modules with access to networking, storage, and database. This poster introduces a course module that teaches students how to develop secure Android applications by correctly using Android's cryptography APIs. This course module is targeted to two areas where programmers commonly make many mistakes: password based encryption and SSL certificate validation. The core of the module includes a real world sample Android program for students to secure by implementing cryptographic components correctly. The course module will use open-ended problem solving to let students freely explore the multiple options in securing the application. The course module includes a lecture slide on Android's Crypto library, its common misuses, and suggested good practices. Assessment materials will also be included in the course module. This course module will be used and evaluated in a Network Security class. We will present the results of the evaluation in the conference.	Design and Evaluation of a Course Module on Android Cipher Programming (Abstract Only)	NA:NA:NA	2016
Kim C. Huett:Mary Alice Varga	K-12 teachers have an important role to play in introducing children to computer science. However, most teachers lack explicit training in computer science. This project explored questions related to the experiences of pre-service teachers as they mentored K-12 children in computer science in an informal learning environment. Through a grant-funded project at a comprehensive public university in the Southeastern United States, five pre-education major undergraduate students in an introductory education course learned basic computer programming, interacted with a K-12 computer science teacher around strategies for introducing computer science to kids, and mentored children in exploring computer science in an informal setting. Quantitative and qualitative analyses of the data suggest these experiences were effective in increasing student awareness of critical issues related to computer science education, increasing their knowledge and skills related to Scratch, increasing their self-perception as potential mentors in basic computer programming concepts, and increasing their attraction to STEM majors and endorsements.	Building Pre-Service Teacher Interest in Computer Science Education through Mentoring Experiences (Abstract Only)	NA:NA	2016
Lijun Ni:Mark Sherman:Diane Schilder:Fred Martin	Recent work has demonstrated the power of providing relevant, meaningful contexts for computer science to broaden participation. In this poster, we present the design and evaluation of a one-week App Inventor summer camp for middle school students with an explicit focus on addressing local community needs. We recruited community partners to present their organization's work to students, and then we supported students in developing apps that would support these organizations' missions. Students successfully developed apps that were designed to address community issues. Students developed apps on topics ranging from local farmers' markets, healthy food and nutrition apps, invasive species, local trees, to providing users with information about recycling. At the end of the workshop, we conducted an in-depth interview study to examine its impact on students' attitudes and perceptions toward computer science, and supplemented this with results from project evaluation. Our results indicate that students had positive experience in learning, creating and sharing real apps for solving community problems. Focusing on local community needs can also help to motivate students' interest not only in creating apps as well as in learning more about computer science. After the camp, students became more confident in creating apps as well as in using apps to solve community problems, and the camps were successful in welcoming a diverse set of students into computing.	Computing with a Community Focus: An App Inventor Summer Camp for Middle School Students (Abstract Only)	NA:NA:NA:NA	2016
Lorena B. Martinez-Elizalde:Monica G. Duarte-Dominguez	Engagement is a key factor in the process of teaching and learning any subject. Teachers have been facing this problem while teaching computer science at any level; we will be focusing on trying to engage college students from non-computer science majors. Solving problems with programming is a course taught to several majors varying from chemical engineering, through mechanical, physics, electronics, food and even innovation engineering all in the same class. Therefore, we decided to divide the class profiling the students into two roles: a) Mechanics, which showed proficiency on mathematics and critical thinking among the class and b) Pilots, who showed some gaps on their skills. Both profiles will develop critical thinking, problem solving and algorithmic thinking by the end of the semester. Gamification as an educational trend refers not just to the use of games mechanics, but also to the development of game environments in order to improve motivation, concentration, effort, and loyalty among other positive values common to all gamers. Gamification is seen as a powerful strategy to influence and motivate people. The objectives of applying this kind of trend on a class are: The transformation of class activities into challenges, foster leadership of the participants, develop collaborative teams, reward efficiency and effort in the development of activities and foster meaningful learning experience. Through the completion of the objectives, students will develop the afore mentioned skills and the following competences: Logical thinking, ability to follow complex procedures, pattern recognition, use of technology and communication, collaborative work and problem solving. The poster will display our findings so far, since we are running the pilot test on this project. We will be assessing the feelings among students with a survey, and present the data analysis derived from the experience, and we will compare the results to a group that is taking the same class with a normal approach.	Exploring Gamification to Teach Computer Science to Non-computer Science Related Major (Abstract Only)	NA:NA	2016
Omaima Almatrafi:Huzefa Rangwala:Johri Aditya:Jaime Lester	We present findings from a study examining students' course-taking pathways to graduation and identify the factors regarding course-taking choices that can affect students' performance. The data for the study was collected from two majors within an engineering school at a large public university: computer science (CS) and information technology (IT). Although we look in depth at CS students, we use the other data for a comparative analysis. CS and IT are the most popular and largest majors, respectively, at our institution with almost 2,500 undergraduate students enrolled in them. The results show that there are differences in specific patterns of courses and illustrate relationships between the frequent courses in each semester and the relationships between courses taken in two consecutive semesters. Some major insights from the analysis of trajectory of frequent courses for both groups include: low performers postponed some courses toward the end of the program, and take a collection of courses together that their counterparts do not usually take. This work has direct implications for advising of prospective and current students and can improve programs' curriculum and students' performance. In the next stage of this study we will compare trajectories of students who graduate with those of students who either leave CS and IT or take longer to graduate. This preliminary research is part of a NSF CISE/EHR funded grant project on "BigData and Education".	Using Learning Analytics to Trace Academic Trajectories of CS and IT Students to Better Understanding Successful Pathways to Graduation (Abstract Only)	NA:NA:NA:NA	2016
Kai Qian:Dan Lo:Wei Chen:Ying Qian	In this paper we present an innovative authentic learning approach of mobile security through real-world-scenario case studies. in computing field. The primary goal of this learning approach is to create an engagement and motivating learning environment that encourages all students in learning emerging technologies such as mobile software developments and its security concepts and practices. This approach provides students with hands-on laboratory practices on real-world mobile app developments and security. The laboratory consists of multiple modules covering Mobile App development, mobile security on cryptography, secure programming, network, database, Web app, mobile malware and spyware analysis. Each topic consists of a series of progressive sub-labs: a pre-lab, lab activities, and a student add-on post-lab. The preliminary feedback from students is positive. Students have gained hands-on real world experiences on mobile security with Android mobile devices, which also greatly promoted students' self-efficacy and confidences in their mobile security learning.	Promote Self-efficacy in Learning of Mobile App and Security with real-world Relevant Laboratory (Abstract Only)	NA:NA:NA:NA	2016
Lillian N. Cassel:Darina Dicheva:Christo Dichev:Don Goelman:Michael Posner	In this poster the authors report the approaches for presenting Data Science topics in Flipped Classroom mode, incorporating topics in Data Science into existing courses as well as in stand-alone courses. It provides an insight on listing of learning goals, central data science topics, content modules, and a framework for implementing a flipped classroom approach to introduce data science to students with limited technical backgrounds. The presenters are NSF-funded investigators on a collaborative team of computer scientists and statistician to create flipped material for an introductory data science class. After SIGCSE, materials described in the poster will be available in Ensemble, at http://computingportal.org/?q=VU-WSSU-DataScience	Data Science for All: An Introductory Course for Non-Majors; in Flipped Format (Abstract Only)	NA:NA:NA:NA:NA	2016
Shannon Duvall:Daniel R. Eagle:Riese P. Narcisse:Thomas W. Price	Clashroom is a web-based fantasy game that was created to enhance the motivation and learning of a traditional classroom. It was created to address several drawbacks of other educational games by being broadly applicable to any course, requiring no class time, and allowing for optional rather than mandatory game play. Each player in the game is a dragon trainer, hoping to train a champion pet dragon. To gain skills and magical items for the dragon to use, players complete educational quests set up by the teacher. Players compete in weekly tournaments, where the quest rewards are vital to success. Because the gameplay and the learning material are decoupled, the game can be used for any subject at any level. After initial testing, students report that the game is fun and that the intrinsic rewards of a fun game are motivation enough for extra learning.	Clashroom: A Game to Enhance the Classroom Experience (Abstract Only)	NA:NA:NA:NA	2016
Hilarie Nickerson:Jeffrey Bush:Yasko Chanoki Endo	As teacher professional development efforts continue to scale to meet the growing demand for computer science educators, more individuals with little formal preparation in the discipline are seeking training. For this reason, it is important to understand the kinds of questions that these teachers, along with administrators and IT staff, are asking professional development providers. This research examines questions received by Scalable Game Design (SGD), a project that engages students in computing through game and simulation design activities. SGD has provided training for more than 300 teachers since 2009. We have found several dimensions of interest in the question pool. The major categories of questions received are pedagogical, technical, and procedural, and we present a generalizable taxonomy of question types plus specific examples. In addition, question content and questioner roles fluctuate throughout the professional development and classroom implementation cycle, from initial inquiries to requests regarding next steps. Knowledge of these factors can lead to adjustments in training content to reduce questions later on and potentially increase teacher confidence; moreover, this information can inform planning for support resources, an especially important activity when project growth is forecast. We also discuss how our support structures have changed over the life of the project and compare them to two other curriculum initiatives that rely on unique software environments. Our future work will investigate the characteristics of teachers who are asking particular kinds of questions, including their disciplinary backgrounds, experience in the classroom, familiarity with SGD, and instructional environments.	We Have Questions: Pedagogical, Technical, and Procedural Assistance Requests in a Large Computational Thinking Curriculum Research Project (Abstract Only)	NA:NA:NA	2016
Michael A. Ball:Daniel D. Garcia	While text based languages have been (relatively) easy to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language designed at UC Berkeley, inspired by Scratch. Creativity and open-ended responses are an important part of many CS0 courses, such as the Beauty and Joy of Computing, our autograder includes tools that allow instructors to build robust feedback mechanisms that handle a wide variety of student submissions. We also present our initial work to integrate this system into edX for a series of MOOCs as well as a prototype of integrating this tool into a traditional LMS on campus.	Autograding and Feedback for Snap!: A Visual Programming Language (Abstract Only)	NA:NA	2016
Darina K. Dicheva	Data Structures is one of the fundamental computing courses but also among those with the highest rate of drops and failures. Its importance for a timely completion of Computer Science college programs implies the need of employing innovative instructional methods and technologies to improve student engagement and performance. This poster presents an instructional method that leverages strategies from both flipped learning and gamification. The flipped classroom has been shown to effectively support active learning activities. Moreover, flipping a Data Structures classroom allows introducing programming labs in class, which is not typical for the standard way of teaching the course. However, the success of flipped learning depends crucially on the proper engagement of students in and outside of class. Here gamification can help. Gamification, defined as the use of game design elements in non-game contexts, has shown promises in shaping user behavior in desirable directions, which can be used to increase students' motivation and engagement in the learning process. The poster describes a gamified flipped learning approach and the author's experience and findings in using it in a Data Structures course at a minority university. In the proposed method, the in-class work features group problem solving and pair-programming labs. The employed gamification elements include accruing points, virtual currency, rapid feedback, unlocking content, freedom to fail, and social engagement. The measures used in assessing the effectiveness of the proposed approach include students' grades, information about class attendance and submission of lab assignments, and an attitudinal survey.	Combining Flipped Learning with Gamification to Improve Student Performance in a Data Structures Course (Abstract Only)	NA	2016
Xiaohong Yuan:Jinsheng Xu:Huiming Yu:Junghee Kim:Taehee Kim	The poster describes our project of Assessing the Effectiveness of Experiential-Learning-Based Teaching Tools in Cybersecurity Courses. We are assessing the effectiveness of experiential-learning-based teaching tools for 10 cybersecurity topics in five cybersecurity courses. For each topic, two teaching methods are selected: the control group teaching method, and the experimental group teaching method. The two teaching methods are compared to answer one of the two research questions: (1) Is using an experiential-learning-based teaching tool more effective in improving student learning than the traditional teaching method without using the teaching tool? (2) Is one experiential-learning-based teaching tool more effective than another experiential-learning-based teaching tool? We will assess the effectiveness of the teaching methods via three measures: (1) improvement in student learning outcomes, (2) improvement in student motivation in learning the topic, and (3) improvement in the student experience such as student enjoyment, satisfaction, and perceived difficulty in learning the topic. The knowledge gained from this research can be used by cybersecurity educators at other institutions to use effective teaching tools to improve cybersecurity education practices, which has the potential to increase the number of students well-prepared for entering cybersecurity careers.	Assessing the Effectiveness of Experiential-Learning-Based Teaching Tools in Cybersecurity Courses (Abstract Only)	NA:NA:NA:NA:NA	2016
S. Zahra Atiq	In scholarship of teaching and learning studies (SoTL), computer science (CS) educators have investigated the effectiveness of their teaching methods on students, but they have rarely investigated their own professional development. Some educators do examine their own practices through a process of reflection, but these informal self-reflection efforts have lacked scholarly rigor. A more rigorous study could be provided through the use of autoethnography. This poster presents an autoethnographic study by the author on the teaching of introductory computer programming courses. Through this study, which used five years of data, the author arrived at three main conclusions. First, the author found that students were able to learn new programming languages because the author emphasized self-learning and life-long learning in the classroom. Second, the author found that peer learning, in which one student explains ideas to another, benefits both students. Third, the author found that when educators mentor, support, and guide students, the students' motivation, engagement, and retention increase. Although these findings about effective practices confirm the results of previous studies, the autoethnographic method provides a new, credible way for educators to reflect and inform their practices.	Teaching and Learning in an Introductory Undergraduate Programming Class: A Reflective Autoethnography (Abstract Only)	NA	2016
Katie M. Davis:Zoë Wood:John Wilcox	Integrating programming and computer science into the K-12 curriculum is of national importance. This poster reports on our experience creating an eighteen-week lab curriculum for fifth grade students. Using Processing, an open source programming language and IDE that is built on the Java programming language, we developed and taught eighteen separate lab components introducing basic coding concepts appropriate for fifth grade. These lab modules were developed by a team consisting of a fifth grade teacher, a computer science master's student, and a computer science professor. The labs were taught to over 100 fifth grade students in the 2014-15 academic school year at a public school, Peabody Charter School. All coding labs produced visual output, either static scenes or animations. Topics included basic syntax with a large focus on two dimensional spatial reasoning, but also included three different modules focused on concepts from the fifth grade science curriculum. All curriculum is available at http://users.csc.calpoly.edu/~zwood/Outreach/PCS/PCS5.html. This poster breaks down the basic lab components developed and presents challenges and positive outcomes. In general, students enjoyed the exercises; the teacher observed that all students were eager to complete the labs. Prior to this experience the teacher had no programming knowledge and learned alongside the students each week. He continues to teach the Processing modules in the fifth grade for the 2015-16 school year.	Eighteen Hours of Code with Fifth Grade Students (Abstract Only)	NA:NA:NA	2016
Perry Fizzano:David Hartenstine	The goal of increasing the representation of women and minorities in Computer Science is widespread and one to which we are strongly committed. There are several notable academic programs and professional organizations that are making headway on this goal themselves and are making resources available to others. While we have learned from others, we have also developed some novel approaches appropriate to our institution we feel are suitable for others. In this poster, we outline the best practices that we've adopted and describe our novel approaches. Some of these efforts were funded by an NSF S-STEM grant which provided scholarships and supporting services for females pursuing degrees in Computer Science or Mathematics. Other ideas spawned independently of that grant and require few resources. Our efforts include: (1) actively recruiting female students (2) early advising and peer mentoring (3) creating a supportive department culture, paying special attention to underrepresented groups and first-generation students (4) developing teaching practices to increase freshmen interest and retain students through graduation (5) encouraging students to become members of the larger community (6) promoting professional and leadership development. We describe how the novel approaches we've developed contribute to these recognized best practices, report on our actions, and include our qualitative assessment of improved climate and quantitative results related to improved recruitment and retention. The human and financial resources required for each action item are indicated. Our ultimate goals are to share our approaches, learn from our colleagues, and to foster continued engagement.	Multifaceted Efforts to Create an Inclusive Environment and Increase Diversity (Abstract Only)	NA:NA	2016
Marie Bienkowski	High school computer science teaching can be informed by how science and engineering practices are defined in K-12 curriculum standards. In the United States, the Next Generation Science Standards (NGSS) are seen as broadly stated and widely accepted statements of what children should know about science and engineering to be literate citizens and to prepare for careers in STEM. While the NGSS do not identify practices for computer science, our experience is that the broadly defined engineering practices can serve as an appropriate framework for thinking about computational work. Our interpretation differs from efforts that use computation to teach science or mathematics, instead we apply NGSS approaches to teach computer science. We anticipate that K-12 teachers who are working with these standards as well as with the Common Core State Standards (CCSS) will find, as we have, a crossover from the emphasis in these standards on inquiry, argumentation, and overall deeper learning to the pedagogical orientation of curricula such as the high school introductory course Exploring Computer Science (ECS). This poster will show how a portion of the NGSS, carried over from the precursor Science and Engineering Framework and called the "Condensed Practices" can be used with activities in ECS to deepen student learning and help teacher adoption. Handouts are available showing (1) knowledge, skills, and abilities for computational thinking, (2) curriculum guidance for teachers wishing to use the NGSS to inform ECS teaching and (3) suggestions for professional development in NGSS for computational thinking for all K-12 teachers.	Deepening Learning in High School Computer Science through Practices in the NGSS (Abstract Only)	NA	2016
Miranda C. Parker:Mark Guzdial	Validated assessments are important for teachers and researchers. A validated assessment is carefully developed to make sure that it is measuring the right things. Computing education needs more and better validated assessments. Validated assessments provide instructors with insight on how their students are doing in their class and provide researchers with insight on whether certain technologies and interventions are successful. Building high-quality, validated assessments is difficult. However, it is possible to replicate an existing validated assessment, and the new assessment can be validated against the original assessment. We need mechanisms to replicate assessments so that we can build more and more varied assessments for different audiences. We developed the Secondary CS1 Assessment (SCS1) as an isomorphic version of a previously validated assessment instrument for introductory computer science. In this poster we provide an overview for the process of replicating an existing valid knowledge assessment and validating the replication. Handouts will be provided with information about how to access and use the SCS1 Assessment.	Replicating a Validated CS1 Assessment (Abstract Only)	NA:NA	2016
Yvonne S. Kao:Leigh Ann DeLyser:Aleata Ka Hubbard	One of the critical barriers to increasing pre-collegiate computer science course offerings in the U.S. is a lack of qualified computer science teachers. Programs such as TEALS, a teacher preparation program pairing high school teachers with computing professionals to offer CS courses, provide opportunities for in-service teachers to gain experience teaching computer science. However, it is not clear whether the high school teachers develop sufficient pedagogical expertise to sustain high-quality computer science course offerings at their schools. Furthermore, the field of computer science education lacks valid and reliable ways of measuring pedagogical content knowledge (PCK), a construct that describes the knowledge teachers need for effective instruction. In this poster, the authors present these results from the first year of a three-year NSF grant to study how TEALS participation influences novice computer science teachers' PCK: 1) a theoretical framework describing the critical components of CS PCK, 2) the results of the first field test of a CS PCK assessment, including the psychometric properties of the assessment, and 3) a comparison of how teachers performed on the assessment at the beginning and end of their first year of computer science teaching and how they performed relative to their computing professional mentors.	Assessing the Development of Computer Science Pedagogical Content Knowledge in the TEALS Program (Abstract Only)	NA:NA:NA	2016
Neeraj Chatlani:Daniel S. Myers	Coding literacy is the ability to understand a written computer program and interpret its functionality and output. Literacy is a valuable skill for programmers at all levels, because understanding written code requires developing and applying mental models of program execution. Previous work has shown that explicit instruction in program literacy is beneficial for new computer science students and aids the development of algorithmic thinking. This poster summarizes the authors' work- in-progress developing COLT: the Coding Literacy Trainer, a web-based adaptive tutorial system that provides instruction in the fundamentals of coding literacy and program interpretation to new computer science students. In addition to its pedagogical applications, COLT serves as a development platform for a novel theoretical foundation for adaptive teaching systems based on the concept of intrinsic curiosity. Inspired by the work of Lee et al. in the field of developmental robotics, a curiosity-driven system explores its complete knowledge environment in way that continually maximizes its learning progress. Thus, learners are driven to explore areas where they are currently making the greatest advances, while avoiding regions of the knowledge space that are either too simple to be interesting or too challenging to be approachable at the current time. The poster summarizes the theoretical background and implementation of the COLT system in a clear, easy-to-read format. A web-based version of COLT is currently under active development and slated for an open-source release in the spring of 2016.	A Curiosity-Driven System for Developing Coding Literacy (Abstract Only)	NA:NA	2016
Sarah Heckman:Jason King	Students learn best in environments where they can meaningfully engage with materials that emulate real-world scenarios. Incorporating software engineering best practices and supporting tools in introductory courses provides students the opportunity to engage in course materials as a novice member of the profession. We support student engagement with industry tools to support software engineering best practices for tutorials, in-class labs, and programming projects. The goal of the research is to improve student learning, engagement in the course and profession, and retention through the use of software engineering practices and tools that introduce students to the software engineering profession. A prior study on the incorporation of in-class laboratories, supported with software engineering best practices, on linear data structures showed an increase in engagement, but did not show a difference on student learning when compared with active learning lectures. We are currently expanding the study by incorporating in-class laboratories across a full semester of a CS1.5 class at NC State University. The poster presents the preliminary results from Fall 2015.	Teaching Software Engineering Skills in CS1.5: Incorporating Real-world Practices and Tools (Abstract Only)	NA:NA	2016
Ashish Aggarwal:Christina Gardner-McCune:David S. Touretzky	Mental simulation is an important skill for program understanding and prediction of program behavior. Assessing students' ability to mentally simulate program execution can be challenging in graphical programming environments and on paper-based assessments. This poster presents the iterative design and refinement process for assessing students' ability to mentally simulate and predict code behavior using a novel introductory computational thinking curriculum for Microsoft's Kodu Game Lab. We present an analysis of question prompts and student responses from data collected from three rising 3rd - 6th graders where the curriculum was implemented. Analysis of student responses suggest that this type of question can be used to identify misconceptions and misinterpretation of instructions. Finally, we present recommendations for question prompt design to foster better student simulation of program execution.	Designing and Refining of Questions to Assess Students' Ability to Mentally Simulate Programs and Predict Program Behavior (Abstract Only)	NA:NA:NA	2016
Heather Pon-Barry:Audrey St. John:Becky Wai-Ling Packard:Barbara Rotundo	The Megas and Gigas Educate (MaGE) program is a peer mentoring program being developed at Mount Holyoke College, a liberal arts college for women, for the introductory CS curriculum. Consistent with national trends, interest in CS is rising rapidly; current resources cannot meet demand while maintaining quality feedback and pedagogy. Supported by a Google Computer Science Capacity Award, MaGE has three main objectives: (1) to triple enrollment capacity over 3 years in introductory courses; (2) to increase enrollment and retention for women and other underrepresented groups; (3) to train students to educate, mentor, and support others in inclusive ways. Trained undergraduate students act as peer mentors to beginner students, providing close interaction and assisting with feedback. MaGE is currently being piloted in the introductory CS1 course. Enrolled students bring varying interests, including Art, History, Biochemistry, Economics and Engineering; most students have no prior programming experience. Each CS1 student is assigned a peer Giga Education Mentor (or GEM) in a 9:1 ratio. GEMs have undergone a rigorous training course that raises awareness of the role of social identity in learning, emphasizes active learning within computer science, and provides preparation for being technical peer mentors. While research supports the need for culturally-sensitive, inclusive training as part of the curriculum, we know of few peer-based models in CS that explicitly include this education. By building a diverse set of peer role models and connecting with the pre-existing co-curricular Megas and Gigas mentoring program, MaGE seeks to effectively engage underrepresented students in computing.	Megas and Gigas Educate (MaGE): A Curricular Peer Mentoring Program (Abstract Only)	NA:NA:NA:NA	2016
Jeffrey L. Popyack:William M. Mongan	We describe an "unplugged" activity that exposes data structures and algorithms involved in image representation and compression, using multi-colored Post-It Notes®. We use Post-It's to illustrate how color images can be encoded and decoded so they can be stored efficiently on a computer and/or transmitted efficiently across a network. This provides an intuitive illustration of bitmaps and the GIF (Graphics Interchange Format), optimized with Lempel-Ziv compression. The algorithms are simple to explain and comprehend, and simultaneously appeal to the participants' sense of art and creativity while demystifying advanced computing concepts and computer graphics. We describe two sample exercises which make use of these concepts. In one exercise, teams of participants create messages with Post-It's, encode them and send them to other teams for decoding. In another exercise, a larger image is encoded and broken into letter paper-sized smaller images to be decoded and reassembled by a group. This activity has proven to engage participants with a wide variety of backgrounds, and provides the background needed for further exploration and discussion of Computer Science Principles, specifically the Big Ideas of Creativity, Abstraction, Data and Information, and Algorithms.	Pixels, Post-It's® and CS Principles (Abstract Only)	NA:NA	2016
Steven M. Hadfield:Christopher S. Coulston:Marissa G. Hadfield:Lillian B. Warner	The humanoid NAO robot continues to win both hearts and imaginations with its lifelike appearance and behaviors. Its consistent growth in popularity, an increasing wealth of free behaviors, and the intuitive Choregraphe development environment provide educators and developers with exceptional opportunities to motivate interest in STEM disciplines and breach impediments such as perceptions that such technology is simply too hard. In this poster, the authors discuss a variety of experimental uses of the NAO robots for K-5 STEM Outreach. Initial development and demonstrations focused on generating enthusiasm for both robotics and programming. Dancing and exercising behaviors from Notre Dame University's F.U.N. Lab and Aldebaran Robots easily integrated into voice-controlled Choregraphe demonstration scripts. Faculty and undergraduate students directed this enthusiasm to motivate engagement in Hour of Code programming activities. The team also utilized the NAO robots in small group settings within a K-5 Response To Intervention (RTI) program where demonstrations were followed by having the children interactively experiment with the robots stimulating imagination, creativity, curiosity, and problem solving skills as well as confidence and self-esteem. Next the RTI children actually programmed the robots using a story-based methodology and the powerful while intuitive building block programming constructs of Choregraphe. The team's on-going development efforts focus on expanding the repertoire of available behaviors to include interactive math games and foreign language educational dialogs. Results from use of these new behaviors will be presented at the SIGCSE Symposium. The team is also working to measure attitudinal, conceptual understanding, and math and language skills improvements.	Adventures in K-5 STEM Outreach Using the NAO Robot (Abstract Only)	NA:NA:NA:NA	2016
Sarah Hug:Jane Krauss	When counselors become advocates for computing they can have significant impact in recruiting youth in the field through their administration of course assignments and engagement in career exploration with students. A recent study of counselors' academic backgrounds, work priorities, and current perspectives and practices regarding advising in computing has implications for educators and others interested in building cooperative relationships with counselors. The study took place as an activity of the Counselors for Computing (C4C) program. C4C leverages the National Center for Women & Information Technology (NCWIT)'s organizational membership, applies evidence-based approaches for professional development, and monitors and adjusts practices to make inroads into CS education through school counselor engagement. In an effort to tailor existing professional development for counselors to the realities of their complex roles in schools, C4C asked 80 counselors to describe their background academic experiences, the schools in which they work and the ways they spend their time at work. In addition, study participants were asked to describe their current counseling practices regarding computing, the extent to which computing was taught in their schools and their preferred methods of receiving professional learning. Understanding the ways in which school counselors interact with youth, parents, administrators, teacher colleagues and other stakeholders may assist K12 computing educators in their efforts to collaborate with counselors in a shared effort to recruit and retain youth in their courses. In this poster presentation the authors will a) frame the problem of counselor readiness to guide toward computing, b) describe the current experiences of school counselors with regard to computing education and career guidance, c) detail how counselors' current work assignments and backgrounds can inform professional learning and relationships in support of pathways to computing careers, and d) show sample messaging and resources computer science educators can use to inform counselors and other school professionals about opportunities for youth in computing.	Engaging School Counselors, Creating Computing Allies (Abstract Only)	NA:NA	2016
Samantha S. Foley:Joshua Hursey:Daniel Koepke:Justin Ragatz:Jason Regina	Computer science students must understand parallel and distributed computing (PDC) concepts to be effective computer scientists in the workforce, as reflected in the ACM Curriculum guidelines. Communities of CS educators are creating educational modules, and making parallel compute environments (PCEs) available to educators who are integrating PDC concepts into their existing curriculum. Even with these resources there is a barrier to entry for students to use PCEs, namely the unfamiliar and complex system software ecosystem of modern PCEs. The OnRamp project lowers that barrier to entry for exploring PDC concepts on a variety of PCEs while also providing a path for students to learn how to be productive on the native PCE. OnRamp is designed to be a general-purpose web portal for supporting the exploration of PDC concepts that harnesses the existing educational resources created by the CS education community. It coaches students through interactive modules that teach them about PDC concepts and PCEs while allowing them to launch parallel applications from day one. As students become more comfortable with running parallel applications on PCEs, OnRamp transforms into a reference guide as they graduate to using the native PCE. This poster describes the motivation, design, and some motivating use cases for the project. We hope that this poster inspires parallel and distributed computing educators to use OnRamp in their courses.	OnRamp to Parallel and Distributed Computing (Abstract Only)	NA:NA:NA:NA:NA	2016
Johanna Okerlund:Orit Shaer:Celine Latulipe	We are developing ways to teach computational thinking through interaction with tangible digital tools for synthetic biology. Inspired in part by Jeannette Wing's (Wing 2008) notion of the essence and pervasiveness of computational thinking, a growing community within SIGCSE is exploring tools that encourage computational thinking that don't use traditional computer science terminology or computer programming (Basawapna 2013, Daily 2014, Freeman 2014, Miller 2014, Wolz 2011). However, that community has not yet explored how to teach computational thinking through bio-design. Synthetic biology is a relatively new research field where scientists engineer living organisms to exhibit new behaviors. Biologists arrange and combine BioBricks, sequences of DNA that exhibit a behavior, sense an environmental factor, or indicate the beginning or end of a larger sequence. Bio-design not only incorporates traditional principles of computational thinking (abstraction, modularity, design/build/test), but also introduces new challenges that force the user to apply these principles in new ways. Interacting with biology can thus 1) help deepen understanding for people who are proficient in computational thinking, 2) provide a platform for introduction to computational thinking for the first time. Because most bio-design is performed in a wetlab by experienced biologists, we focus now on designing and developing low-barrier digital tools for interacting with biology. We present SynFlo (Okerlund 2016), a tangible interactive system for bio-design that mimics a real-life biological wetlab protocol and we discuss the properties of SynFlo and bio-design in general that encourage computational thinking.	Teaching Computational Thinking Through Bio-Design (Abstract Only)	NA:NA:NA	2016
Andrea Wong:Eric Tran:Joe Jung:Ben Shaw:Marina Espinoza:Beverly Sihsobhon:Melissa Lindquist:Samuel Breese:Matthew Peveler:Barbara Cutler	The Rensselaer Polytechnic Institute (RPI) Homework Submission Server is an ongoing open source project used to collect, compile, and automatically grade programming homeworks for students in our introductory and sophomore computer science classes. It allows viewing of homework, lab, test, and overall grades and late submissions and excused absences on homework. Our first hypothesis is that an electronic submission server is the preferred way for students to submit their coding homeworks because it provides immediate feedback about the correctness of their code and ensures fair, consistent grading since their code is compiled and run with the same test cases, on the same computer. Our second hypothesis is that students appreciate courses with a flexible policy for late submission of homeworks, allowing them to use a specific number of "late days" throughout the semester without penalty. We recently conducted a survey to test these hypotheses and will incorporate specific feedback from the students as we continue development and expand the server to more courses at RPI and other universities.	User Experience and Feedback on the RPI Homework Submission Server (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2016
Deborah Knox	A new course, Computer Science Professional Development Seminar, engages students in reflective self-discovery and career planning, and also facilitates attainment of student outcomes assessment data for continual improvement of our program. Prior to requiring this half-semester course, students selected when to attend colloquia and various presentations. This strategy did not insure that students had a common exposure to topics. Though this course is titled as a professionalism course, this poster describes broader content coverage. Lifelong learning, ethical professionalism, and social media are included. The learning experiences in this course encourage students to establish an early commitment to their personal career development. Additionally, students are guided to increase their awareness of social issues and professional practice knowledge areas from CS2013. Targeted to the second-year (sophomore) population, this course helps connect the students with our departmental community and leads the students to better understand expectations and capstone opportunities. During this course, students receive mentorship by upper-class students, alumni, faculty, staff, and outside computing professionals. Since the course is required, students are afforded dedicated time to expand their understanding of professionalism, to learn about many opportunities for undergraduates, to reflect on case studies and on their intended career path, and to advance their preparations for the next step of their career. This annual course has been offered four times. We strive to keep section enrollments at seminar level to facilitate discussion and to promote community. Some events with outside speakers require one common meeting of all sections. Course management strategies are offered.	Guiding Career Development Prior to Capstone Experiences (Abstract Only)	NA	2016
Mackenzie Leake:Colleen M. Lewis	Dozens of online communities have been developed to support high school computer science (CS) teachers by providing them with CS teaching resources. However, these sites have failed to meet teachers' needs and are widely underused. Despite this underutilization, organizations continue to create new communities with content that overlaps with the materials provided within existing communities. Our research explores the barriers to CS teachers' engagement with online resources and their attitudes toward online communities. We find that teachers are frustrated by the time and difficulty required to navigate the sites and find useful information. It appears the barriers to accessing these resources cannot be overcome by creating additional large, multipurpose communities. Even though it seems that having large communities would be valuable for increasing access to resources, our research indicates teachers prefer smaller, more specialized communities. We are eager to discuss ideas for designing new communities that provide more relevant content for teachers in a way that is easy for them to find.	Bigger Isn't Better When It Comes to Online Computer Science Teacher Communities (Abstract Only)	NA:NA	2016
Ann Gates:Monika Akbar:Mary Kay Roy:Florencia Larsen:Ivonne Lopez:Christian Murga:Angel Ortega:Jesse Tellez:Rebecca Urbina	Data Science, the field of data extraction, manipulation, and analysis in order to derive knowledge or insight, is becoming an essential component of effective management and planning for industrial, research, scientific, and social communities. With the goal of engaging middle-school students in the important field of Data Science, the Sol y Agua project is developing a computer game based on regional environmental issues explored through data analysis. The Sol y Agua project will augment the learning environment of middle school students by incorporating simulation and data science to existing curricula in the form of an interactive educational game. The game has a theme of water sustainability and stewardship with an emphasis on information analysis, negotiation, and decision-making. The game will also immerse students in regional issues concerning biodiversity, sustainability, and the human impact on the environment. This video game will allow students to analyze and interpret data, and make informed decisions about water conservation and sustainability. Simulation and data visualization allow students to perform simulated, environmentally-conscious planning and virtual experiments. Using simulations allows students to easily and inexpensively gather data from the virtual environment. Data visualization allows us to quickly represent this data in new, meaningful, and engaging ways.	The Sol y Agua Project: Enhancing Middle School Education through Computing with an Emphasis on Simulation and Data Science (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2016
Michael Kuehn:Jarred Estad:Jeremy Straub:Thomas Stokke:Scott Kerlin	There are many factors that play a part in how a student performs during a course. Some of these factors can be looked at in hindsight to help suggest why a student may or may not have done well in class. This poster assesses the potential of predicting student performance in an introductory computer science class using information about students' preparation, attitudes and study habits. An expert system has been utilized for this purpose. The expert system accepts data related to seven different categories of preparation, belief and attitude and, through the partial activation of multiple rules, predicts an outcome for each student on the post-test (which should correlate with and is used as a surrogate for the student's final course grade). This poster presents our findings and correlation between certain factors relevant to students' success. It shows how these factors can be used to predict a student's grade and discusses the significance of being able to do so. Thus far, the results from the first sample of data appear promising. The work has shown that certain groups of self-assessment questions have clearly out performed other groups in predicting final test grades. The use of expert system techniques to predict student grades can provide an insight on different factors that affect student performance. Knowledge of characteristics that may lead to poor performance allows instructors to potentially identify students who may be at risk of a low grade and need supplemental instruction, tutoring or other support at the outset of the semester.	An Expert System for the Prediction of Student Performance in an Initial Computer Science Course (Abstract Only)	NA:NA:NA:NA:NA	2016
Benjamin J. Kruger:Richard Matzen	First year Computer Science students must face the dual challenge of learning to think algorithmically while simultaneously assimilating the complex and often unintuitive syntax of their first programming language. Mitigating this problem has been an active research area for decades, spawning a number of programming languages intended for students. While some such teaching languages have achieved a measure of popularity, both in the classroom and for general purpose programming, none has achieved ubiquity, which suggests there is no silver bullet. To this end, we present a suite of open source software including (1) a web-based toolkit for developing and modifying teaching languages using parsing expression grammars, (2) C Spot Run, a simple imperative teaching language built with the toolkit and informed by empirical research in intuitive syntax, and (3) a web-based development environment enabling the student to complete programming assignments directly from a web browser, eliminating complicated compiler installation and configuration. These artifacts are the first steps in an ongoing project intended to serve not only as a classroom tool, but also as a platform for the observational and experimental study of programming languages in classroom settings. By analyzing source code and metadata, common syntactic obstacles may be exposed and empirical studies of syntax can be verified in the classroom.	A Web-based Environment for Developing and Utilizing Teaching Languages for Novice Computer Science Students (Abstract Only)	NA:NA	2016
David Hovemeyer	FunWithSound is a music composition library for Processing which makes it easy for students in creative computing and introductory programming courses to create music compositions with a small amount of code. Building upon Processing's considerable strengths in the domain of visual art, FunWithSound extends Processing to support music creation.	FunWithSound: A Music Composition and Synthesis Library for Processing (Abstract Only)	NA	2016
Gary R. Skuse:Daniel A. Walzer	There is a growing body of evidence that indicates that many students would benefit from coursework in computer science regardless of their academic majors. While there are obvious advantages to learning computer science for students in the quantitative and analytical fields that comprise the STEM disciplines, the advantages to other students are less obvious. In order to investigate the impact of computer science principles and methods on students in the liberal arts we convened a workshop of faculty comprised of an equal number of participants from each discipline, i.e. computer science and the various liberal arts. We identified a clear need to better understand the computational needs of liberal arts students and faculty and we identified opportunities for computer scientists and liberal arts students and faculty to work together to better prepare students in both disciplines and better support faculty research in the liberal arts.	Exploring the Role of Computer Science in the Liberal Arts (Abstract Only)	NA:NA	2016
Richard E. Ladner:Brianna Blaser:Andreas Stefik:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing (uw.edu/accesscomputing) and AccessCS10K (uw.edu/accesscomputing/accesscs10k), will be shared.	Universal Access to Computing Education (Abstract Only)	NA:NA:NA:NA	2016
Allen S. Parrish:Stan Thomas	The ABET Computing Accreditation Commission (CAC) has been involved in a multi-year process to update the accredAitation criteria to incorporate a new framework for outcomes assessment, as well as to update the specific program criteria in computer science, information systems and information technology. Of the program criteria revisions, the computer science criteria are the most heavily revised, with the goal of achieving some degree of consistence with the CS2013 Report. This Birds of a Feather session is designed to discuss the philosophy behind the criteria changes, and present a draft of the revised criteria for review and comment. The session will promote attendee participation via small group discussions, thereby providing the opportunity for participants to provide input on the revised criteria. The session will also solicit feedback to ABET on computing accreditation in general, and on the overall accreditation process.	Updates to the ABET Computing Accreditation Criteria (Abstract Only)	NA:NA	2016
Susan Reiser:Rebecca Bruce:Jennifer Burg:Bill Manaris	Do you teach or are you interested in teaching digital media? Do you work in a digital media degree program or department? This BOF will explore different ways of merging computer science and the arts. We invite you to apply to attend our creative, collaborative Computing in the Arts community of CS educators this summer at our NSF-funded faculty workshop. Additionally, we want to learn what you teach in digital media, and how your program is structured. Is it part of Computer Science, Art, Mass Communications, New Media, or something else? High schools in many states require no computing education beyond studying office suite software. However, these same students are experienced and enthusiastic digital media users. Computing in the Arts degree programs can harness this interest and experience, facilitating both critical and creative thinking. Computing theory and practice can be applied in art and, at the same time, be informed by artistic concepts and methods. Moreover, art theory and practice can be enriched by computational methods and techniques.	Fostering Computational Creativity through Computing in the Arts: A Community of Educators (Abstract Only)	NA:NA:NA:NA	2016
Donald J. Slater:Wanda P. Dann:Stephen Cooper	This session is for anyone currently using Alice Level 2 and/or Alice Level 3, or those exploring the possibility of using Alice in their curriculum. The discussion leaders and attendees will share teaching strategies, tips, and techniques with each other and those new to Alice. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources. There will be a special emphasis on the new Alice 3 to Java textbook and accompanying support materials, how Alice supports the transition to Java, and mapping Alice 2 and Alice 3 curriculum standards and guidelines.	Birds Of A Feather: Teaching with Alice (Abstract Only)	NA:NA:NA	2016
Catherine Bareiss	Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Possible topics might include: sharing classes, increasing enrollment, general education, and specialized courses.	Computer Science: Small Department Initiative (Abstract Only)	NA	2016
Amjad Altadmri:Neil C.C. Brown	The Blackbox project collects data from opted-in users of the BlueJ beginners' Java IDE. This data includes source code edits, compilation results, and use of various tools within BlueJ (such as the debugger). Interested researchers may sign up either to use the global database, and/or to use Blackbox as a data collection platform for their local BlueJ-based studies. Blackbox has been running for over two years and contains the results of over 100 million compilation events from over 1 million users. Over 50 researchers have already signed up for access to the data. This session will allow interested researchers, whether already using Blackbox or not, to come together and talk to each other and to the Blackbox team about using the Blackbox data in their research. The Blackbox team will provide a brief overview of the project, and the research opportunities it provides, followed by lots of time for questions and discussion.	Researching Programming Education with Blackbox (Abstract Only)	NA:NA	2016
Charles Garrod:Jeffrey Forbes:Colleen Lewis:Peter-Michael Osera	Institutions small and large often use student teaching assistants (TAs) to provide office hours, tutor students, and grade student work, and the quality of a course's TAs can greatly affect the quality of the course. In this BOF we will discuss the training we provide to prepare TAs for their course duties and the mentoring we provide to foster their role as future educators. Improving the effectiveness of TA training and mentoring can have an immediate impact on the quality of teaching, potentially improve retention and diversity in computer science, and have a long-term impact on all aspects of our field as our current students and TAs progress through their industry and academic careers. Our goal is to provide a forum for you to disseminate your TA mentoring practices and for you to hear the mentoring practices of others, with the goal to develop a collection of best practices for TA training and mentoring for computer science. This BOF is appropriate for professors or instructors of any computer science course or summer program that uses undergraduate or graduate student teaching assistants.	Mentoring Student Teaching Assistants for Computer Science (Abstract Only)	NA:NA:NA:NA	2016
Beth A. Quinn:Alvaro E. Monge:Lecia Barker:Leo Porter:Daniel Zingaro	NA	Practical Methods for Broadening Participation Through Student Engagement in CS1/CS2 Courses (Abstract Only)	NA:NA:NA:NA:NA	2016
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Celebrations of Women in Computing.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA	2016
Rebecca Bates:Valerie Summet	Have you read any of the common reads for SIGCSE 2016? Now's your chance to talk about them! Two books: The Diamond Age: Or, A Young Lady's Primer by Neal Stephenson (Bantam Spectra, 1995) and Ancillary Justice by Ann Leckie (Orbit, 2013) as well as two short stories: "A Logic Named Joe" by Will F. Jenkins (Street and Smith, 1946) and "Seven Years from Home" by Naomi Novik (Clarksworld Magazine, 2014) were proposed at the end of the 2015 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the two books and two stories. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2017 conference.	SIGCSE Reads: Time for Book Discussion (Abstract Only)	NA:NA	2016
Mark Sherriff:Daniel Garcia	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching Track Faculty in CS (Abstract Only)	NA:NA	2016
Chris Mayfield:Saturnino Garcia:Helen Hu:Clif Kussmaul:Tammy Pirmann	Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to ask questions and learn more, and (2) bring together experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.	POGIL in Computer Science for Beginners and Experts (Abstract Only)	NA:NA:NA:NA:NA	2016
Heidi J.C. Ellis:Stoney Jackson:Gregory W. Hislop:S. Monisha Pulimood:Gina Likins	Student participation in Humanitarian Free and Open Source Software (HFOSS) projects offers great learning opportunities for students, including: designing, coding, testing, documentation, collaboration and other professional skills. Humanitarian projects also foster understanding of computing's potential social impact. However, working with any open source project -- including HFOSS projects - presents some challenges to instructors. Identifying appropriate assignments, creating meaningful rubrics, mapping the academic schedule to a project's release cycle, and eliciting engagement from the HFOSS project community are just a few of the potential hurdles to overcome. This BOF will be led by a diverse group of faculty who have encountered and overcome these challenges. The organizers and other attendees will share approaches to student involvement in HFOSS as well as the challenges they've encountered and how they've overcome them. Faculty who are interested in involving students in real-world projects will be able to ask about topics including use of HFOSS in a range of courses including introductory courses, project selection, structuring courses and assignments, and gaining university buy-in, while making connections with more experienced faculty in this area. Participation of an open source community member will add perspective from open source communities.	Preparing to Teach Humanitarian Open Source (Abstract Only)	NA:NA:NA:NA:NA	2016
Briana B. Morrison	The number of PhD students researching Computer Science Education worldwide is growing. This is an organized opportunity for all those attending the largest Computer Science Education Conference to meet one another. All attendees will be invited to introduce themselves along with their institution and focus of research. They may also propose the most important question to be answered by the BOF. After introductions the attendees will have the opportunity to discuss research goals, job opportunities and career trajectories, future conference and publication plans, and even compare advisor stories. Undergraduates and masters students interested in a CS Ed PhD are also encouraged to attend and ask questions. Attendees will determine the best way to stay connected and everyone will be given the opportunity to opt-in for future communications.	CS Ed PhD Students Unite! (Abstract Only)	NA	2016
Pat Yongpradit:Deborah Seehorn:Tammy Pirmann:Irene Lee:Bryan Twarek	Our community has been seeing explosive interest and growth in K-12 computer science education. With this, a common question from states and school districts arises: What should students learn in a K-12 computer science pathway? We in the community are routinely asked to provide input on what is critical for students to learn at various grade levels. Code.org, CSTA, ACM, and lead states have kicked off the development of a framework for states and districts creating a K-12 pathway in computer science. This effort, called Framing K-12 CS, is not about developing standards (that will be left up to the CSTA/states to do), but rather a more high-level framework that can guide states or districts who want to then design their own curriculum, standards, assessments, or teacher certification programs. The framework would identify the core themes, practices, and (within each theme) learning statements that detail CS literacy when exiting certain grade spans (ex: exit competencies at grades 2, 5, 8, and 12). The CSTA and Code.org are aligning the development of this framework and the current CSTA standards revision. K-12 practitioners, researchers, states, districts, industry, and non-profit organizations have been involved throughout the development. This BOF will allow the CS education community to get an internal community preview of the framework and standards before the larger public review period later in the Spring, and discuss its relationship to the CSTA standards. The BOF will include the opportunity to give input and ask questions.	Defining Concepts, Practices, and Standards for K-12 CS (Abstract Only)	NA:NA:NA:NA:NA	2016
Karen Jin:Bonnie K. MacKellar	Many, if not most, computer science majors plan on careers in some aspect of software development in industry. Software development in industry is characterized by extensive use of tools and specialized software to support large scale projects, such as Git, Maven, Gradle, Jenkins, Hibernate, and Spring. We want our students to have exposure to industry strength tools and systems, but want to avoid having our courses overwhelmed by tools with steep learning curves. In this session, we plan to discuss questions and issues that are raised when choosing, installing, teaching, and using industrial strength tools and frameworks in software project courses. Bring your suggestions for favorite tools and frameworks, ideas on learning activities, and support materials. Some of the questions we might tackle: How do we identify tools that support our course learning objectives? How do we find the time and resources to learn the tools? How do we work with our IT staff in installing and configuring the tools? How many tools and systems should we use in a project course, and when do we merely start overwhelming the students' And finally, what works?	Industry Strength Tools for Software Engineering: What Works, What is OverKill? (Abstract Only)	NA:NA	2016
Colleen M. Lewis:Chris Gregg	"Why doesn't my code work?" Instructors and TAs hear this question day in and day out during introductory computer science courses, and beyond. Students arguably have a harder time learning how to debug their own (and others') code than they do in learning how to plan and write the code in the first place. Debugging strategies are difficult to teach, and there are pros and cons to different debugging methods (e.g., print statements vs. gdb vs. Googling). This BoF will elicit strategies for teaching debugging to CS students, and we will discuss the benefits of introducing certain tools earlier or later in the curriculum. We will also discuss how to assess whether students are able to debug code effectively. All suggestions will be posted on CSTeachingTips.org for dissemination (See tinyurl.com/CSTT-TAs for tips from SIGCSE 2015). We welcome attendance from seasoned and novice instructors, and from teaching assistants.	How Do You Teach Debugging?: Resources and Strategies for Better Student Debugging (Abstract Only)	NA:NA	2016
Jakita Thomas:Shaundra B. Daily:Mikala Streeter	As the conversation for broadening participation in computer science expands, the need for diversity among computing students becomes clearer. Yet, each year at SIGCSE, there are very few opportunities for people working with, or interested in working with students of color at the K-12 AND university levels to share experiences and collaborate on how to best support our students. This BOF will provide a platform for not only discussing effective, culturally relevant approaches to teaching computer science to students of color, but also addressing questions and concerns of people serving this demographic.	Supporting Students of Color in Learning Computer Science (Abstract Only)	NA:NA:NA	2016
David Reed:Mark R. Nelson	The Computer Science Teachers Association (CSTA) is a member organization of more than 21,000 educators and supporters of K-12 computer science. It was formed by and is affiliated with ACM, but serves as an independent non-profit with a mission to support K-12 CS teachers and promote computer science education. The past year has been a landmark one for CSTA, with the hiring of a new Executive Director, Dr. Mark R. Nelson, as well as a number of new initiatives. These initiatives include a new Website, expanded member benefits, new partnerships and advocacy programs, and a greater emphasis on professional development and research. This session will provide a brief overview of some of these initiatives, as well as introduce plans for the organization that are currently in development. The majority of the session will be an open forum in which attendees will be encouraged to voice their opinions and provide feedback to the Executive Director and members of the CSTA Board of Directors in attendance. Current CSTA members, along with any SICGSE attendees who have an interest in K-12 CS education, are encouraged to attend, learn about CSTA's efforts, and share experiences that can guide the future of CSTA and K-12 CS education.	Current Initiatives and Future Directions of the Computer Science Teachers Association (CSTA) (Abstract Only)	NA:NA	2016
Marty Stepp:Allison Obourn:Jessica Wolk:Victoria Kirst	Several times in the past few years we have held BoF sessions about teaching web programming at the college level. Our feedback indicates that the most valuable aspect of the past sessions was simply to get everyone together for an exchange of ideas and information, so this will be the focus of the session again. We'd like to bring together two groups of web programming instructors: Newcomers who have not yet taught this material before (or are just starting) and want to soak up information, and veterans who have now taught it and have insights to share with the group. Newcomers can ask questions about materials, languages and technologies to use, what works and what doesn't, and so on. Veterans can share tips from the classroom and helpful resources. We can also discuss the latest technologies such as HTML, ECMAScript/JavaScript, iPhone/iPad, Android, and web application frameworks such as Node.js, Rails, AngularJS, and more.	Web Programming (Abstract Only)	NA:NA:NA:NA	2016
John P. Dougherty:Joseph E. Hollingsworth:Joan Krone:Murali Sitaraman	Computing students often have difficulty understanding the relevance of the math we teach, though educators appreciate the significance. This BoF will discuss ways to connect this math with what computing students think they should be doing: programming. This BoF will focus on the benefits (and perils) of connecting math to the development of correct programs with the goal of motivating the relevance of the math-related portion of the ACM/IEEE Computer Society CS2013 curriculum. The discussion will continue the spirit and essence held by the math-thinking working group, a distributed working group of approximately 170 people who have been promoting and clarifying the importance of mathematics in computer science education.	Mathematical Reasoning in Computing Education: Connecting Math We Teach with Writing Correct Programs (Abstract Only)	NA:NA:NA:NA	2016
Christopher D. Hundhausen:Adam S. Carter	Computing educators have become increasingly interested in learning analytics, which involves collecting and analyzing data on students' learning processes and outcomes for the purpose of improving learning and instructional practices. A variety of computer programming environments enable the automated collection of log data on students' programming processes. In addition, log data on students' online social behavior can be easily collected. All of these data can be analyzed alongside data on students' learning outcomes in order to identify correlations between learning processes and outcomes, and ultimately to better tailor instruction to students' needs. This BOF will provide a platform for discussing the emerging field of learning analytics within the context of computing education. The following questions will serve as a starting point for our discussions: (1) What types of data should we be collecting on computing students' (2) How can we best analyze these data in order to gain meaningful insights into students' learning processes? (3) How can we design effective instructional interventions based on the data we collect and analyze?	Exploring Learning Analytics for Computing Education (Abstract Only)	NA:NA	2016
Josh Hug:Daniel D. Garcia	As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Providing timely effective feedback for students, exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating diverse course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content. A master list of such tips will be compiled and provided to the SIGCSE community.	Handling Very Large Lecture Courses: Keeping the Wheels on the Bus II (Abstract Only)	NA:NA	2016
Kate Lockwood:Maureen Doye	The National Center for Women & Information Technology (NCWIT) works with faculty at all stages of the pipeline to create measureable change at their educational institutions. While faculty are typically committed to this work, they often do not have the time or expertise to create clear, measureable goals that can be assessed and reported to funders or administration. In this BoF, participants will work with NCWIT-developed change tracking tools, and social scientists to develop goals for their home institutions. To gain the most out of the session, please bring your Internet enabled device to try hands-on activities during the session.	Setting Quantifiable Goals for Broadening Participation in Computing (Abstract Only)	NA:NA	2016
David E. Johnson	Higher education has the opportunity (and often the mandate) to provide STEM outreach to their communities. Summer camp programs are one mechanism for providing quality CS learning experiences to a wide audience. This BOF will provide a platform for discussing strategies to make summer camps fun and sustainable. What are camp topics have been successful? How is funding obtained and sustained? Nationally, technology camps run the gamut from small, one-week programs to large camps that serve hundreds. The proposer will share his experience developing the University of Utah GREAT camps (www.cs.utah.edu/~dejohnso/GREAT), which have over 700 students attend one-week camps and hopes the BOF will attract others with their own experiences.	Computer Science Summer Camps: Making Summer Programs Fun and Sustainable (Abstract Only)	NA	2016
Jennifer (Ginger) Alford:Erik Brunvand	The growing do-it-yourself movement relies heavily on electronics, code, and data. Abundant resources and low cost materials result in people of all ages seeking to learn how to master these modern creative supplies. We will discuss how computer science educators might tap into teachable moments provided by this voluntary, informal, enthusiastic movement to promote formal computer science study. The success of introducing formal computer science skills in the context of computing as a creative tool has been well established in the areas of media computation and digital art. It is natural to extend this idea to computing as a tool for creating physical objects and for interacting with the physical world in different ways. This discussion will focus on examples of creative projects that expose topics in computer science, including microcontrollers, 3D printing, laser cutting, toy hacking, and environmental sensing. The session will emphasize the types of computer science concepts that naturally tie into each project. Attendees are encouraged to share their own project experiences and to reflect on lessons learned, accessibility of concepts, and practical issues of class management.	Leveraging CS Teachable Moments in the Maker Movement (Abstract Only)	NA:NA	2016
Lillian N. Cassel:Don Goelman:Darina Dicheva:Heikki Topi	Data Science programs are emerging in many areas and are related to many disciplines. This includes sciences, social sciences, business, journalism, history, and any other area dealing with massive amounts of data. Some institutions are establishing majors or minors in data science while others need to incorporate some level of introduction to relevant topics within the context of other coursework. The BOF will engage SIGCSE participants who have views on the content and role of courses and programs in data science. Two existing NSF sponsored projects will seed the discussion. One of the projects investigates the use of flipped classroom instruction for course material in data science, with significant attention to what can be done with a minimum of prerequisites. The other project produced a workshop to elicit opinions from a number of perspectives on what are the core elements of data science and how the subject is seen by different disciplines. Results from the workshop will be available at SIGCSE. With these as a starting point, participants in the Birds of a Feather session will explore the emerging field of data science and its relationship to computer science education.	Brainstorming Data Science as a Fluency Course for Non-Majors and as a New Specialization (Abstract Only)	NA:NA:NA:NA	2016
Amardeep Kahlon:Linda Smarzik:Mary Kohls	Many community colleges are looking at Competency Based Education (CBE) as a way to increase student recruitment, engagement, completion, and transfer to baccalaureate programs. In addition, colleges are looking at CBE as a way to reduce costs as well as provide students with clear, marketable skills for employment. CBE is particularly suited to computer science due to the nature of the discipline where well-defined, measurable outcomes can be designed and implemented. Is your college exploring a curricular redesign using CBE? Do you want to know what CBE is and how to implement a CBE curriculum in computer science? This BoF will host a discussion on planning, implementation, and scale-up of CBE programs. Besides learning about CBE, this BoF will provide attendees with a chance to connect with others trying to implement CBE programs so that they can share knowledge, share resources, and form future collaborations. The recent CS2013 curricular guidance will also be discussed as an important resource for developing CBE in CS.	Competency Based Education in Lower-Division Computer Science Taught at Community Colleges (Abstract Only)	NA:NA:NA	2016
Richard Weiss:MIchael E. Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne:Siddharth Kaza:Ambareen Siraj	We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. However, we also want to assess how much students are learning from these exercises, and the exercises themselves could be used to assess what students know. Creating new hands-on exercises requires significant preparation on the part of the instructor. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. The purpose of this BOF is two-fold: 1) to continue to bring together instructors who have developed hands-on exercises with those who would like to use them, and 2) extend the discussion to include assessment of student learning. We recognize that few CS programs can afford new required courses, so we will discuss ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering, algorithms and programming (CS0, CS1, CS2). The questions we will ask are, "What exercises have you tried? What are your experiences? What are you looking for? What are the learning goals for your students? How do you assess them?" Recent hiring forecasts indicate that there is still a tremendous need for skilled information security experts. Security is one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. It is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, discuss how to teach and evaluate analytical skills, and discuss how we know if we are making a difference. We plan to share experiences, practices and ongoing efforts, including our own (e.g., our teaching experiences, Security Injections, the Security Knitting Kit project, The EDURange project and our dissemination of other infosec interactive exercises such as SEED labs). Both Security Injections and EDURange have features that address assessment.	Assessment of Security Knowledge, Skills and Abilities using Hands-On Exercises in 2016 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2016
Joseph Mertz	This BOF is intended to allow faculty interested in global service learning, Information and Communication Technology and Development (ICTD) research, and other cross-cultural experiences an opportunity for information sharing. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. And how can these experiences be evaluated? This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations. We will discuss means for sharing best practices, news, materials, and project artifacts. We will also explore opportunities for collaborating on projects and joint proposals.	Student ICTD Research and Service Learning Abroad (Abstract Only)	NA	2016
Aaron Bloomfield:Borja Sotomayor	Programming contests have a number of pedagogical benefits: they reinforce many concepts and skills that students see in computer science courses, build cross-cutting skills such as teamwork, and can improve job prospects by better preparing students for technical job interviews. The largest and oldest inter-collegiate programming contest in the world is the ACM's International Collegiate Programming Contest (ICPC). Participating in this contest can be fun and instructive for students, but some schools are discouraged from participation because of the large hurdles involved in forming an effective programming contest team, or in making an existing team more effective. A key to success for coaches and teams is to connect with existing individuals who are involved in the process and learn from them, as it is very hard to initiate effective involvement with no external help. This birds-of-a-feather will bring together existing ICPC coaches with other faculty who want to start such a programming contest team, or who want to improve their existing teams. Discussions will include issues that prevent greater participation in the North American super-region, as well as the overall international ICPC climate. Extensive links to existing resources -- both online and published -- will be provided, as well as a means for coaches to foster networking and communication. Strategy guides, including an article in this year's SIGCSE conference, will be discussed and distributed.	Increasing Programming Contest Participation for Fun and Profit (Abstract Only)	NA:NA	2016
Kathy Menchaca Isbister	This session is for K-12 (primary/secondary) educators who would like to talk about what types of professional development would be most relevant to them. It is also for curricular innovators who offer CS professional development to share how successful their attendees have been at implementing the strategies learned through their programs, and if attendees were able to use any materials the program provided in their own classrooms. We welcome an open and positive dialogue on opportunities for improvement in professional development offerings, and a celebration of successful strategies. The discussion leaders will share their own experience with the NSF funded Adventures in Alice workshops to prompt dialogue, and will encourage all attendees to actively participate in the session by sharing their own experiences, concerns, and triumphs.	Providing Impactful Professional Development Teachers Can Implement (Abstract Only)	NA	2016
Ambareen Siraj:Sheikh K. Ghafoor	Information Assurance and Security has been designated as a new knowledge area in the new ACM/IEEE-CS Curricula 2013. This is not a trivial task to accomplish, especially with lack of resources. With support from NSF (Award# DUE-1140864), we have developed a set of readily available resources called SecKnitKit (Security Knitting Kit, www.secknitkit.org), which offers a suite of instructional material for non-security faculty (faculty whose primary teaching/research focus is not security) to integrate security in upper division CS courses such as operating systems, software engineering, computer networks and databases. As part of the NSF CReST (CyberWorkshops: Resources and Strategies for Teaching Cybersecurity in Computer Science, DUE-1438861, www.crest4cs.org) project, this workshop will introduce CS faculty to the SecKnitKit resources that can be easily adaptable into any standard CS curriculum. The participants will receive access to all SecKnitKit materials (instructional and assessment) of interest and demonstrated use of the active learning exercises. Each participant will receive $125.00 stipend for his/her time. Requires a Windows or Mac laptop. Enrollment is limited to 28 participants who teach at least one of these courses: operating systems, software engineering, computer networks and databases).	CReST-Security Knitting Kit: Ready to Use Teaching Resources to Embed Security Topics into Upper Division CS Courses (Abstract Only)	NA:NA	2016
Bill Manaris:Tobias Kohn	This is an introduction to creative software development and music making in Python. This material is intended for CS0/CS1 courses and for courses at the intersection of computing and the arts. The workshop will introduce music making activities for teaching traditional CS1 topics, GUIs, event-driven programming, and connecting to external devices (e.g., smartphones, digital pianos) via MIDI and OSC (Open Sound Control). Participants will be introduced to Jython Music (http://jythonMusic.org), a library of Python modules for creative programming and music making, and will be making their own music artifacts a few minutes later. Intended audience: Computer science educators interested in teaching creative programming and computational thinking for CS0, CS1, introductory courses in the intersection of computing and the arts, and courses intended to attract and retain new CS majors. Some familiarity with Python expected. Each participant will receive a copy of (1) handouts to be used during the workshop, (2) sample student assignments and projects, (3) API documentation, (4) all required software, and (5) numerous sample programs. Laptop required (with Java JDK 7 or higher). All other software will be provided. Headphones are recommended.	Making Music with Computers: Creative Programming in Python (Abstract Only)	NA:NA	2016
Dan Armendariz:David J. Malan:Nikolai Onken	This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker "container" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional "less comfortable" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.	A Web-Based IDE for Teaching with Any Language (Abstract Only)	NA:NA:NA	2016
Lecia J. Barker:Leisa D. Thompson	Most academic departments have outreach efforts to inform potential students and the public about their computing majors. Most participate in events and produce materials to communicate with students, teachers, parents, and employers. Often, however, these recruiting efforts are attended in an opportunistic way rather than strategically. Often, little thought is given to the return on investment of this nontrivial use of scarce resources (money, time), the message conveyed to the particular audience, or to tracking outcomes. In this workshop, participants will develop an actionable plan for increasing the enrollment of qualified women into their undergraduate majors. The workshop philosophy is that departments should accomplish the greatest return on investment, in the shortest time to bring benefits, with the smallest resource commitment. After all, recruiting women is rarely one's "day job." Using research-based materials developed by the National Center for Women & Information Technology (NCWIT) and ideas shared by NCWIT's Academic Alliance members, the presenters will provide information, a planning structure, resources, and activities to support participants in developing a strategic plan to improve the gender diversity of their undergraduate majors.	High Yield in the Short Term: Planning Strategically to Get Women into your Major (Abstract Only)	NA:NA	2016
Clifton Kussmaul:Helen H. Hu:Chris Mayfield	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. In a POGIL classroom, teams of 3-5 learners work on activities with active facilitation by the teacher. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. In a POGIL classroom, the teacher is not a lecturer, but a facilitator who helps to ensure that all students are engaged and able to achieve the learning objectives. POGIL activities have a particular structure based on learning cycles. POGIL is a research-based instructional strategy, and studies show that it can significantly improve student performance. Workshop participants will work through POGIL activities as students. Participants will also work through meta-activities that use POGIL and are designed to help teachers learn core POGIL concepts, practices, and benefits. POGIL materials for a variety of CS concepts will be shared. More information is available at http://pogil.org and http://cspogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional.	Guiding Students to Discover CS Concepts and Develop Process Skills using POGIL (Abstract Only)	NA:NA:NA	2016
Lenore Horowitz:George Berg:Kimberly Van Orman	Even when we believe the research that shows that active learning is particularly helpful to both engage and empower students--they learn better, they learn deeper and it addresses issues of diversity--it's often not clear to us how we can implement it while keeping the quality of our course high. At UAlbany, courses taught using TBL including: computer programming, data structures, databases, web programming, networking and others. TBL is a structured method that can help instructors improve student learning and energize their classrooms. Team Based Learning (TBL) is an approach to course design that takes advantage of research into what helps students learn. Students work in permanent teams and course meetings are organized around application exercises. Courses are divided into units, and students are held responsible for the core reading in a beginning-of-unit test taken both as individuals and as teams. Application exercises conform to core principles ("4S"): Teams all work on the SAME problem, teams make a SPECIFIC choice, the problem must be SIGNIFICANT, and the teams must make a SIMULTANEOUS report of answers. A variant of the "flipped classroom," the TBL course spends far less time "covering the material" in class, allowing course time to be spent on skill development and feedback on student work. In this hands-on workshop, participants will experience a model TBL learning sequence and learn active learning techniques that they can adopt in any classroom while learning the basics of the TBL method.	Engage, Energize and Empower Your Students with Team-Based Learning (Abstract Only)	NA:NA:NA	2016
Joel C. Adams:Richard Brown:Elizabeth Shoop	OpenMP is an industry-standard, platform-independent parallel programming library built into all modern C and C++ compilers. Unlike complex parallel platforms, OpenMP is designed to make it relatively easy to add parallelism to existing sequential programs, as well as write new parallel programs from scratch. In this fun, interactive, hands-on workshop, participants will use OpenMP to learn about a variety of parallel programming concepts, including single program multiple data (SPMD) execution, fork-join threading, parallel loops, parallel blocks, atomic execution, mutual exclusion, and others. Participants will explore 15 short programs designed to help students understand specific parallel concepts, plus several longer programs in which OpenMP is used to solve significant problems. The workshop includes: (i) an introduction to OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how OpenMP may be used to achieve parallel computing objectives in CS 2013. Participants will also view visual examples that let students see parallelism happening in real time. Participants will need a laptop with an SSH client (e.g., BitVise, PuTTY), or a laptop with a compiler that supports OpenMP (e.g., gcc 4.2 or later, Visual Studio 2008 or later); Linux, Mac, and Windows laptops will be supported. Knowledge of a C-family language (e.g., C, C++, Java, ...) may be helpful but is not required to benefit from the workshop. All materials from this workshop will be freely available from csinparallel.org.	Teaching Parallel Computing Concepts with OpenMP (Abstract Only)	NA:NA:NA	2016
Clifford A. Shaffer:Thomas L. Naps:Susan H. Rodger	The OpenDSA eTextbook system provides a practical way for instructors to adopt algorithm visualizations (AVs), state ma-chine simulations, and interactive practice exercises into a variety of courses, including CS2, Data Structures, Algo-rithms, Programming Languages, and Formal Languages. An OpenDSA eTextbook can be used either as a complete re-placement for your traditional textbook and assignments or as supplemental readings, auto-graded assignments, or student practice. In this workshop, we present use cases from success-ful adoption of OpenDSA into existing courses. We will guide you past the real-life hurdles and pitfalls that get in the way of using AVs, interactive exercises, and simulators. We show you how to adopt OpenDSA exercises, how to configure existing OpenDSA materials to suit your needs, and provide an over-view of how to create new AVs or exercises. This workshop is about letting you engage students with highly interactive mate-rials in ways that you have said for years that you wanted to do.	Using OpenDSA eTextbooks in Your Class (Abstract Only)	NA:NA:NA	2016
Mark E. Hoffman:Jerod Weinman	This workshop introduces participants to an informal writing process that promotes student engagement and critical thinking with easily-assessed, low-stakes assignments. Unlike the formal writing typically used in software development or capstone courses to demonstrate knowledge, informal writing supports student learning (i.e., writing as thinking). Participants will use the Prioritize, Translate, and Analogize (PTA) Process in a model assignment; discuss how it works; and use it to develop a writing assignment. Participants will receive materials for the workshop assignment, samples of prompts employing the PTA process in a variety of courses, and other support materials. Participants are encouraged to bring an assignment idea to develop at the workshop. The workshop is intended for computer science instructors who want to learn about strategies for integrating writing in their courses to engage students and improve their critical thinking while limiting time for instruction and evaluation. No laptop is required.	Reading and Writing Like Computer Scientists: How to Promote Critical Thinking and Student Engagement (Abstract Only)	NA:NA	2016
Stan Kurkovsky	Lego Serious Play (LSP) is an experiential and highly creative process designed to facilitate strategic planning, team building, and problem solving using Lego bricks. In the LSP methodology, team members use their intelligence both as individuals and as a group to build simple models representing various concepts in response to a question posed by the faculty facilitator. Discussing the models helps students communicate valuable aspects of their own understanding and interpretation of the problem at hand, explore the team dynamics, and reduce the complexity of many projects. This workshop is intended for faculty interested in teaching undergraduate and graduate software engineering and related courses. This workshop will also benefit all other faculty (including high school teachers) looking for ways to supplement their course material with engaging and playful hands-on activities aimed to strengthen the teamwork, oral communication, problem solving, and design skills of students. LSP-based hands-on activities discussed during the workshop focus on a single software engineering topic including requirements engineering, architectural design, software testing, software dependability, project planning and management, design patterns, etc. Workshop participants will learn the basic principles of LSP and participate in two hands-on activities illustrating how LSP can be used to teach software engineering concepts in an engaging context. Participants will receive the necessary Lego kits, which they can keep after the workshop. Laptop is not required for this workshop. This work is supported in part by a 2015 ACM SIGCSE Special Project grant. More information at http://www.cs.ccsu.edu/~stan/sigcse2016/.	Lego-based Case Studies for Teaching Software Engineering Concepts throughout the Curriculum (Abstract Only)	NA	2016
Daniel Zingaro:Leo Porter:Quintin Cutts:John Glick:Joe Hummel:Cynthia Lee:Jaime Spacco	Recent work in computing has converged on a collection of complementary findings suggesting the value of the Peer Instruction (PI) pedagogy. Compared to lecture, PI has been shown to decrease fail rates, increase final exam grades, and increase engagement and enjoyment. In PI, students work together to exchange perspectives and use clickers to answer challenging conceptual questions in the presence of a knowledgeable instructor. In our efforts to mentor potential PI adopters, we note difficulties bootstrapping PI uptake at new institutions and new departments. In this workshop, our main goal is to support potential adopters in the process of shifting from lectures to PI. In recent months, we have contributed materials for many freely-available PI courses, and led a successful 3-day NSF-funded PI workshop. We will work with participants and their existing lecture-based resources to begin considering the ways that PI can enhance student learning. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer Instruction in Computing: A Focus on Student Learning (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2016
Jamie Payton:Tiffany Barnes	The STARS Computing Corps is a national alliance with the mission to grow a diverse community of computing leaders. STARS serves as a framework for integrating civic engagement into college computing departments with the goals of broadening participation of underrepresented groups in computing, recruiting K-12 students into the computing pipeline, and retaining students in computing majors. The STARS approach to broadening the participation of women and underrepresented minorities in computing is based on research that has shown the value of creating a community and sense of identity. The Corps creates such a community across multiple institutions, including women's and historically black colleges and universities, with members that share the core values of becoming responsible leaders who use their computing skills for social benefit. Each cohort of students and faculty at a STARS member university collaborates with local K-12 schools and industry partners to conduct computing-related outreach, service, and research that can broaden participation in computing. These local cohorts help to build community within and across STARS member institutions, retain students in college degree programs in computing, recruit new students into computing, educate local K-12 teachers, counselors, students, and parents about computing, and build bridges with local industry and community organizations. This workshop will provide hands-on training for new schools to learn how to begin and build a STARS Computing Corps cohort on their own campus.	How to Launch a STARS Computing Corps Cohort to Improve Retention and Broaden Participation in Computing (Abstract Only)	NA:NA	2016
Bill Siever:Michael P. Rogers	The Internet of Things (IoT), considered by many to be the next big revolution in computing, refers to the trend to include networking and computing in a wide range of devices, such as watches, appliances, health monitors, toys, etc. Including IoT applications early in the curriculum may serve multiple pedagogical purposes, such as demonstrating social relevance, (e.g., health monitoring applications) and motivating other CS topics (e.g. distributed systems, networking, OOP, event driven programming, computer organization, and databases). This workshop will introduce participants to basic terms and technologies behind IoT. Participants will then work through a hands-on, classroom-ready exercise to build a complete IoT solution. The embedded portion of this solution, based on the popular Arduino platform (hardware provided), will be targeted at students who have completed CS1. The completion of a mobile app that interacts with the embedded devices will require CS2 skills. Participants should have an interest in IoT or be interested in engaging assignments for both introductory and upper level students. Participants are asked to bring a laptop computer and a recent mobile device, with appropriate software tools installed. Links to these tools, as well as a list of compatible mobile devices, will be provided. Most Android and iOS devices made within the last three years are suitable.	A Hands-On Introduction to the Internet of Things (Abstract Only)	NA:NA	2016
Blair Taylor:Siddharth Kaza	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop, part of the Cybersecurity Resources and Strategies for Teaching (CReST) project, www.crest4cs.org, will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing Secure Coding in CS0, CS1, and CS2 (Abstract Only)	NA:NA	2016
Amjad Altadmri:Neil C.C. Brown	Blocks-based programming has become a very popular technology for teaching introductory programming in schools, but it still faces some issues as learners progress. The large transition gap between blocks-based and text-based programming is a source of worry for many educators. However, the difficulties learners have with developing and maintaining progressively larger and more complex programs in block-based systems force teachers to move students on to text-based systems rather than remain with blocks. Greenfoot 3 introduces frame-based programming, a hybrid of blocks-based and text-based programming. Frame-based programming adds comprehensive keyboard support, along with several other usability improvements aimed at removing frustrations for intermediate and experienced programmers, while also providing a way to fill the gap in the transition process. This workshop will show how to teach introductory programming using the new frame-based editor from Greenfoot 3. We will help the participants to explore the new editor in a hands-on session, accompanied by explanations of its distinctive features and how they have been designed to overcome the friction and niggles present in current blocks-based editors, while also providing pedagogical guidance for learners. Participants should bring their own laptop with the latest version of Greenfoot installed, available from www.greenfoot.org	Building on Blocks: Getting Started With Frames in Greenfoot 3 (Abstract Only)	NA:NA	2016
Don Blaheta:Adrienne Decker	Educators responsible for coordinating a staff to grade a large volume of exams or projects have learned, sometimes the hard way, the importance of writing good rubrics: they keep the graders on track, grading equitably, consistently, and quickly. But these benefits of a well-written rubric extend also to those of us without a grading staff, even to single classrooms of twenty or so students. Good rubrics will change your life! In this workshop, we will present various principles we have found to write effective analytic rubrics for student programming work, helping to keep our grading unbiased and to assess the student work more quickly. We will show specific examples of good rubrics, and then participants will jointly grade some sample work according to a shared rubric, discussing what works and what doesn't. Finally, participants will break into small groups to workshop a rubric for an assignment they've given in their own class. Most examples will be at the CS1/CS2 level (and CS1-only educators are welcome), but some of the discussion will address higher-level courses as well. Participants should bring the specification/handout for a programming assignment they have recently given in class (which need not be CS1/CS2), and are encouraged (if possible) to bring a small number of handed-in student solutions for that assignment. Laptops are not necessary unless that's how the participant is bringing or accessing their student solutions.	Rubricking Like a Boss: Writing and Using Rubrics For Faster, Fairer Grading of Student Assignments (Abstract Only)	NA:NA	2016
Aaron Cadle:Ira Greenberg:Deepak Kumar:Dianna Xu:Ursula Wolz	NA	Permeating Data Visualization in CS Courses (Abstract Only)	NA:NA:NA:NA:NA	2016
Kelvin Sung:Rob Nash:Jason Pace	Designed specifically for instructors of university or high school Introductory Java Programming Classes (CS1/2) with no background in videogames or computer graphics, and based on our original casual game designs, this workshop will: (1) lead participants through structured gameplay sessions; (2) analyze how game mechanics contribute to player engagement; (3) map core game logic and mechanics to programming constructs taught in CS1/2 classes (e.g., conditionals, loops); (4) guide participants to develop simplified versions of these games based on our custom APIs and using CS1/2 programming constructs; (5) present sample teaching materials based on the games that are being used in our own classrooms, including: lecture materials, hands-on worksheets, and programming assignments; and (6) discuss our experiences using the materials, including what worked and what to avoid. Our games are innovative twists on popular casual genres (e.g., a Breakout variant using the z-plane, and a Zuma variant with user-movable paths) and we're currently enhancing the educational versions for commercial release. We've developed custom APIs for our games that are readily accessible to new programmers based on the successful Game-Themed CS1/2 project. Participants of this workshop will gain the confidence to build similar games, examine approaches to developing teaching materials based on the games and APIs, and understand the challenges inherent to this approach. Students will have the unique opportunity to play with commercial-quality game demos while using CS1/2 concepts to build games that are fun and appropriate for all ages.	Learn CS1/2 by Playing and Building Commercial Grade Casual Games (Abstract Only)	NA:NA:NA	2016
Richard A. Brown:Elizabeth Shoop:Joel C. Adams	Map-reduce computation is the on-ramp to data-intensive cloud computing, and arguably the most widely deployed form of parallel/distributed computing. Participants will carry out exercises designed for students at CS1, intermediate, and advanced levels that introduce data-intensive scalable computing concepts using WebMapReduce (WMR), a simplified open-source interface to the dominant Hadoop map-reduce programming environment. WMR supports programming in a choice of languages including Python, Java, C++, and C#. Besides a hands-on experience with introductory teaching materials, the workshop includes an overview of teaching advanced map-reduce programming using WMR, and a comparison of WMR to direct Hadoop programming. All materials will reside on csinparallel.org, and the demonstration WMR system is reservable for participants' courses. Intended audience: CS instructors. Web-enabled laptop required.	CSinParallel: Using WebMapReduce to Teach Parallel Computing Concepts, Hands-on (Abstract Only)	NA:NA:NA	2016
Dennis Brylow	The inexpensive Arduino makes for an attractive embedded platform in introductory courses. Its many variants, open source tools, and well-established hobbyist community support a staggering breadth of possible uses. In this workshop, we concentrate on block-based programming of the Arduino, providing a smooth path for Scratch programmers to expand into the wider world of sensors, actuators, and embedded systems. The MUzECS curriculum is designed to be an inexpensive replacement for the costly final robotics module of Exploring Computer Science (ECS), but also has clear applicability to Advanced Placement Computer Science Principles (AP CSP) and even college undergraduate courses. The session will introduce the Arduino Leonardo board, detail various "shield" extensions that are available, and present the tools and resources needed for high school or college instructors to get started. Demonstration activities will focus on ECS-style lessons that build programmable musical instruments. Laptop required.	MUzECS: Block-based Arduino Programming for Exploring Computer Science (Abstract Only)	NA	2016
Kristine Nagel:Nannette Napier:Krishnendu Roy	This workshop will provide details on how to plan and run non-residential, week-long computing summer camps for 4th-12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, EV3, and Tetrix), EarSketch, and App Inventor. Georgia Tech helped start other computing camps at eleven other colleges and universities in Georgia from 2007 to 2010 as part of Georgia Computes! NSF BPC grant. Since 2014, as part of the Expanding Computing Education Pathways (ECEP) NSF grant we have also helped institutions start or expand summer computing camps in South Carolina, Massachusetts, and California. The workshop will include presentation about application forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptops are recommended for this workshop.	How to Plan and Run Summer Computing Camps: Logistics (Abstract Only)	NA:NA:NA	2016
Jeff Mickel:Bradley Beth	Thriving in Our Digital World: AP provides high school teachers a complete, classroom-ready curriculum, including custom online resources and flexible curricular materials, designed to satisfy the College Board's requirements for its new course, AP Computer Science Principles. Organized in a series of project-based modules, the course focuses on current areas of research among real-world computer scientists, including Big Data, digital manipulation, and data security. Beginning in Summer 2016, UTeach--the highly successful STEM teacher preparation program that began at The University of Texas at Austin in 1997 and is now being replicated nationwide--will offer professional development, ongoing support, and incentives for teachers to teach the course. UTeach's PD model encourages the participation of teachers with a variety of backgrounds and levels of experience, and leverages participating teachers' diverse areas of expertise to improve PD and support opportunities for all participants. Individuals who teach Thriving in Our Digital World: AP will join a national community of educators dedicated to improving K-12 computer science education and better engaging girls and other historically underrepresented groups in computing. K-12 educators and school and district administrators should plan to attend this hands-on workshop. Presenters will engage participants in demonstration lessons and activities, and participants will leave with materials and handouts that are directly relevant to K-12 computer science classrooms. Laptops are required.	K-12 Teacher Support for Computer Science Principles: An Introduction to the UTeach Course, Thriving in Our Digital World: AP (Abstract Only)	NA:NA	2016
Aman Yadav	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of research design; (2) learn about various types of research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests. The workshop will be beneficial to participants who have not yet done all of these activities as well as those who have some background in educational research. Participants will be provided with material on research designs.	Conducting Educational Research in the Computer Science Classroom: Choosing the appropriate research design to address your research questions (Abstract Only)	NA	2016
Daniel D. Garcia:Tiffany Barnes:Michael Ball:Emil Biga:Josh Paley:Marnie Hill:Nathan Mattix:Parisa Safa:Sean Morris:Shawn Kenner	The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 240 high school teachers. Our guiding philosophy is to meet students where they are, but not to leave them there. It covers the big ideas and computational thinking practices required in the AP CSP curriculum framework using an easy-to-learn blocks-based programming language called Snap! (based on Scratch), and powerful computer science ideas like recursion, higher-order functions and computability. Through the course, students learn to create beautiful images, and realize that code itself can be beautiful. Having fun is an explicit course goal. We take a "lab-centric" approach, and much of the learning occurs through guided programming labs that ask students to explore and play. In this workshop, we will provide an overview of BJC, share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of potential crowd-funded summer professional development opportunities. This is a hands-on workshop. Laptops are required, and all "handouts" will be digital.	AP CS Principles and The Beauty and Joy of Computing Curriculum (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2016
Baker Franke:Sarah Filman:Brook Osborne	App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. Rather than focusing on curriculum, this workshop will focus on how App Lab works as a programming tool in its own right, and how it was designed to aid and motivate student learning. Participants will get hands-on time with some of App Lab's more advanced features guided by a Code.org product manager, while working with the education team to help understand the educational philosophy that went into its development. Participants will come away with exemplars that highlight App Lab's possibilities, practice with some of its richer features, and do a hackathon to create something to share with each other (and the world)! Finally, we will end with a discussion about how best to integrate App Lab into existing courses. App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net. A laptop is required for this session. All other materials will be provided.	JavaScript Applications for CS0/CS1: Getting Hands-on with Code.org's App Lab (Abstract Only)	NA:NA:NA	2016
Ariel Ortiz	Web services (a.k.a. web APIs) allow developers to build web and mobile applications using data from multiple online sources. This workshop is aimed at CS instructors that wish to teach how to use and write web services using Node.js on a cloud development environment. Node.js is an open source JavaScript platform that is currently used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Over 120 companies in the fortune 500 are not only using, but embracing Node.js in their everyday operations. Using and writing web services in Node.js is significantly easier than using other environments based on languages such as C# or Java. Because we will be using a cloud platform, all our tools are readily available through any modern web browser, thus eliminating the hassle related to installing a complete standalone development environment. Teaching web API design with Node.js on the cloud provides our students a relevant real life technical skill. Workshop participants will use the free service provided by Cloud9 IDE (https://c9.io/) to learn how to write scalable RESTful web services using Node.js, the Express web framework, MySQL, and jQuery. Participants should have a working knowledge of HTML, JavaScript, and SQL. Additional information available at: http://node.arielortiz.info/ Laptop required.	Programming Web Services on the Cloud with Node.js (Abstract Only)	NA	2016
Nathan Sprague:Ralph Grove	The deployment of autonomous and semi-autonomous robots is likely to increase dramatically over the next decade. Recent autonomous vehicle prototypes illustrate both the rapid progress of the underlying technology and the commercial possibilities of robotics. The next few years are likely to see increased interest in robotics among both students and employers. The Robot Operating System (ROS) is an open-source software framework for developing robotics applications. It has become a standard platform with a wide range of supported robots and a vibrant software ecosystem. This workshop will provide a hands-on introduction to ROS. Participants will have the opportunity to write ROS-based Python programs to control a Turtlebot educational robot. We will discuss the benefits and challenges of using ROS in an undergraduate robotics course. The workshop is intended for CS educators with an interest in teaching robotics. Laptops will be provided. No experience with ROS or Python is required.	Teaching Robotics Using ROS (Abstract Only)	NA:NA	2016
Lien Diaz:Richard A. Kick:Andrew Kuemmel	The AP Computer Science Principles assessment model comprises two main components: 1) an end-of-course AP Exam (i.e., a paper-pencil, multiple choice questions); and 2) a through-course assessment that includes two (2) performance tasks in which students complete during class time. This workshop focuses on content and skills included in one of the through-course assessment performance tasks: Create -- Applications from Ideas. In this task, students are expected to collaborate with another student in the development process of writing a program, and because each student will submit her/his own program for AP scoring purposes, students are also expected to be able to continue working on their program individually. To obtain the knowledge and skills students will need to be successful with this performance task, students can consider practicing various possible ways to write programs individually and collaboratively. That said, teachers can support student success with this performance task by considering different ways to teach how to develop programs collaboratively (beyond Pair Programming). In this workshop, participants will experience different collaborative programming techniques to develop a program. This workshop is meant for programmers "from beginners to experts". In addition, participants will reflect on the collaborative process, thereby learning some of the essential knowledge and skills that students will need to obtain in order to successfully complete the Create performance task.	AP Computer Science Principles Performance Task: Create - Applications from Ideas, Approaches to Programming Collaboratively. It's a Hackathon Workshop! (Abstract Only)	NA:NA:NA	2016
Tiffany Barnes:Jamie Payton:Daniel D. Garcia	Increasing need for computing expertise in our everyday lives and in the workforce, paired with declining enrollments in computing by women and underrepresented minorities have made it critical to provide students with experiences in computing before college. CS10K is a national effort to engage 10,000 high school teachers in teaching computer science across the United States. With CS10K projects working on this goal since 2012 having prepared less than 1000 teachers for teaching computer science in high school, there is a need to scale professional development opportunities to local communities. College and university computing faculty have the unique preparation and call for community engagement that make it a win-win to support local high school teachers in learning to teach computer science. We will use the STARS model of building university-based communities that broaden participation in computing, adapted to the context of supporting K12 teachers to become change agents and educators prepared to teach computer science. In this workshop, participants will learn how to implement scalable team-based professional development for K12 teachers new to teaching computer science. We will provide resources to recruit, plan, and support small groups of new teachers to teach the new CS Principles course that will become an Advanced Placement course in 2016-2017. Laptops for attendees are optional.	Scaling up for CS10K: Teaching and Supporting New Computer Science High School Teachers (Abstract Only)	NA:NA:NA	2016
David P. Hayes:Dale F. Reed	In this workshop, participants will learn how to build custom, data-driven mobile apps using the hybrid model and how to scaffold app development projects to focus students' efforts on specific lesson, unit or assignment goals. It is intended for post-secondary or late secondary educators who want to increase student engagement by including app projects in their courses. With new tools and techniques, barriers to implementation have been reduced: in the hybrid model, developers use HTML5, CSS and Javascript - along with libraries enabling access to mobile device features such as accelerometer, camera, contacts, etc - to quickly develop apps and to distribute them on multiple platforms. Participants will learn how to create app interfaces using the Bootstrap Mobile framework, how to compile their apps using PhoneGap, and how to pull data from public APIs into their apps. Participants will also learn how to use Google tools to quickly create a web service, giving students greater capacity to design and develop relevant, engaging and useful apps. Participants will need a laptop or will need to work with a colleague and should have at least a rudimentary knowledge of HTML, CSS and Javascript.	App Development for All!: Learn the Hybrid Development Model and How Scaffolded Projects can Bring App Development to your Classes (Abstract Only)	NA:NA	2016
Chris Johnson:Heather Amthauer:Ryan Hardt:Peter Bui	Madeup is a text- and blocks-based programming language for making things up---literally. Programmers write sequences of commands to move and turn through space, tracing out printable 3D shapes with algorithms and mathematical operations. The language is designed to teach computation from a tangible, first-person perspective and help students integrate computation back into the physical world. In this workshop, we empower educators to use the freely-available and browser-based Madeup programming environment in their classrooms. Participants should expect to learn actively.	Mixing Code and 3D Printers with Madeup (Abstract Only)	NA:NA:NA:NA	2016
Owen Astrachan:Jeff Gray:Fran Trees	Many new curricula and tools have been developed recently to promote the exciting opportunities available in computer science. However, curriculum and supporting tools alone do not drive engagement -- the most interesting and innovative curriculum can still be taught in a disengaged manner, leading to lost opportunities for broadening the appeal and interest in computing across a diverse student population. The learning science literature on Cooperative Learning (CL) has been shown to increase class participation and student learning, while also promoting diversity in a manner that supports the differentiated instruction needed to engage students who have mixed abilities. This workshop will demonstrate how the best practices of CL can be applied in early CS courses (e.g., AP CS Principles AP CS A, or CS1). Workshop participants will be introduced to the CL structures that have been used in many different disciplines across multiple age/grade levels. These structures will be used to demonstrate specific applications toward computer science concepts. The workshop itself will be taught in a cooperative learning style so that participants can understand the dynamics and structure of a CL classroom. This workshop is intended for two types of educators: 1) K-12 teachers currently teaching AP CS A, CS Principles (CSP), or other introductory programming courses and 2) university faculty currently teaching CS 1 or other introductory computer science courses.	Infusing Cooperative Learning into Early Computer Science Courses to Support Improved Engagement (Abstract Only)	NA:NA:NA	2016
Michael P. Rogers:Bill Siever	Students raised on tablets and smart phones have a lot of expectations: data that is instantly available on all of their devices; social media integration so they can share that data with their friends; and push notifications, so that responses from their friends get the attention that they deserve. Unfortunately, the vendor-specific technologies required to make this magic happen are daunting, to put it mildly, well beyond the scope of a beginning mobile computing course. However, the last 2 years has seen the emergence of a new technology, Mobile Backend as a Service (MBaaS), that is vendor-agnostic and suitable for novice developers. This workshop will provide a hands-on introduction to this technology. Participants will be provided source code for Pigs Ahoy!, an implementation of the famed dice game Pig that lacks cloud storage and social media integration. During the course of the workshop, participants will add that functionality, and in the process of doing so, acquire a sufficiently detailed knowledge of MBaaS that they can confidently incorporate it into their classes. Because MBaaS is vendor-agnostic, participants may work on either iOS or Android versions of Pigs Ahoy!: full instructions will be provided in both Swift and Java, as well as snapshots of Pigs Ahoy! at various stages of completion, so that no one need fear being left behind. There are multiple MBaaS providers, and they offer similar capabilities and approaches. We will concentrate on the most popular, parse.com.	Solving the Cloud Computing Impasse with MBaaS (Abstract Only)	NA:NA	2016
Michael Erlinger:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF Proposals: Learn about Effective Proposal Writing via the Review Process (Abstract Only)	NA:NA	2016
Donald Slater:Wanda P. Dann	This workshop, designed for pre-AP, Introduction to Programming, Programming for non-majors, and CS1 Java courses, will introduce the tools in Alice 3 that are specifically designed to support a transition to Java and will provide experience with the software, a new textbook, and the available course materials. The workshop offers hands-on experience in programming with Alice 3 and Java, together. Participants will see how to use Alice 3 to build virtual worlds and how to transfer these programs into a Java IDE. The workshop will also explore curricular design and implementation. Alice 3 uses built-in tools including a Java language display that dynamically updates and displays the Java syntax as students build their Alice project, and a plugin for a Java IDE that allows students to start their projects in Alice and then continue their work by writing Java code. These tools allow students to develop animations and simple games using objects in a truly object-oriented style.	Transition To Java Using Alice 3 (Abstract Only)	NA:NA	2016
Austin Cory Bart	Software Engineers apply systematic techniques to formalize requirements, build tests, and plan out complex architectures. However, few Computer Science Educators bring the same rigorous methods to the design of their students' learning experiences. Educational theories of Instructional Design (compatible with a wide range of popular educational theories) bridge this gap by emphasizing meaningful assessment, identification of instructional objectives, and analysis of the learners; unfortunately, these theories have been neglected within Computer Science Education. I have applied the Dick & Carey Model of Instructional Design in two formal case studies to create new learning modules with extensive documentation, detailed components, and clear results. In fact, my formal evaluations of my materials with real learners suggest that students had average learning gains of up to 43%. More crucially, however, the model provided key opportunities to improve the instruction a priori and posteriori. My major contribution in this research is not the generation of new instructional materials, but the demonstration of the raw potential of this methodology for curriculum development.	Applying Formal Models of Instructional Design to Measurably Improve Learning in Introductory Computing (Abstract Only)	NA	2016
Carolin D. Hardin:Matthew Berland	While the USA struggles with a demand for computer programming education which exceeds the capacity of formal educational opportunities, online resources dedicated to programming are growing rapidly. One valuable way to measure the usefulness of these online resources is to examine the links posted in the forums of CS learning communities. We scraped and analyzed over 80,000 posts from two popular forums (Reddit and Stack Overflow), and found that how these communities use and talk about CS learning resources (such as books and tutorials) demonstrated their differing priorities. These results have much to suggest to both novices and teachers.	Learning to Program Using Online Forums: A Comparison of Links Posted on Reddit and Stack Overflow (Abstract Only)	NA:NA	2016
Mike Izbicki	This project describes an experimental course on open source software construction. The course has two twists on the standard project-based software construction course. The first twist is simple: all projects are developed and released on GitHub. The second twist is more radical: the course uses an "open source textbook." The textbook is hosted in a git repository that students are required to contribute to throughout the term. Contributions range from minor typo fixes to adding entire chapters. Currently, 88% of the textbook is written by students, including many of the assignments. We use student surveys, participation in social networking sites like GitHub, and web traffic logs to determine that these assignments had a positive effect on students' future contributions to the open source community.	Open Sourcing the Classroom (Abstract Only)	NA	2016
Euisung Kim	This work explores the trade-offs between time and frequency information during the feature extraction process of an automatic speech recognition system using wavelet transform features instead of Mel-frequency cepstral coefficients. The Speech Recognition Virtual Kitchen toolkit (www.speechkitchen.org) is used as the framework for implementing wavelet modules in a virtual machine loaded with the Kaldi recognition system. The SRVK toolkit is a computing resource that provides virtual machines for a variety of research and education purposes. Results comparing different wavelets and feature extraction approaches will be presented. The resulting virtual machine, which allows straightforward comparisons of signal processing approaches, is freely available for research and educational use.	A Wavelet Transform Module for a Speech Recognition Virtual Machine (Abstract Only)	NA	2016
Maíra Rejane Marques	Software engineering education is currently being taught in many universities with a hands-on approach, where students have to learn to develop software in teams, intending to simulate industry, to minimize the gap between what universities teach and what industry needs. The industry "simulation" that a university performs in software engineering courses is a good approach but it is normally undermined by student bad behaviors (free-riding, social loafing and student syndrome), which leads to lower team performance and lower team motivation. In this work I propose the use of reflexive weekly monitoring (RWM) to mitigate these students' bad behaviors that can disrupt team results. The use of the RWM in the past two semesters in a software engineering course, has improved teams' results in terms of both, project and final grades.	Monitoring: An Intervention to Improve Team Results in Software Engineering Education (Abstract Only)	NA	2016
Mohammed Seyam	Pair Programming is an agile practice that has numerous studies showing its benefits for education. The emergence of mobile software design education raises questions about the effectiveness of Pair Programming in this evolving field. Developing for mobile is different than regular desktop/web development in three major areas: having more than one screen to work on (i.e. computer screen and mobile device screen), connectivity issues (dealing with Bluetooth, GPS and location data, smart watches, and sensors), and User Experience (UX) issues. Our research probes unique challenges for Pair Programming when used in mobile software design classes, focusing on five mobile design topics: dealing with interface and data managements (as in fragments), using camera, handling multi-device connectivity, using sensors and collecting GPS data, and using microphones and speakers. The study highlights successes and challenges for Pair Programming for mobile applications, with the objective of providing a set of recommendations for instructors considering using Pair Programming in their mobile development classes.	Pair Programming for Teaching Mobile Development (Abstract Only)	NA	2016
Jeff Stern	Girls Who Code is a national nonprofit that operates after-school and summer programs to engage female students with computer science with the goal of reaching gender parity in the field. The Girls Who Code teaching philosophy and curriculum is designed around four major components: (1) developing a breadth of technical and computational thinking skills, (2) building on students' prior interests, (3) providing authentic exposure to mentors and real computer science projects, and (4) cultivating a community-focused classroom. Using qualitative and quantitative data collected from more than 1,500 students that have participated, this work explores the impact of Girls Who Code's intervention and the value of building community for effective computer science education.	Community and Collaboration in an All-female, Immersive Computer Science Program (Abstract Only)	NA	2016
Matthew R. Steuerer	Websites for dissemination of grant-funded projects can quickly become unsustainable once funding ends since they require significant human intervention to ensure that data are current and reliable. CABECTPortal is a website that maintains information about research projects that involve interdisciplinary pedagogical collaborations. It leverages social computational concepts and a machine learning algorithm, specifically k-means clustering, to improve the sustainability of dissemination efforts by engaging the research community in the process. Usability design concepts are integrated with throughout the site to enhance user motivation and engagement. This poster will present the machine learning algorithms that were implemented for the recommendation system used in CABECTPortal. Acknowledgment: This project is based on work supported by the National Science Foundation under NSF DUE Award# 1141170. Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation (NSF).	Implementing K-Means Clustering and Collaborative Filtering to Enhance Sustainability of Project Repositories (Abstract Only)	NA	2016
Jake A. Trower	Tunely and Pixly are web-based programming environments for media computation built using the Blockly visual programming editor library. These language environments were inspired by Georgia Tech's Media Computation approach and allow images (Pixly) and sounds (Tunely) to be transformed programmatically. Tunely and Pixly provided an approachable environment to students who have little to no experience in programming, and allow younger students to explore programming in a fun way without the challenges and frustration of learning syntax in a textual language. This SRC poster summarizes the design and implementation of these languages. We also briefly introduce initial work on integrating an accessibility tool to allow children with disabilities to explore these opportunities.	Web-based Visual Programming for Media Computation Using Blockly (Abstract Only)	NA	2016
Alexander Bender	In computer science experimentation, more researchers have begun using Principal Component Analysis (PCA). Discerning how to apply this mathematical technique can be confusing; papers in this area tend to focus on results rather than the methodology in using PCA. Consequentially, reproducing or verifying PCA results is difficult without prolonged communication with the authors. Our larger goal is to create a general descriptive methodology for PCA usage and determine criteria for evaluation of PCA software implementations. This will be a resource for discipline-specific researchers. Here we focus on evaluation of the program Cluster 3.0 with a Noni fruit experiment from our chemistry department.	An Evaluation of Cluster 3.0 as a General Tool for Principal Component Analysis (Abstract Only)	NA	2016
Christopher A. Francis-Christie	The safety of information inside of cloud networks is of interest to the network administrators. In a new insider attack, inside attackers merge confidential information with videos using digital video steganography. The video can be uploaded to video websites, where the information can be distributed online, where it can cost firms millions in damages. Standard behavior based exfiltration detection does not always prevent these attacks. This form of steganography is almost invisible. Existing compressed video steganalysis only detects small-payload watermarks. We develop such a strategy using distributed algorithms and classify videos, then compare existing algorithms to new ones. We find our approach improves on behavior based exfiltration detection, and on the existing online video steganalysis.	Detecting Insider Attacks with Video Websites using Distributed Image Steganalysis (Abstract Only)	NA	2016
Caitlin R. Hanley	Every December, Code.org provides a set of Hour of Code exercises as part of CS Education week. However, motorically challenged students may be unable to participate because they cannot use the mouse and/or keyboard to interact with the Blockly-based Graphical User Interface and drag-and-drop programming environment. Programming by Voice (PBV) allows users to interact with block-oriented programming environments by speaking their program, rather than using a keyboard and mouse. The Myna tool, a PBV tool that was originally designed for the Scratch programming language, has been modified to work with the Code.org programming environment. Children with a mobility disability can use this tool to experience Code.org's educational opportunities.	Programming by Voice to Support Hour of Code for Children with Motor Disabilities (Abstract Only)	NA	2016
Kayla M. Holcomb:Nevan F. Simone	Entry-level college programming courses have high failure rates, which lead to high dropout rates for associated majors. These courses typically cover fundamental programming concepts for students to master in order to succeed in their majors. When attempting to perceive a student's competency, instructors often utilize Automated Assessment Tools, but most tools do not fully record student progress in assignments. Access to the student's problem solving steps can provide educators a more complete understanding of the student's thought process. Our tool tracks the student's steps and sequencing while attempting to complete assignments. With this resource, teaching methodologies can be modified to more effectively foster successful problem-solving strategies within early programming courses.	The Role of Chronology in Analyzing Introductory Programming Assignments (Abstract Only)	NA:NA	2016
Joh D. Huff	Designing tools for K-12 computer science education poses a unique and difficult challenge. The focus should be on teaching broad computer science concepts in an engaging way. Other approaches have involved visualizing data structures and algorithms. However, those approaches aren't very engaging. By applying the principles of universal design for learning we created an interactive visualization tool for a simple line game. This visualization tool has several ways to represent the same data structure, and is much more engaging than other approaches to teaching computer science concepts. We are still conducting research on the effectiveness of this tool, but our preliminary results look promising.	A Simple Line Game With Real-Time Visualization of the Internal Data Structure (Abstract Only)	NA	2016
Cyrus Xiyuan Liu	This paper describes the building of a remotely-controlled prosthetic hand. The project has five elements: 1. 3D modeling and printing the hand parts and the casings for the entire system; 2. assembling the joints with strings attached to servomotors; 3. two Arduino boards programmed such that the prosthetic hand mirrors the finger motions of a sensor-equipped glove worn by a human; 4. Bluetooth communication between the sensors on the glove and the Arduino board, which moves the fingers of the prosthetic hand by pulling strings attached to the servomotors; and 6. experiments on the completed hand to refine the relationship between the Arduino commands and the precise motions of the finger joints. Future work is also described involving electro-sensors on upper muscles with the intention of controlling the prosthetic hand based on the detected electrical signals in the muscles.	3D-Printed Animatronic Hand with Wireless Mirroring Glove and Precision Control (Abstract Only)	NA	2016
Nickolas W. McCarley	Robotic Navigation Through Gesture Based Control (RNTGBC) assists people who may not be able to operate a smart device using their fingers. These individuals might face limitations due to physical disabilities or may be in a job where their fingers are not free to operate the smart device. For this project, a motion sensor was used in combination with a robot. The sensor was used to capture gestures and operate the robot. The tools used are the Leap (a device that reads 3D gesture motion), the Sphero (a remote controlled rolling ball), and a laptop. RNTGBC uses the Leap device to control the Sphero with hand gestures. This technology is important because navigation through gestures can be adapted towards larger contexts, such as helping someone in a wheelchair move around or assisting someone who does not have their hands available when performing a job task.	Robotic Navigation Through Gesture Based Control (Abstract Only)	NA	2016
Andrew Richard Miller:Nathan Gould:Dimitris Papamichail	An ultimate goal of traditional textual criticism is the reconstruction of the archetype of a given work. By comparing differences and similarities among multiple versions of the work, the interrelations among existing and hypothetical ancestral versions can be naturally presented as a tree, in which a branch represents derivation of a new version. We will present our investigation into the generation of phylogenetic trees with extant manuscripts at both leaves and internal nodes of the tree, and discuss algorithms for promoting leaf nodes to ancestral positions while optimizing the tree construction objective, based on the maximum parsimony criterion.	Advances in Phylogenetic-based Stemma Construction	NA:NA:NA	2016
Aayush Mudgal	We provide an extension to the existing data-driven tutoring system, ITAP (Rivers and Koedinger 2014) to provide personalized help to students. The existing ITAP framework relies on abstract syntax trees and works only on compilable code, we extend the framework to work even with uncompilable code. We use an iterative correction technique that locally corrects code by manipulating tokens in the vicinity of an erroneous token, using a specially designed parser. It utilizes the power of a LALR (1) parser to identify the erroneous token, and suggests the possible expected token at that position. We utilize this information to iteratively modify the code to reach to a compilable state. This compilable state is then fed as an input to the ITAP, and the received hints are then coupled suitably.	Syntactic Hint Generation for Introductory Programming Problems (Abstract Only)	NA	2016
Matthew Francis Pfister	In a sudden push for at-home learning, various simulation programs have been created to allow students to explore academic concepts in a variety of fields. But computer scientists are still forced to rely on trial-and-error test cases when trying to understand a tricky piece of code. In this poster the author reports on the results of a novel web-based educational tool that teaches coding through logical reasoning. Students are challenged to postulate symbolic relationships between generalized parameters within example code, and the tool evaluates the correctness and relevance of these answers within the context. Students may take comfort that their knowledge of the topic is comprehensive since the verification process takes into account all possible edge cases for parameter values.	Novel Logical Reasoning Tutor (Abstract Only)	NA	2016
Caleb H. Priester	Loop invariants are a key component in developing code for verification, but many students struggle to grasp how to arrive at one that will remain true at the beginning and end of each iteration as well as be sufficiently strong to prove subsequent assertions reliant on the outcome of the loop. The focus of this research is to provide professors with a clearer idea of the difficulties students face in developing suitable loop invariants by using automated verification tools and collecting data in the background as students develop invariants in a series of isolated studies. This information will help professors to better allocate teaching time in order to best teach students the fundamentals of identifying correct loop invariants and developing verifiable code using tools.	Loop Invariants: Learning to Help Teach (Abstract Only)	NA	2016
Gail Chapman	In January 2016, President Obama unveiled the CS for All initiative. With all the attention and publicity surrounding CS for All and increased support from a variety of corners over the ensuing year, it is easy to become complacent and start believing that we have "arrived". During her 2016 SIGCSE keynote, Jan Cuny talked about catching the wave and using it to our advantage. This talk will focus on where we go from here. We caught the wave; now what do we do to ensure that we don't get swallowed by it? What lessons can be learned from an election that featured the likes of fake news, Wiki leaks, rogue email servers, runaway tweets and showed in stark relief the divides that exist in our country. Computer science represents one of those divides. Given this and the fact that addressing the educational inequities prevalent in computer science was front and center in the CS for All announcement, what better time is there to renew our commitment to broadening participation in computing? As educators we have a powerful opportunity and responsibility in the wake of the blowback from the election-to educate, to listen, to remind ourselves constantly that we live in a very diverse country. We have no shortage of innovation in computer science, but who are we inspiring, what impact are those innovations having, and what can we do to learn from the lessons of the past to improve CS education? And above all, how do we respond to the challenges before us with empathy for those who are impacted by the decisions we make?	Inspire, Innovate, Improve!: What does this mean for CS for All?	NA	2017
Mats Daniels	I'm going to address the educator identity from two perspectives. The first is my own perspective, where I will present what my educator identity means to me and what this has led me to devote time and energy on. My vision is that I want to be part of creating learning environments that benefit both the learner as an individual and society in general from many dimensions and purposes. As an educator I want to support our students on a route to become able and conscious graduates who will have a positive impact and be seen as truly professionally competent wherever their career takes them. This sounds hunky-dory, but how can it be achieved? I don't think there are any silver bullets that will lead to such a setting, but I do believe that knowing more is a way forward. Having no clear way forward was frustrating and this is where involvement in educator communities, like the SIGCSE community, became essential. Giving time and effort to such communities is, in my opinion, rewarding itself manyfold, not least, in my case, for aiding to understand the issues and opportunities involved in pursuing my vision. Developing my identity as educator through being part of the SIGCSE community, with its abundance of role models, has been invaluable for me. I hope my work will be an inspiration for others. Computing and engineering education research is the other big part in my strive for fulfilling my educator dreams. Or should I say pipe dreams as in the title of my thesis "Developing and Assessing Professional Competencies: a Pipe Dream? Experiences from an Open-Ended Group Project Learning Environment", which I defended on the day thirty years after I enrolled as a PhD student? No, I don't see it as a pipe dream even though there are much more to look into and understand regarding education in our field. This research area is the second perspective I want to bring up regarding educator identity, and I will use the research lens to look at the impact we as educators have on our students. My focus will be on the influence educators have on students learning with regard to aspects beyond pure computing skills. I will in the presentation build on work in our research group (UpCERG), which lately has included studying issues related to identity, both students and educators. I especially want to draw attention to the potential impact we as educators have on the "gap" between graduating truly professionally competent persons and merely technically competent persons.	The Educator Identity and its Impact	NA	2017
Mitchel Resnick	Fifty years ago, Seymour Papert and colleagues developed Logo as the first programming language for children. Today, millions of children are participating in learn-to-code initiatives, but Papert's dream remains unfulfilled. Papert (who passed away last summer) saw programming not as a set of technical skills but as a new form of fluency - a new way for all children to explore, experiment, and express themselves. In this presentation, I will examine strategies for fulfilling Papert's dream. Drawing on examples from our Scratch online coding community, I will discuss how we can design programming environments and activities to help all children, from all backgrounds, to develop their thinking, develop their voices, and develop their identities.	Fulfilling Papert's Dream: Computational Fluency for All	NA	2017
Jeannette Wing	Sources of uncertainty abound. Noisy sensor data. Machine learning methods. Hardware and software failures. The physical world. Human behavior. In the past, computer science handled uncertainty by abstracting it away or avoiding it. In the future, instead, computer science needs to embrace uncertainty as a first-class entity. How do we represent uncertainty in our computational models? Probabilities. Thus, we need to make sure that every computer science student learns probability and statistics. Data science, where data drives discovery and decision-making in all fields of study, underscores the importance of having a command of probability and statistics. At the heart of data science is data analytics whose methods such as machine learning rely on probabilistic and statistical reasoning. And since data serve as the currency of any data analytics workflow, explicit representation of probability distributions can help us calculate the degrees of uncertainty throughout a flow. Programming and software engineering courses will need to elevate the status of such data flows to that given to algorithms, data structures, and modular design. In this talk I will discuss the implications of embracing uncertainty on undergraduate computer science curricula.	Embracing Uncertainty	NA	2017
Ashish Aggarwal:Christina Gardner-McCune:David S. Touretzky	Researchers and educators have designed curricula and resources for introductory programming environments such as Scratch, App Inventor, and Kodu to foster computational thinking in K-12. This paper is an empirical study of the effectiveness and usefulness of tiles and flashcards developed for Microsoft Kodu Game Lab to support students in learning how to program and develop games. In particular, we investigated the impact of physical manipulatives on 3rd -- 5th grade students' ability to understand, recognize, construct, and use game programming design patterns. We found that the students who used physical manipulatives performed well in rule construction, whereas the students who engaged more with the rule editor of the programming environment had better mental simulation of the rules and understanding of the concepts.	Evaluating the Effect of Using Physical Manipulatives to Foster Computational Thinking in Elementary School	NA:NA:NA	2017
Basma S. Alqadi:Jonathan I. Maletic	Students taking introductory computer science courses often have difficulty with the debugging process. This work investigates a number of different logical errors that novice programmers encounter and the associated debugging behaviors. Data is collected and analyzed data in two different experiments from 142 subjects. The results show some errors are more difficult than others. Different types of bugs and novices' debugging behaviors are identified. Years of experience showed a significant role in the process of debugging in terms of correctness level and time required for debugging	An Empirical Study of Debugging Patterns Among Novices Programmers	NA:NA	2017
Christine Alvarado:Mia Minnes:Leo Porter	As class-sizes grow in computer science, the personal attention received by students tends to diminish. This work aims to replicate small-class community effects within a large class by creating "micro-classes"---small groups within the large class. These micro-classes consist of 20--30 students led by graduate teaching assistants and undergraduate tutors who are specifically trained in small-classroom instructional techniques. This paper studies the outcomes of the micro-classes framework in an upper-division data structures course and compares them to outcomes from the same class taught in a large lecture, active-learning format. Students report increased satisfaction and a higher perception of community in the micro-classes section, though there was no discernible difference in student academic performance.	Micro-Classes: A Structure for Improving Student Experience in Large Classes	NA:NA:NA	2017
Christine Alvarado:Yingjun Cao:Mia Minnes	This paper presents results of a large-scale survey of students' experiences in CS classes at two institutions: a small liberal arts college and a large research-focused university. Our work provides a fine-grained view of students' feelings and behaviors in CS classes, from introductory through to upper division courses. We find significant differences between the reported behaviors and feelings of female students compared to male students: female students are less comfortable asking questions in class and interacting with their instructor, and come out of a class with lower confidence in their ability to tutor for the class, despite the fact that they perform just as well as male students. Furthermore, we find some of these differences are consistent or increase across course levels, and could potentially affect students' post-college trajectories. Focusing attention on the student experience in more advanced classes may impact gender differences seen in the transition to the CS workforce.	Gender Differences in Students' Behaviors in CS Classes throughout the CS Major	NA:NA:NA	2017
Karen Anewalt:Jennifer Polack	Good oral communication skills are essential for success in the workplace. Burge [3] recently highlighted the need to create a curriculum-wide program emphasizing communication skills. We have implemented a curriculum that provides communication skills instruction and practice at each level of the computer science major. Here we present a description of the coursework emphasizing formal presentation and small group communication skills. We also share findings from a survey of alumni showing their perception of communication preparation. Even in our program that provides significant opportunities for communication skill development, the majority of alumni felt that additional instruction should be integrated into the major curriculum.	A Curriculum Model Featuring Oral Communication Instruction and Practice	NA:NA	2017
Vaibhav Anu:Gursimran Walia:Gary Bradshaw	In spite of the human-centric aspect of software engineering (SE) discipline, human error knowledge has been ignored by SE educators as it is often thought of as something that belongs in the realm of Psychology. SE curriculum is also severely devoid of educational content on human errors, while other human-centric disciplines (aviation, medicine, process control) have developed human error training and other interventions. To evaluate the feasibility of using such interventions to teach students about human errors in SE, this paper describes an exploratory study to evaluate whether requirements inspections driven by human errors can be used to deliver both requirements validation knowledge (a key industry skill) and human error knowledge to students. The results suggest that human error based inspections can enhance the fault detection abilities of students, a primary learning outcome of inspection exercises conducted in software engineering courses. Additionally, results showed that students found human error information useful for understanding the underlying causes of requirement faults.	Incorporating Human Error Education into Software Engineering Courses via Error-based Inspections	NA:NA:NA	2017
Alice Armstrong	This paper discusses the content and impact of a new first-year experience (FYE) course for at-risk students in the Computer Science and Engineering department at Shippensburg University, a mid-sized teaching university. The initial results from the new course are quite promising: DFW rates (grade of D, grade of F, and withdrawal) for the first and second semesters were cut in half and retention rates were dramatically improved.	Successful First-Year Experience for At-Risk Students	NA	2017
Monica Babes-Vroman:Isabel Juniewicz:Bruno Lucarelli:Nicole Fox:Thu Nguyen:Andrew Tjang:Georgiana Haldeman:Ashni Mehta:Risham Chokshi	With the number of Computer Science (CS) jobs on the rise, there is a greater need for Computer Science graduates than ever. At the same time, most CS departments across the country are only seeing 25-30% of female students in their classes, meaning that we are failing to draw interest from a large portion of the population. In this work, we explore the gender gap in CS at Rutgers University using three data sets that span thousands of students across 3.5 academic years. By combining these data sets, we can explore interesting issues such as retention, as students progress through the CS major. For example, we find that a large percentage of women taking the Introductory CS1 course for majors do not intend to major in CS, which contributes to a large increase in the gender gap immediately after CS1. This finding implies that a large part of the retention task is attracting these women to further explore the major. We correlate our findings with initiatives that some CS programs across the country have taken to significantly improve their gender diversity, and identify initiatives that we can start with in our effort to increase the diversity in our program. These findings may also be applicable to the computing programs at other large public research universities.	Exploring Gender Diversity in CS at a Large Public R1 Research University	NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Austin Cory Bart:Ryan Whitcomb:Dennis Kafura:Clifford A. Shaffer:Eli Tilevich	To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits.	Computing with CORGIS: Diverse, Real-world Datasets for Introductory Computing	NA:NA:NA:NA:NA	2017
Ashok Basawapatna:Alexander Repenning	Online CS Ed Week and Hour of Code activities attempt to motivate hundreds of millions of student participants across the world in computer science each year. A key goal of these endeavors is long-term student engagement. However, if the activity experience is bad, it could have effects adverse to the stated goal. Thus, it is imperative upon designers to actively improve the online activity ensuring the maximum numbers of students are retained throughout the exercise. We present a simple proof of concept method outlining a means for Computer Science Education Week and Hour of Code online activities to identify and improve hazardous points wherein students tend to drop out. This is achieved by finding so called flow stoppers in activity retention that diverge from an ideal theoretical Markov chain model, and scaffolding the activity at that point to better support participants. Initial data presented indicates that even minor changes can have a significant effect on keeping a greater number of students engaged.	Employing Retention of Flow to Improve Online Tutorials	NA:NA	2017
Jennifer M. Blaney:Jane G. Stout	Computing self-efficacy and sense of belonging are known predictors of motivation and persistence. As such, these psychological states are important to study in order to broaden participation in computing. This study examined the relationship between (a) introductory computing course experiences and (b) self-efficacy and sense of belonging in computing, focusing on differences by gender and college generation status. We found that the relationship between some introductory course experiences and self-efficacy and sense of belonging was strongest among first-generation college women, which reveals the importance of considering women's experiences in light of their additional intersectional identities. Recommendations for best practices in introductory computing courses are discussed.	Examining the Relationship Between Introductory Computing Course Experiences, Self-Efficacy, and Belonging Among First-Generation College Women	NA:NA	2017
Matthew Boutell	The face-to-face interaction in a traditional classroom on campus provides many benefits to students: the ability to ask questions and get immediate feedback, external motivation from the instructor and peers to succeed, the joy of interaction, and the ability to work face-to-face with classmates on projects. Meanwhile, video-based, online instruction offers several different benefits: convenience for students due to flexibility in time and place of learning, ease of reviewing materials for mastery, and the ability to work at one's own pace. When given the choice between these two formats, which do students choose? Students enrolled in an upper-level mobile app development course could opt to attend class with face-to-face instruction, to watch videos of the instructor, or to switch between the two formats as they saw fit. Students were given pre- and post-surveys asking them which format they preferred and why. Results indicate that slightly more than half of the students chose the video-based option and that students chose as they did for expected reasons, such as wanting to ask questions in class or wanting the flexibility to watch and re-watch video on demand. More interestingly, results also indicated that students who chose video did not suffer from the dropout and failure rates so commonly reported in the literature, that learning was equally effective using both formats, and that students' expectations of which format they would use were quite different from what they ended up using. However, with a small sample size at one institution, local factors, like scheduling the course during lunchtime, also played a role in students' choices.	Choosing Face-to-face or Video-based Instruction in a Mobile App Development Course	NA	2017
Brian Broll:Akos Lédeczi:Peter Volgyesi:Janos Sallai:Miklos Maroti:Alexia Carrillo:Stephanie L. Weeden-Wright:Chris Vanags:Joshua D. Swartz:Melvin Lu	This paper introduces NetsBlox, a visual programming environment for learning distributed programming principles. Extending both the visual formalism and open source code base of Snap!, NetsBlox provides two accessible distributed programming abstractions to simplify the process of creating networked applications: message passing and Remote Procedure Calls (RPC). Messaging passing allows NetsBlox applications to send data to other connected NetsBlox clients. Remote Procedure Calls enable seamless integration of third party services, such as Google Maps, weather, traffic and other public domain data sources, into NetsBlox applications. Other RPCs help coordinating distributed clients which may be difficult for novice programmers allowing the user to more quickly create captivating and sophisticated applications. These abstractions empower users to develop networked programs, including multi-player games and client-server applications. By providing networking support, NetsBlox not only allows users to learn distribute programming concepts but also makes programming more engaging by incorporating diverse services available on the web.	A Visual Programming Environment for Learning Distributed Programming	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Erik Brunvand:Nina McCurdy	We describe our experience designing and delivering a general education technological fluency course that frames the discussion of computer science and engineering technology (electronics and programming) in the context of sound-art: art that uses sound as its medium. This course is aimed at undergraduate students from a wide variety of backgrounds and is designed to fit into the ``Intellectual Explorations'' area of a general undergraduate program. The goal is to introduce computer engineering and computational principles to non-CS students through an exploration of sound-art, experimental and electronic music, noise-making circuits, hardware hacking, and circuit bending.	Making Noise: Using Sound-Art to Explore Technological Fluency	NA:NA	2017
Zack Butler:Ivona Bezakova:Kimberly Fluet	The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment.	Pencil Puzzles for Introductory Computer Science: an Experience- and Gender-Neutral Context	NA:NA:NA	2017
Yingjun Cao:Leo Porter	Collaborative group exams, including two-stage exams, have received increased attention in other disciplines after studies have shown their value for student learning. In computer science, prior work has shown students may value two-stage exams, but their impact on student learning in computing is unknown. In this randomized, crossover study, student learning on four topics during two-stage midterm exams is examined. Specifically, students are randomly selected to answer questions on a topic either working in groups or individually during the exam. On a quiz two weeks later, those who worked in groups statistically significantly outperform those who worked individually. The metric of performance comparison is normalized learning gain. These are short term gains, however, as the benefit is no longer apparent by the final exam. This is the first study to use controlled experiments to examine the value of the group stage of two-stage exams in computing.	Evaluating Student Learning from Collaborative Group Tests in Introductory Computing	NA:NA	2017
Adam Scott Carter:Christopher David Hundhausen	Analyzing the process data of students as they complete programming assignments has the potential to provide computing educators with insights into their students and the processes by which they learn to program. In prior work, we developed a statistical model that accurately predicts students' homework grades. In this paper, we investigate the relationship between the paths that students take through the programming states on which our statistical model is based, and their overall course achievement. Examining the frequency of the most common transition paths revealed significant differences between students who earned A's, B's, and C's in a CS 2 course. Our results indicate that a) students of differing achievement levels approach programming tasks differently, and b) these differences can be automatically detected, opening up the possibility that they could be leveraged for pedagogical gain.	Using Programming Process Data to Detect Differences in Students' Patterns of Programming	NA:NA	2017
Karo Castro-Wunsch:Alireza Ahadi:Andrew Petersen	Course instructors need to be able to identify students in need of assistance as early in the course as possible. Recent work has suggested that machine learning approaches applied to snapshots of small programming exercises may be an effective solution to this problem. However, these results have been obtained using data from a single institution, and prior work using features extracted from student code has been highly sensitive to differences in context. This work provides two contributions: first, a partial reproduction of previously published results, but in a different context, and second, an exploration of the efficacy of neural networks in solving this problem. Our findings confirm the importance of two features (the number of steps required to solve a problem and the correctness of key problems), indicate that machine learning techniques are relatively stable across contexts (both across terms in a single course and across courses), and suggest that neural network based approaches are as effective as the best Bayesian and decision tree methods. Furthermore, neural networks can be tuned to be reliably pessimistic, so they may serve a complementary role in solving the problem of identifying students who need assistance.	Evaluating Neural Networks as a Method for Identifying Students in Need of Assistance	NA:NA:NA	2017
Kameswari Chebrolu:Bhaskaran Raman:Vinay Chandra Dommeti:Akshay Veer Boddu:Kurien Zacharia:Arun Babu:Prateek Chandan	Considerable experimentation is happening in today's classrooms to handle large classes. In this paper, we present SAFE (Smart Authenticated Fast Exams), a tool that enables continuous assessment in the form of regular quizzes in classes. SAFE is based on a BYOD (bring your own device) model that leverages student smart-phones to conduct auto-graded, cheating-free exams in a proctored class room setting. SAFE has 3 components: a smart-phone app, a web server and WiFi infrastructure to enable app-server communication. SAFE support a rich set of features to handle various types of questions as well as instructor preferences. In the design of SAFE, we set to achieve 4 goals: easy setup, cheating-free operation, robustness and scale. Easy setup is achieved predominantly due to the BYOD model and online mode of exams. Cheating is prevented via locking the app for the intended purpose along with reporting to the server any user attempts at cheating. Robustness is handled via periodic syncing of messages and careful consideration of corner cases. Scale is handled by carefully tuning the WiFi as well as via application level scheduling. SAFE has been used so far to conduct 90+ in-class quizzes in 9 courses in the last year. It was also used to conduct a high stake admission test for a Master's program in Computer Science. The feedback from end-users has been very positive and we continue to get new requests for trials in other courses. This paper presents the design of SAFE and evaluation based on our experience thus far.	SAFE: Smart Authenticated Fast Exams for Student Evaluation in Classrooms	NA:NA:NA:NA:NA:NA:NA	2017
Nick Cheng:Brian Harrington	Marking coding exam questions for introductory computer science courses is notoriously resource intensive and difficult to perform consistently. Students can be easily led astray by minor misunderstandings in the wording of questions, and graders often find it difficult to decide whether mistakes are attributable to simple misinterpretations, minor memory errors, or major lack of ability/understanding of the core concepts being evaluated. In this paper we detail and evaluate "Code Mangler" questions. The "Code Mangler" is a fictitious character who manipulates code; removing commenting, changing the order of lines, adding bugs, and otherwise breaking perfectly good code. The role of the student on the exam is then to use the mangled results to reverse engineer the original code. We discuss the benefits of this style of question, and perform an evaluation on a large (475 student) CS1 course, demonstrating that these questions are less resource intensive to mark than traditional coding questions, improve the confidence of the graders, and correlate strongly with student ability as assessed in traditional question styles.	The Code Mangler: Evaluating Coding Ability Without Writing any Code	NA:NA	2017
John W. Coffey	This paper contains a description of a follow-on to a pilot study in which students performed reflective activities as part of the design process in an advanced programming course. Students produced an initial design for their programs that was due within a week after the program was assigned. Along with their projects, students submitted a document reflecting the final design and an analysis of the changes between them. Requirements for the analysis were made more explicit than those in the pilot study. The format of the document was specified and the task was described to the students as a technical writing activity. Results of the work are reported and a comparison with prior work that did not have a specified structure for the student analysis are described.	A Study of the Use of a Reflective Activity to Improve Students' Software Design Capabilities	NA	2017
Richard Cox:Steven Bird:Bernd Meyer	A new computer science curriculum has been developed for the Victorian Certificate of Education. It gives students direct entry into second year University computer science. The curriculum focuses on data structures and algorithms, with an emphasis on the graph abstract data type and graph algorithms. We taught a pilot course during 2014 involving students from seven schools, and administered an algorithmic thinking quiz on entry and exit, and also tested a first year university reference group. In this paper we present the curriculum and report on the evaluation. We discuss the effectiveness of our approach and make recommendations for improving future versions of the course. Pedagogical issues are discussed in relation to the cognitive education literature on the teaching of algorithmic thinking.	Teaching Computer Science in the Victorian Certificate of Education: A Pilot Study	NA:NA:NA	2017
Aparna Das:David Voorhees:Cynthia Choi:Carl E. Landwehr	We discuss the design and implementation of an interdisciplinary non-majors course Cybersecurity for future presidents, which broadens the types of computational courses available for non-majors. The goal of our course is to build awareness of cybersecurity issues and to promote thinking critically about them. Student debates on controversial cybersecurity issues facing society today motivate the technical and policy content. We present student assessment results, which demonstrate an increase of students' awareness, and outline directions for future course improvements.	Cybersecurity for Future Presidents: An Interdisciplinary Non-majors Course	NA:NA:NA:NA	2017
Debzani Deb:Mohammad Muztaba Fuad:Mallek Kanan	Computer Science instructors have been exploiting learning technology such as Algorithm Visualization (AV) for last few years to explain hard-to-understand algorithms to the learners through simulations and animations. In this work, we explore an active and highly engaging approach, namely, the construction of visualizations of the algorithms under study. Our approach is further augmented with automated assessment of students' in-class construction activities, which they execute as apps in their mobile devices. In this paper, we utilize case study, a step-by-step visualization of a construction exercise app, to explain how technology is leveraged to provide a richer way for learners to interact with a problem, and how instructor can acquire real-time evidence of learners' comprehension of covered lecture material. Our experimental evaluation shows the educational benefits of the proposed approach in terms of enhanced student learning, reduced drop-out rate and increased student satisfaction.	Creating Engaging Exercises With Mobile Response System (MRS)	NA:NA:NA	2017
Adrienne Decker:Monica M. McGill	Europe, Australia, and North America face two similar challenges with respect to computing--there have not been enough students matriculating to keep up with demand and the lack of diversity remains an issue. To address these challenges, private and public resources have been allocated to educate primary and secondary students in computing. Previous meta-studies on these often segregated outreach efforts within the United States indicate that research on their impact remains spotty, short-term, and inconsistent, leaving a gap in the ability to evaluate their long-term impact. Building upon previous research focused in the U.S., this study examines similarities and differences in the results of 17 formal, peer-reviewed computing education research journals and conferences across Australia, Europe, and North America during 2009-2015. Results indicate that a lacuna exists in international research, paralleling results of the more narrowly focused study of U.S. venues. The paper further defines the major issues researchers face in conducting assessment studies for outreach and recommendations for addressing this gap.	Pre-College Computing Outreach Research: Towards Improving the Practice	NA:NA	2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky	Computer science, particularly in the United States, continues to suffer from underrepresentation by women and students of color. Increasingly, evidence suggests that we need to approach student perceptions of computer science and self perceptions of "who does computer science" before college, at ages in which students have not yet formed difficult-to-change viewpoints. In an effort to address underrepresented groups in computing, as well as to change common, stereotypical perceptions of what a computer scientist is, we ran a pilot summer camp that drew students from our local community and sought to increase their self-efficacy and change the way they conceptualized Computer Science. In designing the course, we leveraged approaches that have shown success at the college level - particularly Computing for Social Good and Media Computation - to introduce students to important concepts. The camp was structured as a week-long, full-day camp in one of the Computer Science department's computer-equipped classrooms, We taught programming in Processing to 28 rising 5th-9th grade students, focusing on artistic aspects and real-world inspiration. In this paper, we report on the project (both successes and failures) and the effects the project had on students' self-efficacy and attitudes towards computer science. We also provide some recommendations for others planning to offer similar camps.	Arts Coding for Social Good: A Pilot Project for Middle-School Outreach	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Paul E. Dickson:Toby Dragon:Adam Lee	Undergraduate teaching assistants have been used in many classes, over many years, and at many institutions. The literature primarily focuses on the practice in a university environment with large classes. We focus instead on the use of undergraduate teaching assistants in the small college, small class environment. We have been employing students in this capacity for over 15 years and have gained some insight on how best to use these undergraduate teaching assistants in the small classroom setting. We believe these conclusions can inform the design of other undergraduate teaching assistant programs.	Using Undergraduate Teaching Assistants in Small Classes	NA:NA:NA	2017
Alex Edgcomb:Frank Vahid:Roman Lysecky:Susan Lysecky	Getting students to read and study before class, to be better prepared for lecture, or to enable a flipped classroom is a long-standing difficulty for teachers of introductory programming classes. Furthermore, getting students to do homework, consisting of small practice problems and questions, is also a long-standing difficulty without massive grading resources. And even then, preventing students from copying others' solutions is difficult as well. Today, the web enables new interactive learning material that is replacing past forms of textbooks and homework assignments, and students today commonly have access to needed devices and the internet. This paper provides data on student reading and homework completion rates for web-based interactive learning material we created that automatically records reading and homework activity by students. The data is for several thousand students at over 10 universities, for introductory programming classes in Java, Python, and C++. The data shows that, with an appropriate amount of awarded points, required-reading completion rate was 84%, and auto-graded homework completion rate was 75%, varying somewhat based on how many course grade points those items were worth. Students on average spent about 10 minutes reading each section, and about 3 minutes per homework problem, both appropriate amounts for those items. Furthermore, we developed measures of whether students were earnestly attempting the reading and homeworks, versus just "cheating the system" to get course grade points. We describe those earnestness measures in this paper. With proper design and amount of assigned work, 80%-90% of students earnestly did the reading and homework activities, even when no penalty existed for cheating the system, and fewer than 3% blatantly cheated the system to get their points.	Getting Students to Earnestly Do Reading, Studying, and Homework in an Introductory Programming Class	NA:NA:NA:NA	2017
Jesse Eickholt:Sharad Shrestha	Cloud Computing and Big Data continue to be disruptive forces in computing and have made inroads in the Computer Science curriculum, with courses in Cloud Computing and Big Data being routinely offered at the graduate and undergraduate level. One major challenge in offering courses in Big Data and Cloud Computing is resources. The question is how to provide students with authentic experiences making use of current Cloud and Big Data resources and tools and do so in a cost effective manner. Historically, three options, namely physical clusters, virtual clusters and cloud-based clusters, have been used to support Big Data and Cloud Computing courses. Virtual clusters and cloud-based options are those that institutions have typically adopted and many arguments in favor of these options exist in the literature, citing cost and performance. Here we argue that teaching Big Data and Cloud Computing courses can be done making use of a physical cluster and that many of the existing arguments fail to take into account many important factors in their calculations. These factors include the flexibility and control of a physical cluster in responding to changes in industry, the ability to work with much larger datasets, and the synergy and broad applicability of an appropriately equipped physical cluster for courses such as Cloud Computing, Big Data and Data Mining. We present three possible configurations of a physical cluster which span the spectrum in terms of cost and provide cost comparisons of these configurations against virtual and cloud-based options, taking into account the unique requirements of an academic setting. While limitations do exist with a physical cluster and it is not an option for all situations, our analysis and experience indicates that there is great value in using a physical cluster to support teaching Cloud Computing and Big Data courses and it should not be dismissed.	Teaching Big Data and Cloud Computing with a Physical Cluster	NA:NA	2017
Shelly Engelman:Brian Magerko:Tom McKlin:Morgan Miller:Doug Edwards:Jason Freeman	STEAM education is a method for driving student engagement in STEM topics through personal expression, creativity and aesthetics. EarSketch, a collaborative and authentic learning tool which introduces students to programming through music remixing, has previously been shown to enhance student engagement and intent to persist in computing. The goal of EarSketch is to broaden participation in computing through a thickly authentic learning environment that has personal and real world relevance in both computational and music domains. This mixed methods study extends previous work by 1) using a newly- developed instrument to assess creativity and 2) testing a theory of change model that provides an explanatory framework for increasing student engagement in STEAM. The results suggest that students who used EarSketch express statistically significant gains in computing attitudes and creativity. Furthermore, a series of multiple regression analyses found that a creative learning environment, fueled by a meaningful and personally relevant EarSketch curriculum, drives improvements in students' attitudes and intent to persist in computing. This work makes a significant contribution to computer science education by establishing the effectiveness of an authentic STEAM curriculum and advancing our knowledge of the underlying mechanisms driving students' motivations to persist in STEM disciplines.	Creativity in Authentic STEAM Education with EarSketch	NA:NA:NA:NA:NA:NA	2017
Anthony Estey:Hieke Keuning:Yvonne Coady	Educational research has established that learning can be defined as an enduring change in behaviour, which results from practice or other forms of experience. In introductory programming courses, proficiency is typically approximated through relatively small but frequent assignments and tests. Scaling these assessments to track significant behavioural change is challenging due to the subtle and complex metrics that must be collected from large student populations. Based on a four-semester study, we present an analysis of learning tool interaction data collected from 514 students and 38,796 solutions to practice programming exercises. We first evaluate the effectiveness of measuring workflow patterns to detect students at-risk of failure within the first three weeks of the semester. Our early predictor analysis accurately detects 81% of the students who struggle throughout the course. However, our early predictor also captures transient struggling, as 43% of the students who ultimately did well in the course were classified as at-risk. In order to better differentiate sustained versus transient struggling, we further propose a trajectory metric which measures changes in programming behaviour. The trajectory metric detects 70% of the students who exhibit sustained struggling, and mis-classifies only 11% of students who go on to succeed in the course. Overall, our results show how detecting changes in programming behaviour can help us differentiate between learning and struggling in CS1.	Automatically Classifying Students in Need of Support by Detecting Changes in Programming Behaviour	NA:NA:NA	2017
Katrina Falkner:Rebecca Vivian:Nickolas Falkner:Sally-Ann Williams	A number of institutions and organisations provide online or face-to-face professional learning as part of outreach initiatives to increase skill levels and support for teachers in K-12 Computing education. With a number of countries introducing new K-12 Computer Science curricula around the globe, this provides a prime opportunity for the Computer Science education community to transform and develop models of teacher professional learning that address teachers' needs at-scale. This paper explores the theoretical underpinnings of a community-based professional learning MOOC for Australian teachers for K-6 Computer Science. This paper reflects on data collected from three offerings of the MOOC, presented in light of the theory and design considerations. This paper provides valuable insights of the design of community-centric MOOCs, and acts as a guide for the construction of online professional learning opportunities for Computer Science educators.	Reflecting on Three Offerings of a Community-Centric MOOC for K-6 Computer Science Teachers	NA:NA:NA:NA	2017
Mohammed F. Farghally:Kyu Han Koh:Hossameldin Shahin:Clifford A. Shaffer	Algorithm Visualizations (AVs) have been used for years as an interactive method to convey data structures and algorithms concepts. However, AVs have traditionally focused on illustrating the mechanics of how an algorithm works. We have developed visualizations that we name Algorithm Analysis Visualizations (AAVs), that focus on conveying algorithm analysis concepts. We present our findings from an initial evaluation study of the effectiveness of AAVs when applied to a semester long Data Structures course. AAVs were evaluated in terms of student engagement, student satisfaction, and student performance. Results indicate that the intervention group students spent significantly more time with the AAVs than did the control group students who used primarily textual content. Students gave positive feedback regarding the usefulness of the AAVs in illustrating algorithm analysis concepts. Students from the intervention group had better performance on the algorithm analysis part of the final exam than did control group students.	Evaluating the Effectiveness of Algorithm Analysis Visualizations	NA:NA:NA:NA	2017
Mohammed F. Farghally:Kyu Han Koh:Jeremy V. Ernst:Clifford A. Shaffer	We present initial results from our work towards developing a concept inventory for algorithm analysis (AACI) at the post-CS2 level. We used a Delphi process to identify a list of algorithm analysis topics that were considered both important and hard by surveying a panel of experienced instructors. Through a similar survey process, we identified a list of student misconceptions related to the identified topics. Based on this, a set of pilot AACI items were developed. We validated the misconceptions list by analyzing student responses to four administrations of the pilot AACI in two different universities during Fall 2015 and Spring 2016. Results revealed that a sufficient number of students held most of the misconceptions identified in the list.	Towards a Concept Inventory for Algorithm Analysis Topics	NA:NA:NA:NA	2017
Kathi Fisler:Shriram Krishnamurthi:Preston Tunnell Wilson	Scope, aliasing, mutation, and parameter passing are fundamental programming concepts that interact in subtle ways, especially in complex programs. Research has shown that students have substantial misconceptions on these topics. But this research has been done largely in CS1 courses, when students' programming experience is limited and problems are necessarily simple. What happens later in the curriculum? Does more programming experience iron out these misconceptions naturally, or are interventions required? This paper explores students' understanding of these topics in the context of a programming languages class for third- and fourth-year CS majors. Our pre- and post-tests pose questions in two programming languages to gauge whether upper-level students transfer knowledge between languages. Many students held misconceptions about these concepts at the start of the course. Students made progress in only some languages and topics, and cross-language transfer does not occur naturally. We also discuss various pedagogic activities we used to engage students with these concepts, and provide data and student opinion on their effectiveness.	Assessing and Teaching Scope, Mutation, and Aliasing in Upper-Level Undergraduates	NA:NA:NA	2017
J. Michael Fitzpatrick:Ákos Lédeczi:Gayathri Narasimham:Lee Lafferty:Réal Labrie:Paul T. Mielke:Aatish Kumar:Katherine A. Brady	This paper describes the design and delivery of a highly successful MOOC that uses MATLAB to teach introductory computer programming to a wide audience. The decisions behind the curriculum and assessment strategy are detailed, and the results are evaluated based on three sessions of the course that saw 80,000 active students, two million lecture views and 100,000 auto-graded programming assignment sets during the three sessions delivered in 2015.	Lessons Learned in the Design and Delivery of an Introductory Programming MOOC	NA:NA:NA:NA:NA:NA:NA:NA	2017
Vitaly Ford:Ambareen Siraj:Ada Haynes:Eric Brown	In order to meet the cybersecurity workforce demand, it is important to raise cybersecurity interest among the youth. Just like ACM programming competitions, Capture the Flag (CTF) competitions allow students to learn cybersecurity skills in a fun and engaging way. It is an effective platform to increase students' interest in cybersecurity and prepare them for defending against real cyber attackers. A typical CTF competition requires at least some basic technical security knowledge and months of diligent preparation. For this very reason, many computer science students do not feel qualified to participate in CTF competitions, and as a result, do not even try. To overcome this lack of confidence while at the same time raising awareness about the cybersecurity profession in a realistic fashion, we have developed the CTF Unplugged project, as inspired by the CS Unplugged project. The primary goal is to teach students with little or no technical knowledge about the different cybersecurity challenges that a cybersecurity professional must address and the problem-solving skills needed for a cybersecurity career, all without direct use of technology. The effectiveness of CTF unplugged project has been evaluated after exposing 36 high school students participating in the Tennessee Tech University GenCyber Camp to these activities this past summer. Students reported a significant gain in knowledge, confidence and comfort level after participation.	Capture the Flag Unplugged: an Offline Cyber Competition	NA:NA:NA:NA	2017
Diana Franklin:Gabriela Skifstad:Reiny Rolock:Isha Mehrotra:Valerie Ding:Alexandria Hansen:David Weintrop:Danielle Harlow	As more elementary schools commit to integrating computer science instruction into their curricula, they seek guidance on what concepts are appropriate for students at different grade levels. Currently, little is known about how best to sequence computer science learning across elementary grades. In this paper, we present an analysis of 123 students' (age 9-12, grades 4-6) activities in a curriculum implemented in a visual block-based programming language. The goal of this work is to better understand the developmental appropriateness of foundational computer science ideas. All 4th, 5th, and 6th grade students in a single school completed the first module of a curriculum during the same school year with the same instructor. We analyzed each task students attempted and found that for simple concepts, there was little difference in performance between grade levels. However, differences were found for more complex topics, such as whether they completed initialization tasks and the way in which they solved 2-d navigation tasks. A closer look revealed that students understood the basic concepts, but were challenged by deeper applications of the basic concepts and influenced by non-computer science skills. This work serves as an empirically grounded investigation of elementary computer science learning and contributes to our understanding of computer science learning trajectories and concept sequencing in the late elementary grades.	Using Upper-Elementary Student Performance to Understand Conceptual Sequencing in a Blocks-based Curriculum	NA:NA:NA:NA:NA:NA:NA:NA	2017
David Ginat:Yoav Blau	The notion of abstraction repeatedly appears, in various ways, at all levels of computer science. It involves the aspects of leaving out details and comprehending concepts and mechanisms. It also involves the aspect of recognizing relationships between task elements. The latter aspect was not yet studied with respect to abstraction levels and algorithm design. We study it here. We analyze senior students' algorithmic solutions according to accepted interpretations of multiple abstraction levels, and offer guidelines for enhancing abstraction in students' algorithmics.	Multiple Levels of Abstraction in Algorithmic Problem Solving	NA:NA	2017
Kenneth E. Graves:Leigh Ann DeLyser	Computer science (CS) education initiatives often use measures of interest to assess outcomes. Although appropriate for initiatives meant to encourage future participation, these measures do not always align with the complex nature of interest as described by the learning sciences literature or recognize the reality that school-related initiatives aimed at student engagement in CS will not produce individual interest in every student. In this paper, we present a review of the interest literature, and data from a survey with evidence of validity of over 1,500 students in various CS courses in New York City. By using Latent Class Analysis (LCA), we identify five different statistically significant subgroups of CS students: Enthusiasts, Engaged, Bookish, Idlers, and Disinterested. Our findings suggest that while some students enjoy CS in class and feel the teacher is pedagogically effective, they may not develop the individual interest characterized by seeking additional learning opportunities outside of class.	Interested In Class, But Not In The Hallway: A Latent Class Analysis (LCA) of CS4All Student Surveys	NA:NA	2017
Jeff Gray:Michele Roberts:Jonathan Corley	The College Board estimates that the new AP CS Principles (CSP) course will set a participation record for new course launches. With a large number of students across the USA enrolling in CSP at the high school level, CS departments at colleges and universities will need to begin considering their position for awarding AP credit. One possibility is the introduction of a new college-focused CSP course for non-majors that can serve as a mapping for AP credit. This paper summarizes the experiences of two faculty at different universities who were official CSP College Board Pilots for several years. An overview of each university's experience is provided in terms of student demographics, common evaluation measures, and individual course nuances, followed by a series of recommendations to faculty who are considering the creation of a CSP course within the curriculum of their own department.	Getting Principled: Reflections on Teaching CS Principles at Two College Board University Pilots	NA:NA:NA	2017
Chris Gregg:Raewyn Duvall:Kate Wasynczuk	A problem that many tech companies face today is that many computer science students entering the work force lack fundamental skills for understanding the entire process of a system that is not solely software. Some students may take a series of courses on analog and/or digital circuits, but the integration with modern devices is sorely missing from most curricula. We designed the Tufts University Comp 50: Wearable Devices course to introduce the basics of digital and analog circuits to students with software-driven backgrounds by studying the intricacies of the production of wearable electronic devices. The course focused on the skills needed to design hardware, software, and a chassis for a final wearable product that was novel and potentially marketable. The primary objective was to provide a course that serves as an introduction to digital electronics but with a tangible goal to produce a high-fidelity prototype that student teams presented at the end of the semester. Given the nature of modern wearable devices, which are small, energy efficient, and strongly favor connectivity to other devices, we developed the curriculum around designing a surface-mount Printed Circuit Board (PCB), and we outfitted the student kits with coin-cell battery powered, Bluetooth-connected, Arduino-compatible devices that they needed to learn how to program and connect. We also integrated iOS development into the course so that students' final projects could communicate with both their phones or tablets, or to the Internet via these devices. As the "wearble devices"' field is relatively new, this paper discusses the decisions we made for the set-up of this class, what worked and what did not, and what we would change and improve when we teach it again.	A Modern Wearable Devices Course for Computer Science Undergraduates	NA:NA:NA	2017
Scott Grissom:Sue Fitzgerald:Renée McCauley:Laurie Murphy	Many research studies show students benefit from instructional practices that promote student interaction within the classroom. However, recent prominent reports suggest many instructors still rely on lecture as their dominant classroom activity. This paper reports on a survey of U.S. computer science teaching practices. Responses indicate many CS instructors use student-centered instructional practices but evidence suggests students would benefit from additional use of these practices. Twenty percent of CS instructors report "student-centered activities" are prominent in their classroom. CS instructors are more likely to use student-centered practices than those in other science disciplines but less likely to do so than colleagues in non-science fields. Female CS instructors are more likely to structure their courses around student-centered practices than their male colleagues.	Exposed! CS Faculty Caught Lecturing in Public: A Survey of Instructional Practices	NA:NA:NA:NA	2017
Shuchi Grover:Satabdi Basu	Programming in block-based environments is a key element of introductory computer science (CS) curricula in K-12 settings. Past research conducted in the context of text-based programming points to several challenges related to novice learners' understanding of foundational programming constructs such as variables, loops, and expressions. This research aims to develop assessment items for measuring student understanding in introductory CS classrooms in middle school using a principled approach for assessment design. This paper describes the design of assessments items that were piloted with 100 6th, 7th, 8th graders who had completed an introductory programming course using Scratch. The results and follow-up cognitive thinkalouds indicate that students are generally unfamiliar with the use of variables, and harbor misconceptions about them. They also have trouble with other aspects of introductory programming such as how loops work, and how the Boolean operators work. These findings point to the need for pedagogy that combines popular constructionist activities with those that target conceptual learning, along with better professional development to support teachers' conceptual learning of these foundational constructs.	Measuring Student Learning in Introductory Block-Based Programming: Examining Misconceptions of Loops, Variables, and Boolean Logic	NA:NA	2017
Kevin J. Gucwa:Harry H. Cheng	This paper presents a methodology for creating challenge problems using a simulation environment for a hardware robot-based programming competition. Hosted each spring for K-14 students, the competition is based on hardware robots and lessons which have been used by students within their math, science, and engineering classes throughout the school year. RoboSim is a simulator which complements the control scheme for the hardware robots and is used regularly by the students to supplement running the hardware robots. For the first time RoboSim was used to design the challenges which have been given to students for the 2016 RoboPlay Challenge Competition. Using virtual robots for designing the competition allows more efficient design and testing of the new challenges with new features compared to using only hardware robots. The code which is used to control the robots is unchanged between the hardware and virtual robots making the transition to hardware robots trivial. All challenges from previous RoboPlay competitions are also available to students within RoboSim for testing within the classroom.	Making Robot Challenges with Virtual Robots	NA:NA	2017
Alexandria K. Hansen:Hilary A. Dwyer:Ashley Iveland:Mia Talesfore:Lacy Wright:Danielle B. Harlow:Diana Franklin	We developed the Draw-A-Computer-Scientist-Test (DACST) to better understand elementary school students' conceptions of computer scientists and the nature of their work. By understanding how young children perceive computer scientists, we can broaden their ideas about the activities and images of computer scientists. We administered the DACST to 87 fourth-grade students (ages 8-9) as a pre- and post-assessment to a computer science curriculum. All students attended the same school and were taught by the same female teacher. Before the curriculum, we found that students most often drew male computer scientists working alone, and featured actions that were connected to technology in general (e.g., typing, printing), but not specific to computer science. After the curriculum, more female students drew female computer scientists than before, and the featured actions were more specific to computer science (e.g., programming a game). We also share insights about the classroom-learning environment that may have contributed to changes in students' understanding of computer scientists and their work.	Assessing Children's Understanding of the Work of Computer Scientists: The Draw-a-Computer-Scientist Test	NA:NA:NA:NA:NA:NA:NA	2017
Rachel Harsley:Davide Fossati:Barbara Di Eugenio:Nick Green	Pair programming is a practice where two coders work side by side at one computer. The practice has been linked to many benefits including increased student engagement, satisfaction, and course grades. We present a quantitative study comparing the fine-grained interactions of individual programmers versus pair programmers as they work to solve coding problems using an Intelligent Tutoring System. We collected data from over 115 students resulting in more than 53,000 log events. We discovered that while both individual and pair programmers had equivalent learning gains, pair programmers took significantly less time on most problems, consulted fewer examples, coded more efficiently, and showed more signs of engagement. Individuals adapted to problems requiring new and compounded concepts at a rate similar to pair programmers.	Interactions of Individual and Pair Programmers with an Intelligent Tutoring System for Computer Science	NA:NA:NA:NA	2017
Helen H. Hu:Cecily Heiner:Thomas Gagne:Carl Lyman	From 2012 to 2015, the number of Utah secondary teachers teaching computer science courses grew from 38 to 164. This growth was made possible by introducing three new CS teacher endorsements, which reduced the effort required for existing teachers to start teaching CS. Instead of committing to completing five college-level CS courses in two years, an existing but new-to-CS Utah teacher could complete an Exploring Computer Science (ECS) endorsement in half a year. Thanks to changes to high school graduation requirements, students were able to take a CS course without using an elective credit, boosting enrollment and broadening participation. Analysis of ECS teacher surveys and student surveys found surprisingly few differences between CS-experienced teachers and new-to-CS teachers in their ability to teach CS. By the end of the ECS course, even ECS students with low confidence in their own CS abilities believed that anyone could succeed in CS, regardless of their teacher's CS background. All students' interest in taking additional CS classes significantly increased after taking ECS, although CS-experienced teachers had a stronger impact on ECS students with low confidence than new-to-CS teachers. These results suggest that school districts seeking to provide computer science education for all their students can successfully staff their CS classes by supporting existing secondary teachers with no prior CS background with quality CS professional development and mentoring.	Building a Statewide Computer Science Teacher Pipeline	NA:NA:NA:NA	2017
Chris Johnson	With the increasing availability of inexpensive miniature computers, networked appliances, and 3D printers, many consumers are returning to their "maker" roots, preferring to invent technologies to address personal needs instead of buying ready-made solutions. This maker movement confers many benefits to society: the growth of open source software and open standards, the proliferation of sharing sites where individuals freely publish design files, and communities of practice whose core values include education of new members. Sadly, the first two benefits may undermine the third: the maker movement generates much more stuff to consume. A school may purchase a 3D printer for educational purposes, only to have its student-makers simply download and print other people's models without learning to make their own. To prevent this kind of situation, educators must capitalize on the maker movement in ways that facilitate what we call computational making, which involves both meaningful cognition and the making of artifacts. In this paper, we describe one such way: a programming language named Madeup for generating 3D models.	Toward Computational Making with Madeup	NA	2017
David Kerven:Kristine Nagel:Stella Smith:Sherly Abraham:Laura Young	Faculty face motivational and engagement challenges in general education computing courses. Inquiry-based learning strategies show promise in engaging students in an authentic discovery process. In a general education computer literacy course, we adapted scenario-based curriculum to create a classroom environment where students are faced with a real-life cybersecurity crisis and spurred into active discussion. Working as a team, they were required to analyze provided evidence and document a reasoned solution. We share implementation strategies and challenges to adopting scenarios promoting active learning. Our pilot data suggests this curriculum approach has a positive impact on students' interest in computing, while engaging them in real-world, multi-disciplinary content.	Scenario-Based Inquiry for Engagement in General Education Computing	NA:NA:NA:NA:NA	2017
Hassan Khosravi:Kendra M.L. Cooper	Educators continue to face significant challenges in providing high quality, post-secondary instruction in large classes including: motivating and engaging diverse populations (e.g., academic ability and backgrounds, generational expectations); and providing helpful feedback and guidance. Researchers investigate solutions to these kinds of challenges from alternative perspectives, including learning analytics (LA). Here, LA techniques are applied to explore the data collected for a large, flipped introductory programming class to (1) identify groups of students with similar patterns of performance and engagement; and (2) provide them with more meaningful appraisals that are tailored to help them effectively master the learning objectives. Two studies are reported, which apply clustering to analyze the class population, followed by an analysis of a subpopulation with extreme behaviours.	Using Learning Analytics to Investigate Patterns of Performance and Engagement in Large Classes	NA:NA	2017
Sami Khuri:Miri VanHoven:Natalia Khuri	In this paper, we describe the Minor in Bioinformatics that we created to better prepare students, especially women, in acquiring computational and programming skills. Our program was motivated by the fact that women are underrepresented in computer science and in other information technology-related fields. We aim to recruit biology undergraduates, who are more than 60% female, to the new cohort-based integrative interdisciplinary Minor in Bioinformatics program. By rooting this new computational program in biological concepts and questions, we plan to interest and educate biology students in computational methods, which can be applied to complex questions in the growing field of bioinformatics. We expect that the Minor in Bioinformatics program will serve as a general framework for establishing similar interdisciplinary programs at large institutions and small colleges.	Increasing the Capacity of STEM Workforce: Minor in Bioinformatics	NA:NA:NA	2017
Ada S. Kim:Andrew J. Ko	Online coding tutorials are increasingly popular among learners, but we still have little knowledge of their quality. To address this gap, we derived several dimensions of pedagogical effectiveness from the learning sciences and education literature and analyzed a large sample of tutorials against these dimensions. We sampled 30 popular and diverse online coding tutorials, and analyzed what and how they taught learners. We found that tutorials largely taught similar content, organized content bottom-up, and provided goal-directed practices with immediate feedback. However, few were tailored to learners' prior coding knowledge and only a few informed learners how to transfer and apply learned knowledge. Based on these results, we discuss strengths and weaknesses of online coding tutorials, opportunities for improvement, and recommend that educators point their students to educational games and interactive tutorials over other tutorial genres.	A Pedagogical Analysis of Online Coding Tutorials	NA:NA	2017
Michael S. Kirkpatrick	Team-Based Learning (TBL) is an active learning pedagogy that involves a substantial amount of preparation work by students. While previous work shows that objective measures of student learning outcomes improved after TBL adoption in CS, little work has been done to evaluate the students' perspectives rigorously. In this work, we present the qualitative findings from a larger mixed-methods study of student perspectives. These results suggest that most students find TBL rewarding, although there are some aspects of the pedagogy that can be frustrating and may require alteration for TBL adoption in CS.	Student Perspectives of Team-Based Learning in a CS Course: Summary of Qualitative Findings	NA	2017
Michael S. Kirkpatrick:Chris Mayfield	Before Fall 2013, our CS majors were required to take the same 4-credit introductory programming course as part of a two-semester CS1 designed to be welcoming to novices. As CS in K-12 has expanded, the diversity of incoming students' programming backgrounds has increased, raising concerns that the climate was becoming increasingly intimidating for novices. The literature suggests these effects could disproportionately impact retention of female students and other underrepresented minorities, undermining other efforts to broaden participation in computing. To address these concerns, we split the first course based on students' prior programming experience. Using statistical techniques, we analyzed the intermediate quantitative impact of this and other curricular changes. Our results suggest that adding the alternative CS1 course had little effect on retention, but the overall structure has been successful in achieving comparable CS2 outcomes regardless of prior experience.	Evaluating an Alternative CS1 for Students with Prior Programming Experience	NA:NA	2017
Edwin M. Knorr:Christopher Thompson	This paper reports on our experiences with in-lab programming tests (i.e., using a compiler and IDE) in a large undergraduate data structures course in C for non-specialists. By adding a suite of in-lab programming tests to our regular assessments (midterm, final exam, programming homework, etc.), we expected students to improve significantly in these areas: (1) programming ability as measured by final exam grades on programming-related questions, (2) confidence in programming ability, and (3) contributions/effectiveness in pair programming partnerships. Goal (1) was not met. Although Goal (2) was met, improved confidence did not translate into improved performance. Goal (3) was partially met. We present data gathered from in-lab programming test assessments, final exam programming assessments, and post-course surveys, including a two-year follow-up survey.	In-Lab Programming Tests in a Data Structures Course in C for Non-Specialists	NA:NA	2017
Tobias Kohn	For novice programmers one of the most problematic concepts is variable assignment and evaluation. Several questions emerge in the mind of the beginner, such as what does x = 7 + 4 or x = x + 1 really mean? For instance, many students initially think that such statements store the entire calculation in variable x, evaluating the result lazily when actually needed. The common increment pattern x = x + 1 is even believed to be outright impossible. This paper discusses a multi-year project examining how high school students think of assignments and variables. In particular, where does the misconception of storing entire calculations come from? Can we explain the students' thinking and help them develop correct models of how programming works? It is particularly striking that a model of the computer as a machine with algebraic capabilities would indeed produce the observed misconceptions. The misconception might simply be attributed to the expectation that the computer performs computations the exact same way students are taught to in mathematics.	Variable Evaluation: an Exploration of Novice Programmers' Understanding and Common Misconceptions	NA	2017
Zachary Kurmas	We present MIPSUnit, a unit test framework for MIPS assembly. MIPSUnit's primary benefit is that it reduces the time needed to grade assembly language assignments. It also provides a time-efficient means for giving students additional testing experience; therefore, it can serve as one component of a curriculum-wide emphasis on testing. MIPSUnit is a suite of two tools: MUnit, which allows users to test their assembly code with JUnit tests, and MSpec, which uses RSpec-style unit tests.	MIPSUnit: A Unit Testing Framework for MIPS Assembly	NA	2017
Mackenzie Leake:Colleen M. Lewis	Many organizations have developed websites to support high school computer science (CS) teachers by providing them with collections of teaching resources. Yet rarely do these sites take into account the unique challenges of new CS teachers who often have not had formal training in CS. In response to a documented lack of teachers' engagement on these sites, we interviewed 17 CS teachers to learn more about the ways in which these sites are and are not meeting teachers' needs for curriculum resources. We discuss our findings about how teachers use, adapt, and share resources and then provide several suggestions for designing resource sharing sites that support teachers who have varying levels of experience teaching CS.	Recommendations for Designing CS Resource Sharing Sites for All Teachers	NA:NA	2017
Irene A. Lee:Maureen Psaila Dombrowski:Ed Angel	In this paper, we describe a new teacher professional development program, New Mexico Computer Science for All (NM-CSforAll), that prepares high school science, technology, engineering and math (STEM) teachers to serve as learning coaches / teaching assistants for a dual credit Computer Science (CS) course. The dual credit course for students follows a "flipped classroom" model with the lecture portion delivered online through University of New Mexico (UNM) and the lab portion offered by participating teachers at local high schools. The course utilized a novel curriculum focusing on teaching CS concepts through computer modeling of complex adaptive systems. We reflect on what we learned while preparing STEM teachers to become CS teachers and discuss the affordances and barriers to bringing CS education to rural and under-resourced schools across the state of New Mexico.	Preparing STEM Teachers to offer New Mexico Computer Science for All	NA:NA:NA	2017
Dan Leyzberg:Christopher Moretti	Two-thirds of all computer science teachers in the United States do not have a degree in computer science. As demand for K-12 computer science education continues to grow, and as industry continues to lure computer science graduates away from careers in education, school administrators are increasingly forced to ask teachers with little formal training in computer science to teach computer science courses. This is such a common phenomenon that there are now many competing summer professional development programs aimed at training teachers of other subjects to teach a first course in computer science. However, once these teachers become comfortable teaching the introductory material, there is little support available for them to gain more content knowledge to be able to support their more advanced students or design additional computer science courses. In this paper, we describe our approach to providing more advanced computer science content knowledge to computer science teachers in a week-long summer professional development program.	Teaching CS to CS Teachers: Addressing the Need for Advanced Content in K-12 Professional Development	NA:NA	2017
Soohyun Nam Liao:William G. Griswold:Leo Porter	As student enrollments in computer science increase, there is a growing need for pedagogies that scale. Recent evidence has shown Peer Instruction (PI) to be an effective in-class pedagogy that reports high student satisfaction even with large classes. Yet, the question of the scalability of traditional lecture versus PI is largely unexplored. To explore this question, this work examines publicly available student evaluations of computer science courses across a wide range of class sizes (50--374 students) over a four year period. It first compares evaluations regardless of size and confirms prior work that PI classes are better appreciated by students than traditional lecture. It then examines how course evaluations change with class size and provides evidence that PI achieves a smaller decline in evaluations as class size increases.	Impact of Class Size on Student Evaluations for Traditional and Peer Instruction Classrooms	NA:NA:NA	2017
Breanne K. Litts:Yasmin B. Kafai:Debora Lui:Justice Walker:Sari Widman	In this paper, we examine students? learning about computing by designing, coding, and remixing electronic textiles with sensor inputs and light outputs. We conducted a workshop with 23 high school students ages 16-17 years who learned how to craft and code circuits with the LilyPad Arduino, an electronic textile construction kit. Our analyses not only confirm significant increases in students' understanding of functional circuits but also showcase students' ability in reading, remixing and writing program code for controlling circuits. In our discussion, we address opportunities and challenges of introducing codeable circuit design for integrating maker activities that include engineering and computing into K-12 classrooms.	Understanding High School Students' Reading, Remixing, and Writing Codeable Circuits for Electronic Textiles	NA:NA:NA:NA:NA	2017
Josje Lodder:Bastiaan Heeren:Johan Jeuring	This paper describes an algorithm to generate Hilbert-style axiomatic proofs. Based on this algorithm we develop logax, a new interactive tutoring tool that provides hints and feedback to a student who stepwise constructs an axiomatic proof. We compare the generated proofs with expert and student solutions, and conclude that the quality of the generated proofs is comparable to that of expert proofs. logax\ recognizes most steps that students take when constructing a proof. If a student diverges from the generated solution, logax can still provide hints and feedback.	Generating Hints and Feedback for Hilbert-style Axiomatic Proofs	NA:NA:NA	2017
Ellie Lovellette:John Matta:Dennis Bouvier:Roger Frye	Contextualization of problems is widely studied in mathematics education. In computer science it is taken for granted that authentic, contextualized programming assignments will increase student interest and therefore enhance performance in programming assignments. This paper examines whether contextualization is, in fact, beneficial for students. We present a study that compares novice programmers' ability to code a solution given two versions of a problem. One version is contextualized, the other is non-contextualized, using "just the numbers." The results presented indicate that there is no difference in success rates for the two types of programming assignments.	Just the Numbers: An Investigation of Contextualization of Problems for Novice Programmers	NA:NA:NA:NA	2017
Bruce A. Maxwell:Stephanie R. Taylor	Context-based CS1 courses focusing on Media Computation, Robotics, Games, or Art have been shown to improve outcomes such as retention and gender balance, both important factors in CS education. Colby College has offered a Visual Media focused CS1 course since 2008, and in response to faculty and student feedback, we expanded our curriculum to include a second context-based CS1 course focused on Science applications. Our goal was to have completely different projects but teach the same fundamental concepts. In order to measure whether students in each version were learning the same concepts, and to reduce confounding factors, the same professors co-taught both versions of CS1 and students completed the same homework, quizzes, and final exam. Our analysis of the quiz, final exam, and final overall performance showed no statistically significant difference by context or by gender. There was also no difference by context or gender in whether students took additional CS courses in the following two semesters. Furthermore, as a percentage of the students eligible to take the next offering of CS2, Data Structures and Algorithms, 48% of the students in these two offerings of CS1 registered for CS2, with no significant difference between contexts. Our conclusion is that we were successful in achieving similar outcomes, and the benefits of context-based CS1 courses, in both the Visual Media and Science versions of the course.	Comparing Outcomes Across Different Contexts in CS1	NA:NA	2017
Robert McCartney:Jonas Boustedt:Anna Eckerdal:Kate Sanders:Carol Zander	In a survey of the CS-education community, we find a range of beliefs about the "geek gene" theory. We suggest an alternative term, the "geekiness quotient (GQ)". The GQ, grounded in Gardner's work on multiple intelligences, is a hypothetical measure of the student's current CS ability. The GQ supports a moderate view of the geek gene: that students arrive in our classrooms with a range of CS abilities, whether acquired through background or innate talent, and can improve their abilities through effort.	Folk Pedagogy and the Geek Gene: Geekiness Quotient	NA:NA:NA:NA:NA	2017
Paola Medel:Vahab Pournaghshband	Low female participation in Computer Science is a known problem. Studies reveal that female students are less confident in their CS skills and knowledge than their male counterparts, despite parallel academic performance indicators. While prior studies focus on limited, apparent factors causing this lack of confidence, our work is the first to demonstrate how, in CS, instructional materials may lead to the promotion of gender inequality. We use a multidisciplinary perspective to examine profound, but often subtle portrayals of gender bias within the course materials and reveal their underlying pedagogical causes. We examine three distinct samples of established CS teaching materials and explain how they may affect female students. These samples, while not a complete display of all gender inequalities in CS curriculum, serve as effective representations of the established trends of male-centered representation, imagery, and language that may promote gender inequality. Finally, we present easily implementable, alternative gender equitable approaches that maximize gender inclusion.	Eliminating Gender Bias in Computer Science Education Materials	NA:NA	2017
Christian Murphy:Swapneel Sheth:Sydney Morton	Since 2012, over 1,100 students at our institution have participated in software engineering courses in which they had the opportunity to partake in "real projects for real customers." Unlike typical one-semester courses or yearlong capstones, our approach is unique in that we offer a two-course sequence in which one group of students develops the initial implementation in the first course and different students maintain and improve the code in the second. This paper presents our experiences in teaching these courses and serves as a blueprint for other educators who wish to create similar interventions for their students over a two-course sequence. In addition to describing our motivation and the structure of the courses, we discuss how we address issues of scale by using students as Project Managers and the benefits of doing so. We also present empirical evidence that the projects help students feel more confident working in groups, using the agile development process, and working with a real-world customer.	A Two-Course Sequence of Real Projects for Real Customers	NA:NA:NA	2017
Andres Neyem:Juan Diaz-Mosquera:Jorge Munoz-Gama:Jaime Navon	Project-based courses can provide valuable learning experiences for computing majors as well as for faculty and community partners. However, proper coordination between students, stakeholders and the academic team is very difficult to achieve. We present an integral study consisting of a twofold approach. First, we propose a proven capstone course framework implementation in conjunction with an educational software tool to support and ensure proper fulfillment of most academic and engineering needs. Second, we propose an approach for mining process data from the information generated by this tool as a way of understanding these courses and improving software engineering education. Moreover, we propose visualizations, metrics and algorithms using Process Mining to provide an insight into practices and procedures followed during various phases of a software development life cycle. We mine the event logs produced by the educational software tool and derive aspects such as cooperative behaviors in a team, component and student entropy, process compliance and verification. The proposed visualizations and metrics (learning analytics) provide a multi-faceted view to the academic team serving as a tool for feedback on development process and quality by students	Understanding Student Interactions in Capstone Courses to Improve Learning Experiences	NA:NA:NA:NA	2017
Mike O'Leary	This paper provides pedagogical lessons drawn from a capstone hands-on laboratory course in cyber operations. It is taught as a flipped class, where the center piece is a collection of exercises that require teams of students to set up, defend, and attack complex networks. Project designs are presented, including balancing offense and defense to improve course learning outcomes. Lessons on the recruiting and managing of an external "red team" are provided. Grading issues are addressed, as are techniques to manage students of different skills and motivations.	Innovative Pedagogical Approaches to a Capstone Laboratory Course in Cyber Operations	NA	2017
Yin Pan:Sumita Mishra:David Schwartz	The growing shortage of skilled professionals in cybersecurity and forensics has increased global demand for information systems professionals. To identify and attract more students to cybersecurity and forensics programs, the authors developed a game engine along with a sequence of entertaining, engaging, and educational games, suitable for forensics and cybersecurity courses. This paper focuses on the design and development of a modular educational game framework composed of a game engine and a GUI-based game creator. Following narrative and storylines of the game via interactive dialogs and visualized abstract concepts, students are motivated and engaged to obtain the necessary knowledge. Students will also develop their problem solving skills by using real tools and technologies while playing the game. The GUI-based game creator allows educators to create and develop new educational games by only focusing on game content.	Gamifying Course Modules for Entry Level Students	NA:NA:NA	2017
Anthony Papini:Leigh Ann DeLyser:Nathaniel Granor:Kevin Wang	The rapid expansion of computer science (CS) education across the United States has left schools struggling to find teachers for CS classrooms. One approach to supplementing school and teacher expertise is to use industry professionals as volunteers in the classroom. This paper outlines the model of recruiting, training, and supporting volunteers in CS classrooms used by TEALS, a national computer science education program that creates co-teaching partnerships between industry experts and educators. This paper presents detailed information about the volunteers and the training the they receive, as well as the impact and outcomes on the students and cooperating teachers. Results from teacher, student, and volunteer surveys show satisfaction with the volunteers, as well as continued growth in perceived volunteer classroom performance over the year.	Preparing and Supporting Industry Professionals as Volunteer High School Computer Science Co-Instructors	NA:NA:NA:NA	2017
Vivek Paramasivam:Justin Huang:Sarah Elliott:Maya Cakmak	Robots are becoming popular in Computer Science outreach to K-12 students. Easy-to-program toy robots already exist as commercial educational products. These toys take advantage of the increased interest and engagement resulting from the ability to write code that makes a robot physically move. However, toy robots do not demonstrate the potential of robots to carry out useful everyday tasks. On the other hand, functional robots are often difficult to program even for professional software developers or roboticists. In this work, we apply end-user programming tools for functional robots to the Computer Science outreach context. This experience report describes two offerings of a week-long introductory workshop in which students with various disabilities learned to program a Clearpath Turtlebot, capable of delivering items, interacting with people via touchscreen, and autonomously navigating its environment. We found that the robot and the end-user programming tool that we developed in previous work were successful in provoking interest in Computer Science among both groups of students and in establishing confidence among students that programming is both accessible and interesting. We present key observations from the workshops, lessons learned, and suggestions for readers interested in employing a similar approach.	Computer Science Outreach with End-User Robot-Programming Tools	NA:NA:NA:NA	2017
Miranda C. Parker:Leigh Ann DeLyser	Computer science is rapidly expanding across the United States, and as schools look for guidance about what constitutes developmentally appropriate topics, state education departments are looking for assistance in the creation of standards. The K--12 Computer Science (CS) Framework was developed to fit these needs. The framework is the first of its kind in the K--12 CS domain, filling a much-needed structural and definitional role in the field. The framework was created as part of a collaboration at multiple levels within the CS community across the United States. Following the footsteps of other disciplines, this framework provides definitions and guidelines on what students should know (concepts) and be able to do (practices) within certain grade bands in today's computing classrooms. This paper details why the framework was developed, how it was designed, and what impacts it could have on the future of K--12 computing education.	Concepts and Practices: Designing and Developing A Modern K-12 CS Framework	NA:NA	2017
John Peterson:Greg Haynes	We present an experience report demonstrating the use a Domain-Specific Language, Nuterpea, in a general education music class. While the use of computing in music education is common, we demonstrate that {\em coding} allows students without a background in music or computing to explore topics in music form and theory. Coding supports a new style of music education, one that is focused on creating musical compositions rather that performance or appreciation of existing music. We focus on styles of music that can be built algorithmically from a structural description. With such music the use of coding allows students to define and use patterns in a way that makes it possible for complex compositions to be specified in a concise manner. This approach suits the context of general education; we have designed our curriculum around genres of music that are easily represented in an algorithmic manner. Our experience suggests that a well-designed DSL for describing musical compositions provides a unique way to introduce students to core concepts in music in way that is engaging for learners and pedagogically appropriate for topics in music theory and structure. In addition, students are exposed to computer science topics such as programming language syntax, functions, abstractions, and types. We have also used this approach with pre-college students and believe that this style of music education can be adapted to a K12 environment.	Integrating Computer Science into Music Education	NA:NA	2017
Raymond S. Pettit:John Homer:Roger Gee	One common frustration students face when first learning to program in a compiled language is the difficulty in interpreting the compiler error messages they receive. Attempts to improve error messages have produced differing results. Two recently published papers showed conflicting results, with one showing measurable change in student behavior, and the other showing no measurable change. We conducted an experiment comparable to these two over the course of several semesters in a CS1 course. This paper presents our results in the context of previous work in this area. We improved the clarity of the compiler error messages the students receive, so that they may more readily understand their mistakes and be able to make effective corrections. Our goal was to help students better understand their syntax mistakes and, as a reasonable measure of our success, we expected to document a decrease in the number of times students made consecutive submissions with the same compilation error. By doing this, we could demonstrate that this enhancement is effective. After collecting and thoroughly analyzing our own experimental data, we found that--despite anecdotal stories, student survey responses, and instructor opinions testifying to the tool's helpfulness--enhancing compiler error messages shows no measurable benefit to students. Our results validate one of the existing studies and contradict another. We discuss some of the reasons for these results and conclude with projections for future research.	Do Enhanced Compiler Error Messages Help Students?: Results Inconclusive.	NA:NA:NA	2017
Jonathan Pierce:Craig Zilles	We analyzed 6 semesters of data from a large enrollment data structures course to identify instances of plagiarism in 4 assignments. We find that the majority of the identified plagiarism instances involve cross-semester cheating and are performed by students for whom the plagiarism is an isolated event (in the studied assignments). Second, we find that providing students an opportunity to work with a partner doesn't decrease the incidence of plagiarism. Third, while plagiarism on a given assignment is correlated with better than average scores on that assignment, plagiarism is negatively correlated with final grades in both the course that the plagiarism occurred and in a subsequent related course. Finally, we briefly describe the Algae open-source suite of plagiarism detectors and characterize the kinds of obfuscation that students apply to their plagiarized submissions and observe that no single algorithm appears to be sufficient to detect all of the cases.	Investigating Student Plagiarism Patterns and Correlations to Grades	NA:NA	2017
Lori Pollock:Crystalla Mouza:Amanda Czik:Alexis Little:Debra Coffey:Joan Buttram	The CS for All initiative places increased emphasis on the need to prepare K-12 teachers of computer science (CS). Professional development (PD) programs continue to be an essential mechanism for preparing in-service teachers who have little formal background in CS content, skills, and teaching pedagogy. While increased investment by federal agencies and the industry has raised the number of CS PD opportunities for K-12 teachers, there has been limited study of how teachers apply what they learn back in their classroom. This paper describes an in-depth qualitative study through interviews of 28 elementary, middle and high school teachers who participated in summer PD in preparation of teaching a full CS course or integrate CS modules into existing courses (e.g., science, engineering, business, technology, etc). The interview protocol focused on educators' involvement in the PD, specific skills and strategies they learned, whether and how they have been able to apply these new skills in the classroom, what facilitated or impeded this application, and how students have responded.	From Professional Development to the Classroom: Findings from CS K-12 Teachers	NA:NA:NA:NA:NA:NA	2017
Thomas W. Price:Yihuan Dong:Dragan Lipovac	Programming environments intentionally designed to support novices have become increasingly popular, and growing research supports their efficacy. While these environments offer features to engage students and reduce the burden of syntax errors, they currently offer little support to students who get stuck and need expert assistance. Intelligent Tutoring Systems (ITSs) are computer systems designed to play this role, helping and guiding students to achieve better learning outcomes. We present iSnap, an extension to the Snap programming environment which adds some key features of ITSs, including detailed logging and automatically generated hints. We share results from a pilot study of iSnap, indicating that students are generally willing to use hints and that hints can create positive outcomes. We also highlight some key challenges encountered in the pilot study and discuss their implications for future work.	iSnap: Towards Intelligent Tutoring in Novice Programming Environments	NA:NA:NA	2017
Noa Ragonis:Ronit Shmallo	The paper presents research conducted with high school (HS) students (N=86) learning object-oriented programming (OOP) and computer science HS teachers (N=48). The focus was on students' and teachers' understanding of the this reference. Proper conceptualization of this indicates an understanding of objects in general and of the current object, and it involves various aspects of programming variants. Students' preferences as to the use of the this reference were also examined. Findings revealed a lack of understanding of both the implication and the implementation of this; only 45% of the students expressed understanding of when we must use this; only 60% expressed understanding of when not to use this, and only 24% expressed clear understanding in their definition of this. Even correct answers do not necessarily indicate conceptual understanding, rather a repetition of definitions or programming habits, or a reliance on operative aspects of the implementation. The teachers expressed a considerable lack of clarity in accurately characterizing the correctness of students' answers.	On the (Mis) Understanding of the "this" Reference	NA:NA	2017
Kathryn Rich:Carla Strickland:Diana Franklin	Research on appropriate topics and goals for computer science (CS) education in elementary and middle school has been ongoing for decades, but the recent movement toward CS for all requires the research community to gain a better understanding of what is most important to teach, to whom, and in what order. We conducted a literature review with specific attention to cataloging computer science learning goals that experts theorize are important to teach as well as learning goals that have been explored and researched with students in K-8. By mapping the former onto the latter, we discovered six categories of goals that are theorized as important but, according to our review, are yet to be researched with K-8 students. We discuss the potential implications of these gaps for future research.	A Literature Review through the Lens of Computer Science Learning Goals Theorized and Explored in Research	NA:NA:NA	2017
Brandon Rodriguez:Stephen Kennicutt:Cyndi Rader:Tracy Camp	Computer Science (CS) Unplugged activities have been deployed in many informal settings to present computing concepts in an engaging manner. To justify use in the classroom, however, it is critical for activities to have a strong educational component. For the past three years, we have been developing and refining a CS Unplugged curriculum for use in middle school classrooms. In this paper, we describe an assessment that maps questions from a comprehensive project to computational thinking (CT) skills and Bloom's Taxonomy. We present results from two different deployments and discuss limitations and implications of our approach.	Assessing Computational Thinking in CS Unplugged Activities	NA:NA:NA:NA	2017
Fernando J. Rodríguez:Kimberly Michelle Price:Kristy Elizabeth Boyer	Pair programming is a collaboration paradigm that has been increasingly adopted in computer science education. Research has established that pair programming can hold benefits for students' learning and attitudes, but comparatively little is known about the ways in which the collaborative process benefits students' CS learning. This paper examines the collaboration process, comparing important outcomes with how students' dialogue and problem-solving approaches unfolded. The results show that the collaboration is more effective when both partners make substantive dialogue contributions, express uncertainty, and resolve it. In particular, driver dialogue expressivity is associated with improved outcomes. The findings provide insight into the ways in which pair programming dialogue benefits student learning during CS problem solving.	Exploring the Pair Programming Process: Characteristics of Effective Collaboration	NA:NA:NA	2017
Linda J. Sax:Kathleen J. Lehman:Christina Zavala	As enrollments in computer science (CS) undergraduate programs are booming, CS departments are struggling to accommodate more students while also seeking to bring more women and underrepresented minority (URM) students into the field. A particular burden has been placed on introductory CS (i.e., CS1) courses to navigate these important, but sometimes competing, realities. As CS departments employ strategies to manage growing enrollments and recruit more diverse students into their CS1 courses, administrators and faculty will benefit from knowing more about the students who take these courses and how they may differ based on their major (CS majors and non-majors), gender, and race/ethnicity. This paper presents findings from a national study of CS1 courses and discusses key differences in introductory course students' demographic and background characteristics and pre-course experiences across these groups.	Examining the Enrollment Growth: Non-CS Majors in CS1 Courses	NA:NA:NA	2017
Benjamin J. Schreiber:John P. Dougherty	We discuss two video series, one that serves as an introduction to Binary Search, and the other to Selection Sort. Each narrated series begins with an overview of the algorithm and step-by-step simulations on an interactive blackboard. The series next proceeds to a video that illustrates how to perform a complexity analysis with guided examples, and then applies that process to the associated algorithm. The series concludes with a video showcasing a song with algorithm pseudocode as lyrics, which are utilized line by line to implement the algorithm in code. These video series were piloted among a set of introductory courses involving coding and algorithmic concepts at two colleges. We assess the effectiveness of each series in terms of conceptual understanding and changes in student attitudes.	Assessment of Introducing Algorithms with Video Lectures and Pseudocode Rhymed to a Melody	NA:NA	2017
Nick Senske	Non-major education continues to be a growing area of study in computer science education research. This paper focuses on architects as an audience and the teaching of computer science by architects, who successfully applied computer science education research. The author describes the structure and development of a required computational thinking course with an average yearly enrollment of 69 students and how it applied best practices from Media Computation to improve student outcomes and engagement. A four-year impact study found that a flipped classroom model combined with peer learning methods was superior to traditional lectures and labs for improving student performance and reducing attrition. Comparisons of pre- and post-class surveys revealed an improved perception of computing and an increased interest in the subject -- a positive outcome for a required introductory course. The author also studied the course's long-term effects. Three years after taking the course, a majority of students felt they retained what they learned and that learning computational thinking helped them to learn new software and perform better in advanced computing courses. By taking into account how architects learn and revising in response to assessments, we believe our course structure and teaching methodology demonstrates an effective case for applying computer science education research within an architectural curriculum.	Evaluation and Impact of a Required Computational Thinking Course for Architecture Students	NA	2017
Sue Sentance:Jane Waite:Steve Hodges:Emily MacLeod:Lucy Yeomans	The recent introduction of computer science (CS) education into schools in many countries has led to a surge in interest in programming tools and approaches which make CS concepts and tasks engaging, motivating and accessible to all. There is renewed interest in supporting learning through physical computing, which has been shown to be motivational whilst offering opportunities for collaboration and creativity. Within this context the BBC recently led a collaborative venture in the UK to develop a portable and low-cost programmable device. The consortium funded and produced one million devices, enough for every 11-12 year-old in the UK. In this paper, we report on what we believe to be the first study to investigate the usability and affordances of the BBC micro:bit. We interviewed 15 teachers and 54 pupils in schools in England about their experiences with the device who were, in general, enthusiastic about the potential of the BBC micro:bit. We describe pupils' experiences in terms of usability, creativity, the tangibility of the device and their learning of programming, and analyse their experiences in the context of previously reported benefits of physical computing.	"Creating Cool Stuff": Pupils' Experience of the BBC micro:bit	NA:NA:NA:NA:NA	2017
Sue Sentance:Andrew Csizmadia	In the context of rapid curriculum change, teaching computer science in school requires new skills and knowledge that existing teachers may not have. As well as a programme of teacher professional development (TPD), certification can be used to provide recognition to in-service teachers who have made the transition to computer science. The BCS Certificate in Computer Science Teaching has been designed and developed to give teachers professional recognition of their competence in teaching the computer science elements of the Computing curriculum. In this paper we describe the innovative design of this national certification and our experience over the last two years of its implementation; we are not aware of any similar scheme to offer professional recognition to in-service K-12 computer science teachers.	Professional Recognition Matters: Certification for In-service Computer Science Teachers	NA:NA	2017
Duane F. Shell:Leen-Kiat Soh:Abraham E. Flanigan:Markeya S. Peteranetz:Elizabeth Ingraham	Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear "dosage effect" of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed.	Improving Students' Learning and Achievement in CS Classrooms through Computational Creativity Exercises that Integrate Computational and Creative Thinking	NA:NA:NA:NA:NA	2017
Aaron J. Smith:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel	Increased enrollments in computer science programs presents a new challenge of quickly accommodating higher enrollment in computer science introductory courses. Because peer teaching scales with enrollment size, it is a promising solution for supporting computer science students in this setting. However, pedagogical and logistical challenges can arise when implementing a large peer teaching program. To study these challenges, we developed a transparent online tool, My Digital Hand, for tracking one-to-one peer teaching interactions. We deployed the tool across three universities in large CS2 computer science courses. The data gathered confirms the pedagogical and logistical challenges that exist at scale and gives insight into ways we might address them. Using this information, we developed the second iteration of My Digital Hand to better support peer teaching. This paper presents the modified tool for use by the computer science education community.	My Digital Hand: A Tool for Scaling Up One-to-One Peer Teaching in Support of Computer Science Learning	NA:NA:NA:NA:NA	2017
Sohum Sohoni:Scotty D. Craig:Shaowen Lu	This paper presents an initial investigation on the effect of non-pre-exposure to an instruction set architecture (ISA). In particular, a specialized ISA based on the Progressive Learning Platform (PLP) is implemented in the computer architecture course. Prior research has demonstrated the benefits of using PLP in the computer engineering curriculum. However, it is possible that the PLP ISA could hinder learning by requiring extra work for students to master it (extraneous load), if they have not had prior exposure to it. To investigate this, the current study implemented a quasi-experimental design with two groups (students knowledgeable with PLP from a previous course, and new users) and a pretest to determine differences in students' familiarity with the common terms in computer engineering, pre-requisite knowledge for a computer architecture course, and course knowledge. Both sets of students implemented the PLP CPU in behavioral Verilog in the computer architecture course. Results of the evaluations revealed significant learning from pretest to posttest by students in both groups on all measures. Moreover, no group differences were seen, indicating that pre exposure to an ISA (specifically PLP ISA) might not be necessary for successful course implementation. This is promising, considering that many students at 4-year colleges in the USA transfer from other institutions, and may have exposure to different instruction set architectures in their prerequisite courses. The sample size for this study is too small to draw a firm conclusion, but these preliminary findings merit further exploration of this topic.	Impact of Prior Exposure to the PLP Instruction Set Architecture in a Computer Architecture Course	NA:NA:NA	2017
Shashank Srikant:Varun Aggarwal	Data-driven decision making is fast becoming a necessary skill in jobs across the board. The industry today uses analytics and machine learning to get useful insights from a wealth of digital information in order to make decisions. With data science becoming an important skill needed in varying degrees of complexity by the workforce of the near future, we felt the need to expose school-goers to its power through a hands-on exercise. We organized a half-day long data science tutorial for kids in grades 5 through 9 (10-15 years old). Our aim was to expose them to the full cycle of a typical supervised learning approach - data collection, data entry, data visualization, feature engineering, model building, model testing and data permissions. We discuss herein the design choices made while developing the dataset, the method and the pedagogy for the tutorial. These choices aimed to maximize student engagement while ensuring minimal pre-requisite knowledge. This was a challenging task given that we limited the pre-requisites for the kids to the knowledge of counting, addition, percentages, comparisons and a basic exposure to operating computers. By designing an exercise with the stated principles, we were able to provide to kids an exciting, hands-on introduction to data science, as confirmed by their experiences. To the best of the authors' knowledge, the tutorial was the first of its kind. Considering the positive reception of such a tutorial, we hope that educators across the world are encouraged to introduce data science in their respective curricula for high-schoolers and are able to use the principles laid out in this work to build full-fledged courses.	Introducing Data Science to School Kids	NA:NA	2017
Dannie M. Stanley	"The education of all software engineering students must include student experiences with the professional practice of software engineering." There have been many models proposed to include professional practice in computer science and software engineering curricula. Some schools simulate professional practice in the classroom with large term or multi-term projects. Others require students to engage in professional practice outside of the classroom in an internship or co-op program. We have been exploring an alternative approach to integrating professional practice into our computer science curriculum. In our approach, we partner with an external software consulting company who employs our students directly. Students telecommute from campus and are engaged directly in real-world software development projects. We provide an academic advisor to help guide the development of the program, look for learning opportunities in the work, and mentor students. We describe our approach, solutions to the challenges we faced, and the direct and indirect benefits of our approach.	CORP: Co-operative Remote Practicum Work Experience Model for Software Engineering Education	NA	2017
Ben Stephenson:Michelle Craig:Daniel Zingaro:Diane Horton:Danny Heap:Elaine Huynh	An exam wrapper is a structured activity that students engage in after their instructor has graded and returned an exam, and is designed to promote self-reflection and improve study practices. This paper describes two studies examining the efficacy and student perceptions of exam wrappers. The studies were conducted at two major Canadian universities, using complementary research designs. We report that neither study produced evidence that exam wrappers have a significant effect on final exam scores or on course drop rates. However, we also find that the use of wrappers was associated with improved rates of test pickup and increased scores on a course evaluation question regarding the fairness of evaluation methods. Given these results, we advise instructors who are considering the use of exam wrappers to review the evidence for other possible interventions that may more effectively serve the same goals.	Exam Wrappers: Not a Silver Bullet	NA:NA:NA:NA:NA:NA	2017
Kathleen Timmerman:Travis Doom	An important part of maintaining and continuously improving programs is assessing student objectives to evaluate the impact of change. This paper reviews an infrastructure that was designed to give continuous periodic direct measurements of retained relevant knowledge throughout a computer science and computer engineering baccalaureate curriculum. This infrastructure is designed to give immediate feedback to students and instructors as well as long-term assessment of program health. Additionally, due to the continuous nature of the assessment, its deployment is designed to avoid undue burden in deployment.	Infrastructure for Continuous Assessment of Retained Relevant Knowledge	NA:NA	2017
David S. Touretzky:Christina Gardner-McCune:Ashish Aggarwal	Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft's Kodu Game Lab; the second group was also given four semantic "Laws of Kodu" to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.	Semantic Reasoning in Young Programmers	NA:NA:NA	2017
Arie Van Deursen:Maurício Aniche:Joop Aué:Rogier Slag:Michael De Jong:Alex Nederlof:Eric Bouwers	Teaching software architecture is hard. The topic is abstract and is best understood by experiencing it, which requires proper scale to fully grasp its complexity. Furthermore, students need to practice both technical and social skills to become good software architects. To overcome these teaching challenges, we developed the Collaborative Software Architecture Course. In this course, participants work together to study and document a large, open source software system of their own choice. In the process, all communication is transparent in order to foster an open learning environment, and the end-result is published as an online book to benefit the larger open source community. We have taught this course during the past four years to classes of 50-100 students each. Our experience suggests that: (1) open source systems can be successfully used to let students gain experience with key software architecture concepts, (2) students are capable of making code contributions to the open source projects, (3) integrators (architects) from open source systems are willing to interact with students about their contributions, (4) working together on a joint book helps teams to look beyond their own work, and study the architectural descriptions produced by the other teams.	A Collaborative Approach to Teaching Software Architecture	NA:NA:NA:NA:NA:NA:NA	2017
Tammy VanDeGrift	This paper describes the creation, use, and evaluation of POGIL (Process Oriented Guided Inquiry Learning) activities in a Data Structures course. POGIL draws upon constructivist and collaborative learning theories in which students work in teams through guided sets of questions. The purpose of this study was to see how students valued POGIL activities in terms of their learning. Survey responses were used to assess how students valued POGIL. Over 90% of students stated that POGIL helped them learn the material. Not only did it help them learn data structures, they reported value in working through problems with others, seeing how others think, being accountable for their own learning, and using the activities to review the material. Overall, POGIL was valued by students and this teaching method could be of value to other computing courses.	POGIL Activities in Data Structures: What do Students Value?	NA	2017
Mickey Vellukunnel:Philip Buffum:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel	Online discussion forums are widely used and hold great promise for supporting students in learning computer science. Understanding how we can best support students in learning computer science through online discussion forums is an important open question for the CS Ed community. This paper analyzes discussion forum posts from 395 students enrolled in CS2 across two different universities. The results demonstrate that students use the discussion forums often for logistical and relatively shallow questions. However, the largest portion of questions reflect some level of constructive problem-solving activity, and are positively correlated with course grades. Questions that neither describe students' reasoning nor their attempts to solve the problem constitute the smallest percentage of questions, but these questions may be particularly important to attend to because of their relationship to students' prior experience.	Deconstructing the Discussion Forum: Student Questions and Computer Science Learning	NA:NA:NA:NA:NA:NA	2017
Sara Vogel:Rafi Santo:Dixie Ching	As momentum grows to expand K12 Computer Science (CS) education, associated public narratives often assume core questions about why CS should be taught to all students have been sufficiently answered. Having clarity around the core purposes that varied stakeholders are envisioning is critical to ensuring the coherence of CS4All initiatives. This study presents a framework examining the range of arguments for and projected impacts of CS education programs. Based on data drawn from a researcher- facilitated participatory knowledge building process involving 26 CS education stakeholders who articulated 161 arguments, we identify seven areas of impact present in arguments for universal CS education: (1) economic and workforce development, (2) equity and social justice, (3) competencies and literacies, (4) citizenship and civic life, (5) scientific, technological and social innovation, (6) school improvement and reform and (7) fun, fulfillment and personal agency. Findings show that individual arguments and visions for CS education often reference multiple impact areas. We intend for this framework to support reflection by CS education stakeholders to consider how their current initiatives index different ideologies about what CS4All projects are meant to achieve.	Visions of Computer Science Education: Unpacking Arguments for and Projected Impacts of CS4All Initiatives	NA:NA:NA	2017
Jennifer Wang:Sepehr Hejazi Moghadam	As computer science (CS) education expands at the K-12 level, we must be careful to ensure that CS neither exacerbates existing equity gaps in education nor hinders efforts to diversify the field of CS. In this paper, we discuss structural and social barriers that influence Blacks, Hispanics, and girls, based on surveys of 1,672 students, 1,677 parents, 1,008 teachers, 9,805 principals, and 2,307 superintendents in the United States. We find that despite higher interest in CS among Black and Hispanic students and parents, these students experience greater structural barriers in accessing computers and CS classes than White students. And while girls have the same access as boys, social barriers exist with girls reporting lower awareness of CS opportunities outside of classes, less encouragement from teachers and parents, and less exposure to CS role models in the media. It is critical for expanding CS opportunities to address the unique issues for each group.	Diversity Barriers in K-12 Computer Science Education: Structural and Social	NA:NA	2017
David C. Webb:Hilarie Nickerson:Jeffrey B. Bush	This paper compares student outcomes from 75 K-12 teachers who participated in either online, blended, or face-to-face professional development design to support teacher implementation of a programming curriculum during the regular school day. The results are based on survey responses collected over two years from 4,832 students. With only one exception, the results showed no negative student outcomes when comparing student survey results from teachers who participated in online professional development compared to students of teachers who participated in face-to-face professional development. Students who had teachers who participated in face-to-face professional development, however, expressed stronger interest in designing their own games at home. These results suggest that online professional development that is designed to support K-12 teacher classroom implementation of CS education curricula is a viable model with respect to student outcomes. Recommendations for the design of online curricula for CS education are discussed.	A Comparative Analysis of Online and Face-to-Face Professional Development Models for CS Education	NA:NA:NA	2017
Joanna Weidler-Lewis:Wendy DuBow:Alexis Kaminsky	Understanding how to increase participation and continued persistence of women in computing is a perennial problem. This paper explores the ways in which participation in computing can be defined either by a narrow disciplinary practice framework or a more expansive social practice framework. How participation in computing is defined is consequential regarding our understanding of women's persistence in computing. The data for this paper come from 64 in-depth, qualitative interviews with young women who in high school expressed interest in computing by looking into NCWIT's Aspirations in Computing Award. Analyses of the interviews show that defining participation in computing from a disciplinary perspective unduly prohibits some women from full membership in computing communities. Findings show that some women who self-identify with the computing community are not fully recognized by other members of the computing community.	Defining a Discipline or Shaping a Community: Constraints on Broadening Participation in Computing	NA:NA:NA	2017
David Weintrop:Nathan Holbert	Blocks-based, graphical programming environments are increasingly becoming the way that novices are being introduced to the practice of programming and the field of computer science more broadly. An open question surrounding the use of such tools is how well they prepare learners for using more conventional text-based programming languages. In an effort to address this transition, new programming environments are providing support for both blocks-based and text-based programming. In this paper, we present findings from a study investigating how learners use a dual-modality environment where they can choose to work in either a blocks-based or text-based interface, moving between them as they choose. Our analysis investigates what modality learners choose to work in, and if and why they move from one representation to the other within a single project. We conclude with a discussion of design implications and future directions for this work. This work contributes to our understanding of the affordances of blocks-based programming environments and advances our knowledge on how best to utilize them.	From Blocks to Text and Back: Programming Patterns in a Dual-Modality Environment	NA:NA	2017
Valerie Barr:Bryan Catron:Christopher Healy:Kate Lockwood:Anil M. Shende:Andrea Tartaro:Kevin Treu	NA	Computer Science Topics in First- and Second- Year Seminar Courses	NA:NA:NA:NA:NA:NA:NA	2017
Tracy Camp:Emmanuel Schanzer:Joanna Goode:Owen Astrachan:Ed Campos	Professional development (PD) has long been recognized as one of the key ingredients in K-12 CS Education, particularly when addressing the problem of underserved communities. Over the last decade, significant work has been done to create professional development and curricular offerings that are research based, with a proven track record. Bootstrap, Exploring Computer Science and AP CS Principles represent these types of programs. Each of these programs has developed high-quality PD for educators and have been recognized by the White House as exemplar courses. However, economies of scale make it difficult to expand to the vast number of small school districts around the country, including some of the most isolated and underserved areas such as rural communities and Native American reservations. This panel will discuss an alternative model - "CSPdWeek" -- a national event aimed at providing best-in-class PD to teachers across the country. The inaugural CSPdWeek took place in July, 2016 at Colorado School of Mines, and provided a week-long residential experience for teachers attending one of three teacher-focused professional development programs. Over 240 classroom teachers attended CSPdWeek, making this professional development the single largest cross-curricular effort in preparing U.S. teachers to teach computing as part of the "CS for All" movement. This panel will focus on why this year's CSPdWeek was such a success and what was behind social media testimonies from teachers who talked about being part of an educational movement.	CSPd Week: A Scalable Model for Preparing Teachers for CS for All	NA:NA:NA:NA:NA	2017
Alison Clear:Allen Parrish:Ming Zhang:Gerritt C. van der Veer	This panel discusses the development of a global, futuristic computing overview curricular report called Computing Curricular 2020, also known as CC2020. This new document, which is an initiative of the ACM Education Council, published by ACM, will be a revision of one of the most cited curricula documents called Computing Curricula 2005, also known as CC2005 [1]. CC2020 will build on the attributes of the existing predecessor. It will encompass broad global inclusion by welcoming active participation from computing societies around the world such as the Information Processing Society of Japan (IPSJ). CC2020 will also be futuristic in its development. While the new document will include an update to reflect existing curricula reports for computer engineering, computer science, information systems, information technology, and software engineering, it will also describe ways in which new and emerging curricular areas would be included within the framework of the report. The working group of CC2020 will include approximately two dozen professionals from academia and industry who will engage in crafting the new document. Additionally, a subset of about ten people of the working group forms the executive or core operational unit of the CC2020 project. The panelists for this representation are members of this executive group. Their global origins and affiliations represent the diversity of interaction that is one of the hallmarks of this undertaking. The panelists will present their views on the future aspects of the CC2020 report from the perspective of their experiences and affiliations, as well as their countries. The panelists will also provide contrasting points of view on topics relevant to the project. Audience interaction and participation will consume approximately fifty percent of the time allocated to the presentation.	CC2020: A Vision on Computing Curricula	NA:NA:NA:NA	2017
Leigh Ann DeLyser:Tom O'Connell:Diane Levitt:Rebecca Novak:Kevin Wang	Computer Science Education is rapidly expanding in the United States[5]. As a part of this expansion, many programs are using university students and industry volunteers for a variety of purposes within schools. These volunteers can bring a wealth of content knowledge and professional experience in their interactions with students [3], and can be inspirational when talking about the problems they work on[1]. Some programs even advocate for the use of professionals for instruction based upon their content knowledge[2]. Although professionals often have a high level of content knowledge, they may lack the training or experience necessary to be effective in the classroom[3, 4]. This panel brings together 4 different organizations with experience working with content expert volunteers with widely disparate preparation in teaching. In this panel we will share lessons learned by the organizations whose programs rely on volunteer instructors and mentors, that combined work with over 1,200 volunteers for multiple years. Topics discussed by the panel will include recruitment and selection of volunteers, volunteer training prior to entering the classroom, appropriate supports for volunteers throughout the experience, volunteer retention strategies, and preliminary efforts at evaluating the implementations. Panelists will also discuss volunteers for short-term engagements such as speaking opportunities and school-based hackathons.	Volunteer Best Practices for K12 CS	NA:NA:NA:NA:NA	2017
John DeNero:Sumukh Sridhara:Manuel Pérez-Quiñones:Aatish Nayak:Ben Leong	NA	Beyond Autograding: Advances in Student Feedback Platforms	NA:NA:NA:NA:NA	2017
Lien Diaz:Frances P. Trees:Dale Reed:Richard Kick:Andrew Kuemmel	The inaugural launch of the College Board's Advanced Placement Computer Science Principles (AP CSP) course coincided within the same year of the announcement of CS For All, a bold national initiative that seeks to support the expansion of computer science education in America, and to empower students to learn computer science and obtain the computational thinking skills needed to thrive in today's transforming digital world. The intent of the AP CSP course supports this initiative as it aims to promote social justice and equity in computer science education. The course is designed to be appealing to a broader audience, including females and minority students, who are underrepresented in computer science, thus providing increased access and opportunity for students to study computer science at the secondary level.	Social Justice and Equity in CS Education: Inaugural Launch of AP Computer Science Principles	NA:NA:NA:NA:NA	2017
Wendy DuBow:Ignatios Vakalis:Laura Dillon:Helen Hu	Recently, many computing departments in universities and colleges around the nation have seen increases in enrollments in the major. While these increases are largely welcome, it is important that the student population be diversified even as enrollments swell. What are departments doing to ensure that women are both recruited and retained in this changing environment? This panel will share interventions undertaken by three U.S. post-secondary institutions that have focused on increasing their female and underrepresented student enrollment. Their efforts all include multi-pronged approaches, which is consistent with the social science research on how to create institutional reform in academic departments [1]. These institutions have made changes that reflect increased departmental engagement with recruitment and retention for diversity: a shift in individual faculty pedagogical strategies, introductory course restructuring, as well as more outreach and preparatory programs for incoming students. These departments have not only implemented existing evidence-based practices to make these lasting changes, but have tried new ideas as well.	Increasing Diversity in the Face of Enrollment Increases	NA:NA:NA:NA	2017
Jeffrey Forbes:David J. Malan:Heather Pon-Barry:Stuart Reges:Mehran Sahami	Undergraduates are widely used in support of Computer Science (CS) departments' teaching missions as teaching assistants, peer mentors, section leaders, course assistants, and tutors. Those undergraduates engaged in teaching have the opportunity to deeply engage with CS concepts and develop key communication and social competencies. As enrollments surge, undergraduate teaching assistants (UTAs) play a larger role in student experience and outcomes. While faculty and graduate student instructional support does not necessarily increase with the number of students in our courses, the number of qualified undergraduate teaching assistants for introductory CS courses should scale with the number of students in our courses. With large courses, the significance of the UTAs' role in students' learning likely also increases. Students have relatively little interaction with the instructor, and faculty may have more challenges monitoring and supporting individual UTAs. UTAs have a major role in affecting climate in computer science courses. The climate in large courses has substantial implications for students from groups traditionally underrepresented in computing. This panel will discuss how undergraduate teaching assistants can serve as a scalable effective teaching resource that benefits both the students in the course and the UTAs themselves.	Scaling Introductory Courses Using Undergraduate Teaching Assistants	NA:NA:NA:NA:NA	2017
Ria Galanos:Whitaker Brand:Sumukh Sridhara:Mike Zamansky:Evelyn Zayas	The pace of technology for use in computing education is staggering. In the last few years, the following technologies have completely transformed our teaching: Piazza, GradeScope, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mic (for audio), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the particular configuration options required to make their technology "sing". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any "gotchas" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite "can't live without" technologies as well.	Technology We Can't Live Without!: revisited	NA:NA:NA:NA:NA	2017
Jeff Gray:Jennifer Rosato:Bradley Beth:Nigamanth Sridhar	NA	Teaching the Global Impact of Computing	NA:NA:NA:NA	2017
Mark Guzdial:Barbara Ericson:W. Richards Adrion:Megean Garvin	In January 2016, US President Barack Obama started an initiative to provide CS for All -- with the goal that all school students should have access to computing education. Computing departments in higher education have a particularly important role to play in this initiative. It's in our best interest to get involved, since the effort can potentially improve the quality of our incoming students. CS Departments have unique insights as subject-matter experts to inform the development of standards. We can provide leadership to inform and influence education policy. In this session, we will present a variety of ways in which departments and faculty can support CS for All and will answer audience questions about the initiative. Our goal is to provide concrete positive actions for faculty.	The Role of CS Departments in The US President's "CS for All" Initiative	NA:NA:NA:NA	2017
Helen H. Hu:Douglas Blank:Albert Chan:Travis Doom	TIDES (Teaching to Increase Diversity and Equity in STEM) is a three-year initiative to transform colleges and universities by changing what STEM faculty, especially CS instructors, are doing in the classroom to encourage the success of their students, particularly those that have been traditionally underrepresented in computer science. Each of the twenty projects selected proposed new interdisciplinary curricula and adopted culturally sensitive pedagogies, with an eye towards departmental and institutional change. The four panelists will each speak about their TIDES projects, which all involved educating faculty about cultural competency. Three of the panelists infused introductory CS courses with applications from other disciplines, while one of the projects taught computational skills in natural science courses.	Panel: Teaching To Increase Diversity and Equity in STEM	NA:NA:NA:NA	2017
Kimberly Hughes:Carol L. Fletcher:Leigh Ann DeLyser:Anthony Owen	Many states are taking up the President's challenge to provide CS for All. One of the most significant barriers to realizing this goal is the lack of trained and certified CS teachers. Building teacher capacity on a large scale is a challenge each of these panelists has tackled in their own region. Panelists will discuss the pros and cons of targeting in-service vs. pre-service teachers, online vs. face-to-face training, carrots vs. sticks, top down vs. bottom up strategies, and long-term vs. short term solutions to building capacity across an entire state or metropolitan area. Panelists represent CS for All efforts from Texas, New York City, and Arkansas.	Building CS Teaching Capacity: Comparing Strategies for Achieving Large Scale Impact	NA:NA:NA:NA	2017
Christian Murphy:Kevin Buffardi:Josh Dehlinger:Lynn Lambert:Nanette Veilleux	A common refrain from Senior Exit Surveys and Alumni Surveys is the desire to work on "real-world," "practical" and "hands-on" projects using industry-ready tools and development environments. To assuage this, institutions have moved towards adopting Free and Open Source Software (FOSS) as an avenue to provide meaningful, applied learning interventions to students. Through these experiences, students benefit from engagement with various communities including: the community of contributors to the FOSS project; the community of local software developers; the community of citizens who reside in the local area; the community of students at their institution and others; and, the community of people impacted by the FOSS project. These engagements motivate students, enhance their communication and technical skills, allow them to grow and become more confident, help them form professional networks, and provide the "real-world" projects they seek. In this panel, we will discuss our experiences in engaging students with five different types of communities as part of incorporating FOSS into our courses, focusing on how other educators can provide the same benefits to their students as well. In order to satisfy the time constraints of the panel, the last two authors will present together.	Community Engagement with Free and Open Source Software	NA:NA:NA:NA:NA	2017
Farzana Rahman:Helen Hu:Dennis Brylow:Clif Kussmaul	In recent years, there has been a dramatic increase in computer science undergraduate research activities at colleges and universities nationwide. Developing and maintaining undergraduate research benefits students, faculty mentors, and the institution. Incorporating a research culture along with a sound academic foundation enables students to develop independent critical thinking skills along with effective oral and written communication skills. However, we are in a time when budgets are being tightened and some institutions do not have the resources to pursue such initiatives. Traditionally research focused universities (like R1) have access to various large funding sources to host Research Experience for Undergraduate (REU) programs. R1 universities have established records of accomplishment for innovative research and the faculties at R1 institutions have lab infrastructure to blend such activities for undergraduate students. However, non-R1 institutions (like community colleges, undergraduate, masters, and to some extent R2 institutions) lack resources, lab infrastructure and above all a track record for innovative research that makes it hard for them to obtain funding to host an REU program. Thus, in this panel, our goal is to present ideas for establishing a track record and building an internally and externally funded Undergraduate Research experience (UR), particularly for non-R1 institutions. This involves obtaining funds to conduct the research and to secure travel funds to disseminate research results.	Bringing Undergraduate Research Experience in Non-R1 Institutions	NA:NA:NA:NA	2017
Richard Weiss:Casey W. O'Brien:Xenia Mountrouidou:Jens Mache	NA	The Passion, Beauty, and Joy of Teaching and Learning Cybersecurity	NA:NA:NA:NA	2017
Doug Baldwin:Grant Braught:Amanda Holland-Minkley	The SIGCSE Committee on Computing Education in Liberal Arts Colleges was approved in late 2015 and began organizing itself at SIGCSE 2016. The Committee has made an initial survey of the liberal arts computer science landscape, and has identified some central issues for more detailed study. This session will present the Committee's initial findings and future plans, and will solicit audience participation in refining the set of central issues and identifying possible resolutions to them.	Computing Education in Liberal Arts Colleges: A Status Report of the SIGCSE Committee	NA:NA:NA	2017
Douglas Baldwin:Valerie Barr:Amy Briggs:Jessen Havill:Bruce Maxwell:Henry M. Walker	In this special session, we share a variety of ways in which CS 1 courses can broaden their focus beyond programming. These courses strive to effectively introduce the fundamental ideas of computer science, and the importance of computing in broader contexts, without sacrificing programming rigor.	CS 1: Beyond Programming	NA:NA:NA:NA:NA:NA	2017
Bo Brinkman:Keith W. Miller	This session is intended as a fun and highly interactive way for college and high school teachers to increase their familiarity with the ACM Code of Ethics and Professional Conduct. Using a quiz show format, participants will be asked to provide solutions to knotty (and sometimes humorous) ethical challenges. This will be followed by think-pair-share (so that everyone gets involved), and then a presentation of the relevant sections of the ACM Code of Ethics and Professional Conduct. Members of the ACM's Committee on Professional Ethics will be on hand to collect feedback and questions about the Code, for use by the Code 2018 task force, and for the "Ask an Ethicist" feature at http://ethics.acm.org.	The Code of Ethics Quiz Show	NA:NA	2017
Legand Burge:Marlon Mejias:KaMar Galloway:Kinnis Gosha:Jean Muhammad	Underrepresented students and the institutions that serve these students need to recognize and address the unique challenges that impact their career pathways and successes. This special session will discuss challenges facing Minority Serving Institutions (MSIs) and how industry-academia partnerships can be a force in mitigating some of these challenges. We will explore how we as a community can work together to develop holistic programs to support student development and excellence. We will highlight the shortcomings, strengths and future of the Googler In Residence (GIR) program from the perspective of select participating colleges, as well as other successful initiatives in motion. It is also essential that promising interventions be shared and scaled across institutions that play an essential role in educating and preparing these students. We are still learning as we go, but this is an opportune time to come together as a community to share our challenges and solutions, to determine how we can move together and how we can all be involved as change advocates. It is meant to be interactive, create shared knowledge and help identify ways of moving forward serving MSIs.	Holistic Development of Underrepresented Students through Academic: Industry Partnerships	NA:NA:NA:NA:NA	2017
Diana Burley:Matt Bishop:Siddharth Kaza:David S. Gibson:Elizabeth Hawthorne:Scott Buck	In this special session, members of the ACM Joint Task Force (JTF) on Cybersecurity Education will provide an overview of the task force mission, objectives, and release a draft of the curricular guidelines. After the overview, task force members will engage session participants in the curricular development process and solicit feedback on the draft guidelines.	ACM Joint Task Force on Cybersecurity Education	NA:NA:NA:NA:NA:NA	2017
Kelsey Finkel:Kenneth E. Graves:Leigh Ann DeLyser	K12 CS education is expanding at an unprecedented scale throughout communities nationwide. Throughout research on CS education and education more broadly, the disconnect between research and practice, or research and implementation, is well documented. To enhance its relevance to and for practice, research should build on existing knowledge and account for local contexts, and the engagement of research and researchers should be coordinated to facilitate their connection to practice. In offering this session at SIGCSE, we likely will move away from "local contexts" to larger issues; research priorities, however, often are shaped by external, funding priorities and RFPs. The knowledge forum format will allow the community to engage in a process of setting its own agenda which can later be aligned to funding opportunities. Prioritizing topics and questions for research and implementation in ways that are rooted in the needs of instruction and that draw on collective expertise is increasingly important. The proposed special session addresses this issue through a systematic and tested prioritization format. Specific objectives of the proposed session will be to: (1) introduce the topic prioritization format to participants; (2) demonstrate how the format can be used to identify and to organize research priorities among a group of experts; (3) implement the format with members of the SIGSCE community; (4) plant the seeds for potential collaborations; (5) and solicit feedback from the SIGSCE community on how to improve the format.	Special Session: CS Education Research Knowledge Forum	NA:NA:NA	2017
Helen H. Hu:Chris Mayfield:Janice L. Pearce	POGIL (Process Oriented Guided Inquiry Learning) is a form of active learning where students work collaboratively through activities designed to guide them to discover concepts on their own. POGIL is based on the principle that students will learn and retain more when they construct their own understanding of the computer science (CS) content. Working in groups of three to four, students develop process skills, such as problem solving, communication, and teamwork. This special session will first provide SIGCSE attendees the opportunity to experience a CS POGIL activity for themselves. We will then discuss different ways that instructors might adopt POGIL for use in their classroom, and how the adoption of POGIL by multiple instructors in a department can change the culture of the department.	Special Session: Converting Your Teaching (or Even Your Whole Department!) to Active Learning via POGIL	NA:NA:NA	2017
Eileen Kraemer:Aubrey Lawson:Murali Sitaraman	This SIGCSE special session provides an opportunity for new researchers in CS education to learn the elements of successful computing education research of different types through a series of exemplar projects. Specifically, this session reports on the findings and example, successful CS education research projects that were discussed and presented at ICER 2016 UP (Understanding and Propagating) CS Ed Research Workshop, sponsored by the National Science Foundation. One goal of the session is to provide a way for proposers of computing education research to ensure that they have well identified education research questions and evaluation mechanisms that are appropriate for the proposal (exploratory vs. design & implementation) according to the Department of Education guidelines. The ICER Workshop was designed to focus exactly on this goal and report to the community.	Special Session: ICER UP CS Ed Research Workshop Summary-Essence of Illustrative Projects	NA:NA:NA	2017
Richard E. Ladner:Matt May	NA	Teaching Accessibility	NA:NA	2017
Renée McCauley:Bill Manaris:David Heise:Cate Sheller:Jennifer Jolley:Alan Zaring	Computing in the Arts (CITA) is an innovative, interdisciplinary curriculum model which integrates computer science and information technology with traditional art theory and practice. At the College of Charleston, implementation of an undergraduate CITA degree program resulted in an increase in the number of female and minority students pursuing computing-related degrees. [14] With the support of the National Science Foundation (DUE 1323605) and two partner institutions, we are building a community of educators who are creating innovative instructional materials that synthesize computing and the arts. Three faculty summer workshops (Wake Forest University in 2014, College of Charleston in 2015, and University of North Carolina at Asheville in 2016) involved over 70 computer science and arts faculty from across the U.S. What has emerged are various ways of synthesizing computer science and arts, including creation of new synthesis courses, modifications to traditional computing courses, development of new CITA-like curricula, design of CITA-like project experiences for undergrads, and other creative endeavors combining computer science techniques and traditional art practices and theory. During the session, we will discuss steps involved in moving forward and keeping this community growing. The session will involve audience participation, including exchanges between the session presenters and other audience members. The goal is to share our results, hear about results from other non-presenting colleagues, and to continue to grow the teaching of computer science and computational thinking to the arts and humanities masses, as well as to further enrich traditional computer science courses with creative applications, assignments, and projects.	Computing in the Arts: Curricular Innovations and Results	NA:NA:NA:NA:NA:NA	2017
Nick Parlante:Julie Zelenski:Dave Feinberg:Kunal Mishra:Josh Hug:Kevin Wayne:Michael Guerzhoy:Jackie Chi Kit Cheung:François Pitt	I suspect that students learn more from our programming assignments than from our much sweated-over lectures, with their slide transitions, clip art, and joke attempts. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Rebecca Vivian:Katrina Falkner:Claudia Szabo	This special session is based around key findings of a Barbara Cail STEM Fellowship that aims to inform key stakeholders about international best practices for broadening participation and diversity in computer science. This special session provides opportunities for the audience to contribute to this research discussion and to analyse and develop strategies for their own unique contexts, in a facilitated approach using the benchmark framework and key findings.	Broadening Participation in Computer Science: Key Strategies from International Findings	NA:NA:NA	2017
Michael Ball	While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. The demo will present a system an autograder for Snap!, a visual programming language inspired by Scratch. Our autograder is a hosted solution which would allow other courses to use our tools with little effort. At the most basic level, the autograder contains a database of questions, test cases, and a method for presenting results to students. However, there are additional features for integration through LTI and advanced data analysis. The autograder allows real-time feedback for students, and for instructors to write tests in JavaScript, and eventually Snap! directly. We will show how instructors can write test cases and integrate the tool into their classrooms. We will also demo some data analysis capabilities of our system. This demo should be informative to those working with visual programming languages, including ones other than Snap!. We hope to provide a useful tool, and gain feedback for future iterations of the software.	Writing Autograders for Snap! And Integrating them Into Your Course (Abstract Only)	NA	2017
Thomas Ball:Judith Bishop:Jonathan de Halleux	The micro:bit (http://www.microbit.org) is a pocket-sized, programmable computing device, designed to engage people with computing technology. The micro:bit is visually appealing, fun, easy to code and inexpensive. It is widely available at schools in the United Kingdom and is now being rolled out world-wide. Key features of the micro:bit that make it a great device for physical computing include a display of 25 LEDs, two programmable input buttons, a USB connector, an edge connector, built-in sensors (e.g. accelerometer, compass and temperature sensor), Bluetooth and a battery pack connector. With these physical attributes, the micro:bit can be used to interact with the world in engaging ways such as a watch, a guitar or a moisture sensor. Multi-person games and apps are possible since micro:bits can communicate with each other. Programming the micro:bit can take place on almost any device (laptop, tablet, desktop) that has a modern browser and a USB connection. The micro:bit platform supports programming in a block-based language or a safe version of JavaScript, which provides a progression for learners of different ages and experience levels. This demo will appeal to computer education researchers specializing in K-12 as well as to instructors wanting a new way to introduce computing in CS101 with a "maker" flavor. In the demo we will show the platform and the hardware. Attendees will have the chance to create apps on real micro:bits. It will be helpful to bring a device with a browser.	The Micro:bit: Hands-on Computing for the New Generation (Abstract Only)	NA:NA:NA	2017
Austin Cory Bart:Dennis Kafura	Introductory non-major learners face the challenge of mastering programming fundamentals while remaining sufficiently motivated to engage with the computing discipline. In particular, multi-disciplinary students struggle to find relevance in traditional computing curricula that tend to either emphasize abstract concepts, focus on entertainment (e.g., game and animation design), or rely on decontextualized settings. To address these issues, this demo introduces BlockPy, a web-based environment for Python (https://blockpy.com). The most powerful feature of BlockPy is a dual text/block view that beginners can freely move between, using advanced Mutual Language Translation techniques. The environment contextualizes introductory programming with data science by integrating real-world data including weather reports, classic book statistics, and historical crime data. A fusion of Blockly and Skulpt, the entire interface runs locally with no need for server sandboxing. BlockPy is also a platform for interactive, guided practice problems with automatic feedback that scaffolds learners. This demo will walk through the novel features of BlockPy's environment, including the instructor's perspective of creating new problems and how BlockPy can be embedded in modern LTI-compatible learning management systems. BlockPy is available online for free and is open-sourced on GitHub. This material is based on work supported by the NSF under Grants No. DGE-0822220, DUE-1444094, and DUE-1624320.	BlockPy Interactive Demo: Dual Text/Block Python Programming Environment for Guided Practice and Data Science (Abstract Only)	NA:NA	2017
Brian Broll:Akos Ledeczi	NetsBlox is a new collaborative learning environment extending Snap! with a few carefully selected abstractions that enable students to create distributed applications. In today's interconnected world, it will become increasingly important to have a basic understanding of computer networking and distributed computation yet these topics are rarely covered in K-12 curricula. Conversely, NetsBlox makes distributed programming accessible to beginner programmers using its simple yet powerful visual programming primitives, an intuitive user interface and a sophisticated cloud-based infrastructure. Moreover, the tool enables students to work together on the same project from different computers similarly to how Google Docs operate. This feature enables online collaboration and facilitates new ways to teach and learn programming. By allowing students to create multi-player games, NetsBlox provides increased motivation and is likely to prove engaging to students. By providing access to online public domain data sources, such as weather, earthquake, and air pollution data, in a unified manner, students will be able to create interesting science projects in a number of STEM fields promoting interdisciplinary learning. This technology demonstration will introduce the environment and demonstrate its utility in creating multi-player games, such as Battleship and Tic Tac Toe, as well as highlight two client-server applications that display weather and historical earthquake data, respectively, on top of an interactive Google Maps background. Audience members will be asked to participate in a massively parallel volunteer computing application doing prime factorization of large numbers. The open source public domain NetsBlox environment is accessible at http://netsblox.org.	Distributed Programming with NetsBlox is a Snap! (Abstract Only)	NA:NA	2017
Jason Freeman:Brian Magerko:Doug Edwards:Lea Ikkache	Participants of the session will discover EarSketch (https://earsketch.gatech.edu), a free, web-based learning environment that teaches introductory computer science through music. It aligns with Computer Science Principles and has been used in a variety of other educational contexts as well, ranging from late elementary through College. EarSketch provides an in-depth introduction to computer science and programming through composing, producing, and remixing music with Python and JavaScript code. No previous knowledge or experience in music, Python, or JavaScript is required to begin learning or teaching with EarSketch. Results from pilot studies show that EarSketch facilitates student learning about computation and improves student engagement in computing through parameters such as self-confidence, motivation, or intent to persist. This trend is particularly true for female and minority students, who are underrepresented today in US computer science classrooms. EarSketch comprises a curriculum, teacher materials, a coding environment, a DAW (Digital Audio Workstation), a sound database, and sharing tools. Fundamental computing concepts are introduced through curricular modules that teach how to place sounds, create rhythms, and manipulate effects, with a focus on popular genres such as hip hop and dubstep. The platform has over 77,000 users in computer science classrooms across the US and internationally. EarSketch receives funding from the National Science Foundation, the Scott Hudgens Family Foundation, the Arthur M. Blank Family Foundation, and the Google Inc. Fund of Tides Foundation.	EarSketch, a Web-application to Teach Computer Science through Music (Abstract Only)	NA:NA:NA:NA	2017
M. Muztaba Fuad	To improve student's class experience, the use of mobile devices has been steadily increasing. However, such use of mobile learning environments in the class is mostly static in nature through content delivery or traditional quiz taking. In CS courses, we need learning environments where students can interact with the problem and faculty can assess their learning skills in real-time using problems with different degree of difficulty. To facilitate such interactive problem solving using mobile devices, a comprehensive backend system is necessary. However, such system is not available to CS instructors. To facilitate in-class interactive problem solving, a Mobile Response System (MRS) is developed, which is independent of any interactive problems or its domain. This demo session will present details of NSF funded MRS software, associated pedagogy, and how to use it in the class. MRS provides faculty with the opportunity of evidence-based teaching by allowing students with exercises with different learning outcomes and by getting an instant feedback on their performance. The formative assessment information provided by MRS allows the faculty to have real-time evidence of students' comprehension of covered lecture materials on that particular class and also helps faculty to identify the concepts that need to be repeated or reinforced. MRS is open sourced, extensible and can render interactive exercise developed by third party developer.	Interactive Problem Solving Using Mobile Devices in the Classroom (Abstract Only)	NA	2017
Matthew Peveler:Jeramey Tyler:Samuel Breese:Barbara Cutler:Ana Milanova	Submitty (http://submitty.org) is an open source programming assignment submission system from the Rensselaer Center for Open Source Software (RCOS) at Rensselaer Polytechnic Institute (RPI). Students can submit their code via a web interface in a variety of ways, where it is then tested with a highly configurable and customizable automated grader. Students receive immediate feedback from the grader, and can resubmit to correct errors as needed. Through an online interface, TAs can access detailed grading results and supplement the automated scores with manual grading (numeric and written feedback) of overall program structure, good use of comments, reasonable error checking, etc. and any non-programming components of the assignment. The instructor can also configure the system to allow for a configurable late day policy on a per assignment and per student basis. We currently use Submitty in eight different courses (spanning from introductory through advanced topics) serving over 1500 students and 35+ instructors and TAs each week. We will present a range of "case study" assignment configurations in a hands-on demo, going from simple through complex, using a variety of different automated grading methods including per-character and per-line output difference checkers, external unit testing frameworks (such as JUnit), memory debugging tools (Valgrind and DrMemory), code coverage (e.g., Emma), static analysis tools, and custom graders. Submitty can be customized per test case as appropriate to apply resource limits (running time, number of processes, output file size, etc.) and to display or hide from students the program output, autograding results, and testing logs.	Submitty: An Open Source, Highly-Configurable Platform for Grading of Programming Assignments (Abstract Only)	NA:NA:NA:NA:NA	2017
Andreas Stefik:Richard Ladner	Quorum is a relatively new programming language that was originally designed for students with disabilities. In recent years, as its adoption has increased worldwide in K-12 (largely in middle/high school) and at universities, it has expanded to be a powerful, commercial-grade, programming language that includes support for 3D gaming, music, and other fun and creative activities. While new features are designed for all, they maintain compatibility for people with disabilities, including a novel way for individuals who are blind to create 3D games. Finally, Quorum is the first language to use human-factors evidence from both field data and randomized controlled trials in its design. This approach provides the broader research community an organized way to influence the design of the language over time according to evidence based practices. We call this approach evidence-oriented programming. A laptop would help participants follow along with the session and handouts will be provided. Quorum can be found at https://www.quorumlanguage.com/.	The Quorum Programming Language (Abstract Only)	NA:NA	2017
Alice Steinglass:Baker Franke:Sarah Filman	App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. This demonstration aims to give a brief overview of App Lab and its purpose and then move quickly into demonstrating the more advanced features of App Lab that few people know are even there! The audience should come away with knowledge and access to exemplars that highlight App lab's possibilities, and see some of its richer features in action. Finally we will end with a discussion about how best to integrate App Lab into existing courses. App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net.	App Lab: A Powerful JavaScript IDE for Rapid Prototyping of Small Data-backed Web Applications (Abstract Only)	NA:NA:NA	2017
Eric Walker:Julia Connelly:David Musicant	Version control systems are crucial tools for computer scientists, and the need for students to be fluent in them is well-recognized. However, Git and other version control systems (VCSs) are difficult to learn and use. Elegit is a new Git client that we created to help students learn how Git works while using it. Our approach is different from other GUI Git clients in that our key goals are not only to help students successfully use Git, but equally importantly to help students learn about how Git works in its own native way. We preserve standard Git terminology wherever possible, and place a high priority on not modifying the standard Git model. Simultaneously, we strive to make Elegit easy for beginners to use. This demo provides a brief tutorial on using Elegit, discussion on the process of designing the tool to do this, evaluation of the effectiveness of the tool, and improvements made based on this evaluation and our own learning of Git while developing the application. Information about Elegit can be found at http://elegit.org. This work is supported by a SIGCSE Special Projects Grant, and by Carleton College.	Elegit: Git Learning Tool for Students (Abstract Only)	NA:NA:NA	2017
Julia Bernd:Jonathan Corley	One of the most innovative features of the new AP Computer Science Principles course framework is that it includes the Global Impact of Computing-not just as an occasional flourish, but as one of its foundational Big Ideas (#7). The real-world impact of computing-on society and on their own lives-is a great hook that can stimulate students' lasting interest in computer science, whether in CSP or any other CS class. Teach Global Impact is a collaborative effort among leading computer science educators that leverages seven excellent CSP curricula and PD programs. (BJC, CISS, Code.org CSP, CS Matters, CSP CS4HS, Mobile CSP, and UTeach CSP.) These curricula are contributing activities that highlight the potential impacts of big data, multimedia, artificial intelligence, and Internet connectivity, among other things. We are working to bring together all of these existing Global Impact lesson materials into a unified resource, and to fill in any gaps by creating new materials, along with classroom strategy guides for teaching about impact. This lightning talk will introduce teachers to the resources available on the Teach Global Impact website, including a database of existing materials, new activities and strategy guides, and a Computing in the News feed featuring student-curated stories aligned with CSP learning objectives. We'll also talk about new activities in the works, including classroom simulations around net neutrality and encryption ethics, a lesson plan on online research and writing for CS, and a series of videos illustrating key essential knowledge points.	Teach Global Impact: A Resource for CSP (or Any CS Class!) (Abstract Only)	NA:NA	2017
Brian Broll:Akos Ledeczi	Visual programming environments have been effective educational resources but are typically limited to a single user at a time. Given the amount of collaboration in modern software development and the value of group projects for beginner programmers, providing collaboration capabilities could be invaluable for students using a block-based programming environment. Online collaboration support would not only allow students to more actively work together on projects but would also facilitate other educational activities such as tutoring and interactive demos. Moreover, providing robust collaboration utilities allows the programming environment to more closely reflect the team-based nature of large scale, real-world programming projects. Note that collaborative editing offers a number of additional benefits under the hood: the same underlying software code can easily provide detailed logging of student actions and the capability to replay them. That is, researchers will be able to study how students solve problems and not just the end result. To this end, we have extended the Snap! visual programming environment to support real-time collaboration similar to Google Docs. In our model of collaboration, sprites and scripts can be edited by multiple users simultaneously, but the execution of the programs on the stage remains local. But is this the best collaboration model for students? If not, what alternative model would be better? Should the entire programming environment be synchronized across collaborators? Would simple screen sharing be more effective? Finally, how can we leverage a real-time collaborative environment to promote teamwork on programming projects?	Bringing Real-Time Collaboration to Visual Programming (Abstract Only)	NA:NA	2017
Douglas H. Fisher	Course syllabi, exercises, assignments, and project specifications are creative acts of design. But there are no conventions for citing such works, as one would cite a research paper or patent. There are several potentially important reasons for establishing conventions for citing educational content, and thus tracking their diffusion and influence. (1) Design of courseware is at least as important to teaching as is delivering lectures and grading assessments. If citation conventions were established, then the degree of adoption by others could be part of a teaching-faculty member's professional evaluation. (2) Research grants often include education and outreach plans, and being able to track the influence of materials under such plans would be valuable for funding agencies and principal investigators. (3) Establishing citation conventions may raise consciousness about citing any and all creative works that an instructor uses, particularly when we want our students to embrace citation best practices. After all, what most undergraduates will see of the scholarship modeled by faculty will be through teaching. (4) Conferences like SIGCSE are increasingly competitive, and publishing a paper that reports on educational material, thereby enabling "conventional citation" may be difficult. But we still want to cite and track uptake of the educational material. This lightning talk argues that citation conventions be adapted for educational materials, and describes a sample convention. The goal of the lightening talk is to gauge interest and solicit collaborators.	Establishing Conventions for Citing Educational Materials (Abstract Only)	NA	2017
Patty Hicks	Research shows that middle school is the optimum time to introduce coding and computer science concepts. According to research from Accenture and Girls Who Code, computing appeal for girls peaks in middle school, where having an inspiring teacher and thinking that coding is "for girls" are instrumental in sparking interest. Middle schools tend to have electives where coding classes can find a home. But how do you convince the teachers that this change in academic focus is in the best interests of the students? And how do you prepare them to teach a content that they do not know and might not agree with? I haven't seen advice or research on how to overcome teacher resistance to computer science and coding. In 2013 an 8th grade elective was converted into a coding and computer science concepts course. Several of the business education endorsed teachers continue to push for less coding and more productivity tools in this course. Teachers with the Computer Science endorsement provided research, student interest surveys and employment outlooks to these teachers but they did not budge. Enrollment in the coding class has doubled and tripled in many of the schools, but a number of the teachers are still not enthusiastic about the course and the content. What could we have done differently to help these teachers accept change? Build a foundation for change -- Share current research on the importance of introducing coding and computer science. Build Community -- Look to local colleges for mentoring and co-teaching possibilities. Build Relationships -- Strengthen the connections between teachers and administrators.	Moving From Business Education to Computer Science Concepts in the Middle Grades (Abstract Only)	NA	2017
Megan Lawrence:Mary Bellard	This lightning talk will introduce Teach Access (www.teachaccess.org) an initiative comprised of technology industry professionals and educators working together to make accessibility foundational to higher education degrees. Technology companies dedicated to accessibility have faced the common challenge of hiring designers, engineers and researchers with accessibility knowledge/experience that are prepared to build inclusive products and services. Similarly, academic programs in design, engineering and HCI are seeking ways to better prepare students for jobs in industry that require them to address accessibility and the needs of society's diverse populations. Given this shared challenge, industry, academia and advocacy have come together through the Teach Access initiative to create new models for teaching and training students of technology to create accessible experiences. Teach Access membership includes companies such as Google, Facebook, Microsoft, Yahoo and several other tech leaders, as well as leading academic institutions like the University of Washington, Stanford, MIT, CMU, the Cal State System and more. Teach Access has successfully launched an accessibility tutorial for public consumption as well as submitting comments to ABET addressing the inclusion of accessibility in accreditation. Our participation in SIGCES is important to evangelize our efforts and build a cohesive community between industry and education.	Teach Access: Preparing Computing Students for Industry (Abstract Only)	NA:NA	2017
John MacCormick	Computational and complexity theory are core components of the computer science curriculum, and in the vast majority of cases they are taught using decision problems as the main paradigm. For experienced practitioners, decision problems are the best tool. But for undergraduates encountering the material for the first time, non-decision problems (such as optimization problems and search problems) may be preferable. This lightning talk will give a brief pointer to some new technical definitions and pedagogical strategies that have been used successfully for teaching the theory course using non-decision problems as the central concept. For example, instead of the familiar complexity classes P and NP, we can define analogous classes of non-decision problems, Poly and NPoly. The key question behind this lightning talk is to ask whether the new definitions and strategies are actually beneficial. Anecdotal evidence and certain theories of learning suggest the new approach should result in superior learning outcomes for students. We are seeking ideas, feedback, and collaborators interested in investigating this hypothesis and obtaining stronger evidence for it. To summarize, our central question is: how can we investigate whether students gain a superior grasp of computational and complexity theory when they are taught primarily using non-decision problems?	Seeking Evidence for Basing the CS Theory Course on Non-decision Problems (Abstract Only)	NA	2017
Anurag Nagar	This lightning talk will focus on our experience of developing and managing large undergraduate and graduate Big Data courses. The demand for trained professionals in the field of Big Data technologies is huge, and there is urgent need to develop and update courses in this area. One of the biggest hurdles for many schools is establishment, maintenance, and constant update of high performance computing infrastructure. Further, the technology landscape for Big Data is constantly evolving, and newer technologies, such as Apache Spark, require significant expenditure to set up and upgrade at the cluster level. Traditional infrastructure at most higher educational institutions is insufficient for this, and is also not able to scale up to meet the expectations of large class sizes and multiple simultaneous sessions. In this lightening talk, we will share our experience of running large undergraduate and graduate Big Data courses using open source infrastructure. Some of this infrastructure is cloud based, while others require students to create virtualized environment on their personal computers. Both types of resources are freely available, easy to setup, and provide students with enough computational power to run most academic tasks and projects. We will provide specific examples of using such technologies for common tasks, such as setting up a distributed file system, running MapReduce algorithms on large datasets, performing large scale machine learning and graph mining using Apache Spark, and maintaining a high availability Cassandra instance.	Developing Big Data Curriculum with Open Source Infrastructure (Abstract Only)	NA	2017
Saty Raghavachary	Starting Fall 2016, the CS department at USC has begun offering CS100: Explorations in Computing, a brand new General Education (GE) course. The course is only open to non-CS majors (since our CS students go through a CS-specific introductory track that encompasses the CS100 material). The class has 24 students, from a variety of disciplines such as Communications, Business Administration and Theatrical Arts. The course presents a broad overview of computational/algorithmic problem-solving techniques that form the basis of today's digital society. It provides students, a strong foundation for understanding how everyday activities such as web searching, communicating via social media, playing games, booking a ride, etc., work "behind the scenes". The course's intent is to promote computational thinking, as put forth by Jeannette Wing and others. In designing the course, the following aspects were kept in mind: the course is formulated as a GE, for a non-CS audience - so it cannot be heavy on coding; the topics need to involve some form of computational/algorithmic approach; the topics need to have a connection with things that students do with their digital devices (eg. play games, send instant messages, order things..); the topics have to grab the students' attention (keeping in mind that they grew up with tablets, the Web, animated movies and videogames). To that end, the topics are grouped under the following headings: Media Computing, Recreational Math, Algorithmic Art, Social Media and Data.	Curriculum Design for 'Explorations in Computing' (a New General Education Course at USC) (Abstract Only)	NA	2017
Joel Ross:Andrew J. Ko:David L. Stearns	Ensuring that software systems are accessible to users with disabilities is historically neglected but increasingly important for professional software developers. It is imperative that students are familiar with accessible practices to support this often-overlooked form of diversity. We suggest that including accessibility topics when teaching user-interface development skills is a low-effort task that can directly support teaching core software development principles such as "separation of concerns" and "standards compliance." In this lightning talk we describe our initial efforts to integrate accessibility and accessible design as "first-class" topics into our department's required course on web development, including specific examples of concepts covered, classroom activities, and assignments. We also discuss suggestions for how to potentially integrate accessibility topics into other computer science courses which include any kinds of front-end user interfaces. The goal of this talk is to promote awareness of accessibility concerns, demonstrate the ease by which educators can include such material, and encourage discussion about how to engage students in such diversity considerations throughout the curriculum.	Accessibility as a First-Class Concern in Teaching GUIs and Software Engineering (Abstract Only)	NA:NA:NA	2017
Kendra Walther	Coming up with quality, representative, fair exam questions can be difficult. This lightning talk explores one faculty member's eureka moment to have students generate their own exam questions. This approach was tried in a 300-level cross-listed Computer Science/Information Technology course entitled "Programming Graphical User Interfaces." Students were asked to generate at least one question in each of a variety of categories (multiple choice, true/false, short-answer, and coding questions). Five points of the exam (out of 100) was assigned to the students based on their submitted questions. Students were told that if they had a reasonable distribution of quality questions across all course topics, the test would pull entirely from their exam questions. Students used a Google Form to submit questions and to rate how "good" they thought their questions were. The student-submitted questions yielded a 22-page comprehensive study guide, and, at least in this first instance, a solid, representative, and fair exam.	Class-Sourcing Exams: Student-Generated Exam Questions (Abstract Only)	NA	2017
Dee A.B. Weikle	POGIL (Process Oriented Guided Inquiry Learning) is a flipped classroom, problem-based learning technique for teaching students content through carefully designed questions that they work through in teams with well-defined roles. This technique enables students to retain content while also learning process skills such as communication and teamwork. Developing POGIL activities and facilitating them takes practice and experience. Few, if any, current faculty have been taught using POGIL activities and so have less experience to bring to their development and especially to their incorporation into the classroom. The skills and preparation for delivering an effective POGIL class are very different than faculty have seen in action. The 5 practices: Anticipating, Monitoring, Selecting, Sequencing, and Connecting can be used to better understand how to prepare for and facilitate POGIL activities. While the POGIL organization (pogil.org) has many training sessions, including facilitator training available, most computer science materials still do not incorporate facilitator information that goes beyond the answers to the questions and suggested timing for sections of activities. A brief example of an activity prepared using the 5 practices will be shared to illustrate the potential along with anecdotes and tips for transitioning from traditional lecture to POGIL activities in the classroom.	Using the 5 Practices to Improve Facilitation of POGIL Activities (Abstract Only)	NA	2017
Chen-Hsiang Yu	Learning one domain knowledge is good for undergraduate students to face existing job market, but it might not be enough for the future career challenges. At Wentworth Institute of Technology (WIT), we are promoting Externally-collaborative, Project-based, Interdisciplinary Curricula (EPIC) learning that provides opportunities to work on interdisciplinary projects for the students. In this talk, I would like to share experience of designing and teaching an EPIC course by applying mobile application development to biomedical domain for creating a mobile health system at WIT. The students from two different departments, Computer Science and Networking and Biomedical Engineering, learn together and work collaboratively on a final project. The lessons learned from this process include: (1) How to find appropriate disciplines to make a course? (2) How to design a syllabus for students with different backgrounds? (3) How to design lectures and laboratory assignments for the collaboration? (4) How to guide students to work on the project collaboratively? etc. At the end of the talk, I will conclude my experience with suggestions and describe the future work in this direction.	Lessons learned from an EPIC course: Mobile Application Development for Mobile Health (Abstract Only)	NA	2017
Carl Alphonce:Jacob Condello:Bina Ramamurthy:Simran Singh	Computer programming is a process. Successful programming involves incrementally building and testing a solution. Students' ability to program is typically determined by an assessment of the end-product of a programming session rather than an examination of the actual process students are engaged in. A prerequisite to assessing a student's programming process is having access to that process. While direct one-on-one observation of students while they code has the potential to yield high-quality data, it does not scale well to large classes. One scalable approach is to automatically capture edit events through IDE instrumentation, and programmatically assess the resulting data. In this poster we report on our work to date in developing and deploying a plug-in for Eclipse's Java Development Tools (JDT), explore the data we have collected to date, compare our results with those reported in previous work, and discuss possible directions for future work in using this data for assessment of students' programming process.	Building Tools, Gathering Data: Precursors for Assessing Students' Programming Process (Abstract Only)	NA:NA:NA:NA	2017
Sam Andow:Kaitlyn Eng:Julia McCarthy:Olivia Palenscar:Thomas Schneider:Adam Schulze:Zachary Dodds:Bryan Twarek	In 2015-16, San Francisco Unified School District (SFUSD) piloted MyCS, a Middle-years CS curriculum, in half of its middle schools. This unexpected launch led naturally to diverging curricular branches: one that evolved within the district, another used by schools with the program already in place. The summer after the pilot, SFUSD's and MyCS's stewards convened for a week of feedback, PD, and planning. This poster highlights the curricular refinements, preliminary assessment results, and institutional changes that came from this curricular divergence and subsequent reconciliation. The data analyzed include teacher- and district-feedback, along with an analysis of student responses from SF's pilot implementation. Though accidental, this experiment suggests that substantial benefit can come from independently co-evolving (branching) and then reconciling (merging) curricula. When merged, those otherwise independent branches create a community both stronger and more invested for all of its stakeholders.	Merging MyCS: Lessons from a District-wide Middle-school CS pilot (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA	2017
Michael Ball	While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language inspired by Scratch. We demonstrate how we integrated our autograder into UC Berkeley's CS10 and compare student success of autograded lab assessments to oral lab check offs. We demonstrate how we offered real-time feedback to a course of 300 students, and how we integrated our tools into an edX MOOC with 15,000 students. Our autograder is a hosted solution which would allow other courses to use our tools with little effort.	Implementing "In-Lab" Autograding for Snap! (Abstract Only)	NA	2017
Marie Bienkowski:Eric Snow	Education researchers have extensively studied how secondary teachers adopt and adapt new curriculum and new teaching practices, especially in science and mathematics. Their goals are often to learn ways to help teachers enact new pedagogical approaches, so the results inform teacher professional development, as well as building knowledge in the field. Changing teaching practice often involves changes across a number of fronts: for example, inquiry-based teaching of science involves skills in developing questions, supporting student whole-class discussion and sense-making, and allowing students time to investigate authentic problems. Research is now underway to discover ways to similarly help teachers in K-12 computer science (CS). K-12 CS curricula have emphasized inquiry- and equity-focused teaching practices as ways to engage and include students while simultaneously deepening students? understanding of CS concepts and practices. While researchers have focused on measuring student attitudes to discern engagement and feelings of inclusivity, less work has been done on how implementation affects student learning. To study this, CS education researchers need frameworks and instruments to measure implementation, attitudes, and learning. We are developing and validating instruments that support mixed-methods study of curriculum enactment and teaching quality, with a focus on inquiry, equity, and computational thinking practices. This poster will present preliminary results from a large-scale study of implementation in secondary CS classrooms to build a more systematic understanding of evolving practices in measuring curriculum enactment and teaching quality.	Studying Implementation of Secondary Introductory Computer Science: Pilot Results (Abstract Only)	NA:NA	2017
Samuel Breese:Ana Milanova:Barbara Cutler	Student experience in introductory computer science classes can be enhanced by applying static analysis techniques to automatically grade assignments. At Rensselaer Polytechnic Institute (RPI), introductory computer science classes (using Python) exceed 650 students in size. As resources are limited, it is infeasible to have teaching staff individually examine each student's answer for small in-lecture exercises; however, qualitative data regarding student code independent from execution is still valuable (and in some cases required) to assess progress. When static analysis utilities were made available to instructors and integrated with automatic assignment testing, instructors were able to judge student performance and provide feedback at a scale that would otherwise be infeasible. There are clear advantages to applying static analysis techniques in comparison to less sophisticated methods (e.g. regular-expression based search). For one, students are unable to subvert grading by placing certain keywords within comments or string literals. Static analysis can also be applied to easily grade students on patterns that would be nontrivial to detect using a more naive method, for example in enforcing a rule that all member variables of a C++ class must be private, or verifying that a function takes the appropriate number and type of arguments.	Using Static Analysis for Automated Assignment Grading in Introductory Programming Classes (Abstract Only)	NA:NA:NA	2017
Frisque Brennen:Ankur Chattopadhyay	Social construction based learning approaches have been employed in computing education, but none of them has actually evaluated the effectiveness of the student reflection mechanism, which plays a key role in the learner's assimilation and accommodation process that builds upon the student's existing knowledge as part of the action learning within these approaches. Adapting the inquiry based knowledge building of the social construction model, this poster presents a process of student reflection that uses a unique, non-traditional method of interactive question-answer dialogue for engaging CS1 and CS2 students in a reflective assessment before the actual action learning cycle begins. This process of reflection helps students analyze their conceptual understandings and identify problems or limitations within their respective cognitive models prior to the actual process of knowledge refining or creation. In order to ensure that students have successfully reflected upon their conceptual beliefs, a software tool based assessment is then carried out. The answers from the social interaction based reflective assessment are compared with the results obtained through the software based traditional assessment in order to validate the student reflection process in the form of a social construction based epistemology. This research experiment also presents an authentic and relevant problem basis in the form of conceptual gaps for students to address within the action learning pedagogy of social construction. Results from the conducted comparative analysis in this case study show encouraging evidences confirming the validity of student comprehensions and assumptions by evaluating the knowledge discovery process through an epistemic investigation.	Can We Conduct A Social Construction Based Epistemology for CS1 and CS2 Students? (Abstract Only)	NA:NA	2017
Quinn Burke:Madeleine Schep:Travis Dalton	The goal of the CS for SC Landscape Report is to examine the current state of computing education on the K-12 level within the state of South Carolina. Building off of the 2007 South Carolina's Computing Competitiveness Report, the report more fully examines the fundamental questions of who? what? and where? in terms how computer science education has developed in the state over the past nine years. Results are reported in this poster based on a survey of 158 K-12 educators and ten follow-up interviews with leading computing teachers and program administrators from around the state. This research is funded through a generous grant through the National Science Foundation Broadening Participation in Computing Alliance (NSF Award No. 1228352, 1228355) administered through Expanding Computing Education Pathways (ECEP).	CS for SC: A Landscape Report of K-12 Computer Science in South Carolina (Abstract Only)	NA:NA:NA	2017
Jeffrey Bush:Susan Miller	Previous experience correlates to student retention in computer science at the secondary and undergraduate levels, it's impact in middle school is less well understood. Previous research findings from a University of Colorado large scale survey of students' conceptions of computer science have shown that there is a pervasive gender gap in middle school student confidence and interest in computer science. This study conducts a follow up investigation, analyzing data from fall 2014 to spring 2016 (n=6,128), using multiple regression analysis to investigate how student responses to motivational items concerning both confidence and interest vary by gender, previous experience with computer science, minority status, and having a computer at home (a proxy for privilege). Results show statistically significant associations (p<0.001) between the both outcomes (confidence and interest) and each of the four predictors. Gender had the largest association with each outcome. Students with previous experience with computer science also report higher confidence. This is equivalent in size to the higher confidence associated with having a computer at home and twice the higher confidence associated with being non-minority. For interest, previous experience associations were smaller but still significant. These findings imply that previous experience with computer science at the middle school level help to reduce the motivational differences by gender, privilege, and ethnicity.	Analysis of Associations between Motivation and Previous Computer Science Experience, Gender, Ethnicity and Privilege as Observed in a Large Scale Survey of Middle School Students (Abstract Only)	NA:NA	2017
Christa Cody:Behrooz Mostafavi	We have been incrementally adding data-driven methods into the Deep Thought logic tutor for the purpose of creating a fully data-driven intelligent tutoring system. Our previous research has shown that the addition of data-driven hints, worked examples, and problem assignment can improve student performance and retention in the tutor. In this study, we investigate the influences two unsolicited hint types have on students' ability to complete the tutor. We have used data collected from two test conditions: one with unsolicited next step hints (NSH) presenting the immediate next step of a logic proof to a student's current proof-solving state, and the other with unsolicited subgoal hints (SGH) presenting a step of a logic proof two or three steps of the student's current state. Our results show that students who received unsolicited SGH had more interactions within the tutor and skipped more problems. Furthermore, the SGH group had a significantly higher dropout percentage. These results suggest that hint types can affect student behavior and the ability to learn the material. Therefore, determining what type of hint to give during problem solving is important to the learning process and should be taken into consideration when designing an intelligent tutoring system (ITS). Future work will include using historical student data to determine the best hint type to give a student by analyzing student behavior and identifying the most effective hint type for the behavior being exhibited.	Investigating the Impact of Unsolicited Next-Step and Subgoal Hints on Dropout in a Logic Proof Tutor (Abstract Only)	NA:NA	2017
Sayamindu Dasgupta:Benjamin Mako Hill	Quantitative studies of learning using block-based programming languages in informal environments have relied on identifying the presence or absence of individual visual blocks in learners' projects. Many important programming concepts (e.g., initializing a variable) involve the combination of several blocks. In this poster, we present a technique that uses a statistical method from epidemiology called "survival analysis" to model the rate at which programmers begin to use new code patterns. By analyzing data drawn from the trajectories of over 90,000 users from the Scratch online community, we demonstrate the potential of our approach. In particular, we model when users are at higher and lower levels of "risk" of demonstrating two particular code patterns -- variable initialization and counting collisions. We show that learning of these patterns is associated with behaviors like viewing the source code of other projects, remixing, and commenting. We explain how our method can be extended to help understand predictors of skill acquisition in informal environments more generally and how it can inform the design of more effective learning support structures.	Measuring Learning of Code Patterns in Informal Learning Environments (Abstract Only)	NA:NA	2017
Debzani Deb	Big data and cloud computing (BDCloud) collectively offer a paradigm shift in the way businesses are now acquiring, using and managing information technology. With the fast growth of this paradigm, we argue that each and every CS and IT students should be equipped with foundation knowledge in this collective paradigm and should possess hand-on-experiences in managing big data applications in clouds to acquire skills that are necessary to meet current and future industry demands. This poster presents our research that proposes gradual and systematic integration of big data and cloud computing related topics into multiple core (required) courses of CS/IT curriculum. The poster, supported by a NSF grant, will be useful for CS/IT students and their instructors as it identifies big data and cloud computing related topics that are important to cover, finds a sequence of the prescribed topics that can be incorporated into existing core courses most effectively, and suggests specific core courses in which their coverage might find an appropriate context. The poster further identifies the major challenges this proposed intervention may encounter and provides a deeper analysis of them. Finally, the poster describes our experience of implementing one such course with proposed interventions during Fall of 2016 semester. The pre- post- test results that measure student opinion and understanding of big data and cloud computing topics are presented in the poster and demonstrate improved student interest and learning.	On the Integration of Big Data and Cloud Computing Topics (Abstract Only)	NA	2017
Yuli Deng:Dijiang Huang:Chun-Jen Chung	Personalized learning is often referred to a new learning approach by taking individual parameters such as learning preferences, abilities, skills and knowledge into account. In this poster, we present a personalized learning solution for computer networks, system, and cybersecurity focusing on hands-on projects. The personalized learning models are established in ThoTh Lab - a cloud-based hands-on virtual laboratory for Computer Science (CS) education. ThoTh Lab is a remote web-accessing virtual laboratory and it was originally designed to reduce lab management overhead for instructors and improve learning experience for CS students. By introducing new personalized learning capabilities, we can transfer ThoTh Lab from a traditional hands-on lab resource provisioning system to an active personalized e-learning platform for CS education. The system can track and assess students' hands-on projects' activities to monitor students' lab performance, and then provide intelligent suggestions or resources to improve students' learning experience and outcomes. Our personalized learning framework is distinguished from existing approaches by three salient features: (1) it is built into a hands-on and virtualized laboratory environment usually involving multiple virtual computers and their interconnections, (2) it has incorporated into a wide range of learners' characteristics such as individuals' learning style, prior knowledge and learning effectiveness, and it is designed to be able to include new and customizable features, (3) it uses machine learning approaches to model student characteristics during the learning process.	ThoTh Lab: A Personalized Learning Framework for CS Hands-on Projects (Abstract Only)	NA:NA:NA	2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky	In attempts to broaden participation in computing, the computer science education community has developed a wide variety of outreach activities to encourage students of different ages to learn computational thinking techniques and to develop an interest in computer science. In their recent surveys of the CSed literature, Decker, McGill, and Settle identify over eighty papers on K-12 outreach activities, of which approximately forty address middle-school coding camps. However, summer coding camps are offered by a much wider variety of organizations than computer science educators committed to diversifying the field. Some are offered by organizations committed to diversity, such as Black Girls Code and Girls Who Code. Others are offered by universities for recruitment, and necessarily to support diversification. Still others are offered by for-profit entities. What are the relationships between the two models of camp? Do the ideas that appear in the research literature filter out to the more mainstream camps, or do the more mainstream camps provide a very different model of computer science? In this project, we reviewed both the computer science education literature (52 sources representing 45 camps) and summer code camps identified on the World-Wide Web (480 different camps). In this poster, we report on common approaches and themes that others may choose to adapt or adopt. We also explore significant differences between the research-centered camps and the mainstream camps in approach, language, and apparent outreach goals.	What We Say vs. What They Do: A Comparison of Middle-School Coding Camps in the CS Education Literature and Mainstream Coding Camps (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2017
Jean French:Hailey Crouse	It is well-known that females are underrepresented in STEM fields -- especially in the computing sciences. Bias, stereotypes, and negative experiences can be realized early in a girl's life. Research suggests that early intervention is necessary to encourage female participation in the computing sciences as a possible educational and career choice. While there are many catalysts that attribute to low interest and participation of females in computing, this research addresses five known causes: a lack of exposure to computing at a young age, a shortage of positive role models in the field, negative stereotypes, unappealing approaches to learning computing, and uncomfortable learning environments. In this research, Pre-K girls, as early as four years of age, were introduced to eight computer-related games and activities. The girls learned about algorithms, computer programming, circuits, and robots in a hands-on, exploratory environment. Age-appropriate surveys were conducted to compare the girls' affinity towards the computer-related activities before and after the study. The results of the study are encouraging as the girls demonstrated increased positive attitudes towards computer-based activities after participating in the study. In addition, the results of the study also demonstrated that the participating girls were able to successfully learn computing concepts at a young age. The presentation of the study will be accompanied by a hand-out including descriptions of the activities and associated equipment for those who would like to explore the topics independently. The presenters will also demonstrate a few of the more portable activities used in the study.	Early Intervention to Enhance Female Interest in Computing Sciences (Abstract Only)	NA:NA	2017
Kinnis Gosha:Kamal Middlebrook	Research suggests that the African American population is continuously growing in America, yet African Americans are disproportionately represented when it comes to undergraduate and graduate degrees and careers in computing. Embodied conversational agents (ECAs) have been developed as tools to disseminate information about various jobs in computing. The ECAs used in this study are African American men and women in those fields. This paper is about a pilot study conducted at Morehouse College in Atlanta, Georgia to assess user satisfaction and effectiveness of the website which houses those ECAs. Twenty-two male undergraduates who were pursuing a degree in computer science participated in a study where they engaged the ECAs to learn more about various computing careers. Those individuals who participated in the study said that the tool was easy to use and that they will consider a career in computing in the future. This pilot study will be used to conduct another study that will focus on African American, male and female high school students and individuals interested in obtaining a graduate degree and/or career in computing. The study's limitation is that there is no control group to compare the results with. Future work will include groups who will either interact with disembodied agents, agents that are presented as Caucasian, or a collection of agents who are more demographically diverse instead of trying to match the demographics of the target audience.	Broadening Participation Research Project: Exploring Computing Careers through a Virtual Career Exploration Fair Using Embodied Conversational Agents (Abstract Only)	NA:NA	2017
Kathleen Haynie:Jeff Gray:Sheryl Packman:Carol Crawford:Mary Boehm:Jonathan Corley	This poster describes how this project has induced teacher preparation and broadened student participation in Computer Science Principles throughout Alabama from 2013-2016. We will describe our professional development (PD) model, gain for participating instructors, results of CS Principles course implementations, and student engagement and outcomes. A statewide and scalable "Teacher Leader" model of professional development was implemented throughout the project. In person training was coupled with on-line course content, geographically proximal teacher groups, and periodic teacher hangouts. Teachers in each cohort collaborated together on developing course content and pedagogy, fostered by peer leaders from earlier cohorts. Instructors encouraged and engaged their students; student agreed that the learning environments supported diversity. Students gained significantly in core computer science content (i.e., abstraction and algorithms) as well as computational thinking practices. Female students showed robust gains on a number of indicators (including higher course grades than males); under-represented minority students showed positive gains in content knowledge. The majority of students said they were likely or possibly likely to pursue computer science in college, and that taking CS Principles impacted their decisions.	A Final Project Report on CS4Alabama: A Statewide Professional Development Initiative for CS Principles (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
David Hovemeyer:Arto Hellas:Andrew Petersen:Jaime Spacco	Recent years have seen increasing interest in using programming snapshot data for education research. One barrier to such research, especially for studies involving data from multiple institutions, is that the data is in a wide variety of native formats, and those formats may not be conducive to automated analysis. To overcome this barrier, we propose a structured data model and archival data format called Progsnap (https://cloudcoderdotorg.github.io/progsnap-spec/). Progsnap is designed to be a neutral export format, is currently supported by two open-source programming exercise systems, and we believe will be an easy target for data export from other systems. An open source Python library makes it easy to automate analysis of Progsnap datasets.	Progsnap: Sharing Programming Snapshots for Research (Abstract Only)	NA:NA:NA:NA	2017
Aleata Hubbard:Yvonne Kao	Educators, researchers, politicians, tech companies, and others continue to advocate for the importance of K-12 students learning computer science in our increasingly tech-driven society. One way school districts in the United States address this growing demand is by allowing teachers certified in other disciplines to lead computer science courses. Summer and weekend professional development opportunities support these educators in developing the expertise needed for effective computer science teaching, but a great portion of their learning to teach computer science will occur through on-the-job experiences. Our four-year NSF EHR grant explores how a job-embedded professional development program that pairs high school teachers with tech industry professionals supports educators in acquiring computer science teaching knowledge. The research presented in this poster focuses on the third year of the study and includes (a) a theoretical component focused on creating a framework to explain on-the-job computer science teaching knowledge development based on case studies with six teachers, and (b) an empirical component focused on the creation and administration of a computer science teaching knowledge assessment. By the time of the SIGCSE symposium, we expect to have pre-test results from the first administration of our teaching knowledge assessment, completed by both high school teachers and their collaborating tech industry professionals. This poster will present our theoretical framework, resultant teaching knowledge assessment with sample items, and analysis of participants' assessment responses and their relationship to specific teaching experiences.	Computer Science Teaching Knowledge: A Framework and Assessment (Abstract Only)	NA:NA	2017
Sarah Hug:Enrico Pontelli:Raena Cota:Suzanne Eyerman	This poster highlights a sociocultural analysis of a multifaceted K12 outreach program at New Mexico State University, a Hispanic Serving Institution that has had success recruiting local young women into the computer science department and beyond into the computing workforce. YWiC began in 2006 and has become a rich, extensive outreach program, reaching over 10,200 students across southern New Mexico. Over the years, YWiC has produced strong evaluation results related to computer science knowledge gains and computing interest (see Nesiba, et. Al 2015). The social scientists used Lave and Wenger's (1991) community of practice concept to analyze program design and implementation. Findings show four ways in which the program promotes individual agency, belonging to the local and global computing communities, and "positioning" (Davies and Harre, 1990) of young women as competent computer scientists. Specifically, YWiC: a) makes multiple pathways into computing education and computer science careers via intentional role modeling, b) provides common base knowledge through initial experiences and deep support from multiple role models, c) gives opportunities for young women to identify, and be identified by others as, competent in computing, and d) promotes belonging to a group of like-minded girls with multiple interests.	Learning and Identity in YWIC: An Analysis of Program Implementation and Design as Promoting Agency in Computing (Abstract Only)	NA:NA:NA:NA	2017
Keith Irwin:Darina Dicheva:Christo Dichev	There is good evidence that students learn better when given more opportunity to practice skills using related problems. However, this requires a sufficient supply of automatically graded problems to enable instant feedback. This can be achieved through automating the process of problem generation. While a few dynamic problem generation systems exist, they are either very specific to a single topic (such as tools for automatic generation of parameterized questions for Java or C programming or they are intended for other disciplines and not easily adapted to the needs of Computer Science. We have developed a prototype system for authoring, administering, and grading dynamic problems. This system is specifically designed for computer science. To this end, it supports complex logic, calling external programs such as compilers or databases, and the creation and manipulation of figures and diagrams. Problems and useful code libraries can be created and shared between instructors. It is a web-based system where instructors can specify problems by combining static text or images with bits of Lua code which add dynamism. When students use the system, their answers will be graded automatically, and they will be able to see the results, thus giving them quicker feedback. This is an integrated portion of a larger gamified learning platform called OneUp which is under development and aims to combine hands-on practicing with additional game-like motivational mechanisms. The goal of both the larger platform and the dynamic problems in specific is to increase student engagement in the learning process.	Open Extensible System for Dynamic Problem Creation for Computer Science (Abstract Only)	NA:NA:NA	2017
Ryosuke Ishizue:Kazunori Sakamoto:Hironori Washizaki:Yoshiaki Fukazawa	The concept of memory management in C programming language is particularly challenging for novice programmers. Consequently, many researchers have proposed program visualization tools to alleviate these difficulties: for example, SeeC is one of the state-of-the-art tools for visualizing the behavior and execution status of C programs. However, three problems (P1-3) remain in SeeC, as well as in other existing visualization tools. P1 (Usability): SeeC requires many steps to revisualize modified source code. P2 (Capability): SeeC does not fully support dynamic memory allocation. P3 (Installability): novice programmers often find installation of SeeC challenging due to its dependency on Clang. We propose a new visualization tool named PlayVisualizerC (PVC) for novice C programmers, which provides three solutions (S1-3) for P1-3. S1: PVC reduces the steps required for revisualization. S2: complete support for dynamic memory allocation. S3: designed to be installed in the user's web browser. From a small-scale experiment and a questionnaire given to 20 students, we found that a set of four programming tasks were solved 1.8 times faster and 24% more correctly using PVC.	An interactive Web Application Visualizing Memory Space for Novice C Programmers (Abstract Only)	NA:NA:NA:NA	2017
Maya Israel:Todd Lash:George Reese	There is growing momentum to integrate computer science (CS) education across K-12, but there is little information about how this integration should take place (Grover & Pea, 2013). This is especially true in the elementary grades, as fewer studies have examined computing at these grades. Through a National Science Foundation STEM+C project, we are developing and studying learning progressions for integrated CS and mathematics at the elementary level. Our research examines how teachers are introducing CS concepts within mathematic as well as what computational concepts and practices naturally can be taught within the context of elementary mathematics. We are also examining how these emerging progressions align with the K-12 CS Framework and the new standards from the Computer Science Teachers Association (CSTA). Future aims are to develop a coherent set of learning progressions related to areas such as debugging, sequencing, looping, conditionals, and decomposition within mathematics topics such as geometry, fractions, and arithmetic number stories. Our research lays the groundwork for the development of learning trajectories that will guide curriculum developers and practitioners to understand how to teach students across grades K-5 computing within the context of their mathematics instruction.	Emerging Learning Progressions in K-5 Integrated Mathematics And Computer Science Lesson Plans (Abstract Only)	NA:NA:NA	2017
Deja Jackson:Cindi Simmons:Kate Zelaya:Erica Pantoja:Amber Wagner	Block Programming languages (e.g., Scratch, Blockly) are widely used in teaching students within K-12 classrooms and in some universities with hopes of introducing programming concepts to beginner students. The use of block programming languages in classrooms is an effort in encouraging students' interest in computer programming by utilizing Papert's "low floor" and "high ceiling" metaphor. The Hour of Code is one example demonstrating the impact block languages have in education; however, there are not many languages offering an emphasis on advancing skills in mathematics or reading while focusing on the need of students with learning disabilities. This poster describes our creation of a block language using Blockly's API. Our block language, Hopper's Fables, named after Admiral Grace Hopper, is a storytelling language based on completing interactive mathematical problems in an effort to engage students while going through the story. It is the intent of Hopper's Fables to aid elementary students with learning disabilities through enhancing their math and literacy skills, while simultaneously building the student's digital fluency and developing their computational thinking skills. Hopper's Fables is based on research of related work, which allowed for the creation of an evaluation rubric. Analyzing the characteristics of existing languages allowed Hopper's Fables to come to life. By combining Papert's "low floor" and "high ceiling" philosophy with educational foundations, Hopper's Fables will provide students with an appropriate and enchanting learning environment.	Hopper's Fables: A Mathematical Storytelling Adventure (Abstract Only)	NA:NA:NA:NA:NA	2017
Yerika Jimenez:Theodore Hays:Christina Gardner-McCune	Tools like MIT App Inventor and Scratch are designed to help students develop programming and computational thinking skills by allowing them to use their interest and personal experiences to create meaningful artifacts. However, students often need additional help in translating their ideas into functional programs because they lack understanding of how to map the visual aspects of their projects to programming constructs and understanding of how to develop appropriate algorithms that bring their ideas to life. To address this issue, we created a Computational Thinking App Design Mat (App Design Mat) to scaffolds students' CT skill development in the context of creating a mobile application with MIT APP Inventor 2. The App Design Mat fosters student engagement in computational thinking through four areas of the mat: Problem Decomposition, Pattern Abstraction, Pattern Recognition, and Algorithm Design. In this poster will describe the design and results from the use of the App Design Mat with 80 eighth grade students. Our results suggest that most students understood the purpose of using the App Design Mat, used the App Design Mat effectively, and used some aspects of the App Design Mat in developing their final mobile app project.	Computational Thinking App Design Mat: Supporting the Development of Students' Computational Thinking Skills (Abstract Only)	NA:NA:NA	2017
Keith Jones:Akbar Siami Namin:Miriam Armstrong	There is a job gap in cybersecurity with many more security jobs than qualified candidates. The cybersecurity workforce shortage could be mitigated by developing better curricula that prioritize the Knowledge, Skills, and Abilities (KSAs) most important to security related jobs. To determine which KSAs should be included in cybersecurity education and training, we administered survey-interviews to 44 security professionals at the premier hacking conferences Black Hat and DEF CON. Questions concerned 32 cybersecurity-relevant KSAs. Participants were asked how important each KSA was to their job and where they had learned that KSA. Fifteen KSAs were rated as being of higher-than-neutral importance. Most of these important KSAs concerned networks (example KSA: knowledge of network protocols) and threats/vulnerabilities (example KSA: knowledge of types of security threats and vulnerabilities). Of the 32 KSAs, participants learned the most about 31 of them while on the job and not through formal training. Overall, the data suggest that network KSAs and threat and vulnerability KSAs should be prioritized in course curricula and that historically threat and vulnerability KSAs have not been emphasized in school. This work is supported by National Science Foundation under award number DGE-1516636.	What Should Cybersecurity Students Learn in School?: Results from Interviews with Cyber Professionals (Abstract Only)	NA:NA:NA	2017
Sarah Judd:Megan Sullivan:Jeff Stern	Agile software development practices, which focus on iteration and adaptability, are commonly used in software engineering companies. Girls Who Code designed an after-school Clubs curriculum for middle and high school students that gives girls first-hand exposure to these practices. We use agile processes for two reasons. The first is practical: Over the course of a year-long Club, all participants collaboratively create a large project. Agile practices organize this effort. The second is mission-driven: We believe using real-world techniques and terminology will build girls' identities as computer scientists. Girls Who Code recognizes that when teaching 40,000 girls at scale, not every Clubs Facilitator will have had first-hand experience with agile development practices. We have created a curriculum to empower volunteers from any background to teach in an agile manner. Facilitators are given Session Outlines for each Club session that provide activities to structure the Club experience, as well as additional facilitator tips on topics such as finding an audience, researching pre-existing solutions, and developing solutions. Throughout this year, the Girls Who Code Education team will observe Clubs to evaluate this pedagogical approach. We will follow 10 Clubs closely throughout the year, and visit approximately 40 more. During that time, we will interview facilitators about their experiences teaching our curriculum. We will share our findings from these field observations and recommendations for integrating agile development practices into curricula. We hope to engage the computer science education community in a conversation about the strengths and challenges of this approach.	Agile Development in Project-based Curriculum at Scale for Middle and High School Girls (Abstract Only)	NA:NA:NA	2017
Clif Kussmaul	This poster describes a new CS1 course on Computation & Cognition (C&C), targeted at students in psychology, neuroscience, and biology. In C&C, students learn to create and use software to imitate, model, or study processes in the brain. Topics include software development, control structures, data types, and testing, as well as key ideas in experimental design, stimulus presentation, searching, natural language processing, genetic algorithms, and neural networks. Thus, C&C enriches student understanding of content in their majors, and develops programming and computational skills in a relevant context, which should enhance subsequent research projects and career outcomes. C&C was developed with support from a 2015 Google CS Engagement grant, and incorporates research-based practices that improve student learning and help broaden participation in computing. In particular, C&C uses Process Oriented Guided Inquiry Learning (POGIL) (http://pogil.org), in which student teams work on classroom activities that are specifically designed to guide them to construct their own understanding of key concepts, and to develop process skills such as communication, critical thinking, problem solving, and teamwork. C&C also uses PsychoPy (http://psychopy.org), a FOSS tool to run psychology experiments with two interfaces -- the Builder GUI to design experiments, and the Coder IDE to write Python code. The first offering of C&C was small (3 female, 3 male) with strong ratings for the course overall, and for increasing student interest in the subject matter. In the future, we hope to add experimental paradigms and techniques, and engage more students from diverse backgrounds.	CS1: Computation & Cognition -- An Evidence-Based Course to Broaden Participation (Abstract Only)	NA	2017
Louise Ann Lyon:Quinn Burke:Jill Denner:Jim Bowring	The rise of so-called "coding boot camps" as an alternative training ground for software development is prominent in the popular press, and these camps have caught the attention of colleges and universities. Administrators and faculty considering whether and how to partner with coding boot camps may want to consider what skills and knowledge boot camps are providing to students as well as successful college/boot camp partnerships. This poster reports on data from a collaborative NSF EHR grant (#1561705/ #1561717) funding a qualitative study of how coding boot camps and university CS programs prepare students for careers as software developers. As part of early data collection for this study, we have learned not only details of boot camp student preparation for the workforce, but also ways that universities are currently partnering with boot camps. This poster will report on data gathered in focus groups and interviews with curriculum developers from both coding boot camps and university CS programs categorized into the themes of: classifications of boot camps, screening/admission criteria, student profiles, training (both independently and in partnership with colleges/universities), and job placement. We draw suggestions from this initial data as to where boot camps may be able to enhance traditional CS degrees for students and what CS educators may want to consider when evaluating the boot camp experience.	Should Your College Computer Science Program Partner with a Coding Boot Camp? (Abstract Only)	NA:NA:NA:NA	2017
Travis Mandel:Jens Mache	In an increasingly computer-driven world, it is no surprise that undergraduate interest in computer science has grown enormously over the years. To meet this growing demand, it is vital to ensure there is a growing supply of talented and passionate CS educators. However, most computer science professors must first earn a PhD at a research university. Therefore, we seek to understand whether these institutions are meeting the growing need for passionate and highly-trained computer science educators. Specifically, we analyze 19 years of historical data gathered from the University of Washington Computer Science & Engineering department. Although focusing on graduates from a single school is a limitation, University of Washington is somewhat unique in that it publicly posts graduating PhD students' preferences online, and UW has had numerous notable graduates pursue careers in teaching, research, and industry. Our analysis of 309 graduating students reveals that the number of graduating students interested in teaching is alarmingly small, and has not grown over time to meet the increased need for quality educators. Our more detailed analysis of the change in interest over time suggests several potential reasons for this phenomenon. We hope that this poster opens dialogue surrounding possible interventions that might alleviate this issue.	Examining PhD Student Interest in Teaching: An Analysis of 19 Years of Historical Data (Abstract Only)	NA:NA	2017
Daniela Marghitu:Amber Wagner	As part of the new and bold NSF INCLUDES initiative, we introduce the SouthEast Alliance for Persons with Disabilities in STEM (SEAPD-STEM) whose goal is to increase the representation of students and faculty with disabilities in all STEM fields. The SEAPD-STEM is an alliance consisting of 22 higher ed institutions including community colleges, four-year institutions, and universities with graduate programs. The primary methodology utilized by the SEAPD-STEM is to build bridges of support and mentorship between various levels of academia: in undergraduate institutions, upperclassmen will support lowerclassmen; graduate students will support upperclassmen; junior faculty will mentor graduate students; and senior faculty will mentor junior faculty. Moreover, there will be bridges from undergraduate/graduate to the workplace aiming to assist persons with disabilities in acquiring a position working in a STEM field. This poster presents how the bridges are formed in addition to preliminary data including statistics concerning students with disabilities studying STEM fields, professors with disabilities in STEM, and survey data completed by intervention participants. In total, there are 19 proposed interventions to be implemented including Saturday and Summer academies, research experiences, GRE prep workshops, and various levels of mentoring/advising from high school to workforce. It is the intention of the SEAPD-STEM to increase the alliance each year in order to reach as many students with disabilities as possible.	Building Bridges: How the Southeast is Increasing the Representation of Students with Disabilities in STEM (Abstract Only)	NA:NA	2017
Chris Mayfield	With the recent launch of AP CS Principles in 2016-17, many efforts are currently underway to share curriculum resources and prepare new teachers. The community has primarily focused on high school implementations, which have different situational factors than university courses (e.g., amount of class time). In this poster, we present the design of a survey course that aligns with CS Principles and also continues the long tradition of breadth-first introductions to computer science at the college level. We describe the instructional strategies, assessments, and curriculum details, providing a model for how to modify existing CS0 courses. We also outline twelve lab activities that support the computational thinking practices and learning objectives of the AP curriculum framework. All instructional materials including activities, labs, performance tasks, and rubrics are freely available on the course website: https://w3.cs.jmu.edu/cs101. Quizzes, solutions, and other materials are also available to instructors upon request. The course has run successfully for the past four years at two universities and three high schools via dual enrollment. Initial results suggest that the curriculum has a positive impact on student confidence levels and attitudes toward computer science.	Implementing CS Principles as a Breadth-First Survey Course (Abstract Only)	NA	2017
Susan B. Miller	In this research, I studied two enactments of a professional development course designed to help teachers learn how to program games and teach programming to middle school students using a guided discovery approach. In the first PD course (n=58), a wholly teacher-directed approach was used. In the other PD course (n=54), a guided discovery approach was employed. I found three major differences between the groups. First, the descriptions of the games varied significantly based on the type of instruction, leading us to believe that teachers were taking more ownership of their creations. Second, the teachers who were taught with a guided discovery approach were able to work at a quicker pace, with less assistance, and ultimately were able to more quickly apply those skills to more complex games and simulations within the course of the professional development. Third, it also appears that this guided discovery teaching methodology is similarly impacting changes in pedagogy when these newly trained teachers use Scalable Game Design in the classroom. Students in classrooms where teachers were taught using guided discovery methods were more likely to go beyond the curricular materials when building their own games. This appears to indicate that these approaches to training will translate to changes in classroom practice, enabling teachers to more readily employ a guided discovery approach in their own teaching efforts	Using Professional Development to Move Toward a Guided Discovery Approach in the Classroom (Abstract Only)	NA	2017
Chelsea Patek:Ankur Chattopadhyay	This poster presents a potential way of promoting student driven computing educational research that may provide an alternate path or option to the traditional faculty-driven computing education research. We propose a unique model of inter-class student collaboration that motivates creativity, expands the scope of collaborative research and enables handling of conceptual gaps through inter-class peer mentoring. The proposed model engages students from an upper level class with students of a lower level class so that they can connect with each other in a peer mentor-mentee relationship to overcome conceptual gaps in learning. It provides upper level students with an exclusive opportunity to reinforce their conceptual grasps and engage in research for addressing the problems faced by lower level students. This proposed model of improvised peer collaboration promotes a new kind of service-oriented learning project in computing that inspires innovation and leads to research on finding ways to handle common conceptual limitations, thereby helping student retention by assisting lower level peer mentees. It also assists upper level peer mentors in self-driving towards research oriented thinking for inventing methods to solve authentic conceptual issues. The proposed model has been currently implemented in the UWGB computing curriculum, where CS2 students have been collaborating with CS1 students and have been participating in computing educational research as part of the process. These ongoing research experiments have analyzed the performance of the proposed model through data obtained by conducting student surveys. The collected survey data represent insightful evidences from preliminary evaluations of the proposed model.	Can Undergraduate Computing Research Be Student-Driven? (Abstract Only)	NA:NA	2017
Max Paulk:Amber Wagner	Many K-12 and university classrooms are now using block programming languages (e.g., Scratch, App Inventor, Code.org) to help students learn how to program. These block programming languages are popular because of their simplicity and "tinkerability" allowing novice users to create a project within minutes of first being exposed to the language. Unfortunately, these languages are highly dependent on the mouse and keyboard making them nearly inaccessible for those users with visual or motor impairments. This poster presents CodeBox64, a simplified input modality that is able to program block programming languages in a more tactile approach; it is a Tactile Input Modality (TIM). Because of the simplicity of CodeBox64, it allows visually impaired students to navigate the buttons and knobs with ease. CodeBox64 consists of four navigational buttons (i.e., up, down, left, right), a back button, and an enter button. It also contains an RFID sensor board that allows the user to use physical Lego blocks to execute commands of a block language. While CodeBox64 was originally developed to work with a custom, Blockly language, JamBlocks, it has the potential to work with other block languages. CodeBox64 demonstrates one possible methodology for enabling block languages to be accessible to those users with visual impairments.	CodeBox64: A Tactile Input Modality for Block Programming (Abstract Only)	NA:NA	2017
Kai Qian:Hossain Shahriar:Fan Wu:Cassandra Thomas:Emmanuel Agu	In this poster we present an innovative authentic learning approach for Secure Mobile Software Development(SMSD) through real-world-scenario case studies. The primary goal of this learning approach is to create an engagement and motivating learning environment that encourages all students in learning emerging SMSD technologies and enhances their secure software development concepts. This approach provides students with hands-on laboratory practices on real-world SMSD and mobile security. The laboratory consists of multiple modules covering input validation, output encoding, secure inter-process communication, secure data protection, secure mobile database. Each topic consists of a series of progressive sub-labs: a pre-lab, lab activities, and a student add-on post-lab. The preliminary feedback from students is positive. Students have gained hands-on real world experiences on Android software security with Android mobile devices, which also greatly promoted students' self-efficacy and confidences in their mobile security learning.	Broadening Secure Mobile Software Development (SMSD) Through Curriculum Development (Abstract Only)	NA:NA:NA:NA:NA	2017
Christian Roberson	Traditional, points-based grading poses several challenges to computer science educators. Students can lose focus on learning the material and instead focus on the game of trying to accumulate enough partial credit to get to the next grade tier. Faculty can waste large amounts of time obsessing over partial credit point assignment for a particular assignment. It can be difficult to use course grades to connect student performance with learning outcomes for the course and the program. This poster presents an overview of an alternative approach to traditional grading: specifications grading. Specifications grading is a points-free, mastery style of grading that replaces partial credit with quality feedback and revision opportunity. This model provides several advantages over the traditional grading approach. These advantages include better support for high academic standards and rigor, an increased focus for students on learning by removing the intrinsic motivation to earn points, and a stronger connection between student grade assessments and course learning outcomes. The poster will provide an overview of specifications grading and its benefits, along with details of implementation for an Android application development course and an introductory-level programming course. Additionally, the poster will include student evaluation data from previous offerings of the courses.	Applications of Specifications Grading in Computer Science Courses (Abstract Only)	NA	2017
Clare A. Rumsey:Quinn Burke:Chris Thurman	In an effort to lay a foundational framework for a computer science (CS) middle school curriculum, this research examines youth's use and perception of the introductory programming language Scratch through both the lens of storytelling and game making. Over the course of an academic semester (5 months), two classes of 6th grade students (52 students total) progressed from creating digital stories in Scratch to creating interactive games as teams, enhancing critical thinking skills, beliefs about ability, and overall literacy skills. This poster reports on students' perception of coding both in terms of storytelling as well as in terms of gaming, and how each learning "product" (e.g., stories versus games) affected students' overall perception of coding as as a practice, as well as their own interest in and persistence with such practice. Results are based on pre-and post course student and teacher surveys and interviews, weekly field note observations, and artifact analysis of particular coding scripts. Discussion section points to the wider implications for the growing number of middle school CS in-school and after-school programs nationwide, and the role of stories and games as an effective "hook" to introduce children to CS.	Cracking the Code: Bringing Introductory Computer Science to a Charleston Middle School (Abstract Only)	NA:NA:NA	2017
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan	Many feel K-12 computer science requires a large tech budget, a classroom full of laptops, tablets or robots, and an experienced tech teacher. This belief is not unfounded as the majority of online computer science teaching materials require modern technology and Internet connectivity, making these tools inaccessible to the low-tech classroom. As a solution, we developed SAS® CodeSnaps, a free tool that provides an engaging coding experience with minimal technology. One iPad and one robot (www.sphero.com) are all that is needed for every student in a classroom to code. With CodeSnaps, students program together using printable coding blocks. When their program is ready, they "snap" a picture using the CodeSnaps app which digitizes their code and executes it on a robot, allowing students to see their program execute in the real world. In this poster we present lesson plans for both a single engagement with students as well as week-long introduction to CS fundamentals centered around the CodeSnaps app. We also discuss results from two pilot studies designed to measure student engagement during these lessons.	Coding for All: Computer Science Outreach for All Ages and Budgets (Abstract Only)	NA:NA:NA	2017
Allison Scott:Alexis Martin:Frieda McAlear	In response to the lack of diversity in computing fields and associated lack of access to computing courses, an NSF-funded computing intervention was developed and implemented within the SMASH Academy for underrepresented high school students. Previous research indicated short-term impact of the intervention on computing interest and knowledge. This pilot data explores the longitudinal impact of this intervention and whether it influences the pursuit of computing majors in college. Using data from students who participated in SMASH in high school and are currently pursuing computing majors in college, descriptive comparative data suggest there has been a longitudinal increase in pursuit of computing associated with the intervention. This poster will also provide qualitative data and narratives to further explore whether students attribute their choice of major to the intervention, and therefore, whether these increases can be attributed to the intervention. In addition, this poster will also contain open questions to engage and stimulate the audience in discussion about ideas for additional analyses or variables to explore to examine longitudinal impact.	Do Computer Science Exposure Activities and Courses Influence the Pursuit of Computing Majors in Higher Education among Underrepresented High School Students? (Abstract Only)	NA:NA:NA	2017
Nicole Simon:Megan Banford	During summer 2016, John Jay College of Criminal Justice piloted Cyber Crime Investigators -- a 4-week pre-college program that aimed to expand the pipeline of NYC public high school students who enter college ready to pursue a path toward a profession in cybersecurity. The program was designed by a team of educators with expertise in academic skill preparation, college access, career guidance, student learning, and computer science. Using IDEO's Design Thinking for Educators as a learning framework, 42 rising high school seniors engaged in a six-stage process to understand and create solutions for complex problems in cybersecurity. To understand the many real-world applications of cybersecurity, students worked in teams as consultants for Floor Plan, a fictitious non-profit organization (modeled after Housing Works) that provides housing and healthcare services to homeless LGBTQIA teenagers. They employed Design Thinking protocols to develop a cybersecurity plan for the organization, guided by the NSA's First Principles of Cybersecurity. They worked on the challenge daily in "Lab." During this time, they learned technical skills, such as operating a command line and principles of networking, and they practiced other academic skills, such as writing, project planning, and public speaking -- all part of a foundational skill set for college success. They conducted interview and observation research during field trips and speaker visits and presented their final plans at a public competition judged by industry professionals during the program's last week.	Cyber Crime Investigators: Pathways from High School to Cybersecurity Careers for First Generation College-Bound Students (Abstract Only)	NA:NA	2017
Cara Tang:Cindy Tucker:Elizabeth K. Hawthorne:Christian Servin:Teresa Moore	In 2015, under the auspices of the ACM Education Board the Committee for Computing Education in Community Colleges (CCECC) began an effort to update the ACM Computing Curricula 2009: Guidelines for Associate-Degree Transfer Curriculum in Computer Science with inclusion of contemporary cybersecurity concepts. To this end, the CCECC established a task force of community college educators to review the ACM/IEEE Computer Science Curricula 2013 (CS2013) and identify foundational material in CS2013 that is appropriate for the first two years of a computer science education. To further inform the guidance, the CCECC administered surveys to a global audience of computer science educators to solicit input related to CS2013 knowledge areas (KAs) and knowledge units (KUs) and on cybersecurity topics, which are appropriate for associate-degree computer science transfer programs. The guidance has been through two rounds of public review and comment	Curricular Guidance for Associate-Degree Transfer Programs in Computer Science with Contemporary Cybersecurity Concepts (Abstract Only)	NA:NA:NA:NA:NA	2017
Juliet Tiffany-Morales:Kathy Haynie:Jason Ravitz:Karen Peterson	The importance of computer science educational opportunities for girls cannot be understated, and strong evaluative practices are critical for ensuring that these opportunities are of high quality and meet girls' needs. In this poster presentation, participants will learn how a nonprofit and a corporate partner designed a program to build the evaluative capacity of participating nonprofits--the CS OPEN initiative. Presenters will discuss the guiding principles that shaped this initiative and share the challenges to and successes of developing an evaluation capacity building network that supports a diverse set of 12 grantees. Session attendees will learn from the designers and evaluation experts within this network: 1) how this evaluation capacity building partnership was developed and grantees were selected, 2) grantees' experiences and challenges in designing and implementing evaluations, 3) the resources and efforts the partners have used to develop grantees' evaluative capacity and to build the network, and 4) the impacts of these efforts on grantees evaluative capacity. Resources utilized by the CS OPEN grantees will be displayed with ratings and highlights of their growth in evaluative capacity. The poster will highlight major successes and lessons learned for implementing an evaluative capacity building grant initiative.	Building Evaluative Capacity for Out of School Organizations that Engage Girls in Computer Science (Abstract Only)	NA:NA:NA:NA	2017
Peter A. Tucker:Robert Bryant	NA	Motivating K-12 Students Toward Computer Science, and Computer Science Students Toward Teaching (Abstract Only)	NA:NA	2017
Jeramey Tyler:Matthew Peveler:Barbara Cutler	We present a non-grade-penalty late day policy used in many of the large lecture, required courses in our computer science department. We study the effectiveness of this late day policy in reducing student stress, distributing demand for teaching assistant resources in peak hours before the homework deadline, and in maintaining or improving student understanding and homework grades. A complex late day policy can be efficiently implemented and managed within our open-source homework submission system that utilizes automated testing and grading, allowing students to submit and resubmit homeworks as they make progress on the assignment.	A Flexible Late Day Policy Reduces Stress and Improves Learning (Abstract Only)	NA:NA:NA	2017
Paul Voelker:Chris Johnson	The use of educational games to teach and reinforce concepts to students is an idea that has gained popularity in recent years. Games force students to demonstrate their mastery of a subject by applying its principles to complete a goal or solve a problem. Games also offer more frequent feedback on the student's performance along with immediate rewards. These factors can make games more engaging for the student than traditional homework or quizzes. In this poster, the authors present a program which hopes to leverage the advantages games have as a learning tool in order to help students understand the effects of bit manipulation. The player controls a factory with a series of pipes that dispense chocolate into trucks waiting below. Using bitwise operators, the player must manipulate which pipes are open and closed in order to ensure that a pipe is only open if there is a truck aligned beneath it. The player is offered immediate feedback on their performance in the form of empty trucks driving away or wasted chocolate splashing to the ground. Additional challenge can be added to the game by only allowing the player to adjust the pipes one time between each set of trucks. By providing immediate feedback and encouraging creative problem solving, this game may improve student's intuition about the mechanics underlying bit manipulation.	A Game-Driven Approach to Teaching Bit Manipulation (Abstract Only)	NA:NA	2017
Jan Vykopal:Jakub Cegan	Cyber defence exercises (CDX) represent a popular form of hands-on security training. Learners are usually divided into several teams that have to defend or attack virtual IT infrastructure (red vs. blue teams). CDXs are prepared for learners whose level of skills, knowledge, and background may be unknown or very diverse. This is evident in the case of high-profile international CDXs with hundreds of participants coming from government agencies, military, academia, and the private sector. In this poster, we present techniques for distributing learners into teams with respect to their level of proficiency and the prerequisite skills required by the exercise. Our aim is to reach a balance between proficiency and the exercise to make the exercise beneficial for the learners and an effective investment for sponsors. The poster describes three methods and compares their advantages and disadvantages. First, we present self-assessment questionnaires, which we have already used in four runs of a national CDX for 80 participants. We outline our findings from an analysis of the learners' self-assessment before and after the exercise, and the score they achieved during the exercise. Second, we introduce a promising method for testing the prerequisites of the exercise. This is still a work in progress but we believe that this method enables the better assessment of learners' skills with respect to the exercise content, and supports the game balance better. Finally, we compare both methods to a naïve one that shuffles participants into teams randomly.	Finding Exercise Equilibrium: How to Support the Game Balance at the Very Beginning? (Abstract Only)	NA:NA	2017
Xiaohong Yuan:Li Yang:Wu He:Jennifer T. Ellis:Jinsheng Xu:Cynthia K. Waters	This poster presents our NSF collaborative project "Enhancing Cybersecurity Education Using POGIL". Although the POGIL (Process Oriented Guided Inquiry Learning) instructional approach has been used and evaluated in science and engineering disciplines, the use of POGIL in cybersecurity education is not in place due to the lack of POGIL materials in cybersecurity. To deliver key learning outcomes as well as "soft skills" in cybersecurity students, we are developing POGIL materials for teaching cybersecurity, implementing the POGIL teaching pedagogy in cybersecurity courses, and evaluating the teaching and learning effectiveness of the developed POGIL materials and teaching method. We are developing POGIL materials for fifteen topics in six areas: cryptography, access control, network security, risk management, web security, and secure coding. These POGIL materials will be implemented and evaluated in eight different courses at three universities. Through assessing the developed POGIL materials and teaching method, we seek to answer the following research question: Is using the POGIL method more effective than the traditional/lecture-based teaching method in terms of learning outcomes, learning experience, attitudes and motivation? The developed POGIL materials will contribute to the effective resources for cybersecurity education, and enhance cybersecurity education by developing student key skills as well as improving student attitudes, motivation and enjoyment in learning.	Enhancing Cybersecurity Education Using POGIL (Abstract Only)	NA:NA:NA:NA:NA:NA	2017
Rebecca Zarch:Alan Peterfreund	Computer Science (CS) is a rapidly growing and evolving field, with many secondary teachers participating in professional development (PD) to offer CS courses in their schools as the entry point to a CS education pipeline. In 2014 the Evaluator Working Group (EWG) formed to address the issue of common data collection across NSF CS10K projects in order to capture the number of teachers being trained across CS10K projects and locations. The EWG goals are twofold: First, the EWG seeks to test the feasibility of a diverse group of projects collecting and reporting on common data. The lessons learned through this effort will inform the CS education professional development community as the field matures and data collection is more broadly supported. Second, the EWG hopes to have an accurate count of the number of teachers trained through CS10K, some demographic and descriptive information about teachers, information about the students enrolled in teachers' classes, and information about the schools in which the teachers are offering courses. To accomplish these goals, the EWG has developed a common data collection tool and process for projects to report aggregate-level participation data. To date 100% of projects submitted at least partial data. The results show that 1,538 new teachers have participated in PD through these 29 CS10K programs; taught in at least 909 public and private schools in 43 states, the District of Columbia, and Puerto Rico. This poster will provide a visual display of both the process of data collection and the results.	Collecting Participation Data Across NSF CS10K-Funded Professional Development Providers (Abstract Only)	NA:NA	2017
