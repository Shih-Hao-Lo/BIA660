Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Elliot B. Koffman	Over the last 45 years as a student and faculty member in Computer Science, I have been involved in learning, teaching, and writing for the CS1 course. I have authored or co-authored textbooks for CS1 in nine different programming languages from Fortran to Java. Each new language was used because of a particular set of features it provided to solve the critical problem in programming or software development of the day. This talk will take a look back at these languages and the extent to which they succeeded. I will also take a look ahead to see what direction CS1 might be taking in the future.	All I really need to know I learned in CS1	NA	2009
Ursula Wolz	NA	Session details: Starting with scratch in CS 1	NA	2009
Ursula Wolz:Henry H. Leitner:David J. Malan:John Maloney	NA	Starting with scratch in CS 1	NA:NA:NA:NA	2009
James Huggins	NA	Session details: Developing problem-solving skills	NA	2009
Katrina Falkner:Edward Palmer	The ability to solve problems is the key to developing software, and it is an ability that can be difficult to learn. Introductory Computer Science students are often taught syntax and semantics, along with simple problems designed to develop logical, structured thinking, but authentic problem-solving skills are rarely developed at these early stages. In this paper we describe an approach to introductory computer science education that addresses student engagement through integrating cooperative learning techniques and authentic problem solving processes throughout each aspect of the curriculum. Over a period of 4 years, the introductory computer science course at the University of Adelaide has been modified to support a cooperative learning style. A three-stage methodology has been implemented in place of traditional lectures to achieve this. The process focuses on observing the application of programming techniques, observing problem solving techniques and then applying cooperative problem solving exercises in the classroom. The results from this change in teaching methodology have been an increase in attendance rates at lectures and practical sessions as well as improved learning outcomes as measured by exam results. Student experience surveys show students have greater motivation for learning and believe they have a better understanding of concepts since the changes have occurred.	Developing authentic problem solving skills in introductory computing classes	NA:NA	2009
Maureen Biggers:Tuba Yilmaz:Monica Sweat	It is common knowledge that enrollments in computer science have plummeted and educators are challenged to find ways to engage and promote success and retention of students while maintaining standards in introductory computer science courses. This study focuses on the implementation of a collaborative, modified peer-led team learning (PLTL) instructional approach in a large sized introductory computer science course. The site is a major southeastern university in the United States where all students are required to take one of three introductory computer science classes. The course version selected for this study specifically targets computer science majors and the study spans three years of data, and involves 591 students. Students who experienced the student-centered instruction and worked in small groups facilitated by a peer leader (treatment) in years 2006-07 and 2007-08 were compared with students who experienced a traditional recitation lecture section (control) in 2005-06. The content and the course owner was the same for all three years. Quantitative data analysis show marked and statistically significant improvements in student performance, for both male and female students. These findings suggest that using undergraduate leaders to implement a peer-led team learning model can be as effective in promoting achievement and retention in computer science education as it has shown to be in math and science classes over the past several years.	Using collaborative, modified peer led team learning to improve student success and retention in intro cs	NA:NA:NA	2009
Kristy Elizabeth Boyer:Robert Phillips:Michael D. Wallis:Mladen A. Vouk:James C. Lester	In the quest to find instructional approaches that benefit student learning, engagement, and retention, evidence suggests providing students with hands-on practice is a worthwhile use of class time. This paper presents results from an exploratory study of two different instructional approaches that were encountered in a study of experienced human tutors working with novice computing students engaged in a programming exercise. No difference in average learning gains was found between a moderate approach, in which students were given control of problem solving nearly half the time, and a proactive approach in which the tutor took initiative nearly three-fourths of the time. Implications of this finding for fine-grained instructional strategy, as well as for broader classroom management decisions, are discussed. This paper also makes the case for the value of one-on-one tutoring studies as an exploratory research methodology for the comparative evaluation of computer science teaching strategies.	The impact of instructor initiative on student learning: a tutoring study	NA:NA:NA:NA:NA	2009
Tammy VanDeGrift	NA	Session details: Listening to students	NA	2009
Brian Hanks:Laurie Murphy:Beth Simon:Ren√©e McCauley:Carol Zander	We collected advice on how to succeed at learning to program from 164 CS1 students at 3 institutions during a "saying is believing" intervention designed to encourage a growth mindset. More students gave general advice (63%) than programming-specific (23%) or attitudinal advice (34%), despite being prompted to encourage future students to develop a growth mindset toward programming. Advice categories and quotes offer educators insights into student beliefs and practices and suggest a framework for considering how best to advise students. We discuss the implications of students offering advice to other students and provide a handout of representative advice intended for distribution to students in introductory programming courses.	CS1 students speak: advice for students by students	NA:NA:NA:NA:NA	2009
Brian Hanks:Matt Brandt	Learning to program continues to be challenging for many students. This paper reports on problem-solving approaches undertaken by pair programming students. We examine reasons why some approaches lead to success while others lead to failure. We also identify some aspects of the Java language that appear to lead to student misconceptions. Finally, we provide suggestions for educators interested in helping students learn successful approaches and avoid unsuccessful ones.	Successful and unsuccessful problem solving approaches of novice programmers	NA:NA	2009
Jill Courte:Cathy Bishop-Clark	We are in a time where computing programs are seeking to differentiate themselves. The ACM suggests that there are five distinct computing disciplines -- Computer Science (CS), Information Technology (IT), Information Systems (IS), Computer Engineering (CE), and Software Engineering (SE). In practice, it seems that there can be extensive overlap between these disciplines. For example, IS is defined by the ACM as computing in an organization context, typically in business while IT is defined as focusing on computing infrastructure and needs of individual users. If each of the different types of programs wishes to identify and attract interested students, it is important to understand if students perceive differences between them. This paper presents the results of a survey to determine if students differentiate between these five disciplines. Computing majors and non-majors were presented with several task descriptions commonly associated with each discipline and asked to identify them as belonging to one of the five disciplines. Data was collected from over 300 students at several different institutions and from a variety of different majors and computing disciplines. The results of the survey are presented along with comparisons of the perceptions of majors and non-majors.	Do students differentiate between computing disciplines?	NA:NA	2009
Afsaneh Minaie	NA	Session details: Networking and mobile apps	NA	2009
Damon Tyman:Nirupama Bulusu:Jens Mache	Wireless sensor networks are revolutionizing the instrumentation of the physical world, across scientific, industrial and military applications. In this paper, we describe our efforts developing and classroom-testing hands-on materials for use in undergraduate-accessible courses on sensor networks. In Winter 2008 at Portland State University, we introduced an in-class laboratory component to a sensor networks course that had previously been entirely lecture-based. For the laboratory exercises, we utilized Sun's Java-programmable Sun SPOT [7] sensor network technology. We found the Sun SPOT based laboratory activities to be quite powerful as a teaching and excitement-fostering tool.	An activity-based sensor networks course for undergraduates with sun spot devices	NA:NA:NA	2009
Muthucumaru Maheswaran:Alexis Malozemoff:Daniel Ng:Sheng Liao:Song Gu:Balasubramaneyam Maniymaran:Julie Raymond:Reehan Shaikh:Yuanyuan Gao	GINI (GINI Is Not Internet) is an open-source toolkit for creating virtual micro Internets for teaching and learning computer networking. It provides lightweight virtual elements for machines, routers, switches, and wireless devices that can be interconnected to create virtual networks. The virtual elements run as unprivileged user-level processes. All processes implementing a virtual network can run within a single machine or can be distributed across a set of machines. The GINI provides a user-friendly GUI-based tool for designing, starting, inspecting, and stopping virtual network topologies. This paper describes the different components of GINI, briefly discusses ways of using the toolkit in a computer networking course, and reports on user feedback on an early (incomplete) version of the toolkit.	GINI: a user-level toolkit for creating micro internets for teaching & learning computer networking	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Stan Kurkovsky	This paper describes using mobile game development as a motivational tool to engage students early in the curriculum. Mobile devices have become an integral part of everyday lives of modern students; using these devices as a part of the coursework may help them see the immediate connections between Computer Science and real-world technology. Compared to traditional game development, programming mobile games is less complex, which enables students with limited programming experience to create playable mobile games within the scope of a single course. Experience presented in this paper may be easily duplicated, but it may be especially useful in the first college-level course for students with CS AP credits.	Engaging students through mobile game development	NA	2009
Ken Surendran	NA	Session details: Breadth n-th	NA	2009
Don Blaheta	"Information and knowledge management" is the title and theme of a course outlined in CC2001 that was designed to cover a diverse range of core CS topics. In this paper we discuss our experiences implementing it: it succeeds at guaranteeing coverage, but also acts as a useful prerequisite for advanced electives, and as a survey course that engages student interest in unexpected topics.	CS262: a breadth-second survey of informatic CS	NA	2009
William W. White:Jerry B. Weinberg	In this paper, we introduce the concept of breadth-last technical elective courses, which are designed to assist undergraduate CS students in integrating their entire core curriculum into a coherent whole at the end of their degree programs. Specific breadth-last courses in intelligent mobile robotics and computer game development have been implemented and are presented here to demonstrate the pedagogical concepts being discussed.	Breadth-last technical electives: integrating the CS core via computer games and mobile robotics	NA:NA	2009
Leen-Kiat Soh:Ashok Samal:Stephen Scott:Stephen Ramsay:Etsuko Moriyama:George Meyer:Brian Moore:William G. Thomas:Duane F. Shell	We report on a recently funded project called Renaissance Computing, an initiative for promoting student participation in computing. We propose a radical re-thinking not only of our core curriculum in CS, but of the role of CS at the university level. In our conception, ''computational thinking'' is neither easily separated from other endeavors nor easily balkanized into a single department. We thus imagine a CS curriculum that is inextricably linked to other domains. Our proposed initiative covers introductory, depth, and capstone courses, targeting both CS majors and minors. It is also aimed to develop interdisciplinary CS courses in sciences, engineering, arts, and humanities. Furthermore, the framework embraces collaborative learning to help improve learning.	Renaissance computing: an initiative for promoting student participation in computing	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Lillian Cassel	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Lillian N. Cassel:Richard H. Austing:Elliott Koffman	This session proposal is part of the recognition of 40 years of SIGCSE. We will look at the organization itself, how it came to be and where it might be going. It will be an interactive session with the participation of the audience informing the SIGCSE leadership of appropriate directions for the future of this group that has been so important to computing education.	SIGCSE: from the beginnings to a bright future	NA:NA:NA	2009
Daniel D. Garcia	NA	Session details: Special session	NA	2009
Daniel D. Garcia:Robb Cutler:Zachary Dodds:Eric Roberts:Alison Young	At the SIGCSE Symposium in 2007, the ACM Education Board organized a well-attended special session exploring the crisis in computing education and its underlying causes. The idea behind the session was to provide a forum at which a larger and more broadly representative subset of the education community could engage in direct dialogue with the members of the ACM Education Board and Education Council, who are charged with developing educational policy for the ACM as a whole. Last year, we extended that dialogue and explored concrete strategies for emphasizing the "passion, beauty, joy, and awe" (PBJA) of computing about which Grady Booch spoke so eloquently in his 2007 keynote address. The extremely positive feedback we received served as motivation to continue the discussion this year, to allow us to hear from new voices and receive updates on the current state of the crisis. It is increasingly clear that students today find less joy in the process of creating software than their predecessors did a generation ago. At the same time, these skills have become increasingly important, forcing companies to cast an ever widening net in their search for people with the necessary skills and training. Continued progress in the computing disciplines--and indeed the economic health of a society that relies increasingly on computing technology--can continue only if we can encourage an even larger number of students to pursue the many opportunities that careers in computing provide.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, continued	NA:NA:NA:NA:NA	2009
Stephen Cooper	NA	Session details: Special session	NA	2009
Stephen Cooper:Joan Peckham:Harriet Taylor	NA	Exploring NSF funding opportunities in EHR and CISE	NA:NA:NA	2009
Joseph Urban	NA	Session details: Panel session	NA	2009
Joseph E. Urban:Jesse M. Heines:Edward A. Fox:Harriet G. Taylor	NA	Panel on revitalized undergraduate computing education	NA:NA:NA:NA	2009
Sarah Monisha Pulimood	NA	Session details: Quotidian pedagogy	NA	2009
Janet Davis	I report on my experiences with Just-in-Time Teaching (JiTT) in two systems courses and two design courses as a new instructor at a small liberal arts college. My purposes are threefold: to further raise awareness of JiTT in the computer science education community, to show instructors can achieve JiTT's goals with simple technology and preparation on the fly, and to consider strengths and limitations of the approach, particularly for new faculty. My experience has been very positive: classes have been fun, engaging, and conversational. Students have reported that they come to class better prepared and appreciate the opportunity to ask and discuss questions before class. Where others have warned of the high workload with this approach, my experience is that the workload is reasonable compared to preparing a new course from scratch; the approach discourages some types of overpreparation. For these reasons, I would recommend the approach for other new instructors.	Experiences with just-in-time teaching in systems and design courses	NA	2009
Chris Bennett:Timothy Urness	Many CS1 courses lack a breadth in coverage of computing-related topics and do not actively engage in non-programming computer science topics. In addition, many introductory (and advanced) courses fail to help students develop oral communication skills. In this paper, we describe our experience with addressing these issues in CS1 courses at two different institutions through the use of brief, daily student presentations. Not only can this help recruitment and retention, but it helps to develop more well-rounded students. We also describe the results of a survey students take before and after the course to evaluate how participating in the course can affect attitudes and beliefs about computer science.	Using daily student presentations to address attitudes and communication skills in CS1	NA:NA	2009
Edward F. Gehringer:Carolyn S. Miller	Active-learning exercises are an effective use of class time to bring about desired learning outcomes. Instead of listening to a lecture, students are engaged in tasks that allow them to discover new knowledge, or apply what they have just learned. A barrier to wide usage of active-learning exercises is the need to design them, since few are available in textbooks, technical papers, or on the Web. The work reported in this paper demonstrates that students can design active-learning exercises that are worthy of being used in CS1 and CS2. This frees the instructor from having to write all the exercises him/herself. This paper makes three contributions: a methodology for creating student-generated active-learning exercises, several exercises for teaching difficult concepts in CS1 and CS2, and guidance about the kinds of active-learning exercises that students will enjoy and learn most from.	Student-generated active-learning exercises	NA:NA	2009
Madeleine Schep	NA	Session details: Recruitment	NA	2009
Amy Bruckman:Maureen Biggers:Barbara Ericson:Tom McKlin:Jill Dimond:Betsy DiSalvo:Mike Hewner:Lijun Ni:Sarita Yardi	Computing education suffers from low enrollment and a lack of diversity. Both of these problems require changes across the entire computing education pipeline. The "Georgia Computes!" alliance, funded by the National Science Foundation's Broadening Participation in Computing program, seeks to improve the computing education pipeline in Georgia. "Georgia Computes!" is having a measurable effect at each stage of the pipeline, but has not yet shown an impact across the whole pipeline.	"Georgia computes!": improving the computing education pipeline	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Patricia Morreale:Stan Kurkovsky:George Chang	This paper presents a methodology for increasing undergraduate Computer Science (CS) major enrollment at comprehensive public universities, particularly those that have first generation college students or students from underrepresented populations in professional computer science in the United States. While there has been significant prior discussion of undergraduate recruiting to increase major enrollment in CS, this is the first identification of a systematic approach to recruiting distinct undergraduate student populations into the CS major. Nationally, highly selective and selective universities and colleges have worked within their student populations to increase major enrollments, while CS departments at comprehensive public universities primarily focused on regional recruiting have also worked to identify and increase CS major enrollments. The approach outlined here addresses regional recruiting for undergraduate majors in CS and has been used at two public universities. The resulting methodology serves as a template for any department or faculty member seeking to increase undergraduate enrollment in CS.	Methodology for successful undergraduate recruiting in computer science at comprehensive public universities	NA:NA:NA	2009
Brad Richards	This paper presents an analysis of the data on representation of women in US liberal arts computer science departments, using 10 years' worth of IPEDS data. What began as a search for departments with exemplary representation ended with the conclusion that the representation data is too unstable to be a useful measure of success: The correlation between average representation values in consecutive five-year periods is small, only r=0.156, and not significantly different from zero (p=0.143, t=1.477) for this set of institutions. Other metrics and sample populations are considered with similar results. This result has important implications for studies assessing the impact of departmental interventions on the representation of women, as well as research on the factors that influence representation.	Representation of women in CS: how do we measure a program's success?	NA	2009
Douglas Harms	NA	Session details: Distributed computing for the classroom	NA	2009
Jeannie R. Albrecht	Distributed applications have become a core component of the Internet's infrastructure. However, many undergraduate curriculums, especially at small colleges, do not offer courses that focus on the design and implementation of distributed systems. The courses that are offered address the theoretical aspects of system design, but often fail to provide students with the opportunity to develop and evaluate distributed applications in real-world environments. As a result, undergraduate students are not as prepared as they should be for graduate study or careers in industry. This paper describes an undergraduate course in Distributed Systems that not only studies the key design principles of distributed systems, but also has a unique emphasis on giving students hands-on access to distributed systems through the use of shared computing testbeds, such as PlanetLab and GENI, and open-source technologies, such as Xen and Hadoop. Using these platforms, students can perform large-scale, distributed experimentation even at small colleges.	Bringing big systems to small schools: distributed systems for undergraduates	NA	2009
Richard A. Brown	The potential benefits of data-intensive scalable computing (DISC) in CS education are considered in the context of a small college with an active student-operated Beowulf cluster initiative. The map-reduce computational model, of great importance in industry, is reviewed, and the Hadoop implementation of that model is connected to specific courses throughout the undergraduate CS curriculum. Concerns when running a local Hadoop-capable cluster at a small college are identified.	Hadoop at home: large-scale computing at a small college	NA	2009
Justin Cappos:Ivan Beschastnikh:Arvind Krishnamurthy:Tom Anderson	Cloud computing is rapidly increasing in popularity. Companies such as RedHat, Microsoft, Amazon, Google, and IBM are increasingly funding cloud computing infrastructure and research, making it important for students to gain the necessary skills to work with cloud-based resources. This paper presents a free, educational research platform called Seattle that is community-driven, a common denominator for diverse platform types, and is broadly deployed. Seattle is community-driven -- universities donate available compute resources on multi-user machines to the platform. These donations can come from systems with a wide variety of operating systems and architectures, removing the need for a dedicated infrastructure. Seattle is also surprisingly flexible and supports a variety of pedagogical uses because as a platform it represents a common denominator for cloud computing, grid computing, peer-to-peer networking, distributed systems, and networking. Seattle programs are portable. Students' code can run across different operating systems and architectures without change, while the Seattle programming language is expressive enough for experimentation at a fine-grained level. Our current deployment of Seattle consists of about one thousand computers that are distributed around the world. We invite the computer science education community to employ Seattle in their courses.	Seattle: a platform for educational cloud computing	NA:NA:NA:NA	2009
Martha Kosa	NA	Session details: CS1/2 transitions	NA	2009
Richard J. Enbody:William F. Punch:Mark McCullen	How suitable is a Python-based CS1 course as preparation for a C++-based CS2 course? After fifteen years of using C++ for both CS1 and CS2, the Computer Science Department at Michigan State University changed the CS1 course to Python. This paper examines the impact of that change on the second course in the sequence, CS2, which kept C++ as its primary language. We report results on a CS2 class which had a mixture of students who had used either C++ or Python from our CS1 course. The CS2 class covered the same topics as previously, though with some changes, and even gave the same final exam as a previous offering. Independent samples t-tests were used to compare students from the Python group with students from the non-Python group on three outcomes: final exam grade, programming projects scores, and final grade for the course. The main result was that there were no significant differences between the groups for all three outcomes. In addition, multiple regression analysis showed that students' past performance (overall GPA) in the University predicted final grades, final exam scores, and programming project scores for the course, but there was no effect of the programming language feature: Python or non-Python. We feel this shows that the Python-based CS1 course prepared students for the C++-based CS2 course as well as the C++-based CS1 course did---while exposing them to a different, powerful and useful language.	Python CS1 as preparation for C++ CS2	NA:NA:NA	2009
Marty Stepp:Jessica Miller:Victoria Kirst	Web programming is increasing rapidly in importance at the university level, yet there is no consensus about when and how it should be incorporated into the computer science curriculum. This paper describes our results in teaching an experimental introductory web programming course at the University of Washington that has had great success in attracting large numbers of students from inside and outside the computer science major. The course requires CS1 as a prerequisite, striking a good balance between making the course open to non-majors but also more rigorous for students with programming background. We classify the course as "CS 1.5" because many of our students take it between CS1 and CS2. We use our evaluation data to argue that a web programming course at this level leads to a great deal of student interest and enthusiasm, broadens the reach of computer science, and provides a valuable service to other departments.	A "CS 1.5" introduction to web programming	NA:NA:NA	2009
Judith Gal-Ezer:Tamar Vilner:Ela Zur	The ongoing debate among Computer Science educators about the advantages and disadvantages of the shift from the procedural to the Object-Oriented paradigm usually relates to the introductory course. Indeed, we were also concerned when in our institute we decided to implement this shift in our introductory course and started to teach Java, instead of a procedural paradigm. In our previous study we saw that the effect of the shift did not lower the achievements of students taking the CS1 course. Furthermore, we wanted to be equally sure that this was the case when students take Data Structures courses. This is the focus of the study presented in this paper. The results show that there is no significant difference in the achievements of students who came from different paradigm backgrounds. This encouraging result probably relates to the fact that our CS1 course focuses on the fundamentals of introductory Computer Science and does not only emphasize the language aspects.	Has the paradigm shift in CS1 a harmful effect on data structures courses: a case study	NA:NA:NA	2009
Curt White	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Curt M. White	This special session will present an historical look at all past SIGCSE conferences, beginning with 2008. If possible, the conference chair, from each conference will present a brief synopsis of his/her conference. This synopsis may include a photo of the conference site, the number of attendees, the paper acceptance ratio, any special awards and the awardees, the "theme" of the conference, any special issues relevant at that conference, and one or two "interesting" events that occurred during that conference.	An historical look at the SIGCSE conference	NA	2009
Kim Bruce	NA	Session details: Special session	NA	2009
Mark Bailey:Kim Bruce:Kathleen Fisher:Robert Harper:Stuart Reges	This special session will present a summary of the recommendations of the First SIGPLAN Workshop on Undergraduate Programming Language Curricula, held at Harvard University in May, 2008. The purpose of the workshop was to generate new recommendations for programming languages topics to be learned by all undergraduate CS majors. In this special session we will present a summary of the curriculum recommendations, why they were made, and ways of incorporating them into undergraduate CS curricula.	Report of the 2008 SIGPLAN programming languages curriculum workshop: preliminary report	NA:NA:NA:NA:NA	2009
Gregory Hislop	NA	Session details: Panel session	NA	2009
Gregory W. Hislop:Heidi J.C. Ellis:Allen B. Tucker:Scott Dexter	This panel will discuss issues and methods for incorporating free and open source software (FOSS) in computer science education. The panelists are investigating approaches to student participation in FOSS that produce results that are contributed to the FOSS community and actually used by others.	Using open source software to engage students in computer science education	NA:NA:NA:NA	2009
Daniel Ernst	NA	Session details: Panel session	NA	2009
Daniel Ernst:Barry Wittman:Brian Harvey:Tom Murphy:Michael Wrinn	NA	Preparing students for ubiquitous parallelism	NA:NA:NA:NA:NA	2009
Maureen Doyle	NA	Session details: Test-driven pedagogical approaches	NA	2009
Viera K. Proulx	Test-Driven Design (TDD) has been shown to increase the productivity of programming teams and improve the quality of the code they produce. However, most of the introductory curricula provide no introduction to test design, no support for defining the tests, and do not insist on a comprehensive test coverage that is the driving force of the TDD. This paper presents a curriculum, pedagogy, and the software support for introductory object-oriented program design that uses the TDD consistently from the very beginning. The testing software does not increase the program complexity and is designed to work with the simplest programs. It has been used by hundreds of students at several colleges and is freely available on the web. Our experiences show that besides improving the quality of code students produce, TDD combined with the novice-appropriate test libraries reinforces students' understanding of the object oriented program design.	Test-driven design for introductory OO programming	NA	2009
Joel Adams	Software testing is an increasingly important topic in engineering reliable software systems, and test-driven development is an increasingly popular methodology for building reliable systems. However, most software engineering instructors' courses are already very full, so that increasing coverage of testing in those courses can only occur at the expense of another topic. In this paper, we argue that testing should be introduced early in the CS curriculum, that the Data Structures (CS2) course is an especially natural place to emphasize unit testing and test-driven development, and that doing is a way to revitalize the CS2 course.	Test-driven data structures: revitalizing CS2	NA	2009
Chetan Desai:David S. Janzen:John Clements	Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.	Implications of integrating test-driven development into CS1/CS2 curricula	NA:NA:NA	2009
Jeanette Allen	NA	Session details: Retention	NA	2009
Lecia J. Barker:Charlie McDowell:Kimberly Kalahar	This paper describes an exploratory study to identify which environmental and student factors best predict intention to persist in the computer science major. The findings can be used to make decisions about initiatives for increasing retention. Eight indices of student characteristics and perceptions were developed using the research-based Student Experience of the Major Survey: student-student interaction; student-faculty interaction; collaborative learning opportunities; pace/workload/prior experience with programming; teaching assistants; classroom climate/pedagogy; meaningful assignments; and racism/sexism. A linear regression revealed that student-student interaction was the most powerful predictor of students' intention to persist in the major beyond the introductory course. Other factors predicting intention to persist were pace/workload/prior experience and male gender. The findings suggest that computer science departments interested in increasing retention of students set structured expectations for student-student interaction in ways that integrate peer involvement as a mainstream activity rather than making it optional or extracurricular. They also suggest departments find ways to manage programming experience gaps in CS1.	Exploring factors that influence computer science introductory course students to persist in the major	NA:NA:NA	2009
J. McGrath Cohoon:Zhen Wu:Jie Chao	Using longitudinal survey data from women in the CRA-W Graduate Cohort program, we measured the prevalence of observed or experienced sexism and its impact on departure from Computer Science and Computer Engineering (CSE) doctoral programs. Our data suggest that sexist behavior is perceived less often by these women than it is by women in general. In addition, few of the women who observe sexism are motivated by it to think of leaving their CSE doctoral programs. Nevertheless, when their reason for thinking of leaving is due to sexism they observed or experienced, the odds of women actually departing are at least 21 times greater than if they thought of leaving for any other reason.	Sexism: toxic to women's persistence in CSE doctoral programs	NA:NA:NA	2009
Susan Horwitz:Susan H. Rodger:Maureen Biggers:David Binkley:C. Kolin Frantz:Dawn Gundermann:Susanne Hambrusch:Steven Huss-Lederman:Ethan Munson:Barbara Ryder:Monica Sweat	This paper describes the implementation and evaluation of a program that uses active recruiting and peer-led team learning to try to increase the participation and success of women and minority students in undergraduate computer science. These strategies were applied at eight universities starting in the fall of 2004. There have been some impressive results: We succeeded in attracting under-represented students who would not otherwise have taken a CS course. Evaluation shows that participation in our program significantly improves retention rates and grades, especially for women. Students in the program, as well as the students who served as peer leaders, are uniformly enthusiastic about their experience.	Using peer-led team learning to increase participation and success of under-represented groups in introductory computer science	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Dean Hendrix	NA	Session details: Capturing and analyzing student artifacts	NA	2009
Roy P. Pargas:Samuel Bryfczynski	This paper presents and discusses a web-based software tool called GraphPad designed to facilitate interactivity in a CS2 or CS7 (data structures) course in which Tablet PCs or WACOM tablets are available. We describe how GraphPad enables an instructor to: establish a temporary network with the instructor's Tablet as server and the students' Tablets as clients, broadcast instructions and collect student Ink responses, evaluate student submissions and distribute evaluations with a single button-click, use student submissions as examples to guide lecture, and save student submissions in a database. The saved submissions may then be reviewed individually, tagged for errors, and analyzed statistically. An immediate goal is to use GraphPad to deliver CS2/CS7 course content more effectively. A long term goal is to use data collected by GraphPad to help understand the thought process of the CS2/CS7 student for the purpose of identifying students at risk early in order to provide intervention assistance.	Using ink to expose students' thought processes in CS2/CS7	NA:NA	2009
Anthony Allevato:Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Dynamic memory management and the use of pointers are critical topics in teaching the C++ language. They are also some of the most difficult for students to grasp properly. The responsibility of ensuring that students understand these concepts does not end with the instructor's lectures---a library enhanced with diagnostics beyond those provided by the language's run-time system itself is a useful tool for giving students more detailed information when their code fails. We have designed such a toolkit, Dereferee, which students can incorporate into their code with minimal intrusion into the learning process. To demonstrate its effectiveness, we examine C++ code from students in a course that relied solely on the built-in memory management behavior of the language, without any significant additional diagnostic or debugging facilities. We instrument this code with Dereferee in order to explore the causes of errors that result in program crashes and to expose hidden faults that previously lay undetected. Dereferee provided enhanced diagnostics for bugs in 63% of student submissions, and pinpointed the source of 83% of abnormal program terminations. 95% of the students would have received extra diagnostic help from using Dereferee.	Dereferee: exploring pointer mismanagement in student code	NA:NA:NA	2009
Christian Murphy:Gail Kaiser:Kristin Loveland:Sahar Hasan	It is difficult for instructors of CS1 and CS2 courses to get accurate answers to such critical questions as "how long are students spending on programming assignments?", or "what sorts of errors are they making?" At the same time, students often have no idea of where they stand with respect to the rest of the class in terms of time spent on an assignment or the number or types of errors that they encounter. In this paper, we present a tool called Retina, which collects information about students' programming activities, and then provides useful and informative reports to both students and instructors based on the aggregation of that data. Retina can also make real-time recommendations to students, in order to help them quickly address some of the errors they make. In addition to describing Retina and its features, we also present some of our initial findings during two trials of the tool in a real classroom setting.	Retina: helping students and instructors based on observed programming activities	NA:NA:NA:NA	2009
John Rabung	NA	Session details: Computational thinking across disciplines	NA	2009
Susanne Hambrusch:Christoph Hoffmann:John T. Korb:Mark Haugan:Antony L. Hosking	This paper describes the development and initial evaluation of a new course ``Introduction to Computational Thinking'' taken by science majors to fulfill a college computing requirement. The course was developed by computer science faculty in collaboration with science faculty and it focuses on the role of computing and computational principles in scientific inquiry. It uses Python and Python libraries to teach computational thinking via basic programming concepts, data management concepts, simulation, and visualization. Problems with a computational aspect are drawn from different scientific disciplines and are complemented with lectures from faculty in those areas. Our initial evaluation indicates that the problem-driven approach focused on scientific discovery and computational principles increases the student's interest in computing.	A multidisciplinary approach towards computational thinking for science majors	NA:NA:NA:NA:NA	2009
Hong Qin	Modern biology has transformed from an insular entity into an interdisciplinary science, which in turn demands interdisciplinary and cross-disciplinary training for future work force in biology and life sciences. Computational thinking is a way of thinking that uses concepts and methodologies of computing to address questions in a broad range of subjects, and as such, computational thinking offers an important skill set in modern sciences. Despite its importance, the concept of computational thinking has generally been side-stepped in undergraduate biology education. Many students in life sciences are often weak in quantitative/computing skills and tend to avoid computing-orient courses. To address these issues, we incorporated computational thinking into a bioinformatics course for undergraduate life science majors. We developed comprehensive computer laboratory exercises that offer hands-on learning experience for the targeted student pool, and employed peer-assisted collaborative learning environment. Preliminary results of these explorative efforts will be helpful for others to teach computational thinking to biology students.	Teaching computational thinking through bioinformatics to biology students	NA	2009
Owen Astrachan	Ponder means "to weigh in the mind with thoroughness and care" [31]. Pander means "to cater to the weaknesses and base desires of others" [31]. We report on a course we have designed and delivered over a six year period. The course was originally designed as a technical writing course for majors, but has evolved into a non-major's version whose enrollment ranks it as one of the three most highly-enrolled and thus arguably most popular courses for undergraduates at our university. We have worked diligently to ensure that students ponder the topics and problems that comprise the material for the course --- and the material is deeply technical at many levels. We have also pandered to student needs in meeting curriculum requirements, offering the course at a time convenient for athletes and others, and using popular media when possible. We started with the goal of engendering interest and passion for computer science and how it affects the world. We report on our efforts to attain this goal while keeping material appropriately technical. We claim our students are engaged in a different type of computational thinking than that espoused in [32, 5, 15]. For the purposes of this paper and discussion we call our approach pander-to-ponder. We provide examples and illustrations of the material we cover, relate it to similar courses at other institutions, and show how we use problems to motivate learning. In the work we report on here the learning is specific to understanding how contributions from computer science are changing the world.	Pander to ponder	NA	2009
Nell Dale	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Nell Dale:Andrew McGettrick:John Impagliazzo:Robert Aiken:Elliot Koffman:Jim Leisy	NA	A historical look at curricula and materials	NA:NA:NA:NA:NA:NA	2009
Ursula Wolz	NA	Session details: Panel session	NA	2009
Ursula Wolz:Tiffany Barnes:Jessica Bayliss:Jamie Cromack	NA	Girls do like playing and creating games	NA:NA:NA:NA	2009
Jon Beck	NA	Session details: Panel session	NA	2009
Jon Beck:Vicki L. Almstrum:Heidi J.C. Ellis:Massood Towhidnejad	NA	Best practices in software engineering project class management	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Craig Mundie	Computing is undergoing a major paradigm shift. Radical new approaches to hardware and software will transform our online and offline lives, seamlessly combining the power of the internet with a world of devices. Craig Mundie, Microsoft's chief research and strategy officer, will discuss the possibilities and show how close we are to realizing them.	Rethinking computing	NA	2009
Kelvin Sung	NA	Session details: Panel session	NA	2009
Mark Lewis:Scott Leutenegger Leutenegger:Michael Panitz:Kelvin Sung:Scott A. Wallace	NA	Introductory programming courses and computer games	NA:NA:NA:NA:NA	2009
Zachary Kurmas	NA	Session details: Graphical frameworks for CS1	NA	2009
Michael H. Goldwasser:David Letscher	We describe cs1graphics, a new Python drawing package designed with pedagogy in mind. The package is simple enough that students can sit down and make use of it from the first day of an introductory class. Yet it provides seamless support for intermediate and advanced lessons as students progress. In this paper, we discuss its versatility in the context of an introductory course. The package is available at www.cs1graphics.org.	A graphics package for the first day and beyond	NA:NA	2009
Ben Stephenson:Craig Taube-Schock	This paper describes a new tool for introducing computer graphics and multimedia applications into first year, called QuickDraw, and our experience using it. QuickDraw provides an easy to use language and platform independent interface which permits students to create multimedia applications beginning with their first assignment in an introductory computer science course. QuickDraw has been carefully designed to avoid complex "magical" statements in order to setup, use, or tear down the multimedia environment, making it an appropriate tool for use with students with no prior programming experience. As instructors, we have found that QuickDraw effectively engages students by allowing them to create visually impressive programs with minimal complexity, while continuing to allow us to effectively teach fundamental computer science concepts.	QuickDraw: bringing graphics into first year	NA:NA	2009
Andrew Luxton-Reilly:Paul Denny	Computer games are widely used in programming assignments to motivate students. Traditionally, these have been text-based games such as hangman, but as Java has become widespread, the use of graphics and graphical games has increased correspondingly. We report on a framework used as scaffolding to help students understand how to design and implement a variety of interactive games. We share our experiences using this framework for assignments over a number of years.	A simple framework for interactive games in CS1	NA:NA	2009
Jill Pala	NA	Session details: Engaging K-12	NA	2009
Michelle Craig:Diane Horton	In order to address the under-representation of women in Computer Science, we have created a program for middle-school girls that specifically aims to change their attitudes about CS and encourages them to see it as a potential career. Our assessment of the program shows that it did indeed have a significant, positive impact and suggests that this was still in effect three months later. This paper describes the program and its assessment, and makes suggestions for those considering offering a similar program.	Gr8 designs for Gr8 girls: a middle-school program and its evaluation	NA:NA	2009
Mary Beth Rosson:Anastassia Ioujanina:Timothy Paone:Gretel Sheasley:Hansa Sinha:Craig Ganoe:John M. Carroll:Jan Mahar	We describe work on developing workshop activities that are part of wConnect, a project that is building an online community of women in computer and information science. The workshops are designed by college women for high school girls, with hands-on construction of dynamic web sites. Because of limited workshop time, the activities use scaffolding to help girls achieve the in-tended learning objectives. In this paper we describe the design of the activities, their formative evaluation in a series of four work-shops, and how we are using these results in the larger project.	A scaffolded introduction to dynamic website development for female high school students	NA:NA:NA:NA:NA:NA:NA:NA	2009
Tomohiro Nishida:Susumu Kanemune:Yukio Idosaka:Mitaro Namiki:Tim Bell:Yasushi Kuno	"Computer Science (CS) Unplugged" is an educational method for introducing non-specialists to concepts of CS through hands-on activities that don't require the use of a computer. Often the deeper concepts of CS have been considered as being too difficult for elementary and middle school students, and many educators teaching "IT" are not even aware of the richness of the topic. CS Unplugged methods have been used successfully with students of a wide range of ages. In this paper, we analyze the structure of CS Unplugged activities to identify the elements that make them work well. Based on the analysis, we propose a design pattern which will be useful as a guideline for developing new activities, and to revise existing ones. We also describe our experience developing original teaching material, using the pattern as a benchmark for evaluation.	A CS unplugged design pattern	NA:NA:NA:NA:NA:NA	2009
Jaime Nino	NA	Session details: Secure systems	NA	2009
Joel Brynielsson	To authorize and initiate necessary investments and enforce appropriate policies and procedures, decision-makers need to have at least a fair understanding of computer security fundamentals. This paper presents the course design and the laboratory settings that have been developed for, and used within, the high rank officer curriculum at the Swedish National Defence College. The developed course looks at computer security from an attack versus defend viewpoint, meaning that computer attacks are studied to learn about prevention and self-defense. The paper discusses the pedagogical challenges related to education of high rank officers and similar personnel in light of recently-held courses and contrasts the course relative to similar undertakings. A standpoint taken is that computer security is best taught using hands-on laboratory experiments focusing on problem solving assignments. This is not undisputed since, e.g., high rank officers are busy people who are not fond of getting stuck learning about the peripherals.	An information assurance curriculum for commanding officers using hands-on experiments	NA	2009
Li Yang	Hands-on laboratory experiences are essential critical for students to understand concepts and gain real-world insights in database security and auditing. We are developing a set of hands-on labs to integrate theories of database security into practices. Our designed labs do not require purchasing any commercial software or pre-configuration. Each lab includes objectives, results, and resources to help students to understand database security concepts including access control, virtual private database, and database auditing etc. We use two major database products (Microsoft SQL Server and Oracle 10g) to design and implement our labs.	Teaching database security and auditing	NA	2009
Joel Wein:Kirill Kourtchikov:Yan Cheng:Ron Gutierez:Roman Khmelichek:Matthew Topol:Chris Sherman	Complex distributed systems are increasingly important in modern computer science, yet many undergraduate curricula do not give students the opportunity to develop the skill sets necessary to grapple with the complexity of such systems. We have developed and integrated into an undergraduate elective course on parallel and distributed computing a teaching tool that may help students develop these skill sets. The tool uses virtualization to ease the burden of resourcing and configuring complex systems for student study, and creates varied "firefighting" gaming scenarios in which students compete to keep the system up and running in the presence of multiple issues. Preliminary experience indicates that (1) students find the tool engaging and (2) it is a manageable way in which to give students a novel perspective on interaction with complex distributed systems.	Virtualized games for teaching about distributed systems	NA:NA:NA:NA:NA:NA:NA	2009
Nancy Kinnersley	NA	Session details: Shaking up our worldview	NA	2009
Kirby McMaster:Brian Rague:Steven Hadfield	Many Computer Science educators have campaigned to increase mathematical content in the computing curriculum. However, mathematical concepts are often presented in a manner that conflicts with the general mental framework, or gestalt, of CS students. Fortunately, there is more than one gestalt in mathematics. In previous research, we developed two scales for measuring mathematical gestalt in books-a Logical Math scale and a Computational Math scale. In this paper, we apply our two scales to current Computer Theory books to assess the relative emphasis these books give to each gestalt. Our findings have relevance in the development of approaches for teaching mathematical topics in computer courses, especially Computer Theory courses.	Two mathematical gestalts for computer theory	NA:NA:NA	2009
Duane Buck:David J. Stucki	The most commonly stated definition of abstract data type (ADT) is that it is a domain of values and the operations over that domain. So, for example, a language's built-in types, like int are seen to be ADTs. It is our opinion that a pure interpretation of this definition yields a semantics in which using an ADT is the same as using built-in types: the operations are side effect free and there is no concern over alias, shallow copy or synchronization problems. Unfortunately, the term abstract data type has over time been associated with at least three distinct meanings, and those incompatible definitions have often been conflated, causing confusion to students and textbook authors alike. We believe that this has resulted in a loss of appreciation for the value-based semantics of ADTs.	The hidden injuries of overloading 'ADT'	NA:NA	2009
James J. Lu:George H.L. Fletcher	Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency? We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content.	Thinking about computational thinking	NA:NA	2009
Robert McCartney	NA	Session details: Special session	NA	2009
Jonas Boustedt:Robert McCartney:Katherine Deibel:Jim Huggins:Beth Simon:Suzanne Westbrook:The Mystery Presenter	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA	2009
Renee McCauley	NA	Session details: Special session	NA	2009
Andrew McGettrick:Ren√©e McCauley:Richard LeBlanc:Heikki Topi	NA	Report on the ACM/IEEE-CS undergraduate curricula recommendations	NA:NA:NA:NA	2009
Orit Hazzan	NA	Session details: Special session	NA	2009
Judith Gal-Ezer:Orit Hazzan:Noa Ragonis	This special session examines frameworks for the preparation of high school computer science (CS) teachers from the Israeli perspective. Specifically, several Israeli CS teacher preparation programs and their components are presented. The presentation includes both a general overview and a detailed description of the actual implementation of such programs. This bipolar presentation, we suggest, provides practical guidelines with respect to CS teacher preparation, both for policy makers and for faculty members who wish to establish a CS teacher preparation program at their universities.	Preparation of high school computer science teachers: the Israeli perspective	NA:NA:NA	2009
Khadija Stewart	NA	Session details: Graphical introduction to programming in K-12	NA	2009
Susan H. Rodger:Jenna Hayes:Gaetjens Lezin:Henry Qin:Deborah Nelson:Ruth Tucker:Mercedes Lopez:Stephen Cooper:Wanda Dann:Don Slater	This paper describes the integration of the Alice 3D virtual worlds environment into a diverse set of subjects in middle school, including the development of tutorials, example worlds and lesson plans. In the summer of 2008 our experiences with middle school teachers included three-weeks of training in Alice and guidance in the development of lesson plans. Our experiences with middle school students involved two one-week summer camps of instruction in Alice. We found both the teachers and the students strongly engaged with Alice. The teachers created lesson plans with Alice worlds to interactively teach a topic and other lesson plans in which students build an Alice world on a particular topic either from scratch or using a template world. The students in the Alice camps had both instruction in Alice and free time to develop Alice worlds of their choice. We found that the students used a large variety of basic Alice concepts and computer science concepts in the worlds they built in their free time.	Engaging middle school teachers and students with alice in a diverse set of subjects	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Joey C.Y. Cheung:Grace Ngai:Stephen C.F. Chan:Winnie W.Y. Lau	To address the unique demands and challenges of educational computing, various kinds of environments, including graphics-rich and textual environments, have been proposed for use in introductory courses to provide students with a rich and interesting learning environment. In our experience, students in Grade 7 and younger respond best to the graphics environments while senior high school students prefer a conventional textual programming environment. Clearly, this leaves a gap at Grade 11-13, with students often on the one hand finding the graphics-based environments too limited and on the other finding the textual environments too difficult. In this paper, we propose a text-enhanced graphical programming environment which is innovative and interactive, and designed for junior high students with no programming experience. This environment allows students to design their own creative stories or programs. They build their programs using drag-and-drop iconic blocks, but unlike other, similar icon-based programming languages, they are also presented with the syntax of the actual program they are constructing in real-time. Once a particular icon block has been dropped in the programming area, the syntax statements corresponding to that block is immediately generated and presented to the user. The environment also allows them to modify the code without any limitations. Our results show that our textual-graphical hybrid environment has a positive impact on the learning experience of the students.	Filling the gap in programming instruction: a text-enhanced graphical programming environment for junior high students	NA:NA:NA:NA	2009
Gary Kacmarcik:Sylvie Giral Kacmarcik	This paper describes our work motivating a group of students (grades 5-8) to learn real-world computer programming by introducing them to homebrew development for the Nintendo Gameboy Advance (GBA) and DS (NDS) systems using C. Students use a freely available professional toolchain (devkitPro) for development. A custom application was written that allowed the students to easily create their own tilesets (sprites and background maps) and quickly get started building their first ROMs. A series of tutorials was created to complement the program and help the students through the creation of their first game.	Introducing computer programming via gameboy advance homebrew	NA:NA	2009
William Hochstettler	NA	Session details: Mental hygiene -- analysis and promotion of good CS work habits	NA	2009
Vincent A. Cicirello	In this paper, we explore the potential important role that unannounced (or "pop") quizzes can play in CS-1. "Pop" quizzes generate continual feedback to both the student and the instructor of the course. They also encourage students to avoid missing class unless necessary. We present the results of a three year study on the effectiveness of "pop" quizzes in CS-1. Our results demonstrate that students who experience "pop" quizzes in CS-1 score higher on exams than do their counterparts who did not experience "pop" quizzes. This appears especially true for upperclassmen, particularly for juniors. The use of "pop" quizzes in CS-1 also improves performance on programming assignments for juniors. CS/IS majors and Math majors both receive a greater benefit from "pop" quizzes than do other non-majors.	On the role and effectiveness of pop quizzes in CS1	NA	2009
Christopher Hundhausen:Anukrati Agrawal:Dana Fairbrother:Michael Trevisan	Formal code inspections are employed by teams of professional software engineers to identify software defects and improve the quality of software. After reviewing a piece of code individually, members of an inspection team come together to log the issues they have found, and to find new ones. Within the scope of a multi-institutional research project to adapt, refine, and evaluate studio-based learning methods in computing education, we are developing an adaptation of the formal code inspection called the pedagogical code review for use in lower-division computer science courses. In a pedagogical code review, a group of three to four students, led by a trained moderator, (a) walk through segments of each other's programming assignments, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. We implemented pedagogical code inspections in three lab sessions of a CS 1 course. Through an analysis of inspection logs and exit surveys, we compiled evidence that the reviews improved the quality of students' code, stimulated increasingly sophisticated discussions of programming issues and practices, and promoted a sense of community.	Integrating pedagogical code reviews into a CS 1 course: an empirical study	NA:NA:NA:NA	2009
James B. Fenwick, Jr.:Cindy Norris:Frank E. Barry:Josh Rountree:Cole J. Spicer:Scott D. Cheek	This paper reports on the progress of an NSF funded research project investigating the development practices of students in introductory programming courses. In previous work, we describe our extension of the BlueJ IDE to capture events associated with program development. Here we report on data collected during the Fall 2007 and Spring 2008 semesters on CS 1 students. In particular, we show that our data analysis independently confirms the results obtained in separate studies by Jadud [3, 2]. In addition we use our empirical evidence to discern some higher level "patterns" of beginning student programming behaviors including potential cheating and the impact on success of students starting projects late.	Another look at the behaviors of novice programmers	NA:NA:NA:NA:NA:NA	2009
Leila Wallace	NA	Session details: Taking software engineering out of the classroom	NA	2009
Adrian Rusu:Amalia Rusu:Rebecca Docimo:Confesor Santiago:Mike Paglione	It is widely recommended by both academia and industry that today's technology and software engineering students be well prepared for industry before graduation, especially given global outsourcing and other trends. Various methods have been developed to ensure student readiness, including co-ops and capstone courses. These approaches increasingly use real-world projects for their benefits to industry and often to the community at large. In this paper, we argue that students can be prepared to effectively join industry and keep the US technology workforce competitive through a curriculum that includes a theoretical software engineering course with real-world projects and the collaboration of paired teams across two or more universities. We present a case study of a successful teaching experience that features these aspects, and describe the outcome along with the unique perspective of a participating student.	Academia-academia-industry collaborations on software engineering projects using local-remote teams	NA:NA:NA:NA:NA	2009
M. H.N. Tabrizi:Carol B. Collins:Vipul Kalamkar	Students in software engineering need experiences that prepare them for a global work environment that is more and more likely to be structured around team work in which team members may come from a variety of disciplines and cultures and be geographically dispersed. New grads in software engineering are more and more likely to communicate with team members and managers solely via electronic means (e.g. teleconference, videoconference, e-mail, e-file sharing). This paper describes a highly successful international collaboration of students from two universities enrolled in undergraduate software engineering classes, one in the USA and the other in India. Within a semester, these students collaborated remotely to produce software for a leading international software development company. This collaboration, repeated for two semesters and planned for a third, met all learning objectives while successfully producing the desired software. This experience truly engaged our students and enabled the students to learn via a standard course in software engineering about many aspects of professional practice without resorting to special programs like co-op/internships, honors/research independent study, or capstones.	An international collaboration in software engineering	NA:NA:NA	2009
Ralph Morelli:Trishan de Lanerolle	Can engaging students in free and open source software(FOSS) pique their interest in computer science? This paper describes an introductory computer science course that introduced students to using FOSS, to contributing to a humanitarian FOSS project, and to studying the broader impact of FOSS on our society. Students learned basic webprogramming skills (PHP/MySQL) and made small but significant contributions to a global FOSS project. Mistakes were made and opportunities were missed. But overall theexperiment was a success and the experience was enjoyable and educational for students and instructor alike. By building on what worked well, this course could serve as a model for incorporating study of FOSS into the introductory computing curriculum.	Foss 101: engaging introductory students in the open source movement	NA:NA	2009
Don Bailes	NA	Session details: Games 2 teach	NA	2009
Bo Brinkman	I describe a simple game for use in starting a class discussion about corporate decision-making and whistle-blowing. The game allows students to experience the power of managers to influence (for good or bad) the decisions of their underlings, and the counter-balancing powers held by workers.	The heart of a whistle-blower: a corporate decision-making game for computer ethics classes	NA	2009
Michael Eagle:Tiffany Barnes	We are developing games to increase student learning and attitudes in introductory CS courses. Wu's Castle is a game where students program changes in loops and arrays in an interactive, visual way. The game provides immediate feedback and helps students visualize code execution in a safe environment. We compared the game to a traditional programming assignment in an introductory CS course. In our study, half of the students were randomly selected to play the learning game first and half to write a program first. Our results show that students who play our learning game first outperform those who write a program before playing the game. Students in the game-first group felt they spent less time on the assignments, and all students preferred the learning game over the program. These results suggest that games like Wu's Castle can help prepare students to create deeper, more robust understanding of computing concepts while improving their perceptions of computing homework assignments.	Experimental evaluation of an educational game for improved learning in introductory computing	NA:NA	2009
Emily Navarro:Andr√© van der Hoek	In this paper, we describe a multi-site evaluation of SimSE, an educational software engineering simulation game. This study was designed to build on our previous experience of evaluating SimSE in courses and controlled lab settings at UC Irvine, in order to validate our findings and discover any factors that come into play when SimSE is used in other institutions. The study consisted of three different universities using SimSE in their respective courses and reporting the results to us. The results confirmed several of our previous findings, as well as highlighted a number of critical considerations that must be taken into account when using SimSE in a course.	Multi-site evaluation of SimSE	NA:NA	2009
Paul Tymann	NA	Session details: Special session	NA	2009
Paul T. Tymann:Laurie White	The objective of this special session is to provide an opportunity for computer science educators, at both the college and high school level, to provide input to the AP CS Development Committee as it refines the curriculum for the A course in light of the elimination of the AB exam. The input and active participation of educators attending this special session will help the members AP CS Development Committee to define a course and exam that continues to meet the high standards for teaching and learning required in the comparable college course.	The future of the AP CS program	NA:NA	2009
Florence Appel	NA	Session details: Special session	NA	2009
Florence A. Appel:Katherine Deibel:C. Dianne Martin:Joseph D. Oldham:Tarsem S. Purewal, Jr.:Carol L. Spradling	NA	From the man on the moon to 2001 and beyond: the evolving social and ethical impact of computers a session to commemorate SIGCSE' 40 anniversary	NA:NA:NA:NA:NA:NA	2009
Richard Salter	NA	Session details: Panel session	NA	2009
Richard M. Salter:Robert D. Cupper:Stuart Hirshfield:Alexa M. Sharp	NA	New models for the CS1 course: a fifteen year retrospective	NA:NA:NA:NA	2009
Esmail Bonakdarian	NA	Session details: Games how-to	NA	2009
Jessica D. Bayliss	Computer Science degree program enrollments have fallen precipitously since the year 2000 and it is not surprising that novel approaches to education are being tried to both attract and retain students. One of the areas with a record of success is with using games in introductory programming courses. While there are several successful programs, the drawbacks of these approaches are not commonly discussed along with their benefits. Having run a successful game-based program that retained students within the CS major at a 93% rate, we discuss both the benefits of the program as well as the problems that need to be considered and overcome.	Using games in introductory courses: tips from the trenches	NA	2009
Briana B. Morrison:Jon A. Preston	This paper considers how gaming has been infused into the computing curriculum of institutions in the United States. To increase motivation of students and improve retention, many programs have begun using gaming in their introductory courses, as upper level electives, or as separate degree programs. The authors review the current use of gaming within curricula and analyze the content of game development degree programs. Finally, the authors describe plans at their institution to incorporate gaming throughout the computing curriculum and present initial results.	Engagement: gaming throughout the curriculum	NA:NA	2009
Monica McGill	Game development programs are being added to computer science departments as either a track, minor, or major in post-secondary institutions across the United States. These programs are being developed with little published quantitative or qualitative research on what such programs should entail. The quantitative research in this pilot study defines qualifications sought when hiring game developers for positions in industry. Using cross-sectional data, qualifications from job advertisements were coded, categorized, and then subcategorized and weighted totals were calculated based on skills being either required or desired. Weighted totals in each subcategory were compared and ranked. The top 10 qualifications are provided, along with a breakdown of rankings of all subcategories within each category. Subcategories of Languages and Tools/Environments are also discussed briefly to highlight key qualifications in each.	Weighted game developer qualifications for consideration in curriculum development	NA	2009
Richard A. Brown	NA	Session details: Departmental issues	NA	2009
Donald B. Sanderson	This paper will describe the changes made to an existing student outcomes assessment system to more closely conform to the new assessment guidelines of the Computer Accreditation Commission of ABET. The processes, results and effectiveness of the techniques will be examined.	Revising an assessment plan to conform to the new ABET-CAC guidelines	NA	2009
Charles P. Riedesel:Eric D. Manley:Susan Poser:Jitender S. Deogun	For decades, US universities and colleges have had policies pertaining to the conduct of their students at the institutional level. These policies are referred to as Academic Integrity Policies or Codes of Conduct. The Code of Ethics, instituted by Association of Computing Machinery (ACM) has been the standard for the computing sciences profession for over 15 years. However, the traditional institution-wide academic integrity policies have not adapted to the complexities that arose from rapid progress in information technology (IT) and thus either fail to address or are in conflict with the nature of problems in computer science education. In this paper, we propose a model for development and implementation of an academic ethics policy (ethics is a broader concept that includes integrity) that addresses the challenges imposed by information technology vis-√°-vis the best modern teaching practices in computer sciences and engineering. Implementing policies that are more in line with the methods of industry and compatible with newer educational pedagogies should make the whole educational environment more engaging to students.	A model academic ethics and integrity policy for computer science departments	NA:NA:NA:NA	2009
Mujtaba Talebi:Thomas Way	Computer science educators are uniquely positioned to promote greater awareness of Green Computing, using the academic setting to encourage environmentally conscious use of technology. This paper reports on practical techniques that can engage faculty and students, enabling Green Computing to be integrated into the classroom and research laboratory. Analysis and empirical evaluation of each reported technique is given, comparing the efficacy of each in terms of energy, environmental and financial cost savings. These results are provided as technological and economic evidence for the benefits of "Going Green," and to promote education in Green Computing in the classroom, department and research lab.	Methods, metrics and motivation for a green computer science program	NA:NA	2009
Diana Cukierman	NA	Session details: Reflecting on programming	NA	2009
Michael R. Wick	This paper describes an entry-level programming assignment that can be used to help students learn the value of diversity through computer programming. The assignment was given as part of a preliminary experiment to establish the impact of a student programming assignment on student attitudes toward cultural diversity. The results provide suggestive evidence that students learn to value diversity via the given programming assignment.	Using programming to help students understand the value of diversity	NA	2009
Naveed Arshad	Many studies have shown that students often face difficulty in applying programming concepts to design a program that solves a given task. To impart better problem solving skills a number of pedagogical approaches have been presented in the literature. However, most of these approaches provide a general strategy of problem solving. But in reality problem solving is a skill that is developed with experience over a period of time. In this paper, we present a pedagogical approach to teach problem solving using think-alouds. In a think-aloud problem solving approach students learn the skill of problem solving by closely observing an 'experienced programmer. We used this approach in a CS2 class and our evaluation results show that think-aloud problem solving is an extremely effective pedagogical technique, particularly for female students.	Teaching programming and problem solving to CS2 students using think-alouds	NA	2009
Stuart A. Hansen	Retaining students in Computer Science may be improved by engaging them in the learning process while preventing them from becoming overly frustrated. While engaging students during lecture is certainly important, most students spend a significant amount of time working on programming projects outside of class. Gaining a deep understanding of student engagement in programming is difficult, since the instructor is seldom present during the process. This paper presents the results of student surveys administered after each programming project for multiple sections of two courses: CS2, and Data Structures and Algorithms. We analyze the data in terms of engagement, frustration and niftiness.	Analyzing programming projects	NA	2009
Sriram Mohan	NA	Session details: Models for cross-course fertilization of ideas	NA	2009
Susan L. Reiser:Rebecca F. Bruce	In this paper, we describe our CS0 course, 3D Modeling and Fabrication, that includes a service-learning CNC milling project as a high tech hook to interest students, both our own and middle school students, in computer science and engineering. Among the CS0 learning outcomes achieved through the design and fabrication projects are computer literacy, writing-across-the curriculum, and development of problem-solving skills such as quantitative reasoning and critical thinking. This course is situated in the Integrated Liberal Studies program at University of North Carolina at Asheville. It can be offered as part of any general education program to fulfill a computer literacy or writing-across-the-curriculum requirement. Taking an idea and nurturing it from a concept to a model, to a series of working drawings, and then to a three-dimensional prototype is exciting and fun, and leaves a tangible reminder of the creativity inherent in computer science.	Fabrication: a tangible link between computer science and creativity	NA:NA	2009
Robin Y. Flatland:James R. Matthews	In this paper we show how an engaging problem can be used in both a discrete mathematics course and a programming course as a way to expose students to multiple methods of inquiry and to strengthen the links between the two courses. Since students typically take Discrete Mathematics and a programming course simultaneously, this is an opportunity for them to analyze a problem from multiple perspectives during a single semester. We describe how we have accomplished this using a relatively new problem that is easily stated and has a surprising solution that defies intuition. In the programming course, students experienced a design/empirical approach to the problem by implementing simulations of various solutions and collecting experimental results. By adjusting the emphasis of the programming assignment, we show that it can fit naturally into a range of programming courses, i.e. courses on introductory programming, data structures, and object-oriented techniques. In the Discrete Mathematics course, students analyzed solutions using tools from counting, probability, and calculus. We observed that by linking the two courses using a common problem, our students were more cognizant of inquiry methods and student engagement increased.	Using modes of inquiry and engaging problems to link computer science and mathematics	NA:NA	2009
Christopher Brown:Robert Pastel	We developed combined graduate and undergraduate courses in which undergraduates created a prototype based on user-centered design, and graduate students worked with them to evaluate those prototypes based on common usability principles. It provided undergraduate students experience practicing user centered design, while providing graduate students experience with usability evaluation. It also provided graduate students the opportunity to introduce current HCI research areas to students who may be considering graduate school. The course successfully engaged both graduate and undergraduate students while providing a beneficial experience through their interactions.	Combining distinct graduate and undergraduate HCI courses: an experiential and interactive approach	NA:NA	2009
Owen Astrachan	NA	Session details: Special session	NA	2009
Owen Astrachan:Henry Walker:Chris Stephenson:Lien Diaz:Jan Cuny	The Advanced Placement (AP) Computer Science program is intended to reflect enough of a common core of a first semester or year of university-level computer science so that placement or credit can be awarded for work done before college. The SIGCSE symposia have a long history of providing forums for discussing the evolution of the AP program from its inception [1] to the transition from Pascal to C++ [3] to the transition from C++ to Java [2,5,7,8,9]. Panels related to how credit and placement are awarded have also been part of the SIGCSE conferences [4,6]. This special session is a report of the ongoing process of developing new and possible wide-ranging changes to the AP program.	Advanced placement computer science: the future of tracking the first year of instruction	NA:NA:NA:NA:NA	2009
Lecia Barker	NA	Session details: Panel session	NA	2009
Lecia J. Barker:Elizabeth Adams:Amardeep Kahlon:Andrea Lawrence:Allison Young	NA	Trends and discoveries of the computing educators oral history project	NA:NA:NA:NA:NA	2009
Inna Pivkina	NA	Session details: Special session	NA	2009
Inna Pivkina:Desh Ranjan:Jerry Lodder	NA	Historical sources as a teaching tool	NA:NA:NA	2009
Bengt Aspvall	NA	Session details: Tools for engagement	NA	2009
Susan H. Rodger:Eric Wiebe:Kyung Min Lee:Chris Morgan:Kareem Omar:Jonathan Su	We describe the results from a two-year study with fourteen universities on presenting formal languages in a more visual, interactive and applied manner using JFLAP. In our results the majority of students felt that having access to JFLAP made learning course concepts easier, made them feel more engaged in the course and made the course more enjoyable. We also describe changes and additions to JFLAP we have made based on feedback from users. These changes include new algorithms such as a CYK parser and a user-controlled parser, and new resources that include a JFLAP online tutorial, a wiki and a listserv.	Increasing engagement in automata theory with JFLAP	NA:NA:NA:NA:NA:NA	2009
Anne Philpott:Tony Clear:Jacqueline Whalley	This paper extends the work of the BRACElet project [17] by assessing the program comprehension skills of intermediate level students. Student performance on a pathfinder algorithm simulation task is reviewed to assess the students' comprehension levels, as categorized according to the SOLO educational taxonomy. The paper describes the nature of student responses, and the variety of representations provided, illustrating the role of discovery in effective student learning.	Understanding student performance on an algorithm simulation task: implications for guided learning	NA:NA:NA	2009
Andrew Brownfield:Cindy Norris	The small instruction set size of the LC-3 as well as its similarities to more powerful instruction sets make it an ideal hypothetical machine for introductory computer science and computer engineering students. Several tools are available for working with this hypothetical machine including simulators, and assemblers for various platforms. We have created an additional tool, LC3uArch, that is useful for debugging LC-3 programs like the existing simulators, but unlike existing simulators also helps student to develop an understanding of the LC-3 microarchitecture. The results of a student survey on the use of LC3uArch indicate our students find LC3uArch a valuable learning tool.	LC3uArch: a graphical simulator of the LC-3 microarchitecture	NA:NA	2009
Richard M. Salter:John L. Donaldson	Students of Computer Organization should be able to "learn by doing" at all levels of computer design. Digital logic circuitry is frequently taught using simulation software, however such platforms are often limited to exposing only a narrow range of design levels. This paper describes how, in the new multilevel simulation system DLSim 3, we are able to incorporate abstraction and extensibility to present the many levels of complex circuit designs in a single environment: from low level combinational and sequential circuits, through models of complete CPUs. Among other features, DLSim 3 is able to accomplish this by providing three different types of circuit abstraction: cards, chips, and plug-ins. Using DLSim 3, students recognize the uniformity of system structure, as well as the principles of abstraction that link the various levels of design.	Abstraction and extensibility in digital logic simulation software	NA:NA	2009
Lucia Dale	NA	Session details: Robots	NA	2009
Glenn V. Nickens:Ethan J. Tira-Thompson:Thorna Humphries:David S. Touretzky	Hand-eye systems combine computer vision with kinematics and dynamics calculations to achieve dexterous manipulation. These versatile platforms for teaching robotics principles have not been widely used in undergraduate laboratories due to cost. We describe a new hand-eye system constructed from Robotis Dynamixel servos, a USB interface module, and a webcam, that can be built for under $500 and run by a PC using the Tekkotsu open source software framework. A suggested curriculum is outlined.	An inexpensive hand-eye system for undergraduate robotics instruction	NA:NA:NA:NA	2009
Tom Lauwers:Illah Nourbakhsh:Emily Hamner	We present CSbots, an ongoing program to use robots as educational tools in the Introduction to Computer Science CS1) course. We aim to use robotics to improve learning and retention by altering course work so that it is more relevant to students. In our development process we use an iterative cycle composed of design, pilot, and evaluation steps. We have completed the first of these cycles, the alpha cycle, and describe the robot hardware, software, and curriculum development processes as well as key evaluation results from pilots conducted at two community colleges in Fall 2007. We discuss the implications of these results and our experiences on the in-progress beta design cycle and planned pilots.	CSbots: design and deployment of a robot designed for the CS1 classroom	NA:NA:NA	2009
Jay Summet:Deepak Kumar:Keith O'Hara:Daniel Walker:Lijun Ni:Doug Blank:Tucker Balch	We have developed a CS1 curriculum that uses a robotics context to teach introductory programming [1]. Core to our approach is that each student has their own personal robot. Our robot and software have been specifically developed to support the needs of a CS1 curriculum. We frame traditional problems (robot control) in terms that are personal, relevant, and fun. Initial trial classes have shown that our approach is successful and adaptable.	Personalizing CS1 with robots	NA:NA:NA:NA:NA:NA:NA	2009
William Isaac McWhorter:Brian C. O'Connor	The purpose of the research study described in this paper was to investigate the effectiveness of using LEGO Mindstorms robotic activities to influence student motivation in an introductory university computer programming course. Various aspects relating to student motivation were measured using the Motivated Strategies for Learning Questionnaire. Tests revealed no statistically significant differences between groups in relation to intrinsic goal orientation, task value, control of learning beliefs, self-efficacy, and test anxiety at the alpha = .05 level. The experiment did detect a statistically significant difference between groups in relation to extrinsic goal orientation. The LEGO group, however, showed a larger decrease in levels of extrinsic goal orientation, suggesting they were less motivated in learning the material for rewards such as grades. While this is not necessarily a bad thing, ideally a decline in extrinsic goal orientation would be accompanied by a statistically significant increase in intrinsic goal orientation suggesting students were instead motivated because they were interested in the content of the material. This was not the case in this study. Despite the lack of positive quantitative results, responses to student follow-up questions suggest that at least some of the students enjoyed the LEGO Mindstorms activities. A discussion of possible factors influencing these results is provided.	Do LEGO¬Æ Mindstorms¬Æ motivate students in CS1?	NA:NA	2009
Richard Ord	NA	Session details: Systems	NA	2009
Shimon Schocken:Noam Nisan:Michal Armoni	We describe a synthesis course that provides a hands-on treatment of many hardware and software topics learned in computer science (CS) programs. Using a modular series of twelve projects, we walk the students through the gradual construction of a simple hardware platform and a modern software hierarchy, yielding a basic yet powerful computer system. In the process of building the computer, the students gain a first-hand understanding of how hardware and software systems are designed and how they work together, as one enterprise. The course web site contains all the materials necessary to run this course in open source, and students and instructors are welcome to use and extend them freely. The course projects are modular and self-contained, and any subset of them can be implemented in any order and in any programming language. Therefore, they comprise a flexible library of exercises that can be used in many applied CS courses. This paper gives a description of the approach and the course, juxtaposed against general educational principles underlying meaningful learning.	A synthesis course in hardware architecture, compilers, and software engineering	NA:NA:NA	2009
Michael D. Black	This paper describes a semester project where students design an operating system from the ground-up, capable of booting from a floppy disk on an actual machine. Unlike previous projects of this kind, this project was designed for students with only one semester of programming experience and no prior exposure to data structures, assembly language, or computer organization. Students nevertheless wrote a full system consisting of system calls, program execution, a file system, a command-line shell, and support for multiprocessing. The project was assigned to a class and successfully completed by nearly every student.	Build an operating system from scratch: a project for an introductory operating systems course	NA	2009
Ben Pfaff:Anthony Romano:Godmar Back	Pintos is an instructional operating system, complete with documentation and ready-made, modular projects that introduce students to the principles of multi-programming, scheduling, virtual memory, and filesystems. By allowing students to run their work product on actual hardware, while simultaneously benefiting from debugging and dynamic analysis tools provided in simulated and emulated environments, Pintos increases student engagement. Unlike tailored versions of commercial or open source OS such as Linux, Pintos is designed from the ground up from an educational perspective. It has been used by multiple institutions for a number of years and is available for wider use.	The pintos instructional operating system kernel	NA:NA:NA	2009
Geoffrey M. Draper:Robert R. Kessler:Richard F. Riesenfeld	Many courses on the history of computing are designed for a general student audience, and as such, include fewer technical details than one might find in a typical CS course. While this approach is appropriate in some contexts, it risks losing the interest of the students who could perhaps benefit most from the subject-namely, future computer scientists. This paper describes a technically-oriented History of Computing course which we taught at the University of Utah in 2008. Like other History of Computing courses, ours included a significant amount of writing and discussion. However, inasmuch as our course was created specifically for CS students, we also incorporated several "hands-on" programming exercises and demonstrations, giving students actual experience with the computing environments of the past. Students and faculty alike have responded enthusiastically to this dual-faceted approach.	A history of computing course with a technical focus	NA:NA:NA	2009
Monica Brockmeyer	NA	Session details: Interdisciplinary multimedia	NA	2009
Mark Christensen van Langeveld:Robert Kessler	Many Universities and Colleges are building interdisciplinary programs between engineering and fine arts that focus on games, special effects, animation and other areas that require interdisciplinary efforts. This is in response to the needs of the entertainment industries. The video game and 3D animation businesses fundamentally involve computer scientists and artists working closely together. The Entertainment Arts and Engineering (EAE) program (founded in 2007) is an undergraduate interdisciplinary program at the University of Utah (UofU). Students pursuing an animation or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. Two courses taught at the UofU with curriculum in the middle of the continuum between the two departments are the courses: Digital Character Production and Machinima. These courses provide an extraordinary applied learning experience for students to combine learning concepts that are not commonly taught together. The curriculums are designed to teach students to breakdown extremely complex problems, requiring understanding from both disciplines, into manageable segments that allow easy understanding of diverse concepts from computer graphics principles to sculptural ideology and from graphic algorithms to film/storytelling. It is a process that provides a direct view of the correlations of the critical concepts from each of the disciplines. This paper presents our insights from teaching and reviewing these two classes.	Two in the middle: digital character production and machinima courses	NA:NA	2009
Daniela Stan Raicu:Jacob David Furst	This paper presents a successful model for undergraduate research where student participants work on interdisciplinary research projects; in our case, at the frontier between computer science and medicine. Students are part of research teams comprised of other undergraduates, graduate students, faculty and medical experts, participate in professional development and training activities within the larger group, and disseminate their results at the host institutions or conferences specific to the interdisciplinary focus. The model outcomes at the end of the first three years (2005-2007) indicate that the interdisciplinary model successfully 1) expanded the student participation in research by recruiting students who might not otherwise have research opportunities, 2) attracted a diversified pool of talented students into science, 3) promoted interdisciplinary undergraduate studies in computer science and medical informatics as well as in future graduate studies; and 4) trained students in all phases of research, including writing and presenting research papers at conferences.	Enhancing undergraduate education: a REU model for interdisciplinary research	NA:NA	2009
Jennifer Burg:Jason Romney	This paper reports on an NSF-grant supported summer workshop that brought music and computer science students together for eight weeks to explore creative projects in digital sound production. The dynamics of the students' collaborations were observed as they crafted experimental projects weaving together music, theatre production, sampled digital audio, and MIDI. Moving among various levels of abstraction, the students found practical and artistic motivations to learn the science of digital sound. The projects they produced suggest ways to revitalize computer science courses by linking science, art, and practice through digital sound, a subject naturally interesting to students.	Linking computer science, art, and practice through digital sound	NA:NA	2009
Jesse M. Heines:Gena R. Greher:Sarah Kuhn	This paper describes how a graphical user interface (GUI) programming course offered by the Dept. of Computer Science (CS) was paired with a general teaching methods course offered by the Dept. of Music in an attempt to revitalize undergraduate CS education and to enrich the experiences of both sets of students. The paper provides details on the joint project done in these classes and the evaluation that assessed its effect on the curriculum, students, and professors.	Music performamatics: interdisciplinary interaction	NA:NA:NA	2009
Nick Parlante	NA	Session details: Special session	NA	2009
Nick Parlante:Thomas P. Murtagh:Mehran Sahami:Owen Astrachan:David Reed:Christopher A. Stone:Brent Heeringa:Karen Reid	Assignments determine much of what students actually take away from a course. Sadly, creating successful assignments is difficult and error prone. With that in mind, the Nifty Assignments session is about promoting and sharing successful assignment ideas, and more importantly, making the assignment materials available for others to adopt.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2009
David Berque	NA	Session details: Special session	NA	2009
Dave A. Berque	NA	A tutorial on stroke-based interfaces: unistroke recognition algorithms appropriate for compelling projects in introductory courses	NA	2009
Lillian Cassel	NA	Session details: Special session	NA	2009
Gordon Davies:Lillian N. Cassel:Arthur Pyster:Michael Caspersen:Heikki Topi	This special session will proved information about the status of work related to Masters programs in Computing. Specifically, the session will describe work completed in the following areas: the categorization of masters programs in computing, the development of curriculum recommendations for masters programs in software engineering, the collaborative work with the Association for Information Systems on the Masters program in Information Systems	ACM education board and masters level programs	NA:NA:NA:NA:NA	2009
Daniel Cliburn	NA	Session details: Data- and code-space animation	NA	2009
Michael G. Boland:Curtis Clifton	Like a screenplay, a program is both a static artifact and instructions for a dynamic performance. This duality can keep laypeople from appreciating the complexity of software systems and can be a stumbling block for novice programmers. PyLighter lets laypeople and novice programmers perceive the relationship between static Python code and its execution. PyLighter works with everything from simple console applications to arcade-style games, and because PyLighter is easy to adopt and use, instructors can integrate it into any Python-based introductory course without changing the rest of their syllabus.	Introducing PyLighter: dynamic code highlighter	NA:NA	2009
David Scot Taylor:Andrei F. Lurie:Cay S. Horstmenn:Menko B. Johnson:Sean K. Sharma:Edward C. Yin	We investigate the effectiveness of a predictive interaction animation tool for understanding graph algorithms. We compare performance improvement of students after they have used two different animation tools for the given algorithms, when one of the tools forces a more active, predictive approach while the other is a more traditional animation. Results show significant improvement in performance after students use the predictive tool.	Predictive vs. passive animation learning tools	NA:NA:NA:NA:NA:NA	2009
Amruth N. Kumar	We incorporated animation of the data space into a web-based tutor for solving problems on C++ pointers and made the tutor available to students. In evaluation of the tutor, we found that data space animation indeed helps students learn the semantics of pointers. But, it is no more effective at this than text explanation of the step-by-step execution of the program.	Data space animation for learning the semantics of C++ pointers	NA	2009
James Early	NA	Session details: Summer outreach programs	NA	2009
Winnie W.Y. Lau:Grace Ngai:Stephen C.F. Chan:Joey C.Y. Cheung	As enrollments in engineering and computer science programs around the world have fallen in recent years, those who wish to see this trend reversed take heart from findings that children are more likely to develop an abiding interest in technology if they are exposed to it at an early age [3, 9]. In line with this research, we now see more summer camps and workshops being offered to middle school students with the objective of teaching programming and computer technology [1, 6, 8, 12]. To offer students a stimulating and interesting environment while teaching computing subjects, the learning tools in these camps usually revolve around robots and graphical programming of animations or games. These tools tend to mainly attract youngsters who like robotics or game design. However, we believe that we can improve the diversity of the student pool by introducing other topics. In this paper, we describe our experience in designing and organizing a programming course that focuses on wearable computing, fashion and design for middle school students. We will show that 1) wearable computing is interesting and inspiring to the students, 2) wearable computing motivates both boys and girls to learn technology and computing, which implies that it may be able to increase the potential computer science population, 3) wearable computing can provide a space for students to exercise their creativity while at the same time, teaching them about technology and programming.	Learning programming through fashion and design: a pilot summer course in wearable computing for middle school students	NA:NA:NA:NA	2009
Inna Pivkina:Enrico Pontelli:Rachel Jensen:Jessica Haebe	This paper describes the Young Women in Computing program, an ongoing outreach program in Computer Science at New Mexico State University (NMSU). Features of the program include summer camps and academic year activities, computing in context, peer mentoring, and role models. The main goal is to increase interest in computing among female high school students. The paper discusses lessons learned from three years of experience with the program.	Young women in computing: lessons learned from an educational & outreach program	NA:NA:NA:NA	2009
Anna C. Cavender:Richard E. Ladner:Robert I. Roth	Deaf and hard of hearing students are an underrepresented group in computing and face extra challenges in university-level computing courses. This paper describes a 9-week Summer Academy for Advancing Deaf and Hard of Hearing in Computing that jump-starts the academic careers of deaf and hard of hearing students and strengthens their interest in computing. Students take introductory computing and animation in a fun, supportive, accessible environment. We report on some of the problems students face and lessons we have learned about helping them overcome those problems. Through the academy, they meet other successful deaf and hard of hearing technology professionals, tour top computing companies, and display their own work to the local deaf and hard of hearing community. Students gain leadership, independent learning skills, and complete the program better prepared for a college major in computing.	The summer academy for advancing deaf and hard of hearing in computing	NA:NA:NA	2009
Scott Sigman	NA	Session details: Software design	NA	2009
Alex Baker:Andr√© van der Hoek	In this paper, we report on our experience in designing and deliv-ering two new software design courses in the Informatics major at UC Irvine. When the major was created in 2004, it explicitly con-tained slots for two software design courses to be created from the ground up. The authors led this effort, focusing one course on the topic of system design and one course on the topic of implementation design. We discuss the philosophy and pedagogy behind the courses, present key class activities, and reflect on having offered each course twice over the past two years.	An experience report on the design and delivery of two new software design courses	NA:NA	2009
Dana P. Leonard:Jason O. Hallstrom:Murali Sitaraman	We describe an approach to teaching formal interface specifications using aspects of the Collaborative Reasoning Paradigm. The module requires students to construct test cases independently and cooperatively based on their understanding of a given set of method specifications. Students are supported by software-based reasoning assistants that guide them through their exercises and provide realtime feedback as they work --- both for the students and the instructor. We describe the design of the course module, the supporting reasoning assistant, and representative reasoning exercises. We conclude with a discussion of evaluation results from a recent pilot study conducted at Clemson University.	Injecting rapid feedback and collaborative reasoning in teaching specifications	NA:NA:NA	2009
Andrew Meneely:Laurie Williams	Working remotely is becoming the norm for both professionals and students alike. Software development has become a global industry due to outsourcing, teleworking, flex time, and companies' desire to use the best and/or most economical talent regardless of where that talent is located. Professionals are not alone because students usually work from home despite having sufficient resources on campus. In this paper we share our experiences from using Jazz, a synchronous, collaborative development platform, with our inevitably distributed software engineering students. Eleven students optionally used the tool while working on a five-week team project. Students primarily used the version control, chat, and work item features in Jazz. We collected their reactions in retrospective essays and found that all Jazz students supported using Jazz in future semesters of the course. We also examined grade differences and found that the students who used Jazz were more successful than those who did not use Jazz.	On preparing students for distributed software development with a synchronous, collaborative development platform	NA:NA	2009
Ernst Grundke	NA	Session details: Curriculum innovation	NA	2009
Robert Kessler:Mark van Langeveld:Roger Altizer	The Entertainment Arts and Engineering (EAE) program is a unique, new undergraduate interdisciplinary program at the University of Utah bringing together the School of Computing and the Division of Film Studies in an effort to teach both video game development and computer animation. Students pursuing a film or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. The key characteristic of the program is the shared classes where students from both Computer Science and Fine Arts study together and cooperate on game and animation projects. The program is highlighted by a yearlong capstone course in which the students work together to make a video game or animated short from scratch. This paper chronicles our efforts starting the EAE program and demonstrates how to create an interdisciplinary program that not only attracts students to CS, but also equips them for careers or research in video games and animation.	Entertainment arts and engineering(or how to fast track a new interdisciplinary program)	NA:NA:NA	2009
Chi-Cheng Lin:Mingrui Zhang:Barbara Beck:Gayle Olsen	To engage a broader audience in computer science, we have developed a set of curriculum units embedded with computer science concepts for K-12 science education. We chose bioinformatics as a vehicle to deliver these units. Our curriculum development cycle began with the identification of a set of computer science concepts which are potentially relevant to life sciences. Problems in life sciences as well as bioinformatics tools to be used for solving these problems were carefully examined for the delivery of identified computer concepts. They were later presented to groups of regional K-12 science teachers in our summer workshop on bioinformatics. With their help, we adapted and polished these curriculum units to meet Minnesota state standards for K-12 science education. This paper describes our approach in developing the curriculum units.	Embedding computer science concepts in K-12 science curricula	NA:NA:NA:NA	2009
Lijun Ni	Computer Science (CS) education researchers hope their research has real impact on teaching practices. Developers of innovative curricula and tools for CS education want teachers to adopt their new approaches. What convinces a CS teacher to change and adopt something new--or not? This paper explores factors that influence CS teachers' adoption and change. We studied our workshop participants to determine factors influencing their decision on whether to adopt a new CS curriculum. The results from our study indicate that multiple factors, some surprising, influence CS teachers' adoption. Our findings suggest that teacher excitement in a new approach drives adoption, while more organizational or social issues inhibit adoption.	What makes CS teachers change?: factors influencing CS teachers' adoption of curriculum innovations	NA	2009
Joan Peckham	NA	Session details: Panel session	NA	2009
Owen Astrachan:Susanne Hambrusch:Joan Peckham:Amber Settle	NA	The present and future of computational thinking	NA:NA:NA:NA	2009
Samuel Rebelsky	NA	Session details: Whither scheme? 21st century approaches to scheme in CS1	NA	2009
Richard Brown:Janet Davis:Samuel A. Rebelsky:Brian Harvey	NA	Whither scheme?: 21st century approaches to scheme in CS1	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Gary Lewandowski	NA	Session details: Keynote address	NA	2010
Sally Fincher	In this talk, I'll explore some of the ways educators share details of their practice and of how they find out "what works" from others. This exploration will include examining some barriers and inhibitors to successful exchange and some thoughts on the importance of representations of practice; that is how we represent our teaching to ourselves, to each other and for posterity. As part of this exploration, I will present a model of sharing I have devised with Josh Tenenberg, called the Disciplinary Commons: further details of this can be seen at: http://www.disciplinarycommons.org.	Useful sharing	NA	2010
Deborah Dunn	NA	Session details: Compilers & languages	NA	2010
Ariel Ortiz	This paper discusses some useful insights for instructors who might want to consider using a web approach in courses involving language design and implementation. The basic idea is to have students build a language processor that actually runs on the web, instead of a processor that just runs on a command-line shell. The author documents the advantages and possible shortcomings of this approach, as well as his class experiences.	Building server-side web language processors	NA	2010
Katsuhiko Gondow:Naoki Fukuyasu:Yoshitaka Arahori	This paper proposes a novel visualization tool for educational compilers, called MieruCompiler. Educational compilers that generate native assembly code like i386 have many practical and pedagogical advantages, but they also have a disadvantage that the undergraduate students need to acquire a wide range of knowledge on native machine instructions, assembly directives, application binary interface (ABI), so on. To reduce this learning cost, MieruCompiler provides various visualizations as a rich internet application (RIA) including: (1) highlighting all related slices (called "horizontal slicing" after [13], but not implemented in [13]) among the source code, abstract syntax tree, assembly code, symbol table, stack layout and compiler code, when the user hovers the mouse pointer over a piece of them, (2) displaying tooltips for machine instructions, assembly directives, etc., and (3) visualizing stack layouts which are very likely to be implicit. As a preliminary evaluation, MieruCompiler was used in two universities, which produced promising results.	MieruCompiler: integrated visualization tool with "horizontal slicing" for educational compilers	NA:NA:NA	2010
Tyler Sondag:Kian L. Pokorny:Hridesh Rajan	Compiler and programming language implementation courses are integral parts of many computer science curricula. However, the range of topics necessary to teach in such a course are difficult for students to understand and time consuming to cover. In particular, code generation is a confusing topic for students unfamiliar with low level target languages. We present Frances, a tool for helping students understand code generation and low level languages. The key idea is to graphically illustrate the relationships between high level language constructs and low level (assembly) language code. By illustrating these relationships, we take advantage of the students existing understanding of some high level language. We have used Frances in a compiler design course and received highly positive feedback. Students conveyed to us that Frances significantly helped them to understand the concepts necessary to implement code generation in a compiler project.	Frances: a tool for understanding code generation	NA:NA:NA	2010
Barbara Ericson	NA	Session details: Diversity	NA	2010
Joseph A. Cottam:Samantha S. Foley:Suzanne Menzel	Outreach programs communicating the importance and diversity of computing to K-12 students are essential to improving attitudes toward computing. However, the effectiveness of outreach programs, and roadshows in particular, has only recently come under study. Just Be is an outreach roadshow program at Indiana University. It directly addresses stereotypical attitudes towards computing. This paper demonstrates, through statistical analysis of surveys given to college students who participated in a Just Be presentation prepared for high school students, that the Just Be roadshow effectively shifts attitudes for the better.	Do roadshows work?: examining the effectiveness of just be	NA:NA:NA	2010
Joanna Goode	In this paper, a K-16 computer science reform effort is described as an effort that depends on curriculum development, professional development, and collaborative policy strategies.	Connecting k-16 curriculum & policy: making computer science engaging, accessible, and hospitable for underrepresented students	NA	2010
W. Richards Adrion:Renee Fall:Manuel Matos:Alan R. Peterfreund	The Commonwealth Alliance for Information Technology Education (CAITE) is one of 11 National Science Foundation Broadening Participation in Computing (BPC) alliances aimed at increasing the participation and success of underrepresented groups in information technology (IT). From the beginning, CAITE partners worked to integrate a detailed and comprehensive evaluation strategy to provide a quantitative assessment of the effectiveness of CAITE action plans on its main objectives. We collected large institutional data sets for the seven academic years prior to the project inception from each of the nine original partners, the six additional partners and several other institutions. These data serve as a baseline for assessing the efficacy of CAITE interventions and make it possible to examine trends in student participation and success across each CAITE partner and the alliance as whole. Importantly, these data provide valuable insight into each of the institutions that has allowed CAITE to tailor its inventions to reflect local conditions at each institution and within each region. From the evaluation data, it became clear that we needed to adjust action plans to better meet CAITE objectives. We describe specific aspects that warranted data-driven adjustments, and highlight lessons learned from these revelations.	Integrating evaluation into program development: benefits of baselining a NSF-BPC alliance	NA:NA:NA:NA	2010
Daniel Kaplan	NA	Session details: Computation & the sciences	NA	2010
Ali Erkan:Jason Hamilton:Tom Pfaff:Michael Rogers	The most important problems of our century require collaborative work. Therefore, as educators, we must be producing individuals who understand how to communicate and work with professionals from other fields. In this paper, we outline our ongoing efforts in addressing this need, without compromising discipline specific qualities or goals. Specifically, we present a number of programming projects that fulfill curricular requirements as well as making students aware of the Science Technology Engineering and Math (STEM) context of their work.	Use of satellite imagery in multidisciplinary projects	NA:NA:NA:NA	2010
Eric Andrew Freudenthal:Mary K. Roy:Alexandria Nicole Ogrey:Tanja Magoc:Alan Siegel	Media-Propelled Computational Thinking (MPCT - pronounced impact) is a course designed to introduce programming in the context of engaging problems in media computation, math, and physics. Programming concepts are introduced as incremental steps needed to solve pragmatic problems students already understand. The problems, graphical API, and hands-on program features are intended to expose fundamental concepts in mathematics and quantitative science. MPCT is offered in an entering students program for freshmen who plan to specialize in a variety of STEM (science, technology, engineering and math) and non-STEM subjects. The curriculum is intended to strengthen student intuition and interest in mathematical modeling and programming by engaging students in the direct manipulation of simple mathematical systems that model and display familiar physical phenomena. MPCT uses programs as concrete and manipulatable examples of fundamental concepts to engage a diverse range of students including women and underrepresented minorities. Variants of MPCT are being developed for high schools, and as a means to introduce computational science to upper division undergraduates studying non-computational STEM disciplines. This paper provides an overview of MPCT and representative problem studies including models of ballistics and resonant systems. The evaluation plan is described and very preliminary results are presented.	MPCT: media propelled computational thinking	NA:NA:NA:NA:NA	2010
Sheikh Iqbal Ahamed:Dennis Brylow:Rong Ge:Praveen Madiraju:Stephen J. Merrill:Craig A. Struble:James P. Early	This paper describes "Computational Thinking for the Sciences", a 3-day summer workshop for high school science and mathematics teachers. Our workshop emphasizes the deep connections between the natural sciences, mathematics and computer science through activities and simulation development appropriate for scientific explorations. Teachers were exposed to simulation development in VPython, a visual extension to the popular Python programming language. By broadening exposure of computational thinking to the natural sciences and developing activities specifically for science domains, we hope to attract new students into computer science and better prepare natural science students to employ the computational tools they will utilize in the future.	Computational thinking for the sciences: a three day workshop for high school science teachers	NA:NA:NA:NA:NA:NA:NA	2010
Yu Cai	NA	Session details: Curriculum design	NA	2010
Mehran Sahami:Alex Aiken:Julie Zelenski	While the discipline of computing has evolved significantly in the past 30 years, Computer Science curricula have not as readily adapted to these changes. In response, we have recently completely redesigned the undergraduate CS curriculum at Stanford University, both modernizing the program as well as highlighting new directions in the field and its multi-disciplinary nature. As we explain in this paper, our restructured major features a streamlined core of foundation courses followed by a depth concentration in a track area as well as additional elective courses. Since its deployment this past year, the new program has proven to be very attractive to students, contributing to an increase of over 40% in the number of CS major declarations. We analyze feedback we received on the program from students, as well as commentary from industrial affiliates and other universities, providing further evidence of the promise this new curriculum holds.	Expanding the frontiers of computer science: designing a curriculum to reflect a diverse field	NA:NA:NA	2010
Mark D. LeBlanc:Tom Armstrong:Michael B. Gousie	Computer science holds a unique position to craft multidisciplinary curricula for the new generation of faculty and students across the academy who increasingly rely on computing for their scholarship. We propose that computer science programs cease curricula models that begin with a two-course sequence that emulates the natural sciences and mathematics. We report on an aggressive strategy to work with faculty from across the disciplines of arts, humanities, and the social and life sciences to help design and deliver sets of multidisciplinary, applied, and "connected" pairs of introductory courses. Preliminary results at our small liberal arts college include an increase in the percentage of women enrolling in our connected courses, more students taking an additional course in computing, a faculty energized with sharing their research early on, and new interdisciplinary research opportunities for computer science faculty and students.	Connecting across campus	NA:NA:NA	2010
Christine Alvarado:Zachary Dodds	Historically, Harvey Mudd College (HMC) has had very little success attracting women to the study of computer science: women have chosen CS less than any other field of study. In 2006 HMC began three practices in order to increase the number of women studying and majoring in CS; these practices have now been in place for 3 years. With this paper we describe these practices and present a thorough evaluation of the quantitative and qualitative differences that have accompanied them. In sum, these efforts have rebalanced our department by significantly increasing women's participation in our computer science program.	Women in CS: an evaluation of three promising practices	NA:NA	2010
Reynold Bailey	NA	Session details: Panel	NA	2010
Reynold Bailey:Guy-Alain Amoussou:Tiffany Barnes:Hans-Peter Bischof:Thomas Naps	Projects funded by the National Science Foundation (NSF) Research Experiences for Undergraduates (REU) program aim to (a) enhance participation of students who otherwise might not have research opportunities, and (b) increase the number of students interested in graduate programs, thus expanding the pool of a well-trained scientific workforce. To provide meaningful experiences for these students, REU projects make use of a set of interesting, appropriate research problems that can be tackled in 8 to 10 weeks in summer. The panelists have all served as PIs or Co-PIs on NSF REU projects in computing. They will present their REU research problems, highlight challenges they encountered, and present their results. They will also discuss what they have done, or what can be done, to incorporate such research problems within the regular computing curriculum, for example, in capstone courses or senior projects. A significant amount of time will be set aside for audience participation and discussion.	Relevant real-world undergraduate research problems: lessons from the nsf-reu trenches	NA:NA:NA:NA:NA	2010
Valerie Barr	NA	Session details: Panel	NA	2010
Valerie Barr:Chun Wai Liew:Rich Salter	With the declining interest among incoming college students and the nationwide drop in computer science (CS) enrollments ([2, 1]), many CS departments would like to broaden participation in computing by reaching out to other departments on their campuses. One tactic is to encourage interdisciplinary work that has computing as a significant component. These efforts may result in more CS majors, increased enrollments in certain CS courses, and a student population that is better equipped to utilize computing within the contexts of their disciplines. This panel presents three approaches to building bridges to other departments and disciplines. Rich Salter, Oberlin College, will discuss the involvement of CS in the Oberlin Center for Computation and Modeling. Chun Wai Liew, Lafayette College, will discuss ways in which the CS department has built tools specifically to assist faculty in other departments, facilitating student exposure to and understanding of computation. Valerie Barr, Union College, will focus on the infusion of computation into course curricula outside CS, often coupling the use of existing tools with discussion of the underlying models and computational issues.	Building bridges to other departments: three strategies	NA:NA:NA	2010
Mark Guzdial	NA	Session details: Special session	NA	2010
Mark Guzdial:David Ranum:Brad Miller:Beth Simon:Barbara Ericson:Samuel A. Rebelsky:Janet Davis:Kumar Deepak:Doug Blank	The SIGCSE community has been exploring the role of multimedia to enhance computing education since the earliest algorithm visualization systems and studies [1]. Media Computation is a shift in focus [2]. Where algorithm visualization presents information to the student to facilitate their understanding, media computation is about having students manipulate media as the data for their programming, i.e., as the focus of the course activities. Students in media computation produce new images, sounds, and video. We aim to show that computer science is about more than numbers and strings. Computer science is also about creative expression. The original media computation work focused on using media to motivate non-computing majors [2]. The role of media in motivating student learning for computing education has broadened. Inventive teachers are using media computation for lots of different kinds of students, at different kinds of institutions, with a range of languages and toolkits. This special session is a mixture of "Five Minute Madness," science fair, and art gallery. Each participant will present how he or she is using media to motivate student learning, and some student work will be available for audience inspection	Variations on a theme: role of media in motivating computing education	NA:NA:NA:NA:NA:NA:NA:NA:NA	2010
Ping Chen	NA	Session details: Capstones & professional development	NA	2010
James Parrish, Jr.:Janet Bailey:Bradley Jensen	This paper describes the use of the Microsoft Imagine Cup Software Design Invitational (SDI) as a way to overcome some of the issues related to traditional or "closed" style capstone projects. Problematic issues with traditional capstone projects, as identified by literature, are discussed in conjunction with how the SDI addresses them. The main premise is participation in the Imagine Cup SDI can address the issues faculty wrestle with as they attempt to provide students with the best possible learning experience. Additionally, the authors present some of the advantages and challenges that they have noted from personal experiences using SDI as a part of a capstone course.	Using the imagine cup SDI as the foundation for computer science capstone projects	NA:NA:NA	2010
Josh Tenenberg	The Industry Fellows project involves a practicing college or university faculty member and practicing industry professional (the industry fellow) in the joint curriculum review, planning and delivery of a course related to the professional's domain of expertise. Working together exploits what each does best. The faculty member brings a broad, theory-based understanding to the discipline, while the industry fellow brings knowledge gained from professional practice. The faculty member retains full responsibility for all academic aspects of the course: planning and writing the syllabus, developing the assignments and examinations, and assigning grades. The professional joins the faculty member in the classroom on a regular basis as a co-lecturer, interacts directly with the students, and evaluates a sample of the student work on an advisory basis. This model was successfully run in winter 2009, with the project leader collaborating with an interaction designer from Google on teaching a Human Computer Interaction course at the University of Washington, Tacoma (UWT). This paper describes the Industry Fellows model, its instantiation at UWT, and an evaluation of this instantiation.	Industry fellows: bringing professional practice into the classroom	NA	2010
Joseph Mertz:Scott McElfresh	This paper describes a course at Carnegie Mellon University that engages students as consultants working with non-profit organizations. Different from most "service learning" courses, students in the Technology Consulting in the Community course focus on building capacity within organizations to sustain IT solutions without ongoing assistance. They do not merely provide IT support, nor do they focus on system development. Rather they focus on solving organizational problems using IT solutions. In doing so, they may develop a system, or adapt open source or commercial tools as appropriate to the situation. Computing systems do not exist in isolation, but in the context of people, organizations, and their policies. We want to train leaders in our community who can not only develop new technologies, but can solve organizational and societal problems. The course has as its learning goals to build inquiry, communication and leadership skills, in addition to engaging students in project development. At the same time it provides a valuable service in the community.	Teaching communication, leadership, and the social context of computing via a consulting course	NA:NA	2010
Stefan Andrei	NA	Session details: Upper-level courses	NA	2010
Mark Christensen van Langeveld:Robert Kessler	Many Universities are building interdisciplinary programs that overlap engineering and fine art departments that focus on games, special effects, animation and other forms of interdisciplinary efforts. With increasing demands for education linking the Engineering Sciences and Fine Arts, fueled by the competitive nature of the industries that recruit graduates, educators need to become more efficient and effective in their task of educating engineering and art majors in cross-disciplinary courses. CS3650 at the University of Utah is a digital character production course. This course is interdisciplinary and draws from several disciplines including computer science, graphics, anatomy, sculpture, art, and entertainment. It is a prerequisite for our machinima class, which immerses students into 3D game engines. Visualization tools are used in the course to help students learn to create better digital models. Presented in this paper is an experimental comparison between traditional visualization tools and digital visualization tools, which are less expensive, easier to distribute, arrange/procure and transport than the traditional tools. Traditional visualization tools include lifelike skeleton reproductions, wooden body mass structures, actual live human models, and anatomy drawing books. The digital visualization tools that are contrasted in this paper are: a layered anatomically correct, digital human model (skin, muscles, masses and some bones adapted from several sources) and a VisTrails version of a properly produced human figure (interactive animation). The digital tools are used to replace the traditional visualization tools used in the same educational curriculum, which teaches students to design, model and produce digital characters for games, machinima, and animation. The quantitative experiment demonstrates that digital visualization tools help to improve a student's understanding of the complex software packages used to produce characters, helps to improve specific techniques used to model 3D characters, and it helps to improve understanding of 3D form, more than the traditional tools within the context of this educational curriculum.	Digital visualization tools improve teaching 3D character modeling	NA:NA	2010
Frank McCown	Courses centered around the field of Web Information Retrieval (IR) and web search are slowly being introduced at the undergraduate level. In this paper, we show how the curriculum for a new undergraduate course on web search engines was developed, and we share our experiences in having students develop their own search engine components from scratch or modify and extend a popular open source search engine. We hope our experiences will be helpful to other Computer Science departments that are looking to develop an undergraduate Web IR course.	Teaching web information retrieval to undergraduates	NA	2010
Joel Coffman:Alfred C. Weaver	Website security is essential for successful e-commerce ventures, but the vital "how-to" components of security are often lacking in academic courses. This paper describes our attempt to instill an awareness of security concerns and techniques by having the students develop an Artist eXchange website, a social networking site that permits the posting and sharing of pictures, music, and text, including an end-user rating system. The six-homework set progresses through HTML, JavaScript, PHP, MySQL, file uploads, and security testing. An innovative feature is that each assignment is evaluated via automated testing, which guides the student toward detecting and correcting mistakes, especially with regard to common attack vectors.	Electronic commerce virtual laboratory	NA:NA	2010
Keith Shomper	NA	Session details: Concept inventories	NA	2010
Allison Elliott Tew:Mark Guzdial	Previous studies of student programming ability have raised questions about students' ability to problem solve, read and analyze code, and understand introductory computing concepts. However, it is unclear whether these results are the product of failures of student comprehension or our inability to accurately measure their performance. We propose a method for creating a language independent CS1 assessment instrument and present the results of our analysis used to define the common conceptual content that will serve as the framework for the exam. We conclude with a discussion of future work and our progress towards developing the assessment.	Developing a validated assessment of fundamental CS1 concepts	NA:NA	2010
Geoffrey L. Herman:Michael C. Loui:Craig Zilles	A concept inventory (CI) is a standardized assessment tool that evaluates how well a student's conceptual framework matches the accepted conceptual framework of a discipline. In this paper, we present our process in creating and evaluating the alpha version of a CI to assess student understanding of digital logic. We have checked the validity and reliability of the CI through an alpha administration, follow-up interviews with students, analysis of administration results, and expert feedback. So far the feedback on the digital logic concept inventory is positive and promising.	Creating the digital logic concept inventory	NA:NA:NA	2010
Lisa C. Kaczmarczyk:Elizabeth R. Petrick:J. Philip East:Geoffrey L. Herman	Computing educators are often baffled by the misconceptions that their CS1 students hold. We need to understand these misconceptions more clearly in order to help students form correct conceptions. This paper describes one stage in the development of a concept inventory for Computing Fundamentals: investigation of student misconceptions in a series of core CS1 topics previously identified as both important and difficult. Formal interviews with students revealed four distinct themes, each containing many interesting misconceptions. Three of those misconceptions are detailed in this paper: two misconceptions about memory models, and data assignment when primitives are declared. Individual misconceptions are related, but vary widely, thus providing excellent material to use in the development of the CI. In addition, CS1 instructors are provided immediate usable material for helping their students understand some difficult introductory concepts.	Identifying student misconceptions of programming	NA:NA:NA:NA	2010
Wayne Summers	NA	Session details: Spamming, hacking, & social networks: themes for educating the next generation	NA	2010
Tarsem S. Purewal, Jr.	This paper describes a course in online social networking that is flexible enough to meet the needs of most CS0 courses. Two sections of the course were taught at the College of Charleston during the Spring 2009 semester. We describe our experiences, we outline the topics and we offer suggestions on how the topics can meet the objectives of more traditional CS0 offerings.	Social networking: the new computer fluency?	NA	2010
Joel Sommers	Compelling experiences in introductory courses make a key difference in whether non-majors develop an interest in computer science, possibly even converting them into undergraduate majors or minors. In this paper we advocate integrated hands-on laboratory style activities to provide such pivotal experiences. In the lab activities we describe, students do not engage in programming, yet they learn to think computationally by engaging in computational activities. The course in which these labs are implemented is oriented around three aspects of the the internet's underside: its techno-scientific underpinnings, environmental and energy problems and promise brought on by its rapid growth, and security threats associated with its use. We describe the goals and content of the lab activities, as well as various challenges encountered through their implementation. We also discuss student responses and future directions.	Educating the next generation of spammers	NA	2010
Sergey Bratus:Anna Shubina:Michael E. Locasto	The "Hacker Curriculum" exists as a mostly undocumented set of principles and methods for learning about information security. Hacking, in our view, is defined by the ability to question the trust assumptions in the design and implementation of computer systems rather than any negative use of such skills. Chief among these principles and methods are two useful pedagogical techniques: (1) developing a cross-layer view of systems (one unconstrained by API definitions or traditional subject matter boundaries) and (2) understanding systems by analyzing their failure modes (this approach works well with learning networking concepts and assessing software vulnerabilities). Both techniques provide a rich contrast to traditional teaching approaches, particularly for information security topics. We relate our experience applying Hacker Curriculum principles to education and training programs for undergraduates, including the Secure Information Systems Mentoring and Training (SISMAT) program and the Cyber Security Initiative at Dartmouth College, which allows undergraduates to perform supervised red team activities on Dartmouth's production systems.	Teaching the principles of the hacker curriculum to undergraduates	NA:NA:NA	2010
Mike Goldweber	NA	Session details: Panel	NA	2010
John Barr:Steve Cooper:Michael Goldweber:Henry Walker	NA	What everyone needs to know about computation	NA:NA:NA:NA	2010
Scott Grissom	NA	Session details: Special session	NA	2010
Scott Grissom:Joan Peckham:Harriet Taylor:Guy-Alain Amoussou:Victor Piotrowski	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty, and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA	2010
Billy Lim	NA	Session details: Special session	NA	2010
Billy L. Lim:Bryan Hosack:Paul Vogt	Web services technology is a burgeoning technology that has received much attention in the software industry in recent years under the broader umbrella of service-oriented architecture (SOA). The popularity of the service-oriented paradigm is echoed by Microsoft's Bill Gates, where in a memo to Microsoft's top managers and engineers, he states "The broad and rich foundation of the internet will unleash a 'services wave' of applications and experiences available instantly over the internet to millions of users" [1]. While Web services have been incorporated in many industries in the market place, they are only beginning to appear in the academia, primarily in upper division and graduate CS/IS curricula [2,3]. In this special session, we share our belief that Web services technologies can and should be introduced early in CS/IS curricula. We describe and demo a number of scenarios that illustrate how Web services can be integrated into CS1/IS1 to make these courses more interesting and more importantly, make the students better prepared for upper division classes and for the industry upon graduation. This special session also shares the results of our preliminary findings involving the aforementioned integration and introduces participants to the related courseware. Participants will also receive hands-on experience with some of the scenarios experimented in our study. The intended audience is CS/IS educators who are interested in a novel way of teaching CS1/IS1. NOTE: Participants are encouraged to bring a laptop with wireless access to the Web and with NetBeans.	A web service-oriented approach to teaching CS/IS1	NA:NA:NA	2010
Dennis Brylow	NA	Session details: Networks & security	NA	2010
Jianping Pan	Experimenting in courses such as operating systems, computer networks, and distributed systems is challenging due to the need to access system kernels and network infrastructures, as well as the distributed nature of these experiments. In this paper, we design and develop a laboratory platform that can be rapidly and economically adopted in any educational institutions to teach introductory computer networks courses. By using commercial, off-the-shelf hardware and open-source software, and together with our technical solutions, the platform gives students an opportunity to experiment in a real, flexible and scalable network, and to interact with the network both as a network user and more importantly as a network operator. These features can help students to better understand the algorithms, protocols and practice of computer networks. This easy-to-use lab platform has been received favorably by students. Also, the low-cost platform is easy to maintain, and can be repeatedly used in multiple, back-to-back lab sections.	Teaching computer networks in a real network: the technical perspectives	NA	2010
Niakam Kazemi:Shiva Azadegan	Active learning and using visualization tools provide an effective approach in computer science education. Without meaningful hands-on exercises or access to training tools, it is usually difficult for students to understand or elaborate on complex algorithms, protocols, and concepts underlying different aspects of computing. This paper introduces a tool, IPsecLite, which demonstrates the inner-working of IP Security (IPsec) standard. Built on many networking technologies and cryptographic techniques, IPsec provides services to secure network communication. We introduce IPsecLite through a series of labs that can be used in several security courses. IPsecLite is fully developed and can be easily integrated into curriculum.	IPsecLite: a tool for teaching security concepts	NA:NA	2010
Dave Feinberg	We created a course that, beginning from a hypothetical shared light bulb as our physical layer, introduced students to a hierarchy of simplified versions of network protocols, including Ethernet, IP, and TCP. This paper describes those simplified protocols, along with the Java framework students used to implement and simulate them.	Teaching simplified network protocols	NA	2010
Chenglie He	NA	Session details: Course design	NA	2010
Norman Neff	The "2007 SIGCSE Report On the Implementation of a Discrete Mathematics Course" recommends relocating some discrete structures topic areas to other courses, for the sake of coherency. Our implementation of the one semester course also relocates topics, but additionally features a focus on a significant computer science problem: regular language acceptors. This problem-directed course model promises superior coherency, motivation, and integration with computing.	Problem-directed discrete structures course	NA	2010
David J. Malan	Computer Science 50 is Harvard College's introductory course for majors and non-majors alike, enrollment in which both rose and fell along with the dotcoms. Although enrollment peaked in 1996 at 386 students, it had settled by 2002 in the neighborhood of 100. We set out in 2007 to combat that trend by tackling two problems. We hypothesized that CS50 suffered from two, one of perception and one of design. Although, per end-of-term surveys, the course had never lacked for good teachers or good content, the consensus on campus for years had been to beware this particular course. And the course's own syllabus may very well have been dated in the eyes of students who had begun to carry regularly modern hardware and software in their backpacks and pockets. Not only did we proceed to revamp every one of CS50's problem sets, we brought its syllabus more in line with technological trends already familiar to students. And we altered the tone of the course to appeal to those "less comfortable" with computing on campus. But we took care to preserve the course's rigor and underlying fundamentals, lest we do our own students a disservice. Our new approach appears to be working. Between 2006 and 2007, enrollment in CS50 more than doubled from 132 to 282 (+114%). Between 2007 and 2008, enrollment increased another 17% to 330, though even more striking was that year's 48% increase in female enrollment. By 2009, enrollment remained strong at 338. We present in this work what we have done and why we have done it.	Reinventing CS50	NA	2010
Marie desJardins:Michael Littman	We describe the "Great Insights in Computer Science" courses that are taught at Rutgers and UMBC. These courses were designed independently, but have in common a broad, engaging introduction to computing for non-majors. Both courses include a programming component to help the students gain an intuition for computational concepts, but neither is primarily programming focused. We present data to show that these courses attract a diverse group of students; are rated positively; and increase students' understanding of, and attitudes towards, computing and computational issues.	Broadening student enthusiasm for computer science with a great insights course	NA:NA	2010
Jan Vahrenhold	NA	Session details: Coaching & mentoring	NA	2010
Ray Bareiss:Martin Radley	At Carnegie Mellon's Silicon Valley campus we employ a learn-by-doing educational approach in which nearly all student learning, and thus instruction, is in the context of realistic, team-based projects. Consequently, we have adopted coaching as our predominant teaching model. In this paper we reflect on our experience with the nature of teaching by coaching using a framework derived from Cognitive Apprenticeship, and explain how we employ the techniques it suggests in our teaching. We also discuss a range of instructional tensions that arise in teaching by coaching and present a survey of student attitudes regarding the effectiveness of our approach.	Coaching via cognitive apprenticeship	NA:NA	2010
Kristy Elizabeth Boyer:E. Nathan Thomas:Audrey S. Rorrer:Deonte Cooper:Mladen A. Vouk	Recent years have seen a growing awareness in the computing education community that initiatives outside the classroom are vital for retaining students and preparing them for a collaborative and dynamic professional environment. Particularly important are programs that develop rich technical skills while increasing students' interest in computing disciplines. We present Computing Identity Mentoring, an intervention designed to increase commitment to computing while enhancing students' technical and leadership skills. This program was implemented at seven universities during 2008-2009. Preliminary results suggest that Computing Identity Mentoring contributes to students' self-efficacy regarding computing and leadership, and solidifies students' commitment to a career in computing. This paper presents early findings on the effectiveness of the approach and illustrates Computing Identity Mentoring in the context of three of the seven institutions where it has been implemented.	Increasing technical excellence, leadership and commitment of computing students through identity-based mentoring	NA:NA:NA:NA:NA	2010
R. Brook Osborne:Antony J. Thomas:Jeffrey R.N. Forbes	This paper describes a program in which undergraduates mentor teams of local middle and high school students on robotics projects. These teams learn and apply the scientific, mathematical, and computing fundamentals behind the construction of robots and the design of control algorithms. The mentors play a crucial role in the effectiveness of the program. Mentor training has evolved over the five-year life of the program from ad-hoc preparation to a service-learning course where students learn both the technical skills required to design, construct, and test, mobile robots and the pedagogical techniques necessary to mentor middle and high school students. We provide an overview of the program and some evaluation results.	Teaching with robots: a service-learning approach to mentor training	NA:NA:NA	2010
William Birmingham	NA	Session details: Tools	NA	2010
Daniel D. Garcia:Gene Zhang:Sean Carr:Sameer Iyengar:Hava Edelstein:Albert Liu	For several years, the lectures in our introductory Electrical Engineering and Computer Science (EECS) courses have been videotaped and webcast, mainly as an aid to students with time conflicts that prevent them from attending class. We present the Weiner Lecture Archives - a project to identify, archive, filter, and make available the best of these lectures with their notes on the web. We provide a hierarchical, ontology-driven interface to entire courses, which allows users to choose any topic and/or subtopic to view, from a small snippet of one lecture to one that spans many lectures. Once the topic is chosen, our system launches RealPlayer to play the lecture video in one window while showing synchronized lecture notes or slides in another window. By the spring of 2007, we had finished encoding our department's entire four-course introductory sequence into this system. Student and worldwide use was greater than 100,000 views last year alone, direct feedback has been encouraging, and we hope to expand to other EECS courses in the future.	The Weiner lecture archives: an ontology-driven interface for viewing synchronized lectures and notes	NA:NA:NA:NA:NA:NA	2010
Christopher Hundhausen:Anukrati Agrawal:Kyle Ryan	Inspired by the formal code inspection process commonly used in the software industry, we have been exploring the use of pedagogical code reviews (PCRs), in which a team of three to four students, led by a trained moderator, (a) walk through segments of each other's programming assignments, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. We have found that PCRs not only improve the quality of students' code, but also positively impact students' communication and sense of community. However, implementing PCRs also presents a key logistical challenge: how to make code solutions and review results accessible to team members before, during, and after the team reviews? To address this challenge, we are developing an online environment specifically tailored to support PCRs. Our environment enables students to submit their code solutions; to review team members' code solutions on-line prior to PCRs; to carry out PCRs; and to resubmit their solutions based upon the results of the PCRs. In an empirical evaluation of the environment in a CS1 course, we found that it not only eased the logistics of implementing PCRs, but also improved the organization and efficiency of the PCR process.	The design of an online environment to support pedagogical code reviews	NA:NA:NA	2010
Rafael del Vado V√≠rseda	NOTE FROM ACM: It has been determined that the author of this article plagiarized the contents from a previously published paper. Therefore ACM has shut off access to this paper. The paper by Rafael del Vado V√≠rseda plagiarizes the following article: Pita, I., Segura, C.: A tool for interactive learning of data structures and algorithms. In: 8th International Symposium on Computers in Education, SIIE 2006, vol. 1, pp. 141-148 (2006). For further information, contact the ACM Director of Publications.	A visualization tool for tutoring the interactive learning of data structures and algorithmic schemes.	NA	2010
Sally Fincher	NA	Session details: Panel	NA	2010
Sally Fincher:Stephen Cooper:Michael K√∂lling:John Maloney	This panel will showcase and compare three leading Initial Learning Environments (ILE): Alice, Greenfoot and Scratch.	Comparing alice, greenfoot & scratch	NA:NA:NA:NA	2010
Joel C. Adams	NA	Session details: Panel	NA	2010
Joel C. Adams:Daniel J. Ernst:Thomas Murphy:Ariel Ortiz	Although Moore's Law continues to hold at present, Moore's Dividend - where software developers could rely on increasingly faster CPUs to make their software faster - has expired [5]. Instead of manufacturing uni-core CPUs with faster clocks, hardware manufacturers are producing multi-core CPUs, and many-core CPUs (with 32 or more cores) have begun appearing. Traditional sequential applications will not take advantage of these new hardware capabilities, and thus will not run any faster. To gain performance on these new and future hardware platforms, applications must be designed and written in pieces that run simultaneously on different cores. Ideally, the performance of such parallel applications should scale as the number of available cores increases. As computer science educators, it behooves us to prepare our students for this brave new parallel world. In this session, the panelists will discuss different aspects of doing so, including: " How do we integrate parallelism into the CS curriculum? What aspects of parallelism do we cover, and where? " What available technologies (e.g., programming languages, libraries, etc.) facilitate parallel application development? " What resources are available for CS faculty members to learn how to design and build parallel applications? Each panelist will focus on one of these aspects of the problem.	Multicore education: pieces of the parallel puzzle	NA:NA:NA:NA	2010
David G. Kay	NA	Session details: Special session	NA	2010
David G. Kay:Kim B. Bruce:Michael Clancy:Nell Dale:Mark Guzdial:Eric Roberts	This special session is devoted to identifying the CS education papers of the 20th century that have had the greatest influence on our practice of CS education today. The point is not primarily to produce the list of papers; rather it is to derive criteria, principles, and practices for identifying valuable contributions to CS education. This will provide a basis for establishing of awards or other recognition for influential contributions to CS education; it may also clarify the criteria for reviewing all papers. Invited participants will identify influential papers and their criteria for selecting them; the audience will also be encouraged to nominate papers and propose selection criteria. The results of this session will be communicated to the SIGCSE leadership, who will decide whether, and how, to implement any actual awards.	Recognizing the most influential CS education papers	NA:NA:NA:NA:NA:NA	2010
Thomas Cortina	NA	Session details: Keynote address	NA	2010
Carl E. Wieman	Guided by experimental tests of theory and practice, science has advanced rapidly in the past 500 years. Guided primarily by tradition and dogma, science education meanwhile has remained largely medieval. Research on how people learn is now revealing how many teachers badly misinterpret what students are thinking and learning from traditional science classes and exams. However, research is also providing insights on how to do much better. The combination of this research with modern information technology is setting the stage for a new approach that can provide the relevant and effective science education for all students that is needed for the 21st century. I will discuss the failures of traditional educational practices, even as used by "very good" teachers, and the successes of some new practices and technology that characterize this more effective approach, and how these results are highly consistent with findings from cognitive science.	Science education for the 21st century: using the insights of science to teach/learn science	NA	2010
Valerie Barr	NA	Session details: Philosophy	NA	2010
Matthew Hertz	Thirty-one years ago, the ACM Computing Curricula used the terms "CS1" and "CS2" to designate the first two two courses in the introductory sequence of a computer science major. While computer science education has greatly changed since that time, we still refer to introduction to programming courses as CS1 and basic data structures courses as CS2. This common shorthand is then used to enable students to transfer between institutions and as a base of many research studies. In this paper we show that while there is wide agreement on the connotation of CS1 and CS2, there is little agreement as to the denotation of these terms. Surveying CS1 and CS2 instructors, we find little agreement on how important various topics are to each of these course and less agreement on how well students master the material. Even after limiting the analysis to whether a topic has ANY important or students complete a course with ANY mastery of the material, we continue to find significant disagreements between instructors.	What do "CS1" and "CS2" mean?: investigating differences in the early courses	NA	2010
Arno Pasternak:Jan Vahrenhold	In this paper, we propose a new approach to thinking about and implementing Computer Science curricula in secondary education. The characteristic feature is to organize the items to be taught into what we call "strands" which then can be interlaced during the course. This naturally leads to a spiral curriculum in secondary Computer Science education. In the view of our proposed approach, we also comment on the role of programming in secondary education.	Braided teaching in secondary CS education: contexts, continuity, and the role of programming	NA:NA	2010
Alan Garvey	This paper discusses the use of writing as a teaching approach for an upper level computer science course. In describing my experiences, I hope to encourage those schools/teachers who are considering incorporating writing into such a course. Many different kinds of writing are compared and contrasted. Attention is paid to practicalities of the writing process and of the demands made of faculty in these writing-based courses.	Writing in an upper-level CS course	NA	2010
Boleslaw Mikolajczak	NA	Session details: Concurrency	NA	2010
Suzanne Rivoire	The technique of scaling hardware performance through increasing the number of cores on a chip requires programmers to learn to write parallel code that can exploit this hardware. In order to expose students to a variety of multicore programming models, our university offered a breadth-first introduction to multicore and manycore programming for upper-level undergraduates. Our students gained programming experience with three different parallel programming models, two of which are less than five years old and targeted specifically to multicore and manycore computing. Assessments throughout the semester showed that the course gave students a broad base of experience from which they will be able to understand ongoing developments in the field.	A breadth-first course in multicore and manycore programming	NA	2010
Mathias Ricken:Robert Cartwright	Concurrent programming is becoming more important due to the growing dominance of multi-core processors and the prevalence of graphical user interfaces (GUIs). To prepare students for the concurrent future, instructors have begun to address concurrency earlier in their curricula. Unfortunately, test-driven development, which enables students and practitioners to quickly develop reliable single-threaded programs, is not as effective in the domain of concurrent programming. This paper describes how ConcJUnit can simplify the task of writing unit tests for multi-threaded programs, and provides examples that can be used to introduce students to concurrent programming.	Test-first Java concurrency for the classroom	NA:NA	2010
Kim B. Bruce:Andrea Danyluk:Thomas Murtagh	Because of the growing importance of concurrent programming, many people are trying to figure out where in the curriculum to introduce students to concurrency. In this paper we discuss the use of concurrency in an introductory computer science course. This course, which has been taught for ten years, introduces concurrency in the context of event-driven programming. It also makes use of graphics and animations with the support of a library that reduces the syntactic overhead of using these constructs. Students learn to use separate threads in a way that enables them to write programs that match their intuitions of the world. While the separate threads do interact, programs are selected so that race conditions are generally not an issue.	Introducing concurrency in CS 1	NA:NA:NA	2010
Tim Bell	NA	Session details: Middle school issues	NA	2010
Youwen Ouyang:Katherine Hayden	Technology-enhanced science curriculum has potential for introducing fundamental computing concepts to adolescents. iQUEST (investigations for Quality Understanding and Engagement for Students and Teachers) is designed to transform middle school science teachers into advocates for technology being a critical part of student learning. It targets 7th and 8th grade science classrooms that serve high percentages of Hispanic students. To prepare student leaders in iQUEST teachers' classrooms, a group of 24 Hispanic students from project schools were invited to participate in a weeklong technology infused science summer camp. These students would continue on in project classrooms where teachers receive intensive technology training and support over the next year. This paper describes the camp activities and reports how the camp impacted students' aptitude and attitude toward technology and science.	A technology infused science summer camp to prepare student leaders in 8th grade classrooms	NA:NA	2010
Gabriela Marcu:Samuel J. Kaufman:Jaihee Kate Lee:Rebecca W. Black:Paul Dourish:Gillian R. Hayes:Debra J. Richardson	A significant focus in the United States recently has been to increase engagement and interest in STEM curricula, particularly among girls and underrepresented minorities [3]. In this work, we take an approach to teaching and learning that supports flexibility, experimentation, and play with technology. With this approach, we aim to make STEM curricula more comfortable and engaging for all types of children and teens, with a particular emphasis on lower socio-economic status female students. We designed and tested a computing course for middle school girls, and this work resulted in three best practices: hands-on work incorporating creativity through crafts into engineering and computing, the frequent presence of an audience to motivate engagement, and engineering-focused individual roles structuring group work. Pre- and post-surveys and exit interviews revealed significant changes in attitudes and an enthusiasm for engineering projects and careers as a result of participation in the course.	Design and evaluation of a computer science and engineering course for middle school girls	NA:NA:NA:NA:NA:NA:NA	2010
Ursula Wolz:Meredith Stone:Sarah M. Pulimood:Kim Pearson	To address the critical shortage of students entering computing fields, as well as broaden participation in computing, we present a summer and afterschool program in Interactive Journalism through which middle school students and their teachers develop an appreciation for and competence in computational thinking. We report on the outcomes of our first year in which three middle school language arts teachers, a technology teacher and a guidance counselor collaborate with college faculty to publish a school magazine of the future. Students and their teachers research and conduct interviews to develop news stories that are then presented as story packages with text, video, and procedural animations in Scratch. Results of formal data collection show changes in students' perceptions of what it means to program, as well as their emerging confidence in their ability to design computational solutions and to program.	Computational thinking via interactive journalism in middle school	NA:NA:NA:NA	2010
Suzanne Buchele	NA	Session details: Pairs & partners	NA	2010
Joshua Sennett:Mark Sherriff	This paper details the results of an investigation into the compatibility of partnered computer science students. The study involved approximately 290 students at the University of Virginia (UVA). This study builds on the work of researchers at North Carolina State University (NCSU). NCSU researchers have conducted a number of studies on the compatibility of pair programmers. We examined many of the factors that the NCSU researchers explored in their studies (including personality type, learning style, skill level, programming self esteem, work ethic, and time management choices) in order to determine whether the conclusions of the research at NCSU also hold true at UVA. Consistent with the NCSU studies, we found that skill level continues to be the most important factor in student compatibility.	Compatibility of partnered students in computer science education	NA:NA	2010
Grant Braught:John MacCormick:Tim Wahls	An analysis of data from 259 CS1 students is performed to compare the performance of students who were paired by demonstrated ability to that of students who were paired randomly or worked alone. The results suggest that when given individual programming tasks to complete, lowest-quartile students who were paired by ability perform better than those who were paired randomly and those who worked alone.	The benefits of pairing by ability	NA:NA:NA	2010
Mindy L. Hart	This paper is an experience report that describes a computer science based workshop titled Are You Smarter than YOUR 5th Grader? and targeted at fourth through sixth grade female students and parents. The novel approach of including parents as a pair programmer with the student is highlighted. Additionally, the paper probes the impact of this workshop and plans for revision and replication of future workshops.	Making contact with the forgotten k-12 influence: are you smarter than your 5th grader?	NA	2010
Mark Guzdial	NA	Session details: Panel	NA	2010
Mark Guzdial:Jane Prey:Lucy Sanders:Heikki Topi:Joseph Urban	NA	Report on the future of computing education summit	NA:NA:NA:NA:NA	2010
Robert Schnabel	NA	Session details: Special session	NA	2010
Robert Schnabel:Susan Rodger:Mark Stehlik:Chris Stephenson:John White	NA	Surfacing computer science in STEM education	NA:NA:NA:NA:NA	2010
Daniel D. Garcia	NA	Session details: Special session	NA	2010
Daniel D. Garcia:Colleen M. Lewis:John P. Dougherty:Matthew C. Jadud	Computational Thinking (CT) has been articulated as a "fundamental skill for everyone, not just for computer scientists" [10]. Almost all agree with the lofty goals of the initiative, to teach humanity the ability to see the world through the sharpened eyes of a computer scientist. Others have shared their vision of what CT is, how to pave the way [7], weave it into a curriculum [1, 2, 9], and what the effects might be [8]. However, what does it really mean to be a computational thinker? While it is helpful to see examples that show we're already engaged in CT (e.g., using a backpack is pre-fetching and caching), it is perhaps more valuable to see everyday situations that are transformed when viewed through a computational thinker's trained eyes (e.g., writing dates as YYYY-MM-DD so they'll sort correctly). We hope to present enough examples to satisfy a growing chorus of those who need more grounding, using a unique delivery format. Jeff Foxworthy is a popular and successful stand-up comedian, especially in rural areas of the southern United States [5]. His signature bit is to find subtle aspects of life that are common to "rednecks", a term used to describe "uneducated white farm laborers" (whose neck is red from sunburn) [3]. These observations are never meant to be mean-spirited, are told with acute comic timing, and audiences love them. Here are some of his best [4], using his template: If _____________________________, you might be a redneck! ...you think the last words to the Star Spangled Banner are 'Gentlemen, start your engines'... ...you get stopped by a state trooper, and when he asks you if you have an I.D. and you say, 'Bout what?'... ...you carried a fishing pole into Sea World... We will use a similar template and each of the four "stand up computational thinkers" will riff on observations of life as seen through CT eyes. We hope to provide enough examples that the (mostly CT) audience will feel compelled to join us in an "open mike" format and share their experiences. Whenever possible, we will channel Mr. Foxworthy and aim for the funny bone.	If ____________, you might be a computational thinker!	NA:NA:NA:NA	2010
Monica McGill	NA	Session details: Games	NA	2010
Alexander Repenning:David Webb:Andri Ioannidou	Game design appears to be a promising approach to interest K-12 students in Computer Science. Unfortunately, balancing motivational and educational concerns is truly challenging. Over a number of years, we have explored how to achieve a functional balance by creating a curriculum that combines increasingly complex game designs, computational thinking patterns and authoring tools. Scalable Game Design is a research project exploring new strategies of how to scale up from after school and summer programs into required curriculum of public schools through game design approaches. The project includes inner city schools, remote rural areas and Native American communities. A requirement checklist of computational thinking tools regarding curriculum, teacher training, standards and authoring tools has been developed and is being tested with thousands of students.	Scalable game design and the development of a checklist for getting computational thinking into public schools	NA:NA:NA	2010
Cinnamon Hillyard:Robin Angotti:Michael Panitz:Kelvin Sung:John Nordlinger:David Goldstein	Despite the proven success of using computer video games as a context for teaching introductory programming (CS1/2) courses, barriers including the lack of adoptable materials, required background expertise (in graphics/games), and institutional acceptance still prevent interested faculty members from experimenting with this approach. The Game-Themed programming Assignment (GTA) modules are designed specifically for these faculty members such that they can selectively pick and choose a subset to experiment with and gradually adopt the materials in their own classes. The design and academic merits of the GTA modules have been verified and presented previously [24]. This paper begins by describing results from GTA workshops for CS1/2 faculty and goes on to detail the results of our year-long project in adopting the GTA modules in classes. In this case, we have demonstrated that introductory programming concepts can be examined, practiced, and learned based on GTA modules when neither the faculty nor the students involved have backgrounds in graphics or games. More importantly, our results showed that it is straightforward to blend the GTA modules into existing classes with minimum alterations. In these ways, the GTA modules are excellent catalysts enabling faculty to begin exploring teaching with game-themed materials.	Game-themed programming assignments for faculty: a case study	NA:NA:NA:NA:NA:NA	2010
Michael Hewner:Mark Guzdial	Video game development is an attractive career objective for many computer science students. Colleges are starting degree programs and specializations to serve this interest, but faculty may not have an informed idea of what game programming is like or how to advise students interested in the field. This paper describes the results of interviews with developers, managers, and artists at one company to determine what qualifications were most significant when evaluating college hires for jobs in game development. The qualifications we elicited formed the basis of a company-wide survey.	What game developers look for in a new graduate: interviews and surveys at one game company	NA:NA	2010
Hong Lin	NA	Session details: Parallel computing	NA	2010
Robert A. Chesebrough:Ivan Turner	This paper is an experience report describing the interaction between parallel programmers from industry and a select group of 16 high school students and six faculty from a Technical High School during a three-day "Clubhouse Parallel Universe Boot Camp" held summer 2009. Based on observations of what worked, this whitepaper offers next steps for getting parallelism topics taught at the high school level around the country. The paper also explores elements in the area of experimentation and human factors and touches on algorithms taught and languages used at this camp. The paper evaluates role playing exercises and hands-on labs presented by industry parallelism experts. We also explore how this specific group of high school kids responded, and draw some conclusions about next steps based on the teaching experience of the co-authors.	Parallel computing: at the interface of high school and industry	NA:NA	2010
Barry L. Kurtz:Rahman Tashakkori:John J. Helfert:Michael Sage	Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of" the lecture. This approach was developed for a modern distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid) into a single course and required a substantial course project that used all these levels. After presenting the current status of our activities, we will discuss future directions that include stand-alone distributed computing modules and a distributed computing repository. This work is supported, in part, by a National Science Foundation grant.	Using microlabs to teach modern distributed computing	NA:NA:NA:NA	2010
Shane Torbert:Uzi Vishkin:Ron Tzur:David J. Ellison	All students at our high school are required to take at least one course in Computer Science prior to their junior year. They are also required to complete a year-long senior project associated with a specific in-house laboratory, one of which is the Computer Systems Lab. To prepare students for this experience the lab offers elective courses at the post-AP Computer Science level. Since the early 1990s one of these electives has focused on parallel computing. The course enrolls approximately 40 students each year for two semesters of instruction. The lead programming language is C and topics include a wide array of industry-standard and experimental tools. Since the 2007-2008 school year we have included a unit on parallel algorithmic thinking (PAT) using the Explicit Multi-Threading (XMT) system. We describe our experiences using this system after self-studying the approach from a publicly available tutorial. Overall, this article provides significant evidence regarding the unique teachability of the XMT PAT approach, and advocates using it broadly in Computer Science education.	Is teaching parallel algorithmic thinking to high school students possible?: one teacher's experience	NA:NA:NA:NA	2010
John Dooley	NA	Session details: CS education research I	NA	2010
Michael Stepp:Beth Simon	Academic integrity and cheating are issues of specific importance in computing courses due to the restricted nature of much of our assigned work. Additionally, use of valued pedagogical and professional practices such as pair programming can muddy the waters when it comes to students' understandings and experiences with collaboration. In this study we report on 112 students at the beginning of a second programming course being asked to describe a scenario of student-to-student collaboration that "crosses the line" in terms of what should be allowed in the course. We find that students describe inappropriate acts involving sharing of code and sharing of information, with the former being more prevalent. Additionally, about half of the scenarios include mitigating circumstances that should not affect the propriety of those acts. Finally, when presented with other students' (often vague) scenarios, students have little consensus on whether those reflect appropriate or inappropriate collaborations.	Introductory computing students' conceptions of illegal student-student collaboration	NA:NA	2010
Lynda Thomas:Carol Zander:Anna Eckerdal	Transformational biographies are used to shed light on situations when students have experienced 'surprise.' These biographies are examined in light of a philosophical position that surprise is useful in engendering learning, and, that as educators, we should try and set up situations in which our students experience it more often. The paper reports on a grounded-theory inspired examination of 108 students' transformational biographies for evidence of surprise. Students clearly perceived an 'anomaly or contradiction to a previous belief or understanding' in just under half of them. The paper then goes on to further identify different kinds of surprise and the triggers that caused them and concludes with suggestions for enhancing learning by capitalizing on students' surprise.	Harnessing surprise: tales from students' transformational biographies	NA:NA:NA	2010
Sue Fitzgerald:Brian Hanks:Ren√©e McCauley	This paper describes a process for establishing and maintaining a computer science education research group. Its purpose is to tell the story of one long-standing group, describe the benefits afforded by collaborative research groups and provide advice about how to form such a group. The intended audience is faculty members at teaching-intensive institutions who wish to establish or revive a research program in computer science education. We discuss establishing and maintaining a computer science education research agenda in a teaching-intensive environment.	Collaborative research in computer science education: a case study	NA:NA:NA	2010
Carol Taylor	NA	Session details: K-12 instruction	NA	2010
Seok-Ju Chun:Jungwoo Ryoo	This paper describes a new programming learning system. It consists of a Web-based flowchart application and Light Emitting Diode (LED) display kits. The LED kits produce various animations or static images according to a flow chart. The flowchart tool allows students to manipulate program elements through a Graphical User Interface (GUI). Survey results show that the proposed system makes learning how to program less challenging and more interesting for beginners. Encouraged by these initial findings, the authors are developing a system with add-on features including sensor accessory options and compatibility with well known LEGO¬Æ products.	Development and application of a web-based programming learning system with LED display kits	NA:NA	2010
Tom Lauwers:Emily Hamner:Illah Nourbakhsh	Many efforts are being made to improve computer science education in order to address the retention and motivation of students. These efforts rely on the development of educational tools and environments, tools that, when successful, require many years to integrate into the computer science education community. We introduce a strategy that both speeds uptake in the community and improves the chances of the project creating an educationally successful tool. The strategy hinges on creating an initial community of educators before an educational tool is fully mature but at the point at which it becomes usable by teachers. While this is somewhat analogous to the beta-testing communities in software development, our aim is for the community to drive the underlying design in significant ways. Our context is CSbots, a project to develop a robot, software environment, and associated curricula for introductory computer science education. We detail our collaborative outreach effort, which resulted in the concurrent creation of a community of 30 invested educators and a well aligned educational tool ready for broad dissemination.	A strategy for collaborative outreach: lessons from the CSbots project	NA:NA:NA	2010
Stephen Cooper:Wanda Dann:John Harrison	To combat the decline of teaching computing courses in high schools, a plan was created to offer professional development (in both content and pedagogy) to high school computing teachers, and to have college faculty partner with those high school teachers to implement innovative curricula. This paper describes a pilot program that was run in support of an NSF Innovative Technology Experiences for Students and Teachers (ITEST) project that funded this plan of action. Professional development activities were offered during summer 2006 and the resulting curriculum was taught in high school the following academic year (2006-2007).	A k-12 college partnership	NA:NA:NA	2010
Paul Gestwicki	NA	Session details: Panel	NA	2010
Ellen Spertus:Mark L. Chang:Paul Gestwicki:David Wolber	NA	Novel approaches to CS 0 with app inventor for android	NA:NA:NA:NA	2010
Youwen Ouyang	NA	Session details: Panel	NA	2010
Youwen Ouyang:Ursula Wolz:Susan H. Rodger	NA	Effective delivery of computing curriculum in middle school: challenges and solutions	NA:NA:NA	2010
Owen Astrachan	NA	Session details: Special session	NA	2010
Owen Astrachan:Kathleen Haynie:Chris Stephenson:Lien Diaz:Amy Briggs	NA	Re-imagining the first year of computing	NA:NA:NA:NA:NA	2010
Curtis Hill	NA	Session details: Peers	NA	2010
Scott Turner:Manuel A. P√©rez-Qui√±ones:Stephen Edwards:Joseph Chase	In computer science, students could benefit from exposure to critical programming concepts from multiple perspectives. Peer review is one method to allow students to experience authentic uses of the concepts in a non-programming manner. In this work, we examine the use of the peer review process in early, object-oriented, computer science courses as a way to develop the reviewers' knowledge of object-oriented programming concepts, specifically Abstraction, Decomposition, and Encapsulation. To study these ideas, we used peer review exercises in two CS2 classes at local universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding exercises), we measured the students' conceptual understanding throughout the semester with concept maps and the reviews they completed. We found that reviewing helped students learn Decomposition, especially those reviewing the instructor's programs. Overall, peer reviews are a valuable method for teaching Decomposition to CS2 students and can be used as an alternative way to learn object-oriented programming concepts.	Peer review in CS2: conceptual learning	NA:NA:NA:NA	2010
Benjamin Yu:George Tsiknis:Meghan Allen	Most students see exams as a stressful experience, having crammed as much as they possibly can and hoping that the material they have studied would indeed be on the exams, and the material that they did not have the time to study for, nor understand, would be overlooked by their professors. At the same time, instructors see exams as formal assessments of student learning. Exams are seldom thought of as a learning experience. In this paper, we report our experiences in the use of two-stage exams as a learning experience for the students in two different courses. In a two-stage exam, students write an exam individually, then they rewrite the same exam in collaboration with three or four other students. One of the main objectives is to encourage peer instruction and promote learning even during the exams. Students obtain immediate feedback during the exam, and initial results have shown that this type of exam format produces some positive effects in later assessment.	Turning exams into a learning experience	NA:NA:NA	2010
Beth Simon:Michael Kohanfars:Jeff Lee:Karen Tamayo:Quintin Cutts	Peer Instruction (PI) is a pedagogical technique to increase engagement in lectures. Students answer a multiple choice question (MCQ) typically using clickers (hand-held remote devices with a minimum of 5 option buttons), discuss the question with their peers, and then answer the question again. In physics, PI has years of evidence of increased conceptual learning, as measured by the Force Concept Inventory (FCI)[7]. In this experience report, we describe how PI was applied in CS1 and CS1.5 courses teaching Java. We identify specifics of the standard PI model which were adopted, adapted, or discarded for use in introductory computing, describe the process involved for the instructor, give examples of the types of questions asked of students, report on students' performance in answering these questions, reflect on the value for the instructor, and report the attitudes and opinions of the students. We conclude with observations, advice and suggested improvements.	Experience report: peer instruction in introductory computing	NA:NA:NA:NA:NA	2010
Kelvin Sung	NA	Session details: Scratch	NA	2010
Colleen M. Lewis	This study compares the attitudinal and learning outcomes of sixth grade students programming in either Logo or Scratch. Given proposed affordances of the visual programming language, Scratch, I hypothesized that those students learning Scratch would demonstrate greater competence in interpreting loops and conditional statements and would have more positive attitudes towards programming. However, differences in performance between the two groups appeared only in the greater ability of the students that learned Scratch to interpret conditional statements. Contrary to our hypothesis, we found that students that learned Logo had on average higher confidence in their ability to program and students were no more likely to plan to continue to program after the course or view the learning of topics as difficult if they learned Logo or Scratch.	How programming environment shapes perception, learning and goals: logo vs. scratch	NA	2010
Alex Ruthmann:Jesse M. Heines:Gena R. Greher:Paul Laidler:Charles Saulters, II	This paper discusses our ongoing experiences in developing an interdisciplinary general education course called Sound Thinking that is offered jointly by our Dept. of Computer Science and Dept. of Music. It focuses on the student outcomes we are trying to achieve and the projects we are using to help students realize those outcomes. It explains why we are moving from a web-based environment using HTML and JavaScript to Scratch and discusses the potential for Scratch's "musical live coding" capability to reinforce those concepts even more strongly.	Teaching computational thinking through musical live coding in scratch	NA:NA:NA:NA:NA	2010
Joel C. Adams	Each July since 2003, the author has directed summer camps that introduce middle school boys and girls to the basic ideas of computer programming. Prior to 2009, the author used Alice 2.0 to introduce object-based computing. In 2009, the author decided to offer these camps using Scratch, primarily to engage repeat campers but also for variety. This paper provides a detailed overview of this outreach, and documents its success at providing middle school girls with a positive, engaging computing experience. It also discusses the merits of Alice and Scratch for such outreach efforts; and the use of these visually oriented programs by students with disabilities, including blind students.	Scratching middle schoolers' creative itch	NA	2010
Zachary Kurmas	NA	Session details: Computer organization	NA	2010
Dino Schweitzer:Jeff Boleng	Stack frames are a fundamental concept in computer science often taught in an operating systems or an assembly language programming course. Computer security courses also rely on an understanding of stack frame concepts when teaching buffer overflow attacks. To assist students in learning the fundamentals of stack frames and related concepts, we have developed an interactive Simple Machine Simulator tool that allows students to step through a C-like language program and watch how memory changes. We have used this tool successfully in various courses to teach different aspects of stack frames and their use. This paper will describe the tool, how it is used to teach stack frame concepts, our experience, and future plans.	A simple machine simulator for teaching stack frames	NA:NA	2010
Stan J. Thomas:Paul M. Whitener	In this paper, we report on our efforts, extending over several years, to provide computer science students experience with a variety of operating system and computing environments. We describe our explorations into the use of virtual machine environments for instructional purposes, explorations that have led to the current multifaceted approach to virtualization. We also demonstrate that implementing a diverse, sophisticated virtual computing environment does not require a large investment in computer hardware, in fact it can lead to a cost saving by extending the useful life of systems and reducing the complexity of system administration.	In the zone: virtual computing on a budget	NA:NA	2010
J. Stanley Warford:Chris Dimpfl	This paper presents a virtual machine simulator with a memory trace facility having two unique features. First, the machine is designed to illustrate the translation from C/C++ to assembly language and from thence to machine language. Instead of the more common memory dump labeled by address, the tracer displays a graphic representation of the cell labeled by its symbol. Second, the simulator displays in real time the growth of the run-time stack on function activation, detects and displays the boundaries of the activation record, and displays all the cells on the run-time stack labeled by symbol. The paper includes download information for the open-source application.	The pep/8 memory tracer: visualizing activation records on the run-time stack	NA:NA	2010
Anna Cavender	NA	Session details: Teaching gems	NA	2010
Aaron Tenenbaum:Gerald Weiss:David Arnow	It is curious but there is widespread misuse of floating-point types to represent monetary amounts in introductory programming classes. This is evident from a survey of popular CS1 textbooks. It is instructive to examine how dollars and cents and other currency values are represented in actual practice and how we can utilize those techniques in computer science education, for both the sake of correctness and to illustrate important general principles. Furthermore, it is particularly interesting to review the history of CS education and determine how this situation came to pass. The interplay between technology, academic cultures and institutional development turns out to be quite significant.	Monetary values: double trouble or dollars and sense?	NA:NA:NA	2010
Darrah P. Chavey	You're teaching elementary sorting techniques, and you would like your students to do a programming assignment that tests their understanding of the ideas. But all of the code for elementary sorting techniques are in the textbook, easily found on the Web, etc. We suggest the use of two "Double Sorting" techniques whose solution is not standardly available, are fairly straight-forward to code, and offer speed improvements over the "straight" sorts. Double Sorting, the idea of processing two chosen elements simultaneously, applies to both Insertion Sort and Selection Sort, with speedups of 33% and 25%, hence are good enough to justify coding, but not good enough to be in Web collections. Code for this can be written in as little as a dozen lines of C++/Java code, and is easily within the reach of introductory students who understand the basic algorithms. In addition, the ideas used for double sorting are natural first steps in understanding how the N2 sorts can be improved towards the N log N sorts that they will study later. For more advanced students, these double sorts also generate good exercises in the analysis of algorithms.	Double sorting: testing their sorting skills	NA	2010
David Ginat	The notions of "as if" and "don't care" are essential notions in computational thinking. The former appears in the reformulation of tasks, reduction between tasks, auxiliary variables, and more. The latter is the core of non-determinism, asynchronous execution, and arbitrary choices in deterministic algorithms. The two notions are not intuitive, and require abstraction. We expect computer science (CS) graduates, who developed computational thinking during their studies, to demonstrate comprehension of these notions. Unfortunately, this may not be the case. In this paper we present a study of CS graduates, which reveals difficulties of limited comprehension and acceptance of these notions. We characterize the difficulties, relate them to cognitive aspects of abstraction, and offer some didactic suggestions.	The baffling CS notions of "as-if" and "don't-care"	NA	2010
Susanne Hambrusch	NA	Session details: Panel	NA	2010
Vicki Allan:Valerie Barr:Dennis Brylow:Susanne Hambrusch	The number of undergraduates entering computer science has declined in recent years. This is paralleled by a drop in the number of high school students taking the CS AP exam and the number of high schools offering computer science courses. The declines come at a time when career opportunities in CS continue to grow and computer science graduates are seen as crucial in building a globally competitive workforce for the 21st century. Efforts aimed at reversing the declining interest in computer science include curriculum revisions at the undergraduate level at many institutions, a re-design of computer science AP courses [1], and the inclusion of computational thinking into disciplines outside computer science [3]. This panel discusses four projects of computer science researchers collaborating with high school teachers on integrating computing and computational thinking into their courses. The majority of the high school teachers involved is teaching science and math courses. They are teaching a diverse group of talented and college-bound students. The goal of all projects is to integrate computing into disciplines represented in the high school curriculum and to raise the awareness of computer science as an exciting and intellectually rewarding field. This panel will outline recent and on-going activities and interaction with high school teachers. Each panelist will describe how he/she got involved and the nature of the interaction. The panelists will talk about their individual projects, outline their visions for future interactions, and how their effort can be replicated by others. The session will briefly describe NSF's RET program which provided teacher support for three of the four projects. The session will then be opened for discussion; the audience will be encouraged to ask questions and contribute additional ideas for the inclusion of computational thinking in high school courses.	Computational thinking in high school courses	NA:NA:NA:NA	2010
Doug Baldwin	NA	Session details: Panel	NA	2010
Doug Baldwin:Bill Marion:Murali Sitaraman:Cinda Heeren	NA	Some developments in mathematical thinking for computer science education since computing curricula 2001	NA:NA:NA:NA	2010
Daniel D. Garcia	NA	Session details: Panel	NA	2010
Daniel D. Garcia:Gail Chapman:Orit Hazzan:Maggie Johnson:Leigh Ann Sudol	NA	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 3	NA:NA:NA:NA:NA	2010
Lynda Thomas	NA	Session details: Global perspectives	NA	2010
Ming Zhang:Virginia M. Lo	This paper examines the current status of professional computing education for undergraduate majors and fundamental computer education for non-majors in China. We describe the evolution of computing education over the past decade and its role in meeting society's requirements for IT talent, and we discuss developing trends for computing education at China's universities. We conclude with a description of the Computer Science major at Peking University, one of the nation's leading research-based computer science departments.	Undergraduate computer science education in China	NA:NA	2010
Noa Ragonis:Orit Hazzan:Judith Gal-Ezer	This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are among the educational and pedagogical challenges faced by those involved in the current development of CS. It presents a survey that reflects the accumulative knowledge gained in Israel over the past twenty years with respect to CS teacher preparation. We explored nine institutes (six universities and three teacher education colleges) that offer CS teacher preparation programs. The survey indicates that while the programs vary in their implementation details, they are all motivated by the unique characteristics of CS, which play a central role in their design. We suggest that this observation further emphasizes the obvious: CS deserves designated CS teacher preparation programs. We therefore hope that this survey will contribute to the community of CS educators in general and to practitioners involved in developing CS teacher preparation programs in particular.	A survey of computer science teacher preparation programs in Israel tells us: computer science deserves a designated high school teacher preparation!	NA:NA:NA	2010
Adnan H. Yahya	Many countries, including those in the developing world, have introduced mandatory Information Technology (IT) courses for high school (HS) students. This was motivated by the importance of IT skills for the general population in view of the widespread use of computers. The HS curriculum is frequently decided upon by university faculty, with university needs very much in mind. A steady shift of introductory college level material to HS curriculum is observed. With all the positive effects of IT HS education, the issue of how to modify the first year computing courses to account for the material transferred to HS had to be addressed. The problem is complicated by the nonuniform adoption of IT education in high schools even within a single country, the varying emphasis on theory vs. practice in HS courses and the differences in the availability of resources at high schools, inadequacy of testing procedures and, in the case of many developing countries, the language of instruction difference between HS and college. Ignoring the HS curriculum when designing college level courses is a waste of resources and may render the college classes boring for many students. Accounting for the HS computing education at the college level may require a suite of placement tests. Even then, it may not be straightforward to figure out how to modify each of the introductory college courses to account for the HS material. On the example of the completely revamped IT education in Palestinian schools, which introduced mandatory technology education for grades 5-12 for all HS students, we discuss the dilemma of how to account for the HS IT knowledge and skills at the college level, especially the way this should affect the first computing courses at the college level, which has been a topic of debate in the last years.	The inteaction between high school curriculum and first year college courses: the case of computing	NA	2010
Sarah Douglas:Art Farley:Ginnie Lo:Andrzej Proskurowski:Michal Young	Internationalization of computer science education involves incorporating awareness, knowledge and skills of professional life in a global environment. Through an NSF CPATH1 grant we have established a Pacific Rim community of computer science departments, high tech industry and international programs exploring a new model of computer science education that focuses on the knowledge, skills and competencies necessary for professional success and leadership in a global context. This paper describes our progress in building an international community of computer science educators, as well as our efforts in curricular innovation and establishment of international summer schools. Internationalization of computer science education will help attract the best and brightest students and broaden the appeal of computer science to a much more diverse population. Computer science will be seen as a pathway to a career not in an isolated cubicle but in the wide-open world.	Internationalization of computer science education	NA:NA:NA:NA:NA	2010
Kimberly Voll	NA	Session details: CS education research II	NA	2010
Jennifer Parham:Leo Gugerty:D. E. Stevenson	We describe the second phase of an ongoing study whose aims are to explore how computer science students solve problems and to understand the relationship between metacognition and schemata. This research uses verbal protocols from computer science students, and based on the analysis of their transcripts, empirical evidence supports metacognition as a significant role in computer science problem solving. For the problem solved in this research, the students reveal a pattern in their interactions between metacognitive processes and the domain-specific strategies used to develop a program.	Empirical evidence for the existence and uses of metacognition in computer science problem solving	NA:NA:NA	2010
Paul Denny:Brian Hanks:Beth Simon	PeerWise is a collaborative web-based system that engages students in the creation and evaluation of a test bank of multiple-choice questions. Previous studies involving two large CS1 courses in New Zealand have provided preliminary evidence that PeerWise usage is positively correlated with exam performance. In addition, it was reported that the student generated assessment questions were mostly free from errors and were clearly written, and the students appeared to positively value the system. Here we report on the first use of PeerWise in a CS1.5 course (second programming course) in the United States. Although the usage model was modified slightly to accommodate pedagogical factors, we highlight similar positive outcomes to those observed in New Zealand. Of particular note, students who were most active using PeerWise improved their rank in class relative to their peers who were less active.	Peerwise: replication study of a student-collaborative self-testing web service in a u.s. setting	NA:NA:NA	2010
Timothy T. Yuen:Min Liu	This paper discusses a cognitive study of how interactive multimedia authoring (IMA) affects novice computer science students' conceptual understanding of object-oriented programming (OOP). In this study, interactive multimedia authoring refers to the construction of a role-playing game using a game template developed with Adobe Flash CS3 and ActionScript 2.0. Three cognitive processes of disequilibrium, exploration, and awareness were observed in this study, which aided the transformation of students' understanding of OOP through interactive multimedia authoring.	How interactive multimedia authoring transforms object-oriented thinking	NA:NA	2010
Quintin Cutts:Emily Cutts:Stephen Draper:Patrick O'Donnell:Peter Saffrey	Introductory programming classes are renowned for their high dropout rates. The authors propose that this is because students learn to adopt a fixed mindset towards programming. This paper reports on a study carried out with an introductory programming class, based on Dweck's mindset research. Combinations of three interventions were carried out: tutors taught mindset to students; growth mindset feedback messages were given to students on their work; and, when stuck, students were encouraged to use a crib sheet with pathways to solve problems. The study found that the mixture of teaching mindset and giving mindset messages on returned work resulted in a significant change in mindset and a corresponding significant change in test scores - improvements in test scores were found in a class test given immediately after the six-week intervention and at the end-of-year exam. The authors discuss the results and the strengths and weaknesses of the study.	Manipulating mindset to positively influence introductory programming performance	NA:NA:NA:NA:NA	2010
Adrian German	NA	Session details: Assessment	NA	2010
Leigh Ann Sudol:Cassandra Studer	As professional educators we produce a large number of assessments for our students to complete. These assessments or exams are often evaluated informally based upon student feedback and simple measures such as average score on a question. This paper highlights another more rigorous approach to item evaluation, and presents an evaluation of several items from an assessment as examples of the type of information that Item Response Theory can provide.	Analyzing test items: using item response theory to validate assessments	NA:NA	2010
Alex Gerdes:Johan T. Jeuring:Bastiaan J. Heeren	Programming exercise assessment tools alleviate the task of teachers, and increase consistency of markings. Many programming exercise assessment tools are based on testing. A test-based assessment tool for programming exercises cannot ensure that a solution is correct. Moreover, it is difficult to test if a student has used good programming practices. This is unfortunate, because teachers want students to adopt good programming techniques. We propose to use strategies, in combination with program transformations, as a foundation for functional programming exercise assessment. Expert knowledge, in the form of model solutions, can be expressed as programming strategies. Using these strategies we can guarantee that a student program is equivalent to a model solution, and we can report which solution strategy has been used to solve the programming problem.	Using strategies for assessment of programming exercises	NA:NA:NA	2010
Daniel Heersink:Barbara M. Moskal	Many projects throughout the United States are underway that seek to increase the appeal of technology as a field of study. To better understand the impacts of such projects, validated instruments are needed which measure students' attitudes and beliefs in both computer science and information technology. This paper describes the development and validation of two assessment instruments. One measures attitudes and beliefs about computer science; the other measures attitudes and beliefs about information technology. The questions that comprise these instruments are identical with the exception of the use of the terms "computer science" and "information technology". Both instruments sought to measure five constructs: confidence, interest, gender, usefulness, and professional. Based on the results of factor analyses, high school students are able to distinguish among these constructs in computer science but not in information technology. This raises questions as to what high school students understand about field of information technology	Measuring high school students' attitudes toward computing	NA:NA	2010
Legand L. Burge:Ronald J. Leach	In this paper we describe a tool developed as part of the assessment process used at our university. The tool allows the automatic determination of the degree to which individual students meet the learning objectives that indicate how well students meet both course objectives and program directives. We also describe a portion of our assessment process that helps us perform the difficult step of "closing the loop" to make sure that the results of our data analysis are used to insure continuous program improvement.	An advanced assessment tool and process	NA:NA	2010
Roy Pargas	NA	Session details: Supporting student learning	NA	2010
James B. Fenwick, Jr.:Cindy Norris:Andrew R. Dalton:William Kreahling	Assessment of student learning through tests, or examinations, is one of those necessary evils. No one seems to enjoy it, but everyone admits the necessity of it. Reducing student anxiety and frustration is an important activity to obtain a meaningful assessment of their learning. A common way for teachers to help students prepare is with a review session. This paper describes a structured review technique that actively engages every student in a multisensory way, requires little work on the part of the instructor, and is both entertaining and fun. Most important, this paper describes an empirical study that demonstrates the dramatic efficacy of the technique.	24/7 lectures as an exam review technique	NA:NA:NA:NA	2010
Kristy Elizabeth Boyer:William Lahti:Robert Phillips:Michael D. Wallis:Mladen A. Vouk:James C. Lester	Using effective teaching practices is a high priority for educators. One important pedagogical skill for computer science instructors is asking effective questions. This paper presents a set of instructional principles for effective question asking during guided problem solving. We illustrate these principles with results from classifying the questions that untrained human tutors asked while working with students solving an introductory programming problem. We contextualize the findings from the question classification study with principles found within the relevant literature. The results highlight ways that instructors can ask questions to 1) facilitate students' comprehension and decomposition of a problem, 2) encourage planning a solution before implementation, 3) promote self-explanations, and 4) reveal gaps or misconceptions in knowledge. These principles can help computer science educators ask more effective questions in a variety of instructional settings.	Principles of asking effective questions during student problem solving	NA:NA:NA:NA:NA:NA	2010
Ketrina Yim:Daniel D. Garcia:Sally Ahn	Computer Science Illustrated1 is an endeavor to help visual learners comprehend computer science topics through a series of resolution-independent illustrations, which are made available online for use as handouts in class and posters in the computer labs. These illustrations are designed to present concepts as engaging and memorable visual metaphors combined with concise explanations or short narratives, intended to maintain the students' interest and facilitate retention. An additional goal of the project is to make learning the concepts an entertaining experience through the use of colorful and whimsical characters in the illustrations. In producing our twenty-seven illustrations, we determined which topics were most difficult for students to understand in our university's introductory computer science courses and followed a step-by-step process of design, redesign, and revision to generate our illustrations. We also assessed the effectiveness of our creations, using both subjective and objective measures.	Computer science illustrated: engaging visual aids for computer science education	NA:NA:NA	2010
Martin C. Carlisle	We provided 21 short YouTube videos for an Introduction to Programming in Java course. Students were surveyed on how often they watched the videos and did the readings, and how much these activites contributed to their learning. When professors reduced lecture time and increased lab time, students watched videos and read significantly more. Their test scores were at least as high and they indicated they would prefer to not have more lecture. The YouTube videos also provided a source of outreach for the university, drawing a large number of views, including the 13-17 year-old demographic.	Using You Tube to enhance student class preparation in an introductory Java course	NA	2010
Clifford A. Shaffer	NA	Session details: Special session	NA	2010
Clifford A. Shaffer:Thomas L. Naps:Susan H. Rodger:Stephen H. Edwards	NA	Building an online educational community for algorithm visualization	NA:NA:NA:NA	2010
Paul Tymann	NA	Session details: Special session	NA	2010
Karen Donathan:Paul Tymann	Every year, for the past 10 years, more than 10,000 students have taken the Advanced Placement Computer Science exam (AP CS). The free response section of the AP CS exam is manually scored by a group of about 100-150 high school and college faculty referred to as readers. The exams are scored accurately and consistently even though thousands of exams are being scored by dozens of readers. This accuracy is due in large part to the rubrics that are developed to score the exams. Rubrics not only improve the consistency and speed at which exams can be scored, they also can be used to communicate expectations to students. This special session will discuss how to develop a rubric, show how they are used in the AP CS scoring process and illustrate how rubrics can be used to convey expectations to students.	The development and use of scoring rubrics: (or how to grade thousands of exams without losing your mind)	NA:NA	2010
Nick Parlante	NA	Session details: Special session	NA	2010
Nick Parlante:Julie Zelenski:Zachary Dodds:Wynn Vonnegut:David J. Malan:Thomas P. Murtagh:Todd W. Neller:Mark Sherriff:Daniel Zingaro	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2010
Weiqing Sun	NA	Session details: Operating systems	NA	2010
Oren Laadan:Jason Nieh:Nicolas Viennot	Students learn more through hands-on project experience for computer science courses such as operating systems, but providing the infrastructure support for a large class to learn by doing can be hard. To address this issue, we introduce a new approach to managing and grading operating system homework assignments based on virtual appliances, a distributed version control system, and live demonstrations. Our solution is easy to deploy and use with students' personal computers, and obviates the need to provide a computer laboratory for teaching purposes. It supports the most demanding course projects, such as those that involve operating system kernel development, and can be used by both on-campus and remote distance learning students even with intermittent network connectivity. Our experiences deploying and using this solution to teach operating systems at Columbia University show that it is easier to use, more flexible, and more pedagogically effective than other approaches.	Teaching operating systems using virtual appliances and distributed version control	NA:NA:NA	2010
Rob Hess:Paul Paulson	In this paper, we present a series of programming projects based on the Linux kernel for students in a senior-level undergraduate operating systems course. The projects we describe cover several key operating systems concepts, including process scheduling, I/O scheduling, memory management, and device drivers. In addition, we assess these projects along several dimensions, from their difficulty to their capacity to help students understand operating systems concepts, based on six terms (three years) of detailed student exit surveys along with observations and anecdotal evidence. Through this assessment, we conclude that our Linux-based projects are an effective means by which to teach operating systems concepts and, additionally, that students' response to these projects is overwhelmingly positive.	Linux kernel projects for an undergraduate operating systems course	NA:NA	2010
Alexander Schmidt:Andreas Polze:Dave Probert	When studying operating systems, students need to understand user-mode system interfaces (U), they need to learn about tools to monitor and measure OS behavior (M), and they finally should understand central implementation details of the OS kernel (K). Following the UMK approach, even complex projects such as modifying the memory management inside the Windows kernel can be carried out in an undergraduate OS curriculum. Here we concentrate on the kernel- and measurement part and present the Abstract Memory Management (AMM) project. AMM provides a framework for modifying the working set management in Windows while still hiding many implementation details of the kernel. AMM has been used in OS courses at U of Washington Bothell and HPI/U of Potsdam, Germany, with very good results. The AMM lab - together with other labs - is based on the Windows Research Kernel (WRK) as available in source from Microsoft. These labs complement our previously developed Curriculum Resource Kit (CRK) and are available for download.	Teaching operating systems: windows kernel projects	NA:NA:NA	2010
Salvador Garcia-Martinez	NA	Session details: Active learning	NA	2010
Ana Paula L. Ambr√≥sio:F√°bio M. Costa	The introductory undergraduate course on Algorithms and Computer Programming, commonly known as CS1, has always presented a challenge when considering student failure and drop out rates. Despite this, it is acknowledged that this is a foundational course for a large part of the CS curriculum. In this paper we present the results of a project that combines the use of mobile, pen-based, computing technology and Problem-Based Learning in the redesign of an introductory computer programming course. The course redesign focused on the integrated use of tablet PCs to assist in the several activities involved in the use of the PBL method in the classroom. The results show a promising future for the methodology, also pointing to the need for some important adaptations in order to make its use more effective to teach and learn this particular discipline.	Evaluating the impact of PBL and tablet PCs in an algorithms and computer programming course	NA:NA	2010
Christopher Hundhausen:Anukrati Agrawal:Dana Fairbrother:Michael Trevisan	Given the increasing importance of communication, teamwork, and critical thinking skills in the computing profession, we believe there is good reason to provide students with increased opportunities to learn and practice those skills in undergraduate computing courses. Toward that end, we have been exploring studio-based instructional methods, which have been successfully employed in architecture and fine arts education for over a century. We have developed an adaptation of studio-based instruction for computing education called the pedagogical code review, which is modeled after the code inspection process used in the software industry. To evaluate its effectiveness, we carried out a quasi-experimental comparison of a "studio-based" CS 1 course with pedagogical code reviews and an identical "traditional" CS 1 course without pedagogical code reviews. We found no learning outcome differences between the two courses; however, we did observe two interesting attitudinal trends: (a) self-efficacy decreased more in the traditional course than in the studio-based course; and (b) peer learning decreased in the traditional course, but increased in the studio-based course. Additional questionnaire and interview data provide further evidence of the positive impact of studio-based instruction.	Does studio-based instruction work in CS 1?: an empirical comparison with a traditional approach	NA:NA:NA:NA	2010
Dean Hendrix:Lakshman Myneni:Hari Narayanan:Margaret Ross	This paper presents an experience in designing, implementing, and evaluating a studio-based learning model for CS2. Adapted from architecture and art education, as well as from collaborative problem-solving pedagogies, studio-based learning has shown great promise for computing education. Key elements of studio-based learning include exploring multiple solutions to a problem, justifying the choice of one solution, and being subject to, as well as providing, peer reviews. We describe the design, implementation, and revision of a studio model for CS2, and then present the results of an evaluation of the model when compared to traditional instruction in CS2.	Implementing studio-based learning in CS2	NA:NA:NA:NA	2010
Ariel Ortiz	NA	Session details: Programming language issues	NA	2010
James T. Streib:Takako Soma	Organick, Forsythe, and Plummer extensively used contour diagrams to illustrate the semantics of procedural and functional programming languages. However, many of the benefits of contour diagrams can still be utilized in explaining the semantics of object-oriented languages and is evident in the software JIVE created by Gestwicki and Jayaraman. This paper illustrates the use of both contour diagrams and JIVE to help students understand passing objects via parameters, returning objects from methods, comparing objects, and using inheritance in the Java programming language. The results from a small informal survey are included. This paper is useful to those teaching Java in a first-year computer science sequence.	Using contour diagrams and JIVE to illustrate object-oriented semantics in the Java programming language	NA:NA	2010
Paolo A.G. Sivilotti:Matthew Lang	Abstraction is a critical concept that underlies many topics in computing science. For example, in software engineering, the distinction between a component's behavior and its implementation is fundamental. Java provides two constructs that correspond to precisely this distinction: A Java interface is a client's abstract view of a component's behavior, while a class is a concrete implementation of that same component. We have developed a course that introduces Java while following a discipline of diligently decomposing every component into these two separate linguistic elements. In this course, interfaces are given the same prominence as classes since both are needed for a complete component. This approach is helpful to students by providing: (i) a clear manifestation of the role of abstraction in software systems, and (ii) a framework that naturally motivates many good coding practices adopted by professional programmers.	Interfaces first (and foremost) with Java	NA:NA	2010
Richard J. Enbody:William F. Punch	If you change the CS1 language to Python, what is the impact on the rest of the curriculum? In earlier work we examined the impact of changing CS1 from C++ to Python while leaving CS2 in C++. We found that Python-prepared CS1 students fared no differently in CS2 than students whose CS1 course was in C++, even though CS2 was taught in C++ and covered the same topics as in previous years. Was that an anomaly? What happens in the next tier of courses? When our CS1 was first changed to Python there were many students who had taken CS1 in C++ still in the system. The result is that there is a cadre of students with either CS1 in Python or CS1 in C++ moving together through our curriculum. This one-time occurrence is an opportunity to study the students with many variables fixed. Our next tier of courses is a C-based computer organization course, a C++ based object-oriented software design course, and a data structures course. We found that the students who started with Python fared as well as the CS1 C++ students. As before, the best predictor of performance was their college GPA. Python versus C++ CS1 preparation was not a predictor of performance in any course. We conclude again that in our C++ based curriculum changing CS1 to Python had no negative impact on student performance and did not require any significant change in those subsequent courses.	Performance of python CS1 students in mid-level non-python CS courses	NA:NA	2010
Phillip Barry	NA	Session details: Computing for the social good	NA	2010
Yu Cai	In the past few years sustainability and green computing have received tremendous interest across the world. Computing plays a critical role in our society, thus it has a special responsibility for sustainability and green movement. In this paper, we advocate sustainability integration into undergraduate computing education. We present three sustainability integration strategies, our efforts to develop a green computing course and learning modules, and course evaluation. We believe that sustainability integration will help prepare our graduates with computing competencies, multi-disciplinary knowledge, and computational thinking to create a sustainable future.	Integrating sustainability into undergraduate computing education	NA	2010
Richard J. Anderson:Ruth E. Anderson:Gaetano Borriello:Joyojeet Pal	Applying information and communication technologies to development (ICTD) is emerging as an interesting and motivating research area in computer science and engineering. It spans application areas from healthcare to transportation, and requires the use of computing skills from networking to user interface design. Addressing problems of developing regions and under-served communities lets students explore a different part of the ICT design space, leading to new implementation and research questions. ICTD is also an area that has the potential to excite students about the CSE field more generally, with its emphasis on enabling social benefits with technology, and is rich in possibilities for interesting student projects. In this paper we report on two offerings of a course at the University of Washington that introduce students to the field by way of 1) reading papers from literature in the area to gain exposure to this very different design mindset and 2) doing practical projects that engage students in engineering problems under unique design constraints. Our hope is that CSE educators may find our experiences useful in identifying an approach to integrating the field of ICTD into their curricula.	An approach to integrating ICTD projects into an undergraduate curriculum	NA:NA:NA:NA	2010
Archana Chidanandan:Lori Russell-Dag:Cary Laxer:Reyyan Ayfer	In this paper, we describe a collaborative course experience between students from universities in the USA and Turkey. Student teams worked together on a software engineering project for a non-profit organization based in Turkey. The students learned valuable skills in team-work, collaboration-facilitating software tools and working with peers from a different culture and a different time-zone. At the end of the course, in a focus group, students were asked for feedback regarding the course and its outcomes. In this paper, we describe the course from the student perspective. From this, and the instructor's experiences we provide a list of guidelines.	In their words: student feedback on an international project collaboration	NA:NA:NA:NA	2010
Paul Gestwicki	NA	Session details: CS-1 issues	NA	2010
Amruth N. Kumar	The majority of earlier studies have found no positive effect of closed labs on student performance or retention in Computer Science I. Since these studies used written tests to assess student performance, their results may have been affected by a mismatch between what was taught in closed labs and what was assessed in the written test. On the other hand, online tests that involve writing and debugging programs assess the very knowledge and skills taught in closed labs. So, we conducted a study to evaluate the effect of closed labs on student performance and retention when they are combined with online testing in the course. We found that even with online testing, closed labs did not significantly affect either the total score of the students in the course or retention in the course. On the other hand, students with closed or even optional labs scored significantly better on their online first test than students with open labs scored on their written first test. Since this is in spite of the fact that online tests are more stressful to students than written tests, closed labs helped students prepare for online tests. Closed labs, when combined with online testing, helped significantly improve the course performance of above-average students. Finally, there was significant and large correlation between Math SAT score and student performance in Computer Science I.	Closed labs in computer science I revisited in the context of online testing	NA	2010
Lijun Ni:Tom McKlin:Mark Guzdial	This paper presents the findings of an exploratory, qualitative study revealing computing instructors' experience in adopting curriculum innovations. We interviewed eight instructors a year after they attended workshops on several innovative introductory Computer Science (intro CS) courses at undergraduate level. The interview was designed to elicit the extent to which instructors had adopted or adapted what they learned from the workshops, and what drove or prevented their efforts to make curriculum change. The results of this study reveal that the adoption and adaptation of computing curriculum innovations in new situations may involve systemic change affecting instructors, departments and institutions as a whole. The findings of this study suggest a list of questions that a computing instructor might ask before committing to a new innovation. We also consider implications of this study for disseminating computing education innovations.	How do computing faculty adopt curriculum innovations?: the story from instructors	NA:NA:NA	2010
Daniel L. Schuster	Computer game programming has been adopted by some instructors and schools in an effort to motivate students and make the learning more relevant to the student's world than the console programs many of their instructors learned with. This paper describes the author's experience teaching CS1 using the ACM Java library to write arcade game programs. An online book, the Free Java Book, has been written to support this approach. Experience over the last two years teaching with this approach will be shared and the book will be described.	CS1, arcade games and the free Java book	NA	2010
J. McGrath Cohoon	NA	Session details: Panel	NA	2010
J. McGrath Cohoon:Leisa D. Thompson:Jennifer J. Goodall:Rebecca L. Dohrman:Elizabeth Litzler	NA	Consultants on systemic reform for gender balance	NA:NA:NA:NA:NA	2010
Guy-Alain Amoussou	NA	Session details: Special session	NA	2010
Guy-Alain Amoussou:Myles Boylan:Joan Peckham	This session will be conducted by panelists who have carried out funded interdisciplinary research and education, and who have funded and managed interdisciplinary programs. They will provide an opportunity for computing educators to engage in a conversation to assess what is needed to better educate the next generation of students to participate and contribute actively in resolving emerging and future interdisciplinary challenges. Many of the computing education discussions have recently been around "computational thinking" and how this might prepare students in all disciplines, including computing, to formulate and solve problems with other disciplinary partners. The difficult question is how to prepare students to engage in these activities without eroding the depth that is also needed to tackle the deepest and most difficult problems.	Interdisciplinary computing education for the challenges of the future	NA:NA:NA	2010
Robert McCartney	NA	Session details: Special session	NA	2010
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Edward F. Gehringer:Raymond Lister:Dave Musicant	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA	2010
Gary Lewandowski	NA	Session details: Keynote address	NA	2010
Robert Michael Panoff	Students and faculty alike at all education levels are clearly spending much more of their time interacting with computing and communication tools than with each other. Is this good? Are all uses of computational technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how computing enables multiple representations in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. Moving "beyond PowerPointless-ness," we have the opportunity to demonstrate that computing really matters in teaching and learning. Computing "matters" because quantitative reasoning, computational thinking, and multi-scale modeling are the intellectual "heart and soul" of 21st Century science and therefore are the essential skills of the 21st Century workforce. Computing "matters" because we can apply the power of dynamic, visual, and interactive computing to reach a deeper understanding of models across math and science while exploring their role in understanding our world.	Computational thinking for all: the power and the peril	NA	2014
Andrea W. Lawrence	This paper describes the many possibilities that SIGCSE affords to those who make use of the resources and opportunities the organization and the annual conferences provide.	SIGCSE plus you equals leverage	NA	2014
Hadi Partovi	Code.org first exploded on the CS education scene in Feb 2013 with its first video featuring Mark Zuckerberg and Bill Gates talking about computer science. 10 months later, it launched an Hour of Code campaign that has taken the world by storm. Reaching 10 million students in just 3 days, the Hour of Code became the fastest-spreading service in the history of technology OR education. Code.org founder Hadi Partovi will talk about how he came up with the concepts behind these grassroots campaigns, and how Code.org hopes to harness the reach of the broader CS community to grow computer science education in schools.	Transforming US education with computer science	NA	2014
A.J. Bernheim Brush	Inspired by the availability of inexpensive connected devices-such as lights, water sensors, security cameras, power meters, and thermostats-we built the Lab of Things (LoT) platform to enable easy interaction with devices for a range of applications, including automation, security, energy management, and elder care. Our goal is to substantially lower the barrier for researchers and students to develop and experiment with new technologies for the home environment. LoT provides a common framework to write applications that use connected devices and includes a set of cloud services that enable remote command/control of devices, monitoring of system health, and data collection. We released the LoT SDK in July 2013 for non-commercial use. I will describe the research studies that motivated the development of Lab of Things, student and research projects developed using Lab of Things and its precursor HomeOS, and our long-term vision of research groups working together to create a test bed of homes around the world that are willing to participate in field studies.	Lab of things: a devices research and teaching platform for home and beyond	NA	2014
Ashraf Saad	NA	Session details: Automated assessment	NA	2014
Nickolas Falkner:Rebecca Vivian:David Piper:Katrina Falkner	Computer-based assessment is a useful tool for handling large-scale classes and is extensively used in the automated assessment of student programming assignments in Computer Science. The forms that this assessment takes, however, can vary widely from simple acknowledgement to a detailed analysis of output, structure and code. This study focusses on output analysis of submitted student assignment code and the degree to which changes in automated feedback influence student marks and persistence in submission. Data was collected over a four year period, over 22 courses but we focus on one course for this paper. Assignments were grouped by the number of different units of automated feedback that were delivered per assignment to investigate if students changed their submission behaviour or performance as the possible set of marks, that a student could achieve, changed. We discovered that pre-deadline results improved as the number of feedback units increase and that post-deadline activity was also improved as more feedback units were available.	Increasing the effectiveness of automated assessment by increasing marking granularity and feedback units	NA:NA:NA:NA	2014
Stephen H. Edwards:Zalia Shams:Craig Estep	Infinite looping problems that keep student programs from termi-nating may occur in many kinds of programming assignments. While non-terminating code is easier to diagnose interactively, it poses different concerns when software tests are being run auto-matically in batch. The common strategy of using a timeout to preemptively kill test runs that execute for too long has limita-tions, however. When one test case gets stuck in an infinite loop, forcible termination prevents any later test cases from running. Worse, when test results are buffered inside a test execution framework, forcible termination may prevent any information from being produced. Further, overly generous timeouts can de-lay the availability of results, and when tests are executed on a shared server, one non-terminating program can delay results for many people. This paper describes an alternative strategy that uses a fine-grained timeout on the execution of each individual test case in a test suite, and that adaptively adjusts this timeout dynamically based on the termination behavior of test cases com-pleted so far. By avoiding forcible termination of test runs, this approach allows all test cases an opportunity to run and produce results, even when infinite looping behaviors occur. Such fine-grained timeouts also result in faster completion of entire test runs when non-terminating code is present. Experimental results from applying this strategy to 4,214 student-written programs are dis-cussed, along with experiences from live deployment in the class-room where 8,926 non-termination events were detected over the course of one academic year.	Adaptively identifying non-terminating code when testing student programs	NA:NA:NA	2014
Matheus Gaudencio:Ayla Dantas:Dalton D.S. Guerrero	In introductory programming courses it is common to demand from students exercises based on the production of code. However, it is difficult for the teacher to give fast feedback to the students about the main solutions tried, the main errors and the drawbacks and advantages of certain solutions. If we could use automatic code comparison algorithms to build visualisation tools to support the teacher in analysing how each solution provided is similar or different from another, such information would be able to be rapidly obtained. However, can computers compare students code solutions as well as teachers? In this work we present an experiment in which we have requested teachers to compare different code solutions to the same problem. Then we have evaluated the level of agreement among each teacher comparison strategy and some algorithms generally used for plagiarism detection and automatic grading. We found out a maximum rate of 77% of agreement between one of the teachers and the algorithms, but a minimum agreement of 75%. However, for most of the teachers, the maximum agreement rate was over 90% for at least one of the automatic strategies to compare code. We have also detected that the level of agreement among teachers regarding their personal strategies to compare students solutions was between 62% and 95%, which shows that there may be more agreement between a teacher and an algorithm than between a teacher and one of her colleagues regarding their strategies to compare students' solutions. The results also seem to support that comparison of students' codes has significant potential to be automated to help teachers in their work.	Can computers compare student code solutions as well as teachers?	NA:NA:NA	2014
Mario Guimaraes	NA	Session details: Gamification	NA	2014
Alexandru Iosup:Dick Epema	Technical universities, especially in Europe, are facing an important challenge in attracting more diverse groups of students, and in keeping the students they attract motivated and engaged in the curriculum. We describe our experience with gamification, which we loosely define as a teaching technique that uses social gaming elements to deliver higher education. Over the past three years, we have applied gamification to undergraduate and graduate courses in a leading technical university in the Netherlands and in Europe. Ours is one of the first long-running attempts to show that gamification can be used to teach technically challenging courses. The two gamification-based courses, the first-year B.Sc. course Computer Organization and an M.Sc.-level course on the emerging technology of Cloud Computing, have been cumulatively followed by over 450 students and passed by over 75% of them, at the first attempt. We find that gamification is correlated with an increase in the percentage of passing students, and in the participation in voluntary activities and challenging assignments. Gamification seems to also foster interaction in the classroom and trigger students to pay more attention to the design of the course. We also observe very positive student assessments and volunteered testimonials, and a Teacher of the Year award.	An experience report on using gamification in technical higher education	NA:NA	2014
Lassi Haaranen:Petri Ihantola:Lasse Hakulinen:Ari Korhonen	Achievement badges are increasingly used to enhance educational systems and they have been shown to affect student behavior in different ways. However, details on best practices and effective concepts to implement badges from a non-technical point of view are scarce. We implemented badges to our learning management system, used them on a large course and collected feedback from students. Based on our experiences, we present recommendations to other educators that plan on using badges.	How (not) to introduce badges to online exercises	NA:NA:NA:NA	2014
Briana B. Morrison:Betsy DiSalvo	Gamification is the buzzword for adding gaming elements such as points or badges to learning experiences to make them more engaging and to increase motivation. In this paper we explore how Khan Academy has incorporated gaming elements into its CS learning platform. By mapping the literature on motivational processes to popular games we critically analyze how successful Khan Academy is at gamifying their site.	Khan academy gamifies computer science	NA:NA	2014
Jodi Tims	NA	Session details: Software engineering: projects	NA	2014
Sonal Dekhane:Richard Price	In this paper we describe our initiative to incorporate research, professional practice and methodologies into two undergraduate software engineering courses. As part of the Undergraduate Research Experience (URE) initiative on our campus, we modified two of our core software engineering courses. In our Software Development II (junior level) and Software Development Project (senior level) courses we integrated research projects, corporate visits and research talks to develop a deeper understanding of software engineering research and practice amongst our students.	Course-embedded research in software development courses	NA:NA	2014
Daniel E. Krutz:Samuel A. Malachowsky:Thomas Reichlmayr	Although testing often accounts for 50% of the budget of a typical software project, the subject of software testing is often overlooked in computing curriculum. Students often view testing as a boring and unnecessary task, and education is usually focused on building software, not ensuring its quality. Previous works have focused on either making the subject of testing more exciting for students or on a more potent lecture-based learning process. At the Department of Software Engineering at the Rochester Institute of Technology, recent efforts have been focused on the project component of our Software Testing course as an area of innovation. Rather than previous methods such as a tightly controlled and repetitive testbed, our students are allowed to choose a real-world, open source project to test throughout the term. With the instructor as both counsel and client, students are expected to deliver a test plan, a final report, and several class-wide presentations. This project has achieved significant student praise; qualitative and quantitative feedback demonstrates both increased satisfaction and fulfilled curricular requirements. Students enjoy the real-world aspect of the project and the ability to work with relevant applications and technologies. This paper outlines the project details and educational goals.	Using a real world project in a software testing course	NA:NA:NA	2014
Claudia Szabo	Teaching software engineering through group-based project work supported by theory lectures is effective, as recognized by both academia and industry. However, exposing students to practical software maintenance is often overlooked in favor of building software from scratch under the guidance of a lecturer or client. The developed software is usually delivered to the lecturer/client and no maintenance efforts are further required. In contrast, industry projects require fresh graduates to perform maintenance exercises and very rarely to build software from scratch. To address this issue, existing software maintenance assignments usually focus on small codebases of very good quality, in which artificial issues are introduced. In this paper, we propose to enhance a group-based project course with a software maintenance assignment that uses a medium-sized, student-produced codebase with real software bugs. Our analysis shows the effectiveness of our approach and highlights future avenues for improvement.	Student projects are not throwaways: teaching practical software maintenance in a software engineering course	NA	2014
David Stucki	NA	Session details: Mathematical perspectives	NA	2014
Diego Zaccai:Aditi Tagore:Dustin Hoffman:Jason Kirschenbaum:Zakariya Bainazarov:Harvey M. Friedman:Dennis K. Pearl:Bruce W. Weide	Syrus is courseware designed with the goal of helping students better understand logical sentences involving quantifiers. Syrus uses template-guided mutation of "seed" formulas to generate candidate practice problems, and third-party theorem-provers to automatically determine the truth value of each. It provides students with a virtually unlimited supply of unique and relevant practice problems and provides immediate feedback on each problem. Results of an empirical study of its efficacy are reported.	Syrus: providing practice problems in discrete mathematics with instant feedback	NA:NA:NA:NA:NA:NA:NA:NA	2014
Maria Knobelsdorf:Christoph Kreitz:Sebastian B√∂hne	High failure rates in introductory courses on theoretical computer science are a common problem at universities in Germany, Europe, and North America, as students often have difficulties coping with the contents of such courses due to their abstract and theoretical nature. This paper describes modifications to the pedagogy of a theory course held at the University of Potsdam, Germany that are motivated by a cognitive apprenticeship approach and have led to a significant reduction of the course's failure rates. Since our approach is based on the typical infrastructure for teaching introductory computer science courses and does not require additional expenses or special resources, it can be replicated by other institutions. We believe that it is a serious contribution to better support teaching as well as student learning success in this field.	Teaching theoretical computer science using a cognitive apprenticeship approach	NA:NA:NA	2014
Jason Gorman:Sebastian Gsell:Chris Mayfield	Relational algebra provides a theoretical foundation for how modern database management systems optimize and execute queries. Its main concepts are based on set theory and first order logic, which can be challenging for students to learn due to their abstract nature. This paper presents Bags, a new type of visual programming environment (inspired by Snap!) for the teaching of relational operations and data analysis. Students formulate algebraic queries by snapping together graphical blocks that represent data sets and relational operators, resulting in an interactive visualization of the underlying concepts. The outcomes of this work will not only enhance university-level database courses, but also provide an engaging computational thinking resource for K-12 teachers in content areas outside of science and engineering.	Learning relational algebra by snapping blocks	NA:NA:NA	2014
Richard Brown	NA	Session details: Special Session	NA	2014
Richard A. Brown:Elizabeth Shoop:Joel C. Adams	The ACM-IEEE CS2013 curricular recommendations include a dramatic growth in parallel and distributed computing (PDC) topics, in response to the necessary industry shift toward multicore computing, and to emerging technologies such as cloud computing. How can your institution integrate those recommendations into your undergraduate CS curriculum? In this special session, leaders in PDC education will succinctly present their curricular strategies in relation to CS2013 recommendations, while attendees carry out a workshop-style activity to identify opportunities and assemble resources for blending more PDC content into their own local CS curricula.	Bringing CS2013 recommendations for parallel and distributed computing into your CS curriculum	NA:NA:NA	2014
Andrew McGettrick	NA	Session details: Special session	NA	2014
Andrew McGettrick:Lillian N. Cassel:Melissa Dark:Elizabeth K. Hawthorne:John Impagliazzo	This session reports on a workshop convened by the ACM Education Board with funding by the US National Science Foundation and invites discussion from the community on the workshop findings. The topic, curricular directions for cybersecurity, is one that resonates in many departments considering how best to prepare graduates to face the challenges of security issues in employment and future research. The session will include presentation of the workshop context and conclusions, but will be open to participant discussion. This will be the first public presentation of the results of the workshop and the first opportunity for significant response.	Toward curricular guidelines for cybersecurity	NA:NA:NA:NA:NA	2014
Jane Prey	NA	Session details: Special session	NA	2014
Jan Cuny:Jeffrey Forbes:Harriet Taylor:Valerie Barr:Victor Piotrowski:Jane Prey:Paul Tymann	This session will provide information about the current status of Federal budget as it impacts NSF and the computing community. Representatives from both Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates will provide the most up-to-date information about available funding opportunities. It is anticipated that the session will include information about the below listed programs plus others. In addition, proposal and review processes as well as strategies for writing competitive proposals will be discussed.	Understanding NSF funding	NA:NA:NA:NA:NA:NA:NA	2014
Netiva Caftori	NA	Session details: Engaging students through artistic expression	NA	2014
Jason Freeman:Brian Magerko:Tom McKlin:Mike Reilly:Justin Permar:Cameron Summers:Eric Fruchter	In this paper, we describe a pilot study of EarSketch, a computational remixing approach to introductory computer science, in a formal academic computing course at the high school level. The EarSketch project provides an integrated curriculum, Python API, digital audio workstation (DAW), audio loop library, and social sharing site. The goal for EarSketch is to broaden participation in computing, particularly by traditionally underrepresented groups, through a thickly authentic learning environment that has personal and industry relevance in both computational and artistic domains. The pilot results show statistically significant gains in computing attitudes across multiple constructs, with particularly strong results for female and minority participants.	Engaging underrepresented groups in high school introductory computing through computational remixing with EarSketch	NA:NA:NA:NA:NA:NA:NA	2014
Shaundra B. Daily:Alison E. Leonard:Sophie J√∂rg:Sabarish Babu:Kara Gundersen	n this paper, we introduce an embodied pedagogical approach for learning computational concepts, utilizing computational practices, and developing computational perspectives. During a five-week pilot, a group of students spent after-school time learning the basic elements of dance and then using them to program three-dimensional characters that could perform. Throughout the pilot, we found students consistently standing up in front of their computers and using their bodies to think through the actuation of their characters. Preliminary results suggest that designing a virtual-physical dance performance is a motivating and engaging social context in which to introduce students, especially girls, to alternative applications in computing.	Dancing alice: exploring embodied pedagogical strategies for learning computational thinking	NA:NA:NA:NA:NA	2014
Ashley Robinson:Manuel A. P√©rez-Qui√±ones	The computing profession is lacking representation that mirrors the fabric of society in the United States. Most studies show a low percentage of participation for women and minority groups. In this paper, we present our experiences conducting a week-long Human-Computer Interaction (HCI) workshop with underrepresented middle school girls. Our description is focused on an activity where girls created a paper prototype for a chat application. We present qualitative results showing characteristics of the prototypes built, and discuss the participant responses to a few of the questions in an interview at the end of the week. Our results reveal that paper prototyping can be used as a motivator for a career path in computer science. In spite of the negative stereotypes that the underrepresented females had prior to the intervention, the HCI workshop revealed a user-centric component of computer science that gave participants a positive perception of the discipline.	Underrepresented middle school girls: on the path to computer science through paper prototyping	NA:NA	2014
Sam Rebelsky	NA	Session details: Research: concept inventories & neo-piagetian theory	NA	2014
Kevin C. Webb:Cynthia Taylor	Operating systems courses often present students with multiple approaches to solve a problem, often with differing trade-offs. While students are more than capable of memorizing the details of these competing approaches, they often struggle to recommend a specific approach and analyze its implications. In particular, we find that students exhibit difficultly in interpreting text-based scenario descriptions in a way that allows them to correctly choose between potential solutions when presented with a high-level, conceptual scenario. In this paper, we describe the development of a pre- and post-course concept inventory, which we utilize to explore students' misconceptions of operating systems and their associated trade-offs. We compare the results of our assessment with in-class peer instruction questions and exam questions to characterize the areas in which students most commonly struggle with operating systems material.	Developing a pre- and post-course concept inventory to gauge operating systems learning	NA:NA	2014
Kuba Karpierz:Steven A. Wolfman	In this paper, we triangulate evidence for five misconceptions concerning binary search trees and hash tables. In addition, we design and validate multiple-choice concept inventory questions to measure the prevalence of four of these misconceptions. We support our conclusions with quantitative analysis of grade data and closed-ended problems, and qualitative analysis of interview data and open-ended problems. Instructors and researchers can inexpensively measure the impact of pedagogical changes on these misconceptions by using these questions in a larger concept inventory.	Misconceptions and concept inventory questions for binary search trees and hash tables	NA:NA	2014
Claudia Szabo:Katrina Falkner	The development of a coherent curriculum, encapsulating appropriate topics, learning materials and assessment, is crucial for a successful educational experience. However, designing such a curriculum is a complicated task, with challenges in tracing the development of concepts across multiple courses and ensuring that assessment is at an appropriate level at specific points in the curricula. In this paper, we introduce a curriculum mapping framework based on Neo-Piagetian theory that assists lecturers in tracing concept development and assessment throughout their courses. This framework supports the identification of prerequisite concepts, where students are already assumed to be aware of specific topics, and assessment leaps, where students are assessed at a different conceptual level than they have been taught. We illustrate the application of our framework through a case study analysing the syllabus of a sequence of three first year programming courses.	Neo-piagetian theory as a guide to curriculum analysis	NA:NA	2014
Susan Reeder	NA	Session details: Active learning	NA	2014
Barry L. Kurtz:James B. Fenwick:Rahman Tashakkori:Ahmad Esmail:Stephen R. Tate	Closed labs have provided hands-on experience for students under supervised conditions. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." We have tested this approach using tablets as small as 7 inches; student laptops can also be used. Logical microlabs allow students to solve a conceptual problem in computer science that does not involve any programming. Solutions are entered graphically and submitted for evaluation. Code magnet microlabs allow students to construct a method to solve the same problem programmatically. The code is compiled and, if successful, evaluated by a sequence of unit tests. These are integrated into a Microlab Learning Cycle of exploration (the logical microlab), invention (the instructor guides the students toward an algorithm during lecture), and application (the code magnet microlab). This approach has been evaluated at three universities and proven to be popular with students and educationally effective. This work is supported, in part, by three National Science Foundation grants.	Active learning during lecture using tablets	NA:NA:NA:NA:NA	2014
Helen H. Hu:Tricia D. Shepherd	The computer science community has started to experiment with process oriented guided inquiry learning, or POGIL, a learning approach that focuses on concept and process skills development by having students work together in organized teams. By emphasizing the learning process and group discussions, instructors who implement POGIL activities and roles in their classrooms may better address the different needs of their CS 1 students. After explaining how POGIL activities differ from other group activities, this paper elaborates on the importance of incorporating the learning cycle when developing a POGIL activity, so as to encourage rich group discussions and teamwork. It then describes the role of the instructor in a POGIL activity, and how POGIL roles need to be adapted for programming activities. It presents the results of using six POGIL activities in three CS 1 sections at a comprehensive liberal arts college, where the pass rate for female students increased compared to historical female pass rates for that class. Students who were introduced to recursion through a POGIL activity appear to have learned the material as well and retained the material better than students who learned recursion through a more traditional group activity.	Teaching CS 1 with POGIL activities and roles	NA:NA	2014
Michele Van Dyne:Jeffrey Braun	: In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors.	Effectiveness of a computational thinking (CS0) course on student analytical skills	NA:NA	2014
Krish Narayanan	NA	Session details: Big data	NA	2014
Yasin N. Silva:Suzanne W. Dietrich:Jason M. Reed:Lisa M. Tsosie	An important recent technological development in computer science is the availability of highly distributed and scalable systems to process Big Data, i.e., datasets with high volume, velocity and variety. Given the extensive and effective use of systems incorporating Big Data in many application scenarios, these systems have become a key component in the broad landscape of database systems. This fact creates the need to integrate the study of Big Data Management Systems as part of the computing curricula. This paper presents well-structured guidelines to perform this integration by describing the important types of Big Data systems and demonstrating how each type of system can be integrated into the curriculum. A key contribution of this paper is the description of an array of course resources, e.g., virtual machines, sample projects, and in-class exercises, and how these resources support the learning outcomes and enable a hands-on experience with Big Data technologies.	Integrating big data into the computing curricula	NA:NA:NA:NA	2014
Paul Anderson:James Bowring:Ren√©e McCauley:George Pothering:Christopher Starr	We describe Data Science, a four-year undergraduate program in predictive analytics, machine learning, and data mining implemented at the College of Charleston, Charleston, South Carolina, USA. We present a ten-year status report detailing the program's origins, successes, and challenges. Our experience demonstrates that education and training for big data concepts are possible and practical at the undergraduate level. The development of this program parallels the growing demand for finding utility in data sets and streaming data. The curriculum is a seventy-seven credit-hour program that has been successfully implemented in a liberal arts and sciences institution by the faculties of computer science and mathematics.	An undergraduate degree in data science: curriculum and a decade of implementation experience	NA:NA:NA:NA:NA	2014
Philip Sheridan Buffum:Allison G. Martinez-Arocho:Megan Hardy Frankosky:Fernando J. Rodriguez:Eric N. Wiebe:Kristy Elizabeth Boyer	Spurred by evidence that students' future studies are highly influenced during middle school, recent efforts have seen a growing emphasis on introducing computer science to middle school learners. This paper reports on the in-progress development of a new middle school curricular module for Big Data, situated as part of a new CS Principles-based middle school curriculum. Big Data is of widespread societal importance and holds increasing implications for the computer science workforce. It also has appeal as a focus for middle school computer science because of its rich interplay with other important computer science principles. This paper examines three key aspects of a Big Data unit for middle school: its alignment with emerging curricular standards; the perspectives of middle school classroom teachers in mathematics, science, and language arts; and student feedback as explored during a middle school pilot study with a small subset of the planned curriculum. The results indicate that a Big Data unit holds great promise as part of a middle school computer science curriculum.	CS principles goes to middle school: learning how to teach "Big Data"	NA:NA:NA:NA:NA:NA	2014
Monica McGill	NA	Session details: Games	NA	2014
Robert Don Collier:Jalal Kawash	The challenges that instructors face attempting to motivate novice programming students are amplified when the students are not pursuing degrees or careers in computer science. For the programming module of our course for non-computer science majors we assigned a video game programming deliverable that we expected would engage students and enhance their experiences. After extensive analyses of the survey responses of 245 enrolled students we were surprised to learn that, although the majority believed the game programming experience enhanced their learning overall, another majority reported that the project itself was not enjoyable. Through qualitative analysis we have identified several key areas that seem to have detracted from the overall level of enjoyment, and in this paper we follow this investigation with discussion surrounding how these issues could be remedied in the future. These recommended strategies will bolster student enjoyment and motivation in future offerings and we believe this discussion will prove very useful to other instructors planning to employ game programming components.	Lessons learned and recommended strategies for game development components in a computer literacy course	NA:NA	2014
Veronica Catet√©:Kathleen Wassell:Tiffany Barnes	This design research paper examines the implementation and curriculum changes of an after school computer science program that promotes computational thinking to middle school students. The program, Students in Programming, Robotics, and Computer Science (SPARCS), can adapt to different presentation environments, such as independent after school sessions or a semester-long apprenticeship program. We trace one implementation of the program through the initial deployment, the development of infrastructure, and a reorganization of content to address student interests. We found that student attrition dropped and the average session enjoyment increased when our sessions integrated consumer technologies such as mobile applications, video games, and the Minecraft computer game. In this paper, we provide readers a framework for running computing outreach activities around similar consumer technologies.	Use and development of entertainment technologies in after school STEM program	NA:NA:NA	2014
Jiangjiang Liu:Cheng-Hsien Lin:Joshua Wilson:David Hemmenway:Ethan Hasson:Zebulun Barnett:Yingbo Xu	Game design is becoming increasingly popular among K-12 teachers and students. In this paper, we present our experience, findings, and lessons learned from conducting a one-week Stencyl Game Design Summer Computing Workshop for K-12 teachers. Our workshop focused on introducing fundamental computing concepts to K-12 teachers using Stencyl, a drag-and-drop game development environment. During the workshop, the teachers developed curriculum games for the subjects they will teach in the following semesters with the help of our workshop tutors. Our assessment results show that the average score of Stencyl knowledge in the pre-workshop survey was 1.26 out of 5, which was increased to 3.76 in the post-workshop survey and the average score of computing knowledge was improved by 61%.	Making games a "snap" with Stencyl: a summer computing workshop for K-12 teachers	NA:NA:NA:NA:NA:NA:NA	2014
Mehran Sahami	NA	Session details: Panel session	NA	2014
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:Elizabeth K. Hawthorne:Amruth Kumar:Richard LeBlanc:David Reed:Remzi Seker	For over 40 years, the ACM and IEEE-Computer Society have sponsored international curricular guidelines for undergraduate programs in computing. The rapid evolution and expansion of the computing field and the growing number of topics in computer science have made regular revision of curricular recommendations necessary. Thus, the Computing Curricula volumes are updated on an approximately 10-year cycle, with the aim of keeping curricula modern and relevant. The latest volume in the series, Computer Science Curricula 2013 (CS2013), is due for release in the Fall of 2013. This panel seeks to inform the SIGCSE community about the final version of the report, provide insight on interpreting the CS2013 guidelines, and give guidance regarding how the guidelines may be implemented at different institutions.	ACM/IEEE-CS computer science curricula 2013: implementing the final report	NA:NA:NA:NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Rebecca Brook Osborne:Irene Lee:Bradley Beth:Jeff Gray	NA	Diverse learners, diverse courses, diverse projects: learning from challenges in new directions	NA:NA:NA:NA:NA	2014
Joseph Hollingsworth	NA	Session details: Special session	NA	2014
Joseph E. Hollingsworth:Murali Sitaraman	SIGCSE has for a long time nourished an audience excited about teaching mathematical reasoning principles across the curriculum through the Math Thinking Birds-of-a-Feather session and panels on mathematical reasoning. While these forums are useful for discussing reasoning topics, they do not provide a consistent venue for sharing math-reasoning activities to be used in the classroom. Therefore, SIGCSE attendees interested in math thinking have routinely wished for a place for discussing engaging math reasoning examples and assignments. Providing such a forum is the purpose of this session. The exercises and assignments will help faculty find ways to incorporate mathematical reasoning in CS1, CS2, data structures and algorithms, discrete math, and software engineering courses.	Special session: engaging mathematical reasoning exercises	NA:NA	2014
Shaileen Pokress	NA	Session details: Focus on K-12: growing the profession and professional development	NA	2014
Orit Hazzan:Noa Ragonis	The conference theme - "Leveraging Computing to Change Education" - focuses on the influence of computing on the way we educate at all levels. In this paper we highlight the conference theme from the perspective of computer science (CS) teacher preparation and describe the Views program, launched at the Technion -- Israel Institute of Technology, two year ago. Views invites Technion graduates back to the Technion to study toward an additional bachelor's degree in the Department of Education in Science and Technology. The degree they earn includes a high school teaching certificate in one of eight tracks: math, physics, biology, chemistry, CS, environmental sciences, electrical engineering, and mechanical engineering. Views students receive full study scholarships and are not required to commit to work in the education system after graduation. In the paper, we (a) present the Views program; (b) analyze factors that motivate and demotivate CS graduates to enroll in the program; (c) describe the characteristics of students in the program and their contribution to the learning environments and (d) address hopes with respect to the expected future impact of the Views program on the education system in Israel in general and on CS education in particular.	STEM teaching as an additional profession for scientists and engineers: the case of computer science education	NA:NA	2014
Scott Bell:Tim Frey:Eugene Vasserman	We present our experiences and outcomes from a programming camp held for sixth through ninth grade students. The instructional team included five pre-service teachers who earned field experience credit for this work, and one in-service teacher. The pre-service teachers were art and music teachers-in-training, providing an opportunity for us to utilize their creative expertise in developing content for the camp. In turn, we helped the teachers explore ways they might incorporate today's user-friendly programming environments (in this case, Scratch) into their curriculum. During each of four week-long sessions, the pre-service teachers gradually took over more teaching responsibilities, modifying and then presenting lessons that incorporate their own music and art expertise into the programming activities. Student pre-camp and post-camp surveys show that self-efficacy towards programming, enjoyment of programming, and interest in continuing to program increased over the course of the week-long sessions. Meanwhile, the teachers-in-training discovered they are capable of incorporating their subject matter into Scratch-based classroom activities, and teaching this material in a classroom setting. This is an encouraging demonstration of a way to introduce programming to the K-12 teaching community without overloading in-service teachers or requiring additional course work for pre-service teachers.	Spreading the word: introducing pre-service teachers to programming in the K12 classroom	NA:NA:NA	2014
Rahman Mitchel Tashakkori:Robert Mitchell Parry:Adam Benoit:Rebecca A. Cooper:Jessica L. Jenkins:Nicholas T. Westveer	Our department received funding from the National Science Foundation to establish a three-year Research Experience for Teachers site in Data Analysis & Mining, Visualization, and Image Processing. The objective is to provide twelve in-service high school teachers and community college faculty to work with faculty mentors and their graduate and undergraduate assistants to conduct research in these fields. During this six-week summer program, participants gain skills that they can utilize to assist their students to solve interdisciplinary problems. In addition, participants design learning modules to teach STEM concepts in their courses. The goal of our program is for teachers to bring knowledge of computer science and its application to their classroom exposing their students to computer science. This paper will share some of the activities of this experience.	Research experience for teachers: data analysis & mining, visualization, and image processing	NA:NA:NA:NA:NA:NA	2014
Carl Alphonce	NA	Session details: Design: courses and curricula	NA	2014
Fredrik Heintz:Inger Erlander Klein	In 2013 Link√∂ping University started the first 5-year engineering program in Computer Science and Software Engineering in Sweden. The goals of the program are to provide a holistic perspective on modern large scale software development, to provide a deep and broad understanding of computer science and computational thinking, and encourage innovation and entrepreneurship. The student response has been very good with more than 600 applicants to the 30 slots, of which more than 130 had this program as their first choice among all programs in Sweden. In this paper we present the goals, the design principles, and the resulting program. The ACM/IEEE CS Curricula has been used to make sure that the program provides a solid foundation in Computer Science. Three pedagogical ideas that we have used are (1) project courses to integrate theory and practice as well as provide experience with the most common form of working in industry; (2) courses that cover multiple programming paradigms and languages as well as multiple software development methodologies so that the students are prepared to take on the continual changes we know will come; and (3) a special course in engineering professionalism with groups of students from the first three years together reflecting on topics related to being a professional engineer. The paper concludes with a discussion about some important aspects such as computational thinking and the relation to the ACM/IEEE CS Curricula.	The design of Sweden's first 5-year computer science and software engineering program	NA:NA	2014
Guangzhi Zheeng:Chi Zhang:Lei Li	Business intelligence (BI) and healthcare analytics are emerging technologies that provide analytical capability to help healthcare industry improve service quality, reduce cost, and manage risks. However, such component on analytical healthcare data processing is largely missed from current healthcare information technology (HIT) or health informatics (HI) curricula. This paper conducts a preliminary analysis on how healthcare business intelligence can be incorporated into a HIT program. A general framework and several exemplar implementation strategies are presented. They can be used to guide the development and improvement of HIT curriculum.	Bringing business intelligence to healthcare informatics curriculum: a preliminary investigation	NA:NA:NA	2014
Jason O. Hallstrom:Cathy Hochrine:Jacob Sorber:Murali Sitaraman	This paper summarizes our experiences integrating topics in the software development fundamentals (SDF), programming languages (PL), and software engineering (SE) knowledge areas of the ACM 2013 curriculum within a single course. It is novel in combining object-oriented programming and software development practices with fundamental analytical reasoning about software correctness. The aim is to integrate and cover the topics in an effective fashion. The course description in this paper represents an approach we have applied successfully for over 5 years. Students tend to consider this course to be one of the more challenging encountered in the first two years of study. Interestingly, the challenge appears to stem equally from mastering object-oriented programming and design pattern components of the course, as it does from learning to use specifications for analytical reasoning of component correctness.	An ACM 2013 exemplar course integrating fundamentals, languages, and software engineering	NA:NA:NA:NA	2014
Don Blaheta	NA	Session details: Collecting and analyzing student data I	NA	2014
Barbara Ericson:Mark Guzdial	We examine the current state of computing education in the United States, in order to be able to identify problems in diversity and performance. Data on computing education are difficult to come by, since computer science courses are not tracked in US public education systems. By using a large and nationwide quantitative data source, we can gain new insights into who is participating in computing education, where the greatest need is, and what factors explain the variance between states. We used data from the Advanced Placement Computer Science A (AP CS A) exam to get a detailed view of the demographics of who is taking the exam across the United States and in each state, and how they are performing on the exam. We use economic and census data to provide explanations for some of the AP CS data. We find that minority group involvement is low in AP CS A, but the variance between states in terms of exam-takers is driven by minority group involvement. We find that wealth in a state influences the number of students taking the AP CS A exam, but indirectly.	Measuring demographics and performance in computer science education at a nationwide scale using AP CS data	NA:NA	2014
Neil Christopher Charles Brown:Michael K√∂lling:Davin McCall:Ian Utting	Automatically observing and recording the programming behaviour of novices is an established computing education research technique. However, prior studies have been conducted at a single institution on a small or medium scale, without the possibility of data re-use. Now, the widespread availability of always-on Internet access allows for data collection at a much larger, global scale. In this paper we report on the Blackbox project, begun in June 2013. Blackbox is a perpetual data collection project that collects data from worldwide users of the BlueJ IDE -- a programming environment designed for novice programmers. Over one hundred thousand users have already opted-in to Blackbox. The collected data is anonymous and is available to other researchers for use in their own studies, thus benefitting the larger research community. In this paper, we describe the data available via Blackbox, show some examples of analyses that can be performed using the collected data, and discuss some of the analysis challenges that lie ahead.	Blackbox: a large scale repository of novice programmers' activity	NA:NA:NA:NA	2014
Kenny Heinonen:Kasper Hirvikoski:Matti Luukkainen:Arto Vihavainen	A large body of systems that gather data on students' programming process exists, and with the increase of massive open online courses in programming, the amount of gathered data is growing even at a higher rate. A common issue for data analysis is the lack of common tools for visualizing source code snapshots. We have created a browser-side snapshot analysis tool called CodeBrowser that provides a clean REST API that anyone can integrate their snapshot data into. In this article, we describe CodeBrowser and as an example, discuss how it has been used to seek differences between novice programmers that have passed (n=10) or failed (n=10) an introductory programming course.	Using CodeBrowser to seek differences between novice programmers	NA:NA:NA:NA	2014
Robert Lutz	NA	Session details: Tactile computing	NA	2014
Raghuraman Balasubramanian:Zachary York:Matthew Doran:Aritra Biswas:Timur Girgin:Karthikeyan Sankaralingam	This paper details the creation of a hands-on introduction course that reflects the dramatic growth and diversity in computer science. Our aim was to enable students to get an end-to-end perspective on computer system design by building one. We report on a two-year exercise in using the Arduino platform to build a series of hands-on projects. We have used these projects in two course instances, and have obtained detailed student feedback, which we analyze and present in this paper. The instructions, code and videos developed are available open-source.	Hands-on introduction to computer science at the freshman level	NA:NA:NA:NA:NA:NA	2014
Yasmin Kafai:Kristin Searle:Cr√Æstobal Martinez:Bryan Brayboy	There have been many efforts to increase access and participation of indigenous communities in computer science education using ethnocomputing. In this paper, we extend culturally responsive computing by using electronic textiles that leverage traditional crafting and sewing practices to help students learn about engineering and computing as they also engage with local indigenous knowledges. Electronic textiles include sewable microcontrollers that can be connected to sensors and actuators by stitching circuits with conductive thread. We present findings from a junior high Native Arts class and an academically-oriented summer camp in which Native American youth ages 12-15 years created individual and collective e-textile designs using the LilyPad Arduino. In our discussion we address how a culturally responsive open design approach to ethnocomputing with e-textile activities can provide a productive but also challenging context for design agency and cultural connections for American Indian youth, and how these findings can inform the design of a broader range of introductory computational activities for all.	Ethnocomputing with electronic textiles: culturally responsive open design to broaden participation in computing in American indian youth and communities	NA:NA:NA:NA	2014
Shaun K. Kane:Jeffrey P. Bigham	Introductory programming activities for students often include graphical user interfaces or other visual media that are inaccessible to students with visual impairments. Digital fabrication techniques such as 3D printing offer an opportunity for students to write programs that produce tactile objects, providing an accessible way of exploring program output. This paper describes the planning and execution of a four-day computer science education workshop in which blind and visually impaired students wrote Ruby programs to analyze data from Twitter regarding a fictional ecological crisis. Students then wrote code to produce accessible tactile visualizations of that data. This paper describes outcomes from our workshop and suggests future directions for integrating data analysis and 3D printing into programming instruction for blind students.	Tracking @stemxcomet: teaching programming to blind students via 3D printing, crisis management, and twitter	NA:NA	2014
Rajeev Agrawal	NA	Session details: Projects and capstone courses	NA	2014
Maria Vasilevskaya:David Broman:Kristian Sandahl	Larger project courses, such as capstone projects, are essential in a modern computing curriculum. Assessing such projects is, however, extremely challenging. There are various aspects and tradeoffs of assessments that can affect the quality of a project course. Individual assessments can give fair grading of individuals, but may loose focus of the project as a group activity. Extensive teacher involvement is necessary for objective assessment, but may affect the way students are working. Continuous feedback to students can enhance learning, but may be hard to combine with fair assessment. Most previous work is focusing on some specific assessment aspect, whereas we in this paper present an assessment model that consists of a collection of assessment activities, each covering different aspects. We have applied, developed, and improved these activities during a six-year period and evaluated their usefulness by performing a questionnaire-based survey.	An assessment model for large project courses	NA:NA:NA	2014
Christopher Brown:Robert Pastel:Marika Seigel:Charles Wallace:Linda Ott	This HCI course incorporated unit testing as a quality improvement initiative with an Experiential Learning Model. The focus of the research was on observation and conceptualization---students should be able to associate the benefits of usability and unit testing and apply them to more general situations. Based on our survey results and student interviews, the most difficult challenge incorporating unit testing in an experiential course was ensuring students overcome their negative bias to discover the benefits of functional testing. We recommend emphasizing the concrete benefits of unit tests and ensuring that all students fully participate in the testing experience.	Adding unit test experience to a usability centered project course	NA:NA:NA:NA:NA	2014
Aaron Bloomfield:Mark Sherriff:Kara Williams	We present the design and execution of a Service Learning Practicum (SLP) course sequence intended to be year-long capstone for computer science seniors. Students are teamed into groups of six, and develop software for local nonprofit organizations. In addition to the structure of the course, we describe the challenges faced (legal, organizational, etc.), student perceptions via survey results, and provide a number of suggestions for other institutions who are looking to create a similar course sequence. At the end of the cap- stone experience, the customers are provided with working software that meet their current needs.	A service learning practicum capstone	NA:NA:NA	2014
Richard Ladner	NA	Session details: Panel session	NA	2014
Richard E. Ladner:Jillian Hall:Samir Jain:CeAhna Lathon:Vincent Martin	A panel of college students with disabilities who are computing majors or have taken multiple computing courses will describe their experiences both in and out of the classroom. The goal of the panel is to provide the audience with an opportunity to hear first-hand how their educational needs were met as non-traditional computing students. In addition to the panelists' short presentations, the moderator will facilitate a dialog between the members of the audience and the panelists.	Panel of computing students with disabilities	NA:NA:NA:NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Jennifer Campbell:Rebecca Dovi:Cay Horstmann	In his keynote at SIGCSE 2007, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following six SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to trumpet. What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. While the initial PBJA sessions evolved from a need to understand and combat the enrollment crisis of eight years ago, we are now seeing an incredible resurgence in interest in our field, partially because --coders are hip and computer science is hot?. There are colleges where the numbers have exceeded historic highs, and some rightfully claim the crisis is over. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun for beginners. In the past, we either tried to gather educators who brought a wide variety of perspectives, who would focus on a particular issue, or who have instituted very creative and successful paths into the major. This year we have gathered three seasoned educators who have taken the leap and built online classes for introductory computing on three different platforms. What innovative ideas did they employ to support collaboration? Does the need to auto-grade mean students can no longer choose their own final projects, and how does that stifle PBJA? Do these auto-graded formative assessments feel like drill-and-kill? The hope with this panel is to explore how online offerings, in these crucial early years, extol (and perhaps suppress!) the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 7	NA:NA:NA:NA	2014
Scott Grissom	NA	Session details: Special session	NA	2014
Scott Grissom:Christopher Hundhausen:Phillip Conrad	This session will demonstrate best practices for introducing peer instruction and pedagogical code reviews into the computer science classroom. Presenters play the role of instructors on the first day of class. Audience members play the role of students as they collaborate on a variety of sample activities. By providing models of active learning in computing contexts, we seek to motivate instructors to adopt these pedagogies in their classrooms. Sufficient time will be reserved for questions and discussion.	Alternatives to lecture: experience peer instruction and pedagogical code reviews	NA:NA:NA	2014
David Levine	NA	Session details: CS2	NA	2014
Joel C. Adams	In today's multicore world, every CS student should learn about and gain experience with (at least) shared-memory parallelism. CS Curriculum 2013 acknowledges this by shifting parallel computing from elective status into the core. This paper argues that students should be introduced to parallelism early, that the CS2 (Data Structures) course is a natural place to do so, and reports our experience in doing this. The paper also argues that students should be taught to solve problems using parallel patterns, which are industry-standard best-practice strategies for parallel problem solving. To support such teaching, the paper presents patternlets -- minimalist, scalable, executable programs, each illustrating the behavior of a parallel pattern -- as a useful pedagogical tool for teaching parallel concepts. Several patternlets and their executions are given. The paper presents evidence that this injection of parallelism into CS2 has been successful.	Injecting parallel computing into CS2	NA	2014
Ivona Bezakova:James Heliotis:Sean Strout	We report on a study comparing an open-ended freshman-level CS2 project with a fully specified project of similar difficulty. We employed a randomized, controlled trial methodology. The students needed to use similar data structures and algorithms, presented during lectures, for both projects. The first half of the milestones were almost identical for both groups, but the open-ended project asked students to develop a player strategy for a specific board game, while in the other project the students executed the game by communicating with the player modules and verifying the moves against the rules of the game. In the final stages of the project while one group of students worked on honing their own strategy, the other students implemented a pre-specified tie breaking mechanism used when two player strategies tie in a match. At the end of the term, both groups had a friendly tournament: the player strategies faced each other for the ultimate winner while the other group's submissions were ranked by a team of judges based on the implementation's correctness and style. The tournament was just for fun - it did not contribute to the final grade. We hypothesized that the player group would enjoy the project more, would score higher, and would be better motivated and equipped to study computer science. Our study confirmed higher enjoyment and interest of the study group participants. We did not observe statistically significant differences among other measured quantities, or example grade distribution, of the respective groups.	On the efficacy of board game strategy development as a first-year CS project	NA:NA:NA	2014
Austin Cory Bart:Eli Tilevich:Simin Hall:Tony Allevato:Clifford A. Shaffer	While computing is becoming increasingly distributed, programming projects in introductory classes remain mostly divorced from the student's day-to-day computing experiences. These experiences entail interacting with real-time Web-based data from sources that include weather reports, news updates, and restaurant recommendations. The disconnect between student experiences and the content of their programming projects is known to drive some students away from computing. In addition, to adequately prepare students for the realities of modern software engineering, educators should introduce issues pertaining to distributed computing early in the curriculum. To address these problems, we have created RealTimeWeb - an architectural framework that makes real-time web data accessible for introductory programming projects. The framework effectively introduces important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. Preliminary results indicate that our approach can be effective in the context of a typical CS2 course, and that real-time data is relevant to students. RealTimeWeb libraries and associated resources are publicly available for use, with multiple language bindings to many real-time data sources. A rapid-prototyping tool available through the project's website facilitates the development of client libraries with easily accessible APIs for new real-time Web-based data sources.	Transforming introductory computer science projects via real-time web data	NA:NA:NA:NA:NA	2014
Ria Galanos	NA	Session details: Assessment and evaluation	NA	2014
Leo Porter:Daniel Zingaro	It is generally assumed that early success in CS1 is crucial for success on the exam and course as a whole. Particularities of students, densely-connected CS1 content, and recurring core topics each suggest that it is difficult to rebound from early misunderstandings. In this paper, we use Peer Instruction (PI) data, in addition to exam data, to explore relationships between in-class assessments and performance at the end of term and on the exam. We find that early course performance very quickly and strongly predicts performance on the final exam and that subsequent weeks provide no major increase in that predictive power. In contrast, early performance is similarly predictive of performance in the last weeks of PI questions, but subsequent weeks are increasingly more predictive. We speculate on what this means for the content of these assessments and potential future assessment practices.	Importance of early performance in CS1: two conflicting assessment stories	NA:NA	2014
Don Blaheta	Traditional processes for homework assignments are not always a good fit for the sorts of problems often seen in computer science classes. We present our experiences in implementing policies designed to encourage students to involve the instructor and fellow students in their learning process. By shifting to group assignments and permitting students a revision cycle, we improve student satisfaction and maintain or increase student outcomes while decreasing the instructor's grading load.	Reinventing homework as cooperative, formative assessment	NA	2014
Jennifer Campbell:Diane Horton:Michelle Craig:Paul Gries	This case study explores an inverted classroom offering of an introductory programming course (CS1). Students prepared for lecture by watching short lecture videos and completing required in-video quiz questions. During lecture, the students worked through exercises with the support of the instructor and teaching assistants. We describe the course implementation and its assessment, including pre- and post-course surveys. We also discuss lessons learned, modifications that we plan to make for the next offering, and recommendations for others teaching inverted courses.	Evaluating an inverted CS1	NA:NA:NA:NA	2014
Peter DePasquale	NA	Session details: Classroom management	NA	2014
Andy Sayler:Dirk Grunwald:John Black:Elizabeth White:Matthew Monaco	Higher education is facing a paradigm shift in the ownership and use of computer hardware. The school computer lab is no longer the primary place of student computer use. Instead, students increasingly expect to use their own hardware to complete their school assignments. This creates a challenge for computer science educators: we must now support a wide range of heterogeneous hardware without the benefits of tight control over its use. To address this ``Bring-Your-Own-Device'' (BYOD) challenge, we leverage virtualization and software packaging systems to gracefully deploy and support a standardized development environment for all core CS courses across a range of both school-owned and student-owned computing devices. We have deployed and evaluated our system for the previous two years at scale and continue to actively use and develop it. It has effectively helped us support multiple classes comprising hundreds of students with very limited IT staffing. We describe the design and management of our system, present our experience using our system, and discuss the lessons we've learned. We also provide data reflecting current student user experience with our system. Our system has proven very effective in addressing the student BYOD challenge in a manageable, cost-efficient, and easy-to-use manner.	Supporting CS education via virtualization and packages: tools for successfully accommodating "bring-your-own-device" at scale	NA:NA:NA:NA:NA	2014
Lecia J. Barker:Melissa O'Neill:Nida Kazim	Despite the best laid plans, counterproductive student behavior can interfere with faculty establishment of supportive classroom climates. This paper describes methods for framing the climate of the computer science classroom to minimize outspoken students' unwanted displays of intellectual prowess and engender co-learning behavior among students. Explicit framing of a supportive climate reduces student anxiety about their status among peers, leads them to expect to co-learn concepts, and reduces trepidations about speaking up in class. The framing is grounded by preemptively establishing expectations and addressing concerns through student discussion; asking students to go outside of their interaction style comfort zones for speaking in class; and explicitly describing teaching choices and classroom processes. The framing is reinforced by exposing wrong answers as useful rather than embarrassing, turn-taking techniques for equal student participation, and collaborative learning for assignments and in-class problem solving. Classroom-based retention techniques are important for retaining students who are less experienced with computer science and unsure how to interpret peers? public knowledge claims in relation to their own knowledge or faculty expectations.	Framing classroom climate for student learning and retention in computer science	NA:NA:NA	2014
Don Davis:Timothy Yuen:Matthew Berland	This paper discusses two case studies of students observed in an introductory computer science (CS1) course. Observations reinforce notions of the potential benefits of culturally and personally relevant instruction in the computer science (CS) classroom and call into question the stigmatization of 'nerd' culture within the literature of CS education. As this study is qualitative and exploratory in nature, it does not provide definitive, statistically generalizable findings -- however, it does unearth nuanced and potentially beneficial pathways of investigation for CS educators and researchers that many quantitative methods might miss. Specifically, observations highlight potential benefits of supporting students' perceptions of more diverse CS identities including broader understandings of the "CS nerd" identity.	Multiple case study of nerd identity in a CS1 class	NA:NA:NA	2014
Jill Pala	NA	Session details: Focus on K-12: middle school	NA	2014
Caitlin Hulsey:Toni B. Pence:Larry F. Hodges	In this paper we report on the design and results of a one-week, residential summer camp experience that introduced computing concepts to middle school girls in the context of an online, multiplayer, virtual world known as the Curiosity Grid. In contrast to programming environments designed specifically as teaching tools to introduce children to programming, virtual world programming exposes novice learners to a more representative computer science experience. Students write real code and get real syntax errors when their code is not correct. They also design objects in a three-dimensional world where knowledge of mathematical concepts such as 3-D global and local coordinate systems, and 3-D transformations are important to the creation of objects and behaviors. Programming artifacts from the camp and feedback from the camp participants provide a strong argument that middle school girls can handle the challenge of this approach and even be enthusiastic about it.	Camp CyberGirls: using a virtual world to introduce computing concepts to middle school girls	NA:NA:NA	2014
Elizabeth Schofield:Michael Erlinger:Zachary Dodds	This paper describes the MyCS curriculum, which aims to encourage middle-years students, i.e., grades 4-10, to engage not only as consumers of CS, but as composers of computational artifacts. MyCS draws from many successful online tools and curricula, including Exploring Computer Science (ECS) and Scratch. MyCS's 18-week curriculum balances a broad treatment of the modern role of the computer with deepening students' hands-on skills through computational problem-solving, both unplugged and via programming. This paper summarizes assessments from several MyCS professional-development workshops, with an emphasis on eliciting teachers' needs and goals for their classrooms. In addition, we discuss the project's future in the format of a teacher-mediated MOOC that will enable a larger group of teachers to engage their students in CS.	MyCS: CS for middle-years students and their teachers	NA:NA:NA	2014
Shuchi Grover:Roy Pea:Stephen Cooper	Past research extensively points to gross misperceptions of the discipline of Computer Science among students in middle and high school. As efforts to introduce computing education in K-12 gains traction in tandem with initiatives that address issues of interest and attitudes towards CS, misperceptions of computing as a discipline must also be addressed as early as middle school, which is known to be a key time for identity building. This paper shares the results of a curricular intervention that aims to show CS to students in a new light - in real world contexts and as a creative and problem-solving discipline; as something bigger and broader than the "computer-centric" view that students are known to harbor.	Remedying misperceptions of computer science among middle school students	NA:NA:NA	2014
Sarah Heckman	NA	Session details: Soft skills: industry perspectives	NA	2014
Mark E. Hoffman:Paul V. Anderson:Magnus Gustafsson	A recent study of new software developers at Microsoft reveals the significance and integration of communication skills in their daily tasks. While the literature offers a variety of approaches to promote the integration of communication skills into the Computer Science curriculum, a discrepancy remains between what students get and what they need. In this paper, we propose using workplace scenarios that integrate communication skills with technical content situated in and mediating workplace activity. Workplace scenarios are based on an analysis of the workplace as an activity system. Guidelines for implementing workplace scenarios are provided. A case study analyzes the integration of communication skills with technical content using workplace scenarios in a software development course.	Workplace scenarios to integrate communication skills and content: a case study	NA:NA:NA	2014
Marisa Exter	This paper reports on part of the findings of a mixed-methods study which explored the educational experiences of Computing Professionals who design and develop educational software. A particular focus is given on the gaps professionals perceive between what was covered in their formal (university) education and the skills and knowledge that have been most important to them in their professional roles. Discrepancies were found particularly in areas related to practical skills (such as testing, maintaining code over time, use of source code control and development tools), communication, critical thinking and problem solving, and strategies used to continue learning on-the-job. Participant suggestions for improving university programs focused largely on the use of large scale, complex, authentic projects of significant duration. The author recommends further consideration be given to explicitly teaching the type of self-learning skills and strategies used by experienced professionals.	Comparing educational experiences and on-the-job needs of educational software designers	NA	2014
Mark Zarb:Janet Hughes:John Richards	A set of industry-inspired pair programming guidelines have been derived from qualitative examinations of expert pairs in order to aid novice programmers with their intra-pair communication. This research describes the evaluation of these guidelines with a set of student pairs, and demonstrates how novice pairs who were exposed to the guidelines were more comfortable communicating within their pairs.	Evaluating industry-inspired pair programming communication guidelines with undergraduate students	NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
David Reed:Andrea Danyluk:Elizabeth K. Hawthorne:Mehran Sahami:Henry M. Walker	NA	Experiences mapping and revising curricula with CS2013	NA:NA:NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
Erin Mindell:Karen Brennan:Gwendolyn Britton:Jennifer S. Kay:Jennifer Rosato	CS4HS (Computer Science for High School) is an initiative sponsored by Google to promote Computer Science and Computational Thinking in high school and middle school curricula. In the past, workshops were offered in a face-to-face format; however, this left many K-12 computer science teachers unable to attend a workshop in their geographical region. During the 2013 round of funding, Google funded the creation of 4 workshops to be delivered in an online format, open to teachers across the United States and beyond. The panelists will share their experiences with development and deployment of large scale workshops that aim to fill the gap in professional development for K-12 computer science teachers.	CS professional development MOOCs	NA:NA:NA:NA:NA	2014
Annemieke Craig	NA	Session details: Panel session	NA	2014
Annemieke Craig:Catherine Lang:Michail N. Giannakos:Carsten Kleiner:Judith Gal-Ezer	There is a growing awareness of the importance of including computing education in the curriculum of secondary schools in countries like the United States of America, the United Kingdom, New Zealand, and South Korea. Consequently, we have seen serious efforts to introduce computing education to the core curriculum and/or to improve it. Recent reports (such as Wilson et al. 2010; Hubwieser et al. 2011) reveal that computing education faces problems regarding its lack of exposure as well as a lack of motivators for students to follow this line of study. Although students use computers for many tasks both at home and at school, many of them never quite understand what computer science is and how it relates to algorithmic thinking and problem solving. This panel will bring together leaders in computing education from Australia, Germany, Greece, Israel and Norway to describe the state of computing education in each of their countries. Issues raised will include how high school computer education is conducted in that country, how teachers are skilled /accredited, the challenges that are being faced today and how these challenges are being addressed. Panellists will suggest lessons other countries may find of value from their way of doing things. An important issue is how to recruit female students in to computer education at high school level and how to encourage them to continue in the discipline to university. The problem is exacerbated because computer education is still not included as a compulsory subject in the regular curriculum of high schools in all of these countries	Looking outside: what can be learnt from computing education around the world?	NA:NA:NA:NA:NA	2014
Jian Zhang	NA	Session details: Peer instruction	NA	2014
Daniel Zingaro	Recent work in computing suggests that Peer Instruction (PI) is a valuable interactive learning pedagogy: it lowers fail rates, increases retention, and is enjoyed by students and instructors alike. While these findings are promising, they are somewhat incidental if our goal is to understand whether PI is "better" than lecture in terms of student outcomes. Only one recent study in computing has made such a comparison, finding that PI students outperform traditionally-taught students on a CS0 final exam. That work was conducted in a CS0, where the same instructor taught both courses, and where the only outcome measure was final exam grade. Here, I offer a study that complements their work in two ways. First, I argue for and measure self-efficacy as a valued outcome, in addition to that of final exam grade. Second, I offer an inter-instructor CS1 study, whose biases differ from those of intra-instructor studies. I find evidence that PI significantly increases self-efficacy and suggestively increases exam scores compared to a traditional lecture-based CS1 class. I note validity concerns of such an in-situ study and offer a synthesis of this work with the extant PI literature.	Peer instruction contributes to self-efficacy in CS1	NA	2014
Christine Alvarado:Cynthia Bailey Lee:Gary Gillespie	New CS1 curricula and pedagogies have resulted in many positive outcomes over the last several years including lower fail rates and increased long-term retention. Given these positive outcomes, the question becomes how much do the traditional factors of prior experience and confidence still play a role in students' performance in and attitudes about these courses' Furthermore, given that increasingly recommended collaborative pedagogies (e.g. pair programming) force students to interact with their peers for a large percentage of their work in the class, how much does the confidence of their peers affect their own attitudes and performance? This paper presents a study investigating these questions. We find that prior experience and confidence still predict success, but only for some students. We also find that student confidence levels have little to no impact on the attitudes and performance of their peers.	New CS1 pedagogies and curriculum, the same success factors?	NA:NA:NA	2014
Zhen Li:Eileen Kraemer	We conducted an observational case study of pair programmers and solo programmers in a challenging, time-limited programming exam in a split level course at the University of Georgia during the spring semester of 2013. Although we observed no significant difference in performance on the exam, we found that pair programming promoted the early application of critical thinking in the process of solving a challenging programming task. Specifically, the pair programmers were found to conduct more critical thinking and to ask important questions in the program design phase while solo programmers postponed the same required thinking activity and associated questions until the testing and debugging phase. We attribute the solo programmer's failure to delve into the difficult questions to the phenomenon of "bounded rationality" and propose that the social effects of pair programming serve to mitigate this phenomenon with the result that the pair programmers' behaviors better align with good software engineering practices and promote the acquisition of expertise.	Social effects of pair programming mitigate impact of bounded rationality	NA:NA	2014
Cam MacDonell	NA	Session details: Software engineering: courses	NA	2014
Andres Neyem:Jose I. Benedetto:Andres F. Chacon	Software Engineering is an important area within industry and academia. Empirical software engineering has grown in importance in the software engineering research and education community. This means that it has become very relevant to include empirical studies or practices into computer science and software engineering curricula. This paper shows the results of applying an empirical approach to teaching software engineering through real-life projects. The computer science capstone experience is designed to bridge the gap from university expectations to those of industry.	Improving software engineering education through an empirical approach: lessons learned from capstone teaching experiences	NA:NA:NA	2014
Therese Mary Smith:Robert McCartney:Swapna S. Gokhale:Lisa C. Kaczmarczyk	Aspiring software engineers must be able to comprehend and evolve legacy code, which is challenging because the code may be poorly documented, ill structured, and lacking in human support. These challenges of understanding and evolving existing code can be illustrated in academic settings by leveraging the rich and varied volume of Open Source Software (OSS) code. To teach SE with OSS, however, it is necessary to select uniform projects of appropriate size and complexity. This paper reports on our search for suitable OSS projects to teach an introductory SE course with a focus on maintenance and evolution. The search turned out to be quite labor intensive and cumbersome, contrary to our expectations that it would be quick and simple. The chosen projects successfully demonstrated the maintenance challenges, highlighting the promise of using OSS. The burden of selecting projects, however, may impede widespread integration of OSS into SE and other computing courses.	Selecting open source software projects to teach software engineering	NA:NA:NA:NA	2014
Claudia Szabo	Academia and industry recognize the effectiveness of teaching Software Engineering through group-based project work supported by lectures discussing software engineering theory. However, while undertaking such project work, only a very small number of students in the team are exposed to team leadership and project management. This is because teams usually struggle with organization and timely task completion, and there is usually no time left to rotate leadership roles. To alleviate this problem, several gaming approaches have been proposed. In this paper, we analyze GameDevTycoon, the most recent addition to such games. We include a gameplay and reflection component in our group-based project course and perform a quantitative analysis of a team management and leadership aspects that the students encountered during their gameplay. We further compare and evaluate GameDevTycoon against five other software engineering-focused games. Our analysis shows the advantages and disadvantages of using GameDevTycoon for teaching project management and highlight further directions towards better inclusion in the curriculum.	Evaluating GameDevTycoon for teaching software engineering	NA	2014
John Dooley	NA	Session details: Web-based instruction	NA	2014
Radu P. Mihail:Beth Rubin:Judy Goldsmith	Asynchronous online discussions are considered the cornerstone of online education. Many instructors of face-to-face courses are "web-enabling" their classes to improve learning through critical inquiry using online discussions. In this exploratory study, we collected and analyzed online discussion data from two dissimilar computer science courses (one technical Graphics for Gaming (G4G) course and a writing intensive Science Fiction and Ethics (SF&E) course). Our findings suggest that, overall, making more posts, posting more questions and engaging in Devil's Advocacy have positive effects on learning, while making more informational posts, explaining to others and making longer posts do not. In the SF&E course, all students perceive that posting helped their learning, while in the G4G course students do not, but posting behavior differentiates those who perform well from those who perform poorly.	Online discussions: improving education in CS?	NA:NA:NA	2014
Luca de Alfaro:Michael Shavlovsky	CrowdGrader is a system that lets students submit and collaboratively review and grade homework. We describe the techniques and ideas used in CrowdGrader, and report on the experience of using CrowdGrader in disciplines ranging from Computer Science to Economics, Writing, and Technology. In CrowdGrader, students receive an overall crowd-grade that reflects both the quality of their homework, and the quality of their work as reviewers. This creates an incentive for students to provide accurate grades and helpful reviews of other students' work. Instructors can use the crowd-grades as final grades, or fine-tune the grades according to their wishes. Our results on seven classes show that students actively participate in the grading and write reviews that are generally helpful to the submissions' authors. The results also show that grades computed by CrowdGrader are sufficiently precise to be used as the homework component of class grades. Students report that the main benefits in using CrowdGrader are the quality of the reviews they receive, and the ability to learn from reviewing their peers' work. Instructors can leverage peer learning in their classes, and easily handle homework evaluation in large classes.	CrowdGrader: a tool for crowdsourcing the evaluation of homework assignments	NA:NA	2014
John DeNero:Stephen Martinis	We describe an effort to improve the composition quality of student programs: the property that a program can be understood effectively by another person. As a semester-long component of UC Berkeley's first course for majors, CS 61A, we gave students composition guidelines, scores, and qualitative feedback-all generated manually by a course staff of 10 graders for over 700 students. To facilitate this effort, we created a new online tool that allows instructors to provide feedback efficiently at scale. Our system differs from recently developed alternatives in that it is a branch of an industrial tool originally developed for internal code reviews at Google and used extensively by the open-source community. We found that many of the features designed for industrial applications are well-suited for instructional use as well. We extended the system with permissions controls and comment memories tailored for giving educational feedback. Using this tool improved the consistency of the feedback we gave to students, the efficiency of generating that feedback, and our ability to communicate that feedback to students. Emphasizing composition throughout the course improved the composition of our students' code. The quality of student programs improved by a statistically significant margin (p<0.01) over those from a previous semester, measured by a blind comparison of student submissions.	Teaching composition quality at scale: human judgment in the age of autograders	NA:NA	2014
Alvaro Monge	NA	Session details: Recruitment and retention of underrepresented groups	NA	2014
An-I Andy Wang:Gary Tyson:David Whalley:Robert van Engelen:Zhenghao Zhang	Computer science Ph.D. training provides numerous opportunities to prepare doctoral graduates to write research grant proposals. However, writing scholarship grant proposals is a very different process, and a newcomer might go through many attempts before obtaining their first awarded grant. This paper documents our four proposal submissions prior to acquiring our first NSF S-STEM grant for the Department of Computer Science at Florida State University. This paper also highlights major issues to consider when writing such proposals. We hope that future newcomers will be able to avoid some of the pitfalls we encountered in obtaining scholarship grants of a similar nature.	A journey toward obtaining our first NSF S-STEM (scholarship) grant	NA:NA:NA:NA:NA	2014
Tia Newhall:Lisa Meeden:Andrew Danner:Ameet Soni:Frances Ruiz:Richard Wicentowski	In line with institutions across the United States, the Computer Science Department at Swarthmore College has faced the challenge of maintaining a demographic composition of students that matches the student body as a whole. To combat this trend, our department has made a concerted effort to revamp our introductory course sequence to both attract and retain more women and minority students. The focus of this paper is the changes instituted in our Introduction to Computer Science course (i.e., CS1) intended for both majors and non-majors. In addition to changing the content of the course, we introduced a new student mentoring program that is managed by a full-time coordinator and consists of undergraduate students who have recently completed the course. This paper describes these efforts in detail, including the extension of these changes to our CS2 course and the associated costs required to maintain these efforts. We measure the impact of these changes by tracking student enrollment and performance over 13 academic years. We show that, unlike national trends, enrollment from underrepresented groups has increased dramatically over this time period. Additionally, we show that the student mentoring program has increased both performance and retention of students, particularly from underrepresented groups, at statistically significant levels.	A support program for introductory CS courses that improves student performance and retains students from underrepresented groups	NA:NA:NA:NA:NA:NA	2014
Barbara Ericson:Shelly Engelman:Tom McKlin:Ja'Quan Taylor	This paper describes Project Rise Up 4 CS, an attempt to increase the number of Black students in Georgia that pass the Advanced Placement (AP) Computer Science (CS) A exam. In 2012 Black students had the lowest pass rates on the AP CS A exam both in Georgia and nationally. Project Rise Up 4 CS provided Black students with role models, hands-on learning, competitions, a financial incentive, and webinars on AP CS A content. The first cohort started in January of 2013 and finished in May 2013. Of the 27 students who enrolled in the first cohort, 14 met all of the completion requirements, and 9 (69%) of the 13 who took the exam passed. For comparison, in 2012 only 22 (16%) of 137 Black students passed the exam in Georgia. In 2013, 28 (22%) of 129 Black students passed the exam in Georgia. This was the highest number of Black students to pass the AP CS A exam ever in Georgia and a 27% increase from 2012. In addition, students who met the completion requirements for Project Rise Up 4 CS exhibited statistically significant changes in attitudes towards computing and also demonstrated significant learning gains. This paper discusses the motivation for the project, provides project details, presents the evaluation results, and future plans.	Project rise up 4 CS: increasing the number of black students who pass advanced placement CS A	NA:NA:NA:NA	2014
Eric Aaron	NA	Session details: Interdisciplinary courses and curricula	NA	2014
Lori Carter	The benefits of interdisciplinary computing classes have been widely discussed. For the computing students, they provide a context in which to apply their skills, and appear to aid in recruitment and retention. For non-computing students, they provide additional skills to enhance their own crafts. For both, interdisciplinary programs open up new career possibilities and hone soft skills. In consideration of these and other benefits, the Point Loma Nazarene University Mathematical, Information, and Computer Sciences department have teamed up with the Biology, Chemistry, and Physics departments to offer several opportunities for interdisciplinary experiences to their students. In addition to the benefits, however, these programs produce significant challenges. This paper reviews the benefits of interdisciplinarity and discusses three different models of interdisciplinary experiences used at PLNU. It reports on the challenges that arose in each, and ways these difficulties were resolved. Finally, it discusses the hurdle of recruiting for such courses.	Interdisciplinary computing classes: worth the effort	NA	2014
Bill Manaris:Ren√©e McCauley:Marian Mazzone:William Bares	In this paper, we describe Computing in the Arts (CITA), an innovative interdisciplinary major, which combines computer science with artistic theory and practice. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. At our institution, this involves three tracks (music, visual art, and theatre). CITA incorporates four synthesis courses, one per academic year, which help students interweave the two distinct curricular experiences into a cohesive whole in preparation for their capstone project. CITA has been fully implemented at the authors' institution. In the three years of its existence, it has increased participation in computer science by 23% mainly from an underserved population (students interested in the arts). Approximately 40% of these students are women. While these students are not necessarily strong in mathematics, they tend to be strong in design and creativity, thus enriching the pool of computing professionals with people able to envision new technologies and surprising innovations. Such people are fully versed in computer science so they can easily collaborate with more traditional computing professionals such as software engineers and scientific programmers. We discuss our successes, and provide pointers for others to establish similar degree programs, including potential challenges and lessons learned.	Computing in the arts: a model curriculum	NA:NA:NA:NA	2014
Debra S. Goldberg:Elizabeth K. White	Computer science is increasingly becoming interdisciplinary, with applications not only in scientific disciplines, but also in the arts, humanities, and social sciences. Training computer scientists to work in diverse application disciplines is imperative for modern departments. We have had success using interdisciplinary groups for this purpose in a computational biology class, Algorithms for Molecular Biology. In this class, carefully-balanced interdisciplinary groups learn to take advantage of each other's abilities, and to communicate effectively with students with a much different background. From this diversity, we get much more (e pluribus, plurima) than would be possible if we tried to train all students to have a more homogeneous blend of multiple disciplinary knowledge. Within a single semester, students go from virtually no understanding of one discipline to completing research projects on a relevant problem that they have defined themselves.	E pluribus, plurima: the synergy of interdisciplinary class groups	NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Baker Franke:Stephanie Hoeppner:Josh Paley	"Seldom was any knowledge given to keep, but to impart; the grace of this rich jewel is lost in concealment." -- Bishop Hall At the SIGCSE Symposiums in 2007 and 2011, we presented panels in which seasoned teachers shared the teaching tips we wished we'd known before starting our careers. The difference from earlier "Teaching Tips" panels was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources. We clustered these tips into categories: Grading, Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), Classroom (organization, interactions, and incentives), Personal (fostering relationships), and Meta (advice spanning categories). The sessions were received quite well, and the audience contributed many of their own teaching tips throughout the presentations. This year, we're presenting a "High School edition", and have invited inspirational teachers from a broad variety of schools. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for the online collection.	Teaching tips we wish they'd told us before we started: high school edition	NA:NA:NA:NA	2014
Ruth Anderson	NA	Session details: Special session	NA	2014
Ruth E. Anderson:Michael D. Ernst:Robert Ord√≥√±ez:Paul Pham:Steven A. Wolfman	NA	Introductory programming meets the real world: using real problems and data in CS1	NA:NA:NA:NA:NA	2014
Helen H. Hu	NA	Session details: Panel session	NA	2014
Helen H. Hu:Matthew Lang:Clif Kussmaul:Chris Mayfield:Tammy Pirmann	NA	Guided inquiry learning in context: perspectives on POGIL in CS	NA:NA:NA:NA:NA	2014
Brian Dorn	NA	Session details: Research: predictors, creative thinking, co-linking courses	NA	2014
Christopher Watson:Frederick W.B. Li:Jamie L. Godwin	Research over the past fifty years into predictors of programming performance has yielded little improvement in the identification of at-risk students. This is possibly because research to date is based upon using static tests, which fail to reflect changes in a student's learning progress over time. In this paper, the effectiveness of 38 traditional predictors of programming performance are compared to 12 new data-driven predictors, that are based upon analyzing directly logged data, describing the programming behavior of students. Whilst few strong correlations were found between the traditional predictors and performance, an abundance of strong significant correlations based upon programming behavior were found. A model based upon two of these metrics (Watwin score and percentage of lab time spent resolving errors) could explain 56.3% of the variance in coursework results. The implication of this study is that a student's programming behavior is one of the strongest indicators of their performance, and future work should continue to explore such predictors in different teaching contexts.	No tests required: comparing traditional and dynamic predictors of programming success	NA:NA:NA	2014
L. D. Miller:Leen-Kiat Soh:Vlad Chiriacescu:Elizabeth Ingraham:Duane F. Shell:Melissa Patterson Hazley	Our research is based on an innovative approach that integrates computational thinking and creative thinking in CS1 to improve student learning performance. Referencing Epstein's Generativity Theory, we designed and deployed a suite of creative thinking exercises with linkages to concepts in computer science and computational thinking, with the premise that students can leverage their creative thinking skills to "unlock" their understanding of computational thinking. In this paper, we focus on our study on differential impacts of the exercises on different student populations. For all students there was a linear "dosage effect" where completion of each additional exercise increased retention of course content. The impacts on course grades, however, were more nuanced. CS majors had a consistent increase for each exercise, while non-majors benefited more from completing at least three exercises. It was also important for freshmen to complete all four exercises. We did find differences between women and men but cannot draw conclusions.	Integrating computational and creative thinking to improve learning and performance in CS1	NA:NA:NA:NA:NA:NA	2014
Yolanda Reimer:Michael Cassens	An on-going problem with many courses across the CS curriculum is finding time to incorporate programming activities that are necessary for other critical aspects of the course. For example, in UI design the practice and evaluation of good design principles typically depends on the creation of at-least a semi-functional software prototype. However, having to include software implementation in courses whose main focus lies elsewhere can distract from core concepts, and oftentimes there are pedagogical reasons to separate out implementation. By co-linking upper-division courses in our CS program, we attempted to solve this problem by leveraging concepts of software design and implementation across two courses. In this experience report, we describe how the co-linked courses were structured, what we encountered, what worked well and what still needs improvement. Other CS educators might capitalize on our successes, and learn from our mistakes, in similar set-ups within their own curriculums.	Perspectives on co-linking design and development courses in CS	NA:NA	2014
Daniela Marghitu	NA	Session details: Focus on K-12: informal education, curriculum, and robots	NA	2014
Betsy DiSalvo:Cecili Reid:Parisa Khanipour Roshan	In this study we found that search terms that would likely be used by parents to find out-of-school computer science (CS) learning opportunities for their children yielded remarkably unproductive results. This is important to the field of CS education because, to date, there is no empirical evidence that demonstrates how a lack of CS vocabulary is a barrier to accessing informal CS learning opportunities. This study focuses on the experience of parents who do not have the privilege of education and technical experience when searching for learning opportunities for their children. The findings presented will demonstrate that issues of access to CS education go beyond technical means, and include ability to conduct suitable searches and identify appropriate computational learning tools. Out-of-school learning is an important factor in who is motivated and prepared to study computer science in college. It is likely that without early access to informal CS learning, fewer students are motivated to explore CS in formal classrooms.	They can't find us: the search for informal CS education	NA:NA:NA	2014
Joanna Goode:Jane Margolis:Gail Chapman	In recent years, the computer science education community has shown strong commitment to broadening participation in computing in K-12 classrooms. Educational research highlights the critical role of professional development in supporting teachers to attract and effectively teach underrepresented students in computing. In this paper we present the Exploring Computer Science (ECS) professional development model and the research on which it is based. We also present findings about the impact of ECS professional development on teachers' practice. As computing education initiatives become increasingly concerned with scaling up from a regional to a nationwide presence, it is important to consider how the essential components of effective professional development can drive this reform.	Curriculum is not enough: the educational theory and research foundation of the exploring computer science professional development model	NA:NA:NA	2014
Jennifer S. Kay:Janet G. Moss:Shelly Engelman:Tom McKlin	Few question the need to offer excellent programs in computer science at the Bachelors and Graduate Levels. But computer science is not just for computer scientists! An understanding of key computer science concepts is essential to comprehending the underpinnings of what drives much of the culture and environment that students will encounter upon graduation. Unfortunately, in the United States most state, regional, and national K-12 standards do not include computer science among the core competencies required of all students. However, careful study reveals many opportunities to satisfy mandatory non-computer-science standards while simultaneously teaching important concepts in computer science. This paper begins with an overview of these standards and suggests that educational robotics could be incorporated into K-12 curricula to satisfy these standards. But even if robots truly are a magic panacea, most K-12 teachers have never used them. The remainder of this paper discusses a pair of 3 day workshops we offered in the summers of 2011 and 2012 which were designed to introduce K-12 teachers with no prior programming experience to LEGO robot programming. We discuss the content of the workshops, how teachers' skills and attitudes changed as a result of these workshops, and how teachers used the material they learned in their schools.	Sneaking in through the back door: introducing k-12 teachers to robot programming	NA:NA:NA:NA	2014
Valerie Henderson, Summet	NA	Session details: Focus on K-12: before middle school	NA	2014
Osvaldo L. Oliveira:Maria C. Nicoletti:Luis M. del Val Cura	Many studies have provided qualitative arguments for the premise that the ability to compute is fundamental and therefore should be treated at all levels of education. This work presents a quantitative indication of the validity of this premise for primary school students. In order to precisely define what ability a student should have to use a model of computation to compute, this work reports an experimental study that shows a significant correlation between the student's ability to compute and his/her academic performance in a primary school.	Quantitative correlation between ability to compute and student performance in a primary school	NA:NA:NA	2014
Hilary Dwyer:Charlotte Hill:Stacey Carpenter:Danielle Harlow:Diana Franklin	The desire to expose more students to computer science has led to the development of a plethora of educational activities and outreach programs to broaden participation in computer science. Despite extensive resources (time and money), they have made little impact on the diversity of students pursuing computer science. To realize large gains, computational thinking must be integrated into K-12 systems, starting with elementary school. In order to do so, existing resources need to be adapted for a school setting. To make a curriculum with lessons that build on each other over several years, and accountability for student learning, we need standards, an understanding of how students learn, and identification of what students know before exposure to the curriculum. In this paper, we present our detailed findings of what fourth graders know before encountering a computational thinking curriculum. Groups of students participated in activities modified from CS Unplugged in order to discover their knowledge (rather than provide instruction). We identify aspects of the activities students were able to complete successfully, and where they will need further instruction. We then explain how we used these results to modify our pilot curriculum.	Identifying elementary students' pre-instructional ability to develop algorithms and step-by-step instructions	NA:NA:NA:NA:NA	2014
Neil Smith:Clare Sutcliffe:Linda Sandvik	Code Club is a network of after-school programming clubs for primary (US: elementary) schoolchildren, run by technically-competent volunteers in conjunction with (generally technically-unskilled) teachers. The main motivation of Code Club is to inspire children with a sense of fun and achievement for programming and digital creativity. This paper reports on the first year of Code Club in 1000 UK schools. The results were extremely positive, but some children had difficulty understanding the concepts behind the projects.	Code club: bringing programming to UK primary schools through scratch	NA:NA:NA	2014
Elizabeth Hawthorne	NA	Session details: Security among the cloud	NA	2014
Justin Cappos:Richard Weiss	One of the central skills in computer security is reasoning about how programs fail. As a result, computer security necessarily involves thinking about the corner cases that arise when software executes. An unfortunate side effect of this is that computer security assignments typically necessitate deep understanding of a topic, such as how the stack is laid out in memory or how web applications interact with databases. This work presents a series of assignments that require very little background knowledge from students, yet provide them with the ability to reason about failures in programs. In this set of assignments, students implement two very simple programs in a high-level language (Python). Students first implement a reference monitor that tries to uphold a security property within a sandbox. For the second portion, the students are provided each others' reference monitors and then write attack code to try to bypass the reference monitors. By leveraging a Python-based sandbox, student code is isolated cleanly, which simplifies development and grading. These assignments have been used in about a dozen classes in a range of environments, including a research university, online classes, and a four year liberal arts school. Student and instructor feedback has been overwhelmingly positive. Furthermore, survey results demonstrate that after a 2-3 week module, 76% of the students who did not understand reference monitors and access control learned these key security concepts.	Teaching the security mindset with reference monitors	NA:NA	2014
Khaled Salah	Cloud computing has become an attractive paradigm for many organizations in government, industry as well as academia. In academia, the cloud can offer instructors and students (whether local or at a distance) on-demand, dedicated, isolated, unlimited, and easily configurable machines. Such an approach has clear advantages over access to machines in a classic lab setting. In this paper, we show how cloud services and infrastructure could be harnessed to facilitate practical experience and training for cybersecurity. We used the popular Amazon Web Services (AWS) cloud; however, the use cases and approaches laid out in this paper are also applicable to other cloud providers.	Harnessing the cloud for teaching cybersecurity	NA	2014
Yanyan Zhuang:Chris Matthews:Stephen Tredger:Steven Ness:Jesse Short-Gershman:Li Ji:Niko Rebenich:Andrew French:Josh Erickson:Kyliah Clarkson:Yvonne Coady:Rick McGeer	Distributed platforms are now a de facto standard in modern software and application development. Although the ACM/IEEE Curriculum 2013 introduces Parallel and Distributed Computing as a first class knowledge area for the first time, the right level of abstraction to teach these concepts is still an important question that needs to be explored. This work presents our findings in teaching cloud computing by exposing upper-level students to testbeds in use by the distributed systems research community. The possibility of giving students practical and relevant experience was explored in the context of new course assignment objectives. Furthermore, students were able to significantly contribute to a pilot class project with medium-scale computation based on satellite data. However, the software engineering challenges in these environments proved to be daunting. In particular, these challenges were exacerbated by a lack of debugging support relative to the environments students were more familiar with---requiring development practices that out-stripped typical course experiences. Our proposed set of experiments and project provide a basis for an evaluation of the trade-offs of teaching cloud and distributed systems on the wild side. We hope that these findings provide insight into some of the possibilities to consider when preparing the next generation of computer scientists to engage with software practices and paradigms that are already fundamental in today's highly distributed systems.	Taking a walk on the wild side: teaching cloud computing on distributed research testbeds	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Leisa D. Thompson	NA	Session details: Panel session	NA	2014
Leisa D. Thompson:Crystal Eney:Ruth Davis:Tiffany Grady	NA	Recruit and retain women in undergraduate computing: success stories using research-based practices	NA:NA:NA:NA	2014
Jan Cuny	NA	Session details: Panel session	NA	2014
Jan Cuny:Diane A. Baxter:Daniel D. Garcia:Jeff Gray:Ralph Morelli	Our grand challenge is to scale high-quality computer science curriculum and instruction to reach all high school students. CS10K -- an NSF and ACM-sponsored project -- is working to do just that by supporting curriculum development, computer education research and professional development through the Computing Education for the 21st Century (CE21) program at NSF. Professional Development (PD) is a key piece of the project, as we need to train 10,000 teachers to teach rigorous computing courses in 10,000 high schools by 2016 -- the school year that a new Advanced Placement Course will be rolled out. This panel will provide an overview of the PD landscape and then each panelist will discuss the unique aspects of their PD project for high school teachers.	CS principles professional development: only 9,500 to go!	NA:NA:NA:NA:NA	2014
Paul Medlock-Walton	NA	Session details: Panel session	NA	2014
Paul Medlock-Walton:Kyle J. Harms:Eileen T. Kraemer:Karen Brennan:Daniel Wendel	NA	Blocks-based programming languages: simplifying programming for different audiences with different goals	NA:NA:NA:NA:NA	2014
Richard Brown	NA	Session details: Panel session	NA	2014
Richard A. Brown:Joel C. Adams:Clayton Ferner:Elizabeth Shoop:Anthony Barry Wilkinson	The industry shift to emerging forms of parallel and distributed computing (PDC), including multi-core CPUs, cloud computing, and general-purpose use of GPUs, have naturally led to increased presence of PDC elements undergraduate Computer Science curriculum recommendations, such as the new and substantial "PD" knowledge area in the ACM/IEEE CS2013 recommendations. How can undergraduate students grasp the extensive and complex range of PDC principles and practices, and apply that knowledge in problem solving, while PDC technologies continue to evolve rapidly? Parallel design patterns occur at all computational levels, ranging from low-level concurrent execution patterns (such as message passing or thread pool patterns) to high-level software design patterns suitable for organizing entire systems or their components (such as model-view-control or pipe and filter patterns). The ubiquity of these patterns in all forms of parallel and distributed computation makes parallel patterns relevant and illuminating at all undergraduate levels, and knowledge of those patterns can guide effective problem solving for parallel programs. This panel presents four viewpoints representing various approaches for teaching parallel patterns to CS undergraduates at various academic levels, including short "patternlets" examples, patterns in domain applications and parallel problem solving, and two tools, Seeds and Paraguin, for teaching parallel design patterns to undergraduates.	Teaching parallel design patterns to undergraduates in computer science	NA:NA:NA:NA:NA	2014
Ariel Ortiz Ram√≠rez	NA	Session details: Operating systems and programming languages	NA	2014
Christoffer Dall:Jason Nieh	Learning about operating systems often involves modifying a large and complex code base. Grading student projects can be difficult and time consuming, yet students often do not learn from their programming errors and struggle to understand core operating system concepts. We present GradeBoard, a code review system designed to simplify grading for instructors and enable students to understand and learn from their errors. GradeBoard provides an easy-to-use Web interface that allows instructors to annotate student code submissions with grading comments and scores, and students to discuss the comments and scores with instructors. GradeBoard presents student code changes with syntax highlighting and lets users collapse or expand code sections to provide a desired level of context, making it easier to read and understand student programming project submissions. Comments and scores are easily identifiable by visual cues, improving interaction between instructors and students. We have deployed and used GradeBoard in a large operating systems course involving Linux kernel programming projects. GradeBoard provided robust, easy-to-use functionality for reviewing Linux kernel code changes, improved the instructional staff grading experience, and over 90% of students surveyed indicated that GradeBoard improved their understanding of the kernel programming projects better than other alternatives.	Teaching operating systems using code review	NA:NA	2014
Christopher Corsi:Robert Geist:Dennis Lingerfelt	Open source Linux has become increasingly popular as a vehicle for incorporating hands-on experience with a real system into both undergraduate and graduate operating systems courses. System virtualization tools, such as VMWare, Xen, VirtualBox, and KVM, allow students to freely experiment with kernel modifications without requiring dedicated hardware and without generating significant concern for the ill-effects of system crashes. Nevertheless, certain kernel projects that are highly desirable from an educational standpoint remain unavailable under standard approaches to virtualization. One such project that is known to carry substantial instructional value is the design and implementation of an SMP-safe driver for a high-performance graphics card. Standard virtualization tools export only a minimally-capable, SVGA graphics adapter, which is an inadequate architecture for such a project. This paper describes an extremely simple, kernel-independent, software tool for use by instructors of operating systems courses. The tool provides a virtual, high-performance graphics card that is suitable for Linux device driver design and implementation. The code for the virtual card, which is relatively short, is easily modified by instructors to present different interfaces each semester. The code for both the virtual card and a sample Linux 3.2.36 driver for it may be freely downloaded from http://people.cs.clemson.edu/~ccorsi/kyouko/.	A virtual graphics card for teaching device driver design	NA:NA:NA	2014
Timothy Fossum	This paper describes PLCC, a compiler-compiler tool to support courses in programming languages, compilers, and computational theory. This tool has proven to be useful for implementing interpreters, building compilers, and creating parsers for context-free languages. PLCC is a Perl program that takes an input file that specifies the tokens, syntax, and semantics of a language and that generates a complete set of Java files that implement the semantics of the language. PLCC stands for "Programming Language Compiler-Compiler". PLCC is not intended to be a production-quality tool. Rather, it supports understanding and implementing the essential elements of lexical analysis, parsing, and semantics without having to wrestle with the complexities of dealing with "industrial-strength" compiler-compiler tools. Students quickly learn how to write PLCC "grammar" files for small languages that have straightforward syntax and semantics and use PLCC to build Java-based parsers, interpreters, or compilers for these languages that run out-of-the-box. Input to PLCC is a text file with a token definition section that defines language tokens as simple regular expressions, a syntax section that specifies the grammar rules of an LL(1) language as simple Backus-Naur Form (BNF) productions, and a semantics section that defines the language semantics as Java methods. PLCC generates a set of Java source files that are entirely self-contained and that import only standard elements of 'java.util' in JDK5 and above. For testing purposes, PLCC generates a read-eval-print loop that (1) reads standard input, (2) scans, parses, and evaluates the input, and (3) prints the evaluation to standard output.	PLCC: a programming language compiler compiler	NA	2014
Briana Morrison	NA	Session details: Soft skills: academic perspectives	NA	2014
Orit Hazzan:Gadi Har-Shai	This paper continues a previous paper [1] in which we described students' gradual understanding of computer science (CS) and software engineering (SE) soft skills. Our study focused on a course we taught on soft skills in CS and SE, offered by the Department of Computer Science at the Technion -- Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip Technion CS graduates with such skills. In [1] we presented the nature of CS soft skills, described the course schedule, including the teaching principles applied in the course, and showed how, in the course of the course, students gradually constructed a mental perception of CS soft skills in a 4-stage process. In this paper, we refine the comprehension process into a 6-rung ladder, based on further data analysis and additional experience gained when teaching the course for a second time. We elaborate on the additional rungs and further illuminate the results of two evaluation surveys on the course that were distributed to the students (in addition to the formal course evaluation administrated by the Technion's Center for the Promotion of Teaching). One of our main conclusions is that the course provides students with the opportunity to express their desire to be more involved in the teaching process of the course and to discuss and analyze their own soft skills. In other words, students realize the importance and significance of learning soft skills by actually implementing these skills in the learning process. In the Summary part of the paper, we present several pedagogical conclusions that are based on this observation and that we intend to implement in the future when teaching this course.	Teaching and learning computer science soft skills using soft skills: the students' perspective	NA:NA	2014
Daniela Inclezan:Luis Pradanos	Promoting sustainability, critical thinking, and ethical awareness are goals that appear in the vision statements of the majority of universities in the United States nowadays. One way of achieving these goals is by increasing the ecological literacy (i.e., ecoliteracy) of our students. In order to be effective, ecoliteracy should be taught not only in environmental studies classes, but rather across the institutional curriculum. In this paper we present three activities designed to be used in the first week of class in an introductory Database Systems course. Our activities promote critical thinking, systemic thinking, ethical behavior, and an increased awareness of ecological problems -- building blocks that set up the stage for teaching ecoliteracy.	Promoting ecoliteracy in an introductory database systems course: activities for the first week	NA:NA	2014
Janet E. Burge:Gerald Gannod:Mike Carter:Alanna Howard:Brian Schultz:Mladen Vouk:David Wright:Paul Anderson	Communication skills, including reading, writing, speaking, and teaming, are among the most sought after by employers of recent Computer Science/Software Engineering (CS/SE) graduates. We have been conducting a project that has developed a general framework for program-level integration of communication into CS/SE education. Our framework has been developed through workshops and field evaluation of training materials (and other resources) by faculty from a wide variety of institutions under the guidance of experts in writing and communication across the curriculum. This paper discusses the current state of communication teaching in the CS/SE domain, and presents our framework and experiences for program-wide implementation of communication skills.	Developing CS/SE students' communication abilities through a program-wide framework	NA:NA:NA:NA:NA:NA:NA:NA	2014
Raghuram Ramanujan	NA	Session details: What we say, what they do	NA	2014
Joseph P. Sanford:Aaron Tietz:Saad Farooq:Samuel Guyer:R. Benjamin Shapiro	In this paper we present an initial study of how metaphors are used by university-level Computer Science instructors. The goal of this research is to gain a better understanding of the role that metaphors play in Computer Science education, to catalog the kinds of metaphors that are used, and to assess their effectiveness in supporting learning. We interviewed 10 educators in Computer Science about the metaphors they have used in the classroom, with a focus on introductory "CS1" programming courses. We analyze these interviews with an existing theory of metaphors, which provides a framework for describing their structure and features. The theory predicts that most metaphors have limitations, and eventually fall apart. Therefore, we also asked educators to assess how far they could push their metaphors with and to describe what happens at the breaking point. Our preliminary findings provide a foundation to inform and guide more in-depth analyses in the future.	Metaphors we teach by	NA:NA:NA:NA:NA	2014
Malcolm Corney:Sue Fitzgerald:Brian Hanks:Raymond Lister:Renee McCauley:Laurie Murphy	Recent studies have linked the ability of novice (CS1) programmers to read and explain code with their ability to write code. This study extends earlier work by asking CS2 students to explain object-oriented data structures problems that involve recursion. Results show a strong correlation between ability to explain code at an abstract level and performance on code writing and code reading test problems for these object-oriented data structures problems. The authors postulate that there is a common set of skills concerned with reasoning about programs that explains the correlation between writing code and explaining code. The authors suggest that an overly exclusive emphasis on code writing may be detrimental to learning to program. Non-code writing learning activities (e.g., reading and explaining code) are likely to improve student ability to reason about code and, by extension, improve student ability to write code. A judicious mix of code-writing and code-reading activities is recommended.	'explain in plain english' questions revisited: data structures problems	NA:NA:NA:NA:NA:NA	2014
Kevin Buffardi:Stephen H. Edwards	While Computer Science curricula teach students strategic software development processes, assessment is often product-instead of process-oriented. Test-Driven Development (TDD) has gained popularity in computing education, but evaluating students' adherence to TDD requires analyzing their development processes instead of only their final product. Consequently, we designed an adaptive feedback system for reinforcing incremental testing behaviors. In this paper, we compare the results of the system with different reinforcement schedules and with- or without- visually salient testing goals. We analyzed snapshots of students' programming projects gathered during development and interviewed students at the end of the academic term. From our findings, we identify potential for influencing student development behaviors and suggest future direction for designing adaptive reinforcement.	A formative study of influences on student testing behaviors	NA:NA	2014
Ellen Walker	NA	Session details: Extending frameworks	NA	2014
James R. Miller	Shader-based OpenGL is a powerful and exciting tool for individuals with data visualization needs, interests in gaming, a need to create and manipulate synthetic environments, and a variety of other high-performance tasks. It is well-known that shader-based OpenGL is difficult to learn for programmers with no prior graphics API experience -- some have even claimed it's impossible to teach to individuals without such prior exposure. In this paper, we report on our experiences developing an educational approach that we believe has contributed to the base of evidence that it is not only possible, but also desirable to do so. Our overriding goal has been to learn and exploit the extent to which mastering a complex graphics API like modern shader-based OpenGL can be enhanced by using a software design framework into which relevant concepts can be placed, thus facilitating more rapid assimilation and mastery of the concepts. We have been using this technique in our Introduction to Computer Graphics course in which we have two primary goals: teach shader-based OpenGL to students who have no prior experience using a graphics API, and present a framework to students that will scale up to medium and large scale applications, both in terms of code size as well as data size. We do not in any way suggest that our architecture is the 'best' for all advanced graphics applications, or even for teaching. Instead we simply claim that use of such a framework helps students master complex OpenGL concepts and develop nontrivial interactive 3D applications. Once students fully understand the basics, they should find it easy to migrate to other perhaps quite different architectures.	Using a software framework to enhance online teaching of shader-based OpenGL	NA	2014
James Cross:Dean Hendrix:Larry Barowski:David Umphress	In this paper, we describe our experiences using dynamic program visualizations in our Java-based CS1 and CS2 courses during the spring semester 2013. The visualizations were constructed by both faculty and students using the new viewer canvas in jGRASP. A public beta version was downloaded and installed in our computer labs and on student and faculty machines. Program visualizations were used in the classroom as well as in lab activities and programming projects. Since the viewers had already been evaluated in controlled experiments, our focus was on ease of use of the viewer canvas by the students and the utility of the program visualizations in helping students understand their programs. Direct observations in the lab and individual meetings with students to discuss their work indicated that students could indeed build dynamic visualizations that, in conjunction with the debugger, helped them understand and correct bugs in their programs much more effectively than using the debugger alone.	Dynamic program visualizations: an experience report	NA:NA:NA:NA	2014
Ivaylo Ilinkin	Mobile devices have become ubiquitous in our daily lives and are replacing the desktop for email, social networking, daily planner, and so on. A typical mobile device now integrates a wide range of accessories, such as camera, GPS receiver, accelerometer, and offers a touch-screen with gesture-based interaction. This makes mobile devices an exciting platform for software development and programming projects for mobile devices have great potential to provide engaging experiences for computer science majors. This paper describes a pedagogical tool for introducing Android in a traditional CS1 course. The goal is not to teach Android programming, but to create a framework that integrates seamlessly with the CS1 course structure and supports the introduction of the fundamental computer science concepts by creating an engaging learning environment. The framework enables the students to port their CS1 projects to an Android device with minimal effort.	Opportunities for android projects in a CS1 course	NA	2014
Nick Parlante	NA	Session details: Special session	NA	2014
Nick Parlante:Julie Zelenski:Josh Hug:John Nicholson:John DeNero:Antti Laaksonen:Arto Vihavainen:Frank McCown:Kevin Wayne	A great CS assignment is a delight to all, but the path to one can be most roundabout. Many CS students have had their characters built up on assignments that worked better as an idea than as an actual assignment. Assignments are hard to come up with, yet they are the key to student learning. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Ursula Wolz	NA	Session details: Panel session	NA	2014
Lillian (Boots) Cassel:Bonnie MacKellar:Joan Peckham:Carol Spradling:Han Reichgelt:Suzanne Westbrook:Ursula Wolz	NA	Interdisciplinary computing in many forms	NA:NA:NA:NA:NA:NA:NA	2014
Murali Sitaraman	NA	Session details: Special session	NA	2014
Murali Sitaraman:Bruce W. Weide	Program correctness is central to computing, with instructors striving to convey the importance of getting it right starting in CS1. Teaching this material carefully demands a uniform framework to specify, implement, and reason about software correctness. To make these ideas accessible to educators and students, the tutorial will use RESOLVE, an integrated specification and programming language with a toolset especially designed for building verified components. The tutorial will also discuss how to get students involved through hands-on activities with software construction and modular verification using a web-integrated environment that requires no software installation and that features a prototype 'push-button' verifying compiler. The proposers have taught the ideas contained here using engaging pedagogical methods in introductory and advanced CS courses to thousands of students and dozens of educators over the past 20 years, and this SIGCSE tutorial will leverage that experience.	Special session: "hands-on" tutorial: teaching software correctness with RESOLVE	NA:NA	2014
Wanda Dann	NA	Session details: Special session	NA	2014
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba	In this special session, attendees learn about techniques of teaching with team projects with Alice 3's new Save Type, Import Type, and Merge capabilities. Using this technique, students in introductory level programming courses can participate in team projects where students work as a team in various stages of design, development, and testing. As part of this process students may work independently to code one or more classes and then merge their work with that of other members of the team to create the final project.	Tutorial: team projects with Alice 3	NA:NA:NA:NA	2014
Martha Kosa	NA	Session details: Tools	NA	2014
Andr√©s Moreno:Erkki Sutinen:Mike Joy	A review of the practical uses of errors in education reveals three contexts where errors have been shown to help: teaching conceptual knowledge, changing students' attitudes and promoting learning skills. Conflictive animations form a novel approach to teaching programming that follows a long tradition on research and development on program animation tools. Conflictive animations link the benefits of errors with program animation tools and programming education. This approach involves presenting to the students conflictive animations that do not animate faithfully the programs or concepts taught. Conflictive animations are versatile enough to cover the fundamental building blocks of programs such as operators, expressions and statements. With conflictive animations a novel set of learning activities can be introduced to computer science classes. This conflictive dimension of activities augments an engagement taxonomy for animation tools at all levels. They are an example of activities that promote critical thinking. A particular implementation of conflictive animations has been empirically evaluated aiming for ecological validity rather than statistical significance. Results indicate that students using conflictive animations improve their metacognitive skills, and, when compared to a control group, their conceptual knowledge improves at a better rate.	Defining and evaluating conflictive animations for programming education: the case of jeliot ConAn	NA:NA:NA	2014
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene:Chaoli Wang	This paper describes a visualization tool RSAvisual that helps students learn and instructors teach the RSA cipher. This tool permits the user to visualize the steps of the RSA cipher, do encryption and decryption, learn simple factorization algorithms, and perform some elementary attacks. The demo mode of RSAvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in encryption, decryption, the Extended Euclidean algorithm, two simple factorization algorithms and three elementary attacks. The user may compute the output of each operation and check for correctness. This helps students learn the primitive operations and how they are used in the RSA cipher. The opportunity for self-study provides an instructor with greater flexibility in selecting a lecture pace for the detailed materials. Classroom evaluation was positive and very encouraging.	RSAvisual: a visualization tool for the RSA cipher	NA:NA:NA:NA:NA:NA	2014
Stephen H. Edwards:Daniel S. Tilden:Anthony Allevato	Pythy is a web-based programming environment for Python that eliminates software-related barriers to entry for novice programmers, such as installing an IDE or the Python runtime. Using only a web browser, within minutes students can begin writing code, watch it run, and access support materials and tutorials. While there are a number of web-based Python teaching tools, Pythy differs in several respects: it manages student assignment work, including deadlines, turn-in, and grading; it supports live, interactive code examples that instructors can write and students can explore; it provides auto-saving of student work in the cloud, with full, transparent version control; and it supports media-computation-style projects that manipulate images and sounds. Pythy provides a complete ecosystem for student learning, with a user interface that follows a more familiar web browsing model, rather than a developer-focused IDE interface. An evaluation compares student perceptions of Pythy in relation to JES, another student-friendly beginner Python environment. Classroom experiences indicate that Pythy does reduce the novice obstacles that it aims to address.	Pythy: improving the introductory python programming experience	NA:NA:NA	2014
Giti Javidi	NA	Session details: Focus on K-12: outreach and computational thinking	NA	2014
Antti-Jussi Lakanen:Ville Isom√∂tt√∂nen:Vesa Lappalainen	This paper presents lessons learned from five years of teaching a five-day game design and programming outreach course. The course was offered in summer time and targeted at middle and high school students. In total, 462 youngsters have taken part in 21 course instances. We describe our course concept, and discuss our successes and challenges. In particular, we focus on understanding our student populations by presenting descriptives and statistics of the events, and performing a statistical cluster analysis based on pre- and post-surveys. The cluster analysis was complemented with an analysis of the qualitative data, also originating from the surveys. Taken together, students could be classified into five groups with substantial differences: Enthusiasts, Newbies, Uncertains, Experimenters, and Unsatisfieds. Awareness of the clusters helps instructors of similar courses in developing course content, designing differentiated instruction, and planning follow-up or advanced courses.	Five years of game programming outreach: understanding student differences	NA:NA:NA	2014
Polina Charters:Michael J. Lee:Andrew J. Ko:Dastyni Loksa	Computer programming is now used broadly across many industries, with a diversity of working adults writing programs and interacting with code as part of their jobs. However, negative attitudes toward programming continue to deter many from studying computer science and pursuing careers in technology. To begin understanding adults' attitudes toward computer programming and how we can improve them, we used an educational video game to give 200 adult participants a concrete programming experience via the web, and then collected their self-reported opinions about programming. We found that adults initially had poor attitudes toward programming, believing that it was difficult, boring, and something they generally could not learn. After the online learning experience, their attitudes improved significantly, regardless of gender, population density, or level of education. These results demonstrate that adult attitudes toward programming, while initially negative, can be quickly changed with a brief, positive exposure to programming.	Challenging stereotypes and changing attitudes: the effect of a brief programming encounter on adults' attitudes toward programming	NA:NA:NA:NA	2014
Ashok Ram Basawapatna:Alexander Repenning:Kyu Han Koh:Mark Savignano	Future school science standards, such as the Next Generation Science Standards (NGSS), emphasize the integration of simulation and modeling activities in the classroom environment. The extremes of these activities have two vastly different implementations. On one hand, a teacher can have students experiment on a pre-made simulation associated with the material. On the other hand, students can use, for example, an end-user programming tool to create the simulation from scratch. This allows students to not only experiment on, but also, to model the real world phenomenon being studied- a key component of computational thinking. However, the greater amount of time necessary for student authoring of simulations can make such an approach infeasible in the classroom environment. This paper presents a spectrum of strategies for integrating simulations into class- rooms emphasizing our research at the Scalable Game Design Lab, University of Colorado Boulder as well as research from other entities. Starting at consuming simulations and adding more user interaction and authoring elements begins to provide a gentle slope from consumption towards simulation creation. Results indicate that many of these strategies are quite effective.	The consume - create spectrum: balancing convenience and computational thinking in stem learning	NA:NA:NA:NA	2014
Michelle Craig	NA	Session details: MOOCs	NA	2014
Joe Warren:Scott Rixner:John Greiner:Stephen Wong	Human/human interaction is a critical component of learning in many domains including introductory computer programming. For on-campus courses, lectures and problem sessions provide opportunities for students to interact with the instructor(s) and their peers. For online courses, opportunities for human/human interaction are more limited and usually correspond to activities like forum postings and online study groups. For online programming courses, the situation is potentially even worse since many of the computational tools designed to facilitate learning to program, such as unit testing, emphasize human/machine interaction and can be frustrating for beginning students. In this paper, the authors describe their experience in teaching an introductory programming MOOC. The guiding philosophy for this course is that learning to program should be a social experience that emphasizes human/human interaction, not human/machine interaction. Both the tools and assessment methods deployed in this course were chosen to help achieve this goal. In particular, this paper discusses a key tool that supports human/human interaction and several aspects of the course that contributed to its success.	Facilitating human interaction in an online programming course	NA:NA:NA:NA	2014
Terry Tang:Scott Rixner:Joe Warren	We describe a web-based programming environment designed to support teaching introductory programming for a massive open online class. We discuss some of the thought processes behind the design of this environment and then focus on two key innovations incorporated in our environment: a simplified GUI library for interactive Python programming and a browser-based tool for visualizing the execution of event-driven Python programs.	An environment for learning interactive programming	NA:NA:NA	2014
Pascal Van Hentenryck:Carleton Coffrin	The practice of discrete optimization involves modeling and solving complex combinatorial problems which have never been encountered before and for which no universal computational paradigm exists. Teaching such skills is challenging: Students must learn, not only the core technical skills, but also an ability to think creatively in order to select and adapt a paradigm to solve the problem at hand. This paper explores the question of whether the teaching of such creative skills translates to massive open online courses (MOOCs). It first describes a methodology for teaching discrete optimization that has been successful on campus over fifteen years. It then discusses how to adapt the campus format to a MOOC version. The success of the approach is evaluated through extensive data analytics enabled by the wealth of information produced by MOOCs.	Teaching creative problem solving in a MOOC	NA:NA	2014
Ruth Anderson	NA	Session details: Collecting and analyzing student data II	NA	2014
Chris Mayfield:Carole Ottenheimer:Bethann Canada:Brooke Bell	Apps4VA is a bold initiative to improve K-12 education by leveraging data on Virginia public school students' progress toward college and career readiness. The goal of the project is for students, professionals, and the general public to create "apps" that explore new ways of using K-12 education data to aid in better data-driven decisions and intervention strategies. In Spring 2013, sixty students in a database systems course participated in a semester-long project based on Apps4VA. This paper describes our teaching experiences, reports our lessons learned working with education data, and documents improvements in student outcomes. We also describe how instructors of database and data analytics courses may partner with local governments to adopt similar projects in their communities.	Introducing undergraduate database students to K-12 education research	NA:NA:NA:NA	2014
Douglas A. Kranch	This retrospective study of the performance of Computer Information Systems (CIS) students from between 1987 and 2010 found evidence that remedial math, reading, and writing courses can significantly increase student mean GPA, persistence, and completion in a CIS program. Remediation was most effective when verbal as well as mathematical deficiencies were addressed, and the performance of fully remediated students was indistinguishable as a group from students not requiring remediation.	Remediation and student success in CIS programs	NA	2014
Yuliya Cherenkova:Daniel Zingaro:Andrew Petersen	We examine student difficulties with CS1 concepts by analyzing a dataset containing 266,852 student responses to weekly code-writing problems. We find that conditionals and loops prove particularly problematic, even when considering 'second chance' data; and that, while we observe some evidence of improvement, certain straightforward applications of loops continue to be problematic at the end of the term. Our contribution is the corroboration of earlier findings, and a call to use online repositories of student submissions as rich sources of data on the student learning experience.	Identifying challenging CS1 concepts in a large problem dataset	NA:NA:NA	2014
Paul Tymann	NA	Session details: Special session	NA	2014
Paul T. Tymann:Frances P. Trees:Robert Glen Martin:Richard Kick:Lien Diaz	College Board has joined national efforts to improve the state of STEM education, in particular to address the challenge of increasing participation with a diverse population of computer scientists to meet the growing demands of the field of computing. The Advanced Placement (AP) Program is pleased to endeavor in enhancing AP Computer Science offerings by maintaining college level integrity and addressing issues of equity and access for students and teachers. In addition to the established AP Computer Science A course, the AP Program is engaged in the development of a forthcoming AP Computer Science Principles course. The additional option for high school students to study college level computing will provide more students with an opportunity to be introduced to important computer science concepts, gain a broader perspective of the field of study, and have access to a larger pathway into computing. This session will review information regarding the AP Computer Science A course and will discuss updated course content and exam development. It will then discuss the new Computer Science Principles course and plans for the development and launch of the course. The session will conclude with a Q&A session addressing questions regarding both courses. The session will be moderated by members of the Computer Science A and Principles Development Committees.	Advanced placement computer science: AP computer science a and AP computer science principles	NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Amy Briggs:Gail Chapman:Joanna Goode:Rebecca Brook Osborne:Pat Yongpradit	NA	A public/private partnership for expanding computer science in schools	NA:NA:NA:NA:NA:NA	2014
Paul Anderson	NA	Session details: Panel session	NA	2014
Paul Anderson:James McGuffee:David Uminsky	The purpose of this panel is to discuss the creation and implementation of a data science degree program at the undergraduate level. The panel includes representatives from three different universities that each offers an undergraduate degree in Data Science as of fall 2013. We plan to share information on the logistics of how the data science programs came to exist at each of our schools as well as encourage a robust interactive discussion about the future of data science education at the undergraduate level.	Data science as an undergraduate degree	NA:NA:NA	2014
Chunming Gao:Noriyuki Iwane	Introducing computer programming to non-computer science students has been a challenge. Concerns deal mainly with various backgrounds and expectations of students, planning of course components, and the adoption of effective teaching methods. This poster presents a guided active learning model with blended approach to help teaching computer programming to non-majors. The model starts with an outline of course objectives and the selection of textbooks, online tools, classrooms, and lab rooms. Under the blended approach, the model consists of classroom modules, lab room face-to-face modules, and online modules. It considers active learning in: online modules before and after classes or labs, in-class module, and in-lab module. The model concludes with the course evaluation which feeds back to the start for future improvement. By using this blended active learning model for five years, it has proven to be effective in engaging students in the course study and flexible to integrate various educational techniques. In the future, we plan to further study its flexibility by integrating innovative e-text learning techniques into the model.	Application of a blended active learning model in teaching computer programming to non-majors (abstract only)	NA:NA	2014
Kuan-Yu Lin:Janet Mei-Chuen Lin:Hue-Ching Kao	This study investigated the difficulties encountered by novice Alice programmers. The researchers conducted one-on-one clinical interviews with 22 10th-grade students at a senior high school in Taipei, Taiwan. The participants were offered nine Alice programming tasks, each requiring the use of a different set of programming constructs, which included objects, primitive methods, expressions, built-in functions, variables, conditional execution, repetition control, arrays, user-defined methods, and parameter passing. Each participant was observed closely as s/he worked through the given tasks. Whenever an impasse occurred while a student was trying to solve a problem, the observer would intervene by asking a sequence of questions with increasing specificity, ranging from strategic prompts to hints to provides, in order to determine the cause of the impasse. This study summarized the common difficulties for each of the Alice programming constructs used by the participants in the programming tasks, and students' difficulties were categorized into four types: connection, location, usage, and math-and-other difficulties. Students having connection difficulties were unable to apply appropriate programming constructs to implement the actions required; location difficulties indicated students? inability to locating, in the Alice interface, the programming constructs they needed; usage difficulties referred in general to semantic errors in a student's programs; whereas math-and-other difficulties were caused mainly by students' inadequate math knowledge. It is hoped that the findings of this research will help Alice instructors to improve their students' performance by familiarizing themselves with the existence of the identified difficulties, and by addressing the missing conceptions or misconceptions underlying those difficulties.	An analysis of difficulties encountered by novice alice programmers (abstract only)	NA:NA:NA	2014
Ting-Yun Hou:Yu-Tzu Lin:Yu-Chih Lin:Cheng-Chih Wu	his study investigates the cognitive processes involved in program comprehension based on eye gaze tracking. Thirty-eight participants were asked to comprehend the test programs. Eye-movement analysis was employed to track the students' gaze paths while they traced the programs for comprehension. Cognitive processes were then obtained by sequential analysis of the gaze data to investigate the significant sequences of attention areas. The mined cognitive processes were compared between high and low comprehenders. The experiment results show that most subjects focused on major part of the program to comprehend the program. However, high comprehenders traced the program in a more logical manner. In addition, low comprehenders needed more manual calculation and also needed to trace back to prior statements for recalling required information, which might be because they had limited working memory capacities for computing and memorizing. Subjects performed better on cognitive processes involved in the working memory (short-term memory, mental arithmetic, and logical thinking) also performed better on program comprehension. Working memory seems to play an important role in program comprehension. These results can provide suggestions for researchers/instructors to develop adaptive instructional strategies for students of different characteristics.	Exploring cognitive processes in program comprehension based on eye-movement analysis (abstract only)	NA:NA:NA:NA	2014
Stephanie Rogers:Steven Tang:Dan Garcia	Coding style is important to teach to beginning programmers, so that bad habits don't become permanent. This is often done manually at the University level because automated Python static analyzers cannot accurately grade based on a given rubric. However, even manual analysis of coding style encounters problems, as we have seen quite a bit of inconsistency among our graders. We introduce ACCE--Automated Coding Composition Evaluator--a module that automates grading for the composition of programs. ACCE, given certain constraints, assesses the composition of a program through static analysis, feature extraction, supervised learning and clustering (unsupervised learning), automating the subjective process of grading based on style and identifying common mistakes. Further, we create visual representations of the clusters to allow readers and students understand where a submission falls, and the overall trends. We have applied this tool to CS61A--a CS1 level course at UC, Berkeley experiencing rapid growth in student enrollment--in an attempt to help expedite the involved process as well as reduce human grader inconsistencies.	ACCE: automatic coding composition evaluator (abstract only)	NA:NA:NA	2014
Cecily Heiner	In CS1, students have a limited set of programming skills and they often represent a wide range of experience levels; this combination can make group work especially challenging. I describe guidelines for selecting group work projects and problems, suggestions for forming groups and assigning roles, and four projects appropriate for group work in CS1.	Guidelines for group work in CS1 (abstract only)	NA	2014
Shearon Brown:Xiaohong Yuan	It has been a challenge to retain computer science students, especially underrepresented students such as woman and minority. This poster describes our experiences in implementing a mentoring program to improve computer science retention and graduate rates at North Carolina A&T State University (NCATSU). NCATSU is among the United States' Historically Black Colleges and Universities (HBCU) serving more than 10,000 students. The Department of Computer Science on the average enrolls 195 undergraduate students, among them approximately 90% are African American and 30% are African American woman. The Computer Science Department at NCATSU in an attempt to increase retention and graduate rates of minority and women students developed the High-Need Student Mentoring Program supported by the Department of Education Minority Science and Engineering Improvement Program (MSEIP). This poster describes the High-Need Student Mentoring Program (HNSMP). HNSMP is designed to provide special attention to undergraduate students who show signs of having academic difficulty. The goal of this Program is to increase retention by increasing the academic performance of these students. HNSMP's strategy is to assist these students before they reach the point of academic probation or suspension. We will describes data we collected, our findings and challenges we encountered in implementing this program, and our proposed strategies to overcome these challenges. Our experiences and the effective techniques found may be beneficial for other colleges and universities in retaining computer science students, especially African American students.	Techniques for retaining low performing students: high-need student mentoring program (abstract only)	NA:NA	2014
Wingyan Chung:Albert Chan:Daniel Plante:Ray Villalobos:Joseph Woodside	Intelligence and Security Informatics (ISI) is a cross-disciplinary field that connects advanced information technologies, systems, algorithms, and databases with international, national and homeland security related applications. Our NSF-funded project, titled Computing in Context, has a focus of developing new teaching modules and pedagogies for the ISI discipline at the undergraduate level. In this poster, we present five exemplar modules that we developed for the ISI discipline: database design for cybercrime investigation, securing private data on the Internet, data visualization for understanding privacy sentiment, security intelligence for healthcare mobility, and program design for digital forensics. Our materials are designed for inquiry-based learning and for active engagement of students through discussion, hands-on practices, and various exercises.	Intelligence and security informatics: developing curricular modules in context (abstract only)	NA:NA:NA:NA:NA	2014
Stephanie E. August:Michael A. Fraser:Miguel A. Vazquez	The Teaching Artificial Intelligence as a Laboratory Science (TAILS) project is designed to develop a new paradigm for teaching introductory artificial intelligence (AI) concepts by implementing an experimental approach modeled after the lab sciences. In the Basic and Informed Search module of TAILS students learn about various search algorithms by first observing how each algorithm searches a map, watching the construction of the corresponding search tree as the path planning proceeds. Once students understand the differences between algorithms, they proceed to exercises. Students are provided a version of the program with the search algorithm replaced by a comment that guides the students through the process of implementing each algorithm and testing it with the existing application. This enables the students to focus on the AI aspect of the coding without requiring them to also develop the user interface. This poster describes the search module and assessments and presents preliminary results.	Teaching artificial intelligence as a lab science: basic and informed search (abstract only)	NA:NA:NA	2014
Daniel A. Breakiron:Eric Fouh:Sally Hamouda:Clifford A. Shaffer	As the use of online interactive tutorials becomes more widespread, there will be more opportunities to use fine-grained interaction log data to deduce student behavior. Log data can help debug usability or pedagogical problems with the tutorials, or guide redesign to discourage pedagogically poor student behavior. OpenDSA is a collection of open source interactive materials for teaching data structures and algorithms. We present a case study analysis of the activity logs from use of OpenDSA tutorials by roughly 150 students over several weeks. We identified clusters of student use based on when they completed exercises, verified the reliability of estimated time requirements for exercises, provided evidence that a majority of students do not read the text, and found evidence that students complete additional exercises after obtaining credit. Furthermore, we determined that slideshow use was fairly high, but that skipping to the end of slideshows was common.	Analysis of interaction logs for online tutorials (abstract only)	NA:NA:NA:NA	2014
Elizabeth K. Hawthorne:Cara Tang:Jim Nichols:Cindy Tucker	Directed by the ACM Education Board, the ACM CCECC (Committee for Computing Education in Community Colleges) has produced curricular guidance for associate-degree IT programs consisting of core IT learning outcomes with associated assessment rubrics. The learning outcomes express core IT competencies which should be common to all IT-related associate-degree programs. The three-tiered assessment rubrics provide further clarity and meaningful evaluation metrics for each outcome, as well as facilitate integration into assessment-based curricula. The outcomes have been influenced by current and future needs of business and industry, certifications, related curricula, and government and standards bodies, along with the intent of being adaptable, not overly technology specific, and having reasonable staying power. These results are being made available during the poster session, in the exhibit hall at the committee booth, and online at www.capspace.org.	ACM associate-degree IT curricular guidance (abstract only)	NA:NA:NA:NA	2014
Jakita O. Thomas	Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that it solves the problem, and evaluating the solution based on some set of criteria. Supporting Computational Algorithmic Thinking (SCAT) is a research project that explores how African-American middle-school girls develop CAT capabilities over time in the context of game design. SCAT is also a free enrichment program designed to expose middle school girls to game design. Spanning three years, participants, also called SCAT Scholars, develop CAT capabilities as they design more and more complex games. This poster presents the Supporting Computational Algorithmic Thinking (SCAT) project, which is an on-going longitudinal between-subjects research project whose goals are: 1) to guide African-American middle school girls through the iterative game design cycle over three years resulting in a set of complex games around broad themes, and 2) to expose them to the broad range of opportunities that exist for them in all types of industries and areas if they develop their CAT capabilities.	Supporting computational algorithmic thinking (SCAT): development of a complex cognitive capability in african-american middle-school girls (abstract only)	NA	2014
Nadeem Abdul Hamid:Steven Benzel	A number of contextualized approaches to teaching introductory Computer Science (CS) courses have been developed in the past few years, catering to students with different interests and learning styles. For instance, entire courses have been developed around media computation or robots (real and virtual). There is however one context which, to our knowledge, has not been exploited in a systematic fashion - that of "big data," by which we mean massive, openly accessible online datasets from a wide variety of sources. We present progress on a code framework and methodology to facilitate the incorporation of large, online data sets into traditional CS1 and CS2 courses. The goal of our project is to develop a way to provide students a library that relieves them from low-level issues of reading and parsing raw data from web-based data sources and that interfaces with data structures and representations defined by students themselves. In addition, the library requires minimal syntactic overhead to use its functionality and allows students and instructors to focus on algorithmic exercises involving processing live and large data obtained from the Internet. At a minimum, the library should serve to create drop-in replacements for traditional programming exercises in introductory courses - raising the engagement level by having students deal with "real" data rather than artificial data provided through standard input.	Towards engaging big data for CS1/2 (abstract only)	NA:NA	2014
Susan H. Rodger:Daniel MacDonald:Elizabeth Onstwedder:Bella Onwumbiko:Edwin Ward	The Adventures in Alice Programming project at Duke University has created a variety of Alice curriculum materials for integrating computer science into other disciplines at the K-12 level, focusing on both computer science topics and animation topics. For example, one of our new animation tutorials shows how to attach multiple camera views to an object to move with the object through a virtual Alice world. Our newest curriculum materials focus on integrating computer science into middle school mathematics. Our math related tutorials guide users on programming math projects from scratch, and our math challenges are partially built programs for students to complete. We use topics that are attractive to middle school students. For example, we have created a wizard world math and programming challenge that is an eight-level game. Each level in the game is titled similarly to courses one might take in the school Hogwarts in the Harry Potter book series by J.K. Rowling. Students must add code related to either a math or computer science concept in order to complete a level and move to the next level. Since 2008, we have taught extensive multi-week Alice beginner workshops every summer to K-12 teachers, teaching over 200 teachers. Our new curriculum materials are mapped to both the CSTA and the Common Core Math standards, and are available for free at www.cs.duke.edu/csed/alice/aliceInSchools along with teacher lesson plans.	Integrating computer science and mathematics in middle school with alice (abstract only)	NA:NA:NA:NA:NA	2014
Chiung-Fang Chiu	Novice programmers usually fail to combine abstract concepts and knowledge into program design, even though they know the syntax and semantics of individual statement. Adult novice programmers with little computer background knowledge might face more difficulties than young ones do. Therefore, it's important to choose feasible teaching approach and proper programming language to teach adult novice programmers basic programming concepts. This study aims to investigate the use of problem-solving approach to teach Scratch programming for adult novice programmers. A total of 10 graduate students aged from 24 to 45 participated in this study. In additional to the lectures of Scratch programming concepts, students solved programming problems by the scaffoldings of worksheets, which is a problem-solving approach. The worksheets contained a sequence of questions which guide the principles of problem-solving approach -- problem analysis, solution design, coding, testing and debugging. Students were then asked to design and implement their projects by following this approach after learning fundamental programming concepts. The experiment lasted for one semester. The findings of the questionnaire survey and results of interviews with students revealed that most students had positive attitudes toward learning Scratch programming by the problem-solving approach. They considered this approach useful in enhancing their comprehension of the program design process and helping them to implement the programming project more effectively.	Use of problem-solving approach to teach scratch programming for adult novice programmers (abstract only)	NA	2014
Johanna Pirker:Christian G√ºtl	Motivational Active Learning (MAL) is an innovative pedagogical approach based on MIT's teaching format TEAL (Technology-Enabled Active Learning) combined with advanced motivational strategies based on gamification design aspects. The main idea of MAL is to enhance learning outcomes using motivational and social learning experiences. The lecture format is designed for courses, which combine theory in computer science with hands-on programming challenges and collaborative in-course problem solving. The main features of MAL include collaborative learning, constant activities to stimulate interactions between instructor and students, immediate feedback for self-assessment, and motivational feedback such as badges or leaderboard information. The course is structured in the form of mini lectures with constant interactive challenges and interactions such as small arithmetic problems, programming challenges, or research and discussion assignments, which are available using a learning management system as supportive in-course technology to provide the interactive course content and according immediate feedback. First outcomes show positive impact on student motivation and attention during the lessons. Also, more students are willing to complete bonus tasks volunaryly do gain extra points.	Motivational active learning for computer science education (abstract only)	NA:NA	2014
Emmett Tomai:Christine F. Reilly	At our university, like at many other institutions, the pass rate in the introductory programming (CS1) course is relatively low, in the approximate range of 50% to 75%. We would like to discover factors that have an impact on student success in introductory programming in order to better advise and place our students into the course at the appropriate point in their academic careers. Our main motivation for increasing the CS1 pass rate is to help our students graduate on time. It has long been thought that mathematics background is a factor in determining a student's success in introductory computer science courses. Currently, our students must be concurrently enrolled in college algebra or placed into a higher mathematics course. However, given our current low pass rate, we wonder whether this is the proper prerequisite. In order to gather information about mathematics background, we administered a questionnaire to the students enrolled in the class during Spring 2013. We then analyzed the pass rate of our introductory programming students in relation to their mathematics background. Our findings indicate that students who are prepared to take calculus I in the same semester as they take introductory programming were more likely to pass introductory programming. These findings suggest that changing our math prerequisite to pre-calculus may increase the pass rate in our introductory programming course.	The impact of math preparedness on introductory programming (CS1) success (abstract only)	NA:NA	2014
Catherine S. Ashcraft:Wendy Dubow:Zhen Wu	Girls and women continue to be underrepresented in technology. This persistent underrepresentation inhibits innovation by ignoring the diverse perspectives and life experiences women bring to invention and problem solving. Furthermore, disregard for girls and women's participation exacerbates existing economic disparities for women. To reverse these trends, a number of programs designed to engage girls in computing have emerged in recent years. Often these programs are not evaluated, or if they are, informal surveys are used. These instruments are usually unable to adequately assess change in interest, confidence and future plans for computing. In addition, sample sizes tend to be small and, because different programs use different surveys, results cannot be aggregated or compared across programs. To address this gap, NCWIT has been piloting a new evaluation instrument informed by Social Cognitive Career Theory (Lent et al., 2008). The instrument was piloted with two groups of girls: 312 Globaloria middle and high school students and 1500 girls who applied to NCWIT's Aspirations program from 2007 to 2013. Reliability analysis and confirmatory factor analysis were conducted for both datasets, showing high internal consistency. This poster session will provide more detail on the instrument, how it has been used and tested, and next steps in scaling its use. In making this tool widely available, we hope to increase consistency in the evaluation of girls? participation in computing education programs, enabling us to increase sample sizes; compare results across programs; and accelerate contributions to the gender and computing knowledge base.	How do we measure success?: a new instrument for evaluating girls' progress in middle and high school computing programs (abstract only)	NA:NA:NA	2014
Allison G. Mart√≠nez-Arocho:Philip Sheridan Buffum:Kristy Elizabeth Boyer	Exposing students early to computer science may influence their choice of career, and there is increasing recognition that even for students who do not pursue computer science careers, computational literacy is important. This poster reports on a project targeting the development of a new middle school computer science curriculum. This research aims to highlight the role of computation in Big Data in the context of middle school computer science education, which serves as a catalyst to keep students engaged in computer science through middle school via the ENGAGE narrative game-based learning environment. This poster discusses steps taken to validate one activity meant to highlight the role of computation in the context of Big Data: skip list manipulation. While we found that most of the middle school students performed poorly in assessments after the skip list activities, several students showed they were capable of completing the activity successfully, implying that a repetition of the revised skip list study and additional pilot studies for other Big Data activities are needed to pave the way for the development of this Big Data curriculum. This activity will be just one part of a broader curriculum designed to showcase the social relevance and power of Big Data.	Developing a game-based learning curriculum for "Big Data" in middle school (abstract only)	NA:NA:NA	2014
Daniela Marghitu:Lavaris Thomas:Yasmeen Rawajfih:Jillian Hall:Andrew Marshall	This poster describes the "Computer Science for All Bulldogs (CS4ALL-B) pilot, a 7-week long course taught in Fall 2013 at Opelika Middle School, located in the Auburn- Opelika, Alabama Metropolitan Area (https://cs4allb.eng.auburn.edu). The program marks the first time a formal Computer Science (CS) course has been taught in an Alabama middle school. The CS4ALL-B curriculum builds upon the Auburn University innovative 'three-step' model of K-12 computing and robotics instruction that introduces CS and Computational Thinking (CT) concepts for K-12 students. This model uses programming frameworks such as Kodu, Alice, App Inventor, Lego NXT-G and Tetrix, and Computer Science Unplugged (CSU) activities. While moving between the three steps, students explore the fundamentals of CS/CT concepts. The CS4ALL-B curriculum is structured in four main sections: First, introduction to Kodu for 7th graders and Alice for 8th graders; Second, introduction to CS/CT Concepts; Third, participation in selected CSU activities, then students develop their programs to demonstrate their abilities to design and create Kodu or Alice worlds that implement the concepts learned while participating in CSU activities; Fourth, students build their own course project that includes all concepts and skills grasped throughout their training. This model helps maintain high levels of motivation, concentration, and engagement during the entire course. The results of the pilot assessment, including tools such as traditional written assessments (e.g. quizzes, tests) as well as alternative assessments tools (e.g. projects and blog posts), will be presented. We have found that our methods foster the learners' nascent development in CS.	Kodu alice and computer science unplugged: a model of effective introducing middle school students to computer science and computational thinking (abstract only)	NA:NA:NA:NA:NA	2014
Diane Horton:Michelle Craig	In the interest of better understanding why many students fail to complete CS1 successfully, we analyze a class of 555 CS1 students, 127 of whom either failed or dropped the course. We find that students with previous experience are more likely to pass even if the experience is not a formal programming course. Contrary to intuition, students who drop have enrolled in fewer courses and have fewer hours of non-school commitments than those who stay. We present a classification scheme to categorize student outcomes based on their performance at a course midpoint.	Who drops CS1? (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science educators are constantly reinventing introductory CS0, CS1 and CS2 courses to retain students and increase their learning and motivation. While the focus on drawing students into Computer Science is vital to maintain enrollment, it is also paramount to sustain student motivation by using new pedagogical approaches, contextualized to how students learn, throughout the curriculum to develop technical and interpersonal skills. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. In this poster, we present the initial results of a project with two aims to: (1) design, pilot, and offer new curriculum materials for three upper-level Computer Science courses using a mobile computing platform paired with pedagogical approaches sensitive to the learning styles of today's student; and, (2) develop out-of-classroom learning opportunities including mobile computing student seminars, externship opportunities and service-learning projects reinforcing in-classroom technical skills. We believe that these two components synergistically, can be leveraged to revitalize the undergraduate Computer Science curriculum, better motivate student learning and provide in-demand technical skills to students without losing the fundamental Computer Science concepts. This project is partially supported by NSF DUE#1140781.	Revitalizing the computer science undergraduate curriculum inside and outside of the classroom using mobile computing platforms (abstract only)	NA:NA:NA	2014
Bruce W. Char:Thomas T. Hewett	This is work-in-progress on an entry-level course on computational problem-solving and programming for engineering students. It has been run since 2006 at our institution at a scale of 800 students/term, as a hybrid in-person lab and out-of-class on-line autograded exercises using Maple TA. The course is in the process of changing languages (from Maple to Matlab), with upgraded resources: a lecture period, some manually graded assignments, projects, and automatic code testing. To date the assessment of the impact of the course has been through conventional means: assigning grades and indications as to whether student grades are consistent with those obtained in other courses taken. During the transition from Maple to Matlab more detailed and individualized performance assessment plans are being developed which are intended to enable the staff and students to better judge weaknesses in program knowledge and who would benefit from additional personal contact.	A first year common course on computational problem solving and programming (abstract only)	NA:NA	2014
David Sturgill	This poster presents preliminary investigation of the content and quality of on-line peer mentoring in competitive problem solving. Discussion board postings from the Queue-ICPC Challenge were analyzed with respect to content, including type of communication, topic, intended audience and accuracy, as well as attempts at relationship building. Responses outnumbered questions more than 2 to 1, suggesting that even in a competition, people are willing to assist others. Interestingly, some of the most successful competitors were also the most willing to offer help to others. As part of a voluntary competition, this kind of peer mentoring is useful resource for attracting and supporting new participants. In the academic context, peer mentoring may be an essential aspect of learner support for large, traditional classes. In very large scale efforts such as MOOCs, it may provide a scalable resource for helping participants to succeed and remain engaged.	Altruism among programmers: the availability and effectiveness of on-line, spontaneous peer mentoring in competitive problem solving (abstract only)	NA	2014
Amber Wagner:Jeff Gray	During the Summer of 2013, we participated in a United Cerebral Palsy supported summer camp for children with disabilities. While our initial motivation for attending the camp was to conduct a user study of a Vocal User Interface, we worked with the camp attendees outside of testing and beyond computer activities, and during these activities, we were able to ask the attendees about their computer experience and interest. The attendees' experience and interest was noted along with the results of the study. The study demonstrated that voice was a useful modality for this audience; however, we were more surprised to learn that the majority of the attendees were not enthusiastic about using the computer and preferred more social activities. Three different types of computer science education activities were offered during the six week camp. The first activity was a group activity in which roughly ten students participated. The next activity was completed with smaller groups consisting of 2-3 attendees in which five students participated throughout the camp. The final activity was a one-on-one activity, and only three students chose to participate in the one-on-one activity. This poster presents the details of these activities, results of the user study, and thoughts as to why few attendees chose to participate in the smaller group activities based on observations during the summer camp.	Observations of first learners with different capabilities (abstract only)	NA:NA	2014
Gili Rusak:Darren Lim	Despite dramatic changes in technology over the past several years, educating young students in computer science at the elementary school level remains a challenge. Tackling this issue, we created 'Codester,' a novel Android application, as a tool to engage learners in the basics of computer science and to teach them computational thinking. Unlike other educational coding programs such as Scratch and Lego Mindstorms, our app is unique because it is mobile and allows users to learn a variety of concepts at a rapid rate. By running user studies for participants in grades 1-3 and 4-6, we quantified the effectiveness of Codester. Students were challenged and developed logic skills throughout the sessions. Using surveys, pretests, and posttests, we found an improvement in the five main computational thinking concepts that Codester teaches: sequencing, iteration, code reuse, decision-making, and logic. The participants especially showed an increased understanding of the code reuse concept: grade 1-3 students improved by 32% at the end of the program; grade 4-6 users improved by 43%. Additionally, the software and the tablet platform were attractive to the participants. Eighty percent of students stated that they enjoyed using the tablets to learn new material, and 72% said that they would like to continue learning with Codester. These figures show a promising increase of interest in coding and thus match the goal of our app: teach youngsters programming in a fun and challenging way. Please see www.codesterapp.com.	"Come code with codester": an educational app that teaches computer science (abstract only)	NA:NA	2014
Jean H. French	The living lab concept promotes innovation by solving problems in an open, user-centric environment. A living lab approach was implemented in an undergraduate, advanced software engineering course to develop applications for the Leap Motion. The Leap Motion is a novel device that provides touch-less interaction with computer systems. Sixteen students worked toward the common goal of developing applications for the Leap Motion. All aspects of the project were supported in the student-led, open environment, from initial research to implementation. Because the Leap Motion device was not available until shortly before the semester, students had no prior experience in application development for the technology, adding to the difficulty and uniqueness of the task. This poster provides the details of the living lab implementation as the project progressed through the semester.	Implementing a living lab approach to foster innovation in an advanced software engineering course (abstract only)	NA	2014
Thomas Ashmore:Sorathan Chaturapruek:Zachary Dodds:Corinne Druhan:Bridgette Eichelberger:Michael Erlinger:Elizabeth Schofield	In this poster we present a CS curriculum aimed at "middle-years" students. In the U.S., this corresponds roughly to students aged 11-15. This MyCS curriculum provides a hands-on introduction to computer science through six distinct modules. Three programming modules use the Scratch environment to build computational sophistication and procedural intuition within an inviting development environment. Alternating with Scratch are three problem-solving modules whose activities deepen awareness and facility with computation through novel exercises. More than 25 classrooms and 900 students have participated in MyCS's pilot years within the Pomona, CA and Lihue, HI school districts. 2013-15 will see an expansion of its workshops, academic-year classes, and program evaluation. Course materials will be served by the OpenEdX platform both at HMC and on Amazon EC2. This poster shares our development and deployment of MyCS to date, and invites feedback from other institutions in their efforts to foster adolescents' computational identities.	MyCS: building a middle-years CS curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Daniel Armendariz:Zachary MacHardy:Daniel D. Garcia	The Online Course Tool for Adaptive Learning (OCTAL) is an adaptive exercise system that customizes the progression of question topics to each student. By creating a concept dependency graph of topics in a course and modeling a student's knowledge state, the tool will present questions that test knowledge within a student's zone of proximal development. We intend OCTAL to be a formative assessment tool that is not tied to any specific course by providing language-agnostic questions on computer science concepts. While the tool will be generalizable for many courses, our first prototype will include a concept map and question set from an introductory CS1 course, UC Berkeley's CS10: The Beauty and Joy of Computing. Using the tool, we are investigating metacognitive improvements in the identification of knowledge gaps by presenting online course material in a nonlinear fashion.	OCTAL: online course tool for adaptive learning (abstract only)	NA:NA:NA	2014
Debzani Deb:Mohammad Muztaba Fuad	This poster addresses a significant learning barrier experienced at many CS departments, specially at predominantly minority institutions, which is the problem of students? inability to keep engaged and interested in classroom. In this research, we investigate the applicability of using mobile devices in the classroom and incorporation of interactive problem solving using those devices to increase class engagement and active learning for students. By allowing the students to solve problems in their preferred devices, the research expects to create a friendly learning environment where the students want to retain, be active and skillful. The poster will present the design aspects of Mobile Response System (MRS) software that will be utilized to communicate, collaborate and evaluate interactive problems using mobile devices. The poster will also showcase several interactive problem-solving activities utilizing mobile devices and MRS software, which have been developed and are being adopted in CS and IT courses at Winston-Salem State University (WSSU). It is expected that this research will invigorate interest in Computer Science among minority and underrepresented students through exposure to the technology-rich learning environment. By enhancing student learning and problem solving abilities, it is also expected that this research work will improve the quality and quantity of underrepresented minority students in STEM workforce or graduate study. The successful execution of this project will advance research and the knowledge of mobile device usage in CS classrooms and more importantly the way it impact teaching strategy and student learning at WSSU and other institutions.	Use of mobile application to improve active learning and student participation in the computer science classroom (abstract only)	NA:NA	2014
Wenliang Du:Li Yang:Joseph Kizza:Xiaohong Yuan	Browser security as an important and relatively new area is yet not part of existing IA curriculum or National Security Agency (NSA) knowledge units. Browser security incorporate threats, vulnerabilities, risks, and countermeasures faced by browsers and browser-based applications ranging from design principles, security architecture to applications. Our effort contributes to courseware development and IA education in terms of browser security. Hands-on labs are effective to improve student learning in IA and sharpen their skills in real-world settings. We develop hands-on labs to help students to build necessary skills on developing secure browser and browser-based applications. Our developed hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and Information Assurance (IA) courses.	New hands-on labs on browser security (abstract only)	NA:NA:NA:NA	2014
Rajshekhar Sunderraman	The treatment of abstract query languages such as Relational Algebra, Relational Calculus, and Datalog in introductory database courses varies considerably across the various computer science departments around the world. We propose an integrated approach in which students learn how to express a natural language query in Domain Relational Calculus (DRC), apply a query-transforming algorithm to the DRC expression tree to produce Datalog Rules (DLG), and finally apply another query-transforming algorithm to the DLG rules to produce an equivalent Relational Algebra (RA) expression. This systematic approach works very well for "forall-queries" in which the forall-quantifier is necessary in the DRC expression. To make this approach even more effective, the students are required to use DRC, DLG, and RA interpreters that allow them to execute query expressions as well as produce equivalent expressions. The students are also involved in implementing these interpreters to get a deeper understanding of querying in relational systems.	An integrated approach to teaching of abstract query languages and their implementations (abstract only)	NA	2014
Martha J. Kosa:Ambareen Siraj	We describe a new annual awards program, the Rising Renaissance Engineer Spectrum Awards, which recognizes a diverse body of students across all engineering departments at our institution for their initiatives and achievements in educational, research, and professional development activities. This award is unique at our institution because it is inclusively for students from all six engineering departments and specifically promotes underrepresented groups. This awards program complements existing engineering awards honoring faculty, staff, and alumni for their research, teaching, and service. It is modeled after the NCWIT (National Center for Women in Information Technology) Aspirations in Computing Award, which has successfully encouraged many female high school students to persist in computing careers. With the Computer Science Department spearheading the effort, this project is a collaborative partnership among representatives from all engineering departments.	The rising renaissance engineer spectrum awards (abstract only)	NA:NA	2014
Anna Koufakou:Dahai Guo	Incorporating social networks in the curriculum to better engage students has gained a lot of attention as a result of the popularity of social networks with college students. We introduce EasySocial, a social network plugin for Eclipse, written by a CS educator, the second author of this poster. The goal of the plugin is for students to be able to easily write code using their own personal data, e.g. on their Facebook or Twitter account, with minimal knowledge of the specific social network API. The EasySocial plugin has several features which makes it useful in our CS classes: it seamlessly embeds the process for authenticating with Facebook; it abstracts the process for making HTTP requests and parsing various data formats, such as JavaScript Object Notation (JSON); it integrates Gephi functionality, so that students can access Gephi's powerful functions for network analysis and visualization in their Java programs. We used the plugin in our Fall 2013 Data Mining course for CS undergraduate students in order to quickly introduce them to social data visualization and social network analysis concepts such as community detection. The students easily wrote Java code to visualize their network graph and detect communities. We received a very positive response, and several students expressed enthusiasm about the programming aspect as well as the application topic. Future plans include further employing EasySocial in other courses, for example to help students in entry-level courses understand programming concepts, such as arrays and loops.	Developing and using an in-house plugin for easy social network programming (abstract only)	NA:NA	2014
Marcell Amorim Almeida Mesquita:Armando Maciel Toda:Jacques Du√≠lio Brancher:Ricardo Melo Casseb do Carmo	Programming Languages and its uses play a vital role in IT higher education courses, because it is necessary that students have a good understanding in order to become full fledged developers. We made a study to verify the initial reception of this method regarding the students satisfaction and so, this meta-paper proposes the continuation of this research. It involves the utilization of a Social Network and gamification concepts, like badges, points, levels and leader boards to improve students participation.	Utilizing gamification with social network to aid students in programming languages lessons in higher education IT courses (abstract only)	NA:NA:NA:NA	2014
Andrew Hicks:Barry Peddycord II:Irena Rindos:Christopher Simmons	Intelligent tutoring systems have been shown to significantly aid in student learning without requiring extensive instructor intervention. One feature of intelligent tutors is their ability to provide hints to students who get stuck, but the production of hints by hand is prohibitively expensive. Hint Factory (Stamper et al., 2008) is a domain-independent technique for generating hints from interaction graphs. In this work, we explore approaches for creating graphs that represent interactions in an educational programming game called BOTS. We use data from seven programming puzzles that contain a total of 1100 interactions with the game. We believe that we can begin by seeing what works in the small language of a programming game to inform how we can scale the techniques for "real" languages in "real" tutors.	A comparison of two approaches for hint generation in programming tutors (abstract only)	NA:NA:NA:NA	2014
Johanna Pirker:Christian G√ºtl:Frank Kappe	Organizing a Programming 101 course for a thousand computer science freshmen poses a challenge. One major problem is the high dropout-rate due to insufficient social interactions and the missing feeling of presence. Collaborative home assignments can help to overcome such issues. However, due to scheduling conflicts not all students are able to meet in person to work together. Many tools support collaborative online programming, but have several disadvantages in comparison to face-to-face meetings. This work presents a virtual world environment, where student groups can meet online, but experience the advantages of face-to-face interactions. They can commonly use different tools for collaborative problem solving at one shared virtual location. They experience the feeling of presence, which increases the individual contribution, even from distant sites. Furthermore, the environment provides facilitated possibilities for tutor meetings, where students can discuss and present their solutions. In this work a first prototype of the environment is described. In addition advantages as well as potential issues or difficulties are discussed.	Collaborative programming exercises in virtual worlds (abstract only)	NA:NA:NA	2014
Stoney Jackson:Heidi Ellis:Robert Crouse	Programming contests have been used at the high school level to motivate students to study computing and generate excitement about computing topics. However, little investigation has been done into whether the selection of programming language impacts success in such contests. This poster presents the results of an analysis of five years of high school contest results held at Western New England University. The analysis looks at the languages used by winning teams and number of submissions. Results appear to indicate that winning teams use Java and Python for programming languages while less successful teams use BASIC, VisualBasic and C++. Interestingly, the majority of teams used BASIC as their programming language. Another interesting result was that low performing teams tend to have a disproportionately large number of submissions.	Impact of programming language on success in high school programming contests (abstract only)	NA:NA:NA	2014
Amanda Ochsner:Rane Johnson-Stempson:Matthew Berland	This project consists of a collaborative effort between the Games+Learning+Society Center at the University of Wisconsin-Madison and Microsoft Research to create an online community to engage girls in computer programming and game design. The goals of this community are threefold: 1) to support initial interest in computer science among young women and then build on that interest through increasingly involved participation within the community; 2) to foster the learning of programming specifically, and computational and design thinking more broadly; and 3) to provide support to the young women within the community at the critical engagement and learning points. At SIGCSE 2014 we will present the first major phase of the project-an updated version of our team's Studio K curriculum for teaching game design and computational thinking to middle and high school students. We will also report on early research findings from the first all-girl cohorts to complete the curriculum.	Mission critical: building community to engage young women in computer science (abstract only)	NA:NA:NA	2014
Sagar Raina:Blair Taylor:Siddharth Kaza	Addressing the crucial need for cybersecurity learning materials, the Security Injections @ Towson project (towson.edu/securityinjections) has developed modules for CS0, CS1, CS2 and Computer Literacy courses that target key secure coding concepts including integer overflow, buffer overflow, and input validation. Assessment results indicate that these modules have led to an increase in students' security-awareness and their ability to apply secure coding principles. Each security injection module includes four sections - background, code responsibly (includes methods to avoid security issues), laboratory assignment with a security checklist, and discussion questions. In this study, we are proposing to enhance these modules by incorporating e-learning strategies including lesson segmentation, instant feedback, and self-paced lessons to increase student learning. In addition, we are designing a system with auto-grading functionality and dashboards to encourage adoption by instructors. Segmenting modules into smaller sections and including --gatekeeper questions will facilitate learning and reduce cognitive overload. Providing feedback on incorrect answers encourages students to revisit relevant sections. The goal of this feedback based approach is to improve student learning and content retention. The nature of the enhanced modules allows for self-paced learning which is applicable for online learning environments. We conducted a pilot study using a module in CS0 undergraduate computer science class that included 60 in-class and 9 online students. The results of the pilot study indicated increased attention towards the content and possible improvement in retention of concepts. This project is partially supported by NSF under grant DUE-1241738	Interactive e-learning modules for teaching secure: a pilot study (abstract only)	NA:NA:NA	2014
Lisa M. Marvel:Stephen Raio:Lori Pollock:David Arty:Gerard Chaney:Giorgio Bertoli:Christopher Paprcka:Wendy Choi:Erica Bertoli:Sandra K. Young	In this poster, we describe our experience of designing and executing two different weeklong programs for 10th -- 12th grade students. The goal of our program is to attract students to the field of computing, increase their computing confidence and familiarize them with ways that computing impacts our community. Student groups consist of 32 students for each week with a 1:0.8 male-to-female ratio. No prerequisite knowledge is required to attend. We compare the different facets of the curriculums by evaluating the impact of each week both quantitatively and qualitatively. Our evaluation implies the attraction of cyber security topics to this age group, particularly male students, and presents a curriculum that may help increase confidence in computing concepts, particularly for female students. We solicit feedback and welcome input on our curriculum and evaluation method.	A comparison of two hands-on laboratory experiences in computers, networks and cyber security for 10th-12th graders (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Prem Uppuluri:Jeff Pittges:Joseph Chase	Radford University's Scare and Prepare (SP) program is being developed to enable high-school teachers to cultivate security cons cious cyber-citizens and, in the process, spark a passion for computer science. We are accomplishing this in two ways: (a) incentivize high school teachers to incorporate security into their curriculum with little investment in resources (hardware, software and personnel), and (b) introduce computer science concepts such as programming (e.g., Javascript) and basic operating system functionality (e.g., file organization and memory management). Our experience shows that success of high school CS programs depends on the teacher's motivation. SP will reduce preparation times for teachers by providing all the necessary learning materials in the form of screencast lectures and portable and remote hands-on labs. Ultimately, we propose to develop a dual enrollment college credit course. SP's learning materials are intended to spark interest among students by both scaring and preparing them. The first strategy is to scare students with the potential implications of cyber-attacks on aspects that matter to them: social networking sites and smart phones. Next, students are prepared to defend against such attacks. Finally, to sustain interest prepared high schools students will compete in cyber-defense exercises.	Scare and prepare: increasing awareness, safety, and passion for cyber-security (abstract only)	NA:NA:NA	2014
Volker Ahlers	Computer graphics is a subject which is typically enjoyed by students and which has the potential to attract pupils to consider studying computer science. Although the programming methods used by computer graphics have significantly changed in recent years due to the integration of programmable shaders into the graphics rendering pipeline, a lot of computer graphics courses still start with the fixed-function pipeline. In view of future applicability, however, it is desirable to teach students modern concepts of computer graphics from the beginning. One problem with teaching shader-based computer graphics is that a lot of technical tasks lie in the hand of the programmer: loading and compiling shader programs, managing buffer objects, defining transformations by means of matrices, etc. This poster presents a scene graph library which is fully based on the programmable rendering pipeline. It uses the OpenGL 3.2 core profile, which does not allow deprecated fixed-function functionality. The teaching approach combines the high-level abstraction of a scene graph with the low-level programming of shader cores, which are attributed to scene graph nodes. The presented scene graph library has a simple and clear structure and is extensible in order to let students implement advanced concepts taught in the lecture, like shadows or particle systems. Finally, the poster presents code samples, results of student projects, and student evaluation results.	An extensible scene graph library for teaching computer graphics along the programmable pipeline (abstract only)	NA	2014
Roy P. Pargas:Punit Kulkarni:Greg Edison:Barbara J. Speziale	Teaching a mobile device software development course is very different from teaching a CS1, CS2, or advanced programming class. In a traditional software development class the target computer (on which the software being developed is to run) is a laptop or desktop computer. In a mobile device software development course, the target computer is a smartphone or tablet that has a large number of features (web access, a camera, GPS, a gyroscope, media display, etc.) that can be controlled by software. The material that must be covered in such as course is so broad that new approaches to delivering course content must be used. This poster describes the overall method by which we have taught such a course. We describe four challenges: (1) The content is new and constantly changing. (2) The material to be covered is very broad and includes diverse components. (3) The course requires that the students understand databases design and implementation, topics often taken in the final year of the curriculum and too late for this course. (4) Finally, finding meaningful course projects is difficult and we benefit greatly from a program such as Clemson's Creative Inquiry Undergraduate Research Program. We explain how we address each of these challenges and describe the structure of the course in detail. We conclude with the results we have produced over the past five years, evaluation by students, and successes students have achieved. We also demonstrate both iOS and Android apps that have been developed through this course.	Teaching mobile app software development is a challenge! (abstract only)	NA:NA:NA:NA	2014
Joseph B. Wiggins:Joseph F. Grafsgaard:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Emotion, or affect, plays a central role in learning. In particular, promoting positive emotions throughout the learning process is important for students' motivation to pursue computer science and for retaining computer science students. Positive emotions, such as engagement or enjoyment, may be fostered by timely individualized help. Especially promising are interventions if the student is having difficulty completing a task. Recognizing when a student is facing a complex task may better inform teachers or adaptive learning environments about the students' affective states, which in turn can inform instructional adaptations. We approach this research goal by analyzing a data set of student facial videos from computer-mediated human tutorial sessions in Java programming. Students and tutors interacted with a synchronized web-based development environment. The tutorial sessions were divided into six lessons each with subtasks, and featured corresponding learning objectives for the students. In post-hoc analysis, we identified "difficult" tasks by comparing the frequencies of student-tutor interaction and task behaviors such as running the program and the time to complete tasks. Nonverbal behaviors, such as gesturing or postural shifting, were then compared with task difficulty. Understanding such nonverbal behavior can inform individualized interventions, which may keep students engaged and foster greater learning gains.	The relationship between task difficulty and emotion in online computer programming tutoring (abstract only)	NA:NA:NA:NA:NA	2014
Scott Turner	Looking Glass is a library designed to support the testing of students' C++ code through reflection. Instructors can design tests that compile even if there are mismatches between the instructor's and student's code (like misspelled function names or parameters that do not have the expected types). Using the autogenerated metadata, instructors can search for and call functions or methods in the student code, including the main function, while providing feedback (rather than a compile error) if the required code is not found. Although not suitable for all C++ programs, Looking Glass was designed to support instructors in introductory and intermediate classes and to be transparent to the students. This poster describes the setup and use of Looking Glass with examples of the functionality it currently supports.	Looking glass: a C++ library for testing student programs through reflection (abstract only)	NA	2014
David P. Bunde:Michael Graf:Deyu Han:Jens Mache	There are many different ways to write parallel programs. We illustrate a variety of relevant language paradigms by presenting implementations of the Game of Life, a simple simulation motivated by living organisms. Featured paradigms include shared memory, GPU acceleration, message passing, and Partitioned Global Address Space (PGAS).	Parallel programming paradigms illustrated (abstract only)	NA:NA:NA:NA	2014
Stephen Jacobs:Amit Ray:Jonathan Schull	This poster will briefly show and describe the five year history of FOSS course offerings and projects in the School of Interactive Games and Media that led to the development of the minor and then diagram and describe the Minor's design and content. It will show how the Humanitarian focus of the student work, beginning with the development of educational games for the One Laptop per Child and Sugar communities built a foundation for the minor. It will then discuss the design of the minor, how the required courses leading to advanced electives also prepare students to become contributors and, potentially, project leaders within Free and Open Source Software and Free Culture communities within the students' own academic specializations. It will diagram the paths that both technical and non-technical students can take to succeed in completing the minor.	RIT's new minor in free and open source software and free culture (abstract only)	NA:NA:NA	2014
D. Brian Larkins	Modern robotics are at the locus of several related disciplines including computer science, mechanical engineering, electrical engineering, and others. The interleaving of these disciplines within a single robotic system can make teaching the fundamentals of robotics to undergraduate students within a traditional computer science curriculum a challenging task. One way to address this challenge is with an immersive, experiential approach that exposes students to these different facets of robot design in context. This poster describes the application of the Cognitive Apprenticeship (CA) framework to an undergraduate robotics course comprising of projects that touch on several different engineering disciplines. CA techniques are used to help students gain insight and understand how contributions from a variety of domains are interwoven to build a functioning robotic system. Throughout the class, students work on teams to complete projects at different levels of abstraction using two different robot platforms. Students learn about software design and implementation by constructing reactive paradigm behaviors on a Khepera III robot in the first part of the course. Later, students construct a quadcopter UAV from a kit, handling all aspects of construction, calibration, and configuration. This work focuses on two perspectives of this course: the use of the CA framework as a structure for experiential learning and also to describe a set of projects that emphasize the interdisciplinary nature of robotics.	Making use of the cognitive apprenticeship framework in an undergraduate robotics course (abstract only)	NA	2014
Leo C. Ureel II:John Earnest:Charles Wallace	With the continued and alarming lack of involvement in computing among college students, attention has recently focused on engaging students at the middle and high school levels. Our "Copper Country Programmers" club began as a community outreach program to fill a gap left by the elimination of the computing curriculum in the local school district. In our club, university faculty and students provide curriculum, tools, and classroom tutoring for young novice programmers across the school district. Our curriculum teaches programming through a series of exercises involving HTML, BASIC, LOGO, and Processing (a graphics-oriented Java variant.) Contrary to some other approaches, we present students initially with a low level, bare bones programming model and development environment, then gradually increase the functionality and complexity. We find that students readily grasp the simple, transparent initial model, then experience first-hand the motivations for adding functionality (and complexity). Our cross-curricular programming topics include graphic design, interactive fiction, computer generated poetry, mathematical simulation, computational geometry, game physics, computer art, artificial intelligence, video game development, and critical thinking. We provide examples of our curriculum, student work, problems encountered, and how they were resolved.	Copper country programmers: a novel curriculum for beginning programmers in middle and high school (abstract only)	NA:NA:NA	2014
Gabriella Anton:Matthew Berland	Studio K is a game design curriculum constructed to provide middle school students an engaging entry into computer science and programming. Developed at the University of Wisconsin-Madison, the program employs Microsoft's 3D programming environment, Kodu, in tandem with support and analytic tools for facilitators, and an online community that provides players with a support system. These key features are bolstered with incorporation of telemetry data gathered through design sessions that are used to improve site functioning, curriculum relevancy, and administrative tools. This program is applied across contexts, with applications in formal classrooms, informal extracurricular clubs or camps, and alternative learning environments such as library systems or home schools. Studio K provides a well-supported, unique entry into computer science in which programming knowledge becomes a tool that supports learners' goals in designing and developing games.	Studio K: a game development environment designed for gains in computational thinking (abstract only)	NA:NA	2014
Ankur Chattopadhyay:Thomas Nehring	Given that many modern computing technologies have led to privacy issues in today's digital world, the latest CS curriculum (CS2013 - Ironman Version 1.0) has recommended a strong need for inclusion of privacy topics within the present body of knowledge. According to the above curriculum, there is a requirement for global awareness of today's growing privacy concerns with technology. Our proposed lab caters to the above curricular recommendation. We present a physical security focused lab, which is based on the technology of PVA (Privacy through Visual Anonymity). Through this hands-on PVA lab, we teach pre-university and university students the notion of privacy in images/videos and educate them in the technique of VA (Visual Anonymity), which can help safeguard one's privacy by obscuring the individual identity in pictures/videos captured by cameras. Using this lab, we intend to enhance CS education and outreach by making students aware of the global issue of privacy invasion in today's surveillance and by demonstrating how the issue can be addressed via VA. The lab exercises are based on two open-source applications, namely "ObscuraCam" and "YouTube-FaceBlur". These applications are used as tools for enabling students to learn the concept of PVA. In this process, we show students an innovative aspect of balancing security and privacy in technology, thereby drawing their focus to the humanitarian side of CS applications. Our topic of PVA also enhances the IAS knowledge area in the latest CS curriculum.	PVA (privacy through visual anonymity) lab for enhancing CS education and outreach (abstract only)	NA:NA	2014
Remy DeCausemaker:Stephen Jacobs	This poster will briefly describe the components of the Humanitarian Free/Open Source Software Development (HFOSS) course offered by the Department of Interactive Games and Media at Rochester Institute of Technology in Upstate NY. It will depict this model of an "Open" Course (i.e. Open Courseware, Open Curriculum, Open Classroom, and Open Code) informed both by academic theory, and industry best practice. It will show the results of designers, developers, and project leaders, working in tandem with professors, staffers, and administrators to offer students a chance to apply research, and put theory into practice. It will discuss strategies of engagement, metrics of success and failure, and what resources are available for others to do the same.	Adventures in hackademia: leveraging humanitarian free/open source software development in the class room (abstract only)	NA:NA	2014
Michele S. Roberts	While programming has long been utilized as a recruitment path into computer science, data analysis as a recruitment path is relatively under-explored. Through a series of modular curriculum units developed in computational thinking, the potential impact of explorations in data analysis to impact teacher and student affect toward and interest in computer science is being investigated. Developed units include exercises such as statistically determining the author of selected text passages, modeling roller coaster simulations, solving crime mysteries and controlling zombie contagions. Computational thinking modules have been delivered in a CS Pilot course, as well as in K-12 outreach programs in non-computing courses (STEM and non-STEM, including classes in English literature, sociology, biology, physics and math). Initial results show significant and promising opportunities to utilize data analysis to create computing interest in a broadened population of students and teachers, extending the impact of computational thinking into a variety of subject domains.	Data-driven broadened participation (abstract only)	NA	2014
Kevin Buffardi:Stephen H. Edwards	Rudimentary programming skills are essential to developing fundamental proficiency in computer science. However, learning programming techniques can be challenging and frustrating for many students. CodeWorkout is an online learning environment that offers drill-and-practice exercises with novel social and adaptive scaffolding. Learners can track their progress on an assortment of computer science areas and skills while taking advantage of social features to discuss questions and help teach each other. Meanwhile, objective measurements of questions and teaching hints help promote the best, most effective content for learning. Our poster demonstrates how both computer science students and teachers benefit from joining the CodeWorkout community and taking advantage of its unique features.	Introducing CodeWorkout: an adaptive and social learning environment (abstract only)	NA:NA	2014
Jeff Gray:Mokter Hossain:Jonathan Corley:Amber Wagner:Cassidy Lamm:Mary Boehm:Carol Crawford:Kathleen Haynie:Sheryl Packman:Deepa Muralidhar:Jeff Baker:Roy Black:Sandy Falgout:Leella Holt:Albert Lilly:Gina McCarley:James Morse:Jennie Rountree:Jill Westerlund:Carol Yarbrough	This poster describes our first-year experience in developing and evaluating a CS Principles professional development model for training a cohort of teachers across an entire state geography. The scalable deployment and sustainable persistence of the new CS Principles course adopts the successful practices of a national AP training program developed by the National Math and Science Initiative (NMSI). It applies those practices in a professional development program based on year-long in-person training and distance learning collaboration. A statewide "Teacher Leader" model is being explored where those already teaching more rigorous CS courses will assist in training new peer cohorts as they establish CS Principles in their schools. Teachers in these cohorts collaborate together on content and pedagogical learning experiences, fostered by peer leaders. The assessment is uncovering the facets of our model that are most suitable for building a sustainable network of CS Principles teachers. This poster is focused on a description of our first-year experiences and extensive evaluation results. The poster will describe the curriculum that is being developed by our teachers, a set of lessons learned from our PD experiences, and the details of our evaluation. The Teacher Leaders will be available near the poster to discuss their experience with anyone who has an interest in our professional development model for CS Principles.	A first-year experience report on a model for statewide deployment of CS principles courses (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Jonathan McKinsey:Samuel Joseph:Armando Fox:Daniel D. Garcia	Pair programming, a form of collaborative learning where two programmers work on the same computer, enhances learning in novice programmers and improves code quality in experienced programmers. Remote pair programming (RPP) brings the pedagogical technique of pair programming to the distributed online environment of Massively Open Online Courses (MOOCs). UC BerkeleyX's CS169 Software as a Service MOOC successfully uses a Google+ community for students to generate their own RPP events or join events created by their peers. We will examine survey results summarizing the RPP experiences and RPP technologies of student pairings in the Fall 2013 offering of CS169, as well as analyze RPP sessions. In the future, the aim is to generalize RPP methodology, expand its applications to other MOOCs and traditional classrooms, and compare its effectiveness to in-person pair programming.	Remote pair programming (RPP) in massively open online courses (MOOCs) (abstract only)	NA:NA:NA:NA	2014
Frank McCown:Michael L. Nelson	This poster reports on course materials that have been developed for teaching an Introduction to Web Science course to computing majors at the undergraduate level. This is the first comprehensive collection of resources that we are aware of that targets undergraduates in the exciting new field of Web Science. The course materials include slides, reading assignments, homework assignments, programming projects, and exams. We hope these materials will make adopting a Web Science course easier for a computing department or for creating an interdisciplinary course which could expose computing to a more diverse and broader group of students. Course materials may be obtained from the authors and from the following URLs: http://www.harding.edu/fmccown/classes/comp475-s13/ http://www.cs.odu.edu/~mln/teaching/cs595-f13/ This work was supported by the National Science Foundation (IIS 1008492).	Resources for teaching web science to computer science undergraduates (abstract only)	NA:NA	2014
John K. Estell:Ken Christensen	The Pledge of the Computing Professional (http://computing-professional.org), endorsed by SIGCAS and the ACM Committee on Professional Ethics, was developed to both support professional responsibility in computing and to raise awareness of one's ethical responsibilities. To date, 25 institutions across the US have conducted Pledge Ceremonies to welcome their graduates into the computing profession. In a recent Inroads article, Don Gotterbarn asserts that, if one's ethics is influenced by those around us, then "just being aware of the existence of this Pledge helps to refocus us all on our own responsibility and the profession's responsibility." So in what ways can this Pledge be used both inside and outside of the classroom to better promote such traits? This session is for those interested in computing ethics and professional responsibility to get together and collaborate on new initiatives featuring The Pledge of the Computing Professional as a means to this end.	Promoting professional responsibility and ethics: the pledge of the computing professional (abstract only)	NA:NA	2014
Elissa M. Redmiles:Jandelyn D. Plane	Mentors-prot√©g√© relationships have been shown to improve retention of women and under-represented students in computing (Cohoon, 2011). Mentorship relationships are also the driving factor in female students' selection and completion of a computing career (Ashcraft, Eger, & Friend, 2012). More generally, mentor-prot√©g√© relationships are a significant factor in retaining and encouraging under-represented students in many academic fields. Beginning with a brief discussion of our experience facilitating mentorship between female undergraduate and middle school computing students, this Birds of a Feather Session will provide a platform for the exploration of mentor training techniques and mentor-prot√©g√© relationships. We will discuss and share different strategies (e.g. readings, hands-on workshops) for training mentors and facilitating strong mentor-prot√©g√© relationships. We will also explore how mentorship relationships affect student performance in all school subjects and how to best create a broad mentorship experience that extends beyond computing. Using a summary of recent literature as a springboard, we will consider optimal mentor-prot√©g√© age gaps, experience levels and interaction frequencies. Finally, we will explore session participant's personal experiences as mentors/prot√©g√©s and compile a list of "do's and don'ts" for those facilitating or participating in mentorship programs.	An exploration of mentor-prot√©g√© relationships and how to train future mentors (abstract only)	NA:NA	2014
Ernst Leiss:Lila Ghemri	The unprecedented use of social networking, the Web and other related technologies by all fringes of population, has not been accompanied by an adequate awareness of its potential for abuse, privacy violation and cybercrimes. Furthermore, technology nowadays provides extensive capabilities which often times clash with society's laws and ethics. In particular, modern societies have certain expectations of privacy; that may be contradicted by the capabilities of new technology. It seems then incumbent upon computer science instructors to raise awareness of these risks and threats among the students they teach. The purpose of this session is to provide a forum for discussing technologies that are widely used by CS and non CS professionals alike, and that may well be at variance with society's privacy expectations. A second purpose of this session is to introduce instructional modules currently under development that may assist instructors in addressing some of the relevant themes in courses, in particular privacy in social networks, on the internet, in mobile apps and also privacy in electronic voting and law enforcement. We expect that attendees will provide varying opinions and insight that will help shape the course offering. In addition, attendees will be invited to share their experience teaching or talking about privacy issues and the approaches, resources and techniques they have used in presenting the topic to students.	Privacy between technological capabilities and society's expectations (abstract only)	NA:NA	2014
Frances P. Trees:Lissa Clayborn	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, to provide member services at the local level, and to promote CSTA membership on the national level [1]. With the recently announced AP¬Æ Computer Science Principles Course to Launch in Academic Year 2016--17, local CS communities are vital. This BOF will provide a platform for the discussion of CSTA chapter formation, CS education community building, and tools and techniques used to successfully host professional development for K-12 CS teachers.	CSTA chapters: building a CS community (abstract only)	NA:NA	2014
William (Bill) John Pulling	Teaching by analogy or simile is a strategy many of us employ when we try to explain fundamental CS concepts. One popular analogy for explaining the difference between a class and an object is that the class is the "blueprint" and the object is the "house" that gets built from the blueprint. Others describe the class as the "cookie cutter" and the object is the "cookie". Another example is that an indeterminate loop is like a person hammering a nail into a board. We know that the loop will end when the nail is flush with the board. However, we are not sure how many strokes or iterations the loop will take, as it depends on who is doing the hammering, the length of the nail, etc. This BOF will encourage attendees to describe analogies, metaphors, and similes they use in the classroom to help illustrate different concepts in programming, or in other areas such as database or networking fundamentals. Discussion will also include "analogies that seemed like a good idea at the time" but did not work out as well as had been hoped.	What analogies/metaphors/similes do you use when teaching CS concepts? (abstract only)	NA	2014
Mark Sherriff:Daniel Garcia:Jody Paul	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2014
Aidan L. Feldman:Matthew McCullough	When working in the constantly challenging field of Computer Science, all but the most brazen individuals will inevitably feel "in over their heads", which is the simplest incarnation of impostor syndrome. This issue affects members of this field at all levels: students, teachers, researchers, etc. For students, impostor syndrome is a great barrier to success, because they don't have full context of the skills necessary to be successful in CS. Computer Science attrition rates are extremely high relative to other areas of study, particularly among first and second-year college students. What can be done by educators and the industry to retain talent, that would otherwise be lost by those individuals not feeling like they belong? How can we instill confidence and encourage growth? How can these strategies applied personally, or to other experienced members of the field?	Fighting impostor syndrome (abstract only)	NA:NA	2014
Carsten Kleiner	The number of papers on database system education has been close to zero at recent conferences. As database systems are a fundamental part of computer science curricula this comes as a surprise. The apparent draught in new ideas in database system education is even more surprising given the fact that this area of computer science has arguably undergone its most significant changes for more than 30 years within the last 5 years. Many new database system paradigms (most of them appearing under the NoSQL label) have been introduced for various reasons. Some of these massively distributed database systems facilitate unprecedented data processing capabilities often labeled as BigData. In order to offer a sustainable and practical CS education, at least some of those new paradigms and methodologies should probably be included into database education. This BoF can be a starting point for a discussion about which of those deserve inclusion into a typical CS curriculum and (even more interestingly) at what time in the curriculum and by replacing what other topics. Depending on interest of the audience a decision could be made as to what is the correct technology support for continuing the discussion beyond the conference. The BoF will also offer participants a forum to share their opinions, ideas and experiences on recent and future changes in database system education in general.	No news in database education by all accounts: seriously? (abstract only)	NA	2014
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Celebrations of Women in Computing.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2014
Magdy Ellabidy:John P. Russo	The cloud has become prevalent today and is used both in academia as well as industry. Many services, such as Amazon Web Services, provide an inexpensive way to provision servers in many different platforms. These cloud providers also have prebuilt instances which have many different popular configurations, such as LAMP and many popular databases. This bird of a feather session will discuss experiences with utilizing the cloud both as a temporary fix for times when hardware is unavailable for laboratories (such as during renovations) as well as using the cloud as a permanent replacement for physical labs	Using the cloud to replace traditional physical networking laboratories (abstract only)	NA:NA	2014
Brian Patterson:WIlliam E.J. Doane	Often underlying discussions with those who are not professional computer scientists is the idea that computer scientists are programmers and programmers make tools. Yet many computer science professionals view themselves primarily as scientists, with programs being used to create and express a deeper understanding of computation. This Birds of a Feather session discusses how participants can effectively bridge the gap between toolmaker and scientist views, either through modifying their own view or changing the viewpoint of others. Topics include: participants' personal balance between how they view themselves as scientists and toolmakers; how to encourage students to see themselves as scientists and toolmakers in balance; how to effectively conduct group work with a variety of viewpoints present; how student motivation interacts with how they see themselves as computer scientists; and other viewpoints that exist about what it means to be a computer scientist. Computer scientists and non-computer scientists welcome. Laptop not recommended.	Toolmaker or scientist? (abstract only)	NA:NA	2014
Paige H. Meeker	There is a tremendous need for computer science in every discipline; however, our K-12 institutions seem reluctant to alter traditional teaching methods and curriculum in order to include computing concepts at an early age. Therefore, most students are not exposed to computer science until they reach college. In this BOF, I'd like to explore what can be done to help introduce more young people to this exciting discipline, as well as encourage educators and administrators to incorporate computer science curriculum in their schools. As a leader in my children's school for the "Hour of Code" initiative, I was able to witness firsthand how children as youg as four and as old as high school seniors are hungry for more when it comes to programming. During this talk, we will explore what can be done from this point to encourage schools, teachers, and administration to continue (or begin) our youth's knowledge and experience with programming. As a nation, the United States is failing in the proper instruction of our children in the field of computer science. While employment for computer related fields is rising, and knowledge of the discipline is necessary no matter what the ultimate field of study or occupation of the student, only about two thirds of the states within the United States have computing education standards for grade levels K-12 (http://www.acm.org/runningonempty/roemap.html). As an educator (and a mother) I find this disturbing. A good work was begun by "Code.org" this past December, with more than 15 million students logging in to the site and working through the tutorials there. How can we promote and continue this initiative in our local schools and encourage up to date requirements for our students.	Inspiring a love of computer science through the education of our youth (abstract only)	NA	2014
Jian Zhang:Philip Sweany	The need for workers in the information technology and computing industry is on the rise. Code.org estimates that by 2020, there will be more that 1 million more computer jobs available than there will be computer science graduates to fill them. Efforts, by organizations such as the Computer Science Teachers Association (CSTA) and code.org, to attract students to information technology and computing appear to be working. While it appears that there will be students to teach, will there be qualified teachers to teach them? The CSTA report "Bugs in the System: Computer Science Teacher Certification in the U.S." asserts that the "certification/licensure processes for Computer Science in the U.S. are deeply flawed." The goal of this session is to bring together educators from the high school and college level to discuss what the CS Education community needs to do to address this problem.	Debugging teacher certification (abstract only)	NA:NA	2014
Peter H. Froehlich:Joanne Selinski	At many universities, computer science departments traditionally offer introductory programming as a "service course" to other departments. In recent years, however, more and more outside departments---apparently dissatisfied with the CS courses---have begun to offer their own versions of introductory programming. Our BOF will provide a forum to discuss this development and to exchange ideas for addressing it.	Introduction to programming for scientists and engineers (abstract only)	NA:NA	2014
Ming Zhang:Bo Li:Ginnie Lo	A key challenge for the Chinese educational system is the development of a CS1 course for non-major college students that can meet the unique environment in our country. In mainland China, CS1 is required of all freshmen at their first semester, approximately 7 million freshmen per year. We have named this CS1 course "Fundamentals of University Computer Science" to reflect our ambitions to bring our students to the cutting edge of information technology and society. Over the past few years, many Chinese universities have advanced and experimented with their ideas for introducing computational thinking into CS1, one of the most important core courses. In this BOF session, we want share our ideas and concrete solutions and to engage in dialogue with our international colleagues in order to enrich and improve our approach. This BOF Session is sponsored by the ACM China Subcommittee on Education.	China's perspective from the viewpoint of computational thinking on CS1 for non-majors (abstract only)	NA:NA:NA	2014
Elizabeth K. Hawthorne:Robert D. Campbell:Jim Nichols:Cara Tang:Cindy Tucker	At the direction of the Association for Computing Machinery (ACM) Education Board, the ACM Committee for Computing Education in Community Colleges (CCECC), has undertaken a project to produce IT curricular guidance which defines core IT competencies accompanied by well-designed assessment measures. To that end, the ACM CCECC convened a task force of subject matter experts from both academe and industry to define core IT learning outcomes which should be common to all associate-degree IT programs. Assessment consultants worked alongside these subject matter experts to create easy-to-use evaluation rubrics. The session will include an overview of the findings from this project including mappings to other curriculum models, as well as a discussion concerning curriculum, assessment and pedagogy of IT courses and programs at associate-degree granting institutions.	IT curricular guidance for associate-degree granting institutions (abstract only)	NA:NA:NA:NA:NA	2014
Nina Onesti:Saul Blanco:John Duncan:Mitja Hmeljak:Dan Richert	As educators want to try to find new ways to engage our students in and out of the classroom, allowing them to enhance their learning as well as their overall experience of the class. Active learning techniques challenge students to learn in a "non-traditional" way by developing critical thinking skills and having a little fun at the same time. While our students become more effective students, we can also become more effective educators, as we can quickly and accurately assess learning outcomes. In this discussion, you will hear from faculty members that currently use active learning in their classroom such as classroom assessment techniques (CATs) [4], Team-Based Learning (TBL) [5], and Just in Time Teaching (JITT). We will provide short in-session demonstrations of these activities, ending with time to consult with each other to select activities that will be good for every attendee's specific classroom.	CAT's: not just a furry friend. using active learning in your classrooms (abstract only)	NA:NA:NA:NA:NA	2014
Daniela Inclezan	Computer science students graduating in the next decade will face the big energy and environmental challenges of the 21st century. According to current trends, an increasing number of them will be employed in "green jobs" and will contribute to promoting biodiversity, minimizing the consumption of energy and materials, or restoring environmental quality. It is our job to prepare them for the task ahead. While the vast majority of textbooks and materials used in different areas of CS are oblivious to these problems, many resources can be found at the boundaries with other disciplines (e.g., environmental science, architecture, agriculture, etc.). Moreover, new computer applications are created every day for the analysis of current environmental problems and the evaluation of their possible solutions, but these applications are normally not mentioned in CS classes. This is a lost opportunity for engaging our students in the real world challenges we are facing today. Environmental problems can be addressed in the CS classroom in a way that does not impede the learning of the technical content, but rather increases students' ability to think critically about complex systems. This BoF intends to brainstorm innovative resources, examples, activities, and assignments that can be incorporated into the CS classes, in order to raise students' awareness to current ecological problems and, at the same time, illustrate the role computer scientists can play in solving them. For this BoF session, a laptop is optional.	Preparing computer science students for a sustainable future (abstract only)	NA	2014
William Richards Adrion	While it is exciting to see an increasing number of national efforts to reform computing education, such as those led by CSTA, Computing in the Core, ACM, NCWIT, code.org and many others, real change at the state, district and school level requires the active participation of individuals and local organizations to engage policy makers, superintendents and communities. The U.S. education system is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level -- with large differences between neighboring states. The system is organized along pathways of elementary schools, middle and high schools, community colleges, four-year colleges, and universities. A reform process for improving computing education pathways will take place at multiple levels and state by state. This birds-of-a-feather session will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change.	State-level advocacy for computing education reform (abstract only)	NA	2014
Adrian German:Suzanne Menzel:Joan Middendorf:John F. Duncan	After thirty years or more of the scholarship of teaching and learning (SoTL) many students still struggle to learn at the university level, while ever more techniques are being developed to help students learn and measure their success. In practice, however, efforts to reshape classes begin with questions such as: "How can I make use of this new technique?" Or, "How can I increase my students' critical thinking?" Such questions are often too broad to provide a clear focal point for designing efficient strategies. They sometimes draw attention to parts of the course not in great need of reform, and generally focus the process on the means (teaching) rather than the end (student learning). A shift is taking place in higher education so that teaching is approached not from content or from the teaching methods, but from the mental processes that are crucial to functioning in a discipline. Decoding the Disciplines (Middendorf & Pace, 2004) is an evidence-based, learner-centered methodology that can conclusively improve teaching by prioritizing what really matters in making meaning in a discipline and boosting learning outcomes in the classroom. It offers a meta-strategy, providing both a framework to define the task at hand and a means to determine which tools would be most useful in accomplishing it. Starting from the bottlenecks, the places where students get stuck, and connecting them with what experts do so they won't get stuck, the crucial mental processes drive the teaching and learning so students can be successful.	How to decode student bottlenecks to learning in computer science (abstract only)	NA:NA:NA:NA	2014
Jamie Payton:Tiffany Barnes:Jason Black:Cheryl Seals	The demand for computing professionals in the U.S. workforce is expected to increase over the next several years, while the number of students intending to major in computing has declined. In this BOF session, we focus on the use of service learning to address the growing concern of creating a sustainable pipeline for computing professionals, with an emphasis on broadening participation in computing. We center the discussion around our experiences with the STARS Computing Corps, which engages college students in service-learning to address the national computing talent shortage. The model has been shown to be effective in retaining college students in computing, and STARS alumni credit participation in STARS with helping to develop professional skills. This session will include interactive small group discussions on goals, obstacles, and strategies for applying service learning to broaden participation in computing, grow the K-12 pipeline, and prepare college students with skills demanded in the 21st century workforce.	Engaging college students in service learning to grow the K-12 computing pipeline and prepare the 21st century workforce (abstract only)	NA:NA:NA:NA	2014
Suzanne W. Dietrich:Don Goelman	Given the ever-growing importance of data across all disciplines, there is a need to enhance the fluency and comfort with data technology for a diversity of majors, not just technical ones. Which topics should be included in a data fluency course for all majors? A non-exhaustive list of possible topics includes spreadsheets, relations and relational databases, querying, conceptual design, bar graphs, charts, other data visualization, XML, and "Big Data." Join the discussion to brainstorm a data experience for students with diverse majors.	Data fluency: curricular issues for all majors (abstract only)	NA:NA	2014
Karl Wurst:Lori Postner:Stoney Jackson	Integrating Free and Open Source Software (FOSS) into our curricula can provide students with a rich, motivating learning experience that helps them develop technical as well as soft skills. However, integrating FOSS into curricula does have its challenges. This birds-of-a-feather (BoF) seeks to bring together faculty to discuss challenges, share resources, share solutions, and make connections. So, whether you are considering integrating FOSS into a class for the first time, or you are looking for ways to improve what you are already doing, this BoF is for you. Members of the Teaching Open Source (http://teachingopensource.org) and the foss2serve (http://foss2serve.org/) communities will help guide the discussion and be on hand for questions.	Teaching open source (software) (abstract only)	NA:NA:NA	2014
Debra Davis:Dave Berque:Janet Davis:Matt Jadud:Paul Resnick	With a growing awareness of the importance of Human Computer Interaction (HCI) and User Experience (UX) Design and Research in industry, many departments are examining ways to integrate this topic into their curriculum. What are the best ways to do this? Should HCI and UX be integrated into existing courses such as event-driven programming or mobile computing? Or should it be a separate course that integrates visual design, psychology and ergonomics? How important is this topic to students looking for internships and entry-level jobs? At what levels should these topics be taught in the curriculum? This is important as there is a growing demand in industry for User Experience specialists due to an increased focus on software quality and product success. A major complaint of employers is that this skill is lacking in many college graduates. Teaching computing students how to incorporate UX into the design and development process helps to address this critical need. This BOF will let participants share their ideas and learn from their peers. Some of the discussion leaders led a similar lively and enthusiastic discussion at SIGCSE 2013. Discussion spanned the role of HCI in the participants? various curricula; modules versus dedicated courses; projects versus standalone assignments; and textbooks, tools, and other pedagogical materials. Bringing together new and previous participants will bring new insights and expansion of these, including discussions of our recent experiences and lessons learned, as well as the broaching of new topics such as the roles of non-computing courses in HCI education.	Including HCI and user experience (UX) methodologies in computing curricula (abstract only)	NA:NA:NA:NA:NA	2014
Lillian Cassel:Lois Delcambre:Gregory Hislop	The Ensemble computing portal originated under the NSF NSDL program and enjoys the respect and continued interest of the computing education community. The project has reached a maturity level at which it is time to focus on the long-term viability of the activity. The original proposal included a commitment from the Villanova University library to adopt the system and keep in running in perpetuity. However, merely keeping the system running will not preserve nor extend the true promise of the project. That requires an active, engaged community. The leaders of the Ensemble project invite our partner projects and the SIGCSE community to join us in an initial meeting of an organization devoted to the continued development and support of the Ensemble vision: that of a community of educators sharing their best efforts, showcasing the best resources, and archiving materials that deserve long term preservation.	Ensemble: the sharing community (abstract only)	NA:NA:NA	2014
Chris Mayfield:Dennis Brylow	With initiatives like CS Ed Week, Code.org, and the AP CS Principles course, many educators are designing new and engaging ways to introduce students to computer science. But are we doing a good enough job presenting computer science as a field? Is it sufficient for prospective students to understand that CS is about creativity, abstraction, data, algorithms, programming, the Internet, and impact? Or should they also learn something about computer architecture, operating systems, networking and security, programming languages, software engineering, database systems, and so forth? This BOF will discuss how survey courses can meet the learning objectives of AP CS Principles, while providing a wealth of content knowledge that maps directly to undergraduate computer science programs.	Survey courses and AP CS principles (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science (CS) educators are constantly reinventing introductory and advanced courses contextualized with new technology to better engage, retain students and increase their learning and motivation. Mobile and wearable computing are the most recent examples. However, while it is important to attract students into CS, it is equally vital to sustain student motivation by using pedagogical approaches contextualized to how students learn throughout the curriculum without losing fundamental, core concepts. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. To ensure that CS educators are not simply adopting the newest technological fad at the expense of students learning and fundamental, core CS concepts, the CS education community must understand how mobile computing technology can be successfully leveraged to change education through measured, contextualized pedagogical approaches. To start facilitating this dialog, this Birds of a Feather session will provide a platform for the discussion of how mobile computing has been successfully (and unsuccessfully) incorporated into CS courses; the mobile platforms and tools used; and, the pedagogical utility of using mobile computing as a learning intervention. This project is partially supported by NSF DUE#1140781.	Incorporating mobile computing into the CS curriculum (abstract only)	NA:NA:NA	2014
Sushil K. Prasad:Almadena Chtchelkanova:Anshul Gupta:Arnold Rosenberg:Alan Sussman	Parallelism pervades all aspects of modern computing, from in-home devices such as cell phones to large-scale supercomputers. Recognizing this - and motivated by the premise that every undergraduate student in a computer-related field should be prepared to cope with parallel computing - a working group sponsored by NSF and IEEE/TCPP, and interacting with the ACM CS2013 initiative, has developed guidelines for assimilating parallel and distributed computing (PDC) into the core undergraduate curriculum. Over 100 Early-Adopter institutions worldwide are currently modifying their computer-related curricula in response to the guidelines. Additionally, the CDER Center for Curriculum Development and Educational Resources, which grew out of the working group, is currently assembling a book of contributed essays on how to teach PDC topics in lower-level CS/CE courses, to fill the serious lack of textual material for students and instructors. This session is intended: (i) to report on the current state of this initiative; (ii) to bring together authors of book chapters and Early Adopters and other interested parties for discussions on ongoing activities and needs; (iii) to discuss the initiative and collect direct feedback from the community.	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates (abstract only)	NA:NA:NA:NA:NA	2014
Michael S. Kirkpatrick:Leo Porter	There is a growing body of evidence showing active learning pedagogies are effective for ensuring long-term student learning, reducing course failure rates, and retaining majors. While active learning pedagogies are more often employed in lower divisional CS courses, systems classes-such as OS, architecture, and networks-are just beginning to see a shift from standard lecture to active learning. This BOF will provide a forum for sharing ideas of how to integrate active learning techniques into systems courses, using the following questions as starting points: What are active learning techniques, and how are they used? What impact does active learning have on coverage? Must adoption of active learning techniques entail abandoning lectures entirely? If not, how can I use active learning to augment, rather than replace, my lectures? What transitional steps can I take toward active learning methodologies? If you've tried active learning techniques, what results have you seen?	Integrating active learning techniques into systems courses (abstract only)	NA:NA	2014
Richard Weiss:Michael E. Locasto:Jens Mache:Elizabeth Hawthorne:Justin Cappos	We see teaching information security through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have tried require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have used hands-on exercises and those who would like to. We recognize that few CS programs can afford new required courses, so we would be discussing ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering and algorithms. The questions we will ask are, "What exercises, if any, have you tried" What are your experiences? What are you looking for?	Teaching security using hands-on exercises (abstract only)	NA:NA:NA:NA:NA	2014
Douglas E. Harms	Many computer science students and faculty want to participate in service projects; these projects might include service learning in the classroom, service experiences in the local community, or service projects at a domestic or international site. Developing service projects that incorporate computer science and/or technology skills that are both interesting and meaningful often presents a challenge. During this BOF participants will discuss and answer questions about service projects in which they have participated, their successes and failures, techniques for finding appropriate partners, logistical issues, etc. This session will be helpful to faculty having no prior service experience, as well as veteran faculty who have organized multiple service trips.	Community engagement and service learning opportunities in computer science (abstract only)	NA	2014
Daniel D. Garcia:Dan Armendariz	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, PandaGrader, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users' Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2014
Rebecca Bates:Judy Goldsmith:Valerie Summet:Nanette Veilleux	Are you interested in incorporating some of your favorite science fiction in your classes? Did you know it can help improve student interest in the technical topic? Come join us as we talk about ways to connect SciFi to artificial intelligence, robotics, networking, intellectual property, and other topics. We'll start with overviews of how we've used SciFi and have plenty of time for discussion of new works and old that connect to the material we need to cover, while drawing students into the content and the field.	Using science fiction in CS courses (abstract only)	NA:NA:NA:NA	2014
David Hovemeyer:Jaime Spacco:Robert Duvall:Stephen Edwards:Amruth Kumar:Andrew Petersen:Daniel Zingaro	Short, automatically-assessed programming exercises, and other types of short practice problems, are a useful way to introduce and reinforce concepts and techniques in introductory programming courses. When delivered over the web, they allow students to learn and practice, with immediate feedback, at any time and place where they have access to a web browser. However, such exercises do not seem to be as widely used as they could be. Similarly, there is not a lot of literature on the effectiveness of these types of problems. The purpose of this BOF is to bring together users (and potential users) of programming exercises with developers of programming exercise systems to discuss how exercises could be used more widely and effectively. Possible discussion topics include: What features are absolutely essential for faculty to consider adoption? What are the major obstacles preventing more widespread adoption? Are faculty willing to share their exercises under an open/non-commercial license? Should exercises best used for extra practice, as graded assignments, or both?	Using and sharing programming exercises to improve introductory courses (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Peter-Michael Osera:Brent Yorgey	Induction is a notoriously difficult topic for beginning computer science students to understand. Even if they can produce an inductive proof of some mathematical fact, many students never see the relevance of inductive reasoning outside of the classroom for anything beyond the natural numbers. This is unfortunate because inductive reasoning is closely intertwined with algorithm design and one of the cornerstones of reasoning about (recursive) programs. With the adoption of functional programming into the CS curricula core, it is a good time to revisit how we teach induction and try to make more explicit this fundamental connection between inductive reasoning and recursive programming. In this BoF session, we will discuss curriculum, strategies, and fun examples for teaching induction with an eye towards giving induction tangible and practical relevance for the computer science undergraduate.	Making induction meaningful, recursively (abstract only)	NA:NA	2014
Martin Stepp:Jessica Miller	Several times in the past few years we have held BoF sessions about teaching web programming at the college level. Our feedback indicates that the most valuable aspect of the past sessions was simply to get everyone together for an exchange of ideas and information, so this will be the focus of the session again. We'd like to bring together two groups of web programming instructors: Newcomers who have not yet taught this material before (or are just starting) and want to soak up information, and veterans who have now taught it and have insights to share with the group. Newcomers can ask questions about materials, languages and technologies to use, what works and what doesn't, and so on. Veterans can share tips from the classroom and helpful resources. We can also discuss the latest technologies such as HTML, ECMAScript/JavaScript, iPhone/iPad, Android, and web application frameworks such as Node.js, Rails, AngularJS, and more.	Web programming (abstract only)	NA:NA	2014
Stephanie E. August:Jungwoo Ryoo	MOOCs, 3D virtual world environments, game-based learning, simulations, digital story telling, and other learning-focused digital interactions hold tremendous potential for presenting information science concepts and problem-solving strategies to the generations of the 21st century. We use them to present both theoretical and practical concepts in an engaging manner, tailored to specific age groups and at many levels of abstraction. An abundance of recent projects have examined these individually and brought to light many common concerns. This session explores several interrelated questions: How can these varied activities can be integrated to effectively teach programming concepts, problem solving strategies, and programming skills at age- and discipline-appropriate levels? Do interactive digital simulations and visualizations facilitate construction of the mental models underlying computing concepts? What assessments will be effective in determining whether we are achieving our knowledge- and skill-related goals? How are these tools related to student learning styles and learning objectives? How can these artifacts be disseminated and sustained in the context of dynamic delivery platforms? This brainstorming session is an opportunity to share ideas and explore future collaborations.	Can 3D virtual world environments and game-based learning effectively teach computer science concepts? (abstract only)	NA:NA	2014
Yan Bai:Xinli Wang	With NSF funding, we have developed a collection of instructional laboratories to enhance the security component in IT education. The labs are developed with a layered and modular design that can be tailored for different courses, accommodating new tools and being conducted in various environments with minimum modifications. This workshop introduces to participants these labs and the environment to conduct them. The workshop proceeds in four sessions in which we: 1) introduce the labs, techniques and environment; 2) demonstrate a lab; 3) guide participants to practice with a lab, 4) debrief. The intended audience is educators who teach IT security courses or other courses with security components at colleges or universities. Experience is not required. Each participant receives an electronic version of 1) the lab assignments that we have developed and used in our teaching practice, and 2) preconfigured virtual machines and tools used to conduct the labs. Laptop required.	ITSEED: hands-on labs for IT security education (abstract only)	NA:NA	2014
Tiffany Barnes:Veronica Catete:Andrew Hicks:Barry Peddycord	The new CS Principles curriculum, a pilot Advanced Placement course, offers novice students an exciting opportunity to learn computing in a hands-on, fun way. High school and college teachers of introductory computer science course are invited to this workshop to learn basic game and mobile phone development. Participants will learn GameMaker, AppInventor, and Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. Participants should bring their own laptops (ideally with AppInventor installed). Windows 7 phones will be provided during the workshop. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course.	Making games and apps in introductory computer science (abstract only)	NA:NA:NA:NA	2014
Valerie Barr:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF proposals: learn about effective proposal writing via the review process (abstract only)	NA:NA	2014
Peter J. Clarke:Yujian Fu:James Kiper:Gursimran Walia	NA	Integrating software testing into programming courses (WISTPC 2014) (abstract only)	NA:NA:NA:NA	2014
Greg Wilson:Fernando Perez:Peter Norvig	The IPython Notebook is an interactive browser-based environment where you can combine code execution, text, mathematics, plots, and rich media into a single document. Originally designed for use as an electronic lab notebook for computational science, it is increasingly being used in teaching as well, and a rich ecosystem of open source plugins and extensions for teaching is growing around it. The first half of this hands-on workshop will introduce the Notebook and present examples of lessons and instructional materials built around it. In the second half, attendees will explore future directions for the Notebook as a teaching platform. For more information, please view our GitHub repository online at https://github.com/gvwilson/sigcse2014-ipython-workshop.	Teaching computing with the IPython notebook (abstract only)	NA:NA:NA	2014
Xumin Liu:Rajendra K. Raj:Thomas J. Reichlmayr:Alex Pantaleev:Chunmei Liu	NA	Teaching service-oriented programming to CS and SE undergraduate students (abstract only)	NA:NA:NA:NA:NA	2014
Vicraj Thomas:Niky Riga:Sarah Edwards	This hands-on workshop will introduce GENI to instructors of computer networking and distributed systems classes. Instructors can use GENI [http://groups.geni.net/geni/wiki], an easy-to-use virtual laboratory, to improve the educational experiences of their students by having them experiment with new concepts without requiring expensive laboratory facilities. It has been used by over twenty graduate and undergraduate classes. GENI is being used by over 1200 researchers and educators. It enables them to run large-scale, well-instrumented, end-to-end experiments engaging real users. These experiments may be fully compatible with today's Internet, variations or improvements on today's Internet protocols, or indeed radically novel "clean slate" designs. GENI includes compute and communications resources distributed across the United States. GENI is "deeply programmable" i.e. experimenters can install their custom software or operating systems on the compute nodes and can program the behavior of the switches that connect these nodes. GENI is funded by the National Science Foundation and is free to use for research and education. Workshop participants will have the opportunity to set up and run experiments using GENI. They will also learn about class logistics when using GENI and support resources such as ready-to-use exercises. Those doing the hands-on activity will need a laptop running relatively a recent version of Mac OS, Windows or Linux; at least 4GB of memory; a modern processor (at least dual core and faster than 1.5 GHz) and a WiFi interface.	GENI as a virtual laboratory for networking and distributed systems classes (abstract only)	NA:NA:NA	2014
Sarah Monisha Pulimood:Kim Pearson:Diane C. Bates	Innovative solutions for complex problems entail diversity of perspectives, and students must learn to integrate concepts from multiple disciplinary areas. Yet, to provide collaborative experiences that cross disciplinary boundaries, educators must navigate numerous administrative and pedagogical challenges. In this hands-on workshop participants will learn how to leverage existing courses for students and faculty to collaborate across disciplines and with a community partner, to develop socially-relevant computational solutions for real-world problems. Participants will also brainstorm ideas on addressing specific challenges at their own institutions. The intended audience is educators interested in engaging their students in deep computational thinking through immersive multidisciplinary collaborative experiences. Registered participants will be reimbursed the workshop registration fee through NSF Award# 1141170. We will additionally offer a stipend to participants who adopt our model, administer assessments and provide us with their results for analysis and inclusion in reports. More information will be available at http://tardis.tcnj.edu/cabect/. Laptop Recommended.	CABECT: collaborating across boundaries to engage undergraduates in computational thinking (abstract only)	NA:NA:NA	2014
Robert Lutz:Evelyn Brannock	This workshop provides an introduction to three-dimensional (3D) printing. This tutorial will: cover the general background of 3D printing, summarize popular software tools, describe associated challenges and offer suggestions for application within computer science (CS) coursework. Participating CSE educators will get hands-on experience with 3D printing tools and will be able to print a limited number of items during the workshop. Attendees will perform a full lifecycle exercise in the printing workflow, progressing from a concept, to a digital model, to a physical implementation. The workshop will also describe the authors' experience integrating this authentic learning into several IT and CS courses. Experience gained will be useful after the session in both printer and printer-less environments. See http://tinyurl.com/k65jxsm for more information. Laptop required.	Enhancing computer science education (CSE) with the use of 3D printer technology	NA:NA	2014
Mark C. Lewis:Konstantin L√§ufer:George K. Thiruvathukal	Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at #12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library. Participants are strongly recommended to bring a laptop.	Scala for introductory CS and parallelism(abstract only)	NA:NA:NA	2014
Andrea F. Lobo:Ganesh R. Baliga	This workshop presents an award-winning, NSF-funded, project-based curriculum for algorithm design that includes algorithmic strategies for intractable problems. This curriculum is a sequence of laboratory projects comprising increasingly sophisticated solvers for a single intractable problem, designed to integrate into existing, one-term, undergraduate courses that teach algorithm design and/or intractability without sacrificing traditional course content. The presenters have used the curriculum in the Design and Analysis of Algorithms course at their institution to help students tackle and appreciate intractability. This workshop presents versions of the curriculum centered on TSP, SAT and Sudoku. Attendees will receive adoption materials and access to an adopters' forum. NSF is funding the development, evaluation, dissemination and adoption of the curriculum. Potential adopters are encouraged to apply for funding to attend this workshop and SIGCSE 2014 at http://www.rowan.edu/~lobo/AlgosCurriculum. This material is based upon work supported by the National Science Foundation under Grant No. 1140753. Laptop optional.	Teach algorithm design and intractability with a project-based curriculum centered on a single intractable problem: three domains to choose from (abstract only)	NA:NA	2014
Gail Chapman:Joanna Goode	The ECS program includes an inquiry-based college-preparatory curriculum that introduces students to the creative nature of computing, technology as a tool for solving problems, and the relevance and impact of CS. This workshop will provide participants the opportunity to engage in activities from the ECS curriculum that highlight the six computational practices common to ECS and CS Principles. We will explicitly model the inquiry-based design of the activities and facilitate discussions that highlight how inquiry manifests itself in the computational practices. This workshop is appropriate for K-12 educators and college/university faculty who are interested in deepening their understanding of how teacher pedagogy is critical to broadening participation in computing. Laptop Optional.	Exploring computer science: computational practices in action (abstract only)	NA:NA	2014
Joel C. Adams:Richard A. Brown:Elizabeth Shoop	Curriculum 2013 brings parallelism into the CS curricular mainstream. This hands-on workshop is intended for faculty with little or no background in parallel computing. OpenMP is a platform independent, industry-standard library for shared-memory parallel programming supported by all modern C and C++ compilers. The workshop introduces the basics of OpenMP multithreading using parallel patterns, including single program multiple data (SPMD) execution, fork-join threading, and pragmas for parallel loops, parallel blocks, mutual exclusion, etc. The workshop includes: (i) an overview of OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how these may be used to achieve the goals of Curriculum 2013. Workshop materials will be distributed from csinparallel.org. Participants will receive and explore 15 short programs designed to help students understand multithreading concepts, plus longer programs that use OpenMP to solve significant problems. A participant may explore these programs on their own laptop, provided it has installed a C/C++ compiler that supports OpenMP (e.g., gcc 4.2 or later; Visual Studio 2008 or later). Those comfortable with the command-line may explore the programs on our remote servers using a laptop or tablet with a suitable SSH client. Laptop recommended.	Teaching shared memory parallel concepts with OpenMP (abstract only)	NA:NA:NA	2014
Eli Tilevich:Clifford A. Shaffer:Austin Cory Bart	This workshop introduces participants to RealTimeWeb, a technology developed under the auspices of an NSF-funded project at Virginia Tech. RealTimeWeb is a software architecture framework that makes real-time web data, such as weather reports, news updates, and restaurant recommendations, accessible for introductory programming projects. The presented technology offers technical scaffolding for the students to gradually ease into (or completely circumvent if appropriate) some of the most vexing complexities of distributed computing. At the heart of RealTimeWeb are carefully engineered client libraries through which students can access the data provided by real-time web services. To support computing educators teaching introductory CS classes in a variety of programming languages, each library is available in Python, Java, and Racket, with compatibility on key platforms, including Android. These libraries are readily available through an online curated gallery, designed to be quickly adapted to instructors' specific academic needs. This gallery also provides a tool for rapidly prototyping new libraries based on our framework. RealTimeWeb enables computing educators to introduce important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. This workshop introduces RealTimeWeb via a hands-on approach by introducing participants to the core functionality of our architectural framework and client libraries. The workshop proceeds in three parts in which we: (1) present RealTimeWeb by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants' choice; and (2) critically discuss the technology in small and large groups. Further information is at: http://research.cs.vt.edu/vtspaces/realtimeweb/	Creating stimulating, relevant, and manageable introductory computer science projects that utilize real-time web-based data (abstract only)	NA:NA:NA	2014
Brian Magerko:Jason Freeman:Christopher Michaud:Michael Reilly	Our work has focused on how to create a learning experience that is highly personally motivating for students, has a low barrier of entry for creation an artistic computational artifact, and is scalable for use in formal and informal education settings at the national level. We have created a learning environment called EarSketch that addresses student engagement through a STEAM learning experience that provides authentic learning in both the technical (i.e. computing) and artistic domains (i.e. music remixing). EarSketch is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will use Python to place audio clips, create rhythms, and add and control effects to a multi-track digital audio workstation (DAW) while learning computing concepts such as variables, iteration, conditionals, strings, lists, and functions. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation. EarSketch has been used in introductory computing summer camps, secondary school classes, and is currently working towards integration with CS Principles pilot programs. All participants will need a laptop for running the EarSketch software. EarSketch will run on OSX and Windows laptops. Participants will also need headphones for listening to projects created using EarSketch. It is highly suggested that participants download the EarSketch installer at http://earsketch.gatech.edu/downloads and install the software prior to the workshop.	Computational music remixing with EarSketch (abstract only)	NA:NA:NA:NA	2014
Victor T. Norman	Participants will learn how to install Scratch, the Xbox Kinect libraries, and the software that integrates the two. The participant will then practice basic Scratch programming, and then learn how to program Scratch when connected to an Xbox Kinect. Five programming challenges will be given to participants, ranging from easy to difficult. During these activities, the participants will experience the excitement of using their bodies (instead of a mouse and keyboard) as the program controller. Discussions will be held to think about human-computer interactions, standard interaction models, etc., as well as how to help students engage more deeply with computer programming activities. Participants will work in teams of 3 or 4 using participant-supplied laptops running Windows 7.	Scratch + Xbox Kinect: a magical combination for outreach (abstract only)	NA	2014
Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()).	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2014
Darci Burdge:Lori Postner:Becka Morgan:Heidi J.C. Ellis:Stoney Jackson:Gregory W. Hislop:Michelle Purcell	Have you ever wanted your students to contribute to or learn from a real-world software project that benefits society? Want some help getting started? Many students find involvement in Humanitarian Free and Open Source Software (HFOSS) projects engaging and motivating. As a first step, this workshop will introduce faculty to FOSS tools and culture. Through a virtual field trip into the world of HFOSS you will learn how to find a project, discern characteristics of a good project for student participation and understand how to use IRC, a communication tool used by FOSS developers. The use of version control to support project development will also be discussed. Along the way, you will learn how to support student learning in such projects. All topics will be covered at an introductory level. Participants will take away exercises that can be used in the classroom. Additionally, participants will have access to support in the creation of assignments or curriculum and their implementation from teachers experienced in supporting students in HFOSS participation. Additional information at: http://www.foss2serve.org/index.php/SIGCSE_2014_Workshop Laptop required.	Teaching with HFOSS to provide students with real world experience: an introduction (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Clifton Kussmaul:Helen H. Hu:Matthew Lang	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. POGIL is based on learning science, and shares characteristics with other forms of active, discovery, and inquiry learning. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. POGIL has particular potential for CS education. Software development is largely a team-based problem-solving activity, and POGIL helps students to learn from each other and develop problem-solving abilities as well as important team process skills. POGIL has been developed and validated over the last 15 years in a range of STEM disciplines. The workshop consists primarily of hands-on team activities. Workshop participants will experience POGIL activities, learn core practices, and draft activity pieces. POGIL materials for a variety of CS concepts will be shared. More information and materials are available at http://cspogil.org and http://pogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional. This material is based upon work supported by the National Science Foundation under grant DUE-1044679.	Guiding students to discover CS concepts and develop process skills using POGIL (abstract only)	NA:NA:NA	2014
Franklyn Turbak:Fred Martin:Shaileen Crawford Pokress:Ralph Morelli:Mark Sherman:David Wolber	Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.	Mobile computational thinking with app inventor 2 (abstract only)	NA:NA:NA:NA:NA:NA	2014
Frank Klassner:Benjamin Schafer	This workshop will conduct an exploration of the newly released Lego Mindstorms EV3 robot platform and its applicability to the college computer science curriculum. Participants will learn about the EV3 through handouts and hands-on programming exercises. The first part of the workshop will focus on demonstrating EV3 robots as well as the STEM concepts and computing concepts they illustrate. The second part of the workshop will focus in on the new capabilities of the EV3. This workshop will be more detailed than the vendor led workshop. It will be of benefit to participants new to Mindstorms robotics as well as those with NXT/RCX experience who want to see the evolution of the platform and new components featured in the EV3. These include a revision of the controller brick hardware and software, new color and gyroscopic sensors, and increased processing and memory capabilities. The organizers have a combined 20 years of experience using Mindstorms in CS courses (including courses in introductory programming, systems, and artificial intelligence) with Lego and third party programming environments. Participants must bring a Bluetooth-capable laptop (Mac or Windows), and will have a robot, software, and kit to use for the workshop. Participants will receive a promotion code to purchase a 10% discounted Mindstorms kit.	Using the new lego MindStorms EV3 robotics platform in CS courses (abstract only)	NA:NA	2014
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Dan Armendariz:Jon McKinsey:Zachary MacHardy:Omoju Miller:Barry Peddycord, III:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Richard Weiss:Jens Mache:Michael E. Locasto:Vincent Nestler	Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to provide faculty with tools and interactive exercises that would facilitate adding this topic to their curriculum. We will introduce the EDURange framework for developing interactive cybersecurity exercises. We have several exercises for participants to try, including network scanning and firewall configuration. We will give an introduction to some tools such as nmap, as well as the basic concepts. We have tested our framework several times in classrooms and workshops for students and faculty. One of its advantages is that faculty can use it in their classes with very little set-up. It uses Amazon's EC2/AWS to make the exercises readily available, so instructors will be able to access them with an account. We will also discuss other security exercises, including ones in the RAVE. It also provides each user with a number of VMs with tools and vulnerabilities. We will discuss using exercises as assessment tools. No previous experience in security is necessary. Laptop required. http://blogs.evergreen.edu/edurange	Hands-on cybersecurity exercises in the EDURange framework (abstract only)	NA:NA:NA:NA	2014
Ariel Ortiz	Node.js is one of the hottest open source web platforms currently available. It's built on Google Chrome's V8 JavaScript runtime engine and it allows you to write all kinds of network applications and servers in just a few lines of code. Node.js uses an asynchronous programming model built on non-blocking I/O and a single-threaded event loop. What this means, basically, is that you don't need to be concerned with awful race conditions or synchronization issues that arise when programming for a concurrent multi-user environment. This workshop is aimed mainly at web development instructors that would like to consider teaching a single programming language, JavaScript, for both client-side and server-side coding. Participants will learn how to employ Node.js on Windows, Mac OS or Linux in order to write scalable web servers and applications. Additionally, the Express web framework will be introduced in order to demonstrate how to quickly program traditional webapps and single-page applications (SPA) with the aid of jQuery, AJAX and RESTful web services. The resulting programs will be usable from any modern web browser, including those found in desktop and laptop computers, and mobile devices such as tablets and smart-phones. Participants should have prior working knowledge of client-side (running on a browser) JavaScript and HTML. More information: http://node.arielortiz.info/ Laptop Required.	Server-side web development with JavaScript and Node.js (abstract only)	NA	2014
Adam Norton:Holly Yanco	This workshop introduces participants to the Artbotics program, which combines art and robotics to teach students about computer science while creating kinetic, interactive sculptures. The material covered will be provided in introductory fashion, requiring no prior experience with computer science, art, or robotics. The Lego Mindstorms NXT platform will be used to create two projects during the workshop: a spirograph-like drawing produced by programming a car holding a marker to drive using a sequence of motor movements (teaching the need for looping in programming) and an interactive, kinetic sculpture that reacts to sensor input (teaching the need for decisions in programming and building simple mechanisms). Examples of both projects can be seen at youtube.com/artbotics. The workshop will end with a short discussion of lessons learned and best practices, using examples from previous Artbotics programs for a variety of ages. Topics will include appropriate time frames, how to best use limited resources, and appropriate levels of depth for each age group. The workshop administrators will be providing laptops with the proper Lego Mindstorms NXT software, Lego Mindstorms NXT kits, and all needed building materials.	Artbotics with lego mindstorms (abstract only)	NA:NA	2014
Robert Glen Martin:Paul Tymann:Lester Wainwright	The Advanced Placement (AP) Computer Science (CS) A Development Committee is replacing the large case study (GridWorld) with a hands-on structured lab component with the following characteristics: At least three labs explore computing in context at a significant level, building upon supplied code that provides examples of good style and appropriate use of programming language constructs. -- Each lab contains a significant problem-solving component in which students study alternative approaches for solving a problem, solve new problems, or modify existing code to solve altered problem. -- At least one lab provides students with experience working with programs involving multiple interactive classes and may involve decomposing a program into classes and using inheritance, interfaces, and other object-oriented concepts as identified in the AP Computer Science A topic outline. -- Collectively, lab experiences will cover at least 80% of the topics listed in the course description and will involve at least 20 hours of class time. In investigating the use of labs, the AP CS A program developed three labs that cover many introductory topics and may be used at various times throughout a course. Since these labs cover many basic concepts and perspectives, the labs are appropriate for both AP CS A courses and many college CS1 courses. This workshop will introduce teachers to the AP CS A lab materials and provide practical experience in using these materials within introductory courses.	Using the AP CS labs in the classroom (abstract only)	NA:NA:NA	2014
Peter Drake:Mark Goadrich	The Learn Java in N Games project (LJING) aims to teach topics in CS1, CS2, and other courses by having students implement a variety of games. Each game is presented as a stand-alone module, easily incorporated into an existing course without committing to major curricular changes. Modules include unusually clear solution code, skeleton code for students to complete, JUnit tests for quick feedback to students and automated grading, and clear assignment statements with learning objectives. Program code strictly separates game logic from graphic user interfaces (GUIs), allowing the same code to be used in both conventional and mobile Android environments. In this three-hour tutorial, participants will complete two assignments. These assignments are ready to be used in classes the next day.	Learn Java in N games (abstract only)	NA:NA	2014
David P. Bunde:Kyle Burke	Chapel is a programming language being developed for high-performance applications. It is well suited for teaching parallelism in a wide variety of undergrad courses. Chapel is easy to learn since it supports a low-overhead style like a scripting language as well as a full OO style. It is concise, needing a single keyword to launch an asynchronous task, run a parallel loop, or perform a reduction. This helps undergrads focus on the main point of examples and lets them quickly try different parallel algorithms. It is also versatile, usable on both multicore systems and clusters. In this workshop, attendees will learn basics of Chapel, complete hands-on exercises, and see possible uses in algorithms, programming languages, and parallel programming courses. Laptop with SSH client required.	Chapel: a versatile tool for teaching undergraduates parallel programming (abstract only)	NA:NA	2014
Neil Christopher Charles Brown	The Blackbox project, launched in 2013, collects large amounts of data about beginner student behaviour in the BlueJ IDE. In this this workshop, we will introduce researchers to the Blackbox data and show them how to get started with analyzing it to answer their own research question(s). The workshop provides an ideal opportunity to find out what can be done with the Blackbox data, and will be run by the system's architect and maintainer. The data set includes Java source code as well as information about compilations, debugger usage and other compiler interactions. The Blackbox project has over 150,000 users, over 10,000,000 compilations and tens of gigabytes of source code. (For more detailed information, see the paper "Blackbox: A Large Scale Repository of Novice Programmers' Activity" by Brown et al. in the SIGCSE 2014 proceedings.) Computing education researchers may apply for free, permanent access to the data, but is not necessary to do so before this workshop. The session will be hands-on, and participants should bring a laptop that is capable of running an SSH terminal (e.g. Mac OS X, Linux, or PuTTY on Windows) over a wireless connection.	Introduction to analysing the BlueJ blackbox data (abstract only)	NA	2014
Blair Taylor:Siddharth Kaza:Elizabeth Hawthorne	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing secure coding in CS0, CS1, and CS2 (abstract only)	NA:NA:NA	2014
Barbara J. Ericson:Christopher Michaud:Xin Xu:Krishnendu Roy	This workshop will provide details on the projects that we recommend for non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective at improving attitudes towards computing, especially for females and African-American students. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor. Georgia Tech has also helped eleven other colleges and universities in Georgia start or expand computing summer camps. Some of these other institutions also offer camps on GameSalad, GameMaker, and web development. These other camps have also improved attitudes towards computing. The workshop will include an overview of the projects that we have found to be successful and include hands-on work with App Inventor, GameSalad, LEGO NXT robots, and LEGO EV3 robots. laptop optional	Projects for computing summer camps for 4th-12th grade students (abstract only)	NA:NA:NA:NA	2014
Brian Harvey:Daniel D. Garcia:Tiffany Barnes:Nathaniel Titterton:Omoju Miller:Dan Armendariz:Jon McKinsey:Zachary Machardy:Eugene Lemon:Sean Morris:Josh Paley	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses, especially the AP CS: Principles course. SNAP! (Build Your Own Blocks) is a free, browser-based, graphical, drag-and-drop language inspired by Scratch. The beauty of the Scratch programming environment, designed for 8-14 year olds, is that it makes abstract concepts more concrete and understandable to a broader audience. SNAP! extends Scratch to support older learners (14-20) with built-in named procedures (thus recursion), procedures as data (thus higher order functions), structured lists, and sprites as first class objects with inheritance. Participants will learn SNAP! hands-on. See http://snap.berkeley.edu for details. Network connected laptop required.	Snap! (build your own blocks) (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Raja Sooriamurthi:Nickolas J.G. Falkner:Ed Meyer:Zbigniew Michalewicz	Puzzle-based learning (PBL) is a new and emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles and games. What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.	Puzzle-based learning: introducing creative thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA:NA	2014
James Cross:Dean Hendrix:David Umphress	This workshop will focus on using the new jGRASP viewer canvas which provides an exciting new dimension to dynamic program visualization. The canvas allows students and instructors to organize dynamic viewers of multiple objects and primitives to quickly form coherent program visualizations. Students can quickly build and save visualizations of their own programs, and faculty can create visualizations and provide them to students with example programs. "Playing" a program in canvas mode brings the visualization to life as objects come into scope and the canvas is updated automatically. All educators who teach Java will benefit from this workshop. It will be especially suitable for instructors who teach CS1 (introduction to programming), CS2 (introduction to data structures), and CS3 (introduction to algorithms), as well as for instructors of AP courses in high schools. jGRASP is a freely available educational IDE (http://www.jgrasp.org/); no prior experience with jGRASP is expected. Laptop required.	Dynamic program visualizations for Java (abstract only)	NA:NA:NA	2014
Jessica Hodgins	Universities have traditionally drawn firm lines between classes in art and those in technology based fields such as computer science, placing them in separate departments, schools, and colleges. Human resources departments of companies have drawn similar lines between their "creative" and their "tech" employees, recruiting from different universities and creating different job titles and pay structures. In this talk, I will argue that the leaders of the next generation are going to be "hybrids" who each contribute to both sides of the art and tech divide and find it natural to interact and collaborate with co-workers with varied and mixed educational and work backgrounds. As an example of this style of education, I will report on an interdisciplinary course entitled Animation Art and Technology, which I have co-taught with Professor James Duesing in the School of Art for the past ten years at Carnegie Mellon University. The students are an interdisciplinary mix drawn from the traditional majors of art, computer science as well as a computer science and art bachelors degree program. The class produces four or five animations each semester, most of which have a substantive technical component, and the students are challenged to consider content innovation as equal to the technical aspects of their projects. Building on this style of education, Carnegie Mellon has recently created a program called IDeATE (Integrative Design, Arts and Technology Network) that offers a variety of minors and concentrations to students interested in blending art and technology in a variety of ways. 120 students enrolled in the first year indicating that the students recognize the need for these "hybrid" skill sets. As an example of the success of these efforts in industry, I will report on several research projects completed at Disney Research that would not have been possible without the highly collaborative efforts of teams of creative and techies.	Educating for Both Art and Technology	NA	2015
Frank H. Young	This talk will discuss the value and benefits of volunteering - to one's career, to one's profession, and to one's life.	Paying Back and Paying Forward	NA	2015
Mark Allen Weiss	The "Data Structures" course is arguably one of the most important for computer science majors. In this talk, I will discuss how this course has evolved over the last three decades, and discuss some topics we might want to start thinking about in the next decade.	Data Structures Courses: Past, Present, and Future	NA	2015
Keith N. Hampton	Digital technologies are increasingly an ubiquitous part of everyday communication. These technologies offer contact with friends and family that is both persistent and pervasive. Social ties that at one time would have gone dormant, or vanished entirely, are now made persistent through social media. As we transition through different jobs, neighborhoods, schools, and communities our social ties remain. Contact is no longer reliant on the occasional phone call and holiday card, but has a persistent presence on our screens and through our mobile devices. What are the benefits and the consequences of being connected? Are our relationships more committed? What impact will these emerging developments in computing have for society? It has been said that these technologies offer new opportunities for democratic participation, that they support collective action, and give marginalized individuals a voice. Social capital, once lost through the dormancy of ties, hidden as a result of infrequent contact, can be made visible through the persistent and pervasive nature of these new media. Yet, the practice of social media may not live up to its hype; they may contribute to social isolation, stress, and disengagement. Based on a series of large-scale studies of where people connect, who they connect with, and what they discuss, this presentation explores contradictory evidence of how digital technologies are related to social capital, democratic engagement, and the fear and joy that we may all be missing out.	Connected, Committed and Social?: The Consequences of Computing for Relationships	NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Jason Freeman:Brian Magerko:Regis Verdin	EarSketch (http://earsketch.gatech.edu) is a free integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. EarSketch students write code in either Python or JavaScript to make music, with a focus on popular genres such as hip hop and dubstep, while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Attendees to this demonstration session will be introduced to a new web-based version of EarSketch that integrates a code editor, digital audio workstation (DAW) music production interface, curriculum browser, and sharing service into a single integrated browser-based learning environment. This demo is of interest to secondary and early post secondary CS educators and to computing education researchers interested in STEAM and/or broadening participation. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required.	EarSketch: A Web-based Environment for Teaching Introductory Computer Science Through Music Remixing	NA:NA:NA	2015
Jake Trower:Jeff Gray	Over the past decade, an increased interest has emerged in block-based languages that have been used to support initial exposure of programming concepts to new learners (children or adult). Such languages can shield initial-learners from some of the frustrations of learning the syntax of a programming language, and allow them to focus on the core computational idea being taught. Blockly is a type of visual block language development kit that allows the rapid construction of new block-based visual programming languages to address a specific pedagogical or content focus. This demo provides a brief tutorial on the steps used to create a new Blockly environment, along with two case studies demonstrating the power of Blockly. The two environments introduced have two different contexts: the manipulation of images via operations on pixels (Pixly), and programmatic control of a Sphero robot (Spherly). Pixly and Spherly serve as a context for introducing how new Blockly languages are created, as well as showcasing the opportunity to use these languages as new educational environments in the context of media computation and robotics. More information can be found at http://outreach.cs.ua.edu/pixly/ and http://outreach.cs.ua.edu/spherly/. This work is supported by an NSF CE21 project and a Google CS4HS award.	Blockly Language Creation and Applications: Visual Programming for Media Computation and Bluetooth Robotics Control	NA:NA	2015
Ahmad Ghafarian	NA	Session details: Paper Session: CS Education Research	NA	2015
Noah John:Jaime Ruiz	Programming is a creative process that requires the ability to concentrate and juggle multiple concepts simultaneously in one's mind. Existing research shows there is a tangible cost when a programmer is interrupted as the programmer must recover the context of his work and refocus on the task at hand. However, CS students are rarely taught about interruptions and how to manage them. Instead, teaching tends to focus only on technical concepts. In addition, there is little research on interruptions with respect to CS students. Therefore, our research examines what happens when CS students are taught about interruptions and how to cope with them. The objective of this paper is to determine if CS students are affected by interruptions, what knowledge CS students possess regarding memory cues and resumption strategies, and what their opinion is of this material. We conducted a study with approximately two-hundred undergraduate CS students to answer these questions. Our study was comprised of an initial questionnaire, a seminar on memory cues and resumption strategies, and a follow-up questionnaire. Our results demonstrate that CS students are affected by interruptions, but 73% of students report not knowing methods to mitigate them. After learning about memory cues and resumption strategies, students report that the material was useful and that they want to study it. Their most significant feedback is that they have a strong desire to include these techniques in CS curriculums, reporting a mean score of 7.78 out of 10, where 0 signifies strong disagreement and 10 signifies strong agreement.	Student Response to Teaching of Memory Cues and Resumption Strategies in Computer Science Classes	NA:NA	2015
Ashok Ram Basawapatna:Alexander Repenning:Kyu Han Koh	Teachers are increasingly integrating game design and simulation creation projects as part of their classroom curricula. These projects have many benefits including motivating students in STEM activities and exposing students to computational thinking - a key part of upcoming science standards. However, barriers still exist to project-based computer science in a lab environment. One major issue is that, as students are creating their projects, it is extremely difficult for teachers to know how every student is progressing through a given activity and how to keep every student engaged. This paper introduces a Cyberlearning system entitled REACT (Real-Time Evaluation and Assessment of Computational Thinking) that is an initial step towards giving teachers quickly discernible real-time data corresponding to each student project. REACT provides teachers with a sortable dashboard, consisting of data from each student, that shows the characters students created and used to populate their game or simulation world as well as the semantic meaning behind what students have programmed. A feasibility test with four middle school classrooms shows that REACT helps teachers formatively assess students and provide targeted instruction to struggling individuals. Furthermore, teachers showed excitement at the summative and student self-assessment capabilities of REACT, and every teacher independently stated they would use the REACT system in subsequent end-user programming units.	Closing The Cyberlearning Loop: Enabling Teachers To Formatively Assess Student Programming Projects	NA:NA:NA	2015
Jaime Spacco:Paul Denny:Brad Richards:David Babcock:David Hovemeyer:James Moscola:Robert Duvall	Web-based programming exercises are a useful way for students to practice and master essential concepts and techniques presented in introductory programming courses. Although these systems are used fairly widely, we have a limited understanding of how students use these systems, and what can be learned from the data collected by these systems. In this paper, we perform a preliminary exploratory analysis of data collected by the CloudCoder programming exercise system from five introductory courses taught in two programming languages across three colleges and universities. We explore a number of interesting correlations in the data that confirm existing hypotheses. Finally, and perhaps most importantly, we demonstrate the effectiveness and future potential of systems like CloudCoder to help us study novice programmers.	Analyzing Student Work Patterns Using Programming Exercise Data	NA:NA:NA:NA:NA:NA:NA	2015
Henry Walker	NA	Session details: Paper Session: Curriculum	NA	2015
Jerod Weinman:David Jensen:David Lopatto	Many instructors and institutions offer research experiences and training in computing research methods. However, in a national survey, we find that undergraduate students rate their computing research experiences lower than students in other STEM fields. To address this learning gap, we have offered summer undergraduate research experiences in computing that include not only instruction in the important mechanics of research but also grounding in a philosophy of computing science that emphasizes generalized explanation of behavior as a means for control and prediction. After five years, survey results indicate the experience helps close the gap between CS and other STEM fields in benefits gained.	Teaching Computing as Science in a Research Experience	NA:NA:NA	2015
Michael S. Kirkpatrick:Mohamed Aboutabl:David Bernstein:Sharon Simmons	This paper summarizes our experiences restructuring a core portion of our required courses for majors. Internal and external reviews of our program highlighted areas of concern in our "systems core," including inconsistent student outcomes, missing required material, and inadequate opportunities for programmatic assessment. To fix these problems, we initiated a curricular review to redesign these courses. Our novel approach employed a process known as backward course design that starts with desired student outcomes and works backward toward defining content coverage. By extending this design approach to our curriculum as a whole, we have defined a new systems core structure that has tightly integrated curriculum assessment opportunities. The result is a new systems core that changes almost 1/3 of the required courses for the major. This new structure provides increased student control over their learning goals while defining a consistent foundation of systems fundamentals; it also has tightly integrated program objectives and assessments. Applying the backward design philosophy to the curriculum, rather than to a single, pre-defined course, is both a rewarding and challenging experience. In this paper, we describe this approach, summarize the results of the process, and map the outcomes to the ACM 2013 curriculum. We also provide advice and lessons learned for others who may consider such an undertaking.	Backward Design: An Integrated Approach to a Systems Curriculum	NA:NA:NA:NA	2015
Martin Burtscher:Wuxu Peng:Apan Qasem:Hongchi Shi:Dan Tamir:Heather Thiry	The widespread deployment of multicore systems over the last decade has brought about major changes in the software and hardware landscape. The resulting importance of parallel computing is reflected in the 2013 Curriculum Guidelines developed by the joint ACM/IEEE taskforce. The document recommends increased coverage of parallel computing and describes a new Knowledge Area on this topic. These recommendations have already been adopted by several universities in the form of new parallel programming courses. Implementing the recommendations in a complete curriculum, however, poses many challenges, including deciding on existing material to be removed, complying with administrative and ABET requirements, and maintaining caps on graduation credit hours. This paper describes an alternative approach for adopting the 2013 curricular recommendations on parallel computing. Specifically, we use a module based approach that introduces parallel computing concepts and re-iterates them through a series of short, self-contained modules taught across several lower-division courses. Most of these concepts are then combined into a new senior-level capstone course on parallel programming. Each module covers parallelism aspects in the context of a conventional computer science topic, thus enabling us to include parallel computing without a major overhaul of the curriculum. Evaluations conducted during the first year show encouraging results for this early-and-often approach in terms of learning outcomes, student interest, and confidence gains.	A Module-based Approach to Adopting the 2013 ACM Curricular Recommendations on Parallel Computing	NA:NA:NA:NA:NA:NA	2015
Valerie Summet	NA	Session details: Paper Session: CS1/CS2: Focus on CS1	NA	2015
Kian L. Pokorny	This paper presents experiences with creating a computer simulator as a student project in a CS1 course. Each student writes the simulator using C++ during the last ten weeks of the course. The project consists of a simulated memory, and simple CPU simulator including a machine language. Additionally, students implement an assembly language and a simple high-level language with associated compiler. The course has no programming prerequisite and can be taken to fulfill a general education requirement or as the first course for students majoring in computer science or information systems. Integrating such a project in an entry level course has a number of benefits as well as challenges. The project acts as a vehicle that engages students in a breadth of computer science topics, leading into discussions of theoretical considerations, languages, and computing devices. The project components provide an active learning environment. Students are introduced to numbering systems, number conversions, and numeric representations. The computer architecture components include introductions to main memory, CPU, and memory access techniques. The transition from and motivations for, the utilization of machine languages, assembly languages and high-level languages are demonstrated with the implementation of the project. Beginning students are given opportunity to practice programming and problem solving on a project of significant complexity. The biggest challenge is organization. Management of such a project requires a well-defined plan.	Creating a Computer Simulator as a CS1 Student Project	NA	2015
Aaron Keen:Kurt Mammen	Inexperienced and novice programmers in CS 1 are often faced with the expectation that they will be able to decompose a problem into subproblems, solve these subproblems independently, and then recompose these solutions. As with programming in general, decomposition is a skill that benefits from explicit instruction and that must be practiced to see improvement. This paper introduces a term-long project approach to CS 1 that emphasizes program decomposition. Existing software quality metrics are used to assess student decomposition progression through the project and to compare the decomposition skills of students in courses using the term-long project approach against those in courses using a more typical "stand-alone" project approach.	Program Decomposition and Complexity in CS1	NA:NA	2015
Tammy VanDeGrift	In this paper, we describe CS 1 programming assignments that encourage design creativity and that utilize user testing. All course assignments allowed for some student-defined specifications; some assignments required user tests to encourage interaction with other people. The open-ended nature of the assignments supported students' creativity and motivation to learn. The user tests provided a platform for students to share their creations and knowledge about computing with others. Both the creative aspect and sharing aspect of the assignments led to students taking ownership of their work. Overall, 41 of 44 (93.2%) students enjoyed the open-ended nature of the assignments and sharing programs with users also enhanced their understanding of their programs and computing concepts.	Supporting Creativity and User Interaction in CS 1 Homework Assignments	NA	2015
Carsten Kleiner	NA	Session details: Paper Session: Beyond CS2: Miscellaneous Topics	NA	2015
Michael Whitney:Heather Lipford-Richter:Bill Chu:Jun Zhu	Many of the security vulnerabilities common in today's software can be prevented with standard secure coding practices. Computer science students who will become the developers of that software need to learn about those practices so they can prevent such vulnerabilities. Many computing programs are addressing this need through additional lectures, elective courses, or more holistic approaches to integrate security across curriculums. We are exploring a complementary approach, integrating secure coding education into the IDE to provide a learning opportunity in the context of writing code. In this paper, we report on two field studies using an IDE tool in an advanced Web programming course. Our results indicate that the tool can increase students' awareness and knowledge of secure programming, but to be most effective, instructors may need to incentivize its use through in-class methods and careful timing of its introduction.	Embedding Secure Coding Instruction into the IDE: A Field Study in an Advanced CS Course	NA:NA:NA:NA	2015
Andrey Esakia:Shuo Niu:D. Scott McCrickard	Smartwatches are emerging as wrist-based computers capable of complex calculation and communication, and the computer science curriculum should reflect the challenges and opportunities that they provide in the education domain. This paper puts forth an experience report focused on efforts to incorporate smartwatches in an upper-level undergraduate mobile application development class during two academic terms. Lectures, in-class activities, homeworks, and projects were tailored toward providing rich design and implementation experiences for the students that engaged them in developing for the smartwatch and a paired mobile device. Our experiences highlighted how incorporating smartwatches into a mobile app development class adds a valuable dimension in terms of design and implementation challenges and allowed students to exercise some of the fundamental computer science topics.	Augmenting Undergraduate Computer Science Education With Programmable Smartwatches	NA:NA:NA	2015
Wlodek W. Zadrozny:Sean Gallagher:Walid Shalaby:Adarsh Avadhani	IBM Watson exemplifies multiple innovations in natural language processing and question answering. In addition, Watson uses most of the known techniques in these two domains as well as many methods from related domains. Hence, there is pedagogical value in a rigorous understanding of its function. The paper provides the description of a text analytics course focused on building a simulator of IBM Watson, conducted in Spring 2014 at UNC Charlotte. We believe this is the first time a simulation containing all the major Watson components was created in a university classroom. The system achieved a respectable (close to) 20% accuracy on Jeopardy! questions, and there remain many known and new avenues of improving performance that can be explored in the future. The code and documentation are available on GitHub. The paper is a joint effort of the teacher and some of the students who were leading teams implementing component technologies, and therefore deeply involved in making the class successful.	Simulating IBM Watson in the Classroom	NA:NA:NA:NA	2015
Wanda Dann	NA	Session details: Special Session	NA	2015
Wanda Dann:Dennis Cosgrove:Don Slater	In this special session, attendees will learn about techniques for teaching concepts of concurrency with Alice 3's latest release of a Java IDE plugin. The new plugin makes use of Java 8's lambda expression to provide a Do together control structure with simpler syntax. Using this technique and Java 8 plugin, students in early-level programming courses can make use of Alice's Do together control structure to create concurrent threads in their Java code.	Tutorial: Concurrency with Alice 3 and Java	NA:NA:NA	2015
Tracy Camp	NA	Session details: Panel Session	NA	2015
Tracy Camp:Stu Zweben:Ellen Walker:Lecia Barker	This panel will discuss the enrollment boom, as well as potential effective practice strategies to respond to the increasing demand for computing education. Does the current enrollment "boom" represent the "third bubble", or is it here to stay? Is there a difference in what's happening at universities that offer Ph.D. degrees or what's happening at 4-year universities and colleges? What 'best practice' strategies exist (if any) to handle the demand? And, importantly, will this "boom" have a positive or negative effect on underrepresented students' Join us for a lively discussion on the recent student interest in computing education at our universities and colleges.	Booming Enrollments: Good Times?	NA:NA:NA:NA	2015
J. D. Chase	NA	Session details: Special Session	NA	2015
J. D. Chase:Prem Uppuluri:Tracy Lewis:Ian Barland:Jeff Pittges	It is well understood and has been well documented that there is much to gain by using live projects in the computer science classroom [1-13]. Live projects include those that serve a real client with a real problem as well as those those that integrate live datasets. However, the use of live projects has always come with a variety of challenges including supporting the project once it is complete, providing secure and safe access to large data sets, adjusting live client expectations, and limiting the scope of a project to the context of a single term and within the learning outcomes. The purpose of this special session is to provide attendees an introduction to and examples of the way that live projects have been integrated throughout the computing curriculum at Radford University.	Integrating Live Projects Into Computing Curriculum	NA:NA:NA:NA:NA	2015
Sarah Heckman	NA	Session details: Paper Session: Automated Assessment	NA	2015
Antonio Carvalho Siochi:William Randall Hardy	Grading student submissions of webpage assignments is difficult and time-consuming because it involves reading and evaluating source code for compliance with assignment specifications. In addition, the pages must be examined in a browser to check for required functionality such as working links. As a result fewer assignments tend to be given, or instructors spend significant time grading at the expense of working with students or other necessary activities. There is thus a need for automated assessment of webpage assignments. This paper describes WebWolf, a simple framework for automated assessment of assignments in an introductory web programming class. A WebWolf program can load web pages, find and inspect elements, click links and make assertions about expected results. WebWolf was evaluated with assignments from three different classes and on a set of assignment submissions with injected errors. WebWolf correctly identified errors in the submissions. Manual grading of a four page assignment took an average of 17 minutes, while the WebWolf program took 35 seconds.	WebWolf: Towards a Simple Framework for Automated Assessment of Webpage Assignments in an Introductory Web Programming Class	NA:NA	2015
Chris Wilcox	Increasing enrollments in undergraduate computer science courses are overloading faculty, teaching assistants, labs, and other resources. To cope with resource problems, many universities have automated key processes such as program grading. Before replacing a manual process with an automated tool, we believe that two questions should be answered. First and most importantly, does the proposed automation contribute to or detract from student learning? Second, do the benefits outweigh the costs of the automation? In this paper we present results from an introductory programming course in which we have incorporated high levels of automation. We find that carefully designed and managed automation can improve student performance while realizing a significant savings of scarce teaching resources.	The Role of Automation in Undergraduate Computer Science Education	NA	2015
James R. Wright:Chris Thornton:Kevin Leyton-Brown	We describe Mechanical TA, an automated peer review system, and report on our experience using it over three years. Mechanical TA differs from many other peer review systems by involving human teaching assistants (TAs) as a way to assure review quality. Human TAs both evaluate the peer reviews of students who have not yet demonstrated reviewing proficiency and spot check the reviews of students who have. Mechanical TA also features "calibration" reviews, allowing students to quickly gain experience with the peer-review process. We used Mechanical TA for weekly essay assignments in a class of about 70 students, a course design that would have been impossible if every assignment had had to be graded by a TA. We show evidence that it helped to support student learning, leading us to believe that the system may also be useful to others.	Mechanical TA: Partially Automated High-Stakes Peer Grading	NA:NA:NA	2015
Eric Aaron	NA	Session details: Paper Session: Gender & Diversity	NA	2015
Samantha Krieger:Meghan Allen:Catherine Rawn	Our study explores the use of tinkering strategies across genders in undergraduate students of Computer Science. We present a definition and a framework for tinkering as it applies to this context, and use these to investigate how students across genders tinker with hardware and software. Our goal is to examine gender-based differences in tinkering behaviour and to discuss the meaning and implications of these differences on teaching and learning in Computer Science. We gathered data via interviews and a questionnaire and used both qualitative and quantitative methods for analysis. Our work is preliminary and suggests further areas of research in this domain.	Are Females Disinclined to Tinker in Computer Science?	NA:NA:NA	2015
Jennifer Dempsey:Richard T. Snodgrass:Isabel Kishi:Allison Titcomb	Recruitment and retention of women has been a persistent problem in the field of computer science. With a growing number of jobs that require a computer science degree, this problem does not only affect computer science departments with low enrollment, but also impacts industry. There is still no universally accepted explanation for the underrepresentation of women in the computing field. Various solutions have been implemented in an attempt to resolve this problem and yet gender imbalance in fields related to computer science persists. In this paper we study how perceptions held by students influence their intention to pursue computer science. Through a descriptive study, using a survey given out to first semester students in a computer science class, we measure perceptions, attitudes, self-efficacy, and identity, then we study the correlations between them and students' intentions to further pursue computer science. Our goal is to understand how determinative these constructs are to having students continue in the major. Interestingly, self-perception, in terms of self-efficacy (does the student feel they are able to use computer science techniques to solve a problem) and identity (does the student see themselves as a computer scientist), emerged as the primary driver for differences in intention. Many other aspects turned out not to exhibit statistically significant gender differences. Understanding at a detailed level what factors influence students to pursue computer science is critical in devising effective interventions that may increase participation in computer science.	The Emerging Role of Self-Perception in Student Intentions	NA:NA:NA:NA	2015
Gabriela T. Richard:Yasmin B. Kafai:Barrie Adleberg:Orkan Telhan	While coding competitions and hackathons have steadily increased in number, few women participate. Because these public events present viable opportunities to broaden participation in computing, we designed the theme to focus on "Wear & Care" and collaborative arrangements in a hardware hackathon, called StitchFest, in which 33 undergraduate and graduate students used the LilyPad Arduino to design wearables. Our analysis focused on the interviews conducted with eight female and seven male college participants to understand how targeted recruitment, thematic framing, space arrangements, kinds of materials and material distribution impacted participation and perception. We discuss what we learned about setting a thematic focus and fostering collaborative learning in coding competitions for broadening participation in computing.	StitchFest: Diversifying a College Hackathon to Broaden Participation and Perceptions in Computing	NA:NA:NA:NA	2015
Jian Zhang	NA	Session details: Paper Session: Non-majors/Interdisciplinary	NA	2015
Andrea Tartaro:Renee J. Chosed	We present the development, implementation and evaluation of a new team-taught introductory computer science course focused on the topic of bioinformatics. Our course is unique when compared to other bioinformatics and interdisciplinary (biology and computer science) courses taught to undergraduates. Instead of analyzing data provided to them, students collect their own data at the biology lab bench and then analyze their data utilizing various bioinformatics tools in the computer lab. In addition, while other bioinformatics classes focus on programming, our course introduces other computer science topics relevant to the biological problems under investigation such as artificial intelligence, networks and databases. Our approach resulted in students acquiring an appreciation for how biology and computer science function synergistically.	Computer Scientists at the Biology Lab Bench	NA:NA	2015
Christopher Plaue:Lindsey R. Cook	We present the design and implementation of an interdisciplinary service course on data journalism, a first-ever collaboration between the computer science department and college of journalism at our institution. The course covered the basics of dataset acquisition, cleaning, and analysis, and taught key programming and web development concepts. Students created an online portfolio of exercises, culminating in a news story and data visualization. The course was well received by students coming from a variety of backgrounds. We provide recommendations for future iterations of this course.	Data Journalism: Lessons Learned While Designing an Interdisciplinary Service Course	NA:NA	2015
Heather Bort:Mimi Czarnik:Dennis Brylow	This paper presents an approach to integrating computer science and quantitative literacy concepts in an undergraduate English Literature course. We show how students with no prior background in computer science can engage in computing activities directly related to their topic of interest and gain a deeper understanding of their topic as well as a better appreciation and understanding of computer science and quantitative literacy in the process. Students work in an interdisciplinary learning environment focusing on literary analysis and quantitative literacy with computing concepts acting as the bridge between the two areas.	Introducing Computing Concepts to Non-Majors: A Case Study in Gothic Novels	NA:NA:NA	2015
Suzanne Matthews	NA	Session details: Paper Session: CS1/CS2: Themed Approaches	NA	2015
Olaf A. Hall-Holt:Kevin R. Sanft	The ability to use computational tools to collect, organize, visualize, and analyze data is a valuable skill both inside and outside of computer science. In this paper we describe the design and implementation of a statistics-infused introduction to computer science, developed in collaboration with statistics faculty, at St. Olaf College. We propose that there exists a growing demographic of 'data-centric' students who expect to write small amounts of code in the context of work in other fields, and who are eager to take a CS course adapted to their needs. This particular data-centric CS1 course has been a catalyst for collaboration between faculty in multiple fields and multiple institutions.	Statistics-infused Introduction to Computer Science	NA:NA	2015
Zo√´ Wood:Aaron Keen	When teaching introductory computing courses, we are often guilty of writing rudimentary programming assignments - those meant to illustrate one simple language feature, comprised mostly of code that will never be used beyond the assignment. Admittedly, first-year computing students must navigate a myriad of challenges, sometimes learning both imperative and object-oriented programming, in addition to mastering syntax, logic,debugging, and testing. To tackle the difficulties of developing CS 1 and CS 2 courses that engage students in learning while addressing the numerous course objectives, we chose to challenge students to create virtual worlds in one large comprehensive two-quarter long programming project. Students were granted creative freedom within a framework that gradually introduced many programming skills and that required the mastery of object-oriented programming and some engaging algorithms. We present the curriculum, performance comparisons, and observations. Overall, we consider the experimental courses a success that will have an impact on our department's future curricular offerings.	Building Worlds: Bridging Imperative-First and Object-Oriented Programming in CS1-CS2	NA:NA	2015
Ruth E. Anderson:Michael D. Ernst:Robert Ord√≥√±ez:Paul Pham:Ben Tribelhorn	This paper reports on our experience teaching introductory programming by means of real-world data analysis. We have found that students can be motivated to learn programming and computer science concepts in order to analyze DNA, predict the outcome of elections, detect fraudulent data, suggest friends in a social network, determine the authorship of documents, and more. The approach is more than just a collection of "nifty assignments"; rather, it affects the choice of topics and pedagogy. This paper describes how our approach has been used at four diverse colleges and universities to teach CS majors and non-majors alike. It outlines the types of assignments, which are based on problems from science, engineering, business, and the humanities. Finally, it offers advice for anyone trying to integrate the approach into their own institution.	A Data Programming CS1 Course	NA:NA:NA:NA:NA	2015
Monisha Pulimood	NA	Session details: Paper Session: Beyond CS2: Programming Languages/Compilers	NA	2015
Michael Wirth	Computer science is a discipline which has swiftly evolved since its inception in the 1950s. This has invariably meant that new courses introduced into a curriculum are often of the bleeding-edge sort: genetic algorithms, parallel processing, mobile-based applications. Programming languages too have changed as progress ensues. Yet little is discussed of the darker side of computer science - the huge repositories of what some term legacy software running our financial, scientific and engineering systems. This paper looks at the introduction of a course which teaches legacy languages and the process of re-engineering with the aim to instill a reverence for the role legacy software plays in the modern world.	A Descent into the Maelstrom: Teaching Legacy Programming and Re-engineering	NA	2015
Kent D. Lee	This paper provides a description of a framework for programming language implementation that is accessible to students in a one semester course focused on programming languages. Rather than concentrating solely on language features, this paper describes a framework where imperative, functional, and logic programming languages are all used to develop a compiler for a non-trivial subset of a functional programming language. Provided by the framework are a virtual machine, a disassember of Python programs, a partial implementation of a Standard ML compiler with suggested tests, and a partial implementation of a type inference system implemented using Prolog, again with suggested tests. Classroom experience gained while using this framework is also shared. A suggested fourteen week sequence is provided. Real reactions from students and reflections on coverage of the ACM 2013 Curricula guildelines conclude the paper.	A Framework for Teaching Programming Languages	NA	2015
John H.E. Lasseter	An undergraduate compilers course poses significant challenges to students, in both the conceptual richness of the major components and in the programming effort necessary to implement them. In this paper, I argue that a related architecture, the interpreter, serves as an effective conceptual framework in which to teach some of the later stages of the compiler pipeline. This framework can serve both to unify some of the major concepts that are taught in a typical undergraduate course and to structure the implementation of a semester-long compiler project.	The Interpreter In An Undergraduate Compilers Course	NA	2015
Jesse M. Heines	NA	Session details: Panel Session	NA	2015
Jesse M. Heines:Jeff L. Popyack:Briana Morrison:Kate Lockwood:Doug Baldwin	Flipped classrooms are a new twist on an old idea: homework. The basic formula is simple: do the prep work before coming to class and come to class ready to discuss that work, do an activity to reinforce what you learned, or even take a quiz on the reading or research that was assigned. But as with all approaches to teaching, the reality is never that simple. This panel will report the experiences of four "flippers" and explore the pros and cons of those experiences. Educators who are considering flipping all or part of their courses will gain insight into how to do so to their and, more importantly, their students'-advantage, while those who have used this technique may gain new insights into approaches that might help them be more successful if they faced any issues similar to those of the panelists.	Panel on Flipped Classrooms	NA:NA:NA:NA:NA	2015
Owen Astrachan	NA	Session details: Special Session	NA	2015
Daniel D. Garcia:Owen Astrachan:Bennett Brown:Jeff Gray:Calvin Lin:Bradley Beth:Ralph Morelli:Marie desJardins:Nigmanath Sridhar	NA	Computer Science Principles Curricula: On-the-ground; adoptable; adaptable; approaches to teaching	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Stephen Edwards	NA	Session details: Demonstration Session	NA	2015
Elissa Redmiles:Mary Allison Abad:Isabella Coronado:Sean Kross:Amelia Malone	In 2012, women earned 18% of computer science degrees; African American and Hispanic students made up less than 20% of computing degree holders that year. Research shows that relatable role models and engaging curriculum are required to engage underrepresented students in computing. There is a need for engaging and relatable curriculum to be delivered to students at the middle school level, when these students first begin to lose interest in computing. Thus, based on the results of a survey of current and former middle school computing teachers and a comprehensive literature review, we developed the University of Maryland Curriculum In A Box (CIAB). The CIAB includes profiles of relatable computing role models, accessible video and text curriculum and challenge projects for HTML/CSS. To simulate a "real world" programming environment, the CIAB guides students through programming within open source social media frameworks and Github. The CIAB also includes teacher enablement resources such as assessments and a week-by-week implementation guide. The CIAB was successfully implemented with a group of 6th and 7th grade students in Prince Georges (PG) County, a majority minority county in Maryland. Our demo will provide a walk-through of the CIAB assets, accessibility features and design process, as well as implementation advice informed by our CIAB implementation in PG County.	A Classroom Tested Accessible Multimedia Resource for Engaging Underrepresented Students in Computing: The University of Maryland Curriculum In A Box	NA:NA:NA:NA:NA	2015
Amjad Altadmri:Neil C.C. Brown:Michael K√∂lling	The Raspberry Pi is an affordable and powerful (for its size) credit-card sized computer that has become very popular since its launch two years ago. It functions as a desktop machine but with easy access to peripheral hardware, such as buttons, sensors and LEDs, via its GPIO pins. Using a Java IDE like Eclipse or NetBeans is out of the question as the Pi is not powerful enough to run those. However, the beginners' Java IDE BlueJ is ideal in this situation: lightweight enough to run on the Pi, but well-featured and designed for education. This demo will show how BlueJ's features such as the object bench allow easy exploration and manipulation of the Pi's GPIO pins, and how easy it can be to write some Java to interact with peripherals connected to the Pi. More information on BlueJ and the Raspberry Pi is available at http://bluej.org/raspberrypi/	Using BlueJ to Code Java on the Raspberry Pi	NA:NA:NA	2015
Sen Zhang	NA	Session details: Paper Session: Block Languages	NA	2015
Yasin N. Silva:Jaime Chon	A significant amount of recent research in Computer Science Education has focused on studying block-based programming. In this approach, computer programs are created by connecting blocks and the blocks' shapes determine the permitted connections. The focus is on the program's logic instead of its syntax. This paper introduces DBSnap, a web-based application to build database queries, particularly relational algebra queries, by snapping blocks. DBSnap fully supports the construction of intuitive database query trees, which is one of the most effective approaches to teach database queries. DBSnap is also highly dynamic and shows the query results as the query is being built. The user can also inspect, at any time, the intermediate results of any query node. This paper presents DBSnap's design and implementation details, an evaluation of its effectiveness as a learning environment, and a thorough comparison with alternative ways to teach query languages. DBSnap is publicly available and aims to have the same transformational effect on database learning as previous block-based systems had on traditional programming learning.	DBSnap: Learning Database Queries by Snapping Blocks	NA:NA	2015
Yoshiaki Matsuzawa:Takashi Ohata:Manabu Sugiura:Sanshiro Sakai	In the past decade, improvements have been made to the environments used for introductory programming education, including by the introduction of visual programming languages such as Squeak and Scratch. However, migration from these languages to text-based programming languages such as C and Java is still a problem. Hence, using the OpenBlocks framework proposed at the Massachusetts Institute of Technology, we developed a system named BlockEditor, which can translate bidirectionally between Block (the block language used here) and Java. We conducted an empirical study of this system in an introductory programming course taken by approximately 100 university students not majoring in computer science. When students were given opportunities to select the language to solve their programming assignments, we traced their selection by tracking working time with BlockEditor or Java for each individual student. The results illustrate the nature of the seamless migration from Block to Java, and show that there is great diversity in the timing and speed of migration to Java by each individual. Additionally, we found that students with low self-evaluation of their skill chose to use Block at a significantly higher rate than did students with high self-evaluation. This suggests that BlockEditor can act as scaffolding for students by promoting mixed programming between Block and Java in their migration phase.	Language Migration in non-CS Introductory Programming through Mutual Language Translation Environment	NA:NA:NA:NA	2015
Mark Dorling:Dave White	There is concern amongst teachers about how to support all pupils in making the transition from popular graphical languages like Scratch to text-based languages like Python. In a new subject, not taught widely before at both primary and secondary education in England, there is inevitably a lack of tuned-in pedagogical expertise. In this paper, the authors address the transition process by exploring established pedagogy in Computer Science, and other subjects including Mathematics, Science and Languages, and by sharing and testing their findings with pupils and teachers in the classroom. Teaching the fundamentals of programming is well served by applying sequential solutions in both graphical and text-based languages. This practitioner action research paper focuses on scaffolding support for pupils when making the transition from graphical to text-based languages. In an approach which uses graphical languages in conjunction with, not in place of, text-based programming languages, the authors discuss ways to tackle the difficulties presented to pupils by text-based languages, and propose a tested strategy for teachers to enable pupils to undertake the transition successfully.	Scratch: A Way to Logo and Python	NA:NA	2015
Lina Battestilli	NA	Session details: Paper Session: Gender & Diversity	NA	2015
Gloria Childress Townsend:Kay Sloan	Motivated by the significance and the consequences of women's underrepresentation in computing, researchers evaluated the effectiveness of a project linking ACM-W's (Association for Computing Machinery's Women in Computing) Celebrations of Women in Computing (conferences) with projects sponsored by two additional organizations in the United States, the Anita Borg Institute's Grace Hopper Celebration of Women in Computing (GHC) and the National Center of Women & IT's Annual Summit. The collaborative project, funded by the National Science Foundation and titled, the Grace Hopper Regional Consortium, featured twelve new regional Celebrations of Women in Computing (Celebrations). An external assessment agency surveyed conference organizers and participants. The paper analyzes data derived from the surveying, demonstrating the impact of the conferences on Celebration attendees, and shows for the first time a comparison of identical survey items from separate GHC and Celebrations assessments.	An Effective Alternative to the Grace Hopper Celebration	NA:NA	2015
A. Nicki Washington:Legand Burge:Marlon Mejias:Ketly Jean-Pierre:Qi'Anne Knox	While computer science (CS) continues to permeate every aspect of society, the number of high-school students that are adequately prepared to enroll in university computer science programs is declining. To address the nation's needs it is clear that the retention rates of underrepresented minorities in CS programs across the country must increase, including the instruction and retention of students at Historically Black Colleges and Universities (HBCUs). At the university, a multi-phased program was developed that first partnered the department with Google to develop a unique program that incorporated Google software developers and undergraduate students, as well as course restructuring to better prepare underclassmen in their first three courses of study. First-year results indicated the program was successful in increasing student retention and interest in CS.	Improving Undergraduate Student Performance in Computer Science at Historically Black Colleges and Universities (HBCUs) through Industry Partnerships	NA:NA:NA:NA:NA	2015
Francisco C. de M.B. Oliveira:Gerarda N.C. Gomes:Adriano T. de Freitas:Anibal C. de Oliveira:Lidiane C. Silva:Bruno Queiroz	Teaching a programming language to a person who is deaf or hearing impaired (DHI) has, along with other challenges, the lack of signs to convey basic concepts in computing. This shortage of signs makes learning even harder for the DHI. The creation of signs from co-present discussions involving instructors, translators and the DHI can lead to regionalism, which might hinder their acceptance by members of other DHI communities throughout the country. A way to combat regionalism is through the asynchronous collaborative creation of signs, normally supported by web tools. But are the signs created through web discussions inferior in any way to those created via co-present discussions? This article presents a comparative study on the acceptance of signs created by both methods showing that acceptable and legitimate signs can also be produced using web discussions and the users can not distinguish from which method they come from.	A Comparative Study of the Acceptability of Signs for the Brazilian Sign Language Created in Person and Remotely	NA:NA:NA:NA:NA:NA	2015
Madeleine Schep	NA	Session details: Paper Session: Student Engagement: Flipped Classroom	NA	2015
Michael Skirpan:Tom Yeh	Traditionally, the inverted (or flipped) classroom has students complete traditional, passive learning tasks (e.g., watching lectures) while at home and uses class time to actualize what is learned through labs, discussions, and exercises. In this paper, we present an instructional model for teaching computer science (CS) that compounds features of the flipped classroom with components of peer instruction and formative assessment. Outside of class, in lieu of a lecture, students worked collaboratively on learning challenges that introduced content through a series of hands-on exercises. During class time, we used hack-a-thons to create an active classroom environment to promote peer coding and cultivate the growth of relevant real-world technical skills. Class work was digitally synced to Google Drive in real-time to allow instructors the opportunity to customize on-the-spot feedback. Further, we used journals as a formative assessment measure to synthesize student interests and opinions into our continued design of the class. In this paper, we describe our pedagogical model and discuss the results and lessons learned from the class using mined data from Google Drive and student journal responses.	Beyond the Flipped Classroom: Learning by Doing Through Challenges and Hack-a-thons	NA:NA	2015
Mary Lou Maher:Celine Latulipe:Heather Lipford:Audrey Rorrer	The basic principles of a flipped classroom teaching method are to deliver content outside of the class and to move active learning into the classroom. There are many strategies for delivering the content online, such as having instructors prepare online lectures, wrapping the course around a MOOC, and curating online videos from various sources. There are also many strategies for including active learning in the classroom that go beyond providing programming labs, and can include various forms of peer instruction. In this paper we describe our experiences flipping four different computer science classes across multiple semesters over two years. This breadth of experience with classroom flipping has enabled us to compare strategies and approaches and develop an understanding of which approaches appear to work under which circumstances. We discuss how we structured out-of-class preparatory work, how we created or sourced online videos, how we used active learning activities in-class to scaffold skills development and identify students' misconceptions, and how we structured teams for in class activities. This paper contributes a set of flexible strategies to consider for provision of curricular content out-of-class, structuring students' preparatory work, applying active learning of skills and concepts, and leveraging social interaction and peer instruction for CS education. We present the impact of our approaches based upon leading indicators of course evaluations and student surveys. We discuss lessons learned and students' responses to our strategies.	Flipped Classroom Strategies for CS Education	NA:NA:NA:NA	2015
Lisa L. Lacher:Mark C. Lewis	The use of online videos and flipped classrooms is a natural fit for many CS courses, especially in the introductory sequence, and the use of these techniques is growing. However, the benefits of these techniques depend heavily on student preparation before class meetings. This paper presents tests of the effectiveness of basic multiple choice quizzes as gateway checks in a flipped classroom by looking at the impact they have on student grades. Programming aptitude and learning approaches were considered as additional factors. Ignoring aptitude and learning approaches, statistical analysis of the student grades did not support our hypothesis that the gate-check video quizzes would be beneficial. Nor did it support our hypothesis that the benefit of quizzes would be greatest for students who had lower aptitudes entering the class. However, there was some evidence that it might have helped raise the grades of students who have a propensity toward surface learning.	The Effectiveness of Video Quizzes in a Flipped Class	NA:NA	2015
Mark Zarb	NA	Session details: Paper Session: CS1/CS2: Persistance and Attitudes	NA	2015
Amber Settle:John Lalor:Theresa Steinbach	Student success in an introductory programing course is crucial, both because it influences retention and because student attitudes and habits in a first course can have a lasting impact on student success in computer science as a field. In this paper we present results about student attitudes and habits before and after a CS1 class. Statistically significant attitude differences were found in three areas: students were less likely to report they were good at programming, more likely to agree they are challenged by programming problems they can't understand immediately, and are less likely to report that computer science allows them to be creative. Statistically significant differences in female and first-quarter responses were also found.	Reconsidering the Impact of CS1 on Novice Attitudes	NA:NA:NA	2015
Diane Horton:Michelle Craig	Much attention has been paid to the failure rate in CS1 and attrition between CS1 and CS2. In our study of 1236 CS1 students, we examine subgroups of students, to find out how characteristics such as prior experience and reason for taking the course influence who drops, fails, or passes, and who continues on to CS2. We also examine whether student characteristics influence outcomes differently in traditional vs. inverted offerings of the course. We find that more students in the inverted offering failed the midterm test, but those who failed were much more likely to either drop the course or recover and ultimately pass the course. While we find no difference between the offerings in the overall drop-fail-pass rates or in the percentage and types of students who go on to take CS2, there is a significant, widely felt, boost in exam grades in the inverted offering.	Drop, Fail, Pass, Continue: Persistence in CS1 and Beyond in Traditional and Inverted Delivery	NA:NA	2015
Jason Carter:Prasun Dewan:Mauro Pichiliani	In an offering of CS 1, we monitored the amount of help students in a class received through various means. We found that most students wanted help that went beyond office hours and email, and that for the vast majority of them, their grades correlated positively with the amount of help they received. However, increasing help also requires increasing instructional resources unless techniques can be found to separate the surmountable difficulties from the insurmountable ones. We have developed such a technique that looks at individual interaction logs and classifies difficulties incrementally as they occur. The insight behind the technique is that when students face surmountable difficulties, they tend to repeat certain action sequences, which can be detected to distinguish the surmountable difficulties from the insurmountable ones. A lab study shows that the mechanism gives significantly better results than the baselines.	Towards Incremental Separation of Surmountable and Insurmountable Programming Difficulties	NA:NA:NA	2015
Ariel Ortiz	NA	Session details: Paper Session: Beyond CS2: Algorithms	NA	2015
Joan M. Lucas	A thorough understanding of algorithms and data structures is essential for any student of Computer Science. In this paper we present a sequence of programming projects that elegantly integrate both the study of algorithmic paradigms with an illustration of how the choice of data structure significantly impacts an algorithm. We do this in the context of a single, easily understood problem domain, that of finding a maximum matching in a graph. By focusing on only a single problem, students more fully appreciate the concept that any problem can be solved in a variety of different ways.	Illustrating the Interaction of Algorithms and Data Structures Using the Matching Problem	NA	2015
Saad Mneimneh	As an advocate of infusing various algorithmic and mathematical aspects when teaching about programming, I have come to realize that an early such practice is essential for a rounded computer science education. In this paper, I show how this can be done while focusing on one theme: Fibonacci. Perhaps the most common use of Fibonacci has been to show the power of recurrence in implementing the Fibonacci sequence, which is often accompanied by a caveat that it is not the best implementation (very slow). Nevertheless, the sequence, with its rabbit story and celebrated golden ratio, is a rather exciting "gadget" for many students and it often pays off to introduce it. Therefore, I explore ways to use Fibonacci (the binary word) and the golden ratio for guiding implementation, and to successfully convey an important message of computer science that programming is not just about writing code. This will be done in the context of one dimensional and two dimensional arrays.	Fibonacci in The Curriculum: Not Just a Bad Recurrence	NA	2015
Brian C. Dean:Raghuveer Mohan:Chad G. Waters	Despite their power and simplicity, randomized algorithms are often under-emphasized in the classroom (and as a consequence, ultimately in practice) since they can be more challenging to analyze than their deterministic counterparts. In this paper, we describe a simplified framework that streamlines the analysis of dozens of common randomized algorithms and data structures. The key component of this framework, which we call the randomized reduction lemma, builds on intuition that is already commonly held by most students based on their experience with deterministic algorithms, and reduces the necessary prerequisites one must know from probability theory to a minimal subset. For example, one can prove that randomized quicksort runs in O(n log n) time with high probability in two paragraphs, without knowledge of random variables or Chernoff bounds. This paper is intended to be self-contained and written in a sufficiently student-friendly fashion so that it may serve as a classroom handout.	Randomized Reduction	NA:NA:NA	2015
Henry M. Walker	NA	Session details: Special Session	NA	2015
Henry M. Walker:Sue Fitzgerald:John F. Dooley	This session seeks to initiate a discussion regarding simple approaches through which faculty can gain meaningful insights into components of their courses and/or programs with only modest expenditures of time and energy.	Curricular Assessment: Tips and Techniques	NA:NA:NA	2015
Michael S. Kirkpatrick	NA	Session details: Panel Session	NA	2015
Michael S. Kirkpatrick:Janice E. Cuny:Mark Guzdial:Amanda Holland-Minkley:Clifford A. Shaffer	NA	Best Practices for IRB Approval: Four Perspectives	NA:NA:NA:NA:NA	2015
Amy Briggs	NA	Session details: Panel Session	NA	2015
Amy Briggs:David Bau:Caroline Meeks:Pat Yongpradit	How do students learn computer science? Successful students climb a ladder of learning and meta-learning. Not only do they learn content, but also they gain proficiency with new processes that aid their learning. Each learner takes her/his own path, of course, but the beginning CS student must clear a number of hurdles that we can identify and help them with. In programming, for example, one might struggle with the leap from visual programming to text programming, or from using well-designed integrated tutorials while learning one language, to the chaos of the Internet when learning another. Numerous ongoing efforts in computer science education and professional development [5, 6] have contributed to tremendous increases in the numbers of students studying computer science at all levels. These efforts have included academic innovations as well as partnerships with industry, government, and non-profit organizations [7]. Expanded access means that more students have the opportunity to study computer science, but also that the diverse needs of many new learners need to be understood and addressed.	Supporting the Computer Science Learning Process	NA:NA:NA:NA	2015
Stephen Edwards	NA	Session details: Demonstration Session	NA	2015
Caitlin Kelleher	Looking Glass is the successor to Storytelling Alice designed for middle and high school students. By dragging and dropping, users can construct programs that direct the behavior of characters in a 3D scene. The system consists of a downloadable application and an online community. Looking Glass is intended to support creative, open-ended programming. To help spark ideas, the Looking Glass community hosts a set of community-created templates and remixes, animations that can be imported into any new world. These templates and remixes can help to inspire a story line. In more formal settings, templates and remixes allow an instructor to provide shared resources for an assignment and for students to collaborate with each other. Exploring the behavior of existing code examples can be a powerful way to learn new skills. In addition to providing story inspiration, community remixes serve as code examples that students can explore. To support users in learning new skills based on code shared through remixes, Looking Glass includes a play and explore mode in which the environment records an execution history and changes to the 3D scene as a program runs. Users can scroll back in time, see which actions were executing, and replay individual statements. A free download is available at lookingglass.wustl.edu for Windows, Mac, and Linux.	Looking Glass	NA	2015
Alvaro Monge:Beth A. Quinn:Cameron L. Fadjo	How do you engage students in the computer science classroom? In this Demo Session we will examine this question within the context of EngageCSEdu (http://www.engage-csedu.org), a web-based collection of instructional materials for introductory CS classes. Developed by computer scientists, social scientists, and learning scientists from California State University, Long Beach, Carnegie Mellon University, University of Pittsburgh, the National Center for Women & Information Technology (NCWIT), and Google, EngageCSEdu is comprised of ~1500 instructional materials (such as assignments, projects, labs, and assessments) and 17 Engagement Practices (strategies and techniques for engaging and retaining students based on CS education and social science research). During this session we will demonstrate key features of EngageCSEdu, discuss how research-based findings on gender diversity and student engagement were used in its development, and invite participants to contribute their ideas for engaging and retaining students. Attendees will explore EngageCSEdu with members of the original development team and discuss how this focused and comprehensive open collection of instructional materials can be effectively used to support instructors. As a product by and for the CS education community, this demo is an opportunity for potential users to provide valuable feedback and input into the ongoing development and dissemination of materials on EngageCSEdu. By the end of this demonstration participants will be more familiar with the research-based factors shown to increase engagement among undergraduate students, particularly women and underrepresented minorities, and have an opportunity to play an active role in positioning EngageCSEdu within the CS education community.	EngageCSEdu: CS1 and CS2 Materials for Engaging and Retaining Undergraduate CS Students	NA:NA:NA	2015
Maria Jump	NA	Session details: Paper Session: Student Engagement: Self Explanation	NA	2015
Leigh Ann Sudol-DeLyser	Novices struggle with the implementation of algorithms in code. Assessments asking students to describe algorithms in code have shown that use of abstractions in the descriptions have correlated with students' ability to produce algorithms in code. In this study, 24 introductory computer science students were asked to think out loud while writing code involving simple array algorithms in an online system. Student statements were classified based on the level of abstraction used in the statement. An analysis of the statements revealed that students with greater proficiency at writing code were more likely to use multiple levels of abstraction when describing the code they were writing, and moved between levels with higher frequency than less proficient students. The results align with self explanation research and provide insight into the cognitive mechanisms responsible for the transfer between the skills of reading and writing code.	Expression of Abstraction: Self Explanation in Code Production	NA	2015
Paul Denny	Written exams are a common form of assessment in introductory programming courses. Creating exam questions is normally the responsibility of the course instructor, however the process of authoring such questions may be a useful learning activity in itself. We explored this idea with a randomized controlled experiment (n > 700) in which a group of first-year programming students generated practice questions prior to an exam. Even though all questions were available to every student in the course for practice, the group that generated the questions performed significantly better on the exam. The effects were most pronounced when students answered exam questions on topics that were targeted by questions they had generated. We suggest that some existing tools for computer science education may benefit from incorporating related activities.	Generating Practice Questions as a Preparation Strategy for Introductory Programming Exams	NA	2015
Arto Vihavainen:Craig S. Miller:Amber Settle	One approach for helping students learn to program is the use of self-explanation assignments. In these assignments, students explain instructional materials using domain knowledge covered in the course. In this work, we describe a randomized experiment where students in an introductory programming course were given two kinds of self-explanation assignments. One randomly selected group worked on self-explanation assignments with supporting questions while the alternate group had the same self-explanation questions but no additional supporting exercises. The combined groups performed better on comparable test questions than students from the previous year, who did not use self-explanation questions. The group with supporting questions performed better than the group with no additional support. Based on our results and previous research on self explanation, we argue that embedding self-explanation questions into programming material is beneficial for students. Moreover, further gains are achieved from supporting questions that help focus their explanations.	Benefits of Self-explanation in Introductory Programming	NA:NA:NA	2015
Charles Hardnett	NA	Session details: Paper Session: Focus on K-12: Professional Development	NA	2015
Stephen Cooper:Susan H. Rodger:Madeleine Schep:RoxAnn H. Stalvey:Wanda Dann	In this experience report, we share our experiences in growing a community of practice for middle and high school teachers focused on teaching introductory computing with Alice. We have offered professional development for over four hundred teachers, teachers who each year provide nearly 2,000 students with an introductory computing experience in courses during the school day. We report on several lessons learned in creating, growing, and supporting a community of practice.	Growing a K-12 Community of Practice	NA:NA:NA:NA:NA	2015
Brian Dorn:Derek Babb:Dawn M. Nizzi:Cory M. Epler	Access to high quality K-12 computer science education has garnered considerable public attention in the United States in the wake of Code.org's December 2013 Hour of Code. An increasing number of states are now counting CS coursework towards high school graduation requirements, and teacher certification for computing courses is being revisited across the country. In this work, we explore the current state of computer science education in Nebraska public schools using objective enrollment data from the 2013-2014 academic year. We find limited access to introductory programming courses, while basic computer/IT literacy coursework is commonplace. Lack of CS courses is particularly acute in small schools, which make up a majority of Nebraska's public schools. We also present data illustrating limited pursuit of IT teaching endorsement/certification in the state and highlight current issues for teacher training programs that lead to such certification in Nebraska.	Computing on the Silicon Prairie: The State of CS in Nebraska Public Schools	NA:NA:NA:NA	2015
Robin Flatland:Darren Lim:James Matthews:Scott Vandenberg	We describe a new methods of teaching computer science (CS) course tailored for mathematics education majors but also applicable to others interested in teaching CS. Goals of the course are enhancing their ability and confidence in developing and offering CS courses at high schools and starting CS courses at high schools that do not offer them. The course involves a combination of reading, programming, lesson/unit plan development, code reviews, and discussion of the various paradigms for introducing CS at the secondary level. Results indicate the course enhances the students' confidence, ability, and preparation for teaching CS in high schools.	Supporting CS10K: A New Computer Science Methods Course for Mathematics Education Students	NA:NA:NA:NA	2015
Elissa Redmiles	NA	Session details: Paper Session: Soft Skills: Teamwork & Communication	NA	2015
Raymond Greenlaw:Christopher Brown:Zachary Dannelly:Andrew Phillips:Sarah Standard	In this work we describe how a message board can be used to teach a number of important concepts in cyber security in a novel and hands-on manner. The message board is used daily in class and serves the routine functions of disseminating information to students, offering a forum for interactive discussions, allowing a convenient method to copy and paste complex expressions, providing a venue for class interaction, permitting archiving of information, and serving as a general blackboard. We use the message board to illustrate and teach important cyber-security concepts and common attacks such as the following: authentication and cookies, cross-site scripting and injection attacks, man-in-the-middle attack on public-key cryptography, password selection, and password-file management. From the student-learning perspective the tool appears to work very well. We hope that others can make use of the message board in their lessons or incorporate parts of it to improve the educational experience of their students. The message board can be integrated seamlessly into a class to enhance hands-on learning.	Using a Message Board as a Teaching Tool in an Introductory Cyber-Security Course	NA:NA:NA:NA:NA	2015
Mark Zarb:Janet Hughes:John Richards	Pair programming has several benefits when it is successfully used by students and experts alike. However, research shows that novice pairs find the necessary pair communication to be one of the main challenges in adopting this process. A set of industry-inspired pair programming guidelines have been derived and evaluated from qualitative examinations of expert pairs, with the aim of helping novice programmers communicate within their pair. This research describes a further evaluation of these guidelines with a number of student pairs, and demonstrates how novice pairs who were exposed to the guidelines became comfortable communicating with their partners.	Further Evaluations of Industry-Inspired Pair Programming Communication Guidelines with Undergraduate Students	NA:NA:NA	2015
Christopher D. Hundhausen:Adam S. Carter:Olusola Adesope	Social learning theory emphasizes the importance of providing learners with opportunities to observe their peers, and to participate actively in a community. Unfortunately, early computing courses tend to emphasize individual programming assignments, which discourage learners from observing and working with their peers. In order to explore the possibility that increased opportunities for social awareness and interaction while working on programming assignments might influence learning outcomes in early computing courses, we are studying the design and use of social networking-style activity streams in such courses. In an empirical study of the use of two types of activity streams in a CS 2 course - one that was part of a learning management system, and one integrated directly into students' programming environment - we found that students who used the integrated stream were twice as socially active; however, social participation in both environments was positively correlated with students' grades. Our results suggest that the use of activity streams as an adjunct to individual programming assignments can positively influence learning; computing instructors would do well to find ways to get their students to participate actively in activity streams during the programming process.	Supporting Programming Assignments with Activity Streams: An Empirical Study	NA:NA:NA	2015
Don Goelman	NA	Session details: Paper Session: Beyond CS2: Cloud Computing	NA	2015
Weiying Zhu	Hands-on activities are important for computer science students to achieve their learning objectives. Compared to developing and maintaining on-campus physical or virtual laboratories, using the public cloud to host hands-on activities is a very promising approach because of the scalability, flexibility, security, cost-efficiency, and accessibility of the services offered in the public cloud. This paper presents the design of four cloud-based network programming projects and our experience of using the services and infrastructure in the public cloud for these hands-on projects in our Computer Networks course. Each student was able to use multiple virtual machines in the public cloud together with a local computer to develop and test networking programs. Both the instructor's observation and student surveys demonstrated that our approach has a strong positive impact on the student learning experience. A vast majority of the students favor using the public cloud not only in this course but also in other computer science courses if applicable.	Hands-On Network Programming Projects in the Cloud	NA	2015
Richard S. Weiss:Stefan Boesen:James F. Sullivan:Michael E. Locasto:Jens Mache:Erik Nilsen	This paper reports on the experience of using the EDURange framework, a cloud-based resource for hosting on-demand interactive cybersecurity scenarios. Our framework is designed especially for the needs of teaching faculty. The scenarios we have implemented each are designed specifically to nurture the development of analysis skills in students as a complement to both theoretical security concepts and specific software tools. Our infrastructure has two features that make it unique compared to other cybersecurity educational frameworks. First, EDURange is scalable because it is hosted on a commercial, large-scale cloud environment. Second, EDURange supplies instructors with the ability to dynamically change the parameters and characteristics of exercises so they can be replayed and adapted to multiple classes. Our framework has been used successfully in classes and workshops for students and faculty. We present our experiences building the system, testing it, and using feedback from surveys to improve the system and boost user interest.	Teaching Cybersecurity Analysis Skills in the Cloud	NA:NA:NA:NA:NA:NA	2015
M. Suhail Rehman:Jason Boles:Mohammad Hammoud:Majd F. Sakr	We have designed, developed and administered a course on cloud computing that was taught to over 700 students at our institution over two years. The goal of this project-based course is to provide students with foundational systems concepts as well as experience in developing the required skills to design and deploy viable, robust and elastic web-services within performance and budgetary constraints. We present our objectives, learning outcomes, projects, learning model, outcomes and lessons learned. So far, for this demanding course, our student retention rate is above 80% and enrollment is doubling every year.	A Cloud Computing Course: From Systems to Services	NA:NA:NA:NA	2015
Joel C. Adams	NA	Session details: Special Session	NA	2015
Joel C. Adams:Jacob Caswell:Suzanne J. Matthews:Charles Peck:Elizabeth Shoop:David Toth	In response to the shift to multicore processors, the ACM-IEEE CS2013 curriculum recommendations [1] include parallel and distributed computing (PDC) as a new core knowledge area. Some of the key concepts in PDC are the distinctions between shared-memory, distributed-memory, and heterogeneous system architectures.  Most CS educators would agree that providing students with hands-on experience improves their students' learning. Given the ubiquity of multicore processors, it is quite easy to give today's students hands-on experience developing software on shared-memory architectures. By contrast, providing students with hands-on experience developing software for distributed architectures has typically required access to a Beowulf cluster, the price of which was beyond the reach of many institutions. However, hardware manufacturers have recently begun producing a variety of inexpensive --system on a board multiprocessors. Creative CS educators are using these multiprocessors to design and build inexpensive Beowulf clusters, and using them to provide students with hands-on experience with shared-memory, distributed-memory, and heterogeneous computing paradigms.  In this special session, several PDC educators will bring, present, and demonstrate their innovative Beowulf clusters; each designed and built using a different inexpensive multiprocessor board.	Budget Beowulfs: A Showcase of Inexpensive Clusters for Teaching PDC	NA:NA:NA:NA:NA:NA	2015
Meimei Gao	NA	Session details: Panel Session	NA	2015
Meimei Gao:Julie Johnson:Dale Reed:Cate Sheller:Franklyn Turbak	NA	Using App Inventor in Introductory CS Courses	NA:NA:NA:NA:NA	2015
Cameron L. Fadjo	NA	Session details: Panel Session	NA	2015
Cameron L. Fadjo:Betsy DiSalvo:Irene Lee:Karen Peterson	Informal computer science (CS) education is currently taking shape within the myriad of social and technological solutions available to a wider audience. Increased access to low-cost mobile devices has led to the proliferation of web-based CS education programs accessible by more and more people. Online social networks further bolster the dissemination of information and help establish connections among individuals knowledgeable about the discipline. The disconnection comes when a solution is created but no strategy is devised to support distribution among the general population. In this overview we will outline the scope of this problem within the context of informal CS education by illustrating the range of programs and issues addressed by the panelists. We will highlight how each program contributes to core challenges within informal CS education and situate them within an approach that has the potential to transform how informal CS education programs are supported, developed, and scaled.	Research, Resources and Communities: Informal Ed as a Partner in Computer Science Education	NA:NA:NA:NA	2015
Bo Brinkman	NA	Session details: Paper Session: CS Education Research	NA	2015
Renee McCauley:Brian Hanks:Sue Fitzgerald:Laurie Murphy	This study compares differences in students' ability to comprehend recursive and iterative programs by replicating a 1996 study. These studies are interesting for the following reasons: (1) there have been few studies on the comprehension of recursive programs, (2) there have been few studies of recursion that involve the use of data structures, (3) subjects were asked to read and comprehend code that manipulated linked lists recursively. In a 1996 study, subjects found a recursive version of a linked list search function easier to comprehend than an iterative version. The results of this study contradict these earlier findings; subjects in this study were equally likely to correctly describe the purpose of the search algorithm, regardless of iterative or recursive implementation. Consistent with the findings in the 1996 study, subjects in this study were more likely to correctly describe the copy task using the iterative version of this problem rather than the recursive version. Subjects who correctly described the purpose of the copy method wrote abstract summaries. Many of the subjects who did not recognize the purpose of the code, and who answered incorrectly, provided a line-by-line (partial) trace of the code. While revealing some understanding of the execution of the code, these subjects were generally not able to see the forest for the trees.	Recursion vs. Iteration: An Empirical Study of Comprehension Revisited	NA:NA:NA:NA	2015
Daniel Zingaro:Leo Porter	Recent computer science education research using isomorphic questions in Peer Instruction (PI) classes demonstrates that students learn from talking to their peers and listening to the instructor's follow-up explanation. These results provide evidence of the effectiveness of the PI process but are limited to what happens in a single class session. The present work extends the use of isomorphic questions to investigate how in-class learning translates to success on the final exam. Despite considerable time between in-class questions and the final exam, we find that students who learn in class are shown to retain that learning and to perform better than students who did not learn in class. In addition, compared to students already understanding the material, those who learned the material in class are almost (87%) as likely to correctly answer isomorphic exam questions. Our results have implications for the value of difficult PI questions and the meaning of in-class response graphs.	Tracking Student Learning from Class to Exam using Isomorphic Questions	NA:NA	2015
Amruth N. Kumar	A controlled study was conducted to evaluate the effectiveness of providing visualization as part of feedback in a problem-solving software tutor on arithmetic expression evaluation. Data was collected over six semesters from multiple institutions. ANOVA analysis of the collected data was conducted in three stages. Statistically significant results include that visualization helped students learn more concepts; visualization did not improve the speed of learning; the benefits of visualization accrued primarily to less-prepared students; and visualization may affect different demographic subgroups differently. Incidental results include that there was no difference among demographic groups (male/female, traditional/underrepresented, Computer Science/non-CS) in the number of concepts learned using the software tutor, although some groups (female, underrepresented) were less-prepared before using the tutor than their counterparts, and some groups learned concepts with fewer practice problems (male, traditionally represented) than their counterparts. Concurrence of the results obtained whether the analysis was conducted based on pre-condition (need) or post-condition (benefit) of using the tutor strengthens the claims made as a result of this study.	The Effectiveness of Visualization for Learning Expression Evaluation	NA	2015
Martha Kosa	NA	Session details: Paper Session: Focus on K-12: Professional Development	NA	2015
Ralph Morelli:Chinma Uche:Pauline Lake:Lawrence Baldwin	The Mobile Computer Science Principles (Mobile CSP) project is an NSF-funded CS 10K project. Its goal is to train a new cohort of high school computer science teachers to teach an Advanced Placement (AP) level course based on the emerging Computer Science Principles (CSP) framework. Mobile CSP uses App Inventor, a graphical programming language for Android devices, to engage students in app building as a means to get them interested in computer science. This paper reports on the first year of this effort. In addition to describing the project's Professional Development (PD) course, a 6-week, full-time summer course for teachers, and the Mobile CSP curriculum, the paper provides a preliminary analysis of demographic and performance data obtained from high school students who took the course during the 2013-2014 academic year.	Analyzing Year One of a CS Principles PD Project	NA:NA:NA:NA	2015
Lori Pollock:Chrystalla Mouza:James Atlas:Terry Harvey	A major challenge for broadening participation in computing within K-12 settings is the lack of trained teachers. While professional development programs provide opportunities for the development of knowledge, skills, and pedagogy in teaching computing, teachers need ongoing support throughout the academic year. In this paper, we describe a course-based model for partnering undergraduates with teachers and students in a field experience model. We describe the model focusing on learning objectives, curriculum, field component and partnership building. We subsequently report on the products that undergraduates were able to create with their partner teachers. Finally, we investigate the impact of the field experience model on undergraduates' content knowledge, pedagogical skills and career development.	Field Experiences in Teaching Computer Science: Course Organization and Reflections	NA:NA:NA:NA	2015
Jeff Gray:Kathy Haynie:Sheryl Packman:Mary Boehm:Carol Crawford:Deepa Muralidhar	This paper summarizes our mid-project results in developing and evaluating a CS Principles (CSP) professional development (PD) model for training several cohorts of teachers across an entire state geography. CS4Alabama is an NSF-funded project that has adopted the successful practices of a national AP training program developed by the National Math and Science Initiative (NMSI) in pursuit of scalable deployment and sustainable persistence of new CSP courses across Alabama. We have created a CSP curriculum and PD program based on year-long in-person training and distance learning collaboration, which also was offered as a national MOOC as part of Google CS4HS. A statewide Teacher Leader (TL) model is used, where those who have previously taught rigorous CS courses serve as mentors in training new peer cohorts as they establish CSP courses in their schools. Teachers in these cohorts collaborate together on content and pedagogical learning experiences, fostered by the TLs. This paper reports on assessment results that are uncovering the facets of our model that are most suitable for building a sustainable network of CSP teachers. The paper summarizes our PD model, offers various lessons learned, and details the findings of the project's external evaluation team.	A Mid-Project Report on a Statewide Professional Development Model for CS Principles	NA:NA:NA:NA:NA:NA	2015
Susan Hammond	NA	Session details: Paper Session: Student Engagement: Active Learning	NA	2015
David Toth:Mary Kayler	Gaming has been identified as a way to increase student engagement in the classroom. This qualitative study explored 78 undergraduate students' experiences with a role-playing game infused into two computer science courses. Open-ended student surveys served as the primary data source to explore, "In what ways, if any, does role-playing quest based curriculum support student learning and engagement?" Key curricular innovations are described along with assignments and assessments that were integrated. Three broad themes emerged and identified personalized learning, deepened content understandings, and enhanced collaboration skills as three areas that supported student learning and engagement. Many students felt that the infusion of role-playing aspects into the courses supported their learning and engagement, but some students did not.	Integrating Role-Playing Games into Computer Science Courses as a Pedagogical Tool	NA:NA	2015
Celine Latulipe:N. Bruce Long:Carlos E. Seminario	We present a new approach to help make computer science classes both more social and more effective: "lightweight teams". Lightweight teams are class teams in which the team members have little or no direct impact on each other's final grades, yet where there is a significant component of peer teaching, peer learning and long-term socialization built into the curriculum. We explain how lightweight teams have been used in a CS1 class at our institution, and how this approach, combined with a flipped class approach and gamification, has led to high levels of student engagement, despite the difficulty of the material and the frustration that is common to those first learning to program.	Structuring Flipped Classes with Lightweight Teams and Gamification	NA:NA:NA	2015
Hanna M√§enp√§√§:Sasu Tarkoma:Samu Varjonen:Arto Vihavainen	This article describes an experimental course where students developed Internet of Things device prototypes to improve the upkeep of an urban rooftop greenhouse. With the help of a problem-based learning approach, students were first familiarized with their new learning environment and encouraged to find issues that could be improved as a meaningful personal learning experience. A project-based learning approach was then used to develop innovative solutions while validating their relevance in collaboration with gardeners that were taking care of the greenhouse. As a result, a number of practical applications for monitoring the state of the greenhouse were developed along with new practices for its maintenance. As participants were given the freedom to choose both the topic and technologies to work with, the course provided a learning experience that was tailored to suit personal interests and competences. Having the common background story allowed students to practice teamwork skills and collaborative software engineering in the context of the emerging topic of Internet of Things.	Blending Problem- and Project-Based Learning in Internet of Things Education: Case Greenhouse Maintenance	NA:NA:NA:NA	2015
Ahmad Noor	NA	Session details: Paper Session: Testing: Improving Quality of Student Testing	NA	2015
Sara Hooshangi:Richard Weiss:Justin Cappos	Writing secure code requires a programmer to think both as a defender and an attacker. One can draw a parallel between this model of thinking and techniques used in test-driven development, where students learn by thinking about how to effectively test their code and anticipate possible bugs. In this study, we analyzed the quality of both attack and defense code that students wrote for an assignment given in an introductory security class of 75 (both graduate and senior undergraduate levels) at NYU. We made several observations regarding students' behaviors and the quality of both their defensive and offensive code. We saw that student defensive programs (i.e., assignments) are highly unique and that their attack programs (i.e., test cases) are also relatively unique. In addition, we examined how student behaviors in writing defense programs correlated with their attack program's effectiveness. We found evidence that students who learn to write good defensive programs can write effective attack programs, but the converse is not true. While further exploration of causality is needed, our results indicate that a greater pedagogical emphasis on defensive security may benefit students more than one that emphasizes offense.	Can the Security Mindset Make Students Better Testers?	NA:NA:NA	2015
Raymond Pettit:John Homer:Roger Gee:Susan Mengel:Adam Starbuck	As automated tools for grading programming assignments become more widely used, it is imperative that we better understand how students are utilizing them. Other researchers have provided helpful data on the role automated assessment tools (AATs) have played in the classroom. In order to investigate improved practices in using AATs for student learning, we sought to better understand how students iteratively modify their programs toward a solution by analyzing more than 45,000 student submissions over 7 semesters in an introductory (CS1) programming course. The resulting metrics allowed us to study what steps students took toward solutions for programming assignments. This paper considers the incremental changes students make and the correlating score between sequential submissions, measured by metrics including source lines of code, cyclomatic (McCabe) complexity, state space, and the 6 Halstead measures of complexity of the program. We demonstrate the value of throttling and show that generating software metrics for analysis can serve to help instructors better guide student learning.	An Empirical Study of Iterative Improvement in Programming Assignments	NA:NA:NA:NA:NA	2015
Kevin Buffardi:Stephen H. Edwards	Writing meaningful software tests requires students to think critically about a problem and consider a variety of cases that might break the solution code. Consequently, to overcome bugs in their code, it would be beneficial for students to reflect over their work and write robust tests rather than relying on trial-and-error techniques. Automated grading systems provide students with prompt feedback on their programming assignments and may help them identify where their interpretation of requirements do not match the instructor's expectations. However, when automated grading systems help students identify bugs in their code, the systems may inadvertently discourage students from thinking critically and testing thoroughly and instead encourage dependence on the instructor's tests. In this paper, we explain a framework for identifying whether a student has adequately tested a specific feature of their code that is failing an instructor's tests. Using an implementation of the framework, we analyzed an automated grading system's feedback for programming assignments and found that it often provided hints that may discourage reflective testing.	Reconsidering Automated Feedback: A Test-Driven Approach	NA:NA	2015
Steven Andrianoff	NA	Session details: Paper Session: Beyond CS2: OS/Virtualization	NA	2015
Lee Wittenberg	Computer Science departments have special requirements for their computing environments, distinct from the "normal" requirements of most other departments. However, shrinking budgets and other factors make it difficult for many of us to provide an adequate computing environment for our students, above and beyond the generic support provided by our school's computing services division. This paper describes the use of bootable, "live" USB keys to provide students with a standard, portable environment that they can use on their own computers as well as in our labs.	MC-Live: A Portable Computing Environment for Computer Science Students	NA	2015
Abhinand Palicherla:Tao Zhang:Donald E. Porter	Virtual machines (VMs) are an increasingly ubiquitous feature of modern computing, yet the interested student or professional has limited resources to learn how VMs work. In particular, there is a lack of "hands-on" exercises in constructing a virtual machine monitor (VMM, or hypervisor), which are both simple enough to understand completely but realistic enough to capture the practical challenges in using this technology. This paper describes a set of assignments to extend a small, pedagogical operating system (OS) to form a hypervisor and host itself. This pedagogical hypervisor, called HOSS, adds roughly 1,000 lines of code to the MIT JOS source, and includes a set of guided exercises. Initial results with HOSS in an upper-level virtualization course indicate that students enjoyed the assignments and were able to apply what they learned to solve different virtualization-related problems. HOSS is publicly available.	Teaching Virtualization by Building a Hypervisor	NA:NA:NA	2015
Rafael Rom√°n Otero:Alex A. Aravind	Operating systems is a central subject in computer science curriculum, and teaching it successfully has been a challenge. Effective learning requires carefully designed programming projects that can facilitate deep thinking and enhance hands-on experience. This paper presents MiniOS, an instructional embedded operating system designed to carry out operating systems projects successfully. We explain MiniOS approach, the rationale behind it, and compare it with other similar approaches.	MiniOS: An Instructional Platform for Teaching Operating Systems Projects	NA:NA	2015
Lien Diaz	NA	Session details: Special Session	NA	2015
Paul T. Tymann:Fran P. Trees:Lester Wainwright:Richard Kick:Sandy Czajka:Andrew Kuemmel:Lien Diaz	College Board has joined national efforts to improve the state of STEM education, in particular to address the challenge of increasing participation with a diverse population of computer scientists to meet the growing demands of the field of computing. The Advanced Placement (AP) Program is pleased to endeavor in enhancing AP Computer Science offerings by maintaining college level integrity and addressing issues of equity and access for students and teachers. In addition to the established AP Computer Science A course, the AP Program is engaged in the development of a forthcoming AP Computer Science Principles course. The additional option for high school students to study college level computing will provide more students with an opportunity to be introduced to important computer science concepts, gain a broader perspective of the field of study, and have access to a larger pathway into computing. This session will review information regarding the AP Computer Science A course and will discuss plans for collecting feedback from college faculty regarding course content and approaches to programming techniques and languages. It will then discuss the new Computer Science Principles course and plans for the development and launch of the course and exam. The session will conclude with a Q&A session addressing questions regarding both courses. The session will be moderated by Lien Diaz from the AP Program at the College Board.	Achieving a shared goal with AP Computer Science A and AP Computer Science Principles	NA:NA:NA:NA:NA:NA:NA	2015
Lecia J. Barker	NA	Session details: Special Session	NA	2015
Lecia J. Barker:Stephen Cooper:Andrew McGettrick:Jason Thatcher:Heikki Topi	NA	Towards Grand Challenges in Computing Education Across Disciplines	NA:NA:NA:NA:NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Shuo Niu:Andrey Esakia:Scott McCrickard	This demo features smartwatch applications created by junior/senior CS students in a mobile development course. The course featured the Pebble smartwatch, with an e-ink display, vibrating motor, and accelerometer. Smartwatches enhance mobile device use by acting as a secondary display and providing immediate notifications, but designing for them has challenges in memory management, sensor programming, networking issues, and display size. Incorporating Pebble smartwatch development in a mobile app development class allowed students to exercise core computer science concepts to overcome Pebble hardware and software limitations and to develop applications that leverage Pebble affordances. Two sections of the class featured Pebble-focused assignments, including an open-ended homework, a focused homework, and a term design project coordinating smartphone-smartwatch use. The two-semester experience yielded apps in all Pebble-defined categories, including tools and utilities, notifications, remotes, health and fitness, and games. Examples of the students' work from each of the categories will be presented in this demo on topics such as music synthesizing, remote camera operation, course management alerts, and server management. The presented apps reflect student understanding of the sensor functionalities, hardware capabilities and limitations, and interactions of the phone-watch pair. This demo will serve as a valuable resource for those who plan to incorporate smartwatch development into their teaching practice. Based on the educational experience gleaned, future opportunities can explore the role of the smartwatch in mobile development and programming education for college and K-12 students.	Exploring Computer Science Topics with Programmable Smartwatches	NA:NA:NA	2015
Kristy Boyer:Philip Sheridan Buffum:Kirby Culbertson:Megan Frankosky:James Lester:Allison Martinez-Arocho:Wookhee Min:Bradford Mott:Fernando Rodriguez:Eric Wiebe	We present ENGAGE, a game-based learning environment for teaching computational thinking to middle school students. This project has dual aims: introducing computational thinking practices to students at a young age, and improving computational thinking attitudes among underrepresented students. In pursuit of these two goals, the ENGAGE team has mapped the learning objectives of the AP CS Principles course to the middle school level, and then built an immersive game experience upon that foundation. Students choose computer scientist avatars to represent themselves, and then play in pairs as they investigate a data-related mystery in an underwater research station, solving computational thinking challenges along the way. ENGAGE is currently being implemented as part of a quarterly elective in four middle schools in North Carolina. During the elective, students spend a total of ten classroom sessions playing the game, supplemented by "unplugged" activities that reinforce concepts learned in the game environment. We plan to expand to more middle schools in the 2015-2016 school year. In this demo, members of the SIGCSE community will be able to experience the ENGAGE game for themselves and learn more about its development and future directions. We will also discuss our success in recruiting and teaching the ENGAGE curriculum to middle school teachers who had no prior computer science experience, and the success of those middle school teachers in implementing ENGAGE within their classrooms.	ENGAGE: A Game-based Learning Environment for Middle School Computational Thinking	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Sohum Sohoni	NA	Session details: Paper Session: CS Education Research	NA	2015
Shaymaa Sorour:Kazumasa Goda:Tsunenori Mine	Assessment of learning progress and learning gain play a pivotal role in education fields. New technologies like comment data mining promote the use of new types of contents; student comments highly reflect student learning attitudes and activities compared to more traditional methods and they can be a powerful source of data for all forms of assessment. A teacher just asks students after every lesson to freely describe and write about their learning situations and behaviors. This paper proposes new methods based on a statistical latent class "Topics" for the task of student grade prediction; our methods convert student comments using latent semantic analysis (LSA) and probabilistic latent semantic analysis (PLSA), and generate prediction models using support vector machine (SVM) and artificial neural network (ANN) to predict student final grades. The experimental results show that our methods can accurately predict student grades based on comment data.	Correlation of Topic Model and Student Grades Using Comment Data Mining	NA:NA:NA	2015
Barry Wittman:Jean Pretz	If a bat and a ball cost $1.10 in total and the bat costs $1.00 more than the ball, how much does the ball cost? Many people trained in logical reasoning answer this question incorrectly. Is the kind of logical trap posed by this question similar to the logical traps in computer science? This paper examines the similarity between computer science programming problems with intuitive yet incorrect "lure" answers and logical problems from psychology and economics that share this characteristic. We find that there are fundamental similarities between these kinds of problems and that these problems can even be used as predictors of grades in introductory programming courses. Furthermore, we demonstrate that certain cognitive styles identified in recent psychological literature perform better on such problems.	Bats, Balls, and Lures: Cognitive Style in CS Education	NA:NA	2015
David Ginat:Eti Menashe	We present the utilization of the educational SOLO taxonomy for assessing algorithmic features of introductory programming. The SOLO taxonomy was recently studied by CS research educators, with respect to code reading and code writing. Most of the studies focused on code reading. In this paper we offer a framework of SOLO utilization for assessing basic algorithmic design features of code writing. Our novelty stems from focusing on: selection, flexible manipulation, and composition of basic design patterns, as well as on capitalization on unfolded task characteristics. We specify SOLO levels with respect to algorithmic design, and relate to common errors. We display our findings of applying the suggested framework in an ordered study with CS1 students.	SOLO Taxonomy for Assessing Novices' Algorithmic Design	NA:NA	2015
Ravi Gandham	NA	Session details: Paper Session: Focus on K-12: Engaging Students	NA	2015
Antti-Jussi Lakanen:Ville Isom√∂tt√∂nen	Phenomenographic studies in computing education research have previously focused on learning "programming thinking" [3], the act of learning to program [2], and conceptions of learning generally in an engineering context [10]. In the present study we analyze and discuss "what it takes to do computer programming" using phenomenography as research approach. This study is based on a large survey dataset gathered in summer outreach courses for K-12 students. The analysis resulted in 12 qualitatively different categories belonging to five separate, emergent themes: Syntax and language features, nature of programming work generally, computational thinking and problem solving, prerequisites, and auxiliary skills. We additionally reviewed whether the students' previous experience explains the categories, and observed that a mechanistic view of programming was prevailing among the inexperienced users, while experienced students more often stressed algorithmic thinking and logical reasoning. This study resembles work done by Eckerdal et al. [3], but gives a K-12 perspective to the question, "what does it takes to do programming?"	What Does It Take to Do Computer Programming?: Surveying the K-12 Students' Conceptions	NA:NA	2015
David Musicant:S. Selcen Guzey	The new AP CS Principles curriculum has a significant component regarding modeling and simulation, and many teachers will need to figure out how to accomplish this in their classroom. We have developed a new publicly available media-enhanced approach for teaching modeling and simulation, designated as TrafficJam. The approach consists of two core activities, both of which involve students optimizing traffic signals (also known as traffic lights, or stoplights). TrafficJam is likely best distinguished from other classroom simulation exercises in that these activities are introduced, motivated, and demonstrated in a video created by Twin Cities Public Television (TPT). The video uses an inquiry-driven format to feature four high school students who take on the task of improving signal timing in their own neighborhood. A pilot study of TrafficJam in four schools indicates that students find the video engaging, the activities relevant and interesting, and that they gain understanding of modeling and simulation from the experience.	Engaging High School Students in Modeling and Simulation through Educational Media	NA:NA	2015
Rachel Menzies:Michael Crabb:Daniel Herron:Karen Petrie:Craig Stewart:Mark Zarb	Computing is now one of the fastest growing fields of employment, with a large bias placed on developing Science, Technology, Engineering, and Mathematics (STEM) education in schools. However, due to the fast pace of technology development, it is increasingly difficult for schools to keep up with the latest computing methodologies. A possible solution is the use of university outreach programmes, whereby local universities can provide training workshops on areas that can be challenging for schools to implement. This can be problematic, as there is a perceived lack of interest in the methods used to interact with secondary school pupils on a university level. This paper introduces a week long 'Easter Computing School', comprising of five workshop sessions on different topics. These sessions were analysed in terms of user engagement, to better understand aspects that are important to secondary school pupils. It was found that a combination of theory and interactive workshop sessions can provide the highest levels of engagement and their use is encouraged in future workshop design.	An Analysis of User Engagement in Relation to Computing Workshop Activities	NA:NA:NA:NA:NA:NA	2015
Joan Lucas	NA	Session details: Paper Session: Testing: Tools & Techniques	NA	2015
Don Blaheta	This paper describes Unci, a unit-testing language with a clean and minimal interface suitable for introducing beginning programming students to the ideas of unit testing and test-driven development. We detail why CppUnit, a common C++-based unit-testing framework, is not well-suited for beginners, and present Unci and explain how it addresses the weaknesses of CppUnit. Finally, we present a comparison of CS2 student performance in the two systems, showing that moving from CppUnit to Unci resulted in an approximate doubling in the proportion of students able to write an effective test suite for a lab assignment.	Unci: a C++-based Unit-testing Framework for Intro Students	NA	2015
Laurie Murphy:Sue Fitzgerald:Scott Grissom:Ren√©e McCauley	A goal-plan analysis was conducted to examine the variety of plans students use in writing a recursive method for an operation on a binary search tree. Students were asked to write a recursive method to count the nodes in a binary search tree with exactly one child. The problem incorporated two goals: traversing the tree and counting nodes with one child. Three traversal plans and four counting plans were observed in student solutions. Over half of the students used the arm's-length recursion plan, which involves testing for the base case before it is actually reached in order to avoid making recursive calls. This strategy creates complex and error prone code. Making students aware of arm's-length recursion may help them avoid introducing bugs into their recursive code. Although nearly all of the 18 participants demonstrated viable plans for solving the problem, their solutions contained a variety of errors: 55 total errors of 15 types. Students had particular difficulty with base cases, misplaced calculations, and missing method calls. Knowledge of these errors can be useful for instructors when developing lecture examples, identifying distractors for peer instruction multiple-choice questions and for designing homework exercises. Instructors can counteract these problems by providing a variety of recursive examples.	Bug Infestation!: A Goal-Plan Analysis of CS2 Students' Recursive Binary Tree Solutions	NA:NA:NA:NA	2015
Michael K. Bradshaw	We introduce the Ante framework to automate the evaluation of student tests in such a way that students will see them as an integral part of the software development process. Our unique approach is to evaluate student testing before students are allowed to submit implementations of the assignment. By evaluating student testing, we can ensure that 1) students understand the assignment before moving on to implementing it and 2) students have a set of tests to aid in implementing their assignment. In this paper we will describe the existing tools and techniques to evaluate student testing, discuss the process of utilizing this framework from both the student and instructor points of view, describe the technical and usability issues in crafting Ante, and report preliminary feedback of student attitudes towards testing in the context of this new paradigm.	Ante Up: A Framework to Strengthen Student-Based Testing of Assignments	NA	2015
Ruth Anderson	NA	Session details: Paper Session: Soft Skills: Teamwork	NA	2015
Anya Tafliovich:Andrew Petersen:Jennifer Campbell	Project experience and teamwork have been identified as two of the most important deficiencies of recent graduates, so experiences with team projects are a critical component of computer science and software engineering education. However, evaluating these projects is difficult, as it requires a balance between rewarding the team's effort (and the development of skills that enable the team to work effectively) and recognizing individual contributions. We report on an investigation of the student perspective on evaluation of software development team projects. We find that (1) computer science and software engineering educators hold several misconceptions about students' preferences in teamwork evaluation methods, (2) that students' preferences with regard to evaluation change dramatically as they advance through the program and even in the course of a single term, and (3) that the change in preference occurs early in the term, before they complete any work as a team, with most students shifting their preference towards putting more weight on the team's effort.	On the Evaluation of Student Team Software Development Projects	NA:NA:NA	2015
Craig Anslow:Frank Maurer	Teaching group based Agile software development project courses is difficult. There are many aspects that need to be considered for a project to be successful such as a well defined scope, students working effectively together, and engaging with the customer. In this paper we present an experience report at teaching an Agile software development project course that involved teams developing web applications. The resources developed for the course and discussion about our experience will help inform others who also wish to teach group based software development courses.	An Experience Report at Teaching a Group Based Agile Software Development Project Course	NA:NA	2015
Jennifer Campbell:Anya Tafliovich	We report on our experience with incorporating Android software development in a second-year software design course. Our primary course goals are twofold: (1) teach principles of object-oriented design, and provide students with an opportunity to apply these principles in designing and developing Java programs, and (2) introduce students to the basics of software engineering with a team project that follows a Scrum-like software development process. In this report, we describe a team-based Android application development project that achieves our teaching goals, helps motivate student learning, and increases student satisfaction with the course. We provide an overview of our approach, outcomes, and student feedback. We also describe lessons learnt by the instructors and identify promising directions for improvements.	An Experience Report: Using Mobile Development To Teach Software Design	NA:NA	2015
Stephen Edwards	NA	Session details: Lightning Talk Session	NA	2015
Nicole Anderson:Tim Gegg-Harrison	When it comes to educating children, we may agree that it makes no sense to teach them to write before they have mastered the alphabet. Yet, it is common for CS instructors to forge ahead with the next topic even though some students have failed to gain the necessary understanding of the current topic. The tightly integrated nature of CS topics often makes this "forward progress" turn into no progress at all for those students. We propose an individualized approach to CS instruction where students progress to more advanced concepts only after they have demonstrated proficiency in prerequisite topics. We use a constructivist model of individualized instruction supported by specialized materials and a support system of instructor and peers: core Montessori components. In our case, the specialized materials are realized in a "living textbook" which incorporates scaffolded lessons delivered to students at the appropriate time based on their individual progress and also integrates a social communication network between students, peers, and the instructor (guide). Maria Montessori said that "our aim is not only to make the child understand ... but to enthuse them to their innermost core." Our prior work focused on giving our students motivating materials and creating a "Comfort Zone of Proximal Development." Combining this with Montessori methods, we believe we can help all students succeed in Computer Science, some at a slower pace and others exploring more concepts than we previously dreamed possible. We will explore the details of this approach in our (en)lightening talk.	Montessori Methods + A Living Textbook > Traditional CS Instruction (Abstract Only)	NA:NA	2015
Robert R. Lewis	coaster is a project that teaches a semester-long introductory computer graphics class by means of ten programming assignments. The assignments are incremental - each one building on the previous ones - and ultimately require implementation of most of the course content in the final one: a first-person rollercoaster simulation. Briefly described, the assignments (and their course contents) are: circles ("warmup", 2D graphics, applying trigonometry), wire track (3D graphics, parametric curves), wire car (meshes), "hedgehog" car (face and vertex normals), shaded car (lighting models and vertex shaders), shaded track (extrusion, model transforms), surfaces (B√©zier surfaces, height maps), first person (viewing transforms, animation, splines), dynamics (physics-based modeling), and textures (textures, pixel shaders). There is also an eleventh project of the student's own (approved) design. Students are provided with template code for the first ten programming assignments. The languages used are C++ on the CPU and GLSL on the GPU. Students are presumed to have access to OpenGL/GLSL 3.3/3.30 and the GLUT and GLEW libraries. Both undergraduate and graduate students take the class. and it has been presented twice at Washington State University, both times with about half of the students on a remote campus receiving it as a live telecourse. Student response has been very positive. The goal of this lightning talk is to elicit interest from the computer graphics teaching community in making coaster systematically available to other universities by providing source code and training to instructors.	coaster: Teaching Computer Graphics Incrementally (Abstract Only)	NA	2015
Shuchi Grover	Computational Thinking (CT), now widely recognized as a necessary skill for today's generation of learners, is typically being introduced to students in middle and high school (and even at the college level) in the context of programming in visual, block-based, drag-drop environments such as Scratch, Alice, Blockly, Tynker, Agentsheets and Kodu. How well are these first experiences preparing students to apply their learning successfully to future computational experiences, which are likely to be in the context of higher-order, text-based programming languages? How can we teach so as to facilitate successful 'transfer of learning' to future contexts? The art of teaching for transfer, or mediating transfer, has been actively studied for decades in education research. Pedagogies such as 'bridging', 'hugging', and 'preparation for future learning' (PFL) have shown promise in the context of education research in STEM domains at the secondary level. This fun lightning talk will shed light on these very pertinent ideas that CS education will benefit from, and share concrete strategies that can be employed in K-12 and college-level introductory programming classrooms to prepare students for better success with future computational experiences. The broader goal is to get CS educators and researchers thinking about an important aspect of teaching introductory programming and get a conversation started.	Hugging and Bridging: What It Is And Why You Should Be Doing It! (Abstract Only)	NA	2015
Marie Bienkowski	Researchers, practitioners, and policymakers are (in most states) rallying around the Next Generation Science Standards. First released in 2012, the NGSS address the "mile wide, inch deep" science teaching so prevalent in K-12 and instead emphasize disciplinary core ideas, cross-cutting concepts, and practices in science and engineering. The NGSS make a nuanced distinction between science (inquiry) and engineering (design) and include performance standards for engineering design that "literate citizens" are expected to know. Early versions of the NGSS caused kerfluffles in the CS community - "the attention paid to the discipline of computer science does not match its importance in terms of workforce demand." Ignoring calls from industry and academia to promote computer science, the authors relegated it, like statistics, to a supporting role. Putting CS in a supporting role means that it becomes a second-class object of study - a tool for investigating other disciplines - instead of a first-class object that is investigated in terms of disciplinary core ideas. Part of the problem is the lack of widely accepted core ideas that are easily explained. In the course of our work on building assessments for the Exploring Computer Science course (including drawing from the AP CS Principles framework) we have identified a manageable set of core ideas and mapped them to the NGSS engineering design standards. In this talk, I will point to materials we have developed that the community can use to show how computer science can replace engineering in the NGSS to teach practices and meet standards.	Making Computer Science a First-Class Object in the K-12 Next Generation Science Standards (Abstract Only)	NA	2015
David Heise	This lightning talk describes the current effort to create a research group at Lincoln University to conduct Computational Research On Music & Audio (CROMA). A CROMA Team of Interdisciplinary Collaborators (CROMA-TIC) will be assembled to participate in different aspects and applications of computational audio signal processing, drawing from disciplines such as computer science, mathematics, music, psychology, and nursing. This effort is modelled upon the Centre for Interdisciplinary Research in Music Media and Technology (CIRMMT) housed at McGill University, but it will be distinct in its focus on undergraduate research. Further, this research group will be unique among Historically Black Colleges and Universities (HBCUs). A goal of assembling CROMA-TIC and establishing the CROMA-Lab is to inspire participants, especially including minority students, to seek graduate degrees while enriching their undergraduate learning experiences. The initial research aims will focus on sound event separation within musical audio, with the idea that the research conducted by CROMA-TIC will be applicable to a wide array of applications (such as improving the performance of hearing aids in noisy environments or automatic transcription of music recordings, among innumerable possibilities). This effort is just underway; interested faculty and students are invited to attend the presentation and consider participation in CROMA so that it may develop into a truly interdisciplinary, multi-institutional endeavour.	Launching CROMA: Computational Research On Music & Audio	NA	2015
Eric A. Freudenthal:Kien Lim:Karla Carmona:Catherine Tabor	We are infusing inquiry-driven programming activities into algebra and physics courses with the objective of strengthening disciplinary understandings and providing all students a meaningful first experience with programming. The majority of students who complete 9th grade algebra fail to connect its syntactic and graphical representations to concepts related to rate of change. These learning deficits contribute to the well documented failure of high school and college physics courses to effectively convey conceptual understandings of the relationships between force, acceleration, velocity and position. Our programming activities for algebra and physics classrooms focus student attention towards the principles underlying symbolic and graphical representations of slope. Implementations of these inherently multi-disciplinary activities within math, physics, and even computing classes have previously only been successful when instructors have broad content and pedagogical knowledge. For our most recent implementations within physics lab courses led by inexperienced TAs, instructional modules that introduce and explore the lab course's conventional kinematic experiments were developed.	Integrating Programming into Physics and Algebra (Abstract Only)	NA:NA:NA:NA	2015
Samuel A. Rebelsky	Although undergraduate computer science enrollments are again on the upswing, increased enrollments do not seem to have led to increased diversity -- CS, at least in America, remains a field dominated by white males. A variety of evidence shows that many underrepresented groups, such as women and domestic students of color, are often motivated by course work that includes a clear societal benefit. The Humanitarian Free and Open Source Software (HFOSS) approach suggests that working on FOSS projects that have humanitarian benefits provides such motivation. Unfortunately, adding new themes and topics to courses can be difficult. CS2, in particular, often feels packed enough that it's hard to envision adding something else. And, while HFOSS is attractive, it's sometimes hard for the particular needs of a project to help students develop course-specific knowledge (about data structures and algorithms). I've recently experimented with an idea that I call "HFOSS-lite". Rather than students contributing directly to an HFOSS project, they use an HFOSS project as a source of data for their data structures and algorithms. The Ushahidi crowdmapping platform has proven especially useful. Students can contribute data to Ushahidi sites and even build their own sites. The data can be used in a variety of exercises, from simple searching to sorting algorithms in which they use different criteria (not just alphabetical or by time, but also by distance from a location and a variety of hybrid approaches) and beyond. And, because they are using the HFOSS software, they think about societal impact.	HFOSS-Lite in CS2: Incorporating the Ushahidi Crowdmapping Program in a Data Structures and Algorithms Course (Abstract Only)	NA	2015
Dee A.B. Weikle	Peer tutoring has been used in a variety of contexts and a variety of institutions to both improve learning and retention for the classroom students and to improve the confidence and knowledge base of the peer tutor. Much of the current literature focusses on how to implement peer tutoring with a fairly large program, including at least one graduate TA and multiple undergraduates who have recently taken the course. In addition, these peers were trained outside of the normal classroom hours and/or paid to participate. While useful at larger institutions, or at least those with substantial resources, this model is generally unworkable at a smaller institution without funding to pay students, or a sufficient critical mass of students to enable formal training outside of the classroom. This lightning talk describes a slightly different model that involves the university's academic support center staff for tutoring training, class attendance for technical training, and the giving of credit as opposed to payment for the student. To receive more than one hour of credit the student also works closely with the professor to complete one or more "learning modules" that later become resources for the class and provide an additional learning opportunity for the tutor. This method has been used by the author with over 9 peer tutors across a range of 7 classes, with generally good success.	A Peer Tutoring Model for Small Schools with Limited Funding and Resources (Abstract Only)	NA	2015
Douglas Fisher	In Spring 2015, instructors at participating universities and colleges plan to run their Introduction to Database courses using Jennifer Widom's self-paced online course as an optional or required resource. We call the collective of students and instructors who will be moving through Widom's course in relative synchrony, a (loosely) collaborative, distributed open, online course (CDOOC). This way of exploiting a self-paced course allows an organized cohort (e.g., a campus course) to move through at the cohort's "own" pace. If the organized cohort's progress through the self-paced course is open to other learners, outside the a priori organized cohort (as it will be in our case), then this larger population amounts to a MOOC. Because such a MOOC can be convened at anytime, by any instructor, we call it an anytime MOOC.	An Across-Institution Anytime MOOC in Database	NA	2015
Joseph Kendall-Morwick	CS faculty are responsible for educating future software developers and thus have a unique responsibility to combat the problem of sexism within the software development industry. Game development is an important subfield in which to address this problem because of its cultural impact, which extends beyond the developers involved, and its incorporation into pedagogy for the purposes of engagement and retention. The recent #GamerGate controversy has brought to public attention the issue of sexism within a white male-dominated gaming subculture as it enters the cultural mainstream, particularly due to anonymous threats of violence being made against women who have criticized the #GamerGate movement. This controversy is particularly important for CS because it centers on software developers. In addition to harming the targeted women, such threats create a chilling effect that threatens not only to silence important voices within gaming, but also to undermine progress toward gender equality in CS and the recruitment and retention of female CS students. It is important for CS faculty to evaluate their responsibility to students and to the field in light of these concerns. This lightning talk will assess the outcome of a round-table to be held with students at Capital University in which this controversy and its broader implications will be discussed. In particular, the talk will focus on outcomes related to CS education and outreach, with the goal that lessons learned through the round-table can inform the efforts of faculty planning to address such issues at their institutions.	The Need for Voices in CS to Address the #GamerGate Controversy (Abstract Only)	NA	2015
Wen-Jung Hsin	When teaching computer networking courses, over the years, the author has used Java applets and other software tools for illustrating standards, protocols, and networking concepts. Although these Java applets and software tools do perform what they are designed to do, they have their limitations. For example, the Java applets that the author used can only illustrate a fixed set of scenarios, and software tools such as Wireshark need devices to generate traces, posing a problem when the teaching resource is limited. In recent years, our school has joined the Cisco Networking Academy and taught computer networking courses offered through the Academy. Cisco Networking Academy provides a networking software program, Packet Tracer, which allows the users to setup and configure various networks which involve routers, switches, and end devices using various wired and wireless cables and protocols in local area networks or wide area networks. There are several nice features about the Packet Tracer. For example, an instructor can use the Packet Tracer to illustrate networking concepts. A student can use the Packet Tracer to iron out networking design issues by first implementing the network using Packet Tracer before implementing it in a physical lab. Additionally, students can closely examine the header information in each layer of the protocol stack as a packet steps from layer to layer and node to node. In this lightning talk, the author will share the experience of using Packet Trace in teaching computer networking courses.	Learning Computer Networking Through Illustration (Abstract Only)	NA	2015
Helen H. Hu	NA	Session details: Special Session	NA	2015
Helen H. Hu:Clifton Kussmaul:Deepa Muralidhar:Kristine Nagel	POGIL (Process Oriented Guided Inquiry Learning) is based on the principle that students learn more when they construct their own understanding. Instead of attending lecture, student teams work through POGIL activities to discover concepts on their own, while instructors circulate and facilitate learning. Students learn the material better, and this constructivist approach also teaches them important process skills, including critical thinking, team work, and leadership. In this special session, SIGCSE attendees will experience a POGIL activity for themselves, learn about the structure of POGIL activities (through a POGIL meta-activity), and hear perspectives from teachers who recently adopted POGIL activities available at http://cspogil.org. We will share classroom-tested guided inquiry activities and discuss how POGIL can transform CS classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Special Session: Perspectives on Adopting and Facilitating Guided Inquiry Learning	NA:NA:NA:NA	2015
Andreas Stefik	NA	Session details: Special Session	NA	2015
Andreas Stefik:Richard E. Ladner	This special session is for SIGCSE attendees who are interested in K-12 computing education, especially those who have or are planning to have a NSF CS 10K project. A major goal of CS 10K is broadening participation, which includes providing computing education to students with disabilities. This interactive session will introduce attendees to AccessCS10K, a project to help teachers include students with disabilities in their K-12 computing classes. Furthermore, attendees will have a hands-on experience with the Quorum language, a language designed for youth regardless of disability. It is expected that attendees to the special session will be better prepared to include a student with a disability in their computing classes or to help other teachers do the same.	Introduction to AccessCS10K and Accessible Tools for Teaching Programming	NA:NA	2015
Daniel D. Garcia	NA	Session details: Panel Session	NA	2015
Daniel D. Garcia:Wei Ding:Joseph Cohen:Barbara Ericson:Jeff Gray:Dale Reed	The recent successes of Computer Science Education Week and code.org's Hour of Code have meant that more K-12 students than ever are being given an authentic, engaging and eye-opening exposure to the wonders of computer science. There are resources aplenty to help high school and college faculty with outreach. These range from easy-to-learn, open-ended programming environments (Scratch, Alice, Snap!), to online coding challenges (code.org, Lite-bot), to non-computer activities with live performances (CS Unplugged, cs4fn), to having the entire outreach experience delivered "in a box", thanks to NCWIT. We wanted to bring educators together to share experiences with what they've done specifically with a one-day event, given these vast resources. Now that there are so many online coding experiences, it is enough to shuttle young students into a computer room, point their browser at one of these experiences, and answer questions as they come up? Is it important to include hands-on and hands-off (e.g., nifty demos, inspiring talks) components, and if so, in what order? What do different demographics find the most engaging? Is there any chance that we can do "damage", since these highlight-reel experiences might over-simplify how hard some of the problems are, and that not every important result has a flashy payoff? Do some of the early experiences leave students with the impression that computer science is only (say) apps, interactive multimedia programs or solving mazes? Finally, when it's over, what follow-up is appropriate? Participants on the panel will share best practices, common pitfalls, and advice.	One-Day Activities for K-12 Face-to-Face Outreach	NA:NA:NA:NA:NA:NA	2015
Sambit Bhattacharya	NA	Session details: Paper Session: Testing: Student Programming Errors	NA	2015
Amjad Altadmri:Neil C.C. Brown	Previous investigations of student errors have typically focused on samples of hundreds of students at individual institutions. This work uses a year's worth of compilation events from over 250,000 students all over the world, taken from the large Blackbox data set. We analyze the frequency, time-to-fix, and spread of errors among users, showing how these factors inter-relate, in addition to their development over the course of the year. These results can inform the design of courses, textbooks and also tools to target the most frequent (or hardest to fix) errors.	37 Million Compilations: Investigating Novice Programming Mistakes in Large-Scale Student Data	NA:NA	2015
Scott Alexander Turner	Looking Glass (https://github.com/sturner84/LookingGlass) is a library designed to support the testing of students' C++ code through reflection. Instructors can design tests that compile even if there are mismatches between the instructor's and student's code (like misspelled function names or parameters that do not have the expected types). Using the automatically generated metadata, instructors can search for and call functions or methods in the student code, including the main function, while providing feedback (rather than a compile error) if the required code is not found. Although not suitable for all C++ programs, Looking Glass was designed to support instructors in introductory and intermediate classes and to be transparent to the students.	Looking Glass: A C++ Library for Testing Student Programs through Reflection	NA	2015
Zalia Shams:Stephen H. Edwards	Many educators currently use code coverage metrics to assess student-written software tests. While test adequacy criteria such as statement or branch coverage can also be used to measure the thoroughness of a test suite, they have limitations. Coverage metrics assess what percentage of code has been exercised, but do not depend on whether a test suite adequately checks that the expected behavior is achieved. This paper evaluates checked coverage, an alternative measure of test thoroughness aimed at overcoming this limitation, along with object branch coverage, a structure code coverage metric that has received little discussion in educational assessment. Checked coverage works backwards from behavioral assertions in test cases, measuring the dynamic slice of the executed code that actually influences the outcome of each assertion. Object branch coverage (OBC) is a stronger coverage criterion similar to weak variants of modified condition/decision coverage. We experimentally compare checked coverage and OBC against statement coverage, branch coverage, mutation analysis, and all-pairs testing to evaluate which is the best predictor of how likely a test suite is to detect naturally occurring defects. While checked coverage outperformed other coverage measures in our experiment, followed closely by OBC, both were only weakly correlated with a test suite's ability to detect naturally occurring defects produced by students in the final versions of their programs. Still, OBC appears to be an improved and practical alternative to existing statement and branch coverage measures, while achieving nearly the same benefits as checked coverage.	Checked Coverage and Object Branch Coverage: New Alternatives for Assessing Student-Written Tests	NA:NA	2015
Joseph Kendall-Morwick	NA	Session details: Paper Session: Focus on K-12: Elementary	NA	2015
Linda Seiter	This paper presents an assessment designed to measure computational thinking skills of fourth grade students. The students in two public schools were given a set of Scratch programming challenges. The SOLO taxonomy was used to classify student programming responses based on the degree of understanding of the problem structure. The majority of fourth grade students from one school demonstrated the ability to synchronize the costume and motion of a single character sprite, as well as synchronize a basic conversation between multiple sprites. However, they struggled to integrate motion and costume changes into a multi-sprite conversation. The majority of fourth grade students from the second school, where reading and math comprehension scores fall below the state minimum requirements for proficiency, were unable to demonstrate a basic understanding of the programming tasks. The results suggest that fourth grade students who read at grade level are capable of understanding the relationships between multiple concerns within a single script, along with synchronizing a single concern across multiple scripts, but are challenged when synchronizing multiple concerns across multiple scripts.	Using SOLO to Classify the Programming Responses of Primary Grade Students	NA	2015
Charlotte Hill:Hilary A. Dwyer:Tim Martinez:Danielle Harlow:Diana Franklin	The recent renaissance in early computer science education has provided K-12 teachers with multiple options for introducing children to computer science. However, tools for teaching programming for children with wide-scale adoption have been targeted mostly at pre-readers or middle school and higher grade-levels. This leaves a gap for 4th -- 6th grade students, who differ developmentally from older and younger students. In this paper, we investigate block-based programming languages targeted at elementary and middle school students and demonstrate a gap in existing programming languages appropriate for 4th -- 6th grade classrooms. We analyze the benefits of Scratch, ScratchJr, and Blockly for students and curriculum developers. We describe the design principles we created based on our experiences using block-based programming in 4th -- 6th grade classrooms, and introduce LaPlaya, a language and development environment designed specifically for children in the gap between grades K-3 and middle school students.	Floors and Flexibility: Designing a Programming Environment for 4th-6th Grade Classrooms	NA:NA:NA:NA:NA	2015
Diana Franklin:Charlotte Hill:Hilary Dwyer:Ashley Iveland:Alexandria Killian:Danielle Harlow	The recent growth of interest in computer science has created a movement to more readily introduce computer science in K-12 classrooms. However, little research exists on how to successfully bring computer science to lower grade levels. In this paper, we present advice for researchers and curriculum developers who are getting started working with computer science in elementary schools. Specifically, we focus on practical tips for studies of this nature, developed from our experiences piloting a computational thinking curriculum with 4th-6th grade students. We address issues arising in elementary school classrooms such as recruiting and interfacing with teachers and schools, classroom management strategies, student computer literacy and developmental stages, and curriculum life cycles.	Getting Started in Teaching and Researching Computer Science in the Elementary Classroom	NA:NA:NA:NA:NA:NA	2015
Evan Barba	NA	Session details: Paper Session: Non-majors/Interdisciplinary	NA	2015
Victor T. Norman:Joel C. Adams	At our comprehensive liberal arts college, we offer a 2-credit hour CS1 course for engineering majors that includes all of the standard learning objectives of a typical 4-credit hour course. To help the students learn the course material in this compressed time frame, we switched our programming language from C++ to Python, and we replaced weekly homework assignments with labs and online problem sets. All other factors in the course were unchanged, including instructor, course and weekly learning objectives, tests, grading criteria, pedagogical style, and even textbook (the textbook came in two versions -- a C++ version and a Python version). This transition offered a unique opportunity to observe, compare, and measure student learning outcomes across the two semesters. Our measured results show a moderate but statistically significantly improvement from the semester using C++ and homework assignments to the semester using Python and online problem sets.	Improving Non-CS Major Performance in CS1	NA:NA	2015
Douglas Baldwin	Proponents of "flipped" instruction offer a vision of class meetings devoted to active learning, in exchange for students spending time outside of class acquiring basic knowledge from readings or video lectures. The price paid for this vision is the need to create the readings or videos. However, such materials are becoming available as open educational resources, and if they become widely enough available it may be possible to flip classes without requiring each instructor to develop his or her own materials. In the spring of 2014 I flipped an introductory programming course for non-computing majors in an effort to see if freely available video lectures could support it. This paper reports my findings, notably that open resources can support such a course, but just barely.	Can We "Flip" Non-Major Programming Courses Yet?	NA	2015
Clem O'Donnell:Jim Buckley:Abdulhussain Mahdi:John Nelson:Michael English	The ubiquitous nature of software has resulted in many non-computer-science (NCS) major students taking courses in computer programming. The appeal of learning computer programming for this cohort may be diminished, given that they do not usually have an initial desire to become expert programmers. This, coupled with the difficulty of learning computer programming, means that efforts to heighten their engagement with/learning of, programming skills are required. Paired programming is an approach that has been hypothesized as increasing computer science students' attendance and performance. The study presented here reports on a controlled study investigating the impact of a pair-programming approach to teaching computer programming to NCS majors. The results indicate that pair programming has a positive impact on student attendance, particularly for weaker students. While a comparison of the paired programming cohort and a traditional lab cohort is not statistically significant with respect to performance, there are definite trends which suggest that pair programming may increase the number of weaker students that succeed in the programming module. These trends are re-enforced by qualitative feedback from the participants.	Evaluating Pair-Programming for Non-Computer Science Major Students	NA:NA:NA:NA:NA	2015
Christine Moore	NA	Session details: Paper Session: Focus on K-12: Outreach/Summer Camps	NA	2015
Allison Saupp√©:Daniel Szafir:Chien-Ming Huang:Bilge Mutlu	This paper details the creation of a two-day computer science and robotics outreach course aimed at simultaneously engaging youth (children, ages 9-14) and senior (their grandparents, ages 55+) students. Our goal is to encourage enthusiasm for science and technology in students of all ages as well as provide practical instruction regarding common computer science concepts, including variables, loops, and boolean logic. To this end, we ground our course in the emerging field of social robotics, which enables the design of several multidisciplinary hands-on activities for students. We report on a four-year experience in the development of our course, which has been offered twelve times and involved over 210 youth and senior students. Our work presents a discussion regarding the challenges in designing a course for students from diverse ages, guidelines for creating similar courses, and a reflection on how we might improve our own class. The activities and project code developed for our course are available online as open-source resources.	From 9 to 90: Engaging Learners of All Ages	NA:NA:NA:NA	2015
Chulakorn Aritajati:Mary Beth Rosson:Joslenne Pena:Dana Cinque:Ana Segura	In this paper, we describe the first phase of a longitudinal study focusing on young people's attitudes towards computing careers and their computational self-efficacy. Using summer camps as a springboard to pique their interests, we are interested in enhancing their knowledge in computing topics and assessing their views through surveys. Working from the findings of this first phase in the project, we discuss our future plans for an online community learning system that is grounded in a socio-cognitive learning process, and intended to engage young people in continuous engagement with and exposure to computing concepts and skills.	A Socio-Cognitive Analysis of Summer Camp Outcomes and Experiences	NA:NA:NA:NA:NA	2015
Courtney Starrett:Marguerite Doman:Chlotia Garrison:Merry Sleigh	Computing, together with jewelry design and 3D printing offers an innovative introduction to the possibilities of technology and programming. This combination was presented to participants of a weeklong summer technology day camp focusing on computer-aided design (CAD) using jewelry design and modeling. The participants then saw their design creations built through 3D printing. In this paper we present the design of a weeklong day camp called "Computing and Jewelry Design". Initial findings are positive and suggest opportunities for improvement.	Computational Bead Design: A Pilot Summer Camp in Computer Aided Design and 3D Printing for Middle School Girls	NA:NA:NA:NA	2015
Orit Hazzan	NA	Session details: Special Session	NA	2015
Orit Hazzan:Clifford A. Shaffer	Recent years have seen the emergence of applications and concepts that rely on the involvement of the general public (the "crowd") and, consequently, create big data (e.g., MOOCs, search engines, crowdsourcing, crowdfunding, citizen/crowd science, and more). Education in particular is changing dramatically with the use of online resources and courses that generate large streams of data. In this special session, we ask: What research questions in computer science education can be explored using big data? And how can computer science education researchers apply big data analysis to support education in other disciplines? To answer these and related questions, we focus in this special interactive session on how computer science education research can be promoted by integrating big data into the research process.	Big Data in Computer Science Education Research	NA:NA	2015
Owen Astrachan	NA	Session details: Special Session	NA	2015
Owen Astrachan:Ralph Morelli:Gail Chapman:Jeff Gray	NA	Scaling High School Computer Science: Exploring Computer Science and Computer Science Principles	NA:NA:NA:NA	2015
Janet Burge	NA	Session details: Panel Session	NA	2015
Janet Burge:Armando Fox:Dan Grossman:Gerald Roth:Joe Warren	NA	SPOCs: What, Why, and How	NA:NA:NA:NA:NA	2015
Daniel D. Garcia	NA	Session details: Panel Session	NA	2015
Daniel D. Garcia:Eric Allatta:Manuel P√©rez-Qui√±ones:Jeff Solin	The pace of technology for use in computing education is staggering. In the last five years, the following technologies have completely transformed our teaching: Piazza, Google Docs, PandaGrader (now GradeScope), YouTube, Doodle, Skype, Google Hangout, Khan Academy, etc. Hardware has also played a part; we love our Zoom H2 digital voice recorder (for CD-quality lecture audio), Blue Yeti USB mike (for audio / videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of the Technology that Educators of Computing Hail (TECH) Birds-Of-a-Feather session that we've held at SIGCSE for seven years. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top", what problems they solve, and why they are so valuable. Like concert musicians, presenters will give live demonstrations and reveal the particular configuration options required to make their technology "sing". We hope this forum will allow the chance to dive deeply into the common use cases of these technologies, and explain how others can adopt them at their institutions.	Technology We Can't Live Without!	NA:NA:NA:NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Joseph B. Wiggins:Kristy Elizabeth Boyer:Alok Baikadi:Aysu Ezen-Can:Joseph F. Grafsgaard:Eun Young Ha:James C. Lester:Christopher M. Mitchell:Eric N. Wiebe	Introductory computer science courses cultivate the next generation of computer scientists. The impressions students take away from these courses are crucial, setting the tone for the rest of the students' computer science education. It is known that students struggle with many concepts central to computer science, struggles that could be alleviated in part through hands-on practice and individualized instruction. However, even the best existing instructional practices do not facilitate individualized hands-on support for students at large. We have built JavaTutor, an intelligent tutoring system for introductory computer science, which works alongside students to support them through both cognitive (skills and knowledge) and affective (emotion-based) feedback. JavaTutor aims to make advances in interactive, scalable student support. JavaTutor's behaviors were developed within a novel framework that leverages machine learning to acquire tutorial strategies from data collected within tutorial sessions between novice students and experienced human tutors. This demo presents an overview of the data-driven development of JavaTutor and shows how JavaTutor assesses and responds to students' contextualized needs. It is hoped that JavaTutor will help to usher in a new generation of tutorial systems for computer science education that adapt to individual students based not only on incoming student knowledge, but on a broad range of other student characteristics.	JavaTutor: An Intelligent Tutoring System that Adapts to Cognitive and Affective States during Computer Programming	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Eileen Fordham:Halley Freger:Amanda Hinchman-Dominguez:Alexander Mitchell:Daniel Rebelsky:Victoria Tsou:Earnest Wheeler:Zoe Wolter:Samuel A. Rebelsky	MIST, the Mathematical Image Synthesis Toolkit, is an open-source, Web-based graphics application in which students develop skills in computational thinking and deepen their understanding of mathematical functions through creative play in making images. Using a drag-and-drop interface, students build functions that describe animated abstract images. These functions combine a few basic images (e.g., a horizontal blend, a vertical blend, and a time-based blend) using mathematical operators whose semantics are based on corresponding points in each image (e.g., MIST includes models for adding and multiplying colors). Students develop a variety of skills in computational thinking by using the small set of images and operations to develop complex images, not only images that the system challenges them to make but also images that they find themselves inspired to create and even images that their peers challenge them to build. MIST also incorporates a community of artists/learners. Images created in MIST are available to other MIST users to comment on and remix (provided the designer permits reuse). MIST community members may also create challenges for other community members and can curate "galleries" of images they find particularly engaging, interesting, or even useful as challenges for others. Users can also share their images via Facebook or "tweet" their recent creations. We find that this additional community further encourages students to develop new and interesting images.	MIST, The Mathematical Image Synthesis Toolkit	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
John Cigas	NA	Session details: Paper Session: Teaching Practices	NA	2015
Janet Burge	There has been significant interest in MOOCs, both inside and outside the educational community. Some of this interest focuses on how they could be used to replace traditional brick-and-mortar education while others are interested in using them to supplement more traditional courses. Instructors can also use MOOCs to gain new insight into teaching and learning by taking on a student perspective. This paper describes how taking several MOOCs has given me a better understanding of student motivation, time commitment issues, and student perception of grading and describes how I am feeding this knowledge back into my own courses.	Insights into Teaching and Learning: Reflections on MOOC Experiences	NA	2015
Lecia Barker:Christopher Lynnly Hovey:Jane Gruning	Despite widespread development, research, and dissemination of teaching and curricular practices that improve student retention and learning, faculty often do not adopt them. This paper describes the first findings of a two-part study to improve understanding of adoption of teaching practices and curriculum by computer science faculty. The paper closes with recommendations for designers and developers of teaching innovations hoping to increase their chance of adoption.	What Influences CS Faculty to Adopt Teaching Practices?	NA:NA:NA	2015
Dirk Grunwald:Elizabeth Boese:Rhonda Hoenigman:Andy Sayler:Judith Stafford	Fostering an effective learning environment in large classes is a challenge: instructors and teaching assistants are stretched thin across many students, students often lack opportunities for personal interaction with course staff, and the size of the classes makes them seem impersonal. Furthermore, students in large classes can often find solutions to their labs and assignments online or copy them from other students, diminishing their impetus to learn and raising plagiarism concerns. This paper describes our experience and evaluation of an assessment method that resolves many of these problems and appears to scale to large classes of 600+ students. Using this method, students are evaluated via a combination of automatic grading mechanisms (or clear objective rubrics) and a 1-on-1 "grading interview". The grading interview serves to ensure the provenance of the student's work product and their depth of understanding. This change allows us to make more effective use of peer-instruction and pair-programming in our courses. It also provides the ability to re-use assignments, the insurance of timely feedback to students, and the opportunity for individualized staff attention. This paper describes variations on this method across numerous classes over the past seven years, some of the goals of this method, modifications and adaptations of the method over time, and the student experience of using this method based on survey feedback.	Personalized Attention @ Scale: Talk Isn't Cheap, But It's Effective	NA:NA:NA:NA:NA	2015
Adrian German	NA	Session details: Paper Session: Focus on K-12: Miscellaneous topics	NA	2015
Emmanuel Schanzer:Kathi Fisler:Shriram Krishnamurthi:Matthias Felleisen	Many educators have tried to leverage computing or programming to help improve students' achievement in mathematics. However, several hopes of performance gains---particularly in algebra---have come up short. In part, these efforts fail to align the computing and mathematical concepts at the level of detail typically required to achieve transfer of learning. This paper describes Bootstrap, an early-programming curriculum that is designed to teach key algebra topics as students build their own videogames. We discuss the curriculum, explain how it aligns with algebra, and present initial data showing student performance gains on standard algebra problems after completing Bootstrap.	Transferring Skills at Solving Word Problems from Computing to Algebra Through Bootstrap	NA:NA:NA:NA	2015
Philip Sheridan Buffum:Eleni V. Lobene:Megan Hardy Frankosky:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Knowledge assessment instruments, or tests, are commonly created by faculty in classroom settings to measure student knowledge and skill. Another crucial role for assessment instruments is in gauging student learning in response to a computer science education research project, or intervention. In an increasingly interdisciplinary landscape, it is crucial to validate knowledge assessment instruments, yet developing and validating these tests for computer science poses substantial challenges. This paper presents a seven-step approach to designing, iteratively refining, and validating knowledge assessment instruments designed not to assign grades but to measure the efficacy or promise of novel interventions. We also detail how this seven-step process is being instantiated within a three-year project to implement a game-based learning environment for middle school computer science. This paper serves as a practical guide for adapting widely accepted psychometric practices to the development and validation of computer science knowledge assessments to support research.	A Practical Guide to Developing and Validating Computer Science Knowledge Assessments with Application to Middle School	NA:NA:NA:NA:NA:NA	2015
Alan Cleary:Lucas Vandenbergh:John Peterson	In this paper we present our experiences using a novel programming style, reactive programming, to deliver a summer camp for students in grades 8 through 12. This software uses a declarative programming approach to allow students without a background in computing to explore a wide variety of subject material within a 3D virtual environment, including computer science, mathematics, physics, and art. This work is based on PyFRP, a reactive programming library written in Python. We describe our camp experience and provide examples of how this style of programming supports a wide variety of educational activities.	Reactive Game Engine Programming for STEM Outreach	NA:NA:NA	2015
Rachelle Hippler	NA	Session details: Paper Session: Computers & Society	NA	2015
Mikko Apiola:Jarkko Suhonen:Abbi Nangawe:Erkki Sutinen	Sub-Saharan Africa (SSA) needs to transform from an information society that consumes information technologies into a knowledge economy that creates technologies. Key domains for transformation include computer science education, research and development. The lack of research culture and support for research activities often results in low research outcomes, and slows down the development of innovative and independent thinkers and problem solvers. To increase research capacities, we have launched a doctoral level computer science research training program between the College of Business Education (CBE), Dar es Salaam, Tanzania, and the University of Eastern Finland (UEF), School of Computing. This paper discusses the preliminary experiences of planning and setting up that program.	Building CS Research Capacity in sub-Saharan Africa by Implementing a Doctoral Training Program	NA:NA:NA:NA	2015
Jennifer Burg:V. Pa√∫l Pauca:William Turkett:Errin Fulp:Samuel S. Cho:Peter Santago:Daniel Ca√±as:H. Donald Gage	This paper describes a new program for attracting non-traditional students into computer science and retaining them through sustained peer and faculty mentoring. The program is centered on socially-inspired learning, - learning in and for a community. It consists of a STEM Incubator course, hands-on projects with real-world applications, a sandbox lab, and a mentoring system that begins in the STEM Incubator course and continues with students who choose to remain involved in projects and courses. Our program is in its second year. Data collected on enrollment and retention and results of student questionnaires show promise for the success and sustainability of the program.	Engaging Non-Traditional Students in Computer Science through Socially-Inspired Learning and Sustained Mentoring	NA:NA:NA:NA:NA:NA:NA:NA	2015
Grace Ngai:Stephen C.F. Chan	Service learning has been gaining attention in recent years. It has been established as an effective method to teach students a variety of concepts that are not easily taught in the classroom, and much effort has gone into making service learning accessible and relevant to computer science students. This paper investigates a popular mode of computing-related service learning -- offshore projects that seek to introduce information and computing technologies (ICTs) into a beneficiary population. Based on multiple years of experience working with ICTs in service learning, the authors examine the impact on students and beneficiaries through several critical questions, and draw conclusions and recommendations on good practices for designing offshore service learning projects for computing students.	How much impact can be made in a week?: Designing Effective International Service Learning Projects for Computing	NA:NA	2015
Faisal Kaleem	NA	Session details: Paper Session: Beyond CS2: Networking/Security	NA	2015
Joel Sommers	Developing systems-level networking software to implement switches, routers, and middleboxes is challenging, rewarding, and arguably an essential component for developing a deep understanding of modern computer networks. Unfortunately, existing techniques for building networked system software use low-level and error-prone tools and languages, making this task inaccessible for many undergraduates. Moreover, working at such a low-level of abstraction complicates debugging and testing and can make assessment difficult for instructors and TAs. We describe a Python-based environment called Switchyard that is designed to facilitate student projects for building and testing software-based network devices like switches, routers, and middleboxes. Switchyard exposes a networking abstraction similar to a \textit{raw socket}, which allows a developer to receive and send Ethernet frames on specific network ports, and provides a set of classes to simplify parsing and construction of packets and packet headers. Systems-level software created using Switchyard can be deployed on a standard Linux host or in an emulated environment like Mininet. Perhaps most importantly, Switchyard provides facilities for test-driven development by transparently allowing the underlying network to be replaced with a test harness that is specifically designed to help students through the development and debugging process. We describe experiences with using Switchyard in an undergraduate networking course in which students created an Ethernet learning switch, a fully functional IPv4 router, a firewall with rate limiter, and a deep-packet inspection middlebox device.	Lowering the Barrier to Systems-level Networking Projects	NA	2015
Maxim Timchenko:David Starobinski	In recent years cybersecurity has gained prominence as a field of expertise and the relevant practical skills are in high demand. To reduce the cost and amount of dedicated hardware required to set up a cybersecurity lab to teach those skills, several virtualization and outsourcing approaches were developed but the resulting setup has often increased in total complexity, hampering adoption. In this paper we present a very simple (and therefore highly scalable) setup that incorporates state-of-the-art industry tools. We also describe a structured set of lab assignments developed for this setup that build one on top of the other to cover the material of a semester-long Cybersecurity course taught at Boston University. We explore alternative lab architectures, discuss other existing sets of lab assignments and present some ideas for further improvement.	A Simple Laboratory Environment for Real-World Offensive Security Education	NA:NA	2015
Keunhong Lee:Joongi Kim:Sue Moon	We present the KENSv2 (KAIST Educational Network System) framework for network protocol implementation. The framework is event-driven to guarantee deterministic behaviour and reproducibility, which in turn delivers ease of debugging and evaluation. Our framework consists of four components: the event generator, the virtual host, the TCP driver and the IP driver. The two drivers are what students have to implement, and we offer to the students the drivers in the binary format for paired testing and debugging. We have developed a test suite that covers three categories of test cases: specification, paired, and logic tests. The framework logs packet transmissions in the PCAP format to allow use of widely available packet analysis tools to inspect logical behaviour of student solutions, such as congestion control. We have designed five step-by-step assignments and evaluated student submissions. With our automated test suite, we have cut down the number of TAs by half for the doubled class size compared to the previous semester, in total 3 TAs with 49 students. We plan to continue using KENSv2 in our undergraduate networking course and expand the test suite.	An Educational Networking Framework for Full Layer Implementation and Testing	NA:NA:NA	2015
Nafeesa Dewji	NA	Session details: Special Session	NA	2015
Nafeesa Dewji:Steven A. Wolfman:Geoffrey L. Herman:Leo Porter:Cynthia Taylor:Jan Vahrenhold	This session is a chance for researchers studying concept inventories (CIs)--low-cost assessments highlighting student misconceptions in a field--and CS education practitioners to communicate about advances in concept inventories in an engaging and utterly ridiculous way. We use a "quiz show" format to present CI items from various authors' work across the computing curriculum. On each question, audience members and volunteer contestants consider their own response and guess students' common responses. Then, they see how authentic student data illustrate the misconceptions these items probe. The session's goal is three-fold: educate practitioners about recent results in concept inventory research that may suggest surprising trends in student learning, popularize concept inventories as a tool in research and practice, and collect the audience's expert responses to concept inventory items.	The CS Concept Inventory Quiz Show	NA:NA:NA:NA:NA:NA	2015
Katie Apone	NA	Session details: Panel Session	NA	2015
Katie Apone:Marina Bers:Karen Brennan:Diana Franklin:Maya Israel:Pat Yongpradit	As awareness of computer science education grows in the general public, it is important to showcase computer science education as accessible for all grades K-12 and beyond. As panelists present the projects and research they've been conducting, we will highlight three overarching topics: The importance of K-5 computer science education to educators of all grade levels, Thoughts on why K-5 has traditionally been less prominent in the computer science education landscape, and Strategies on how we, the computer science education community, can promote K-5 computer science education as worthwhile as 6-12+ computer science education. Barriers to why K-5 computer science education is not as prominent as that in grades 6-12, such as scarcity of wide-spread curriculum or scarcity of research, will lead to panelists presenting how their work is rectifying this imbalance. This session's panelists are pioneers and important thought leaders in the K-5 computer science education field. Panelists in this session are either producing research in the K-5 computer science education field or working at a large scale to promote or increase participation of K-5 students in computer science.	Bringing Grades K-5 to the Mainstream of Computer Science Education	NA:NA:NA:NA:NA:NA	2015
Nick Parlante	NA	Session details: Special Session	NA	2015
Nick Parlante:Julie Zelenski:Peter-Michael Osera:Marty Stepp:Mark Sherriff:Luther Tychonievich:Ryan Layer:Suzanne J. Matthews:Allison Obourn:David R. Raymond:Josh Hug:Stuart Reges	A great CS assignment is a delight to all, but the path to one can be most roundabout. Many CS students have had their characters built up on assignments that worked better as an idea than as an actual assignment. Assignments are hard to come up with, yet they are the key to student learning. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials -- handouts, data files, starter code -- that make each assignment ready to adopt. The Nifty Assignments home page, http://nifty.stanford.edu, gathers all the assignments and makes them and their support materials freely available. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments. See the nifty.stanford.edu home page for more information.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Sarah J. Wille:Dae Kim	Little research exists on factors that affect high school computer science student engagement. The BASICS Study (Barriers and Supports to Implementing Computer Science) brings rigor to this issue by building on instruments developed to measure implementation and factors affecting implementation of math and science programs, and customizing them for use with Exploring Computer Science (ECS). One goal of the 2-¬Ω year BASICS Study is to provide the computer science education community with tools to systematically and rigorously measure computer science program implementation components, like student engagement. Aligning efforts in computer science around data collection and description can support the collective effort to grow and sustain computing education. This poster reports on BASICS Study Year 1 findings about factors related to student engagement in ECS classes. The sample includes 232 students from eight public high schools in Chicago and Washington, DC. Student questionnaire data collected focused on: 1) Student engagement, 2) Teacher instruction, 3) Student attitudes, and 4) Other student characteristics, such as grade, gender, race/ethnicity, and previous computing experience. Analyses included multi-factor confirmatory factor analysis to examine the validity of the measures, and multiple linear regression analysis to estimate the effects of teacher instruction and student attitudes on engagement. Results indicate teacher instruction significantly positively affects student engagement in ECS classes. Some student attitude variables are also significantly related to student engagement, but there was no significant variation in engagement across gender or race/ethnicity categories.	Factors Affecting High School Student Engagement in Introductory Computer Science Classes (Abstract Only)	NA:NA	2015
Daniel W. Lewis:Lisa Kohne:Timothy Mechlinski:Mariana Schmalstig	This poster presents preliminary data in the field of computing education research, focusing on the relationship between high school student participation in Exploring Computer Science (ECS) and their achievement on the math portion of the California Standard Test (CST). The course uses an inquiry-based approach that is expected to improve students' problem solving skills. Students who enrolled in ECS at ten high schools in San Jose, California were monitored over a three-year period to investigate possible relationships between participation in ECS and scores on standardized math tests. Results show a statistically significant difference between ECS participants and their peers for two of three project years.	Exploring Computer Science Course and Math Achievement (Abstract Only)	NA:NA:NA:NA	2015
Karen H. Jin:Gavin Kearns	Programmable robots have become a very popular tool to introduce children to technology. However most curricula that emphasize on actual programming typically target kids 10 years and older. This summer, the University of New Hampshire organized an Elementary Program Introducing Computing (EPIC) camp. Children 7-9 years old, with no prior programming experience, were introduced to problem solving and creative program design using Lego EV3 Mindstorms robotics. The program followed a just enough principle, such that just barely enough contents were presented to the children in spite of a wider ranger of available materials. For example, a simple robot model was prebuilt to help children focus on programming rather than construction; program control flow and sensor data processing were introduced early on, but only using a very limited set of visual programming blocks and sensors. These basic structure blocks provide enough functionality to construct a moderately complex program, and help students stay focused on problem solving in a non-overwhelming setting. In order to gauge the learning outcome, a test was given before and after the camp. The comparison of the results showed that our method helped the children retain the programming skills and knowledge of general concepts of computing.	Just Enough Programming for Eight-years Olds (Abstract Only)	NA:NA	2015
Lori Carter:Tim Little:Claire Mathews	The use of computation alongside the natural sciences is moving research forward at unprecedented rates. Computational scientists are in high demand, and the undergraduate level is a great place to begin training students for work in this area. Furthermore, studies have shown that applied programs such as computational science are attractive to students and aid in retention. Yet, the number of undergraduate computational science programs remains very limited. Throughout informal conversations with colleagues who were interested in combining computing and science, we repeatedly heard 2 reasons why a computational science program was missing from their institution: 1) they lacked counterparts in the natural sciences who were interested in working with them and 2) their department couldn't support the change in personnel or curriculum that they thought was required to introduce and maintain a computational science program. Addressing the first concern, this poster displays some of what was learned from interviews with 20 natural scientists regarding how they currently or might work with a computational counterpart. Our hope is that this information might be used in conversations with reluctant natural scientists. Addressing the second concern, this poster summarizes the content of computational science programs that currently exist for undergraduates, including majors, minors, computational tracks in science majors or science tracks in computational majors, and science or computational courses with complementary material. Our hope is that this summary will encourage colleagues that, given such variety, there is a place for some form of computational science at their institution.	Moving Ahead with Undergraduate Computational Science Programs (Abstract Only)	NA:NA:NA	2015
Yesem Kurt-Peker:Lydia Ray:Rania Hodhod:Shamim Khan	Computational thinking is an essential skill for everyone in today's world. It is a problem solving skill that incorporates problem decomposition, pattern recognition, abstraction, logical and algorithmic thinking. Yet the exposure of students in K-12 curriculum to computational thinking is minimal in most schools. There are various opportunities for computational thinking to be included in almost all content areas in the curriculum. In order for this to be realized, teachers need introduction to the concept of computational thinking and they need to be equipped with tools to provide practices in this concept in the classrooms. Inspired by this idea, we organized a workshop in June 2014 to involve all teachers from all grade levels and all disciplines where we introduced them to the concept of computational thinking and taught them tools such as Scratch, Google Sites, HTML, and AppInventor. The workshop attracted 34 teachers mostly from the Muscogee County School District in Georgia. In this poster we present our recruitment strategy, methodology of our workshop, and results from our pre and post surveys. In particular, we present the influence of our workshop on teachers' views of computational thinking. We also share highlights from the projects that the teachers worked on during the workshop and presented at the end.	Computing in the Classroom: A Workshop for Teachers to Infuse Computational Thinking into K-12 Classrooms (Abstract Only)	NA:NA:NA:NA	2015
Helen H. Hu	As part of the new AAC&U TIDES initiative (TIDES: Teaching to Increase Diversity and Equity in STEM), Westminster College has created a new computer science course for non-majors and paired it with a biology course as a first-year Learning Community. The new CS0 course relies heavily on culturally sensitive POGIL activities to be welcoming of all students, shifting to a more equitable, multicultural approach to CS curriculum and instruction. Process Oriented Guided Inquiry Learning (POGIL) is a student-centered learning approach that 1) assigns students to work in self-managed learning teams, 2) on specially designed guided inquiry materials, 3) while the instructor facilitates the development of process skills [1]. By requiring students to derive CS concepts for themselves while working together in learning teams, POGIL activities allow diverse student voices to be heard. They also provide a framework for instructors to act as "guides on the side" rather than "sage on the stage" for a large portion of class time. These CS Principles POGIL activities are among the first POGIL activities in any discipline to be deliberately designed to be culturally sensitive. In Fall 2015, CS instructors at four partner institutions will adopt these POGIL activities in their CS0 courses.	Using POGIL Activities to Teach CS Principles to Diverse Students (Abstract Only)	NA	2015
Jeff Gray:Mary Boehm:Carol Crawford:Jeff Baker:Gina McCarley:Kitty Morgan:Kelley Rouze:Jill Westerlund:Carol Yarbrough	This poster describes our experience with the convening of a statewide committee of Mathematics and Computer Science teachers and content specialists to compare the content of the AP Computer Science A Course (AP CS A) and the Computer Science Principles (CSP) course with the Alabama Course of Study-Mathematics. The purpose of the comparison was to identify overlaps in content and to make recommendations to the State Department of Education and the State Board of Education regarding the option of awarding mathematics credit for completion of the Computer Science courses. This crosswalk activity led to the December 2013 decision by the Alabama State Department of Education (ALSDE) to count both CS Principles and CS A as courses satisfying the four-course requirement for high school graduation in Alabama. The poster will describe the crosswalk activity, the results, and the specific strategic approach to involve the ALSDE as collaborators in the activity.	A Case Study on Adding Computer Science as a Math Graduation Elective: A Report from the Alabama CS/Mathematics Crosswalk Committee (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Jake Trower:Jeff Gray	Introducing programming concepts to children early in their education can be beneficial because the type of problem solving that encompasses computational thinking is becoming increasingly relevant in our daily lives. A relatively new breed of programming environments has emerged to address this need. Visual programming languages (VPLs) allow programming logic to be represented with diagrams that illustrate its execution flow. Popular VPLs (e.g., Scratch, Snap, Alice, App Inventor) exist as full-featured, stand-alone programming environments with diagrammatic representations of the program instructions. This representation removes the syntactical barrier to entry that may exist with textual languages. Blockly, developed by Google, is a type of block language development kit that allows the rapid construction of new block-based visual programming languages to address a specific pedagogical or content focus. This poster provides a brief tutorial on the steps used to create a new Blockly environment, along with two case studies demonstrating the power of Blockly. The two environments introduced are focused on the manipulation of images via operations on pixels (Pixly), and programmatic control of a Sphero robot (Spherly). The construction and specific details of these two environments are described and illustrated with html, xml, and Javascript code examples and some of their potential applications. More information about Pixly and Spherly can be found at: http://outreach.cs.ua.edu/pixly and http://outreach.cs.ua.edu/spherly	Creating New Languages in Blockly: Two Case Studies in Media Computation and Robotics (Abstract Only)	NA:NA	2015
Sarah Heckman:Jason King:Michael Winters	Ideally, software engineering courses should adequately reflect real-world software development so that students obtain a better understanding and experience with practices and techniques used in industry. Our objective is to improve software engineering courses by incorporating best practices for automated software engineering and facilitating rapid feedback for students using an open source continuous integration framework for evaluating student software development. The open source Jenkins Continuous Integration Server is the core of our framework, which provides a consistent environment for building student projects, executing automated test cases, calculating code coverage, executing static analysis, and generating reports for students. By using continuous integration, a common tool in real-world software development, we can incorporate software engineering best practices, introduce students to continuous integration in practice, and provide formative feedback to students throughout the software development lifecycle. We found that 76% or more of students in each of the classes that deploy our framework reported that using Jenkins increased their productivity, and that 84% or more of students in each of the classes reported that using Jenkins increased their code quality.	Automating Software Engineering Best Practices Using an Open Source Continuous Integration Framework (Abstract Only)	NA:NA:NA	2015
Ariel Ortiz	When dealing with the topic of back-end programming many CS web development courses typically focus on how to use a popular web framework, for example Spring MVC or Ruby on Rails. The problem with this approach is that students will most likely end up using some other different framework or technology if ever they decide to become professional web developers. Our students need to learn concepts and skills that serve as a foundation to learn whatever different technologies are used now or happen to appear in the future. This poster presents the author's experience on using a bottom-up approach to teach the fundamental aspects of how the HTTP protocol works, and how this knowledge can be used to get a deep understanding of the inner workings of the web by building a simple yet complete server-side web framework. Using Node.js as the development platform, students are able to take TCP sockets as the building blocks for higher-level web abstractions. This approach allows covering a variety of specific topics that are essential for a professional web developer: request and response structure and headers, HTTP methods, form processing, cookies and sessions, text encodings, MVC software architectural pattern, database integration using ORM (Object-Relational Mapping), REST (Representational State Transfer) architecture, security issues (HTTPS protocol, common web vulnerabilities), and client-side integration using AJAX (Asynchronous JavaScript and XML). Anecdotal evidence shows that students with this knowledge repertoire are better suited for learning, using and debugging new and existing web technologies.	A Bottom-Up Approach to Teaching Server-Side Web Development Skills (Abstract Only)	NA	2015
David Weintrop:Uri Wilensky:Jennifer Roscoe:Daniel Law	This poster presents an environment and set of pedagogical strategies designed to explore how best to use blocks-based programming tools to prepare learners for future, text-based programming languages. Starting with the snap! programming environment, we added the capability to view the JavaScript equivalent of any blocks-based script authored inside the environment. Additionally, when students define behaviors for new blocks, they do so in JavaScript. This makes it possible to compose blocks-based scripts alongside text-based JavaScript programs and have the two run side-by-side. This environment was used during the first 5-weeks of an introductory programming class at the high school level as part of a quasi-experimental study investigating the relationship between programming modality and emerging student understanding. Teachers of the course used the blocks/text hybrid features in various ways to support learners developing an understanding of programming concepts and laying the foundation for future text-based instruction. These strategies included having students compose programs with graphical blocks then view the equivalent JavaScript, prompting class discussion on similarities and differences between the two modalities; having students write pseudocode for their blocks-based programs before comparing the pseudocode to the JavaScript; and finally, having students implement their algorithm directly in JavaScript, using blocks as a resource to reference proper syntax.	Teaching Text-based Programming in a Blocks-based World (Abstract Only)	NA:NA:NA:NA	2015
Sonal Dekhane:Kristine Nagel:Nannette Napier	This project addresses the issue of retaining women in Information Technology (IT) at an open access institution. To meet the goal of retention, we focused on supporting students' learning and mentoring needs. Female IT majors and minors were recruited and participated in a weeklong summer boot camp. At the boot camp they participated in Java programming sessions, various professional development and peer mentoring sessions and a field trip. These activities were aimed to increase not only the participants' knowledge of programming, but they were also designed to increase the participants' confidence, their knowledge of IT careers and fields of research and most importantly to form a community of support. Initial data collection shows that 61% of participants enrolled in a programming course following the boot camp, which is a crucial step in retention of majors and minors. Authors have also experienced an increase in the participants' engagement in an on-campus community building effort. Formal data analysis of pre and post surveys for evaluating changes in computing attitudes and engagement is currently being performed.	Summer Programming Boot Camp: A Strategy For Retaining Women In IT (Abstract Only)	NA:NA:NA	2015
Jennifer Albert:Barry Peddycord III:Tiffany Barnes	In this poster, we describe efforts to assess computational thinking activities that can be easily implemented in any science classroom. Studies have shown that a set of conditions must be met for computational thinking tools to be used in K-12 education and that when they are used, there is a wide spectrum in the level of computational thinking that the tool enables. This study extends this work by examining how middle school students translated their science fair projects into Scratch and what evidence of computational thinking is present. Scrape, a tool designed to analyze Scratch projects was used. Overall, it was found that most students simply created a presentation of their project without much complexity. Eight students created interactive projects that required user participation and used more advanced computational concepts. Finally, recommendations are given for next steps in the creation of a series of activities that would scaffold student learning as they apply to computational thinking concepts of a science concept.	Evaluating Scratch Programs to Assess Computational Thinking in a Science Lesson (Abstract Only)	NA:NA:NA	2015
Evelyn Brannock:Robert Lutz:Mai Yin Tsoi	Literature has estimated that about 33% of students who start a computer science degree program eventually drop or fail their first programming course. With the decreasing number of college graduates entering the computing industry, the workforce is missing out on the wealth and breadth of innate student ability and skills that are switching to non-STEM fields. This project developed, implemented and researched the effects of an innovative instructional strategy that integrated cutting-edge devices into an intermediate programming curriculum. Assignments were designed with the Java Software Ddevelopment Kkit for Java to strengthen student motivation and engagement by tapping into their creativity, collaborative skills, and critical thinking by using the InterAxon Muse, Oculus Rift, and the LeapMotion devices. Preliminary data indicates that although students may have enough motivation and interest in programming to persevere through the course, the implementation of this teaching methodology positively impacted their views and beliefs about programming skills and their relevance to their education. As well, survey data shows that student self-efficacy increased immediately after this educational intervention. Finally, instructor reflections point to a general shift in class morale and engagement with the inclusion of the assignments where students were required to solve problems without documentation. Future implications are also presented in this poster.	Integrating Cutting Edge Devices to Increase Student Retention in Programming (Abstract Only)	NA:NA:NA	2015
Jean H. French:D. Brian Larkins	This poster describes the operation and implementation of the E-Assess web-based program assessment tool. The E-Assess tool provides a centralized management system for generalized program assessment and has been used to support ABET program assessment within the CS/IS department at Coastal Carolina University for the past two years. This system defines multiple roles for several different assessment activities -- allowing individual faculty to operate independently, yet still providing an always up-to-date view of the process to assessment coordinators. Coordinators provide mappings between overall program objectives and specific measurement points across the curriculum. At the conclusion of a class, the instructor enters the assessment measures specific to the course. When all course data has been added, the E-Assess system automatically compiles the overall assessment data into summary reports that are used to evaluate program progress and to inform the continuous improvement process.	E-Assess: A Web-Based Tool for Coordinating and Managing Program Assessment (Abstract Only)	NA:NA	2015
E. Kent Palmer:Terry Linkletter:Paulette Alexander:Patricia L. Roden:Kewal Dhariwal:Indira R. Guzman	In the Fall of 2013, the Institute for Certification of Computing Professionals (ICCP) appointed the authors of this paper to the CS2013 Assessment Council. This council created a standardized exam to assess computer programs and identify areas of the curriculum that a school needed to strengthen to meet CS2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science. The existing Major Field Test for Computer Science from Educational Testing Service does not provide schools with sufficient guidance to determine what aspects of their computer programs are strong and what aspects need to be strengthened to meet the CS 2013 guidelines. The ICCP exam covers the Core Tier 1 Knowledge Units (KU). CS 2013 indicates that all computer programs should teach these KUs. The ICCP exam selects questions in proportion to the number of hours the CS2013 guidelines indicate are necessary to teach the Core Tier 1 learning objectives for a KU. Choices for multiple choice questions were limited to three per question, since research indicated that student mastery of topics could be assessed more rapidly with fewer distractors without reducing reliability. The exam was alpha tested in 2014 and beta tested in January and February 2015. The exam will be available in Spring of 2015.	CS2013 Assessment Exam (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Sarah Hug:Jane Krauss:Catherine Ashcraft	Counselors for Computing leverages the National Center for Women & Information Technology (NCWIT)'s organizational membership, applies evidence-based approaches for professional development, and monitors and adjusts practices to make inroads into CS education through K12 counselor engagement. This engagement is needed to assure more girls and other underrepresented people are prepared for careers in computing. Colleges and universities, businesses, youth-serving organizations, computer science educators, professional counselor associations and others work to bring C4C to places where reform is underway (e.g., CS Principles, CS10K, Exploring Computer Science initiatives). These new education and teaching initiatives have implications for K12 student computer science guidance, and C4C materials can provide the knowledge necessary to promote counselor and educator engagement with computing. In this poster presentation, the authors: a) illustrate how computer science educators have partnered with NCWIT and incorporated counselor education into multiple elements of their own work, b) direct K12 computer science educators and stakeholders to free resources developed for C4C, c) provide initial evidence of the program's effectiveness, and d) develop future partnerships with poster viewers at SIGCSE 2015 to educate K12 counselors about the opportunities available for their students in the computing fields.	Case Studies of Use: Creating Counselor Champions for Change in K12 Computing Education (Abstract Only)	NA:NA:NA	2015
Amit Maor	Undergraduate computer science students can have difficulty understanding quicksort and other divide-and-conquer sorting algorithms. It is important to understand how students think about quicksort in order to find out how to better teach the students, and also for those students to be able to write and analyze these algorithms for their own use. Data was collected from two interviews, each about an hour long, with undergraduate computer science students. The data was then qualitatively analyzed in order to draw conclusions on how the students approached the coding of the quicksort algorithm. Both interview participants were able to quickly and efficiently write quicksort using linked lists. However, both students struggled when asked to rewrite their algorithms using static arrays. From the transcripts and hand-written notes taken from the two interviews, it seems plausible that their issues stem from challenges with their treatment of the pivot in the array implementation. Additionally, the array implementation may have caused the participants to change the visualization of the algorithm to which they had grown accustomed, further accentuating their difficulties. While both students showed obvious proficiency with the linked-list algorithm, they failed to realize key intuitions when attempting to make their algorithms space-efficient by using a single array. Future work may include analysis of other divide-and-conquer algorithms, as well as a closer look into how visualizations of sorting algorithms affect student understanding.	A Qualitative Analysis of Students' Difficulties with the Quicksort Algorithm Using Arrays (Abstract Only)	NA	2015
Brittany Ann Kos:Elizabeth Sims	The STEM Career Infographic Project (SCIP) was a 4-week exploratory project deployed in an 8th grade classroom at Mountain Vista Middle School (MVMS). SCIP was poised to address the growing focus on STEM fields at MVMS and within the school district. We piloted SCIP in Spring 2014 with six science classes or about 180 students. SCIP allowed for students to explore their own STEM interests, while simultaneously engaging in the 6 Computational Thinking Practices (CTP) outlined by the College Board. Students were required to research a STEM career in-depth, then report on their careers using infographics (CTP #2: Creating Computational Artifacts and CTP #3: Abstracting). We used free and online programs to create the infographics; this provided the students the opportunity to learn software they were not previously exposed to and to explore new communication tools (CTP #1: Connecting Computing and CTP #2: Analyzing Problems and Artifacts). SCIP also provided many occasions for the students to work together by sharing career information or helping each other with the software (CTP #6: Collaborating). At the end of the project the students presented their infographics in front of the class and taught their classmates about their career (CTP #5: Communicating). The project was incredibly successful. The students had a positive affect through the duration of the project and many also expressed an extreme level of interest in doing similar projects in the future. We will be repeating this project in Spring 2015, with a few adaptations and formal evaluation scheme.	STEM Ccareers Inforgaphic Project (SCIP): Teaching Media-Based Computational Thinking Practices (Abstract Only)	NA:NA	2015
Elodie Fourquet	In early 2014 I created and taught an introductory CS course for non-CS students at Mount Holyoke College. I chose to emphasize algorithmic thinking as a way of solving problems on and off the computer, so I needed concrete and appealing problems for the students to solve. Having the students create their own problems was my way of doing so. Based on a one week introduction to visual design, each student designed the image or animation that they would later program. As they did so outside class, the students and I collaborated in class solving the problems of implementing a design I had chosen: solving design problems of their own overlapped with algorithmic solution of implementation problems in class. Subsequently, they applied the classroom lessons to their own designs. The result was a collection of programmed images and animations the students were eager to show their families and friends. The dual nature of their practice appealed to the students: they were motivated to do the course-work; they took ownership of their work and of skills they acquired; they formed a cohesive community working together in the lab. Modeling on the classroom work in which they participated was effective in building programming skills. Most important several students expressed unprompted interest in taking a follow-on course.	Algorithmic Thinking: Program that Solve Well-defined Visual Problems (Abstract Only)	NA	2015
Catherine Ashcraft	Girls and women continue to be underrepresented in computing, and this results in costly consequences for U.S. innovation and productivity; it also reproduces existing socioeconomic inequities, especially for women of color. This poster session will provide an in-depth look into Compugirls, a culturally responsive technology enrichment program for girls in under-resourced districts. The program ultimately enables girls to design technologies to address social inequities and foster social justice. Girls participate in three courses over the course of a year: 1) learning to use technologies such as iMovie, GarageBand, and iPhoto, 2) designing games with SCRATCH, and 3) programming "builds" in a virtual world environment. Throughout all three courses, the girls engage in a research project that connects the technologies they are learning to social justice issues they choose to address in their communities. The poster will also present findings from our three-year, NSF supported mixed-method study of the program. In particular, the session will illustrate how the girls developed their identities and abilities as technosocial change agents. The session also identifies conditions that, at times, limited the power of these possibilities and will report on key "lessons learned" in developing large-scale, sustainable computing programs.	Culturally Responsive Computing: An In-depth Examination of Outcomes in COMPUGIRLS (Abstract Only)	NA	2015
Emily Stansbury	This research found that some students conflate Python lists and dictionaries. This confusion could result from the visual similarity between the data-structures in Python print output. The goal of this research was to identify student's misconceptions about Python dictionaries. The data was collected in one-on-one, think-aloud interviews with two participants. When coding, one student treated her dictionary as if it were a literal list of two-element lists and could be accessed as such. Additionally, when asked to draw a visualization of dictionaries, she drew a representation that was identical to Python print output. It is likely that the output she is used to dealing with has shaped this visualization. This may be an example of negative transfer, where people transfer knowledge to a new setting and form an incorrect model. Based upon this research, educators should consider how print output can shape incorrect mental models, as well as emphasize the differences between lists and dictionaries.	Students' (Mis)Understanding of Dictionaries (Abstract Only)	NA	2015
Samuel A. Rebelsky	Student projects play a central role in the CS curriculum and are can be used everywhere, from low-level courses to upper-level capstones. Projects help students tie together ideas from their courses and put them in a "tangible" form for which they can feel a sense of pride. Projects also provide a clear way for students to show off their work to others. When we talk about student projects, we often focus on the functionality of the project: "Build something that does this." The modern Web suggests that software (or at least Web-based software) is often defined by more than a core computational task; in addition to the core functionality, modern Web software situates that core functionality in a broader "ecosystem" that often includes (a) a community of users that share ideas and comment on each others' work; (b) ways to link the software to and from social media sites, such as Facebook and Twitter; and (c) analytic tools to understand how people use the software; and more. I report on an experiment in which I asked students to expand their Web software project (an online drawing application) into a broader ecosystem. The extension from core functionality to broader ecosystem helped students think about different issues in computing, encouraged students to find aspects that most interested them (e.g., some liked analytics, some liked building the functionality, some liked thinking about how to create communities, and some liked designing and testing the interface), and made students think more carefully about their responsibilities as software builders.	It's Not Just About Functionality Anymore: Expanding Student Projects with Web Ecosystems (Abstract Only)	NA	2015
Gabriela T. Richard:Yasmin B. Kafai	We describe a workshop for high school youth to create interactive responsive and wearable interfaces for computing and gaming. The tools used in the workshop included tangible construction toolkits (the Lilypad Arduino and the MaKeyMaKey) and visual programming languages (Scratch, a coding and game design environment, and ModKit, a visual programming kit for Arduino devices and similar tangible kits) in addition to various conductive materials such as special fabric and aluminum foil. Past efforts with each of these toolkits have focused on interaction in one direction. This workshop focused on creating bidirectional tangible interfaces for gaming, meaning that interaction would happen on the screen and in the physical artifact or controller simultaneously. A further feature was the focus on creating wearable games. Thirteen students ages 13-15 years participated in the eight-session workshop. After learning the tools during the first four sessions, they started designing their own projects. Student teams created one bidirectional game with a textile interface, three inventive uni-directional wearable games and interfaces, and one half-completed design. Students felt that the workshop provided them with multiple entry points to computing, by capitalizing on different skill sets, and many expressed understanding bidirectional design, though they felt they needed more time. This poster will discuss the affordances and constraints of the workshop activities and toolkits, and how projects created relate to the students' understanding of tangible computing with different kinds of responsiveness. Finally, we offer recommendations for future workshops based on our own redesign of activities.	"Maker Innovators": A Workshop for Youth Creating Responsive and Wearable Game Interfaces with Tangible and Digital Construction Toolkits (Abstract Only)	NA:NA	2015
Zachary MacHardy:Daniel D. Garcia	Now finding footing in objective research methodology, MOOCs have made significant strides toward developing into mature platforms for not only offering educational materials but also performing exploratory analysis of educational methods. Bayesian Knowledge Tracing (BKT) has been repeatedly shown to be successful at providing an accurate model of student knowledge in more traditional classroom settings, and recent research has explored the application of BKT to MOOCs with promising results. Using data from several MOOCs run by Stanford university, we propose to extend earlier research into the application of BKT to MOOCS by developing a framework within which the use of course resources and student performance can be leveraged both to increase the predictive accuracy of BKT modeling and to provide an evaluative metric for the utility of those resources. We hope that such a framework can contribute not only to MOOC courses, but traditional classrooms as well.	Using Big Data and BKT to Evaluate Course Resources (Abstract Only)	NA:NA	2015
Mark E. Hoffman	Students frequently use a whiteboard to individually demonstrate understanding or interactively develop understanding in groups. The practice is employed to develop content knowledge; however, an opportunity to intentionally develop communication skills is overlooked. On the other hand, instructors carefully integrate instructional organization and communication to maximize student content learning. Taken together, this presents an opportunity for students to intentionally improve their communication skills in the service of content learning. This poster details a "work in progress" project where students follow organizational guidelines for written homework and board-writing to facilitate in-class, problem solution presentation. Problem solution presentations occur during one class period each week. Students are given colored pencils for written homework and colored markers for board-writing. Student work including written homework and board-writing was gathered from the 2013 and 2014 iterations of a sophomore-level computer architecture course. Preliminary analysis of student work shows that students either adopt the guidelines from the start or learn to use them through feedback and practice. On the semester-end survey, students report that adopting guidelines for written homework, board-writing, and color scheme improve presentation, and board-writing improves student learning. Future work includes gathering data from more students including recorded student presentations, developing quantitative scores to analyze student work, and developing measures of student learning.	Student Board-Writing to Integrate Communication Skills and Content to Enhance Student Learning (Abstract Only)	NA	2015
Cara Tang:Cindy S. Tucker:Elizabeth K. Hawthorne	As directed by the ACM Education Board, the ACM Committee for Computing Education in Community Colleges (CCECC) delivered the final version of its curricular guidance for associate-degree Information Technology (IT) programs. The guidance, An ACM Competency Model of Core Learning Outcomes and Assessment for Associate-Degree Curriculum in Information Technology, includes core IT learning outcomes with associated assessment metrics. Examples of degree and certificate programs that align with the ACM core IT learning outcomes are part of a growing repository at CAPspace.org. These correlations demonstrate the adaptability of this competency-based curriculum approach to a variety of computing courses, certificates, and degree programs. The CCECC invites institutions to highlight their IT degree and certificate programs by submitting correlations at capspace.org/correlation/ using an easy-to-use web form.	Correlating ACM Core IT Learning Outcomes with Associate Degree and Certificate Programs (Abstract Only)	NA:NA:NA	2015
Chris Johnson:Peter Bui	Madeup is a programming language for making things up. Its speakers walk paths through space to generate printable 3D models. The language is designed to teach computation from a tangible, first-person perspective and help students integrate computation back into the physical world. Madeup is inspired largely by Seymour Papert, whose goal was to provide learners objects to think with. Madeup joins a significant crowd of existing introductory teaching tools. What sets Madeup apart from many of these other projects is its physical product. The model that a programmer creates does not remain virtual. It can be printed, felt, carried in a pocket, and handed to a parent or friend - all of which may make computation more real and relevant in the eyes of the programmer. In this poster we demonstrate the language and how we have used it in outreach with local schools and libraries.	Madeup: A Language for Making Things Up (Abstract Only)	NA:NA	2015
Alisa Neeman:Michael Snider:Allen Hudson	In this poster we present a new approach to teaching ethics in a Network Security Programming course. Ethics is a crucial component of any network security course. As students learn to protect network services, they necessarily learn to attack network services, disguise their identities, et cetera. While a few colleges have gone as far as giving students background checks before teaching hacking skills, some simple new tactics can motivate students to employ their skills legally and ethically. These tactics lead students to discover what is ethical for themselves, rather than being told what is or is not ethical.	Student Discovery of Network Security Ethics (Abstract Only)	NA:NA:NA	2015
Carsten Kleiner:Felix Heine:Bastian Fischer	Automated assessment of computer programs submitted by students serves two main purposes: it may be used to increase grading efficiency and process optimization in large courses on one hand. On the other hand, if integrated properly into a suitable learning context, it may also improve student learning by supporting tutoring capabilities. Both aspects have been important in developing aSQLg, an automated grader for SQL statements ([1]). Unfortunately aSQLg so far only supports SQL queries. In order to provide a comprehensive efficiency and tutoring tool for SQL an extension to statements of the data manipulation (DML) and data definition language (DDL) is required. On this poster we present concepts for auto-grading of the most important DML and DDL statements as well as ideas on how to integrate those into the existing aSQLg grader.	Extending SQL Auto-Grading to DML and DDL Statements (Abstract Only)	NA:NA:NA	2015
Swaroop Joshi:Neelam Soundarajan:Rajiv Ramnath	Conflict and cooperation would seem to be ideas that are diametrically opposed to each other. But, in fact, classic work by Piaget on how children and adults learn shows that when learners engage with peers in critical discussion of ideas concerning which they have different understandings, that contributes very effectively to learners developing deep understanding of the concepts involved. At the same time, getting students in undergraduate computing (or other technical/engineering) courses to engage with other students in thoughtful discussion of important concepts is very challenging. It can be especially difficult to get women students and students from other underrepresented groups to participate effectively in such discussions. In our work, we exploit the affordances of mobile and web technologies to address these challenges. Our approach not only helps address these challenges, it has a number of other important advantages over face-to-face discussions. We present the theoretical underpinnings of the approach, some details of our prototype implementation, preliminary results from the use of the prototype in a junior/senior level class on Software Engineering, and the design for the next version of our tool. We also discuss the possibilities and usefulness of applying this approach in a range of computing courses from traditional classrooms to MOOCs.	Conflict-Driven Cooperative-Learning in Computing Courses (Abstract Only)	NA:NA:NA	2015
R. Mitchell Parry	Students increasingly decide to go to college in order to get better jobs and make more money. However, these advantages are typically thwarted if a student fails to graduate. Although much research has been aimed at predicting college performance using data collected before entering college, this preliminary work focuses on how college-level data could be used to inform student decision making. This work acquired historical class grades, test scores, and degree information for all students who have taken any computer science classes at Appalachian State University. This poster presents a web application that allows users to explore these data by selecting a target activity such as a class, and filtering students based on test scores, degrees, or how they have performed in other classes. The application displays overlaid histograms comparing how students in the subset perform relative to the class as a whole. For example, when a student considers retaking a course they may find it useful to know how other students with similar grades have performed in the major. For example, among the 29 attempts by 22 students with a 'C' in discrete math and CS 1, only 10 earned the required 'C' in CS 2 (35%) and 12 failed the course (41%). Three of these students went on to graduate with a degree in computer science (14%) and six in computer information systems (27%) while five did not graduate from Appalachian (23%).	A Nearest Neighbors Analysis of Student Academic Performance in Computer Science (Abstract Only)	NA	2015
Xiaohong Yuan:Kelvin S. Bryant:Kenneth Williams:Jinsheng Xu	The poster describes our project of integrating mobile computing and security into the Computer Science program at North Carolina A&T State University. Twelve (12) course modules in mobile computing and security are being developed and integrated into existing Computer Science courses such as computer programming, software development, operating systems, and information assurance courses. Each course module includes learning objectives, a tutorial, presentation slides, hands-on labs and/or case studies, test questions, etc. The course module material we develop and our teaching experiences will be beneficial to computer science educators who are considering including mobile computing and mobile security into their curricula.	Integrating Mobile Computing and Security into a Computer Science Curriculum (Abstract Only)	NA:NA:NA:NA	2015
Ama Nyame-Mensah	This poster explores the differential effects of formal undergraduate research experiences on the graduate degree intentions of underrepresented racial-ethnic minority and racial majority computing majors. Across two studies, it was found that formal undergraduate research experiences in computing have a greater and more positive effect on the educational aspirations of underrepresented racial-ethnic minorities as compared to racial majorities. For underrepresented racial-ethnic minorities, this effect is manifested in the gains in academic and career self-efficacy and gains in knowledge about the graduate admission process they develop as a result of their formal research experience. Together, these findings suggest that psychosocial skills that are strengthened during formal undergraduate research experiences play an important role in influencing the educational intentions of underrepresented racial-ethnic minorities in the field of computer science.	The Effects of Formal Undergraduate Research Experiences on Student Aspirations for Graduate Study in Computer Science (Abstract Only): Explaining the Relative Influence of Racial Identity Status	NA	2015
Louise Ann Lyon:Jill Denner:Jacob Martinez	Latinos are the fastest growing ethnic minority group in the US but are underrepresented in computer science. To increase the numbers of Latinos, we need learning environments that excite them about becoming a computer scientist starting in elementary school. This poster describes CSteach, an afterschool program that aims to move Latino/a students along the path to becoming a computer scientist by fostering capacities, identities, and relationships starting in 5th grade. It is the first known effort to integrate CS and social justice in elementary schools, and it builds off examples of "computing for the social good" in college (Goldweber et al., 2011). The poster includes a description of the curriculum, and research findings from over 200 5th graders and 13 high school "near peer" educators. It includes a list of tested strategies for how to introduce CS and social justice concepts in a developmentally appropriate way to 5th graders, and how to integrate those concepts to increase motivation and understanding. The poster also describes how to establish an effective "near peer" component in a K-12 CS program by selecting high school students who are from the community, excited about computers and want to teach, and also providing them with ongoing training and support. Screenshots of the students' Scratch projects show how they used CS to address a social justice issue at their school. And graphs provide a visual description of the pre-post survey data that were collected. This includes changes in students' knowledge of CS, attitudes toward CS, interest in pursuing CS, and their understanding of how computing can be used to address needs in their community.	CSteach: Engaging Latino/a Youth in Computer Science with Social Justice and Near Peers (Abstract Only)	NA:NA:NA	2015
Sagar Raina:Blair Taylor:Siddharth Kaza	Learning interventions based on modules are common in computer science education. Traditional learning modules that present a large amount of content in a linear format can induce cognitive overload in learners. We present theoretical support for increasing the effectiveness of learning modules, describe a system that implements these principles, and discuss the results of a pilot study across two sections of CS0. Using the Security Injections @Towson cybersecurity modules that target key secure coding concepts including integer error, buffer overflow, input validation, for CS0, CS1, and CS2, we enhanced select modules by incorporating the e-learning design principles of segmentation and interactivity. The pilot study compares student engagement and knowledge of software security and secure coding between the current (1.0) modules and the enhanced (2.0) modules. The use of the enhanced 2.0 modules significantly increased both secure coding and software security knowledge. In addition, student engagement increased and feedback from instructors indicates higher student and instructor interest. This project is partially supported by NSF through grant DUE-1241738	Security Injections 2.0: Using Segmentation, Instant-feedback, and Auto-grading to Enhance Secure Coding Modules for Lower-level Programming Courses (Abstract Only)	NA:NA:NA	2015
Guatam Mohan:Benjamin Rempel:Eli Rosenberg:David Wurtele:Cynthia Taylor:Kevin Webb	Concept Inventories (CIs) are short, multiple-choice exams that evaluate a student's understanding of core concepts of a particular course. CIs are especially useful for evaluating the effects of pedagogical techniques and interventions on student learning, as their focus on core concepts means any student should be able to answer the questions, and their use as a pre- and post-test allows them to measure student learning gains. However, CI development requires significant overhead: the current state of the art calls for an intensive, six step process. As a result, there are few CIs available for Computer Science, despite their effectiveness.  Our research is devoted to solving this problem by implementing an online platform for developing, deploying, and evaluating concept inventories. This open-source software will support any number of collaborators in following the process to develop a CI, including identifying concepts, interviewing both domain experts and students, developing and deploying surveys on concepts, and developing multiple-choice CI questions. Additionally, the tool will be able to manage, administer, and iteratively improve CIs after they are created, including allowing instructors to deploy the CI to their classes, and to compare their results with others who have used the CI. This work is part of a larger project, in which it will be used to develop a CI for CS2.	Conceptum: An Online Infrastructure for Concept Inventories (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Kenneth Fox:William Mongan:Jeffrey Popyack	Educating STEM students in the techniques of massively parallel computing anticipates a growing current and future need for scientists, engineers, and analysts who are facile with Big Data. Using very low cost hardware (Raspberry Pi) and free software (Hadoop) we are exposing students to distributed computing while limiting expense. We anticipate that micro-cluster labs and projects will give students hands on experience necessary so they can be prepared to use these methods in real world applications. A series of lessons and projects were developed to teach Hadoop and MapReduce, and were extended into STAR (Students Tackling Advanced Research) summer competitive research projects.	Raspberry HadooPI: A Low-Cost, Hands-On Laboratory in Big Data and Analytics (Abstract Only)	NA:NA:NA	2015
David Pritchard:Sandy Graham:Troy Vasiga	Computer Science Circles (http://cscircles.cemc.uwaterloo.ca) is a website that teaches Python for beginners, presented at SIGCSE 2013. It includes lessons, automatically-graded exercises, examples and visualizations. One purpose of the website is outreach with real human interaction: anyone who is stuck solving an exercise can privately send a question to the "CS Circles Assistant" (the author and two colleagues). As part of this poster, we will show some information about the 2500 student questions we have answered through this system, e.g. the questions where students most often reach out for help. We will also provide feedback from teachers using the site with their own classes. The website was open-sourced in August 2013 thanks to a SIGCSE Special Projects grant, bringing it in line with the great open-source components used to create it. One unique outcome of this open licensing is installing a site mirror in a correctional institute. The website was originally launched in English and French. Since then, we have worked with CS institutes from other countries: versions in German and Dutch have been released, with other translations under way. The poster will highlight some tools and caveats involved in this process. Users of the site submit their solutions for online auto-grading, with about 500000 exercises now completed. This has yielded a large amount of data about the frequency of different error messages. We will include a chart of the most common errors, and an illustration of how we used this to generate clickable hints to give better beginner-level explanations for the most common errors.	The State of CS Circles: Open Source and Outreach with an Introductory Python Website (Abstract Only)	NA:NA:NA	2015
David S. Touretzky	The Pascaline was the first working mechanical calculator, created in 1642 by the French polymath Blaise Pascal. Over the next two decades Pascal built 40 of these machines, of which nine survive today. Several good web resources describe the Pascaline, but to properly appreciate the sautoir, Pascal's kinetic energy solution to jam-free ripple carry, building a working replica is invaluable. Thanks to the growing availability of rapid prototyping tools, it has become relatively easy for CS educators to fabricate physical artifacts to help students explore computational ideas. I've created a Pascaline kit using laser-cut acrylic and standard fasteners that can be assembled with just a screwdriver, pliers, and Loctite. High school or college students with minimal skills can put it together in a few hours and have a functioning calculator. Exploring the Pascaline's design is an engaging way to connect a milestone in the early history of computing with more modern theoretical concepts. Students can investigate questions such as: What makes a device "digital"? (Slide rules have numeric scales but are analog devices.) How does nonlinearity produce discrete states in a continuous world? How are nonlinearities induced in the Pascaline vs. in digital electronics? How do the logic design concepts "half adder" and "full adder" map onto the components of the Pascaline? Is the Pascaline really adding, or merely counting? How does the Pascaline use nines complement arithmetic to perform subtraction, and why isn't it tens complement? The Pascaline kit, designed in SolidWorks, is open source and available at http://www.cs.cmu.edu/~dst/Pascaline.	Building the Pascaline: Digital Computing Like It's 1642 (Abstract Only)	NA	2015
Wu He:Ashish Kshirsagar:Alexander Nwala:Yaohang Li	Teaching information security courses is technically challenging. In an information security course, students and instructors often end up struggling in low-level and complicated software installation, system setup, service configuration, command operations, and data manipulation while losing concentration in learning the important information security principles. To help students in information security courses learn information security principles more effectively and efficiently, we used the workflow technology to create scenario-based workflows in order to improve the effectiveness of teaching and learning of several key information security principles and techniques. Two case studies simulating real-life scenarios, including one for an online banking system and one for an online grading system, are recreated within a laboratory setting using workflow technology and are then presented in information security classes. Our educational practice shows that the benefits of using workflow technology in information security education have been well received by students.	Using Workflow Technology to Create Scenario-based Workflows for Information Security Education: Scenario-based Workflows (Abstract Only)	NA:NA:NA:NA	2015
Hai Hong:Jennifer Wang:Jason Ravitz:Mo-Yun Lei Fong	Increasing women's participation in Computer Science (CS) is a critical workforce and equity concern. The technology industry has committed to reversing negative trends for women in CS, engineering, and related fields. Building on previous research, we surveyed 1,739 high school students and recent college graduates to understand factors influencing decisions to pursue CS-related college degrees. Results indicate social encouragement, career perception, academic exposure, and self perception are the leading factors for women, while the influence of these factors is different for men. These factors are actionable, and understanding differences in their influence on men and women will inform our approaches to achieving gender parity in tech.	Gender Differences in High School Students' Decisions to Study Computer Science and Related Fields (Abstract Only)	NA:NA:NA:NA	2015
Nicholas Senske	This poster describes an ongoing five-year assessment of a new introductory programming course for architecture students at the University of North Carolina at Charlotte. The goal of this course is to teach the fundamentals of computing with an emphasis on their relation to design and aesthetics. Many of the students struggle with the material, as they typically come into the course with no prior programming experience. To improve class performance, the author turned to instructional methods developed for Media Computation, which have been successfully used to teach introductory programming to non-major students for more than a decade. Our data suggest that the same methods -- media-based contextual content, pair programming, and peer instruction -- can have positive effects for students taking an introductory programming course taught by and for disciplines other than computer science. Compared to the first version of the course, which used traditional labs and lectures, the second iteration of the course, updated with the three instructional methods from Media Computation, resulted in higher student retention and an increase in student interest in computing topics. These improvements have remained consistent over the past three years. The data implies that research-based practices from computer science education can be used to improve computing education in other domains.	Learning from What Works: Improving an Introductory Computing Course for Architects with Teaching Methods from Media Computation (Abstract Only)	NA	2015
Zachary Kurmas:Jack Rosenhauer	We present MIPSUnit, a unit test framework for MIPS assembly. MIPSUnit's primary benefit is that it reduces the time needed to grade assembly language assignments. It also provides a time-efficient means for providing students additional testing experience. (We believe that students should be exposed to testing throughout the curriculum --- including their Computer Organization and/or Assembly Language courses.) MIPSUnit is a suite of two tools: MUnit, which allows users to test their assembly code with JUnit tests, and MSpec, which uses RSpec-style unit tests	MIPSUnit: A Unit Testing Framework for MIPS Assembly (Abstract Only)	NA:NA	2015
Yuting Zhang:Xin Shan:Yingyuan Zhang:Juejie Wang	CPU scheduling is one of the most important topics discussed in Operating Systems (OS) courses. In recent years, CPU scheduling for multiprocessor and real-time systems has become more and more essential as those systems can be found everywhere. While these topics should be introduced in OS courses, they are much harder to understand than simple uniprocessor scheduling algorithms due to the complexity involved. Particularly in introductory OS courses, only a couple of lectures can be used to cover these topics. To help students understand these complex topics more easily, we introduce a web-based simulator for learning multiprocessor real-time scheduling that is easy-to-use and self-explanatory. With this simulator, students can get visualized step-by-step instructions of how the algorithms work. They can also run the simulators interactively, and explore the algorithms in an empirical setting. The initial feedback from our students indicates that the tool is very useful in learning these complex algorithms. A demo will be shown in the poster session.	A Web-based Simulator for Learning Multiprocessor Real-time Scheduling (Abstract Only)	NA:NA:NA:NA	2015
Ying Zhu:G. Scott Owen	We present a set of online materials that teach debugging skills in college level computer graphics courses. Almost all the computer graphics textbooks use OpenGL and OpenGL Shading Language (GLSL). Most of the college level computer graphics courses are also taught using OpenGL/GLSL. Most students find OpenGL/GLSL programming very challenging. One of the reasons is that debugging is particularly difficult for computer graphics programming because many traditional debugging techniques can no longer be used. Debugging graphics programs requires a good understanding of OpenGL's error reporting mechanisms and different debugging techniques. Students also need to learn special GPU debugging tools. However, debugging is rarely covered in computer graphics textbooks and courses. Online resources on debugging OpenGL/GLSL programs are also scarce. To address this issue, we have developed online materials that teach students how to systematically debug shader-based OpenGL programs. This web site [1] provides error classification, debugging techniques, a list of common bugs, description of the OpenGL error reporting mechanisms, description of GPU debugging tools, symptom checker, code samples, and tutorials. This online resource fills an important gap in the current computer graphics curriculum. Students can use it to learn OpenGL/GLSL debugging skills. Instructors can use it as a supplement to their existing teaching materials.	Teaching Debugging Skills in Shader-Based Computer Graphics Programming (Abstract Only)	NA:NA	2015
Eileen Fordham:Halley Freger:Amanda Hinchman-Dominguez:Alexander Mitchell:Daniel Rebelsky:Victoria Tsou:Earnest Wheeler:Zoe Wolter:Samuel A. Rebelsky	Consider the following scenario: A student is browsing Facebook and sees a strangely compelling image on her friend's page. She follows the "how I made this link" to learn more. She finds herself on a page with a gallery of animations that she browses. Then she sees a "Create" button and clicks it. She skims the instructions and decides that this is not a "standard" graphics program - rather than using a timeline and "tools", it has just a few basic images (e.g., a horizontal blend, a vertical blend, some time-blends) and a few operations that you use to build new images from existing images. She plays a bit. And she finds that she can create some strange and interesting images, but not necessarily the ones she wants to make, and certainly not anything like her friend made. So she looks further. She learns that there are "challenges" that help you learn the system (and, as importantly, that help you consider and master different aspects of computational thinking), and tries to figure out how to make images as seemingly simple as a triangle or a circle using the limited selection of basic images and operations. It's not easy, but she finds it fun to try (and sometimes more fun to fail -- failures also create interesting images). You've just read a sample encounter with the Mathematical Image Synthesis Toolkit, or MIST. MIST is an open-source, Web-based graphics application that takes a constructionist approach in which open experimentation in image making helps students develop skills in computational thinking and deepen their understanding of mathematical functions. MIST is available at http://glimmer.grinnell.edu.	Developing Computational Thinking Through Image Making and Constructionist Learning (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Andrey Esakia	Incorporating smartwatch app development into mobile app development classes has educational benefits. However, choice of a smartwatch platform imposes constraints on eligibility of students that can take the class because some of the platforms (ex. Pebble, Samsung Gear2, AGENTWATCH) use proprietary SDKs with programing environment very different from the smartphone's. This makes such classes too difficult for CS1/CS2 level students. This poster shows how newer smartwatches (Android Wear OS and Watch OS based) can make such classes accessible to CS1/CS2 students and how these newer smartwatches can broaden the CS topics that can be learned. For example, the hardware of Android Wear devices coupled with similar programing approach with Android OS, make a friendly platform for integrating smartwatch development into an Android app development class. These smartwatches offer new levels of information affordance with instantly obtainable interactive information on the wrist. It is possible to use such smartwatches as a tool for exploration of the fundamentals of Human Computer Interaction. Students can identify problems in existing interactive systems and design solutions with smartwatch capabilities in mind. Problems can be identified through exploratory studies of existing systems. Prototypes can be designed and implemented followed by evaluations. Students can also exercise concepts of Usability Engineering as there is need to address the ergonomic constraints of smartwatches, such as, small screen, poor visibility and fixed position on the body. In addition, Designing Android apps with Android Wear extensibility in mind can reinforce fundamental modularity concepts from Software Engineering in a natural setting.	Smartwatches For Junior/Senior Level CS Education (Abstract Only)	NA	2015
Emmett Tomai:Roberto Flores:Casey Richardson:Jose Rojas:Julio Oliva:German Zuniga	In this work, we seek to better understand how game design principles impact the effectiveness of a video game learning environment for computational problem solving. Video games naturally encourage problem solving and incremental learning of their game play systems, but it remains unclear how well that transfers to learning the structures and processes of computing. We are building a gateway game that establishes familiar problem solving game play, then expands player affordances to include the use of automation and abstraction. Programming in-game entities is presented to players as a constrained selection and refinement process, which they explore and master in order to achieve in-game goals. We are exploring whether computational problem solving can be cast as accessible, intrinsically engaging game play, by following principles of good game design: exploratory player-controlled pace and direction, encouraging trial and low-cost failure, immediate formative feedback, level-appropriate challenge, non-intrusive assessment and expanding affordances. The game we are building to evaluate these factors will be positioned as a bridge for middle- and early high-school students to engage with computational problem solving.	A Gateway Game to Make Computational Problem Solving Accessible and Engaging (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Michael Ball:Lauren Mock:Jonathan McKinsey:Zachary Machardy:Daniel Garcia:Nathaniel Titterton:Brian Harvey	CS10, is UC Berkeley's CS0 course. Each semester we have between 40% and 50% of our students continue on to CS61A, our CS1 course. Meanwhile an average of 25% more students express interest in continuing learning computer science through other means. CS10 is taught in a visual language called Snap! and CS61A in Python. This poster explores some of the trends we have seen between CS10 and CS61A enrollment, and our new "Besides Blocks" curriculum which helps transition students from a visual to text based language. Besides Block is approximately one fourth of the CS10 curriculum which introduces Python in the context of the Turtle Graphics system, and a tool called Codification which is a way of translating Snap! blocks to Python.	Oh, Snap! Enabling and Encouraging Success in CS1 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Richard E. Ladner:Brianna Blaser:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing (uw.edu/accesscomputing), will be shared.	Universal Access to Computing Education (Abstract Only)	NA:NA:NA	2015
Donald Slater:Wanda Dann:Steohen Cooper	This session is for anyone currently using Alice 2 and / or Alice 3, or those exploring the possibility of using Alice in their curriculum. The session will focus on a mapping of an Alice curriculum and instructional materials to CSTA, code.org and ACM curriculum standards and guidelines for a wide range of age/grade levels. The discussion leaders and attendees will share teaching strategies, tips, and techniques for implementing these standards. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources with experienced Alice instructors and those new to Alice. Goals for this session include: Review a course mapping of the Alice curriculum to well-known introductory curricula and pedagogy learning standards. Discuss learning standards and objectives encountered in the use of Alice in different environments and educational contexts. Allow educators using Alice to share exemplary assignments and teaching strategies. Provide an opportunity for those thinking about using Alice to ask questions as they determine how it may be most useful in their particular situation. Foster the development of community by allowing Alice teachers to connect and become resources for each other throughout the year. Allow educators to interact with Alice team members to learn more about the latest features of Alice 3 and Alice 2.	Birds of a Feather: Mapping Alice Curriculum to Standards (Abstract Only)	NA:NA:NA	2015
Greg Kawell:Benjamin Schafer	Many people know that Lego Mindstorms are great for teaching a wide range of different computer concepts to students. Some use them to teach programming, engineering, and of course robotics. In September of 2013, Lego released the latest generation of Mindstorms called EV3. This workshop focused on introducing participants on how to use Mindstorms EV3 and what many of the new features of the system are. At the workshop it was mentioned how some people are using this generation of Mindstorms for architecture classes, assembler coding projects, CS0 or CS1 courses, and conducting kids camps for k-12 students. This BOF is designed for people currently using any generation of Mindstorms and for those who are interested in finding out how they might start using Mindstorms in the classroom. The focus of this session will be to encourage people to use Mindstorms EV3 in a variety of different settings. During the BOF, people will have an opportunity to brainstorm new ways to use these tools to help students learn important CS concepts.	Brainstorming How to Use Lego Mindstorms EV3 in the Classroom (Abstract Only)	NA:NA	2015
Doug Baldwin:John P. Dougherty	"... we note that undergraduate CS students need enough mathematical maturity to have the basis on which to then build CS-specific mathematics (for example, as specified in the Discrete Structures Knowledge Area), which, importantly, does not explicitly require any significant college-level coursework in calculus, differential equations, or linear algebra." [Computer Science Curricula 2013]. Is this true? Perhaps we are finally acknowledging what critics have claimed for many years; namely, that the math traditionally studied by other engineers is the wrong math for computer science. But perhaps the even longer history of organizing college-level math curricula around continuous mathematics recognizes some important source of "mathematical maturity." This session will debate Curricula 2013's claim in order to explore what topics in mathematics, and perhaps logic, statistics, and other related disciplines, a computer science program should include in order to develop appropriate "mathematical maturity" in its students.	What Math is the Right Math for Computing? (Abstract Only)	NA:NA	2015
Shuchi Grover:R. Benjamin Shapiro:Brian Dorn	CS teacher development has become a major effort for the SIGCSE community in part due to NSF's CS10K efforts and expanding CSTA involvement. However there are few examples of university courses explicitly designed to train CS teachers. We do not yet have clarity on the topics CS education methods courses should cover and how best to prepare teachers to teach learners new to computational problem solving and programming. As an interdisciplinary field of study, CS education must necessarily draw on domain knowledge in CS, research in computing education, as well as research in education and the learning sciences about how students learn, both generally and in computing. At the same time, a methods course must provide prospective teachers with practical, hands-on experiences wherein they integrate research-based best practices with age-appropriate content for their target student population. BOF attendees are asked to bring materials from their classes and be ready to discuss multiple viewpoints about topics, pedagogical strategies and readings from a rich history of research in computing education and the learning sciences. Such a session will also afford attendees an opportunity to start an important conversation, connect with others who are currently developing and/or teaching CS methods courses, and form a community to share ideas, literature, and syllabi on an ongoing basis. Materials will be shared with the SIGCSE community.	K12 CS Teaching Methods Courses (Abstract Only)	NA:NA:NA	2015
Clif Kussmaul:Helen H. Hu:Chris Mayfield	Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop key process skills such as communication, teamwork, problem solving, and critical thinking. For example, an activity might start with a simple game, and questions would guide teams to identify, analyze, and compare algorithms to play the game, leading them to develop techniques and identify issues and tradeoffs. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown the students in POGIL classes do better on common exams and in subsequent courses. This BOF will enable people unfamiliar with POGIL to ask questions and learn more, and enable experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group. The CS-POGIL community has grown rapidly in the last few years. Our discuss forum has over 40 members, and http://cspogil.org has over 100 activities shared publicly or within the community. For more information, see http://cspogil.org and http://pogil.org.	Process Oriented Guided Inquiry Learning (POGIL) in Computer Science (Abstract Only)	NA:NA:NA	2015
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Regional Celebrations.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA	2015
Edward Gehringer:Mark S. Hall	With interest in "flipped classrooms" rapidly growing, CS faculty are looking for ways to "flip" with a reasonable amount of effort and good results, There is no lack of resources or advice; videos and video-recording apps are proliferating, as are articles and web sites devoted to flipping. Only a small fraction of this is specifically targeted at CS, so it is a daunting task to sort through the available material to find what works well in computing. This BoF will bring together educators who have used, and can recommend, resources for flipping to their colleagues.	Resources and Strategies for Flipped Classrooms (Abstract Only)	NA:NA	2015
Michael P. Rogers:William Siever	Apple recently announced Swift, a new development language for iOS and OSX. While designed with developers in mind, it is also a boon to those who teach programming topics. Its relatively simple and familiar syntax; its integration in a scripting environment, Playgrounds, complete with built-in visualization tools; and the ability to incorporate live code in textbook form means that Swift is far better suited for teaching mobile app development than Objective-C. Indeed, the tools are so learner-friendly and the language so inviting that Swift might even find a place in a CS1 course. The language itself and the migration from Objective-C raise both logistical and pedagogical issues that will be addressed in this Birds of a Feather session.	The Great Objective-C Swift Migration of 2015 (Abstract Only)	NA:NA	2015
Mark Sherriff:Daniel Garcia	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching Track Faculty in CS (Abstract Only)	NA:NA	2015
Farzana Rahman:Dee Weikle	The enrollment in introductory computer science courses has been growing steadily for the last couple of years. Interest in the field is exploding across the nation. Colleges and universities of all shapes and sizes have seen enrollment in introductory computer science courses and to some extent in upper-division electives explode as well. Most R1 institutions handle such growth through the use of graduate TAs to teach CS1 courses. Many primarily undergraduate and/or liberal arts institutions don't have these resources, however. Complicating the scenario further, students coming to these non-research institutions expect personal interaction, are from a growingly diverse set of high-school graduates and seem to be less prepared for college than ever. Given the current funding climate for higher education, it is difficult to imagine how most universities and colleges will be able to negotiate this scenario. This BOF will provide a platform to discuss how to handle the growing, diverse, and uninitiated CS1 enrollment from many perspectives - individual, departmental, and institutional. What creative solutions can be brought to improve institutional motivation and how do we ensure that traditionally under-represented groups don't get left behind in the onslaught?	Juggling the Jigsaw: Enabling CS1 Growing Enrollment and Diversity at Undergraduate Institutions (Abstract Only)	NA:NA	2015
Cay Horstmann:Smita Bakshi:Amruth Kumar:Frank Vahid	Interactive activities in textbooks and online courses are no longer just decorative, but have become compelling tools for engaging students. This BOF, lead by professors and authors with experience in designing complex interactive tutoring materials, invites interested instructors and authors to discuss best practices in designing activities, integrating them into courses, and measuring outcomes.	Interactive Ebooks and Course Materials: A BOF for Authors and Instructors (Abstract Only)	NA:NA:NA:NA	2015
Mihaela Sabin:Svetlana Peltsverger:Cara Tang	At the direction of the ACM Education Board, the IT2017 Task Group was formed with the charge of updating the joint ACM and IEEE Computer Society Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, known as IT2008. The revised document, called IT2017, should be appropriately forward looking given the significant advances in information technology that have occurred since 2008. Participants attending the BOF will contribute their insights and assist with the revision process to update IT2008. Discussions will center on delineating knowledge areas and learning outcomes specific to IT; exploring the current and future roles of IT in computing disciplines; recommending changes to improve the usefulness of the report; and planning further communications to fully engage the academic and professional community in the revision process. The objective is to ensure that the updated document is a forward-looking curriculum framework of the disciplinary content and practices in the field of information technology and remains relevant into 2020 and beyond for incoming students, computing departments with IT programs, accreditation bodies, and employers in the U.S. and anywhere else in the world.	Updating the ACM/IEEE 2008 Curriculum in Information Technology (Abstract Only)	NA:NA:NA	2015
Emmanuel Schanzer:Kathi Fisler	Bootstrap teaches students to create their own videogames using a programming approach that directly reinforces state and national algebra standards. Used in classrooms across the country, Bootstrap is proving successful at transferring skills from programming to algebra word problems in 8th and 9th grade students. Due to the algebraic foundation for both content and pedagogy, math teachers with limited programming experience find the curriculum highly approachable; many offer it as a module within an algebra course. Bootstrap is a prefix to a higher-level computer science curriculum called Program by Design that emphasizes data-driven design and testing (with or without the videogame focus). In this BOF, current and potential users of these curricula will discuss the connections between introductory computing education and algebra education, share best practices for teaching and moving beyond these curricula, and generate ideas for future evolution of both curricula. The two facilitators will adapt the format as needed to support the interests of the participants.	Teaching Algebra and Computing through Bootstrap and Program by Design (Abstract Only)	NA:NA	2015
Richard Weiss:Michael Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne:Justin Cappos:Ambereen Siraj	We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have seen require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have developed hands-on exercises, those who have used them and those who would like to. We recognize that few CS programs can afford new required courses, so we will discuss ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering, algorithms and programming. The questions we will ask are, "What exercises have you tried? What are your experiences? What are you looking for?" Recent hiring forecasts indicate that there is still a tremendous need for skilled information security experts. Security is one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. It is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, and discuss how to teach analytical skills. We plan to share experiences, practices and ongoing efforts, including our own (e.g., our teaching experiences, the SISMAT program, Security Injections, the Seattle Platform, the Security Knitting Kit project, EDURange and the dissemination of infosec interactive exercises).	Teaching Security Using Hands-on Exercises in 2015 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Geoffrey L. Herman:Ronald Dodge	Recent large-scale data breaches such as the credit card scandals of Target and Home Depot have significantly raised the public awareness of the importance of the security of their data and personal information. These incidents highlight a growing need and urgency to develop the cybersecurity infrastructure of our country and in the world. The development of ACM's Computer Science Curriculum 2013 and the National Initiative for Cybersecurity Education framework further highlight the growing importance of cybersecurity in computing education. Critically, recent studies predict that there will be a significant demand for cybersecurity professionals in the coming years, yet there is a lack of rigorous evidence-based infrastructure to advise educators on how best to engage, inform, educate, nurture, and retain cybersecurity students and how best to structure cybersecurity curricula to prepare new professionals for careers in this field. The development of validated assessment tools of student learning provide one means for increasing the rigor with which we make pedagogical and curricular decisions. During this Birds of a Feather session, participants will engage in a structured dialogue to identify what assessment tools are needed to improve cybersecurity education. Further, participants will provide feedback on initial efforts to identify a core set of concepts and skills that will be essential for students' success in cybersecurity fields.	Creating Assessment Tools for Cybersecurity Education (Abstract Only)	NA:NA	2015
Bruce Char:Jeffrey Popyack:Jeremy Johnson:William Mongan	This session invites educators interested in sharing and/or learning about experiences with tools for automatic feedback on technical work: the "if", "why" and "how". This includes experiences with program testing, problem-solving exercises, or quizzes, generated or checked with engines with expert-level technical capabilities, to scale up feedback to cope with burgeoning enrollment in CS courses while maintaining or improving student learning outcomes. Commercial, free and open-source tools now exist to assist in this endeavor. The benefits of providing timely, detailed, and insightful feedback for student effort are well known. Yet as enrollment in CS courses increases, many are hard pressed to find the human resources to scale up their feedback efforts. TAs and instructors may struggle to deal with the increased evaluation load, resulting in inconsistent, untimely, or lessened insight in feedback. Automatic grading and feedback offer a way to scale detailed and individualized feedback and for instructors to write materials with enhanced shelf-life, but with additional courseware engineering and administrative cost. It raises pedagogical questions about good ways for machine-based feedback to be blended with other types of learning activities, both conventional and novel. It has significance and relevance to departments facing the "scaling up" situation when it is understood if, how and why it can help address the problem.	Automatically Generated Feedback for CS student Work: Best Practices (Abstract Only)	NA:NA:NA:NA	2015
Josh Hug:Daniel D. Garcia	As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating diverse course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content.	Handling Very Large Lecture Courses: Keeping the Wheels on the Bus (Abstract Only)	NA:NA	2015
Owen Astrachan:Lien Diaz:Amy Briggs:Fran Trees:Richard Kick	Computer Science Principles will become an Advanced Placement course in AY 2016-2017, with the launch of the first APCSP exam in May of 2017, with through-course assessments/performance tasks being completed by students starting at the beginning of that academic year. In this BOF we will hear from participants about their questions and concerns in anticipation of the launch of the course and exam. The BOF will be part of launching a community of practice for teachers and educators who are not part of a formal NSF project, Project Lead the Way, or Code.org whose participants may have a community of practice.	Computer Science Principles: Expanding the Community (Abstract Only)	NA:NA:NA:NA:NA	2015
Michael Oudshoorn:Stan Thomas:Barbara Boucher Owens:Deborah Trytten:Mary-Jane Willshire	The ACM/IEEE CS2013 Curriculum provides a somewhat rigid identification of topics to be covered by a model computer science curriculum. It was developed with significant input from industry, educators and other stakeholders and represents best practices in terms of Computer Science education. ABET is the accreditation body accrediting computer science programs in the US, and it also accredits a number of international programs. ABET's goal is to allow programs to identify their own outcomes and measure their success in delivering programs that achieve this, while also ensuring that all students receive a solid core education including key areas of the discipline without being excessively prescriptive. Both documents address excellence in computer science education. Changes to the Computer Science program criteria are being recommended which will more closely align the two documents in terms of identifying key areas to be covered by programs. This session provides participants with the opportunity to hear about the proposed changes and the rationale behind them and to offer feedback and input into the process.	Proposed ABET Computer Science Criteria and the CS2013 Curriculum (Abstract Only)	NA:NA:NA:NA:NA	2015
Paul Tymann:Lester Wainright:Sandy Czajka	This BOF will provide an opportunity for high school and college faculty to discuss the AP CS A curriculum and to explore possibilities for collaborations and outreach activities between high schools and colleges.	AP CS A: Sharing Teching Strategies and Curricular Ideas (Abstract Only)	NA:NA:NA	2015
Cindy S. Tucker:Cara Tang:Elizabeth K. Hawthorne	The ACM Computer Science Curricula 2013 (CS2013) guidance for undergraduate degrees was released in December 2013. This BOF will provide a platform for two-year and four-year computer science faculty and academic administrators to discuss CS2013 and its influence on associate-degree computer science curricula. The session will include a brief overview of the Core Tier-1 and Core Tier-2 CS2013 topics and attendees will primarily engage in an open dialog about which CS2013 topics and learning outcomes are most relevant to be included in a transfer curriculum. This CS2013 discussion will help inform the forthcoming update to Computing Curricular 2009: Guidelines for Associate-Degree Transfer Curriculum in Computer Science (www.capspace.org).	Perspectives on How Computer Science Curricula 2013 Influences Two-Year College Programs (Abstract Only)	NA:NA:NA	2015
Carsten Kleiner	Compared to their fundamental part of computer science curricula the small number of papers on database system education comes as a surprise. The apparent draught in new ideas in database system education is even more surprising given the fact that this area of computer science has arguably undergone its most significant changes for more than 30 years within the last 5 to 10 years. Many new database system paradigms (most of them appearing under the NoSQL label) have been introduced for various reasons. Some of these massively distributed database systems facilitate unprecedented data processing capabilities often labeled as BigData. In order to offer a sustainable and practical CS education, at least some of those new paradigms and methodologies should be included into database education. The BoF is meant to continue the discussion from the 2014 BoF about which of those deserve inclusion into a typical CS curriculum and (even more interestingly) at what time in the curriculum and by replacing what other topics. It shall offer participants a forum to share their opinions and ideas on recent and future changes in database system education as well as to present practical experiences with new concepts picked up at last year's BoF or elsewhere.	New Concepts in Database System Education: Experiences and Ideas (Abstract Only)	NA	2015
David Reed:Frances P. Trees	One of the greatest challenges for K-12 computer science educators is finding the opportunities and resources to stay up-to-date with the field and its pedagogical practices. Teachers often lack CS colleagues at their school, which makes the lack of professional development opportunities even more significant. As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues and to help connect teachers with professional development resources. This BOF will discuss existing professional development resources available to K-12 teachers, as well as providing a community building forum between high school teachers and college faculty. Attendees will be asked to share their professional development needs and desires, which will then guide the CSTA Professional Development committee in future efforts.	Addressing Professional Development Needs for K-12 CS: Working with Your Local CSTA Chapter (Abstract Only)	NA:NA	2015
Michael Goldweber	This BoF is to gather computer science educators interested in helping to create successful study abroad experiences for computer science students. While study abroad consistency places number one as the most impactful experience an undergraduate can have, computer science students have some of the lowest study abroad participation rates. While some of the reasons for this are financial, it is believed that the primary reason is the lack of meaningful study abroad opportunities. In the world of study abroad programs, it is a basic axiom that a study abroad program, to be successful, has to have a reason for being in its chosen location. Simply transplanting a course to an exotic location is considered educational tourism. The most successful study abroad programs leverage being present in a foreign location to provide some value added to the course over its back home-based counterpart. We define meaningful study abroad opportunities as ones where students can make forward progress in their major, but avoid becoming exercises in educational tourism. Furthermore, at all but the largest of institutions, discipline-specific study abroad programs, due to enrollment sizes need to be inter-institutional. How to create a meaningful study abroad experience in computer science is a difficult open question. The purpose of this BoF is to gather interested colleagues to brainstorm ideas and to begin a community-wide dialog on developing successful and meaningful study abroad programs for computer science students.	Study Abroad Experiences in Computer Science (Abstract Only)	NA	2015
Meghan Allen:Ben Coleman:Diane Horton:Lynn Lambert:Michele Ng	Alumni make contributions to a Computer Science program in three interconnected ways, all of which relate to the interplay between the academic environment and the "real world." For students who aim to enter the job market upon graduation, alumni provide a friendly way to receive mentoring and advice and develop a professional network. When faculty are looking for real-world projects and experiences for students, alumni provide an avenue for entrance into industry. Finally, alumni can provide assessment data about the performance of students in the workplace after graduation. In this BoF session, we will consider how individual faculty members or a department can engage alumni in meaningful ways. Small groups will consider each of the three ways to partner with alumni, with particular emphasis on sharing past experiences. Participants will be encouraged to consider ways to collaborate with their alumni office, development office, career center and student groups to leverage the potential of their alumni.	Sharing Best Practices for Alumni Engagement (Abstract Only)	NA:NA:NA:NA:NA	2015
Shuchi Grover:Marie Bienkowski:Eric Snow	As computer science (CS) and computational thinking (CT) make their way into all levels of K-12 education, valid assessments aligned with new curricula can assist in measuring student learning, easing the way for adoption of new computing courses, and evaluation of pedagogical approaches for teaching computing ideas and concepts. Without attention to rigorous assessment, CT can have little hope of making its way successfully into K-12 school education settings at scale. This BoF session will involve discussion around ongoing work at SRI International (under several NSF-funded projects) on the design and development of formative and summative assessments for the ECS curriculum. Additionally, various forms of assessment (including free response and multiple-choice questions, and computational artifacts), and insights from past research on their use will be discussed. BOF attendees will be able to discuss multiple viewpoints, connect with others who care about assessment of CT, and share resources and ideas.	Assessments for Computational Thinking in K-12 (Abstract Only)	NA:NA:NA	2015
Lori Postner:Stoney Jackson:Ben Coleman:Suzanne Mello-Stark:Samuel Rebelsky	Can students contribute to HFOSS projects as part of their computing curriculum? How and at what level can HFOSS be integrated? What are the success stories and challenges? This BOF will be led by a diverse group of faculty who have incorporated HFOSS into their classes. They will lead a discussion on the various approaches, successes and challenges they have encountered. Their experiences will provide a backdrop for this BOF session, which should lead to a lively discussion of how and why to use HFOSS in computing courses. Faculty who are interested in HFOSS, but who are novices, will learn about potential projects and classroom materials as well as make connections with more experienced faculty in this area.	Student Contributions to Humanitarian Free and Open Source Software (HFOSS) (Abstract Only)	NA:NA:NA:NA:NA	2015
W. Richards Adrion:Mark Gudial:Barbara Ericson	We are all excited to see an increasing number of national efforts to reform computing education. Persistent and sustainable change in a state, its higher education institutions, and its K12 districts requires the active participation of individuals and local organizations to engage policy makers, higher education, school districts and communities. U.S. education is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level. The system is organized along K20 pathways and a reform process to improve these pathways will take place at multiple levels and state by state. This BOF will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change. The NSF BPC Expanding Computing Education Pathways (ECEP) Alliance will present its 4-step model for state change: identify leaders, assess the CS education landscape, organize the statewide stakeholders, and find resources to enable change. We will moderate a discussion of how the ECEP model, its services and federal/foundation resources might be adapted to enhance state-based initiatives and partnerships. ECEP provides experts for state policy events, teacher professional development, and 2-4-year transfer summits. It provides training and funding to help start computing summer camps. ECEP trial interventions are helping more African American students pass the AP-CS-A exam.	Partnering to Promote State-by-State Computing Education Reform (Abstract Only)	NA:NA:NA	2015
Lillian (Boots) Cassel:Cynthia Lee:Cliff Shaffer:Darina Dicheva	Open educational resources - assignments, labs, course notes, and other types of materials made available for anyone interested in using them - have the potential to have a significant positive impact on courses and students at many institutions. Distribution and use of course materials is also an important factor in encouraging the adoption and use of innovative teaching practices. However, the use of open resources is still somewhat uncommon, with most instructors preferring to use their own materials. This BoF will bring together providers and users of open educational resources to pose the following questions: Who is using open resources? Who isn't using open resources? How could open resources, and the repositories where they are made available, better meet the needs of potential users? What is necessary to make sharing of educational resources easier and more effective? Are there inherent barriers to sharing and reuse, and how can they be overcome?	Open Educational Resources: What Next? (Abstract Only)	NA:NA:NA:NA	2015
Catherine Bareiss	Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Possible topics might include: sharing classes, increasing enrollment, general education, and specialized courses.	Computer Science: Small Department Initiative (Abstract Only)	NA	2015
Mark Sherriff:Sarah Heckman	Over the past several years, there has been a marked increase in empirical validation in research papers presented at the SIGCSE Symposium. This birds-of-a-feather session intends to bring together faculty interested in empirical research in computer science education to share methodologies and techniques, while also continuing the conversation about how to move empirical computer science education research forward. The computer science education (CSEd) research community consists of a large group of passionate CS educators who often contribute to other disciplines of CS research. There has been a trend in other disciplines toward more rigorous and empirical evaluation of various hypotheses. Prior meta-analyses of the then-current state of CSEd research showed a distinct lack of rigor in the top CSEd publication venues, with most papers falling in the general category of experience reports. Our goal is to engage the SIGCSE community in a discussion as to how we can move empirical research in CSEd forward. We hope to help researchers establish connections that will allow them to share research methodologies and challenges.	Empirical Research in CS Education (Abstract Only)	NA:NA	2015
Farzana Rahman:Jennifer Stevens:Sharon Simmons	It is widely known that computer science students do not reflect the diversity of the population at large. Studies have shown that effective outreach programs can educate the public, increase student interest, help recruit and retain majors in computing disciplines. Traditionally the outreach events are organized by higher education institutions or nonprofit organizations. It will be highly effective if high school teachers are provided with the right tools so they can organize outreach events in their school or local community. Outreach programs can vary widely in terms of target audience, duration and objective. And it might seem daunting to design and deploy outreach events to make it sustainable. Our goal in this BOF is to discuss effective outreach activities to recruit and retain diverse students in CS K-12 pipeline. In particular, each facilitator will address the objective of the activity, the target audience, a description of the activity, and key aspects for successful deployment. This BOF will also provide an effective model for high school teachers to design and implement computing outreach activities in their schools. We will share techniques to increase students and parents interest in computer related discipline and provide them with appropriate tools to pursue their interest more. Facilitators will also share information about various funding agencies that can sponsor CS outreach programs. It will provide an opportunity for high school and college faculty to explore possibilities for collaborations and outreach between high schools and colleges.	CS 4 Everyone: Diversifying the K-12 Pipeline for CS at College and High School Level (Abstract Only)	NA:NA:NA	2015
Janet Davis:Christine Alvarado:Miranda C. Parker:Jennelle Nystrom	Students who attend academic conferences can broaden their horizons, increase their commitment to the discipline, find role models and mentors, and gain concrete opportunities for work and study. However, attending one's first conference can be an overwhelming experience. We often focus on the procurement of funding to send students to conferences, and do not spend as much time considering what will happen once they get there. In this BoF, we will share strategies for guiding and supporting undergraduates to take full advantage of attending a CS conference. This session will be led by two faculty members and two young alumni. We will draw on our collective experience helping our students/classmates make the most of attending the Grace Hopper Celebration of Women in Computing, SIGCSE, and other CS research conferences. We invite discussion of any and all conferences participants have experience with, as similar strategies may apply. Specifically, we may consider how to help students: act with confidence in a professional setting; rehearse an "elevator pitch"; navigate career fairs and exhibit halls; choose wisely among parallel sessions and the "hallway track"; network effectively with potential mentors, advisers, and employers; present their own work in talks or poster sessions; reflect on their experiences; and share what they learn at their home institution.	Preparing Undergraduates to Make the Most of Attending CS Conferences (Abstract Only)	NA:NA:NA:NA	2015
Kristine Nagel:Sonal Dekhane:Nannette Napier	Programming Boot Camp is one strategy to overcome the perceived and actual difficulties undergraduate students encounter in an introductory programming course. It is estimated that of the over two million students starting computer science studies in universities and colleges all over the world in 1999, 33% dropped or failed their first programming course. Consequently, undergraduate students delay enrolling in programming courses, which interrupts progress toward their degree and decreases confidence in their ability to succeed in college and computing careers. Programming Boot Camp provides a combination of intense programming labs with professional development and community building activities to help increase confidence, create awareness of opportunities, and build a supporting peer network. How does this strategy work on different campuses with different demographics? Attendees will be able to connect with people who have implemented boot camp, are interested in sharing resources, and discussing how appropriate a boot camp would be for their students. Those who have already implemented a boot camp will be encouraged to share their curriculum, workshop strategies, and how effective they were in goals like: increasing the programming skills of the participants and their confidence in it, inspiring participants to persist in computing, and building a network of mentors and peers to support persistence in computing. Participants who seek to increase success in programming courses will be encouraged to discuss campus specific needs to gather input from those who have implemented boot camps and how they adapted the concept to their population and institutional culture.	Can Programming Boot Camp Help Under-represented College Students Succeed in Computing Degrees? (Abstract Only)	NA:NA:NA	2015
Rebecca Bates:Judy Goldsmith:Valerie Summet	Did you read any of the common reads for SIGCSE 2015? Now's your chance to talk about them! Three books: I, Robot by Isaac Asimov (Bantam Spectra, 1950), Bellwether by Connie Willis (Bantam Spectra, 1997) and Ready Player One by Ernest Cline (Broadway Books, 2012) were proposed at the end of the 2014 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the three suggested books. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2016 conference.	SIGCSE Reads: Time for Book Discussion (Abstract Only)	NA:NA:NA	2015
Chris Gregg:Colleen M. Lewis	Instructors struggling to support their ever-growing undergraduate population may be interested in starting, expanding, or improving an undergraduate teaching assistant (TA) program. This session seeks to connect individuals interested brainstorming and sharing strategies for improving the impact of undergraduate TAs. We will break into small groups to discuss tips for (0) structuring funded and unfunded undergraduate TA programs, (1) training undergraduate TAs, and (2) recruiting and selecting undergraduate TAs. All tips will be posted on CSTeachingTips.org for dissemination to other CS educators. This BoF welcomes instructors already supporting undergraduate TAs and instructors who are interested in build an undergraduate TA program.	Working with Undergraduate Teaching Assistants: Best Practices and Lessons Learned (Abstract Only)	NA:NA	2015
Douglas H. Fisher:Janet Burge:Mary Lou Maher:Jerry Roth	Computer science instructors are incorporating Massive Open Online Courses (MOOCs), and MOOC material, into their campus courses. The closed instance is the dominant model being followed, in which MOOC material (e.g., in AI, in Programming Languages, in Software Engineering) is ported to a protected LMS so that campus students can use the MOOC video and other material (e.g., assessments) and infrastructure (e.g., autograders) in a "private" manner. In an embedded instance, campus students take a live MOOC as one component of their on-campus course. Another model, albeit nascent, is to exploit self-paced open online courses so that campus cohorts can move through a course when a campus instructor wants, and at a pace the instructor wants, but still availing campus students to the advantages of interacting with global students (and vice versa). The BoF session will allow participants to talk about MOOC-based blended models, form a group interested to archiving experience, synthesizing best practices, creating shared learning-object repositories (e.g., of active learning, in-class activities), and to discuss issues of policy (e.g., FERPA).	Blended CS Courses using Massive, Open, Online Courses (and other Online Resources) (Abstract Only)	NA:NA:NA:NA	2015
Catherine Bareiss:Larry Vail	This workshop shows participants about a new way to teach non-computing majors about computing fundamentals. This involves teaching computing concepts (such as sources of error, algorithm analysis, data storage, and simulations) that students encounter when they use computers to do work in their own disciplines. While this new way of teaching can use any discipline, the workshop will use the sciences as the working example. It will focus on how scientists use computers in their work but will also introduce ways to expand this to other disciplines. The course that will be presented presents different modules of computer science interspersed with different science modules that apply the computing knowledge. More details can be found at http://cf4s.olivet.edu. Participants are highly encouraged to bring a laptop. Handouts associated with the entire course will be provided.	Teaching Computing Foundations to Non-Majors (Abstract Only)	NA:NA	2015
Joel C. Adams:Richard A. Brown:Elizabeth Shoop	CS2013 brings parallel and distributed computing (PDC) into the CS curricular mainstream. The Message Passing Interface (MPI) is a platform independent, industry-standard PDC library that includes support for C, C++, and Fortran; third parties have created implementations for Python and Java. This hands-on workshop introduces MPI basics using parallel patterns, including the single program multiple data (SPMD), send-receive message passing, master-worker, parallel loop, broadcast, reduction, scatter, gather, and barrier patterns. Participants will explore 12 short programs designed to help students understand MPI and PDC basics, plus longer programs that use MPI to solve significant problems. The intended audience is CS educators who want to learn about how message passing can be used to teach PDC. No prior experience with PDC or MPI is required; familiarity with a C-family language and the command-line are helpful but not required. The workshop includes: (i) self-paced hands-on experimentation with the working MPI programs, and (ii) a discussion of how these may be used to achieve the goals of CS2013. Participants will work on a remote Beowulf cluster accessed via SSH, and will need a laptop or a tablet with an SSH client (e.g., BitVise, iSSH), or a laptop with both a recent C/C++ compiler and MPI (e.g., OpenMPI or MPICH) installed. See http://csinparallel.org.	Teaching Parallel & Distributed Computing with MPI (Abstract Only)	NA:NA:NA	2015
Orit Hazzan:Gadi Har-Shai	This workshop addresses the teaching of computer science soft skills, such as teamwork, diversity, presentation and communication skills, and ethical behaviors. It is based on the assumption that the people involved in software development processes deserve more attention, and therefore, their soft skills should also be addressed, beyond their scientific and engineering skills. In the workshop, we will highlight such soft skills using activities that aim to analyze them from a social and cognitive perspective. We will also present and discuss a course outline dealing with soft skills of computer science, including suggestions for specific activities and tasks.	Teaching Computer Science Soft Skills (Abstract Only)	NA:NA	2015
Wenliang Du	Security courses have been integrated into many mainstream undergraduate and graduate computer science curricula. To achieve effective education, learning security principles must be grounded in experience. Over the last 12 years, we have developed 30 hands-on lab exercises for computer security education. These labs, called SEED labs (SEcurity EDucation), cover a variety of security topics, including vulnerabilities, attacks, software security, system security, network security, web security, access control, authentication, cryptography, etc. These labs are built upon a Linux virtual machine, the image of which can be downloaded from our web site. Students just need to use a single computer (can be their own laptop) to work on these labs, so there is no need for a dedicated physical laboratory. All software used in the labs is open-source and free. The SEED project has been funded by 3 NSF grants with a total budget of 1.3 million dollars. So far, SEED labs have been used by over 250 institutes in 30 countries. In this workshop, we will select some of the most popular SEED labs, demonstrate how they work. We will then select three labs, and guide the participants to work on these labs in the workshop. Participants are expected to bring their own laptops. Participants who want to gain experiences with more SEED labs can apply to attend our free 3-day workshop in June.	SEED Labs: Using Hands-on Lab Exercises for Computer Security Education (Abstract Only)	NA	2015
Jeff Stern:Emily Reid:Kari Bancroft	At a time when less than twenty percent of AP Computer Science test-takers are female, Girls Who Code [GWC] has developed a unique teaching philosophy and effective curriculum to engage young women in CS early in their careers. This curriculum is built around cultivating exposure, interest, community and support, and technical skills. More than 500 young women have participated in GWC's Summer Immersion Programs, a seven-week, full-time computer science program for high school students. Ninety-five percent of participants said they are definitely or more likely to consider a major / minor in computer science after participation. This workshop shares GWC's best practices with educators looking for new ways to effectively teach computer science. At the end of this workshop, participants will have concrete examples of how to effectively teach students who are underrepresented in computer science. Participants will also have the opportunity to practice teaching in the style and spirit of the GWC Summer Immersion Program, with the goal of engaging young women, and expanding this knowledge to reach minorities and other diverse populations.	Teaching Introductory Computer Science for a Diverse Student Body: Girls Who Code Style (Abstract Only)	NA:NA:NA	2015
Bill Manaris:Andrew R. Brown:Tobias Kohn	This is an introduction to creative software development and music making in Python. This material is intended for CS0/CS1 courses and for courses at the intersection of computing and the arts. The workshop will introduce music making activities for teaching traditional CS1 topics, GUIs, event-driven programming, and connecting to external devices (e.g., smartphones, digital pianos) via MIDI and OSC (Open Sound Control). Participants will be introduced to Jython Music (http://jythonMusic.org), a library of Python modules for creative programming and music making, and will be making their own music artifacts a few minutes later. Intended audience: Computer science educators interested in teaching creative programming and computational thinking for CS0, CS1, introductory courses in the intersection of computing and the arts, and courses intended to attract and retain new CS majors. Each participant will receive a copy of (1) handouts to be used during the workshop, (2) sample student assignments and projects, (3) API documentation, (4) all required software, and (5) numerous sample programs. Laptop required (with Java JDK 7 or higher). All other software will be provided. Headphones are recommended.	Making Music with Computers: Creative Programming in Python (Abstract Only)	NA:NA:NA	2015
David G. Kay	Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and "re-using" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required.	Intellectual Property Law Basics for Computer Science Instructors (Abstract Only)	NA	2015
Michael P. Rogers:William M. Siever	Swift is a new programming language recently introduced by Apple as a replacement for Objective-C. Considering that Objective-C ranks third on the Tiobe Index and is the progenitor of virtually all the 1.2 million apps in the App Store, Swift is likely to become the dominant language for creating both iOS and OS X apps. While Swift is aimed at application developers, the language and the tools that accompany it are also a boon for CS educators. Many of the features in Swift that aid commercial development, such as type-safety, clean syntax, closures, and named parameters, are also beneficial when learning programming. In addition to the language itself, Apple has introduced a remarkable feature called Playgrounds. As the name suggests, Playgrounds allow students to "play", that is, to interactively experiment, with code. They also provide a convenient visualization tool to graphically depict the impact of iteration, providing crucial insights for novice programmers. It is also possible to use Playgrounds to write tutorials or even entire textbooks with embedded, live code for students to experiment with. The workshop will introduce Swift through the use of Playgrounds. Participants will work through a variety of hands-on, active learning exercises to learn Swift's syntax and semantics. More importantly, they will experience a sample of active learning exercises that can be used in to introduce students to programming with Swift.	A Swift Introduction to Swift App Development (Abstract Only)	NA:NA	2015
Aman Yadav	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of research design; (2) learn about various types of research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests. The workshop will be beneficial to participants who have not yet done all of these activities as well as those who have some background in educational research. Participants will be provided with material on research designs.	Conducting Educational Research in the Computer Science Classroom: Choosing the Appropriate Research Design to Address your Research Questions (Abstract Only)	NA	2015
David Bau:Matthew Dawson:Anthony Bau	This workshop introduces a new educational programming environment Pencil Code, which helps bridge the learning gap between visual programming and text-based coding. The free open-source online tool allows students to work with programs using either blocks or Coffeescript or Javascript text code. Students can switch between visual and text modes at any time. The workshop will begin with a collaborative discussion of the opportunities, challenges, and differences presented when learning with block code and moving to text code. Then we will give a short presentation of how Pencil Code is used in classrooms, with some preliminary findings. The main part of the workshop is a hands-on activity where participants gain experience with Pencil Code. Participants will use the tool with lessons in a curriculum framework, for teaching functions and interactivity using both text code and block code. Finally, there will be a discussion of best practices for teaching students in the transition, and an opportunity to create your own lessons using Pencil Code or other tools. Attendees will come away with an understanding the issues faced by students transitioning to text code for the first time, and they will gain practical experience with teaching lessons with Pencil Code. Participants will receive curriculum material appropriate for middle-school and high-school classrooms. The tool is open-source and free to use at http://pencilcode.net/.	Using Pencil Code to Bridge the Gap between Visual and Text-Based Coding (Abstract Only)	NA:NA:NA	2015
Steve Carr:Melissa Keranen:Jean Mayo	Cryptography and access control are perhaps the two most fundamental mechanisms for data protection. This workshop presents hands-on methods for teaching cryptography and access control that leverage software tools developed with funding from the NSF. The workshop will proceed in two sessions. The first session will address teaching well-known ciphers (including Vigen√®re, DES, AES, RSA, and SHA) and elliptic-curve cryptography using tools from the cryptoVisual software suite. These tools step students through an algorithm with either the system or the student computing the result of each step. The second session will address access control and the Multilevel Security, Role Based Access Control, and Domain Type Enforcement models using tools from the acVisual software suite. These tools support graphical policy development and analysis. The presenters have used this material in undergraduate courses in Cryptography and Computer Security. The tools have been used and evaluated favorably at multiple institutions. Participants will install and use the software on their own laptops running Linux, Windows, or MacOS. The acVisual software runs natively on Linux and MacOS and through a Linux virtual machine under Windows. The cryptoVisual software suite is available at http://www.cs.mtu.edu/~shene/NSF-4/. The acVisual software suite is available at http://acv.cs.mtu.edu.	Teaching Cryptography and Access Control Hands-On (Abstract Only)	NA:NA:NA	2015
A. Nicki Washington:Legand Burge:Marlon Mejias:Ketly Jean-Pierre:Qi'Anne Knox	In order to increase the computer science pipeline, emphasis must be placed on not only who is taught, but also how they are taught. Traditional computer science pedagogy has been unsuccessful in attracting, engaging, instructing, and retaining underrepresented students. Culturally-responsive pedagogy must be leveraged to successfully instruct a diverse range of computer science students. With the onset of technologies such as Facebook, iPods, Xbox, smart phones, mobile applications, and more, underrepresented students are already actively engaged in utilizing computer technology. However, in order to transition them from consumers to creators of this technology, culturally-responsive curriculum must teach fundamental concepts such as algorithms, problem solving, and abstraction in the context of issues that affect their daily lives. This workshop is designed to help K-16 computer science educators, professionals, and others understand and identify activities and assignments that infuse culturally-responsive content throughout. By the end of the workshop, participants will have a clear understanding of culturally-responsive pedagogy, its importance in computer science, and how to begin infusing more of it into lessons and activities. Laptops are recommended.	Bridging the Divide: Developing Culturally-Responsive Curriculum for K-12 Computer Science Education (Abstract Only)	NA:NA:NA:NA:NA	2015
Zack Butler:Ivona Bezakova	Problem solving is a powerful teaching methodology for computer science -- giving students a real problem to solve instead of simply discussing abstract concepts can motivate them and give them a path to better understanding. However, it is challenging to create novel example problems that are meaningful and engaging yet can be easily understood by all students. In this workshop, we will introduce participants to the vibrant world of pencil puzzles and show how many different types of puzzles can be used for a variety of topics throughout the introductory CS curriculum. Pencil puzzles are those designed to be solved by hand with pencil and paper (such as Sudoku, but including dozens of new types!) that have clear rules and are made to be solved deductively. As such, they are explicitly designed to be easy to understand and intriguing and naturally inspire algorithmic thought. We will explore a variety of on-line resources, including our own curated repository, to see how assignments throughout the introductory CS curriculum can be easily kept fresh. Participants will also experience a sample problem-solving session and collaboratively develop a new assignment for a topic of the group's choice. This workshop is intended for all teachers (late secondary and post-secondary) of introductory programming courses. Laptops are recommended.	On Beyond Sudoku: Pencil Puzzles for Introductory Computer Science (Abstract Only)	NA:NA	2015
Marguerite A. Doman:Barbara J. Ericson:Kristine S. Nagel:Nannette P. Napier:Krishnendu Roy	This workshop will provide details on how to plan and run non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in past camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, EV3, and Tetrix), EarSketch, and App Inventor. Georgia Tech helped start or expand other computing camps at eleven other colleges and universities in Georgia from 2007 to 2010 as part of Georgia Computes!. This last year as part of the Expanding Computing Education Pathways (ECEP) NSF grant we have also helped institutions start or expand summer computing camps in South Carolina, Massachusetts, and California. The workshop will distribute a link to forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptops Recommended	How to Plan and Run Summer Computing Camps: Logistics (Abstract Only)	NA:NA:NA:NA:NA	2015
Andrea Danyluk:Michael Jipping:Rhys Price Jones:David Reed:Brad Richards:Richard Wicentowski	Roughly once per decade, the ACM and IEEE-Computer Society form a joint task force to produce curricular guidelines for undergraduate computer science programs. The latest guidelines document, Computer Science Curricula 2013 (CS2013), was released in December 2013. CS faculty at many institutions are interested in understanding CS2013, evaluating their curricula against it, and adopting some or all of the recommendations. This task is non-trivial at any institution, but it can be particularly challenging at small or liberal arts institutions. For instance, small schools with few faculty are limited in the number of courses they can offer, and many liberal arts colleges place limits on the number of courses that can be required for a major. How might a department with limited resources trade off covering the core while still providing electives to students? A meta-issue involves mapping CS2013 at all: Given the demands on a small department, are there ways to improve and update a curriculum without having to go through a complete CS2013 mapping? In this workshop we will: (1) give a brief overview of CS2013, (2) describe experiences mapping individual courses or an entire curriculum to CS2013, (4) split participants into working groups for course or curricular mapping based on starting points and goals, (4) re-group to share lessons learned from the mapping experience. Laptop Strongly Recommended.	Small or Liberal Arts Colleges Adapting to CS2013: Making It Work (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Remy DeCausemaker:Stephen Jacobs	This workshop introduces participants to the pedagogy and practice of using Free/Open Source Software development practices into their curriculum, and then guides them through deployment of a turnkey courseware framework to be used for their own courses. The framework supports automatic blog checking, automatically generated student profile pages, Gravatar integration for profile pictures, Travis-CI continuous Integration tests, and repository changes reported via Github webhooks to IRC. Participants will learn how to use Github in the Classroom, the basics of Flask, a python web framework, and how to deploy their courseware to Red Hat's OpenShift Cloud, a free Platform-as-a-Service to host courseware and/or other web sites.	Steal This Courseware: FOSS, Github, Python, and OpenShift (Abstract Only)	NA:NA	2015
Lien Diaz:Richard Kick:Andrew Kuemmel	This workshop focuses on content in two curriculum modules for AP Computer Science Principles (CSP) developed by the College Board. They highlight instructional approaches for teaching concepts about 1) the Internet and 2) the interplay between creative aspects of computing and impact of computing on society. The Internet module activities allow students to construct their own solutions to problems similar to some that the builders of the Internet faced. The topics in the Creativity and Global Impact module were chosen because they have rich potential for increasing interest with students, especially those from underrepresented demographics, and because they present instructional challenges for instructors new to AP CSP. Participants will learn detailed concepts addressed in the AP CSP course and will receive classroom materials from in each of the curriculum modules. These modules serve as exemplary resources for teachers.	The Internet, Creativity and Global Impact: Curriculum Modules for the New AP Computer Science Principles Course (Abstract Only)	NA:NA:NA	2015
Veronica Catete:Barry Peddycord, III:Tiffany Barnes	Students often take computing classes because they are eager to create games, to learn to create meaningful and useful software, or both. Connecting computing to real, cutting-edge applications has been shown to increase engagement of women and minorities. The new CS Principles curriculum, a pilot Advanced Placement course, seeks to broaden the participation in computing to a larger and more diverse audience. This curriculum emphasizes that computing is a creative activity where people work together to solve relevant problems. In this workshop, we introduce free software and curricula to enable novice high school and college students in a first computing course to learn basic game and mobile phone development. We discuss how these activities facilitate teaching high school and non-major (CS0) course topics, but they can also be used to illustrate more advanced topics. Participants will learn GameMaker and mobile phone programming using AppInventor, and/or Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course, as well as links to the GameMaker, AppInventor, and Touch Develop platforms and tutorials. Participants must bring a network-connected laptop with a modern browser, and the latest version of Java, and may optionally bring an Android, Windows, or iPhone.	Augmenting introductory Computer Science Classes with GameMaker and Mobile Apps (Abstract Only)	NA:NA:NA	2015
Jeff Gray:Fran Trees:Owen Astrachan	Many new curricula and tools have been developed recently to promote the exciting opportunities available in computer science. However, curriculum and supporting tools alone do not drive engagement -- the most interesting and innovative curriculum can still be taught in a disengaged manner, leading to lost opportunities for broadening the appeal and interest in computing across a diverse student population. The learning science literature on Cooperative Learning (CL) has been shown to increase class participation and student learning, while also promoting diversity in a manner that supports the differentiated instruction needed to engage students who have mixed abilities. This workshop will demonstrate how the best practices of CL can be applied in early CS courses (e.g., CS Principles, AP CS A, or CS1). Workshop participants will first be introduced to the CL structures that have been used in many different disciplines across multiple age/grade levels. These structures will then be used to demonstrate specific application toward computer science concepts. The workshop itself will be taught in a cooperative learning style so that participants can understand the dynamics and structure of a CL classroom. This workshop is for two categories of educations: 1) K-12 teachers who have experience with either AP CS A or CS Principles, or 2) university faculty who teach CS1 or other early courses.	Infusing Cooperative Learning into Early Computer Science Courses to Support Improved Engagement (Abstract Only)	NA:NA:NA	2015
Jason Freeman:Brian Magerko:Regis Verdin	EarSketch (http://earsketch.gatech.edu) is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will learn to code in Python and/or JavaScript to place audio clips, create rhythms, and add and control effects within a multi-track digital audio workstation (DAW) environment while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation to broaden participation and engagement in computing; the underlying concept of thickly authentic STEAM that drives this approach; the alignment of the curriculum and learning environment with CS Principles; and basic musical concepts underlying EarSketch. The intended audience for this workshop is secondary and early post secondary CS educators. The course is of particular relevance to CS Principles teachers but also applicable to any introductory programming or computing course. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required.	Computer Science Principles With EarSketch (Abstract Only)	NA:NA:NA	2015
Aaron Cadle:Ira Greenberg:Deepak Kumar:Darby Thompson:Ursula Wolz:Dianna Xu	This workshop showcases an engaging way to attract students who typically avoid a traditional introductory Computer Science course (CS1), with fully developed, classroom-tested course materials. This workshop has been successful at SIGCSE and other venues in the past. This year we highlight our successful approach in pre-AP courses, as well as continued refinement of curriculum for college-level CS1. Our courses focus on essential CS1 principles, but show applications of these principles with contemporary, diverse examples of computing in a modern context, including advanced areas typically not accessible in CS1 such as: physics-based simulations, fractals and L-systems, image processing, emergent systems, cellular automata and data visualization. Students produce dynamic visual work using the programming language Processing, which is fully compatible with Java. We aim to inspire the Computer Science community to use innovative and creative approaches to attract a broader audience to their classes. Participants will be introduced to the Processing language as well as its lightweight IDE through a series of on-the-fly coding examples. Additionally, course materials and handouts detailing the software, curricula and teaching resources will be given to the participants. Instructors of all levels are welcome; high school computer science teachers are particularly encouraged to attend. All participants will need to bring their own laptops.	Teaching Computing with Processing, the Bridge Between High School and College (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Daniel Zingaro:Leo Porter:Quintin Cutts:John Glick:Joe Hummel:Cynthia Lee:Jaime Spacco	Recent work in computing has converged on a collection of complementary findings suggesting the value of the Peer Instruction (PI) pedagogy. Compared to lecture, PI has been shown to decrease fail rates, increase final exam grades, and increase engagement and enjoyment. In PI, students work together to exchange perspectives and use clickers to answer challenging conceptual questions in the presence of a knowledgeable instructor. In our efforts to mentor potential PI adopters, we note difficulties bootstrapping PI uptake at new institutions and new departments. In this workshop, our main goal is to support potential adopters in the process of shifting from lectures to PI. In recent months, we have contributed materials for many freely-available PI courses, and led a successful 3-day NSF-funded PI workshop. We will work with participants and their existing lecture-based resources to begin considering the ways that PI might be effective in new contexts. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Supporting New Adopters to Peer Instruction in Computing (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Michael Erlinger:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF Proposals: Learn about Effective Proposal Writing via the Review Process (Abstract Only)	NA:NA	2015
Eli Tilevich:Clifford A. Shaffer:Austin Cory Bart	This workshop introduces participants to CORGIS, a technology developed under the auspices of an NSF-funded project at Virginia Tech. The CORGIS Datasets Project comprises a software architecture framework and carefully engineered client libraries through which students can access either large datasets or those generated by real-time web services from domains, including weather reports, stocks, earthquakes, and news updates. The CORGIS technical scaffolding gradually introduces students to some of the most vexing complexities of distributed computing. To support the diverse needs of computing educators when teaching introductory CS classes, each CORGIS dataset is available in Python, Java, and Racket, with compatibility on key platforms. The dataset libraries are available through an online curated gallery, designed to be easily adapted to instructors' specific academic needs, including the ability to rapidly prototype new CORGIS libraries. With CORGIS, computing educators can introduce important big data or real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. This workshop introduces CORGIS via a hands-on approach, familiarizing participants with the core functionality of our architectural framework and client libraries. We will proceed in three parts: (1) present CORGIS by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants' choice; and (3) critically discuss the technology in small and large groups. This presentation improves on our offering from SIGCSE 2014. Further information is at: http://think.cs.vt.edu/corgis.	Creating Stimulating, Relevant, and Manageable Introductory Computer Science Projects that Utilize Real-Time, Large, Web-Based Datasets (Abstract Only)	NA:NA:NA	2015
Barry L. Kurtz:Rahman Tashakkori:Ahmad Esmaili	Code magnet labs are 5-10 minute activities where students are asked to construct a method, function or rule to complete a specific task. The programming languages Java, C/C++, Python and Prolog are supported. In a code magnet lab the student is presented with a sequence of possible code magnets that can be arranged using drag-and-drop to create the desired method. Magnets for control statements can nest other magnets, including nested control statements. The completed method is compiled and subject to unit testing. Test results guide students towards a correct solution; multiple submissions are allowed. Since there is no keyboard entry when using code magnet labs, the labs can be completed using laptops, desktops, tablets and other mobile devices. This workshop is a shorter version of the half-day workshop presented with support from three NSF grants. Participants will experience using existing labs and learn to build their own code magnet lab for Java, Python, C or Prolog (participant's choice). Significant stipends averaging about $1000 will be available for after-workshop activities where the participant develops and tests multiple code magnet labs for his/her own courses in the 2014-2015 academic year. All participants will need a laptop to complete lab activities; teams will only require one laptop per team.	Building Code Magnet Labs for Tablets and Other Devices (Abstract Only)	NA:NA:NA	2015
Siddharth Kaza:Blair Taylor:Elizabeth K. Hawthorne	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing Secure Coding in CS0, CS1, and CS2. (Abstract Only)	NA:NA:NA	2015
Raja Sooriamurthi:Nickolas Falkner:Ed Meyer:Zbigniew Michalewicz	Puzzle-based learning (PBL) is an emerging model of teaching critical thinking and problem solving used in Universities and schools. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles and games. What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.	Puzzle-Based Learning: Introducing Creative Thinking and Problem Solving for Computer Science and Engineering (Abstract Only)	NA:NA:NA:NA	2015
Diana Franklin:Hilary A. Dwyer	This workshop introduces our elementary school programming curriculum, KELP-CS, and the corresponding programming environment LaPlaya. KELP-CS (Kids Engaged in Learning Programming) is an innovative, modular computational thinking curriculum for 4th-6th grade students. Off-computer activities connect computer science concepts to students' every day experiences. On-computer activities in LaPlaya develop students' computational thinking and programming skills. Finally, an engineering design project allows students to apply these new skills through an open-ended, creative project (e.g. digital storytelling in Module 1, and virtual game in Module 2). LaPlaya is a modified Scratch programming environment tailored to the developmental needs of 4th-6th grade students. In this workshop, we begin by introducing the KELP-CS curriculum; LaPlaya, the development environment used in the on-computer activities; and the resources for teachers embedded in both. Workshop participants will do sample on- and off- computer activities from Module 1 (4th grade) and discuss tips and strategies for teaching computational thinking with this age group. For the second part of the workshop, we provide additional background for participants interested in creating their own curriculum with LaPlaya. This includes how to create projects and their analysis.	KELP CS and LaPlaya: A Computational Thinking Curriculum and Development Environment for 4th - 6th Grade (Abstract Only)	NA:NA	2015
Gerald Friedland:Serge Egelman:Daniel Garcia	Although frequent stories in the popular media have raised awareness about online privacy, most young people do not have a very good handle on what the specific issues are, nor the practical steps they can take to manage them. Teachers recognize that all their students' from future engineers to those totally bored by science need a realistic understanding of how online privacy works, so they can protect themselves online. In fact, the latest CS curricular recommendations include privacy but there is no comprehensive set of field-tested teaching materials. To address this, we are developing TROPE (Teachers' Resources for Online Privacy Education), a set of classroom-ready teaching materials (teachingprivacy.org). TROPE will provide educators with lesson modules, interactive demonstrations, and a teachers' guide, so they can readily integrate privacy into high school and college classes. Our goal for this workshop is twofold. First, we will introduce educators to TROPE and provide guidance on how they can cover privacy-related topics in their classrooms without being subject-matter experts. Second, we will solicit feedback and on-the-ground stories; by gaining a better understanding of specific problems faced by educators and students, we can increase TROPE's utility to teachers. We will provide teachers with up-to-date technical information about online privacy, including relevant highlights from our research; hands-on activities illustrating principles of online privacy; and an overview of the materials we are creating for TROPE. This will be an interactive workshop, driven by participants' questions, experiences, and interests. For CS educators at all levels; laptop or tablet recommended.	Teaching Privacy: What Every Student Needs to Know (Abstract Only)	NA:NA:NA	2015
Baker Franke:Brook Osborne	Code.org is developing a complete curriculum and professional development program for the new (AP) Computer Science Principles course. In this hands-on workshop, modeled after the professional development program, participants will get access to, and interact with the new curricular materials for this course: daily lesson plans, instructional guides, assessments, and custom-built software tools woven throughout. Code.org's CS Principles curriculum engages students by having them invent and create their own solutions to some of the great problems in computing upon which many CS principles are based. For example, the course begins by asking students to invent their own bit-sending device to send a single bit of information from one place to another. The curriculum employs a variety of instructional strategies, plugged and unplugged, to build a classroom experience that is engaging and emphasizes accessibility for both the students and instructors. The curriculum also emphasizes student preparation for the AP Performance Tasks by including model tasks at the conclusion of each unit of study. Participants will experience a snapshot of the professional development program, engaging with lessons from the curriculum as they would in a realistic classroom context (i.e. diving into the materials and planning to teach the lesson rather than just talking about it). Participants will hear from high school teachers who have taught the lessons in their classrooms during the 2014-15 field-testing year. Code.org's partner schools will pilot the course in the 2015-16 school year, but the course and its materials will be open and free for all to use.	Decoding CS Principles: A Curriculum from Code.org (Abstract Only)	NA:NA	2015
Deanna Biesan	Robotic mapping and localization are two large areas in robotics research that focus on how robots know and navigate within an environment. The current methods used to complete these tasks are not extremely accurate due to errors that are compounded as the robot moves. Since robots are often used in situations where precise navigation is a necessity, there is a strong motivation for the mapping and localization processes to be as accurate as possible. This project hopes to reduce the accumulated error which occurs during the mapping and localization processes through the integration of a Kinect sensor, which provides both visual and depth data about objects in front of a mobile robot and a sonar sensor which provides depth information about objects on the sides of the robot. The Kinect's images and depth information will be used to form an occupancy grid map of the environment, while the sonar data will track the walls as the robot moves throughout the environment in order to assist in keeping track of both position and orientation of the robot. These two sensors will allow the robot to reduce the errors accumulated during localization and navigation within the map being created and in navigating the subsequently completed map. When the occupancy grid map is completed, the cells in it will be combined into a topological map, which will hold information about the rooms such as doorway locations. The topological map will then be used as the robot plans a path to its goal.	Improvement of Robot Mapping and Localization Using Combined Sensory Data (Abstract Only)	NA	2015
Matthew Bowen	With recent advancements in smartphone digital camera technology, the opportunity to integrate computer vision into daily activities has become possible. A unique application of computer vision is ESPN's use of K-Zone during Major League Baseball broadcasts, which uses a combination of three cameras and multiple computers running sophisticated algorithms, to track a thrown baseball to within 2/5ths of an inch. While the sophistication of the K-Zone hardware and software allows for a high degree of accuracy, there is the potential for obtaining similar results using only a smartphone. The Mobile Video Velocity Estimation (MoVVE) project investigated the application of computer vision in the development of a speed-tracking app on a smartphone. This presentation will describe the design of the MoVVE software which uses OpenCV computer vision library functions to track the velocity and location of objects such as a thrown baseball using video obtained from a mobile digital camera. MoVVE was shown to successfully detect and track the baseball with a success rate greater than 90%. Baseball velocity estimates obtained with MoVVE were compared to those measured using a professional grade radar gun. For a test population of 112 pitches, 84% of the program's estimated velocities agreed to within 10% of the radar gun measurement, and 43% agreed to within 5%. Test pitch velocities varied from 30 mph to 60 mph with the program showing equal accuracy throughout the full range.	Speed Estimation Using Computer Vision (Abstract Only)	NA	2015
Donald D. Buhl-Brown	Robotics education is one of the most important subjects now and for the foreseeable future. Our project focuses on designing a robotics education platform, which includes extensive libraries of code that allows any student from high school to college level to study robotics. We also have significantly addressed two of the major problems in robotics, usability and affordability. Using a Cellbot, a robot that uses an Arduino microcontroller and an Android smartphone, enables us to quickly and affordably add new sensors or features to the entire robotics system. By combining a Cellbot with the advance software we developed, we have designed a system, which is easy to learn and allows the robot to perform numerous high performance tasks. As students advance in their programming abilities more complex algorithms and sensors can be easily added to the system. Effectively making the robot "grow" with the students.	Developing a Robotics Education Platform using Android Based Cellbots (Abstract Only)	NA	2015
Jae Hyun Choe	Reading is an integral part of our lives. Most of us learned to read while we were young and never thought about how we learned to read. "ACEit!" (Assist Children in English-language) is an Android app developed to facilitate children in learning to read English. The app consists of a subset of the Dolch words (a set of 220 sight words that are proven to improve reading skill when they are learned) and uses a fading image strategy to support children in the early stages of learning to read and/or in special education. It gradually transitions the user from depending on pictures clues to recognize words, to recognizing words by themselves. This app is geared towards visual learners and provides them a more succinct yet entertaining way to learn using mobile devices.	ACEit!: Assist Children in English-language (Abstract Only)	NA	2015
Erol Cromwell	The goal of our research project was to create an artificial chef program that produces novel salad recipes with limited human assistance. Our program was designed in two steps: first, we constructed a statistical model to rank recipes. Then, we experimented with various search algorithms to explore the salad recipe space for novel ingredient combinations. Surprisingly, we discovered that the top ranked recipes from a randomly generated population, as determined by our model, were already of high quality. To validate the quality of our automatically generated salads, we conducted a blind taste test with three computer designed and three human designed salads. The best performing computer salad was competitive with the human salads, but received a lower rating.	Computational Creativity in the Culinary Arts (Abstract Only)	NA	2015
Mindy DeWaal	An important and challenging part of the computer science curriculum is learning to program. A source of aggravation when learning this skill is finding syntactic mistakes in the code commonly referred to as bugs. This learning process is frustrating for new programmers because bug messages given by the compiler are incomprehensible and dominantly occupied by jargon. A group in the UK has started a data logging project called Blackbox to record novice programmers' source code and the related bug messages. In this project, we intend to build better bug messages through the utilization of Blackbox's logged data to anticipate student errors. In the second part of the project, we will test these improved bug messages in a plugin for BlueJ, a popular IDE for instructors to use in CS1 classes.	Data Mining: Building Better Bug Messages (Abstract Only)	NA	2015
Derek M. Duchesne	This project presents an approach to web application security that modifies general penetration testing tools to test for advanced vulnerabilities. As a proof of concept, the ZAP (Zed Attack Proxy) security tool was extended with functionality to find vulnerabilities such as server-side security misconfiguration, to test CABECTPortal (a website housing collaborations between multiple disciplines). By combining the general vulnerability checks built into tools like ZAP and the server-side maintenance checks that are normally conducted manually by system administrators and programmers, this project provides a more tailored approach to security testing that can be applied to any web application, making testing easier and more precise.	Using CABECTPortal as a Case Study to Extend the Capabilities of Penetration Testing Tools (Abstract Only)	NA	2015
Thomas D. Effland	Finding topically relevant content from disparate sources on the Web requires robust techniques due to the variability of sites. A focused web crawler is a type of crawler that attempts to make predictions about page relevance and traverse the web efficiently. In this work, we attempt to design a novel system of focused crawling tailored to identifying and extracting semantically similar topical information from disparate but known seed domains with highly variable structure that do not reference each other. We first extract rich predictive features from web pages. We then utilize Weakly-Supervised Machine Learning techniques to predict the link distance of current pages to target pages by employing two separate Random Forest classifiers that rank the current page and potential relevance gain of hyper-links. We use these page representations and rankings to efficiently tunnel through irrelevant pages and reach target pages with more optimal path traversals.	Focused Mining of University Course Descriptions from Highly Variable Sources (Abstract Only)	NA	2015
Brandon Gottlob	iBeacon technology has the potential to evolve occupancy detection over the traditional passive infrared motion sensor approach due to portability, relatively low cost, and capabilities beyond motion detection alone. This project implements study room occupancy detection in the TCNJ Library using a Raspberry Pi with a PIR sensor and an Estimote Beacon. The scalability of each approach is directly compared by cost, ease of setup and maintenance, and accuracy. Prototype occupancy detection systems that are set up in study room environments provide end-users with a listing of available rooms in real-time through new functionality in the TCNJ Library iOS app. Using iBeacon sensors can bring extra functionality to existing systems and new environments where portability is essential.	Real Time Occupancy Notification: A Comparison Between Passive Infrared and iBeacon Implementations (Abstract Only)	NA	2015
Barry Hamilton, Jr.	Application layer (L7) Distributed Denial of Service attacks are becoming more common and an emerging threat to legitimate sites. The goal of these attacks is to prevent legitimate users from accessing a website. Due to the nature of the attacks, the low rate, and the sophisticated imitation of user behavior from automated bots, it is difficult to diagnose these on time. There is an evolving 'industry' of blackmailing and using these attacks for illegal profit [1]. Even though L7 DDoS attacks are a serious threat, studying and experimenting with them is challenging. Organizations do not share server logs because of privacy concerns. Furthermore, implementing these attacks requires instrumentation and real testbeds in order to produce realistic attacks for analysis. Therefore, it is difficult to evaluate mitigation and detection techniques. Our contribution is twofold. First, we have developed a set of testbeds on the GENI (Global Environment for Network Infrastructure) cloud infrastructure [2] to facilitate research and development of detection and mitigation techniques of L7 DDoS attacks. Second, we have used a library of attacks to perform post forensic analysis and classify L7 DDoS attacks based on their individual characteristics. Our work automates and simplifies log generation of L7 DDoS attacks for research and experimentation, as well as provides criteria to detect abnormal requests using a library of attacks.	Automation of Layer 7 DDoS Attacks and Post Forensic Analysis of Server Logs	NA	2015
Andrew Keenan	Q-Learning is a type of reinforcement learning which learns how to optimize an agent's choice of actions in a given environment based on experience. Typically, Q-Learning is implemented using a lookup table indexed by state/action tuples. For many applications, this approach can be difficult or impossible, as their state space is too large or cannot accurately be captured in a table. A neural network can act as a function approximator for the Q-Learning Table. This reduces learning time and allows for generalization on unvisited states The neural network can be trained using the Back propagation algorithm with the state/action tuple as input and the output of the update rule as the new target value. The weights of the network are updated to produce the correct output value for inputs in the training set. We have implemented this technique in a 2-D simulation of soccer, where agents learn how to maneuver the ball in order to score a goal.	NeuroSoccer: Neural Network Q-Learning (Abstract Only)	NA	2015
Andreas Kellas:Alexander Molnar:Leo St. Amour:Frederick Ulrich:Suzanne J. Matthews	Cyber-crime is becoming alarmingly common through the use of anonymous e-mails. Author attribution helps digital forensics investigators filter through a large set of possible authors and focus traditional investigative techniques on the most probable culprits. A recent promising technique is to construct a write-print for each known author, and compare it to the write-print extracted from the anonymous message(s). A write-print is a unique digital fingerprint created by mining frequent patterns from a particular author's writing style. However, the process for generating a write-print is very slow, making it a poor choice for author attribution situations of a time-sensitive nature such as anonymous threats of attack, exposure, or ongoing harassment. We develop the Parallel Author Verification of E-mail (PAVE) algorithm for determining author write-prints. Our goal is to create a parallel approach that enables the analysis of large collections of e-mail. PAVE employs the Phoenix++ MapReduce framework hybridized with MPI, allowing us to exploit multiple nodes and cores. Our approach is significant because it drastically reduces the run-time complexity required to produce write-prints, and may expedite the process of author identification in time-sensitive situations. Our preliminary results suggest that our algorithm will enable the fast analysis of larger e-mail datasets and may be a potential asset to future investigations.	Parallel Author Verification of E-mail (Abstract Only)	NA:NA:NA:NA:NA	2015
Darrion Jarrell Long:David Heise	Analysis of musical audio is of interest for a variety of tasks within the field of music information retrieval (MIR). One component of MIR is audio event detection, of which onset detection is one component. Audio offset detection is a complementary task to audio onset detection, but this task has received scant attention in the literature. This research will develop an offset detection task that can be included in the Music Information Retrieval Evaluation Exchange (MIREX) 2015 suite of evaluation tasks. The development of this task will provide a tool for researchers to evaluate performance of offset detection algorithms while establishing a baseline of performance for the current state-of-the-art. An existing offset detection algorithm will be utilized for testing prior to public release of the task in Summer 2015. Results of the public evaluation will be presented during the MIREX session at the 2015 International Society for Music Information Retrieval (ISMIR) conference, to be held 26-30 October 2015 in Malaga, Spain.	Development of an Offset Detection Task for MIREX 2015 (Abstract Only)	NA:NA	2015
Melissa Katherine Mulcahy	Mobile devices are becoming an integrated part of every person's life regardless of age. Several studies have shown that falls account for over sixty percent of injuries in adults older than 65. These falls can leave permanent scars and limit the everyday lives of those people. Since people that fall are instructed not to move, it is crucial to provide them with a means to call for help. Systems like LifeAlert¬© have provided means for their clients to call for assistance by pressing a button they wear around their neck. However, if a person who has fallen is rendered unconscious, they are unable to do anything to obtain the assistance they need. This project focuses on developing a mobile application and related algorithms to allow mobile devices to determine if a person has fallen. The algorithms developed in this project takes in real-time data from a smartphone's accelerator and determines whether the sequential readings satisfy the three stages of falling (the free fall stage, collision with the floor stage, and remaining at rest stage). The results of the experiments demonstrate promising hands-free responses to the smartphone user falling. By using a smartphone or similar device, it is possible to autonomously call for assistance without the user having to manually press a button.	Automatic Fall Detection Using Mobile Devices (Abstract Only)	NA	2015
Christina Noe	The WAVER (Web-based Application for Virtual Exercise Regimen) project takes advantage of available 3D motion technology to provide stroke patients with an inexpensive and more accessible alternative to conventional rehabilitation. Specifically, WAVER uses the LEAP device to assist patients who have mobility and dexterity limitations due to a stroke, disability, or even sports-related injury. Patients may face physical adversity in pursuing rehabilitation. Not all patients are conveniently distanced from a medical facility and may find that commuting daily worsens their pain, lightens their wallets, and forces them from the comfort of their homes as they deal with pain and circumstances affected by their disability. The WAVER solution to these problems is a web-based application that utilizes the 3D LEAP Motion sensory controller, which is an affordable and compact device that can be used by any home computer or laptop. WAVER presents exercises to a patient that can be performed by the patient in their own 3D space, which is then tracked by WAVER for on-screen feedback to the patient, as well as the potential to share the results remotely with a therapist.	Web-based Application for Virtual Exercise Regimen (Abstract Only)	NA	2015
Lindsey Press	The level of detail portrayed in graphics environments is steadily increasing, and so does the challenge to enable users to accurately select 3D objects from a graphics scene in real time [2]. From a gaming perspective, complexity in computer graphics has increased drastically because thousands of users can now participate together in games that involve a high frequency of selecting objects. This poses a challenge because each three-dimensional object exists in a native, local coordinate system which will eventually be realistically displayed on a two-dimensional screen and then selected by users. Our project is broken down into two phases -- phase one will focus on the theory and mathematics behind these operations and phase two will evaluate the more efficient picking algorithm, ray casting [3] or color picking [4]. Our criteria for determining the better algorithm is to discover which algorithm is faster and more accurate in complex graphics scenes, with the ultimate goal of minimizing delay responses associated with selection.	Selection in 3D Graphics Enviornments (Abstract Only)	NA	2015
Joseph Rioux:James Vanderhyde	Jumping has been a prevalent and versatile game mechanic from the early days of games like Donkey Kong to our own sophisticated era of smartphone games like Temple Run and entertainment industry giants like the Call of Duty series. While the physical activity of jumping itself seems simple, a lot can change in the translation of this action to its game counterpart. Jumping must serve to make the game playable and enjoyable, and so realism is sacrificed in order to facilitate the particular "feel" that the game developers desire for the physics of their game. This project is a study of jumping as a game mechanic and its implementation in video games, and includes a playable simulation program that allows for hands-on experience of different jump implementations that were studied.	Jumping Implementation in Video Games (Abstract Only)	NA:NA	2015
Dharmin Shah	It is well-known that software maintenance is an arduous task. It is particularly so because of poor design decisions made by software engineers during the development phase. Past research has shown that there are smells in the code that can be used to gauge the quality of the project. Nevertheless, code maintenance due to these research tools is still costly because they are focused on curative solutions rather than preventive measures. Majority of the past research techniques detect code smells after the fact; and the classification of code changes rely on the commit messages written by the developers. However, developers do not always mention the necessary meta-data to determine the changes. The goal of my research is to find a set of design and implementation change categories using abstract syntax trees from the code rather than the commit messages. The categories will help classify the common changes in software projects and identify the resulting unstable regions. A rule-based system will be developed using these regions to recommend the potential improvements required to stabilize the code-base. The result of my research will contribute a toolset that will be used from the start of the development phase to evaluate the stability of the system using software metrics and recommend improvements. This will help project managers mitigate the design and implementation flaws early on during the product life-cycle and reduce the cost during the maintenance phase. Hence, the toolset will have the potential to change the software maintenance paradigm from corrective to preventative measures.	The Backbone Project (Abstract Only)	NA	2015
Austin Cory Bart	As Computational Thinking becomes pervasive in undergraduate programs, new students must be educated in meaningful, authentic contexts that they find both motivating and relatable. I propose working with big data as a novel context for introductory programming, authentic given its importance in diverse fields such as agriculture, history, and more. Big data is considered difficult to use because of its inherent technical obstacles. To overcome these difficulties, I introduce a new project: CORGIS - a "Collection of Real-time, Giant, Interesting, Situated Datasets". The CORGIS project comprises a collection of libraries that provide an interface to big data for students, architectures for rapidly enabling new datasets, and a web-based textbook platform for disseminating relevant course materials. This textbook features an online block-based programming environment, real-time collaborative text editing, and continuous server-side storage. In this poster, I describe the educational theory guiding this work, the novel technolgy created and deployed, and the initial, promising results.	Situating Computational Thinking with Big Data: Pedagogy and Technology (Abstract Only)	NA	2015
Hannah Blau	FrenchPress is an Eclipse plug-in that partially automates the task of giving students feedback on their Java programs. It is designed not for novices but for students taking their second or third Java course: students who know enough Java to write a working program but lack the judgment to recognize bad code when they see it. FrenchPress does not diagnose compile-time or runtime errors, or logical errors that produce incorrect output. It targets silent flaws, flaws the student is unable to identify for herself because nothing in the programming environment alerts her. FrenchPress diagnoses flaws characteristic of programmers who have not yet assimilated the object-oriented idiom. Such shortcomings include misuse of the public modifier and instance variables that function as local variables or class constants. Other rules address the all too common misunderstanding of the boolean datatype. Where it finds a problem, FrenchPress delivers an explanatory message in a vocabulary appropriate to the student's current level of understanding. FrenchPress is easy to use for both students and instructors. The instructor does not have to write a model solution or customized diagnostics for each assignment. The analysis applies to any compilable Java program. The Eclipse plug-in integrates seamlessly into the student's development environment. The student can get feedback as she works, so she can iteratively improve the code before submitting her project.	FrenchPress Gives Students Automated Feedback on Java Program Flaws (Abstract Only)	NA	2015
Saami Rahman	Prefetching is a commonly used technique of improving low-level cache usage that predicts memory requests ahead of time and thus, improves performance by hiding memory latency. Several prefetching algorithms are implemented in hardware. For example, the Intel Core2 processor has 4 different prefetchers, each of which serves a different type of data access pattern. These prefetchers are enabled by default, based on the assumption that the prefetch unit will be triggered when it can successfully prefetch data. However, we have discovered that this assumption is incorrect and can at times hurt performance by up to 11%. We present a simple and easy-to-use framework that determines which hardware-prefetching configuration should be used for a specific workload. The guiding principle of this work that sets it apart from other similar ones is that it fits well within the development process of an average programmer possessing no detailed hardware specific knowledge. For two programs in the PARSEC benchmark, on an Intel Core2 machine, our framework results in an effective speedup of 19% compared to the baseline default setting of using all available prefetchers.	Selecting the Optimal Hardware Prefetching Algorithm for Parallel Workloads (Abstract Only)	NA	2015
Brian P. Railing	Active learning techniques are increasingly used in lower-level Computer Science courses. This work explores the use of active learning techniques in a graduate Computer Science course on computer architecture, where the course enrollment is composed of both undergraduates and graduate students. Initial results are presented on how the two groups of students respond differently to the techniques. In particular, the study includes the effect of using POGIL in place of a subset of lectures, measured through both student responses and test scores.	Using Active Learning Techniques in Mixed Undergraduate / Graduate Courses (Abstract Only)	NA	2015
Mohammed Seyam	Today's Computer Science (CS) students may not give enough attention for the importance of the User Interfaces (UIs) they design for class projects, which becomes even more critical when they design for mobile applications. They also lack the required organization skills that help them manage how they work together. Although agile methods proponents and UI experts follow different guidelines for each to achieve their goals, integrating agile and UI design practices seems to be a promising combination that can help CS students (and developers in general) to better design for various mobile devices (smartphones, tablets, smart watches etc.) as well as to follow a semi-structured development approach to help them manage their programming work. Our research is concerned with studying the various approaches that can be used to combine agile practices with UI design guidelines for designing mobile applications. We are designing a framework that uses Pair Programming (PP) -- as an agile practice to guide the mobile UI design and application development processes. Unlike the previous studies that applied agile methods in classrooms, we are concerned with the special requirements of mobile devices as well as the regular development tasks. Moreover, we are focusing on applying certain practices that we believe to be easier to follow than the broader agile guidelines. Our current work aims at providing CS educators with a new adaptive teaching approach that is more student-oriented instead of the traditional task assignment approaches. Our research will then be extended to include teams from software development companies that are working on mobile application development. We believe that our practice-oriented framework that integrates agile with mobile UI design and development practices has much to do with industry as well as classrooms.	User Interface Design and Agility: Practices for Integration in CS Classrooms (Abstract Only)	NA	2015
