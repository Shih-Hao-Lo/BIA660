Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Elliot B. Koffman	Over the last 45 years as a student and faculty member in Computer Science, I have been involved in learning, teaching, and writing for the CS1 course. I have authored or co-authored textbooks for CS1 in nine different programming languages from Fortran to Java. Each new language was used because of a particular set of features it provided to solve the critical problem in programming or software development of the day. This talk will take a look back at these languages and the extent to which they succeeded. I will also take a look ahead to see what direction CS1 might be taking in the future.	All I really need to know I learned in CS1	NA	2009
Ursula Wolz	NA	Session details: Starting with scratch in CS 1	NA	2009
Ursula Wolz:Henry H. Leitner:David J. Malan:John Maloney	NA	Starting with scratch in CS 1	NA:NA:NA:NA	2009
James Huggins	NA	Session details: Developing problem-solving skills	NA	2009
Katrina Falkner:Edward Palmer	The ability to solve problems is the key to developing software, and it is an ability that can be difficult to learn. Introductory Computer Science students are often taught syntax and semantics, along with simple problems designed to develop logical, structured thinking, but authentic problem-solving skills are rarely developed at these early stages. In this paper we describe an approach to introductory computer science education that addresses student engagement through integrating cooperative learning techniques and authentic problem solving processes throughout each aspect of the curriculum. Over a period of 4 years, the introductory computer science course at the University of Adelaide has been modified to support a cooperative learning style. A three-stage methodology has been implemented in place of traditional lectures to achieve this. The process focuses on observing the application of programming techniques, observing problem solving techniques and then applying cooperative problem solving exercises in the classroom. The results from this change in teaching methodology have been an increase in attendance rates at lectures and practical sessions as well as improved learning outcomes as measured by exam results. Student experience surveys show students have greater motivation for learning and believe they have a better understanding of concepts since the changes have occurred.	Developing authentic problem solving skills in introductory computing classes	NA:NA	2009
Maureen Biggers:Tuba Yilmaz:Monica Sweat	It is common knowledge that enrollments in computer science have plummeted and educators are challenged to find ways to engage and promote success and retention of students while maintaining standards in introductory computer science courses. This study focuses on the implementation of a collaborative, modified peer-led team learning (PLTL) instructional approach in a large sized introductory computer science course. The site is a major southeastern university in the United States where all students are required to take one of three introductory computer science classes. The course version selected for this study specifically targets computer science majors and the study spans three years of data, and involves 591 students. Students who experienced the student-centered instruction and worked in small groups facilitated by a peer leader (treatment) in years 2006-07 and 2007-08 were compared with students who experienced a traditional recitation lecture section (control) in 2005-06. The content and the course owner was the same for all three years. Quantitative data analysis show marked and statistically significant improvements in student performance, for both male and female students. These findings suggest that using undergraduate leaders to implement a peer-led team learning model can be as effective in promoting achievement and retention in computer science education as it has shown to be in math and science classes over the past several years.	Using collaborative, modified peer led team learning to improve student success and retention in intro cs	NA:NA:NA	2009
Kristy Elizabeth Boyer:Robert Phillips:Michael D. Wallis:Mladen A. Vouk:James C. Lester	In the quest to find instructional approaches that benefit student learning, engagement, and retention, evidence suggests providing students with hands-on practice is a worthwhile use of class time. This paper presents results from an exploratory study of two different instructional approaches that were encountered in a study of experienced human tutors working with novice computing students engaged in a programming exercise. No difference in average learning gains was found between a moderate approach, in which students were given control of problem solving nearly half the time, and a proactive approach in which the tutor took initiative nearly three-fourths of the time. Implications of this finding for fine-grained instructional strategy, as well as for broader classroom management decisions, are discussed. This paper also makes the case for the value of one-on-one tutoring studies as an exploratory research methodology for the comparative evaluation of computer science teaching strategies.	The impact of instructor initiative on student learning: a tutoring study	NA:NA:NA:NA:NA	2009
Tammy VanDeGrift	NA	Session details: Listening to students	NA	2009
Brian Hanks:Laurie Murphy:Beth Simon:Ren√©e McCauley:Carol Zander	We collected advice on how to succeed at learning to program from 164 CS1 students at 3 institutions during a "saying is believing" intervention designed to encourage a growth mindset. More students gave general advice (63%) than programming-specific (23%) or attitudinal advice (34%), despite being prompted to encourage future students to develop a growth mindset toward programming. Advice categories and quotes offer educators insights into student beliefs and practices and suggest a framework for considering how best to advise students. We discuss the implications of students offering advice to other students and provide a handout of representative advice intended for distribution to students in introductory programming courses.	CS1 students speak: advice for students by students	NA:NA:NA:NA:NA	2009
Brian Hanks:Matt Brandt	Learning to program continues to be challenging for many students. This paper reports on problem-solving approaches undertaken by pair programming students. We examine reasons why some approaches lead to success while others lead to failure. We also identify some aspects of the Java language that appear to lead to student misconceptions. Finally, we provide suggestions for educators interested in helping students learn successful approaches and avoid unsuccessful ones.	Successful and unsuccessful problem solving approaches of novice programmers	NA:NA	2009
Jill Courte:Cathy Bishop-Clark	We are in a time where computing programs are seeking to differentiate themselves. The ACM suggests that there are five distinct computing disciplines -- Computer Science (CS), Information Technology (IT), Information Systems (IS), Computer Engineering (CE), and Software Engineering (SE). In practice, it seems that there can be extensive overlap between these disciplines. For example, IS is defined by the ACM as computing in an organization context, typically in business while IT is defined as focusing on computing infrastructure and needs of individual users. If each of the different types of programs wishes to identify and attract interested students, it is important to understand if students perceive differences between them. This paper presents the results of a survey to determine if students differentiate between these five disciplines. Computing majors and non-majors were presented with several task descriptions commonly associated with each discipline and asked to identify them as belonging to one of the five disciplines. Data was collected from over 300 students at several different institutions and from a variety of different majors and computing disciplines. The results of the survey are presented along with comparisons of the perceptions of majors and non-majors.	Do students differentiate between computing disciplines?	NA:NA	2009
Afsaneh Minaie	NA	Session details: Networking and mobile apps	NA	2009
Damon Tyman:Nirupama Bulusu:Jens Mache	Wireless sensor networks are revolutionizing the instrumentation of the physical world, across scientific, industrial and military applications. In this paper, we describe our efforts developing and classroom-testing hands-on materials for use in undergraduate-accessible courses on sensor networks. In Winter 2008 at Portland State University, we introduced an in-class laboratory component to a sensor networks course that had previously been entirely lecture-based. For the laboratory exercises, we utilized Sun's Java-programmable Sun SPOT [7] sensor network technology. We found the Sun SPOT based laboratory activities to be quite powerful as a teaching and excitement-fostering tool.	An activity-based sensor networks course for undergraduates with sun spot devices	NA:NA:NA	2009
Muthucumaru Maheswaran:Alexis Malozemoff:Daniel Ng:Sheng Liao:Song Gu:Balasubramaneyam Maniymaran:Julie Raymond:Reehan Shaikh:Yuanyuan Gao	GINI (GINI Is Not Internet) is an open-source toolkit for creating virtual micro Internets for teaching and learning computer networking. It provides lightweight virtual elements for machines, routers, switches, and wireless devices that can be interconnected to create virtual networks. The virtual elements run as unprivileged user-level processes. All processes implementing a virtual network can run within a single machine or can be distributed across a set of machines. The GINI provides a user-friendly GUI-based tool for designing, starting, inspecting, and stopping virtual network topologies. This paper describes the different components of GINI, briefly discusses ways of using the toolkit in a computer networking course, and reports on user feedback on an early (incomplete) version of the toolkit.	GINI: a user-level toolkit for creating micro internets for teaching & learning computer networking	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Stan Kurkovsky	This paper describes using mobile game development as a motivational tool to engage students early in the curriculum. Mobile devices have become an integral part of everyday lives of modern students; using these devices as a part of the coursework may help them see the immediate connections between Computer Science and real-world technology. Compared to traditional game development, programming mobile games is less complex, which enables students with limited programming experience to create playable mobile games within the scope of a single course. Experience presented in this paper may be easily duplicated, but it may be especially useful in the first college-level course for students with CS AP credits.	Engaging students through mobile game development	NA	2009
Ken Surendran	NA	Session details: Breadth n-th	NA	2009
Don Blaheta	"Information and knowledge management" is the title and theme of a course outlined in CC2001 that was designed to cover a diverse range of core CS topics. In this paper we discuss our experiences implementing it: it succeeds at guaranteeing coverage, but also acts as a useful prerequisite for advanced electives, and as a survey course that engages student interest in unexpected topics.	CS262: a breadth-second survey of informatic CS	NA	2009
William W. White:Jerry B. Weinberg	In this paper, we introduce the concept of breadth-last technical elective courses, which are designed to assist undergraduate CS students in integrating their entire core curriculum into a coherent whole at the end of their degree programs. Specific breadth-last courses in intelligent mobile robotics and computer game development have been implemented and are presented here to demonstrate the pedagogical concepts being discussed.	Breadth-last technical electives: integrating the CS core via computer games and mobile robotics	NA:NA	2009
Leen-Kiat Soh:Ashok Samal:Stephen Scott:Stephen Ramsay:Etsuko Moriyama:George Meyer:Brian Moore:William G. Thomas:Duane F. Shell	We report on a recently funded project called Renaissance Computing, an initiative for promoting student participation in computing. We propose a radical re-thinking not only of our core curriculum in CS, but of the role of CS at the university level. In our conception, ''computational thinking'' is neither easily separated from other endeavors nor easily balkanized into a single department. We thus imagine a CS curriculum that is inextricably linked to other domains. Our proposed initiative covers introductory, depth, and capstone courses, targeting both CS majors and minors. It is also aimed to develop interdisciplinary CS courses in sciences, engineering, arts, and humanities. Furthermore, the framework embraces collaborative learning to help improve learning.	Renaissance computing: an initiative for promoting student participation in computing	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Lillian Cassel	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Lillian N. Cassel:Richard H. Austing:Elliott Koffman	This session proposal is part of the recognition of 40 years of SIGCSE. We will look at the organization itself, how it came to be and where it might be going. It will be an interactive session with the participation of the audience informing the SIGCSE leadership of appropriate directions for the future of this group that has been so important to computing education.	SIGCSE: from the beginnings to a bright future	NA:NA:NA	2009
Daniel D. Garcia	NA	Session details: Special session	NA	2009
Daniel D. Garcia:Robb Cutler:Zachary Dodds:Eric Roberts:Alison Young	At the SIGCSE Symposium in 2007, the ACM Education Board organized a well-attended special session exploring the crisis in computing education and its underlying causes. The idea behind the session was to provide a forum at which a larger and more broadly representative subset of the education community could engage in direct dialogue with the members of the ACM Education Board and Education Council, who are charged with developing educational policy for the ACM as a whole. Last year, we extended that dialogue and explored concrete strategies for emphasizing the "passion, beauty, joy, and awe" (PBJA) of computing about which Grady Booch spoke so eloquently in his 2007 keynote address. The extremely positive feedback we received served as motivation to continue the discussion this year, to allow us to hear from new voices and receive updates on the current state of the crisis. It is increasingly clear that students today find less joy in the process of creating software than their predecessors did a generation ago. At the same time, these skills have become increasingly important, forcing companies to cast an ever widening net in their search for people with the necessary skills and training. Continued progress in the computing disciplines--and indeed the economic health of a society that relies increasingly on computing technology--can continue only if we can encourage an even larger number of students to pursue the many opportunities that careers in computing provide.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, continued	NA:NA:NA:NA:NA	2009
Stephen Cooper	NA	Session details: Special session	NA	2009
Stephen Cooper:Joan Peckham:Harriet Taylor	NA	Exploring NSF funding opportunities in EHR and CISE	NA:NA:NA	2009
Joseph Urban	NA	Session details: Panel session	NA	2009
Joseph E. Urban:Jesse M. Heines:Edward A. Fox:Harriet G. Taylor	NA	Panel on revitalized undergraduate computing education	NA:NA:NA:NA	2009
Sarah Monisha Pulimood	NA	Session details: Quotidian pedagogy	NA	2009
Janet Davis	I report on my experiences with Just-in-Time Teaching (JiTT) in two systems courses and two design courses as a new instructor at a small liberal arts college. My purposes are threefold: to further raise awareness of JiTT in the computer science education community, to show instructors can achieve JiTT's goals with simple technology and preparation on the fly, and to consider strengths and limitations of the approach, particularly for new faculty. My experience has been very positive: classes have been fun, engaging, and conversational. Students have reported that they come to class better prepared and appreciate the opportunity to ask and discuss questions before class. Where others have warned of the high workload with this approach, my experience is that the workload is reasonable compared to preparing a new course from scratch; the approach discourages some types of overpreparation. For these reasons, I would recommend the approach for other new instructors.	Experiences with just-in-time teaching in systems and design courses	NA	2009
Chris Bennett:Timothy Urness	Many CS1 courses lack a breadth in coverage of computing-related topics and do not actively engage in non-programming computer science topics. In addition, many introductory (and advanced) courses fail to help students develop oral communication skills. In this paper, we describe our experience with addressing these issues in CS1 courses at two different institutions through the use of brief, daily student presentations. Not only can this help recruitment and retention, but it helps to develop more well-rounded students. We also describe the results of a survey students take before and after the course to evaluate how participating in the course can affect attitudes and beliefs about computer science.	Using daily student presentations to address attitudes and communication skills in CS1	NA:NA	2009
Edward F. Gehringer:Carolyn S. Miller	Active-learning exercises are an effective use of class time to bring about desired learning outcomes. Instead of listening to a lecture, students are engaged in tasks that allow them to discover new knowledge, or apply what they have just learned. A barrier to wide usage of active-learning exercises is the need to design them, since few are available in textbooks, technical papers, or on the Web. The work reported in this paper demonstrates that students can design active-learning exercises that are worthy of being used in CS1 and CS2. This frees the instructor from having to write all the exercises him/herself. This paper makes three contributions: a methodology for creating student-generated active-learning exercises, several exercises for teaching difficult concepts in CS1 and CS2, and guidance about the kinds of active-learning exercises that students will enjoy and learn most from.	Student-generated active-learning exercises	NA:NA	2009
Madeleine Schep	NA	Session details: Recruitment	NA	2009
Amy Bruckman:Maureen Biggers:Barbara Ericson:Tom McKlin:Jill Dimond:Betsy DiSalvo:Mike Hewner:Lijun Ni:Sarita Yardi	Computing education suffers from low enrollment and a lack of diversity. Both of these problems require changes across the entire computing education pipeline. The "Georgia Computes!" alliance, funded by the National Science Foundation's Broadening Participation in Computing program, seeks to improve the computing education pipeline in Georgia. "Georgia Computes!" is having a measurable effect at each stage of the pipeline, but has not yet shown an impact across the whole pipeline.	"Georgia computes!": improving the computing education pipeline	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Patricia Morreale:Stan Kurkovsky:George Chang	This paper presents a methodology for increasing undergraduate Computer Science (CS) major enrollment at comprehensive public universities, particularly those that have first generation college students or students from underrepresented populations in professional computer science in the United States. While there has been significant prior discussion of undergraduate recruiting to increase major enrollment in CS, this is the first identification of a systematic approach to recruiting distinct undergraduate student populations into the CS major. Nationally, highly selective and selective universities and colleges have worked within their student populations to increase major enrollments, while CS departments at comprehensive public universities primarily focused on regional recruiting have also worked to identify and increase CS major enrollments. The approach outlined here addresses regional recruiting for undergraduate majors in CS and has been used at two public universities. The resulting methodology serves as a template for any department or faculty member seeking to increase undergraduate enrollment in CS.	Methodology for successful undergraduate recruiting in computer science at comprehensive public universities	NA:NA:NA	2009
Brad Richards	This paper presents an analysis of the data on representation of women in US liberal arts computer science departments, using 10 years' worth of IPEDS data. What began as a search for departments with exemplary representation ended with the conclusion that the representation data is too unstable to be a useful measure of success: The correlation between average representation values in consecutive five-year periods is small, only r=0.156, and not significantly different from zero (p=0.143, t=1.477) for this set of institutions. Other metrics and sample populations are considered with similar results. This result has important implications for studies assessing the impact of departmental interventions on the representation of women, as well as research on the factors that influence representation.	Representation of women in CS: how do we measure a program's success?	NA	2009
Douglas Harms	NA	Session details: Distributed computing for the classroom	NA	2009
Jeannie R. Albrecht	Distributed applications have become a core component of the Internet's infrastructure. However, many undergraduate curriculums, especially at small colleges, do not offer courses that focus on the design and implementation of distributed systems. The courses that are offered address the theoretical aspects of system design, but often fail to provide students with the opportunity to develop and evaluate distributed applications in real-world environments. As a result, undergraduate students are not as prepared as they should be for graduate study or careers in industry. This paper describes an undergraduate course in Distributed Systems that not only studies the key design principles of distributed systems, but also has a unique emphasis on giving students hands-on access to distributed systems through the use of shared computing testbeds, such as PlanetLab and GENI, and open-source technologies, such as Xen and Hadoop. Using these platforms, students can perform large-scale, distributed experimentation even at small colleges.	Bringing big systems to small schools: distributed systems for undergraduates	NA	2009
Richard A. Brown	The potential benefits of data-intensive scalable computing (DISC) in CS education are considered in the context of a small college with an active student-operated Beowulf cluster initiative. The map-reduce computational model, of great importance in industry, is reviewed, and the Hadoop implementation of that model is connected to specific courses throughout the undergraduate CS curriculum. Concerns when running a local Hadoop-capable cluster at a small college are identified.	Hadoop at home: large-scale computing at a small college	NA	2009
Justin Cappos:Ivan Beschastnikh:Arvind Krishnamurthy:Tom Anderson	Cloud computing is rapidly increasing in popularity. Companies such as RedHat, Microsoft, Amazon, Google, and IBM are increasingly funding cloud computing infrastructure and research, making it important for students to gain the necessary skills to work with cloud-based resources. This paper presents a free, educational research platform called Seattle that is community-driven, a common denominator for diverse platform types, and is broadly deployed. Seattle is community-driven -- universities donate available compute resources on multi-user machines to the platform. These donations can come from systems with a wide variety of operating systems and architectures, removing the need for a dedicated infrastructure. Seattle is also surprisingly flexible and supports a variety of pedagogical uses because as a platform it represents a common denominator for cloud computing, grid computing, peer-to-peer networking, distributed systems, and networking. Seattle programs are portable. Students' code can run across different operating systems and architectures without change, while the Seattle programming language is expressive enough for experimentation at a fine-grained level. Our current deployment of Seattle consists of about one thousand computers that are distributed around the world. We invite the computer science education community to employ Seattle in their courses.	Seattle: a platform for educational cloud computing	NA:NA:NA:NA	2009
Martha Kosa	NA	Session details: CS1/2 transitions	NA	2009
Richard J. Enbody:William F. Punch:Mark McCullen	How suitable is a Python-based CS1 course as preparation for a C++-based CS2 course? After fifteen years of using C++ for both CS1 and CS2, the Computer Science Department at Michigan State University changed the CS1 course to Python. This paper examines the impact of that change on the second course in the sequence, CS2, which kept C++ as its primary language. We report results on a CS2 class which had a mixture of students who had used either C++ or Python from our CS1 course. The CS2 class covered the same topics as previously, though with some changes, and even gave the same final exam as a previous offering. Independent samples t-tests were used to compare students from the Python group with students from the non-Python group on three outcomes: final exam grade, programming projects scores, and final grade for the course. The main result was that there were no significant differences between the groups for all three outcomes. In addition, multiple regression analysis showed that students' past performance (overall GPA) in the University predicted final grades, final exam scores, and programming project scores for the course, but there was no effect of the programming language feature: Python or non-Python. We feel this shows that the Python-based CS1 course prepared students for the C++-based CS2 course as well as the C++-based CS1 course did---while exposing them to a different, powerful and useful language.	Python CS1 as preparation for C++ CS2	NA:NA:NA	2009
Marty Stepp:Jessica Miller:Victoria Kirst	Web programming is increasing rapidly in importance at the university level, yet there is no consensus about when and how it should be incorporated into the computer science curriculum. This paper describes our results in teaching an experimental introductory web programming course at the University of Washington that has had great success in attracting large numbers of students from inside and outside the computer science major. The course requires CS1 as a prerequisite, striking a good balance between making the course open to non-majors but also more rigorous for students with programming background. We classify the course as "CS 1.5" because many of our students take it between CS1 and CS2. We use our evaluation data to argue that a web programming course at this level leads to a great deal of student interest and enthusiasm, broadens the reach of computer science, and provides a valuable service to other departments.	A "CS 1.5" introduction to web programming	NA:NA:NA	2009
Judith Gal-Ezer:Tamar Vilner:Ela Zur	The ongoing debate among Computer Science educators about the advantages and disadvantages of the shift from the procedural to the Object-Oriented paradigm usually relates to the introductory course. Indeed, we were also concerned when in our institute we decided to implement this shift in our introductory course and started to teach Java, instead of a procedural paradigm. In our previous study we saw that the effect of the shift did not lower the achievements of students taking the CS1 course. Furthermore, we wanted to be equally sure that this was the case when students take Data Structures courses. This is the focus of the study presented in this paper. The results show that there is no significant difference in the achievements of students who came from different paradigm backgrounds. This encouraging result probably relates to the fact that our CS1 course focuses on the fundamentals of introductory Computer Science and does not only emphasize the language aspects.	Has the paradigm shift in CS1 a harmful effect on data structures courses: a case study	NA:NA:NA	2009
Curt White	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Curt M. White	This special session will present an historical look at all past SIGCSE conferences, beginning with 2008. If possible, the conference chair, from each conference will present a brief synopsis of his/her conference. This synopsis may include a photo of the conference site, the number of attendees, the paper acceptance ratio, any special awards and the awardees, the "theme" of the conference, any special issues relevant at that conference, and one or two "interesting" events that occurred during that conference.	An historical look at the SIGCSE conference	NA	2009
Kim Bruce	NA	Session details: Special session	NA	2009
Mark Bailey:Kim Bruce:Kathleen Fisher:Robert Harper:Stuart Reges	This special session will present a summary of the recommendations of the First SIGPLAN Workshop on Undergraduate Programming Language Curricula, held at Harvard University in May, 2008. The purpose of the workshop was to generate new recommendations for programming languages topics to be learned by all undergraduate CS majors. In this special session we will present a summary of the curriculum recommendations, why they were made, and ways of incorporating them into undergraduate CS curricula.	Report of the 2008 SIGPLAN programming languages curriculum workshop: preliminary report	NA:NA:NA:NA:NA	2009
Gregory Hislop	NA	Session details: Panel session	NA	2009
Gregory W. Hislop:Heidi J.C. Ellis:Allen B. Tucker:Scott Dexter	This panel will discuss issues and methods for incorporating free and open source software (FOSS) in computer science education. The panelists are investigating approaches to student participation in FOSS that produce results that are contributed to the FOSS community and actually used by others.	Using open source software to engage students in computer science education	NA:NA:NA:NA	2009
Daniel Ernst	NA	Session details: Panel session	NA	2009
Daniel Ernst:Barry Wittman:Brian Harvey:Tom Murphy:Michael Wrinn	NA	Preparing students for ubiquitous parallelism	NA:NA:NA:NA:NA	2009
Maureen Doyle	NA	Session details: Test-driven pedagogical approaches	NA	2009
Viera K. Proulx	Test-Driven Design (TDD) has been shown to increase the productivity of programming teams and improve the quality of the code they produce. However, most of the introductory curricula provide no introduction to test design, no support for defining the tests, and do not insist on a comprehensive test coverage that is the driving force of the TDD. This paper presents a curriculum, pedagogy, and the software support for introductory object-oriented program design that uses the TDD consistently from the very beginning. The testing software does not increase the program complexity and is designed to work with the simplest programs. It has been used by hundreds of students at several colleges and is freely available on the web. Our experiences show that besides improving the quality of code students produce, TDD combined with the novice-appropriate test libraries reinforces students' understanding of the object oriented program design.	Test-driven design for introductory OO programming	NA	2009
Joel Adams	Software testing is an increasingly important topic in engineering reliable software systems, and test-driven development is an increasingly popular methodology for building reliable systems. However, most software engineering instructors' courses are already very full, so that increasing coverage of testing in those courses can only occur at the expense of another topic. In this paper, we argue that testing should be introduced early in the CS curriculum, that the Data Structures (CS2) course is an especially natural place to emphasize unit testing and test-driven development, and that doing is a way to revitalize the CS2 course.	Test-driven data structures: revitalizing CS2	NA	2009
Chetan Desai:David S. Janzen:John Clements	Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.	Implications of integrating test-driven development into CS1/CS2 curricula	NA:NA:NA	2009
Jeanette Allen	NA	Session details: Retention	NA	2009
Lecia J. Barker:Charlie McDowell:Kimberly Kalahar	This paper describes an exploratory study to identify which environmental and student factors best predict intention to persist in the computer science major. The findings can be used to make decisions about initiatives for increasing retention. Eight indices of student characteristics and perceptions were developed using the research-based Student Experience of the Major Survey: student-student interaction; student-faculty interaction; collaborative learning opportunities; pace/workload/prior experience with programming; teaching assistants; classroom climate/pedagogy; meaningful assignments; and racism/sexism. A linear regression revealed that student-student interaction was the most powerful predictor of students' intention to persist in the major beyond the introductory course. Other factors predicting intention to persist were pace/workload/prior experience and male gender. The findings suggest that computer science departments interested in increasing retention of students set structured expectations for student-student interaction in ways that integrate peer involvement as a mainstream activity rather than making it optional or extracurricular. They also suggest departments find ways to manage programming experience gaps in CS1.	Exploring factors that influence computer science introductory course students to persist in the major	NA:NA:NA	2009
J. McGrath Cohoon:Zhen Wu:Jie Chao	Using longitudinal survey data from women in the CRA-W Graduate Cohort program, we measured the prevalence of observed or experienced sexism and its impact on departure from Computer Science and Computer Engineering (CSE) doctoral programs. Our data suggest that sexist behavior is perceived less often by these women than it is by women in general. In addition, few of the women who observe sexism are motivated by it to think of leaving their CSE doctoral programs. Nevertheless, when their reason for thinking of leaving is due to sexism they observed or experienced, the odds of women actually departing are at least 21 times greater than if they thought of leaving for any other reason.	Sexism: toxic to women's persistence in CSE doctoral programs	NA:NA:NA	2009
Susan Horwitz:Susan H. Rodger:Maureen Biggers:David Binkley:C. Kolin Frantz:Dawn Gundermann:Susanne Hambrusch:Steven Huss-Lederman:Ethan Munson:Barbara Ryder:Monica Sweat	This paper describes the implementation and evaluation of a program that uses active recruiting and peer-led team learning to try to increase the participation and success of women and minority students in undergraduate computer science. These strategies were applied at eight universities starting in the fall of 2004. There have been some impressive results: We succeeded in attracting under-represented students who would not otherwise have taken a CS course. Evaluation shows that participation in our program significantly improves retention rates and grades, especially for women. Students in the program, as well as the students who served as peer leaders, are uniformly enthusiastic about their experience.	Using peer-led team learning to increase participation and success of under-represented groups in introductory computer science	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Dean Hendrix	NA	Session details: Capturing and analyzing student artifacts	NA	2009
Roy P. Pargas:Samuel Bryfczynski	This paper presents and discusses a web-based software tool called GraphPad designed to facilitate interactivity in a CS2 or CS7 (data structures) course in which Tablet PCs or WACOM tablets are available. We describe how GraphPad enables an instructor to: establish a temporary network with the instructor's Tablet as server and the students' Tablets as clients, broadcast instructions and collect student Ink responses, evaluate student submissions and distribute evaluations with a single button-click, use student submissions as examples to guide lecture, and save student submissions in a database. The saved submissions may then be reviewed individually, tagged for errors, and analyzed statistically. An immediate goal is to use GraphPad to deliver CS2/CS7 course content more effectively. A long term goal is to use data collected by GraphPad to help understand the thought process of the CS2/CS7 student for the purpose of identifying students at risk early in order to provide intervention assistance.	Using ink to expose students' thought processes in CS2/CS7	NA:NA	2009
Anthony Allevato:Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Dynamic memory management and the use of pointers are critical topics in teaching the C++ language. They are also some of the most difficult for students to grasp properly. The responsibility of ensuring that students understand these concepts does not end with the instructor's lectures---a library enhanced with diagnostics beyond those provided by the language's run-time system itself is a useful tool for giving students more detailed information when their code fails. We have designed such a toolkit, Dereferee, which students can incorporate into their code with minimal intrusion into the learning process. To demonstrate its effectiveness, we examine C++ code from students in a course that relied solely on the built-in memory management behavior of the language, without any significant additional diagnostic or debugging facilities. We instrument this code with Dereferee in order to explore the causes of errors that result in program crashes and to expose hidden faults that previously lay undetected. Dereferee provided enhanced diagnostics for bugs in 63% of student submissions, and pinpointed the source of 83% of abnormal program terminations. 95% of the students would have received extra diagnostic help from using Dereferee.	Dereferee: exploring pointer mismanagement in student code	NA:NA:NA	2009
Christian Murphy:Gail Kaiser:Kristin Loveland:Sahar Hasan	It is difficult for instructors of CS1 and CS2 courses to get accurate answers to such critical questions as "how long are students spending on programming assignments?", or "what sorts of errors are they making?" At the same time, students often have no idea of where they stand with respect to the rest of the class in terms of time spent on an assignment or the number or types of errors that they encounter. In this paper, we present a tool called Retina, which collects information about students' programming activities, and then provides useful and informative reports to both students and instructors based on the aggregation of that data. Retina can also make real-time recommendations to students, in order to help them quickly address some of the errors they make. In addition to describing Retina and its features, we also present some of our initial findings during two trials of the tool in a real classroom setting.	Retina: helping students and instructors based on observed programming activities	NA:NA:NA:NA	2009
John Rabung	NA	Session details: Computational thinking across disciplines	NA	2009
Susanne Hambrusch:Christoph Hoffmann:John T. Korb:Mark Haugan:Antony L. Hosking	This paper describes the development and initial evaluation of a new course ``Introduction to Computational Thinking'' taken by science majors to fulfill a college computing requirement. The course was developed by computer science faculty in collaboration with science faculty and it focuses on the role of computing and computational principles in scientific inquiry. It uses Python and Python libraries to teach computational thinking via basic programming concepts, data management concepts, simulation, and visualization. Problems with a computational aspect are drawn from different scientific disciplines and are complemented with lectures from faculty in those areas. Our initial evaluation indicates that the problem-driven approach focused on scientific discovery and computational principles increases the student's interest in computing.	A multidisciplinary approach towards computational thinking for science majors	NA:NA:NA:NA:NA	2009
Hong Qin	Modern biology has transformed from an insular entity into an interdisciplinary science, which in turn demands interdisciplinary and cross-disciplinary training for future work force in biology and life sciences. Computational thinking is a way of thinking that uses concepts and methodologies of computing to address questions in a broad range of subjects, and as such, computational thinking offers an important skill set in modern sciences. Despite its importance, the concept of computational thinking has generally been side-stepped in undergraduate biology education. Many students in life sciences are often weak in quantitative/computing skills and tend to avoid computing-orient courses. To address these issues, we incorporated computational thinking into a bioinformatics course for undergraduate life science majors. We developed comprehensive computer laboratory exercises that offer hands-on learning experience for the targeted student pool, and employed peer-assisted collaborative learning environment. Preliminary results of these explorative efforts will be helpful for others to teach computational thinking to biology students.	Teaching computational thinking through bioinformatics to biology students	NA	2009
Owen Astrachan	Ponder means "to weigh in the mind with thoroughness and care" [31]. Pander means "to cater to the weaknesses and base desires of others" [31]. We report on a course we have designed and delivered over a six year period. The course was originally designed as a technical writing course for majors, but has evolved into a non-major's version whose enrollment ranks it as one of the three most highly-enrolled and thus arguably most popular courses for undergraduates at our university. We have worked diligently to ensure that students ponder the topics and problems that comprise the material for the course --- and the material is deeply technical at many levels. We have also pandered to student needs in meeting curriculum requirements, offering the course at a time convenient for athletes and others, and using popular media when possible. We started with the goal of engendering interest and passion for computer science and how it affects the world. We report on our efforts to attain this goal while keeping material appropriately technical. We claim our students are engaged in a different type of computational thinking than that espoused in [32, 5, 15]. For the purposes of this paper and discussion we call our approach pander-to-ponder. We provide examples and illustrations of the material we cover, relate it to similar courses at other institutions, and show how we use problems to motivate learning. In the work we report on here the learning is specific to understanding how contributions from computer science are changing the world.	Pander to ponder	NA	2009
Nell Dale	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Nell Dale:Andrew McGettrick:John Impagliazzo:Robert Aiken:Elliot Koffman:Jim Leisy	NA	A historical look at curricula and materials	NA:NA:NA:NA:NA:NA	2009
Ursula Wolz	NA	Session details: Panel session	NA	2009
Ursula Wolz:Tiffany Barnes:Jessica Bayliss:Jamie Cromack	NA	Girls do like playing and creating games	NA:NA:NA:NA	2009
Jon Beck	NA	Session details: Panel session	NA	2009
Jon Beck:Vicki L. Almstrum:Heidi J.C. Ellis:Massood Towhidnejad	NA	Best practices in software engineering project class management	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Craig Mundie	Computing is undergoing a major paradigm shift. Radical new approaches to hardware and software will transform our online and offline lives, seamlessly combining the power of the internet with a world of devices. Craig Mundie, Microsoft's chief research and strategy officer, will discuss the possibilities and show how close we are to realizing them.	Rethinking computing	NA	2009
Kelvin Sung	NA	Session details: Panel session	NA	2009
Mark Lewis:Scott Leutenegger Leutenegger:Michael Panitz:Kelvin Sung:Scott A. Wallace	NA	Introductory programming courses and computer games	NA:NA:NA:NA:NA	2009
Zachary Kurmas	NA	Session details: Graphical frameworks for CS1	NA	2009
Michael H. Goldwasser:David Letscher	We describe cs1graphics, a new Python drawing package designed with pedagogy in mind. The package is simple enough that students can sit down and make use of it from the first day of an introductory class. Yet it provides seamless support for intermediate and advanced lessons as students progress. In this paper, we discuss its versatility in the context of an introductory course. The package is available at www.cs1graphics.org.	A graphics package for the first day and beyond	NA:NA	2009
Ben Stephenson:Craig Taube-Schock	This paper describes a new tool for introducing computer graphics and multimedia applications into first year, called QuickDraw, and our experience using it. QuickDraw provides an easy to use language and platform independent interface which permits students to create multimedia applications beginning with their first assignment in an introductory computer science course. QuickDraw has been carefully designed to avoid complex "magical" statements in order to setup, use, or tear down the multimedia environment, making it an appropriate tool for use with students with no prior programming experience. As instructors, we have found that QuickDraw effectively engages students by allowing them to create visually impressive programs with minimal complexity, while continuing to allow us to effectively teach fundamental computer science concepts.	QuickDraw: bringing graphics into first year	NA:NA	2009
Andrew Luxton-Reilly:Paul Denny	Computer games are widely used in programming assignments to motivate students. Traditionally, these have been text-based games such as hangman, but as Java has become widespread, the use of graphics and graphical games has increased correspondingly. We report on a framework used as scaffolding to help students understand how to design and implement a variety of interactive games. We share our experiences using this framework for assignments over a number of years.	A simple framework for interactive games in CS1	NA:NA	2009
Jill Pala	NA	Session details: Engaging K-12	NA	2009
Michelle Craig:Diane Horton	In order to address the under-representation of women in Computer Science, we have created a program for middle-school girls that specifically aims to change their attitudes about CS and encourages them to see it as a potential career. Our assessment of the program shows that it did indeed have a significant, positive impact and suggests that this was still in effect three months later. This paper describes the program and its assessment, and makes suggestions for those considering offering a similar program.	Gr8 designs for Gr8 girls: a middle-school program and its evaluation	NA:NA	2009
Mary Beth Rosson:Anastassia Ioujanina:Timothy Paone:Gretel Sheasley:Hansa Sinha:Craig Ganoe:John M. Carroll:Jan Mahar	We describe work on developing workshop activities that are part of wConnect, a project that is building an online community of women in computer and information science. The workshops are designed by college women for high school girls, with hands-on construction of dynamic web sites. Because of limited workshop time, the activities use scaffolding to help girls achieve the in-tended learning objectives. In this paper we describe the design of the activities, their formative evaluation in a series of four work-shops, and how we are using these results in the larger project.	A scaffolded introduction to dynamic website development for female high school students	NA:NA:NA:NA:NA:NA:NA:NA	2009
Tomohiro Nishida:Susumu Kanemune:Yukio Idosaka:Mitaro Namiki:Tim Bell:Yasushi Kuno	"Computer Science (CS) Unplugged" is an educational method for introducing non-specialists to concepts of CS through hands-on activities that don't require the use of a computer. Often the deeper concepts of CS have been considered as being too difficult for elementary and middle school students, and many educators teaching "IT" are not even aware of the richness of the topic. CS Unplugged methods have been used successfully with students of a wide range of ages. In this paper, we analyze the structure of CS Unplugged activities to identify the elements that make them work well. Based on the analysis, we propose a design pattern which will be useful as a guideline for developing new activities, and to revise existing ones. We also describe our experience developing original teaching material, using the pattern as a benchmark for evaluation.	A CS unplugged design pattern	NA:NA:NA:NA:NA:NA	2009
Jaime Nino	NA	Session details: Secure systems	NA	2009
Joel Brynielsson	To authorize and initiate necessary investments and enforce appropriate policies and procedures, decision-makers need to have at least a fair understanding of computer security fundamentals. This paper presents the course design and the laboratory settings that have been developed for, and used within, the high rank officer curriculum at the Swedish National Defence College. The developed course looks at computer security from an attack versus defend viewpoint, meaning that computer attacks are studied to learn about prevention and self-defense. The paper discusses the pedagogical challenges related to education of high rank officers and similar personnel in light of recently-held courses and contrasts the course relative to similar undertakings. A standpoint taken is that computer security is best taught using hands-on laboratory experiments focusing on problem solving assignments. This is not undisputed since, e.g., high rank officers are busy people who are not fond of getting stuck learning about the peripherals.	An information assurance curriculum for commanding officers using hands-on experiments	NA	2009
Li Yang	Hands-on laboratory experiences are essential critical for students to understand concepts and gain real-world insights in database security and auditing. We are developing a set of hands-on labs to integrate theories of database security into practices. Our designed labs do not require purchasing any commercial software or pre-configuration. Each lab includes objectives, results, and resources to help students to understand database security concepts including access control, virtual private database, and database auditing etc. We use two major database products (Microsoft SQL Server and Oracle 10g) to design and implement our labs.	Teaching database security and auditing	NA	2009
Joel Wein:Kirill Kourtchikov:Yan Cheng:Ron Gutierez:Roman Khmelichek:Matthew Topol:Chris Sherman	Complex distributed systems are increasingly important in modern computer science, yet many undergraduate curricula do not give students the opportunity to develop the skill sets necessary to grapple with the complexity of such systems. We have developed and integrated into an undergraduate elective course on parallel and distributed computing a teaching tool that may help students develop these skill sets. The tool uses virtualization to ease the burden of resourcing and configuring complex systems for student study, and creates varied "firefighting" gaming scenarios in which students compete to keep the system up and running in the presence of multiple issues. Preliminary experience indicates that (1) students find the tool engaging and (2) it is a manageable way in which to give students a novel perspective on interaction with complex distributed systems.	Virtualized games for teaching about distributed systems	NA:NA:NA:NA:NA:NA:NA	2009
Nancy Kinnersley	NA	Session details: Shaking up our worldview	NA	2009
Kirby McMaster:Brian Rague:Steven Hadfield	Many Computer Science educators have campaigned to increase mathematical content in the computing curriculum. However, mathematical concepts are often presented in a manner that conflicts with the general mental framework, or gestalt, of CS students. Fortunately, there is more than one gestalt in mathematics. In previous research, we developed two scales for measuring mathematical gestalt in books-a Logical Math scale and a Computational Math scale. In this paper, we apply our two scales to current Computer Theory books to assess the relative emphasis these books give to each gestalt. Our findings have relevance in the development of approaches for teaching mathematical topics in computer courses, especially Computer Theory courses.	Two mathematical gestalts for computer theory	NA:NA:NA	2009
Duane Buck:David J. Stucki	The most commonly stated definition of abstract data type (ADT) is that it is a domain of values and the operations over that domain. So, for example, a language's built-in types, like int are seen to be ADTs. It is our opinion that a pure interpretation of this definition yields a semantics in which using an ADT is the same as using built-in types: the operations are side effect free and there is no concern over alias, shallow copy or synchronization problems. Unfortunately, the term abstract data type has over time been associated with at least three distinct meanings, and those incompatible definitions have often been conflated, causing confusion to students and textbook authors alike. We believe that this has resulted in a loss of appreciation for the value-based semantics of ADTs.	The hidden injuries of overloading 'ADT'	NA:NA	2009
James J. Lu:George H.L. Fletcher	Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency? We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content.	Thinking about computational thinking	NA:NA	2009
Robert McCartney	NA	Session details: Special session	NA	2009
Jonas Boustedt:Robert McCartney:Katherine Deibel:Jim Huggins:Beth Simon:Suzanne Westbrook:The Mystery Presenter	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA	2009
Renee McCauley	NA	Session details: Special session	NA	2009
Andrew McGettrick:Ren√©e McCauley:Richard LeBlanc:Heikki Topi	NA	Report on the ACM/IEEE-CS undergraduate curricula recommendations	NA:NA:NA:NA	2009
Orit Hazzan	NA	Session details: Special session	NA	2009
Judith Gal-Ezer:Orit Hazzan:Noa Ragonis	This special session examines frameworks for the preparation of high school computer science (CS) teachers from the Israeli perspective. Specifically, several Israeli CS teacher preparation programs and their components are presented. The presentation includes both a general overview and a detailed description of the actual implementation of such programs. This bipolar presentation, we suggest, provides practical guidelines with respect to CS teacher preparation, both for policy makers and for faculty members who wish to establish a CS teacher preparation program at their universities.	Preparation of high school computer science teachers: the Israeli perspective	NA:NA:NA	2009
Khadija Stewart	NA	Session details: Graphical introduction to programming in K-12	NA	2009
Susan H. Rodger:Jenna Hayes:Gaetjens Lezin:Henry Qin:Deborah Nelson:Ruth Tucker:Mercedes Lopez:Stephen Cooper:Wanda Dann:Don Slater	This paper describes the integration of the Alice 3D virtual worlds environment into a diverse set of subjects in middle school, including the development of tutorials, example worlds and lesson plans. In the summer of 2008 our experiences with middle school teachers included three-weeks of training in Alice and guidance in the development of lesson plans. Our experiences with middle school students involved two one-week summer camps of instruction in Alice. We found both the teachers and the students strongly engaged with Alice. The teachers created lesson plans with Alice worlds to interactively teach a topic and other lesson plans in which students build an Alice world on a particular topic either from scratch or using a template world. The students in the Alice camps had both instruction in Alice and free time to develop Alice worlds of their choice. We found that the students used a large variety of basic Alice concepts and computer science concepts in the worlds they built in their free time.	Engaging middle school teachers and students with alice in a diverse set of subjects	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Joey C.Y. Cheung:Grace Ngai:Stephen C.F. Chan:Winnie W.Y. Lau	To address the unique demands and challenges of educational computing, various kinds of environments, including graphics-rich and textual environments, have been proposed for use in introductory courses to provide students with a rich and interesting learning environment. In our experience, students in Grade 7 and younger respond best to the graphics environments while senior high school students prefer a conventional textual programming environment. Clearly, this leaves a gap at Grade 11-13, with students often on the one hand finding the graphics-based environments too limited and on the other finding the textual environments too difficult. In this paper, we propose a text-enhanced graphical programming environment which is innovative and interactive, and designed for junior high students with no programming experience. This environment allows students to design their own creative stories or programs. They build their programs using drag-and-drop iconic blocks, but unlike other, similar icon-based programming languages, they are also presented with the syntax of the actual program they are constructing in real-time. Once a particular icon block has been dropped in the programming area, the syntax statements corresponding to that block is immediately generated and presented to the user. The environment also allows them to modify the code without any limitations. Our results show that our textual-graphical hybrid environment has a positive impact on the learning experience of the students.	Filling the gap in programming instruction: a text-enhanced graphical programming environment for junior high students	NA:NA:NA:NA	2009
Gary Kacmarcik:Sylvie Giral Kacmarcik	This paper describes our work motivating a group of students (grades 5-8) to learn real-world computer programming by introducing them to homebrew development for the Nintendo Gameboy Advance (GBA) and DS (NDS) systems using C. Students use a freely available professional toolchain (devkitPro) for development. A custom application was written that allowed the students to easily create their own tilesets (sprites and background maps) and quickly get started building their first ROMs. A series of tutorials was created to complement the program and help the students through the creation of their first game.	Introducing computer programming via gameboy advance homebrew	NA:NA	2009
William Hochstettler	NA	Session details: Mental hygiene -- analysis and promotion of good CS work habits	NA	2009
Vincent A. Cicirello	In this paper, we explore the potential important role that unannounced (or "pop") quizzes can play in CS-1. "Pop" quizzes generate continual feedback to both the student and the instructor of the course. They also encourage students to avoid missing class unless necessary. We present the results of a three year study on the effectiveness of "pop" quizzes in CS-1. Our results demonstrate that students who experience "pop" quizzes in CS-1 score higher on exams than do their counterparts who did not experience "pop" quizzes. This appears especially true for upperclassmen, particularly for juniors. The use of "pop" quizzes in CS-1 also improves performance on programming assignments for juniors. CS/IS majors and Math majors both receive a greater benefit from "pop" quizzes than do other non-majors.	On the role and effectiveness of pop quizzes in CS1	NA	2009
Christopher Hundhausen:Anukrati Agrawal:Dana Fairbrother:Michael Trevisan	Formal code inspections are employed by teams of professional software engineers to identify software defects and improve the quality of software. After reviewing a piece of code individually, members of an inspection team come together to log the issues they have found, and to find new ones. Within the scope of a multi-institutional research project to adapt, refine, and evaluate studio-based learning methods in computing education, we are developing an adaptation of the formal code inspection called the pedagogical code review for use in lower-division computer science courses. In a pedagogical code review, a group of three to four students, led by a trained moderator, (a) walk through segments of each other's programming assignments, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. We implemented pedagogical code inspections in three lab sessions of a CS 1 course. Through an analysis of inspection logs and exit surveys, we compiled evidence that the reviews improved the quality of students' code, stimulated increasingly sophisticated discussions of programming issues and practices, and promoted a sense of community.	Integrating pedagogical code reviews into a CS 1 course: an empirical study	NA:NA:NA:NA	2009
James B. Fenwick, Jr.:Cindy Norris:Frank E. Barry:Josh Rountree:Cole J. Spicer:Scott D. Cheek	This paper reports on the progress of an NSF funded research project investigating the development practices of students in introductory programming courses. In previous work, we describe our extension of the BlueJ IDE to capture events associated with program development. Here we report on data collected during the Fall 2007 and Spring 2008 semesters on CS 1 students. In particular, we show that our data analysis independently confirms the results obtained in separate studies by Jadud [3, 2]. In addition we use our empirical evidence to discern some higher level "patterns" of beginning student programming behaviors including potential cheating and the impact on success of students starting projects late.	Another look at the behaviors of novice programmers	NA:NA:NA:NA:NA:NA	2009
Leila Wallace	NA	Session details: Taking software engineering out of the classroom	NA	2009
Adrian Rusu:Amalia Rusu:Rebecca Docimo:Confesor Santiago:Mike Paglione	It is widely recommended by both academia and industry that today's technology and software engineering students be well prepared for industry before graduation, especially given global outsourcing and other trends. Various methods have been developed to ensure student readiness, including co-ops and capstone courses. These approaches increasingly use real-world projects for their benefits to industry and often to the community at large. In this paper, we argue that students can be prepared to effectively join industry and keep the US technology workforce competitive through a curriculum that includes a theoretical software engineering course with real-world projects and the collaboration of paired teams across two or more universities. We present a case study of a successful teaching experience that features these aspects, and describe the outcome along with the unique perspective of a participating student.	Academia-academia-industry collaborations on software engineering projects using local-remote teams	NA:NA:NA:NA:NA	2009
M. H.N. Tabrizi:Carol B. Collins:Vipul Kalamkar	Students in software engineering need experiences that prepare them for a global work environment that is more and more likely to be structured around team work in which team members may come from a variety of disciplines and cultures and be geographically dispersed. New grads in software engineering are more and more likely to communicate with team members and managers solely via electronic means (e.g. teleconference, videoconference, e-mail, e-file sharing). This paper describes a highly successful international collaboration of students from two universities enrolled in undergraduate software engineering classes, one in the USA and the other in India. Within a semester, these students collaborated remotely to produce software for a leading international software development company. This collaboration, repeated for two semesters and planned for a third, met all learning objectives while successfully producing the desired software. This experience truly engaged our students and enabled the students to learn via a standard course in software engineering about many aspects of professional practice without resorting to special programs like co-op/internships, honors/research independent study, or capstones.	An international collaboration in software engineering	NA:NA:NA	2009
Ralph Morelli:Trishan de Lanerolle	Can engaging students in free and open source software(FOSS) pique their interest in computer science? This paper describes an introductory computer science course that introduced students to using FOSS, to contributing to a humanitarian FOSS project, and to studying the broader impact of FOSS on our society. Students learned basic webprogramming skills (PHP/MySQL) and made small but significant contributions to a global FOSS project. Mistakes were made and opportunities were missed. But overall theexperiment was a success and the experience was enjoyable and educational for students and instructor alike. By building on what worked well, this course could serve as a model for incorporating study of FOSS into the introductory computing curriculum.	Foss 101: engaging introductory students in the open source movement	NA:NA	2009
Don Bailes	NA	Session details: Games 2 teach	NA	2009
Bo Brinkman	I describe a simple game for use in starting a class discussion about corporate decision-making and whistle-blowing. The game allows students to experience the power of managers to influence (for good or bad) the decisions of their underlings, and the counter-balancing powers held by workers.	The heart of a whistle-blower: a corporate decision-making game for computer ethics classes	NA	2009
Michael Eagle:Tiffany Barnes	We are developing games to increase student learning and attitudes in introductory CS courses. Wu's Castle is a game where students program changes in loops and arrays in an interactive, visual way. The game provides immediate feedback and helps students visualize code execution in a safe environment. We compared the game to a traditional programming assignment in an introductory CS course. In our study, half of the students were randomly selected to play the learning game first and half to write a program first. Our results show that students who play our learning game first outperform those who write a program before playing the game. Students in the game-first group felt they spent less time on the assignments, and all students preferred the learning game over the program. These results suggest that games like Wu's Castle can help prepare students to create deeper, more robust understanding of computing concepts while improving their perceptions of computing homework assignments.	Experimental evaluation of an educational game for improved learning in introductory computing	NA:NA	2009
Emily Navarro:Andr√© van der Hoek	In this paper, we describe a multi-site evaluation of SimSE, an educational software engineering simulation game. This study was designed to build on our previous experience of evaluating SimSE in courses and controlled lab settings at UC Irvine, in order to validate our findings and discover any factors that come into play when SimSE is used in other institutions. The study consisted of three different universities using SimSE in their respective courses and reporting the results to us. The results confirmed several of our previous findings, as well as highlighted a number of critical considerations that must be taken into account when using SimSE in a course.	Multi-site evaluation of SimSE	NA:NA	2009
Paul Tymann	NA	Session details: Special session	NA	2009
Paul T. Tymann:Laurie White	The objective of this special session is to provide an opportunity for computer science educators, at both the college and high school level, to provide input to the AP CS Development Committee as it refines the curriculum for the A course in light of the elimination of the AB exam. The input and active participation of educators attending this special session will help the members AP CS Development Committee to define a course and exam that continues to meet the high standards for teaching and learning required in the comparable college course.	The future of the AP CS program	NA:NA	2009
Florence Appel	NA	Session details: Special session	NA	2009
Florence A. Appel:Katherine Deibel:C. Dianne Martin:Joseph D. Oldham:Tarsem S. Purewal, Jr.:Carol L. Spradling	NA	From the man on the moon to 2001 and beyond: the evolving social and ethical impact of computers a session to commemorate SIGCSE' 40 anniversary	NA:NA:NA:NA:NA:NA	2009
Richard Salter	NA	Session details: Panel session	NA	2009
Richard M. Salter:Robert D. Cupper:Stuart Hirshfield:Alexa M. Sharp	NA	New models for the CS1 course: a fifteen year retrospective	NA:NA:NA:NA	2009
Esmail Bonakdarian	NA	Session details: Games how-to	NA	2009
Jessica D. Bayliss	Computer Science degree program enrollments have fallen precipitously since the year 2000 and it is not surprising that novel approaches to education are being tried to both attract and retain students. One of the areas with a record of success is with using games in introductory programming courses. While there are several successful programs, the drawbacks of these approaches are not commonly discussed along with their benefits. Having run a successful game-based program that retained students within the CS major at a 93% rate, we discuss both the benefits of the program as well as the problems that need to be considered and overcome.	Using games in introductory courses: tips from the trenches	NA	2009
Briana B. Morrison:Jon A. Preston	This paper considers how gaming has been infused into the computing curriculum of institutions in the United States. To increase motivation of students and improve retention, many programs have begun using gaming in their introductory courses, as upper level electives, or as separate degree programs. The authors review the current use of gaming within curricula and analyze the content of game development degree programs. Finally, the authors describe plans at their institution to incorporate gaming throughout the computing curriculum and present initial results.	Engagement: gaming throughout the curriculum	NA:NA	2009
Monica McGill	Game development programs are being added to computer science departments as either a track, minor, or major in post-secondary institutions across the United States. These programs are being developed with little published quantitative or qualitative research on what such programs should entail. The quantitative research in this pilot study defines qualifications sought when hiring game developers for positions in industry. Using cross-sectional data, qualifications from job advertisements were coded, categorized, and then subcategorized and weighted totals were calculated based on skills being either required or desired. Weighted totals in each subcategory were compared and ranked. The top 10 qualifications are provided, along with a breakdown of rankings of all subcategories within each category. Subcategories of Languages and Tools/Environments are also discussed briefly to highlight key qualifications in each.	Weighted game developer qualifications for consideration in curriculum development	NA	2009
Richard A. Brown	NA	Session details: Departmental issues	NA	2009
Donald B. Sanderson	This paper will describe the changes made to an existing student outcomes assessment system to more closely conform to the new assessment guidelines of the Computer Accreditation Commission of ABET. The processes, results and effectiveness of the techniques will be examined.	Revising an assessment plan to conform to the new ABET-CAC guidelines	NA	2009
Charles P. Riedesel:Eric D. Manley:Susan Poser:Jitender S. Deogun	For decades, US universities and colleges have had policies pertaining to the conduct of their students at the institutional level. These policies are referred to as Academic Integrity Policies or Codes of Conduct. The Code of Ethics, instituted by Association of Computing Machinery (ACM) has been the standard for the computing sciences profession for over 15 years. However, the traditional institution-wide academic integrity policies have not adapted to the complexities that arose from rapid progress in information technology (IT) and thus either fail to address or are in conflict with the nature of problems in computer science education. In this paper, we propose a model for development and implementation of an academic ethics policy (ethics is a broader concept that includes integrity) that addresses the challenges imposed by information technology vis-√°-vis the best modern teaching practices in computer sciences and engineering. Implementing policies that are more in line with the methods of industry and compatible with newer educational pedagogies should make the whole educational environment more engaging to students.	A model academic ethics and integrity policy for computer science departments	NA:NA:NA:NA	2009
Mujtaba Talebi:Thomas Way	Computer science educators are uniquely positioned to promote greater awareness of Green Computing, using the academic setting to encourage environmentally conscious use of technology. This paper reports on practical techniques that can engage faculty and students, enabling Green Computing to be integrated into the classroom and research laboratory. Analysis and empirical evaluation of each reported technique is given, comparing the efficacy of each in terms of energy, environmental and financial cost savings. These results are provided as technological and economic evidence for the benefits of "Going Green," and to promote education in Green Computing in the classroom, department and research lab.	Methods, metrics and motivation for a green computer science program	NA:NA	2009
Diana Cukierman	NA	Session details: Reflecting on programming	NA	2009
Michael R. Wick	This paper describes an entry-level programming assignment that can be used to help students learn the value of diversity through computer programming. The assignment was given as part of a preliminary experiment to establish the impact of a student programming assignment on student attitudes toward cultural diversity. The results provide suggestive evidence that students learn to value diversity via the given programming assignment.	Using programming to help students understand the value of diversity	NA	2009
Naveed Arshad	Many studies have shown that students often face difficulty in applying programming concepts to design a program that solves a given task. To impart better problem solving skills a number of pedagogical approaches have been presented in the literature. However, most of these approaches provide a general strategy of problem solving. But in reality problem solving is a skill that is developed with experience over a period of time. In this paper, we present a pedagogical approach to teach problem solving using think-alouds. In a think-aloud problem solving approach students learn the skill of problem solving by closely observing an 'experienced programmer. We used this approach in a CS2 class and our evaluation results show that think-aloud problem solving is an extremely effective pedagogical technique, particularly for female students.	Teaching programming and problem solving to CS2 students using think-alouds	NA	2009
Stuart A. Hansen	Retaining students in Computer Science may be improved by engaging them in the learning process while preventing them from becoming overly frustrated. While engaging students during lecture is certainly important, most students spend a significant amount of time working on programming projects outside of class. Gaining a deep understanding of student engagement in programming is difficult, since the instructor is seldom present during the process. This paper presents the results of student surveys administered after each programming project for multiple sections of two courses: CS2, and Data Structures and Algorithms. We analyze the data in terms of engagement, frustration and niftiness.	Analyzing programming projects	NA	2009
Sriram Mohan	NA	Session details: Models for cross-course fertilization of ideas	NA	2009
Susan L. Reiser:Rebecca F. Bruce	In this paper, we describe our CS0 course, 3D Modeling and Fabrication, that includes a service-learning CNC milling project as a high tech hook to interest students, both our own and middle school students, in computer science and engineering. Among the CS0 learning outcomes achieved through the design and fabrication projects are computer literacy, writing-across-the curriculum, and development of problem-solving skills such as quantitative reasoning and critical thinking. This course is situated in the Integrated Liberal Studies program at University of North Carolina at Asheville. It can be offered as part of any general education program to fulfill a computer literacy or writing-across-the-curriculum requirement. Taking an idea and nurturing it from a concept to a model, to a series of working drawings, and then to a three-dimensional prototype is exciting and fun, and leaves a tangible reminder of the creativity inherent in computer science.	Fabrication: a tangible link between computer science and creativity	NA:NA	2009
Robin Y. Flatland:James R. Matthews	In this paper we show how an engaging problem can be used in both a discrete mathematics course and a programming course as a way to expose students to multiple methods of inquiry and to strengthen the links between the two courses. Since students typically take Discrete Mathematics and a programming course simultaneously, this is an opportunity for them to analyze a problem from multiple perspectives during a single semester. We describe how we have accomplished this using a relatively new problem that is easily stated and has a surprising solution that defies intuition. In the programming course, students experienced a design/empirical approach to the problem by implementing simulations of various solutions and collecting experimental results. By adjusting the emphasis of the programming assignment, we show that it can fit naturally into a range of programming courses, i.e. courses on introductory programming, data structures, and object-oriented techniques. In the Discrete Mathematics course, students analyzed solutions using tools from counting, probability, and calculus. We observed that by linking the two courses using a common problem, our students were more cognizant of inquiry methods and student engagement increased.	Using modes of inquiry and engaging problems to link computer science and mathematics	NA:NA	2009
Christopher Brown:Robert Pastel	We developed combined graduate and undergraduate courses in which undergraduates created a prototype based on user-centered design, and graduate students worked with them to evaluate those prototypes based on common usability principles. It provided undergraduate students experience practicing user centered design, while providing graduate students experience with usability evaluation. It also provided graduate students the opportunity to introduce current HCI research areas to students who may be considering graduate school. The course successfully engaged both graduate and undergraduate students while providing a beneficial experience through their interactions.	Combining distinct graduate and undergraduate HCI courses: an experiential and interactive approach	NA:NA	2009
Owen Astrachan	NA	Session details: Special session	NA	2009
Owen Astrachan:Henry Walker:Chris Stephenson:Lien Diaz:Jan Cuny	The Advanced Placement (AP) Computer Science program is intended to reflect enough of a common core of a first semester or year of university-level computer science so that placement or credit can be awarded for work done before college. The SIGCSE symposia have a long history of providing forums for discussing the evolution of the AP program from its inception [1] to the transition from Pascal to C++ [3] to the transition from C++ to Java [2,5,7,8,9]. Panels related to how credit and placement are awarded have also been part of the SIGCSE conferences [4,6]. This special session is a report of the ongoing process of developing new and possible wide-ranging changes to the AP program.	Advanced placement computer science: the future of tracking the first year of instruction	NA:NA:NA:NA:NA	2009
Lecia Barker	NA	Session details: Panel session	NA	2009
Lecia J. Barker:Elizabeth Adams:Amardeep Kahlon:Andrea Lawrence:Allison Young	NA	Trends and discoveries of the computing educators oral history project	NA:NA:NA:NA:NA	2009
Inna Pivkina	NA	Session details: Special session	NA	2009
Inna Pivkina:Desh Ranjan:Jerry Lodder	NA	Historical sources as a teaching tool	NA:NA:NA	2009
Bengt Aspvall	NA	Session details: Tools for engagement	NA	2009
Susan H. Rodger:Eric Wiebe:Kyung Min Lee:Chris Morgan:Kareem Omar:Jonathan Su	We describe the results from a two-year study with fourteen universities on presenting formal languages in a more visual, interactive and applied manner using JFLAP. In our results the majority of students felt that having access to JFLAP made learning course concepts easier, made them feel more engaged in the course and made the course more enjoyable. We also describe changes and additions to JFLAP we have made based on feedback from users. These changes include new algorithms such as a CYK parser and a user-controlled parser, and new resources that include a JFLAP online tutorial, a wiki and a listserv.	Increasing engagement in automata theory with JFLAP	NA:NA:NA:NA:NA:NA	2009
Anne Philpott:Tony Clear:Jacqueline Whalley	This paper extends the work of the BRACElet project [17] by assessing the program comprehension skills of intermediate level students. Student performance on a pathfinder algorithm simulation task is reviewed to assess the students' comprehension levels, as categorized according to the SOLO educational taxonomy. The paper describes the nature of student responses, and the variety of representations provided, illustrating the role of discovery in effective student learning.	Understanding student performance on an algorithm simulation task: implications for guided learning	NA:NA:NA	2009
Andrew Brownfield:Cindy Norris	The small instruction set size of the LC-3 as well as its similarities to more powerful instruction sets make it an ideal hypothetical machine for introductory computer science and computer engineering students. Several tools are available for working with this hypothetical machine including simulators, and assemblers for various platforms. We have created an additional tool, LC3uArch, that is useful for debugging LC-3 programs like the existing simulators, but unlike existing simulators also helps student to develop an understanding of the LC-3 microarchitecture. The results of a student survey on the use of LC3uArch indicate our students find LC3uArch a valuable learning tool.	LC3uArch: a graphical simulator of the LC-3 microarchitecture	NA:NA	2009
Richard M. Salter:John L. Donaldson	Students of Computer Organization should be able to "learn by doing" at all levels of computer design. Digital logic circuitry is frequently taught using simulation software, however such platforms are often limited to exposing only a narrow range of design levels. This paper describes how, in the new multilevel simulation system DLSim 3, we are able to incorporate abstraction and extensibility to present the many levels of complex circuit designs in a single environment: from low level combinational and sequential circuits, through models of complete CPUs. Among other features, DLSim 3 is able to accomplish this by providing three different types of circuit abstraction: cards, chips, and plug-ins. Using DLSim 3, students recognize the uniformity of system structure, as well as the principles of abstraction that link the various levels of design.	Abstraction and extensibility in digital logic simulation software	NA:NA	2009
Lucia Dale	NA	Session details: Robots	NA	2009
Glenn V. Nickens:Ethan J. Tira-Thompson:Thorna Humphries:David S. Touretzky	Hand-eye systems combine computer vision with kinematics and dynamics calculations to achieve dexterous manipulation. These versatile platforms for teaching robotics principles have not been widely used in undergraduate laboratories due to cost. We describe a new hand-eye system constructed from Robotis Dynamixel servos, a USB interface module, and a webcam, that can be built for under $500 and run by a PC using the Tekkotsu open source software framework. A suggested curriculum is outlined.	An inexpensive hand-eye system for undergraduate robotics instruction	NA:NA:NA:NA	2009
Tom Lauwers:Illah Nourbakhsh:Emily Hamner	We present CSbots, an ongoing program to use robots as educational tools in the Introduction to Computer Science CS1) course. We aim to use robotics to improve learning and retention by altering course work so that it is more relevant to students. In our development process we use an iterative cycle composed of design, pilot, and evaluation steps. We have completed the first of these cycles, the alpha cycle, and describe the robot hardware, software, and curriculum development processes as well as key evaluation results from pilots conducted at two community colleges in Fall 2007. We discuss the implications of these results and our experiences on the in-progress beta design cycle and planned pilots.	CSbots: design and deployment of a robot designed for the CS1 classroom	NA:NA:NA	2009
Jay Summet:Deepak Kumar:Keith O'Hara:Daniel Walker:Lijun Ni:Doug Blank:Tucker Balch	We have developed a CS1 curriculum that uses a robotics context to teach introductory programming [1]. Core to our approach is that each student has their own personal robot. Our robot and software have been specifically developed to support the needs of a CS1 curriculum. We frame traditional problems (robot control) in terms that are personal, relevant, and fun. Initial trial classes have shown that our approach is successful and adaptable.	Personalizing CS1 with robots	NA:NA:NA:NA:NA:NA:NA	2009
William Isaac McWhorter:Brian C. O'Connor	The purpose of the research study described in this paper was to investigate the effectiveness of using LEGO Mindstorms robotic activities to influence student motivation in an introductory university computer programming course. Various aspects relating to student motivation were measured using the Motivated Strategies for Learning Questionnaire. Tests revealed no statistically significant differences between groups in relation to intrinsic goal orientation, task value, control of learning beliefs, self-efficacy, and test anxiety at the alpha = .05 level. The experiment did detect a statistically significant difference between groups in relation to extrinsic goal orientation. The LEGO group, however, showed a larger decrease in levels of extrinsic goal orientation, suggesting they were less motivated in learning the material for rewards such as grades. While this is not necessarily a bad thing, ideally a decline in extrinsic goal orientation would be accompanied by a statistically significant increase in intrinsic goal orientation suggesting students were instead motivated because they were interested in the content of the material. This was not the case in this study. Despite the lack of positive quantitative results, responses to student follow-up questions suggest that at least some of the students enjoyed the LEGO Mindstorms activities. A discussion of possible factors influencing these results is provided.	Do LEGO¬Æ Mindstorms¬Æ motivate students in CS1?	NA:NA	2009
Richard Ord	NA	Session details: Systems	NA	2009
Shimon Schocken:Noam Nisan:Michal Armoni	We describe a synthesis course that provides a hands-on treatment of many hardware and software topics learned in computer science (CS) programs. Using a modular series of twelve projects, we walk the students through the gradual construction of a simple hardware platform and a modern software hierarchy, yielding a basic yet powerful computer system. In the process of building the computer, the students gain a first-hand understanding of how hardware and software systems are designed and how they work together, as one enterprise. The course web site contains all the materials necessary to run this course in open source, and students and instructors are welcome to use and extend them freely. The course projects are modular and self-contained, and any subset of them can be implemented in any order and in any programming language. Therefore, they comprise a flexible library of exercises that can be used in many applied CS courses. This paper gives a description of the approach and the course, juxtaposed against general educational principles underlying meaningful learning.	A synthesis course in hardware architecture, compilers, and software engineering	NA:NA:NA	2009
Michael D. Black	This paper describes a semester project where students design an operating system from the ground-up, capable of booting from a floppy disk on an actual machine. Unlike previous projects of this kind, this project was designed for students with only one semester of programming experience and no prior exposure to data structures, assembly language, or computer organization. Students nevertheless wrote a full system consisting of system calls, program execution, a file system, a command-line shell, and support for multiprocessing. The project was assigned to a class and successfully completed by nearly every student.	Build an operating system from scratch: a project for an introductory operating systems course	NA	2009
Ben Pfaff:Anthony Romano:Godmar Back	Pintos is an instructional operating system, complete with documentation and ready-made, modular projects that introduce students to the principles of multi-programming, scheduling, virtual memory, and filesystems. By allowing students to run their work product on actual hardware, while simultaneously benefiting from debugging and dynamic analysis tools provided in simulated and emulated environments, Pintos increases student engagement. Unlike tailored versions of commercial or open source OS such as Linux, Pintos is designed from the ground up from an educational perspective. It has been used by multiple institutions for a number of years and is available for wider use.	The pintos instructional operating system kernel	NA:NA:NA	2009
Geoffrey M. Draper:Robert R. Kessler:Richard F. Riesenfeld	Many courses on the history of computing are designed for a general student audience, and as such, include fewer technical details than one might find in a typical CS course. While this approach is appropriate in some contexts, it risks losing the interest of the students who could perhaps benefit most from the subject-namely, future computer scientists. This paper describes a technically-oriented History of Computing course which we taught at the University of Utah in 2008. Like other History of Computing courses, ours included a significant amount of writing and discussion. However, inasmuch as our course was created specifically for CS students, we also incorporated several "hands-on" programming exercises and demonstrations, giving students actual experience with the computing environments of the past. Students and faculty alike have responded enthusiastically to this dual-faceted approach.	A history of computing course with a technical focus	NA:NA:NA	2009
Monica Brockmeyer	NA	Session details: Interdisciplinary multimedia	NA	2009
Mark Christensen van Langeveld:Robert Kessler	Many Universities and Colleges are building interdisciplinary programs between engineering and fine arts that focus on games, special effects, animation and other areas that require interdisciplinary efforts. This is in response to the needs of the entertainment industries. The video game and 3D animation businesses fundamentally involve computer scientists and artists working closely together. The Entertainment Arts and Engineering (EAE) program (founded in 2007) is an undergraduate interdisciplinary program at the University of Utah (UofU). Students pursuing an animation or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. Two courses taught at the UofU with curriculum in the middle of the continuum between the two departments are the courses: Digital Character Production and Machinima. These courses provide an extraordinary applied learning experience for students to combine learning concepts that are not commonly taught together. The curriculums are designed to teach students to breakdown extremely complex problems, requiring understanding from both disciplines, into manageable segments that allow easy understanding of diverse concepts from computer graphics principles to sculptural ideology and from graphic algorithms to film/storytelling. It is a process that provides a direct view of the correlations of the critical concepts from each of the disciplines. This paper presents our insights from teaching and reviewing these two classes.	Two in the middle: digital character production and machinima courses	NA:NA	2009
Daniela Stan Raicu:Jacob David Furst	This paper presents a successful model for undergraduate research where student participants work on interdisciplinary research projects; in our case, at the frontier between computer science and medicine. Students are part of research teams comprised of other undergraduates, graduate students, faculty and medical experts, participate in professional development and training activities within the larger group, and disseminate their results at the host institutions or conferences specific to the interdisciplinary focus. The model outcomes at the end of the first three years (2005-2007) indicate that the interdisciplinary model successfully 1) expanded the student participation in research by recruiting students who might not otherwise have research opportunities, 2) attracted a diversified pool of talented students into science, 3) promoted interdisciplinary undergraduate studies in computer science and medical informatics as well as in future graduate studies; and 4) trained students in all phases of research, including writing and presenting research papers at conferences.	Enhancing undergraduate education: a REU model for interdisciplinary research	NA:NA	2009
Jennifer Burg:Jason Romney	This paper reports on an NSF-grant supported summer workshop that brought music and computer science students together for eight weeks to explore creative projects in digital sound production. The dynamics of the students' collaborations were observed as they crafted experimental projects weaving together music, theatre production, sampled digital audio, and MIDI. Moving among various levels of abstraction, the students found practical and artistic motivations to learn the science of digital sound. The projects they produced suggest ways to revitalize computer science courses by linking science, art, and practice through digital sound, a subject naturally interesting to students.	Linking computer science, art, and practice through digital sound	NA:NA	2009
Jesse M. Heines:Gena R. Greher:Sarah Kuhn	This paper describes how a graphical user interface (GUI) programming course offered by the Dept. of Computer Science (CS) was paired with a general teaching methods course offered by the Dept. of Music in an attempt to revitalize undergraduate CS education and to enrich the experiences of both sets of students. The paper provides details on the joint project done in these classes and the evaluation that assessed its effect on the curriculum, students, and professors.	Music performamatics: interdisciplinary interaction	NA:NA:NA	2009
Nick Parlante	NA	Session details: Special session	NA	2009
Nick Parlante:Thomas P. Murtagh:Mehran Sahami:Owen Astrachan:David Reed:Christopher A. Stone:Brent Heeringa:Karen Reid	Assignments determine much of what students actually take away from a course. Sadly, creating successful assignments is difficult and error prone. With that in mind, the Nifty Assignments session is about promoting and sharing successful assignment ideas, and more importantly, making the assignment materials available for others to adopt.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2009
David Berque	NA	Session details: Special session	NA	2009
Dave A. Berque	NA	A tutorial on stroke-based interfaces: unistroke recognition algorithms appropriate for compelling projects in introductory courses	NA	2009
Lillian Cassel	NA	Session details: Special session	NA	2009
Gordon Davies:Lillian N. Cassel:Arthur Pyster:Michael Caspersen:Heikki Topi	This special session will proved information about the status of work related to Masters programs in Computing. Specifically, the session will describe work completed in the following areas: the categorization of masters programs in computing, the development of curriculum recommendations for masters programs in software engineering, the collaborative work with the Association for Information Systems on the Masters program in Information Systems	ACM education board and masters level programs	NA:NA:NA:NA:NA	2009
Daniel Cliburn	NA	Session details: Data- and code-space animation	NA	2009
Michael G. Boland:Curtis Clifton	Like a screenplay, a program is both a static artifact and instructions for a dynamic performance. This duality can keep laypeople from appreciating the complexity of software systems and can be a stumbling block for novice programmers. PyLighter lets laypeople and novice programmers perceive the relationship between static Python code and its execution. PyLighter works with everything from simple console applications to arcade-style games, and because PyLighter is easy to adopt and use, instructors can integrate it into any Python-based introductory course without changing the rest of their syllabus.	Introducing PyLighter: dynamic code highlighter	NA:NA	2009
David Scot Taylor:Andrei F. Lurie:Cay S. Horstmenn:Menko B. Johnson:Sean K. Sharma:Edward C. Yin	We investigate the effectiveness of a predictive interaction animation tool for understanding graph algorithms. We compare performance improvement of students after they have used two different animation tools for the given algorithms, when one of the tools forces a more active, predictive approach while the other is a more traditional animation. Results show significant improvement in performance after students use the predictive tool.	Predictive vs. passive animation learning tools	NA:NA:NA:NA:NA:NA	2009
Amruth N. Kumar	We incorporated animation of the data space into a web-based tutor for solving problems on C++ pointers and made the tutor available to students. In evaluation of the tutor, we found that data space animation indeed helps students learn the semantics of pointers. But, it is no more effective at this than text explanation of the step-by-step execution of the program.	Data space animation for learning the semantics of C++ pointers	NA	2009
James Early	NA	Session details: Summer outreach programs	NA	2009
Winnie W.Y. Lau:Grace Ngai:Stephen C.F. Chan:Joey C.Y. Cheung	As enrollments in engineering and computer science programs around the world have fallen in recent years, those who wish to see this trend reversed take heart from findings that children are more likely to develop an abiding interest in technology if they are exposed to it at an early age [3, 9]. In line with this research, we now see more summer camps and workshops being offered to middle school students with the objective of teaching programming and computer technology [1, 6, 8, 12]. To offer students a stimulating and interesting environment while teaching computing subjects, the learning tools in these camps usually revolve around robots and graphical programming of animations or games. These tools tend to mainly attract youngsters who like robotics or game design. However, we believe that we can improve the diversity of the student pool by introducing other topics. In this paper, we describe our experience in designing and organizing a programming course that focuses on wearable computing, fashion and design for middle school students. We will show that 1) wearable computing is interesting and inspiring to the students, 2) wearable computing motivates both boys and girls to learn technology and computing, which implies that it may be able to increase the potential computer science population, 3) wearable computing can provide a space for students to exercise their creativity while at the same time, teaching them about technology and programming.	Learning programming through fashion and design: a pilot summer course in wearable computing for middle school students	NA:NA:NA:NA	2009
Inna Pivkina:Enrico Pontelli:Rachel Jensen:Jessica Haebe	This paper describes the Young Women in Computing program, an ongoing outreach program in Computer Science at New Mexico State University (NMSU). Features of the program include summer camps and academic year activities, computing in context, peer mentoring, and role models. The main goal is to increase interest in computing among female high school students. The paper discusses lessons learned from three years of experience with the program.	Young women in computing: lessons learned from an educational & outreach program	NA:NA:NA:NA	2009
Anna C. Cavender:Richard E. Ladner:Robert I. Roth	Deaf and hard of hearing students are an underrepresented group in computing and face extra challenges in university-level computing courses. This paper describes a 9-week Summer Academy for Advancing Deaf and Hard of Hearing in Computing that jump-starts the academic careers of deaf and hard of hearing students and strengthens their interest in computing. Students take introductory computing and animation in a fun, supportive, accessible environment. We report on some of the problems students face and lessons we have learned about helping them overcome those problems. Through the academy, they meet other successful deaf and hard of hearing technology professionals, tour top computing companies, and display their own work to the local deaf and hard of hearing community. Students gain leadership, independent learning skills, and complete the program better prepared for a college major in computing.	The summer academy for advancing deaf and hard of hearing in computing	NA:NA:NA	2009
Scott Sigman	NA	Session details: Software design	NA	2009
Alex Baker:Andr√© van der Hoek	In this paper, we report on our experience in designing and deliv-ering two new software design courses in the Informatics major at UC Irvine. When the major was created in 2004, it explicitly con-tained slots for two software design courses to be created from the ground up. The authors led this effort, focusing one course on the topic of system design and one course on the topic of implementation design. We discuss the philosophy and pedagogy behind the courses, present key class activities, and reflect on having offered each course twice over the past two years.	An experience report on the design and delivery of two new software design courses	NA:NA	2009
Dana P. Leonard:Jason O. Hallstrom:Murali Sitaraman	We describe an approach to teaching formal interface specifications using aspects of the Collaborative Reasoning Paradigm. The module requires students to construct test cases independently and cooperatively based on their understanding of a given set of method specifications. Students are supported by software-based reasoning assistants that guide them through their exercises and provide realtime feedback as they work --- both for the students and the instructor. We describe the design of the course module, the supporting reasoning assistant, and representative reasoning exercises. We conclude with a discussion of evaluation results from a recent pilot study conducted at Clemson University.	Injecting rapid feedback and collaborative reasoning in teaching specifications	NA:NA:NA	2009
Andrew Meneely:Laurie Williams	Working remotely is becoming the norm for both professionals and students alike. Software development has become a global industry due to outsourcing, teleworking, flex time, and companies' desire to use the best and/or most economical talent regardless of where that talent is located. Professionals are not alone because students usually work from home despite having sufficient resources on campus. In this paper we share our experiences from using Jazz, a synchronous, collaborative development platform, with our inevitably distributed software engineering students. Eleven students optionally used the tool while working on a five-week team project. Students primarily used the version control, chat, and work item features in Jazz. We collected their reactions in retrospective essays and found that all Jazz students supported using Jazz in future semesters of the course. We also examined grade differences and found that the students who used Jazz were more successful than those who did not use Jazz.	On preparing students for distributed software development with a synchronous, collaborative development platform	NA:NA	2009
Ernst Grundke	NA	Session details: Curriculum innovation	NA	2009
Robert Kessler:Mark van Langeveld:Roger Altizer	The Entertainment Arts and Engineering (EAE) program is a unique, new undergraduate interdisciplinary program at the University of Utah bringing together the School of Computing and the Division of Film Studies in an effort to teach both video game development and computer animation. Students pursuing a film or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. The key characteristic of the program is the shared classes where students from both Computer Science and Fine Arts study together and cooperate on game and animation projects. The program is highlighted by a yearlong capstone course in which the students work together to make a video game or animated short from scratch. This paper chronicles our efforts starting the EAE program and demonstrates how to create an interdisciplinary program that not only attracts students to CS, but also equips them for careers or research in video games and animation.	Entertainment arts and engineering(or how to fast track a new interdisciplinary program)	NA:NA:NA	2009
Chi-Cheng Lin:Mingrui Zhang:Barbara Beck:Gayle Olsen	To engage a broader audience in computer science, we have developed a set of curriculum units embedded with computer science concepts for K-12 science education. We chose bioinformatics as a vehicle to deliver these units. Our curriculum development cycle began with the identification of a set of computer science concepts which are potentially relevant to life sciences. Problems in life sciences as well as bioinformatics tools to be used for solving these problems were carefully examined for the delivery of identified computer concepts. They were later presented to groups of regional K-12 science teachers in our summer workshop on bioinformatics. With their help, we adapted and polished these curriculum units to meet Minnesota state standards for K-12 science education. This paper describes our approach in developing the curriculum units.	Embedding computer science concepts in K-12 science curricula	NA:NA:NA:NA	2009
Lijun Ni	Computer Science (CS) education researchers hope their research has real impact on teaching practices. Developers of innovative curricula and tools for CS education want teachers to adopt their new approaches. What convinces a CS teacher to change and adopt something new--or not? This paper explores factors that influence CS teachers' adoption and change. We studied our workshop participants to determine factors influencing their decision on whether to adopt a new CS curriculum. The results from our study indicate that multiple factors, some surprising, influence CS teachers' adoption. Our findings suggest that teacher excitement in a new approach drives adoption, while more organizational or social issues inhibit adoption.	What makes CS teachers change?: factors influencing CS teachers' adoption of curriculum innovations	NA	2009
Joan Peckham	NA	Session details: Panel session	NA	2009
Owen Astrachan:Susanne Hambrusch:Joan Peckham:Amber Settle	NA	The present and future of computational thinking	NA:NA:NA:NA	2009
Samuel Rebelsky	NA	Session details: Whither scheme? 21st century approaches to scheme in CS1	NA	2009
Richard Brown:Janet Davis:Samuel A. Rebelsky:Brian Harvey	NA	Whither scheme?: 21st century approaches to scheme in CS1	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
