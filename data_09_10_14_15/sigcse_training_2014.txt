Robert Michael Panoff	Students and faculty alike at all education levels are clearly spending much more of their time interacting with computing and communication tools than with each other. Is this good? Are all uses of computational technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how computing enables multiple representations in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. Moving "beyond PowerPointless-ness," we have the opportunity to demonstrate that computing really matters in teaching and learning. Computing "matters" because quantitative reasoning, computational thinking, and multi-scale modeling are the intellectual "heart and soul" of 21st Century science and therefore are the essential skills of the 21st Century workforce. Computing "matters" because we can apply the power of dynamic, visual, and interactive computing to reach a deeper understanding of models across math and science while exploring their role in understanding our world.	Computational thinking for all: the power and the peril	NA	2014
Andrea W. Lawrence	This paper describes the many possibilities that SIGCSE affords to those who make use of the resources and opportunities the organization and the annual conferences provide.	SIGCSE plus you equals leverage	NA	2014
Hadi Partovi	Code.org first exploded on the CS education scene in Feb 2013 with its first video featuring Mark Zuckerberg and Bill Gates talking about computer science. 10 months later, it launched an Hour of Code campaign that has taken the world by storm. Reaching 10 million students in just 3 days, the Hour of Code became the fastest-spreading service in the history of technology OR education. Code.org founder Hadi Partovi will talk about how he came up with the concepts behind these grassroots campaigns, and how Code.org hopes to harness the reach of the broader CS community to grow computer science education in schools.	Transforming US education with computer science	NA	2014
A.J. Bernheim Brush	Inspired by the availability of inexpensive connected devices-such as lights, water sensors, security cameras, power meters, and thermostats-we built the Lab of Things (LoT) platform to enable easy interaction with devices for a range of applications, including automation, security, energy management, and elder care. Our goal is to substantially lower the barrier for researchers and students to develop and experiment with new technologies for the home environment. LoT provides a common framework to write applications that use connected devices and includes a set of cloud services that enable remote command/control of devices, monitoring of system health, and data collection. We released the LoT SDK in July 2013 for non-commercial use. I will describe the research studies that motivated the development of Lab of Things, student and research projects developed using Lab of Things and its precursor HomeOS, and our long-term vision of research groups working together to create a test bed of homes around the world that are willing to participate in field studies.	Lab of things: a devices research and teaching platform for home and beyond	NA	2014
Ashraf Saad	NA	Session details: Automated assessment	NA	2014
Nickolas Falkner:Rebecca Vivian:David Piper:Katrina Falkner	Computer-based assessment is a useful tool for handling large-scale classes and is extensively used in the automated assessment of student programming assignments in Computer Science. The forms that this assessment takes, however, can vary widely from simple acknowledgement to a detailed analysis of output, structure and code. This study focusses on output analysis of submitted student assignment code and the degree to which changes in automated feedback influence student marks and persistence in submission. Data was collected over a four year period, over 22 courses but we focus on one course for this paper. Assignments were grouped by the number of different units of automated feedback that were delivered per assignment to investigate if students changed their submission behaviour or performance as the possible set of marks, that a student could achieve, changed. We discovered that pre-deadline results improved as the number of feedback units increase and that post-deadline activity was also improved as more feedback units were available.	Increasing the effectiveness of automated assessment by increasing marking granularity and feedback units	NA:NA:NA:NA	2014
Stephen H. Edwards:Zalia Shams:Craig Estep	Infinite looping problems that keep student programs from termi-nating may occur in many kinds of programming assignments. While non-terminating code is easier to diagnose interactively, it poses different concerns when software tests are being run auto-matically in batch. The common strategy of using a timeout to preemptively kill test runs that execute for too long has limita-tions, however. When one test case gets stuck in an infinite loop, forcible termination prevents any later test cases from running. Worse, when test results are buffered inside a test execution framework, forcible termination may prevent any information from being produced. Further, overly generous timeouts can de-lay the availability of results, and when tests are executed on a shared server, one non-terminating program can delay results for many people. This paper describes an alternative strategy that uses a fine-grained timeout on the execution of each individual test case in a test suite, and that adaptively adjusts this timeout dynamically based on the termination behavior of test cases com-pleted so far. By avoiding forcible termination of test runs, this approach allows all test cases an opportunity to run and produce results, even when infinite looping behaviors occur. Such fine-grained timeouts also result in faster completion of entire test runs when non-terminating code is present. Experimental results from applying this strategy to 4,214 student-written programs are dis-cussed, along with experiences from live deployment in the class-room where 8,926 non-termination events were detected over the course of one academic year.	Adaptively identifying non-terminating code when testing student programs	NA:NA:NA	2014
Matheus Gaudencio:Ayla Dantas:Dalton D.S. Guerrero	In introductory programming courses it is common to demand from students exercises based on the production of code. However, it is difficult for the teacher to give fast feedback to the students about the main solutions tried, the main errors and the drawbacks and advantages of certain solutions. If we could use automatic code comparison algorithms to build visualisation tools to support the teacher in analysing how each solution provided is similar or different from another, such information would be able to be rapidly obtained. However, can computers compare students code solutions as well as teachers? In this work we present an experiment in which we have requested teachers to compare different code solutions to the same problem. Then we have evaluated the level of agreement among each teacher comparison strategy and some algorithms generally used for plagiarism detection and automatic grading. We found out a maximum rate of 77% of agreement between one of the teachers and the algorithms, but a minimum agreement of 75%. However, for most of the teachers, the maximum agreement rate was over 90% for at least one of the automatic strategies to compare code. We have also detected that the level of agreement among teachers regarding their personal strategies to compare students solutions was between 62% and 95%, which shows that there may be more agreement between a teacher and an algorithm than between a teacher and one of her colleagues regarding their strategies to compare students' solutions. The results also seem to support that comparison of students' codes has significant potential to be automated to help teachers in their work.	Can computers compare student code solutions as well as teachers?	NA:NA:NA	2014
Mario Guimaraes	NA	Session details: Gamification	NA	2014
Alexandru Iosup:Dick Epema	Technical universities, especially in Europe, are facing an important challenge in attracting more diverse groups of students, and in keeping the students they attract motivated and engaged in the curriculum. We describe our experience with gamification, which we loosely define as a teaching technique that uses social gaming elements to deliver higher education. Over the past three years, we have applied gamification to undergraduate and graduate courses in a leading technical university in the Netherlands and in Europe. Ours is one of the first long-running attempts to show that gamification can be used to teach technically challenging courses. The two gamification-based courses, the first-year B.Sc. course Computer Organization and an M.Sc.-level course on the emerging technology of Cloud Computing, have been cumulatively followed by over 450 students and passed by over 75% of them, at the first attempt. We find that gamification is correlated with an increase in the percentage of passing students, and in the participation in voluntary activities and challenging assignments. Gamification seems to also foster interaction in the classroom and trigger students to pay more attention to the design of the course. We also observe very positive student assessments and volunteered testimonials, and a Teacher of the Year award.	An experience report on using gamification in technical higher education	NA:NA	2014
Lassi Haaranen:Petri Ihantola:Lasse Hakulinen:Ari Korhonen	Achievement badges are increasingly used to enhance educational systems and they have been shown to affect student behavior in different ways. However, details on best practices and effective concepts to implement badges from a non-technical point of view are scarce. We implemented badges to our learning management system, used them on a large course and collected feedback from students. Based on our experiences, we present recommendations to other educators that plan on using badges.	How (not) to introduce badges to online exercises	NA:NA:NA:NA	2014
Briana B. Morrison:Betsy DiSalvo	Gamification is the buzzword for adding gaming elements such as points or badges to learning experiences to make them more engaging and to increase motivation. In this paper we explore how Khan Academy has incorporated gaming elements into its CS learning platform. By mapping the literature on motivational processes to popular games we critically analyze how successful Khan Academy is at gamifying their site.	Khan academy gamifies computer science	NA:NA	2014
Jodi Tims	NA	Session details: Software engineering: projects	NA	2014
Sonal Dekhane:Richard Price	In this paper we describe our initiative to incorporate research, professional practice and methodologies into two undergraduate software engineering courses. As part of the Undergraduate Research Experience (URE) initiative on our campus, we modified two of our core software engineering courses. In our Software Development II (junior level) and Software Development Project (senior level) courses we integrated research projects, corporate visits and research talks to develop a deeper understanding of software engineering research and practice amongst our students.	Course-embedded research in software development courses	NA:NA	2014
Daniel E. Krutz:Samuel A. Malachowsky:Thomas Reichlmayr	Although testing often accounts for 50% of the budget of a typical software project, the subject of software testing is often overlooked in computing curriculum. Students often view testing as a boring and unnecessary task, and education is usually focused on building software, not ensuring its quality. Previous works have focused on either making the subject of testing more exciting for students or on a more potent lecture-based learning process. At the Department of Software Engineering at the Rochester Institute of Technology, recent efforts have been focused on the project component of our Software Testing course as an area of innovation. Rather than previous methods such as a tightly controlled and repetitive testbed, our students are allowed to choose a real-world, open source project to test throughout the term. With the instructor as both counsel and client, students are expected to deliver a test plan, a final report, and several class-wide presentations. This project has achieved significant student praise; qualitative and quantitative feedback demonstrates both increased satisfaction and fulfilled curricular requirements. Students enjoy the real-world aspect of the project and the ability to work with relevant applications and technologies. This paper outlines the project details and educational goals.	Using a real world project in a software testing course	NA:NA:NA	2014
Claudia Szabo	Teaching software engineering through group-based project work supported by theory lectures is effective, as recognized by both academia and industry. However, exposing students to practical software maintenance is often overlooked in favor of building software from scratch under the guidance of a lecturer or client. The developed software is usually delivered to the lecturer/client and no maintenance efforts are further required. In contrast, industry projects require fresh graduates to perform maintenance exercises and very rarely to build software from scratch. To address this issue, existing software maintenance assignments usually focus on small codebases of very good quality, in which artificial issues are introduced. In this paper, we propose to enhance a group-based project course with a software maintenance assignment that uses a medium-sized, student-produced codebase with real software bugs. Our analysis shows the effectiveness of our approach and highlights future avenues for improvement.	Student projects are not throwaways: teaching practical software maintenance in a software engineering course	NA	2014
David Stucki	NA	Session details: Mathematical perspectives	NA	2014
Diego Zaccai:Aditi Tagore:Dustin Hoffman:Jason Kirschenbaum:Zakariya Bainazarov:Harvey M. Friedman:Dennis K. Pearl:Bruce W. Weide	Syrus is courseware designed with the goal of helping students better understand logical sentences involving quantifiers. Syrus uses template-guided mutation of "seed" formulas to generate candidate practice problems, and third-party theorem-provers to automatically determine the truth value of each. It provides students with a virtually unlimited supply of unique and relevant practice problems and provides immediate feedback on each problem. Results of an empirical study of its efficacy are reported.	Syrus: providing practice problems in discrete mathematics with instant feedback	NA:NA:NA:NA:NA:NA:NA:NA	2014
Maria Knobelsdorf:Christoph Kreitz:Sebastian Böhne	High failure rates in introductory courses on theoretical computer science are a common problem at universities in Germany, Europe, and North America, as students often have difficulties coping with the contents of such courses due to their abstract and theoretical nature. This paper describes modifications to the pedagogy of a theory course held at the University of Potsdam, Germany that are motivated by a cognitive apprenticeship approach and have led to a significant reduction of the course's failure rates. Since our approach is based on the typical infrastructure for teaching introductory computer science courses and does not require additional expenses or special resources, it can be replicated by other institutions. We believe that it is a serious contribution to better support teaching as well as student learning success in this field.	Teaching theoretical computer science using a cognitive apprenticeship approach	NA:NA:NA	2014
Jason Gorman:Sebastian Gsell:Chris Mayfield	Relational algebra provides a theoretical foundation for how modern database management systems optimize and execute queries. Its main concepts are based on set theory and first order logic, which can be challenging for students to learn due to their abstract nature. This paper presents Bags, a new type of visual programming environment (inspired by Snap!) for the teaching of relational operations and data analysis. Students formulate algebraic queries by snapping together graphical blocks that represent data sets and relational operators, resulting in an interactive visualization of the underlying concepts. The outcomes of this work will not only enhance university-level database courses, but also provide an engaging computational thinking resource for K-12 teachers in content areas outside of science and engineering.	Learning relational algebra by snapping blocks	NA:NA:NA	2014
Richard Brown	NA	Session details: Special Session	NA	2014
Richard A. Brown:Elizabeth Shoop:Joel C. Adams	The ACM-IEEE CS2013 curricular recommendations include a dramatic growth in parallel and distributed computing (PDC) topics, in response to the necessary industry shift toward multicore computing, and to emerging technologies such as cloud computing. How can your institution integrate those recommendations into your undergraduate CS curriculum? In this special session, leaders in PDC education will succinctly present their curricular strategies in relation to CS2013 recommendations, while attendees carry out a workshop-style activity to identify opportunities and assemble resources for blending more PDC content into their own local CS curricula.	Bringing CS2013 recommendations for parallel and distributed computing into your CS curriculum	NA:NA:NA	2014
Andrew McGettrick	NA	Session details: Special session	NA	2014
Andrew McGettrick:Lillian N. Cassel:Melissa Dark:Elizabeth K. Hawthorne:John Impagliazzo	This session reports on a workshop convened by the ACM Education Board with funding by the US National Science Foundation and invites discussion from the community on the workshop findings. The topic, curricular directions for cybersecurity, is one that resonates in many departments considering how best to prepare graduates to face the challenges of security issues in employment and future research. The session will include presentation of the workshop context and conclusions, but will be open to participant discussion. This will be the first public presentation of the results of the workshop and the first opportunity for significant response.	Toward curricular guidelines for cybersecurity	NA:NA:NA:NA:NA	2014
Jane Prey	NA	Session details: Special session	NA	2014
Jan Cuny:Jeffrey Forbes:Harriet Taylor:Valerie Barr:Victor Piotrowski:Jane Prey:Paul Tymann	This session will provide information about the current status of Federal budget as it impacts NSF and the computing community. Representatives from both Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates will provide the most up-to-date information about available funding opportunities. It is anticipated that the session will include information about the below listed programs plus others. In addition, proposal and review processes as well as strategies for writing competitive proposals will be discussed.	Understanding NSF funding	NA:NA:NA:NA:NA:NA:NA	2014
Netiva Caftori	NA	Session details: Engaging students through artistic expression	NA	2014
Jason Freeman:Brian Magerko:Tom McKlin:Mike Reilly:Justin Permar:Cameron Summers:Eric Fruchter	In this paper, we describe a pilot study of EarSketch, a computational remixing approach to introductory computer science, in a formal academic computing course at the high school level. The EarSketch project provides an integrated curriculum, Python API, digital audio workstation (DAW), audio loop library, and social sharing site. The goal for EarSketch is to broaden participation in computing, particularly by traditionally underrepresented groups, through a thickly authentic learning environment that has personal and industry relevance in both computational and artistic domains. The pilot results show statistically significant gains in computing attitudes across multiple constructs, with particularly strong results for female and minority participants.	Engaging underrepresented groups in high school introductory computing through computational remixing with EarSketch	NA:NA:NA:NA:NA:NA:NA	2014
Shaundra B. Daily:Alison E. Leonard:Sophie Jörg:Sabarish Babu:Kara Gundersen	n this paper, we introduce an embodied pedagogical approach for learning computational concepts, utilizing computational practices, and developing computational perspectives. During a five-week pilot, a group of students spent after-school time learning the basic elements of dance and then using them to program three-dimensional characters that could perform. Throughout the pilot, we found students consistently standing up in front of their computers and using their bodies to think through the actuation of their characters. Preliminary results suggest that designing a virtual-physical dance performance is a motivating and engaging social context in which to introduce students, especially girls, to alternative applications in computing.	Dancing alice: exploring embodied pedagogical strategies for learning computational thinking	NA:NA:NA:NA:NA	2014
Ashley Robinson:Manuel A. Pérez-Quiñones	The computing profession is lacking representation that mirrors the fabric of society in the United States. Most studies show a low percentage of participation for women and minority groups. In this paper, we present our experiences conducting a week-long Human-Computer Interaction (HCI) workshop with underrepresented middle school girls. Our description is focused on an activity where girls created a paper prototype for a chat application. We present qualitative results showing characteristics of the prototypes built, and discuss the participant responses to a few of the questions in an interview at the end of the week. Our results reveal that paper prototyping can be used as a motivator for a career path in computer science. In spite of the negative stereotypes that the underrepresented females had prior to the intervention, the HCI workshop revealed a user-centric component of computer science that gave participants a positive perception of the discipline.	Underrepresented middle school girls: on the path to computer science through paper prototyping	NA:NA	2014
Sam Rebelsky	NA	Session details: Research: concept inventories & neo-piagetian theory	NA	2014
Kevin C. Webb:Cynthia Taylor	Operating systems courses often present students with multiple approaches to solve a problem, often with differing trade-offs. While students are more than capable of memorizing the details of these competing approaches, they often struggle to recommend a specific approach and analyze its implications. In particular, we find that students exhibit difficultly in interpreting text-based scenario descriptions in a way that allows them to correctly choose between potential solutions when presented with a high-level, conceptual scenario. In this paper, we describe the development of a pre- and post-course concept inventory, which we utilize to explore students' misconceptions of operating systems and their associated trade-offs. We compare the results of our assessment with in-class peer instruction questions and exam questions to characterize the areas in which students most commonly struggle with operating systems material.	Developing a pre- and post-course concept inventory to gauge operating systems learning	NA:NA	2014
Kuba Karpierz:Steven A. Wolfman	In this paper, we triangulate evidence for five misconceptions concerning binary search trees and hash tables. In addition, we design and validate multiple-choice concept inventory questions to measure the prevalence of four of these misconceptions. We support our conclusions with quantitative analysis of grade data and closed-ended problems, and qualitative analysis of interview data and open-ended problems. Instructors and researchers can inexpensively measure the impact of pedagogical changes on these misconceptions by using these questions in a larger concept inventory.	Misconceptions and concept inventory questions for binary search trees and hash tables	NA:NA	2014
Claudia Szabo:Katrina Falkner	The development of a coherent curriculum, encapsulating appropriate topics, learning materials and assessment, is crucial for a successful educational experience. However, designing such a curriculum is a complicated task, with challenges in tracing the development of concepts across multiple courses and ensuring that assessment is at an appropriate level at specific points in the curricula. In this paper, we introduce a curriculum mapping framework based on Neo-Piagetian theory that assists lecturers in tracing concept development and assessment throughout their courses. This framework supports the identification of prerequisite concepts, where students are already assumed to be aware of specific topics, and assessment leaps, where students are assessed at a different conceptual level than they have been taught. We illustrate the application of our framework through a case study analysing the syllabus of a sequence of three first year programming courses.	Neo-piagetian theory as a guide to curriculum analysis	NA:NA	2014
Susan Reeder	NA	Session details: Active learning	NA	2014
Barry L. Kurtz:James B. Fenwick:Rahman Tashakkori:Ahmad Esmail:Stephen R. Tate	Closed labs have provided hands-on experience for students under supervised conditions. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." We have tested this approach using tablets as small as 7 inches; student laptops can also be used. Logical microlabs allow students to solve a conceptual problem in computer science that does not involve any programming. Solutions are entered graphically and submitted for evaluation. Code magnet microlabs allow students to construct a method to solve the same problem programmatically. The code is compiled and, if successful, evaluated by a sequence of unit tests. These are integrated into a Microlab Learning Cycle of exploration (the logical microlab), invention (the instructor guides the students toward an algorithm during lecture), and application (the code magnet microlab). This approach has been evaluated at three universities and proven to be popular with students and educationally effective. This work is supported, in part, by three National Science Foundation grants.	Active learning during lecture using tablets	NA:NA:NA:NA:NA	2014
Helen H. Hu:Tricia D. Shepherd	The computer science community has started to experiment with process oriented guided inquiry learning, or POGIL, a learning approach that focuses on concept and process skills development by having students work together in organized teams. By emphasizing the learning process and group discussions, instructors who implement POGIL activities and roles in their classrooms may better address the different needs of their CS 1 students. After explaining how POGIL activities differ from other group activities, this paper elaborates on the importance of incorporating the learning cycle when developing a POGIL activity, so as to encourage rich group discussions and teamwork. It then describes the role of the instructor in a POGIL activity, and how POGIL roles need to be adapted for programming activities. It presents the results of using six POGIL activities in three CS 1 sections at a comprehensive liberal arts college, where the pass rate for female students increased compared to historical female pass rates for that class. Students who were introduced to recursion through a POGIL activity appear to have learned the material as well and retained the material better than students who learned recursion through a more traditional group activity.	Teaching CS 1 with POGIL activities and roles	NA:NA	2014
Michele Van Dyne:Jeffrey Braun	: In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors.	Effectiveness of a computational thinking (CS0) course on student analytical skills	NA:NA	2014
Krish Narayanan	NA	Session details: Big data	NA	2014
Yasin N. Silva:Suzanne W. Dietrich:Jason M. Reed:Lisa M. Tsosie	An important recent technological development in computer science is the availability of highly distributed and scalable systems to process Big Data, i.e., datasets with high volume, velocity and variety. Given the extensive and effective use of systems incorporating Big Data in many application scenarios, these systems have become a key component in the broad landscape of database systems. This fact creates the need to integrate the study of Big Data Management Systems as part of the computing curricula. This paper presents well-structured guidelines to perform this integration by describing the important types of Big Data systems and demonstrating how each type of system can be integrated into the curriculum. A key contribution of this paper is the description of an array of course resources, e.g., virtual machines, sample projects, and in-class exercises, and how these resources support the learning outcomes and enable a hands-on experience with Big Data technologies.	Integrating big data into the computing curricula	NA:NA:NA:NA	2014
Paul Anderson:James Bowring:Renée McCauley:George Pothering:Christopher Starr	We describe Data Science, a four-year undergraduate program in predictive analytics, machine learning, and data mining implemented at the College of Charleston, Charleston, South Carolina, USA. We present a ten-year status report detailing the program's origins, successes, and challenges. Our experience demonstrates that education and training for big data concepts are possible and practical at the undergraduate level. The development of this program parallels the growing demand for finding utility in data sets and streaming data. The curriculum is a seventy-seven credit-hour program that has been successfully implemented in a liberal arts and sciences institution by the faculties of computer science and mathematics.	An undergraduate degree in data science: curriculum and a decade of implementation experience	NA:NA:NA:NA:NA	2014
Philip Sheridan Buffum:Allison G. Martinez-Arocho:Megan Hardy Frankosky:Fernando J. Rodriguez:Eric N. Wiebe:Kristy Elizabeth Boyer	Spurred by evidence that students' future studies are highly influenced during middle school, recent efforts have seen a growing emphasis on introducing computer science to middle school learners. This paper reports on the in-progress development of a new middle school curricular module for Big Data, situated as part of a new CS Principles-based middle school curriculum. Big Data is of widespread societal importance and holds increasing implications for the computer science workforce. It also has appeal as a focus for middle school computer science because of its rich interplay with other important computer science principles. This paper examines three key aspects of a Big Data unit for middle school: its alignment with emerging curricular standards; the perspectives of middle school classroom teachers in mathematics, science, and language arts; and student feedback as explored during a middle school pilot study with a small subset of the planned curriculum. The results indicate that a Big Data unit holds great promise as part of a middle school computer science curriculum.	CS principles goes to middle school: learning how to teach "Big Data"	NA:NA:NA:NA:NA:NA	2014
Monica McGill	NA	Session details: Games	NA	2014
Robert Don Collier:Jalal Kawash	The challenges that instructors face attempting to motivate novice programming students are amplified when the students are not pursuing degrees or careers in computer science. For the programming module of our course for non-computer science majors we assigned a video game programming deliverable that we expected would engage students and enhance their experiences. After extensive analyses of the survey responses of 245 enrolled students we were surprised to learn that, although the majority believed the game programming experience enhanced their learning overall, another majority reported that the project itself was not enjoyable. Through qualitative analysis we have identified several key areas that seem to have detracted from the overall level of enjoyment, and in this paper we follow this investigation with discussion surrounding how these issues could be remedied in the future. These recommended strategies will bolster student enjoyment and motivation in future offerings and we believe this discussion will prove very useful to other instructors planning to employ game programming components.	Lessons learned and recommended strategies for game development components in a computer literacy course	NA:NA	2014
Veronica Cateté:Kathleen Wassell:Tiffany Barnes	This design research paper examines the implementation and curriculum changes of an after school computer science program that promotes computational thinking to middle school students. The program, Students in Programming, Robotics, and Computer Science (SPARCS), can adapt to different presentation environments, such as independent after school sessions or a semester-long apprenticeship program. We trace one implementation of the program through the initial deployment, the development of infrastructure, and a reorganization of content to address student interests. We found that student attrition dropped and the average session enjoyment increased when our sessions integrated consumer technologies such as mobile applications, video games, and the Minecraft computer game. In this paper, we provide readers a framework for running computing outreach activities around similar consumer technologies.	Use and development of entertainment technologies in after school STEM program	NA:NA:NA	2014
Jiangjiang Liu:Cheng-Hsien Lin:Joshua Wilson:David Hemmenway:Ethan Hasson:Zebulun Barnett:Yingbo Xu	Game design is becoming increasingly popular among K-12 teachers and students. In this paper, we present our experience, findings, and lessons learned from conducting a one-week Stencyl Game Design Summer Computing Workshop for K-12 teachers. Our workshop focused on introducing fundamental computing concepts to K-12 teachers using Stencyl, a drag-and-drop game development environment. During the workshop, the teachers developed curriculum games for the subjects they will teach in the following semesters with the help of our workshop tutors. Our assessment results show that the average score of Stencyl knowledge in the pre-workshop survey was 1.26 out of 5, which was increased to 3.76 in the post-workshop survey and the average score of computing knowledge was improved by 61%.	Making games a "snap" with Stencyl: a summer computing workshop for K-12 teachers	NA:NA:NA:NA:NA:NA:NA	2014
Mehran Sahami	NA	Session details: Panel session	NA	2014
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:Elizabeth K. Hawthorne:Amruth Kumar:Richard LeBlanc:David Reed:Remzi Seker	For over 40 years, the ACM and IEEE-Computer Society have sponsored international curricular guidelines for undergraduate programs in computing. The rapid evolution and expansion of the computing field and the growing number of topics in computer science have made regular revision of curricular recommendations necessary. Thus, the Computing Curricula volumes are updated on an approximately 10-year cycle, with the aim of keeping curricula modern and relevant. The latest volume in the series, Computer Science Curricula 2013 (CS2013), is due for release in the Fall of 2013. This panel seeks to inform the SIGCSE community about the final version of the report, provide insight on interpreting the CS2013 guidelines, and give guidance regarding how the guidelines may be implemented at different institutions.	ACM/IEEE-CS computer science curricula 2013: implementing the final report	NA:NA:NA:NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Rebecca Brook Osborne:Irene Lee:Bradley Beth:Jeff Gray	NA	Diverse learners, diverse courses, diverse projects: learning from challenges in new directions	NA:NA:NA:NA:NA	2014
Joseph Hollingsworth	NA	Session details: Special session	NA	2014
Joseph E. Hollingsworth:Murali Sitaraman	SIGCSE has for a long time nourished an audience excited about teaching mathematical reasoning principles across the curriculum through the Math Thinking Birds-of-a-Feather session and panels on mathematical reasoning. While these forums are useful for discussing reasoning topics, they do not provide a consistent venue for sharing math-reasoning activities to be used in the classroom. Therefore, SIGCSE attendees interested in math thinking have routinely wished for a place for discussing engaging math reasoning examples and assignments. Providing such a forum is the purpose of this session. The exercises and assignments will help faculty find ways to incorporate mathematical reasoning in CS1, CS2, data structures and algorithms, discrete math, and software engineering courses.	Special session: engaging mathematical reasoning exercises	NA:NA	2014
Shaileen Pokress	NA	Session details: Focus on K-12: growing the profession and professional development	NA	2014
Orit Hazzan:Noa Ragonis	The conference theme - "Leveraging Computing to Change Education" - focuses on the influence of computing on the way we educate at all levels. In this paper we highlight the conference theme from the perspective of computer science (CS) teacher preparation and describe the Views program, launched at the Technion -- Israel Institute of Technology, two year ago. Views invites Technion graduates back to the Technion to study toward an additional bachelor's degree in the Department of Education in Science and Technology. The degree they earn includes a high school teaching certificate in one of eight tracks: math, physics, biology, chemistry, CS, environmental sciences, electrical engineering, and mechanical engineering. Views students receive full study scholarships and are not required to commit to work in the education system after graduation. In the paper, we (a) present the Views program; (b) analyze factors that motivate and demotivate CS graduates to enroll in the program; (c) describe the characteristics of students in the program and their contribution to the learning environments and (d) address hopes with respect to the expected future impact of the Views program on the education system in Israel in general and on CS education in particular.	STEM teaching as an additional profession for scientists and engineers: the case of computer science education	NA:NA	2014
Scott Bell:Tim Frey:Eugene Vasserman	We present our experiences and outcomes from a programming camp held for sixth through ninth grade students. The instructional team included five pre-service teachers who earned field experience credit for this work, and one in-service teacher. The pre-service teachers were art and music teachers-in-training, providing an opportunity for us to utilize their creative expertise in developing content for the camp. In turn, we helped the teachers explore ways they might incorporate today's user-friendly programming environments (in this case, Scratch) into their curriculum. During each of four week-long sessions, the pre-service teachers gradually took over more teaching responsibilities, modifying and then presenting lessons that incorporate their own music and art expertise into the programming activities. Student pre-camp and post-camp surveys show that self-efficacy towards programming, enjoyment of programming, and interest in continuing to program increased over the course of the week-long sessions. Meanwhile, the teachers-in-training discovered they are capable of incorporating their subject matter into Scratch-based classroom activities, and teaching this material in a classroom setting. This is an encouraging demonstration of a way to introduce programming to the K-12 teaching community without overloading in-service teachers or requiring additional course work for pre-service teachers.	Spreading the word: introducing pre-service teachers to programming in the K12 classroom	NA:NA:NA	2014
Rahman Mitchel Tashakkori:Robert Mitchell Parry:Adam Benoit:Rebecca A. Cooper:Jessica L. Jenkins:Nicholas T. Westveer	Our department received funding from the National Science Foundation to establish a three-year Research Experience for Teachers site in Data Analysis & Mining, Visualization, and Image Processing. The objective is to provide twelve in-service high school teachers and community college faculty to work with faculty mentors and their graduate and undergraduate assistants to conduct research in these fields. During this six-week summer program, participants gain skills that they can utilize to assist their students to solve interdisciplinary problems. In addition, participants design learning modules to teach STEM concepts in their courses. The goal of our program is for teachers to bring knowledge of computer science and its application to their classroom exposing their students to computer science. This paper will share some of the activities of this experience.	Research experience for teachers: data analysis & mining, visualization, and image processing	NA:NA:NA:NA:NA:NA	2014
Carl Alphonce	NA	Session details: Design: courses and curricula	NA	2014
Fredrik Heintz:Inger Erlander Klein	In 2013 Linköping University started the first 5-year engineering program in Computer Science and Software Engineering in Sweden. The goals of the program are to provide a holistic perspective on modern large scale software development, to provide a deep and broad understanding of computer science and computational thinking, and encourage innovation and entrepreneurship. The student response has been very good with more than 600 applicants to the 30 slots, of which more than 130 had this program as their first choice among all programs in Sweden. In this paper we present the goals, the design principles, and the resulting program. The ACM/IEEE CS Curricula has been used to make sure that the program provides a solid foundation in Computer Science. Three pedagogical ideas that we have used are (1) project courses to integrate theory and practice as well as provide experience with the most common form of working in industry; (2) courses that cover multiple programming paradigms and languages as well as multiple software development methodologies so that the students are prepared to take on the continual changes we know will come; and (3) a special course in engineering professionalism with groups of students from the first three years together reflecting on topics related to being a professional engineer. The paper concludes with a discussion about some important aspects such as computational thinking and the relation to the ACM/IEEE CS Curricula.	The design of Sweden's first 5-year computer science and software engineering program	NA:NA	2014
Guangzhi Zheeng:Chi Zhang:Lei Li	Business intelligence (BI) and healthcare analytics are emerging technologies that provide analytical capability to help healthcare industry improve service quality, reduce cost, and manage risks. However, such component on analytical healthcare data processing is largely missed from current healthcare information technology (HIT) or health informatics (HI) curricula. This paper conducts a preliminary analysis on how healthcare business intelligence can be incorporated into a HIT program. A general framework and several exemplar implementation strategies are presented. They can be used to guide the development and improvement of HIT curriculum.	Bringing business intelligence to healthcare informatics curriculum: a preliminary investigation	NA:NA:NA	2014
Jason O. Hallstrom:Cathy Hochrine:Jacob Sorber:Murali Sitaraman	This paper summarizes our experiences integrating topics in the software development fundamentals (SDF), programming languages (PL), and software engineering (SE) knowledge areas of the ACM 2013 curriculum within a single course. It is novel in combining object-oriented programming and software development practices with fundamental analytical reasoning about software correctness. The aim is to integrate and cover the topics in an effective fashion. The course description in this paper represents an approach we have applied successfully for over 5 years. Students tend to consider this course to be one of the more challenging encountered in the first two years of study. Interestingly, the challenge appears to stem equally from mastering object-oriented programming and design pattern components of the course, as it does from learning to use specifications for analytical reasoning of component correctness.	An ACM 2013 exemplar course integrating fundamentals, languages, and software engineering	NA:NA:NA:NA	2014
Don Blaheta	NA	Session details: Collecting and analyzing student data I	NA	2014
Barbara Ericson:Mark Guzdial	We examine the current state of computing education in the United States, in order to be able to identify problems in diversity and performance. Data on computing education are difficult to come by, since computer science courses are not tracked in US public education systems. By using a large and nationwide quantitative data source, we can gain new insights into who is participating in computing education, where the greatest need is, and what factors explain the variance between states. We used data from the Advanced Placement Computer Science A (AP CS A) exam to get a detailed view of the demographics of who is taking the exam across the United States and in each state, and how they are performing on the exam. We use economic and census data to provide explanations for some of the AP CS data. We find that minority group involvement is low in AP CS A, but the variance between states in terms of exam-takers is driven by minority group involvement. We find that wealth in a state influences the number of students taking the AP CS A exam, but indirectly.	Measuring demographics and performance in computer science education at a nationwide scale using AP CS data	NA:NA	2014
Neil Christopher Charles Brown:Michael Kölling:Davin McCall:Ian Utting	Automatically observing and recording the programming behaviour of novices is an established computing education research technique. However, prior studies have been conducted at a single institution on a small or medium scale, without the possibility of data re-use. Now, the widespread availability of always-on Internet access allows for data collection at a much larger, global scale. In this paper we report on the Blackbox project, begun in June 2013. Blackbox is a perpetual data collection project that collects data from worldwide users of the BlueJ IDE -- a programming environment designed for novice programmers. Over one hundred thousand users have already opted-in to Blackbox. The collected data is anonymous and is available to other researchers for use in their own studies, thus benefitting the larger research community. In this paper, we describe the data available via Blackbox, show some examples of analyses that can be performed using the collected data, and discuss some of the analysis challenges that lie ahead.	Blackbox: a large scale repository of novice programmers' activity	NA:NA:NA:NA	2014
Kenny Heinonen:Kasper Hirvikoski:Matti Luukkainen:Arto Vihavainen	A large body of systems that gather data on students' programming process exists, and with the increase of massive open online courses in programming, the amount of gathered data is growing even at a higher rate. A common issue for data analysis is the lack of common tools for visualizing source code snapshots. We have created a browser-side snapshot analysis tool called CodeBrowser that provides a clean REST API that anyone can integrate their snapshot data into. In this article, we describe CodeBrowser and as an example, discuss how it has been used to seek differences between novice programmers that have passed (n=10) or failed (n=10) an introductory programming course.	Using CodeBrowser to seek differences between novice programmers	NA:NA:NA:NA	2014
Robert Lutz	NA	Session details: Tactile computing	NA	2014
Raghuraman Balasubramanian:Zachary York:Matthew Doran:Aritra Biswas:Timur Girgin:Karthikeyan Sankaralingam	This paper details the creation of a hands-on introduction course that reflects the dramatic growth and diversity in computer science. Our aim was to enable students to get an end-to-end perspective on computer system design by building one. We report on a two-year exercise in using the Arduino platform to build a series of hands-on projects. We have used these projects in two course instances, and have obtained detailed student feedback, which we analyze and present in this paper. The instructions, code and videos developed are available open-source.	Hands-on introduction to computer science at the freshman level	NA:NA:NA:NA:NA:NA	2014
Yasmin Kafai:Kristin Searle:Crîstobal Martinez:Bryan Brayboy	There have been many efforts to increase access and participation of indigenous communities in computer science education using ethnocomputing. In this paper, we extend culturally responsive computing by using electronic textiles that leverage traditional crafting and sewing practices to help students learn about engineering and computing as they also engage with local indigenous knowledges. Electronic textiles include sewable microcontrollers that can be connected to sensors and actuators by stitching circuits with conductive thread. We present findings from a junior high Native Arts class and an academically-oriented summer camp in which Native American youth ages 12-15 years created individual and collective e-textile designs using the LilyPad Arduino. In our discussion we address how a culturally responsive open design approach to ethnocomputing with e-textile activities can provide a productive but also challenging context for design agency and cultural connections for American Indian youth, and how these findings can inform the design of a broader range of introductory computational activities for all.	Ethnocomputing with electronic textiles: culturally responsive open design to broaden participation in computing in American indian youth and communities	NA:NA:NA:NA	2014
Shaun K. Kane:Jeffrey P. Bigham	Introductory programming activities for students often include graphical user interfaces or other visual media that are inaccessible to students with visual impairments. Digital fabrication techniques such as 3D printing offer an opportunity for students to write programs that produce tactile objects, providing an accessible way of exploring program output. This paper describes the planning and execution of a four-day computer science education workshop in which blind and visually impaired students wrote Ruby programs to analyze data from Twitter regarding a fictional ecological crisis. Students then wrote code to produce accessible tactile visualizations of that data. This paper describes outcomes from our workshop and suggests future directions for integrating data analysis and 3D printing into programming instruction for blind students.	Tracking @stemxcomet: teaching programming to blind students via 3D printing, crisis management, and twitter	NA:NA	2014
Rajeev Agrawal	NA	Session details: Projects and capstone courses	NA	2014
Maria Vasilevskaya:David Broman:Kristian Sandahl	Larger project courses, such as capstone projects, are essential in a modern computing curriculum. Assessing such projects is, however, extremely challenging. There are various aspects and tradeoffs of assessments that can affect the quality of a project course. Individual assessments can give fair grading of individuals, but may loose focus of the project as a group activity. Extensive teacher involvement is necessary for objective assessment, but may affect the way students are working. Continuous feedback to students can enhance learning, but may be hard to combine with fair assessment. Most previous work is focusing on some specific assessment aspect, whereas we in this paper present an assessment model that consists of a collection of assessment activities, each covering different aspects. We have applied, developed, and improved these activities during a six-year period and evaluated their usefulness by performing a questionnaire-based survey.	An assessment model for large project courses	NA:NA:NA	2014
Christopher Brown:Robert Pastel:Marika Seigel:Charles Wallace:Linda Ott	This HCI course incorporated unit testing as a quality improvement initiative with an Experiential Learning Model. The focus of the research was on observation and conceptualization---students should be able to associate the benefits of usability and unit testing and apply them to more general situations. Based on our survey results and student interviews, the most difficult challenge incorporating unit testing in an experiential course was ensuring students overcome their negative bias to discover the benefits of functional testing. We recommend emphasizing the concrete benefits of unit tests and ensuring that all students fully participate in the testing experience.	Adding unit test experience to a usability centered project course	NA:NA:NA:NA:NA	2014
Aaron Bloomfield:Mark Sherriff:Kara Williams	We present the design and execution of a Service Learning Practicum (SLP) course sequence intended to be year-long capstone for computer science seniors. Students are teamed into groups of six, and develop software for local nonprofit organizations. In addition to the structure of the course, we describe the challenges faced (legal, organizational, etc.), student perceptions via survey results, and provide a number of suggestions for other institutions who are looking to create a similar course sequence. At the end of the cap- stone experience, the customers are provided with working software that meet their current needs.	A service learning practicum capstone	NA:NA:NA	2014
Richard Ladner	NA	Session details: Panel session	NA	2014
Richard E. Ladner:Jillian Hall:Samir Jain:CeAhna Lathon:Vincent Martin	A panel of college students with disabilities who are computing majors or have taken multiple computing courses will describe their experiences both in and out of the classroom. The goal of the panel is to provide the audience with an opportunity to hear first-hand how their educational needs were met as non-traditional computing students. In addition to the panelists' short presentations, the moderator will facilitate a dialog between the members of the audience and the panelists.	Panel of computing students with disabilities	NA:NA:NA:NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Jennifer Campbell:Rebecca Dovi:Cay Horstmann	In his keynote at SIGCSE 2007, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following six SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to trumpet. What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. While the initial PBJA sessions evolved from a need to understand and combat the enrollment crisis of eight years ago, we are now seeing an incredible resurgence in interest in our field, partially because --coders are hip and computer science is hot?. There are colleges where the numbers have exceeded historic highs, and some rightfully claim the crisis is over. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun for beginners. In the past, we either tried to gather educators who brought a wide variety of perspectives, who would focus on a particular issue, or who have instituted very creative and successful paths into the major. This year we have gathered three seasoned educators who have taken the leap and built online classes for introductory computing on three different platforms. What innovative ideas did they employ to support collaboration? Does the need to auto-grade mean students can no longer choose their own final projects, and how does that stifle PBJA? Do these auto-graded formative assessments feel like drill-and-kill? The hope with this panel is to explore how online offerings, in these crucial early years, extol (and perhaps suppress!) the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 7	NA:NA:NA:NA	2014
Scott Grissom	NA	Session details: Special session	NA	2014
Scott Grissom:Christopher Hundhausen:Phillip Conrad	This session will demonstrate best practices for introducing peer instruction and pedagogical code reviews into the computer science classroom. Presenters play the role of instructors on the first day of class. Audience members play the role of students as they collaborate on a variety of sample activities. By providing models of active learning in computing contexts, we seek to motivate instructors to adopt these pedagogies in their classrooms. Sufficient time will be reserved for questions and discussion.	Alternatives to lecture: experience peer instruction and pedagogical code reviews	NA:NA:NA	2014
David Levine	NA	Session details: CS2	NA	2014
Joel C. Adams	In today's multicore world, every CS student should learn about and gain experience with (at least) shared-memory parallelism. CS Curriculum 2013 acknowledges this by shifting parallel computing from elective status into the core. This paper argues that students should be introduced to parallelism early, that the CS2 (Data Structures) course is a natural place to do so, and reports our experience in doing this. The paper also argues that students should be taught to solve problems using parallel patterns, which are industry-standard best-practice strategies for parallel problem solving. To support such teaching, the paper presents patternlets -- minimalist, scalable, executable programs, each illustrating the behavior of a parallel pattern -- as a useful pedagogical tool for teaching parallel concepts. Several patternlets and their executions are given. The paper presents evidence that this injection of parallelism into CS2 has been successful.	Injecting parallel computing into CS2	NA	2014
Ivona Bezakova:James Heliotis:Sean Strout	We report on a study comparing an open-ended freshman-level CS2 project with a fully specified project of similar difficulty. We employed a randomized, controlled trial methodology. The students needed to use similar data structures and algorithms, presented during lectures, for both projects. The first half of the milestones were almost identical for both groups, but the open-ended project asked students to develop a player strategy for a specific board game, while in the other project the students executed the game by communicating with the player modules and verifying the moves against the rules of the game. In the final stages of the project while one group of students worked on honing their own strategy, the other students implemented a pre-specified tie breaking mechanism used when two player strategies tie in a match. At the end of the term, both groups had a friendly tournament: the player strategies faced each other for the ultimate winner while the other group's submissions were ranked by a team of judges based on the implementation's correctness and style. The tournament was just for fun - it did not contribute to the final grade. We hypothesized that the player group would enjoy the project more, would score higher, and would be better motivated and equipped to study computer science. Our study confirmed higher enjoyment and interest of the study group participants. We did not observe statistically significant differences among other measured quantities, or example grade distribution, of the respective groups.	On the efficacy of board game strategy development as a first-year CS project	NA:NA:NA	2014
Austin Cory Bart:Eli Tilevich:Simin Hall:Tony Allevato:Clifford A. Shaffer	While computing is becoming increasingly distributed, programming projects in introductory classes remain mostly divorced from the student's day-to-day computing experiences. These experiences entail interacting with real-time Web-based data from sources that include weather reports, news updates, and restaurant recommendations. The disconnect between student experiences and the content of their programming projects is known to drive some students away from computing. In addition, to adequately prepare students for the realities of modern software engineering, educators should introduce issues pertaining to distributed computing early in the curriculum. To address these problems, we have created RealTimeWeb - an architectural framework that makes real-time web data accessible for introductory programming projects. The framework effectively introduces important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. Preliminary results indicate that our approach can be effective in the context of a typical CS2 course, and that real-time data is relevant to students. RealTimeWeb libraries and associated resources are publicly available for use, with multiple language bindings to many real-time data sources. A rapid-prototyping tool available through the project's website facilitates the development of client libraries with easily accessible APIs for new real-time Web-based data sources.	Transforming introductory computer science projects via real-time web data	NA:NA:NA:NA:NA	2014
Ria Galanos	NA	Session details: Assessment and evaluation	NA	2014
Leo Porter:Daniel Zingaro	It is generally assumed that early success in CS1 is crucial for success on the exam and course as a whole. Particularities of students, densely-connected CS1 content, and recurring core topics each suggest that it is difficult to rebound from early misunderstandings. In this paper, we use Peer Instruction (PI) data, in addition to exam data, to explore relationships between in-class assessments and performance at the end of term and on the exam. We find that early course performance very quickly and strongly predicts performance on the final exam and that subsequent weeks provide no major increase in that predictive power. In contrast, early performance is similarly predictive of performance in the last weeks of PI questions, but subsequent weeks are increasingly more predictive. We speculate on what this means for the content of these assessments and potential future assessment practices.	Importance of early performance in CS1: two conflicting assessment stories	NA:NA	2014
Don Blaheta	Traditional processes for homework assignments are not always a good fit for the sorts of problems often seen in computer science classes. We present our experiences in implementing policies designed to encourage students to involve the instructor and fellow students in their learning process. By shifting to group assignments and permitting students a revision cycle, we improve student satisfaction and maintain or increase student outcomes while decreasing the instructor's grading load.	Reinventing homework as cooperative, formative assessment	NA	2014
Jennifer Campbell:Diane Horton:Michelle Craig:Paul Gries	This case study explores an inverted classroom offering of an introductory programming course (CS1). Students prepared for lecture by watching short lecture videos and completing required in-video quiz questions. During lecture, the students worked through exercises with the support of the instructor and teaching assistants. We describe the course implementation and its assessment, including pre- and post-course surveys. We also discuss lessons learned, modifications that we plan to make for the next offering, and recommendations for others teaching inverted courses.	Evaluating an inverted CS1	NA:NA:NA:NA	2014
Peter DePasquale	NA	Session details: Classroom management	NA	2014
Andy Sayler:Dirk Grunwald:John Black:Elizabeth White:Matthew Monaco	Higher education is facing a paradigm shift in the ownership and use of computer hardware. The school computer lab is no longer the primary place of student computer use. Instead, students increasingly expect to use their own hardware to complete their school assignments. This creates a challenge for computer science educators: we must now support a wide range of heterogeneous hardware without the benefits of tight control over its use. To address this ``Bring-Your-Own-Device'' (BYOD) challenge, we leverage virtualization and software packaging systems to gracefully deploy and support a standardized development environment for all core CS courses across a range of both school-owned and student-owned computing devices. We have deployed and evaluated our system for the previous two years at scale and continue to actively use and develop it. It has effectively helped us support multiple classes comprising hundreds of students with very limited IT staffing. We describe the design and management of our system, present our experience using our system, and discuss the lessons we've learned. We also provide data reflecting current student user experience with our system. Our system has proven very effective in addressing the student BYOD challenge in a manageable, cost-efficient, and easy-to-use manner.	Supporting CS education via virtualization and packages: tools for successfully accommodating "bring-your-own-device" at scale	NA:NA:NA:NA:NA	2014
Lecia J. Barker:Melissa O'Neill:Nida Kazim	Despite the best laid plans, counterproductive student behavior can interfere with faculty establishment of supportive classroom climates. This paper describes methods for framing the climate of the computer science classroom to minimize outspoken students' unwanted displays of intellectual prowess and engender co-learning behavior among students. Explicit framing of a supportive climate reduces student anxiety about their status among peers, leads them to expect to co-learn concepts, and reduces trepidations about speaking up in class. The framing is grounded by preemptively establishing expectations and addressing concerns through student discussion; asking students to go outside of their interaction style comfort zones for speaking in class; and explicitly describing teaching choices and classroom processes. The framing is reinforced by exposing wrong answers as useful rather than embarrassing, turn-taking techniques for equal student participation, and collaborative learning for assignments and in-class problem solving. Classroom-based retention techniques are important for retaining students who are less experienced with computer science and unsure how to interpret peers? public knowledge claims in relation to their own knowledge or faculty expectations.	Framing classroom climate for student learning and retention in computer science	NA:NA:NA	2014
Don Davis:Timothy Yuen:Matthew Berland	This paper discusses two case studies of students observed in an introductory computer science (CS1) course. Observations reinforce notions of the potential benefits of culturally and personally relevant instruction in the computer science (CS) classroom and call into question the stigmatization of 'nerd' culture within the literature of CS education. As this study is qualitative and exploratory in nature, it does not provide definitive, statistically generalizable findings -- however, it does unearth nuanced and potentially beneficial pathways of investigation for CS educators and researchers that many quantitative methods might miss. Specifically, observations highlight potential benefits of supporting students' perceptions of more diverse CS identities including broader understandings of the "CS nerd" identity.	Multiple case study of nerd identity in a CS1 class	NA:NA:NA	2014
Jill Pala	NA	Session details: Focus on K-12: middle school	NA	2014
Caitlin Hulsey:Toni B. Pence:Larry F. Hodges	In this paper we report on the design and results of a one-week, residential summer camp experience that introduced computing concepts to middle school girls in the context of an online, multiplayer, virtual world known as the Curiosity Grid. In contrast to programming environments designed specifically as teaching tools to introduce children to programming, virtual world programming exposes novice learners to a more representative computer science experience. Students write real code and get real syntax errors when their code is not correct. They also design objects in a three-dimensional world where knowledge of mathematical concepts such as 3-D global and local coordinate systems, and 3-D transformations are important to the creation of objects and behaviors. Programming artifacts from the camp and feedback from the camp participants provide a strong argument that middle school girls can handle the challenge of this approach and even be enthusiastic about it.	Camp CyberGirls: using a virtual world to introduce computing concepts to middle school girls	NA:NA:NA	2014
Elizabeth Schofield:Michael Erlinger:Zachary Dodds	This paper describes the MyCS curriculum, which aims to encourage middle-years students, i.e., grades 4-10, to engage not only as consumers of CS, but as composers of computational artifacts. MyCS draws from many successful online tools and curricula, including Exploring Computer Science (ECS) and Scratch. MyCS's 18-week curriculum balances a broad treatment of the modern role of the computer with deepening students' hands-on skills through computational problem-solving, both unplugged and via programming. This paper summarizes assessments from several MyCS professional-development workshops, with an emphasis on eliciting teachers' needs and goals for their classrooms. In addition, we discuss the project's future in the format of a teacher-mediated MOOC that will enable a larger group of teachers to engage their students in CS.	MyCS: CS for middle-years students and their teachers	NA:NA:NA	2014
Shuchi Grover:Roy Pea:Stephen Cooper	Past research extensively points to gross misperceptions of the discipline of Computer Science among students in middle and high school. As efforts to introduce computing education in K-12 gains traction in tandem with initiatives that address issues of interest and attitudes towards CS, misperceptions of computing as a discipline must also be addressed as early as middle school, which is known to be a key time for identity building. This paper shares the results of a curricular intervention that aims to show CS to students in a new light - in real world contexts and as a creative and problem-solving discipline; as something bigger and broader than the "computer-centric" view that students are known to harbor.	Remedying misperceptions of computer science among middle school students	NA:NA:NA	2014
Sarah Heckman	NA	Session details: Soft skills: industry perspectives	NA	2014
Mark E. Hoffman:Paul V. Anderson:Magnus Gustafsson	A recent study of new software developers at Microsoft reveals the significance and integration of communication skills in their daily tasks. While the literature offers a variety of approaches to promote the integration of communication skills into the Computer Science curriculum, a discrepancy remains between what students get and what they need. In this paper, we propose using workplace scenarios that integrate communication skills with technical content situated in and mediating workplace activity. Workplace scenarios are based on an analysis of the workplace as an activity system. Guidelines for implementing workplace scenarios are provided. A case study analyzes the integration of communication skills with technical content using workplace scenarios in a software development course.	Workplace scenarios to integrate communication skills and content: a case study	NA:NA:NA	2014
Marisa Exter	This paper reports on part of the findings of a mixed-methods study which explored the educational experiences of Computing Professionals who design and develop educational software. A particular focus is given on the gaps professionals perceive between what was covered in their formal (university) education and the skills and knowledge that have been most important to them in their professional roles. Discrepancies were found particularly in areas related to practical skills (such as testing, maintaining code over time, use of source code control and development tools), communication, critical thinking and problem solving, and strategies used to continue learning on-the-job. Participant suggestions for improving university programs focused largely on the use of large scale, complex, authentic projects of significant duration. The author recommends further consideration be given to explicitly teaching the type of self-learning skills and strategies used by experienced professionals.	Comparing educational experiences and on-the-job needs of educational software designers	NA	2014
Mark Zarb:Janet Hughes:John Richards	A set of industry-inspired pair programming guidelines have been derived from qualitative examinations of expert pairs in order to aid novice programmers with their intra-pair communication. This research describes the evaluation of these guidelines with a set of student pairs, and demonstrates how novice pairs who were exposed to the guidelines were more comfortable communicating within their pairs.	Evaluating industry-inspired pair programming communication guidelines with undergraduate students	NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
David Reed:Andrea Danyluk:Elizabeth K. Hawthorne:Mehran Sahami:Henry M. Walker	NA	Experiences mapping and revising curricula with CS2013	NA:NA:NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
Erin Mindell:Karen Brennan:Gwendolyn Britton:Jennifer S. Kay:Jennifer Rosato	CS4HS (Computer Science for High School) is an initiative sponsored by Google to promote Computer Science and Computational Thinking in high school and middle school curricula. In the past, workshops were offered in a face-to-face format; however, this left many K-12 computer science teachers unable to attend a workshop in their geographical region. During the 2013 round of funding, Google funded the creation of 4 workshops to be delivered in an online format, open to teachers across the United States and beyond. The panelists will share their experiences with development and deployment of large scale workshops that aim to fill the gap in professional development for K-12 computer science teachers.	CS professional development MOOCs	NA:NA:NA:NA:NA	2014
Annemieke Craig	NA	Session details: Panel session	NA	2014
Annemieke Craig:Catherine Lang:Michail N. Giannakos:Carsten Kleiner:Judith Gal-Ezer	There is a growing awareness of the importance of including computing education in the curriculum of secondary schools in countries like the United States of America, the United Kingdom, New Zealand, and South Korea. Consequently, we have seen serious efforts to introduce computing education to the core curriculum and/or to improve it. Recent reports (such as Wilson et al. 2010; Hubwieser et al. 2011) reveal that computing education faces problems regarding its lack of exposure as well as a lack of motivators for students to follow this line of study. Although students use computers for many tasks both at home and at school, many of them never quite understand what computer science is and how it relates to algorithmic thinking and problem solving. This panel will bring together leaders in computing education from Australia, Germany, Greece, Israel and Norway to describe the state of computing education in each of their countries. Issues raised will include how high school computer education is conducted in that country, how teachers are skilled /accredited, the challenges that are being faced today and how these challenges are being addressed. Panellists will suggest lessons other countries may find of value from their way of doing things. An important issue is how to recruit female students in to computer education at high school level and how to encourage them to continue in the discipline to university. The problem is exacerbated because computer education is still not included as a compulsory subject in the regular curriculum of high schools in all of these countries	Looking outside: what can be learnt from computing education around the world?	NA:NA:NA:NA:NA	2014
Jian Zhang	NA	Session details: Peer instruction	NA	2014
Daniel Zingaro	Recent work in computing suggests that Peer Instruction (PI) is a valuable interactive learning pedagogy: it lowers fail rates, increases retention, and is enjoyed by students and instructors alike. While these findings are promising, they are somewhat incidental if our goal is to understand whether PI is "better" than lecture in terms of student outcomes. Only one recent study in computing has made such a comparison, finding that PI students outperform traditionally-taught students on a CS0 final exam. That work was conducted in a CS0, where the same instructor taught both courses, and where the only outcome measure was final exam grade. Here, I offer a study that complements their work in two ways. First, I argue for and measure self-efficacy as a valued outcome, in addition to that of final exam grade. Second, I offer an inter-instructor CS1 study, whose biases differ from those of intra-instructor studies. I find evidence that PI significantly increases self-efficacy and suggestively increases exam scores compared to a traditional lecture-based CS1 class. I note validity concerns of such an in-situ study and offer a synthesis of this work with the extant PI literature.	Peer instruction contributes to self-efficacy in CS1	NA	2014
Christine Alvarado:Cynthia Bailey Lee:Gary Gillespie	New CS1 curricula and pedagogies have resulted in many positive outcomes over the last several years including lower fail rates and increased long-term retention. Given these positive outcomes, the question becomes how much do the traditional factors of prior experience and confidence still play a role in students' performance in and attitudes about these courses' Furthermore, given that increasingly recommended collaborative pedagogies (e.g. pair programming) force students to interact with their peers for a large percentage of their work in the class, how much does the confidence of their peers affect their own attitudes and performance? This paper presents a study investigating these questions. We find that prior experience and confidence still predict success, but only for some students. We also find that student confidence levels have little to no impact on the attitudes and performance of their peers.	New CS1 pedagogies and curriculum, the same success factors?	NA:NA:NA	2014
Zhen Li:Eileen Kraemer	We conducted an observational case study of pair programmers and solo programmers in a challenging, time-limited programming exam in a split level course at the University of Georgia during the spring semester of 2013. Although we observed no significant difference in performance on the exam, we found that pair programming promoted the early application of critical thinking in the process of solving a challenging programming task. Specifically, the pair programmers were found to conduct more critical thinking and to ask important questions in the program design phase while solo programmers postponed the same required thinking activity and associated questions until the testing and debugging phase. We attribute the solo programmer's failure to delve into the difficult questions to the phenomenon of "bounded rationality" and propose that the social effects of pair programming serve to mitigate this phenomenon with the result that the pair programmers' behaviors better align with good software engineering practices and promote the acquisition of expertise.	Social effects of pair programming mitigate impact of bounded rationality	NA:NA	2014
Cam MacDonell	NA	Session details: Software engineering: courses	NA	2014
Andres Neyem:Jose I. Benedetto:Andres F. Chacon	Software Engineering is an important area within industry and academia. Empirical software engineering has grown in importance in the software engineering research and education community. This means that it has become very relevant to include empirical studies or practices into computer science and software engineering curricula. This paper shows the results of applying an empirical approach to teaching software engineering through real-life projects. The computer science capstone experience is designed to bridge the gap from university expectations to those of industry.	Improving software engineering education through an empirical approach: lessons learned from capstone teaching experiences	NA:NA:NA	2014
Therese Mary Smith:Robert McCartney:Swapna S. Gokhale:Lisa C. Kaczmarczyk	Aspiring software engineers must be able to comprehend and evolve legacy code, which is challenging because the code may be poorly documented, ill structured, and lacking in human support. These challenges of understanding and evolving existing code can be illustrated in academic settings by leveraging the rich and varied volume of Open Source Software (OSS) code. To teach SE with OSS, however, it is necessary to select uniform projects of appropriate size and complexity. This paper reports on our search for suitable OSS projects to teach an introductory SE course with a focus on maintenance and evolution. The search turned out to be quite labor intensive and cumbersome, contrary to our expectations that it would be quick and simple. The chosen projects successfully demonstrated the maintenance challenges, highlighting the promise of using OSS. The burden of selecting projects, however, may impede widespread integration of OSS into SE and other computing courses.	Selecting open source software projects to teach software engineering	NA:NA:NA:NA	2014
Claudia Szabo	Academia and industry recognize the effectiveness of teaching Software Engineering through group-based project work supported by lectures discussing software engineering theory. However, while undertaking such project work, only a very small number of students in the team are exposed to team leadership and project management. This is because teams usually struggle with organization and timely task completion, and there is usually no time left to rotate leadership roles. To alleviate this problem, several gaming approaches have been proposed. In this paper, we analyze GameDevTycoon, the most recent addition to such games. We include a gameplay and reflection component in our group-based project course and perform a quantitative analysis of a team management and leadership aspects that the students encountered during their gameplay. We further compare and evaluate GameDevTycoon against five other software engineering-focused games. Our analysis shows the advantages and disadvantages of using GameDevTycoon for teaching project management and highlight further directions towards better inclusion in the curriculum.	Evaluating GameDevTycoon for teaching software engineering	NA	2014
John Dooley	NA	Session details: Web-based instruction	NA	2014
Radu P. Mihail:Beth Rubin:Judy Goldsmith	Asynchronous online discussions are considered the cornerstone of online education. Many instructors of face-to-face courses are "web-enabling" their classes to improve learning through critical inquiry using online discussions. In this exploratory study, we collected and analyzed online discussion data from two dissimilar computer science courses (one technical Graphics for Gaming (G4G) course and a writing intensive Science Fiction and Ethics (SF&E) course). Our findings suggest that, overall, making more posts, posting more questions and engaging in Devil's Advocacy have positive effects on learning, while making more informational posts, explaining to others and making longer posts do not. In the SF&E course, all students perceive that posting helped their learning, while in the G4G course students do not, but posting behavior differentiates those who perform well from those who perform poorly.	Online discussions: improving education in CS?	NA:NA:NA	2014
Luca de Alfaro:Michael Shavlovsky	CrowdGrader is a system that lets students submit and collaboratively review and grade homework. We describe the techniques and ideas used in CrowdGrader, and report on the experience of using CrowdGrader in disciplines ranging from Computer Science to Economics, Writing, and Technology. In CrowdGrader, students receive an overall crowd-grade that reflects both the quality of their homework, and the quality of their work as reviewers. This creates an incentive for students to provide accurate grades and helpful reviews of other students' work. Instructors can use the crowd-grades as final grades, or fine-tune the grades according to their wishes. Our results on seven classes show that students actively participate in the grading and write reviews that are generally helpful to the submissions' authors. The results also show that grades computed by CrowdGrader are sufficiently precise to be used as the homework component of class grades. Students report that the main benefits in using CrowdGrader are the quality of the reviews they receive, and the ability to learn from reviewing their peers' work. Instructors can leverage peer learning in their classes, and easily handle homework evaluation in large classes.	CrowdGrader: a tool for crowdsourcing the evaluation of homework assignments	NA:NA	2014
John DeNero:Stephen Martinis	We describe an effort to improve the composition quality of student programs: the property that a program can be understood effectively by another person. As a semester-long component of UC Berkeley's first course for majors, CS 61A, we gave students composition guidelines, scores, and qualitative feedback-all generated manually by a course staff of 10 graders for over 700 students. To facilitate this effort, we created a new online tool that allows instructors to provide feedback efficiently at scale. Our system differs from recently developed alternatives in that it is a branch of an industrial tool originally developed for internal code reviews at Google and used extensively by the open-source community. We found that many of the features designed for industrial applications are well-suited for instructional use as well. We extended the system with permissions controls and comment memories tailored for giving educational feedback. Using this tool improved the consistency of the feedback we gave to students, the efficiency of generating that feedback, and our ability to communicate that feedback to students. Emphasizing composition throughout the course improved the composition of our students' code. The quality of student programs improved by a statistically significant margin (p<0.01) over those from a previous semester, measured by a blind comparison of student submissions.	Teaching composition quality at scale: human judgment in the age of autograders	NA:NA	2014
Alvaro Monge	NA	Session details: Recruitment and retention of underrepresented groups	NA	2014
An-I Andy Wang:Gary Tyson:David Whalley:Robert van Engelen:Zhenghao Zhang	Computer science Ph.D. training provides numerous opportunities to prepare doctoral graduates to write research grant proposals. However, writing scholarship grant proposals is a very different process, and a newcomer might go through many attempts before obtaining their first awarded grant. This paper documents our four proposal submissions prior to acquiring our first NSF S-STEM grant for the Department of Computer Science at Florida State University. This paper also highlights major issues to consider when writing such proposals. We hope that future newcomers will be able to avoid some of the pitfalls we encountered in obtaining scholarship grants of a similar nature.	A journey toward obtaining our first NSF S-STEM (scholarship) grant	NA:NA:NA:NA:NA	2014
Tia Newhall:Lisa Meeden:Andrew Danner:Ameet Soni:Frances Ruiz:Richard Wicentowski	In line with institutions across the United States, the Computer Science Department at Swarthmore College has faced the challenge of maintaining a demographic composition of students that matches the student body as a whole. To combat this trend, our department has made a concerted effort to revamp our introductory course sequence to both attract and retain more women and minority students. The focus of this paper is the changes instituted in our Introduction to Computer Science course (i.e., CS1) intended for both majors and non-majors. In addition to changing the content of the course, we introduced a new student mentoring program that is managed by a full-time coordinator and consists of undergraduate students who have recently completed the course. This paper describes these efforts in detail, including the extension of these changes to our CS2 course and the associated costs required to maintain these efforts. We measure the impact of these changes by tracking student enrollment and performance over 13 academic years. We show that, unlike national trends, enrollment from underrepresented groups has increased dramatically over this time period. Additionally, we show that the student mentoring program has increased both performance and retention of students, particularly from underrepresented groups, at statistically significant levels.	A support program for introductory CS courses that improves student performance and retains students from underrepresented groups	NA:NA:NA:NA:NA:NA	2014
Barbara Ericson:Shelly Engelman:Tom McKlin:Ja'Quan Taylor	This paper describes Project Rise Up 4 CS, an attempt to increase the number of Black students in Georgia that pass the Advanced Placement (AP) Computer Science (CS) A exam. In 2012 Black students had the lowest pass rates on the AP CS A exam both in Georgia and nationally. Project Rise Up 4 CS provided Black students with role models, hands-on learning, competitions, a financial incentive, and webinars on AP CS A content. The first cohort started in January of 2013 and finished in May 2013. Of the 27 students who enrolled in the first cohort, 14 met all of the completion requirements, and 9 (69%) of the 13 who took the exam passed. For comparison, in 2012 only 22 (16%) of 137 Black students passed the exam in Georgia. In 2013, 28 (22%) of 129 Black students passed the exam in Georgia. This was the highest number of Black students to pass the AP CS A exam ever in Georgia and a 27% increase from 2012. In addition, students who met the completion requirements for Project Rise Up 4 CS exhibited statistically significant changes in attitudes towards computing and also demonstrated significant learning gains. This paper discusses the motivation for the project, provides project details, presents the evaluation results, and future plans.	Project rise up 4 CS: increasing the number of black students who pass advanced placement CS A	NA:NA:NA:NA	2014
Eric Aaron	NA	Session details: Interdisciplinary courses and curricula	NA	2014
Lori Carter	The benefits of interdisciplinary computing classes have been widely discussed. For the computing students, they provide a context in which to apply their skills, and appear to aid in recruitment and retention. For non-computing students, they provide additional skills to enhance their own crafts. For both, interdisciplinary programs open up new career possibilities and hone soft skills. In consideration of these and other benefits, the Point Loma Nazarene University Mathematical, Information, and Computer Sciences department have teamed up with the Biology, Chemistry, and Physics departments to offer several opportunities for interdisciplinary experiences to their students. In addition to the benefits, however, these programs produce significant challenges. This paper reviews the benefits of interdisciplinarity and discusses three different models of interdisciplinary experiences used at PLNU. It reports on the challenges that arose in each, and ways these difficulties were resolved. Finally, it discusses the hurdle of recruiting for such courses.	Interdisciplinary computing classes: worth the effort	NA	2014
Bill Manaris:Renée McCauley:Marian Mazzone:William Bares	In this paper, we describe Computing in the Arts (CITA), an innovative interdisciplinary major, which combines computer science with artistic theory and practice. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. At our institution, this involves three tracks (music, visual art, and theatre). CITA incorporates four synthesis courses, one per academic year, which help students interweave the two distinct curricular experiences into a cohesive whole in preparation for their capstone project. CITA has been fully implemented at the authors' institution. In the three years of its existence, it has increased participation in computer science by 23% mainly from an underserved population (students interested in the arts). Approximately 40% of these students are women. While these students are not necessarily strong in mathematics, they tend to be strong in design and creativity, thus enriching the pool of computing professionals with people able to envision new technologies and surprising innovations. Such people are fully versed in computer science so they can easily collaborate with more traditional computing professionals such as software engineers and scientific programmers. We discuss our successes, and provide pointers for others to establish similar degree programs, including potential challenges and lessons learned.	Computing in the arts: a model curriculum	NA:NA:NA:NA	2014
Debra S. Goldberg:Elizabeth K. White	Computer science is increasingly becoming interdisciplinary, with applications not only in scientific disciplines, but also in the arts, humanities, and social sciences. Training computer scientists to work in diverse application disciplines is imperative for modern departments. We have had success using interdisciplinary groups for this purpose in a computational biology class, Algorithms for Molecular Biology. In this class, carefully-balanced interdisciplinary groups learn to take advantage of each other's abilities, and to communicate effectively with students with a much different background. From this diversity, we get much more (e pluribus, plurima) than would be possible if we tried to train all students to have a more homogeneous blend of multiple disciplinary knowledge. Within a single semester, students go from virtually no understanding of one discipline to completing research projects on a relevant problem that they have defined themselves.	E pluribus, plurima: the synergy of interdisciplinary class groups	NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Baker Franke:Stephanie Hoeppner:Josh Paley	"Seldom was any knowledge given to keep, but to impart; the grace of this rich jewel is lost in concealment." -- Bishop Hall At the SIGCSE Symposiums in 2007 and 2011, we presented panels in which seasoned teachers shared the teaching tips we wished we'd known before starting our careers. The difference from earlier "Teaching Tips" panels was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources. We clustered these tips into categories: Grading, Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), Classroom (organization, interactions, and incentives), Personal (fostering relationships), and Meta (advice spanning categories). The sessions were received quite well, and the audience contributed many of their own teaching tips throughout the presentations. This year, we're presenting a "High School edition", and have invited inspirational teachers from a broad variety of schools. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for the online collection.	Teaching tips we wish they'd told us before we started: high school edition	NA:NA:NA:NA	2014
Ruth Anderson	NA	Session details: Special session	NA	2014
Ruth E. Anderson:Michael D. Ernst:Robert Ordóñez:Paul Pham:Steven A. Wolfman	NA	Introductory programming meets the real world: using real problems and data in CS1	NA:NA:NA:NA:NA	2014
Helen H. Hu	NA	Session details: Panel session	NA	2014
Helen H. Hu:Matthew Lang:Clif Kussmaul:Chris Mayfield:Tammy Pirmann	NA	Guided inquiry learning in context: perspectives on POGIL in CS	NA:NA:NA:NA:NA	2014
Brian Dorn	NA	Session details: Research: predictors, creative thinking, co-linking courses	NA	2014
Christopher Watson:Frederick W.B. Li:Jamie L. Godwin	Research over the past fifty years into predictors of programming performance has yielded little improvement in the identification of at-risk students. This is possibly because research to date is based upon using static tests, which fail to reflect changes in a student's learning progress over time. In this paper, the effectiveness of 38 traditional predictors of programming performance are compared to 12 new data-driven predictors, that are based upon analyzing directly logged data, describing the programming behavior of students. Whilst few strong correlations were found between the traditional predictors and performance, an abundance of strong significant correlations based upon programming behavior were found. A model based upon two of these metrics (Watwin score and percentage of lab time spent resolving errors) could explain 56.3% of the variance in coursework results. The implication of this study is that a student's programming behavior is one of the strongest indicators of their performance, and future work should continue to explore such predictors in different teaching contexts.	No tests required: comparing traditional and dynamic predictors of programming success	NA:NA:NA	2014
L. D. Miller:Leen-Kiat Soh:Vlad Chiriacescu:Elizabeth Ingraham:Duane F. Shell:Melissa Patterson Hazley	Our research is based on an innovative approach that integrates computational thinking and creative thinking in CS1 to improve student learning performance. Referencing Epstein's Generativity Theory, we designed and deployed a suite of creative thinking exercises with linkages to concepts in computer science and computational thinking, with the premise that students can leverage their creative thinking skills to "unlock" their understanding of computational thinking. In this paper, we focus on our study on differential impacts of the exercises on different student populations. For all students there was a linear "dosage effect" where completion of each additional exercise increased retention of course content. The impacts on course grades, however, were more nuanced. CS majors had a consistent increase for each exercise, while non-majors benefited more from completing at least three exercises. It was also important for freshmen to complete all four exercises. We did find differences between women and men but cannot draw conclusions.	Integrating computational and creative thinking to improve learning and performance in CS1	NA:NA:NA:NA:NA:NA	2014
Yolanda Reimer:Michael Cassens	An on-going problem with many courses across the CS curriculum is finding time to incorporate programming activities that are necessary for other critical aspects of the course. For example, in UI design the practice and evaluation of good design principles typically depends on the creation of at-least a semi-functional software prototype. However, having to include software implementation in courses whose main focus lies elsewhere can distract from core concepts, and oftentimes there are pedagogical reasons to separate out implementation. By co-linking upper-division courses in our CS program, we attempted to solve this problem by leveraging concepts of software design and implementation across two courses. In this experience report, we describe how the co-linked courses were structured, what we encountered, what worked well and what still needs improvement. Other CS educators might capitalize on our successes, and learn from our mistakes, in similar set-ups within their own curriculums.	Perspectives on co-linking design and development courses in CS	NA:NA	2014
Daniela Marghitu	NA	Session details: Focus on K-12: informal education, curriculum, and robots	NA	2014
Betsy DiSalvo:Cecili Reid:Parisa Khanipour Roshan	In this study we found that search terms that would likely be used by parents to find out-of-school computer science (CS) learning opportunities for their children yielded remarkably unproductive results. This is important to the field of CS education because, to date, there is no empirical evidence that demonstrates how a lack of CS vocabulary is a barrier to accessing informal CS learning opportunities. This study focuses on the experience of parents who do not have the privilege of education and technical experience when searching for learning opportunities for their children. The findings presented will demonstrate that issues of access to CS education go beyond technical means, and include ability to conduct suitable searches and identify appropriate computational learning tools. Out-of-school learning is an important factor in who is motivated and prepared to study computer science in college. It is likely that without early access to informal CS learning, fewer students are motivated to explore CS in formal classrooms.	They can't find us: the search for informal CS education	NA:NA:NA	2014
Joanna Goode:Jane Margolis:Gail Chapman	In recent years, the computer science education community has shown strong commitment to broadening participation in computing in K-12 classrooms. Educational research highlights the critical role of professional development in supporting teachers to attract and effectively teach underrepresented students in computing. In this paper we present the Exploring Computer Science (ECS) professional development model and the research on which it is based. We also present findings about the impact of ECS professional development on teachers' practice. As computing education initiatives become increasingly concerned with scaling up from a regional to a nationwide presence, it is important to consider how the essential components of effective professional development can drive this reform.	Curriculum is not enough: the educational theory and research foundation of the exploring computer science professional development model	NA:NA:NA	2014
Jennifer S. Kay:Janet G. Moss:Shelly Engelman:Tom McKlin	Few question the need to offer excellent programs in computer science at the Bachelors and Graduate Levels. But computer science is not just for computer scientists! An understanding of key computer science concepts is essential to comprehending the underpinnings of what drives much of the culture and environment that students will encounter upon graduation. Unfortunately, in the United States most state, regional, and national K-12 standards do not include computer science among the core competencies required of all students. However, careful study reveals many opportunities to satisfy mandatory non-computer-science standards while simultaneously teaching important concepts in computer science. This paper begins with an overview of these standards and suggests that educational robotics could be incorporated into K-12 curricula to satisfy these standards. But even if robots truly are a magic panacea, most K-12 teachers have never used them. The remainder of this paper discusses a pair of 3 day workshops we offered in the summers of 2011 and 2012 which were designed to introduce K-12 teachers with no prior programming experience to LEGO robot programming. We discuss the content of the workshops, how teachers' skills and attitudes changed as a result of these workshops, and how teachers used the material they learned in their schools.	Sneaking in through the back door: introducing k-12 teachers to robot programming	NA:NA:NA:NA	2014
Valerie Henderson, Summet	NA	Session details: Focus on K-12: before middle school	NA	2014
Osvaldo L. Oliveira:Maria C. Nicoletti:Luis M. del Val Cura	Many studies have provided qualitative arguments for the premise that the ability to compute is fundamental and therefore should be treated at all levels of education. This work presents a quantitative indication of the validity of this premise for primary school students. In order to precisely define what ability a student should have to use a model of computation to compute, this work reports an experimental study that shows a significant correlation between the student's ability to compute and his/her academic performance in a primary school.	Quantitative correlation between ability to compute and student performance in a primary school	NA:NA:NA	2014
Hilary Dwyer:Charlotte Hill:Stacey Carpenter:Danielle Harlow:Diana Franklin	The desire to expose more students to computer science has led to the development of a plethora of educational activities and outreach programs to broaden participation in computer science. Despite extensive resources (time and money), they have made little impact on the diversity of students pursuing computer science. To realize large gains, computational thinking must be integrated into K-12 systems, starting with elementary school. In order to do so, existing resources need to be adapted for a school setting. To make a curriculum with lessons that build on each other over several years, and accountability for student learning, we need standards, an understanding of how students learn, and identification of what students know before exposure to the curriculum. In this paper, we present our detailed findings of what fourth graders know before encountering a computational thinking curriculum. Groups of students participated in activities modified from CS Unplugged in order to discover their knowledge (rather than provide instruction). We identify aspects of the activities students were able to complete successfully, and where they will need further instruction. We then explain how we used these results to modify our pilot curriculum.	Identifying elementary students' pre-instructional ability to develop algorithms and step-by-step instructions	NA:NA:NA:NA:NA	2014
Neil Smith:Clare Sutcliffe:Linda Sandvik	Code Club is a network of after-school programming clubs for primary (US: elementary) schoolchildren, run by technically-competent volunteers in conjunction with (generally technically-unskilled) teachers. The main motivation of Code Club is to inspire children with a sense of fun and achievement for programming and digital creativity. This paper reports on the first year of Code Club in 1000 UK schools. The results were extremely positive, but some children had difficulty understanding the concepts behind the projects.	Code club: bringing programming to UK primary schools through scratch	NA:NA:NA	2014
Elizabeth Hawthorne	NA	Session details: Security among the cloud	NA	2014
Justin Cappos:Richard Weiss	One of the central skills in computer security is reasoning about how programs fail. As a result, computer security necessarily involves thinking about the corner cases that arise when software executes. An unfortunate side effect of this is that computer security assignments typically necessitate deep understanding of a topic, such as how the stack is laid out in memory or how web applications interact with databases. This work presents a series of assignments that require very little background knowledge from students, yet provide them with the ability to reason about failures in programs. In this set of assignments, students implement two very simple programs in a high-level language (Python). Students first implement a reference monitor that tries to uphold a security property within a sandbox. For the second portion, the students are provided each others' reference monitors and then write attack code to try to bypass the reference monitors. By leveraging a Python-based sandbox, student code is isolated cleanly, which simplifies development and grading. These assignments have been used in about a dozen classes in a range of environments, including a research university, online classes, and a four year liberal arts school. Student and instructor feedback has been overwhelmingly positive. Furthermore, survey results demonstrate that after a 2-3 week module, 76% of the students who did not understand reference monitors and access control learned these key security concepts.	Teaching the security mindset with reference monitors	NA:NA	2014
Khaled Salah	Cloud computing has become an attractive paradigm for many organizations in government, industry as well as academia. In academia, the cloud can offer instructors and students (whether local or at a distance) on-demand, dedicated, isolated, unlimited, and easily configurable machines. Such an approach has clear advantages over access to machines in a classic lab setting. In this paper, we show how cloud services and infrastructure could be harnessed to facilitate practical experience and training for cybersecurity. We used the popular Amazon Web Services (AWS) cloud; however, the use cases and approaches laid out in this paper are also applicable to other cloud providers.	Harnessing the cloud for teaching cybersecurity	NA	2014
Yanyan Zhuang:Chris Matthews:Stephen Tredger:Steven Ness:Jesse Short-Gershman:Li Ji:Niko Rebenich:Andrew French:Josh Erickson:Kyliah Clarkson:Yvonne Coady:Rick McGeer	Distributed platforms are now a de facto standard in modern software and application development. Although the ACM/IEEE Curriculum 2013 introduces Parallel and Distributed Computing as a first class knowledge area for the first time, the right level of abstraction to teach these concepts is still an important question that needs to be explored. This work presents our findings in teaching cloud computing by exposing upper-level students to testbeds in use by the distributed systems research community. The possibility of giving students practical and relevant experience was explored in the context of new course assignment objectives. Furthermore, students were able to significantly contribute to a pilot class project with medium-scale computation based on satellite data. However, the software engineering challenges in these environments proved to be daunting. In particular, these challenges were exacerbated by a lack of debugging support relative to the environments students were more familiar with---requiring development practices that out-stripped typical course experiences. Our proposed set of experiments and project provide a basis for an evaluation of the trade-offs of teaching cloud and distributed systems on the wild side. We hope that these findings provide insight into some of the possibilities to consider when preparing the next generation of computer scientists to engage with software practices and paradigms that are already fundamental in today's highly distributed systems.	Taking a walk on the wild side: teaching cloud computing on distributed research testbeds	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Leisa D. Thompson	NA	Session details: Panel session	NA	2014
Leisa D. Thompson:Crystal Eney:Ruth Davis:Tiffany Grady	NA	Recruit and retain women in undergraduate computing: success stories using research-based practices	NA:NA:NA:NA	2014
Jan Cuny	NA	Session details: Panel session	NA	2014
Jan Cuny:Diane A. Baxter:Daniel D. Garcia:Jeff Gray:Ralph Morelli	Our grand challenge is to scale high-quality computer science curriculum and instruction to reach all high school students. CS10K -- an NSF and ACM-sponsored project -- is working to do just that by supporting curriculum development, computer education research and professional development through the Computing Education for the 21st Century (CE21) program at NSF. Professional Development (PD) is a key piece of the project, as we need to train 10,000 teachers to teach rigorous computing courses in 10,000 high schools by 2016 -- the school year that a new Advanced Placement Course will be rolled out. This panel will provide an overview of the PD landscape and then each panelist will discuss the unique aspects of their PD project for high school teachers.	CS principles professional development: only 9,500 to go!	NA:NA:NA:NA:NA	2014
Paul Medlock-Walton	NA	Session details: Panel session	NA	2014
Paul Medlock-Walton:Kyle J. Harms:Eileen T. Kraemer:Karen Brennan:Daniel Wendel	NA	Blocks-based programming languages: simplifying programming for different audiences with different goals	NA:NA:NA:NA:NA	2014
Richard Brown	NA	Session details: Panel session	NA	2014
Richard A. Brown:Joel C. Adams:Clayton Ferner:Elizabeth Shoop:Anthony Barry Wilkinson	The industry shift to emerging forms of parallel and distributed computing (PDC), including multi-core CPUs, cloud computing, and general-purpose use of GPUs, have naturally led to increased presence of PDC elements undergraduate Computer Science curriculum recommendations, such as the new and substantial "PD" knowledge area in the ACM/IEEE CS2013 recommendations. How can undergraduate students grasp the extensive and complex range of PDC principles and practices, and apply that knowledge in problem solving, while PDC technologies continue to evolve rapidly? Parallel design patterns occur at all computational levels, ranging from low-level concurrent execution patterns (such as message passing or thread pool patterns) to high-level software design patterns suitable for organizing entire systems or their components (such as model-view-control or pipe and filter patterns). The ubiquity of these patterns in all forms of parallel and distributed computation makes parallel patterns relevant and illuminating at all undergraduate levels, and knowledge of those patterns can guide effective problem solving for parallel programs. This panel presents four viewpoints representing various approaches for teaching parallel patterns to CS undergraduates at various academic levels, including short "patternlets" examples, patterns in domain applications and parallel problem solving, and two tools, Seeds and Paraguin, for teaching parallel design patterns to undergraduates.	Teaching parallel design patterns to undergraduates in computer science	NA:NA:NA:NA:NA	2014
Ariel Ortiz Ramírez	NA	Session details: Operating systems and programming languages	NA	2014
Christoffer Dall:Jason Nieh	Learning about operating systems often involves modifying a large and complex code base. Grading student projects can be difficult and time consuming, yet students often do not learn from their programming errors and struggle to understand core operating system concepts. We present GradeBoard, a code review system designed to simplify grading for instructors and enable students to understand and learn from their errors. GradeBoard provides an easy-to-use Web interface that allows instructors to annotate student code submissions with grading comments and scores, and students to discuss the comments and scores with instructors. GradeBoard presents student code changes with syntax highlighting and lets users collapse or expand code sections to provide a desired level of context, making it easier to read and understand student programming project submissions. Comments and scores are easily identifiable by visual cues, improving interaction between instructors and students. We have deployed and used GradeBoard in a large operating systems course involving Linux kernel programming projects. GradeBoard provided robust, easy-to-use functionality for reviewing Linux kernel code changes, improved the instructional staff grading experience, and over 90% of students surveyed indicated that GradeBoard improved their understanding of the kernel programming projects better than other alternatives.	Teaching operating systems using code review	NA:NA	2014
Christopher Corsi:Robert Geist:Dennis Lingerfelt	Open source Linux has become increasingly popular as a vehicle for incorporating hands-on experience with a real system into both undergraduate and graduate operating systems courses. System virtualization tools, such as VMWare, Xen, VirtualBox, and KVM, allow students to freely experiment with kernel modifications without requiring dedicated hardware and without generating significant concern for the ill-effects of system crashes. Nevertheless, certain kernel projects that are highly desirable from an educational standpoint remain unavailable under standard approaches to virtualization. One such project that is known to carry substantial instructional value is the design and implementation of an SMP-safe driver for a high-performance graphics card. Standard virtualization tools export only a minimally-capable, SVGA graphics adapter, which is an inadequate architecture for such a project. This paper describes an extremely simple, kernel-independent, software tool for use by instructors of operating systems courses. The tool provides a virtual, high-performance graphics card that is suitable for Linux device driver design and implementation. The code for the virtual card, which is relatively short, is easily modified by instructors to present different interfaces each semester. The code for both the virtual card and a sample Linux 3.2.36 driver for it may be freely downloaded from http://people.cs.clemson.edu/~ccorsi/kyouko/.	A virtual graphics card for teaching device driver design	NA:NA:NA	2014
Timothy Fossum	This paper describes PLCC, a compiler-compiler tool to support courses in programming languages, compilers, and computational theory. This tool has proven to be useful for implementing interpreters, building compilers, and creating parsers for context-free languages. PLCC is a Perl program that takes an input file that specifies the tokens, syntax, and semantics of a language and that generates a complete set of Java files that implement the semantics of the language. PLCC stands for "Programming Language Compiler-Compiler". PLCC is not intended to be a production-quality tool. Rather, it supports understanding and implementing the essential elements of lexical analysis, parsing, and semantics without having to wrestle with the complexities of dealing with "industrial-strength" compiler-compiler tools. Students quickly learn how to write PLCC "grammar" files for small languages that have straightforward syntax and semantics and use PLCC to build Java-based parsers, interpreters, or compilers for these languages that run out-of-the-box. Input to PLCC is a text file with a token definition section that defines language tokens as simple regular expressions, a syntax section that specifies the grammar rules of an LL(1) language as simple Backus-Naur Form (BNF) productions, and a semantics section that defines the language semantics as Java methods. PLCC generates a set of Java source files that are entirely self-contained and that import only standard elements of 'java.util' in JDK5 and above. For testing purposes, PLCC generates a read-eval-print loop that (1) reads standard input, (2) scans, parses, and evaluates the input, and (3) prints the evaluation to standard output.	PLCC: a programming language compiler compiler	NA	2014
Briana Morrison	NA	Session details: Soft skills: academic perspectives	NA	2014
Orit Hazzan:Gadi Har-Shai	This paper continues a previous paper [1] in which we described students' gradual understanding of computer science (CS) and software engineering (SE) soft skills. Our study focused on a course we taught on soft skills in CS and SE, offered by the Department of Computer Science at the Technion -- Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip Technion CS graduates with such skills. In [1] we presented the nature of CS soft skills, described the course schedule, including the teaching principles applied in the course, and showed how, in the course of the course, students gradually constructed a mental perception of CS soft skills in a 4-stage process. In this paper, we refine the comprehension process into a 6-rung ladder, based on further data analysis and additional experience gained when teaching the course for a second time. We elaborate on the additional rungs and further illuminate the results of two evaluation surveys on the course that were distributed to the students (in addition to the formal course evaluation administrated by the Technion's Center for the Promotion of Teaching). One of our main conclusions is that the course provides students with the opportunity to express their desire to be more involved in the teaching process of the course and to discuss and analyze their own soft skills. In other words, students realize the importance and significance of learning soft skills by actually implementing these skills in the learning process. In the Summary part of the paper, we present several pedagogical conclusions that are based on this observation and that we intend to implement in the future when teaching this course.	Teaching and learning computer science soft skills using soft skills: the students' perspective	NA:NA	2014
Daniela Inclezan:Luis Pradanos	Promoting sustainability, critical thinking, and ethical awareness are goals that appear in the vision statements of the majority of universities in the United States nowadays. One way of achieving these goals is by increasing the ecological literacy (i.e., ecoliteracy) of our students. In order to be effective, ecoliteracy should be taught not only in environmental studies classes, but rather across the institutional curriculum. In this paper we present three activities designed to be used in the first week of class in an introductory Database Systems course. Our activities promote critical thinking, systemic thinking, ethical behavior, and an increased awareness of ecological problems -- building blocks that set up the stage for teaching ecoliteracy.	Promoting ecoliteracy in an introductory database systems course: activities for the first week	NA:NA	2014
Janet E. Burge:Gerald Gannod:Mike Carter:Alanna Howard:Brian Schultz:Mladen Vouk:David Wright:Paul Anderson	Communication skills, including reading, writing, speaking, and teaming, are among the most sought after by employers of recent Computer Science/Software Engineering (CS/SE) graduates. We have been conducting a project that has developed a general framework for program-level integration of communication into CS/SE education. Our framework has been developed through workshops and field evaluation of training materials (and other resources) by faculty from a wide variety of institutions under the guidance of experts in writing and communication across the curriculum. This paper discusses the current state of communication teaching in the CS/SE domain, and presents our framework and experiences for program-wide implementation of communication skills.	Developing CS/SE students' communication abilities through a program-wide framework	NA:NA:NA:NA:NA:NA:NA:NA	2014
Raghuram Ramanujan	NA	Session details: What we say, what they do	NA	2014
Joseph P. Sanford:Aaron Tietz:Saad Farooq:Samuel Guyer:R. Benjamin Shapiro	In this paper we present an initial study of how metaphors are used by university-level Computer Science instructors. The goal of this research is to gain a better understanding of the role that metaphors play in Computer Science education, to catalog the kinds of metaphors that are used, and to assess their effectiveness in supporting learning. We interviewed 10 educators in Computer Science about the metaphors they have used in the classroom, with a focus on introductory "CS1" programming courses. We analyze these interviews with an existing theory of metaphors, which provides a framework for describing their structure and features. The theory predicts that most metaphors have limitations, and eventually fall apart. Therefore, we also asked educators to assess how far they could push their metaphors with and to describe what happens at the breaking point. Our preliminary findings provide a foundation to inform and guide more in-depth analyses in the future.	Metaphors we teach by	NA:NA:NA:NA:NA	2014
Malcolm Corney:Sue Fitzgerald:Brian Hanks:Raymond Lister:Renee McCauley:Laurie Murphy	Recent studies have linked the ability of novice (CS1) programmers to read and explain code with their ability to write code. This study extends earlier work by asking CS2 students to explain object-oriented data structures problems that involve recursion. Results show a strong correlation between ability to explain code at an abstract level and performance on code writing and code reading test problems for these object-oriented data structures problems. The authors postulate that there is a common set of skills concerned with reasoning about programs that explains the correlation between writing code and explaining code. The authors suggest that an overly exclusive emphasis on code writing may be detrimental to learning to program. Non-code writing learning activities (e.g., reading and explaining code) are likely to improve student ability to reason about code and, by extension, improve student ability to write code. A judicious mix of code-writing and code-reading activities is recommended.	'explain in plain english' questions revisited: data structures problems	NA:NA:NA:NA:NA:NA	2014
Kevin Buffardi:Stephen H. Edwards	While Computer Science curricula teach students strategic software development processes, assessment is often product-instead of process-oriented. Test-Driven Development (TDD) has gained popularity in computing education, but evaluating students' adherence to TDD requires analyzing their development processes instead of only their final product. Consequently, we designed an adaptive feedback system for reinforcing incremental testing behaviors. In this paper, we compare the results of the system with different reinforcement schedules and with- or without- visually salient testing goals. We analyzed snapshots of students' programming projects gathered during development and interviewed students at the end of the academic term. From our findings, we identify potential for influencing student development behaviors and suggest future direction for designing adaptive reinforcement.	A formative study of influences on student testing behaviors	NA:NA	2014
Ellen Walker	NA	Session details: Extending frameworks	NA	2014
James R. Miller	Shader-based OpenGL is a powerful and exciting tool for individuals with data visualization needs, interests in gaming, a need to create and manipulate synthetic environments, and a variety of other high-performance tasks. It is well-known that shader-based OpenGL is difficult to learn for programmers with no prior graphics API experience -- some have even claimed it's impossible to teach to individuals without such prior exposure. In this paper, we report on our experiences developing an educational approach that we believe has contributed to the base of evidence that it is not only possible, but also desirable to do so. Our overriding goal has been to learn and exploit the extent to which mastering a complex graphics API like modern shader-based OpenGL can be enhanced by using a software design framework into which relevant concepts can be placed, thus facilitating more rapid assimilation and mastery of the concepts. We have been using this technique in our Introduction to Computer Graphics course in which we have two primary goals: teach shader-based OpenGL to students who have no prior experience using a graphics API, and present a framework to students that will scale up to medium and large scale applications, both in terms of code size as well as data size. We do not in any way suggest that our architecture is the 'best' for all advanced graphics applications, or even for teaching. Instead we simply claim that use of such a framework helps students master complex OpenGL concepts and develop nontrivial interactive 3D applications. Once students fully understand the basics, they should find it easy to migrate to other perhaps quite different architectures.	Using a software framework to enhance online teaching of shader-based OpenGL	NA	2014
James Cross:Dean Hendrix:Larry Barowski:David Umphress	In this paper, we describe our experiences using dynamic program visualizations in our Java-based CS1 and CS2 courses during the spring semester 2013. The visualizations were constructed by both faculty and students using the new viewer canvas in jGRASP. A public beta version was downloaded and installed in our computer labs and on student and faculty machines. Program visualizations were used in the classroom as well as in lab activities and programming projects. Since the viewers had already been evaluated in controlled experiments, our focus was on ease of use of the viewer canvas by the students and the utility of the program visualizations in helping students understand their programs. Direct observations in the lab and individual meetings with students to discuss their work indicated that students could indeed build dynamic visualizations that, in conjunction with the debugger, helped them understand and correct bugs in their programs much more effectively than using the debugger alone.	Dynamic program visualizations: an experience report	NA:NA:NA:NA	2014
Ivaylo Ilinkin	Mobile devices have become ubiquitous in our daily lives and are replacing the desktop for email, social networking, daily planner, and so on. A typical mobile device now integrates a wide range of accessories, such as camera, GPS receiver, accelerometer, and offers a touch-screen with gesture-based interaction. This makes mobile devices an exciting platform for software development and programming projects for mobile devices have great potential to provide engaging experiences for computer science majors. This paper describes a pedagogical tool for introducing Android in a traditional CS1 course. The goal is not to teach Android programming, but to create a framework that integrates seamlessly with the CS1 course structure and supports the introduction of the fundamental computer science concepts by creating an engaging learning environment. The framework enables the students to port their CS1 projects to an Android device with minimal effort.	Opportunities for android projects in a CS1 course	NA	2014
Nick Parlante	NA	Session details: Special session	NA	2014
Nick Parlante:Julie Zelenski:Josh Hug:John Nicholson:John DeNero:Antti Laaksonen:Arto Vihavainen:Frank McCown:Kevin Wayne	A great CS assignment is a delight to all, but the path to one can be most roundabout. Many CS students have had their characters built up on assignments that worked better as an idea than as an actual assignment. Assignments are hard to come up with, yet they are the key to student learning. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Ursula Wolz	NA	Session details: Panel session	NA	2014
Lillian (Boots) Cassel:Bonnie MacKellar:Joan Peckham:Carol Spradling:Han Reichgelt:Suzanne Westbrook:Ursula Wolz	NA	Interdisciplinary computing in many forms	NA:NA:NA:NA:NA:NA:NA	2014
Murali Sitaraman	NA	Session details: Special session	NA	2014
Murali Sitaraman:Bruce W. Weide	Program correctness is central to computing, with instructors striving to convey the importance of getting it right starting in CS1. Teaching this material carefully demands a uniform framework to specify, implement, and reason about software correctness. To make these ideas accessible to educators and students, the tutorial will use RESOLVE, an integrated specification and programming language with a toolset especially designed for building verified components. The tutorial will also discuss how to get students involved through hands-on activities with software construction and modular verification using a web-integrated environment that requires no software installation and that features a prototype 'push-button' verifying compiler. The proposers have taught the ideas contained here using engaging pedagogical methods in introductory and advanced CS courses to thousands of students and dozens of educators over the past 20 years, and this SIGCSE tutorial will leverage that experience.	Special session: "hands-on" tutorial: teaching software correctness with RESOLVE	NA:NA	2014
Wanda Dann	NA	Session details: Special session	NA	2014
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba	In this special session, attendees learn about techniques of teaching with team projects with Alice 3's new Save Type, Import Type, and Merge capabilities. Using this technique, students in introductory level programming courses can participate in team projects where students work as a team in various stages of design, development, and testing. As part of this process students may work independently to code one or more classes and then merge their work with that of other members of the team to create the final project.	Tutorial: team projects with Alice 3	NA:NA:NA:NA	2014
Martha Kosa	NA	Session details: Tools	NA	2014
Andrés Moreno:Erkki Sutinen:Mike Joy	A review of the practical uses of errors in education reveals three contexts where errors have been shown to help: teaching conceptual knowledge, changing students' attitudes and promoting learning skills. Conflictive animations form a novel approach to teaching programming that follows a long tradition on research and development on program animation tools. Conflictive animations link the benefits of errors with program animation tools and programming education. This approach involves presenting to the students conflictive animations that do not animate faithfully the programs or concepts taught. Conflictive animations are versatile enough to cover the fundamental building blocks of programs such as operators, expressions and statements. With conflictive animations a novel set of learning activities can be introduced to computer science classes. This conflictive dimension of activities augments an engagement taxonomy for animation tools at all levels. They are an example of activities that promote critical thinking. A particular implementation of conflictive animations has been empirically evaluated aiming for ecological validity rather than statistical significance. Results indicate that students using conflictive animations improve their metacognitive skills, and, when compared to a control group, their conceptual knowledge improves at a better rate.	Defining and evaluating conflictive animations for programming education: the case of jeliot ConAn	NA:NA:NA	2014
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene:Chaoli Wang	This paper describes a visualization tool RSAvisual that helps students learn and instructors teach the RSA cipher. This tool permits the user to visualize the steps of the RSA cipher, do encryption and decryption, learn simple factorization algorithms, and perform some elementary attacks. The demo mode of RSAvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in encryption, decryption, the Extended Euclidean algorithm, two simple factorization algorithms and three elementary attacks. The user may compute the output of each operation and check for correctness. This helps students learn the primitive operations and how they are used in the RSA cipher. The opportunity for self-study provides an instructor with greater flexibility in selecting a lecture pace for the detailed materials. Classroom evaluation was positive and very encouraging.	RSAvisual: a visualization tool for the RSA cipher	NA:NA:NA:NA:NA:NA	2014
Stephen H. Edwards:Daniel S. Tilden:Anthony Allevato	Pythy is a web-based programming environment for Python that eliminates software-related barriers to entry for novice programmers, such as installing an IDE or the Python runtime. Using only a web browser, within minutes students can begin writing code, watch it run, and access support materials and tutorials. While there are a number of web-based Python teaching tools, Pythy differs in several respects: it manages student assignment work, including deadlines, turn-in, and grading; it supports live, interactive code examples that instructors can write and students can explore; it provides auto-saving of student work in the cloud, with full, transparent version control; and it supports media-computation-style projects that manipulate images and sounds. Pythy provides a complete ecosystem for student learning, with a user interface that follows a more familiar web browsing model, rather than a developer-focused IDE interface. An evaluation compares student perceptions of Pythy in relation to JES, another student-friendly beginner Python environment. Classroom experiences indicate that Pythy does reduce the novice obstacles that it aims to address.	Pythy: improving the introductory python programming experience	NA:NA:NA	2014
Giti Javidi	NA	Session details: Focus on K-12: outreach and computational thinking	NA	2014
Antti-Jussi Lakanen:Ville Isomöttönen:Vesa Lappalainen	This paper presents lessons learned from five years of teaching a five-day game design and programming outreach course. The course was offered in summer time and targeted at middle and high school students. In total, 462 youngsters have taken part in 21 course instances. We describe our course concept, and discuss our successes and challenges. In particular, we focus on understanding our student populations by presenting descriptives and statistics of the events, and performing a statistical cluster analysis based on pre- and post-surveys. The cluster analysis was complemented with an analysis of the qualitative data, also originating from the surveys. Taken together, students could be classified into five groups with substantial differences: Enthusiasts, Newbies, Uncertains, Experimenters, and Unsatisfieds. Awareness of the clusters helps instructors of similar courses in developing course content, designing differentiated instruction, and planning follow-up or advanced courses.	Five years of game programming outreach: understanding student differences	NA:NA:NA	2014
Polina Charters:Michael J. Lee:Andrew J. Ko:Dastyni Loksa	Computer programming is now used broadly across many industries, with a diversity of working adults writing programs and interacting with code as part of their jobs. However, negative attitudes toward programming continue to deter many from studying computer science and pursuing careers in technology. To begin understanding adults' attitudes toward computer programming and how we can improve them, we used an educational video game to give 200 adult participants a concrete programming experience via the web, and then collected their self-reported opinions about programming. We found that adults initially had poor attitudes toward programming, believing that it was difficult, boring, and something they generally could not learn. After the online learning experience, their attitudes improved significantly, regardless of gender, population density, or level of education. These results demonstrate that adult attitudes toward programming, while initially negative, can be quickly changed with a brief, positive exposure to programming.	Challenging stereotypes and changing attitudes: the effect of a brief programming encounter on adults' attitudes toward programming	NA:NA:NA:NA	2014
Ashok Ram Basawapatna:Alexander Repenning:Kyu Han Koh:Mark Savignano	Future school science standards, such as the Next Generation Science Standards (NGSS), emphasize the integration of simulation and modeling activities in the classroom environment. The extremes of these activities have two vastly different implementations. On one hand, a teacher can have students experiment on a pre-made simulation associated with the material. On the other hand, students can use, for example, an end-user programming tool to create the simulation from scratch. This allows students to not only experiment on, but also, to model the real world phenomenon being studied- a key component of computational thinking. However, the greater amount of time necessary for student authoring of simulations can make such an approach infeasible in the classroom environment. This paper presents a spectrum of strategies for integrating simulations into class- rooms emphasizing our research at the Scalable Game Design Lab, University of Colorado Boulder as well as research from other entities. Starting at consuming simulations and adding more user interaction and authoring elements begins to provide a gentle slope from consumption towards simulation creation. Results indicate that many of these strategies are quite effective.	The consume - create spectrum: balancing convenience and computational thinking in stem learning	NA:NA:NA:NA	2014
Michelle Craig	NA	Session details: MOOCs	NA	2014
Joe Warren:Scott Rixner:John Greiner:Stephen Wong	Human/human interaction is a critical component of learning in many domains including introductory computer programming. For on-campus courses, lectures and problem sessions provide opportunities for students to interact with the instructor(s) and their peers. For online courses, opportunities for human/human interaction are more limited and usually correspond to activities like forum postings and online study groups. For online programming courses, the situation is potentially even worse since many of the computational tools designed to facilitate learning to program, such as unit testing, emphasize human/machine interaction and can be frustrating for beginning students. In this paper, the authors describe their experience in teaching an introductory programming MOOC. The guiding philosophy for this course is that learning to program should be a social experience that emphasizes human/human interaction, not human/machine interaction. Both the tools and assessment methods deployed in this course were chosen to help achieve this goal. In particular, this paper discusses a key tool that supports human/human interaction and several aspects of the course that contributed to its success.	Facilitating human interaction in an online programming course	NA:NA:NA:NA	2014
Terry Tang:Scott Rixner:Joe Warren	We describe a web-based programming environment designed to support teaching introductory programming for a massive open online class. We discuss some of the thought processes behind the design of this environment and then focus on two key innovations incorporated in our environment: a simplified GUI library for interactive Python programming and a browser-based tool for visualizing the execution of event-driven Python programs.	An environment for learning interactive programming	NA:NA:NA	2014
Pascal Van Hentenryck:Carleton Coffrin	The practice of discrete optimization involves modeling and solving complex combinatorial problems which have never been encountered before and for which no universal computational paradigm exists. Teaching such skills is challenging: Students must learn, not only the core technical skills, but also an ability to think creatively in order to select and adapt a paradigm to solve the problem at hand. This paper explores the question of whether the teaching of such creative skills translates to massive open online courses (MOOCs). It first describes a methodology for teaching discrete optimization that has been successful on campus over fifteen years. It then discusses how to adapt the campus format to a MOOC version. The success of the approach is evaluated through extensive data analytics enabled by the wealth of information produced by MOOCs.	Teaching creative problem solving in a MOOC	NA:NA	2014
Ruth Anderson	NA	Session details: Collecting and analyzing student data II	NA	2014
Chris Mayfield:Carole Ottenheimer:Bethann Canada:Brooke Bell	Apps4VA is a bold initiative to improve K-12 education by leveraging data on Virginia public school students' progress toward college and career readiness. The goal of the project is for students, professionals, and the general public to create "apps" that explore new ways of using K-12 education data to aid in better data-driven decisions and intervention strategies. In Spring 2013, sixty students in a database systems course participated in a semester-long project based on Apps4VA. This paper describes our teaching experiences, reports our lessons learned working with education data, and documents improvements in student outcomes. We also describe how instructors of database and data analytics courses may partner with local governments to adopt similar projects in their communities.	Introducing undergraduate database students to K-12 education research	NA:NA:NA:NA	2014
Douglas A. Kranch	This retrospective study of the performance of Computer Information Systems (CIS) students from between 1987 and 2010 found evidence that remedial math, reading, and writing courses can significantly increase student mean GPA, persistence, and completion in a CIS program. Remediation was most effective when verbal as well as mathematical deficiencies were addressed, and the performance of fully remediated students was indistinguishable as a group from students not requiring remediation.	Remediation and student success in CIS programs	NA	2014
Yuliya Cherenkova:Daniel Zingaro:Andrew Petersen	We examine student difficulties with CS1 concepts by analyzing a dataset containing 266,852 student responses to weekly code-writing problems. We find that conditionals and loops prove particularly problematic, even when considering 'second chance' data; and that, while we observe some evidence of improvement, certain straightforward applications of loops continue to be problematic at the end of the term. Our contribution is the corroboration of earlier findings, and a call to use online repositories of student submissions as rich sources of data on the student learning experience.	Identifying challenging CS1 concepts in a large problem dataset	NA:NA:NA	2014
Paul Tymann	NA	Session details: Special session	NA	2014
Paul T. Tymann:Frances P. Trees:Robert Glen Martin:Richard Kick:Lien Diaz	College Board has joined national efforts to improve the state of STEM education, in particular to address the challenge of increasing participation with a diverse population of computer scientists to meet the growing demands of the field of computing. The Advanced Placement (AP) Program is pleased to endeavor in enhancing AP Computer Science offerings by maintaining college level integrity and addressing issues of equity and access for students and teachers. In addition to the established AP Computer Science A course, the AP Program is engaged in the development of a forthcoming AP Computer Science Principles course. The additional option for high school students to study college level computing will provide more students with an opportunity to be introduced to important computer science concepts, gain a broader perspective of the field of study, and have access to a larger pathway into computing. This session will review information regarding the AP Computer Science A course and will discuss updated course content and exam development. It will then discuss the new Computer Science Principles course and plans for the development and launch of the course. The session will conclude with a Q&A session addressing questions regarding both courses. The session will be moderated by members of the Computer Science A and Principles Development Committees.	Advanced placement computer science: AP computer science a and AP computer science principles	NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Amy Briggs:Gail Chapman:Joanna Goode:Rebecca Brook Osborne:Pat Yongpradit	NA	A public/private partnership for expanding computer science in schools	NA:NA:NA:NA:NA:NA	2014
Paul Anderson	NA	Session details: Panel session	NA	2014
Paul Anderson:James McGuffee:David Uminsky	The purpose of this panel is to discuss the creation and implementation of a data science degree program at the undergraduate level. The panel includes representatives from three different universities that each offers an undergraduate degree in Data Science as of fall 2013. We plan to share information on the logistics of how the data science programs came to exist at each of our schools as well as encourage a robust interactive discussion about the future of data science education at the undergraduate level.	Data science as an undergraduate degree	NA:NA:NA	2014
Chunming Gao:Noriyuki Iwane	Introducing computer programming to non-computer science students has been a challenge. Concerns deal mainly with various backgrounds and expectations of students, planning of course components, and the adoption of effective teaching methods. This poster presents a guided active learning model with blended approach to help teaching computer programming to non-majors. The model starts with an outline of course objectives and the selection of textbooks, online tools, classrooms, and lab rooms. Under the blended approach, the model consists of classroom modules, lab room face-to-face modules, and online modules. It considers active learning in: online modules before and after classes or labs, in-class module, and in-lab module. The model concludes with the course evaluation which feeds back to the start for future improvement. By using this blended active learning model for five years, it has proven to be effective in engaging students in the course study and flexible to integrate various educational techniques. In the future, we plan to further study its flexibility by integrating innovative e-text learning techniques into the model.	Application of a blended active learning model in teaching computer programming to non-majors (abstract only)	NA:NA	2014
Kuan-Yu Lin:Janet Mei-Chuen Lin:Hue-Ching Kao	This study investigated the difficulties encountered by novice Alice programmers. The researchers conducted one-on-one clinical interviews with 22 10th-grade students at a senior high school in Taipei, Taiwan. The participants were offered nine Alice programming tasks, each requiring the use of a different set of programming constructs, which included objects, primitive methods, expressions, built-in functions, variables, conditional execution, repetition control, arrays, user-defined methods, and parameter passing. Each participant was observed closely as s/he worked through the given tasks. Whenever an impasse occurred while a student was trying to solve a problem, the observer would intervene by asking a sequence of questions with increasing specificity, ranging from strategic prompts to hints to provides, in order to determine the cause of the impasse. This study summarized the common difficulties for each of the Alice programming constructs used by the participants in the programming tasks, and students' difficulties were categorized into four types: connection, location, usage, and math-and-other difficulties. Students having connection difficulties were unable to apply appropriate programming constructs to implement the actions required; location difficulties indicated students? inability to locating, in the Alice interface, the programming constructs they needed; usage difficulties referred in general to semantic errors in a student's programs; whereas math-and-other difficulties were caused mainly by students' inadequate math knowledge. It is hoped that the findings of this research will help Alice instructors to improve their students' performance by familiarizing themselves with the existence of the identified difficulties, and by addressing the missing conceptions or misconceptions underlying those difficulties.	An analysis of difficulties encountered by novice alice programmers (abstract only)	NA:NA:NA	2014
Ting-Yun Hou:Yu-Tzu Lin:Yu-Chih Lin:Cheng-Chih Wu	his study investigates the cognitive processes involved in program comprehension based on eye gaze tracking. Thirty-eight participants were asked to comprehend the test programs. Eye-movement analysis was employed to track the students' gaze paths while they traced the programs for comprehension. Cognitive processes were then obtained by sequential analysis of the gaze data to investigate the significant sequences of attention areas. The mined cognitive processes were compared between high and low comprehenders. The experiment results show that most subjects focused on major part of the program to comprehend the program. However, high comprehenders traced the program in a more logical manner. In addition, low comprehenders needed more manual calculation and also needed to trace back to prior statements for recalling required information, which might be because they had limited working memory capacities for computing and memorizing. Subjects performed better on cognitive processes involved in the working memory (short-term memory, mental arithmetic, and logical thinking) also performed better on program comprehension. Working memory seems to play an important role in program comprehension. These results can provide suggestions for researchers/instructors to develop adaptive instructional strategies for students of different characteristics.	Exploring cognitive processes in program comprehension based on eye-movement analysis (abstract only)	NA:NA:NA:NA	2014
Stephanie Rogers:Steven Tang:Dan Garcia	Coding style is important to teach to beginning programmers, so that bad habits don't become permanent. This is often done manually at the University level because automated Python static analyzers cannot accurately grade based on a given rubric. However, even manual analysis of coding style encounters problems, as we have seen quite a bit of inconsistency among our graders. We introduce ACCE--Automated Coding Composition Evaluator--a module that automates grading for the composition of programs. ACCE, given certain constraints, assesses the composition of a program through static analysis, feature extraction, supervised learning and clustering (unsupervised learning), automating the subjective process of grading based on style and identifying common mistakes. Further, we create visual representations of the clusters to allow readers and students understand where a submission falls, and the overall trends. We have applied this tool to CS61A--a CS1 level course at UC, Berkeley experiencing rapid growth in student enrollment--in an attempt to help expedite the involved process as well as reduce human grader inconsistencies.	ACCE: automatic coding composition evaluator (abstract only)	NA:NA:NA	2014
Cecily Heiner	In CS1, students have a limited set of programming skills and they often represent a wide range of experience levels; this combination can make group work especially challenging. I describe guidelines for selecting group work projects and problems, suggestions for forming groups and assigning roles, and four projects appropriate for group work in CS1.	Guidelines for group work in CS1 (abstract only)	NA	2014
Shearon Brown:Xiaohong Yuan	It has been a challenge to retain computer science students, especially underrepresented students such as woman and minority. This poster describes our experiences in implementing a mentoring program to improve computer science retention and graduate rates at North Carolina A&T State University (NCATSU). NCATSU is among the United States' Historically Black Colleges and Universities (HBCU) serving more than 10,000 students. The Department of Computer Science on the average enrolls 195 undergraduate students, among them approximately 90% are African American and 30% are African American woman. The Computer Science Department at NCATSU in an attempt to increase retention and graduate rates of minority and women students developed the High-Need Student Mentoring Program supported by the Department of Education Minority Science and Engineering Improvement Program (MSEIP). This poster describes the High-Need Student Mentoring Program (HNSMP). HNSMP is designed to provide special attention to undergraduate students who show signs of having academic difficulty. The goal of this Program is to increase retention by increasing the academic performance of these students. HNSMP's strategy is to assist these students before they reach the point of academic probation or suspension. We will describes data we collected, our findings and challenges we encountered in implementing this program, and our proposed strategies to overcome these challenges. Our experiences and the effective techniques found may be beneficial for other colleges and universities in retaining computer science students, especially African American students.	Techniques for retaining low performing students: high-need student mentoring program (abstract only)	NA:NA	2014
Wingyan Chung:Albert Chan:Daniel Plante:Ray Villalobos:Joseph Woodside	Intelligence and Security Informatics (ISI) is a cross-disciplinary field that connects advanced information technologies, systems, algorithms, and databases with international, national and homeland security related applications. Our NSF-funded project, titled Computing in Context, has a focus of developing new teaching modules and pedagogies for the ISI discipline at the undergraduate level. In this poster, we present five exemplar modules that we developed for the ISI discipline: database design for cybercrime investigation, securing private data on the Internet, data visualization for understanding privacy sentiment, security intelligence for healthcare mobility, and program design for digital forensics. Our materials are designed for inquiry-based learning and for active engagement of students through discussion, hands-on practices, and various exercises.	Intelligence and security informatics: developing curricular modules in context (abstract only)	NA:NA:NA:NA:NA	2014
Stephanie E. August:Michael A. Fraser:Miguel A. Vazquez	The Teaching Artificial Intelligence as a Laboratory Science (TAILS) project is designed to develop a new paradigm for teaching introductory artificial intelligence (AI) concepts by implementing an experimental approach modeled after the lab sciences. In the Basic and Informed Search module of TAILS students learn about various search algorithms by first observing how each algorithm searches a map, watching the construction of the corresponding search tree as the path planning proceeds. Once students understand the differences between algorithms, they proceed to exercises. Students are provided a version of the program with the search algorithm replaced by a comment that guides the students through the process of implementing each algorithm and testing it with the existing application. This enables the students to focus on the AI aspect of the coding without requiring them to also develop the user interface. This poster describes the search module and assessments and presents preliminary results.	Teaching artificial intelligence as a lab science: basic and informed search (abstract only)	NA:NA:NA	2014
Daniel A. Breakiron:Eric Fouh:Sally Hamouda:Clifford A. Shaffer	As the use of online interactive tutorials becomes more widespread, there will be more opportunities to use fine-grained interaction log data to deduce student behavior. Log data can help debug usability or pedagogical problems with the tutorials, or guide redesign to discourage pedagogically poor student behavior. OpenDSA is a collection of open source interactive materials for teaching data structures and algorithms. We present a case study analysis of the activity logs from use of OpenDSA tutorials by roughly 150 students over several weeks. We identified clusters of student use based on when they completed exercises, verified the reliability of estimated time requirements for exercises, provided evidence that a majority of students do not read the text, and found evidence that students complete additional exercises after obtaining credit. Furthermore, we determined that slideshow use was fairly high, but that skipping to the end of slideshows was common.	Analysis of interaction logs for online tutorials (abstract only)	NA:NA:NA:NA	2014
Elizabeth K. Hawthorne:Cara Tang:Jim Nichols:Cindy Tucker	Directed by the ACM Education Board, the ACM CCECC (Committee for Computing Education in Community Colleges) has produced curricular guidance for associate-degree IT programs consisting of core IT learning outcomes with associated assessment rubrics. The learning outcomes express core IT competencies which should be common to all IT-related associate-degree programs. The three-tiered assessment rubrics provide further clarity and meaningful evaluation metrics for each outcome, as well as facilitate integration into assessment-based curricula. The outcomes have been influenced by current and future needs of business and industry, certifications, related curricula, and government and standards bodies, along with the intent of being adaptable, not overly technology specific, and having reasonable staying power. These results are being made available during the poster session, in the exhibit hall at the committee booth, and online at www.capspace.org.	ACM associate-degree IT curricular guidance (abstract only)	NA:NA:NA:NA	2014
Jakita O. Thomas	Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that it solves the problem, and evaluating the solution based on some set of criteria. Supporting Computational Algorithmic Thinking (SCAT) is a research project that explores how African-American middle-school girls develop CAT capabilities over time in the context of game design. SCAT is also a free enrichment program designed to expose middle school girls to game design. Spanning three years, participants, also called SCAT Scholars, develop CAT capabilities as they design more and more complex games. This poster presents the Supporting Computational Algorithmic Thinking (SCAT) project, which is an on-going longitudinal between-subjects research project whose goals are: 1) to guide African-American middle school girls through the iterative game design cycle over three years resulting in a set of complex games around broad themes, and 2) to expose them to the broad range of opportunities that exist for them in all types of industries and areas if they develop their CAT capabilities.	Supporting computational algorithmic thinking (SCAT): development of a complex cognitive capability in african-american middle-school girls (abstract only)	NA	2014
Nadeem Abdul Hamid:Steven Benzel	A number of contextualized approaches to teaching introductory Computer Science (CS) courses have been developed in the past few years, catering to students with different interests and learning styles. For instance, entire courses have been developed around media computation or robots (real and virtual). There is however one context which, to our knowledge, has not been exploited in a systematic fashion - that of "big data," by which we mean massive, openly accessible online datasets from a wide variety of sources. We present progress on a code framework and methodology to facilitate the incorporation of large, online data sets into traditional CS1 and CS2 courses. The goal of our project is to develop a way to provide students a library that relieves them from low-level issues of reading and parsing raw data from web-based data sources and that interfaces with data structures and representations defined by students themselves. In addition, the library requires minimal syntactic overhead to use its functionality and allows students and instructors to focus on algorithmic exercises involving processing live and large data obtained from the Internet. At a minimum, the library should serve to create drop-in replacements for traditional programming exercises in introductory courses - raising the engagement level by having students deal with "real" data rather than artificial data provided through standard input.	Towards engaging big data for CS1/2 (abstract only)	NA:NA	2014
Susan H. Rodger:Daniel MacDonald:Elizabeth Onstwedder:Bella Onwumbiko:Edwin Ward	The Adventures in Alice Programming project at Duke University has created a variety of Alice curriculum materials for integrating computer science into other disciplines at the K-12 level, focusing on both computer science topics and animation topics. For example, one of our new animation tutorials shows how to attach multiple camera views to an object to move with the object through a virtual Alice world. Our newest curriculum materials focus on integrating computer science into middle school mathematics. Our math related tutorials guide users on programming math projects from scratch, and our math challenges are partially built programs for students to complete. We use topics that are attractive to middle school students. For example, we have created a wizard world math and programming challenge that is an eight-level game. Each level in the game is titled similarly to courses one might take in the school Hogwarts in the Harry Potter book series by J.K. Rowling. Students must add code related to either a math or computer science concept in order to complete a level and move to the next level. Since 2008, we have taught extensive multi-week Alice beginner workshops every summer to K-12 teachers, teaching over 200 teachers. Our new curriculum materials are mapped to both the CSTA and the Common Core Math standards, and are available for free at www.cs.duke.edu/csed/alice/aliceInSchools along with teacher lesson plans.	Integrating computer science and mathematics in middle school with alice (abstract only)	NA:NA:NA:NA:NA	2014
Chiung-Fang Chiu	Novice programmers usually fail to combine abstract concepts and knowledge into program design, even though they know the syntax and semantics of individual statement. Adult novice programmers with little computer background knowledge might face more difficulties than young ones do. Therefore, it's important to choose feasible teaching approach and proper programming language to teach adult novice programmers basic programming concepts. This study aims to investigate the use of problem-solving approach to teach Scratch programming for adult novice programmers. A total of 10 graduate students aged from 24 to 45 participated in this study. In additional to the lectures of Scratch programming concepts, students solved programming problems by the scaffoldings of worksheets, which is a problem-solving approach. The worksheets contained a sequence of questions which guide the principles of problem-solving approach -- problem analysis, solution design, coding, testing and debugging. Students were then asked to design and implement their projects by following this approach after learning fundamental programming concepts. The experiment lasted for one semester. The findings of the questionnaire survey and results of interviews with students revealed that most students had positive attitudes toward learning Scratch programming by the problem-solving approach. They considered this approach useful in enhancing their comprehension of the program design process and helping them to implement the programming project more effectively.	Use of problem-solving approach to teach scratch programming for adult novice programmers (abstract only)	NA	2014
Johanna Pirker:Christian Gütl	Motivational Active Learning (MAL) is an innovative pedagogical approach based on MIT's teaching format TEAL (Technology-Enabled Active Learning) combined with advanced motivational strategies based on gamification design aspects. The main idea of MAL is to enhance learning outcomes using motivational and social learning experiences. The lecture format is designed for courses, which combine theory in computer science with hands-on programming challenges and collaborative in-course problem solving. The main features of MAL include collaborative learning, constant activities to stimulate interactions between instructor and students, immediate feedback for self-assessment, and motivational feedback such as badges or leaderboard information. The course is structured in the form of mini lectures with constant interactive challenges and interactions such as small arithmetic problems, programming challenges, or research and discussion assignments, which are available using a learning management system as supportive in-course technology to provide the interactive course content and according immediate feedback. First outcomes show positive impact on student motivation and attention during the lessons. Also, more students are willing to complete bonus tasks volunaryly do gain extra points.	Motivational active learning for computer science education (abstract only)	NA:NA	2014
Emmett Tomai:Christine F. Reilly	At our university, like at many other institutions, the pass rate in the introductory programming (CS1) course is relatively low, in the approximate range of 50% to 75%. We would like to discover factors that have an impact on student success in introductory programming in order to better advise and place our students into the course at the appropriate point in their academic careers. Our main motivation for increasing the CS1 pass rate is to help our students graduate on time. It has long been thought that mathematics background is a factor in determining a student's success in introductory computer science courses. Currently, our students must be concurrently enrolled in college algebra or placed into a higher mathematics course. However, given our current low pass rate, we wonder whether this is the proper prerequisite. In order to gather information about mathematics background, we administered a questionnaire to the students enrolled in the class during Spring 2013. We then analyzed the pass rate of our introductory programming students in relation to their mathematics background. Our findings indicate that students who are prepared to take calculus I in the same semester as they take introductory programming were more likely to pass introductory programming. These findings suggest that changing our math prerequisite to pre-calculus may increase the pass rate in our introductory programming course.	The impact of math preparedness on introductory programming (CS1) success (abstract only)	NA:NA	2014
Catherine S. Ashcraft:Wendy Dubow:Zhen Wu	Girls and women continue to be underrepresented in technology. This persistent underrepresentation inhibits innovation by ignoring the diverse perspectives and life experiences women bring to invention and problem solving. Furthermore, disregard for girls and women's participation exacerbates existing economic disparities for women. To reverse these trends, a number of programs designed to engage girls in computing have emerged in recent years. Often these programs are not evaluated, or if they are, informal surveys are used. These instruments are usually unable to adequately assess change in interest, confidence and future plans for computing. In addition, sample sizes tend to be small and, because different programs use different surveys, results cannot be aggregated or compared across programs. To address this gap, NCWIT has been piloting a new evaluation instrument informed by Social Cognitive Career Theory (Lent et al., 2008). The instrument was piloted with two groups of girls: 312 Globaloria middle and high school students and 1500 girls who applied to NCWIT's Aspirations program from 2007 to 2013. Reliability analysis and confirmatory factor analysis were conducted for both datasets, showing high internal consistency. This poster session will provide more detail on the instrument, how it has been used and tested, and next steps in scaling its use. In making this tool widely available, we hope to increase consistency in the evaluation of girls? participation in computing education programs, enabling us to increase sample sizes; compare results across programs; and accelerate contributions to the gender and computing knowledge base.	How do we measure success?: a new instrument for evaluating girls' progress in middle and high school computing programs (abstract only)	NA:NA:NA	2014
Allison G. Martínez-Arocho:Philip Sheridan Buffum:Kristy Elizabeth Boyer	Exposing students early to computer science may influence their choice of career, and there is increasing recognition that even for students who do not pursue computer science careers, computational literacy is important. This poster reports on a project targeting the development of a new middle school computer science curriculum. This research aims to highlight the role of computation in Big Data in the context of middle school computer science education, which serves as a catalyst to keep students engaged in computer science through middle school via the ENGAGE narrative game-based learning environment. This poster discusses steps taken to validate one activity meant to highlight the role of computation in the context of Big Data: skip list manipulation. While we found that most of the middle school students performed poorly in assessments after the skip list activities, several students showed they were capable of completing the activity successfully, implying that a repetition of the revised skip list study and additional pilot studies for other Big Data activities are needed to pave the way for the development of this Big Data curriculum. This activity will be just one part of a broader curriculum designed to showcase the social relevance and power of Big Data.	Developing a game-based learning curriculum for "Big Data" in middle school (abstract only)	NA:NA:NA	2014
Daniela Marghitu:Lavaris Thomas:Yasmeen Rawajfih:Jillian Hall:Andrew Marshall	This poster describes the "Computer Science for All Bulldogs (CS4ALL-B) pilot, a 7-week long course taught in Fall 2013 at Opelika Middle School, located in the Auburn- Opelika, Alabama Metropolitan Area (https://cs4allb.eng.auburn.edu). The program marks the first time a formal Computer Science (CS) course has been taught in an Alabama middle school. The CS4ALL-B curriculum builds upon the Auburn University innovative 'three-step' model of K-12 computing and robotics instruction that introduces CS and Computational Thinking (CT) concepts for K-12 students. This model uses programming frameworks such as Kodu, Alice, App Inventor, Lego NXT-G and Tetrix, and Computer Science Unplugged (CSU) activities. While moving between the three steps, students explore the fundamentals of CS/CT concepts. The CS4ALL-B curriculum is structured in four main sections: First, introduction to Kodu for 7th graders and Alice for 8th graders; Second, introduction to CS/CT Concepts; Third, participation in selected CSU activities, then students develop their programs to demonstrate their abilities to design and create Kodu or Alice worlds that implement the concepts learned while participating in CSU activities; Fourth, students build their own course project that includes all concepts and skills grasped throughout their training. This model helps maintain high levels of motivation, concentration, and engagement during the entire course. The results of the pilot assessment, including tools such as traditional written assessments (e.g. quizzes, tests) as well as alternative assessments tools (e.g. projects and blog posts), will be presented. We have found that our methods foster the learners' nascent development in CS.	Kodu alice and computer science unplugged: a model of effective introducing middle school students to computer science and computational thinking (abstract only)	NA:NA:NA:NA:NA	2014
Diane Horton:Michelle Craig	In the interest of better understanding why many students fail to complete CS1 successfully, we analyze a class of 555 CS1 students, 127 of whom either failed or dropped the course. We find that students with previous experience are more likely to pass even if the experience is not a formal programming course. Contrary to intuition, students who drop have enrolled in fewer courses and have fewer hours of non-school commitments than those who stay. We present a classification scheme to categorize student outcomes based on their performance at a course midpoint.	Who drops CS1? (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science educators are constantly reinventing introductory CS0, CS1 and CS2 courses to retain students and increase their learning and motivation. While the focus on drawing students into Computer Science is vital to maintain enrollment, it is also paramount to sustain student motivation by using new pedagogical approaches, contextualized to how students learn, throughout the curriculum to develop technical and interpersonal skills. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. In this poster, we present the initial results of a project with two aims to: (1) design, pilot, and offer new curriculum materials for three upper-level Computer Science courses using a mobile computing platform paired with pedagogical approaches sensitive to the learning styles of today's student; and, (2) develop out-of-classroom learning opportunities including mobile computing student seminars, externship opportunities and service-learning projects reinforcing in-classroom technical skills. We believe that these two components synergistically, can be leveraged to revitalize the undergraduate Computer Science curriculum, better motivate student learning and provide in-demand technical skills to students without losing the fundamental Computer Science concepts. This project is partially supported by NSF DUE#1140781.	Revitalizing the computer science undergraduate curriculum inside and outside of the classroom using mobile computing platforms (abstract only)	NA:NA:NA	2014
Bruce W. Char:Thomas T. Hewett	This is work-in-progress on an entry-level course on computational problem-solving and programming for engineering students. It has been run since 2006 at our institution at a scale of 800 students/term, as a hybrid in-person lab and out-of-class on-line autograded exercises using Maple TA. The course is in the process of changing languages (from Maple to Matlab), with upgraded resources: a lecture period, some manually graded assignments, projects, and automatic code testing. To date the assessment of the impact of the course has been through conventional means: assigning grades and indications as to whether student grades are consistent with those obtained in other courses taken. During the transition from Maple to Matlab more detailed and individualized performance assessment plans are being developed which are intended to enable the staff and students to better judge weaknesses in program knowledge and who would benefit from additional personal contact.	A first year common course on computational problem solving and programming (abstract only)	NA:NA	2014
David Sturgill	This poster presents preliminary investigation of the content and quality of on-line peer mentoring in competitive problem solving. Discussion board postings from the Queue-ICPC Challenge were analyzed with respect to content, including type of communication, topic, intended audience and accuracy, as well as attempts at relationship building. Responses outnumbered questions more than 2 to 1, suggesting that even in a competition, people are willing to assist others. Interestingly, some of the most successful competitors were also the most willing to offer help to others. As part of a voluntary competition, this kind of peer mentoring is useful resource for attracting and supporting new participants. In the academic context, peer mentoring may be an essential aspect of learner support for large, traditional classes. In very large scale efforts such as MOOCs, it may provide a scalable resource for helping participants to succeed and remain engaged.	Altruism among programmers: the availability and effectiveness of on-line, spontaneous peer mentoring in competitive problem solving (abstract only)	NA	2014
Amber Wagner:Jeff Gray	During the Summer of 2013, we participated in a United Cerebral Palsy supported summer camp for children with disabilities. While our initial motivation for attending the camp was to conduct a user study of a Vocal User Interface, we worked with the camp attendees outside of testing and beyond computer activities, and during these activities, we were able to ask the attendees about their computer experience and interest. The attendees' experience and interest was noted along with the results of the study. The study demonstrated that voice was a useful modality for this audience; however, we were more surprised to learn that the majority of the attendees were not enthusiastic about using the computer and preferred more social activities. Three different types of computer science education activities were offered during the six week camp. The first activity was a group activity in which roughly ten students participated. The next activity was completed with smaller groups consisting of 2-3 attendees in which five students participated throughout the camp. The final activity was a one-on-one activity, and only three students chose to participate in the one-on-one activity. This poster presents the details of these activities, results of the user study, and thoughts as to why few attendees chose to participate in the smaller group activities based on observations during the summer camp.	Observations of first learners with different capabilities (abstract only)	NA:NA	2014
Gili Rusak:Darren Lim	Despite dramatic changes in technology over the past several years, educating young students in computer science at the elementary school level remains a challenge. Tackling this issue, we created 'Codester,' a novel Android application, as a tool to engage learners in the basics of computer science and to teach them computational thinking. Unlike other educational coding programs such as Scratch and Lego Mindstorms, our app is unique because it is mobile and allows users to learn a variety of concepts at a rapid rate. By running user studies for participants in grades 1-3 and 4-6, we quantified the effectiveness of Codester. Students were challenged and developed logic skills throughout the sessions. Using surveys, pretests, and posttests, we found an improvement in the five main computational thinking concepts that Codester teaches: sequencing, iteration, code reuse, decision-making, and logic. The participants especially showed an increased understanding of the code reuse concept: grade 1-3 students improved by 32% at the end of the program; grade 4-6 users improved by 43%. Additionally, the software and the tablet platform were attractive to the participants. Eighty percent of students stated that they enjoyed using the tablets to learn new material, and 72% said that they would like to continue learning with Codester. These figures show a promising increase of interest in coding and thus match the goal of our app: teach youngsters programming in a fun and challenging way. Please see www.codesterapp.com.	"Come code with codester": an educational app that teaches computer science (abstract only)	NA:NA	2014
Jean H. French	The living lab concept promotes innovation by solving problems in an open, user-centric environment. A living lab approach was implemented in an undergraduate, advanced software engineering course to develop applications for the Leap Motion. The Leap Motion is a novel device that provides touch-less interaction with computer systems. Sixteen students worked toward the common goal of developing applications for the Leap Motion. All aspects of the project were supported in the student-led, open environment, from initial research to implementation. Because the Leap Motion device was not available until shortly before the semester, students had no prior experience in application development for the technology, adding to the difficulty and uniqueness of the task. This poster provides the details of the living lab implementation as the project progressed through the semester.	Implementing a living lab approach to foster innovation in an advanced software engineering course (abstract only)	NA	2014
Thomas Ashmore:Sorathan Chaturapruek:Zachary Dodds:Corinne Druhan:Bridgette Eichelberger:Michael Erlinger:Elizabeth Schofield	In this poster we present a CS curriculum aimed at "middle-years" students. In the U.S., this corresponds roughly to students aged 11-15. This MyCS curriculum provides a hands-on introduction to computer science through six distinct modules. Three programming modules use the Scratch environment to build computational sophistication and procedural intuition within an inviting development environment. Alternating with Scratch are three problem-solving modules whose activities deepen awareness and facility with computation through novel exercises. More than 25 classrooms and 900 students have participated in MyCS's pilot years within the Pomona, CA and Lihue, HI school districts. 2013-15 will see an expansion of its workshops, academic-year classes, and program evaluation. Course materials will be served by the OpenEdX platform both at HMC and on Amazon EC2. This poster shares our development and deployment of MyCS to date, and invites feedback from other institutions in their efforts to foster adolescents' computational identities.	MyCS: building a middle-years CS curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Daniel Armendariz:Zachary MacHardy:Daniel D. Garcia	The Online Course Tool for Adaptive Learning (OCTAL) is an adaptive exercise system that customizes the progression of question topics to each student. By creating a concept dependency graph of topics in a course and modeling a student's knowledge state, the tool will present questions that test knowledge within a student's zone of proximal development. We intend OCTAL to be a formative assessment tool that is not tied to any specific course by providing language-agnostic questions on computer science concepts. While the tool will be generalizable for many courses, our first prototype will include a concept map and question set from an introductory CS1 course, UC Berkeley's CS10: The Beauty and Joy of Computing. Using the tool, we are investigating metacognitive improvements in the identification of knowledge gaps by presenting online course material in a nonlinear fashion.	OCTAL: online course tool for adaptive learning (abstract only)	NA:NA:NA	2014
Debzani Deb:Mohammad Muztaba Fuad	This poster addresses a significant learning barrier experienced at many CS departments, specially at predominantly minority institutions, which is the problem of students? inability to keep engaged and interested in classroom. In this research, we investigate the applicability of using mobile devices in the classroom and incorporation of interactive problem solving using those devices to increase class engagement and active learning for students. By allowing the students to solve problems in their preferred devices, the research expects to create a friendly learning environment where the students want to retain, be active and skillful. The poster will present the design aspects of Mobile Response System (MRS) software that will be utilized to communicate, collaborate and evaluate interactive problems using mobile devices. The poster will also showcase several interactive problem-solving activities utilizing mobile devices and MRS software, which have been developed and are being adopted in CS and IT courses at Winston-Salem State University (WSSU). It is expected that this research will invigorate interest in Computer Science among minority and underrepresented students through exposure to the technology-rich learning environment. By enhancing student learning and problem solving abilities, it is also expected that this research work will improve the quality and quantity of underrepresented minority students in STEM workforce or graduate study. The successful execution of this project will advance research and the knowledge of mobile device usage in CS classrooms and more importantly the way it impact teaching strategy and student learning at WSSU and other institutions.	Use of mobile application to improve active learning and student participation in the computer science classroom (abstract only)	NA:NA	2014
Wenliang Du:Li Yang:Joseph Kizza:Xiaohong Yuan	Browser security as an important and relatively new area is yet not part of existing IA curriculum or National Security Agency (NSA) knowledge units. Browser security incorporate threats, vulnerabilities, risks, and countermeasures faced by browsers and browser-based applications ranging from design principles, security architecture to applications. Our effort contributes to courseware development and IA education in terms of browser security. Hands-on labs are effective to improve student learning in IA and sharpen their skills in real-world settings. We develop hands-on labs to help students to build necessary skills on developing secure browser and browser-based applications. Our developed hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and Information Assurance (IA) courses.	New hands-on labs on browser security (abstract only)	NA:NA:NA:NA	2014
Rajshekhar Sunderraman	The treatment of abstract query languages such as Relational Algebra, Relational Calculus, and Datalog in introductory database courses varies considerably across the various computer science departments around the world. We propose an integrated approach in which students learn how to express a natural language query in Domain Relational Calculus (DRC), apply a query-transforming algorithm to the DRC expression tree to produce Datalog Rules (DLG), and finally apply another query-transforming algorithm to the DLG rules to produce an equivalent Relational Algebra (RA) expression. This systematic approach works very well for "forall-queries" in which the forall-quantifier is necessary in the DRC expression. To make this approach even more effective, the students are required to use DRC, DLG, and RA interpreters that allow them to execute query expressions as well as produce equivalent expressions. The students are also involved in implementing these interpreters to get a deeper understanding of querying in relational systems.	An integrated approach to teaching of abstract query languages and their implementations (abstract only)	NA	2014
Martha J. Kosa:Ambareen Siraj	We describe a new annual awards program, the Rising Renaissance Engineer Spectrum Awards, which recognizes a diverse body of students across all engineering departments at our institution for their initiatives and achievements in educational, research, and professional development activities. This award is unique at our institution because it is inclusively for students from all six engineering departments and specifically promotes underrepresented groups. This awards program complements existing engineering awards honoring faculty, staff, and alumni for their research, teaching, and service. It is modeled after the NCWIT (National Center for Women in Information Technology) Aspirations in Computing Award, which has successfully encouraged many female high school students to persist in computing careers. With the Computer Science Department spearheading the effort, this project is a collaborative partnership among representatives from all engineering departments.	The rising renaissance engineer spectrum awards (abstract only)	NA:NA	2014
Anna Koufakou:Dahai Guo	Incorporating social networks in the curriculum to better engage students has gained a lot of attention as a result of the popularity of social networks with college students. We introduce EasySocial, a social network plugin for Eclipse, written by a CS educator, the second author of this poster. The goal of the plugin is for students to be able to easily write code using their own personal data, e.g. on their Facebook or Twitter account, with minimal knowledge of the specific social network API. The EasySocial plugin has several features which makes it useful in our CS classes: it seamlessly embeds the process for authenticating with Facebook; it abstracts the process for making HTTP requests and parsing various data formats, such as JavaScript Object Notation (JSON); it integrates Gephi functionality, so that students can access Gephi's powerful functions for network analysis and visualization in their Java programs. We used the plugin in our Fall 2013 Data Mining course for CS undergraduate students in order to quickly introduce them to social data visualization and social network analysis concepts such as community detection. The students easily wrote Java code to visualize their network graph and detect communities. We received a very positive response, and several students expressed enthusiasm about the programming aspect as well as the application topic. Future plans include further employing EasySocial in other courses, for example to help students in entry-level courses understand programming concepts, such as arrays and loops.	Developing and using an in-house plugin for easy social network programming (abstract only)	NA:NA	2014
Marcell Amorim Almeida Mesquita:Armando Maciel Toda:Jacques Duílio Brancher:Ricardo Melo Casseb do Carmo	Programming Languages and its uses play a vital role in IT higher education courses, because it is necessary that students have a good understanding in order to become full fledged developers. We made a study to verify the initial reception of this method regarding the students satisfaction and so, this meta-paper proposes the continuation of this research. It involves the utilization of a Social Network and gamification concepts, like badges, points, levels and leader boards to improve students participation.	Utilizing gamification with social network to aid students in programming languages lessons in higher education IT courses (abstract only)	NA:NA:NA:NA	2014
Andrew Hicks:Barry Peddycord II:Irena Rindos:Christopher Simmons	Intelligent tutoring systems have been shown to significantly aid in student learning without requiring extensive instructor intervention. One feature of intelligent tutors is their ability to provide hints to students who get stuck, but the production of hints by hand is prohibitively expensive. Hint Factory (Stamper et al., 2008) is a domain-independent technique for generating hints from interaction graphs. In this work, we explore approaches for creating graphs that represent interactions in an educational programming game called BOTS. We use data from seven programming puzzles that contain a total of 1100 interactions with the game. We believe that we can begin by seeing what works in the small language of a programming game to inform how we can scale the techniques for "real" languages in "real" tutors.	A comparison of two approaches for hint generation in programming tutors (abstract only)	NA:NA:NA:NA	2014
Johanna Pirker:Christian Gütl:Frank Kappe	Organizing a Programming 101 course for a thousand computer science freshmen poses a challenge. One major problem is the high dropout-rate due to insufficient social interactions and the missing feeling of presence. Collaborative home assignments can help to overcome such issues. However, due to scheduling conflicts not all students are able to meet in person to work together. Many tools support collaborative online programming, but have several disadvantages in comparison to face-to-face meetings. This work presents a virtual world environment, where student groups can meet online, but experience the advantages of face-to-face interactions. They can commonly use different tools for collaborative problem solving at one shared virtual location. They experience the feeling of presence, which increases the individual contribution, even from distant sites. Furthermore, the environment provides facilitated possibilities for tutor meetings, where students can discuss and present their solutions. In this work a first prototype of the environment is described. In addition advantages as well as potential issues or difficulties are discussed.	Collaborative programming exercises in virtual worlds (abstract only)	NA:NA:NA	2014
Stoney Jackson:Heidi Ellis:Robert Crouse	Programming contests have been used at the high school level to motivate students to study computing and generate excitement about computing topics. However, little investigation has been done into whether the selection of programming language impacts success in such contests. This poster presents the results of an analysis of five years of high school contest results held at Western New England University. The analysis looks at the languages used by winning teams and number of submissions. Results appear to indicate that winning teams use Java and Python for programming languages while less successful teams use BASIC, VisualBasic and C++. Interestingly, the majority of teams used BASIC as their programming language. Another interesting result was that low performing teams tend to have a disproportionately large number of submissions.	Impact of programming language on success in high school programming contests (abstract only)	NA:NA:NA	2014
Amanda Ochsner:Rane Johnson-Stempson:Matthew Berland	This project consists of a collaborative effort between the Games+Learning+Society Center at the University of Wisconsin-Madison and Microsoft Research to create an online community to engage girls in computer programming and game design. The goals of this community are threefold: 1) to support initial interest in computer science among young women and then build on that interest through increasingly involved participation within the community; 2) to foster the learning of programming specifically, and computational and design thinking more broadly; and 3) to provide support to the young women within the community at the critical engagement and learning points. At SIGCSE 2014 we will present the first major phase of the project-an updated version of our team's Studio K curriculum for teaching game design and computational thinking to middle and high school students. We will also report on early research findings from the first all-girl cohorts to complete the curriculum.	Mission critical: building community to engage young women in computer science (abstract only)	NA:NA:NA	2014
Sagar Raina:Blair Taylor:Siddharth Kaza	Addressing the crucial need for cybersecurity learning materials, the Security Injections @ Towson project (towson.edu/securityinjections) has developed modules for CS0, CS1, CS2 and Computer Literacy courses that target key secure coding concepts including integer overflow, buffer overflow, and input validation. Assessment results indicate that these modules have led to an increase in students' security-awareness and their ability to apply secure coding principles. Each security injection module includes four sections - background, code responsibly (includes methods to avoid security issues), laboratory assignment with a security checklist, and discussion questions. In this study, we are proposing to enhance these modules by incorporating e-learning strategies including lesson segmentation, instant feedback, and self-paced lessons to increase student learning. In addition, we are designing a system with auto-grading functionality and dashboards to encourage adoption by instructors. Segmenting modules into smaller sections and including --gatekeeper questions will facilitate learning and reduce cognitive overload. Providing feedback on incorrect answers encourages students to revisit relevant sections. The goal of this feedback based approach is to improve student learning and content retention. The nature of the enhanced modules allows for self-paced learning which is applicable for online learning environments. We conducted a pilot study using a module in CS0 undergraduate computer science class that included 60 in-class and 9 online students. The results of the pilot study indicated increased attention towards the content and possible improvement in retention of concepts. This project is partially supported by NSF under grant DUE-1241738	Interactive e-learning modules for teaching secure: a pilot study (abstract only)	NA:NA:NA	2014
Lisa M. Marvel:Stephen Raio:Lori Pollock:David Arty:Gerard Chaney:Giorgio Bertoli:Christopher Paprcka:Wendy Choi:Erica Bertoli:Sandra K. Young	In this poster, we describe our experience of designing and executing two different weeklong programs for 10th -- 12th grade students. The goal of our program is to attract students to the field of computing, increase their computing confidence and familiarize them with ways that computing impacts our community. Student groups consist of 32 students for each week with a 1:0.8 male-to-female ratio. No prerequisite knowledge is required to attend. We compare the different facets of the curriculums by evaluating the impact of each week both quantitatively and qualitatively. Our evaluation implies the attraction of cyber security topics to this age group, particularly male students, and presents a curriculum that may help increase confidence in computing concepts, particularly for female students. We solicit feedback and welcome input on our curriculum and evaluation method.	A comparison of two hands-on laboratory experiences in computers, networks and cyber security for 10th-12th graders (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Prem Uppuluri:Jeff Pittges:Joseph Chase	Radford University's Scare and Prepare (SP) program is being developed to enable high-school teachers to cultivate security cons cious cyber-citizens and, in the process, spark a passion for computer science. We are accomplishing this in two ways: (a) incentivize high school teachers to incorporate security into their curriculum with little investment in resources (hardware, software and personnel), and (b) introduce computer science concepts such as programming (e.g., Javascript) and basic operating system functionality (e.g., file organization and memory management). Our experience shows that success of high school CS programs depends on the teacher's motivation. SP will reduce preparation times for teachers by providing all the necessary learning materials in the form of screencast lectures and portable and remote hands-on labs. Ultimately, we propose to develop a dual enrollment college credit course. SP's learning materials are intended to spark interest among students by both scaring and preparing them. The first strategy is to scare students with the potential implications of cyber-attacks on aspects that matter to them: social networking sites and smart phones. Next, students are prepared to defend against such attacks. Finally, to sustain interest prepared high schools students will compete in cyber-defense exercises.	Scare and prepare: increasing awareness, safety, and passion for cyber-security (abstract only)	NA:NA:NA	2014
Volker Ahlers	Computer graphics is a subject which is typically enjoyed by students and which has the potential to attract pupils to consider studying computer science. Although the programming methods used by computer graphics have significantly changed in recent years due to the integration of programmable shaders into the graphics rendering pipeline, a lot of computer graphics courses still start with the fixed-function pipeline. In view of future applicability, however, it is desirable to teach students modern concepts of computer graphics from the beginning. One problem with teaching shader-based computer graphics is that a lot of technical tasks lie in the hand of the programmer: loading and compiling shader programs, managing buffer objects, defining transformations by means of matrices, etc. This poster presents a scene graph library which is fully based on the programmable rendering pipeline. It uses the OpenGL 3.2 core profile, which does not allow deprecated fixed-function functionality. The teaching approach combines the high-level abstraction of a scene graph with the low-level programming of shader cores, which are attributed to scene graph nodes. The presented scene graph library has a simple and clear structure and is extensible in order to let students implement advanced concepts taught in the lecture, like shadows or particle systems. Finally, the poster presents code samples, results of student projects, and student evaluation results.	An extensible scene graph library for teaching computer graphics along the programmable pipeline (abstract only)	NA	2014
Roy P. Pargas:Punit Kulkarni:Greg Edison:Barbara J. Speziale	Teaching a mobile device software development course is very different from teaching a CS1, CS2, or advanced programming class. In a traditional software development class the target computer (on which the software being developed is to run) is a laptop or desktop computer. In a mobile device software development course, the target computer is a smartphone or tablet that has a large number of features (web access, a camera, GPS, a gyroscope, media display, etc.) that can be controlled by software. The material that must be covered in such as course is so broad that new approaches to delivering course content must be used. This poster describes the overall method by which we have taught such a course. We describe four challenges: (1) The content is new and constantly changing. (2) The material to be covered is very broad and includes diverse components. (3) The course requires that the students understand databases design and implementation, topics often taken in the final year of the curriculum and too late for this course. (4) Finally, finding meaningful course projects is difficult and we benefit greatly from a program such as Clemson's Creative Inquiry Undergraduate Research Program. We explain how we address each of these challenges and describe the structure of the course in detail. We conclude with the results we have produced over the past five years, evaluation by students, and successes students have achieved. We also demonstrate both iOS and Android apps that have been developed through this course.	Teaching mobile app software development is a challenge! (abstract only)	NA:NA:NA:NA	2014
Joseph B. Wiggins:Joseph F. Grafsgaard:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Emotion, or affect, plays a central role in learning. In particular, promoting positive emotions throughout the learning process is important for students' motivation to pursue computer science and for retaining computer science students. Positive emotions, such as engagement or enjoyment, may be fostered by timely individualized help. Especially promising are interventions if the student is having difficulty completing a task. Recognizing when a student is facing a complex task may better inform teachers or adaptive learning environments about the students' affective states, which in turn can inform instructional adaptations. We approach this research goal by analyzing a data set of student facial videos from computer-mediated human tutorial sessions in Java programming. Students and tutors interacted with a synchronized web-based development environment. The tutorial sessions were divided into six lessons each with subtasks, and featured corresponding learning objectives for the students. In post-hoc analysis, we identified "difficult" tasks by comparing the frequencies of student-tutor interaction and task behaviors such as running the program and the time to complete tasks. Nonverbal behaviors, such as gesturing or postural shifting, were then compared with task difficulty. Understanding such nonverbal behavior can inform individualized interventions, which may keep students engaged and foster greater learning gains.	The relationship between task difficulty and emotion in online computer programming tutoring (abstract only)	NA:NA:NA:NA:NA	2014
Scott Turner	Looking Glass is a library designed to support the testing of students' C++ code through reflection. Instructors can design tests that compile even if there are mismatches between the instructor's and student's code (like misspelled function names or parameters that do not have the expected types). Using the autogenerated metadata, instructors can search for and call functions or methods in the student code, including the main function, while providing feedback (rather than a compile error) if the required code is not found. Although not suitable for all C++ programs, Looking Glass was designed to support instructors in introductory and intermediate classes and to be transparent to the students. This poster describes the setup and use of Looking Glass with examples of the functionality it currently supports.	Looking glass: a C++ library for testing student programs through reflection (abstract only)	NA	2014
David P. Bunde:Michael Graf:Deyu Han:Jens Mache	There are many different ways to write parallel programs. We illustrate a variety of relevant language paradigms by presenting implementations of the Game of Life, a simple simulation motivated by living organisms. Featured paradigms include shared memory, GPU acceleration, message passing, and Partitioned Global Address Space (PGAS).	Parallel programming paradigms illustrated (abstract only)	NA:NA:NA:NA	2014
Stephen Jacobs:Amit Ray:Jonathan Schull	This poster will briefly show and describe the five year history of FOSS course offerings and projects in the School of Interactive Games and Media that led to the development of the minor and then diagram and describe the Minor's design and content. It will show how the Humanitarian focus of the student work, beginning with the development of educational games for the One Laptop per Child and Sugar communities built a foundation for the minor. It will then discuss the design of the minor, how the required courses leading to advanced electives also prepare students to become contributors and, potentially, project leaders within Free and Open Source Software and Free Culture communities within the students' own academic specializations. It will diagram the paths that both technical and non-technical students can take to succeed in completing the minor.	RIT's new minor in free and open source software and free culture (abstract only)	NA:NA:NA	2014
D. Brian Larkins	Modern robotics are at the locus of several related disciplines including computer science, mechanical engineering, electrical engineering, and others. The interleaving of these disciplines within a single robotic system can make teaching the fundamentals of robotics to undergraduate students within a traditional computer science curriculum a challenging task. One way to address this challenge is with an immersive, experiential approach that exposes students to these different facets of robot design in context. This poster describes the application of the Cognitive Apprenticeship (CA) framework to an undergraduate robotics course comprising of projects that touch on several different engineering disciplines. CA techniques are used to help students gain insight and understand how contributions from a variety of domains are interwoven to build a functioning robotic system. Throughout the class, students work on teams to complete projects at different levels of abstraction using two different robot platforms. Students learn about software design and implementation by constructing reactive paradigm behaviors on a Khepera III robot in the first part of the course. Later, students construct a quadcopter UAV from a kit, handling all aspects of construction, calibration, and configuration. This work focuses on two perspectives of this course: the use of the CA framework as a structure for experiential learning and also to describe a set of projects that emphasize the interdisciplinary nature of robotics.	Making use of the cognitive apprenticeship framework in an undergraduate robotics course (abstract only)	NA	2014
Leo C. Ureel II:John Earnest:Charles Wallace	With the continued and alarming lack of involvement in computing among college students, attention has recently focused on engaging students at the middle and high school levels. Our "Copper Country Programmers" club began as a community outreach program to fill a gap left by the elimination of the computing curriculum in the local school district. In our club, university faculty and students provide curriculum, tools, and classroom tutoring for young novice programmers across the school district. Our curriculum teaches programming through a series of exercises involving HTML, BASIC, LOGO, and Processing (a graphics-oriented Java variant.) Contrary to some other approaches, we present students initially with a low level, bare bones programming model and development environment, then gradually increase the functionality and complexity. We find that students readily grasp the simple, transparent initial model, then experience first-hand the motivations for adding functionality (and complexity). Our cross-curricular programming topics include graphic design, interactive fiction, computer generated poetry, mathematical simulation, computational geometry, game physics, computer art, artificial intelligence, video game development, and critical thinking. We provide examples of our curriculum, student work, problems encountered, and how they were resolved.	Copper country programmers: a novel curriculum for beginning programmers in middle and high school (abstract only)	NA:NA:NA	2014
Gabriella Anton:Matthew Berland	Studio K is a game design curriculum constructed to provide middle school students an engaging entry into computer science and programming. Developed at the University of Wisconsin-Madison, the program employs Microsoft's 3D programming environment, Kodu, in tandem with support and analytic tools for facilitators, and an online community that provides players with a support system. These key features are bolstered with incorporation of telemetry data gathered through design sessions that are used to improve site functioning, curriculum relevancy, and administrative tools. This program is applied across contexts, with applications in formal classrooms, informal extracurricular clubs or camps, and alternative learning environments such as library systems or home schools. Studio K provides a well-supported, unique entry into computer science in which programming knowledge becomes a tool that supports learners' goals in designing and developing games.	Studio K: a game development environment designed for gains in computational thinking (abstract only)	NA:NA	2014
Ankur Chattopadhyay:Thomas Nehring	Given that many modern computing technologies have led to privacy issues in today's digital world, the latest CS curriculum (CS2013 - Ironman Version 1.0) has recommended a strong need for inclusion of privacy topics within the present body of knowledge. According to the above curriculum, there is a requirement for global awareness of today's growing privacy concerns with technology. Our proposed lab caters to the above curricular recommendation. We present a physical security focused lab, which is based on the technology of PVA (Privacy through Visual Anonymity). Through this hands-on PVA lab, we teach pre-university and university students the notion of privacy in images/videos and educate them in the technique of VA (Visual Anonymity), which can help safeguard one's privacy by obscuring the individual identity in pictures/videos captured by cameras. Using this lab, we intend to enhance CS education and outreach by making students aware of the global issue of privacy invasion in today's surveillance and by demonstrating how the issue can be addressed via VA. The lab exercises are based on two open-source applications, namely "ObscuraCam" and "YouTube-FaceBlur". These applications are used as tools for enabling students to learn the concept of PVA. In this process, we show students an innovative aspect of balancing security and privacy in technology, thereby drawing their focus to the humanitarian side of CS applications. Our topic of PVA also enhances the IAS knowledge area in the latest CS curriculum.	PVA (privacy through visual anonymity) lab for enhancing CS education and outreach (abstract only)	NA:NA	2014
Remy DeCausemaker:Stephen Jacobs	This poster will briefly describe the components of the Humanitarian Free/Open Source Software Development (HFOSS) course offered by the Department of Interactive Games and Media at Rochester Institute of Technology in Upstate NY. It will depict this model of an "Open" Course (i.e. Open Courseware, Open Curriculum, Open Classroom, and Open Code) informed both by academic theory, and industry best practice. It will show the results of designers, developers, and project leaders, working in tandem with professors, staffers, and administrators to offer students a chance to apply research, and put theory into practice. It will discuss strategies of engagement, metrics of success and failure, and what resources are available for others to do the same.	Adventures in hackademia: leveraging humanitarian free/open source software development in the class room (abstract only)	NA:NA	2014
Michele S. Roberts	While programming has long been utilized as a recruitment path into computer science, data analysis as a recruitment path is relatively under-explored. Through a series of modular curriculum units developed in computational thinking, the potential impact of explorations in data analysis to impact teacher and student affect toward and interest in computer science is being investigated. Developed units include exercises such as statistically determining the author of selected text passages, modeling roller coaster simulations, solving crime mysteries and controlling zombie contagions. Computational thinking modules have been delivered in a CS Pilot course, as well as in K-12 outreach programs in non-computing courses (STEM and non-STEM, including classes in English literature, sociology, biology, physics and math). Initial results show significant and promising opportunities to utilize data analysis to create computing interest in a broadened population of students and teachers, extending the impact of computational thinking into a variety of subject domains.	Data-driven broadened participation (abstract only)	NA	2014
Kevin Buffardi:Stephen H. Edwards	Rudimentary programming skills are essential to developing fundamental proficiency in computer science. However, learning programming techniques can be challenging and frustrating for many students. CodeWorkout is an online learning environment that offers drill-and-practice exercises with novel social and adaptive scaffolding. Learners can track their progress on an assortment of computer science areas and skills while taking advantage of social features to discuss questions and help teach each other. Meanwhile, objective measurements of questions and teaching hints help promote the best, most effective content for learning. Our poster demonstrates how both computer science students and teachers benefit from joining the CodeWorkout community and taking advantage of its unique features.	Introducing CodeWorkout: an adaptive and social learning environment (abstract only)	NA:NA	2014
Jeff Gray:Mokter Hossain:Jonathan Corley:Amber Wagner:Cassidy Lamm:Mary Boehm:Carol Crawford:Kathleen Haynie:Sheryl Packman:Deepa Muralidhar:Jeff Baker:Roy Black:Sandy Falgout:Leella Holt:Albert Lilly:Gina McCarley:James Morse:Jennie Rountree:Jill Westerlund:Carol Yarbrough	This poster describes our first-year experience in developing and evaluating a CS Principles professional development model for training a cohort of teachers across an entire state geography. The scalable deployment and sustainable persistence of the new CS Principles course adopts the successful practices of a national AP training program developed by the National Math and Science Initiative (NMSI). It applies those practices in a professional development program based on year-long in-person training and distance learning collaboration. A statewide "Teacher Leader" model is being explored where those already teaching more rigorous CS courses will assist in training new peer cohorts as they establish CS Principles in their schools. Teachers in these cohorts collaborate together on content and pedagogical learning experiences, fostered by peer leaders. The assessment is uncovering the facets of our model that are most suitable for building a sustainable network of CS Principles teachers. This poster is focused on a description of our first-year experiences and extensive evaluation results. The poster will describe the curriculum that is being developed by our teachers, a set of lessons learned from our PD experiences, and the details of our evaluation. The Teacher Leaders will be available near the poster to discuss their experience with anyone who has an interest in our professional development model for CS Principles.	A first-year experience report on a model for statewide deployment of CS principles courses (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Jonathan McKinsey:Samuel Joseph:Armando Fox:Daniel D. Garcia	Pair programming, a form of collaborative learning where two programmers work on the same computer, enhances learning in novice programmers and improves code quality in experienced programmers. Remote pair programming (RPP) brings the pedagogical technique of pair programming to the distributed online environment of Massively Open Online Courses (MOOCs). UC BerkeleyX's CS169 Software as a Service MOOC successfully uses a Google+ community for students to generate their own RPP events or join events created by their peers. We will examine survey results summarizing the RPP experiences and RPP technologies of student pairings in the Fall 2013 offering of CS169, as well as analyze RPP sessions. In the future, the aim is to generalize RPP methodology, expand its applications to other MOOCs and traditional classrooms, and compare its effectiveness to in-person pair programming.	Remote pair programming (RPP) in massively open online courses (MOOCs) (abstract only)	NA:NA:NA:NA	2014
Frank McCown:Michael L. Nelson	This poster reports on course materials that have been developed for teaching an Introduction to Web Science course to computing majors at the undergraduate level. This is the first comprehensive collection of resources that we are aware of that targets undergraduates in the exciting new field of Web Science. The course materials include slides, reading assignments, homework assignments, programming projects, and exams. We hope these materials will make adopting a Web Science course easier for a computing department or for creating an interdisciplinary course which could expose computing to a more diverse and broader group of students. Course materials may be obtained from the authors and from the following URLs: http://www.harding.edu/fmccown/classes/comp475-s13/ http://www.cs.odu.edu/~mln/teaching/cs595-f13/ This work was supported by the National Science Foundation (IIS 1008492).	Resources for teaching web science to computer science undergraduates (abstract only)	NA:NA	2014
John K. Estell:Ken Christensen	The Pledge of the Computing Professional (http://computing-professional.org), endorsed by SIGCAS and the ACM Committee on Professional Ethics, was developed to both support professional responsibility in computing and to raise awareness of one's ethical responsibilities. To date, 25 institutions across the US have conducted Pledge Ceremonies to welcome their graduates into the computing profession. In a recent Inroads article, Don Gotterbarn asserts that, if one's ethics is influenced by those around us, then "just being aware of the existence of this Pledge helps to refocus us all on our own responsibility and the profession's responsibility." So in what ways can this Pledge be used both inside and outside of the classroom to better promote such traits? This session is for those interested in computing ethics and professional responsibility to get together and collaborate on new initiatives featuring The Pledge of the Computing Professional as a means to this end.	Promoting professional responsibility and ethics: the pledge of the computing professional (abstract only)	NA:NA	2014
Elissa M. Redmiles:Jandelyn D. Plane	Mentors-protégé relationships have been shown to improve retention of women and under-represented students in computing (Cohoon, 2011). Mentorship relationships are also the driving factor in female students' selection and completion of a computing career (Ashcraft, Eger, & Friend, 2012). More generally, mentor-protégé relationships are a significant factor in retaining and encouraging under-represented students in many academic fields. Beginning with a brief discussion of our experience facilitating mentorship between female undergraduate and middle school computing students, this Birds of a Feather Session will provide a platform for the exploration of mentor training techniques and mentor-protégé relationships. We will discuss and share different strategies (e.g. readings, hands-on workshops) for training mentors and facilitating strong mentor-protégé relationships. We will also explore how mentorship relationships affect student performance in all school subjects and how to best create a broad mentorship experience that extends beyond computing. Using a summary of recent literature as a springboard, we will consider optimal mentor-protégé age gaps, experience levels and interaction frequencies. Finally, we will explore session participant's personal experiences as mentors/protégés and compile a list of "do's and don'ts" for those facilitating or participating in mentorship programs.	An exploration of mentor-protégé relationships and how to train future mentors (abstract only)	NA:NA	2014
Ernst Leiss:Lila Ghemri	The unprecedented use of social networking, the Web and other related technologies by all fringes of population, has not been accompanied by an adequate awareness of its potential for abuse, privacy violation and cybercrimes. Furthermore, technology nowadays provides extensive capabilities which often times clash with society's laws and ethics. In particular, modern societies have certain expectations of privacy; that may be contradicted by the capabilities of new technology. It seems then incumbent upon computer science instructors to raise awareness of these risks and threats among the students they teach. The purpose of this session is to provide a forum for discussing technologies that are widely used by CS and non CS professionals alike, and that may well be at variance with society's privacy expectations. A second purpose of this session is to introduce instructional modules currently under development that may assist instructors in addressing some of the relevant themes in courses, in particular privacy in social networks, on the internet, in mobile apps and also privacy in electronic voting and law enforcement. We expect that attendees will provide varying opinions and insight that will help shape the course offering. In addition, attendees will be invited to share their experience teaching or talking about privacy issues and the approaches, resources and techniques they have used in presenting the topic to students.	Privacy between technological capabilities and society's expectations (abstract only)	NA:NA	2014
Frances P. Trees:Lissa Clayborn	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, to provide member services at the local level, and to promote CSTA membership on the national level [1]. With the recently announced AP® Computer Science Principles Course to Launch in Academic Year 2016--17, local CS communities are vital. This BOF will provide a platform for the discussion of CSTA chapter formation, CS education community building, and tools and techniques used to successfully host professional development for K-12 CS teachers.	CSTA chapters: building a CS community (abstract only)	NA:NA	2014
William (Bill) John Pulling	Teaching by analogy or simile is a strategy many of us employ when we try to explain fundamental CS concepts. One popular analogy for explaining the difference between a class and an object is that the class is the "blueprint" and the object is the "house" that gets built from the blueprint. Others describe the class as the "cookie cutter" and the object is the "cookie". Another example is that an indeterminate loop is like a person hammering a nail into a board. We know that the loop will end when the nail is flush with the board. However, we are not sure how many strokes or iterations the loop will take, as it depends on who is doing the hammering, the length of the nail, etc. This BOF will encourage attendees to describe analogies, metaphors, and similes they use in the classroom to help illustrate different concepts in programming, or in other areas such as database or networking fundamentals. Discussion will also include "analogies that seemed like a good idea at the time" but did not work out as well as had been hoped.	What analogies/metaphors/similes do you use when teaching CS concepts? (abstract only)	NA	2014
Mark Sherriff:Daniel Garcia:Jody Paul	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2014
Aidan L. Feldman:Matthew McCullough	When working in the constantly challenging field of Computer Science, all but the most brazen individuals will inevitably feel "in over their heads", which is the simplest incarnation of impostor syndrome. This issue affects members of this field at all levels: students, teachers, researchers, etc. For students, impostor syndrome is a great barrier to success, because they don't have full context of the skills necessary to be successful in CS. Computer Science attrition rates are extremely high relative to other areas of study, particularly among first and second-year college students. What can be done by educators and the industry to retain talent, that would otherwise be lost by those individuals not feeling like they belong? How can we instill confidence and encourage growth? How can these strategies applied personally, or to other experienced members of the field?	Fighting impostor syndrome (abstract only)	NA:NA	2014
Carsten Kleiner	The number of papers on database system education has been close to zero at recent conferences. As database systems are a fundamental part of computer science curricula this comes as a surprise. The apparent draught in new ideas in database system education is even more surprising given the fact that this area of computer science has arguably undergone its most significant changes for more than 30 years within the last 5 years. Many new database system paradigms (most of them appearing under the NoSQL label) have been introduced for various reasons. Some of these massively distributed database systems facilitate unprecedented data processing capabilities often labeled as BigData. In order to offer a sustainable and practical CS education, at least some of those new paradigms and methodologies should probably be included into database education. This BoF can be a starting point for a discussion about which of those deserve inclusion into a typical CS curriculum and (even more interestingly) at what time in the curriculum and by replacing what other topics. Depending on interest of the audience a decision could be made as to what is the correct technology support for continuing the discussion beyond the conference. The BoF will also offer participants a forum to share their opinions, ideas and experiences on recent and future changes in database system education in general.	No news in database education by all accounts: seriously? (abstract only)	NA	2014
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Celebrations of Women in Computing.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2014
Magdy Ellabidy:John P. Russo	The cloud has become prevalent today and is used both in academia as well as industry. Many services, such as Amazon Web Services, provide an inexpensive way to provision servers in many different platforms. These cloud providers also have prebuilt instances which have many different popular configurations, such as LAMP and many popular databases. This bird of a feather session will discuss experiences with utilizing the cloud both as a temporary fix for times when hardware is unavailable for laboratories (such as during renovations) as well as using the cloud as a permanent replacement for physical labs	Using the cloud to replace traditional physical networking laboratories (abstract only)	NA:NA	2014
Brian Patterson:WIlliam E.J. Doane	Often underlying discussions with those who are not professional computer scientists is the idea that computer scientists are programmers and programmers make tools. Yet many computer science professionals view themselves primarily as scientists, with programs being used to create and express a deeper understanding of computation. This Birds of a Feather session discusses how participants can effectively bridge the gap between toolmaker and scientist views, either through modifying their own view or changing the viewpoint of others. Topics include: participants' personal balance between how they view themselves as scientists and toolmakers; how to encourage students to see themselves as scientists and toolmakers in balance; how to effectively conduct group work with a variety of viewpoints present; how student motivation interacts with how they see themselves as computer scientists; and other viewpoints that exist about what it means to be a computer scientist. Computer scientists and non-computer scientists welcome. Laptop not recommended.	Toolmaker or scientist? (abstract only)	NA:NA	2014
Paige H. Meeker	There is a tremendous need for computer science in every discipline; however, our K-12 institutions seem reluctant to alter traditional teaching methods and curriculum in order to include computing concepts at an early age. Therefore, most students are not exposed to computer science until they reach college. In this BOF, I'd like to explore what can be done to help introduce more young people to this exciting discipline, as well as encourage educators and administrators to incorporate computer science curriculum in their schools. As a leader in my children's school for the "Hour of Code" initiative, I was able to witness firsthand how children as youg as four and as old as high school seniors are hungry for more when it comes to programming. During this talk, we will explore what can be done from this point to encourage schools, teachers, and administration to continue (or begin) our youth's knowledge and experience with programming. As a nation, the United States is failing in the proper instruction of our children in the field of computer science. While employment for computer related fields is rising, and knowledge of the discipline is necessary no matter what the ultimate field of study or occupation of the student, only about two thirds of the states within the United States have computing education standards for grade levels K-12 (http://www.acm.org/runningonempty/roemap.html). As an educator (and a mother) I find this disturbing. A good work was begun by "Code.org" this past December, with more than 15 million students logging in to the site and working through the tutorials there. How can we promote and continue this initiative in our local schools and encourage up to date requirements for our students.	Inspiring a love of computer science through the education of our youth (abstract only)	NA	2014
Jian Zhang:Philip Sweany	The need for workers in the information technology and computing industry is on the rise. Code.org estimates that by 2020, there will be more that 1 million more computer jobs available than there will be computer science graduates to fill them. Efforts, by organizations such as the Computer Science Teachers Association (CSTA) and code.org, to attract students to information technology and computing appear to be working. While it appears that there will be students to teach, will there be qualified teachers to teach them? The CSTA report "Bugs in the System: Computer Science Teacher Certification in the U.S." asserts that the "certification/licensure processes for Computer Science in the U.S. are deeply flawed." The goal of this session is to bring together educators from the high school and college level to discuss what the CS Education community needs to do to address this problem.	Debugging teacher certification (abstract only)	NA:NA	2014
Peter H. Froehlich:Joanne Selinski	At many universities, computer science departments traditionally offer introductory programming as a "service course" to other departments. In recent years, however, more and more outside departments---apparently dissatisfied with the CS courses---have begun to offer their own versions of introductory programming. Our BOF will provide a forum to discuss this development and to exchange ideas for addressing it.	Introduction to programming for scientists and engineers (abstract only)	NA:NA	2014
Ming Zhang:Bo Li:Ginnie Lo	A key challenge for the Chinese educational system is the development of a CS1 course for non-major college students that can meet the unique environment in our country. In mainland China, CS1 is required of all freshmen at their first semester, approximately 7 million freshmen per year. We have named this CS1 course "Fundamentals of University Computer Science" to reflect our ambitions to bring our students to the cutting edge of information technology and society. Over the past few years, many Chinese universities have advanced and experimented with their ideas for introducing computational thinking into CS1, one of the most important core courses. In this BOF session, we want share our ideas and concrete solutions and to engage in dialogue with our international colleagues in order to enrich and improve our approach. This BOF Session is sponsored by the ACM China Subcommittee on Education.	China's perspective from the viewpoint of computational thinking on CS1 for non-majors (abstract only)	NA:NA:NA	2014
Elizabeth K. Hawthorne:Robert D. Campbell:Jim Nichols:Cara Tang:Cindy Tucker	At the direction of the Association for Computing Machinery (ACM) Education Board, the ACM Committee for Computing Education in Community Colleges (CCECC), has undertaken a project to produce IT curricular guidance which defines core IT competencies accompanied by well-designed assessment measures. To that end, the ACM CCECC convened a task force of subject matter experts from both academe and industry to define core IT learning outcomes which should be common to all associate-degree IT programs. Assessment consultants worked alongside these subject matter experts to create easy-to-use evaluation rubrics. The session will include an overview of the findings from this project including mappings to other curriculum models, as well as a discussion concerning curriculum, assessment and pedagogy of IT courses and programs at associate-degree granting institutions.	IT curricular guidance for associate-degree granting institutions (abstract only)	NA:NA:NA:NA:NA	2014
Nina Onesti:Saul Blanco:John Duncan:Mitja Hmeljak:Dan Richert	As educators want to try to find new ways to engage our students in and out of the classroom, allowing them to enhance their learning as well as their overall experience of the class. Active learning techniques challenge students to learn in a "non-traditional" way by developing critical thinking skills and having a little fun at the same time. While our students become more effective students, we can also become more effective educators, as we can quickly and accurately assess learning outcomes. In this discussion, you will hear from faculty members that currently use active learning in their classroom such as classroom assessment techniques (CATs) [4], Team-Based Learning (TBL) [5], and Just in Time Teaching (JITT). We will provide short in-session demonstrations of these activities, ending with time to consult with each other to select activities that will be good for every attendee's specific classroom.	CAT's: not just a furry friend. using active learning in your classrooms (abstract only)	NA:NA:NA:NA:NA	2014
Daniela Inclezan	Computer science students graduating in the next decade will face the big energy and environmental challenges of the 21st century. According to current trends, an increasing number of them will be employed in "green jobs" and will contribute to promoting biodiversity, minimizing the consumption of energy and materials, or restoring environmental quality. It is our job to prepare them for the task ahead. While the vast majority of textbooks and materials used in different areas of CS are oblivious to these problems, many resources can be found at the boundaries with other disciplines (e.g., environmental science, architecture, agriculture, etc.). Moreover, new computer applications are created every day for the analysis of current environmental problems and the evaluation of their possible solutions, but these applications are normally not mentioned in CS classes. This is a lost opportunity for engaging our students in the real world challenges we are facing today. Environmental problems can be addressed in the CS classroom in a way that does not impede the learning of the technical content, but rather increases students' ability to think critically about complex systems. This BoF intends to brainstorm innovative resources, examples, activities, and assignments that can be incorporated into the CS classes, in order to raise students' awareness to current ecological problems and, at the same time, illustrate the role computer scientists can play in solving them. For this BoF session, a laptop is optional.	Preparing computer science students for a sustainable future (abstract only)	NA	2014
William Richards Adrion	While it is exciting to see an increasing number of national efforts to reform computing education, such as those led by CSTA, Computing in the Core, ACM, NCWIT, code.org and many others, real change at the state, district and school level requires the active participation of individuals and local organizations to engage policy makers, superintendents and communities. The U.S. education system is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level -- with large differences between neighboring states. The system is organized along pathways of elementary schools, middle and high schools, community colleges, four-year colleges, and universities. A reform process for improving computing education pathways will take place at multiple levels and state by state. This birds-of-a-feather session will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change.	State-level advocacy for computing education reform (abstract only)	NA	2014
Adrian German:Suzanne Menzel:Joan Middendorf:John F. Duncan	After thirty years or more of the scholarship of teaching and learning (SoTL) many students still struggle to learn at the university level, while ever more techniques are being developed to help students learn and measure their success. In practice, however, efforts to reshape classes begin with questions such as: "How can I make use of this new technique?" Or, "How can I increase my students' critical thinking?" Such questions are often too broad to provide a clear focal point for designing efficient strategies. They sometimes draw attention to parts of the course not in great need of reform, and generally focus the process on the means (teaching) rather than the end (student learning). A shift is taking place in higher education so that teaching is approached not from content or from the teaching methods, but from the mental processes that are crucial to functioning in a discipline. Decoding the Disciplines (Middendorf & Pace, 2004) is an evidence-based, learner-centered methodology that can conclusively improve teaching by prioritizing what really matters in making meaning in a discipline and boosting learning outcomes in the classroom. It offers a meta-strategy, providing both a framework to define the task at hand and a means to determine which tools would be most useful in accomplishing it. Starting from the bottlenecks, the places where students get stuck, and connecting them with what experts do so they won't get stuck, the crucial mental processes drive the teaching and learning so students can be successful.	How to decode student bottlenecks to learning in computer science (abstract only)	NA:NA:NA:NA	2014
Jamie Payton:Tiffany Barnes:Jason Black:Cheryl Seals	The demand for computing professionals in the U.S. workforce is expected to increase over the next several years, while the number of students intending to major in computing has declined. In this BOF session, we focus on the use of service learning to address the growing concern of creating a sustainable pipeline for computing professionals, with an emphasis on broadening participation in computing. We center the discussion around our experiences with the STARS Computing Corps, which engages college students in service-learning to address the national computing talent shortage. The model has been shown to be effective in retaining college students in computing, and STARS alumni credit participation in STARS with helping to develop professional skills. This session will include interactive small group discussions on goals, obstacles, and strategies for applying service learning to broaden participation in computing, grow the K-12 pipeline, and prepare college students with skills demanded in the 21st century workforce.	Engaging college students in service learning to grow the K-12 computing pipeline and prepare the 21st century workforce (abstract only)	NA:NA:NA:NA	2014
Suzanne W. Dietrich:Don Goelman	Given the ever-growing importance of data across all disciplines, there is a need to enhance the fluency and comfort with data technology for a diversity of majors, not just technical ones. Which topics should be included in a data fluency course for all majors? A non-exhaustive list of possible topics includes spreadsheets, relations and relational databases, querying, conceptual design, bar graphs, charts, other data visualization, XML, and "Big Data." Join the discussion to brainstorm a data experience for students with diverse majors.	Data fluency: curricular issues for all majors (abstract only)	NA:NA	2014
Karl Wurst:Lori Postner:Stoney Jackson	Integrating Free and Open Source Software (FOSS) into our curricula can provide students with a rich, motivating learning experience that helps them develop technical as well as soft skills. However, integrating FOSS into curricula does have its challenges. This birds-of-a-feather (BoF) seeks to bring together faculty to discuss challenges, share resources, share solutions, and make connections. So, whether you are considering integrating FOSS into a class for the first time, or you are looking for ways to improve what you are already doing, this BoF is for you. Members of the Teaching Open Source (http://teachingopensource.org) and the foss2serve (http://foss2serve.org/) communities will help guide the discussion and be on hand for questions.	Teaching open source (software) (abstract only)	NA:NA:NA	2014
Debra Davis:Dave Berque:Janet Davis:Matt Jadud:Paul Resnick	With a growing awareness of the importance of Human Computer Interaction (HCI) and User Experience (UX) Design and Research in industry, many departments are examining ways to integrate this topic into their curriculum. What are the best ways to do this? Should HCI and UX be integrated into existing courses such as event-driven programming or mobile computing? Or should it be a separate course that integrates visual design, psychology and ergonomics? How important is this topic to students looking for internships and entry-level jobs? At what levels should these topics be taught in the curriculum? This is important as there is a growing demand in industry for User Experience specialists due to an increased focus on software quality and product success. A major complaint of employers is that this skill is lacking in many college graduates. Teaching computing students how to incorporate UX into the design and development process helps to address this critical need. This BOF will let participants share their ideas and learn from their peers. Some of the discussion leaders led a similar lively and enthusiastic discussion at SIGCSE 2013. Discussion spanned the role of HCI in the participants? various curricula; modules versus dedicated courses; projects versus standalone assignments; and textbooks, tools, and other pedagogical materials. Bringing together new and previous participants will bring new insights and expansion of these, including discussions of our recent experiences and lessons learned, as well as the broaching of new topics such as the roles of non-computing courses in HCI education.	Including HCI and user experience (UX) methodologies in computing curricula (abstract only)	NA:NA:NA:NA:NA	2014
Lillian Cassel:Lois Delcambre:Gregory Hislop	The Ensemble computing portal originated under the NSF NSDL program and enjoys the respect and continued interest of the computing education community. The project has reached a maturity level at which it is time to focus on the long-term viability of the activity. The original proposal included a commitment from the Villanova University library to adopt the system and keep in running in perpetuity. However, merely keeping the system running will not preserve nor extend the true promise of the project. That requires an active, engaged community. The leaders of the Ensemble project invite our partner projects and the SIGCSE community to join us in an initial meeting of an organization devoted to the continued development and support of the Ensemble vision: that of a community of educators sharing their best efforts, showcasing the best resources, and archiving materials that deserve long term preservation.	Ensemble: the sharing community (abstract only)	NA:NA:NA	2014
Chris Mayfield:Dennis Brylow	With initiatives like CS Ed Week, Code.org, and the AP CS Principles course, many educators are designing new and engaging ways to introduce students to computer science. But are we doing a good enough job presenting computer science as a field? Is it sufficient for prospective students to understand that CS is about creativity, abstraction, data, algorithms, programming, the Internet, and impact? Or should they also learn something about computer architecture, operating systems, networking and security, programming languages, software engineering, database systems, and so forth? This BOF will discuss how survey courses can meet the learning objectives of AP CS Principles, while providing a wealth of content knowledge that maps directly to undergraduate computer science programs.	Survey courses and AP CS principles (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science (CS) educators are constantly reinventing introductory and advanced courses contextualized with new technology to better engage, retain students and increase their learning and motivation. Mobile and wearable computing are the most recent examples. However, while it is important to attract students into CS, it is equally vital to sustain student motivation by using pedagogical approaches contextualized to how students learn throughout the curriculum without losing fundamental, core concepts. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. To ensure that CS educators are not simply adopting the newest technological fad at the expense of students learning and fundamental, core CS concepts, the CS education community must understand how mobile computing technology can be successfully leveraged to change education through measured, contextualized pedagogical approaches. To start facilitating this dialog, this Birds of a Feather session will provide a platform for the discussion of how mobile computing has been successfully (and unsuccessfully) incorporated into CS courses; the mobile platforms and tools used; and, the pedagogical utility of using mobile computing as a learning intervention. This project is partially supported by NSF DUE#1140781.	Incorporating mobile computing into the CS curriculum (abstract only)	NA:NA:NA	2014
Sushil K. Prasad:Almadena Chtchelkanova:Anshul Gupta:Arnold Rosenberg:Alan Sussman	Parallelism pervades all aspects of modern computing, from in-home devices such as cell phones to large-scale supercomputers. Recognizing this - and motivated by the premise that every undergraduate student in a computer-related field should be prepared to cope with parallel computing - a working group sponsored by NSF and IEEE/TCPP, and interacting with the ACM CS2013 initiative, has developed guidelines for assimilating parallel and distributed computing (PDC) into the core undergraduate curriculum. Over 100 Early-Adopter institutions worldwide are currently modifying their computer-related curricula in response to the guidelines. Additionally, the CDER Center for Curriculum Development and Educational Resources, which grew out of the working group, is currently assembling a book of contributed essays on how to teach PDC topics in lower-level CS/CE courses, to fill the serious lack of textual material for students and instructors. This session is intended: (i) to report on the current state of this initiative; (ii) to bring together authors of book chapters and Early Adopters and other interested parties for discussions on ongoing activities and needs; (iii) to discuss the initiative and collect direct feedback from the community.	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates (abstract only)	NA:NA:NA:NA:NA	2014
Michael S. Kirkpatrick:Leo Porter	There is a growing body of evidence showing active learning pedagogies are effective for ensuring long-term student learning, reducing course failure rates, and retaining majors. While active learning pedagogies are more often employed in lower divisional CS courses, systems classes-such as OS, architecture, and networks-are just beginning to see a shift from standard lecture to active learning. This BOF will provide a forum for sharing ideas of how to integrate active learning techniques into systems courses, using the following questions as starting points: What are active learning techniques, and how are they used? What impact does active learning have on coverage? Must adoption of active learning techniques entail abandoning lectures entirely? If not, how can I use active learning to augment, rather than replace, my lectures? What transitional steps can I take toward active learning methodologies? If you've tried active learning techniques, what results have you seen?	Integrating active learning techniques into systems courses (abstract only)	NA:NA	2014
Richard Weiss:Michael E. Locasto:Jens Mache:Elizabeth Hawthorne:Justin Cappos	We see teaching information security through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have tried require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have used hands-on exercises and those who would like to. We recognize that few CS programs can afford new required courses, so we would be discussing ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering and algorithms. The questions we will ask are, "What exercises, if any, have you tried" What are your experiences? What are you looking for?	Teaching security using hands-on exercises (abstract only)	NA:NA:NA:NA:NA	2014
Douglas E. Harms	Many computer science students and faculty want to participate in service projects; these projects might include service learning in the classroom, service experiences in the local community, or service projects at a domestic or international site. Developing service projects that incorporate computer science and/or technology skills that are both interesting and meaningful often presents a challenge. During this BOF participants will discuss and answer questions about service projects in which they have participated, their successes and failures, techniques for finding appropriate partners, logistical issues, etc. This session will be helpful to faculty having no prior service experience, as well as veteran faculty who have organized multiple service trips.	Community engagement and service learning opportunities in computer science (abstract only)	NA	2014
Daniel D. Garcia:Dan Armendariz	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, PandaGrader, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users' Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2014
Rebecca Bates:Judy Goldsmith:Valerie Summet:Nanette Veilleux	Are you interested in incorporating some of your favorite science fiction in your classes? Did you know it can help improve student interest in the technical topic? Come join us as we talk about ways to connect SciFi to artificial intelligence, robotics, networking, intellectual property, and other topics. We'll start with overviews of how we've used SciFi and have plenty of time for discussion of new works and old that connect to the material we need to cover, while drawing students into the content and the field.	Using science fiction in CS courses (abstract only)	NA:NA:NA:NA	2014
David Hovemeyer:Jaime Spacco:Robert Duvall:Stephen Edwards:Amruth Kumar:Andrew Petersen:Daniel Zingaro	Short, automatically-assessed programming exercises, and other types of short practice problems, are a useful way to introduce and reinforce concepts and techniques in introductory programming courses. When delivered over the web, they allow students to learn and practice, with immediate feedback, at any time and place where they have access to a web browser. However, such exercises do not seem to be as widely used as they could be. Similarly, there is not a lot of literature on the effectiveness of these types of problems. The purpose of this BOF is to bring together users (and potential users) of programming exercises with developers of programming exercise systems to discuss how exercises could be used more widely and effectively. Possible discussion topics include: What features are absolutely essential for faculty to consider adoption? What are the major obstacles preventing more widespread adoption? Are faculty willing to share their exercises under an open/non-commercial license? Should exercises best used for extra practice, as graded assignments, or both?	Using and sharing programming exercises to improve introductory courses (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Peter-Michael Osera:Brent Yorgey	Induction is a notoriously difficult topic for beginning computer science students to understand. Even if they can produce an inductive proof of some mathematical fact, many students never see the relevance of inductive reasoning outside of the classroom for anything beyond the natural numbers. This is unfortunate because inductive reasoning is closely intertwined with algorithm design and one of the cornerstones of reasoning about (recursive) programs. With the adoption of functional programming into the CS curricula core, it is a good time to revisit how we teach induction and try to make more explicit this fundamental connection between inductive reasoning and recursive programming. In this BoF session, we will discuss curriculum, strategies, and fun examples for teaching induction with an eye towards giving induction tangible and practical relevance for the computer science undergraduate.	Making induction meaningful, recursively (abstract only)	NA:NA	2014
Martin Stepp:Jessica Miller	Several times in the past few years we have held BoF sessions about teaching web programming at the college level. Our feedback indicates that the most valuable aspect of the past sessions was simply to get everyone together for an exchange of ideas and information, so this will be the focus of the session again. We'd like to bring together two groups of web programming instructors: Newcomers who have not yet taught this material before (or are just starting) and want to soak up information, and veterans who have now taught it and have insights to share with the group. Newcomers can ask questions about materials, languages and technologies to use, what works and what doesn't, and so on. Veterans can share tips from the classroom and helpful resources. We can also discuss the latest technologies such as HTML, ECMAScript/JavaScript, iPhone/iPad, Android, and web application frameworks such as Node.js, Rails, AngularJS, and more.	Web programming (abstract only)	NA:NA	2014
Stephanie E. August:Jungwoo Ryoo	MOOCs, 3D virtual world environments, game-based learning, simulations, digital story telling, and other learning-focused digital interactions hold tremendous potential for presenting information science concepts and problem-solving strategies to the generations of the 21st century. We use them to present both theoretical and practical concepts in an engaging manner, tailored to specific age groups and at many levels of abstraction. An abundance of recent projects have examined these individually and brought to light many common concerns. This session explores several interrelated questions: How can these varied activities can be integrated to effectively teach programming concepts, problem solving strategies, and programming skills at age- and discipline-appropriate levels? Do interactive digital simulations and visualizations facilitate construction of the mental models underlying computing concepts? What assessments will be effective in determining whether we are achieving our knowledge- and skill-related goals? How are these tools related to student learning styles and learning objectives? How can these artifacts be disseminated and sustained in the context of dynamic delivery platforms? This brainstorming session is an opportunity to share ideas and explore future collaborations.	Can 3D virtual world environments and game-based learning effectively teach computer science concepts? (abstract only)	NA:NA	2014
Yan Bai:Xinli Wang	With NSF funding, we have developed a collection of instructional laboratories to enhance the security component in IT education. The labs are developed with a layered and modular design that can be tailored for different courses, accommodating new tools and being conducted in various environments with minimum modifications. This workshop introduces to participants these labs and the environment to conduct them. The workshop proceeds in four sessions in which we: 1) introduce the labs, techniques and environment; 2) demonstrate a lab; 3) guide participants to practice with a lab, 4) debrief. The intended audience is educators who teach IT security courses or other courses with security components at colleges or universities. Experience is not required. Each participant receives an electronic version of 1) the lab assignments that we have developed and used in our teaching practice, and 2) preconfigured virtual machines and tools used to conduct the labs. Laptop required.	ITSEED: hands-on labs for IT security education (abstract only)	NA:NA	2014
Tiffany Barnes:Veronica Catete:Andrew Hicks:Barry Peddycord	The new CS Principles curriculum, a pilot Advanced Placement course, offers novice students an exciting opportunity to learn computing in a hands-on, fun way. High school and college teachers of introductory computer science course are invited to this workshop to learn basic game and mobile phone development. Participants will learn GameMaker, AppInventor, and Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. Participants should bring their own laptops (ideally with AppInventor installed). Windows 7 phones will be provided during the workshop. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course.	Making games and apps in introductory computer science (abstract only)	NA:NA:NA:NA	2014
Valerie Barr:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF proposals: learn about effective proposal writing via the review process (abstract only)	NA:NA	2014
Peter J. Clarke:Yujian Fu:James Kiper:Gursimran Walia	NA	Integrating software testing into programming courses (WISTPC 2014) (abstract only)	NA:NA:NA:NA	2014
Greg Wilson:Fernando Perez:Peter Norvig	The IPython Notebook is an interactive browser-based environment where you can combine code execution, text, mathematics, plots, and rich media into a single document. Originally designed for use as an electronic lab notebook for computational science, it is increasingly being used in teaching as well, and a rich ecosystem of open source plugins and extensions for teaching is growing around it. The first half of this hands-on workshop will introduce the Notebook and present examples of lessons and instructional materials built around it. In the second half, attendees will explore future directions for the Notebook as a teaching platform. For more information, please view our GitHub repository online at https://github.com/gvwilson/sigcse2014-ipython-workshop.	Teaching computing with the IPython notebook (abstract only)	NA:NA:NA	2014
Xumin Liu:Rajendra K. Raj:Thomas J. Reichlmayr:Alex Pantaleev:Chunmei Liu	NA	Teaching service-oriented programming to CS and SE undergraduate students (abstract only)	NA:NA:NA:NA:NA	2014
Vicraj Thomas:Niky Riga:Sarah Edwards	This hands-on workshop will introduce GENI to instructors of computer networking and distributed systems classes. Instructors can use GENI [http://groups.geni.net/geni/wiki], an easy-to-use virtual laboratory, to improve the educational experiences of their students by having them experiment with new concepts without requiring expensive laboratory facilities. It has been used by over twenty graduate and undergraduate classes. GENI is being used by over 1200 researchers and educators. It enables them to run large-scale, well-instrumented, end-to-end experiments engaging real users. These experiments may be fully compatible with today's Internet, variations or improvements on today's Internet protocols, or indeed radically novel "clean slate" designs. GENI includes compute and communications resources distributed across the United States. GENI is "deeply programmable" i.e. experimenters can install their custom software or operating systems on the compute nodes and can program the behavior of the switches that connect these nodes. GENI is funded by the National Science Foundation and is free to use for research and education. Workshop participants will have the opportunity to set up and run experiments using GENI. They will also learn about class logistics when using GENI and support resources such as ready-to-use exercises. Those doing the hands-on activity will need a laptop running relatively a recent version of Mac OS, Windows or Linux; at least 4GB of memory; a modern processor (at least dual core and faster than 1.5 GHz) and a WiFi interface.	GENI as a virtual laboratory for networking and distributed systems classes (abstract only)	NA:NA:NA	2014
Sarah Monisha Pulimood:Kim Pearson:Diane C. Bates	Innovative solutions for complex problems entail diversity of perspectives, and students must learn to integrate concepts from multiple disciplinary areas. Yet, to provide collaborative experiences that cross disciplinary boundaries, educators must navigate numerous administrative and pedagogical challenges. In this hands-on workshop participants will learn how to leverage existing courses for students and faculty to collaborate across disciplines and with a community partner, to develop socially-relevant computational solutions for real-world problems. Participants will also brainstorm ideas on addressing specific challenges at their own institutions. The intended audience is educators interested in engaging their students in deep computational thinking through immersive multidisciplinary collaborative experiences. Registered participants will be reimbursed the workshop registration fee through NSF Award# 1141170. We will additionally offer a stipend to participants who adopt our model, administer assessments and provide us with their results for analysis and inclusion in reports. More information will be available at http://tardis.tcnj.edu/cabect/. Laptop Recommended.	CABECT: collaborating across boundaries to engage undergraduates in computational thinking (abstract only)	NA:NA:NA	2014
Robert Lutz:Evelyn Brannock	This workshop provides an introduction to three-dimensional (3D) printing. This tutorial will: cover the general background of 3D printing, summarize popular software tools, describe associated challenges and offer suggestions for application within computer science (CS) coursework. Participating CSE educators will get hands-on experience with 3D printing tools and will be able to print a limited number of items during the workshop. Attendees will perform a full lifecycle exercise in the printing workflow, progressing from a concept, to a digital model, to a physical implementation. The workshop will also describe the authors' experience integrating this authentic learning into several IT and CS courses. Experience gained will be useful after the session in both printer and printer-less environments. See http://tinyurl.com/k65jxsm for more information. Laptop required.	Enhancing computer science education (CSE) with the use of 3D printer technology	NA:NA	2014
Mark C. Lewis:Konstantin Läufer:George K. Thiruvathukal	Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at #12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library. Participants are strongly recommended to bring a laptop.	Scala for introductory CS and parallelism(abstract only)	NA:NA:NA	2014
Andrea F. Lobo:Ganesh R. Baliga	This workshop presents an award-winning, NSF-funded, project-based curriculum for algorithm design that includes algorithmic strategies for intractable problems. This curriculum is a sequence of laboratory projects comprising increasingly sophisticated solvers for a single intractable problem, designed to integrate into existing, one-term, undergraduate courses that teach algorithm design and/or intractability without sacrificing traditional course content. The presenters have used the curriculum in the Design and Analysis of Algorithms course at their institution to help students tackle and appreciate intractability. This workshop presents versions of the curriculum centered on TSP, SAT and Sudoku. Attendees will receive adoption materials and access to an adopters' forum. NSF is funding the development, evaluation, dissemination and adoption of the curriculum. Potential adopters are encouraged to apply for funding to attend this workshop and SIGCSE 2014 at http://www.rowan.edu/~lobo/AlgosCurriculum. This material is based upon work supported by the National Science Foundation under Grant No. 1140753. Laptop optional.	Teach algorithm design and intractability with a project-based curriculum centered on a single intractable problem: three domains to choose from (abstract only)	NA:NA	2014
Gail Chapman:Joanna Goode	The ECS program includes an inquiry-based college-preparatory curriculum that introduces students to the creative nature of computing, technology as a tool for solving problems, and the relevance and impact of CS. This workshop will provide participants the opportunity to engage in activities from the ECS curriculum that highlight the six computational practices common to ECS and CS Principles. We will explicitly model the inquiry-based design of the activities and facilitate discussions that highlight how inquiry manifests itself in the computational practices. This workshop is appropriate for K-12 educators and college/university faculty who are interested in deepening their understanding of how teacher pedagogy is critical to broadening participation in computing. Laptop Optional.	Exploring computer science: computational practices in action (abstract only)	NA:NA	2014
Joel C. Adams:Richard A. Brown:Elizabeth Shoop	Curriculum 2013 brings parallelism into the CS curricular mainstream. This hands-on workshop is intended for faculty with little or no background in parallel computing. OpenMP is a platform independent, industry-standard library for shared-memory parallel programming supported by all modern C and C++ compilers. The workshop introduces the basics of OpenMP multithreading using parallel patterns, including single program multiple data (SPMD) execution, fork-join threading, and pragmas for parallel loops, parallel blocks, mutual exclusion, etc. The workshop includes: (i) an overview of OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how these may be used to achieve the goals of Curriculum 2013. Workshop materials will be distributed from csinparallel.org. Participants will receive and explore 15 short programs designed to help students understand multithreading concepts, plus longer programs that use OpenMP to solve significant problems. A participant may explore these programs on their own laptop, provided it has installed a C/C++ compiler that supports OpenMP (e.g., gcc 4.2 or later; Visual Studio 2008 or later). Those comfortable with the command-line may explore the programs on our remote servers using a laptop or tablet with a suitable SSH client. Laptop recommended.	Teaching shared memory parallel concepts with OpenMP (abstract only)	NA:NA:NA	2014
Eli Tilevich:Clifford A. Shaffer:Austin Cory Bart	This workshop introduces participants to RealTimeWeb, a technology developed under the auspices of an NSF-funded project at Virginia Tech. RealTimeWeb is a software architecture framework that makes real-time web data, such as weather reports, news updates, and restaurant recommendations, accessible for introductory programming projects. The presented technology offers technical scaffolding for the students to gradually ease into (or completely circumvent if appropriate) some of the most vexing complexities of distributed computing. At the heart of RealTimeWeb are carefully engineered client libraries through which students can access the data provided by real-time web services. To support computing educators teaching introductory CS classes in a variety of programming languages, each library is available in Python, Java, and Racket, with compatibility on key platforms, including Android. These libraries are readily available through an online curated gallery, designed to be quickly adapted to instructors' specific academic needs. This gallery also provides a tool for rapidly prototyping new libraries based on our framework. RealTimeWeb enables computing educators to introduce important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. This workshop introduces RealTimeWeb via a hands-on approach by introducing participants to the core functionality of our architectural framework and client libraries. The workshop proceeds in three parts in which we: (1) present RealTimeWeb by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants' choice; and (2) critically discuss the technology in small and large groups. Further information is at: http://research.cs.vt.edu/vtspaces/realtimeweb/	Creating stimulating, relevant, and manageable introductory computer science projects that utilize real-time web-based data (abstract only)	NA:NA:NA	2014
Brian Magerko:Jason Freeman:Christopher Michaud:Michael Reilly	Our work has focused on how to create a learning experience that is highly personally motivating for students, has a low barrier of entry for creation an artistic computational artifact, and is scalable for use in formal and informal education settings at the national level. We have created a learning environment called EarSketch that addresses student engagement through a STEAM learning experience that provides authentic learning in both the technical (i.e. computing) and artistic domains (i.e. music remixing). EarSketch is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will use Python to place audio clips, create rhythms, and add and control effects to a multi-track digital audio workstation (DAW) while learning computing concepts such as variables, iteration, conditionals, strings, lists, and functions. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation. EarSketch has been used in introductory computing summer camps, secondary school classes, and is currently working towards integration with CS Principles pilot programs. All participants will need a laptop for running the EarSketch software. EarSketch will run on OSX and Windows laptops. Participants will also need headphones for listening to projects created using EarSketch. It is highly suggested that participants download the EarSketch installer at http://earsketch.gatech.edu/downloads and install the software prior to the workshop.	Computational music remixing with EarSketch (abstract only)	NA:NA:NA:NA	2014
Victor T. Norman	Participants will learn how to install Scratch, the Xbox Kinect libraries, and the software that integrates the two. The participant will then practice basic Scratch programming, and then learn how to program Scratch when connected to an Xbox Kinect. Five programming challenges will be given to participants, ranging from easy to difficult. During these activities, the participants will experience the excitement of using their bodies (instead of a mouse and keyboard) as the program controller. Discussions will be held to think about human-computer interactions, standard interaction models, etc., as well as how to help students engage more deeply with computer programming activities. Participants will work in teams of 3 or 4 using participant-supplied laptops running Windows 7.	Scratch + Xbox Kinect: a magical combination for outreach (abstract only)	NA	2014
Stephen H. Edwards:Manuel A. Pérez-Quiñones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()).	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2014
Darci Burdge:Lori Postner:Becka Morgan:Heidi J.C. Ellis:Stoney Jackson:Gregory W. Hislop:Michelle Purcell	Have you ever wanted your students to contribute to or learn from a real-world software project that benefits society? Want some help getting started? Many students find involvement in Humanitarian Free and Open Source Software (HFOSS) projects engaging and motivating. As a first step, this workshop will introduce faculty to FOSS tools and culture. Through a virtual field trip into the world of HFOSS you will learn how to find a project, discern characteristics of a good project for student participation and understand how to use IRC, a communication tool used by FOSS developers. The use of version control to support project development will also be discussed. Along the way, you will learn how to support student learning in such projects. All topics will be covered at an introductory level. Participants will take away exercises that can be used in the classroom. Additionally, participants will have access to support in the creation of assignments or curriculum and their implementation from teachers experienced in supporting students in HFOSS participation. Additional information at: http://www.foss2serve.org/index.php/SIGCSE_2014_Workshop Laptop required.	Teaching with HFOSS to provide students with real world experience: an introduction (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Clifton Kussmaul:Helen H. Hu:Matthew Lang	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. POGIL is based on learning science, and shares characteristics with other forms of active, discovery, and inquiry learning. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. POGIL has particular potential for CS education. Software development is largely a team-based problem-solving activity, and POGIL helps students to learn from each other and develop problem-solving abilities as well as important team process skills. POGIL has been developed and validated over the last 15 years in a range of STEM disciplines. The workshop consists primarily of hands-on team activities. Workshop participants will experience POGIL activities, learn core practices, and draft activity pieces. POGIL materials for a variety of CS concepts will be shared. More information and materials are available at http://cspogil.org and http://pogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional. This material is based upon work supported by the National Science Foundation under grant DUE-1044679.	Guiding students to discover CS concepts and develop process skills using POGIL (abstract only)	NA:NA:NA	2014
Franklyn Turbak:Fred Martin:Shaileen Crawford Pokress:Ralph Morelli:Mark Sherman:David Wolber	Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.	Mobile computational thinking with app inventor 2 (abstract only)	NA:NA:NA:NA:NA:NA	2014
Frank Klassner:Benjamin Schafer	This workshop will conduct an exploration of the newly released Lego Mindstorms EV3 robot platform and its applicability to the college computer science curriculum. Participants will learn about the EV3 through handouts and hands-on programming exercises. The first part of the workshop will focus on demonstrating EV3 robots as well as the STEM concepts and computing concepts they illustrate. The second part of the workshop will focus in on the new capabilities of the EV3. This workshop will be more detailed than the vendor led workshop. It will be of benefit to participants new to Mindstorms robotics as well as those with NXT/RCX experience who want to see the evolution of the platform and new components featured in the EV3. These include a revision of the controller brick hardware and software, new color and gyroscopic sensors, and increased processing and memory capabilities. The organizers have a combined 20 years of experience using Mindstorms in CS courses (including courses in introductory programming, systems, and artificial intelligence) with Lego and third party programming environments. Participants must bring a Bluetooth-capable laptop (Mac or Windows), and will have a robot, software, and kit to use for the workshop. Participants will receive a promotion code to purchase a 10% discounted Mindstorms kit.	Using the new lego MindStorms EV3 robotics platform in CS courses (abstract only)	NA:NA	2014
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Dan Armendariz:Jon McKinsey:Zachary MacHardy:Omoju Miller:Barry Peddycord, III:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Richard Weiss:Jens Mache:Michael E. Locasto:Vincent Nestler	Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to provide faculty with tools and interactive exercises that would facilitate adding this topic to their curriculum. We will introduce the EDURange framework for developing interactive cybersecurity exercises. We have several exercises for participants to try, including network scanning and firewall configuration. We will give an introduction to some tools such as nmap, as well as the basic concepts. We have tested our framework several times in classrooms and workshops for students and faculty. One of its advantages is that faculty can use it in their classes with very little set-up. It uses Amazon's EC2/AWS to make the exercises readily available, so instructors will be able to access them with an account. We will also discuss other security exercises, including ones in the RAVE. It also provides each user with a number of VMs with tools and vulnerabilities. We will discuss using exercises as assessment tools. No previous experience in security is necessary. Laptop required. http://blogs.evergreen.edu/edurange	Hands-on cybersecurity exercises in the EDURange framework (abstract only)	NA:NA:NA:NA	2014
Ariel Ortiz	Node.js is one of the hottest open source web platforms currently available. It's built on Google Chrome's V8 JavaScript runtime engine and it allows you to write all kinds of network applications and servers in just a few lines of code. Node.js uses an asynchronous programming model built on non-blocking I/O and a single-threaded event loop. What this means, basically, is that you don't need to be concerned with awful race conditions or synchronization issues that arise when programming for a concurrent multi-user environment. This workshop is aimed mainly at web development instructors that would like to consider teaching a single programming language, JavaScript, for both client-side and server-side coding. Participants will learn how to employ Node.js on Windows, Mac OS or Linux in order to write scalable web servers and applications. Additionally, the Express web framework will be introduced in order to demonstrate how to quickly program traditional webapps and single-page applications (SPA) with the aid of jQuery, AJAX and RESTful web services. The resulting programs will be usable from any modern web browser, including those found in desktop and laptop computers, and mobile devices such as tablets and smart-phones. Participants should have prior working knowledge of client-side (running on a browser) JavaScript and HTML. More information: http://node.arielortiz.info/ Laptop Required.	Server-side web development with JavaScript and Node.js (abstract only)	NA	2014
Adam Norton:Holly Yanco	This workshop introduces participants to the Artbotics program, which combines art and robotics to teach students about computer science while creating kinetic, interactive sculptures. The material covered will be provided in introductory fashion, requiring no prior experience with computer science, art, or robotics. The Lego Mindstorms NXT platform will be used to create two projects during the workshop: a spirograph-like drawing produced by programming a car holding a marker to drive using a sequence of motor movements (teaching the need for looping in programming) and an interactive, kinetic sculpture that reacts to sensor input (teaching the need for decisions in programming and building simple mechanisms). Examples of both projects can be seen at youtube.com/artbotics. The workshop will end with a short discussion of lessons learned and best practices, using examples from previous Artbotics programs for a variety of ages. Topics will include appropriate time frames, how to best use limited resources, and appropriate levels of depth for each age group. The workshop administrators will be providing laptops with the proper Lego Mindstorms NXT software, Lego Mindstorms NXT kits, and all needed building materials.	Artbotics with lego mindstorms (abstract only)	NA:NA	2014
Robert Glen Martin:Paul Tymann:Lester Wainwright	The Advanced Placement (AP) Computer Science (CS) A Development Committee is replacing the large case study (GridWorld) with a hands-on structured lab component with the following characteristics: At least three labs explore computing in context at a significant level, building upon supplied code that provides examples of good style and appropriate use of programming language constructs. -- Each lab contains a significant problem-solving component in which students study alternative approaches for solving a problem, solve new problems, or modify existing code to solve altered problem. -- At least one lab provides students with experience working with programs involving multiple interactive classes and may involve decomposing a program into classes and using inheritance, interfaces, and other object-oriented concepts as identified in the AP Computer Science A topic outline. -- Collectively, lab experiences will cover at least 80% of the topics listed in the course description and will involve at least 20 hours of class time. In investigating the use of labs, the AP CS A program developed three labs that cover many introductory topics and may be used at various times throughout a course. Since these labs cover many basic concepts and perspectives, the labs are appropriate for both AP CS A courses and many college CS1 courses. This workshop will introduce teachers to the AP CS A lab materials and provide practical experience in using these materials within introductory courses.	Using the AP CS labs in the classroom (abstract only)	NA:NA:NA	2014
Peter Drake:Mark Goadrich	The Learn Java in N Games project (LJING) aims to teach topics in CS1, CS2, and other courses by having students implement a variety of games. Each game is presented as a stand-alone module, easily incorporated into an existing course without committing to major curricular changes. Modules include unusually clear solution code, skeleton code for students to complete, JUnit tests for quick feedback to students and automated grading, and clear assignment statements with learning objectives. Program code strictly separates game logic from graphic user interfaces (GUIs), allowing the same code to be used in both conventional and mobile Android environments. In this three-hour tutorial, participants will complete two assignments. These assignments are ready to be used in classes the next day.	Learn Java in N games (abstract only)	NA:NA	2014
David P. Bunde:Kyle Burke	Chapel is a programming language being developed for high-performance applications. It is well suited for teaching parallelism in a wide variety of undergrad courses. Chapel is easy to learn since it supports a low-overhead style like a scripting language as well as a full OO style. It is concise, needing a single keyword to launch an asynchronous task, run a parallel loop, or perform a reduction. This helps undergrads focus on the main point of examples and lets them quickly try different parallel algorithms. It is also versatile, usable on both multicore systems and clusters. In this workshop, attendees will learn basics of Chapel, complete hands-on exercises, and see possible uses in algorithms, programming languages, and parallel programming courses. Laptop with SSH client required.	Chapel: a versatile tool for teaching undergraduates parallel programming (abstract only)	NA:NA	2014
Neil Christopher Charles Brown	The Blackbox project, launched in 2013, collects large amounts of data about beginner student behaviour in the BlueJ IDE. In this this workshop, we will introduce researchers to the Blackbox data and show them how to get started with analyzing it to answer their own research question(s). The workshop provides an ideal opportunity to find out what can be done with the Blackbox data, and will be run by the system's architect and maintainer. The data set includes Java source code as well as information about compilations, debugger usage and other compiler interactions. The Blackbox project has over 150,000 users, over 10,000,000 compilations and tens of gigabytes of source code. (For more detailed information, see the paper "Blackbox: A Large Scale Repository of Novice Programmers' Activity" by Brown et al. in the SIGCSE 2014 proceedings.) Computing education researchers may apply for free, permanent access to the data, but is not necessary to do so before this workshop. The session will be hands-on, and participants should bring a laptop that is capable of running an SSH terminal (e.g. Mac OS X, Linux, or PuTTY on Windows) over a wireless connection.	Introduction to analysing the BlueJ blackbox data (abstract only)	NA	2014
Blair Taylor:Siddharth Kaza:Elizabeth Hawthorne	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing secure coding in CS0, CS1, and CS2 (abstract only)	NA:NA:NA	2014
Barbara J. Ericson:Christopher Michaud:Xin Xu:Krishnendu Roy	This workshop will provide details on the projects that we recommend for non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective at improving attitudes towards computing, especially for females and African-American students. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor. Georgia Tech has also helped eleven other colleges and universities in Georgia start or expand computing summer camps. Some of these other institutions also offer camps on GameSalad, GameMaker, and web development. These other camps have also improved attitudes towards computing. The workshop will include an overview of the projects that we have found to be successful and include hands-on work with App Inventor, GameSalad, LEGO NXT robots, and LEGO EV3 robots. laptop optional	Projects for computing summer camps for 4th-12th grade students (abstract only)	NA:NA:NA:NA	2014
Brian Harvey:Daniel D. Garcia:Tiffany Barnes:Nathaniel Titterton:Omoju Miller:Dan Armendariz:Jon McKinsey:Zachary Machardy:Eugene Lemon:Sean Morris:Josh Paley	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses, especially the AP CS: Principles course. SNAP! (Build Your Own Blocks) is a free, browser-based, graphical, drag-and-drop language inspired by Scratch. The beauty of the Scratch programming environment, designed for 8-14 year olds, is that it makes abstract concepts more concrete and understandable to a broader audience. SNAP! extends Scratch to support older learners (14-20) with built-in named procedures (thus recursion), procedures as data (thus higher order functions), structured lists, and sprites as first class objects with inheritance. Participants will learn SNAP! hands-on. See http://snap.berkeley.edu for details. Network connected laptop required.	Snap! (build your own blocks) (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Raja Sooriamurthi:Nickolas J.G. Falkner:Ed Meyer:Zbigniew Michalewicz	Puzzle-based learning (PBL) is a new and emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles and games. What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.	Puzzle-based learning: introducing creative thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA:NA	2014
James Cross:Dean Hendrix:David Umphress	This workshop will focus on using the new jGRASP viewer canvas which provides an exciting new dimension to dynamic program visualization. The canvas allows students and instructors to organize dynamic viewers of multiple objects and primitives to quickly form coherent program visualizations. Students can quickly build and save visualizations of their own programs, and faculty can create visualizations and provide them to students with example programs. "Playing" a program in canvas mode brings the visualization to life as objects come into scope and the canvas is updated automatically. All educators who teach Java will benefit from this workshop. It will be especially suitable for instructors who teach CS1 (introduction to programming), CS2 (introduction to data structures), and CS3 (introduction to algorithms), as well as for instructors of AP courses in high schools. jGRASP is a freely available educational IDE (http://www.jgrasp.org/); no prior experience with jGRASP is expected. Laptop required.	Dynamic program visualizations for Java (abstract only)	NA:NA:NA	2014
