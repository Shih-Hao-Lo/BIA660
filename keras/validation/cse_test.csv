Column1,Column2,Column3,Column4,Column5
Teerapong Leelanupab:Tiwipab Meephruek,"Pair-programming is an Agile technique in Extreme Programming (XP) where traditionally two programmers need to be collocated and work together at one workstation. Previous research has shown that pair-programming is very beneficial in software engineering education. However, learning and practicing pair-programming are mostly limited in a class where students can only learn to collaboratively program with another student in controlled or laboratory settings. Although nowadays there exist some collaborative tools, such as CodePilot, Google Colaboratory and Git, they are not specifically pair-programming-oriented. This impedes a pairing's ability to discuss effective strategies in problem solving, to form productive or mutually learning pairs, and to predict pair compatibility. To encourage students in out-class practice of pair-programming, we present a demonstration of a novel web-based software development environment, called CodeBuddy, for remote pair-programming. CodeBuddy provides instructors and students with several features for managing laboratory classes and practicing pair-programming. Examples of CodeBuddy's features include: coding screen mirroring between a pair, output terminal to show compiled results, face-to-face like communication channels (i.e., video calling and instant text messaging), automatic and manual role switching, code quality analysis for monitoring coding students' progress and recommending a pair with targeted pairing goals, implicit code reviews using face detection for tracking a reviewer's engagement, line-by-line code commenting, etc. The demonstration consists of a walkthrough of two use-case scenarios: an instructor assigns a problem-solving task and two students remotely work together in a pair using CodeBuddy on two different workstations to solve it.",CodeBuddy (Collaborative Software Development Environment): In- and Out-Class Practice for Remote Pair-Programming with Monitoring Coding Students' Progress,NA:NA,2018
Jessica Schmidt:Stephen Hughes,NA,Session details: ACM SRC: ACM Student Research Competition,NA:NA,2018
Kevin Lin:David DeLiema,"Educational researchers have increasingly drawn attention to how students develop computational thinking (CT) skills, including in science, math, and literacy contexts. A key component of CT is the process of abstraction, a particularly challenging concept for novice programmers, but one vital to problem solving. We propose a framework based on situated cognition that can be used to document how instructors and students communicate about abstractions during the problem solving process. We develop this framework in a multimodal interaction analysis of a 32-minute long excerpt of a middle school student working in the PixelBots JavaScript programming environment at a two-week summer programming workshop taught by undergraduate CS majors. Through a microgenetic analysis of the process of teaching and learning about abstraction in this excerpt, we document the extemporaneous prioritization of subgoals and the back-and-forth coordination of problem solving phases. In our case study, we identify that (a) problem solving phases are nested with several instances of context-switching within a single phase; (b) the introduction of new ideas and information creates bridges or opportunities to move between different problem solving phases; (c) planning to solve a problem is a non-linear process; and (d) pedagogical moves such as modeling and prompting highlight situated resources and advance problem solving. Future research should address how to help students structure subgoals and reflect on connections between problem solving phases, and how to help instructors reflect on their routes to supporting students in the problem solving process.","Subgoals, Problem Solving Phases, and Sources of Knowledge",NA:NA,2018
Vinitha Subburaj:Jacob McInite:Jordan Fite:Petterson Pham,"Online contests often have a wide skill range between each participant, making it feel overwhelming for high school students to compete in. On sites like HackerRank or TopCoder, students could be competing against professionals with years of work. The project narrows down the skill gap to a young audience so that they can compete against one another without having to compete with these professionals. In addition, this project provides the participants with the necessary environment and tools to run their programs without the hassle of having to installing necessary tools and its required files to run these programs. During the contest, participants can access a scoreboard, giving them a view of their progress against other participants. The purpose of the scoreboard is to show each participant their progress, as well as motivating them to achieve higher scores. The contest tool then grades based on time before correctness to provide fairness towards most students as the goal to solve problems early rather than optimize their program. With this, the focus is to improve their problem solving skills, pique curiosity, or serve as an impetus, to become a computer science engineering student.",Young Aspirants Developer Contest,NA:NA:NA:NA,2018
Ka Ki Fung:Thitaree Tanprasert,"Previous research has documented correlations between spatial reasoning ability and success in STEM fields [7-9]. While connection between spatial reasoning and other STEM fields like physics and calculus may seem obvious, there are no theories to explain this correlation of CS (computer science) performance and spatial reasoning. [5,7,8]. We aim to better understand this correlation, specifically between CS performance in an introductory course and spatial reasoning by observing the common characteristics between students' strategies in solving CS and spatial reasoning problems. We conducted interviews with eight students who have prior experience in CS but have taken only two introductory CS courses. In the interview, we asked the participants to solve a total of four problems; two CS problems and two spatial reasoning problems. [1,6]. The CS problems were code-reading problems in Python, which focus on basic programming concepts, including nested loops and functions. We analyzed the participants' problem-solving strategies and recorded their explanation for each problem. We observed for both types of problem, participants appeared to first observe the problem for its fundamental structures then decomposes the problem into smaller sub-problems. We conjecture that problem decomposition may be a required skill to solve both CS and spatial reasoning problems, and thus, could be a possible factor that contributes to the correlation between the two fields. Further study into utilization of problem decomposition in CS and spatial reasoning may provide more insights into the correlation between success in CS and spatial reasoning ability.",Problem Decomposition in Introductory Computer Science and Spatial Reasoning,NA:NA,2018
Sarah Almeda,"Communities that use visual languages like American Sign Language (ASL) to communicate are underrepresented in the domain of translation and language learning tools. Translating between a visual, gestural language like ASL and a spoken, written language like English presents multiple unique challenges. The visual elements of hand shape, location, orientation, and motion used in ASL can be challenging to detect, interpret, and represent. We present an algorithm to recognize the 24 static signs in the ASL fingerspelling alphabet using the Leap Motion Controller. This algorithm can be used in ASL teaching applications, as well as to translate finger-spelled words. Existing Sign Language Recognition systems use cameras to extract low resolution images of hands where positions of individual fingers are difficult to detect. Our program utilizes the Leap Motion device, a motion sensor that provides skeletal hand tracking functionality. Based on joint coordinate and orientation information provided by the device, we extract a number of features including finger configuration (extended, bent, or curled), distance between fingers, and palm orientation. We then use a decision tree to classify signs as individual letters. This method does not require large amounts of training data like other machine learning based approaches. Preliminary results indicate that our method is successful in recognizing most of the static signs in the ASL fingerspelling alphabet.",Accessible American Sign Language Recognition with the Leap Motion Controller,NA,2018
Elizabeth Koning:Joel C. Adams:Christiaan D. Hazlett,"Classic synchronization problems are often used to introduce students to the subtleties of concurrency and synchronization mechanisms, such as semaphores, monitors, locks, and condition variables. The Dining Philosophers, Producers-Consumers, and Readers-Writers are all classic problems in which a correct solution requires the actions of multiple processes or threads to be synchronized. In this work, we present visualizations for these three problems and demonstrate their use in helping students build accurate mental models of concurrency abstractions. We also present the results of an experiment that indicate students find using these visualizations to be significantly more engaging than reading a textbook, with no significant difference in learning.",Visualizing Classic Synchronization Problems,NA:NA:NA,2018
Jackie Chan:Kirby Mitchell,"Research around computer networks has been rapidly expanding as the Internet becomes more prevalent in day-to-day life. Despite this rapid expansion in academic interest, computer networks, especially home networks, remain a challenge for inexperienced users to configure and maintain. To remedy this, new data needs to be collected to understand this new audience as computer networks move from academic/institutional to residential settings. This study examines the terminology that homeowners prefer when discussing bandwidth and connectivity issues on their home networks. We generated a list of common terms from web forums and user interviews and had participants classify these terms using an open card sort to determine their effectiveness. Our initial results indicate that participants were more likely to misclassify bandwidth-related and technical terms. This study demonstrates the importance of designing home networks to better meet the needs and diverse expertise levels of users.",Understanding the Usage and Familiarity of Home Network Terminology Using Open Card Sorting Analysis,NA:NA,2018
Shannon Collier:Mara Downing,"Conditional logic and control structures are typically considered an important part of introductory computer science education, yet novices often struggle to correctly write and navigate such program logic. Previous research has largely attended to student difficulties with parsing Boolean expressions, but has not had much focus on the control structures themselves. To investigate how students work through complicated logic, we conducted a qualitative analysis of four one-on-one interviews with undergraduate students in which we gave students a piece of code with a complicated conditional control structure and asked them to write test cases for all paths. We found that several students struggled to determine the output the function would provide for a given input, and we hypothesize this occurred because they incorrectly treated an if statement as an else-if statement. One student simply wrote an incorrect output, which we believe occurred because they made this particular mistake, while another student got partway through the problem before verbally seeming to correct themself and re-identify a statement as an else-if. Based on our results, we hypothesize that novices may sometimes misidentify a sequential if statement as an else-if, which may lead them to incorrectly interpret a conditional control structure.",A Qualitative Analysis of Students' Understanding of Conditional Control Structures,NA:NA,2018
Ovidiu-Gabriel Baciu-Ureche:Carlie Sleeman:Karlee Scott:William Moody:Suzanne J. Matthews,"Cyber security and on-line safety practices are not commonly taught in schools. However, there is an increasing need for education in these topics as children are joining the Internet community at a much earlier age than previous generations. It is crucial that young people understand the risks they may face on-line and how to mitigate them, ideally as soon as they begin using the Internet unsupervised. The Adventures of ScriptKitty (AOSK) introduces students to basic cyber security concepts using the Raspberry Pi, a single board computer that retails for $35.00. We created AOSK to help facilitate a culture of good cyber security practices and raise interest in STEM. The material is presented in the form of comics paired with instructional sections, including sections of more detailed technical information for readers who wish to learn more about key concepts. We piloted a portion of AOSK to a group of local middle school students. Our time with the students was limited, so we administered a short quiz, then discussed the Raspberry Pi. Next, students completed the packet sniffing exercise from Chapter 2, with the authors available to answer questions and help troubleshoot. Students were asked to re-take the quiz afterward. Our preliminary results show that students achieved a greater understanding of the material, with improved scores of 14%. A custom Pi image preloaded with Kali Linux and all needed software is included with the material. All the materials are published and available for free through GitBook at: https://suzannejmatthews.gitbooks.io/aosk/content",The Adventures of ScriptKitty: Teaching Middle School Students Cyber Awareness with Comics on the Raspberry Pi,NA:NA:NA:NA:NA,2018
Darren Jefferson:Tina Boyle Whyte,"The number of students enrolling into CS(Computer Science) is currently recovering from a period of declining numbers. Although the number of students enrolling in CS isn't declining anymore, there is still a lot of ground to be covered as far as student enrollment in CS goes. This is because the number of computer science jobs, on the other hand, is and has been steadily rising. The disconnect between students enrolling in CS and the increase of Jobs for CS leaves a deficiency for in the CS work field for qualified workers. We wish to look for ways to increase K-12 student interest in CS related fields in an attempt to increase the number of students pursuing CS. This first starts with the teachers teaching the class. To address these issues, we investigated the implementation of teachers who had been through Computer Science professional developments in the K12 school environment. Using the data, gathered from a qualitative study approach, we present results found from interviews conducted on K12 teachers from all across Wisconsin to demonstrate the impact of professional development on teacher's ability to teach.",A Qualitative Study of Wisconsin Computer Science in K-12,NA:NA,2018
Adam Koehler,"Research has shown that self-efficacy, a student's confidence in his or her ability, contributes to student success. Here, we examine if teaching students to recognize common programming errors increases student self-efficacy in an introductory programming course. We provided students with exercises containing examples of typical novice programming errors and methods for fixing them. At the beginning of the course we assess self-efficacy and administer a test to measure programming competence. We repeat these measurements at the end of the course. To assess self-efficacy, students rate their confidence in completing various programming tasks on a scale of 0 to 100. The test has fourteen questions; thirteen are short answer and one is multiple choice. Short answer questions require the student to write at most a few lines of C++ code, with most requiring only a single line. We analyze student self-efficacy in relation to our pre- and post-test, student course grade, assignment grade, and final exam grade. Our analysis shows improvements between the experimental term compared to the control terms across eleven measures of self-efficacy, but only three of these improvements are significant (p < 0.05).",Improving Student Self-efficacy in CS 1 Using Examples of Erroneous Code,NA,2018
Jared O'Leary,"This study examined 245,098 discussion forum posts within a website dedicated to chiptunes, which are electronic music compositions or performances either emulating the sounds of or created through early computer and video game sound chips. Corpus-assisted discourse analysis tools and techniques assisted with revealing patterns of discourse across 10,892,645 words written between December 30th, 2009 and November 13th, 2017 within chipmusic.org. Findings indicate seven interconnected themes of chiptune-related practices that demonstrate potential transdisciplinary connections between computer science education and music education: (a) music composition practices, (b) music performance practices, (c) maker practices, (d) coding practices, (e) entrepreneurial practices, (f), visual art practices, and (g) community practices. Members of chipmusic.org engaged in computer science practices such as designing, manufacturing, and modifying electronic hardware for performing and recording chiptunes, as well as coding practices such as creating or modifying software for chiptune-related purposes. Such practices were guided by an interest in making music through old computer and video game hardware, and demonstrate several potential connections between computer science education and music education. For example, members engaged in computer science practices such as hardware and software modification to enable the ability to compose and perform music through the Nintendo Game Boy. Findings from this study not only demonstrate potential connections between computer science education and music education, they also raise questions about spaces and curricula with blurred disciplinary boundaries. For example, where might chiptune-related practices that blur concepts and practices from a multitude of disciplines and standards occur within a formalized education environment?",A Corpus-assisted Discourse Analysis of Chiptune-related Practices Discussed within Chipmusic.org,NA,2018
Valdemar Švábenský,"Capture the Flag games are software applications designed to exercise cybersecurity concepts, practice using security tools, and understand cyber attacks and defense. We develop and employ these games at our university for training purposes, unlike in the traditional competitive setting. During the gameplay, it is possible to collect data about players' in-game actions, such as typed commands or solution attempts, including the timing of these actions. Although such data was previously employed in computer security research, to the best of our knowledge, there were few attempts to use this data primarily to improve education. In particular, we see an open and challenging research problem in creating an artificial intelligence assistant that would facilitate the learning of each player. Our goal is to propose, apply, and experimentally evaluate data analysis and machine learning techniques to derive information about the players' interactions from the in-game data. We want to use this information to automatically provide each player with a personalized formative assessment. Such assessment will help the players identify their mastered concepts and areas for improvement, along with suggestions and actionable steps to take. Furthermore, we want to identify high- or low-performing players during the game, and subsequently, offer them game tasks more suitable to their skill level. These interventions would supplement or even replace feedback from instructors, which would significantly increase the learning impact of the games, enable more students to learn cybersecurity skills at an individual pace, and lower the costs.",Analyzing User Interactions with Cybersecurity Games,NA,2018
Noha Elsherbiny,"Course alignment refers to the degree to which curriculum, assessments and instruction methods are in agreement with each other. Course alignment can be used by instructors to evaluate the effectiveness of their instructional content and assessments and whether they are meeting their learning objectives. Applying alignment models is time consuming and laborious, making them difficult for a course instructor to use. Current alignment models require a panel of experts to review documents and make judgments about the degree of alignment of the course objectives and assessments. With that in mind, we devised a practical strategy to be used by a course instructor, as part of course design, to assess the alignment between the course content, learning objectives and assessment methods. We developed a process for evaluating the degree of alignment of a course based on attributes from Webb's alignment model and we developed data structures based on Porter's matrix to facilitate the assessment of the alignment. The devised strategy will be applied to various CS courses by instructors and the results of the process will be used to refine the alignment strategy. An alignment process that can be applied timely and simple to follow may encourage instructors to apply it to their course, becoming a common practice for any instructor when modifying their course.",Applying Alignment to Improve the Effectiveness of CS Education,NA,2018
Zhiyi Li,"Automatic grading systems such as Web-CAT are widely used when students learn programming, especially in CS1/CS2 courses in colleges and universities. Current feedback mechanism in these systems benefits students with performance-based information. They have negative effects to often frustrate students especially novice programmers to belief of fixed mindset - their programming abilities are native and limited. Students with fixed mindset can seriously influence female and minority enrollment and retention rate in CS major. It is important to move students to growth mindset instead - belief their programming skills can be improved by practice and hard work. Recently effort were made to improve feedback mechanism in automatic grading systems. One effort was the design and implementation of a group of indicators to reflect students' progress and effort, based on their programming submissions. Another effort was the design of virutalTA Maria to deliver positive comments to encourage and reinforce students. We demonstrate the design of boosters (rewards) component and positive encourage and reinforcement comments feedback by virtualTA, based on indicators information. We simulated boosters (rewards) and comments component with a historical programming dataset to validate boosters (rewards) strategy. Simulated results found only 32 percent students did not get any Booster (rewards). 68 percent students won four types of booster range from Tier 1 to Tier 4. This result is what we are as expected. We also designed positive encouraging and reinforcement comments feedback from VirtualTA in adaptive style, based on indicator information. We plan to apply these two designed components to classroom for evaluation.","Reinforcement Learning: Improve Feedback Mechanism with Indicator based Reward, VirtualTA towards Growth Mindset",NA,2018
Olivia Nche,"This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715",Engaging African American Elementary School Children in Code Understanding,NA,2018
Scott Kolodziej,"Source code documentation is an important part of teaching students how to be effective programmers. But what evidence do we have to support what good documentation looks like? This study utilizes a randomized controlled trial to experimentally compare several different types of documentation, including traditional comments, self-documenting naming, and an automatic documentation generator. The results of this experiment show that the relationship between documentation and source code understanding is more complex than simply ""more is better,"" and poorly documented code may even lead to a more correct understanding of the source code.",Empirical Assessment of Software Documentation Strategies: A Randomized Controlled Trial,NA,2018
Sreecharan Sankaranarayanan,"This work presents a new paradigm for collaborative project-based computer science education called Online Mob Programming (OMP). OMP is adapted from the industrial practice of Mob Programming, where groups of developers work on the same problem, at the same time, in the same place. OMP was designed and implemented as a technique where a group of 4-6 students collaborate online through a structured process for solving programming tasks. In OMP, students rotate through clearly defined roles to collectively contribute towards a solution to a programming challenge. These roles require students to brainstorm potential solutions, decide on a path forward, and implement the correct course of action respectively. OMP was investigated in the context of a 6-week free online course on Cloud Computing. During the course, students participated in four intelligent conversational agent-coordinated OMP sessions. By instrumenting the online development environment, all student code revisions and chat logs were collected in addition to qualitative data from questionnaires. Analyses show evidence of success in terms of students following the structure of OMP and further investigations into differences in mob behavior based on the size, and problem outcome provide pedagogically valuable insights and a path toward building OMP into the computer science education curriculum.",Online Mob Programming: Effective Collaborative Project-Based Learning,NA,2018
Amanpreet Kapoor,"Internships play a crucial role in helping CS undergraduate students to commit to CS degrees and computing careers. Internships also promote students' personal and professional growth. Studies have also shown that pursuing an internship is positively correlated with an improved chance of getting a full-time job offer and a higher starting salary. However, previous research has shown that only 52.1% of undergraduate students pursue an internship before they graduate. In this poster, we present findings from a cross-sectional study focused on understanding the characteristics of CS undergraduate students who have interned at one or more companies and those who have not interned. We surveyed 97 and interviewed 14 CS undergraduates. We found that 41.2% of 97 students participated in one or more internships. The key characteristics that distinguish students who successfully interned and those who did not were: 1) 95% students who interned had career goals - either to join industry or pursue graduate school after they graduate. In contrast, 21% of the students who did not intern were unsure or confused about their career goals; 2) students who interned were more likely to have participated in an undergraduate research experience or a student organization; 3) students who interned intentionally prepared for interviews, while those who did not intern were not actively preparing, not confident enough to apply, or were unsuccessful in the interview process because of lack of preparation. This poster provides insight into CS students' competitiveness for securing internships and for developing programs to support professional development.",Deconstructing Successful and Unsuccessful Computer Science Undergraduate Interns,NA,2018
