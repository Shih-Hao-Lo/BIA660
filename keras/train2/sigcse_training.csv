Column1,Column2,Column3,Column4,Column5
John Sweller,"Cognitive load theory uses our knowledge of human cognitive architecture to devise instructional procedures, most of which are directly relevant to computer science education. There are several basic aspects of human cognition that are critical to instructional design. First, based on evolutionary educational psychology, cognitive load theory assumes that most topics taught in educational and training institutions are ones that we have not specifically evolved to learn. Such topics require biologically secondary knowledge rather than the biologically primary knowledge that we have evolved to acquire. Second, these instructionally relevant topics require learners to acquire domain-specific rather than generic cognitive skills. Third, while generic cognitive knowledge does not require explicit instruction because we have evolved to acquire it, domain-specific concepts and skills that provide the content of educational syllabi, do require explicit instruction. These three factors interact with the well-known capacity and duration constraints of working memory and the unlimited capacity and duration characteristics of long-term memory to delineate a cognitive architecture relevant to instructional design. The working memory limits do not apply to biologically primary, generic knowledge acquired without explicit instruction but do apply to the biologically secondary, domain-specific knowledge that requires explicit instruction and that is relevant to computer science education. Human cognition when dealing with such knowledge constitutes a natural information processing system that has evolved to mimic the architecture of biological evolution. Cognitive load theory uses this architecture to generate a large range of instructional effects concerned with procedures for reducing extraneous working memory load in order to facilitate the acquisition of knowledge in long-term memory. This talk reviews the theory and indicates the instructional implications relevant to computer education.",Cognitive Load Theory and Computer Science Education,NA,2016
Barbara Boucher Owens,"Service is the rent we pay for the space we take up on earth, my dad's mantra, and one used by many. Participating in professional organizations such as SIGCSE and its parent organization, ACM, has been for me an incredibly rewarding obligation. Many have given of their time and talents to help me on my way. Some of those who have followed in my footsteps have also forged paths of service making mine pale in comparison. This computer science education community affords incredibly rich opportunities for service in venues ranging from local to international. Service in SIGCSE and similar communities can reap untold benefits for both the volunteer and the community served.",Service as Rent,NA,2016
Jan Cuny,"Computer Science (CS) education has caught a wave -- of media attention, public support, public/private commitments, broad-based participation by educators, and a surge in student enrollments at the undergraduate level. It is a startling change over just the last 5 years. Over that 5 years, much has been accomplished at the high school level. The Exploring Computer Science and Advanced Placement® CS Principles courses were created to engage and inspire a diverse mix of students. Hundreds of teachers and university faculty have collaborated to develop course materials, assessments, MOOCS, and models of teacher professional development. Over 2,000 high schools now offer new CS courses, but that leaves out more than 34,000. Even then, students will need more than a single course, they will need a K-16 CS pathway. At the K-8 level, CS does not have the decades of research on the teaching and learning that is available to many other, more established disciplines. A stronger evidence base is needed as the basis for pedagogy, curricula, standards, and teacher preparation. The CS community must put greater emphasis on research in CS education and broadening participation, and it must build stronger collaborations with researchers in related disciplines. Over the last 5 years, college-level CS departments have been inundated with students. This growth is fueled by a strong job market for CS majors and an increasing awareness that computation is fundamental to many other industry sectors and academic disciplines. How will departments cope with increasing numbers without sacrificing access or quality? How will they respond to increasing diversity of ethnicity and gender, but also of interests, and career goals of their students? For those interested in CS education, it's an exciting time, but it comes with some urgency. This talk will discuss how to catch the current wave, using it to full advantage.",CS Education: Catching the Wave,NA,2016
Karen Lee Ashcraft,"Occupations, like individuals, take on social identities such as gender and race. The social identity of an occupation has profound effects, for example, on wages and prestige, degree of professionalization, and ability to recruit and retain diverse populations. Sifting the historical evidence on technical work, Dr. Ashcraft develops a new concept---the ""glass slipper""---which explains how durable associations between occupations and people arise and how they circulate among us like powerful brands. Despite appearances, this process is neither natural nor determined. It is political, however, revealing a reality more daunting than recent advice to ""lean in"" suggests. But if the social identities of occupations are strategically constructed, they also can be challenged through creative re-branding.","Lean In to the Evidence: Breaking the ""Glass Slipper"" of Technical Professions",NA,2016
Tiffany Barnes,NA,Session details: Demonstration Session,NA,2016
Clifford A. Shaffer,"The open-source OpenDSA eTextbook system is seeing rapidly growing use around the world. It combines textbook-quality tutorial material with many algorithm visualizations (AVs), simulations, and a large collection of interactive exercises, including small programming exercises. Its materials are re-configurable for specific classes. Being implemented in HTML5, it requires only a web browser to be accessible to students. Available content now includes comprehensive coverage for Data Structures and Algorithms courses, and rapidly growing content for Programming Languages, Translators, and Formal Languages courses. This session will provide a demonstration of the most innovative features of OpenDSA as they might be used by students and instructors in a range of Computer Science courses.",OpenDSA: An Interactive eTextbook for Computer Science Courses,NA,2016
Daniel M. Olivares:Christopher D. Hundhausen,"In order best to support learning analytics in computing education, learning management systems (LMS) should be interfaced with computer programming environments, in which computing students spend much of their time. To this end, we have developed OSBLE+, an outgrowth of the OSBLE (Online Studio- Based Learning Environment) LMS we have been developing over the past eight years. OSBLE+ supports two innovations that make it particularly well-suited to supporting learning analytics in computing education. First, it connects to the Microsoft Visual Studio computer programming environment via a plugin that gives it access to all programming process data within Visual Studio, including edits, compilation attempts, compilation errors, debugging attempts, and run-time exceptions. This enables OSBLE+ to provide students and instructors with a visual analytics environment in which they can explore, compare, and contrast the programming activities of students in the class. Second, the plugin turns Visual Studio into a social programming environment by injecting into it a social media-style activity stream, which enables students (a) to pose and answer programming questions, and (b) to see and explore the programming activities of their peers. Students' social activities within the activity stream are sent to OSBLE+, and are subsequently included as data in the visual analytics environment. OSBLE+ is open source and freely hosted at http://plus.osble.org. While OSBLE+ presently interfaces only with Visual Studio, a plug-in for the Eclipse programming environment is under active development.",OSBLE+: A Next-Generation Learning Management and Analytics Environment for Computing Education,NA:NA,2016
Albert Chan,NA,Session details: Paper Session: Data Structures,NA,2016
Scott Grissom:Laurie Murphy:Renée McCauley:Sue Fitzgerald,"This paper reports on a study of goal-plans and errors produced by students who wrote recursive solutions for a binary tree operation. This work extends a previous study of difficulties CS2 students experienced while writing solutions on paper-based exams. In this study, participants solved the same recursive binary tree problem as part of a hands-on computer-based exam where students had access to an IDE and Java API documentation. Not surprisingly, students who took the computer-based exams were more successful than those who took the paper-based exams (58% vs. 17% correct solutions). However, even with the advantage of access to an IDE, documentation, and test cases, 42% of students taking the computer-based exam still made errors, indicating that students exhibit persistent errors even with support. The most common errors observed included incorrect calculations, missing method calls and missing and incorrect base cases.",Paper vs. Computer-based Exams: A Study of Errors in Recursive Binary Tree Algorithms,NA:NA:NA:NA,2016
Holger Danielsiek:Jan Vahrenhold,"This paper reports on first steps towards identifying factors indicating students' performance in a CS2 course. We discuss a study undertaken to investigate the predictive and explanation power as well as the limits of weekly test items based on concept inventory questions, homework grades, and performance in a preceding CS1 course. We relate our findings for two subgroups to results on academic success in general and performance in a CS1 course in particular.",Stay on These Roads: Potential Factors Indicating Students' Performance in a CS2 Course,NA:NA,2016
David Burlinson:Mihai Mehedint:Chris Grafer:Kalpathi Subramanian:Jamie Payton:Paula Goolkasian:Michael Youngblood:Robert Kosara,"Although undergraduate enrollment in Computer Science has remained strong and seen substantial increases in the past decade, retention of majors remains a significant concern, particularly for students at the freshman and sophomore level that are tackling foundational courses on algorithms and data structures. In this work, we present BRIDGES, a software infrastructure designed to enable the creation of more engaging assignments in introductory data structures courses by providing students with a simplified API that allows them to populate their own data structure implementations with live, real-world, and interesting data sets, such as those from popular social networks (e.g., Twitter, Facebook). BRIDGES also provides the ability for students to create and explore {\em visualizations} of the execution of the data structures that they construct in their course assignments, which can promote better understanding of the data structure and its underlying algorithms; these visualizations can be easily shared via a weblink with peers, family, and instructional staff. In this paper, we present the BRIDGES system, its design, architecture and its use in our data structures course over two semesters.",BRIDGES: A System to Enable Creation of Engaging Data Structures Assignments with Real-World Data and Visualizations,NA:NA:NA:NA:NA:NA:NA:NA,2016
Monisha Pulimood,NA,Session details: Paper Session: Computational Thinking,NA,2016
Adam Eck:Leen-Kiat Soh:Duane F. Shell,"Introductory computer science courses are being increasingly taught using technology-mediated instruction and e-learning environments. The software and technology in such courses could benefit from the use of student models to inform and guide customized support tailored to the needs of individual students. In this paper, we investigate how student motivated engagement profiles developed in educational research can be used as such models to predict student behaviors. These models are advantageous over those learned directly from observing individual students, as they rely on different data that can be available a priori before students use the technology. Using tracked behaviors of 249 students from 7 CS1 courses over the span of 3 semesters, we discover that students with different engagement profiles indeed behave differently in an online, wiki-based CSCL system while performing collaborative creative thinking exercises, and the differences between students are primarily as expected based on the differences in the profiles. Thus, such profiles could be useful as student models for providing customized support in e-learning environments in CS1 courses.",Investigating Differences in Wiki-based Collaborative Activities between Student Engagement Profiles in CS1,NA:NA:NA,2016
Dave Mason:Irfan Khan:Vadim Farafontov,"Computers and computational thinking are becoming ubiquitous in our world. They are part of the transportation systems we use, the security systems we confront, our entertainment systems, our communication systems, our financial systems, and even our social and political instruments. Computational thinking is a fundamental part of decision-making on a large and increasing number of fronts. It is sometimes hard for a computer scientist to imagine how people without access to those tools can navigate the world in an informed way. We have designed a course to bring the social, historical, cultural and technical context of these systems to the attention of students and citizens who would not otherwise have access to them, so they can better understand the world in which they will live and work. The course is a Computer Science course because it is talking about the science of computers, albeit in an approachable form for an audience without any assumed previous programming experience. The course ran in Winter 2014 and Winter 2015 meeting most of its goals, including engaging the non-traditional student who took it.",Computational Thinking as a Liberal Study,NA:NA:NA,2016
Sarah Monisha Pulimood:Kim Pearson:Diane C. Bates,"This paper reports on a multi-semester study of the impact on student perceptions of their computational thinking abilities as a result of collaboration between students in computer science (CS) and journalism courses to solve a problem for a community partner, Habitat for Humanity. Interdisciplinary computing collaborations have become a popular mode of instruction in upper-level CS courses. In many cases, these collaborations have been with other STEM disciplines. However, there are non-STEM fields that have been transformed by computer science and can also serve as fruitful test beds for curricular innovation; journalism is one such field. In this study, undergraduate students in CS and journalism courses focused on creating a computational solution to address a real community need. The study investigates whether immersion in multidisciplinary collaborative experiences increases the computational thinking abilities of both CS and non-CS students. 41 CS students participated in the study alongside 96 students in a range of other STEM and non-STEM majors. Quantitative data were collected to gauge students' attainment of concepts and skills constitutive to computational thinking. Pre-test data indicate that CS students were no different from other STEM students in their own assessment of computational thinking and skills. Post-test data indicate that while all students made significant gains in self-assessment of skills and knowledge, CS majors fared significantly better than their peers. It is particularly noteworthy that CS majors' gains outpaced those of computer engineering majors. Further research is planned to gain additional insight into the possible reasons behind these results.",A Study on the Impact of Multidisciplinary Collaboration on Computational Thinking,NA:NA:NA,2016
Bo Brinkman,NA,Session details: Paper Session: Research on Learning,NA,2016
Cindy Norris,"This paper investigates the impact of layers of quizzing on student performance on subsequent tests and the final exam. The first layer of quizzes are on-line ""pre-quizzes"" designed to prepare students for follow-on classroom discussions. The second layer quizzes are short ""post-quizzes"" that are given during class time after discussing questions about the material covered by pre-quizzes. A study involving fifteen semesters of data and 348 students indicated that students performed better on tests and the final exam with this quizzing strategy compared to a more traditional homework based approach. These results agree with the body of research that indicates that testing enhances learning. Significantly, we found an 8 point pass rate increase on the Computer Systems I final exam and a 10 point pass rate increase on the Systems II final.",An Examination of Layers of Quizzing in Two Computer Systems Courses,NA,2016
Briana B. Morrison:Lauren E. Margulieux:Barbara Ericson:Mark Guzdial,"We report on a study that used subgoal labels to teach students how to write while loops with a Parsons problem learning assessment. Subgoal labels were used to aid learning of programming while not overloading students' cognitive abilities. We wanted to compare giving learners subgoal labels versus asking learners to generate subgoal labels. As an assessment for learning we asked students to solve a Parsons problem -- to place code segments in the correct order. We found that students who were given subgoal labels performed statistically better than the groups that did not receive subgoal labels or were asked to generate subgoal labels. We conclude that a low cognitive load assessment, Parsons problems, can be more sensitive to student learning gains than traditional code generation problems.",Subgoals Help Students Solve Parsons Problems,NA:NA:NA:NA,2016
Mehran Sahami:Chris Piech,"In recent years, enrollments in undergraduate computer science programs have seen tremendous growth nationally. Often accompanying such growth is a concern from faculty that the additional students choosing to pursue computing may not have the same aptitude for the subject as was seen in prior student populations. Thus such students may exhibit weaker performance in computing courses. To help address this question, we present a statistical analysis using mixture modeling of students' performance in an introductory programming class at Stanford University over an eight year period, during which enrollments in the course more than doubled. Importantly, in this setting many variables that would normally confound such a study are directly controlled for. We find that the distribution of student performance during this period, as reflected in their programming assignment scores, remains remarkably stable despite the large growth in enrollment. We then explain how the notion of having ""more weak students"" and the fact that the distribution of student ability is unchanged can readily co-exist and lead to misperceptions about the quality of incoming students during an enrollment boom.","As CS Enrollments Grow, Are We Attracting Weaker Students?",NA:NA,2016
Andy Grover,NA,Session details: Paper Session: Professional Development,NA,2016
Chrystalla Mouza:Lori Pollock:Kathleen Pusecker:Kevin Guidry:Ching-Yi Yeh:James Atlas:Terry Harvey,"One of the greatest challenges in broadening participation in computer science is teacher preparation, as few middle and high school teachers have a formal background in computing. Further, without a credentialing program, there are limited ways to learn content and pedagogical strategies for effective computer science instruction. As a result, professional development is key to successful reform in the teaching of computer science. In this paper, we describe our three-pronged approach to the design of a professional development model for middle and high school teachers interested in implementing the Computer Science Principles (CSP) curriculum in their classrooms or infusing CSP modules into STEM curricula. We describe our model focusing on content, pedagogical strategies and follow-up classroom support during the academic year. We subsequently report on participating teacher outcomes, in terms of self-rated understandings, attitudes and implementation practices. We share lessons learned and offer recommendations for professional development designers.",Implementation and Outcomes of a Three-Pronged Approach to Professional Development for CS Principles,NA:NA:NA:NA:NA:NA:NA,2016
Helen H. Hu:Cecily Heiner:Jay McCarthy,"Exploring Computer Science (ECS) is a high school introductory computer science class designed to increase student interest in CS. Utah is the first state to offer ECS statewide and use it to meet a high school graduation requirement. Over the past four years, 150 teachers have been trained as Utah ECS teachers and over 10,000 Utah students have taken the class. The Utah initiative is unique because it is the first to deploy ECS in a non-urban environment and with a modified half-year curriculum that includes no additional equipment costs. This paper discusses how the Utah deployment was organized, reports its results and unique difficulties, and offers lessons for deployments with similar characteristics: statewide, rural, and limited resources.",Deploying Exploring Computer Science Statewide,NA:NA:NA,2016
Nathaniel Granor:Leigh Ann DeLyser:Kevin Wang,"Rising demand for high school computer science courses in the United States has created pressure to increase the number of computer science(CS) teachers in a short amount of time[3]. In this experience report, we present the TEALS program as a unique, high-touch, professional development model, pairing computing industry professionals with classroom teachers. By combining the relative strengths of the team (content and pedagogy) TEALS has been able to successfully train new CS teachers. We present the history of the TEALS program, the volunteer and teacher recruitment process, the volunteer training program, data from a study of the pedagogical content knowledge of the TEALS volunteers, and program growth and efficacy data. Additionally, we offer achievement of students on the AP CS A exam as an externally valid measurement of learning outcomes in TEALS classrooms.",TEALS: Teacher Professional Development Using Industry Volunteers,NA:NA:NA,2016
Christine A. Shannon:James Kiper:Samuel A. Rebelsky:Janet Davis,NA,Engaging CS Alumni from Afar,NA:NA:NA:NA,2016
Daniel D. Garcia:Josh Caldwell:Pamela Fox:Jeremy Keeshin,"In his keynote at SIGCSE 2007, Grady Booch exhorted us to share the ""passion, beauty, joy and awe"" (PBJA) of computing. This led to a series of room-packed sessions at the following seven SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: What we've done / seen: Highlighting successful PBJA initiatives they have done or have seen and wish to trumpet. What we should do (curriculum): Pointing out, as Grady Booch did, where our curriculum is lacking in PBJA, and how to fix it. How we should do it (pedagogy): Sharing how a change in attitude / focus / behavior / etc. can make strides to improving PBJA. While the initial PBJA sessions evolved from a need to understand and combat the enrollment crisis of nine years ago, we are now seeing an explosion of interest in our field. There are colleges where the numbers have vast exceeded historic highs, with computer science enrollments up 22% in 2014. This PBJA ""movement"" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques to make computing fun for beginners. This year we have gathered three educators who represent online, self-paced curriculum, platforms and community that together have reached millions of people. How does the online experience support or prevent PBJA in ways traditional classrooms don't? What innovative ideas did they employ to support collaboration, and how do they manage the ""bad elements"" of their user base? What is the right balance between easy-to-autograde, follow-me curriculum and wide-open, ""be creative"" experiences for the first-time user? Which works best, blocks-based or text-based programming? How can the ""big data"" from the mistakes of others be leveraged to give each user a personalized experience? The hope with this panel is to explore best practices of self-paced online offerings in these crucial early years, for participants of any age, in terms of extolling the PBJA of computing.","Rediscovering the Passion, Beauty, Joy, and Awe: Making Computing Fun Again, part 8",NA:NA:NA:NA,2016
Joel C. Adams:Jacob Caswell:Suzanne J. Matthews:Charles Peck:Elizabeth Shoop:David Toth:James Wolfer,"Just as a micro-computer is a personal, portable computer, a micro-cluster is a personal, portable, Beowulf cluster. In this special session, six cluster designers will bring and demonstrate micro-clusters they have built using inexpensive single-board computers (SBCs). The educators will describe how they have used their clusters to provide their students with hands-on experience using the shared-memory, distributed-memory, and heterogeneous computing paradigms, and thus achieve the parallel and distributed computing (PDC) objectives of CS 2013 [1].",The Micro-Cluster Showcase: 7 Inexpensive Beowulf Clusters for Teaching PDC,NA:NA:NA:NA:NA:NA:NA,2016
Amber Settle,NA,Session details: Paper Session: Pair Programming,NA,2016
Mohammed Seyam:D. Scott McCrickard,"Pair Programming has demonstrated benefits for education, but unique concerns of mobile software design raise questions about the effectiveness of Pair Programming in this evolving field. This paper probes unique challenges for Pair Programming when used in mobile software design classes, focusing on five mobile design topics: dealing with interface and data management, using camera, handling multi-device connectivity, using sensors and collecting GPS data, and using microphones and speakers. The paper highlights successes and challenges for Pair Programming and mobile applications, concluding with recommendations on building assignments, managing student interaction, and implementing Pair Programming for instructors considering using it in their mobile development classes.",Teaching Mobile Development with Pair Programming,NA:NA,2016
Omar Ruvalcaba:Linda Werner:Jill Denner,Sixty-nine pairs of Latino and white middle school students were video recorded as they pair programmed for approximately 20 minutes. We quantitatively analyzed the partners' interactions specifically looking at characteristics of their collaboration. A qualitative analysis of interactions of three girl pairs was conducted to gain insight into how students' experience in diverse cultural communities may relate to their collaboration during pair programming.,Observations of Pair Programming: Variations in Collaboration Across Demographic Groups,NA:NA:NA,2016
Ian McChesney,"In the software engineering industry the technique of pair programming can be used as a means of enhancing programmer productivity and the quality of the software development process. Pair programming has also been used in computer science education as a mechanism to address some of the educational challenges faced by students learning to program. An action research study is described in which pair programming is used as part of the learning and assessment regime in introductory programming. Module data has been used over a three year cycle to evaluate the impact of pair programming on student performance and confidence in programming, and to gain insights into its practical application. Within-subject analysis confirms previously reported observations of overall improved student performance. Qualitative analysis identifies areas for refinement in the practical application of pair programming for learning and assessment, particularly in relation to pairwise communication, establishing protocols for conflict resolution and development of professional competencies.",Three Years of Student Pair Programming: Action Research Insights and Outcomes,NA,2016
Meghan Allen,NA,Session details: Paper Session: Engagement and Diversity,NA,2016
Sarnath Ramnath:John H. Hoover,"A framework for developing computing courses is presented, that has the potential to increase student engagement by enhancing student perception of relevance. The framework employs established andragogical approaches, course design methodologies, and measurement tools. A preliminary report on the application of this framework is presented. The results are encouraging, and the framework can be easily adapted to a variety of environments.",Enhancing Engagement by Blending Rigor and Relevance,NA:NA,2016
Burçin Tamer:Jane G. Stout,"College and university professors serve as role models and leaders. Unfortunately, in computing fields, only a small fraction of the professorate is women and/or members of minority racial groups. To address this issue, the current research assessed the role of research experiences for undergraduate students (REUs) on underrepresented students' interest in pursuing a career as a computing professor. We found that REUs utilizing a set of specific practices are linked with underrepresented students' interest in becoming a computing professor. On the other hand, no specific REU practice was associated with majority students' (i.e., White and Asian men's) level of interest in becoming a professor. Thus, this research not only identifies aspects of REUs that may be especially important for increasing diversity in the professorate but also highlights that REUs may serve different purposes for underrepresented versus majority students.",Understanding How Research Experiences for Undergraduate Students May Foster Diversity in the Professorate,NA:NA,2016
Bo Brinkman:Amanda Diekman,"The lack of diversity in the tech industry is a widely remarked phenomenon. The majority of workers in tech roles are either white or Asian men, with all other groups being under-represented. Some authors point to cultural factors influencing self-efficacy, leading to a lack of diversity at the start of the ""pipeline"" of IT talent. Others point to toxic workplace culture that can lead skilled tech workers to drop out of the industry. While these effects are very real and important, this paper focuses on a third concept contributing to lack of diversity, communal goal congruity. We present a growing body of evidence suggesting that working with others, and in the service of others, are important career goals that many believe tech careers lack. We describe prior work that shows that these beliefs also have a significant impact on the pipeline of tech talent. We then report on the first pieces of data out of the first long-term intervention designed with this communal goal congruity perspective in mind. We have created a cohort-based service-learning program in computer science, computer engineering, electrical engineering, and software engineering. The result is a program with 26.3% women and 31.6% African American and/or Hispanic students, including 15.8% African American and/or Hispanic women, at an institution that has never previously seen this level of diversity in its computing majors.",Applying the Communal Goal Congruity Perspective to Enhance Diversity and Inclusion in Undergraduate Computing Degrees,NA:NA,2016
Leigh Ann Sudol-DeLyser,NA,Session details: Paper Session: CS Ed Research 1,NA,2016
Brett A. Becker,"One of the many challenges novice programmers face from the time they write their first program is inadequate compiler error messages. These messages report details on errors the programmer has made and are the only feedback the programmer gets from the compiler. For students they play a particularly essential role as students often have little experience to draw upon, leaving compiler error messages as their primary guidance on error correction. However these messages are frequently inadequate, presenting a barrier to progress and are often a source of discouragement. We have designed and implemented an editor that provides enhanced compiler error messages and conducted a controlled empirical study with CS1 students learning Java. We find a reduced frequency of overall errors and errors per student. We also identify eight frequent compiler error messages for which enhancement has a statistically significant effect. Finally we find a reduced number of repeated errors. These findings indicate fewer students struggling with compiler error messages.",An Effective Approach to Enhancing Compiler Error Messages,NA,2016
Juho Leinonen:Krista Longi:Arto Klami:Arto Vihavainen,"Studies on retention and success in introductory programming course have suggested that previous programming experience contributes to students' course outcomes. If such background information could be automatically distilled from students' working process, additional guidance and support mechanisms could be provided even to those, who do not wish to disclose such information. In this study, we explore methods for automatically distinguishing novice programmers from more experienced programmers using fine-grained source code snapshot data. We approach the issue by partially replicating a previous study that used students' keystroke latencies as a proxy to introductory programming course outcomes, and follow this by an exploration of machine learning methods to separate those students with little to no previous programming experience from those with more experience. Our results confirm that students' keystroke latencies can be used as a metric for measuring course outcomes. At the same time, our results show that students programming experience can be identified to some extent from keystroke latency data, which means that such data has potential as a source of information for customizing the students' learning experience.",Automatic Inference of Programming Performance and Experience from Typing Patterns,NA:NA:NA:NA,2016
Ahmed Al-Zubidy:Jeffrey C. Carver:Sarah Heckman:Mark Sherriff,"The computer science education (CSEd) research community consists of a large group of passionate CS educators who often contribute to other disciplines of CS research. There has been a trend in other disciplines toward more rigorous and empirical evaluation of various hypotheses. Prior investigations of the then-current state of CSEd research showed a distinct lack of rigor in the top research publication venues, with most papers falling in the general category of experience reports. In this paper, we present our examination of the two most recent proceedings of the SIGCSE Technical Symposium, providing a snapshot of the current state of empiricism at the largest CSEd venue. Our goal to categorize the current state of empiricism in the SIGCSE Technical Symposium and identify where the community might benefit from increased empiricism when conducting CSEd research. We found an increase in empirical validation of CSEd research to over 70%; however, our findings suggest that current CSEd research minimizes replication precluding meta-analysis and theory building.",A (Updated) Review of Empiricism at the SIGCSE Technical Symposium,NA:NA:NA:NA,2016
David Naugler,NA,Session details: Paper Session: CS0,NA,2016
Cindy Marling:David Juedes,"This paper describes the design and initial implementation of a new CS0 course for CS majors at Ohio University and an associated computer science placement exam. It was our expectation that this course would help improve overall retention and academic performance of CS majors. The new CS0 course was intended for new students with little or no programming experience. Hence, we designed CS0 by selecting some of the best components of other CS0 efforts from the literature, namely, introductory programming in Python, computational thinking, and motivational material aimed at instilling ownership of the major. In order to direct students into CS0 or CS1 appropriately, a placement exam was given to students during orientation. The placement process resulted in a mixed cohort consisting of students with no programming experience as well as other students with programming experience who did not pass the placement exam. Longitudinal analysis of student grades in CS0 and CS1 showed that these were two distinct populations with very different needs. A statistically significant difference was found in the CS1 grades for CS0 students from these populations. Surprisingly, CS0 students without prior programming experience got significantly higher grades in CS1 than CS0 students who had programmed before. We share lessons learned from our experience, including a revised placement process to address these separate populations.",CS0 for Computer Science Majors at Ohio University,NA:NA,2016
Sagar Raina:Siddharth Kaza:Blair Taylor,"Student skipping content is common in traditional learning modules that present a large amount of content in a linear format. This can lead to lower student engagement, and may yield poor learning. In this paper, we compare student learning between enhanced learning modules (2.0) and traditional modules (1.0) aimed at providing knowledge on secure coding to students in lower-level programming courses. We discuss the results of a quasi-experiment across two sections of CS0. The study compares students' secure coding awareness, general software security awareness and students' ability to identify security vulnerabilities (integer overflow, input validation and buffer overflow) in three separate code segments. A total of 53 students participated in the study. While results indicate significant improvement in secure coding and general software security awareness in both 1.0 and 2.0 modules, students using 2.0 modules performed significantly better than students using 1.0 modules in applying secure coding knowledge by identifying security vulnerabilities in code segments.",Security Injections 2.0: Increasing Ability to Apply Secure Coding Knowledge using Segmented and Interactive Modules in CS0,NA:NA:NA,2016
Deborah A. Fields:Lisa Quirke:Janell Amely:Jason Maughan,"In this paper we explore how to assess novice youths' learning of programming in an open-ended, project-based learning environment. Our goal is to combine analysis of frequent, automated snapshots of programming (e.g., ""big"" data) within the ""thick"" social context of kids? learning for deeper insights into their programming trajectories. This paper focuses on the first stage of this endeavor: the development of exploratory quantitative measures of youths? learning of computer science concepts. Analyses focus on kids? learning in a series of three Scratch Camps where 64 campers aged 10-13 used Scratch 2.0 to make a series of creative projects over 30 hours in five days. In the discussion we consider the highlights of the insights-and blind spots-of each data source with regard to youths' learning.",Combining Big Data and Thick Data Analyses for Understanding Youth Learning Trajectories in a Summer Coding Camp,NA:NA:NA:NA,2016
Rania Hodhod:Shamim Khan:Yesem Kurt-Peker:Lydia Ray,"Computational thinking (CT), which encompasses strategies for problem analysis and solution design, is highly applicable in all STEM disciplines, including computer science, for learning concepts as well as solving problems. Yet, the exposure of K-12 students to CT in many schools is practically non-existent. For students to acquire this important skill, teachers require in-depth knowledge of the problem solving strategies that define CT, and strategies for integrating CT into their lesson plans. The proposed special session will be both a tutorial on CT and an interactive session for sharing the experience and results from a CT workshop held at Columbus State University for middle and high school STEM subject teachers. This workshop, offered as a part of the ACT4STEM (Applying Computational Thinking for STEM Disciplines) project, took place in the summer of 2015. It brought together teachers from the metropolitan Columbus area in Georgia with priority given to teachers from high-need schools (as determined by the GA Department of Education [1]). The workshop introduced the participants to CT concepts and demonstrated how CT strategies of pattern recognition, generalization, problem decomposition and algorithmic thinking can be used to improve student learning of STEM concepts. The proposed special session will present sample CT modules developed for the ACT4STEM workshop in the form of a tutorial and projects and lesson plans designed by participants during the workshop. It will include interactive, hands-on activities and discussions in addition to results from the teachers' actual experiences on applying these lesson plans in their classes. This special session will benefit K12 teachers of STEM subjects interested in improving their students' comprehension of discipline related concepts and their application. Moreover, computer science faculty interested in helping K-12 teachers by organizing training sessions will gain valuable insights from the first-hand accounts of the presenters of their own experience with such an effort.",Training Teachers to Integrate Computational Thinking into K-12 Teaching,NA:NA:NA:NA,2016
Daniel D. Garcia:David Ginat,"One man's ""magic"" is another man's engineering. -- Robert A. Heinlein Some beginning students have fuzzy mental models of how the computer works, or worse, sincerely believe that the computer works unpredictably, ""by magic"". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. This is a continuation of our standing-room only SIGCSE 2012 and SIGCSE 2013 special sessions. Magic is one of the most colorful examples of ""unplugged"" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that the audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of new magic tricks whose answer is grounded in computer science: modulo arithmetic, human-computer interfaces, algorithms, binary encoding, invariants, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.","Demystifying Computing with Magic, part III",NA:NA,2016
Gregory Kulczycki:Murali Sitaraman:Nigamanth Sridhar:Bruce W. Weide,"A central goal of computer science education is to teach students how to reason about the correctness of the code they write. Typically, students use a trial and error process and check that their logic ""works"" by running it on test inputs. Typically, instructors encour-age them towards logical reasoning through manual tracing of the code. Rarely reasoning tools are used in the process, at least partly because few instructors are familiar with them and fewer have the time to investigate and experiment. The purpose of this panel is to introduce the attendees to a variety of reasoning tools the presenters have used in their classrooms. In some cases, the tools have been used in only one or two classes of a course to illustrate specific points. In other cases, entire projects have been done using the tools. The courses range from the introductory sequence and dis-crete structures to software engineering and graduate-level courses. The tools are freely available on the web and attendees will be encouraged to experiment with the reasoning tools on their own laptops to solve simple reasoning problems.",Panel: Engage in Reasoning with Tools,NA:NA:NA:NA,2016
Martha Kosa,NA,Session details: Demonstration Session,NA,2016
Rebecca Bates:Euisung Kim,"Speech recognition and natural language processing are interesting and relevant applications of many CS principles. Unfortunately, the barrier to entry for using existing tools is quite high, often requiring many hours installing, compiling, testing, and debugging tools before students can even begin exploring the technical concepts. The ""Speech Recognition Virtual Kitchen"" environment is an NSF-sponsored collaborative research infrastructure project that has the goals to promote community sharing of research techniques, foster innovative experimentation, and provide solid reference systems as a tool for education, research, and evaluation. The core of the research infrastructure is the use of virtual machines (VMs) that provide a consistent experimental environment. We liken the virtual machines to a ""kitchen"" because they provide the infrastructure into which one can install ""appliances"" (e.g., speech recognition tool-kits), ""recipes"" (scripts for creating state-of-the art systems), and ""ingredients"" (language data). A web-based community platform allows physically disconnected users to jointly explore VMs, learn from each other, and collaborate in research. This demo will provide an overview of available VMs, suggestions for use in undergraduate and graduate computer science courses and capstone projects, and a demonstration of our teaching VM, highlighting the ease of working with available tools. We invite participation in our community through downloading and uploading VMs, which can be an entry to open-source software development. More information can be found at speechkitchen.org.",The Speech Recognition Virtual Kitchen Toolkit,NA:NA,2016
Qusay H. Mahmoud:Dhimiter Qendri:Michael Lescisin,"Sensorian is an add-on sensor shield that transforms the Raspberry Pi into an IoT platform. This academic project has been successfully funded through a Kickstarter campaign. The product has been developed and 400 boards have already been shipped. The objective of this demo is not to sell the shield at SIGCSE 2016, but rather to tell the story of the Sensorian shield and demo how students can build on this open source project and learn to tinker with software and hardware technologies. It can be used for a variety of courses, from introducing programming IoT applications in CS1 to Linux and embedded systems. More information about the Sensorian shield can be found at www.sensorian.io.",The Sensorian Shield: Transforming the Raspberry Pi into an IoT Platform,NA:NA:NA,2016
Deepak Kumar,NA,Session details: Paper Session: Big Data,NA,2016
Dugald Ralph Hutchings:Megan Squire,"We present VisMap, a Web-based software tool that supports student exploration of possible data visualizations during a typical process of data science practice. Specifically, we detail visualization approaches within three major kinds of data analysis (part-to-whole and rank, correlation, and geospatial) and discuss how VisMap allows students to visually explore visualization options that correspond to the kind of analysis. The discussion is rooted in our experiences developing an introductory undergraduate course in data science and in our classroom observations of the limitations of existing software tools. These limitations include inefficiency of visualization comparison, difficulty in manipulating data to achieve visualization goals, and current challenges novices face when using professional tools simultaneous with learning about visualization. We finally offer a variety of future paths to further evaluate and refine VisMap.",VisMap: Exploratory Visualization Support for Introductory Data Science and Visualization,NA:NA,2016
Bina Ramamurthy,"This paper details our experiences with design and implementation of data science curriculum at University at Buffalo (UB). We discuss (i) briefly the history of project, (ii) a certificate program that we created, (iii) a data-intensive computing course that forms the core of the curriculum and (iv) some of the challenges we faced and how we addressed them. Major goal of the project was to improve the preparedness of our workforce for the emerging data-intensive computing area. We measured this through assessment of student learning on various concepts and topics related to data-intensive computing. We also discuss the best practices in building a data science program. We highlight the importance of external funding support and multi-disciplinary collaborations in the success of the project. The pedagogical resources created for the project are freely available to help educators and other learners navigate the path to learning data science. We expect this paper about our experience will provide a road map for educators who desire to introduce data science in their curriculum.",A Practical and Sustainable Model for Learning and Teaching Data Science,NA,2016
Joshua Eckroth,"Both industry and academia are confronting the challenge of big data, i.e., data processing that involves data so voluminous or arriving at such high velocity that no single commodity machine is capable of storing or processing them all. A common approach to handling big data is to divide and distribute the processing job to a cluster of machines. Ideally, a course that teaches students how to work with big data would provide students access to a cluster for hands-on practice. However, a cluster of physical, on-premise machines may be prohibitively expensive, particularly at smaller institutions with smaller budgets. In this report, we summarize our experiences developing and using a virtual cluster in a big data mining and analytics course at a small private liberal arts college. A single moderately-sized server hosts a cluster of virtual machines, which run the popular Apache Hadoop system. The virtual cluster gives students hands-on experience and costs less than an equal number of physical machines. It is also easily constructed and reconfigured. We describe our implementation, analyze its performance characteristics, and compare costs with physical clusters and the Amazon Elastic MapReduce cloud service. We summarize our use of the virtual cluster in the classroom and show student feedback.",Teaching Big Data with a Virtual Cluster,NA,2016
Leen-Kiat Soh,NA,Session details: Paper Session: Teaching with Teams,NA,2016
Yang Li:Stephan Krusche:Christian Lescher:Bernd Bruegge,"Globalization has long since found its way into software engineering. Many companies transfer part of their development activities to distributed countries in order to ensure their global competitiveness, gain access to local markets and react to the prevailing lack of specialized workforce. The global distribution of project teams introduces new challenges: Geographic separation, different time zones, remote communications, and culture and language barriers make the collaboration between team members more difficult. Instructors in universities are faced with the problem of how to make students with little or no experience aware of the challenges of Global Software Engineering and equip them with skills to deal with them. International practical courses are effective but require high organizational effort. In this paper, we describe an exercise for teaching Global Software Engineering in a single classroom and report on our experiences. The exercise simulates a global software project within three sites. Through the exercise, students experienced some of the aforementioned challenges and tried to deal with them in a simulated environment.",Teaching Global Software Engineering by Simulating a Global Project in the Classroom,NA:NA:NA:NA,2016
Anya Tafliovich:Andrew Petersen:Jennifer Campbell,"The subject of this work is evaluation methods of student software development team projects. Over a two year period in three courses, we study student preferences for team evaluation methods, the reasons behind their preferences, the changes in preference that occur within a single course and across courses, and misconceptions that educators hold about student preferences. Data was collected from peer evaluations and surveys. We find evidence that students' preferences for evaluation method are influenced by their year of study, familiarity with teammates, and overall happiness with the team experience. Other factors we explored, including gender and perceived ability, did not appear to influence evaluation preferences in our courses.",Evaluating Student Teams: Do Educators Know What Students Think?,NA:NA:NA,2016
Stephen MacNeil:Celine Latulipe:Bruce Long:Aman Yadav,"In both flipped classroom settings and distance learning, educational content is typically delivered via video lectures that students watch alone. While flipped classrooms typically provide students with opportunities for social interaction that feature active learning, online learners are not typically afforded these opportunities. Cooperative learning techniques like Lightweight Teams provide social, collaborative learning opportunities to students in flipped classrooms but extending these techniques to distance learning settings is not straightforward. In this paper, we present our experiences with online, distributed Lightweight Teams. We present an in-the-wild study that compares learning outcomes and student preferences between co-located and distributed Lightweight Teams against the base case of individual learning. Our results show that while there are no significant learning differences between the two team conditions and the individual condition, students significantly prefer the team conditions.",Exploring Lightweight Teams in a Distributed Learning Environment,NA:NA:NA:NA,2016
Imad Rahal,NA,Session details: Paper Session: Program Design,NA,2016
Kathi Fisler:Shriram Krishnamurthi:Janet Siegmund,"Plan composition is an important but under-studied topic in programming education. Most studies were done three decades ago, under assumptions that miss important issues that today's students must confront. This paper presents rationale and details for a modernized study of plan composition that accommodates a broader range of programming languages and problem features. Our study design has two novelties: the problems require students to deal with data-processing challenges (such as noisy data), and the questions ask students to not only produce but also evaluate programs. We present preliminary results from using our study in multiple courses from different linguistic paradigms. We discuss several future studies that are prompted by these results.",Modernizing Plan-Composition Studies,NA:NA:NA,2016
Francisco Enrique Vicente Castro:Kathi Fisler,"When students are faced with a programming problem unlike any they have solved before, prior research suggests that they develop code backwards from essential computations in the problem. Some curricula, however, teach students to first write scaffolding code based on the type of the input data. How do these two approaches interact? We gave CS1 students who were taught to write scaffolding code a programming problem unlike any they had seen before. We found that while students put essential computations into the scaffolds, they often overuse affordances of the scaffolds in ways that lead to plan-composition errors. We propose that steering students away from on-the-fly decomposition while programming could help avoid some of these errors.",On the Interplay Between Bottom-Up and Datatype-Driven Program Design,NA:NA,2016
Chenglie Hu,"In this paper, we first present an assessment on students' software design abilities based on qualitative data from a design class. We will then provide, using the assessment as a backdrop, a discussion on the nature of software design, the challenges of teaching design, and ways to improve design education.",Can Students Design Software?: The Answer Is More Complex Than You Think,NA,2016
Mark S. Hall,NA,Session details: Paper Session: Scratch,NA,2016
David E. Johnson,"In this paper, we describe ITCH, an automatic testing system for projects in the Scratch programming language. While Scratch lacks traditional input/output mechanisms, ITCH overcomes this by exploiting the persistent saved project state to embed ITCH-specific lists that retain project output. In addition, the ITCH system replaces Scratch user input commands with automatically assigned test values. ITCH can gather variable state from running code, redirect output to a file, and capture drawings done by a Scratch project to save in a report format. The ITCH system has been successfully used in a large computer science explorations class where small practice code questions are assigned before extending work to larger, more creative projects without further burdening course graders. Examples of course projects and the ITCH-tested practice questions are given.",ITCH: Individual Testing of Computer Homework for Scratch Assignments,NA,2016
Jason Arnold:Heather Bort:Ryan Naugle:Casey O'Hare:Dennis Brylow,"High school programming competitions often follow the traditional model of collegiate competitions, exemplified by the ACM International Collegiate Programming Contest (ICPC). This tradition has been reinforced by the nature of Advanced Placement Computer Science (AP CS A), for which ICPC-style problems are considered an excellent practice regimen. As more and more students in high school computer science courses approach the field from broader starting points, such as Exploring Computer Science (ECS), or the new AP CS Principles course, an analogous structure for high school outreach events becomes of greater importance. This paper describes our work on developing a Scratch-based alternative competition for high school students, that can be run in parallel with a traditional morning of ICPC-style problems.",Multi-Track Programming Competitions with Scratch,NA:NA:NA:NA:NA,2016
Diana Franklin:Charlotte Hill:Hilary A. Dwyer:Alexandria K. Hansen:Ashley Iveland:Danielle B. Harlow,"With the growing movement to use visual block-based languages (VBBLs) in elementary and middle school classrooms, questions arise about the learning outcomes of such activities. While some schools are content to use VBBLs to spark interest and motivation for the future pursuit of computing, others are asking, ""Does this early exposure produce knowledge that transfers to traditional text-based languages (TBLs)?"" If transfer is a goal, then a corollary is, ""How do we design the transition to maximize the transfer?"" This paper focuses on initialization of state and variables, exploring the differences between Scratch and two TBLs: C and Java. Based on observations of 9-12 year old students in a VBBL curriculum, we identify four ""pieces of knowledge"" that are critical for C and Java but are not nearly as obvious in Scratch, including whether, when, and how to perform initialization. We conclude with suggestions for instruction and development environment that may improve transfer.",Initialization in Scratch: Seeking Knowledge Transfer,NA:NA:NA:NA:NA:NA,2016
Diana Burley:Matt Bishop:Elizabeth Hawthorne:Siddharth Kaza:Scott Buck:Lynn Futcher,"In this special session, members of the ACM Joint Task Force on Cyber Education to Develop Undergraduate Curricular Guidance will provide an overview of the task force mission, objectives, and work plan. After the overview, task force members will engage session participants in the curricular development process.",Special Session: ACM Joint Task Force on Cyber Education,NA:NA:NA:NA:NA:NA,2016
Daniel D. Garcia:Leslie Aaronson:Shawn Kenner:Colleen Lewis:Susan Rodger,"The pace of technology for use in computing education is staggering. In the last few years, the following technologies have completely transformed our teaching: Piazza, GradeScope, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have ""bubbled to the top"" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the particular configuration options required to make their technology ""sing"". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any ""gotchas"" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite ""can't live without"" technologies as well.","Technology We Can't Live Without!, revisited",NA:NA:NA:NA:NA,2016
Erin Mindell Cannon:Priya Chawla:Katherine Lo:Haley Adams,NA,igniteCS: Addressing Undergraduate CS Retention,NA:NA:NA:NA,2016
Austin Cory Bart:Clifford A. Shaffer,"This special session will explore practical results from the educational theory of Instructional Design (ID), with particular focus on the widespread similarities between a process for creating successful courses and a process for creating successful software. We present a small set of specific practices that should be easy for CS educators to adopt. In particular, the session will cover the popular Dick & Carey model, meant for beginners to ID. This model helps instructors rigorously define who they will teach to, what they will teach, how they will assess, and (only then) how they will teach. The approach is parallel to Software Engineering techniques such as Test-Driven Development, Requirements Engineering, and Iterative Development. The session will be a blend of presentation, participation, and assessment. Participants will work in small groups both to foster discussion and to provide learning support. The content of the presentation will particularly focus on how the model can be applied practically. It is our hope that attendees, whether new to teaching or experienced, will adopt or be influenced by the model in order to approach their courses with the same rigor they apply to software development.",Instructional Design is to Teaching as Software Engineering is to Programming,NA:NA,2016
Tiffany Barnes,NA,Session details: Demonstration Session,NA,2016
Jessica B. Hamrick,"Many courses in scientific fields require students not just to write code, but to also visualize their data, work through a mathematical derivation, or write a paragraph interpreting their results. The Jupyter notebook (formerly known as the IPython notebook) is an ideal platform for creating assignments that include all of these question types, due to its interactive document format that weaves together code, prose, images, and math. Instructors can provide students with self-contained notebooks that include instructions, coding exercises, and written responses all in the same place. Students can write and execute code in these notebooks, and any text or images produced by the code are displayed immediately beneath the input that produced them. However, while having all exercises in the same place makes for better assignments, it also makes them difficult to grade. This demo presents nbgrader, an open-source tool developed by the Jupyter project that solves this problem by providing an interface that blends the autograding of notebook-based assignments with manual human grading. Additionally, nbgrader streamlines the process of assignment creation, distribution, collection, grading, and feedback-a process that is often logistically difficult for instructors. To give students access to the notebook, this demo illustrates how it can be deployed in the cloud, and how this complements the grading process. Information about the Jupyter notebook can be found at http://jupyter.org/, and a demo of the notebook at https://try.jupyter.org/. Information about nbgrader can be found at https://github.com/jupyter/nbgrader. A laptop is recommended for this demo. Handouts will be provided.",Creating and Grading IPython/Jupyter Notebook Assignments with NbGrader,NA,2016
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan,"Robotics and block-based languages have been growing in popularity as a way to introduce computer science topics to young audiences. This approach focuses on capturing interests by reducing the complexity required to learn to program. Unfortunately, many K-12 classrooms do not have the budgets necessary to provide each student with the technologies required by these approaches. As a solution, we developed CodeSnaps, a tool that provides an engaging coding experience for an entire classroom with minimal technology requirements. CodeSnaps brings the interest and simplicity of block-based robotic programming to any student in a classroom with at least one iPad and one Sphero Robot (www.sphero.com). With CodeSnaps, students can program at their desks independently or in groups using printable paper coding blocks similar to Blockly (developers.google.com/blockly). When their program is ready, students can ""snap"" their code (i.e., take a picture) with the iPad. The CodeSnaps app then translates their work to a digital version that is finally executed by Sphero. The CodeSnaps environment will also be freely available with the goal of reaching as many budding computer scientists as possible.",CodeSnaps: Block-Based Robotic Programming for the Low-Budget Classroom,NA:NA:NA,2016
Kim Bruce,NA,Session details: Paper Session: Peer Techniques,NA,2016
Alessio Gaspar:Joni Torsella:Nora Honken:Sohum Sohoni:Colin Arnold,"Peer learning principles have been successfully applied to novice programmers. Pedagogies such as Pair Programming, Peer Testing, Peer review of code or tests, or, more generally Peer Instruction, have repeatedly demonstrated their effectiveness in improving both individual performance and retention rates. This paper proposes to supplement the existing literature by investigating how students interact with one another during collaborative programming tasks. More specifically, we are interested in comparing the learning principles used during student-student interactions with those used during student-instructor or student-teaching assistant dialogs. Students in online and face to face courses, who worked collaboratively on programming assignments, were surveyed to gain an understanding of the frequency with which they engaged in specific activities. These that are representative of the learning principles that have been supported by research to promote learning. Results suggest that some learning principles, may be absent from student-student interactions. We discuss how the success of collaborative programming pedagogies put into question the role of these principles and whether they may contribute to further improve peer-based approaches.",Differences in the Learning Principles Dominating Student-Student vs. Student-Instructor Interactions while Working on Programming Tasks,NA:NA:NA:NA:NA,2016
Joonsuk Park:Kimberley Williams,"Recently, there has been a growing interest in peer- and self-assessment (PSA) in the research community, especially with the development of massive open online courses (MOOCs). One prevalent theme in the literature is the consideration of PSA as a partial or full replacement for traditional assessments performed by the instructor. And since the traditional role of the students in assessment processes is the assessee, existing works on PSA typically focus on devising methods to make the grades more reliable and beneficial for the assessees. What has been missing in the picture is the assessor: How are those conducting peer- and self-assessment impacted by the process? This question has become relevant from educational perspective, because in PSA, the students take on the role of the assessor, as well. We present PSA as an active learning exercise for the assessors and examine its impact. For this, we incorporated PSA into a university-level Introduction to Natural Language Processing course consisting of more than 100 students and analyzed student surveys and exam results of peer-, self-, and no-assessment groups. The final exam performance suggests that PSA is helpful for learning, which is consistent with the student survey results. Also, students generally enjoyed conducting PSA.",The Effects of Peer- and Self-assessment on the Assessors,NA:NA,2016
Joe Gibbs Politz:Joseph M. Collard:Arjun Guha:Kathi Fisler:Shriram Krishnamurthi,"In in-flow peer review, students provide feedback to one another on intermediate artifacts on their way to a final submission. Prior work has studied examples and tests as a potentially useful initial artifact for review. Unfortunately, large test suites are onerous to produce and especially to review. We instead propose the notion of a sweep, an artificially constrained set of tests that illustrates common and interesting behavior. We present experimental data across several courses that show that sweeps have reasonable quality, and are also a good target for peer review; for example, students usually (over half the time) suggest new tests to one another in a review.",The Sweep: Essential Examples for In-Flow Peer Review,NA:NA:NA:NA:NA,2016
Ravi Gandha,NA,Session details: Paper Session: Artistic Approaches,NA,2016
Kayla DesPortes:Monet Spells:Betsy DiSalvo,"The MoveLab was an educational research intervention centering on a community of African American and Hispanic girls as they began to transform their self-concept in relation to computing and dance while creating technology enhanced dance performances. Students within underrepresented populations in computing often do not perceive the identity of a computer scientist as aligning with their interests or value system, leading to rejection of opportunities to participate within the discipline. To engage diverse populations in computing, we need to better understand how to support students in navigating conflicts between identities with computing and their personal interest and values. Using the construct of self-concept, we observed students in the workshop creating both congruence and dissension between their self-concept and computing. We found that creating multiple roles for participation, fostering a socially supportive community, and integrating student values within the curriculum led to students forming congruence between their self-concept and the disciplines of computing and dance.",The MoveLab: Developing Congruence Between Students' Self-Concepts and Computing,NA:NA:NA,2016
Dianna Xu:Aaron Cadle:Darby Thompson:Ursula Wolz:Ira Greenberg:Deepak Kumar,"In this paper we describe the success of bringing Creative Computation via Processing into two very different high schools that span the range of possibilities of grades 9-12 in American education. Creative Computation is an emerging discipline that requires a thorough grounding in both media arts and computing. We report on how contextualized computing that supports integration of media arts, design, and computer science can successfully attract and motivate students to learn foundations of programming and come back for more. The work of two high school teachers with divergent pedagogical styles is presented. They successfully adapted a college-level Creative Computation curriculum to their individual school cultures providing a catalyst for significant increases in total enrollment as well as female participation in high school computer science.",Creative Computation in High School,NA:NA:NA:NA:NA:NA,2016
Zoe J. Wood:Paul Muhl:Katelyn Hicks,"Introducing computer science to high school students in a creative context, and fitting such a course into an overly packed high school curriculum, is a challenge. This paper describes a fruitful collaboration to create and teach an alternative introductory computing curriculum for high school students targeted at introducing students to computing via an artistic context. This curriculum allows students to be introduced to computing in a highly interest based context, attracting diverse student body participation (25% female students in the first offering and 38% female students in the present 2015-16 offering). This curriculum also fulfills student's fine art course requirement making it more readily accessible to a wide audience to `try out' CS while making progress on their academic goals. This curriculum has been used as a successful introduction to computing at the Santa Barbara High School CS Academy in the 2014-2015 school year and is currently being offered again this year. In this paper, we present the curriculum and evaluation of this initial offering.",Computational Art: Introducing High School Students to Computing via Art,NA:NA:NA,2016
Don Blaheta,NA,Session details: Paper Session: Tests and Outcomes,NA,2016
Michelle Craig:Diane Horton:Daniel Zingaro:Danny Heap,"In addition to their role as a summative measure, midterm tests can provide formative feedback that can be used by students to identify areas of weakness and adjust studying approaches. Unfortunately, low levels of test pickup often preclude this type of learning from tests. Even when students do collect their marked tests, it is unclear how much they reflect on or learn from the feedback. Exam wrappers have been designed and used in other sciences to promote reflection on tests and improve study practices. In this paper, we introduce exam wrappers into a CS course. We outline our adoption of exam wrappers, and illustrate how we as educators can learn from student responses on exam wrappers. We also describe an experiment comparing three styles of exam wrapper. Although it did not find significant differential impact on exam scores, we find, for all wrapper styles, improved test pickup rates and qualitative evidence that students successfully reflect on past behaviour and recognize improved study strategies.",Introducing and Evaluating Exam Wrappers in CS2,NA:NA:NA:NA,2016
Robert Deloatch:Brian P. Bailey:Alex Kirlik,"The modality students use to complete programming-centric exams is shifting from paper to computer. We developed and distributed a survey to investigate how exam modality affects student perceptions of test anxiety and performance during programming-centric exams. We examine the distribution of modality preference among students and understand how students cope with test anxiety. We found a majority of students report at least moderate perceived anxiety (rating -- 4 on 7-pt scale) on paper- (69%) and computer-based (64%) exams. Though moderate anxiety was experienced by a majority of the students, we found 1 in 5 students had no strategy to cope with anxiety. Additionally, we examine how students perceived anxiety during testing affects their thought process and behavior. We found computer-based exams were perceived as more beneficial to the quality and speed of student's solutions and a majority of students preferred computer-based testing (67%). Lastly, we introduce possible technological solutions to benefit students experiencing test anxiety while not impeding less anxious students.",Measuring Effects of Modality on Perceived Test Anxiety for Computer Programming Exams,NA:NA:NA,2016
Daniel Zingaro:Leo Porter,"Achievement goals are cognitively-represented end states that individuals strive to reach in competence situations. Well-studied by educational psychologists, achievement goals are robust predictors of grades, interest, and motivation of students. In this paper, we apply achievement goal theory to measure CS1 students' achievement goals and consequent interest in CS and final exam grade. We find that students aiming for topic mastery become interested in CS and, contrary to theoretical expectations, perform well on the exam. A more complex pattern of results surrounds students who orient toward competence demonstration or normative comparison, and the link between such performance goals and outcomes is less clear. We argue for the continued appropriation of educational theory to inform our studies of CS success.",Impact of Student Achievement Goals on CS1 Outcomes,NA:NA,2016
Howard Francis,NA,Session details: Paper Session: High School Diversity,NA,2016
Marie E. Vachovsky:Grace Wu:Sorathan Chaturapruek:Olga Russakovsky:Richard Sommer:Li Fei-Fei,"The field of computer science suffers from a lack of diversity. The Stanford Artificial Intelligence Laboratory's Outreach Summer (SAILORS), a two-week non-residential free summer program, recruits high school girls to computer science, specifically to Artificial Intelligence (AI). The program was organized by graduate student and professor volunteers. The goals of the pilot program are to increase interest in AI, contextualize technically rigorous AI concepts through societal impact, and address barriers that could discourage 10th grade girls from pursuing computer science. In this paper we describe the curriculum designed to achieve these goals. Survey results show students had a statistically significant increase in technical knowledge, interest in pursuing careers in AI, and confidence in succeeding in AI and computer science. Additionally, survey results show that the majority of the students found new role models, faculty support, and a sense of community in AI and computer science.",Toward More Gender Diversity in CS through an Artificial Intelligence Summer Program for High School Girls,NA:NA:NA:NA:NA:NA,2016
Jody Clarke-Midura:Vicki Allan:Kevin Close,"In order to affect career decisions, it is important to reach youth at early ages. While some have focused on using mentors in order to successfully teach mentees, few have focused on the benefits to the mentors themselves. To our knowledge, no other research has been conducted on the effect that serving as a near-peer mentor has on increasing the mentors' interest, self-efficacy, value-beliefs, and skills in computer science. Our paid mentorships provided youth two weeks of participation in computer science camps using App Inventor. The mentors in our pilot study increased self-efficacy and interest after the mentoring activity, on average. This all-female mentoring experience provided opportunities to transcend barriers such as negative stereotyping and lack of role models. We feel that being able to reach high school girls at a critical stage makes this pedagogical approach ideal. The positive results, even with the short duration of the intervention, are encouraging.",Investigating the Role of Being a Mentor as a Way of Increasing Interest in CS,NA:NA:NA,2016
Barbara J. Ericson:Miranda C. Parker:Shelly Engelman,"Female students are underrepresented in computing careers and in computing majors at the college or university level. This underrepresentation starts in high school. Only 20% of Advanced Placement (AP) Computer Science (CS) A exam takers in 2014 nationally were female. In addition to being underrepresented, female students tend to have a lower pass rate on the exam than male students. Failing the exam could reduce interest in computing as a career. Sisters Rise Up 4 CS was created at the Georgia Institute of Technology (Georgia Tech) to help more female high school students pass the AP CS A exam. It offers help sessions, near-peer role models, exposure to a college campus, and a community of learners. Sisters Rise Up 4 CS is based on Project Rise Up 4 CS, which was also created at Georgia Tech to help increase the number of African-American students that pass the AP CS A exam. However, Sisters Rise Up 4 CS does not include the financial incentives offered by Project Rise Up 4 CS. Project Rise Up 4 CS has resulted in statistically significant positive changes in attitudes for participants and a large increase in the participants' perception of their ability to pass the exam. Even students who did not pass the exam have reported positive benefits from being in Project Rise Up 4 CS. This paper summarizes the findings from Project Rise Up 4 CS from 2013-2015 and presents the findings from the pilot of Sisters Rise Up 4 CS from 2014-2015. We used a mixed-methods approach to evaluate the project and to judge the effectiveness of the project elements.",Sisters Rise Up 4 CS: Helping Female Students Pass the Advanced Placement Computer Science A Exam,NA:NA:NA,2016
Neil C.C. Brown:Jens Mönig:Anthony Bau:David Weintrop,"Blocks-based programming is becoming the way that learners are being introduced to programming and computer science. Led by the popularity of tools like Scratch, Alice, and Code.org's Hour of Code activities, many new programming environments and initiatives are employing the blocks-based modality. This trend can be seen in the growing number of classroom computer science curricula incorporating blocksbased environments into their materials. Despite this rise in use, many open questions remain surrounding blocks-based programming. In this panel, we discuss the current state of blocks-based programming environments, review what we know about learning with blocks-based tools, and look to the future, discussing what form next-generation blocks-based, or blocks-inspired, programming environments might take. Research looking at blocks-based programming is revealing that modality matters: that the representations used to present programming concepts affect learners' conceptual understanding [6], programming practices [3], and perceptions of programming and computer science [5]. This panel brings together leading designers and researchers looking to advance graphical, blocks-based programming through new, innovate designs. The panel will open with a review of current research literature on learning with blocks-based programming and then continue with presentations of three recently designed blocks-based programming environments (Greenfoot 3, GP, Pencil Code), each of which look to push the boundaries of the approach in diffierent directions. These short presentations will frame the discussion of pertinent questions facing designers and educators who use blocksbased programming environments.",Panel: Future Directions of Block-based Programming,NA:NA:NA:NA,2016
Daniel D. Garcia:Colleen Lewis:Stuart Reges:Nathan Ensmenger,"There are always some students who succeed and some students who don't. Our four panelists are committed to the success of all students, but have different explanations for students' lack of success. This panel discussion will highlight both their shared beliefs and disagreements between veteran CS educators Stuart Reges and Dan Garcia, CS education researcher Colleen Lewis, and Professor of History and Philosophy of Science Nathan Ensmenger. We hope this lively discussion will bring together divergent and complementary positions and expertise, as well as invite significant audience participation.","Why Don't Some CS0 Students Succeed?: How Important Are Background, Experience, Culture, Aptitude, Habits and Attitude?",NA:NA:NA:NA,2016
Jennifer Campbell:Stan Kurkovsky:Chun Wai Liew:Anya Tafliovich,NA,Scrum and Agile Methods in Software Engineering Courses,NA:NA:NA:NA,2016
Judith Bishop:Carlos Jensen:Walt Scacchi:Arfon Smith,"There are many papers about projects that release their software as open source. Our panel looks at why open source is a good idea for education, and how it can best be leveraged. The panel represents industry and academia and its members have years of experience in the field. Specific questions that panelists will address, in addition to their position statements, are: What makes open source particularly attractive for educators and students' What are barriers to use? What areas of computer science and what levels of study are most appropriate for introducing open source? Finally, this panel takes a step back and looks at the broad issues associated with using that software in education. We will mention the specific details of releasing, curating, licensing and using open source software. But most of all this panel wants to explore how, for educators, open source works. We believe it is because open source fosters an ecosystem of collaborators who can pool resources and expertise to build new collaborative ways of solving hard research projects. We look forward to the contributions from the audience and energetic debate.",How to Use Open Source Software in Education,NA:NA:NA:NA,2016
Ellen L. Walker,NA,Session details: Paper Session: Problem Solving,NA,2016
Diane Horton:Jennifer Campbell:Michelle Craig,"When students can choose to take a course online or face-to-face, who chooses each format? Why do students select one format instead of the other? We compare an online section of CS1 to a concurrent face-to-face section and find that the populations in the two sections are very different. In particular, students in the online section have less prior programming experience and are less likely to intend to major in computer science. We also examine the reasons why students choose their section, many of which relate to convenience, desire for interaction with others, and degree of familiarity with the course material. Finally, we compare course outcomes for the two sections. We find significant differences in drop rates, but not in final exam scores. We investigate whether the differences we find can be explained by differences in the populations who choose to take the course online vs face-to-face.","Online CS1: Who Enrols, Why, and How Do They Do?",NA:NA:NA,2016
Alex Lishinski:Aman Yadav:Richard Enbody:Jon Good,"Previous research has suggested that cognitive tests, including instruments seeking to measure problem solving, are significant predictors of students' programming performance. This paper seeks to expand upon this previous research by using a more theoretically grounded approach to measuring problem solving as a means of predicting performance in an introductory undergraduate programming course. Programming course performance has typically been measured by overall course grades; however, in this paper we used a more fine-grained approach to measuring student programming performance. Specifically, we utilized different types of course assignments (projects and tests) to measure programming outcomes. Results from this study indicate that problem solving ability significantly correlates with performance on programming assignments, but does not correlate with performance on multiple-choice exams.",The Influence of Problem Solving Abilities on Students' Performance on Different Assessment Tasks in CS1,NA:NA:NA:NA,2016
Swapneel Sheth:Christian Murphy:Kenneth A. Ross:Dennis Shasha,"At its core, Computer Science is the study of algorithmic problem solving. Although it is necessary to teach programming, data structures, computer organization, etc., students should ultimately learn to use these things to solve problems, understand what is good and bad about their solutions, and share their solutions with others. This paper describes a course that focuses on the four steps of the problem solving process: algorithmic thinking, implementation, analysis, and communication. This course, based on Knuth's popular seminar at Stanford, has been extremely successful at the authors' three institutions. In addition to discussing the course's objectives and methodology, we present sample problems, summarize the outcomes and feedback from students, and give advice to other educators looking to create a similar course.",A Course on Programming and Problem Solving,NA:NA:NA:NA,2016
Ruth Anderson,NA,Session details: Paper Session: Novel Learning Approaches,NA,2016
Vikash Singh:Sarah Abdellahi:Mary Lou Maher:Celine Latulipe,"Video usage in educational environments has increased significantly with the expansion of online learning opportunities. However, current video-based applications used for learning are designed for passive consumption of video content and do not support small-group collaboration. Specifically, they lack interaction affordances for active and collaborative learning through video materials. In this paper, we present the affordances and user experience of a web-based video application called Video Collaboratory that is designed with multiple affordances for group-based learning around video content. We surveyed students and analyzed the use of the Video Collaboratory in an HCI course. Students found the Video Collaboratory helpful because they could learn from their peers. Students also used the application beyond the activities required for credit.",The Video Collaboratory as a Learning Environment,NA:NA:NA:NA,2016
Elizabeth Boese,"Computer Science education has to change - the students are demanding a new paradigm in this Just Google It era. This paper discusses what Just in Time Learning is, how it is more effective than the traditional educational process, and how to change education to embrace the Internet through incorporating the Just-In-Time Learning model. There are five parts to incorporating the Just-In-Time Learning model: one - recognizing that the textbook is dead, as students Just Google It, two - help students learn how to vet the information they find online, three - incorporate real-world problems and support creative student ideas, four - modify the classroom to include an active-learning environment to fully support Just-In-Time Learning, and five - the role of the teacher is now as a tutor, helping students learn and learn how to learn. By incorporating these five parts of the Just-In-Time Learning model, there is no longer the concept of cheating, and students are learning the core necessary skills: problem-solving, critical thinking, good decision making, self-learning, and effective communication.",Just-In-Time Learning for the Just Google It Era,NA,2016
Arnab Nandi:Meris Mandernach,"Hackathons are fast-paced events where competitors work in teams to go from an idea to working software or hardware within a single day or a weekend and demonstrate their creation to a live audience of peers. Due to the ""fun"" and informal nature of such events, they make for excellent informal learning platforms that attract a diverse spectrum of students, especially those typically uninterested in traditional classroom settings. In this paper, we investigate the informal learning aspects of Ohio State's annual hackathon events over the past two years, with over 100 student participants in 2013 and over 200 student participants in 2014. Despite the competitive nature of such events, we observed a significant amount of peer-learning -- students teaching each other how to solve specific challenges and learn new skills. The events featured mentors from both the university and industry, who provided round-the-clock hands-on support, troubleshooting and advice. Due to the gamified format of the events, students were heavily motivated to learn new skills due to practical applicability and peer effects, rather than merely academic metrics. Some teams continued their hacks as long-term projects, while others formed new student groups to host lectures and practice building prototypes on a regular basis. Using a combined analysis of post-event surveys, student academic records and source-code commit log data from the event, we share insights, demographics, statistics and anecdotes from hosting these hackathons.",Hackathons as an Informal Learning Platform,NA:NA,2016
Kathi Fisler,NA,Session details: Paper Session: CS Ed Research 2,NA,2016
Leo Porter:Dennis Bouvier:Quintin Cutts:Scott Grissom:Cynthia Lee:Robert McCartney:Daniel Zingaro:Beth Simon,"Peer Instruction (PI) is a student-centric pedagogy in which students move from the role of passive listeners to active participants in the classroom. Over the past five years, there have been a number of research articles regarding the value of PI in computer science. The present work adds to this body of knowledge by examining outcomes from seven introductory programming instructors: three novices to PI and four with a range of PI experience. Through common measurements of student perceptions, we provide evidence that introductory computing instructors can successfully implement PI in their classrooms. We find encouraging minimum (74%) and average (92%) levels of success as measured through student valuation of PI for their learning. This work also documents and hypothesizes reasons for comparatively poor survey results in one course, highlighting the importance of the choice of grading policy (participation vs. correctness) for new PI adopters.",A Multi-institutional Study of Peer Instruction in Introductory Computing,NA:NA:NA:NA:NA:NA:NA:NA,2016
Ricardo Caceffo:Steve Wolfman:Kellogg S. Booth:Rodolfo Azevedo,"A Concept Inventory (CI) is a set of multiple choice questions used to reveal student's misconceptions related to some topic. Each available choice (besides the correct choice) is a distractor that is carefully developed to address a specific misunderstanding, a student wrong thought. In computer science introductory programming courses, the development of CIs is still beginning, with many topics requiring further study and analysis. We identify, through analysis of open-ended exams and instructor interviews, introductory programming course misconceptions related to function parameter use and scope, variables, recursion, iteration, structures, pointers and boolean expressions. We categorize these misconceptions and define high-quality distractors founded in words used by students in their responses to exam questions. We discuss the difficulty of assessing introductory programming misconceptions independent of the syntax of a language and we present a detailed discussion of two pilot CIs related to parameters: an open-ended question (to help identify new misunderstandings) and a multiple choice question with suggested distractors that we identified.",Developing a Computer Science Concept Inventory for Introductory Programming,NA:NA:NA:NA,2016
R. Paul Wiegand:Anthony Bucci:Amruth N. Kumar:Jennifer L. Albert:Alessio Gaspar,"What are the concepts in introductory programming that are easy/hard for students? We propose to use Dimension Extraction algorithm (DECA) inspired by coevolution and co-optimization theory to answer this question. We propose and use the metrics of informatively easy/hard concepts to identify programming concepts that are solved correctly by the most ""dominated student"" versus solved incorrectly by the most ""dominant student"". As a proof of concept, we applied DECA to analyze the data collected by software tutors called problets used by introductory programming students in Spring 2014. We present the results, i.e., informatively easy/hard concepts on a dozen different topics covered in a typical introductory programming course. It is hoped that these results will inform programming instructors on the concepts they should (de)/emphasize in class. They will also contribute towards creating a concept inventory for introductory programming.",A Data-Driven Analysis of Informatively Hard Concepts in Introductory Programming,NA:NA:NA:NA:NA,2016
Brian Krupp,NA,Session details: Paper Session: K-8 Diversity,NA,2016
Jennifer Tsan:Kristy Elizabeth Boyer:Collin F. Lynch,"Elementary computer science has gained increasing attention within the computer science education research community. We have only recently begun to explore the many unanswered questions about how young students learn computer science, how they interact with each other, and how their skill levels and backgrounds vary. One set of unanswered questions focuses on gender equality for young computer science learners. This paper examines how the gender composition of collaborative groups in elementary computer science relates to student achievement. We report on data collected from an in-school 5th grade computer science elective offered over four quarters in 2014-2015. We found a significant difference in the quality of artifacts produced by learner groups depending upon their gender composition, with groups of all female students performing significantly lower than other groups. Our analyses suggest important factors that are influential as these learners begin to solve computer science problems. This new evidence of gender disparities in computer science achievement as young as ten years of age highlights the importance of future study of these factors in order to provide effective, equitable computer science education to learners of all ages.",How Early Does the CS Gender Gap Emerge?: A Study of Collaborative Problem Solving in 5th Grade Computer Science,NA:NA:NA,2016
Alexandria K. Hansen:Eric R. Hansen:Hilary A. Dwyer:Danielle B. Harlow:Diana Franklin,"As computer science moves from an outreach activity to a normal classroom activity in the multi-subject, mainstream elementary school classroom, curricula need to be examined to ensure they are meeting the needs of diverse students. In this paper, we present how Universal Design for Learning (UDL) was used to develop and refine a programming environment and curriculum for upper-elementary school classrooms (students aged 9-12). We then present our accommodations and modifications to emphasize the ways our development environment and/or curriculum enabled such uses. Ensuring introductory computer science experiences are equitable and accessible for a wide range of student learners may broaden the diversity of individuals who perceive themselves as capable of pursuing computer science in the future.",Differentiating for Diversity: Using Universal Design for Learning in Elementary Computer Science Education,NA:NA:NA:NA:NA,2016
Philip Sheridan Buffum:Megan Hardy Frankosky:Kristy Elizabeth Boyer:Eric N. Wiebe:Bradford W. Mott:James C. Lester,"The important goal of broadening participation in computing has inspired many successful outreach initiatives. Yet many of these initiatives, such as out-of-school activities or innovative new computer science courses for secondary school students, may disproportionately attract students who already have prior interest and experience in computing. How, then, do we engage the silent majority of students who do not self-select computer science? This paper examines this question in the context of ENGAGE, an in-school outreach initiative for middle school students. ENGAGE's learning activities center on a game-based learning environment for computer science. Results reveal that the initiative improved the computer science attitudes of students who were not already predisposed to study computer science, in a way that a corresponding after-school program could not. The results illustrate how an in-school initiative can empower young students who might not otherwise consider studying computer science.",Empowering All Students: Closing the CS Confidence Gap with an In-School Initiative for Middle School Students,NA:NA:NA:NA:NA:NA,2016
Sandra Czajka:Lien Diaz:Crystal Furman,"College Board is thrilled to announce the launch of a pilot program, Advanced Placement® (AP) with We.org Service, in a partnership with international charity and educational partner, Free the Children. AP Computer Science is among six AP courses that will participate in this pilot program. The College Board and Free The Children share a passion for enriching students' learning experiences and developing well-rounded citizens. The program combines the academic challenge and rigor of AP Computer Science with Free The Children's WE.org education and citizenship model. AP Computer Science with WE.org Service creates an opportunity for students to consider their classroom work and how it applies to the real world, while working closely with peers to address social issues.",AP Computer Science and Service Learning with We.org,NA:NA:NA,2016
Cara Tang:Cindy S. Tucker:Elizabeth K. Hawthorne,NA,Updating Curricular Guidelines for Associate-Degree Computer Science Programs,NA:NA:NA,2016
Daniel D. Garcia:Jennifer Campbell:John DeNero:Mary Lou Dorf:Stuart Reges,"Be careful what you wish for, you just might get it. - Proverb In 2005, computing education was experiencing a crisis. Enrollments had ""fallen to such an extent that some academic computing programs were facing significant reductions in staffing levels or even elimination"". The community responded, with panels to investigate and highlight ways to infuse ""passion, beauty, joy and awe"" into the introductory experiences, the CS10K project to bring computing to 10,000 teachers and 100,000 students, and better messaging of career opportunities, to name a few of the initiatives to bring students back into our seats. Well, by golly, it worked! It certainly didn't hurt our cause that Wall Street almost collapsed, young whiz kids were becoming TECH billionaires, an inspiring video and an interactive website led millions of people to code for an hour every December, or smart devices put computing into the hands of young people, and social media became the killer app. Whatever it was, CS became hot again. And we mean HOT. There are now several institutions around the world that have well over a thousand students taking CS1 in the Fall of 2015. There's just so much lemonade one can make before the seams start to burst, and the wheels come off the bus, as many shared at SIGCSE 2015 at the Birds of the Feather session. The goal of this panel is to bring together educators who were charged with delivering face-to-face CS1 on the grandest scale the field has ever seen. How did they cope? Does it become all people management with an army of Teaching Assistants? What were the differences and common themes in their survival plans? What is working? What mistakes were made? How are they supporting differential learning for the students who don't have the same experience as others? How is diversity being affected? Finally, what advice would they have for others interested in venturing into the tsunami, and broaden participation at a massive scale?",CS10K Teachers by 2017?: Try CS1K+ students NOW! Coping with the Largest CS1 Courses in History,NA:NA:NA:NA:NA,2016
Tracy Camp:Stuart Zweben:Duncan Buell:Jane Stout,"The main goal of this panel is to share survey data being collected on booming enrollments in computer science. Survey data are being collected from two source types: institutions and students. The institution data are being collected through both the CRA Taulbee Survey, which represents computer science departments in North America with doctoral degrees, and the ACM NDC Survey, which represents computer science departments at U.S. 4-year and master's universities and colleges. The student data are being collected via the Data Buddies Project, run by the CRA's Center for Evaluating the Research Pipeline. The institution data will allow us to answer questions such as ""what 'boom' are institutions seeing and how are different types of institutions responding to this boom?"" The student data will allow us to answer questions such as ""why are students suddenly eager for our classes?"". The survey data will help us understand (1) the intensity of the ""boom"" at different types of institutions, (2) how institutions are responding to the increasing demand for computing education, and (3) whether the current enrollment ""boom"" represents the ""third bubble"" or whether it is here to stay. The data will also allow us to ask questions that attempt to understand the impact of the boom on underrepresented students. Data collection is ongoing; we will present results ""hot off the presses"".",Booming Enrollments: Survey Data,NA:NA:NA:NA,2016
Tiffany Barnes,NA,Session details: Demonstration Session,NA,2016
Samantha S. Foley:Joshua Hursey,"The OnRamp project provides a web portal which coaches users, primarily computer science (CS) undergraduate students, through a collection of interactive curriculum modules teaching them about parallel computing and the software ecosystem while allowing them to launch parallel applications on parallel compute environments (PCEs) from day one. There are a number of hurdles for instructors to incorporating a parallel and distributed computing (PDC) curriculum module into an existing course -- from setting up the materials to preparing the students to work on a remote PCE. The OnRamp project removes these hurdles allowing instructors to easily connect to PCEs, deploy existing PDC curriculum modules, and setup user accounts for a course in just a few minutes. This demonstration of the OnRamp project will show the process an instructor will go through to set up a ""workspace"" for a class with a few PCEs and curriculum modules. Additionally, we will show how students will interact with this workspace to explore the curriculum module and launch parallel jobs on actual PCEs. We will have time for questions following the demonstration and provide materials for instructors to get started using OnRamp in their courses.",OnRamp to Parallel and Distributed Computing: Web-portal for Teaching Parallel and Distributed Computing,NA:NA,2016
Jay Aikat:Michael K. Reiter:Kevin Jeffay,"We have developed education modules for topics in networking, security, and cloud computing. A networking instructor could use our modules to enhance the teaching of basic concepts by demonstrating these concepts with real experiments on GENI testbeds. Any systems instructor could use our security or cloud computing modules to begin teaching new topics, or enhance existing topics by adding hands-on experiments on GENI and CloudLab testbeds. Our NSF funded projects to develop these curricular modules have been successfully used by several instructors. Attendees at SIGCSE would comprise exactly the kind of audience, from varied institutions and dedicated to enhancing their curriculum, for whom we've built these modules. Our modules are freely available, and we are committed to helping instructors use our modules in their courses. The underlying testbeds, GENI and CloudLab, are also NSF-funded and thus freely available for instructors to use. Attendees will be provided a handout that contains relevant information, including contact for help, as they go back and begin using our education modules in their curriculum.","Education Modules for Networking, Cloud Computing, and Security in Systems Courses",NA:NA:NA,2016
Cliff Shaffer,NA,Session details: Paper Session: Databases,NA,2016
Alireza Ahadi:Vahid Behbood:Arto Vihavainen:Julia Prior:Raymond Lister,"The computing education community has studied extensively the errors of novice programmers. In contrast, little attention has been given to student's mistake in writing SQL statements. This paper represents the first large scale quantitative analysis of the student's syntactic mistakes in writing different types of SQL queries. Over 160 thousand snapshots of SQL queries were collected from over 2000 students across eight years. We describe the most common types of syntactic errors that students make. We also describe our development of an automatic classifier with an overall accuracy of 0.78 for predicting student performance in writing SQL queries.",Students' Syntactic Mistakes in Writing Seven Different Types of SQL Queries and its Application to Predicting Students' Success,NA:NA:NA:NA:NA,2016
Borja Sotomayor:Adam Shaw,"We present chidb, a medium to large-scale programming project where students implement the main components of a relational database management system, including B-tree data structures for tables and indexes, a database machine with registers and a selection of high-level and low-level instructions, and a SQL compiler targeting that machine. Moreover, chidb's SQL compiler's internal representation is a direct encoding of the relational algebra, whereby the theory that might otherwise be relegated to notes and blackboards is directly connected to practice and experience. The project uses the C programming language and is demonstrably suitable for use in advanced undergraduate courses; we have administered this project through five iterations of our databases course for advanced undergraduates. chidb is freely available online and customizable to suit the needs and tastes of any particular instructor.",chidb: Building a Simple Relational Database System from Scratch,NA:NA,2016
Yasin N. Silva:Isadora Almeida:Michell Queiroz,"The Structured Query Language (SQL) is the main programing language designed to manage data stored in database systems. While SQL was initially used only with relational database management systems (RDBMS), its use has been significantly extended with the advent of new types of database systems. Specifically, SQL has been found to be a powerful query language in highly distributed and scalable systems that process Big Data, i.e., datasets with high volume, velocity and variety. While traditional relational databases represent now only a small fraction of the database systems landscape, most database courses that cover SQL consider only the use of SQL in the context of traditional relational systems. In this paper, we propose teaching SQL as a general language that can be used in a broad range of database systems from traditional RDBMSs to Big Data systems. This paper presents well-structured guidelines to introduce SQL in the context of new types of database systems including MapReduce, NoSQL and NewSQL. A key contribution of this paper is the description of an array of course resources, e.g., virtual machines, sample projects, and in-class exercises, to enable a hands-on experience with SQL across a broad set of modern database systems.",SQL: From Traditional Databases to Big Data,NA:NA:NA,2016
Dennis Bouvier,NA,Session details: Paper Session: International Perspectives,NA,2016
Daniel T. Fokum:Daniel N. Coore:Yewande E. Lewis-Fokum,"We examine the gender balance of students in the Computer Science programme at a prominent Caribbean university---with campuses in Jamaica, Barbados, and Trinidad---from three perspectives: enrollment, retention and completion. In the US, in 2011, females accounted for approximately 17.7% of all graduands with a computing degree. These numbers are considered low, especially since when all subjects are taken into account, women account for more than 50% of American college graduates. On one campus of the Caribbean University, for the same year, the proportion of females graduating in Computer Science was 44.2%. These numbers are higher than the US national averages, even after normalizing them for the high female student population on the campus (approximately 70%). We introduce the notion of gender neutrality to represent these normalized ratios. Notably, we did not observe any statistically significant difference in the average performance of males and that of females, which is similar to the result found in the US. We discuss the methods that we used to make these comparisons.",The Performance of Female Computer Science Students across Three Caribbean Islands,NA:NA:NA,2016
Nora A. Escherle:Silvia I. Ramirez-Ramirez:Ashok R. Basawapatna:Dorit Assaf:Alexander Repenning:Carmine Maiello:Yasko Ch. Endo:Juan A. Nolazco-Flores,"Computer Science Education Week activities, featuring online? programming tools embedded with tutorials, report large participation numbers. However, to truly broaden participation, activities need to be made accessible in international contexts. In 2014, Tecnológico de Monterrey and Instituto de Innovación y Transferencia de Tecnología de Nuevo León, modified the Scalable Game Design CS Ed Week activity to include a Mexican feasibility pilot study. The goal of the pilot was to broaden participation in Computer Science in Mexico by creating interest and demand in further activities, including launching of 2015 Mexico CS Ed Week. This paper reviews the initial results of this 2014 pilot, including the discussion of the unique challenges faced in this context, and examines efforts to make this activity more accessible and successful. In addition to pilot data highlighting future activity improvements, initial retention results show that despite challenges, Mexican students were able to effectively use the modified activity to create games on par with U.S. students.",Piloting Computer Science Education Week in Mexico,NA:NA:NA:NA:NA:NA:NA:NA,2016
Saquib Razak:Huda Gedawy:Wanda P. Dann:Donald J. Slater,"In this paper, we describe the initial results of the formative phase of a project that crosses international borders. Alice in the Middle East (Alice ME) is a project designed to adapt the Alice software, develop new curricular materials, and provide professional development for teachers and students in the Middle East. For those who may be considering a collaborative project that would be conducted across international borders, we share lessons learned.",Alice in the Middle East: An Experience Report from the Formative Phase,NA:NA:NA:NA,2016
Ria Galanos,NA,Session details: Paper Session: Software Testing,NA,2016
Chris Wilcox,"Enrollments in introductory computer science courses are growing rapidly, thereby taxing scarce teaching resources and motivating the increased use of automated tools for program grading. Such tools commonly rely on regression testing methods from industry. However, the goals of automated grading differ from those of testing for software production. In academia, a primary motivation for testing is to provide timely and accurate feedback to students so that they can understand and fix defects in their programs. Testing strategies for program grading are therefore distinct from those of traditional software testing. This paper enumerates and describes a number of testing strategies that improve the quality of feedback for different types of programming assignments.",Testing Strategies for the Automated Grading of Student Programs,NA,2016
Bruno Henrique Pachulski Camara:Marco Aurélio Graciotto Silva,"Students usually have difficulties assimilating basic contents of introductory programming disciplines. Test-Driven Development (TDD) is an interesting approach to address this issue, but it does not focus on quality with respect to software testing. This study aims to verify the effectiveness of the use of software testing criteria for producing test cases with higher quality in the context of education with TDD. We used the test-driven development technique with a change in the refactoring step, adding an activity for creating test cases using software testing criteria. We performed two experimental studies to evaluate the effectiveness of the technique. Each study comprised two groups: one using traditional TDD and the other using TDD with test criteria, both having developed the same software. The results showed that groups applying the proposed intervention produced better test cases, with greater coverage, and not disrupting TDD. Moreover, we could observe that, in general, the test set for groups using TDD with criteria was more efficient, getting greater coverage with fewer test cases than groups using plain TDD.",A Strategy to Combine Test-Driven Development and Test Criteria to Improve Learning of Programming Skills,NA:NA,2016
Grant Braught:James Midkiff,"This paper examines the effects of tool design on student testing behavior in an introductory course. Two tools are considered: BlueJ and WebCAT. A small modification was made to the BlueJ test recording interface to encourage students to engage more deeply in the testing process. A larger percentage of tests submitted by students using the modified BlueJ interface were correct. Further, the solutions they submitted contained fewer lines of code while being similarly complete and correct. Evidence is given that students using both BlueJ versions often rely on Web-CAT to validate their solution methods before testing the methods themselves. In response a new Web-CAT grading plug-in is proposed that we believe will better promote an incremental code-a-little test-a-little development style.",Tool Design and Student Testing Behavior in an Introductory Java Course,NA:NA,2016
Tiffany Barnes,NA,Session details: Paper Session: CS Principles,NA,2016
Jeff Gray:Jonathan Corley:Brian P. Eddy,"CS Principles is a new AP course being developed by the College Board and introduced into high schools across the nation. To aid and encourage the adoption of the new CSP course, we have developed a Massively-Open Online Course (MOOC) over the past two years that serves as a professional development (PD) offering for CS Principles. Additionally, we have provided a parallel face-to-face workshop for a smaller group of MOOC participants. In this paper, we discuss our experiences conducting PD using a MOOC. We investigated the impact of the face-to-face event and online community on participants' completion and performance in the course. Our analysis suggests that participants who have even just a few days of face-to-face engagement tend to be more successful in completing a multi-week MOOC.",An Experience Report Assessing A Professional Development MOOC For CS Principles,NA:NA:NA,2016
Jean Griffin:Tammy Pirmann:Brent Gray,"This paper reports on an investigative, qualitative case study of the teaching practices of two public high school Computer Science teachers as they teach courses that are fully or partially aligned with the CS Principles framework. One teaches at an urban, high minority STEM school, the other at a middle class suburban school. Ethnographic methods were used to collect data via classroom observations and teacher interviews. Within-case and across-case analyses are presented which characterize the teachers' practices regarding pedagogy, curricula, creative activities, problem-solving activities, and management of social interactions. The findings provide detailed insights regarding the challenges these teachers face and the strategies they use, which may be useful to teachers in a variety of settings at both the high school and college/university levels.","Two Teachers, Two Perspectives on CS Principles",NA:NA:NA,2016
Thomas W. Price:Veronica Cateté:Jennifer Albert:Tiffany Barnes:Daniel D. Garcia,"Computer Science Principles (CSP) will become an Advanced Placement course during the 2016-17 school year, and there is an immediate need to train new teachers to be leaders in computing classrooms. From 2012-2015, the Beauty and Joy of Computing team offered professional development (PD) to 133 teachers, resulting in 89 BJC CSP courses taught in high schools. Our data show that the PD improved teachers' confidence in our four core content categories and met its primary goal of training teachers in equitable, inquiry-based instruction. In this paper, we present the evolution of the BJC PD, its challenges and lessons that we learned while continually adapting to teachers' needs and contexts.","Lessons Learned from ""BJC"" CS Principles Professional Development",NA:NA:NA:NA:NA,2016
Roy Pargas,NA,Session details: Paper Session: Beale St. Sampler,NA,2016
Benedict Chukuka:Michael Locasto,"Existing ethical agreements, as applicable in the teaching of information security courses, typically spell out rules on what students should and should not do. The main problem is that the question of what students should or should not do is not a settled issue, because personal stances on questions of morality and ethics fundamentally influence the ethical recommendations that teachers present to their students. In light of the growing level of malice in the computing domain, experts have highlighted the importance of information security ethics by debating the need for a standard code of ethics for information security. Arguably, differences in ethical stance, with the effect of divergent ethical agreements, will not efficiently serve the purpose of effective universal application of ethics in the field of information security education. Examining current ethical policies in information security courses can provide insight about the prevailing ethics within the information security community. Moreover, understanding what the prevailing philosophies on ethics are within the community, in terms of how they actually diverge or converge, will present a good projection of how a standard policy on ethics may be feasibly applicable in a future regulatory environment. This way, we may be able to forecast the nature of ethical norms that future professionals will accept or allow to be imposed on them. Therefore, in our survey, we analyze ethical agreements on information security courses to identify the nature of existing agreements. We determine the commonalities of these agreements and derive an ethical policy prototype that includes the common elements of 329 ethical policies.",A Survey of Ethical Agreements in Information Security Courses,NA:NA,2016
James W. McGuffee:E. Kent Palmer:Indira R. Guzman,"In December 2013, the ACM and IEEE-Computer Society sponsored joint Task Force on Computing Curricula released the comprehensive Computer Science Curricula 2013 (CS2013). At the same time, a geographically diverse group of volunteers, known as the CS2013 Assessment Council, met to begin the work of creating a valid three option multiple-choice exam to comprehensively assess the tier-1 core learning outcomes of CS2013. This project has been facilitated by the Institute for the Certification of Computing Professionals (ICCP). This paper describes the motivation and desire to create an assessment exam for the CS2013 tier-1 core learning outcomes, a brief review of the relevant research in psychometrics and educational assessment, the process used to create test items for this exam, the alpha testing and analysis of test questions, the beta testing and analysis of the complete exam, and the current state of the completed exam that is now available for use.",Assessing the Tier-1 Core Learning Outcomes of CS2013,NA:NA:NA,2016
Joel C. Adams:Patrick A. Crain:Christopher P. Dilley:Serita M. Nelesen:Javin B. Unger:Mark B. Vander Stel,"Multicore processors are now the standard CPU architecture, and parallel and distributed computing (PDC) is in the CS2013 core curriculum [9]. It is now the task of CS educators to begin creating pedagogical materials that will help their students understand PDC concepts. In this paper, we present TSGL (the thread-safe graphics library), a C++11 library that safely supports multithreaded graphics. We also present several multithreaded visualizations that illustrate how TSGL can be used to visualize the Parallel Loop design pattern, and present evidence that TSGL can improve student mastery of this parallel abstraction.",Seeing Is Believing: Helping Students Visualize Multithreaded Behavior,NA:NA:NA:NA:NA:NA,2016
Mark C. Lewis:Douglas Blank:Kim Bruce:Peter-Michael Osera,NA,Uncommon Teaching Languages,NA:NA:NA:NA,2016
Martha Kosa,NA,Session details: Lightning Talk Session,NA,2016
Jennifer A. Rode:Andrea Marshall:Houda El Mimouni:Jennifer Booker,"While unquestionably research on CSE education is centered in the SIGCSE conference, other venues such as the International Joint Conference on Pervasive and Ubiquitous Computing (Ubicomp), and the Conference on Tangible, Embedded and Embodied Interaction (TEI), and the Conference on Interaction Design and Children (ICD) explore CS education focusing on educational play and novel off the desktop techniques for CS education. Unfortunately, this literature remains isolated from the mainstream CSE literature, and this lightning talk attempts to help contribute to rectifying this by presenting a core recent educational theory ""Computational Making"" and discuss its contributions to CSE.",Computational Making (Abstract Only),NA:NA:NA:NA,2016
Colleen M. Lewis,"Let's talk about how we teach upper-division courses! CS pedagogical content knowledge - i.e., knowledge of how to teach computer science - is mostly undocumented. This is particularly true for upper-division courses and in some cases this upper-division content is much more difficult to teach than CS1 or CS2 content! CSTeachingTips.org is an NSF-sponsored project to help curate tips that allow teachers to anticipate students' difficulties and build upon students' strengths. The lightning talk will be a call to action: first to share tips on Twitter @CSTeachingTips and at our CSTeachingTips booth and second to create research directions that will help us develop pedagogical content knowledge that extends beyond CS1.","You Wouldn't Know It from SIGCSE Proceedings, but We Don't Only Teach CS1 (Abstract Only)",NA,2016
Mark McCartin-Lim,"This lightning talk describes the development of Complexity Tutor, an interactive tutoring system to assist students in understanding theoretical models of computation and computational complexity. Many computer science students, especially ones lacking a strong background in mathematics, struggle to learn these subjects with the traditional regimen of lectures and written homework assignments. When they are in the process of developing proofs for these homework assignments, they receive no immediate feedback that would illuminate their errors. We intend to remedy this. The main components of our system will entail a novel framework for constructing proofs, as well as a framework for producing algorithmic reductions. The first framework provides continuous feedback to the student on their approach and progress toward the needed proof. The second framework involves analyzing code the student writes in a pseudocode-like language, such as Python. Currently, we have prototypes, which show how to use our frameworks to construct NP-completeness reduction proofs. We are planning to test the efficacy of this system in theoretical computer science courses at the University of Massachusetts Amherst.",Complexity Tutor: Developing an Interactive Tutoring System for Computational Complexity (Abstract Only),NA,2016
Yousra Javed:Heather Richter Lipford,"The importance of usability in security and privacy technologies is now widely accepted. A vibrant and growing research community in usable security and privacy has contributed a wide range of results in the past 15 years. Despite this, the vast majority of computing students are being exposed to very little of this discipline. In this presentation, we describe our ongoing efforts to enable broader education in this area. We are leading the construction of a body of knowledge for usable security and privacy education, to serve as an organizing framework for the discipline. We are also creating online learning modules for several key topics, as resources for faculty and students. We seek feedback on these resources as well as faculty participants who are interested in utilizing and evaluating the learning modules.",A Body of Knowledge for Usable Security and Privacy Education (Abstract Only),NA:NA,2016
James C. Finocchiaro,"This lightning talk describes the U.S. Army's Cyber Leader Development Program (CLDP) which is a recently implemented initiative designed to increase and improve undergraduate cyber education for United States Military Academy (USMA) and Reserve Officers' Training Corps (ROTC) cadets. The CLDP takes a holistic viewpoint towards cyber education. Its methodology provides a model for all educators on how to integrate out-of-class enrichment opportunities with an in-class curriculum. CLDP is a voluntary program that has about 800 hours of required out-of-class activities. These required activities include being assigned a formal mentor, participation in a security or hacking club, attending a security conference, participating in security training, and participating in an internship. This program is in its inaugural year with ROTC and in its second year at the United States Military Academy. The focus of this lightning talk will be to highlight the central aspects of the program and to describe how such programs would improve the holistic development of any students, security or otherwise. CLDP is not just a working military program -- it is an exportable concept that presents an applicable model for the development of cyber security students destined to support corporate America as well as government agencies at federal, state, and local levels.",U.S. Army's Cyber Leader Development Program (Abstract Only),NA,2016
Michael A. Ball,"This lightning talk describes the idea of ""chat ops"" applied to the classroom. Chat Ops is a (growing) industry practice which uses instant messaging (such as IRC, or Slack) to automate common development or monitoring tasks, such as maintaining and deploying a website. Instead of deploying a site, we use the process of ChatOps to help run large classes, and even individual class sections by automating tasks that are tedious or error prone. We've extended a bot framework, Hubot, with the tools that we need. We can automate releasing student scores, updating student's access to assignments, or handling in-class check offs with just a line of plain text. Chat messages also have the benefit that they are loggable and show everyone on the staff what's going on and why. We'd like to show why augmenting traditional email systems with chat messages can help improve communication and save time, but can also be an enjoyable way to build a community.",Using Instant Chat for Fun and for Profit to Run a Large Class (Abstract Only),NA,2016
Adam S. Carter:Christopher D. Hundhausen,"With the widespread availability of massive amounts of student programming data, we are witnessing a digital gold rush as researchers attempt to make sense of students' programming behaviors. In prior research, we incorporated programming data into a statistical model that accounted for a significant amount of a student's course performance. In a separate line of research, we explored how online social networking tools might be leveraged for pedagogical purposes. Rather than treating our explorations of students' programming and social behaviors as separate research spaces, we are next considering the interplay between social behavior, programming behavior, and course performance. As a first step, we incorporated online social participation into our statistical model of programming behaviors. The outcome was quite promising: we witnessed a 30% increase in our model's effect size. This result would seem to indicate that neither programming behavior nor social behavior alone can fully account for student performance. Encouraged by this result, we are now considering how social interaction influences programming decisions and vice versa. In particular: After receiving help on a social network, what changes are made to code? Are these changes more or less likely to move the student closer to a correct solution? How do students address coding problems when their questions are left unanswered? At what points in the programming process are students more likely to pose questions? Similarly, when are students more willing to offer help? How can we use this knowledge to better identify students who are struggling?",Crossing the Streams: Exploring the Interplay between Students' Online Social Activity and Programming Behavior (Abstract Only),NA:NA,2016
Bonnie K. MacKellar,"Many university software engineering/capstone courses attempt to teach students the importance of communication by having them work collaboratively on a large scale project. This can be a sink-or-swim approach. There is a real risk of complete project failure, and while students may learn that coordination is important, it isn't clear they learn how to do it effectively. The CoordinationTracker project uses social network analysis both to study coordination in student project teams, and to develop an automated tool to support students learning this skill. In this talk, I will briefly present some results using social network analysis and socio-technical congruence measures to study communication in a software engineering course, and then will describe the design of the proposed CoordinationTracker tool, which will use socio-technical congruence measures to give feedback to students. For example, as a student works on a file, an automated reminder capability will suggest who the student should be communicating with in order to prevent unwanted effects on components dependent on the file. The system also will have a reporting component which will allow each student, as well as the instructor, to view his or her coordination performance via graphs. Once CoordinationTracker has been implemented, it will be tested on several iterations of the software engineering course in order to determine whether students improve their coordination while using the tool. I am interested in audience feedback on the design of this tool as well as possible involvment with the project.",Social Network Analysis as a Tool for Understanding Student Interaction in Project-based Courses (Abstract Only),NA,2016
Anurag Nagar,"This lightning talk will focus on our experience of teaching a graduate level Big Data course. Traditionally, such courses have relied on ""WordCount"" style problems, which involve computing the simple count of words in a corpus of documents using the distributed MapReduce framework. While this is certainly a good way of introducing the students to the BigData framework, more real world examples are needed to motivate students. Further, since a majority of courses require students to work on a large project as part of this course, it is essential that they have access to a diverse and interesting set of data. In our course, we experimented with various data sources, such as text from real-time, streaming news articles, twitter feeds, and property price data from various zip codes in a county. The students were involved in gathering the data, designing and implementing MapReduce style algorithms for distributed processing, and presenting their findings. The feedback was extremely positive and we would like to develop this approach further. In this talk, we will present some ideas on how to collect and analyze real world datasets that are suitable for Big Data analysis. We would also encourage further inputs from the audience about this topic.",Enhancing Teaching of Big Data by Using Real World Datasets,NA,2016
Jane Stout:Burçin Tamer,"Cultural stereotypes about women's ""fit"" and ability in technical fields, like computing, are alive and well. These cultural beliefs can make their way into women's personal belief system. When this happens, women's self-conceptions in computing suffer, namely, self-efficacy, sense of belonging, and identification with computing. The current research examines whether collaborative learning methods (pair programing; supplemental instruction) can erase the negative relationship between women's endorsement of negative gender stereotypes and their computing self-concept. Longitudinal survey data from 48 women computing majors indicated that participation in collaborative learning activities nullified the negative impact of gender stereotype endorsement on women's self-efficacy, sense of belonging, and identification with computing. These findings showcase the benefits of existing pedagogical strategies in computing on increasing the likelihood that women will persist in a computing career path.",Collaborative Learning Eliminates the Negative Impact of Gender Stereotypes on Women's Self-Concept (Abstract Only),NA:NA,2016
Natalie Linnell:Nicholas Tran,"We have transformed our first programming course from an introduction to programming, to an introduction to Computer Science. We have done this in part by broadening the topics discussed. We now incorporate discussion of social topics like privacy and humanitarian technology, and ""big ideas in CS"" like how the Internet and databases work. We have also embedding many of our programming examples in applications from fields like biology and psychology. The other major feature of this course is that we have separated teaching problem-solving from teaching a programming language. In lecture, we discuss problem-solving with high-level programming constructs like conditionals and loops, using only pseudocode. In our new lab section, students are taught how to translate those ideas into C++ code. This allows us to free the initial learning of problem-solving from the complications of a language like C++. A unique feature of these changes is that it is possible to offer multiple different labs, in different languages, in conjunction with the same lecture section. It is our intention to start offering labs in different languages starting in Fall 2016. Our primary goal in making these changes was to improve recruitment and retention, especially among women. We also hoped to improve the course's utility as an elective for non-majors. Our evaluation of a pilot offering suggests that the re-designed course is likely to improve retention, without negatively impacting programming knowledge. We have now completely adopted the re-designed course, and are continuing to gather data to evaluate the new design.","A ""Grand Tour"" of Computer Science: Re-Designing CS1 for Breadth and Retention (Abstract Only)",NA:NA,2016
Amber Wagner:Jeff Gray:Daniela Marghitu:Andreas Stefik,"Block languages (e.g., Scratch, Snap!, Alice, App Inventor, Blockly) offer a gentle introduction to programming and have been adopted widely in both K-12 and CS0 courses. However, block languages often are dependent on the mouse/keyboard for input and typically are visual in their output and representation. Because of these dependencies, students with a disability (e.g., mobility limitations or vision impairment) generally are unable to use block languages, thereby reducing the opportunities for broader participation in computational learning activities. Given the increasing need to broaden the participation of computing to those with diverse skills and backgrounds, it is important that the tools used to initiate the earliest entre into computing do not erect immediate roadblocks that impede initial interest and opportunity. There are many variations of user interfaces and assistive technologies that benefit those who may have difficulties utilizing traditional Graphical User Interfaces (GUIs), but these tools often cannot be used universally across block languages. As more block languages are being developed and integrated into K12 and University curriculum, it is imperative that accessible solutions are discussed and implemented. These discussions require participation from the block language developer community, accessible computing community, and those educators who encounter accessibility needs among the students in their classrooms. The goal of this lightning talk is to call attention to the need for more accessible block-based programming environments and to spark conversation surrounding possible standard accessibility APIs that could possibly be supported by block language environment tool developers.",Raising the Awareness of Accessibility Needs in Block Languages (Abstract Only),NA:NA:NA:NA,2016
Helen Hu,NA,Session details: Paper Session: Computer Engineering,NA,2016
Meriel Huggard:Ciarán Mc Goldrick,"Unmanned aerial vehicles, also known as drones, are often characterized as representing the next big disruptive change in our everyday interaction with technology. Indeed some commentators have suggested that their impact will be as significant as that of the Internet. It is thus incumbent upon modern, foresightful educators to integrate these platforms into the curriculum in order to more fully equip the next generation of professional engineers and computer scientists with the skillsets and competences needed to realize the full potential of these devices. In this paper we reflect on the challenges encountered when integrating drone technology into an existing project-based freshman design module. The objective was to introduce the drone as a relatively seamless extension of an existing problem set for a design project involving an autonomous vehicle. In doing so, critical factors such as engineering ethics, health and safety, and regulatory constraints; in addition to implementation challenges; are directly addressed and quantified. Lessons learned and reflections on best practice for the use of drone technology in the laboratory are adduced and articulated.",Droning On: Reflections on Integrating UAV Technology into a Computer Engineering Design Laboratory,NA:NA,2016
Jalal Kawash:Andrew Kuipers:Leonard Manzara:Robert Collier,"It is widely recognized that motivating students in an undergraduate assembly language course is a tremendous challenge, principally because of the perception that the subject matter is both difficult and tedious. The Raspberry Pi is a small and inexpensive single-board computer that was created for educational purposes, and in this paper we describe how we successfully incorporated this device into the curriculum of an undergraduate assembly language course. We describe, in detail, the objectives for this course and the dedicated lab that uses the Raspberry Pi as an embedded device, and then evaluate the effectiveness of our approach. Our findings (obtained by exploring changes in student performance and examining the results of an engagement/enjoyment survey) strongly indicate that the introduction of the Raspberry Pi was well received by the students and contributed positively to their learning outcomes.",Undergraduate Assembly Language Instruction Sweetened with the Raspberry Pi,NA:NA:NA:NA,2016
Viggo Kann:Anna-Karin Högfeldt,"Study programs are a central component of the higher education system, in particular for professional education. However, for many education programs, especially in engineering, a large part of the beginner students fail to reach graduation. A reason for this could be lack of program coherence. In order to strengthen the program coherence of the computer science and engineering program at KTH, a program integrating course was introduced in 2010. The course runs at low speed through the first three years of the program. It consists of reflection seminars in small cross-grade groups of students, led by a professor as a mentor. In the seminars the students exercise self-regulated learning abilities, such as metacognitive skills, when reflecting, discussing and acting upon different topics, such as study techniques, procrastination, studying abroad, plagiarism and responsibility, and the professional life after the studies. We have studied and found both perceived and measurable positive effects of the program integrating course. In this paper we describe effects on the students' study skills, their ability to reflect and interest in exchange studies.",Effects of a Program Integrating Course for Students of Computer Science and Engineering,NA:NA,2016
David J. Stucki,NA,Session details: Paper Session: Out-of-school Activities,NA,2016
Matthew Forshaw:Ellis Solaiman:Oonagh McGee:Hugo Firth:Paul Robinson:Ryan Emerson,"This paper describes the development and delivery of a course, in close collaboration with industry, over a ten-year period. We describe the details of this collaboration, which aims to equip students with collaborative software development experience, incorporating open source, Enterprise Middleware technologies and industry best practices. In presenting our case study we share valuable insights, into the challenges and opportunities, for all parties involved. We present the reflections of all stakeholders, including; the course leader, the industrial partner, lab demonstrators, and students. We also present the results of our investigations to track the employment of our graduates over the last five years, identifying that all students who responded are employed within relevant positions or undertaking further study. Based on our successful delivery of the course, in this paper we make all tools and teaching materials available to the open source community, for delivery at other institutions. We emphasise the importance of the continued involvement of industry partners to inform pedagogical practices within Computer Science.",Meeting Graduate Employability Needs through Open-source Collaboration with Industry,NA:NA:NA:NA:NA:NA,2016
Graham Farr:Barbara Ainsworth:Chris Avram:Judy Sheard,"Computer history tours are a new way to educate people about our discipline and its history. We describe the introduction of such tours and their use in curriculum enrichment, outreach, and academic community-building. These tours give historical and social context to the development of topics in the curriculum, and demonstrate to students the universality of some of the principles they learn. The city of Melbourne, Australia, serves as an illustration, but computer history tours can be run in many cities of various sizes, and we give advice on how to do this.",Computer History on the Move,NA:NA:NA:NA,2016
Maureen Doyle:Candace Gibson:Michelle Melish:Rees Storm,"We describe and report on a study away course held in the spring of 2015 that brought computer science students from a Midwestern university to visit companies in the Bay Area in California as part of their study of agile software development. While it may be a sufficient goal to offer study away as an encouragement for future participation in study abroad programs, study away has benefits in and of itself. In actuality, study away can build students' self-confidence, aid them in being accepting of different ideas, and help them to understand a different area of the world. The class was offered as a 1-credit computer science course and students met weekly leading up to the trip, then once again after. The class included a one-week visit to the San Francisco area, with visits to two universities and five high-tech companies. Eight undergraduates and one post-baccalaureate participated at a cost of $1700 each. Students were required to submit a five-page paper and were separated into two teams to develop and present posters at the university's student research symposium. The course was a success due to the investment of the Chief Information Officer of the university, the Office of Education Abroad, the department of Computer Science, and academic advising. Students reported upon immediate return-then once again three months later-that their interest in computer science had increased, that they had gained an understanding of a different region of the United States and that they were more accepting of different ideas.",Agile Software Development Study Away,NA:NA:NA:NA,2016
Sue Fitzgerald,NA,Session details: Paper Session: Classroom Techniques,NA,2016
Roya Hosseini:Teemu Sirkiä:Julio Guerra:Peter Brusilovsky:Lauri Malmi,"Code examples are commonly used learning resources that help students grasp various programming structures and concepts. However, example code usually requires explanations about what each line or part of the code does. Otherwise, students may find it difficult to follow an example. In this paper, we compare two types of code examples that use different techniques to describe important concepts in the code: annotated and animated examples. The former displays an explanation for a subset of lines in plain text, whereas the latter visualizes code execution. We studied the use and impact of these enhanced examples, provided as non-mandatory practice content, in three introductory Java courses. Our results suggest that animated examples are more engaging and have a positive impact on students' learning. As compared to annotated examples, students spent more time with animated examples and more likely completed them. Also, a positive relationship was found between the number of explored animated examples and the overall course grade.",Animated Examples as Practice Content in a Java Programming Course,NA:NA:NA:NA:NA,2016
Amanda M. Holland-Minkley:Thomas Lombardi,This paper describes the introduction of a feedback-revision-resubmission cycle for homework assignments in two introductory courses. The goal was to increase student engagement with homework assignments as an important tool for concept practice and mastery. A review of the effects in both an object-oriented programming course and a relational databases course shows positive outcomes as reflected in both course evaluations and a decision tree analysis of student performance on assignments.,Improving Engagement in Introductory Courses with Homework Resubmission,NA:NA,2016
Toby Dragon:Paul E. Dickson,"Hand-drawn memory diagrams are frequently used in computer science to demonstrate new programming concepts and support students' understanding of program functionality. These diagrams often vary among courses, instructors, and languages, which confuse students moving through the curriculum. Consistent memory diagrams throughout a curriculum not only alleviate confusion but offer a scaffold for students to transfer their understanding between courses taught at different levels of complexity and in different languages. We describe our standardized system for memory diagrams as it is used in our curriculum to demonstrate this scaffolding process through multiple concepts and programming languages.",Memory Diagrams: A Consistant Approach Across Concepts and Languages,NA:NA,2016
Robert McCartney,NA,Session details: Paper Session: Computing in Middle School,NA,2016
Brenda Castro:Terrence Diaz:Marissa Gee:Rebekah Justice:David Kwan:Preethi Seshadri:Zachary Dodds,"This paper shares the five-year development and deployment of MyCS, a CS curriculum for ""middle-years students,"" roughly in US grades 4-10. Consistent with many middle-years curricula, MyCS promotes positive individual identification with its field, CS, especially as it intersects with other facets of students' maturing identities. A detailed assessment of students' MyCS experiences reveal significant positive outcomes relative to a control group, as well as many neutral (no-distinction) results relative to the control. Feedback from teacher and administrators have refined MyCS and, perhaps more importantly, built curricular bridges to both elementary- and high-school CS. By tracing MyCS's assessment and evolution, this work highlights how two districts used a middle-years CS foothold from which to establish deeper, district-wide changes in identity.",MyCS at 5: Assessing a Middle-years CS Curriculum,NA:NA:NA:NA:NA:NA:NA,2016
Shuchi Grover:Roy Pea:Stephen Cooper,"In this paper, we describe research conducted around a 7-week curriculum designed to introduce middle school students to computer science with a focus on algorithmic thinking and programming. The pedagogical ideas employed in this curriculum were drawn from past research. Empirical investigations over two studies in a public middle school in the US examined changes in students' understanding of algorithmic constructs and the factors affecting that learning. Multi-level analyses revealed that students in both studies (1) achieved substantial learning gains in algorithmic thinking skills and significant growth towards a more mature understanding of computing as a discipline, and (2) found certain CT ideas and constructs more difficult than others. Prior computing experiences and math and English ability were found to be predictors of learning outcomes. Extracurricular experiences with technology also appeared to impact outcomes.",Factors Influencing Computer Science Learning in Middle School,NA:NA:NA,2016
Shuchi Grover:Daisy Rutstein:Eric Snow,"Nationwide, efforts are focusing on taking computer science (CS) to scale in high school classrooms through the Exploring Computer Science (ECS) and AP CS Principles (CSP) courses. Recent inroads are also being made to take structured introductory curricula to middle school classrooms. Often, a starting point for teaching CS in middle and high school is a discussion around the seemingly simple question ""What is a computer?"" The question is aimed to help learners understand through debate and discussion what makes a computer a computer. This paper reports our analysis of (a) middle school students' discussions around this question, and (b) high school students' responses to an assessment question measuring this understanding. Our analyses of students' comments and responses reveal that a discussion around ""what is a computer?"" may be problematic for students, as it tends to focus on the tool, the ""computer."" We suggest that the discussion needs re-framing to focus instead on computing and computation.",What Is A Computer: What do Secondary School Students Think?,NA:NA:NA,2016
Joe Hummel,NA,Session details: Paper Session: Games,NA,2016
Chang Yun:Hesam Panahi:Zhigang Deng,"In this paper, we introduce a multidisciplinary and multifaceted pedagogical approach to enhance game design education in computer science curriculum and assess its effectiveness using outcomes from Microsoft US and World Imagine Cup competitions in the game design category. We offer team project-based courses that cover multiple disciplines such as computer science, art and animation, game design, production, and business and entrepreneurship. Our students gain fundamental knowledge and skills from the multidisciplinary approach and utilize them to undergo a systematic game development process over two semesters. We also implement a unique grading system that includes ranking duels to promote the competitiveness among students which ultimately improves the quality of every game designed in our courses. We successfully demonstrate the effectiveness of our approach with results from the Microsoft Imagine Cup competitions - dozens of our student teams have been nationally and internationally recognized in the past eight consecutive years.","A Multidisciplinary, Multifaceted Approach to Improve the Computer Science based Game Design Education: Methodology and Assessment",NA:NA:NA,2016
Britton Horn:Christopher Clark:Oskar Strom:Hilery Chao:Amy J. Stahl:Casper Harteveld:Gillian Smith,"Computer Science (CS) education at the middle school level using educational games has seen recent growth and shown promising results. Typically these games teach the craft of programming and not the perspectives required for computational thinking, such as abstraction and algorithm design, characteristic of a CS curriculum. This research presents a game designed to teach computational thinking via the problem of minimum spanning trees to middle school students, a set of evaluation instruments, and the results of an experimental pilot study. Results show a moderate increase in minimum spanning tree performance; however, differences between gender, collaboration method, and game genre preference are apparent. Based on these results, we discuss design considerations for future CS educational games focused on computational thinking.",Design Insights into the Creation and Evaluation of a Computer Science Educational Game,NA:NA:NA:NA:NA:NA:NA,2016
Stephan Krusche:Barbara Reichart:Paul Tolstoi:Bernd Bruegge,"Games development brings fun into the software engineering curriculum, but it is a practical activity that educators cannot teach in traditional lecture-based environments. Including pedagogical aspects of problem-based, cooperative, blended and experiential learning is necessary to achieve a high learning experience. In this paper we describe and evaluate a block course in which we ask students with almost no mobile application development experience to create games in just two weeks. We offer the course in two different modes, for beginners who learn games development, and for tutors who help us in the organization of the course and in the teaching activities. Apart from games development and game design, students learn modeling, design patterns and software configuration management. They practice soft skills in team work, present their games to their classmates using Pecha Kucha and publish their games into the App Store. Our evaluations show that students appreciate the great learning experience.",Experiences from an Experiential Learning Course on Games Development,NA:NA:NA:NA,2016
Nick Parlante:Julie Zelenski:Baker Franke:Arvind Bhusnurmath:Karen Her:Kristen Gee:Eric Manley:Timothy Urness:Marvin Zhang:Brian Hou:John DeNero:Josh Hug:Kevin Wayne,"I suspect that students learn more from our programming assignments than from our much sweated-over lectures, with their slide transitions, clip art, and joke attempts. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials -- handouts, data files, starter code -- that make each assignment ready to adopt. The Nifty Assignments home page, http://nifty.stanford.edu, gathers all the assignments and makes them and their support materials freely available. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments. See the nifty.stanford.edu home page for more information.",Nifty Assignments,NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2016
Martha Kosa,NA,Session details: Demonstration Session,NA,2016
Kalpathi Subramanian:Jamie Payton:David Burlinson:Mihai Mehedint,"This demo introduces participants to the concepts and application of BRIDGES, a software infrastructure designed to facilitate hands-on experience for solving traditional problems in introductory computer science courses using data from real-world systems that are of interest to students, such as Facebook, Twitter, and Google Maps. BRIDGES provides access to real-world data sets for use in traditional data structures programming assignments, without requiring students to work with complex and varied APIs to acquire such data. BRIDGES also helps the students to explore and understand the use of data structures by providing each student with a visualization of operations performed on the student's own implementation of a data structure. BRIDGES visualizations can be easily shared (via a weblink) with peers, friends, and family. Demo attendees will see (and possibly engage in) hands-on experience with BRIDGES and will have the opportunity to discuss how BRIDGES can be used to support various introductory computer science courses. Additionally, the demo will complement our oral presentation of our work at SIGCSE, by providing hands-on demonstrations of BRIDGES.",Bringing Real-World Data And Visualizations Into Data Structures Courses Using BRIDGES,NA:NA:NA:NA,2016
Amey Karkare:Nimisha Agrawal,"Compiler design is an important subject in the computer science curriculum for undergraduates. In a typical Compiler's course, about 15%-22% of the total time is spent on syntax analysis phase (also called parsing techniques). A number of concepts are introduced to explain the internals of parsers, for example first set, follow set, item set, goto and closure set, parse tables and the parsing algorithms, making the understanding difficult. While parser generators (YACC and its variants) allow the students to experiment with grammars, the working of the parser generated by the tools is still opaque. We present ParseIT, a web based tool to help students understand the concept of parsing in an undergraduate Compiler Design course. Given a grammar, the tool generates multiple choice questions for concepts related to parsing. The tool evaluates students' attempts and provide hints for incorrect attempts. The hints are also generated in the form of specific questions about any correct choice that is missed or any incorrect choice that is selected. For grammars that can be parsed through the textbook LL or LR algorithms, an interesting form of hint generated is an input string that helps student identify incorrectly filled cells of a parsing table. The tool enables interactive and active learning of parsing concepts, resulting in a better understanding.",ParseIT: A Tool for Teaching Parsing Techniques,NA:NA,2016
Judy Sheard,NA,Session details: Paper Session: Security,NA,2016
Nathan Backman,"Attack/Defend computer security contests require participants to leverage knowledge obtained from a variety of courses across a computer science curriculum, providing undergraduates with a novel and exciting opportunity to challenge both themselves and their peers. However, there are limited opportunities to participate in such contests and none of them is well suited for novices in computer security. This paper describes the design of an Attack/Defend security contest that is geared towards undergraduates who have little exposure to computer security and require a more gentle introduction. We provide implementation details of the framework that supports this contest and offer lessons learned over the past three years in growing our contest into an intercollegiate event that is deployed on a cloud infrastructure to support multiple, concurrently operating contest sites which span three timezones.",Facilitating a Battle Between Hackers: Computer Security Outside of the Classroom,NA,2016
Serge Egelman:Julia Bernd:Gerald Friedland:Dan Garcia,"A basic understanding of online privacy is essential to being an informed digital citizen, and therefore basic privacy education is becoming ever more necessary. Recently released high school and college computer science curricula acknowledge the significantly increased importance of fundamental knowledge about privacy, but do not yet provide concrete content in the area. To address this need, over the past two years, we have developed the Teaching Privacy Project (TPP) curriculum, http://teachingprivacy.org, which educates the general public about online privacy issues. We performed a pilot of our curriculum in a university course for non-CS majors and found that it was effective: weeks after last being exposed, students' privacy attitudes had shifted. In this paper, we describe our curriculum, our evaluation of it in the classroom, and our vision for future privacy education.",The Teaching Privacy Curriculum,NA:NA:NA:NA,2016
Richard Weiss:Michael E. Locasto:Jens Mache,"Assessing student performance in cybersecurity labs and exercises is a difficult and time-consuming task. Simply recording the number of correct answers is inferior to in-depth assessment. Faculty are often best placed to offer expert feedback, advice, and guidance based on assessing student achievement and quality of performance for time-constrained exercises. Since this often takes place in the context of large classes and complex exercises, it can present obstacles to offering qualitative feedback. Yet, in some cases there is more information available that could simplify this task. This paper explores the use of command line history and visualization to add additional information and simplify the problem.",A Reflective Approach to Assessing Student Performance in Cybersecurity Exercises,NA:NA:NA,2016
Lillian N. Cassel,NA,Session details: Paper Session: Alternative Learning Experiences,NA,2016
Aaron Bloomfield:Borja Sotomayor,"The ACM's International Collegiate Programming Contest (ICPC) is the world's oldest and largest programming contest. Although students can benefit both pedagogically and professionally from participating in this contest, participation in North America is far smaller than in the rest of the world, which we partially attribute to the perceived low payoff of participating in ICPC. We discuss the pedagogical benefits of participation in ICPC, which include higher student enthusiasm for computer science studies and better career prospects post-graduation, and present a set of cohesive strategies aimed at increasing involvement and success within the ICPC. For aspiring coaches and contestants, we also provide links and references for further study.",A Programming Contest Strategy Guide,NA:NA,2016
David S. Touretzky:Christina Gardner-McCune:Ashish Aggarwal,"This paper introduces reasoning about lawful behavior as an important computational thinking skill and provides examples from a novel introductory programming curriculum using Microsoft's Kodu Game Lab. We present an analysis of assessment data showing that rising 5th and 6th graders can understand the lawfulness of Kodu programs. We also discuss some misconceptions students may develop about Kodu, their causes, and potential remedies.","Teaching ""Lawfulness"" With Kodu",NA:NA:NA,2016
Craig Anslow:John Brosz:Frank Maurer:Mike Boyes,Large amounts of data are becoming increasingly available through open data repositories as well as companies and governments collecting data to improve decision making and efficiencies. Consequently there is a need to increase the data literacy of computer science students. Data science is a relatively new area within computer science and the curriculum is rapidly evolving along with the tools required to perform analytics which students need to learn how to effectively use. To address the needs of students learning key data science and analytics skills we propose augmenting existing data science curriculums with hackathon events that focus on data also known as datathons. In this paper we present our experience at hosting and running four datathons that involved students and members from the community coming together to solve challenging problems with data from not-for-profit social good organizations and publicly open data. Our reported experience from our datathons will help inform other academics and community groups who also wish to host datathons to help facilitate their students and members to learn key data science and analytics skills.,Datathons: An Experience Report of Data Hackathons for Data Science Education,NA:NA:NA:NA,2016
Neil Brown,NA,Session details: Paper Session: CS Ed Research 3,NA,2016
Alexander Repenning:Ashok Basawapatna:Dorit Assaf:Carmine Maiello:Nora Escherle,"High profile computer science education events such as the Hour of Code can reach millions of students but without proper evaluation it is not clear what motivational and educational consequences the participation has. If, for instance, participants' levels of motivation towards the end of an hour long activity are significantly fading, then their perception of programming to be ""hard and boring"" may actually get reinforced. By simply measuring how far participants progressed with their projects we have been able to collect retention data from thousands of participants in a way that allows us to interpret these data in terms of not only cognitive but also technical and practical activity challenges. Inflection points overlaying a negative exponential retention distribution serve as indicators of these challenges with potential impact on Flow. Retention of Flow is an evaluation approach to analyze computer science education activities, including interactive tutorials and online programming environments, with respect to cognitive as well as affective challenges.",Retention of Flow: Evaluating a Computer Science Education Week Activity,NA:NA:NA:NA:NA,2016
Duane F. Shell:Leen-Kiat Soh:Abraham E. Flanigan:Markeya S. Peteranetz,"The goal of this study was to investigate how students' entering motivation for the course in a suite of CS1 introductory computer science courses was associated with their subsequent course achievement and retention. Courses were tailored for specific student populations (CS majors, engineering majors, business-CS combined honors program). Students' goal orientations (learning, performance, task), perceived instrumentality (endogenous, exogenous), career connectedness, self-efficacy, and mindsets (growth or fixed) were assessed at the start of the course. Grades were significantly predicted from entering motivation; but prediction was highly variable across courses, ranging from not predicted for the engineering courses to highly predictable for the business-CS honors program. Course withdrawal was significantly predicted. Likelihood of withdrawing was decreased by future time career connectedness and learning approach goal orientation and increased by having an incremental theory of intelligence. Findings suggest that CS1 students who set learning approach goals for their classes have better academic outcomes and higher retention. Other motivational beliefs were inconsistent in their impacts and varied by course and student population. Except for students in an honors program, entering motivational beliefs weakly predicted achievement and retention, suggesting that impacts of the course itself on motivation and how motivation changes during the course are perhaps more important than student's initial motivation.",Students' Initial Course Motivation and Their Achievement and Retention in College CS1 Courses,NA:NA:NA:NA,2016
Adrienne Decker:Monica M. McGill:Amber Settle,"In the past six years, dozens of conference papers and journal articles have been presented in Association of Computing Machinery (ACM) and Institute of Electrical and Electronics Engineers (IEEE) educational forums concerning computing outreach activities. Nearly half of these (47.5%) appeared in SIGCSE venues. In this study, we used the free-form question ""What type of data has been collected in formal, peer-reviewed research that has been conducted on computing outreach activities in recent years""? as a basis for a systematic literature review in these venues from 2009-2015. During the analysis of the articles, it was discovered that a majority of efforts focused on middle school and high school students, a majority of the reported events took place in the United States, and almost half had a goal of increasing gender diversity in computing. This paper summarizes the information about the studies, including their data collection techniques and the data that was collected. We also present a list of recommended practices for data collection, methodologies, and reporting for educational researchers engaged in these activities in an effort to provide comparative data and allow us as a community to more scientifically understand the impact that these activities are having on the participants.",Towards a Common Framework for Evaluating Computing Outreach Activities,NA:NA:NA,2016
Jan Vahrenhold,NA,Session details: Paper Session: K-12 Teaching,NA,2016
George Veletsianos:Bradley Beth:Calvin Lin,"Little is known about how K-12 Computer Science (CS) teachers use technology and problem-based learning (PBL) to teach CS content in the context of CS Principles curricula. Significantly, little qualitative research has been conducted in these areas in computer science education, so we lack an in-depth understanding of the complicated realities of CS teachers' experiences. This paper describes the practices and experiences of six teachers' use of technology that was implemented to support PBL in the context of a dual enrollment CS Principles course. Results from an early offering of this course suggest that (1) while CS teachers used technology, they did not appear to use it to support student inquiry, (2) local adaptations to the curriculum were largely teacher-centric, and (3) the simultaneous adoption of new instructional practices, technologies, and curricula was overwhelming to teachers. This paper then describes how these results were used to modify the curriculum and professional development, leading to increased teacher satisfaction and student success in the course.","CS Teacher Experiences with Educational Technology, Problem-BasedLearning, and a CS Principles Curriculum",NA:NA:NA,2016
Arno Pasternak,"In this paper we will report on the design, teaching and evaluation of a Computer Science course in the lower secondary education from grade 6 to grade 10 based on contextualised ideas. With this study we are able to demonstrate that students can indeed be taught Computer Science as a (main) subject from early grades to the end of lower secondary education. We will present quantitative and qualitative results. We will analyse the results of the course with the instrument of the effect size d and draw first consequences. So it becomes apparent that Computer Science can be taught just like any other science worth full curriculum credit even starting at the beginning of the lower secondary education.",Contextualized Teaching in the Lower Secondary EducationLong-term Evaluation of a CS Course from Grade 6 to 10,NA,2016
Jennifer Wang:Hai Hong:Jason Ravitz:Sepehr Hejazi Moghadam,"Through surveys of 1,673 students, 1,685 parents, 1,013 teachers, 9,693 principals, and 1,865 superintendents across the United States, this study explores perceptions, access, and barriers to computer science education at the K-12 level. We found most respondents were unable to distinguish computer literacy activities from computer science, with female, Black, or Hispanic respondents even less likely to do so. Perceptions of who does computer science were narrow and stereotypical (White, male, smart), but there was high value and demand for computer science across all populations, particularly among parents. Results indicate discrepancies in access to technology and computer science. Over 75% of principals reported their school did not offer computer science with programming/coding, but Hispanic students reported lower exposure to computers at home and in school and Black students and lower income students reported less access to computer science learning in school. Hispanic students and female students were also less likely to have learned computer science or have confidence to learn computer science compared to their counterparts. Finally, we explored barriers to access and identified a harsh disconnect: parent and student demand for computer science education was high while administrators' perceptions of this demand was low. Additionally, the most common barriers to offering computer science cited by principals and superintendents were the need to dedicate time to other courses and testing requirements and the lack of qualified teachers, with technology less common of a barrier.","Landscape of K-12 Computer Science Education in the U.S.: Perceptions, Access, and Barriers",NA:NA:NA:NA,2016
Bina Ramamurthy,NA,Session details: Paper Session: Tools,NA,2016
Tommy Färnqvist:Fredrik Heintz:Patrick Lambrix:Linda Mannila:Chunyan Wang,"Traditionally, theoretical foundations in data structures and algorithms (DSA) courses have been covered through lectures followed by tutorials, where students practise their understanding on pen-and-paper tasks. In this paper, we present findings from a pilot study on using the interactive e-book OpenDSA as the main material in a DSA course. The goal was to redesign an already existing course by building on active learning and continuous examination through the use of OpenDSA. In addition to presenting the study setting, we describe findings from four data sources: final exam, OpenDSA log data, pre and post questionnaires as well as an observation study. The results indicate that students performed better on the exam than during previous years. Students preferred OpenDSA over traditional textbooks and worked actively with the material, although a large proportion of them put off the work until the due date approaches.",Supporting Active Learning by Introducing an Interactive Teaching Tool in a Data Structures and Algorithms Course,NA:NA:NA:NA:NA,2016
Rachel Harsley:Nick Green:Mehrdad Alizadeh:Sabita Acharya:Davide Fossati:Barbara Di Eugenio:Omar AlZoubi,"Analogies and worked out examples are effective means of instruction in a wide variety of learning environments. However, the extent of their effectiveness in Computer Science (CS) education has not been fully explored. We extended our intelligent tutoring system (ITS) for CS data structures, ChiQat-Tutor, to incorporate worked out examples and analogy as teaching strategies. We compare three versions of the system: one that uses standard worked out examples, one that uses analogical worked out examples, and one that uses a pure analogical explanation with separate worked out examples. A study with 66 students showed that students using the standard worked out examples had greater learning gains than students in both analogy conditions. We also found that analogy can be less effective for students with higher prior knowledge. Additionally, we show that some interaction patterns highly correlate with student gains. Overall, the system implementation and results represent a step towards exploring the use of well-established instructional strategies in a computer science ITS.",Incorporating Analogies and Worked Out Examples as Pedagogical Strategies in a Computer Science Tutoring System,NA:NA:NA:NA:NA:NA:NA,2016
John Malloy:Janet Burge,Decision-making is central to software development. Most problems do not have straightforward solutions but instead require assessing and evaluating multiple candidate solutions depending on the requirements (functional and non-functional) for the specific project. Real problems may have more than one valid solution and software engineering students need to be able to synthesize design alternatives and reason about them to make the best decision for the specific problem under consideration. The work described here uses a web-based system to administer rationale-based assignments where the students are required to explicitly present their rationale for a series of decisions and use the capabilities of the tool to justify their choices. Students using the tool report that it helped them consider more alternatives and put more thought into their decision-making process.,SEURAT_Edu: A Tool to Assist and Assess Student Decision-Making in Design,NA:NA,2016
Owen Astrachan:R. Brook Osborne,"The AP CS Principles (APCSP) course begins as an AP course in 2016, fully realized after eight years with several presentations as part of SIGCSE conferences[1-3]. APCSP was designed to broaden participation in computer science in high school and beyond, and to be accessible to teachers who might be new to computer science, in some cases with limited previous experience in teaching courses in the area. The APCSP project has been grounded in an inclusive, community-driven approach to building a new course that is nearly unprecedented. Initially funded by the College Board and NSF, as this community of educators nears the official launch of APCSP the project has become more of a public/private partnership, garnering significant interest in building programs with NSF, non-profit, and industry support.",Advanced Placement Computer Science Principles (APCSP): A Report from Teachers,NA:NA,2016
Clifton Kussmaul:Helen H. Hu:Tammy Pirmann,"Employer surveys and other sources indicate that CS students need process skills such as communication, teamwork, critical thinking, and problem solving. Further, the AP CS Principles practices include communicating and collaborating. POGIL (Process Oriented Guided Inquiry Learning) can be used to teach these process skills in high school or college courses. Instead of sitting in lecture or working together with minimal guidance, student teams work through POGIL activities to discover concepts on their own, while the instructor circulates and facilitates learning of key concepts and the development of process skills. Structured roles help students learn to communicate and work in teams more effectively. In this special session, attendees will experience a POGIL activity, learn how process skills are developed and reinforced by POGIL (through a POGIL meta-activity), and see the range of activities available at http://cspogil.org. We will share POGIL activities and discuss how POGIL can transform CS classes at all levels, from high school to graduate-level classes, from small schools to large universities.","Special Session: Helping Students to Develop Communication, Teamwork, and Other Process Skills with POGIL",NA:NA:NA,2016
Jeffrey A. Stone,"Sustainability, defined by Penn State University as ""the simultaneous pursuit of human health and happiness, environmental quality and economic well-being for current and future generations"", is becoming a more frequent theme in colleges and universities. There is currently little published research involving the use of sustainability-themed modules or courses in Computer Science. As part of an institutional effort to integrate sustainability concepts into undergraduate courses, the author constructed a series of projects and activities to educate students about sustainability issues in three distinct CS1-style courses for non-majors. These projects and activities involve traditional introductory topics (e.g. loops, arrays) but each focuses a specific sustainability-related issue or domain. Examples of project issues included the impact of acid rain; the construction of an optimal planting schedule; the impact of air pollution; the benefits of trees on air quality; and the benefits of water catchment systems. These projects and activities included a discussion of the sustainability concept at hand while providing the student an opportunity to demonstrate his/her knowledge of the particular language and algorithmic concepts. Supporting efforts include the integration of speakers on sustainability topics and a parallel effort by undergraduate researchers to create graphics and animations for the project concepts. This poster will describe the results of the pilot study, the lessons learned, and future adjustments.",Integrating Sustainability Concepts into Introductory Programming Courses (Abstract Only),NA,2016
Gary K.W. Wong:Kening Zhu:Xiaojuan Ma:John Huen,"Computational Thinking (CT) has been widely introduced and investigated in recent years, particularly in the U.S. since the born of visual, block-based, drag-drop programming environments such as Kodu, Scratch, Minecraft and App Inventor. Although the user interface is mainly in English, the characteristics of these easy-to-use, game-based, and interactive tools attract many teachers and researchers in the world to pay much attention to the possibilities and opportunities of introducing these tools to students. Recently, some primary school teachers in Hong Kong begin to independently introduce some of these programming tools to students at age 7 - 11 as a part of learning activities in their computer lessons. Their motives are similar but not the same, such as making a fun learning and teaching experience, motivating students for active and collaborative participation, and introducing CT concepts to develop generic skills (e.g. problem solving skills, creativity, and critical thinking). However, there is an absence of well-developed and planned curriculum for ""coding education"" to introduce computational thinking systematically to students in the local context with expected learning outcomes. Due to the uniqueness of K-12 curriculum in Hong Kong, the existing curriculum model in the U.S. may need to be customized and redesigned to become suitable for integrating into the curriculum in Hong Kong. In this poster, it describes the first proposed coding education curriculum in Hong Kong primary education (Primary 4 to Primary 6) with relevant objectives, structures, contents, and learning outcomes. A new pedagogical design framework for CT is introduced in this poster, which could be generalizable and yet to be evaluated. This new curriculum will serve as the curriculum guide to local teachers, and is the first research initiative of a three-year longitudinal study investigating the impact of CT activities to students particularly in Hong Kong. The experience of this curriculum development for CT concepts in K-12 education can inspire teachers and researchers in other parts of the world when adopting and internationalizing CT activities based on the curriculum model developed under the U.S. education.",The Development of Internationalized Computational Thinking Curriculum in Hong Kong Primary Education (Abstract Only),NA:NA:NA:NA,2016
Joanna Klukowska:Stewart N. Weiss,"We present a sequence of programming projects for the CS2 introductory computer science course which provides a holistic experience for students in preparation for their future roles in any workplace in which software is developed, whether in academia, government, industry, or elsewhere. The progression of projects has several key features: (1) they are easily reused simply by changing the underlying input data set; (2) they offer a flexible degree of analysis objectives; (3) they take advantage of freely available open source data sets and encourage their use; (4) they are designed to be small models of the kinds of problems likely to be encountered outside of the classroom environment; (5) they facilitate the introduction of increasingly more sophisticated software testing concepts, starting with the most elementary; (6) a student who attempts to do them in earnest, even if unsuccessful, can still learn important lessons about the different facets of programming and problem solving; and (7) a student's understanding of the relationship between choice of data representation and performance will likely mature if he or she successfully completes the assignments. In our poster, we present the first and last assignments of the sequence that we have employed in a CS2 course, and discuss some results. We also show how these assignments can serve as a paradigm that may be used in other CS2-like courses. Many of the underlying concepts can also be applied to CS1-like courses as well as more advanced computer science courses.",A Holistic Sequence of Programming Assignments for CS2 (Abstract Only),NA:NA,2016
Shaundra B. Daily:Alison E. Leonard:Sophie Jörg:Sabarish Babu:Nikeetha DSouza:Dhaval Parmar:Kara Gundersen:Joseph Isaac:Serita Acker,"Fifty-four middle school girls were a part of weeklong program geared towards encouraging young women in STEM careers. During a two-day computer science intervention, we introduced students to our VEnvI software where students program virtual characters to perform choreography. During this time, students were introduced programming concepts: sequencing, loops, and variables. They also spent time performing to learn some of the movements in VEnvI and discussed different aspects of the VEnvI software design including motion capture & Unity 3D Development. The latter conversations were couched in relation to being a computer scientist. Data were collected from the students on the first day of the camp as well as at the end of the second day. Each student was given a piece of paper that only contained a code corresponding to her. The instructions were to write, ""What do computer scientists do?"" on one side of the page, and to draw a picture of a computer scientist on the other side. Our findings suggest that, at least in the short term, this type of intervention can impact students' perceptions of computer science as well as broaden their perspectives of computer scientists. More students drew female computer scientists in the post-test and showed computer scientists working in teams rather than alone. Further, students' ideas of what computer scientists ""do"" shifted from fixing computers and making websites to creating, designing, and inventing with computers.",Combating Perceptions of Computer Scientists: A Short-term Intervention (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA,2016
Declan Andrew McClintock:Niral Shah,"This poster delves into the interactions of pair programming students to observe the equality or inequality across three modes of discussion. These three modes are coding, designing and logistics. Coding being when students are discussing code, designing being the discussion of aesthetic aspects, and logistics being the discussion of saving or manipulating files. The students whose interactions are reviewed and assessed in this poster are participants in a three-week elementary computer science program taking place in Northern California in the years 2009, 2012, and 2013. The students' ages range between ten and eleven years old. This poster will compare and contrast specific interactions and examples to highlight how modes can present an interaction as equitable, inequitable, or both. The poster will also present tables to aid in the explanation of how one mode in an interaction can be equitable while the other two modes are not.","Coding, Designing, and Logistics: How Modes Affect Equity in Computer Science Education (Abstract Only)",NA:NA,2016
Abhay Doke:Niranjan Pedanekar,"Several hundred Massively Open Online Courses (MOOCs) are available for students of Computer Science (CS) across the Internet. Yet, it has been observed that students exhibit a short attention span while watching MOOC videos. At the same time, as a viewer, they are likely to watch much longer movies and even educational films. In this poster, we propose that production of MOOCs needs to borrow certain affective features from more professionally produced educational films. To support this argument, we first present the results of a limited survey indicating an affective preference of users towards educational films over video lectures from MOOCs. Taking a cue from films in general, we present an analysis of certain affective audio-visual features of educational films vis-à-vis MOOC videos. These features include visual features related to the variety of color, number of scenes and movement, and audio features related to liveliness of speech. We then use these features to classify two groups of educational videos, and conclude that MOOC-like videos often tend to lack such affective audio-visual features. We also indicate possible directions of research in educational videos based on our initial findings.","Lights, Camera, but No Action: Exploring Affective Audio-Visual Features of Educational Videos (Abstract Only)",NA:NA,2016
Michael Weeks:Yi Pan:Yanqing Zhang,"This poster documents three approaches that we are undertaking to increase security awareness within undergraduate computer science classes. The first approach is a verbal password entry system, with surreptitious photos being taken when the mobile device is stolen. The second approach is a lab where students develop a password entry and verification system between a mobile device and a remote server. The third approach is a captcha system, where students implement a simple challenge that can be verified. Like password entry, the captcha communications must be secure and difficult to automatically manipulate. Unlike password entry, the captcha is meant to allow humans access while denying other computers.",Increasing Security Awareness in Undergraduate Courses with Labware (Abstract Only),NA:NA:NA,2016
Mohammed F. Farghally:Eric Fouh:Sally Hamouda:Kyu Han Koh:Clifford A. Shaffer,"Data Structures and Algorithms (DSA) courses are considered critical in any computer science curriculum. DSA courses emphasize topics related to procedural dynamics (how an algorithm works) and algorithm analysis (the algorithm's efficiency). Historically, algorithm visualizations (AVs) have dealt almost exclusively with portraying algorithm dynamics, and there are few examples of visualizations related to algorithm analysis topics. We have developed a new generation of visualizations that we term Algorithm Analysis Visualizations (AAVs) to convey algorithm analysis concepts. We present the motivation behind AAVs, and outlines a methodology for their evaluation. We present results from student surveys and the analysis of student interaction logs from the OpenDSA eTextbook used by several CS3-level classes during the period of Fall 2014 through Fall 2015. Initial results from Fall 2014 revealed that students were not spending enough time reading the algorithm analysis material presented as textual content. Our results from a preliminary deployment of AAVs in Spring 2015 showed that students interacted with AAVs for significantly longer than the control group spent reading the previous text-based algorithm analysis material. We will present additional results from our ongoing experiment in Fall2015 (control group without AAVs) and Spring2016 (test group with additional AAVs).",Visualizing Algorithm Analysis Topics (Abstract Only),NA:NA:NA:NA:NA,2016
Steven Huss-Lederman,"From 2013 to 2014, a fairly standard CS2 course was changed to a dynamic classroom using clicker questions and OpenDSA textbook (embedded animations with animated and multiple choice questions allowing instructor review of results). Through these changes, class time focused on conceptual ideas and discussion rather than the mechanics of data structures. The clicker questions were used to engage students by strategically asking questions that differentiated between correct ideas and common misconceptions. To assess these changes, surveys of central CS2013 topics were given to students in 2013 (before the changes) and in 2014 and 2015 (after the changes) where the course is offered each spring. Additionally, the drop rate and knowledge from assignments and exams were examined. The analysis showed that after the first year students showed greater learning gains and substantial decline in drop rate (57% to 27%) but found the course less valuable (class time, discussions and readings). In the second year there was a drop in learning gains, an even greater reduction in drop rate (12%) but students now found the course time more valuable than the first year. These results are attributed to regularly informing students in the third year to the reasons for the new methodologies and the fact that a greater diversity of students completed the course each year. The author hopes to engage others in a discussion of their experiences about interactive courses, and how clicker questions can be constructed to engage and educate our students.",The Impact on Student Learning and Satisfaction When a CS2 Course Became Interactive (Abstract Only),NA,2016
Dahai Guo:Anna Koufakou,"We are proposing an undergraduate course to introduce cloud computing technologies with guidance from an industry recognized certification: Amazon Certified Associate Developer. Today, cloud computing providers provide many services. For example, Amazon Web Services provide 46 broad types of services, without mentioning the combinations of these services. It is impossible to introduce all or even most of them in one course. This poster addresses the question of how to select an important and representative subset of cloud computing technologies for developing an undergraduate course on cloud computing. We propose to align our education with what the Amazon Certified Associate Developer certification covers. This certification addresses the core technologies that need to be mastered by software developers that use the Amazon Web Services, clearly the leader in cloud computing. The learning outcomes in the proposed course will be found to be consistent with the four domains identified by the certification.",A Certification-Guided Course for Cloud Computing (Abstract Only),NA:NA,2016
Corey Ford:Clinton Staley,"Important information regarding the learning experience and relative preparedness of Computer Science students can be obtained by analyzing their coding activity at a fine-grained level, using an online IDE that records student code editing, compiling, and testing activities down to the individual keystroke. We report results from analyses of student coding patterns using such an online IDE. In particular, we gather data from a group of students performing an assigned programming lab, using the online IDE indicated to gather statistics. We extract high-level statistics from the student data, and apply supervised learning techniques to identify those that are the most salient prediction of student success as measured by later performance in the class. We use these results to make predictions of course performance for another student group, and report on the reliability of those predictions",Automated Analysis of Student Programmer Coding Behavior Patterns (Abstract Only),NA:NA,2016
Ryan Hardt:Grant Wuerker,"Online courses are growing in popularity in the forms of Massive Open Online Courses (MOOCs), Small Private Online Courses (SPOCs), and flipped classrooms. Some MOOC interfaces provided by websites like Coursera, edX, Khan Academy and Udacity allow students to comment on lectures, but they do so using a different component than that used for consuming lecture content. Their comment systems are effectively message boards linked to by lecture pages. This component separation has been shown to create a cognitive overhead for students. Additionally, comments made in these systems typically apply to the lecture as a whole rather than to more finely-grained lecture content. Some SPOC interfaces allow fine-grained, timeline-based comments, but suffer from a ""seeding"" issue in which students who view the lecture early lack incentive to participate. Our system, the ""Small Private Online Course Keeper"" (SPOCK), is an online lecture environment for SPOCs. SPOCK is distinguished by (1) its tight integration between timeline-based lecture content and anonymous student questions, answers, and comments, (2) its use of gamification to encourage student interaction and address the seeding issue, (3) and by its loose coupling with lecture videos, which may be referenced from other websites like YouTube.",SPOCK: A System for Encouraging Interaction in Small Private Online Courses (Abstract Only),NA:NA,2016
Xenia Mountrouidou:Xiangyang Li,"Cybersecurity is a broad, dynamic, and ever changing field that is difficult to be integrated into undergraduate Computer Science (CS) curriculum. In this poster, we will report our plan and progress on an ongoing NSF-funded three-year project. First, we develop manageable standalone course modules and labs to be integrated non-intrusively into the core Liberal Arts curriculum, and create two new Cybersecurity courses and a set of capstone projects for students motivated to pursue deeper Cybersecurity learning. With the Liberal Arts education in mind, these courses and modules will encompass law, policy, and societal impacts of Cybersecurity. Second, we use the Global Environment for Network Innovations (GENI) infrastructure in lab and project assignments to offer an active Cybersecurity learning experience for all students. This offers a solution to Predominantly Undergraduate Institutions that do not have the infrastructure or maintenance capability for sophisticated computer labs. This project is built on the collaboration between a Predominantly Undergraduate Liberal Arts college, Wofford College, and two primary research universities, Johns Hopkins University and University of South Florida that have well-known Cybersecurity programs.",Broadening the Path to Cybersecurity Profession in Predominantly Undergraduate and Liberal Arts Institutions (Abstract Only),NA:NA,2016
Stephen MacNeil:Celine Latulipe,"Active learning is becoming increasingly popular as a way to engage students and to provide social support. Providing social support is important because it has been shown to improve both student retention (Slavin 1990, Tinto 1987, Wenger 1999) and performance (Hsiung 2012, Kulkarni 2015, MacNeil 2015). Most forms of active learning use a flipped classroom model of teaching where students are expected to interact with materials, such as lecture videos, alone before class and then engage in active learning during class time (Lage 2000). In our previous work with team-based learning, students generally preferred learning in face-to-face teams (MacNeil 2016). To support co-located teams outside of class, we propose the design for a mobile app that is currently in development which uses students' location to form ad-hoc social learning opportunities for students that are located near each other. We take inspiration from flash teams, which create dynamic expert teams based on the availability of experts online (Retelny 2014). Our app will create teams based on the availability of students and their range of expertise, while leveraging additional context, such as student's location and intention. Students upload course topics that they are struggling with and a general geo-location. The app opportunistically pairs students and suggests that they arrange to meet based on either a geo-location match, a topic match, or preferably, both. In designing our prototype, we consider the possibility of suggesting exercises or assignments that students could work on together. Finally, we provide a brief discussion of the theoretical opportunities and challenges associated with using student's location for ad-hoc social learning.",Leveraging Context to Create Opportunistic Co-Located Learning Environments (Abstract Only),NA:NA,2016
Rick Parker,"We are studying how students navigate the school to work transition in the context of the CS senior capstone project course. We conducted semi-structured qualitative interviews with eleven of the seventy-two seniors completing their capstone project in the CS department at our institution. The interview instrument explores how students prioritized candidate projects during project selection, student perceptions of external evaluation, and self-evaluation of the success of their project experience. We used the concept of legitimate peripheral participation (LPP) as a theoretical lens to inform the coding and interpretation of the qualitative data. LPP is a situated learning theory that highlights the importance of embedding learners within a community of practice. This embedding supports participants' development of their professional identities, and engages them in the use of tools and practices authentic to the community. Through analysis of the interview transcripts, we identified the following themes: 1) shift in authority from classroom to project sponsor, 2) the capstone experience serving as a knowledge integration forum, and 3) sufficient project scope to support a sense of ownership and transformative agency. These findings are consistent with a shift in identity from school-oriented to work-oriented, and highlight how the course lends legitimacy to the project work performed by the students. This poster represents preliminary research efforts into the questions of student identity formation within CS, and its impact on long term retention in the computer science discipline.",Student Perceptions of Success in Computer Science Senior Capstone Projects (Abstract Only),NA,2016
Victor Norman:Serita Nelesen,"It is well known that active learning strategies, like Peer Instruction and Cooperative Learning promote deep learning of material in the classroom. These techniques are typically accomplished by having students use cell phones or laptops. However, research has also shown that use by students of these technologies detract from learning. In this poster we examine our low-tech solution: the use of inexpensive, handheld whiteboards in our classrooms. We provide examples of activities which make use of the boards, in contexts ranging from introductory programming to upper-level networking.",Using Small Whiteboards to Engage Students in Active Learning (Abstract Only),NA:NA,2016
Jinsheng Xu:Xiaohong Yuan:Ashrith Velma,"Encryption is critical in protecting the confidentiality of users' data on mobile devices. However, research has shown that many mobile apps are not correctly using the ciphers, which makes them vulnerable to the attacks. The existing resources on cipher programming education do not provide enough practical scenarios to help students learn the cipher programming in the context of real world situations with programs that have complex interacting modules with access to networking, storage, and database. This poster introduces a course module that teaches students how to develop secure Android applications by correctly using Android's cryptography APIs. This course module is targeted to two areas where programmers commonly make many mistakes: password based encryption and SSL certificate validation. The core of the module includes a real world sample Android program for students to secure by implementing cryptographic components correctly. The course module will use open-ended problem solving to let students freely explore the multiple options in securing the application. The course module includes a lecture slide on Android's Crypto library, its common misuses, and suggested good practices. Assessment materials will also be included in the course module. This course module will be used and evaluated in a Network Security class. We will present the results of the evaluation in the conference.",Design and Evaluation of a Course Module on Android Cipher Programming (Abstract Only),NA:NA:NA,2016
Kim C. Huett:Mary Alice Varga,"K-12 teachers have an important role to play in introducing children to computer science. However, most teachers lack explicit training in computer science. This project explored questions related to the experiences of pre-service teachers as they mentored K-12 children in computer science in an informal learning environment. Through a grant-funded project at a comprehensive public university in the Southeastern United States, five pre-education major undergraduate students in an introductory education course learned basic computer programming, interacted with a K-12 computer science teacher around strategies for introducing computer science to kids, and mentored children in exploring computer science in an informal setting. Quantitative and qualitative analyses of the data suggest these experiences were effective in increasing student awareness of critical issues related to computer science education, increasing their knowledge and skills related to Scratch, increasing their self-perception as potential mentors in basic computer programming concepts, and increasing their attraction to STEM majors and endorsements.",Building Pre-Service Teacher Interest in Computer Science Education through Mentoring Experiences (Abstract Only),NA:NA,2016
Lijun Ni:Mark Sherman:Diane Schilder:Fred Martin,"Recent work has demonstrated the power of providing relevant, meaningful contexts for computer science to broaden participation. In this poster, we present the design and evaluation of a one-week App Inventor summer camp for middle school students with an explicit focus on addressing local community needs. We recruited community partners to present their organization's work to students, and then we supported students in developing apps that would support these organizations' missions. Students successfully developed apps that were designed to address community issues. Students developed apps on topics ranging from local farmers' markets, healthy food and nutrition apps, invasive species, local trees, to providing users with information about recycling. At the end of the workshop, we conducted an in-depth interview study to examine its impact on students' attitudes and perceptions toward computer science, and supplemented this with results from project evaluation. Our results indicate that students had positive experience in learning, creating and sharing real apps for solving community problems. Focusing on local community needs can also help to motivate students' interest not only in creating apps as well as in learning more about computer science. After the camp, students became more confident in creating apps as well as in using apps to solve community problems, and the camps were successful in welcoming a diverse set of students into computing.",Computing with a Community Focus: An App Inventor Summer Camp for Middle School Students (Abstract Only),NA:NA:NA:NA,2016
Lorena B. Martinez-Elizalde:Monica G. Duarte-Dominguez,"Engagement is a key factor in the process of teaching and learning any subject. Teachers have been facing this problem while teaching computer science at any level; we will be focusing on trying to engage college students from non-computer science majors. Solving problems with programming is a course taught to several majors varying from chemical engineering, through mechanical, physics, electronics, food and even innovation engineering all in the same class. Therefore, we decided to divide the class profiling the students into two roles: a) Mechanics, which showed proficiency on mathematics and critical thinking among the class and b) Pilots, who showed some gaps on their skills. Both profiles will develop critical thinking, problem solving and algorithmic thinking by the end of the semester. Gamification as an educational trend refers not just to the use of games mechanics, but also to the development of game environments in order to improve motivation, concentration, effort, and loyalty among other positive values common to all gamers. Gamification is seen as a powerful strategy to influence and motivate people. The objectives of applying this kind of trend on a class are: The transformation of class activities into challenges, foster leadership of the participants, develop collaborative teams, reward efficiency and effort in the development of activities and foster meaningful learning experience. Through the completion of the objectives, students will develop the afore mentioned skills and the following competences: Logical thinking, ability to follow complex procedures, pattern recognition, use of technology and communication, collaborative work and problem solving. The poster will display our findings so far, since we are running the pilot test on this project. We will be assessing the feelings among students with a survey, and present the data analysis derived from the experience, and we will compare the results to a group that is taking the same class with a normal approach.",Exploring Gamification to Teach Computer Science to Non-computer Science Related Major (Abstract Only),NA:NA,2016
Omaima Almatrafi:Huzefa Rangwala:Johri Aditya:Jaime Lester,"We present findings from a study examining students' course-taking pathways to graduation and identify the factors regarding course-taking choices that can affect students' performance. The data for the study was collected from two majors within an engineering school at a large public university: computer science (CS) and information technology (IT). Although we look in depth at CS students, we use the other data for a comparative analysis. CS and IT are the most popular and largest majors, respectively, at our institution with almost 2,500 undergraduate students enrolled in them. The results show that there are differences in specific patterns of courses and illustrate relationships between the frequent courses in each semester and the relationships between courses taken in two consecutive semesters. Some major insights from the analysis of trajectory of frequent courses for both groups include: low performers postponed some courses toward the end of the program, and take a collection of courses together that their counterparts do not usually take. This work has direct implications for advising of prospective and current students and can improve programs' curriculum and students' performance. In the next stage of this study we will compare trajectories of students who graduate with those of students who either leave CS and IT or take longer to graduate. This preliminary research is part of a NSF CISE/EHR funded grant project on ""BigData and Education"".",Using Learning Analytics to Trace Academic Trajectories of CS and IT Students to Better Understanding Successful Pathways to Graduation (Abstract Only),NA:NA:NA:NA,2016
Kai Qian:Dan Lo:Wei Chen:Ying Qian,"In this paper we present an innovative authentic learning approach of mobile security through real-world-scenario case studies. in computing field. The primary goal of this learning approach is to create an engagement and motivating learning environment that encourages all students in learning emerging technologies such as mobile software developments and its security concepts and practices. This approach provides students with hands-on laboratory practices on real-world mobile app developments and security. The laboratory consists of multiple modules covering Mobile App development, mobile security on cryptography, secure programming, network, database, Web app, mobile malware and spyware analysis. Each topic consists of a series of progressive sub-labs: a pre-lab, lab activities, and a student add-on post-lab. The preliminary feedback from students is positive. Students have gained hands-on real world experiences on mobile security with Android mobile devices, which also greatly promoted students' self-efficacy and confidences in their mobile security learning.",Promote Self-efficacy in Learning of Mobile App and Security with real-world Relevant Laboratory (Abstract Only),NA:NA:NA:NA,2016
Lillian N. Cassel:Darina Dicheva:Christo Dichev:Don Goelman:Michael Posner,"In this poster the authors report the approaches for presenting Data Science topics in Flipped Classroom mode, incorporating topics in Data Science into existing courses as well as in stand-alone courses. It provides an insight on listing of learning goals, central data science topics, content modules, and a framework for implementing a flipped classroom approach to introduce data science to students with limited technical backgrounds. The presenters are NSF-funded investigators on a collaborative team of computer scientists and statistician to create flipped material for an introductory data science class. After SIGCSE, materials described in the poster will be available in Ensemble, at http://computingportal.org/?q=VU-WSSU-DataScience",Data Science for All: An Introductory Course for Non-Majors; in Flipped Format (Abstract Only),NA:NA:NA:NA:NA,2016
Shannon Duvall:Daniel R. Eagle:Riese P. Narcisse:Thomas W. Price,"Clashroom is a web-based fantasy game that was created to enhance the motivation and learning of a traditional classroom. It was created to address several drawbacks of other educational games by being broadly applicable to any course, requiring no class time, and allowing for optional rather than mandatory game play. Each player in the game is a dragon trainer, hoping to train a champion pet dragon. To gain skills and magical items for the dragon to use, players complete educational quests set up by the teacher. Players compete in weekly tournaments, where the quest rewards are vital to success. Because the gameplay and the learning material are decoupled, the game can be used for any subject at any level. After initial testing, students report that the game is fun and that the intrinsic rewards of a fun game are motivation enough for extra learning.",Clashroom: A Game to Enhance the Classroom Experience (Abstract Only),NA:NA:NA:NA,2016
Hilarie Nickerson:Jeffrey Bush:Yasko Chanoki Endo,"As teacher professional development efforts continue to scale to meet the growing demand for computer science educators, more individuals with little formal preparation in the discipline are seeking training. For this reason, it is important to understand the kinds of questions that these teachers, along with administrators and IT staff, are asking professional development providers. This research examines questions received by Scalable Game Design (SGD), a project that engages students in computing through game and simulation design activities. SGD has provided training for more than 300 teachers since 2009. We have found several dimensions of interest in the question pool. The major categories of questions received are pedagogical, technical, and procedural, and we present a generalizable taxonomy of question types plus specific examples. In addition, question content and questioner roles fluctuate throughout the professional development and classroom implementation cycle, from initial inquiries to requests regarding next steps. Knowledge of these factors can lead to adjustments in training content to reduce questions later on and potentially increase teacher confidence; moreover, this information can inform planning for support resources, an especially important activity when project growth is forecast. We also discuss how our support structures have changed over the life of the project and compare them to two other curriculum initiatives that rely on unique software environments. Our future work will investigate the characteristics of teachers who are asking particular kinds of questions, including their disciplinary backgrounds, experience in the classroom, familiarity with SGD, and instructional environments.","We Have Questions: Pedagogical, Technical, and Procedural Assistance Requests in a Large Computational Thinking Curriculum Research Project (Abstract Only)",NA:NA:NA,2016
Michael A. Ball:Daniel D. Garcia,"While text based languages have been (relatively) easy to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language designed at UC Berkeley, inspired by Scratch. Creativity and open-ended responses are an important part of many CS0 courses, such as the Beauty and Joy of Computing, our autograder includes tools that allow instructors to build robust feedback mechanisms that handle a wide variety of student submissions. We also present our initial work to integrate this system into edX for a series of MOOCs as well as a prototype of integrating this tool into a traditional LMS on campus.",Autograding and Feedback for Snap!: A Visual Programming Language (Abstract Only),NA:NA,2016
Darina K. Dicheva,"Data Structures is one of the fundamental computing courses but also among those with the highest rate of drops and failures. Its importance for a timely completion of Computer Science college programs implies the need of employing innovative instructional methods and technologies to improve student engagement and performance. This poster presents an instructional method that leverages strategies from both flipped learning and gamification. The flipped classroom has been shown to effectively support active learning activities. Moreover, flipping a Data Structures classroom allows introducing programming labs in class, which is not typical for the standard way of teaching the course. However, the success of flipped learning depends crucially on the proper engagement of students in and outside of class. Here gamification can help. Gamification, defined as the use of game design elements in non-game contexts, has shown promises in shaping user behavior in desirable directions, which can be used to increase students' motivation and engagement in the learning process. The poster describes a gamified flipped learning approach and the author's experience and findings in using it in a Data Structures course at a minority university. In the proposed method, the in-class work features group problem solving and pair-programming labs. The employed gamification elements include accruing points, virtual currency, rapid feedback, unlocking content, freedom to fail, and social engagement. The measures used in assessing the effectiveness of the proposed approach include students' grades, information about class attendance and submission of lab assignments, and an attitudinal survey.",Combining Flipped Learning with Gamification to Improve Student Performance in a Data Structures Course (Abstract Only),NA,2016
Xiaohong Yuan:Jinsheng Xu:Huiming Yu:Junghee Kim:Taehee Kim,"The poster describes our project of Assessing the Effectiveness of Experiential-Learning-Based Teaching Tools in Cybersecurity Courses. We are assessing the effectiveness of experiential-learning-based teaching tools for 10 cybersecurity topics in five cybersecurity courses. For each topic, two teaching methods are selected: the control group teaching method, and the experimental group teaching method. The two teaching methods are compared to answer one of the two research questions: (1) Is using an experiential-learning-based teaching tool more effective in improving student learning than the traditional teaching method without using the teaching tool? (2) Is one experiential-learning-based teaching tool more effective than another experiential-learning-based teaching tool? We will assess the effectiveness of the teaching methods via three measures: (1) improvement in student learning outcomes, (2) improvement in student motivation in learning the topic, and (3) improvement in the student experience such as student enjoyment, satisfaction, and perceived difficulty in learning the topic. The knowledge gained from this research can be used by cybersecurity educators at other institutions to use effective teaching tools to improve cybersecurity education practices, which has the potential to increase the number of students well-prepared for entering cybersecurity careers.",Assessing the Effectiveness of Experiential-Learning-Based Teaching Tools in Cybersecurity Courses (Abstract Only),NA:NA:NA:NA:NA,2016
S. Zahra Atiq,"In scholarship of teaching and learning studies (SoTL), computer science (CS) educators have investigated the effectiveness of their teaching methods on students, but they have rarely investigated their own professional development. Some educators do examine their own practices through a process of reflection, but these informal self-reflection efforts have lacked scholarly rigor. A more rigorous study could be provided through the use of autoethnography. This poster presents an autoethnographic study by the author on the teaching of introductory computer programming courses. Through this study, which used five years of data, the author arrived at three main conclusions. First, the author found that students were able to learn new programming languages because the author emphasized self-learning and life-long learning in the classroom. Second, the author found that peer learning, in which one student explains ideas to another, benefits both students. Third, the author found that when educators mentor, support, and guide students, the students' motivation, engagement, and retention increase. Although these findings about effective practices confirm the results of previous studies, the autoethnographic method provides a new, credible way for educators to reflect and inform their practices.",Teaching and Learning in an Introductory Undergraduate Programming Class: A Reflective Autoethnography (Abstract Only),NA,2016
Katie M. Davis:Zoë Wood:John Wilcox,"Integrating programming and computer science into the K-12 curriculum is of national importance. This poster reports on our experience creating an eighteen-week lab curriculum for fifth grade students. Using Processing, an open source programming language and IDE that is built on the Java programming language, we developed and taught eighteen separate lab components introducing basic coding concepts appropriate for fifth grade. These lab modules were developed by a team consisting of a fifth grade teacher, a computer science master's student, and a computer science professor. The labs were taught to over 100 fifth grade students in the 2014-15 academic school year at a public school, Peabody Charter School. All coding labs produced visual output, either static scenes or animations. Topics included basic syntax with a large focus on two dimensional spatial reasoning, but also included three different modules focused on concepts from the fifth grade science curriculum. All curriculum is available at http://users.csc.calpoly.edu/~zwood/Outreach/PCS/PCS5.html. This poster breaks down the basic lab components developed and presents challenges and positive outcomes. In general, students enjoyed the exercises; the teacher observed that all students were eager to complete the labs. Prior to this experience the teacher had no programming knowledge and learned alongside the students each week. He continues to teach the Processing modules in the fifth grade for the 2015-16 school year.",Eighteen Hours of Code with Fifth Grade Students (Abstract Only),NA:NA:NA,2016
Perry Fizzano:David Hartenstine,"The goal of increasing the representation of women and minorities in Computer Science is widespread and one to which we are strongly committed. There are several notable academic programs and professional organizations that are making headway on this goal themselves and are making resources available to others. While we have learned from others, we have also developed some novel approaches appropriate to our institution we feel are suitable for others. In this poster, we outline the best practices that we've adopted and describe our novel approaches. Some of these efforts were funded by an NSF S-STEM grant which provided scholarships and supporting services for females pursuing degrees in Computer Science or Mathematics. Other ideas spawned independently of that grant and require few resources. Our efforts include: (1) actively recruiting female students (2) early advising and peer mentoring (3) creating a supportive department culture, paying special attention to underrepresented groups and first-generation students (4) developing teaching practices to increase freshmen interest and retain students through graduation (5) encouraging students to become members of the larger community (6) promoting professional and leadership development. We describe how the novel approaches we've developed contribute to these recognized best practices, report on our actions, and include our qualitative assessment of improved climate and quantitative results related to improved recruitment and retention. The human and financial resources required for each action item are indicated. Our ultimate goals are to share our approaches, learn from our colleagues, and to foster continued engagement.",Multifaceted Efforts to Create an Inclusive Environment and Increase Diversity (Abstract Only),NA:NA,2016
Marie Bienkowski,"High school computer science teaching can be informed by how science and engineering practices are defined in K-12 curriculum standards. In the United States, the Next Generation Science Standards (NGSS) are seen as broadly stated and widely accepted statements of what children should know about science and engineering to be literate citizens and to prepare for careers in STEM. While the NGSS do not identify practices for computer science, our experience is that the broadly defined engineering practices can serve as an appropriate framework for thinking about computational work. Our interpretation differs from efforts that use computation to teach science or mathematics, instead we apply NGSS approaches to teach computer science. We anticipate that K-12 teachers who are working with these standards as well as with the Common Core State Standards (CCSS) will find, as we have, a crossover from the emphasis in these standards on inquiry, argumentation, and overall deeper learning to the pedagogical orientation of curricula such as the high school introductory course Exploring Computer Science (ECS). This poster will show how a portion of the NGSS, carried over from the precursor Science and Engineering Framework and called the ""Condensed Practices"" can be used with activities in ECS to deepen student learning and help teacher adoption. Handouts are available showing (1) knowledge, skills, and abilities for computational thinking, (2) curriculum guidance for teachers wishing to use the NGSS to inform ECS teaching and (3) suggestions for professional development in NGSS for computational thinking for all K-12 teachers.",Deepening Learning in High School Computer Science through Practices in the NGSS (Abstract Only),NA,2016
Miranda C. Parker:Mark Guzdial,"Validated assessments are important for teachers and researchers. A validated assessment is carefully developed to make sure that it is measuring the right things. Computing education needs more and better validated assessments. Validated assessments provide instructors with insight on how their students are doing in their class and provide researchers with insight on whether certain technologies and interventions are successful. Building high-quality, validated assessments is difficult. However, it is possible to replicate an existing validated assessment, and the new assessment can be validated against the original assessment. We need mechanisms to replicate assessments so that we can build more and more varied assessments for different audiences. We developed the Secondary CS1 Assessment (SCS1) as an isomorphic version of a previously validated assessment instrument for introductory computer science. In this poster we provide an overview for the process of replicating an existing valid knowledge assessment and validating the replication. Handouts will be provided with information about how to access and use the SCS1 Assessment.",Replicating a Validated CS1 Assessment (Abstract Only),NA:NA,2016
Yvonne S. Kao:Leigh Ann DeLyser:Aleata Ka Hubbard,"One of the critical barriers to increasing pre-collegiate computer science course offerings in the U.S. is a lack of qualified computer science teachers. Programs such as TEALS, a teacher preparation program pairing high school teachers with computing professionals to offer CS courses, provide opportunities for in-service teachers to gain experience teaching computer science. However, it is not clear whether the high school teachers develop sufficient pedagogical expertise to sustain high-quality computer science course offerings at their schools. Furthermore, the field of computer science education lacks valid and reliable ways of measuring pedagogical content knowledge (PCK), a construct that describes the knowledge teachers need for effective instruction. In this poster, the authors present these results from the first year of a three-year NSF grant to study how TEALS participation influences novice computer science teachers' PCK: 1) a theoretical framework describing the critical components of CS PCK, 2) the results of the first field test of a CS PCK assessment, including the psychometric properties of the assessment, and 3) a comparison of how teachers performed on the assessment at the beginning and end of their first year of computer science teaching and how they performed relative to their computing professional mentors.",Assessing the Development of Computer Science Pedagogical Content Knowledge in the TEALS Program (Abstract Only),NA:NA:NA,2016
Neeraj Chatlani:Daniel S. Myers,"Coding literacy is the ability to understand a written computer program and interpret its functionality and output. Literacy is a valuable skill for programmers at all levels, because understanding written code requires developing and applying mental models of program execution. Previous work has shown that explicit instruction in program literacy is beneficial for new computer science students and aids the development of algorithmic thinking. This poster summarizes the authors' work- in-progress developing COLT: the Coding Literacy Trainer, a web-based adaptive tutorial system that provides instruction in the fundamentals of coding literacy and program interpretation to new computer science students. In addition to its pedagogical applications, COLT serves as a development platform for a novel theoretical foundation for adaptive teaching systems based on the concept of intrinsic curiosity. Inspired by the work of Lee et al. in the field of developmental robotics, a curiosity-driven system explores its complete knowledge environment in way that continually maximizes its learning progress. Thus, learners are driven to explore areas where they are currently making the greatest advances, while avoiding regions of the knowledge space that are either too simple to be interesting or too challenging to be approachable at the current time. The poster summarizes the theoretical background and implementation of the COLT system in a clear, easy-to-read format. A web-based version of COLT is currently under active development and slated for an open-source release in the spring of 2016.",A Curiosity-Driven System for Developing Coding Literacy (Abstract Only),NA:NA,2016
Sarah Heckman:Jason King,"Students learn best in environments where they can meaningfully engage with materials that emulate real-world scenarios. Incorporating software engineering best practices and supporting tools in introductory courses provides students the opportunity to engage in course materials as a novice member of the profession. We support student engagement with industry tools to support software engineering best practices for tutorials, in-class labs, and programming projects. The goal of the research is to improve student learning, engagement in the course and profession, and retention through the use of software engineering practices and tools that introduce students to the software engineering profession. A prior study on the incorporation of in-class laboratories, supported with software engineering best practices, on linear data structures showed an increase in engagement, but did not show a difference on student learning when compared with active learning lectures. We are currently expanding the study by incorporating in-class laboratories across a full semester of a CS1.5 class at NC State University. The poster presents the preliminary results from Fall 2015.",Teaching Software Engineering Skills in CS1.5: Incorporating Real-world Practices and Tools (Abstract Only),NA:NA,2016
Ashish Aggarwal:Christina Gardner-McCune:David S. Touretzky,"Mental simulation is an important skill for program understanding and prediction of program behavior. Assessing students' ability to mentally simulate program execution can be challenging in graphical programming environments and on paper-based assessments. This poster presents the iterative design and refinement process for assessing students' ability to mentally simulate and predict code behavior using a novel introductory computational thinking curriculum for Microsoft's Kodu Game Lab. We present an analysis of question prompts and student responses from data collected from three rising 3rd - 6th graders where the curriculum was implemented. Analysis of student responses suggest that this type of question can be used to identify misconceptions and misinterpretation of instructions. Finally, we present recommendations for question prompt design to foster better student simulation of program execution.",Designing and Refining of Questions to Assess Students' Ability to Mentally Simulate Programs and Predict Program Behavior (Abstract Only),NA:NA:NA,2016
Heather Pon-Barry:Audrey St. John:Becky Wai-Ling Packard:Barbara Rotundo,"The Megas and Gigas Educate (MaGE) program is a peer mentoring program being developed at Mount Holyoke College, a liberal arts college for women, for the introductory CS curriculum. Consistent with national trends, interest in CS is rising rapidly; current resources cannot meet demand while maintaining quality feedback and pedagogy. Supported by a Google Computer Science Capacity Award, MaGE has three main objectives: (1) to triple enrollment capacity over 3 years in introductory courses; (2) to increase enrollment and retention for women and other underrepresented groups; (3) to train students to educate, mentor, and support others in inclusive ways. Trained undergraduate students act as peer mentors to beginner students, providing close interaction and assisting with feedback. MaGE is currently being piloted in the introductory CS1 course. Enrolled students bring varying interests, including Art, History, Biochemistry, Economics and Engineering; most students have no prior programming experience. Each CS1 student is assigned a peer Giga Education Mentor (or GEM) in a 9:1 ratio. GEMs have undergone a rigorous training course that raises awareness of the role of social identity in learning, emphasizes active learning within computer science, and provides preparation for being technical peer mentors. While research supports the need for culturally-sensitive, inclusive training as part of the curriculum, we know of few peer-based models in CS that explicitly include this education. By building a diverse set of peer role models and connecting with the pre-existing co-curricular Megas and Gigas mentoring program, MaGE seeks to effectively engage underrepresented students in computing.",Megas and Gigas Educate (MaGE): A Curricular Peer Mentoring Program (Abstract Only),NA:NA:NA:NA,2016
Jeffrey L. Popyack:William M. Mongan,"We describe an ""unplugged"" activity that exposes data structures and algorithms involved in image representation and compression, using multi-colored Post-It Notes®. We use Post-It's to illustrate how color images can be encoded and decoded so they can be stored efficiently on a computer and/or transmitted efficiently across a network. This provides an intuitive illustration of bitmaps and the GIF (Graphics Interchange Format), optimized with Lempel-Ziv compression. The algorithms are simple to explain and comprehend, and simultaneously appeal to the participants' sense of art and creativity while demystifying advanced computing concepts and computer graphics. We describe two sample exercises which make use of these concepts. In one exercise, teams of participants create messages with Post-It's, encode them and send them to other teams for decoding. In another exercise, a larger image is encoded and broken into letter paper-sized smaller images to be decoded and reassembled by a group. This activity has proven to engage participants with a wide variety of backgrounds, and provides the background needed for further exploration and discussion of Computer Science Principles, specifically the Big Ideas of Creativity, Abstraction, Data and Information, and Algorithms.","Pixels, Post-It's® and CS Principles (Abstract Only)",NA:NA,2016
Steven M. Hadfield:Christopher S. Coulston:Marissa G. Hadfield:Lillian B. Warner,"The humanoid NAO robot continues to win both hearts and imaginations with its lifelike appearance and behaviors. Its consistent growth in popularity, an increasing wealth of free behaviors, and the intuitive Choregraphe development environment provide educators and developers with exceptional opportunities to motivate interest in STEM disciplines and breach impediments such as perceptions that such technology is simply too hard. In this poster, the authors discuss a variety of experimental uses of the NAO robots for K-5 STEM Outreach. Initial development and demonstrations focused on generating enthusiasm for both robotics and programming. Dancing and exercising behaviors from Notre Dame University's F.U.N. Lab and Aldebaran Robots easily integrated into voice-controlled Choregraphe demonstration scripts. Faculty and undergraduate students directed this enthusiasm to motivate engagement in Hour of Code programming activities. The team also utilized the NAO robots in small group settings within a K-5 Response To Intervention (RTI) program where demonstrations were followed by having the children interactively experiment with the robots stimulating imagination, creativity, curiosity, and problem solving skills as well as confidence and self-esteem. Next the RTI children actually programmed the robots using a story-based methodology and the powerful while intuitive building block programming constructs of Choregraphe. The team's on-going development efforts focus on expanding the repertoire of available behaviors to include interactive math games and foreign language educational dialogs. Results from use of these new behaviors will be presented at the SIGCSE Symposium. The team is also working to measure attitudinal, conceptual understanding, and math and language skills improvements.",Adventures in K-5 STEM Outreach Using the NAO Robot (Abstract Only),NA:NA:NA:NA,2016
Sarah Hug:Jane Krauss,"When counselors become advocates for computing they can have significant impact in recruiting youth in the field through their administration of course assignments and engagement in career exploration with students. A recent study of counselors' academic backgrounds, work priorities, and current perspectives and practices regarding advising in computing has implications for educators and others interested in building cooperative relationships with counselors. The study took place as an activity of the Counselors for Computing (C4C) program. C4C leverages the National Center for Women & Information Technology (NCWIT)'s organizational membership, applies evidence-based approaches for professional development, and monitors and adjusts practices to make inroads into CS education through school counselor engagement. In an effort to tailor existing professional development for counselors to the realities of their complex roles in schools, C4C asked 80 counselors to describe their background academic experiences, the schools in which they work and the ways they spend their time at work. In addition, study participants were asked to describe their current counseling practices regarding computing, the extent to which computing was taught in their schools and their preferred methods of receiving professional learning. Understanding the ways in which school counselors interact with youth, parents, administrators, teacher colleagues and other stakeholders may assist K12 computing educators in their efforts to collaborate with counselors in a shared effort to recruit and retain youth in their courses. In this poster presentation the authors will a) frame the problem of counselor readiness to guide toward computing, b) describe the current experiences of school counselors with regard to computing education and career guidance, c) detail how counselors' current work assignments and backgrounds can inform professional learning and relationships in support of pathways to computing careers, and d) show sample messaging and resources computer science educators can use to inform counselors and other school professionals about opportunities for youth in computing.","Engaging School Counselors, Creating Computing Allies (Abstract Only)",NA:NA,2016
Samantha S. Foley:Joshua Hursey:Daniel Koepke:Justin Ragatz:Jason Regina,"Computer science students must understand parallel and distributed computing (PDC) concepts to be effective computer scientists in the workforce, as reflected in the ACM Curriculum guidelines. Communities of CS educators are creating educational modules, and making parallel compute environments (PCEs) available to educators who are integrating PDC concepts into their existing curriculum. Even with these resources there is a barrier to entry for students to use PCEs, namely the unfamiliar and complex system software ecosystem of modern PCEs. The OnRamp project lowers that barrier to entry for exploring PDC concepts on a variety of PCEs while also providing a path for students to learn how to be productive on the native PCE. OnRamp is designed to be a general-purpose web portal for supporting the exploration of PDC concepts that harnesses the existing educational resources created by the CS education community. It coaches students through interactive modules that teach them about PDC concepts and PCEs while allowing them to launch parallel applications from day one. As students become more comfortable with running parallel applications on PCEs, OnRamp transforms into a reference guide as they graduate to using the native PCE. This poster describes the motivation, design, and some motivating use cases for the project. We hope that this poster inspires parallel and distributed computing educators to use OnRamp in their courses.",OnRamp to Parallel and Distributed Computing (Abstract Only),NA:NA:NA:NA:NA,2016
Johanna Okerlund:Orit Shaer:Celine Latulipe,"We are developing ways to teach computational thinking through interaction with tangible digital tools for synthetic biology. Inspired in part by Jeannette Wing's (Wing 2008) notion of the essence and pervasiveness of computational thinking, a growing community within SIGCSE is exploring tools that encourage computational thinking that don't use traditional computer science terminology or computer programming (Basawapna 2013, Daily 2014, Freeman 2014, Miller 2014, Wolz 2011). However, that community has not yet explored how to teach computational thinking through bio-design. Synthetic biology is a relatively new research field where scientists engineer living organisms to exhibit new behaviors. Biologists arrange and combine BioBricks, sequences of DNA that exhibit a behavior, sense an environmental factor, or indicate the beginning or end of a larger sequence. Bio-design not only incorporates traditional principles of computational thinking (abstraction, modularity, design/build/test), but also introduces new challenges that force the user to apply these principles in new ways. Interacting with biology can thus 1) help deepen understanding for people who are proficient in computational thinking, 2) provide a platform for introduction to computational thinking for the first time. Because most bio-design is performed in a wetlab by experienced biologists, we focus now on designing and developing low-barrier digital tools for interacting with biology. We present SynFlo (Okerlund 2016), a tangible interactive system for bio-design that mimics a real-life biological wetlab protocol and we discuss the properties of SynFlo and bio-design in general that encourage computational thinking.",Teaching Computational Thinking Through Bio-Design (Abstract Only),NA:NA:NA,2016
Andrea Wong:Eric Tran:Joe Jung:Ben Shaw:Marina Espinoza:Beverly Sihsobhon:Melissa Lindquist:Samuel Breese:Matthew Peveler:Barbara Cutler,"The Rensselaer Polytechnic Institute (RPI) Homework Submission Server is an ongoing open source project used to collect, compile, and automatically grade programming homeworks for students in our introductory and sophomore computer science classes. It allows viewing of homework, lab, test, and overall grades and late submissions and excused absences on homework. Our first hypothesis is that an electronic submission server is the preferred way for students to submit their coding homeworks because it provides immediate feedback about the correctness of their code and ensures fair, consistent grading since their code is compiled and run with the same test cases, on the same computer. Our second hypothesis is that students appreciate courses with a flexible policy for late submission of homeworks, allowing them to use a specific number of ""late days"" throughout the semester without penalty. We recently conducted a survey to test these hypotheses and will incorporate specific feedback from the students as we continue development and expand the server to more courses at RPI and other universities.",User Experience and Feedback on the RPI Homework Submission Server (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2016
Deborah Knox,"A new course, Computer Science Professional Development Seminar, engages students in reflective self-discovery and career planning, and also facilitates attainment of student outcomes assessment data for continual improvement of our program. Prior to requiring this half-semester course, students selected when to attend colloquia and various presentations. This strategy did not insure that students had a common exposure to topics. Though this course is titled as a professionalism course, this poster describes broader content coverage. Lifelong learning, ethical professionalism, and social media are included. The learning experiences in this course encourage students to establish an early commitment to their personal career development. Additionally, students are guided to increase their awareness of social issues and professional practice knowledge areas from CS2013. Targeted to the second-year (sophomore) population, this course helps connect the students with our departmental community and leads the students to better understand expectations and capstone opportunities. During this course, students receive mentorship by upper-class students, alumni, faculty, staff, and outside computing professionals. Since the course is required, students are afforded dedicated time to expand their understanding of professionalism, to learn about many opportunities for undergraduates, to reflect on case studies and on their intended career path, and to advance their preparations for the next step of their career. This annual course has been offered four times. We strive to keep section enrollments at seminar level to facilitate discussion and to promote community. Some events with outside speakers require one common meeting of all sections. Course management strategies are offered.",Guiding Career Development Prior to Capstone Experiences (Abstract Only),NA,2016
Mackenzie Leake:Colleen M. Lewis,"Dozens of online communities have been developed to support high school computer science (CS) teachers by providing them with CS teaching resources. However, these sites have failed to meet teachers' needs and are widely underused. Despite this underutilization, organizations continue to create new communities with content that overlaps with the materials provided within existing communities. Our research explores the barriers to CS teachers' engagement with online resources and their attitudes toward online communities. We find that teachers are frustrated by the time and difficulty required to navigate the sites and find useful information. It appears the barriers to accessing these resources cannot be overcome by creating additional large, multipurpose communities. Even though it seems that having large communities would be valuable for increasing access to resources, our research indicates teachers prefer smaller, more specialized communities. We are eager to discuss ideas for designing new communities that provide more relevant content for teachers in a way that is easy for them to find.",Bigger Isn't Better When It Comes to Online Computer Science Teacher Communities (Abstract Only),NA:NA,2016
Ann Gates:Monika Akbar:Mary Kay Roy:Florencia Larsen:Ivonne Lopez:Christian Murga:Angel Ortega:Jesse Tellez:Rebecca Urbina,"Data Science, the field of data extraction, manipulation, and analysis in order to derive knowledge or insight, is becoming an essential component of effective management and planning for industrial, research, scientific, and social communities. With the goal of engaging middle-school students in the important field of Data Science, the Sol y Agua project is developing a computer game based on regional environmental issues explored through data analysis. The Sol y Agua project will augment the learning environment of middle school students by incorporating simulation and data science to existing curricula in the form of an interactive educational game. The game has a theme of water sustainability and stewardship with an emphasis on information analysis, negotiation, and decision-making. The game will also immerse students in regional issues concerning biodiversity, sustainability, and the human impact on the environment. This video game will allow students to analyze and interpret data, and make informed decisions about water conservation and sustainability. Simulation and data visualization allow students to perform simulated, environmentally-conscious planning and virtual experiments. Using simulations allows students to easily and inexpensively gather data from the virtual environment. Data visualization allows us to quickly represent this data in new, meaningful, and engaging ways.",The Sol y Agua Project: Enhancing Middle School Education through Computing with an Emphasis on Simulation and Data Science (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA,2016
Michael Kuehn:Jarred Estad:Jeremy Straub:Thomas Stokke:Scott Kerlin,"There are many factors that play a part in how a student performs during a course. Some of these factors can be looked at in hindsight to help suggest why a student may or may not have done well in class. This poster assesses the potential of predicting student performance in an introductory computer science class using information about students' preparation, attitudes and study habits. An expert system has been utilized for this purpose. The expert system accepts data related to seven different categories of preparation, belief and attitude and, through the partial activation of multiple rules, predicts an outcome for each student on the post-test (which should correlate with and is used as a surrogate for the student's final course grade). This poster presents our findings and correlation between certain factors relevant to students' success. It shows how these factors can be used to predict a student's grade and discusses the significance of being able to do so. Thus far, the results from the first sample of data appear promising. The work has shown that certain groups of self-assessment questions have clearly out performed other groups in predicting final test grades. The use of expert system techniques to predict student grades can provide an insight on different factors that affect student performance. Knowledge of characteristics that may lead to poor performance allows instructors to potentially identify students who may be at risk of a low grade and need supplemental instruction, tutoring or other support at the outset of the semester.",An Expert System for the Prediction of Student Performance in an Initial Computer Science Course (Abstract Only),NA:NA:NA:NA:NA,2016
Benjamin J. Kruger:Richard Matzen,"First year Computer Science students must face the dual challenge of learning to think algorithmically while simultaneously assimilating the complex and often unintuitive syntax of their first programming language. Mitigating this problem has been an active research area for decades, spawning a number of programming languages intended for students. While some such teaching languages have achieved a measure of popularity, both in the classroom and for general purpose programming, none has achieved ubiquity, which suggests there is no silver bullet. To this end, we present a suite of open source software including (1) a web-based toolkit for developing and modifying teaching languages using parsing expression grammars, (2) C Spot Run, a simple imperative teaching language built with the toolkit and informed by empirical research in intuitive syntax, and (3) a web-based development environment enabling the student to complete programming assignments directly from a web browser, eliminating complicated compiler installation and configuration. These artifacts are the first steps in an ongoing project intended to serve not only as a classroom tool, but also as a platform for the observational and experimental study of programming languages in classroom settings. By analyzing source code and metadata, common syntactic obstacles may be exposed and empirical studies of syntax can be verified in the classroom.",A Web-based Environment for Developing and Utilizing Teaching Languages for Novice Computer Science Students (Abstract Only),NA:NA,2016
David Hovemeyer,"FunWithSound is a music composition library for Processing which makes it easy for students in creative computing and introductory programming courses to create music compositions with a small amount of code. Building upon Processing's considerable strengths in the domain of visual art, FunWithSound extends Processing to support music creation.",FunWithSound: A Music Composition and Synthesis Library for Processing (Abstract Only),NA,2016
Gary R. Skuse:Daniel A. Walzer,"There is a growing body of evidence that indicates that many students would benefit from coursework in computer science regardless of their academic majors. While there are obvious advantages to learning computer science for students in the quantitative and analytical fields that comprise the STEM disciplines, the advantages to other students are less obvious. In order to investigate the impact of computer science principles and methods on students in the liberal arts we convened a workshop of faculty comprised of an equal number of participants from each discipline, i.e. computer science and the various liberal arts. We identified a clear need to better understand the computational needs of liberal arts students and faculty and we identified opportunities for computer scientists and liberal arts students and faculty to work together to better prepare students in both disciplines and better support faculty research in the liberal arts.",Exploring the Role of Computer Science in the Liberal Arts (Abstract Only),NA:NA,2016
Richard E. Ladner:Brianna Blaser:Andreas Stefik:Daniela Marghitu,"Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing (uw.edu/accesscomputing) and AccessCS10K (uw.edu/accesscomputing/accesscs10k), will be shared.",Universal Access to Computing Education (Abstract Only),NA:NA:NA:NA,2016
Allen S. Parrish:Stan Thomas,"The ABET Computing Accreditation Commission (CAC) has been involved in a multi-year process to update the accredAitation criteria to incorporate a new framework for outcomes assessment, as well as to update the specific program criteria in computer science, information systems and information technology. Of the program criteria revisions, the computer science criteria are the most heavily revised, with the goal of achieving some degree of consistence with the CS2013 Report. This Birds of a Feather session is designed to discuss the philosophy behind the criteria changes, and present a draft of the revised criteria for review and comment. The session will promote attendee participation via small group discussions, thereby providing the opportunity for participants to provide input on the revised criteria. The session will also solicit feedback to ABET on computing accreditation in general, and on the overall accreditation process.",Updates to the ABET Computing Accreditation Criteria (Abstract Only),NA:NA,2016
Susan Reiser:Rebecca Bruce:Jennifer Burg:Bill Manaris,"Do you teach or are you interested in teaching digital media? Do you work in a digital media degree program or department? This BOF will explore different ways of merging computer science and the arts. We invite you to apply to attend our creative, collaborative Computing in the Arts community of CS educators this summer at our NSF-funded faculty workshop. Additionally, we want to learn what you teach in digital media, and how your program is structured. Is it part of Computer Science, Art, Mass Communications, New Media, or something else? High schools in many states require no computing education beyond studying office suite software. However, these same students are experienced and enthusiastic digital media users. Computing in the Arts degree programs can harness this interest and experience, facilitating both critical and creative thinking. Computing theory and practice can be applied in art and, at the same time, be informed by artistic concepts and methods. Moreover, art theory and practice can be enriched by computational methods and techniques.",Fostering Computational Creativity through Computing in the Arts: A Community of Educators (Abstract Only),NA:NA:NA:NA,2016
Donald J. Slater:Wanda P. Dann:Stephen Cooper,"This session is for anyone currently using Alice Level 2 and/or Alice Level 3, or those exploring the possibility of using Alice in their curriculum. The discussion leaders and attendees will share teaching strategies, tips, and techniques with each other and those new to Alice. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources. There will be a special emphasis on the new Alice 3 to Java textbook and accompanying support materials, how Alice supports the transition to Java, and mapping Alice 2 and Alice 3 curriculum standards and guidelines.",Birds Of A Feather: Teaching with Alice (Abstract Only),NA:NA:NA,2016
Catherine Bareiss,"Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Possible topics might include: sharing classes, increasing enrollment, general education, and specialized courses.",Computer Science: Small Department Initiative (Abstract Only),NA,2016
Amjad Altadmri:Neil C.C. Brown,"The Blackbox project collects data from opted-in users of the BlueJ beginners' Java IDE. This data includes source code edits, compilation results, and use of various tools within BlueJ (such as the debugger). Interested researchers may sign up either to use the global database, and/or to use Blackbox as a data collection platform for their local BlueJ-based studies. Blackbox has been running for over two years and contains the results of over 100 million compilation events from over 1 million users. Over 50 researchers have already signed up for access to the data. This session will allow interested researchers, whether already using Blackbox or not, to come together and talk to each other and to the Blackbox team about using the Blackbox data in their research. The Blackbox team will provide a brief overview of the project, and the research opportunities it provides, followed by lots of time for questions and discussion.",Researching Programming Education with Blackbox (Abstract Only),NA:NA,2016
Charles Garrod:Jeffrey Forbes:Colleen Lewis:Peter-Michael Osera,"Institutions small and large often use student teaching assistants (TAs) to provide office hours, tutor students, and grade student work, and the quality of a course's TAs can greatly affect the quality of the course. In this BOF we will discuss the training we provide to prepare TAs for their course duties and the mentoring we provide to foster their role as future educators. Improving the effectiveness of TA training and mentoring can have an immediate impact on the quality of teaching, potentially improve retention and diversity in computer science, and have a long-term impact on all aspects of our field as our current students and TAs progress through their industry and academic careers. Our goal is to provide a forum for you to disseminate your TA mentoring practices and for you to hear the mentoring practices of others, with the goal to develop a collection of best practices for TA training and mentoring for computer science. This BOF is appropriate for professors or instructors of any computer science course or summer program that uses undergraduate or graduate student teaching assistants.",Mentoring Student Teaching Assistants for Computer Science (Abstract Only),NA:NA:NA:NA,2016
Beth A. Quinn:Alvaro E. Monge:Lecia Barker:Leo Porter:Daniel Zingaro,NA,Practical Methods for Broadening Participation Through Student Engagement in CS1/CS2 Courses (Abstract Only),NA:NA:NA:NA:NA,2016
Gloria Childress Townsend,"In January 2004, we organized the second SIGCSE Committee (""Expanding the Women-in-Computing Community""). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Celebrations of Women in Computing.",A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only),NA,2016
Rebecca Bates:Valerie Summet,"Have you read any of the common reads for SIGCSE 2016? Now's your chance to talk about them! Two books: The Diamond Age: Or, A Young Lady's Primer by Neal Stephenson (Bantam Spectra, 1995) and Ancillary Justice by Ann Leckie (Orbit, 2013) as well as two short stories: ""A Logic Named Joe"" by Will F. Jenkins (Street and Smith, 1946) and ""Seven Years from Home"" by Naomi Novik (Clarksworld Magazine, 2014) were proposed at the end of the 2015 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the two books and two stories. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2017 conference.",SIGCSE Reads: Time for Book Discussion (Abstract Only),NA:NA,2016
Mark Sherriff:Daniel Garcia,"Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.",Teaching Track Faculty in CS (Abstract Only),NA:NA,2016
Chris Mayfield:Saturnino Garcia:Helen Hu:Clif Kussmaul:Tammy Pirmann,"Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to ask questions and learn more, and (2) bring together experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.",POGIL in Computer Science for Beginners and Experts (Abstract Only),NA:NA:NA:NA:NA,2016
Heidi J.C. Ellis:Stoney Jackson:Gregory W. Hislop:S. Monisha Pulimood:Gina Likins,"Student participation in Humanitarian Free and Open Source Software (HFOSS) projects offers great learning opportunities for students, including: designing, coding, testing, documentation, collaboration and other professional skills. Humanitarian projects also foster understanding of computing's potential social impact. However, working with any open source project -- including HFOSS projects - presents some challenges to instructors. Identifying appropriate assignments, creating meaningful rubrics, mapping the academic schedule to a project's release cycle, and eliciting engagement from the HFOSS project community are just a few of the potential hurdles to overcome. This BOF will be led by a diverse group of faculty who have encountered and overcome these challenges. The organizers and other attendees will share approaches to student involvement in HFOSS as well as the challenges they've encountered and how they've overcome them. Faculty who are interested in involving students in real-world projects will be able to ask about topics including use of HFOSS in a range of courses including introductory courses, project selection, structuring courses and assignments, and gaining university buy-in, while making connections with more experienced faculty in this area. Participation of an open source community member will add perspective from open source communities.",Preparing to Teach Humanitarian Open Source (Abstract Only),NA:NA:NA:NA:NA,2016
Briana B. Morrison,"The number of PhD students researching Computer Science Education worldwide is growing. This is an organized opportunity for all those attending the largest Computer Science Education Conference to meet one another. All attendees will be invited to introduce themselves along with their institution and focus of research. They may also propose the most important question to be answered by the BOF. After introductions the attendees will have the opportunity to discuss research goals, job opportunities and career trajectories, future conference and publication plans, and even compare advisor stories. Undergraduates and masters students interested in a CS Ed PhD are also encouraged to attend and ask questions. Attendees will determine the best way to stay connected and everyone will be given the opportunity to opt-in for future communications.",CS Ed PhD Students Unite! (Abstract Only),NA,2016
Pat Yongpradit:Deborah Seehorn:Tammy Pirmann:Irene Lee:Bryan Twarek,"Our community has been seeing explosive interest and growth in K-12 computer science education. With this, a common question from states and school districts arises: What should students learn in a K-12 computer science pathway? We in the community are routinely asked to provide input on what is critical for students to learn at various grade levels. Code.org, CSTA, ACM, and lead states have kicked off the development of a framework for states and districts creating a K-12 pathway in computer science. This effort, called Framing K-12 CS, is not about developing standards (that will be left up to the CSTA/states to do), but rather a more high-level framework that can guide states or districts who want to then design their own curriculum, standards, assessments, or teacher certification programs. The framework would identify the core themes, practices, and (within each theme) learning statements that detail CS literacy when exiting certain grade spans (ex: exit competencies at grades 2, 5, 8, and 12). The CSTA and Code.org are aligning the development of this framework and the current CSTA standards revision. K-12 practitioners, researchers, states, districts, industry, and non-profit organizations have been involved throughout the development. This BOF will allow the CS education community to get an internal community preview of the framework and standards before the larger public review period later in the Spring, and discuss its relationship to the CSTA standards. The BOF will include the opportunity to give input and ask questions.","Defining Concepts, Practices, and Standards for K-12 CS (Abstract Only)",NA:NA:NA:NA:NA,2016
Karen Jin:Bonnie K. MacKellar,"Many, if not most, computer science majors plan on careers in some aspect of software development in industry. Software development in industry is characterized by extensive use of tools and specialized software to support large scale projects, such as Git, Maven, Gradle, Jenkins, Hibernate, and Spring. We want our students to have exposure to industry strength tools and systems, but want to avoid having our courses overwhelmed by tools with steep learning curves. In this session, we plan to discuss questions and issues that are raised when choosing, installing, teaching, and using industrial strength tools and frameworks in software project courses. Bring your suggestions for favorite tools and frameworks, ideas on learning activities, and support materials. Some of the questions we might tackle: How do we identify tools that support our course learning objectives? How do we find the time and resources to learn the tools? How do we work with our IT staff in installing and configuring the tools? How many tools and systems should we use in a project course, and when do we merely start overwhelming the students' And finally, what works?","Industry Strength Tools for Software Engineering: What Works, What is OverKill? (Abstract Only)",NA:NA,2016
Colleen M. Lewis:Chris Gregg,"Why doesn't my code work? Instructors and TAs hear this question day in and day out during introductory computer science courses, and beyond. Students arguably have a harder time learning how to debug their own (and others') code than they do in learning how to plan and write the code in the first place. Debugging strategies are difficult to teach, and there are pros and cons to different debugging methods (e.g., print statements vs. gdb vs. Googling). This BoF will elicit strategies for teaching debugging to CS students, and we will discuss the benefits of introducing certain tools earlier or later in the curriculum. We will also discuss how to assess whether students are able to debug code effectively. All suggestions will be posted on CSTeachingTips.org for dissemination (See tinyurl.com/CSTT-TAs for tips from SIGCSE 2015). We welcome attendance from seasoned and novice instructors, and from teaching assistants.",How Do You Teach Debugging?: Resources and Strategies for Better Student Debugging (Abstract Only),NA:NA,2016
Jakita Thomas:Shaundra B. Daily:Mikala Streeter,"As the conversation for broadening participation in computer science expands, the need for diversity among computing students becomes clearer. Yet, each year at SIGCSE, there are very few opportunities for people working with, or interested in working with students of color at the K-12 AND university levels to share experiences and collaborate on how to best support our students. This BOF will provide a platform for not only discussing effective, culturally relevant approaches to teaching computer science to students of color, but also addressing questions and concerns of people serving this demographic.",Supporting Students of Color in Learning Computer Science (Abstract Only),NA:NA:NA,2016
David Reed:Mark R. Nelson,"The Computer Science Teachers Association (CSTA) is a member organization of more than 21,000 educators and supporters of K-12 computer science. It was formed by and is affiliated with ACM, but serves as an independent non-profit with a mission to support K-12 CS teachers and promote computer science education. The past year has been a landmark one for CSTA, with the hiring of a new Executive Director, Dr. Mark R. Nelson, as well as a number of new initiatives. These initiatives include a new Website, expanded member benefits, new partnerships and advocacy programs, and a greater emphasis on professional development and research. This session will provide a brief overview of some of these initiatives, as well as introduce plans for the organization that are currently in development. The majority of the session will be an open forum in which attendees will be encouraged to voice their opinions and provide feedback to the Executive Director and members of the CSTA Board of Directors in attendance. Current CSTA members, along with any SICGSE attendees who have an interest in K-12 CS education, are encouraged to attend, learn about CSTA's efforts, and share experiences that can guide the future of CSTA and K-12 CS education.",Current Initiatives and Future Directions of the Computer Science Teachers Association (CSTA) (Abstract Only),NA:NA,2016
Marty Stepp:Allison Obourn:Jessica Wolk:Victoria Kirst,"Several times in the past few years we have held BoF sessions about teaching web programming at the college level. Our feedback indicates that the most valuable aspect of the past sessions was simply to get everyone together for an exchange of ideas and information, so this will be the focus of the session again. We'd like to bring together two groups of web programming instructors: Newcomers who have not yet taught this material before (or are just starting) and want to soak up information, and veterans who have now taught it and have insights to share with the group. Newcomers can ask questions about materials, languages and technologies to use, what works and what doesn't, and so on. Veterans can share tips from the classroom and helpful resources. We can also discuss the latest technologies such as HTML, ECMAScript/JavaScript, iPhone/iPad, Android, and web application frameworks such as Node.js, Rails, AngularJS, and more.",Web Programming (Abstract Only),NA:NA:NA:NA,2016
John P. Dougherty:Joseph E. Hollingsworth:Joan Krone:Murali Sitaraman,"Computing students often have difficulty understanding the relevance of the math we teach, though educators appreciate the significance. This BoF will discuss ways to connect this math with what computing students think they should be doing: programming. This BoF will focus on the benefits (and perils) of connecting math to the development of correct programs with the goal of motivating the relevance of the math-related portion of the ACM/IEEE Computer Society CS2013 curriculum. The discussion will continue the spirit and essence held by the math-thinking working group, a distributed working group of approximately 170 people who have been promoting and clarifying the importance of mathematics in computer science education.",Mathematical Reasoning in Computing Education: Connecting Math We Teach with Writing Correct Programs (Abstract Only),NA:NA:NA:NA,2016
Christopher D. Hundhausen:Adam S. Carter,"Computing educators have become increasingly interested in learning analytics, which involves collecting and analyzing data on students' learning processes and outcomes for the purpose of improving learning and instructional practices. A variety of computer programming environments enable the automated collection of log data on students' programming processes. In addition, log data on students' online social behavior can be easily collected. All of these data can be analyzed alongside data on students' learning outcomes in order to identify correlations between learning processes and outcomes, and ultimately to better tailor instruction to students' needs. This BOF will provide a platform for discussing the emerging field of learning analytics within the context of computing education. The following questions will serve as a starting point for our discussions: (1) What types of data should we be collecting on computing students' (2) How can we best analyze these data in order to gain meaningful insights into students' learning processes? (3) How can we design effective instructional interventions based on the data we collect and analyze?",Exploring Learning Analytics for Computing Education (Abstract Only),NA:NA,2016
Josh Hug:Daniel D. Garcia,"As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Providing timely effective feedback for students, exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating diverse course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content. A master list of such tips will be compiled and provided to the SIGCSE community.",Handling Very Large Lecture Courses: Keeping the Wheels on the Bus II (Abstract Only),NA:NA,2016
Kate Lockwood:Maureen Doye,"The National Center for Women & Information Technology (NCWIT) works with faculty at all stages of the pipeline to create measureable change at their educational institutions. While faculty are typically committed to this work, they often do not have the time or expertise to create clear, measureable goals that can be assessed and reported to funders or administration. In this BoF, participants will work with NCWIT-developed change tracking tools, and social scientists to develop goals for their home institutions. To gain the most out of the session, please bring your Internet enabled device to try hands-on activities during the session.",Setting Quantifiable Goals for Broadening Participation in Computing (Abstract Only),NA:NA,2016
David E. Johnson,"Higher education has the opportunity (and often the mandate) to provide STEM outreach to their communities. Summer camp programs are one mechanism for providing quality CS learning experiences to a wide audience. This BOF will provide a platform for discussing strategies to make summer camps fun and sustainable. What are camp topics have been successful? How is funding obtained and sustained? Nationally, technology camps run the gamut from small, one-week programs to large camps that serve hundreds. The proposer will share his experience developing the University of Utah GREAT camps (www.cs.utah.edu/~dejohnso/GREAT), which have over 700 students attend one-week camps and hopes the BOF will attract others with their own experiences.",Computer Science Summer Camps: Making Summer Programs Fun and Sustainable (Abstract Only),NA,2016
Jennifer (Ginger) Alford:Erik Brunvand,"The growing do-it-yourself movement relies heavily on electronics, code, and data. Abundant resources and low cost materials result in people of all ages seeking to learn how to master these modern creative supplies. We will discuss how computer science educators might tap into teachable moments provided by this voluntary, informal, enthusiastic movement to promote formal computer science study. The success of introducing formal computer science skills in the context of computing as a creative tool has been well established in the areas of media computation and digital art. It is natural to extend this idea to computing as a tool for creating physical objects and for interacting with the physical world in different ways. This discussion will focus on examples of creative projects that expose topics in computer science, including microcontrollers, 3D printing, laser cutting, toy hacking, and environmental sensing. The session will emphasize the types of computer science concepts that naturally tie into each project. Attendees are encouraged to share their own project experiences and to reflect on lessons learned, accessibility of concepts, and practical issues of class management.",Leveraging CS Teachable Moments in the Maker Movement (Abstract Only),NA:NA,2016
Lillian N. Cassel:Don Goelman:Darina Dicheva:Heikki Topi,"Data Science programs are emerging in many areas and are related to many disciplines. This includes sciences, social sciences, business, journalism, history, and any other area dealing with massive amounts of data. Some institutions are establishing majors or minors in data science while others need to incorporate some level of introduction to relevant topics within the context of other coursework. The BOF will engage SIGCSE participants who have views on the content and role of courses and programs in data science. Two existing NSF sponsored projects will seed the discussion. One of the projects investigates the use of flipped classroom instruction for course material in data science, with significant attention to what can be done with a minimum of prerequisites. The other project produced a workshop to elicit opinions from a number of perspectives on what are the core elements of data science and how the subject is seen by different disciplines. Results from the workshop will be available at SIGCSE. With these as a starting point, participants in the Birds of a Feather session will explore the emerging field of data science and its relationship to computer science education.",Brainstorming Data Science as a Fluency Course for Non-Majors and as a New Specialization (Abstract Only),NA:NA:NA:NA,2016
Amardeep Kahlon:Linda Smarzik:Mary Kohls,"Many community colleges are looking at Competency Based Education (CBE) as a way to increase student recruitment, engagement, completion, and transfer to baccalaureate programs. In addition, colleges are looking at CBE as a way to reduce costs as well as provide students with clear, marketable skills for employment. CBE is particularly suited to computer science due to the nature of the discipline where well-defined, measurable outcomes can be designed and implemented. Is your college exploring a curricular redesign using CBE? Do you want to know what CBE is and how to implement a CBE curriculum in computer science? This BoF will host a discussion on planning, implementation, and scale-up of CBE programs. Besides learning about CBE, this BoF will provide attendees with a chance to connect with others trying to implement CBE programs so that they can share knowledge, share resources, and form future collaborations. The recent CS2013 curricular guidance will also be discussed as an important resource for developing CBE in CS.",Competency Based Education in Lower-Division Computer Science Taught at Community Colleges (Abstract Only),NA:NA:NA,2016
Richard Weiss:MIchael E. Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne:Siddharth Kaza:Ambareen Siraj,"We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. However, we also want to assess how much students are learning from these exercises, and the exercises themselves could be used to assess what students know. Creating new hands-on exercises requires significant preparation on the part of the instructor. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. The purpose of this BOF is two-fold: 1) to continue to bring together instructors who have developed hands-on exercises with those who would like to use them, and 2) extend the discussion to include assessment of student learning. We recognize that few CS programs can afford new required courses, so we will discuss ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering, algorithms and programming (CS0, CS1, CS2). The questions we will ask are, ""What exercises have you tried? What are your experiences? What are you looking for? What are the learning goals for your students? How do you assess them?"" Recent hiring forecasts indicate that there is still a tremendous need for skilled information security experts. Security is one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. It is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, discuss how to teach and evaluate analytical skills, and discuss how we know if we are making a difference. We plan to share experiences, practices and ongoing efforts, including our own (e.g., our teaching experiences, Security Injections, the Security Knitting Kit project, The EDURange project and our dissemination of other infosec interactive exercises such as SEED labs). Both Security Injections and EDURange have features that address assessment.","Assessment of Security Knowledge, Skills and Abilities using Hands-On Exercises in 2016 (Abstract Only)",NA:NA:NA:NA:NA:NA:NA,2016
Joseph Mertz,"This BOF is intended to allow faculty interested in global service learning, Information and Communication Technology and Development (ICTD) research, and other cross-cultural experiences an opportunity for information sharing. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. And how can these experiences be evaluated? This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations. We will discuss means for sharing best practices, news, materials, and project artifacts. We will also explore opportunities for collaborating on projects and joint proposals.",Student ICTD Research and Service Learning Abroad (Abstract Only),NA,2016
Aaron Bloomfield:Borja Sotomayor,"Programming contests have a number of pedagogical benefits: they reinforce many concepts and skills that students see in computer science courses, build cross-cutting skills such as teamwork, and can improve job prospects by better preparing students for technical job interviews. The largest and oldest inter-collegiate programming contest in the world is the ACM's International Collegiate Programming Contest (ICPC). Participating in this contest can be fun and instructive for students, but some schools are discouraged from participation because of the large hurdles involved in forming an effective programming contest team, or in making an existing team more effective. A key to success for coaches and teams is to connect with existing individuals who are involved in the process and learn from them, as it is very hard to initiate effective involvement with no external help. This birds-of-a-feather will bring together existing ICPC coaches with other faculty who want to start such a programming contest team, or who want to improve their existing teams. Discussions will include issues that prevent greater participation in the North American super-region, as well as the overall international ICPC climate. Extensive links to existing resources -- both online and published -- will be provided, as well as a means for coaches to foster networking and communication. Strategy guides, including an article in this year's SIGCSE conference, will be discussed and distributed.",Increasing Programming Contest Participation for Fun and Profit (Abstract Only),NA:NA,2016
Kathy Menchaca Isbister,"This session is for K-12 (primary/secondary) educators who would like to talk about what types of professional development would be most relevant to them. It is also for curricular innovators who offer CS professional development to share how successful their attendees have been at implementing the strategies learned through their programs, and if attendees were able to use any materials the program provided in their own classrooms. We welcome an open and positive dialogue on opportunities for improvement in professional development offerings, and a celebration of successful strategies. The discussion leaders will share their own experience with the NSF funded Adventures in Alice workshops to prompt dialogue, and will encourage all attendees to actively participate in the session by sharing their own experiences, concerns, and triumphs.",Providing Impactful Professional Development Teachers Can Implement (Abstract Only),NA,2016
Ambareen Siraj:Sheikh K. Ghafoor,"Information Assurance and Security has been designated as a new knowledge area in the new ACM/IEEE-CS Curricula 2013. This is not a trivial task to accomplish, especially with lack of resources. With support from NSF (Award# DUE-1140864), we have developed a set of readily available resources called SecKnitKit (Security Knitting Kit, www.secknitkit.org), which offers a suite of instructional material for non-security faculty (faculty whose primary teaching/research focus is not security) to integrate security in upper division CS courses such as operating systems, software engineering, computer networks and databases. As part of the NSF CReST (CyberWorkshops: Resources and Strategies for Teaching Cybersecurity in Computer Science, DUE-1438861, www.crest4cs.org) project, this workshop will introduce CS faculty to the SecKnitKit resources that can be easily adaptable into any standard CS curriculum. The participants will receive access to all SecKnitKit materials (instructional and assessment) of interest and demonstrated use of the active learning exercises. Each participant will receive $125.00 stipend for his/her time. Requires a Windows or Mac laptop. Enrollment is limited to 28 participants who teach at least one of these courses: operating systems, software engineering, computer networks and databases).",CReST-Security Knitting Kit: Ready to Use Teaching Resources to Embed Security Topics into Upper Division CS Courses (Abstract Only),NA:NA,2016
Bill Manaris:Tobias Kohn,"This is an introduction to creative software development and music making in Python. This material is intended for CS0/CS1 courses and for courses at the intersection of computing and the arts. The workshop will introduce music making activities for teaching traditional CS1 topics, GUIs, event-driven programming, and connecting to external devices (e.g., smartphones, digital pianos) via MIDI and OSC (Open Sound Control). Participants will be introduced to Jython Music (http://jythonMusic.org), a library of Python modules for creative programming and music making, and will be making their own music artifacts a few minutes later. Intended audience: Computer science educators interested in teaching creative programming and computational thinking for CS0, CS1, introductory courses in the intersection of computing and the arts, and courses intended to attract and retain new CS majors. Some familiarity with Python expected. Each participant will receive a copy of (1) handouts to be used during the workshop, (2) sample student assignments and projects, (3) API documentation, (4) all required software, and (5) numerous sample programs. Laptop required (with Java JDK 7 or higher). All other software will be provided. Headphones are recommended.",Making Music with Computers: Creative Programming in Python (Abstract Only),NA:NA,2016
Dan Armendariz:David J. Malan:Nikolai Onken,"This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker ""container"" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional ""less comfortable"" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.",A Web-Based IDE for Teaching with Any Language (Abstract Only),NA:NA:NA,2016
Lecia J. Barker:Leisa D. Thompson,"Most academic departments have outreach efforts to inform potential students and the public about their computing majors. Most participate in events and produce materials to communicate with students, teachers, parents, and employers. Often, however, these recruiting efforts are attended in an opportunistic way rather than strategically. Often, little thought is given to the return on investment of this nontrivial use of scarce resources (money, time), the message conveyed to the particular audience, or to tracking outcomes. In this workshop, participants will develop an actionable plan for increasing the enrollment of qualified women into their undergraduate majors. The workshop philosophy is that departments should accomplish the greatest return on investment, in the shortest time to bring benefits, with the smallest resource commitment. After all, recruiting women is rarely one's ""day job."" Using research-based materials developed by the National Center for Women & Information Technology (NCWIT) and ideas shared by NCWIT's Academic Alliance members, the presenters will provide information, a planning structure, resources, and activities to support participants in developing a strategic plan to improve the gender diversity of their undergraduate majors.",High Yield in the Short Term: Planning Strategically to Get Women into your Major (Abstract Only),NA:NA,2016
Clifton Kussmaul:Helen H. Hu:Chris Mayfield,"This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. In a POGIL classroom, teams of 3-5 learners work on activities with active facilitation by the teacher. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. In a POGIL classroom, the teacher is not a lecturer, but a facilitator who helps to ensure that all students are engaged and able to achieve the learning objectives. POGIL activities have a particular structure based on learning cycles. POGIL is a research-based instructional strategy, and studies show that it can significantly improve student performance. Workshop participants will work through POGIL activities as students. Participants will also work through meta-activities that use POGIL and are designed to help teachers learn core POGIL concepts, practices, and benefits. POGIL materials for a variety of CS concepts will be shared. More information is available at http://pogil.org and http://cspogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional.",Guiding Students to Discover CS Concepts and Develop Process Skills using POGIL (Abstract Only),NA:NA:NA,2016
Lenore Horowitz:George Berg:Kimberly Van Orman,"Even when we believe the research that shows that active learning is particularly helpful to both engage and empower students--they learn better, they learn deeper and it addresses issues of diversity--it's often not clear to us how we can implement it while keeping the quality of our course high. At UAlbany, courses taught using TBL including: computer programming, data structures, databases, web programming, networking and others. TBL is a structured method that can help instructors improve student learning and energize their classrooms. Team Based Learning (TBL) is an approach to course design that takes advantage of research into what helps students learn. Students work in permanent teams and course meetings are organized around application exercises. Courses are divided into units, and students are held responsible for the core reading in a beginning-of-unit test taken both as individuals and as teams. Application exercises conform to core principles (""4S""): Teams all work on the SAME problem, teams make a SPECIFIC choice, the problem must be SIGNIFICANT, and the teams must make a SIMULTANEOUS report of answers. A variant of the ""flipped classroom,"" the TBL course spends far less time ""covering the material"" in class, allowing course time to be spent on skill development and feedback on student work. In this hands-on workshop, participants will experience a model TBL learning sequence and learn active learning techniques that they can adopt in any classroom while learning the basics of the TBL method.","Engage, Energize and Empower Your Students with Team-Based Learning (Abstract Only)",NA:NA:NA,2016
Joel C. Adams:Richard Brown:Elizabeth Shoop,"OpenMP is an industry-standard, platform-independent parallel programming library built into all modern C and C++ compilers. Unlike complex parallel platforms, OpenMP is designed to make it relatively easy to add parallelism to existing sequential programs, as well as write new parallel programs from scratch. In this fun, interactive, hands-on workshop, participants will use OpenMP to learn about a variety of parallel programming concepts, including single program multiple data (SPMD) execution, fork-join threading, parallel loops, parallel blocks, atomic execution, mutual exclusion, and others. Participants will explore 15 short programs designed to help students understand specific parallel concepts, plus several longer programs in which OpenMP is used to solve significant problems. The workshop includes: (i) an introduction to OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how OpenMP may be used to achieve parallel computing objectives in CS 2013. Participants will also view visual examples that let students see parallelism happening in real time. Participants will need a laptop with an SSH client (e.g., BitVise, PuTTY), or a laptop with a compiler that supports OpenMP (e.g., gcc 4.2 or later, Visual Studio 2008 or later); Linux, Mac, and Windows laptops will be supported. Knowledge of a C-family language (e.g., C, C++, Java, ...) may be helpful but is not required to benefit from the workshop. All materials from this workshop will be freely available from csinparallel.org.",Teaching Parallel Computing Concepts with OpenMP (Abstract Only),NA:NA:NA,2016
Clifford A. Shaffer:Thomas L. Naps:Susan H. Rodger,"The OpenDSA eTextbook system provides a practical way for instructors to adopt algorithm visualizations (AVs), state ma-chine simulations, and interactive practice exercises into a variety of courses, including CS2, Data Structures, Algo-rithms, Programming Languages, and Formal Languages. An OpenDSA eTextbook can be used either as a complete re-placement for your traditional textbook and assignments or as supplemental readings, auto-graded assignments, or student practice. In this workshop, we present use cases from success-ful adoption of OpenDSA into existing courses. We will guide you past the real-life hurdles and pitfalls that get in the way of using AVs, interactive exercises, and simulators. We show you how to adopt OpenDSA exercises, how to configure existing OpenDSA materials to suit your needs, and provide an over-view of how to create new AVs or exercises. This workshop is about letting you engage students with highly interactive mate-rials in ways that you have said for years that you wanted to do.",Using OpenDSA eTextbooks in Your Class (Abstract Only),NA:NA:NA,2016
Mark E. Hoffman:Jerod Weinman,"This workshop introduces participants to an informal writing process that promotes student engagement and critical thinking with easily-assessed, low-stakes assignments. Unlike the formal writing typically used in software development or capstone courses to demonstrate knowledge, informal writing supports student learning (i.e., writing as thinking). Participants will use the Prioritize, Translate, and Analogize (PTA) Process in a model assignment; discuss how it works; and use it to develop a writing assignment. Participants will receive materials for the workshop assignment, samples of prompts employing the PTA process in a variety of courses, and other support materials. Participants are encouraged to bring an assignment idea to develop at the workshop. The workshop is intended for computer science instructors who want to learn about strategies for integrating writing in their courses to engage students and improve their critical thinking while limiting time for instruction and evaluation. No laptop is required.",Reading and Writing Like Computer Scientists: How to Promote Critical Thinking and Student Engagement (Abstract Only),NA:NA,2016
Stan Kurkovsky,"Lego Serious Play (LSP) is an experiential and highly creative process designed to facilitate strategic planning, team building, and problem solving using Lego bricks. In the LSP methodology, team members use their intelligence both as individuals and as a group to build simple models representing various concepts in response to a question posed by the faculty facilitator. Discussing the models helps students communicate valuable aspects of their own understanding and interpretation of the problem at hand, explore the team dynamics, and reduce the complexity of many projects. This workshop is intended for faculty interested in teaching undergraduate and graduate software engineering and related courses. This workshop will also benefit all other faculty (including high school teachers) looking for ways to supplement their course material with engaging and playful hands-on activities aimed to strengthen the teamwork, oral communication, problem solving, and design skills of students. LSP-based hands-on activities discussed during the workshop focus on a single software engineering topic including requirements engineering, architectural design, software testing, software dependability, project planning and management, design patterns, etc. Workshop participants will learn the basic principles of LSP and participate in two hands-on activities illustrating how LSP can be used to teach software engineering concepts in an engaging context. Participants will receive the necessary Lego kits, which they can keep after the workshop. Laptop is not required for this workshop. This work is supported in part by a 2015 ACM SIGCSE Special Project grant. More information at http://www.cs.ccsu.edu/~stan/sigcse2016/.",Lego-based Case Studies for Teaching Software Engineering Concepts throughout the Curriculum (Abstract Only),NA,2016
Daniel Zingaro:Leo Porter:Quintin Cutts:John Glick:Joe Hummel:Cynthia Lee:Jaime Spacco,"Recent work in computing has converged on a collection of complementary findings suggesting the value of the Peer Instruction (PI) pedagogy. Compared to lecture, PI has been shown to decrease fail rates, increase final exam grades, and increase engagement and enjoyment. In PI, students work together to exchange perspectives and use clickers to answer challenging conceptual questions in the presence of a knowledgeable instructor. In our efforts to mentor potential PI adopters, we note difficulties bootstrapping PI uptake at new institutions and new departments. In this workshop, our main goal is to support potential adopters in the process of shifting from lectures to PI. In recent months, we have contributed materials for many freely-available PI courses, and led a successful 3-day NSF-funded PI workshop. We will work with participants and their existing lecture-based resources to begin considering the ways that PI can enhance student learning. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.",Peer Instruction in Computing: A Focus on Student Learning (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2016
Jamie Payton:Tiffany Barnes,"The STARS Computing Corps is a national alliance with the mission to grow a diverse community of computing leaders. STARS serves as a framework for integrating civic engagement into college computing departments with the goals of broadening participation of underrepresented groups in computing, recruiting K-12 students into the computing pipeline, and retaining students in computing majors. The STARS approach to broadening the participation of women and underrepresented minorities in computing is based on research that has shown the value of creating a community and sense of identity. The Corps creates such a community across multiple institutions, including women's and historically black colleges and universities, with members that share the core values of becoming responsible leaders who use their computing skills for social benefit. Each cohort of students and faculty at a STARS member university collaborates with local K-12 schools and industry partners to conduct computing-related outreach, service, and research that can broaden participation in computing. These local cohorts help to build community within and across STARS member institutions, retain students in college degree programs in computing, recruit new students into computing, educate local K-12 teachers, counselors, students, and parents about computing, and build bridges with local industry and community organizations. This workshop will provide hands-on training for new schools to learn how to begin and build a STARS Computing Corps cohort on their own campus.",How to Launch a STARS Computing Corps Cohort to Improve Retention and Broaden Participation in Computing (Abstract Only),NA:NA,2016
Bill Siever:Michael P. Rogers,"The Internet of Things (IoT), considered by many to be the next big revolution in computing, refers to the trend to include networking and computing in a wide range of devices, such as watches, appliances, health monitors, toys, etc. Including IoT applications early in the curriculum may serve multiple pedagogical purposes, such as demonstrating social relevance, (e.g., health monitoring applications) and motivating other CS topics (e.g. distributed systems, networking, OOP, event driven programming, computer organization, and databases). This workshop will introduce participants to basic terms and technologies behind IoT. Participants will then work through a hands-on, classroom-ready exercise to build a complete IoT solution. The embedded portion of this solution, based on the popular Arduino platform (hardware provided), will be targeted at students who have completed CS1. The completion of a mobile app that interacts with the embedded devices will require CS2 skills. Participants should have an interest in IoT or be interested in engaging assignments for both introductory and upper level students. Participants are asked to bring a laptop computer and a recent mobile device, with appropriate software tools installed. Links to these tools, as well as a list of compatible mobile devices, will be provided. Most Android and iOS devices made within the last three years are suitable.",A Hands-On Introduction to the Internet of Things (Abstract Only),NA:NA,2016
Blair Taylor:Siddharth Kaza,"The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop, part of the Cybersecurity Resources and Strategies for Teaching (CReST) project, www.crest4cs.org, will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.","Introducing Secure Coding in CS0, CS1, and CS2 (Abstract Only)",NA:NA,2016
Amjad Altadmri:Neil C.C. Brown,"Blocks-based programming has become a very popular technology for teaching introductory programming in schools, but it still faces some issues as learners progress. The large transition gap between blocks-based and text-based programming is a source of worry for many educators. However, the difficulties learners have with developing and maintaining progressively larger and more complex programs in block-based systems force teachers to move students on to text-based systems rather than remain with blocks. Greenfoot 3 introduces frame-based programming, a hybrid of blocks-based and text-based programming. Frame-based programming adds comprehensive keyboard support, along with several other usability improvements aimed at removing frustrations for intermediate and experienced programmers, while also providing a way to fill the gap in the transition process. This workshop will show how to teach introductory programming using the new frame-based editor from Greenfoot 3. We will help the participants to explore the new editor in a hands-on session, accompanied by explanations of its distinctive features and how they have been designed to overcome the friction and niggles present in current blocks-based editors, while also providing pedagogical guidance for learners. Participants should bring their own laptop with the latest version of Greenfoot installed, available from www.greenfoot.org",Building on Blocks: Getting Started With Frames in Greenfoot 3 (Abstract Only),NA:NA,2016
Don Blaheta:Adrienne Decker,"Educators responsible for coordinating a staff to grade a large volume of exams or projects have learned, sometimes the hard way, the importance of writing good rubrics: they keep the graders on track, grading equitably, consistently, and quickly. But these benefits of a well-written rubric extend also to those of us without a grading staff, even to single classrooms of twenty or so students. Good rubrics will change your life! In this workshop, we will present various principles we have found to write effective analytic rubrics for student programming work, helping to keep our grading unbiased and to assess the student work more quickly. We will show specific examples of good rubrics, and then participants will jointly grade some sample work according to a shared rubric, discussing what works and what doesn't. Finally, participants will break into small groups to workshop a rubric for an assignment they've given in their own class. Most examples will be at the CS1/CS2 level (and CS1-only educators are welcome), but some of the discussion will address higher-level courses as well. Participants should bring the specification/handout for a programming assignment they have recently given in class (which need not be CS1/CS2), and are encouraged (if possible) to bring a small number of handed-in student solutions for that assignment. Laptops are not necessary unless that's how the participant is bringing or accessing their student solutions.","Rubricking Like a Boss: Writing and Using Rubrics For Faster, Fairer Grading of Student Assignments (Abstract Only)",NA:NA,2016
Aaron Cadle:Ira Greenberg:Deepak Kumar:Dianna Xu:Ursula Wolz,NA,Permeating Data Visualization in CS Courses (Abstract Only),NA:NA:NA:NA:NA,2016
Kelvin Sung:Rob Nash:Jason Pace,"Designed specifically for instructors of university or high school Introductory Java Programming Classes (CS1/2) with no background in videogames or computer graphics, and based on our original casual game designs, this workshop will: (1) lead participants through structured gameplay sessions; (2) analyze how game mechanics contribute to player engagement; (3) map core game logic and mechanics to programming constructs taught in CS1/2 classes (e.g., conditionals, loops); (4) guide participants to develop simplified versions of these games based on our custom APIs and using CS1/2 programming constructs; (5) present sample teaching materials based on the games that are being used in our own classrooms, including: lecture materials, hands-on worksheets, and programming assignments; and (6) discuss our experiences using the materials, including what worked and what to avoid. Our games are innovative twists on popular casual genres (e.g., a Breakout variant using the z-plane, and a Zuma variant with user-movable paths) and we're currently enhancing the educational versions for commercial release. We've developed custom APIs for our games that are readily accessible to new programmers based on the successful Game-Themed CS1/2 project. Participants of this workshop will gain the confidence to build similar games, examine approaches to developing teaching materials based on the games and APIs, and understand the challenges inherent to this approach. Students will have the unique opportunity to play with commercial-quality game demos while using CS1/2 concepts to build games that are fun and appropriate for all ages.",Learn CS1/2 by Playing and Building Commercial Grade Casual Games (Abstract Only),NA:NA:NA,2016
Richard A. Brown:Elizabeth Shoop:Joel C. Adams,"Map-reduce computation is the on-ramp to data-intensive cloud computing, and arguably the most widely deployed form of parallel/distributed computing. Participants will carry out exercises designed for students at CS1, intermediate, and advanced levels that introduce data-intensive scalable computing concepts using WebMapReduce (WMR), a simplified open-source interface to the dominant Hadoop map-reduce programming environment. WMR supports programming in a choice of languages including Python, Java, C++, and C#. Besides a hands-on experience with introductory teaching materials, the workshop includes an overview of teaching advanced map-reduce programming using WMR, and a comparison of WMR to direct Hadoop programming. All materials will reside on csinparallel.org, and the demonstration WMR system is reservable for participants' courses. Intended audience: CS instructors. Web-enabled laptop required.","CSinParallel: Using WebMapReduce to Teach Parallel Computing Concepts, Hands-on (Abstract Only)",NA:NA:NA,2016
Dennis Brylow,"The inexpensive Arduino makes for an attractive embedded platform in introductory courses. Its many variants, open source tools, and well-established hobbyist community support a staggering breadth of possible uses. In this workshop, we concentrate on block-based programming of the Arduino, providing a smooth path for Scratch programmers to expand into the wider world of sensors, actuators, and embedded systems. The MUzECS curriculum is designed to be an inexpensive replacement for the costly final robotics module of Exploring Computer Science (ECS), but also has clear applicability to Advanced Placement Computer Science Principles (AP CSP) and even college undergraduate courses. The session will introduce the Arduino Leonardo board, detail various ""shield"" extensions that are available, and present the tools and resources needed for high school or college instructors to get started. Demonstration activities will focus on ECS-style lessons that build programmable musical instruments. Laptop required.",MUzECS: Block-based Arduino Programming for Exploring Computer Science (Abstract Only),NA,2016
Kristine Nagel:Nannette Napier:Krishnendu Roy,"This workshop will provide details on how to plan and run non-residential, week-long computing summer camps for 4th-12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, EV3, and Tetrix), EarSketch, and App Inventor. Georgia Tech helped start other computing camps at eleven other colleges and universities in Georgia from 2007 to 2010 as part of Georgia Computes! NSF BPC grant. Since 2014, as part of the Expanding Computing Education Pathways (ECEP) NSF grant we have also helped institutions start or expand summer computing camps in South Carolina, Massachusetts, and California. The workshop will include presentation about application forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptops are recommended for this workshop.",How to Plan and Run Summer Computing Camps: Logistics (Abstract Only),NA:NA:NA,2016
Jeff Mickel:Bradley Beth,"Thriving in Our Digital World: AP provides high school teachers a complete, classroom-ready curriculum, including custom online resources and flexible curricular materials, designed to satisfy the College Board's requirements for its new course, AP Computer Science Principles. Organized in a series of project-based modules, the course focuses on current areas of research among real-world computer scientists, including Big Data, digital manipulation, and data security. Beginning in Summer 2016, UTeach--the highly successful STEM teacher preparation program that began at The University of Texas at Austin in 1997 and is now being replicated nationwide--will offer professional development, ongoing support, and incentives for teachers to teach the course. UTeach's PD model encourages the participation of teachers with a variety of backgrounds and levels of experience, and leverages participating teachers' diverse areas of expertise to improve PD and support opportunities for all participants. Individuals who teach Thriving in Our Digital World: AP will join a national community of educators dedicated to improving K-12 computer science education and better engaging girls and other historically underrepresented groups in computing. K-12 educators and school and district administrators should plan to attend this hands-on workshop. Presenters will engage participants in demonstration lessons and activities, and participants will leave with materials and handouts that are directly relevant to K-12 computer science classrooms. Laptops are required.","K-12 Teacher Support for Computer Science Principles: An Introduction to the UTeach Course, Thriving in Our Digital World: AP (Abstract Only)",NA:NA,2016
Aman Yadav,"This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of research design; (2) learn about various types of research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests. The workshop will be beneficial to participants who have not yet done all of these activities as well as those who have some background in educational research. Participants will be provided with material on research designs.",Conducting Educational Research in the Computer Science Classroom: Choosing the appropriate research design to address your research questions (Abstract Only),NA,2016
Daniel D. Garcia:Tiffany Barnes:Michael Ball:Emil Biga:Josh Paley:Marnie Hill:Nathan Mattix:Parisa Safa:Sean Morris:Shawn Kenner,"The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 240 high school teachers. Our guiding philosophy is to meet students where they are, but not to leave them there. It covers the big ideas and computational thinking practices required in the AP CSP curriculum framework using an easy-to-learn blocks-based programming language called Snap! (based on Scratch), and powerful computer science ideas like recursion, higher-order functions and computability. Through the course, students learn to create beautiful images, and realize that code itself can be beautiful. Having fun is an explicit course goal. We take a ""lab-centric"" approach, and much of the learning occurs through guided programming labs that ask students to explore and play. In this workshop, we will provide an overview of BJC, share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of potential crowd-funded summer professional development opportunities. This is a hands-on workshop. Laptops are required, and all ""handouts"" will be digital.",AP CS Principles and The Beauty and Joy of Computing Curriculum (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2016
Baker Franke:Sarah Filman:Brook Osborne,"App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. Rather than focusing on curriculum, this workshop will focus on how App Lab works as a programming tool in its own right, and how it was designed to aid and motivate student learning. Participants will get hands-on time with some of App Lab's more advanced features guided by a Code.org product manager, while working with the education team to help understand the educational philosophy that went into its development. Participants will come away with exemplars that highlight App Lab's possibilities, practice with some of its richer features, and do a hackathon to create something to share with each other (and the world)! Finally, we will end with a discussion about how best to integrate App Lab into existing courses. App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net. A laptop is required for this session. All other materials will be provided.",JavaScript Applications for CS0/CS1: Getting Hands-on with Code.org's App Lab (Abstract Only),NA:NA:NA,2016
Ariel Ortiz,"Web services (a.k.a. web APIs) allow developers to build web and mobile applications using data from multiple online sources. This workshop is aimed at CS instructors that wish to teach how to use and write web services using Node.js on a cloud development environment. Node.js is an open source JavaScript platform that is currently used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Over 120 companies in the fortune 500 are not only using, but embracing Node.js in their everyday operations. Using and writing web services in Node.js is significantly easier than using other environments based on languages such as C# or Java. Because we will be using a cloud platform, all our tools are readily available through any modern web browser, thus eliminating the hassle related to installing a complete standalone development environment. Teaching web API design with Node.js on the cloud provides our students a relevant real life technical skill. Workshop participants will use the free service provided by Cloud9 IDE (https://c9.io/) to learn how to write scalable RESTful web services using Node.js, the Express web framework, MySQL, and jQuery. Participants should have a working knowledge of HTML, JavaScript, and SQL. Additional information available at: http://node.arielortiz.info/ Laptop required.",Programming Web Services on the Cloud with Node.js (Abstract Only),NA,2016
Nathan Sprague:Ralph Grove,The deployment of autonomous and semi-autonomous robots is likely to increase dramatically over the next decade. Recent autonomous vehicle prototypes illustrate both the rapid progress of the underlying technology and the commercial possibilities of robotics. The next few years are likely to see increased interest in robotics among both students and employers. The Robot Operating System (ROS) is an open-source software framework for developing robotics applications. It has become a standard platform with a wide range of supported robots and a vibrant software ecosystem. This workshop will provide a hands-on introduction to ROS. Participants will have the opportunity to write ROS-based Python programs to control a Turtlebot educational robot. We will discuss the benefits and challenges of using ROS in an undergraduate robotics course. The workshop is intended for CS educators with an interest in teaching robotics. Laptops will be provided. No experience with ROS or Python is required.,Teaching Robotics Using ROS (Abstract Only),NA:NA,2016
Lien Diaz:Richard A. Kick:Andrew Kuemmel,"The AP Computer Science Principles assessment model comprises two main components: 1) an end-of-course AP Exam (i.e., a paper-pencil, multiple choice questions); and 2) a through-course assessment that includes two (2) performance tasks in which students complete during class time. This workshop focuses on content and skills included in one of the through-course assessment performance tasks: Create -- Applications from Ideas. In this task, students are expected to collaborate with another student in the development process of writing a program, and because each student will submit her/his own program for AP scoring purposes, students are also expected to be able to continue working on their program individually. To obtain the knowledge and skills students will need to be successful with this performance task, students can consider practicing various possible ways to write programs individually and collaboratively. That said, teachers can support student success with this performance task by considering different ways to teach how to develop programs collaboratively (beyond Pair Programming). In this workshop, participants will experience different collaborative programming techniques to develop a program. This workshop is meant for programmers ""from beginners to experts"". In addition, participants will reflect on the collaborative process, thereby learning some of the essential knowledge and skills that students will need to obtain in order to successfully complete the Create performance task.","AP Computer Science Principles Performance Task: Create - Applications from Ideas, Approaches to Programming Collaboratively. It's a Hackathon Workshop! (Abstract Only)",NA:NA:NA,2016
Tiffany Barnes:Jamie Payton:Daniel D. Garcia,"Increasing need for computing expertise in our everyday lives and in the workforce, paired with declining enrollments in computing by women and underrepresented minorities have made it critical to provide students with experiences in computing before college. CS10K is a national effort to engage 10,000 high school teachers in teaching computer science across the United States. With CS10K projects working on this goal since 2012 having prepared less than 1000 teachers for teaching computer science in high school, there is a need to scale professional development opportunities to local communities. College and university computing faculty have the unique preparation and call for community engagement that make it a win-win to support local high school teachers in learning to teach computer science. We will use the STARS model of building university-based communities that broaden participation in computing, adapted to the context of supporting K12 teachers to become change agents and educators prepared to teach computer science. In this workshop, participants will learn how to implement scalable team-based professional development for K12 teachers new to teaching computer science. We will provide resources to recruit, plan, and support small groups of new teachers to teach the new CS Principles course that will become an Advanced Placement course in 2016-2017. Laptops for attendees are optional.",Scaling up for CS10K: Teaching and Supporting New Computer Science High School Teachers (Abstract Only),NA:NA:NA,2016
David P. Hayes:Dale F. Reed,"In this workshop, participants will learn how to build custom, data-driven mobile apps using the hybrid model and how to scaffold app development projects to focus students' efforts on specific lesson, unit or assignment goals. It is intended for post-secondary or late secondary educators who want to increase student engagement by including app projects in their courses. With new tools and techniques, barriers to implementation have been reduced: in the hybrid model, developers use HTML5, CSS and Javascript - along with libraries enabling access to mobile device features such as accelerometer, camera, contacts, etc - to quickly develop apps and to distribute them on multiple platforms. Participants will learn how to create app interfaces using the Bootstrap Mobile framework, how to compile their apps using PhoneGap, and how to pull data from public APIs into their apps. Participants will also learn how to use Google tools to quickly create a web service, giving students greater capacity to design and develop relevant, engaging and useful apps. Participants will need a laptop or will need to work with a colleague and should have at least a rudimentary knowledge of HTML, CSS and Javascript.",App Development for All!: Learn the Hybrid Development Model and How Scaffolded Projects can Bring App Development to your Classes (Abstract Only),NA:NA,2016
Chris Johnson:Heather Amthauer:Ryan Hardt:Peter Bui,"Madeup is a text- and blocks-based programming language for making things up---literally. Programmers write sequences of commands to move and turn through space, tracing out printable 3D shapes with algorithms and mathematical operations. The language is designed to teach computation from a tangible, first-person perspective and help students integrate computation back into the physical world. In this workshop, we empower educators to use the freely-available and browser-based Madeup programming environment in their classrooms. Participants should expect to learn actively.",Mixing Code and 3D Printers with Madeup (Abstract Only),NA:NA:NA:NA,2016
Owen Astrachan:Jeff Gray:Fran Trees,"Many new curricula and tools have been developed recently to promote the exciting opportunities available in computer science. However, curriculum and supporting tools alone do not drive engagement -- the most interesting and innovative curriculum can still be taught in a disengaged manner, leading to lost opportunities for broadening the appeal and interest in computing across a diverse student population. The learning science literature on Cooperative Learning (CL) has been shown to increase class participation and student learning, while also promoting diversity in a manner that supports the differentiated instruction needed to engage students who have mixed abilities. This workshop will demonstrate how the best practices of CL can be applied in early CS courses (e.g., AP CS Principles AP CS A, or CS1). Workshop participants will be introduced to the CL structures that have been used in many different disciplines across multiple age/grade levels. These structures will be used to demonstrate specific applications toward computer science concepts. The workshop itself will be taught in a cooperative learning style so that participants can understand the dynamics and structure of a CL classroom. This workshop is intended for two types of educators: 1) K-12 teachers currently teaching AP CS A, CS Principles (CSP), or other introductory programming courses and 2) university faculty currently teaching CS 1 or other introductory computer science courses.",Infusing Cooperative Learning into Early Computer Science Courses to Support Improved Engagement (Abstract Only),NA:NA:NA,2016
Michael P. Rogers:Bill Siever,"Students raised on tablets and smart phones have a lot of expectations: data that is instantly available on all of their devices; social media integration so they can share that data with their friends; and push notifications, so that responses from their friends get the attention that they deserve. Unfortunately, the vendor-specific technologies required to make this magic happen are daunting, to put it mildly, well beyond the scope of a beginning mobile computing course. However, the last 2 years has seen the emergence of a new technology, Mobile Backend as a Service (MBaaS), that is vendor-agnostic and suitable for novice developers. This workshop will provide a hands-on introduction to this technology. Participants will be provided source code for Pigs Ahoy!, an implementation of the famed dice game Pig that lacks cloud storage and social media integration. During the course of the workshop, participants will add that functionality, and in the process of doing so, acquire a sufficiently detailed knowledge of MBaaS that they can confidently incorporate it into their classes. Because MBaaS is vendor-agnostic, participants may work on either iOS or Android versions of Pigs Ahoy!: full instructions will be provided in both Swift and Java, as well as snapshots of Pigs Ahoy! at various stages of completion, so that no one need fear being left behind. There are multiple MBaaS providers, and they offer similar capabilities and approaches. We will concentrate on the most popular, parse.com.",Solving the Cloud Computing Impasse with MBaaS (Abstract Only),NA:NA,2016
Michael Erlinger:Paul Tymann,"This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some ""expert"" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.",Reviewing NSF Proposals: Learn about Effective Proposal Writing via the Review Process (Abstract Only),NA:NA,2016
Donald Slater:Wanda P. Dann,"This workshop, designed for pre-AP, Introduction to Programming, Programming for non-majors, and CS1 Java courses, will introduce the tools in Alice 3 that are specifically designed to support a transition to Java and will provide experience with the software, a new textbook, and the available course materials. The workshop offers hands-on experience in programming with Alice 3 and Java, together. Participants will see how to use Alice 3 to build virtual worlds and how to transfer these programs into a Java IDE. The workshop will also explore curricular design and implementation. Alice 3 uses built-in tools including a Java language display that dynamically updates and displays the Java syntax as students build their Alice project, and a plugin for a Java IDE that allows students to start their projects in Alice and then continue their work by writing Java code. These tools allow students to develop animations and simple games using objects in a truly object-oriented style.",Transition To Java Using Alice 3 (Abstract Only),NA:NA,2016
Austin Cory Bart,"Software Engineers apply systematic techniques to formalize requirements, build tests, and plan out complex architectures. However, few Computer Science Educators bring the same rigorous methods to the design of their students' learning experiences. Educational theories of Instructional Design (compatible with a wide range of popular educational theories) bridge this gap by emphasizing meaningful assessment, identification of instructional objectives, and analysis of the learners; unfortunately, these theories have been neglected within Computer Science Education. I have applied the Dick & Carey Model of Instructional Design in two formal case studies to create new learning modules with extensive documentation, detailed components, and clear results. In fact, my formal evaluations of my materials with real learners suggest that students had average learning gains of up to 43%. More crucially, however, the model provided key opportunities to improve the instruction a priori and posteriori. My major contribution in this research is not the generation of new instructional materials, but the demonstration of the raw potential of this methodology for curriculum development.",Applying Formal Models of Instructional Design to Measurably Improve Learning in Introductory Computing (Abstract Only),NA,2016
Carolin D. Hardin:Matthew Berland,"While the USA struggles with a demand for computer programming education which exceeds the capacity of formal educational opportunities, online resources dedicated to programming are growing rapidly. One valuable way to measure the usefulness of these online resources is to examine the links posted in the forums of CS learning communities. We scraped and analyzed over 80,000 posts from two popular forums (Reddit and Stack Overflow), and found that how these communities use and talk about CS learning resources (such as books and tutorials) demonstrated their differing priorities. These results have much to suggest to both novices and teachers.",Learning to Program Using Online Forums: A Comparison of Links Posted on Reddit and Stack Overflow (Abstract Only),NA:NA,2016
Mike Izbicki,"This project describes an experimental course on open source software construction. The course has two twists on the standard project-based software construction course. The first twist is simple: all projects are developed and released on GitHub. The second twist is more radical: the course uses an ""open source textbook."" The textbook is hosted in a git repository that students are required to contribute to throughout the term. Contributions range from minor typo fixes to adding entire chapters. Currently, 88% of the textbook is written by students, including many of the assignments. We use student surveys, participation in social networking sites like GitHub, and web traffic logs to determine that these assignments had a positive effect on students' future contributions to the open source community.",Open Sourcing the Classroom (Abstract Only),NA,2016
Euisung Kim,"This work explores the trade-offs between time and frequency information during the feature extraction process of an automatic speech recognition system using wavelet transform features instead of Mel-frequency cepstral coefficients. The Speech Recognition Virtual Kitchen toolkit (www.speechkitchen.org) is used as the framework for implementing wavelet modules in a virtual machine loaded with the Kaldi recognition system. The SRVK toolkit is a computing resource that provides virtual machines for a variety of research and education purposes. Results comparing different wavelets and feature extraction approaches will be presented. The resulting virtual machine, which allows straightforward comparisons of signal processing approaches, is freely available for research and educational use.",A Wavelet Transform Module for a Speech Recognition Virtual Machine (Abstract Only),NA,2016
Maíra Rejane Marques,"Software engineering education is currently being taught in many universities with a hands-on approach, where students have to learn to develop software in teams, intending to simulate industry, to minimize the gap between what universities teach and what industry needs. The industry ""simulation"" that a university performs in software engineering courses is a good approach but it is normally undermined by student bad behaviors (free-riding, social loafing and student syndrome), which leads to lower team performance and lower team motivation. In this work I propose the use of reflexive weekly monitoring (RWM) to mitigate these students' bad behaviors that can disrupt team results. The use of the RWM in the past two semesters in a software engineering course, has improved teams' results in terms of both, project and final grades.",Monitoring: An Intervention to Improve Team Results in Software Engineering Education (Abstract Only),NA,2016
Mohammed Seyam,"Pair Programming is an agile practice that has numerous studies showing its benefits for education. The emergence of mobile software design education raises questions about the effectiveness of Pair Programming in this evolving field. Developing for mobile is different than regular desktop/web development in three major areas: having more than one screen to work on (i.e. computer screen and mobile device screen), connectivity issues (dealing with Bluetooth, GPS and location data, smart watches, and sensors), and User Experience (UX) issues. Our research probes unique challenges for Pair Programming when used in mobile software design classes, focusing on five mobile design topics: dealing with interface and data managements (as in fragments), using camera, handling multi-device connectivity, using sensors and collecting GPS data, and using microphones and speakers. The study highlights successes and challenges for Pair Programming for mobile applications, with the objective of providing a set of recommendations for instructors considering using Pair Programming in their mobile development classes.",Pair Programming for Teaching Mobile Development (Abstract Only),NA,2016
Jeff Stern,"Girls Who Code is a national nonprofit that operates after-school and summer programs to engage female students with computer science with the goal of reaching gender parity in the field. The Girls Who Code teaching philosophy and curriculum is designed around four major components: (1) developing a breadth of technical and computational thinking skills, (2) building on students' prior interests, (3) providing authentic exposure to mentors and real computer science projects, and (4) cultivating a community-focused classroom. Using qualitative and quantitative data collected from more than 1,500 students that have participated, this work explores the impact of Girls Who Code's intervention and the value of building community for effective computer science education.","Community and Collaboration in an All-female, Immersive Computer Science Program (Abstract Only)",NA,2016
Matthew R. Steuerer,"Websites for dissemination of grant-funded projects can quickly become unsustainable once funding ends since they require significant human intervention to ensure that data are current and reliable. CABECTPortal is a website that maintains information about research projects that involve interdisciplinary pedagogical collaborations. It leverages social computational concepts and a machine learning algorithm, specifically k-means clustering, to improve the sustainability of dissemination efforts by engaging the research community in the process. Usability design concepts are integrated with throughout the site to enhance user motivation and engagement. This poster will present the machine learning algorithms that were implemented for the recommendation system used in CABECTPortal. Acknowledgment: This project is based on work supported by the National Science Foundation under NSF DUE Award# 1141170. Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation (NSF).",Implementing K-Means Clustering and Collaborative Filtering to Enhance Sustainability of Project Repositories (Abstract Only),NA,2016
Jake A. Trower,"Tunely and Pixly are web-based programming environments for media computation built using the Blockly visual programming editor library. These language environments were inspired by Georgia Tech's Media Computation approach and allow images (Pixly) and sounds (Tunely) to be transformed programmatically. Tunely and Pixly provided an approachable environment to students who have little to no experience in programming, and allow younger students to explore programming in a fun way without the challenges and frustration of learning syntax in a textual language. This SRC poster summarizes the design and implementation of these languages. We also briefly introduce initial work on integrating an accessibility tool to allow children with disabilities to explore these opportunities.",Web-based Visual Programming for Media Computation Using Blockly (Abstract Only),NA,2016
Alexander Bender,"In computer science experimentation, more researchers have begun using Principal Component Analysis (PCA). Discerning how to apply this mathematical technique can be confusing; papers in this area tend to focus on results rather than the methodology in using PCA. Consequentially, reproducing or verifying PCA results is difficult without prolonged communication with the authors. Our larger goal is to create a general descriptive methodology for PCA usage and determine criteria for evaluation of PCA software implementations. This will be a resource for discipline-specific researchers. Here we focus on evaluation of the program Cluster 3.0 with a Noni fruit experiment from our chemistry department.",An Evaluation of Cluster 3.0 as a General Tool for Principal Component Analysis (Abstract Only),NA,2016
Christopher A. Francis-Christie,"The safety of information inside of cloud networks is of interest to the network administrators. In a new insider attack, inside attackers merge confidential information with videos using digital video steganography. The video can be uploaded to video websites, where the information can be distributed online, where it can cost firms millions in damages. Standard behavior based exfiltration detection does not always prevent these attacks. This form of steganography is almost invisible. Existing compressed video steganalysis only detects small-payload watermarks. We develop such a strategy using distributed algorithms and classify videos, then compare existing algorithms to new ones. We find our approach improves on behavior based exfiltration detection, and on the existing online video steganalysis.",Detecting Insider Attacks with Video Websites using Distributed Image Steganalysis (Abstract Only),NA,2016
Caitlin R. Hanley,"Every December, Code.org provides a set of Hour of Code exercises as part of CS Education week. However, motorically challenged students may be unable to participate because they cannot use the mouse and/or keyboard to interact with the Blockly-based Graphical User Interface and drag-and-drop programming environment. Programming by Voice (PBV) allows users to interact with block-oriented programming environments by speaking their program, rather than using a keyboard and mouse. The Myna tool, a PBV tool that was originally designed for the Scratch programming language, has been modified to work with the Code.org programming environment. Children with a mobility disability can use this tool to experience Code.org's educational opportunities.",Programming by Voice to Support Hour of Code for Children with Motor Disabilities (Abstract Only),NA,2016
Kayla M. Holcomb:Nevan F. Simone,"Entry-level college programming courses have high failure rates, which lead to high dropout rates for associated majors. These courses typically cover fundamental programming concepts for students to master in order to succeed in their majors. When attempting to perceive a student's competency, instructors often utilize Automated Assessment Tools, but most tools do not fully record student progress in assignments. Access to the student's problem solving steps can provide educators a more complete understanding of the student's thought process. Our tool tracks the student's steps and sequencing while attempting to complete assignments. With this resource, teaching methodologies can be modified to more effectively foster successful problem-solving strategies within early programming courses.",The Role of Chronology in Analyzing Introductory Programming Assignments (Abstract Only),NA:NA,2016
Joh D. Huff,"Designing tools for K-12 computer science education poses a unique and difficult challenge. The focus should be on teaching broad computer science concepts in an engaging way. Other approaches have involved visualizing data structures and algorithms. However, those approaches aren't very engaging. By applying the principles of universal design for learning we created an interactive visualization tool for a simple line game. This visualization tool has several ways to represent the same data structure, and is much more engaging than other approaches to teaching computer science concepts. We are still conducting research on the effectiveness of this tool, but our preliminary results look promising.",A Simple Line Game With Real-Time Visualization of the Internal Data Structure (Abstract Only),NA,2016
Cyrus Xiyuan Liu,"This paper describes the building of a remotely-controlled prosthetic hand. The project has five elements: 1. 3D modeling and printing the hand parts and the casings for the entire system; 2. assembling the joints with strings attached to servomotors; 3. two Arduino boards programmed such that the prosthetic hand mirrors the finger motions of a sensor-equipped glove worn by a human; 4. Bluetooth communication between the sensors on the glove and the Arduino board, which moves the fingers of the prosthetic hand by pulling strings attached to the servomotors; and 6. experiments on the completed hand to refine the relationship between the Arduino commands and the precise motions of the finger joints. Future work is also described involving electro-sensors on upper muscles with the intention of controlling the prosthetic hand based on the detected electrical signals in the muscles.",3D-Printed Animatronic Hand with Wireless Mirroring Glove and Precision Control (Abstract Only),NA,2016
Nickolas W. McCarley,"Robotic Navigation Through Gesture Based Control (RNTGBC) assists people who may not be able to operate a smart device using their fingers. These individuals might face limitations due to physical disabilities or may be in a job where their fingers are not free to operate the smart device. For this project, a motion sensor was used in combination with a robot. The sensor was used to capture gestures and operate the robot. The tools used are the Leap (a device that reads 3D gesture motion), the Sphero (a remote controlled rolling ball), and a laptop. RNTGBC uses the Leap device to control the Sphero with hand gestures. This technology is important because navigation through gestures can be adapted towards larger contexts, such as helping someone in a wheelchair move around or assisting someone who does not have their hands available when performing a job task.",Robotic Navigation Through Gesture Based Control (Abstract Only),NA,2016
Andrew Richard Miller:Nathan Gould:Dimitris Papamichail,"An ultimate goal of traditional textual criticism is the reconstruction of the archetype of a given work. By comparing differences and similarities among multiple versions of the work, the interrelations among existing and hypothetical ancestral versions can be naturally presented as a tree, in which a branch represents derivation of a new version. We will present our investigation into the generation of phylogenetic trees with extant manuscripts at both leaves and internal nodes of the tree, and discuss algorithms for promoting leaf nodes to ancestral positions while optimizing the tree construction objective, based on the maximum parsimony criterion.",Advances in Phylogenetic-based Stemma Construction,NA:NA:NA,2016
Aayush Mudgal,"We provide an extension to the existing data-driven tutoring system, ITAP (Rivers and Koedinger 2014) to provide personalized help to students. The existing ITAP framework relies on abstract syntax trees and works only on compilable code, we extend the framework to work even with uncompilable code. We use an iterative correction technique that locally corrects code by manipulating tokens in the vicinity of an erroneous token, using a specially designed parser. It utilizes the power of a LALR (1) parser to identify the erroneous token, and suggests the possible expected token at that position. We utilize this information to iteratively modify the code to reach to a compilable state. This compilable state is then fed as an input to the ITAP, and the received hints are then coupled suitably.",Syntactic Hint Generation for Introductory Programming Problems (Abstract Only),NA,2016
Matthew Francis Pfister,"In a sudden push for at-home learning, various simulation programs have been created to allow students to explore academic concepts in a variety of fields. But computer scientists are still forced to rely on trial-and-error test cases when trying to understand a tricky piece of code. In this poster the author reports on the results of a novel web-based educational tool that teaches coding through logical reasoning. Students are challenged to postulate symbolic relationships between generalized parameters within example code, and the tool evaluates the correctness and relevance of these answers within the context. Students may take comfort that their knowledge of the topic is comprehensive since the verification process takes into account all possible edge cases for parameter values.",Novel Logical Reasoning Tutor (Abstract Only),NA,2016
Caleb H. Priester,"Loop invariants are a key component in developing code for verification, but many students struggle to grasp how to arrive at one that will remain true at the beginning and end of each iteration as well as be sufficiently strong to prove subsequent assertions reliant on the outcome of the loop. The focus of this research is to provide professors with a clearer idea of the difficulties students face in developing suitable loop invariants by using automated verification tools and collecting data in the background as students develop invariants in a series of isolated studies. This information will help professors to better allocate teaching time in order to best teach students the fundamentals of identifying correct loop invariants and developing verifiable code using tools.",Loop Invariants: Learning to Help Teach (Abstract Only),NA,2016
Gail Chapman,"In January 2016, President Obama unveiled the CS for All initiative. With all the attention and publicity surrounding CS for All and increased support from a variety of corners over the ensuing year, it is easy to become complacent and start believing that we have ""arrived"". During her 2016 SIGCSE keynote, Jan Cuny talked about catching the wave and using it to our advantage. This talk will focus on where we go from here. We caught the wave; now what do we do to ensure that we don't get swallowed by it? What lessons can be learned from an election that featured the likes of fake news, Wiki leaks, rogue email servers, runaway tweets and showed in stark relief the divides that exist in our country. Computer science represents one of those divides. Given this and the fact that addressing the educational inequities prevalent in computer science was front and center in the CS for All announcement, what better time is there to renew our commitment to broadening participation in computing? As educators we have a powerful opportunity and responsibility in the wake of the blowback from the election-to educate, to listen, to remind ourselves constantly that we live in a very diverse country. We have no shortage of innovation in computer science, but who are we inspiring, what impact are those innovations having, and what can we do to learn from the lessons of the past to improve CS education? And above all, how do we respond to the challenges before us with empathy for those who are impacted by the decisions we make?","Inspire, Innovate, Improve!: What does this mean for CS for All?",NA,2017
Mats Daniels,"I'm going to address the educator identity from two perspectives. The first is my own perspective, where I will present what my educator identity means to me and what this has led me to devote time and energy on. My vision is that I want to be part of creating learning environments that benefit both the learner as an individual and society in general from many dimensions and purposes. As an educator I want to support our students on a route to become able and conscious graduates who will have a positive impact and be seen as truly professionally competent wherever their career takes them. This sounds hunky-dory, but how can it be achieved? I don't think there are any silver bullets that will lead to such a setting, but I do believe that knowing more is a way forward. Having no clear way forward was frustrating and this is where involvement in educator communities, like the SIGCSE community, became essential. Giving time and effort to such communities is, in my opinion, rewarding itself manyfold, not least, in my case, for aiding to understand the issues and opportunities involved in pursuing my vision. Developing my identity as educator through being part of the SIGCSE community, with its abundance of role models, has been invaluable for me. I hope my work will be an inspiration for others. Computing and engineering education research is the other big part in my strive for fulfilling my educator dreams. Or should I say pipe dreams as in the title of my thesis ""Developing and Assessing Professional Competencies: a Pipe Dream? Experiences from an Open-Ended Group Project Learning Environment"", which I defended on the day thirty years after I enrolled as a PhD student? No, I don't see it as a pipe dream even though there are much more to look into and understand regarding education in our field. This research area is the second perspective I want to bring up regarding educator identity, and I will use the research lens to look at the impact we as educators have on our students. My focus will be on the influence educators have on students learning with regard to aspects beyond pure computing skills. I will in the presentation build on work in our research group (UpCERG), which lately has included studying issues related to identity, both students and educators. I especially want to draw attention to the potential impact we as educators have on the ""gap"" between graduating truly professionally competent persons and merely technically competent persons.",The Educator Identity and its Impact,NA,2017
Mitchel Resnick,"Fifty years ago, Seymour Papert and colleagues developed Logo as the first programming language for children. Today, millions of children are participating in learn-to-code initiatives, but Papert's dream remains unfulfilled. Papert (who passed away last summer) saw programming not as a set of technical skills but as a new form of fluency - a new way for all children to explore, experiment, and express themselves. In this presentation, I will examine strategies for fulfilling Papert's dream. Drawing on examples from our Scratch online coding community, I will discuss how we can design programming environments and activities to help all children, from all backgrounds, to develop their thinking, develop their voices, and develop their identities.",Fulfilling Papert's Dream: Computational Fluency for All,NA,2017
Jeannette Wing,"Sources of uncertainty abound. Noisy sensor data. Machine learning methods. Hardware and software failures. The physical world. Human behavior. In the past, computer science handled uncertainty by abstracting it away or avoiding it. In the future, instead, computer science needs to embrace uncertainty as a first-class entity. How do we represent uncertainty in our computational models? Probabilities. Thus, we need to make sure that every computer science student learns probability and statistics. Data science, where data drives discovery and decision-making in all fields of study, underscores the importance of having a command of probability and statistics. At the heart of data science is data analytics whose methods such as machine learning rely on probabilistic and statistical reasoning. And since data serve as the currency of any data analytics workflow, explicit representation of probability distributions can help us calculate the degrees of uncertainty throughout a flow. Programming and software engineering courses will need to elevate the status of such data flows to that given to algorithms, data structures, and modular design. In this talk I will discuss the implications of embracing uncertainty on undergraduate computer science curricula.",Embracing Uncertainty,NA,2017
Ashish Aggarwal:Christina Gardner-McCune:David S. Touretzky,"Researchers and educators have designed curricula and resources for introductory programming environments such as Scratch, App Inventor, and Kodu to foster computational thinking in K-12. This paper is an empirical study of the effectiveness and usefulness of tiles and flashcards developed for Microsoft Kodu Game Lab to support students in learning how to program and develop games. In particular, we investigated the impact of physical manipulatives on 3rd -- 5th grade students' ability to understand, recognize, construct, and use game programming design patterns. We found that the students who used physical manipulatives performed well in rule construction, whereas the students who engaged more with the rule editor of the programming environment had better mental simulation of the rules and understanding of the concepts.",Evaluating the Effect of Using Physical Manipulatives to Foster Computational Thinking in Elementary School,NA:NA:NA,2017
Basma S. Alqadi:Jonathan I. Maletic,Students taking introductory computer science courses often have difficulty with the debugging process. This work investigates a number of different logical errors that novice programmers encounter and the associated debugging behaviors. Data is collected and analyzed data in two different experiments from 142 subjects. The results show some errors are more difficult than others. Different types of bugs and novices' debugging behaviors are identified. Years of experience showed a significant role in the process of debugging in terms of correctness level and time required for debugging,An Empirical Study of Debugging Patterns Among Novices Programmers,NA:NA,2017
Christine Alvarado:Mia Minnes:Leo Porter,"As class-sizes grow in computer science, the personal attention received by students tends to diminish. This work aims to replicate small-class community effects within a large class by creating ""micro-classes""---small groups within the large class. These micro-classes consist of 20--30 students led by graduate teaching assistants and undergraduate tutors who are specifically trained in small-classroom instructional techniques. This paper studies the outcomes of the micro-classes framework in an upper-division data structures course and compares them to outcomes from the same class taught in a large lecture, active-learning format. Students report increased satisfaction and a higher perception of community in the micro-classes section, though there was no discernible difference in student academic performance.",Micro-Classes: A Structure for Improving Student Experience in Large Classes,NA:NA:NA,2017
Christine Alvarado:Yingjun Cao:Mia Minnes,"This paper presents results of a large-scale survey of students' experiences in CS classes at two institutions: a small liberal arts college and a large research-focused university. Our work provides a fine-grained view of students' feelings and behaviors in CS classes, from introductory through to upper division courses. We find significant differences between the reported behaviors and feelings of female students compared to male students: female students are less comfortable asking questions in class and interacting with their instructor, and come out of a class with lower confidence in their ability to tutor for the class, despite the fact that they perform just as well as male students. Furthermore, we find some of these differences are consistent or increase across course levels, and could potentially affect students' post-college trajectories. Focusing attention on the student experience in more advanced classes may impact gender differences seen in the transition to the CS workforce.",Gender Differences in Students' Behaviors in CS Classes throughout the CS Major,NA:NA:NA,2017
Karen Anewalt:Jennifer Polack,"Good oral communication skills are essential for success in the workplace. Burge [3] recently highlighted the need to create a curriculum-wide program emphasizing communication skills. We have implemented a curriculum that provides communication skills instruction and practice at each level of the computer science major. Here we present a description of the coursework emphasizing formal presentation and small group communication skills. We also share findings from a survey of alumni showing their perception of communication preparation. Even in our program that provides significant opportunities for communication skill development, the majority of alumni felt that additional instruction should be integrated into the major curriculum.",A Curriculum Model Featuring Oral Communication Instruction and Practice,NA:NA,2017
Vaibhav Anu:Gursimran Walia:Gary Bradshaw,"In spite of the human-centric aspect of software engineering (SE) discipline, human error knowledge has been ignored by SE educators as it is often thought of as something that belongs in the realm of Psychology. SE curriculum is also severely devoid of educational content on human errors, while other human-centric disciplines (aviation, medicine, process control) have developed human error training and other interventions. To evaluate the feasibility of using such interventions to teach students about human errors in SE, this paper describes an exploratory study to evaluate whether requirements inspections driven by human errors can be used to deliver both requirements validation knowledge (a key industry skill) and human error knowledge to students. The results suggest that human error based inspections can enhance the fault detection abilities of students, a primary learning outcome of inspection exercises conducted in software engineering courses. Additionally, results showed that students found human error information useful for understanding the underlying causes of requirement faults.",Incorporating Human Error Education into Software Engineering Courses via Error-based Inspections,NA:NA:NA,2017
Alice Armstrong,"This paper discusses the content and impact of a new first-year experience (FYE) course for at-risk students in the Computer Science and Engineering department at Shippensburg University, a mid-sized teaching university. The initial results from the new course are quite promising: DFW rates (grade of D, grade of F, and withdrawal) for the first and second semesters were cut in half and retention rates were dramatically improved.",Successful First-Year Experience for At-Risk Students,NA,2017
Monica Babes-Vroman:Isabel Juniewicz:Bruno Lucarelli:Nicole Fox:Thu Nguyen:Andrew Tjang:Georgiana Haldeman:Ashni Mehta:Risham Chokshi,"With the number of Computer Science (CS) jobs on the rise, there is a greater need for Computer Science graduates than ever. At the same time, most CS departments across the country are only seeing 25-30% of female students in their classes, meaning that we are failing to draw interest from a large portion of the population. In this work, we explore the gender gap in CS at Rutgers University using three data sets that span thousands of students across 3.5 academic years. By combining these data sets, we can explore interesting issues such as retention, as students progress through the CS major. For example, we find that a large percentage of women taking the Introductory CS1 course for majors do not intend to major in CS, which contributes to a large increase in the gender gap immediately after CS1. This finding implies that a large part of the retention task is attracting these women to further explore the major. We correlate our findings with initiatives that some CS programs across the country have taken to significantly improve their gender diversity, and identify initiatives that we can start with in our effort to increase the diversity in our program. These findings may also be applicable to the computing programs at other large public research universities.",Exploring Gender Diversity in CS at a Large Public R1 Research University,NA:NA:NA:NA:NA:NA:NA:NA:NA,2017
Austin Cory Bart:Ryan Whitcomb:Dennis Kafura:Clifford A. Shaffer:Eli Tilevich,"To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits.","Computing with CORGIS: Diverse, Real-world Datasets for Introductory Computing",NA:NA:NA:NA:NA,2017
Ashok Basawapatna:Alexander Repenning,"Online CS Ed Week and Hour of Code activities attempt to motivate hundreds of millions of student participants across the world in computer science each year. A key goal of these endeavors is long-term student engagement. However, if the activity experience is bad, it could have effects adverse to the stated goal. Thus, it is imperative upon designers to actively improve the online activity ensuring the maximum numbers of students are retained throughout the exercise. We present a simple proof of concept method outlining a means for Computer Science Education Week and Hour of Code online activities to identify and improve hazardous points wherein students tend to drop out. This is achieved by finding so called flow stoppers in activity retention that diverge from an ideal theoretical Markov chain model, and scaffolding the activity at that point to better support participants. Initial data presented indicates that even minor changes can have a significant effect on keeping a greater number of students engaged.",Employing Retention of Flow to Improve Online Tutorials,NA:NA,2017
Jennifer M. Blaney:Jane G. Stout,"Computing self-efficacy and sense of belonging are known predictors of motivation and persistence. As such, these psychological states are important to study in order to broaden participation in computing. This study examined the relationship between (a) introductory computing course experiences and (b) self-efficacy and sense of belonging in computing, focusing on differences by gender and college generation status. We found that the relationship between some introductory course experiences and self-efficacy and sense of belonging was strongest among first-generation college women, which reveals the importance of considering women's experiences in light of their additional intersectional identities. Recommendations for best practices in introductory computing courses are discussed.","Examining the Relationship Between Introductory Computing Course Experiences, Self-Efficacy, and Belonging Among First-Generation College Women",NA:NA,2017
Matthew Boutell,"The face-to-face interaction in a traditional classroom on campus provides many benefits to students: the ability to ask questions and get immediate feedback, external motivation from the instructor and peers to succeed, the joy of interaction, and the ability to work face-to-face with classmates on projects. Meanwhile, video-based, online instruction offers several different benefits: convenience for students due to flexibility in time and place of learning, ease of reviewing materials for mastery, and the ability to work at one's own pace. When given the choice between these two formats, which do students choose? Students enrolled in an upper-level mobile app development course could opt to attend class with face-to-face instruction, to watch videos of the instructor, or to switch between the two formats as they saw fit. Students were given pre- and post-surveys asking them which format they preferred and why. Results indicate that slightly more than half of the students chose the video-based option and that students chose as they did for expected reasons, such as wanting to ask questions in class or wanting the flexibility to watch and re-watch video on demand. More interestingly, results also indicated that students who chose video did not suffer from the dropout and failure rates so commonly reported in the literature, that learning was equally effective using both formats, and that students' expectations of which format they would use were quite different from what they ended up using. However, with a small sample size at one institution, local factors, like scheduling the course during lunchtime, also played a role in students' choices.",Choosing Face-to-face or Video-based Instruction in a Mobile App Development Course,NA,2017
Brian Broll:Akos Lédeczi:Peter Volgyesi:Janos Sallai:Miklos Maroti:Alexia Carrillo:Stephanie L. Weeden-Wright:Chris Vanags:Joshua D. Swartz:Melvin Lu,"This paper introduces NetsBlox, a visual programming environment for learning distributed programming principles. Extending both the visual formalism and open source code base of Snap!, NetsBlox provides two accessible distributed programming abstractions to simplify the process of creating networked applications: message passing and Remote Procedure Calls (RPC). Messaging passing allows NetsBlox applications to send data to other connected NetsBlox clients. Remote Procedure Calls enable seamless integration of third party services, such as Google Maps, weather, traffic and other public domain data sources, into NetsBlox applications. Other RPCs help coordinating distributed clients which may be difficult for novice programmers allowing the user to more quickly create captivating and sophisticated applications. These abstractions empower users to develop networked programs, including multi-player games and client-server applications. By providing networking support, NetsBlox not only allows users to learn distribute programming concepts but also makes programming more engaging by incorporating diverse services available on the web.",A Visual Programming Environment for Learning Distributed Programming,NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2017
Erik Brunvand:Nina McCurdy,"We describe our experience designing and delivering a general education technological fluency course that frames the discussion of computer science and engineering technology (electronics and programming) in the context of sound-art: art that uses sound as its medium. This course is aimed at undergraduate students from a wide variety of backgrounds and is designed to fit into the ``Intellectual Explorations'' area of a general undergraduate program. The goal is to introduce computer engineering and computational principles to non-CS students through an exploration of sound-art, experimental and electronic music, noise-making circuits, hardware hacking, and circuit bending.",Making Noise: Using Sound-Art to Explore Technological Fluency,NA:NA,2017
Zack Butler:Ivona Bezakova:Kimberly Fluet,"The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment.",Pencil Puzzles for Introductory Computer Science: an Experience- and Gender-Neutral Context,NA:NA:NA,2017
Yingjun Cao:Leo Porter,"Collaborative group exams, including two-stage exams, have received increased attention in other disciplines after studies have shown their value for student learning. In computer science, prior work has shown students may value two-stage exams, but their impact on student learning in computing is unknown. In this randomized, crossover study, student learning on four topics during two-stage midterm exams is examined. Specifically, students are randomly selected to answer questions on a topic either working in groups or individually during the exam. On a quiz two weeks later, those who worked in groups statistically significantly outperform those who worked individually. The metric of performance comparison is normalized learning gain. These are short term gains, however, as the benefit is no longer apparent by the final exam. This is the first study to use controlled experiments to examine the value of the group stage of two-stage exams in computing.",Evaluating Student Learning from Collaborative Group Tests in Introductory Computing,NA:NA,2017
Adam Scott Carter:Christopher David Hundhausen,"Analyzing the process data of students as they complete programming assignments has the potential to provide computing educators with insights into their students and the processes by which they learn to program. In prior work, we developed a statistical model that accurately predicts students' homework grades. In this paper, we investigate the relationship between the paths that students take through the programming states on which our statistical model is based, and their overall course achievement. Examining the frequency of the most common transition paths revealed significant differences between students who earned A's, B's, and C's in a CS 2 course. Our results indicate that a) students of differing achievement levels approach programming tasks differently, and b) these differences can be automatically detected, opening up the possibility that they could be leveraged for pedagogical gain.",Using Programming Process Data to Detect Differences in Students' Patterns of Programming,NA:NA,2017
Karo Castro-Wunsch:Alireza Ahadi:Andrew Petersen,"Course instructors need to be able to identify students in need of assistance as early in the course as possible. Recent work has suggested that machine learning approaches applied to snapshots of small programming exercises may be an effective solution to this problem. However, these results have been obtained using data from a single institution, and prior work using features extracted from student code has been highly sensitive to differences in context. This work provides two contributions: first, a partial reproduction of previously published results, but in a different context, and second, an exploration of the efficacy of neural networks in solving this problem. Our findings confirm the importance of two features (the number of steps required to solve a problem and the correctness of key problems), indicate that machine learning techniques are relatively stable across contexts (both across terms in a single course and across courses), and suggest that neural network based approaches are as effective as the best Bayesian and decision tree methods. Furthermore, neural networks can be tuned to be reliably pessimistic, so they may serve a complementary role in solving the problem of identifying students who need assistance.",Evaluating Neural Networks as a Method for Identifying Students in Need of Assistance,NA:NA:NA,2017
Kameswari Chebrolu:Bhaskaran Raman:Vinay Chandra Dommeti:Akshay Veer Boddu:Kurien Zacharia:Arun Babu:Prateek Chandan,"Considerable experimentation is happening in today's classrooms to handle large classes. In this paper, we present SAFE (Smart Authenticated Fast Exams), a tool that enables continuous assessment in the form of regular quizzes in classes. SAFE is based on a BYOD (bring your own device) model that leverages student smart-phones to conduct auto-graded, cheating-free exams in a proctored class room setting. SAFE has 3 components: a smart-phone app, a web server and WiFi infrastructure to enable app-server communication. SAFE support a rich set of features to handle various types of questions as well as instructor preferences. In the design of SAFE, we set to achieve 4 goals: easy setup, cheating-free operation, robustness and scale. Easy setup is achieved predominantly due to the BYOD model and online mode of exams. Cheating is prevented via locking the app for the intended purpose along with reporting to the server any user attempts at cheating. Robustness is handled via periodic syncing of messages and careful consideration of corner cases. Scale is handled by carefully tuning the WiFi as well as via application level scheduling. SAFE has been used so far to conduct 90+ in-class quizzes in 9 courses in the last year. It was also used to conduct a high stake admission test for a Master's program in Computer Science. The feedback from end-users has been very positive and we continue to get new requests for trials in other courses. This paper presents the design of SAFE and evaluation based on our experience thus far.",SAFE: Smart Authenticated Fast Exams for Student Evaluation in Classrooms,NA:NA:NA:NA:NA:NA:NA,2017
Nick Cheng:Brian Harrington,"Marking coding exam questions for introductory computer science courses is notoriously resource intensive and difficult to perform consistently. Students can be easily led astray by minor misunderstandings in the wording of questions, and graders often find it difficult to decide whether mistakes are attributable to simple misinterpretations, minor memory errors, or major lack of ability/understanding of the core concepts being evaluated. In this paper we detail and evaluate ""Code Mangler"" questions. The ""Code Mangler"" is a fictitious character who manipulates code; removing commenting, changing the order of lines, adding bugs, and otherwise breaking perfectly good code. The role of the student on the exam is then to use the mangled results to reverse engineer the original code. We discuss the benefits of this style of question, and perform an evaluation on a large (475 student) CS1 course, demonstrating that these questions are less resource intensive to mark than traditional coding questions, improve the confidence of the graders, and correlate strongly with student ability as assessed in traditional question styles.",The Code Mangler: Evaluating Coding Ability Without Writing any Code,NA:NA,2017
John W. Coffey,"This paper contains a description of a follow-on to a pilot study in which students performed reflective activities as part of the design process in an advanced programming course. Students produced an initial design for their programs that was due within a week after the program was assigned. Along with their projects, students submitted a document reflecting the final design and an analysis of the changes between them. Requirements for the analysis were made more explicit than those in the pilot study. The format of the document was specified and the task was described to the students as a technical writing activity. Results of the work are reported and a comparison with prior work that did not have a specified structure for the student analysis are described.",A Study of the Use of a Reflective Activity to Improve Students' Software Design Capabilities,NA,2017
Richard Cox:Steven Bird:Bernd Meyer,"A new computer science curriculum has been developed for the Victorian Certificate of Education. It gives students direct entry into second year University computer science. The curriculum focuses on data structures and algorithms, with an emphasis on the graph abstract data type and graph algorithms. We taught a pilot course during 2014 involving students from seven schools, and administered an algorithmic thinking quiz on entry and exit, and also tested a first year university reference group. In this paper we present the curriculum and report on the evaluation. We discuss the effectiveness of our approach and make recommendations for improving future versions of the course. Pedagogical issues are discussed in relation to the cognitive education literature on the teaching of algorithmic thinking.",Teaching Computer Science in the Victorian Certificate of Education: A Pilot Study,NA:NA:NA,2017
Aparna Das:David Voorhees:Cynthia Choi:Carl E. Landwehr,"We discuss the design and implementation of an interdisciplinary non-majors course Cybersecurity for future presidents, which broadens the types of computational courses available for non-majors. The goal of our course is to build awareness of cybersecurity issues and to promote thinking critically about them. Student debates on controversial cybersecurity issues facing society today motivate the technical and policy content. We present student assessment results, which demonstrate an increase of students' awareness, and outline directions for future course improvements.",Cybersecurity for Future Presidents: An Interdisciplinary Non-majors Course,NA:NA:NA:NA,2017
Debzani Deb:Mohammad Muztaba Fuad:Mallek Kanan,"Computer Science instructors have been exploiting learning technology such as Algorithm Visualization (AV) for last few years to explain hard-to-understand algorithms to the learners through simulations and animations. In this work, we explore an active and highly engaging approach, namely, the construction of visualizations of the algorithms under study. Our approach is further augmented with automated assessment of students' in-class construction activities, which they execute as apps in their mobile devices. In this paper, we utilize case study, a step-by-step visualization of a construction exercise app, to explain how technology is leveraged to provide a richer way for learners to interact with a problem, and how instructor can acquire real-time evidence of learners' comprehension of covered lecture material. Our experimental evaluation shows the educational benefits of the proposed approach in terms of enhanced student learning, reduced drop-out rate and increased student satisfaction.",Creating Engaging Exercises With Mobile Response System (MRS),NA:NA:NA,2017
Adrienne Decker:Monica M. McGill,"Europe, Australia, and North America face two similar challenges with respect to computing--there have not been enough students matriculating to keep up with demand and the lack of diversity remains an issue. To address these challenges, private and public resources have been allocated to educate primary and secondary students in computing. Previous meta-studies on these often segregated outreach efforts within the United States indicate that research on their impact remains spotty, short-term, and inconsistent, leaving a gap in the ability to evaluate their long-term impact. Building upon previous research focused in the U.S., this study examines similarities and differences in the results of 17 formal, peer-reviewed computing education research journals and conferences across Australia, Europe, and North America during 2009-2015. Results indicate that a lacuna exists in international research, paralleling results of the more narrowly focused study of U.S. venues. The paper further defines the major issues researchers face in conducting assessment studies for outreach and recommendations for addressing this gap.",Pre-College Computing Outreach Research: Towards Improving the Practice,NA:NA,2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky,"Computer science, particularly in the United States, continues to suffer from underrepresentation by women and students of color. Increasingly, evidence suggests that we need to approach student perceptions of computer science and self perceptions of ""who does computer science"" before college, at ages in which students have not yet formed difficult-to-change viewpoints. In an effort to address underrepresented groups in computing, as well as to change common, stereotypical perceptions of what a computer scientist is, we ran a pilot summer camp that drew students from our local community and sought to increase their self-efficacy and change the way they conceptualized Computer Science. In designing the course, we leveraged approaches that have shown success at the college level - particularly Computing for Social Good and Media Computation - to introduce students to important concepts. The camp was structured as a week-long, full-day camp in one of the Computer Science department's computer-equipped classrooms, We taught programming in Processing to 28 rising 5th-9th grade students, focusing on artistic aspects and real-world inspiration. In this paper, we report on the project (both successes and failures) and the effects the project had on students' self-efficacy and attitudes towards computer science. We also provide some recommendations for others planning to offer similar camps.",Arts Coding for Social Good: A Pilot Project for Middle-School Outreach,NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2017
Paul E. Dickson:Toby Dragon:Adam Lee,"Undergraduate teaching assistants have been used in many classes, over many years, and at many institutions. The literature primarily focuses on the practice in a university environment with large classes. We focus instead on the use of undergraduate teaching assistants in the small college, small class environment. We have been employing students in this capacity for over 15 years and have gained some insight on how best to use these undergraduate teaching assistants in the small classroom setting. We believe these conclusions can inform the design of other undergraduate teaching assistant programs.",Using Undergraduate Teaching Assistants in Small Classes,NA:NA:NA,2017
Alex Edgcomb:Frank Vahid:Roman Lysecky:Susan Lysecky,"Getting students to read and study before class, to be better prepared for lecture, or to enable a flipped classroom is a long-standing difficulty for teachers of introductory programming classes. Furthermore, getting students to do homework, consisting of small practice problems and questions, is also a long-standing difficulty without massive grading resources. And even then, preventing students from copying others' solutions is difficult as well. Today, the web enables new interactive learning material that is replacing past forms of textbooks and homework assignments, and students today commonly have access to needed devices and the internet. This paper provides data on student reading and homework completion rates for web-based interactive learning material we created that automatically records reading and homework activity by students. The data is for several thousand students at over 10 universities, for introductory programming classes in Java, Python, and C++. The data shows that, with an appropriate amount of awarded points, required-reading completion rate was 84%, and auto-graded homework completion rate was 75%, varying somewhat based on how many course grade points those items were worth. Students on average spent about 10 minutes reading each section, and about 3 minutes per homework problem, both appropriate amounts for those items. Furthermore, we developed measures of whether students were earnestly attempting the reading and homeworks, versus just ""cheating the system"" to get course grade points. We describe those earnestness measures in this paper. With proper design and amount of assigned work, 80%-90% of students earnestly did the reading and homework activities, even when no penalty existed for cheating the system, and fewer than 3% blatantly cheated the system to get their points.","Getting Students to Earnestly Do Reading, Studying, and Homework in an Introductory Programming Class",NA:NA:NA:NA,2017
Jesse Eickholt:Sharad Shrestha,"Cloud Computing and Big Data continue to be disruptive forces in computing and have made inroads in the Computer Science curriculum, with courses in Cloud Computing and Big Data being routinely offered at the graduate and undergraduate level. One major challenge in offering courses in Big Data and Cloud Computing is resources. The question is how to provide students with authentic experiences making use of current Cloud and Big Data resources and tools and do so in a cost effective manner. Historically, three options, namely physical clusters, virtual clusters and cloud-based clusters, have been used to support Big Data and Cloud Computing courses. Virtual clusters and cloud-based options are those that institutions have typically adopted and many arguments in favor of these options exist in the literature, citing cost and performance. Here we argue that teaching Big Data and Cloud Computing courses can be done making use of a physical cluster and that many of the existing arguments fail to take into account many important factors in their calculations. These factors include the flexibility and control of a physical cluster in responding to changes in industry, the ability to work with much larger datasets, and the synergy and broad applicability of an appropriately equipped physical cluster for courses such as Cloud Computing, Big Data and Data Mining. We present three possible configurations of a physical cluster which span the spectrum in terms of cost and provide cost comparisons of these configurations against virtual and cloud-based options, taking into account the unique requirements of an academic setting. While limitations do exist with a physical cluster and it is not an option for all situations, our analysis and experience indicates that there is great value in using a physical cluster to support teaching Cloud Computing and Big Data courses and it should not be dismissed.",Teaching Big Data and Cloud Computing with a Physical Cluster,NA:NA,2017
Shelly Engelman:Brian Magerko:Tom McKlin:Morgan Miller:Doug Edwards:Jason Freeman,"STEAM education is a method for driving student engagement in STEM topics through personal expression, creativity and aesthetics. EarSketch, a collaborative and authentic learning tool which introduces students to programming through music remixing, has previously been shown to enhance student engagement and intent to persist in computing. The goal of EarSketch is to broaden participation in computing through a thickly authentic learning environment that has personal and real world relevance in both computational and music domains. This mixed methods study extends previous work by 1) using a newly- developed instrument to assess creativity and 2) testing a theory of change model that provides an explanatory framework for increasing student engagement in STEAM. The results suggest that students who used EarSketch express statistically significant gains in computing attitudes and creativity. Furthermore, a series of multiple regression analyses found that a creative learning environment, fueled by a meaningful and personally relevant EarSketch curriculum, drives improvements in students' attitudes and intent to persist in computing. This work makes a significant contribution to computer science education by establishing the effectiveness of an authentic STEAM curriculum and advancing our knowledge of the underlying mechanisms driving students' motivations to persist in STEM disciplines.",Creativity in Authentic STEAM Education with EarSketch,NA:NA:NA:NA:NA:NA,2017
Anthony Estey:Hieke Keuning:Yvonne Coady,"Educational research has established that learning can be defined as an enduring change in behaviour, which results from practice or other forms of experience. In introductory programming courses, proficiency is typically approximated through relatively small but frequent assignments and tests. Scaling these assessments to track significant behavioural change is challenging due to the subtle and complex metrics that must be collected from large student populations. Based on a four-semester study, we present an analysis of learning tool interaction data collected from 514 students and 38,796 solutions to practice programming exercises. We first evaluate the effectiveness of measuring workflow patterns to detect students at-risk of failure within the first three weeks of the semester. Our early predictor analysis accurately detects 81% of the students who struggle throughout the course. However, our early predictor also captures transient struggling, as 43% of the students who ultimately did well in the course were classified as at-risk. In order to better differentiate sustained versus transient struggling, we further propose a trajectory metric which measures changes in programming behaviour. The trajectory metric detects 70% of the students who exhibit sustained struggling, and mis-classifies only 11% of students who go on to succeed in the course. Overall, our results show how detecting changes in programming behaviour can help us differentiate between learning and struggling in CS1.",Automatically Classifying Students in Need of Support by Detecting Changes in Programming Behaviour,NA:NA:NA,2017
Katrina Falkner:Rebecca Vivian:Nickolas Falkner:Sally-Ann Williams,"A number of institutions and organisations provide online or face-to-face professional learning as part of outreach initiatives to increase skill levels and support for teachers in K-12 Computing education. With a number of countries introducing new K-12 Computer Science curricula around the globe, this provides a prime opportunity for the Computer Science education community to transform and develop models of teacher professional learning that address teachers' needs at-scale. This paper explores the theoretical underpinnings of a community-based professional learning MOOC for Australian teachers for K-6 Computer Science. This paper reflects on data collected from three offerings of the MOOC, presented in light of the theory and design considerations. This paper provides valuable insights of the design of community-centric MOOCs, and acts as a guide for the construction of online professional learning opportunities for Computer Science educators.",Reflecting on Three Offerings of a Community-Centric MOOC for K-6 Computer Science Teachers,NA:NA:NA:NA,2017
Mohammed F. Farghally:Kyu Han Koh:Hossameldin Shahin:Clifford A. Shaffer,"Algorithm Visualizations (AVs) have been used for years as an interactive method to convey data structures and algorithms concepts. However, AVs have traditionally focused on illustrating the mechanics of how an algorithm works. We have developed visualizations that we name Algorithm Analysis Visualizations (AAVs), that focus on conveying algorithm analysis concepts. We present our findings from an initial evaluation study of the effectiveness of AAVs when applied to a semester long Data Structures course. AAVs were evaluated in terms of student engagement, student satisfaction, and student performance. Results indicate that the intervention group students spent significantly more time with the AAVs than did the control group students who used primarily textual content. Students gave positive feedback regarding the usefulness of the AAVs in illustrating algorithm analysis concepts. Students from the intervention group had better performance on the algorithm analysis part of the final exam than did control group students.",Evaluating the Effectiveness of Algorithm Analysis Visualizations,NA:NA:NA:NA,2017
Mohammed F. Farghally:Kyu Han Koh:Jeremy V. Ernst:Clifford A. Shaffer,"We present initial results from our work towards developing a concept inventory for algorithm analysis (AACI) at the post-CS2 level. We used a Delphi process to identify a list of algorithm analysis topics that were considered both important and hard by surveying a panel of experienced instructors. Through a similar survey process, we identified a list of student misconceptions related to the identified topics. Based on this, a set of pilot AACI items were developed. We validated the misconceptions list by analyzing student responses to four administrations of the pilot AACI in two different universities during Fall 2015 and Spring 2016. Results revealed that a sufficient number of students held most of the misconceptions identified in the list.",Towards a Concept Inventory for Algorithm Analysis Topics,NA:NA:NA:NA,2017
Kathi Fisler:Shriram Krishnamurthi:Preston Tunnell Wilson,"Scope, aliasing, mutation, and parameter passing are fundamental programming concepts that interact in subtle ways, especially in complex programs. Research has shown that students have substantial misconceptions on these topics. But this research has been done largely in CS1 courses, when students' programming experience is limited and problems are necessarily simple. What happens later in the curriculum? Does more programming experience iron out these misconceptions naturally, or are interventions required? This paper explores students' understanding of these topics in the context of a programming languages class for third- and fourth-year CS majors. Our pre- and post-tests pose questions in two programming languages to gauge whether upper-level students transfer knowledge between languages. Many students held misconceptions about these concepts at the start of the course. Students made progress in only some languages and topics, and cross-language transfer does not occur naturally. We also discuss various pedagogic activities we used to engage students with these concepts, and provide data and student opinion on their effectiveness.","Assessing and Teaching Scope, Mutation, and Aliasing in Upper-Level Undergraduates",NA:NA:NA,2017
J. Michael Fitzpatrick:Ákos Lédeczi:Gayathri Narasimham:Lee Lafferty:Réal Labrie:Paul T. Mielke:Aatish Kumar:Katherine A. Brady,"This paper describes the design and delivery of a highly successful MOOC that uses MATLAB to teach introductory computer programming to a wide audience. The decisions behind the curriculum and assessment strategy are detailed, and the results are evaluated based on three sessions of the course that saw 80,000 active students, two million lecture views and 100,000 auto-graded programming assignment sets during the three sessions delivered in 2015.",Lessons Learned in the Design and Delivery of an Introductory Programming MOOC,NA:NA:NA:NA:NA:NA:NA:NA,2017
Vitaly Ford:Ambareen Siraj:Ada Haynes:Eric Brown,"In order to meet the cybersecurity workforce demand, it is important to raise cybersecurity interest among the youth. Just like ACM programming competitions, Capture the Flag (CTF) competitions allow students to learn cybersecurity skills in a fun and engaging way. It is an effective platform to increase students' interest in cybersecurity and prepare them for defending against real cyber attackers. A typical CTF competition requires at least some basic technical security knowledge and months of diligent preparation. For this very reason, many computer science students do not feel qualified to participate in CTF competitions, and as a result, do not even try. To overcome this lack of confidence while at the same time raising awareness about the cybersecurity profession in a realistic fashion, we have developed the CTF Unplugged project, as inspired by the CS Unplugged project. The primary goal is to teach students with little or no technical knowledge about the different cybersecurity challenges that a cybersecurity professional must address and the problem-solving skills needed for a cybersecurity career, all without direct use of technology. The effectiveness of CTF unplugged project has been evaluated after exposing 36 high school students participating in the Tennessee Tech University GenCyber Camp to these activities this past summer. Students reported a significant gain in knowledge, confidence and comfort level after participation.",Capture the Flag Unplugged: an Offline Cyber Competition,NA:NA:NA:NA,2017
Diana Franklin:Gabriela Skifstad:Reiny Rolock:Isha Mehrotra:Valerie Ding:Alexandria Hansen:David Weintrop:Danielle Harlow,"As more elementary schools commit to integrating computer science instruction into their curricula, they seek guidance on what concepts are appropriate for students at different grade levels. Currently, little is known about how best to sequence computer science learning across elementary grades. In this paper, we present an analysis of 123 students' (age 9-12, grades 4-6) activities in a curriculum implemented in a visual block-based programming language. The goal of this work is to better understand the developmental appropriateness of foundational computer science ideas. All 4th, 5th, and 6th grade students in a single school completed the first module of a curriculum during the same school year with the same instructor. We analyzed each task students attempted and found that for simple concepts, there was little difference in performance between grade levels. However, differences were found for more complex topics, such as whether they completed initialization tasks and the way in which they solved 2-d navigation tasks. A closer look revealed that students understood the basic concepts, but were challenged by deeper applications of the basic concepts and influenced by non-computer science skills. This work serves as an empirically grounded investigation of elementary computer science learning and contributes to our understanding of computer science learning trajectories and concept sequencing in the late elementary grades.",Using Upper-Elementary Student Performance to Understand Conceptual Sequencing in a Blocks-based Curriculum,NA:NA:NA:NA:NA:NA:NA:NA,2017
David Ginat:Yoav Blau,"The notion of abstraction repeatedly appears, in various ways, at all levels of computer science. It involves the aspects of leaving out details and comprehending concepts and mechanisms. It also involves the aspect of recognizing relationships between task elements. The latter aspect was not yet studied with respect to abstraction levels and algorithm design. We study it here. We analyze senior students' algorithmic solutions according to accepted interpretations of multiple abstraction levels, and offer guidelines for enhancing abstraction in students' algorithmics.",Multiple Levels of Abstraction in Algorithmic Problem Solving,NA:NA,2017
Kenneth E. Graves:Leigh Ann DeLyser,"Computer science (CS) education initiatives often use measures of interest to assess outcomes. Although appropriate for initiatives meant to encourage future participation, these measures do not always align with the complex nature of interest as described by the learning sciences literature or recognize the reality that school-related initiatives aimed at student engagement in CS will not produce individual interest in every student. In this paper, we present a review of the interest literature, and data from a survey with evidence of validity of over 1,500 students in various CS courses in New York City. By using Latent Class Analysis (LCA), we identify five different statistically significant subgroups of CS students: Enthusiasts, Engaged, Bookish, Idlers, and Disinterested. Our findings suggest that while some students enjoy CS in class and feel the teacher is pedagogically effective, they may not develop the individual interest characterized by seeking additional learning opportunities outside of class.","Interested In Class, But Not In The Hallway: A Latent Class Analysis (LCA) of CS4All Student Surveys",NA:NA,2017
Jeff Gray:Michele Roberts:Jonathan Corley,"The College Board estimates that the new AP CS Principles (CSP) course will set a participation record for new course launches. With a large number of students across the USA enrolling in CSP at the high school level, CS departments at colleges and universities will need to begin considering their position for awarding AP credit. One possibility is the introduction of a new college-focused CSP course for non-majors that can serve as a mapping for AP credit. This paper summarizes the experiences of two faculty at different universities who were official CSP College Board Pilots for several years. An overview of each university's experience is provided in terms of student demographics, common evaluation measures, and individual course nuances, followed by a series of recommendations to faculty who are considering the creation of a CSP course within the curriculum of their own department.",Getting Principled: Reflections on Teaching CS Principles at Two College Board University Pilots,NA:NA:NA,2017
Chris Gregg:Raewyn Duvall:Kate Wasynczuk,"A problem that many tech companies face today is that many computer science students entering the work force lack fundamental skills for understanding the entire process of a system that is not solely software. Some students may take a series of courses on analog and/or digital circuits, but the integration with modern devices is sorely missing from most curricula. We designed the Tufts University Comp 50: Wearable Devices course to introduce the basics of digital and analog circuits to students with software-driven backgrounds by studying the intricacies of the production of wearable electronic devices. The course focused on the skills needed to design hardware, software, and a chassis for a final wearable product that was novel and potentially marketable. The primary objective was to provide a course that serves as an introduction to digital electronics but with a tangible goal to produce a high-fidelity prototype that student teams presented at the end of the semester. Given the nature of modern wearable devices, which are small, energy efficient, and strongly favor connectivity to other devices, we developed the curriculum around designing a surface-mount Printed Circuit Board (PCB), and we outfitted the student kits with coin-cell battery powered, Bluetooth-connected, Arduino-compatible devices that they needed to learn how to program and connect. We also integrated iOS development into the course so that students' final projects could communicate with both their phones or tablets, or to the Internet via these devices. As the ""wearble devices""' field is relatively new, this paper discusses the decisions we made for the set-up of this class, what worked and what did not, and what we would change and improve when we teach it again.",A Modern Wearable Devices Course for Computer Science Undergraduates,NA:NA:NA,2017
Scott Grissom:Sue Fitzgerald:Renée McCauley:Laurie Murphy,"Many research studies show students benefit from instructional practices that promote student interaction within the classroom. However, recent prominent reports suggest many instructors still rely on lecture as their dominant classroom activity. This paper reports on a survey of U.S. computer science teaching practices. Responses indicate many CS instructors use student-centered instructional practices but evidence suggests students would benefit from additional use of these practices. Twenty percent of CS instructors report ""student-centered activities"" are prominent in their classroom. CS instructors are more likely to use student-centered practices than those in other science disciplines but less likely to do so than colleagues in non-science fields. Female CS instructors are more likely to structure their courses around student-centered practices than their male colleagues.",Exposed! CS Faculty Caught Lecturing in Public: A Survey of Instructional Practices,NA:NA:NA:NA,2017
Shuchi Grover:Satabdi Basu,"Programming in block-based environments is a key element of introductory computer science (CS) curricula in K-12 settings. Past research conducted in the context of text-based programming points to several challenges related to novice learners' understanding of foundational programming constructs such as variables, loops, and expressions. This research aims to develop assessment items for measuring student understanding in introductory CS classrooms in middle school using a principled approach for assessment design. This paper describes the design of assessments items that were piloted with 100 6th, 7th, 8th graders who had completed an introductory programming course using Scratch. The results and follow-up cognitive thinkalouds indicate that students are generally unfamiliar with the use of variables, and harbor misconceptions about them. They also have trouble with other aspects of introductory programming such as how loops work, and how the Boolean operators work. These findings point to the need for pedagogy that combines popular constructionist activities with those that target conceptual learning, along with better professional development to support teachers' conceptual learning of these foundational constructs.","Measuring Student Learning in Introductory Block-Based Programming: Examining Misconceptions of Loops, Variables, and Boolean Logic",NA:NA,2017
Kevin J. Gucwa:Harry H. Cheng,"This paper presents a methodology for creating challenge problems using a simulation environment for a hardware robot-based programming competition. Hosted each spring for K-14 students, the competition is based on hardware robots and lessons which have been used by students within their math, science, and engineering classes throughout the school year. RoboSim is a simulator which complements the control scheme for the hardware robots and is used regularly by the students to supplement running the hardware robots. For the first time RoboSim was used to design the challenges which have been given to students for the 2016 RoboPlay Challenge Competition. Using virtual robots for designing the competition allows more efficient design and testing of the new challenges with new features compared to using only hardware robots. The code which is used to control the robots is unchanged between the hardware and virtual robots making the transition to hardware robots trivial. All challenges from previous RoboPlay competitions are also available to students within RoboSim for testing within the classroom.",Making Robot Challenges with Virtual Robots,NA:NA,2017
Alexandria K. Hansen:Hilary A. Dwyer:Ashley Iveland:Mia Talesfore:Lacy Wright:Danielle B. Harlow:Diana Franklin,"We developed the Draw-A-Computer-Scientist-Test (DACST) to better understand elementary school students' conceptions of computer scientists and the nature of their work. By understanding how young children perceive computer scientists, we can broaden their ideas about the activities and images of computer scientists. We administered the DACST to 87 fourth-grade students (ages 8-9) as a pre- and post-assessment to a computer science curriculum. All students attended the same school and were taught by the same female teacher. Before the curriculum, we found that students most often drew male computer scientists working alone, and featured actions that were connected to technology in general (e.g., typing, printing), but not specific to computer science. After the curriculum, more female students drew female computer scientists than before, and the featured actions were more specific to computer science (e.g., programming a game). We also share insights about the classroom-learning environment that may have contributed to changes in students' understanding of computer scientists and their work.",Assessing Children's Understanding of the Work of Computer Scientists: The Draw-a-Computer-Scientist Test,NA:NA:NA:NA:NA:NA:NA,2017
Rachel Harsley:Davide Fossati:Barbara Di Eugenio:Nick Green,"Pair programming is a practice where two coders work side by side at one computer. The practice has been linked to many benefits including increased student engagement, satisfaction, and course grades. We present a quantitative study comparing the fine-grained interactions of individual programmers versus pair programmers as they work to solve coding problems using an Intelligent Tutoring System. We collected data from over 115 students resulting in more than 53,000 log events. We discovered that while both individual and pair programmers had equivalent learning gains, pair programmers took significantly less time on most problems, consulted fewer examples, coded more efficiently, and showed more signs of engagement. Individuals adapted to problems requiring new and compounded concepts at a rate similar to pair programmers.",Interactions of Individual and Pair Programmers with an Intelligent Tutoring System for Computer Science,NA:NA:NA:NA,2017
Helen H. Hu:Cecily Heiner:Thomas Gagne:Carl Lyman,"From 2012 to 2015, the number of Utah secondary teachers teaching computer science courses grew from 38 to 164. This growth was made possible by introducing three new CS teacher endorsements, which reduced the effort required for existing teachers to start teaching CS. Instead of committing to completing five college-level CS courses in two years, an existing but new-to-CS Utah teacher could complete an Exploring Computer Science (ECS) endorsement in half a year. Thanks to changes to high school graduation requirements, students were able to take a CS course without using an elective credit, boosting enrollment and broadening participation. Analysis of ECS teacher surveys and student surveys found surprisingly few differences between CS-experienced teachers and new-to-CS teachers in their ability to teach CS. By the end of the ECS course, even ECS students with low confidence in their own CS abilities believed that anyone could succeed in CS, regardless of their teacher's CS background. All students' interest in taking additional CS classes significantly increased after taking ECS, although CS-experienced teachers had a stronger impact on ECS students with low confidence than new-to-CS teachers. These results suggest that school districts seeking to provide computer science education for all their students can successfully staff their CS classes by supporting existing secondary teachers with no prior CS background with quality CS professional development and mentoring.",Building a Statewide Computer Science Teacher Pipeline,NA:NA:NA:NA,2017
Chris Johnson,"With the increasing availability of inexpensive miniature computers, networked appliances, and 3D printers, many consumers are returning to their ""maker"" roots, preferring to invent technologies to address personal needs instead of buying ready-made solutions. This maker movement confers many benefits to society: the growth of open source software and open standards, the proliferation of sharing sites where individuals freely publish design files, and communities of practice whose core values include education of new members. Sadly, the first two benefits may undermine the third: the maker movement generates much more stuff to consume. A school may purchase a 3D printer for educational purposes, only to have its student-makers simply download and print other people's models without learning to make their own. To prevent this kind of situation, educators must capitalize on the maker movement in ways that facilitate what we call computational making, which involves both meaningful cognition and the making of artifacts. In this paper, we describe one such way: a programming language named Madeup for generating 3D models.",Toward Computational Making with Madeup,NA,2017
David Kerven:Kristine Nagel:Stella Smith:Sherly Abraham:Laura Young,"Faculty face motivational and engagement challenges in general education computing courses. Inquiry-based learning strategies show promise in engaging students in an authentic discovery process. In a general education computer literacy course, we adapted scenario-based curriculum to create a classroom environment where students are faced with a real-life cybersecurity crisis and spurred into active discussion. Working as a team, they were required to analyze provided evidence and document a reasoned solution. We share implementation strategies and challenges to adopting scenarios promoting active learning. Our pilot data suggests this curriculum approach has a positive impact on students' interest in computing, while engaging them in real-world, multi-disciplinary content.",Scenario-Based Inquiry for Engagement in General Education Computing,NA:NA:NA:NA:NA,2017
Hassan Khosravi:Kendra M.L. Cooper,"Educators continue to face significant challenges in providing high quality, post-secondary instruction in large classes including: motivating and engaging diverse populations (e.g., academic ability and backgrounds, generational expectations); and providing helpful feedback and guidance. Researchers investigate solutions to these kinds of challenges from alternative perspectives, including learning analytics (LA). Here, LA techniques are applied to explore the data collected for a large, flipped introductory programming class to (1) identify groups of students with similar patterns of performance and engagement; and (2) provide them with more meaningful appraisals that are tailored to help them effectively master the learning objectives. Two studies are reported, which apply clustering to analyze the class population, followed by an analysis of a subpopulation with extreme behaviours.",Using Learning Analytics to Investigate Patterns of Performance and Engagement in Large Classes,NA:NA,2017
Sami Khuri:Miri VanHoven:Natalia Khuri,"In this paper, we describe the Minor in Bioinformatics that we created to better prepare students, especially women, in acquiring computational and programming skills. Our program was motivated by the fact that women are underrepresented in computer science and in other information technology-related fields. We aim to recruit biology undergraduates, who are more than 60% female, to the new cohort-based integrative interdisciplinary Minor in Bioinformatics program. By rooting this new computational program in biological concepts and questions, we plan to interest and educate biology students in computational methods, which can be applied to complex questions in the growing field of bioinformatics. We expect that the Minor in Bioinformatics program will serve as a general framework for establishing similar interdisciplinary programs at large institutions and small colleges.",Increasing the Capacity of STEM Workforce: Minor in Bioinformatics,NA:NA:NA,2017
Ada S. Kim:Andrew J. Ko,"Online coding tutorials are increasingly popular among learners, but we still have little knowledge of their quality. To address this gap, we derived several dimensions of pedagogical effectiveness from the learning sciences and education literature and analyzed a large sample of tutorials against these dimensions. We sampled 30 popular and diverse online coding tutorials, and analyzed what and how they taught learners. We found that tutorials largely taught similar content, organized content bottom-up, and provided goal-directed practices with immediate feedback. However, few were tailored to learners' prior coding knowledge and only a few informed learners how to transfer and apply learned knowledge. Based on these results, we discuss strengths and weaknesses of online coding tutorials, opportunities for improvement, and recommend that educators point their students to educational games and interactive tutorials over other tutorial genres.",A Pedagogical Analysis of Online Coding Tutorials,NA:NA,2017
Michael S. Kirkpatrick,"Team-Based Learning (TBL) is an active learning pedagogy that involves a substantial amount of preparation work by students. While previous work shows that objective measures of student learning outcomes improved after TBL adoption in CS, little work has been done to evaluate the students' perspectives rigorously. In this work, we present the qualitative findings from a larger mixed-methods study of student perspectives. These results suggest that most students find TBL rewarding, although there are some aspects of the pedagogy that can be frustrating and may require alteration for TBL adoption in CS.",Student Perspectives of Team-Based Learning in a CS Course: Summary of Qualitative Findings,NA,2017
Michael S. Kirkpatrick:Chris Mayfield,"Before Fall 2013, our CS majors were required to take the same 4-credit introductory programming course as part of a two-semester CS1 designed to be welcoming to novices. As CS in K-12 has expanded, the diversity of incoming students' programming backgrounds has increased, raising concerns that the climate was becoming increasingly intimidating for novices. The literature suggests these effects could disproportionately impact retention of female students and other underrepresented minorities, undermining other efforts to broaden participation in computing. To address these concerns, we split the first course based on students' prior programming experience. Using statistical techniques, we analyzed the intermediate quantitative impact of this and other curricular changes. Our results suggest that adding the alternative CS1 course had little effect on retention, but the overall structure has been successful in achieving comparable CS2 outcomes regardless of prior experience.",Evaluating an Alternative CS1 for Students with Prior Programming Experience,NA:NA,2017
Edwin M. Knorr:Christopher Thompson,"This paper reports on our experiences with in-lab programming tests (i.e., using a compiler and IDE) in a large undergraduate data structures course in C for non-specialists. By adding a suite of in-lab programming tests to our regular assessments (midterm, final exam, programming homework, etc.), we expected students to improve significantly in these areas: (1) programming ability as measured by final exam grades on programming-related questions, (2) confidence in programming ability, and (3) contributions/effectiveness in pair programming partnerships. Goal (1) was not met. Although Goal (2) was met, improved confidence did not translate into improved performance. Goal (3) was partially met. We present data gathered from in-lab programming test assessments, final exam programming assessments, and post-course surveys, including a two-year follow-up survey.",In-Lab Programming Tests in a Data Structures Course in C for Non-Specialists,NA:NA,2017
Tobias Kohn,"For novice programmers one of the most problematic concepts is variable assignment and evaluation. Several questions emerge in the mind of the beginner, such as what does x = 7 + 4 or x = x + 1 really mean? For instance, many students initially think that such statements store the entire calculation in variable x, evaluating the result lazily when actually needed. The common increment pattern x = x + 1 is even believed to be outright impossible. This paper discusses a multi-year project examining how high school students think of assignments and variables. In particular, where does the misconception of storing entire calculations come from? Can we explain the students' thinking and help them develop correct models of how programming works? It is particularly striking that a model of the computer as a machine with algebraic capabilities would indeed produce the observed misconceptions. The misconception might simply be attributed to the expectation that the computer performs computations the exact same way students are taught to in mathematics.",Variable Evaluation: an Exploration of Novice Programmers' Understanding and Common Misconceptions,NA,2017
Zachary Kurmas,"We present MIPSUnit, a unit test framework for MIPS assembly. MIPSUnit's primary benefit is that it reduces the time needed to grade assembly language assignments. It also provides a time-efficient means for giving students additional testing experience; therefore, it can serve as one component of a curriculum-wide emphasis on testing. MIPSUnit is a suite of two tools: MUnit, which allows users to test their assembly code with JUnit tests, and MSpec, which uses RSpec-style unit tests.",MIPSUnit: A Unit Testing Framework for MIPS Assembly,NA,2017
Mackenzie Leake:Colleen M. Lewis,"Many organizations have developed websites to support high school computer science (CS) teachers by providing them with collections of teaching resources. Yet rarely do these sites take into account the unique challenges of new CS teachers who often have not had formal training in CS. In response to a documented lack of teachers' engagement on these sites, we interviewed 17 CS teachers to learn more about the ways in which these sites are and are not meeting teachers' needs for curriculum resources. We discuss our findings about how teachers use, adapt, and share resources and then provide several suggestions for designing resource sharing sites that support teachers who have varying levels of experience teaching CS.",Recommendations for Designing CS Resource Sharing Sites for All Teachers,NA:NA,2017
Irene A. Lee:Maureen Psaila Dombrowski:Ed Angel,"In this paper, we describe a new teacher professional development program, New Mexico Computer Science for All (NM-CSforAll), that prepares high school science, technology, engineering and math (STEM) teachers to serve as learning coaches / teaching assistants for a dual credit Computer Science (CS) course. The dual credit course for students follows a ""flipped classroom"" model with the lecture portion delivered online through University of New Mexico (UNM) and the lab portion offered by participating teachers at local high schools. The course utilized a novel curriculum focusing on teaching CS concepts through computer modeling of complex adaptive systems. We reflect on what we learned while preparing STEM teachers to become CS teachers and discuss the affordances and barriers to bringing CS education to rural and under-resourced schools across the state of New Mexico.",Preparing STEM Teachers to offer New Mexico Computer Science for All,NA:NA:NA,2017
Dan Leyzberg:Christopher Moretti,"Two-thirds of all computer science teachers in the United States do not have a degree in computer science. As demand for K-12 computer science education continues to grow, and as industry continues to lure computer science graduates away from careers in education, school administrators are increasingly forced to ask teachers with little formal training in computer science to teach computer science courses. This is such a common phenomenon that there are now many competing summer professional development programs aimed at training teachers of other subjects to teach a first course in computer science. However, once these teachers become comfortable teaching the introductory material, there is little support available for them to gain more content knowledge to be able to support their more advanced students or design additional computer science courses. In this paper, we describe our approach to providing more advanced computer science content knowledge to computer science teachers in a week-long summer professional development program.",Teaching CS to CS Teachers: Addressing the Need for Advanced Content in K-12 Professional Development,NA:NA,2017
Soohyun Nam Liao:William G. Griswold:Leo Porter,"As student enrollments in computer science increase, there is a growing need for pedagogies that scale. Recent evidence has shown Peer Instruction (PI) to be an effective in-class pedagogy that reports high student satisfaction even with large classes. Yet, the question of the scalability of traditional lecture versus PI is largely unexplored. To explore this question, this work examines publicly available student evaluations of computer science courses across a wide range of class sizes (50--374 students) over a four year period. It first compares evaluations regardless of size and confirms prior work that PI classes are better appreciated by students than traditional lecture. It then examines how course evaluations change with class size and provides evidence that PI achieves a smaller decline in evaluations as class size increases.",Impact of Class Size on Student Evaluations for Traditional and Peer Instruction Classrooms,NA:NA:NA,2017
Breanne K. Litts:Yasmin B. Kafai:Debora Lui:Justice Walker:Sari Widman,"In this paper, we examine students? learning about computing by designing, coding, and remixing electronic textiles with sensor inputs and light outputs. We conducted a workshop with 23 high school students ages 16-17 years who learned how to craft and code circuits with the LilyPad Arduino, an electronic textile construction kit. Our analyses not only confirm significant increases in students' understanding of functional circuits but also showcase students' ability in reading, remixing and writing program code for controlling circuits. In our discussion, we address opportunities and challenges of introducing codeable circuit design for integrating maker activities that include engineering and computing into K-12 classrooms.","Understanding High School Students' Reading, Remixing, and Writing Codeable Circuits for Electronic Textiles",NA:NA:NA:NA:NA,2017
Josje Lodder:Bastiaan Heeren:Johan Jeuring,"This paper describes an algorithm to generate Hilbert-style axiomatic proofs. Based on this algorithm we develop logax, a new interactive tutoring tool that provides hints and feedback to a student who stepwise constructs an axiomatic proof. We compare the generated proofs with expert and student solutions, and conclude that the quality of the generated proofs is comparable to that of expert proofs. logax\ recognizes most steps that students take when constructing a proof. If a student diverges from the generated solution, logax can still provide hints and feedback.",Generating Hints and Feedback for Hilbert-style Axiomatic Proofs,NA:NA:NA,2017
Ellie Lovellette:John Matta:Dennis Bouvier:Roger Frye,"Contextualization of problems is widely studied in mathematics education. In computer science it is taken for granted that authentic, contextualized programming assignments will increase student interest and therefore enhance performance in programming assignments. This paper examines whether contextualization is, in fact, beneficial for students. We present a study that compares novice programmers' ability to code a solution given two versions of a problem. One version is contextualized, the other is non-contextualized, using ""just the numbers."" The results presented indicate that there is no difference in success rates for the two types of programming assignments.",Just the Numbers: An Investigation of Contextualization of Problems for Novice Programmers,NA:NA:NA:NA,2017
Bruce A. Maxwell:Stephanie R. Taylor,"Context-based CS1 courses focusing on Media Computation, Robotics, Games, or Art have been shown to improve outcomes such as retention and gender balance, both important factors in CS education. Colby College has offered a Visual Media focused CS1 course since 2008, and in response to faculty and student feedback, we expanded our curriculum to include a second context-based CS1 course focused on Science applications. Our goal was to have completely different projects but teach the same fundamental concepts. In order to measure whether students in each version were learning the same concepts, and to reduce confounding factors, the same professors co-taught both versions of CS1 and students completed the same homework, quizzes, and final exam. Our analysis of the quiz, final exam, and final overall performance showed no statistically significant difference by context or by gender. There was also no difference by context or gender in whether students took additional CS courses in the following two semesters. Furthermore, as a percentage of the students eligible to take the next offering of CS2, Data Structures and Algorithms, 48% of the students in these two offerings of CS1 registered for CS2, with no significant difference between contexts. Our conclusion is that we were successful in achieving similar outcomes, and the benefits of context-based CS1 courses, in both the Visual Media and Science versions of the course.",Comparing Outcomes Across Different Contexts in CS1,NA:NA,2017
Robert McCartney:Jonas Boustedt:Anna Eckerdal:Kate Sanders:Carol Zander,"In a survey of the CS-education community, we find a range of beliefs about the ""geek gene"" theory. We suggest an alternative term, the ""geekiness quotient (GQ)"". The GQ, grounded in Gardner's work on multiple intelligences, is a hypothetical measure of the student's current CS ability. The GQ supports a moderate view of the geek gene: that students arrive in our classrooms with a range of CS abilities, whether acquired through background or innate talent, and can improve their abilities through effort.",Folk Pedagogy and the Geek Gene: Geekiness Quotient,NA:NA:NA:NA:NA,2017
Paola Medel:Vahab Pournaghshband,"Low female participation in Computer Science is a known problem. Studies reveal that female students are less confident in their CS skills and knowledge than their male counterparts, despite parallel academic performance indicators. While prior studies focus on limited, apparent factors causing this lack of confidence, our work is the first to demonstrate how, in CS, instructional materials may lead to the promotion of gender inequality. We use a multidisciplinary perspective to examine profound, but often subtle portrayals of gender bias within the course materials and reveal their underlying pedagogical causes. We examine three distinct samples of established CS teaching materials and explain how they may affect female students. These samples, while not a complete display of all gender inequalities in CS curriculum, serve as effective representations of the established trends of male-centered representation, imagery, and language that may promote gender inequality. Finally, we present easily implementable, alternative gender equitable approaches that maximize gender inclusion.",Eliminating Gender Bias in Computer Science Education Materials,NA:NA,2017
Christian Murphy:Swapneel Sheth:Sydney Morton,"Since 2012, over 1,100 students at our institution have participated in software engineering courses in which they had the opportunity to partake in ""real projects for real customers."" Unlike typical one-semester courses or yearlong capstones, our approach is unique in that we offer a two-course sequence in which one group of students develops the initial implementation in the first course and different students maintain and improve the code in the second. This paper presents our experiences in teaching these courses and serves as a blueprint for other educators who wish to create similar interventions for their students over a two-course sequence. In addition to describing our motivation and the structure of the courses, we discuss how we address issues of scale by using students as Project Managers and the benefits of doing so. We also present empirical evidence that the projects help students feel more confident working in groups, using the agile development process, and working with a real-world customer.",A Two-Course Sequence of Real Projects for Real Customers,NA:NA:NA,2017
Andres Neyem:Juan Diaz-Mosquera:Jorge Munoz-Gama:Jaime Navon,"Project-based courses can provide valuable learning experiences for computing majors as well as for faculty and community partners. However, proper coordination between students, stakeholders and the academic team is very difficult to achieve. We present an integral study consisting of a twofold approach. First, we propose a proven capstone course framework implementation in conjunction with an educational software tool to support and ensure proper fulfillment of most academic and engineering needs. Second, we propose an approach for mining process data from the information generated by this tool as a way of understanding these courses and improving software engineering education. Moreover, we propose visualizations, metrics and algorithms using Process Mining to provide an insight into practices and procedures followed during various phases of a software development life cycle. We mine the event logs produced by the educational software tool and derive aspects such as cooperative behaviors in a team, component and student entropy, process compliance and verification. The proposed visualizations and metrics (learning analytics) provide a multi-faceted view to the academic team serving as a tool for feedback on development process and quality by students",Understanding Student Interactions in Capstone Courses to Improve Learning Experiences,NA:NA:NA:NA,2017
Mike O'Leary,"This paper provides pedagogical lessons drawn from a capstone hands-on laboratory course in cyber operations. It is taught as a flipped class, where the center piece is a collection of exercises that require teams of students to set up, defend, and attack complex networks. Project designs are presented, including balancing offense and defense to improve course learning outcomes. Lessons on the recruiting and managing of an external ""red team"" are provided. Grading issues are addressed, as are techniques to manage students of different skills and motivations.",Innovative Pedagogical Approaches to a Capstone Laboratory Course in Cyber Operations,NA,2017
Yin Pan:Sumita Mishra:David Schwartz,"The growing shortage of skilled professionals in cybersecurity and forensics has increased global demand for information systems professionals. To identify and attract more students to cybersecurity and forensics programs, the authors developed a game engine along with a sequence of entertaining, engaging, and educational games, suitable for forensics and cybersecurity courses. This paper focuses on the design and development of a modular educational game framework composed of a game engine and a GUI-based game creator. Following narrative and storylines of the game via interactive dialogs and visualized abstract concepts, students are motivated and engaged to obtain the necessary knowledge. Students will also develop their problem solving skills by using real tools and technologies while playing the game. The GUI-based game creator allows educators to create and develop new educational games by only focusing on game content.",Gamifying Course Modules for Entry Level Students,NA:NA:NA,2017
Anthony Papini:Leigh Ann DeLyser:Nathaniel Granor:Kevin Wang,"The rapid expansion of computer science (CS) education across the United States has left schools struggling to find teachers for CS classrooms. One approach to supplementing school and teacher expertise is to use industry professionals as volunteers in the classroom. This paper outlines the model of recruiting, training, and supporting volunteers in CS classrooms used by TEALS, a national computer science education program that creates co-teaching partnerships between industry experts and educators. This paper presents detailed information about the volunteers and the training the they receive, as well as the impact and outcomes on the students and cooperating teachers. Results from teacher, student, and volunteer surveys show satisfaction with the volunteers, as well as continued growth in perceived volunteer classroom performance over the year.",Preparing and Supporting Industry Professionals as Volunteer High School Computer Science Co-Instructors,NA:NA:NA:NA,2017
Vivek Paramasivam:Justin Huang:Sarah Elliott:Maya Cakmak,"Robots are becoming popular in Computer Science outreach to K-12 students. Easy-to-program toy robots already exist as commercial educational products. These toys take advantage of the increased interest and engagement resulting from the ability to write code that makes a robot physically move. However, toy robots do not demonstrate the potential of robots to carry out useful everyday tasks. On the other hand, functional robots are often difficult to program even for professional software developers or roboticists. In this work, we apply end-user programming tools for functional robots to the Computer Science outreach context. This experience report describes two offerings of a week-long introductory workshop in which students with various disabilities learned to program a Clearpath Turtlebot, capable of delivering items, interacting with people via touchscreen, and autonomously navigating its environment. We found that the robot and the end-user programming tool that we developed in previous work were successful in provoking interest in Computer Science among both groups of students and in establishing confidence among students that programming is both accessible and interesting. We present key observations from the workshops, lessons learned, and suggestions for readers interested in employing a similar approach.",Computer Science Outreach with End-User Robot-Programming Tools,NA:NA:NA:NA,2017
Miranda C. Parker:Leigh Ann DeLyser,"Computer science is rapidly expanding across the United States, and as schools look for guidance about what constitutes developmentally appropriate topics, state education departments are looking for assistance in the creation of standards. The K--12 Computer Science (CS) Framework was developed to fit these needs. The framework is the first of its kind in the K--12 CS domain, filling a much-needed structural and definitional role in the field. The framework was created as part of a collaboration at multiple levels within the CS community across the United States. Following the footsteps of other disciplines, this framework provides definitions and guidelines on what students should know (concepts) and be able to do (practices) within certain grade bands in today's computing classrooms. This paper details why the framework was developed, how it was designed, and what impacts it could have on the future of K--12 computing education.",Concepts and Practices: Designing and Developing A Modern K-12 CS Framework,NA:NA,2017
John Peterson:Greg Haynes,"We present an experience report demonstrating the use a Domain-Specific Language, Nuterpea, in a general education music class. While the use of computing in music education is common, we demonstrate that {\em coding} allows students without a background in music or computing to explore topics in music form and theory. Coding supports a new style of music education, one that is focused on creating musical compositions rather that performance or appreciation of existing music. We focus on styles of music that can be built algorithmically from a structural description. With such music the use of coding allows students to define and use patterns in a way that makes it possible for complex compositions to be specified in a concise manner. This approach suits the context of general education; we have designed our curriculum around genres of music that are easily represented in an algorithmic manner. Our experience suggests that a well-designed DSL for describing musical compositions provides a unique way to introduce students to core concepts in music in way that is engaging for learners and pedagogically appropriate for topics in music theory and structure. In addition, students are exposed to computer science topics such as programming language syntax, functions, abstractions, and types. We have also used this approach with pre-college students and believe that this style of music education can be adapted to a K12 environment.",Integrating Computer Science into Music Education,NA:NA,2017
Raymond S. Pettit:John Homer:Roger Gee,"One common frustration students face when first learning to program in a compiled language is the difficulty in interpreting the compiler error messages they receive. Attempts to improve error messages have produced differing results. Two recently published papers showed conflicting results, with one showing measurable change in student behavior, and the other showing no measurable change. We conducted an experiment comparable to these two over the course of several semesters in a CS1 course. This paper presents our results in the context of previous work in this area. We improved the clarity of the compiler error messages the students receive, so that they may more readily understand their mistakes and be able to make effective corrections. Our goal was to help students better understand their syntax mistakes and, as a reasonable measure of our success, we expected to document a decrease in the number of times students made consecutive submissions with the same compilation error. By doing this, we could demonstrate that this enhancement is effective. After collecting and thoroughly analyzing our own experimental data, we found that--despite anecdotal stories, student survey responses, and instructor opinions testifying to the tool's helpfulness--enhancing compiler error messages shows no measurable benefit to students. Our results validate one of the existing studies and contradict another. We discuss some of the reasons for these results and conclude with projections for future research.",Do Enhanced Compiler Error Messages Help Students?: Results Inconclusive.,NA:NA:NA,2017
Jonathan Pierce:Craig Zilles,"We analyzed 6 semesters of data from a large enrollment data structures course to identify instances of plagiarism in 4 assignments. We find that the majority of the identified plagiarism instances involve cross-semester cheating and are performed by students for whom the plagiarism is an isolated event (in the studied assignments). Second, we find that providing students an opportunity to work with a partner doesn't decrease the incidence of plagiarism. Third, while plagiarism on a given assignment is correlated with better than average scores on that assignment, plagiarism is negatively correlated with final grades in both the course that the plagiarism occurred and in a subsequent related course. Finally, we briefly describe the Algae open-source suite of plagiarism detectors and characterize the kinds of obfuscation that students apply to their plagiarized submissions and observe that no single algorithm appears to be sufficient to detect all of the cases.",Investigating Student Plagiarism Patterns and Correlations to Grades,NA:NA,2017
Lori Pollock:Crystalla Mouza:Amanda Czik:Alexis Little:Debra Coffey:Joan Buttram,"The CS for All initiative places increased emphasis on the need to prepare K-12 teachers of computer science (CS). Professional development (PD) programs continue to be an essential mechanism for preparing in-service teachers who have little formal background in CS content, skills, and teaching pedagogy. While increased investment by federal agencies and the industry has raised the number of CS PD opportunities for K-12 teachers, there has been limited study of how teachers apply what they learn back in their classroom. This paper describes an in-depth qualitative study through interviews of 28 elementary, middle and high school teachers who participated in summer PD in preparation of teaching a full CS course or integrate CS modules into existing courses (e.g., science, engineering, business, technology, etc). The interview protocol focused on educators' involvement in the PD, specific skills and strategies they learned, whether and how they have been able to apply these new skills in the classroom, what facilitated or impeded this application, and how students have responded.",From Professional Development to the Classroom: Findings from CS K-12 Teachers,NA:NA:NA:NA:NA:NA,2017
Thomas W. Price:Yihuan Dong:Dragan Lipovac,"Programming environments intentionally designed to support novices have become increasingly popular, and growing research supports their efficacy. While these environments offer features to engage students and reduce the burden of syntax errors, they currently offer little support to students who get stuck and need expert assistance. Intelligent Tutoring Systems (ITSs) are computer systems designed to play this role, helping and guiding students to achieve better learning outcomes. We present iSnap, an extension to the Snap programming environment which adds some key features of ITSs, including detailed logging and automatically generated hints. We share results from a pilot study of iSnap, indicating that students are generally willing to use hints and that hints can create positive outcomes. We also highlight some key challenges encountered in the pilot study and discuss their implications for future work.",iSnap: Towards Intelligent Tutoring in Novice Programming Environments,NA:NA:NA,2017
Noa Ragonis:Ronit Shmallo,"The paper presents research conducted with high school (HS) students (N=86) learning object-oriented programming (OOP) and computer science HS teachers (N=48). The focus was on students' and teachers' understanding of the this reference. Proper conceptualization of this indicates an understanding of objects in general and of the current object, and it involves various aspects of programming variants. Students' preferences as to the use of the this reference were also examined. Findings revealed a lack of understanding of both the implication and the implementation of this; only 45% of the students expressed understanding of when we must use this; only 60% expressed understanding of when not to use this, and only 24% expressed clear understanding in their definition of this. Even correct answers do not necessarily indicate conceptual understanding, rather a repetition of definitions or programming habits, or a reliance on operative aspects of the implementation. The teachers expressed a considerable lack of clarity in accurately characterizing the correctness of students' answers.","On the (Mis) Understanding of the ""this"" Reference",NA:NA,2017
Kathryn Rich:Carla Strickland:Diana Franklin,"Research on appropriate topics and goals for computer science (CS) education in elementary and middle school has been ongoing for decades, but the recent movement toward CS for all requires the research community to gain a better understanding of what is most important to teach, to whom, and in what order. We conducted a literature review with specific attention to cataloging computer science learning goals that experts theorize are important to teach as well as learning goals that have been explored and researched with students in K-8. By mapping the former onto the latter, we discovered six categories of goals that are theorized as important but, according to our review, are yet to be researched with K-8 students. We discuss the potential implications of these gaps for future research.",A Literature Review through the Lens of Computer Science Learning Goals Theorized and Explored in Research,NA:NA:NA,2017
Brandon Rodriguez:Stephen Kennicutt:Cyndi Rader:Tracy Camp,"Computer Science (CS) Unplugged activities have been deployed in many informal settings to present computing concepts in an engaging manner. To justify use in the classroom, however, it is critical for activities to have a strong educational component. For the past three years, we have been developing and refining a CS Unplugged curriculum for use in middle school classrooms. In this paper, we describe an assessment that maps questions from a comprehensive project to computational thinking (CT) skills and Bloom's Taxonomy. We present results from two different deployments and discuss limitations and implications of our approach.",Assessing Computational Thinking in CS Unplugged Activities,NA:NA:NA:NA,2017
Fernando J. Rodríguez:Kimberly Michelle Price:Kristy Elizabeth Boyer,"Pair programming is a collaboration paradigm that has been increasingly adopted in computer science education. Research has established that pair programming can hold benefits for students' learning and attitudes, but comparatively little is known about the ways in which the collaborative process benefits students' CS learning. This paper examines the collaboration process, comparing important outcomes with how students' dialogue and problem-solving approaches unfolded. The results show that the collaboration is more effective when both partners make substantive dialogue contributions, express uncertainty, and resolve it. In particular, driver dialogue expressivity is associated with improved outcomes. The findings provide insight into the ways in which pair programming dialogue benefits student learning during CS problem solving.",Exploring the Pair Programming Process: Characteristics of Effective Collaboration,NA:NA:NA,2017
Linda J. Sax:Kathleen J. Lehman:Christina Zavala,"As enrollments in computer science (CS) undergraduate programs are booming, CS departments are struggling to accommodate more students while also seeking to bring more women and underrepresented minority (URM) students into the field. A particular burden has been placed on introductory CS (i.e., CS1) courses to navigate these important, but sometimes competing, realities. As CS departments employ strategies to manage growing enrollments and recruit more diverse students into their CS1 courses, administrators and faculty will benefit from knowing more about the students who take these courses and how they may differ based on their major (CS majors and non-majors), gender, and race/ethnicity. This paper presents findings from a national study of CS1 courses and discusses key differences in introductory course students' demographic and background characteristics and pre-course experiences across these groups.",Examining the Enrollment Growth: Non-CS Majors in CS1 Courses,NA:NA:NA,2017
Benjamin J. Schreiber:John P. Dougherty,"We discuss two video series, one that serves as an introduction to Binary Search, and the other to Selection Sort. Each narrated series begins with an overview of the algorithm and step-by-step simulations on an interactive blackboard. The series next proceeds to a video that illustrates how to perform a complexity analysis with guided examples, and then applies that process to the associated algorithm. The series concludes with a video showcasing a song with algorithm pseudocode as lyrics, which are utilized line by line to implement the algorithm in code. These video series were piloted among a set of introductory courses involving coding and algorithmic concepts at two colleges. We assess the effectiveness of each series in terms of conceptual understanding and changes in student attitudes.",Assessment of Introducing Algorithms with Video Lectures and Pseudocode Rhymed to a Melody,NA:NA,2017
Nick Senske,"Non-major education continues to be a growing area of study in computer science education research. This paper focuses on architects as an audience and the teaching of computer science by architects, who successfully applied computer science education research. The author describes the structure and development of a required computational thinking course with an average yearly enrollment of 69 students and how it applied best practices from Media Computation to improve student outcomes and engagement. A four-year impact study found that a flipped classroom model combined with peer learning methods was superior to traditional lectures and labs for improving student performance and reducing attrition. Comparisons of pre- and post-class surveys revealed an improved perception of computing and an increased interest in the subject -- a positive outcome for a required introductory course. The author also studied the course's long-term effects. Three years after taking the course, a majority of students felt they retained what they learned and that learning computational thinking helped them to learn new software and perform better in advanced computing courses. By taking into account how architects learn and revising in response to assessments, we believe our course structure and teaching methodology demonstrates an effective case for applying computer science education research within an architectural curriculum.",Evaluation and Impact of a Required Computational Thinking Course for Architecture Students,NA,2017
Sue Sentance:Jane Waite:Steve Hodges:Emily MacLeod:Lucy Yeomans,"The recent introduction of computer science (CS) education into schools in many countries has led to a surge in interest in programming tools and approaches which make CS concepts and tasks engaging, motivating and accessible to all. There is renewed interest in supporting learning through physical computing, which has been shown to be motivational whilst offering opportunities for collaboration and creativity. Within this context the BBC recently led a collaborative venture in the UK to develop a portable and low-cost programmable device. The consortium funded and produced one million devices, enough for every 11-12 year-old in the UK. In this paper, we report on what we believe to be the first study to investigate the usability and affordances of the BBC micro:bit. We interviewed 15 teachers and 54 pupils in schools in England about their experiences with the device who were, in general, enthusiastic about the potential of the BBC micro:bit. We describe pupils' experiences in terms of usability, creativity, the tangibility of the device and their learning of programming, and analyse their experiences in the context of previously reported benefits of physical computing.",Creating Cool Stuff: Pupils' Experience of the BBC micro:bit,NA:NA:NA:NA:NA,2017
Sue Sentance:Andrew Csizmadia,"In the context of rapid curriculum change, teaching computer science in school requires new skills and knowledge that existing teachers may not have. As well as a programme of teacher professional development (TPD), certification can be used to provide recognition to in-service teachers who have made the transition to computer science. The BCS Certificate in Computer Science Teaching has been designed and developed to give teachers professional recognition of their competence in teaching the computer science elements of the Computing curriculum. In this paper we describe the innovative design of this national certification and our experience over the last two years of its implementation; we are not aware of any similar scheme to offer professional recognition to in-service K-12 computer science teachers.",Professional Recognition Matters: Certification for In-service Computer Science Teachers,NA:NA,2017
Duane F. Shell:Leen-Kiat Soh:Abraham E. Flanigan:Markeya S. Peteranetz:Elizabeth Ingraham,"Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear ""dosage effect"" of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed.",Improving Students' Learning and Achievement in CS Classrooms through Computational Creativity Exercises that Integrate Computational and Creative Thinking,NA:NA:NA:NA:NA,2017
Aaron J. Smith:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel,"Increased enrollments in computer science programs presents a new challenge of quickly accommodating higher enrollment in computer science introductory courses. Because peer teaching scales with enrollment size, it is a promising solution for supporting computer science students in this setting. However, pedagogical and logistical challenges can arise when implementing a large peer teaching program. To study these challenges, we developed a transparent online tool, My Digital Hand, for tracking one-to-one peer teaching interactions. We deployed the tool across three universities in large CS2 computer science courses. The data gathered confirms the pedagogical and logistical challenges that exist at scale and gives insight into ways we might address them. Using this information, we developed the second iteration of My Digital Hand to better support peer teaching. This paper presents the modified tool for use by the computer science education community.",My Digital Hand: A Tool for Scaling Up One-to-One Peer Teaching in Support of Computer Science Learning,NA:NA:NA:NA:NA,2017
Sohum Sohoni:Scotty D. Craig:Shaowen Lu,"This paper presents an initial investigation on the effect of non-pre-exposure to an instruction set architecture (ISA). In particular, a specialized ISA based on the Progressive Learning Platform (PLP) is implemented in the computer architecture course. Prior research has demonstrated the benefits of using PLP in the computer engineering curriculum. However, it is possible that the PLP ISA could hinder learning by requiring extra work for students to master it (extraneous load), if they have not had prior exposure to it. To investigate this, the current study implemented a quasi-experimental design with two groups (students knowledgeable with PLP from a previous course, and new users) and a pretest to determine differences in students' familiarity with the common terms in computer engineering, pre-requisite knowledge for a computer architecture course, and course knowledge. Both sets of students implemented the PLP CPU in behavioral Verilog in the computer architecture course. Results of the evaluations revealed significant learning from pretest to posttest by students in both groups on all measures. Moreover, no group differences were seen, indicating that pre exposure to an ISA (specifically PLP ISA) might not be necessary for successful course implementation. This is promising, considering that many students at 4-year colleges in the USA transfer from other institutions, and may have exposure to different instruction set architectures in their prerequisite courses. The sample size for this study is too small to draw a firm conclusion, but these preliminary findings merit further exploration of this topic.",Impact of Prior Exposure to the PLP Instruction Set Architecture in a Computer Architecture Course,NA:NA:NA,2017
Shashank Srikant:Varun Aggarwal,"Data-driven decision making is fast becoming a necessary skill in jobs across the board. The industry today uses analytics and machine learning to get useful insights from a wealth of digital information in order to make decisions. With data science becoming an important skill needed in varying degrees of complexity by the workforce of the near future, we felt the need to expose school-goers to its power through a hands-on exercise. We organized a half-day long data science tutorial for kids in grades 5 through 9 (10-15 years old). Our aim was to expose them to the full cycle of a typical supervised learning approach - data collection, data entry, data visualization, feature engineering, model building, model testing and data permissions. We discuss herein the design choices made while developing the dataset, the method and the pedagogy for the tutorial. These choices aimed to maximize student engagement while ensuring minimal pre-requisite knowledge. This was a challenging task given that we limited the pre-requisites for the kids to the knowledge of counting, addition, percentages, comparisons and a basic exposure to operating computers. By designing an exercise with the stated principles, we were able to provide to kids an exciting, hands-on introduction to data science, as confirmed by their experiences. To the best of the authors' knowledge, the tutorial was the first of its kind. Considering the positive reception of such a tutorial, we hope that educators across the world are encouraged to introduce data science in their respective curricula for high-schoolers and are able to use the principles laid out in this work to build full-fledged courses.",Introducing Data Science to School Kids,NA:NA,2017
Dannie M. Stanley,"The education of all software engineering students must include student experiences with the professional practice of software engineering. There have been many models proposed to include professional practice in computer science and software engineering curricula. Some schools simulate professional practice in the classroom with large term or multi-term projects. Others require students to engage in professional practice outside of the classroom in an internship or co-op program. We have been exploring an alternative approach to integrating professional practice into our computer science curriculum. In our approach, we partner with an external software consulting company who employs our students directly. Students telecommute from campus and are engaged directly in real-world software development projects. We provide an academic advisor to help guide the development of the program, look for learning opportunities in the work, and mentor students. We describe our approach, solutions to the challenges we faced, and the direct and indirect benefits of our approach.",CORP: Co-operative Remote Practicum Work Experience Model for Software Engineering Education,NA,2017
Ben Stephenson:Michelle Craig:Daniel Zingaro:Diane Horton:Danny Heap:Elaine Huynh,"An exam wrapper is a structured activity that students engage in after their instructor has graded and returned an exam, and is designed to promote self-reflection and improve study practices. This paper describes two studies examining the efficacy and student perceptions of exam wrappers. The studies were conducted at two major Canadian universities, using complementary research designs. We report that neither study produced evidence that exam wrappers have a significant effect on final exam scores or on course drop rates. However, we also find that the use of wrappers was associated with improved rates of test pickup and increased scores on a course evaluation question regarding the fairness of evaluation methods. Given these results, we advise instructors who are considering the use of exam wrappers to review the evidence for other possible interventions that may more effectively serve the same goals.",Exam Wrappers: Not a Silver Bullet,NA:NA:NA:NA:NA:NA,2017
Kathleen Timmerman:Travis Doom,"An important part of maintaining and continuously improving programs is assessing student objectives to evaluate the impact of change. This paper reviews an infrastructure that was designed to give continuous periodic direct measurements of retained relevant knowledge throughout a computer science and computer engineering baccalaureate curriculum. This infrastructure is designed to give immediate feedback to students and instructors as well as long-term assessment of program health. Additionally, due to the continuous nature of the assessment, its deployment is designed to avoid undue burden in deployment.",Infrastructure for Continuous Assessment of Retained Relevant Knowledge,NA:NA,2017
David S. Touretzky:Christina Gardner-McCune:Ashish Aggarwal,"Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft's Kodu Game Lab; the second group was also given four semantic ""Laws of Kodu"" to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.",Semantic Reasoning in Young Programmers,NA:NA:NA,2017
Arie Van Deursen:Maurício Aniche:Joop Aué:Rogier Slag:Michael De Jong:Alex Nederlof:Eric Bouwers,"Teaching software architecture is hard. The topic is abstract and is best understood by experiencing it, which requires proper scale to fully grasp its complexity. Furthermore, students need to practice both technical and social skills to become good software architects. To overcome these teaching challenges, we developed the Collaborative Software Architecture Course. In this course, participants work together to study and document a large, open source software system of their own choice. In the process, all communication is transparent in order to foster an open learning environment, and the end-result is published as an online book to benefit the larger open source community. We have taught this course during the past four years to classes of 50-100 students each. Our experience suggests that: (1) open source systems can be successfully used to let students gain experience with key software architecture concepts, (2) students are capable of making code contributions to the open source projects, (3) integrators (architects) from open source systems are willing to interact with students about their contributions, (4) working together on a joint book helps teams to look beyond their own work, and study the architectural descriptions produced by the other teams.",A Collaborative Approach to Teaching Software Architecture,NA:NA:NA:NA:NA:NA:NA,2017
Tammy VanDeGrift,"This paper describes the creation, use, and evaluation of POGIL (Process Oriented Guided Inquiry Learning) activities in a Data Structures course. POGIL draws upon constructivist and collaborative learning theories in which students work in teams through guided sets of questions. The purpose of this study was to see how students valued POGIL activities in terms of their learning. Survey responses were used to assess how students valued POGIL. Over 90% of students stated that POGIL helped them learn the material. Not only did it help them learn data structures, they reported value in working through problems with others, seeing how others think, being accountable for their own learning, and using the activities to review the material. Overall, POGIL was valued by students and this teaching method could be of value to other computing courses.",POGIL Activities in Data Structures: What do Students Value?,NA,2017
Mickey Vellukunnel:Philip Buffum:Kristy Elizabeth Boyer:Jeffrey Forbes:Sarah Heckman:Ketan Mayer-Patel,"Online discussion forums are widely used and hold great promise for supporting students in learning computer science. Understanding how we can best support students in learning computer science through online discussion forums is an important open question for the CS Ed community. This paper analyzes discussion forum posts from 395 students enrolled in CS2 across two different universities. The results demonstrate that students use the discussion forums often for logistical and relatively shallow questions. However, the largest portion of questions reflect some level of constructive problem-solving activity, and are positively correlated with course grades. Questions that neither describe students' reasoning nor their attempts to solve the problem constitute the smallest percentage of questions, but these questions may be particularly important to attend to because of their relationship to students' prior experience.",Deconstructing the Discussion Forum: Student Questions and Computer Science Learning,NA:NA:NA:NA:NA:NA,2017
Sara Vogel:Rafi Santo:Dixie Ching,"As momentum grows to expand K12 Computer Science (CS) education, associated public narratives often assume core questions about why CS should be taught to all students have been sufficiently answered. Having clarity around the core purposes that varied stakeholders are envisioning is critical to ensuring the coherence of CS4All initiatives. This study presents a framework examining the range of arguments for and projected impacts of CS education programs. Based on data drawn from a researcher- facilitated participatory knowledge building process involving 26 CS education stakeholders who articulated 161 arguments, we identify seven areas of impact present in arguments for universal CS education: (1) economic and workforce development, (2) equity and social justice, (3) competencies and literacies, (4) citizenship and civic life, (5) scientific, technological and social innovation, (6) school improvement and reform and (7) fun, fulfillment and personal agency. Findings show that individual arguments and visions for CS education often reference multiple impact areas. We intend for this framework to support reflection by CS education stakeholders to consider how their current initiatives index different ideologies about what CS4All projects are meant to achieve.",Visions of Computer Science Education: Unpacking Arguments for and Projected Impacts of CS4All Initiatives,NA:NA:NA,2017
Jennifer Wang:Sepehr Hejazi Moghadam,"As computer science (CS) education expands at the K-12 level, we must be careful to ensure that CS neither exacerbates existing equity gaps in education nor hinders efforts to diversify the field of CS. In this paper, we discuss structural and social barriers that influence Blacks, Hispanics, and girls, based on surveys of 1,672 students, 1,677 parents, 1,008 teachers, 9,805 principals, and 2,307 superintendents in the United States. We find that despite higher interest in CS among Black and Hispanic students and parents, these students experience greater structural barriers in accessing computers and CS classes than White students. And while girls have the same access as boys, social barriers exist with girls reporting lower awareness of CS opportunities outside of classes, less encouragement from teachers and parents, and less exposure to CS role models in the media. It is critical for expanding CS opportunities to address the unique issues for each group.",Diversity Barriers in K-12 Computer Science Education: Structural and Social,NA:NA,2017
David C. Webb:Hilarie Nickerson:Jeffrey B. Bush,"This paper compares student outcomes from 75 K-12 teachers who participated in either online, blended, or face-to-face professional development design to support teacher implementation of a programming curriculum during the regular school day. The results are based on survey responses collected over two years from 4,832 students. With only one exception, the results showed no negative student outcomes when comparing student survey results from teachers who participated in online professional development compared to students of teachers who participated in face-to-face professional development. Students who had teachers who participated in face-to-face professional development, however, expressed stronger interest in designing their own games at home. These results suggest that online professional development that is designed to support K-12 teacher classroom implementation of CS education curricula is a viable model with respect to student outcomes. Recommendations for the design of online curricula for CS education are discussed.",A Comparative Analysis of Online and Face-to-Face Professional Development Models for CS Education,NA:NA:NA,2017
Joanna Weidler-Lewis:Wendy DuBow:Alexis Kaminsky,"Understanding how to increase participation and continued persistence of women in computing is a perennial problem. This paper explores the ways in which participation in computing can be defined either by a narrow disciplinary practice framework or a more expansive social practice framework. How participation in computing is defined is consequential regarding our understanding of women's persistence in computing. The data for this paper come from 64 in-depth, qualitative interviews with young women who in high school expressed interest in computing by looking into NCWIT's Aspirations in Computing Award. Analyses of the interviews show that defining participation in computing from a disciplinary perspective unduly prohibits some women from full membership in computing communities. Findings show that some women who self-identify with the computing community are not fully recognized by other members of the computing community.",Defining a Discipline or Shaping a Community: Constraints on Broadening Participation in Computing,NA:NA:NA,2017
David Weintrop:Nathan Holbert,"Blocks-based, graphical programming environments are increasingly becoming the way that novices are being introduced to the practice of programming and the field of computer science more broadly. An open question surrounding the use of such tools is how well they prepare learners for using more conventional text-based programming languages. In an effort to address this transition, new programming environments are providing support for both blocks-based and text-based programming. In this paper, we present findings from a study investigating how learners use a dual-modality environment where they can choose to work in either a blocks-based or text-based interface, moving between them as they choose. Our analysis investigates what modality learners choose to work in, and if and why they move from one representation to the other within a single project. We conclude with a discussion of design implications and future directions for this work. This work contributes to our understanding of the affordances of blocks-based programming environments and advances our knowledge on how best to utilize them.",From Blocks to Text and Back: Programming Patterns in a Dual-Modality Environment,NA:NA,2017
Valerie Barr:Bryan Catron:Christopher Healy:Kate Lockwood:Anil M. Shende:Andrea Tartaro:Kevin Treu,NA,Computer Science Topics in First- and Second- Year Seminar Courses,NA:NA:NA:NA:NA:NA:NA,2017
Tracy Camp:Emmanuel Schanzer:Joanna Goode:Owen Astrachan:Ed Campos,"Professional development (PD) has long been recognized as one of the key ingredients in K-12 CS Education, particularly when addressing the problem of underserved communities. Over the last decade, significant work has been done to create professional development and curricular offerings that are research based, with a proven track record. Bootstrap, Exploring Computer Science and AP CS Principles represent these types of programs. Each of these programs has developed high-quality PD for educators and have been recognized by the White House as exemplar courses. However, economies of scale make it difficult to expand to the vast number of small school districts around the country, including some of the most isolated and underserved areas such as rural communities and Native American reservations. This panel will discuss an alternative model - ""CSPdWeek"" -- a national event aimed at providing best-in-class PD to teachers across the country. The inaugural CSPdWeek took place in July, 2016 at Colorado School of Mines, and provided a week-long residential experience for teachers attending one of three teacher-focused professional development programs. Over 240 classroom teachers attended CSPdWeek, making this professional development the single largest cross-curricular effort in preparing U.S. teachers to teach computing as part of the ""CS for All"" movement. This panel will focus on why this year's CSPdWeek was such a success and what was behind social media testimonies from teachers who talked about being part of an educational movement.",CSPd Week: A Scalable Model for Preparing Teachers for CS for All,NA:NA:NA:NA:NA,2017
Alison Clear:Allen Parrish:Ming Zhang:Gerritt C. van der Veer,"This panel discusses the development of a global, futuristic computing overview curricular report called Computing Curricular 2020, also known as CC2020. This new document, which is an initiative of the ACM Education Council, published by ACM, will be a revision of one of the most cited curricula documents called Computing Curricula 2005, also known as CC2005 [1]. CC2020 will build on the attributes of the existing predecessor. It will encompass broad global inclusion by welcoming active participation from computing societies around the world such as the Information Processing Society of Japan (IPSJ). CC2020 will also be futuristic in its development. While the new document will include an update to reflect existing curricula reports for computer engineering, computer science, information systems, information technology, and software engineering, it will also describe ways in which new and emerging curricular areas would be included within the framework of the report. The working group of CC2020 will include approximately two dozen professionals from academia and industry who will engage in crafting the new document. Additionally, a subset of about ten people of the working group forms the executive or core operational unit of the CC2020 project. The panelists for this representation are members of this executive group. Their global origins and affiliations represent the diversity of interaction that is one of the hallmarks of this undertaking. The panelists will present their views on the future aspects of the CC2020 report from the perspective of their experiences and affiliations, as well as their countries. The panelists will also provide contrasting points of view on topics relevant to the project. Audience interaction and participation will consume approximately fifty percent of the time allocated to the presentation.",CC2020: A Vision on Computing Curricula,NA:NA:NA:NA,2017
Leigh Ann DeLyser:Tom O'Connell:Diane Levitt:Rebecca Novak:Kevin Wang,"Computer Science Education is rapidly expanding in the United States[5]. As a part of this expansion, many programs are using university students and industry volunteers for a variety of purposes within schools. These volunteers can bring a wealth of content knowledge and professional experience in their interactions with students [3], and can be inspirational when talking about the problems they work on[1]. Some programs even advocate for the use of professionals for instruction based upon their content knowledge[2]. Although professionals often have a high level of content knowledge, they may lack the training or experience necessary to be effective in the classroom[3, 4]. This panel brings together 4 different organizations with experience working with content expert volunteers with widely disparate preparation in teaching. In this panel we will share lessons learned by the organizations whose programs rely on volunteer instructors and mentors, that combined work with over 1,200 volunteers for multiple years. Topics discussed by the panel will include recruitment and selection of volunteers, volunteer training prior to entering the classroom, appropriate supports for volunteers throughout the experience, volunteer retention strategies, and preliminary efforts at evaluating the implementations. Panelists will also discuss volunteers for short-term engagements such as speaking opportunities and school-based hackathons.",Volunteer Best Practices for K12 CS,NA:NA:NA:NA:NA,2017
John DeNero:Sumukh Sridhara:Manuel Pérez-Quiñones:Aatish Nayak:Ben Leong,NA,Beyond Autograding: Advances in Student Feedback Platforms,NA:NA:NA:NA:NA,2017
Lien Diaz:Frances P. Trees:Dale Reed:Richard Kick:Andrew Kuemmel,"The inaugural launch of the College Board's Advanced Placement Computer Science Principles (AP CSP) course coincided within the same year of the announcement of CS For All, a bold national initiative that seeks to support the expansion of computer science education in America, and to empower students to learn computer science and obtain the computational thinking skills needed to thrive in today's transforming digital world. The intent of the AP CSP course supports this initiative as it aims to promote social justice and equity in computer science education. The course is designed to be appealing to a broader audience, including females and minority students, who are underrepresented in computer science, thus providing increased access and opportunity for students to study computer science at the secondary level.",Social Justice and Equity in CS Education: Inaugural Launch of AP Computer Science Principles,NA:NA:NA:NA:NA,2017
Wendy DuBow:Ignatios Vakalis:Laura Dillon:Helen Hu,"Recently, many computing departments in universities and colleges around the nation have seen increases in enrollments in the major. While these increases are largely welcome, it is important that the student population be diversified even as enrollments swell. What are departments doing to ensure that women are both recruited and retained in this changing environment? This panel will share interventions undertaken by three U.S. post-secondary institutions that have focused on increasing their female and underrepresented student enrollment. Their efforts all include multi-pronged approaches, which is consistent with the social science research on how to create institutional reform in academic departments [1]. These institutions have made changes that reflect increased departmental engagement with recruitment and retention for diversity: a shift in individual faculty pedagogical strategies, introductory course restructuring, as well as more outreach and preparatory programs for incoming students. These departments have not only implemented existing evidence-based practices to make these lasting changes, but have tried new ideas as well.",Increasing Diversity in the Face of Enrollment Increases,NA:NA:NA:NA,2017
Jeffrey Forbes:David J. Malan:Heather Pon-Barry:Stuart Reges:Mehran Sahami,"Undergraduates are widely used in support of Computer Science (CS) departments' teaching missions as teaching assistants, peer mentors, section leaders, course assistants, and tutors. Those undergraduates engaged in teaching have the opportunity to deeply engage with CS concepts and develop key communication and social competencies. As enrollments surge, undergraduate teaching assistants (UTAs) play a larger role in student experience and outcomes. While faculty and graduate student instructional support does not necessarily increase with the number of students in our courses, the number of qualified undergraduate teaching assistants for introductory CS courses should scale with the number of students in our courses. With large courses, the significance of the UTAs' role in students' learning likely also increases. Students have relatively little interaction with the instructor, and faculty may have more challenges monitoring and supporting individual UTAs. UTAs have a major role in affecting climate in computer science courses. The climate in large courses has substantial implications for students from groups traditionally underrepresented in computing. This panel will discuss how undergraduate teaching assistants can serve as a scalable effective teaching resource that benefits both the students in the course and the UTAs themselves.",Scaling Introductory Courses Using Undergraduate Teaching Assistants,NA:NA:NA:NA:NA,2017
Ria Galanos:Whitaker Brand:Sumukh Sridhara:Mike Zamansky:Evelyn Zayas,"The pace of technology for use in computing education is staggering. In the last few years, the following technologies have completely transformed our teaching: Piazza, GradeScope, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mic (for audio), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have ""bubbled to the top"" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the particular configuration options required to make their technology ""sing"". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any ""gotchas"" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite ""can't live without"" technologies as well.",Technology We Can't Live Without!: revisited,NA:NA:NA:NA:NA,2017
Jeff Gray:Jennifer Rosato:Bradley Beth:Nigamanth Sridhar,NA,Teaching the Global Impact of Computing,NA:NA:NA:NA,2017
Mark Guzdial:Barbara Ericson:W. Richards Adrion:Megean Garvin,"In January 2016, US President Barack Obama started an initiative to provide CS for All -- with the goal that all school students should have access to computing education. Computing departments in higher education have a particularly important role to play in this initiative. It's in our best interest to get involved, since the effort can potentially improve the quality of our incoming students. CS Departments have unique insights as subject-matter experts to inform the development of standards. We can provide leadership to inform and influence education policy. In this session, we will present a variety of ways in which departments and faculty can support CS for All and will answer audience questions about the initiative. Our goal is to provide concrete positive actions for faculty.","The Role of CS Departments in The US President's ""CS for All"" Initiative",NA:NA:NA:NA,2017
Helen H. Hu:Douglas Blank:Albert Chan:Travis Doom,"TIDES (Teaching to Increase Diversity and Equity in STEM) is a three-year initiative to transform colleges and universities by changing what STEM faculty, especially CS instructors, are doing in the classroom to encourage the success of their students, particularly those that have been traditionally underrepresented in computer science. Each of the twenty projects selected proposed new interdisciplinary curricula and adopted culturally sensitive pedagogies, with an eye towards departmental and institutional change. The four panelists will each speak about their TIDES projects, which all involved educating faculty about cultural competency. Three of the panelists infused introductory CS courses with applications from other disciplines, while one of the projects taught computational skills in natural science courses.",Panel: Teaching To Increase Diversity and Equity in STEM,NA:NA:NA:NA,2017
Kimberly Hughes:Carol L. Fletcher:Leigh Ann DeLyser:Anthony Owen,"Many states are taking up the President's challenge to provide CS for All. One of the most significant barriers to realizing this goal is the lack of trained and certified CS teachers. Building teacher capacity on a large scale is a challenge each of these panelists has tackled in their own region. Panelists will discuss the pros and cons of targeting in-service vs. pre-service teachers, online vs. face-to-face training, carrots vs. sticks, top down vs. bottom up strategies, and long-term vs. short term solutions to building capacity across an entire state or metropolitan area. Panelists represent CS for All efforts from Texas, New York City, and Arkansas.",Building CS Teaching Capacity: Comparing Strategies for Achieving Large Scale Impact,NA:NA:NA:NA,2017
Christian Murphy:Kevin Buffardi:Josh Dehlinger:Lynn Lambert:Nanette Veilleux,"A common refrain from Senior Exit Surveys and Alumni Surveys is the desire to work on ""real-world,"" ""practical"" and ""hands-on"" projects using industry-ready tools and development environments. To assuage this, institutions have moved towards adopting Free and Open Source Software (FOSS) as an avenue to provide meaningful, applied learning interventions to students. Through these experiences, students benefit from engagement with various communities including: the community of contributors to the FOSS project; the community of local software developers; the community of citizens who reside in the local area; the community of students at their institution and others; and, the community of people impacted by the FOSS project. These engagements motivate students, enhance their communication and technical skills, allow them to grow and become more confident, help them form professional networks, and provide the ""real-world"" projects they seek. In this panel, we will discuss our experiences in engaging students with five different types of communities as part of incorporating FOSS into our courses, focusing on how other educators can provide the same benefits to their students as well. In order to satisfy the time constraints of the panel, the last two authors will present together.",Community Engagement with Free and Open Source Software,NA:NA:NA:NA:NA,2017
Farzana Rahman:Helen Hu:Dennis Brylow:Clif Kussmaul,"In recent years, there has been a dramatic increase in computer science undergraduate research activities at colleges and universities nationwide. Developing and maintaining undergraduate research benefits students, faculty mentors, and the institution. Incorporating a research culture along with a sound academic foundation enables students to develop independent critical thinking skills along with effective oral and written communication skills. However, we are in a time when budgets are being tightened and some institutions do not have the resources to pursue such initiatives. Traditionally research focused universities (like R1) have access to various large funding sources to host Research Experience for Undergraduate (REU) programs. R1 universities have established records of accomplishment for innovative research and the faculties at R1 institutions have lab infrastructure to blend such activities for undergraduate students. However, non-R1 institutions (like community colleges, undergraduate, masters, and to some extent R2 institutions) lack resources, lab infrastructure and above all a track record for innovative research that makes it hard for them to obtain funding to host an REU program. Thus, in this panel, our goal is to present ideas for establishing a track record and building an internally and externally funded Undergraduate Research experience (UR), particularly for non-R1 institutions. This involves obtaining funds to conduct the research and to secure travel funds to disseminate research results.",Bringing Undergraduate Research Experience in Non-R1 Institutions,NA:NA:NA:NA,2017
Richard Weiss:Casey W. O'Brien:Xenia Mountrouidou:Jens Mache,NA,"The Passion, Beauty, and Joy of Teaching and Learning Cybersecurity",NA:NA:NA:NA,2017
Doug Baldwin:Grant Braught:Amanda Holland-Minkley,"The SIGCSE Committee on Computing Education in Liberal Arts Colleges was approved in late 2015 and began organizing itself at SIGCSE 2016. The Committee has made an initial survey of the liberal arts computer science landscape, and has identified some central issues for more detailed study. This session will present the Committee's initial findings and future plans, and will solicit audience participation in refining the set of central issues and identifying possible resolutions to them.",Computing Education in Liberal Arts Colleges: A Status Report of the SIGCSE Committee,NA:NA:NA,2017
Douglas Baldwin:Valerie Barr:Amy Briggs:Jessen Havill:Bruce Maxwell:Henry M. Walker,"In this special session, we share a variety of ways in which CS 1 courses can broaden their focus beyond programming. These courses strive to effectively introduce the fundamental ideas of computer science, and the importance of computing in broader contexts, without sacrificing programming rigor.",CS 1: Beyond Programming,NA:NA:NA:NA:NA:NA,2017
Bo Brinkman:Keith W. Miller,"This session is intended as a fun and highly interactive way for college and high school teachers to increase their familiarity with the ACM Code of Ethics and Professional Conduct. Using a quiz show format, participants will be asked to provide solutions to knotty (and sometimes humorous) ethical challenges. This will be followed by think-pair-share (so that everyone gets involved), and then a presentation of the relevant sections of the ACM Code of Ethics and Professional Conduct. Members of the ACM's Committee on Professional Ethics will be on hand to collect feedback and questions about the Code, for use by the Code 2018 task force, and for the ""Ask an Ethicist"" feature at http://ethics.acm.org.",The Code of Ethics Quiz Show,NA:NA,2017
Legand Burge:Marlon Mejias:KaMar Galloway:Kinnis Gosha:Jean Muhammad,"Underrepresented students and the institutions that serve these students need to recognize and address the unique challenges that impact their career pathways and successes. This special session will discuss challenges facing Minority Serving Institutions (MSIs) and how industry-academia partnerships can be a force in mitigating some of these challenges. We will explore how we as a community can work together to develop holistic programs to support student development and excellence. We will highlight the shortcomings, strengths and future of the Googler In Residence (GIR) program from the perspective of select participating colleges, as well as other successful initiatives in motion. It is also essential that promising interventions be shared and scaled across institutions that play an essential role in educating and preparing these students. We are still learning as we go, but this is an opportune time to come together as a community to share our challenges and solutions, to determine how we can move together and how we can all be involved as change advocates. It is meant to be interactive, create shared knowledge and help identify ways of moving forward serving MSIs.",Holistic Development of Underrepresented Students through Academic: Industry Partnerships,NA:NA:NA:NA:NA,2017
Diana Burley:Matt Bishop:Siddharth Kaza:David S. Gibson:Elizabeth Hawthorne:Scott Buck,"In this special session, members of the ACM Joint Task Force (JTF) on Cybersecurity Education will provide an overview of the task force mission, objectives, and release a draft of the curricular guidelines. After the overview, task force members will engage session participants in the curricular development process and solicit feedback on the draft guidelines.",ACM Joint Task Force on Cybersecurity Education,NA:NA:NA:NA:NA:NA,2017
Kelsey Finkel:Kenneth E. Graves:Leigh Ann DeLyser,"K12 CS education is expanding at an unprecedented scale throughout communities nationwide. Throughout research on CS education and education more broadly, the disconnect between research and practice, or research and implementation, is well documented. To enhance its relevance to and for practice, research should build on existing knowledge and account for local contexts, and the engagement of research and researchers should be coordinated to facilitate their connection to practice. In offering this session at SIGCSE, we likely will move away from ""local contexts"" to larger issues; research priorities, however, often are shaped by external, funding priorities and RFPs. The knowledge forum format will allow the community to engage in a process of setting its own agenda which can later be aligned to funding opportunities. Prioritizing topics and questions for research and implementation in ways that are rooted in the needs of instruction and that draw on collective expertise is increasingly important. The proposed special session addresses this issue through a systematic and tested prioritization format. Specific objectives of the proposed session will be to: (1) introduce the topic prioritization format to participants; (2) demonstrate how the format can be used to identify and to organize research priorities among a group of experts; (3) implement the format with members of the SIGSCE community; (4) plant the seeds for potential collaborations; (5) and solicit feedback from the SIGSCE community on how to improve the format.",Special Session: CS Education Research Knowledge Forum,NA:NA:NA,2017
Helen H. Hu:Chris Mayfield:Janice L. Pearce,"POGIL (Process Oriented Guided Inquiry Learning) is a form of active learning where students work collaboratively through activities designed to guide them to discover concepts on their own. POGIL is based on the principle that students will learn and retain more when they construct their own understanding of the computer science (CS) content. Working in groups of three to four, students develop process skills, such as problem solving, communication, and teamwork. This special session will first provide SIGCSE attendees the opportunity to experience a CS POGIL activity for themselves. We will then discuss different ways that instructors might adopt POGIL for use in their classroom, and how the adoption of POGIL by multiple instructors in a department can change the culture of the department.",Special Session: Converting Your Teaching (or Even Your Whole Department!) to Active Learning via POGIL,NA:NA:NA,2017
Eileen Kraemer:Aubrey Lawson:Murali Sitaraman,"This SIGCSE special session provides an opportunity for new researchers in CS education to learn the elements of successful computing education research of different types through a series of exemplar projects. Specifically, this session reports on the findings and example, successful CS education research projects that were discussed and presented at ICER 2016 UP (Understanding and Propagating) CS Ed Research Workshop, sponsored by the National Science Foundation. One goal of the session is to provide a way for proposers of computing education research to ensure that they have well identified education research questions and evaluation mechanisms that are appropriate for the proposal (exploratory vs. design & implementation) according to the Department of Education guidelines. The ICER Workshop was designed to focus exactly on this goal and report to the community.",Special Session: ICER UP CS Ed Research Workshop Summary-Essence of Illustrative Projects,NA:NA:NA,2017
Richard E. Ladner:Matt May,NA,Teaching Accessibility,NA:NA,2017
Renée McCauley:Bill Manaris:David Heise:Cate Sheller:Jennifer Jolley:Alan Zaring,"Computing in the Arts (CITA) is an innovative, interdisciplinary curriculum model which integrates computer science and information technology with traditional art theory and practice. At the College of Charleston, implementation of an undergraduate CITA degree program resulted in an increase in the number of female and minority students pursuing computing-related degrees. [14] With the support of the National Science Foundation (DUE 1323605) and two partner institutions, we are building a community of educators who are creating innovative instructional materials that synthesize computing and the arts. Three faculty summer workshops (Wake Forest University in 2014, College of Charleston in 2015, and University of North Carolina at Asheville in 2016) involved over 70 computer science and arts faculty from across the U.S. What has emerged are various ways of synthesizing computer science and arts, including creation of new synthesis courses, modifications to traditional computing courses, development of new CITA-like curricula, design of CITA-like project experiences for undergrads, and other creative endeavors combining computer science techniques and traditional art practices and theory. During the session, we will discuss steps involved in moving forward and keeping this community growing. The session will involve audience participation, including exchanges between the session presenters and other audience members. The goal is to share our results, hear about results from other non-presenting colleagues, and to continue to grow the teaching of computer science and computational thinking to the arts and humanities masses, as well as to further enrich traditional computer science courses with creative applications, assignments, and projects.",Computing in the Arts: Curricular Innovations and Results,NA:NA:NA:NA:NA:NA,2017
Nick Parlante:Julie Zelenski:Dave Feinberg:Kunal Mishra:Josh Hug:Kevin Wayne:Michael Guerzhoy:Jackie Chi Kit Cheung:François Pitt,"I suspect that students learn more from our programming assignments than from our much sweated-over lectures, with their slide transitions, clip art, and joke attempts. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.",Nifty Assignments,NA:NA:NA:NA:NA:NA:NA:NA:NA,2017
Rebecca Vivian:Katrina Falkner:Claudia Szabo,"This special session is based around key findings of a Barbara Cail STEM Fellowship that aims to inform key stakeholders about international best practices for broadening participation and diversity in computer science. This special session provides opportunities for the audience to contribute to this research discussion and to analyse and develop strategies for their own unique contexts, in a facilitated approach using the benchmark framework and key findings.",Broadening Participation in Computer Science: Key Strategies from International Findings,NA:NA:NA,2017
Michael Ball,"While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. The demo will present a system an autograder for Snap!, a visual programming language inspired by Scratch. Our autograder is a hosted solution which would allow other courses to use our tools with little effort. At the most basic level, the autograder contains a database of questions, test cases, and a method for presenting results to students. However, there are additional features for integration through LTI and advanced data analysis. The autograder allows real-time feedback for students, and for instructors to write tests in JavaScript, and eventually Snap! directly. We will show how instructors can write test cases and integrate the tool into their classrooms. We will also demo some data analysis capabilities of our system. This demo should be informative to those working with visual programming languages, including ones other than Snap!. We hope to provide a useful tool, and gain feedback for future iterations of the software.",Writing Autograders for Snap! And Integrating them Into Your Course (Abstract Only),NA,2017
Thomas Ball:Judith Bishop:Jonathan de Halleux,"The micro:bit (http://www.microbit.org) is a pocket-sized, programmable computing device, designed to engage people with computing technology. The micro:bit is visually appealing, fun, easy to code and inexpensive. It is widely available at schools in the United Kingdom and is now being rolled out world-wide. Key features of the micro:bit that make it a great device for physical computing include a display of 25 LEDs, two programmable input buttons, a USB connector, an edge connector, built-in sensors (e.g. accelerometer, compass and temperature sensor), Bluetooth and a battery pack connector. With these physical attributes, the micro:bit can be used to interact with the world in engaging ways such as a watch, a guitar or a moisture sensor. Multi-person games and apps are possible since micro:bits can communicate with each other. Programming the micro:bit can take place on almost any device (laptop, tablet, desktop) that has a modern browser and a USB connection. The micro:bit platform supports programming in a block-based language or a safe version of JavaScript, which provides a progression for learners of different ages and experience levels. This demo will appeal to computer education researchers specializing in K-12 as well as to instructors wanting a new way to introduce computing in CS101 with a ""maker"" flavor. In the demo we will show the platform and the hardware. Attendees will have the chance to create apps on real micro:bits. It will be helpful to bring a device with a browser.",The Micro:bit: Hands-on Computing for the New Generation (Abstract Only),NA:NA:NA,2017
Austin Cory Bart:Dennis Kafura,"Introductory non-major learners face the challenge of mastering programming fundamentals while remaining sufficiently motivated to engage with the computing discipline. In particular, multi-disciplinary students struggle to find relevance in traditional computing curricula that tend to either emphasize abstract concepts, focus on entertainment (e.g., game and animation design), or rely on decontextualized settings. To address these issues, this demo introduces BlockPy, a web-based environment for Python (https://blockpy.com). The most powerful feature of BlockPy is a dual text/block view that beginners can freely move between, using advanced Mutual Language Translation techniques. The environment contextualizes introductory programming with data science by integrating real-world data including weather reports, classic book statistics, and historical crime data. A fusion of Blockly and Skulpt, the entire interface runs locally with no need for server sandboxing. BlockPy is also a platform for interactive, guided practice problems with automatic feedback that scaffolds learners. This demo will walk through the novel features of BlockPy's environment, including the instructor's perspective of creating new problems and how BlockPy can be embedded in modern LTI-compatible learning management systems. BlockPy is available online for free and is open-sourced on GitHub. This material is based on work supported by the NSF under Grants No. DGE-0822220, DUE-1444094, and DUE-1624320.",BlockPy Interactive Demo: Dual Text/Block Python Programming Environment for Guided Practice and Data Science (Abstract Only),NA:NA,2017
Brian Broll:Akos Ledeczi,"NetsBlox is a new collaborative learning environment extending Snap! with a few carefully selected abstractions that enable students to create distributed applications. In today's interconnected world, it will become increasingly important to have a basic understanding of computer networking and distributed computation yet these topics are rarely covered in K-12 curricula. Conversely, NetsBlox makes distributed programming accessible to beginner programmers using its simple yet powerful visual programming primitives, an intuitive user interface and a sophisticated cloud-based infrastructure. Moreover, the tool enables students to work together on the same project from different computers similarly to how Google Docs operate. This feature enables online collaboration and facilitates new ways to teach and learn programming. By allowing students to create multi-player games, NetsBlox provides increased motivation and is likely to prove engaging to students. By providing access to online public domain data sources, such as weather, earthquake, and air pollution data, in a unified manner, students will be able to create interesting science projects in a number of STEM fields promoting interdisciplinary learning. This technology demonstration will introduce the environment and demonstrate its utility in creating multi-player games, such as Battleship and Tic Tac Toe, as well as highlight two client-server applications that display weather and historical earthquake data, respectively, on top of an interactive Google Maps background. Audience members will be asked to participate in a massively parallel volunteer computing application doing prime factorization of large numbers. The open source public domain NetsBlox environment is accessible at http://netsblox.org.",Distributed Programming with NetsBlox is a Snap! (Abstract Only),NA:NA,2017
Jason Freeman:Brian Magerko:Doug Edwards:Lea Ikkache,"Participants of the session will discover EarSketch (https://earsketch.gatech.edu), a free, web-based learning environment that teaches introductory computer science through music. It aligns with Computer Science Principles and has been used in a variety of other educational contexts as well, ranging from late elementary through College. EarSketch provides an in-depth introduction to computer science and programming through composing, producing, and remixing music with Python and JavaScript code. No previous knowledge or experience in music, Python, or JavaScript is required to begin learning or teaching with EarSketch. Results from pilot studies show that EarSketch facilitates student learning about computation and improves student engagement in computing through parameters such as self-confidence, motivation, or intent to persist. This trend is particularly true for female and minority students, who are underrepresented today in US computer science classrooms. EarSketch comprises a curriculum, teacher materials, a coding environment, a DAW (Digital Audio Workstation), a sound database, and sharing tools. Fundamental computing concepts are introduced through curricular modules that teach how to place sounds, create rhythms, and manipulate effects, with a focus on popular genres such as hip hop and dubstep. The platform has over 77,000 users in computer science classrooms across the US and internationally. EarSketch receives funding from the National Science Foundation, the Scott Hudgens Family Foundation, the Arthur M. Blank Family Foundation, and the Google Inc. Fund of Tides Foundation.","EarSketch, a Web-application to Teach Computer Science through Music (Abstract Only)",NA:NA:NA:NA,2017
M. Muztaba Fuad,"To improve student's class experience, the use of mobile devices has been steadily increasing. However, such use of mobile learning environments in the class is mostly static in nature through content delivery or traditional quiz taking. In CS courses, we need learning environments where students can interact with the problem and faculty can assess their learning skills in real-time using problems with different degree of difficulty. To facilitate such interactive problem solving using mobile devices, a comprehensive backend system is necessary. However, such system is not available to CS instructors. To facilitate in-class interactive problem solving, a Mobile Response System (MRS) is developed, which is independent of any interactive problems or its domain. This demo session will present details of NSF funded MRS software, associated pedagogy, and how to use it in the class. MRS provides faculty with the opportunity of evidence-based teaching by allowing students with exercises with different learning outcomes and by getting an instant feedback on their performance. The formative assessment information provided by MRS allows the faculty to have real-time evidence of students' comprehension of covered lecture materials on that particular class and also helps faculty to identify the concepts that need to be repeated or reinforced. MRS is open sourced, extensible and can render interactive exercise developed by third party developer.",Interactive Problem Solving Using Mobile Devices in the Classroom (Abstract Only),NA,2017
Matthew Peveler:Jeramey Tyler:Samuel Breese:Barbara Cutler:Ana Milanova,"Submitty (http://submitty.org) is an open source programming assignment submission system from the Rensselaer Center for Open Source Software (RCOS) at Rensselaer Polytechnic Institute (RPI). Students can submit their code via a web interface in a variety of ways, where it is then tested with a highly configurable and customizable automated grader. Students receive immediate feedback from the grader, and can resubmit to correct errors as needed. Through an online interface, TAs can access detailed grading results and supplement the automated scores with manual grading (numeric and written feedback) of overall program structure, good use of comments, reasonable error checking, etc. and any non-programming components of the assignment. The instructor can also configure the system to allow for a configurable late day policy on a per assignment and per student basis. We currently use Submitty in eight different courses (spanning from introductory through advanced topics) serving over 1500 students and 35+ instructors and TAs each week. We will present a range of ""case study"" assignment configurations in a hands-on demo, going from simple through complex, using a variety of different automated grading methods including per-character and per-line output difference checkers, external unit testing frameworks (such as JUnit), memory debugging tools (Valgrind and DrMemory), code coverage (e.g., Emma), static analysis tools, and custom graders. Submitty can be customized per test case as appropriate to apply resource limits (running time, number of processes, output file size, etc.) and to display or hide from students the program output, autograding results, and testing logs.","Submitty: An Open Source, Highly-Configurable Platform for Grading of Programming Assignments (Abstract Only)",NA:NA:NA:NA:NA,2017
Andreas Stefik:Richard Ladner,"Quorum is a relatively new programming language that was originally designed for students with disabilities. In recent years, as its adoption has increased worldwide in K-12 (largely in middle/high school) and at universities, it has expanded to be a powerful, commercial-grade, programming language that includes support for 3D gaming, music, and other fun and creative activities. While new features are designed for all, they maintain compatibility for people with disabilities, including a novel way for individuals who are blind to create 3D games. Finally, Quorum is the first language to use human-factors evidence from both field data and randomized controlled trials in its design. This approach provides the broader research community an organized way to influence the design of the language over time according to evidence based practices. We call this approach evidence-oriented programming. A laptop would help participants follow along with the session and handouts will be provided. Quorum can be found at https://www.quorumlanguage.com/.",The Quorum Programming Language (Abstract Only),NA:NA,2017
Alice Steinglass:Baker Franke:Sarah Filman,"App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. This demonstration aims to give a brief overview of App Lab and its purpose and then move quickly into demonstrating the more advanced features of App Lab that few people know are even there! The audience should come away with knowledge and access to exemplars that highlight App lab's possibilities, and see some of its richer features in action. Finally we will end with a discussion about how best to integrate App Lab into existing courses. App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net.",App Lab: A Powerful JavaScript IDE for Rapid Prototyping of Small Data-backed Web Applications (Abstract Only),NA:NA:NA,2017
Eric Walker:Julia Connelly:David Musicant,"Version control systems are crucial tools for computer scientists, and the need for students to be fluent in them is well-recognized. However, Git and other version control systems (VCSs) are difficult to learn and use. Elegit is a new Git client that we created to help students learn how Git works while using it. Our approach is different from other GUI Git clients in that our key goals are not only to help students successfully use Git, but equally importantly to help students learn about how Git works in its own native way. We preserve standard Git terminology wherever possible, and place a high priority on not modifying the standard Git model. Simultaneously, we strive to make Elegit easy for beginners to use. This demo provides a brief tutorial on using Elegit, discussion on the process of designing the tool to do this, evaluation of the effectiveness of the tool, and improvements made based on this evaluation and our own learning of Git while developing the application. Information about Elegit can be found at http://elegit.org. This work is supported by a SIGCSE Special Projects Grant, and by Carleton College.",Elegit: Git Learning Tool for Students (Abstract Only),NA:NA:NA,2017
Julia Bernd:Jonathan Corley,"One of the most innovative features of the new AP Computer Science Principles course framework is that it includes the Global Impact of Computing-not just as an occasional flourish, but as one of its foundational Big Ideas (#7). The real-world impact of computing-on society and on their own lives-is a great hook that can stimulate students' lasting interest in computer science, whether in CSP or any other CS class. Teach Global Impact is a collaborative effort among leading computer science educators that leverages seven excellent CSP curricula and PD programs. (BJC, CISS, Code.org CSP, CS Matters, CSP CS4HS, Mobile CSP, and UTeach CSP.) These curricula are contributing activities that highlight the potential impacts of big data, multimedia, artificial intelligence, and Internet connectivity, among other things. We are working to bring together all of these existing Global Impact lesson materials into a unified resource, and to fill in any gaps by creating new materials, along with classroom strategy guides for teaching about impact. This lightning talk will introduce teachers to the resources available on the Teach Global Impact website, including a database of existing materials, new activities and strategy guides, and a Computing in the News feed featuring student-curated stories aligned with CSP learning objectives. We'll also talk about new activities in the works, including classroom simulations around net neutrality and encryption ethics, a lesson plan on online research and writing for CS, and a series of videos illustrating key essential knowledge points.",Teach Global Impact: A Resource for CSP (or Any CS Class!) (Abstract Only),NA:NA,2017
Brian Broll:Akos Ledeczi,"Visual programming environments have been effective educational resources but are typically limited to a single user at a time. Given the amount of collaboration in modern software development and the value of group projects for beginner programmers, providing collaboration capabilities could be invaluable for students using a block-based programming environment. Online collaboration support would not only allow students to more actively work together on projects but would also facilitate other educational activities such as tutoring and interactive demos. Moreover, providing robust collaboration utilities allows the programming environment to more closely reflect the team-based nature of large scale, real-world programming projects. Note that collaborative editing offers a number of additional benefits under the hood: the same underlying software code can easily provide detailed logging of student actions and the capability to replay them. That is, researchers will be able to study how students solve problems and not just the end result. To this end, we have extended the Snap! visual programming environment to support real-time collaboration similar to Google Docs. In our model of collaboration, sprites and scripts can be edited by multiple users simultaneously, but the execution of the programs on the stage remains local. But is this the best collaboration model for students? If not, what alternative model would be better? Should the entire programming environment be synchronized across collaborators? Would simple screen sharing be more effective? Finally, how can we leverage a real-time collaborative environment to promote teamwork on programming projects?",Bringing Real-Time Collaboration to Visual Programming (Abstract Only),NA:NA,2017
Douglas H. Fisher,"Course syllabi, exercises, assignments, and project specifications are creative acts of design. But there are no conventions for citing such works, as one would cite a research paper or patent. There are several potentially important reasons for establishing conventions for citing educational content, and thus tracking their diffusion and influence. (1) Design of courseware is at least as important to teaching as is delivering lectures and grading assessments. If citation conventions were established, then the degree of adoption by others could be part of a teaching-faculty member's professional evaluation. (2) Research grants often include education and outreach plans, and being able to track the influence of materials under such plans would be valuable for funding agencies and principal investigators. (3) Establishing citation conventions may raise consciousness about citing any and all creative works that an instructor uses, particularly when we want our students to embrace citation best practices. After all, what most undergraduates will see of the scholarship modeled by faculty will be through teaching. (4) Conferences like SIGCSE are increasingly competitive, and publishing a paper that reports on educational material, thereby enabling ""conventional citation"" may be difficult. But we still want to cite and track uptake of the educational material. This lightning talk argues that citation conventions be adapted for educational materials, and describes a sample convention. The goal of the lightening talk is to gauge interest and solicit collaborators.",Establishing Conventions for Citing Educational Materials (Abstract Only),NA,2017
Patty Hicks,"Research shows that middle school is the optimum time to introduce coding and computer science concepts. According to research from Accenture and Girls Who Code, computing appeal for girls peaks in middle school, where having an inspiring teacher and thinking that coding is ""for girls"" are instrumental in sparking interest. Middle schools tend to have electives where coding classes can find a home. But how do you convince the teachers that this change in academic focus is in the best interests of the students? And how do you prepare them to teach a content that they do not know and might not agree with? I haven't seen advice or research on how to overcome teacher resistance to computer science and coding. In 2013 an 8th grade elective was converted into a coding and computer science concepts course. Several of the business education endorsed teachers continue to push for less coding and more productivity tools in this course. Teachers with the Computer Science endorsement provided research, student interest surveys and employment outlooks to these teachers but they did not budge. Enrollment in the coding class has doubled and tripled in many of the schools, but a number of the teachers are still not enthusiastic about the course and the content. What could we have done differently to help these teachers accept change? Build a foundation for change -- Share current research on the importance of introducing coding and computer science. Build Community -- Look to local colleges for mentoring and co-teaching possibilities. Build Relationships -- Strengthen the connections between teachers and administrators.",Moving From Business Education to Computer Science Concepts in the Middle Grades (Abstract Only),NA,2017
Megan Lawrence:Mary Bellard,"This lightning talk will introduce Teach Access (www.teachaccess.org) an initiative comprised of technology industry professionals and educators working together to make accessibility foundational to higher education degrees. Technology companies dedicated to accessibility have faced the common challenge of hiring designers, engineers and researchers with accessibility knowledge/experience that are prepared to build inclusive products and services. Similarly, academic programs in design, engineering and HCI are seeking ways to better prepare students for jobs in industry that require them to address accessibility and the needs of society's diverse populations. Given this shared challenge, industry, academia and advocacy have come together through the Teach Access initiative to create new models for teaching and training students of technology to create accessible experiences. Teach Access membership includes companies such as Google, Facebook, Microsoft, Yahoo and several other tech leaders, as well as leading academic institutions like the University of Washington, Stanford, MIT, CMU, the Cal State System and more. Teach Access has successfully launched an accessibility tutorial for public consumption as well as submitting comments to ABET addressing the inclusion of accessibility in accreditation. Our participation in SIGCES is important to evangelize our efforts and build a cohesive community between industry and education.",Teach Access: Preparing Computing Students for Industry (Abstract Only),NA:NA,2017
John MacCormick,"Computational and complexity theory are core components of the computer science curriculum, and in the vast majority of cases they are taught using decision problems as the main paradigm. For experienced practitioners, decision problems are the best tool. But for undergraduates encountering the material for the first time, non-decision problems (such as optimization problems and search problems) may be preferable. This lightning talk will give a brief pointer to some new technical definitions and pedagogical strategies that have been used successfully for teaching the theory course using non-decision problems as the central concept. For example, instead of the familiar complexity classes P and NP, we can define analogous classes of non-decision problems, Poly and NPoly. The key question behind this lightning talk is to ask whether the new definitions and strategies are actually beneficial. Anecdotal evidence and certain theories of learning suggest the new approach should result in superior learning outcomes for students. We are seeking ideas, feedback, and collaborators interested in investigating this hypothesis and obtaining stronger evidence for it. To summarize, our central question is: how can we investigate whether students gain a superior grasp of computational and complexity theory when they are taught primarily using non-decision problems?",Seeking Evidence for Basing the CS Theory Course on Non-decision Problems (Abstract Only),NA,2017
Anurag Nagar,"This lightning talk will focus on our experience of developing and managing large undergraduate and graduate Big Data courses. The demand for trained professionals in the field of Big Data technologies is huge, and there is urgent need to develop and update courses in this area. One of the biggest hurdles for many schools is establishment, maintenance, and constant update of high performance computing infrastructure. Further, the technology landscape for Big Data is constantly evolving, and newer technologies, such as Apache Spark, require significant expenditure to set up and upgrade at the cluster level. Traditional infrastructure at most higher educational institutions is insufficient for this, and is also not able to scale up to meet the expectations of large class sizes and multiple simultaneous sessions. In this lightening talk, we will share our experience of running large undergraduate and graduate Big Data courses using open source infrastructure. Some of this infrastructure is cloud based, while others require students to create virtualized environment on their personal computers. Both types of resources are freely available, easy to setup, and provide students with enough computational power to run most academic tasks and projects. We will provide specific examples of using such technologies for common tasks, such as setting up a distributed file system, running MapReduce algorithms on large datasets, performing large scale machine learning and graph mining using Apache Spark, and maintaining a high availability Cassandra instance.",Developing Big Data Curriculum with Open Source Infrastructure (Abstract Only),NA,2017
Saty Raghavachary,"Starting Fall 2016, the CS department at USC has begun offering CS100: Explorations in Computing, a brand new General Education (GE) course. The course is only open to non-CS majors (since our CS students go through a CS-specific introductory track that encompasses the CS100 material). The class has 24 students, from a variety of disciplines such as Communications, Business Administration and Theatrical Arts. The course presents a broad overview of computational/algorithmic problem-solving techniques that form the basis of today's digital society. It provides students, a strong foundation for understanding how everyday activities such as web searching, communicating via social media, playing games, booking a ride, etc., work ""behind the scenes"". The course's intent is to promote computational thinking, as put forth by Jeannette Wing and others. In designing the course, the following aspects were kept in mind: the course is formulated as a GE, for a non-CS audience - so it cannot be heavy on coding; the topics need to involve some form of computational/algorithmic approach; the topics need to have a connection with things that students do with their digital devices (eg. play games, send instant messages, order things..); the topics have to grab the students' attention (keeping in mind that they grew up with tablets, the Web, animated movies and videogames). To that end, the topics are grouped under the following headings: Media Computing, Recreational Math, Algorithmic Art, Social Media and Data.",Curriculum Design for 'Explorations in Computing' (a New General Education Course at USC) (Abstract Only),NA,2017
Joel Ross:Andrew J. Ko:David L. Stearns,"Ensuring that software systems are accessible to users with disabilities is historically neglected but increasingly important for professional software developers. It is imperative that students are familiar with accessible practices to support this often-overlooked form of diversity. We suggest that including accessibility topics when teaching user-interface development skills is a low-effort task that can directly support teaching core software development principles such as ""separation of concerns"" and ""standards compliance."" In this lightning talk we describe our initial efforts to integrate accessibility and accessible design as ""first-class"" topics into our department's required course on web development, including specific examples of concepts covered, classroom activities, and assignments. We also discuss suggestions for how to potentially integrate accessibility topics into other computer science courses which include any kinds of front-end user interfaces. The goal of this talk is to promote awareness of accessibility concerns, demonstrate the ease by which educators can include such material, and encourage discussion about how to engage students in such diversity considerations throughout the curriculum.",Accessibility as a First-Class Concern in Teaching GUIs and Software Engineering (Abstract Only),NA:NA:NA,2017
Kendra Walther,"Coming up with quality, representative, fair exam questions can be difficult. This lightning talk explores one faculty member's eureka moment to have students generate their own exam questions. This approach was tried in a 300-level cross-listed Computer Science/Information Technology course entitled ""Programming Graphical User Interfaces."" Students were asked to generate at least one question in each of a variety of categories (multiple choice, true/false, short-answer, and coding questions). Five points of the exam (out of 100) was assigned to the students based on their submitted questions. Students were told that if they had a reasonable distribution of quality questions across all course topics, the test would pull entirely from their exam questions. Students used a Google Form to submit questions and to rate how ""good"" they thought their questions were. The student-submitted questions yielded a 22-page comprehensive study guide, and, at least in this first instance, a solid, representative, and fair exam.",Class-Sourcing Exams: Student-Generated Exam Questions (Abstract Only),NA,2017
Dee A.B. Weikle,"POGIL (Process Oriented Guided Inquiry Learning) is a flipped classroom, problem-based learning technique for teaching students content through carefully designed questions that they work through in teams with well-defined roles. This technique enables students to retain content while also learning process skills such as communication and teamwork. Developing POGIL activities and facilitating them takes practice and experience. Few, if any, current faculty have been taught using POGIL activities and so have less experience to bring to their development and especially to their incorporation into the classroom. The skills and preparation for delivering an effective POGIL class are very different than faculty have seen in action. The 5 practices: Anticipating, Monitoring, Selecting, Sequencing, and Connecting can be used to better understand how to prepare for and facilitate POGIL activities. While the POGIL organization (pogil.org) has many training sessions, including facilitator training available, most computer science materials still do not incorporate facilitator information that goes beyond the answers to the questions and suggested timing for sections of activities. A brief example of an activity prepared using the 5 practices will be shared to illustrate the potential along with anecdotes and tips for transitioning from traditional lecture to POGIL activities in the classroom.",Using the 5 Practices to Improve Facilitation of POGIL Activities (Abstract Only),NA,2017
Chen-Hsiang Yu,"Learning one domain knowledge is good for undergraduate students to face existing job market, but it might not be enough for the future career challenges. At Wentworth Institute of Technology (WIT), we are promoting Externally-collaborative, Project-based, Interdisciplinary Curricula (EPIC) learning that provides opportunities to work on interdisciplinary projects for the students. In this talk, I would like to share experience of designing and teaching an EPIC course by applying mobile application development to biomedical domain for creating a mobile health system at WIT. The students from two different departments, Computer Science and Networking and Biomedical Engineering, learn together and work collaboratively on a final project. The lessons learned from this process include: (1) How to find appropriate disciplines to make a course? (2) How to design a syllabus for students with different backgrounds? (3) How to design lectures and laboratory assignments for the collaboration? (4) How to guide students to work on the project collaboratively? etc. At the end of the talk, I will conclude my experience with suggestions and describe the future work in this direction.",Lessons learned from an EPIC course: Mobile Application Development for Mobile Health (Abstract Only),NA,2017
Carl Alphonce:Jacob Condello:Bina Ramamurthy:Simran Singh,"Computer programming is a process. Successful programming involves incrementally building and testing a solution. Students' ability to program is typically determined by an assessment of the end-product of a programming session rather than an examination of the actual process students are engaged in. A prerequisite to assessing a student's programming process is having access to that process. While direct one-on-one observation of students while they code has the potential to yield high-quality data, it does not scale well to large classes. One scalable approach is to automatically capture edit events through IDE instrumentation, and programmatically assess the resulting data. In this poster we report on our work to date in developing and deploying a plug-in for Eclipse's Java Development Tools (JDT), explore the data we have collected to date, compare our results with those reported in previous work, and discuss possible directions for future work in using this data for assessment of students' programming process.","Building Tools, Gathering Data: Precursors for Assessing Students' Programming Process (Abstract Only)",NA:NA:NA:NA,2017
Sam Andow:Kaitlyn Eng:Julia McCarthy:Olivia Palenscar:Thomas Schneider:Adam Schulze:Zachary Dodds:Bryan Twarek,"In 2015-16, San Francisco Unified School District (SFUSD) piloted MyCS, a Middle-years CS curriculum, in half of its middle schools. This unexpected launch led naturally to diverging curricular branches: one that evolved within the district, another used by schools with the program already in place. The summer after the pilot, SFUSD's and MyCS's stewards convened for a week of feedback, PD, and planning. This poster highlights the curricular refinements, preliminary assessment results, and institutional changes that came from this curricular divergence and subsequent reconciliation. The data analyzed include teacher- and district-feedback, along with an analysis of student responses from SF's pilot implementation. Though accidental, this experiment suggests that substantial benefit can come from independently co-evolving (branching) and then reconciling (merging) curricula. When merged, those otherwise independent branches create a community both stronger and more invested for all of its stakeholders.",Merging MyCS: Lessons from a District-wide Middle-school CS pilot (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA,2017
Michael Ball,"While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language inspired by Scratch. We demonstrate how we integrated our autograder into UC Berkeley's CS10 and compare student success of autograded lab assessments to oral lab check offs. We demonstrate how we offered real-time feedback to a course of 300 students, and how we integrated our tools into an edX MOOC with 15,000 students. Our autograder is a hosted solution which would allow other courses to use our tools with little effort.","Implementing ""In-Lab"" Autograding for Snap! (Abstract Only)",NA,2017
Marie Bienkowski:Eric Snow,"Education researchers have extensively studied how secondary teachers adopt and adapt new curriculum and new teaching practices, especially in science and mathematics. Their goals are often to learn ways to help teachers enact new pedagogical approaches, so the results inform teacher professional development, as well as building knowledge in the field. Changing teaching practice often involves changes across a number of fronts: for example, inquiry-based teaching of science involves skills in developing questions, supporting student whole-class discussion and sense-making, and allowing students time to investigate authentic problems. Research is now underway to discover ways to similarly help teachers in K-12 computer science (CS). K-12 CS curricula have emphasized inquiry- and equity-focused teaching practices as ways to engage and include students while simultaneously deepening students? understanding of CS concepts and practices. While researchers have focused on measuring student attitudes to discern engagement and feelings of inclusivity, less work has been done on how implementation affects student learning. To study this, CS education researchers need frameworks and instruments to measure implementation, attitudes, and learning. We are developing and validating instruments that support mixed-methods study of curriculum enactment and teaching quality, with a focus on inquiry, equity, and computational thinking practices. This poster will present preliminary results from a large-scale study of implementation in secondary CS classrooms to build a more systematic understanding of evolving practices in measuring curriculum enactment and teaching quality.",Studying Implementation of Secondary Introductory Computer Science: Pilot Results (Abstract Only),NA:NA,2017
Samuel Breese:Ana Milanova:Barbara Cutler,"Student experience in introductory computer science classes can be enhanced by applying static analysis techniques to automatically grade assignments. At Rensselaer Polytechnic Institute (RPI), introductory computer science classes (using Python) exceed 650 students in size. As resources are limited, it is infeasible to have teaching staff individually examine each student's answer for small in-lecture exercises; however, qualitative data regarding student code independent from execution is still valuable (and in some cases required) to assess progress. When static analysis utilities were made available to instructors and integrated with automatic assignment testing, instructors were able to judge student performance and provide feedback at a scale that would otherwise be infeasible. There are clear advantages to applying static analysis techniques in comparison to less sophisticated methods (e.g. regular-expression based search). For one, students are unable to subvert grading by placing certain keywords within comments or string literals. Static analysis can also be applied to easily grade students on patterns that would be nontrivial to detect using a more naive method, for example in enforcing a rule that all member variables of a C++ class must be private, or verifying that a function takes the appropriate number and type of arguments.",Using Static Analysis for Automated Assignment Grading in Introductory Programming Classes (Abstract Only),NA:NA:NA,2017
Frisque Brennen:Ankur Chattopadhyay,"Social construction based learning approaches have been employed in computing education, but none of them has actually evaluated the effectiveness of the student reflection mechanism, which plays a key role in the learner's assimilation and accommodation process that builds upon the student's existing knowledge as part of the action learning within these approaches. Adapting the inquiry based knowledge building of the social construction model, this poster presents a process of student reflection that uses a unique, non-traditional method of interactive question-answer dialogue for engaging CS1 and CS2 students in a reflective assessment before the actual action learning cycle begins. This process of reflection helps students analyze their conceptual understandings and identify problems or limitations within their respective cognitive models prior to the actual process of knowledge refining or creation. In order to ensure that students have successfully reflected upon their conceptual beliefs, a software tool based assessment is then carried out. The answers from the social interaction based reflective assessment are compared with the results obtained through the software based traditional assessment in order to validate the student reflection process in the form of a social construction based epistemology. This research experiment also presents an authentic and relevant problem basis in the form of conceptual gaps for students to address within the action learning pedagogy of social construction. Results from the conducted comparative analysis in this case study show encouraging evidences confirming the validity of student comprehensions and assumptions by evaluating the knowledge discovery process through an epistemic investigation.",Can We Conduct A Social Construction Based Epistemology for CS1 and CS2 Students? (Abstract Only),NA:NA,2017
Quinn Burke:Madeleine Schep:Travis Dalton,"The goal of the CS for SC Landscape Report is to examine the current state of computing education on the K-12 level within the state of South Carolina. Building off of the 2007 South Carolina's Computing Competitiveness Report, the report more fully examines the fundamental questions of who? what? and where? in terms how computer science education has developed in the state over the past nine years. Results are reported in this poster based on a survey of 158 K-12 educators and ten follow-up interviews with leading computing teachers and program administrators from around the state. This research is funded through a generous grant through the National Science Foundation Broadening Participation in Computing Alliance (NSF Award No. 1228352, 1228355) administered through Expanding Computing Education Pathways (ECEP).",CS for SC: A Landscape Report of K-12 Computer Science in South Carolina (Abstract Only),NA:NA:NA,2017
Jeffrey Bush:Susan Miller,"Previous experience correlates to student retention in computer science at the secondary and undergraduate levels, it's impact in middle school is less well understood. Previous research findings from a University of Colorado large scale survey of students' conceptions of computer science have shown that there is a pervasive gender gap in middle school student confidence and interest in computer science. This study conducts a follow up investigation, analyzing data from fall 2014 to spring 2016 (n=6,128), using multiple regression analysis to investigate how student responses to motivational items concerning both confidence and interest vary by gender, previous experience with computer science, minority status, and having a computer at home (a proxy for privilege). Results show statistically significant associations (p<0.001) between the both outcomes (confidence and interest) and each of the four predictors. Gender had the largest association with each outcome. Students with previous experience with computer science also report higher confidence. This is equivalent in size to the higher confidence associated with having a computer at home and twice the higher confidence associated with being non-minority. For interest, previous experience associations were smaller but still significant. These findings imply that previous experience with computer science at the middle school level help to reduce the motivational differences by gender, privilege, and ethnicity.","Analysis of Associations between Motivation and Previous Computer Science Experience, Gender, Ethnicity and Privilege as Observed in a Large Scale Survey of Middle School Students (Abstract Only)",NA:NA,2017
Christa Cody:Behrooz Mostafavi,"We have been incrementally adding data-driven methods into the Deep Thought logic tutor for the purpose of creating a fully data-driven intelligent tutoring system. Our previous research has shown that the addition of data-driven hints, worked examples, and problem assignment can improve student performance and retention in the tutor. In this study, we investigate the influences two unsolicited hint types have on students' ability to complete the tutor. We have used data collected from two test conditions: one with unsolicited next step hints (NSH) presenting the immediate next step of a logic proof to a student's current proof-solving state, and the other with unsolicited subgoal hints (SGH) presenting a step of a logic proof two or three steps of the student's current state. Our results show that students who received unsolicited SGH had more interactions within the tutor and skipped more problems. Furthermore, the SGH group had a significantly higher dropout percentage. These results suggest that hint types can affect student behavior and the ability to learn the material. Therefore, determining what type of hint to give during problem solving is important to the learning process and should be taken into consideration when designing an intelligent tutoring system (ITS). Future work will include using historical student data to determine the best hint type to give a student by analyzing student behavior and identifying the most effective hint type for the behavior being exhibited.",Investigating the Impact of Unsolicited Next-Step and Subgoal Hints on Dropout in a Logic Proof Tutor (Abstract Only),NA:NA,2017
Sayamindu Dasgupta:Benjamin Mako Hill,"Quantitative studies of learning using block-based programming languages in informal environments have relied on identifying the presence or absence of individual visual blocks in learners' projects. Many important programming concepts (e.g., initializing a variable) involve the combination of several blocks. In this poster, we present a technique that uses a statistical method from epidemiology called ""survival analysis"" to model the rate at which programmers begin to use new code patterns. By analyzing data drawn from the trajectories of over 90,000 users from the Scratch online community, we demonstrate the potential of our approach. In particular, we model when users are at higher and lower levels of ""risk"" of demonstrating two particular code patterns -- variable initialization and counting collisions. We show that learning of these patterns is associated with behaviors like viewing the source code of other projects, remixing, and commenting. We explain how our method can be extended to help understand predictors of skill acquisition in informal environments more generally and how it can inform the design of more effective learning support structures.",Measuring Learning of Code Patterns in Informal Learning Environments (Abstract Only),NA:NA,2017
Debzani Deb,"Big data and cloud computing (BDCloud) collectively offer a paradigm shift in the way businesses are now acquiring, using and managing information technology. With the fast growth of this paradigm, we argue that each and every CS and IT students should be equipped with foundation knowledge in this collective paradigm and should possess hand-on-experiences in managing big data applications in clouds to acquire skills that are necessary to meet current and future industry demands. This poster presents our research that proposes gradual and systematic integration of big data and cloud computing related topics into multiple core (required) courses of CS/IT curriculum. The poster, supported by a NSF grant, will be useful for CS/IT students and their instructors as it identifies big data and cloud computing related topics that are important to cover, finds a sequence of the prescribed topics that can be incorporated into existing core courses most effectively, and suggests specific core courses in which their coverage might find an appropriate context. The poster further identifies the major challenges this proposed intervention may encounter and provides a deeper analysis of them. Finally, the poster describes our experience of implementing one such course with proposed interventions during Fall of 2016 semester. The pre- post- test results that measure student opinion and understanding of big data and cloud computing topics are presented in the poster and demonstrate improved student interest and learning.",On the Integration of Big Data and Cloud Computing Topics (Abstract Only),NA,2017
Yuli Deng:Dijiang Huang:Chun-Jen Chung,"Personalized learning is often referred to a new learning approach by taking individual parameters such as learning preferences, abilities, skills and knowledge into account. In this poster, we present a personalized learning solution for computer networks, system, and cybersecurity focusing on hands-on projects. The personalized learning models are established in ThoTh Lab - a cloud-based hands-on virtual laboratory for Computer Science (CS) education. ThoTh Lab is a remote web-accessing virtual laboratory and it was originally designed to reduce lab management overhead for instructors and improve learning experience for CS students. By introducing new personalized learning capabilities, we can transfer ThoTh Lab from a traditional hands-on lab resource provisioning system to an active personalized e-learning platform for CS education. The system can track and assess students' hands-on projects' activities to monitor students' lab performance, and then provide intelligent suggestions or resources to improve students' learning experience and outcomes. Our personalized learning framework is distinguished from existing approaches by three salient features: (1) it is built into a hands-on and virtualized laboratory environment usually involving multiple virtual computers and their interconnections, (2) it has incorporated into a wide range of learners' characteristics such as individuals' learning style, prior knowledge and learning effectiveness, and it is designed to be able to include new and customizable features, (3) it uses machine learning approaches to model student characteristics during the learning process.",ThoTh Lab: A Personalized Learning Framework for CS Hands-on Projects (Abstract Only),NA:NA:NA,2017
Anita DeWitt:Julia Fay:Madeleine Goldman:Eleanor Nicolson:Linda Oyolu:Lukas Resch:Jovan Martinez Saldaña:Soulideth Sounalath:Tyler Williams:Kathryn Yetter:Elizabeth Zak:Narren Brown:Samuel A. Rebelsky,"In attempts to broaden participation in computing, the computer science education community has developed a wide variety of outreach activities to encourage students of different ages to learn computational thinking techniques and to develop an interest in computer science. In their recent surveys of the CSed literature, Decker, McGill, and Settle identify over eighty papers on K-12 outreach activities, of which approximately forty address middle-school coding camps. However, summer coding camps are offered by a much wider variety of organizations than computer science educators committed to diversifying the field. Some are offered by organizations committed to diversity, such as Black Girls Code and Girls Who Code. Others are offered by universities for recruitment, and necessarily to support diversification. Still others are offered by for-profit entities. What are the relationships between the two models of camp? Do the ideas that appear in the research literature filter out to the more mainstream camps, or do the more mainstream camps provide a very different model of computer science? In this project, we reviewed both the computer science education literature (52 sources representing 45 camps) and summer code camps identified on the World-Wide Web (480 different camps). In this poster, we report on common approaches and themes that others may choose to adapt or adopt. We also explore significant differences between the research-centered camps and the mainstream camps in approach, language, and apparent outreach goals.",What We Say vs. What They Do: A Comparison of Middle-School Coding Camps in the CS Education Literature and Mainstream Coding Camps (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2017
Jean French:Hailey Crouse,"It is well-known that females are underrepresented in STEM fields -- especially in the computing sciences. Bias, stereotypes, and negative experiences can be realized early in a girl's life. Research suggests that early intervention is necessary to encourage female participation in the computing sciences as a possible educational and career choice. While there are many catalysts that attribute to low interest and participation of females in computing, this research addresses five known causes: a lack of exposure to computing at a young age, a shortage of positive role models in the field, negative stereotypes, unappealing approaches to learning computing, and uncomfortable learning environments. In this research, Pre-K girls, as early as four years of age, were introduced to eight computer-related games and activities. The girls learned about algorithms, computer programming, circuits, and robots in a hands-on, exploratory environment. Age-appropriate surveys were conducted to compare the girls' affinity towards the computer-related activities before and after the study. The results of the study are encouraging as the girls demonstrated increased positive attitudes towards computer-based activities after participating in the study. In addition, the results of the study also demonstrated that the participating girls were able to successfully learn computing concepts at a young age. The presentation of the study will be accompanied by a hand-out including descriptions of the activities and associated equipment for those who would like to explore the topics independently. The presenters will also demonstrate a few of the more portable activities used in the study.",Early Intervention to Enhance Female Interest in Computing Sciences (Abstract Only),NA:NA,2017
Kinnis Gosha:Kamal Middlebrook,"Research suggests that the African American population is continuously growing in America, yet African Americans are disproportionately represented when it comes to undergraduate and graduate degrees and careers in computing. Embodied conversational agents (ECAs) have been developed as tools to disseminate information about various jobs in computing. The ECAs used in this study are African American men and women in those fields. This paper is about a pilot study conducted at Morehouse College in Atlanta, Georgia to assess user satisfaction and effectiveness of the website which houses those ECAs. Twenty-two male undergraduates who were pursuing a degree in computer science participated in a study where they engaged the ECAs to learn more about various computing careers. Those individuals who participated in the study said that the tool was easy to use and that they will consider a career in computing in the future. This pilot study will be used to conduct another study that will focus on African American, male and female high school students and individuals interested in obtaining a graduate degree and/or career in computing. The study's limitation is that there is no control group to compare the results with. Future work will include groups who will either interact with disembodied agents, agents that are presented as Caucasian, or a collection of agents who are more demographically diverse instead of trying to match the demographics of the target audience.",Broadening Participation Research Project: Exploring Computing Careers through a Virtual Career Exploration Fair Using Embodied Conversational Agents (Abstract Only),NA:NA,2017
Kathleen Haynie:Jeff Gray:Sheryl Packman:Carol Crawford:Mary Boehm:Jonathan Corley,"This poster describes how this project has induced teacher preparation and broadened student participation in Computer Science Principles throughout Alabama from 2013-2016. We will describe our professional development (PD) model, gain for participating instructors, results of CS Principles course implementations, and student engagement and outcomes. A statewide and scalable ""Teacher Leader"" model of professional development was implemented throughout the project. In person training was coupled with on-line course content, geographically proximal teacher groups, and periodic teacher hangouts. Teachers in each cohort collaborated together on developing course content and pedagogy, fostered by peer leaders from earlier cohorts. Instructors encouraged and engaged their students; student agreed that the learning environments supported diversity. Students gained significantly in core computer science content (i.e., abstraction and algorithms) as well as computational thinking practices. Female students showed robust gains on a number of indicators (including higher course grades than males); under-represented minority students showed positive gains in content knowledge. The majority of students said they were likely or possibly likely to pursue computer science in college, and that taking CS Principles impacted their decisions.",A Final Project Report on CS4Alabama: A Statewide Professional Development Initiative for CS Principles (Abstract Only),NA:NA:NA:NA:NA:NA,2017
David Hovemeyer:Arto Hellas:Andrew Petersen:Jaime Spacco,"Recent years have seen increasing interest in using programming snapshot data for education research. One barrier to such research, especially for studies involving data from multiple institutions, is that the data is in a wide variety of native formats, and those formats may not be conducive to automated analysis. To overcome this barrier, we propose a structured data model and archival data format called Progsnap (https://cloudcoderdotorg.github.io/progsnap-spec/). Progsnap is designed to be a neutral export format, is currently supported by two open-source programming exercise systems, and we believe will be an easy target for data export from other systems. An open source Python library makes it easy to automate analysis of Progsnap datasets.",Progsnap: Sharing Programming Snapshots for Research (Abstract Only),NA:NA:NA:NA,2017
Aleata Hubbard:Yvonne Kao,"Educators, researchers, politicians, tech companies, and others continue to advocate for the importance of K-12 students learning computer science in our increasingly tech-driven society. One way school districts in the United States address this growing demand is by allowing teachers certified in other disciplines to lead computer science courses. Summer and weekend professional development opportunities support these educators in developing the expertise needed for effective computer science teaching, but a great portion of their learning to teach computer science will occur through on-the-job experiences. Our four-year NSF EHR grant explores how a job-embedded professional development program that pairs high school teachers with tech industry professionals supports educators in acquiring computer science teaching knowledge. The research presented in this poster focuses on the third year of the study and includes (a) a theoretical component focused on creating a framework to explain on-the-job computer science teaching knowledge development based on case studies with six teachers, and (b) an empirical component focused on the creation and administration of a computer science teaching knowledge assessment. By the time of the SIGCSE symposium, we expect to have pre-test results from the first administration of our teaching knowledge assessment, completed by both high school teachers and their collaborating tech industry professionals. This poster will present our theoretical framework, resultant teaching knowledge assessment with sample items, and analysis of participants' assessment responses and their relationship to specific teaching experiences.",Computer Science Teaching Knowledge: A Framework and Assessment (Abstract Only),NA:NA,2017
Sarah Hug:Enrico Pontelli:Raena Cota:Suzanne Eyerman,"This poster highlights a sociocultural analysis of a multifaceted K12 outreach program at New Mexico State University, a Hispanic Serving Institution that has had success recruiting local young women into the computer science department and beyond into the computing workforce. YWiC began in 2006 and has become a rich, extensive outreach program, reaching over 10,200 students across southern New Mexico. Over the years, YWiC has produced strong evaluation results related to computer science knowledge gains and computing interest (see Nesiba, et. Al 2015). The social scientists used Lave and Wenger's (1991) community of practice concept to analyze program design and implementation. Findings show four ways in which the program promotes individual agency, belonging to the local and global computing communities, and ""positioning"" (Davies and Harre, 1990) of young women as competent computer scientists. Specifically, YWiC: a) makes multiple pathways into computing education and computer science careers via intentional role modeling, b) provides common base knowledge through initial experiences and deep support from multiple role models, c) gives opportunities for young women to identify, and be identified by others as, competent in computing, and d) promotes belonging to a group of like-minded girls with multiple interests.",Learning and Identity in YWIC: An Analysis of Program Implementation and Design as Promoting Agency in Computing (Abstract Only),NA:NA:NA:NA,2017
Keith Irwin:Darina Dicheva:Christo Dichev,"There is good evidence that students learn better when given more opportunity to practice skills using related problems. However, this requires a sufficient supply of automatically graded problems to enable instant feedback. This can be achieved through automating the process of problem generation. While a few dynamic problem generation systems exist, they are either very specific to a single topic (such as tools for automatic generation of parameterized questions for Java or C programming or they are intended for other disciplines and not easily adapted to the needs of Computer Science. We have developed a prototype system for authoring, administering, and grading dynamic problems. This system is specifically designed for computer science. To this end, it supports complex logic, calling external programs such as compilers or databases, and the creation and manipulation of figures and diagrams. Problems and useful code libraries can be created and shared between instructors. It is a web-based system where instructors can specify problems by combining static text or images with bits of Lua code which add dynamism. When students use the system, their answers will be graded automatically, and they will be able to see the results, thus giving them quicker feedback. This is an integrated portion of a larger gamified learning platform called OneUp which is under development and aims to combine hands-on practicing with additional game-like motivational mechanisms. The goal of both the larger platform and the dynamic problems in specific is to increase student engagement in the learning process.",Open Extensible System for Dynamic Problem Creation for Computer Science (Abstract Only),NA:NA:NA,2017
Ryosuke Ishizue:Kazunori Sakamoto:Hironori Washizaki:Yoshiaki Fukazawa,"The concept of memory management in C programming language is particularly challenging for novice programmers. Consequently, many researchers have proposed program visualization tools to alleviate these difficulties: for example, SeeC is one of the state-of-the-art tools for visualizing the behavior and execution status of C programs. However, three problems (P1-3) remain in SeeC, as well as in other existing visualization tools. P1 (Usability): SeeC requires many steps to revisualize modified source code. P2 (Capability): SeeC does not fully support dynamic memory allocation. P3 (Installability): novice programmers often find installation of SeeC challenging due to its dependency on Clang. We propose a new visualization tool named PlayVisualizerC (PVC) for novice C programmers, which provides three solutions (S1-3) for P1-3. S1: PVC reduces the steps required for revisualization. S2: complete support for dynamic memory allocation. S3: designed to be installed in the user's web browser. From a small-scale experiment and a questionnaire given to 20 students, we found that a set of four programming tasks were solved 1.8 times faster and 24% more correctly using PVC.",An interactive Web Application Visualizing Memory Space for Novice C Programmers (Abstract Only),NA:NA:NA:NA,2017
Maya Israel:Todd Lash:George Reese,"There is growing momentum to integrate computer science (CS) education across K-12, but there is little information about how this integration should take place (Grover & Pea, 2013). This is especially true in the elementary grades, as fewer studies have examined computing at these grades. Through a National Science Foundation STEM+C project, we are developing and studying learning progressions for integrated CS and mathematics at the elementary level. Our research examines how teachers are introducing CS concepts within mathematic as well as what computational concepts and practices naturally can be taught within the context of elementary mathematics. We are also examining how these emerging progressions align with the K-12 CS Framework and the new standards from the Computer Science Teachers Association (CSTA). Future aims are to develop a coherent set of learning progressions related to areas such as debugging, sequencing, looping, conditionals, and decomposition within mathematics topics such as geometry, fractions, and arithmetic number stories. Our research lays the groundwork for the development of learning trajectories that will guide curriculum developers and practitioners to understand how to teach students across grades K-5 computing within the context of their mathematics instruction.",Emerging Learning Progressions in K-5 Integrated Mathematics And Computer Science Lesson Plans (Abstract Only),NA:NA:NA,2017
Deja Jackson:Cindi Simmons:Kate Zelaya:Erica Pantoja:Amber Wagner,"Block Programming languages (e.g., Scratch, Blockly) are widely used in teaching students within K-12 classrooms and in some universities with hopes of introducing programming concepts to beginner students. The use of block programming languages in classrooms is an effort in encouraging students' interest in computer programming by utilizing Papert's ""low floor"" and ""high ceiling"" metaphor. The Hour of Code is one example demonstrating the impact block languages have in education; however, there are not many languages offering an emphasis on advancing skills in mathematics or reading while focusing on the need of students with learning disabilities. This poster describes our creation of a block language using Blockly's API. Our block language, Hopper's Fables, named after Admiral Grace Hopper, is a storytelling language based on completing interactive mathematical problems in an effort to engage students while going through the story. It is the intent of Hopper's Fables to aid elementary students with learning disabilities through enhancing their math and literacy skills, while simultaneously building the student's digital fluency and developing their computational thinking skills. Hopper's Fables is based on research of related work, which allowed for the creation of an evaluation rubric. Analyzing the characteristics of existing languages allowed Hopper's Fables to come to life. By combining Papert's ""low floor"" and ""high ceiling"" philosophy with educational foundations, Hopper's Fables will provide students with an appropriate and enchanting learning environment.",Hopper's Fables: A Mathematical Storytelling Adventure (Abstract Only),NA:NA:NA:NA:NA,2017
Yerika Jimenez:Theodore Hays:Christina Gardner-McCune,"Tools like MIT App Inventor and Scratch are designed to help students develop programming and computational thinking skills by allowing them to use their interest and personal experiences to create meaningful artifacts. However, students often need additional help in translating their ideas into functional programs because they lack understanding of how to map the visual aspects of their projects to programming constructs and understanding of how to develop appropriate algorithms that bring their ideas to life. To address this issue, we created a Computational Thinking App Design Mat (App Design Mat) to scaffolds students' CT skill development in the context of creating a mobile application with MIT APP Inventor 2. The App Design Mat fosters student engagement in computational thinking through four areas of the mat: Problem Decomposition, Pattern Abstraction, Pattern Recognition, and Algorithm Design. In this poster will describe the design and results from the use of the App Design Mat with 80 eighth grade students. Our results suggest that most students understood the purpose of using the App Design Mat, used the App Design Mat effectively, and used some aspects of the App Design Mat in developing their final mobile app project.",Computational Thinking App Design Mat: Supporting the Development of Students' Computational Thinking Skills (Abstract Only),NA:NA:NA,2017
Keith Jones:Akbar Siami Namin:Miriam Armstrong,"There is a job gap in cybersecurity with many more security jobs than qualified candidates. The cybersecurity workforce shortage could be mitigated by developing better curricula that prioritize the Knowledge, Skills, and Abilities (KSAs) most important to security related jobs. To determine which KSAs should be included in cybersecurity education and training, we administered survey-interviews to 44 security professionals at the premier hacking conferences Black Hat and DEF CON. Questions concerned 32 cybersecurity-relevant KSAs. Participants were asked how important each KSA was to their job and where they had learned that KSA. Fifteen KSAs were rated as being of higher-than-neutral importance. Most of these important KSAs concerned networks (example KSA: knowledge of network protocols) and threats/vulnerabilities (example KSA: knowledge of types of security threats and vulnerabilities). Of the 32 KSAs, participants learned the most about 31 of them while on the job and not through formal training. Overall, the data suggest that network KSAs and threat and vulnerability KSAs should be prioritized in course curricula and that historically threat and vulnerability KSAs have not been emphasized in school. This work is supported by National Science Foundation under award number DGE-1516636.",What Should Cybersecurity Students Learn in School?: Results from Interviews with Cyber Professionals (Abstract Only),NA:NA:NA,2017
Sarah Judd:Megan Sullivan:Jeff Stern,"Agile software development practices, which focus on iteration and adaptability, are commonly used in software engineering companies. Girls Who Code designed an after-school Clubs curriculum for middle and high school students that gives girls first-hand exposure to these practices. We use agile processes for two reasons. The first is practical: Over the course of a year-long Club, all participants collaboratively create a large project. Agile practices organize this effort. The second is mission-driven: We believe using real-world techniques and terminology will build girls' identities as computer scientists. Girls Who Code recognizes that when teaching 40,000 girls at scale, not every Clubs Facilitator will have had first-hand experience with agile development practices. We have created a curriculum to empower volunteers from any background to teach in an agile manner. Facilitators are given Session Outlines for each Club session that provide activities to structure the Club experience, as well as additional facilitator tips on topics such as finding an audience, researching pre-existing solutions, and developing solutions. Throughout this year, the Girls Who Code Education team will observe Clubs to evaluate this pedagogical approach. We will follow 10 Clubs closely throughout the year, and visit approximately 40 more. During that time, we will interview facilitators about their experiences teaching our curriculum. We will share our findings from these field observations and recommendations for integrating agile development practices into curricula. We hope to engage the computer science education community in a conversation about the strengths and challenges of this approach.",Agile Development in Project-based Curriculum at Scale for Middle and High School Girls (Abstract Only),NA:NA:NA,2017
Clif Kussmaul,"This poster describes a new CS1 course on Computation & Cognition (C&C), targeted at students in psychology, neuroscience, and biology. In C&C, students learn to create and use software to imitate, model, or study processes in the brain. Topics include software development, control structures, data types, and testing, as well as key ideas in experimental design, stimulus presentation, searching, natural language processing, genetic algorithms, and neural networks. Thus, C&C enriches student understanding of content in their majors, and develops programming and computational skills in a relevant context, which should enhance subsequent research projects and career outcomes. C&C was developed with support from a 2015 Google CS Engagement grant, and incorporates research-based practices that improve student learning and help broaden participation in computing. In particular, C&C uses Process Oriented Guided Inquiry Learning (POGIL) (http://pogil.org), in which student teams work on classroom activities that are specifically designed to guide them to construct their own understanding of key concepts, and to develop process skills such as communication, critical thinking, problem solving, and teamwork. C&C also uses PsychoPy (http://psychopy.org), a FOSS tool to run psychology experiments with two interfaces -- the Builder GUI to design experiments, and the Coder IDE to write Python code. The first offering of C&C was small (3 female, 3 male) with strong ratings for the course overall, and for increasing student interest in the subject matter. In the future, we hope to add experimental paradigms and techniques, and engage more students from diverse backgrounds.",CS1: Computation & Cognition -- An Evidence-Based Course to Broaden Participation (Abstract Only),NA,2017
Louise Ann Lyon:Quinn Burke:Jill Denner:Jim Bowring,"The rise of so-called ""coding boot camps"" as an alternative training ground for software development is prominent in the popular press, and these camps have caught the attention of colleges and universities. Administrators and faculty considering whether and how to partner with coding boot camps may want to consider what skills and knowledge boot camps are providing to students as well as successful college/boot camp partnerships. This poster reports on data from a collaborative NSF EHR grant (#1561705/ #1561717) funding a qualitative study of how coding boot camps and university CS programs prepare students for careers as software developers. As part of early data collection for this study, we have learned not only details of boot camp student preparation for the workforce, but also ways that universities are currently partnering with boot camps. This poster will report on data gathered in focus groups and interviews with curriculum developers from both coding boot camps and university CS programs categorized into the themes of: classifications of boot camps, screening/admission criteria, student profiles, training (both independently and in partnership with colleges/universities), and job placement. We draw suggestions from this initial data as to where boot camps may be able to enhance traditional CS degrees for students and what CS educators may want to consider when evaluating the boot camp experience.",Should Your College Computer Science Program Partner with a Coding Boot Camp? (Abstract Only),NA:NA:NA:NA,2017
Travis Mandel:Jens Mache,"In an increasingly computer-driven world, it is no surprise that undergraduate interest in computer science has grown enormously over the years. To meet this growing demand, it is vital to ensure there is a growing supply of talented and passionate CS educators. However, most computer science professors must first earn a PhD at a research university. Therefore, we seek to understand whether these institutions are meeting the growing need for passionate and highly-trained computer science educators. Specifically, we analyze 19 years of historical data gathered from the University of Washington Computer Science & Engineering department. Although focusing on graduates from a single school is a limitation, University of Washington is somewhat unique in that it publicly posts graduating PhD students' preferences online, and UW has had numerous notable graduates pursue careers in teaching, research, and industry. Our analysis of 309 graduating students reveals that the number of graduating students interested in teaching is alarmingly small, and has not grown over time to meet the increased need for quality educators. Our more detailed analysis of the change in interest over time suggests several potential reasons for this phenomenon. We hope that this poster opens dialogue surrounding possible interventions that might alleviate this issue.",Examining PhD Student Interest in Teaching: An Analysis of 19 Years of Historical Data (Abstract Only),NA:NA,2017
Daniela Marghitu:Amber Wagner,"As part of the new and bold NSF INCLUDES initiative, we introduce the SouthEast Alliance for Persons with Disabilities in STEM (SEAPD-STEM) whose goal is to increase the representation of students and faculty with disabilities in all STEM fields. The SEAPD-STEM is an alliance consisting of 22 higher ed institutions including community colleges, four-year institutions, and universities with graduate programs. The primary methodology utilized by the SEAPD-STEM is to build bridges of support and mentorship between various levels of academia: in undergraduate institutions, upperclassmen will support lowerclassmen; graduate students will support upperclassmen; junior faculty will mentor graduate students; and senior faculty will mentor junior faculty. Moreover, there will be bridges from undergraduate/graduate to the workplace aiming to assist persons with disabilities in acquiring a position working in a STEM field. This poster presents how the bridges are formed in addition to preliminary data including statistics concerning students with disabilities studying STEM fields, professors with disabilities in STEM, and survey data completed by intervention participants. In total, there are 19 proposed interventions to be implemented including Saturday and Summer academies, research experiences, GRE prep workshops, and various levels of mentoring/advising from high school to workforce. It is the intention of the SEAPD-STEM to increase the alliance each year in order to reach as many students with disabilities as possible.",Building Bridges: How the Southeast is Increasing the Representation of Students with Disabilities in STEM (Abstract Only),NA:NA,2017
Chris Mayfield,"With the recent launch of AP CS Principles in 2016-17, many efforts are currently underway to share curriculum resources and prepare new teachers. The community has primarily focused on high school implementations, which have different situational factors than university courses (e.g., amount of class time). In this poster, we present the design of a survey course that aligns with CS Principles and also continues the long tradition of breadth-first introductions to computer science at the college level. We describe the instructional strategies, assessments, and curriculum details, providing a model for how to modify existing CS0 courses. We also outline twelve lab activities that support the computational thinking practices and learning objectives of the AP curriculum framework. All instructional materials including activities, labs, performance tasks, and rubrics are freely available on the course website: https://w3.cs.jmu.edu/cs101. Quizzes, solutions, and other materials are also available to instructors upon request. The course has run successfully for the past four years at two universities and three high schools via dual enrollment. Initial results suggest that the curriculum has a positive impact on student confidence levels and attitudes toward computer science.",Implementing CS Principles as a Breadth-First Survey Course (Abstract Only),NA,2017
Susan B. Miller,"In this research, I studied two enactments of a professional development course designed to help teachers learn how to program games and teach programming to middle school students using a guided discovery approach. In the first PD course (n=58), a wholly teacher-directed approach was used. In the other PD course (n=54), a guided discovery approach was employed. I found three major differences between the groups. First, the descriptions of the games varied significantly based on the type of instruction, leading us to believe that teachers were taking more ownership of their creations. Second, the teachers who were taught with a guided discovery approach were able to work at a quicker pace, with less assistance, and ultimately were able to more quickly apply those skills to more complex games and simulations within the course of the professional development. Third, it also appears that this guided discovery teaching methodology is similarly impacting changes in pedagogy when these newly trained teachers use Scalable Game Design in the classroom. Students in classrooms where teachers were taught using guided discovery methods were more likely to go beyond the curricular materials when building their own games. This appears to indicate that these approaches to training will translate to changes in classroom practice, enabling teachers to more readily employ a guided discovery approach in their own teaching efforts",Using Professional Development to Move Toward a Guided Discovery Approach in the Classroom (Abstract Only),NA,2017
Chelsea Patek:Ankur Chattopadhyay,"This poster presents a potential way of promoting student driven computing educational research that may provide an alternate path or option to the traditional faculty-driven computing education research. We propose a unique model of inter-class student collaboration that motivates creativity, expands the scope of collaborative research and enables handling of conceptual gaps through inter-class peer mentoring. The proposed model engages students from an upper level class with students of a lower level class so that they can connect with each other in a peer mentor-mentee relationship to overcome conceptual gaps in learning. It provides upper level students with an exclusive opportunity to reinforce their conceptual grasps and engage in research for addressing the problems faced by lower level students. This proposed model of improvised peer collaboration promotes a new kind of service-oriented learning project in computing that inspires innovation and leads to research on finding ways to handle common conceptual limitations, thereby helping student retention by assisting lower level peer mentees. It also assists upper level peer mentors in self-driving towards research oriented thinking for inventing methods to solve authentic conceptual issues. The proposed model has been currently implemented in the UWGB computing curriculum, where CS2 students have been collaborating with CS1 students and have been participating in computing educational research as part of the process. These ongoing research experiments have analyzed the performance of the proposed model through data obtained by conducting student surveys. The collected survey data represent insightful evidences from preliminary evaluations of the proposed model.",Can Undergraduate Computing Research Be Student-Driven? (Abstract Only),NA:NA,2017
Max Paulk:Amber Wagner,"Many K-12 and university classrooms are now using block programming languages (e.g., Scratch, App Inventor, Code.org) to help students learn how to program. These block programming languages are popular because of their simplicity and ""tinkerability"" allowing novice users to create a project within minutes of first being exposed to the language. Unfortunately, these languages are highly dependent on the mouse and keyboard making them nearly inaccessible for those users with visual or motor impairments. This poster presents CodeBox64, a simplified input modality that is able to program block programming languages in a more tactile approach; it is a Tactile Input Modality (TIM). Because of the simplicity of CodeBox64, it allows visually impaired students to navigate the buttons and knobs with ease. CodeBox64 consists of four navigational buttons (i.e., up, down, left, right), a back button, and an enter button. It also contains an RFID sensor board that allows the user to use physical Lego blocks to execute commands of a block language. While CodeBox64 was originally developed to work with a custom, Blockly language, JamBlocks, it has the potential to work with other block languages. CodeBox64 demonstrates one possible methodology for enabling block languages to be accessible to those users with visual impairments.",CodeBox64: A Tactile Input Modality for Block Programming (Abstract Only),NA:NA,2017
Kai Qian:Hossain Shahriar:Fan Wu:Cassandra Thomas:Emmanuel Agu,"In this poster we present an innovative authentic learning approach for Secure Mobile Software Development(SMSD) through real-world-scenario case studies. The primary goal of this learning approach is to create an engagement and motivating learning environment that encourages all students in learning emerging SMSD technologies and enhances their secure software development concepts. This approach provides students with hands-on laboratory practices on real-world SMSD and mobile security. The laboratory consists of multiple modules covering input validation, output encoding, secure inter-process communication, secure data protection, secure mobile database. Each topic consists of a series of progressive sub-labs: a pre-lab, lab activities, and a student add-on post-lab. The preliminary feedback from students is positive. Students have gained hands-on real world experiences on Android software security with Android mobile devices, which also greatly promoted students' self-efficacy and confidences in their mobile security learning.",Broadening Secure Mobile Software Development (SMSD) Through Curriculum Development (Abstract Only),NA:NA:NA:NA:NA,2017
Christian Roberson,"Traditional, points-based grading poses several challenges to computer science educators. Students can lose focus on learning the material and instead focus on the game of trying to accumulate enough partial credit to get to the next grade tier. Faculty can waste large amounts of time obsessing over partial credit point assignment for a particular assignment. It can be difficult to use course grades to connect student performance with learning outcomes for the course and the program. This poster presents an overview of an alternative approach to traditional grading: specifications grading. Specifications grading is a points-free, mastery style of grading that replaces partial credit with quality feedback and revision opportunity. This model provides several advantages over the traditional grading approach. These advantages include better support for high academic standards and rigor, an increased focus for students on learning by removing the intrinsic motivation to earn points, and a stronger connection between student grade assessments and course learning outcomes. The poster will provide an overview of specifications grading and its benefits, along with details of implementation for an Android application development course and an introductory-level programming course. Additionally, the poster will include student evaluation data from previous offerings of the courses.",Applications of Specifications Grading in Computer Science Courses (Abstract Only),NA,2017
Clare A. Rumsey:Quinn Burke:Chris Thurman,"In an effort to lay a foundational framework for a computer science (CS) middle school curriculum, this research examines youth's use and perception of the introductory programming language Scratch through both the lens of storytelling and game making. Over the course of an academic semester (5 months), two classes of 6th grade students (52 students total) progressed from creating digital stories in Scratch to creating interactive games as teams, enhancing critical thinking skills, beliefs about ability, and overall literacy skills. This poster reports on students' perception of coding both in terms of storytelling as well as in terms of gaming, and how each learning ""product"" (e.g., stories versus games) affected students' overall perception of coding as as a practice, as well as their own interest in and persistence with such practice. Results are based on pre-and post course student and teacher surveys and interviews, weekly field note observations, and artifact analysis of particular coding scripts. Discussion section points to the wider implications for the growing number of middle school CS in-school and after-school programs nationwide, and the role of stories and games as an effective ""hook"" to introduce children to CS.",Cracking the Code: Bringing Introductory Computer Science to a Charleston Middle School (Abstract Only),NA:NA:NA,2017
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan,"Many feel K-12 computer science requires a large tech budget, a classroom full of laptops, tablets or robots, and an experienced tech teacher. This belief is not unfounded as the majority of online computer science teaching materials require modern technology and Internet connectivity, making these tools inaccessible to the low-tech classroom. As a solution, we developed SAS® CodeSnaps, a free tool that provides an engaging coding experience with minimal technology. One iPad and one robot (www.sphero.com) are all that is needed for every student in a classroom to code. With CodeSnaps, students program together using printable coding blocks. When their program is ready, they ""snap"" a picture using the CodeSnaps app which digitizes their code and executes it on a robot, allowing students to see their program execute in the real world. In this poster we present lesson plans for both a single engagement with students as well as week-long introduction to CS fundamentals centered around the CodeSnaps app. We also discuss results from two pilot studies designed to measure student engagement during these lessons.",Coding for All: Computer Science Outreach for All Ages and Budgets (Abstract Only),NA:NA:NA,2017
Allison Scott:Alexis Martin:Frieda McAlear,"In response to the lack of diversity in computing fields and associated lack of access to computing courses, an NSF-funded computing intervention was developed and implemented within the SMASH Academy for underrepresented high school students. Previous research indicated short-term impact of the intervention on computing interest and knowledge. This pilot data explores the longitudinal impact of this intervention and whether it influences the pursuit of computing majors in college. Using data from students who participated in SMASH in high school and are currently pursuing computing majors in college, descriptive comparative data suggest there has been a longitudinal increase in pursuit of computing associated with the intervention. This poster will also provide qualitative data and narratives to further explore whether students attribute their choice of major to the intervention, and therefore, whether these increases can be attributed to the intervention. In addition, this poster will also contain open questions to engage and stimulate the audience in discussion about ideas for additional analyses or variables to explore to examine longitudinal impact.",Do Computer Science Exposure Activities and Courses Influence the Pursuit of Computing Majors in Higher Education among Underrepresented High School Students? (Abstract Only),NA:NA:NA,2017
Nicole Simon:Megan Banford,"During summer 2016, John Jay College of Criminal Justice piloted Cyber Crime Investigators -- a 4-week pre-college program that aimed to expand the pipeline of NYC public high school students who enter college ready to pursue a path toward a profession in cybersecurity. The program was designed by a team of educators with expertise in academic skill preparation, college access, career guidance, student learning, and computer science. Using IDEO's Design Thinking for Educators as a learning framework, 42 rising high school seniors engaged in a six-stage process to understand and create solutions for complex problems in cybersecurity. To understand the many real-world applications of cybersecurity, students worked in teams as consultants for Floor Plan, a fictitious non-profit organization (modeled after Housing Works) that provides housing and healthcare services to homeless LGBTQIA teenagers. They employed Design Thinking protocols to develop a cybersecurity plan for the organization, guided by the NSA's First Principles of Cybersecurity. They worked on the challenge daily in ""Lab."" During this time, they learned technical skills, such as operating a command line and principles of networking, and they practiced other academic skills, such as writing, project planning, and public speaking -- all part of a foundational skill set for college success. They conducted interview and observation research during field trips and speaker visits and presented their final plans at a public competition judged by industry professionals during the program's last week.",Cyber Crime Investigators: Pathways from High School to Cybersecurity Careers for First Generation College-Bound Students (Abstract Only),NA:NA,2017
Cara Tang:Cindy Tucker:Elizabeth K. Hawthorne:Christian Servin:Teresa Moore,"In 2015, under the auspices of the ACM Education Board the Committee for Computing Education in Community Colleges (CCECC) began an effort to update the ACM Computing Curricula 2009: Guidelines for Associate-Degree Transfer Curriculum in Computer Science with inclusion of contemporary cybersecurity concepts. To this end, the CCECC established a task force of community college educators to review the ACM/IEEE Computer Science Curricula 2013 (CS2013) and identify foundational material in CS2013 that is appropriate for the first two years of a computer science education. To further inform the guidance, the CCECC administered surveys to a global audience of computer science educators to solicit input related to CS2013 knowledge areas (KAs) and knowledge units (KUs) and on cybersecurity topics, which are appropriate for associate-degree computer science transfer programs. The guidance has been through two rounds of public review and comment",Curricular Guidance for Associate-Degree Transfer Programs in Computer Science with Contemporary Cybersecurity Concepts (Abstract Only),NA:NA:NA:NA:NA,2017
Juliet Tiffany-Morales:Kathy Haynie:Jason Ravitz:Karen Peterson,"The importance of computer science educational opportunities for girls cannot be understated, and strong evaluative practices are critical for ensuring that these opportunities are of high quality and meet girls' needs. In this poster presentation, participants will learn how a nonprofit and a corporate partner designed a program to build the evaluative capacity of participating nonprofits--the CS OPEN initiative. Presenters will discuss the guiding principles that shaped this initiative and share the challenges to and successes of developing an evaluation capacity building network that supports a diverse set of 12 grantees. Session attendees will learn from the designers and evaluation experts within this network: 1) how this evaluation capacity building partnership was developed and grantees were selected, 2) grantees' experiences and challenges in designing and implementing evaluations, 3) the resources and efforts the partners have used to develop grantees' evaluative capacity and to build the network, and 4) the impacts of these efforts on grantees evaluative capacity. Resources utilized by the CS OPEN grantees will be displayed with ratings and highlights of their growth in evaluative capacity. The poster will highlight major successes and lessons learned for implementing an evaluative capacity building grant initiative.",Building Evaluative Capacity for Out of School Organizations that Engage Girls in Computer Science (Abstract Only),NA:NA:NA:NA,2017
Peter A. Tucker:Robert Bryant,NA,"Motivating K-12 Students Toward Computer Science, and Computer Science Students Toward Teaching (Abstract Only)",NA:NA,2017
Jeramey Tyler:Matthew Peveler:Barbara Cutler,"We present a non-grade-penalty late day policy used in many of the large lecture, required courses in our computer science department. We study the effectiveness of this late day policy in reducing student stress, distributing demand for teaching assistant resources in peak hours before the homework deadline, and in maintaining or improving student understanding and homework grades. A complex late day policy can be efficiently implemented and managed within our open-source homework submission system that utilizes automated testing and grading, allowing students to submit and resubmit homeworks as they make progress on the assignment.",A Flexible Late Day Policy Reduces Stress and Improves Learning (Abstract Only),NA:NA:NA,2017
Paul Voelker:Chris Johnson,"The use of educational games to teach and reinforce concepts to students is an idea that has gained popularity in recent years. Games force students to demonstrate their mastery of a subject by applying its principles to complete a goal or solve a problem. Games also offer more frequent feedback on the student's performance along with immediate rewards. These factors can make games more engaging for the student than traditional homework or quizzes. In this poster, the authors present a program which hopes to leverage the advantages games have as a learning tool in order to help students understand the effects of bit manipulation. The player controls a factory with a series of pipes that dispense chocolate into trucks waiting below. Using bitwise operators, the player must manipulate which pipes are open and closed in order to ensure that a pipe is only open if there is a truck aligned beneath it. The player is offered immediate feedback on their performance in the form of empty trucks driving away or wasted chocolate splashing to the ground. Additional challenge can be added to the game by only allowing the player to adjust the pipes one time between each set of trucks. By providing immediate feedback and encouraging creative problem solving, this game may improve student's intuition about the mechanics underlying bit manipulation.",A Game-Driven Approach to Teaching Bit Manipulation (Abstract Only),NA:NA,2017
Jan Vykopal:Jakub Cegan,"Cyber defence exercises (CDX) represent a popular form of hands-on security training. Learners are usually divided into several teams that have to defend or attack virtual IT infrastructure (red vs. blue teams). CDXs are prepared for learners whose level of skills, knowledge, and background may be unknown or very diverse. This is evident in the case of high-profile international CDXs with hundreds of participants coming from government agencies, military, academia, and the private sector. In this poster, we present techniques for distributing learners into teams with respect to their level of proficiency and the prerequisite skills required by the exercise. Our aim is to reach a balance between proficiency and the exercise to make the exercise beneficial for the learners and an effective investment for sponsors. The poster describes three methods and compares their advantages and disadvantages. First, we present self-assessment questionnaires, which we have already used in four runs of a national CDX for 80 participants. We outline our findings from an analysis of the learners' self-assessment before and after the exercise, and the score they achieved during the exercise. Second, we introduce a promising method for testing the prerequisites of the exercise. This is still a work in progress but we believe that this method enables the better assessment of learners' skills with respect to the exercise content, and supports the game balance better. Finally, we compare both methods to a naïve one that shuffles participants into teams randomly.",Finding Exercise Equilibrium: How to Support the Game Balance at the Very Beginning? (Abstract Only),NA:NA,2017
Xiaohong Yuan:Li Yang:Wu He:Jennifer T. Ellis:Jinsheng Xu:Cynthia K. Waters,"This poster presents our NSF collaborative project ""Enhancing Cybersecurity Education Using POGIL"". Although the POGIL (Process Oriented Guided Inquiry Learning) instructional approach has been used and evaluated in science and engineering disciplines, the use of POGIL in cybersecurity education is not in place due to the lack of POGIL materials in cybersecurity. To deliver key learning outcomes as well as ""soft skills"" in cybersecurity students, we are developing POGIL materials for teaching cybersecurity, implementing the POGIL teaching pedagogy in cybersecurity courses, and evaluating the teaching and learning effectiveness of the developed POGIL materials and teaching method. We are developing POGIL materials for fifteen topics in six areas: cryptography, access control, network security, risk management, web security, and secure coding. These POGIL materials will be implemented and evaluated in eight different courses at three universities. Through assessing the developed POGIL materials and teaching method, we seek to answer the following research question: Is using the POGIL method more effective than the traditional/lecture-based teaching method in terms of learning outcomes, learning experience, attitudes and motivation? The developed POGIL materials will contribute to the effective resources for cybersecurity education, and enhance cybersecurity education by developing student key skills as well as improving student attitudes, motivation and enjoyment in learning.",Enhancing Cybersecurity Education Using POGIL (Abstract Only),NA:NA:NA:NA:NA:NA,2017
Rebecca Zarch:Alan Peterfreund,"Computer Science (CS) is a rapidly growing and evolving field, with many secondary teachers participating in professional development (PD) to offer CS courses in their schools as the entry point to a CS education pipeline. In 2014 the Evaluator Working Group (EWG) formed to address the issue of common data collection across NSF CS10K projects in order to capture the number of teachers being trained across CS10K projects and locations. The EWG goals are twofold: First, the EWG seeks to test the feasibility of a diverse group of projects collecting and reporting on common data. The lessons learned through this effort will inform the CS education professional development community as the field matures and data collection is more broadly supported. Second, the EWG hopes to have an accurate count of the number of teachers trained through CS10K, some demographic and descriptive information about teachers, information about the students enrolled in teachers' classes, and information about the schools in which the teachers are offering courses. To accomplish these goals, the EWG has developed a common data collection tool and process for projects to report aggregate-level participation data. To date 100% of projects submitted at least partial data. The results show that 1,538 new teachers have participated in PD through these 29 CS10K programs; taught in at least 909 public and private schools in 43 states, the District of Columbia, and Puerto Rico. This poster will provide a visual display of both the process of data collection and the results.",Collecting Participation Data Across NSF CS10K-Funded Professional Development Providers (Abstract Only),NA:NA,2017
Rebecca Bates:Valerie Summet:Nanette Veilleux,"Have you read any of the common reads for SIGCSE 2017? Now's your chance to talk about them! Two novels: The Thrilling Adventures of Lovelace & Babbage: The Mostly True Story of the First Computer by Sydney Padua (Pantheon Graphic Novels, 2015) and The Martian by Andy Weir (Broadway Books, 2014) as well as a short story: ""The Last Question"" by Isaac Asimov (Science Fiction Quarterly, 1956) were proposed at the end of the 2016 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the two books and short story. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2018 conference.",SIGCSE Reads: Time for Book Discussion (Abstract Only),NA:NA:NA,2017
Bo Brinkman:Karla Carter,"Have you used the ACM Code of Ethics and Professional Conduct in your teaching? Would you like to? Recent events are leading to increased interest in the Code: 1) The AP CS curriculum now includes ""computing in context"" as one of the six course topics. 2) The ACM has initiated an update of the Code, to be completed in early 2018. 3) There have been several court cases (Oracle v. Google is a recent example) and stories in the popular press (including in the New York Times) that have cited the Code. It is therefore increasingly important that students and teachers become aware of and comfortable with the Code. This BoF invites college and high school teachers to share assignments (or assignment ideas) that incorporate the Code, particularly outside of ""the ethics class."" We will also discuss proposed updates to the Code, and any items that are missing or anachronistic in the current Code. Representatives of the ACM Committee on Professional Ethics will collect this feedback and provide it to the Code 2018 Task Force.",The ACM Code of Ethics and Professional Conduct: Teaching Strategies and the Coming Update (Abstract Only),NA:NA,2017
Janet Burge:Bo Brinkman,"Many universities either have offered or are starting to offer computer science courses taught in a compressed time scale, often where students take only one course at a time. The pace of these classes can differ but often move at a speed where a day of an accelerated class is equivalent to a week of a typical semester class. This format has several advantages-more flexibility for collaborative work, better visibility into how students are spending their time (knowing that if a student is struggling it is not because of work in a different class), and less need for students to multitask between different courses. It also has many challenges. From the student perspective, there's the need to stay on top of things and not fall behind, having to catch up if there are absences due to illness or extra-curricular activities, and staying focused on one subject while working under constant time pressure (which often results in a tendency to rush through assignments to meet deadlines). Participants in this BoF will share their knowledge about teaching in this format. What kinds of assignments and assessments work and don't work during accelerated courses? How can we keep the workload reasonable for the students and for ourselves? What interesting pedagogy does this format facilitate? We invite participation both from faculty who are already teaching in this format and also from those considering an accelerated course who want to learn more about the advantages and disadvantages of this format.","Teaching and Learning Under Pressure: Intensive (Accelerated, Block) Computer Science Courses (Abstract Only)",NA:NA,2017
Yingjun Cao:Scott D. Anderson,"To convey abstract concepts to students with little to no computing background, faculty members often adopt real world analogies to make CS concepts more relatable. Existing work on the power of analogies in CS education [1-2] has looked into the effectiveness and limitations of metaphors. However, there is no existing forum or repository that educators can share successful and interesting analogies. For this Bird of Feathers session, we invite all interested computer science instructors to share their successful (or unsuccessful) analogies with details on where and how the analogies were used, the related CS concepts, and how a particular analogy might fail to convey the instructor's ideas. We propose to focus on analogies for CS1/CS2 concepts because students in those classes may benefit the most from this teaching technique, and appropriate use of analogies for non-majors might help attract students to the field of computing. This BOF's topic relates to the general trend of teaching diverse groups of students in introductory programming courses and provides an excellent opportunity for CS educators to discuss successes and failures in using metaphors in our classes. The second purpose of this BOF session is to propose a suitable online medium where existing and new analogies can be shared with the CS education community. This BOF can be the beginning of a long-term online collaborative project where faculty members continue to share their metaphors with the community.",The Power of Analogies in Introductory CS Education (Abstract Only),NA:NA,2017
Lillian N. Cassel:Michael Posner:Darina Dicheva:Don Goelman:Heikki Topi:Christo Dichev,"The use and analysis of large quantities of data have become ubiquitous in nearly every discipline. We began a discussion of the role of data science across disciplines, and the role of computing in data science programs, at SIGCSE 16. The session was well attended and the discussion was valuable. Since then, more work has been done and more people are engaged. This BOF will continue the discussion, including welcoming new voices. We will distribute copies of the report of the NSF sponsored workshop on Data Science education and discuss a new initiative to develop curriculum guidelines for data science programs. This initiative will be in its earliest stages by the time SIGCSE meets, so it will be an excellent opportunity to gather impressions about what are critical considerations for any such curriculum effort. We developed a mailing list from the SIGCSE 16 attendees and will use that list to promote the BOF. The BOF will engage SIGCSE participants who have views on the content and role of courses and programs in data science. In addition to the workshop report, we will describe results from an NSF IUSE grant to develop modules for use in many types of courses. These expect to make access to fundamentals elements of data science available as widely as possible. With these as a starting point, participants in the Birds of a Feather session will explore the emerging field of data science and its relationship to computer science education. Discussions will be hosted at http://computingportal.org/datascienceflipped",Advancing Data Science for Students of All Majors (Abstract Only),NA:NA:NA:NA:NA:NA,2017
Janet Davis:Angela Berardinelli:Amanda Holland-Minkley:Ellen Walker,"How can CS faculty at liberal arts colleges better communicate with colleagues and the public about the value our institutions offer? Liberal arts colleges play an important role in undergraduate CS education. Liberal arts skills are widely valued in the tech industry, many liberal arts undergraduates go on to earn Ph.D.s in STEM, and many of the educational innovations presented at SIGCSE are developed by liberal arts faculty. Yet, our colleagues at research universities often misunderstand what we do at liberal arts colleges. And while we see the liberal arts and computer science as supporting each other, the popular media tends to portray them as diametrically opposed. These misconceptions limit our opportunities to attract new students and colleagues, as well as opportunities to contribute to public discourse about the important role of information technology in our society. In this BoF, we aim to collaboratively develop communication strategies for individual participants and for the liberal arts CS community as a whole.",Communicating What Liberal Arts Colleges Contribute to Computer Science (Abstract Only),NA:NA:NA:NA,2017
Adrienne Decker:Monica McGill:Alan Peterfreund,"There is a critical need to increase the number of skilled technology workers in part due to the supply of workers in these fields not yet keeping up with demand. In an effort to increase the interest of students in studying within these fields, many commercial, governmental, and non-for-profit educational groups have sponsored numerous activities aimed to expose students to computing prior to college. With the advent of CS for All, there is further need to research these programs and evaluate their effectiveness. This session will gather researchers and practitioners interested in researching the impact that pre-college computing activities have on their participants. Participants will learn about a new initiative underway to make the job of collecting and tracking data easier. To be useful for the broader community, this NSF-funded IUSE initiative requires input from the community it wishes to serve. Participants will have the opportunity to provide valuable input on what their needs are for tracking such activities and what tools may be helpful for them, including methods for data collection to produce meaningful data that can be compared to data provided by other researchers and practitioners. The focus of this discussion will be the long-term impact of these activities; however, we will discuss data collection techniques researchers have used in the past to gauge short-term impact as well.",Evaluating the Long-Term Impact of Pre-college Computing Activities (Abstract Only),NA:NA:NA,2017
Nate Derbinsky:Durga Suresh,"Service learning offers students of computer science an experiential opportunity to hone not only their technical skills of design and programming, but also the soft skills of teamwork, communication, and social/ethical behavior. With hard work and effective mentoring from faculty, the output of student work can also benefit community partners, assuming there is proper infrastructure in place to provide long-term project management and technical support. This Birds of a Feather session provides a discussion platform to share lessons learned and best practices related to establishing a sustainable service-learning program within an undergraduate computer-science curriculum, with a particular focus on balancing benefits to students and community partners with organizational overhead.",Sustainable Methods for Impactful Service Learning in Computer Science (Abstract Only),NA:NA,2017
Nickolas Falkner:Elizabeth Patitsas:Colleen Lewis,"Large volumes of Computer Science Educational (CS Ed) material are published every year but it is apparent that equally large volumes of this are not being read or having much impact on practice, or even available to the practitioners who could use it. How can we distribute CS Ed materials and information more effectively and in potentially innovative ways? This BOF will provide a platform for discussion on a selection of techniques that encourage discussion and dissemination of CS Ed techniques in the community. Is traditional publishing still a good approach or is it just part of a wider group of techniques?",Alternative Publishing and Dissemination of CS Education Research (Abstract Only),NA:NA:NA,2017
Carol L. Fletcher:William Wesley Monroe,"CS Education in primary and secondary schools has experienced a renaissance in the last few years as the CS for All initiative has gained traction across the nation. CS curricula abound and a new AP course, CS Principles, has been deployed that aims to broaden participation. Lack of consensus exists however in what constitutes a qualified CS teacher. A widely accepted and adopted modern certification/licensure process (CSTA 2013) must be developed. Professional development that can be rapidly scaled to build CS teacher capacity is required to realize the vision of CS for All across the nation. In this session we will engage state and national CS thought leaders to discuss the CS certification process, educator standards, and certification tests across various states to determine opportunities for future collaboration. What are the content standards that all beginning CS teachers must meet? What if any specific CS pedagogical topics need to be assessed? Applications today are built in teams and often deployed and distributed in the cloud. Are these topics too advanced for high school CS or should they be integral? How can professional development be designed to help teachers across multiple states meet certification standards? The existing standards from the ETS CS Certification test (Texas Education Agency, 2010) currently used in multiple states will serve as the baseline for group discussion and feedback.","High School CS Teacher Certification: Standards, Assessments, and Professional Development (Abstract Only)",NA:NA,2017
Peter H. Fröhlich:Borja Sotomayor,"Introductory curricula, courses, and programming assignments seem to get most of the attention at Computer Science education conferences. This bird-of-a-feather focuses, instead, on upper-level systems courses (databases, networks, compilers, operating systems, etc.) and, more specifically, on courses with a significant hands-on implementation component, from small-scale programming assignments like implementing a memory allocator or a network protocol, to larger projects like implementing an operating system or compiler from scratch.  Designing assignments and projects for these kinds of courses can be challenging: they must be ""practical"" in the sense of providing a realistic systems programming experience, but also ""practical"" in the sense of being small and self-contained enough to be feasible in a single quarter/semester. While there are a number of established frameworks (such as Minix, Pintos, or xv6 for operating systems) there is not, to the best of our knowledge, a dedicated forum for educators focused on these types of courses. Such a forum would allow us to more easily share existing coursework, collaboratively develop and refine coursework, and to have seasoned instructors provide support to those just starting out. This birds-of-a-feather is a first step in that direction. It will provide an opportunity for instructors of upper-level systems courses to get to know each other as well as exchange ideas and experiences. Discussion will revolve primarily around programming assignments and projects, but will also look to foster networking and communication beyond the birds-of-a-feather session.",Practical Systems Programming in Computer Science Education (Abstract Only),NA:NA,2017
Saturnino Garcia,"Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop process skills such as communication, teamwork, problem solving, and critical thinking. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown that students in POGIL classes do better on common exams and in subsequent courses. For more information, see http://cspogil.org and http://pogil.org. This BOF will (1) enable people unfamiliar with POGIL to ask questions and learn more, and (2) bring together experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group.",Process Oriented Guided Inquiry Learning (POGIL) in the CS Classroom (Abstract Only),NA,2017
Elizabeth Hawthorne:Cara Tang:Cindy Tucker:Christian Servin,"The ACM Committee for Computing Education in Community Colleges (CCECC) is updating the ACM curricular guidance for two-year transfer programs in computer science based on CS2013 with cybersecurity learning outcomes infused throughout. This BOF will provide a platform for two-year and four-year computer science faculty and academic administrators to discuss the newly revised associate-degree transfer guidance. The core task group writing the guidance consists of twelve community college faculty across the United States, led by the ACM CCECC and three task group leaders. The guidance has been informed by input from both two- and four-year educators in two rounds of public review and comment; a BOF, special session, and affiliated workshop at the prior two SIGCSE conferences; and international input at ITiCSE 2016. By SIGCSE 2017 the guidance will be in near-final form. The session will include an overview of the guidance, its relationship to CS2013, and infused cybersecurity. Discussion will center on implementing the guidance in two-year programs, gathering program exemplars, and facilitating transfer with four-year university partners.",Computer Science Curricular Guidelines for Associate-Degree Transfer Programs (Abstract Only),NA:NA:NA:NA,2017
Amanda M. Holland-Minkley:Thomas E. Lombardi:Madeline E. Smith,"Effective computer science curricula can develop students' abilities more broadly than just ensuring content mastery and algorithmic thinking. Computer science curricula may also include components focused on technical writing and communication skills, ethical practice of computing, effective teamwork and project management, and the application of computer science in a broader interdisciplinary context. In this session, attendees will be invited to share information about how they are incorporating this content into their curricula and the challenges they are facing in doing so. By sharing information about our current practices, attendees will help develop a survey of the variety of strategies CS programs are using to deliver this educational content. Attendees will also be given the opportunity to discuss the specific teaching challenges they encounter in their courses when teaching this content and share effective solutions they may have found to these problems.",Strategies for Including Soft Skills and Interdisciplinary Content in CS Education (Abstract Only),NA:NA:NA,2017
Josh Hug:Cynthia Lee,"As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Providing timely effective feedback to students, exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating many types of course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content. A master list of such tips, as well as a retrospective summary, will be compiled and provided to the SIGCSE community at http://tinyurl.com/wotb2017.",Handling Very Large Lecture Courses: Keeping the Wheels on the Bus III (Abstract Only),NA:NA,2017
Amardeep Kahlon:Bonnie MacKellar:Anastasia Kurdia,"Plagiarism is of great concern to faculty in all fields, including computer science as it leads to one certain outcome -- a compromise not just in student learning but also in the entire academic process. Faculty attempt to deal with this epidemic in varied ways such as by writing new course materials each semester, putting a larger or entire grade focus on exams, or even asking individual students to explain their assignments. However, plagiarism remains a source of frustration for both faculty and administrators. This BoF will bring interested faculty together to discuss the various and surprising ways in which students plagiarize, the methods of countering plagiarism, and the currently available tools for detecting plagiarism. Questions we will be discussing include: Do students understand plagiarism in the context of writing software? How can we create an atmosphere that discourages plagiarism, yet fosters collaboration and encourages learning from multiple sources? To what extent can one make an assignment ""plagiarism-proof""?","GitHub, Tutors, Relatives, and Friends: The Wide Web of Plagiarism (Abstract Only)",NA:NA:NA,2017
Amardeep Kahlon:Linda Smarzik:Mary Kohls,"Many community colleges are looking at Competency-Based Education (CBE) as a way to increase student recruitment, engagement, completion, and transfer to baccalaureate programs. In addition, colleges are looking at CBE as a way to reduce costs as well as provide students with clear, marketable skills for employment. CBE is particularly suited to computer science due to the nature of the discipline where well-defined, measurable outcomes can be designed and implemented. Is your college exploring a curricular redesign using CBE? Do you want to know what CBE is and how to implement a CBE curriculum in computer science? This BoF will host a discussion on planning, implementation, and scale-up of CBE programs. Besides learning about CBE, this BoF will provide attendees with a chance to connect with others trying to implement CBE programs so that they can share knowledge, share resources, and form future collaborations. The recent CS2013 curricular guidance will also be discussed as an important resource for developing CBE in CS.",Competency-Based Education in Lower-Division Computer Science Taught at Community Colleges (Abstract Only),NA:NA:NA,2017
Richard E. Ladner:Andreas Stefik:Daniela Marghitu,"Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing are inaccessible to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll (formally AccessCS10K) will be shared. Handouts and stickers will be given out.",Access to Computing Education for Students with Disabilities (Abstract Only),NA:NA:NA,2017
Justin Li,"Introductory CS courses often present computational concepts in a multitude of varied contexts. The contents of these examples and assignments present an untapped opportunity to reach out to under-represented minorities. For CS in particular, the ubiquity of technology in modern society makes it imperative that students consider how seemingly innocuous technical decisions could selectively disadvantage particular populations. If the entirety of the CS community - from K-12 to industry - is to be inclusive, we must train students to be aware of these issues from their first CS course. This BOF aims to foster discussion of how examples and assignments can illustrate CS concepts and simultaneously acknowledge the challenges that under-represented students may be facing. At least three such avenues are possible: 1) Choosing multi-cultural contexts for homework questions and in-class examples; 2) Assigning projects with socioeconomic implications, such as the Schelling Segregation Model (a 2014 Nifty Assignment); and 3) Showing how inclusion is easily subverted by majority-Caucasian data sets or ""purely technical"" decisions such as representing gender with a Boolean. The long-term goal is to establish a network of instructors interested in contributing assignments and activities, and to create a resource suitable for broader dissemination in the future.",Weaving Diversity and Inclusion into CS Content (Abstract Only),NA,2017
Stephanie Ludi:Stan Kurkovsky,"Hands-on activities can reinforce a variety of Computer Science concepts covered in class. Active learning techniques that utilize tangible manipulatives such as LEGO or other simple objects provide unique opportunities for students to explore or reinforce topics during class in a playful setting. This kinesthetic learning approach can also provide a platform that has a low learning curve, can facilitate creative thinking, improve student engagement with content and peers while adding gamification elements to the course. Different Computer Science topics lend themselves to such activities to differing degrees and the logistics of conducting these activities in large classrooms requires careful planning and execution, especially where cost is a factor and replication is desired between classes. Some educators may have experience while others may be interested but do not know where to start. BOF attendees will hear from those who have used different types of manipulatives, applied manipulatives to different Computer Science topics, and utilized said activities in different scenarios and contexts (e.g. large vs. small classes, single student vs. team activities). The sharing of ideas, strategies, and resources, as well as potential collaborations is also central to the discussion. The audience is expected to consist of both university faculty/lecturers (especially those who teach lower division courses) and high school teachers of computer science who are interested in engaging students in course content via kinesthetic activities and tangible manipulatives.",Using Tangible Manipulatives for Hands-on Activities in Undergraduate Computer Science Classes (Abstract Only),NA:NA,2017
Becka Morgan:Heidi J.C. Ellis:Gregory Hislop:Grant Braught:Lori Postner,"There is a growing community of faculty members who support student participation in Humanitarian Free and Open Source Software (HFOSS) projects in a variety of courses at a range of different institutions. HFOSS can provide a plethora of learning opportunities for students that ranges from design to code to test to documentation and more. Involvement in an HFOSS project allows students to gain professional skills while also gaining an understanding of the social impact of computing. However, experience has shown that supporting student involvement in HFOSS can pose some challenges to instructors including identification of appropriate assignments, creation of rubrics, grading, and managing interactions with the HFOSS community. The organizers of this BoF are faculty members who have a spectrum of experience in supporting student involvement in HFOSS. The organizers will share tips for structuring such student participation as well as discuss challenges that they've experienced and approaches for overcoming those challenges. Attendees will be encouraged to ask questions about how to get started, selecting an appropriate HFOSS project, structuring assignments, and more. This BoF will provide faculty members the opportunity to network with instructors with experience in this area.",Perspectives on Teaching Humanitarian Free and Open Source Software (Abstract Only),NA:NA:NA:NA:NA,2017
Tina Ostrander:Ruby ElKharboutly:Karen Jin,"Supervising students in project-based courses is challenging, particularly when the projects are ""open-ended,"" such as real-world projects or projects whose ideas are generated by the students. These projects often have undefined scope and use technologies and tools where we lack expertise. In this session, we plan to discuss the challenges faced by teachers in supervising open-ended projects in project-based learning environments. Some of the questions we address in this session: How do we support students with a project in a domain we know nothing about? How do we help students find meaningful and relevant projects with appropriate scope? How do we assist students in selecting appropriate technologies and tools? How do we guide students in planning their iterations to deliver business value and core functionality? This BoF is for instructors who teach or are interested in teaching courses with open-ended projects.","Surviving ""Open-ended Projects"" in Project-Based Learning: A Teacher's Perspective (Abstract Only)",NA:NA:NA,2017
Karen Parker:Sloan Davis:Chris Stephenson:Jason Ravitz,"Recent studies on the impact of CS teacher professional development (PD) opportunities have highlighted areas of improvement to effectively grow the number of well-prepared CS teachers. In this BoF Google will share data from CS4HS, an annual program that awards funding to research institutions and education nonprofits globally for the purpose of developing innovative and scalable CS PD that maps to local standards and demands. These data will serve as a starting point to engage the attendees in a wide-ranging and action-oriented discussion on ways the CS education community can improve our PD processes and results.",Improving Effectiveness of CS Teacher Professional Development (Abstract Only),NA:NA:NA:NA,2017
Ian Pollock:Lonny Brooks,"The idea for this session is based on conversations with colleagues from computer science, art, communications, engineering, and biology as well as international colleagues from three continents at ITICSE-2016 on the use of Game Jams to increase participation of underrepresented minorities (URMs) in Computer Science and STEM education. High-impact practices are powerful tools in engaging students (NSSE, 2014), perhaps even more so for non-traditional, ESL/ELL, first-generation, and URM students in STEM disciplines by increasing peer and faculty contact, active learning, and high expectations (Goodman). We believe that event-based teaching, such as Game jams and Hackathons provide students with many, if not more of the experiences that are credited with those of commonly identified High Impact Practices (Kuh, 2008). These events also create peer and social networks among participants. While not conclusive - anecdotally the networks of peers and social capacity seem to make a difference in post graduation job search (Mouw). Game Jams and Hackathons are still relatively new in higher education, and while there is a lot of anecdotal evidence as to the benefits reaped by participants of these events, there exists little in the way of long-term studies in the literature that speaks to the academic value of these events. This session will create a conversation among faculty from computer science and other disciplines who are interested in creating these events and their institutions, and developing scholarship to fill in the gaps in the literature around the effects and efficacy of these events on the long-term success of participants.","Collaborative research into Game Jams, Hackathons and Event-Based Teaching in Higher Education (Abstract Only)",NA:NA,2017
Thomas W. Price:Neil C.C. Brown:Chris Piech:Kelly Rivers,"As more programming environments add logging features and programming data becomes more accessible, it is important to have a conversation about how we share and use this data. Uses of programming log data range from big-picture analyses to dashboards for instant teacher feedback, to intelligent, data-driven learning environments. The goal of this BOF is to talk about what data is important to collect, where it can be gathered and shared, what general data formats make sense, how to handle privacy and anonymization, and what ultimately we want to see the data used for. The BOF welcomes both producers of programming log data and current or potential consumers, interested in how it could be applied in their classrooms or research. One hopeful outcome of this BOF is a commitment to documenting and sharing existing programming data in an accessible location and format.",Sharing and Using Programming Log Data (Abstract Only),NA:NA:NA:NA,2017
Farzana Rahman:Suzanne Matthews:Kelly Shaw:Andrea Danyluk,"Undergraduate research is a critical component of high-quality education in any discipline, including Computer Science (CS). Over the past few years, there has been a dramatic increase in CS undergraduate research activities at colleges and universities, and predominantly undergraduate institutions (PUIs) have an important role to play. Not every university has abundant resources to devote to research, and teaching-focused institutions may face the greatest challenges in this respect. Faculty at PUIs, for example, may face funding and infrastructure challenges and may find themselves stretched thin due to especially high teaching and service expectations. A frequently asked question by new faculty at these institutions is: Is it really possible to conduct meaningful research in such a fast-paced discipline as CS, while juggling a very high teaching and service load? Not only is the answer to this question ""Yes!"" but there are advantages to conducting research at a non-research institution. Faculty here has access to some of the brightest young minds who will potentially be future graduate students in research-intensive universities. They may have the freedom to do research that is too risky for graduate students. They can work on projects they are interested in, rather than those they know must work. With good time management techniques and careful selection of collaborators and student researchers, faculty here really can conduct important CS research. Thus, the focus of this BOF is to share methods that are helpful in conducting significant and meaningful CS research in a primarily undergraduate or teaching institution.",Can we really do it?: Conducting Significant Computer Science Research in Primarily Undergraduate Institutions (PUIs) (Abstract Only),NA:NA:NA:NA,2017
Jason Ravitz:Karen Peterson:Kathy Haynie:Juliet Tiffany-Morales,"With the growth of informal and out of school educational focus on increasing female participation in CS, many of us are asking critical questions about program development, participant learning, and program impact. Which programs are having success reaching and encouraging girls to pursue computer science? What stumbling blocks are encountered? How successfully are programs engaging girls with different STEM orientations or different racial/ethnic/economic backgrounds? How successful are existing CS programs in pivoting to be more accessible to females? Many nonprofit organizations cannot effectively answer these questions because they lack the capacity for program evaluation. Some organizations delay putting evaluation into place, or use a one-dimensional evaluation approach (i.e., a single survey) even though ongoing and comprehensive evaluation results are crucial to program success. Building internal evaluation capacity can help organizations meet their most critical evaluation needs and build systems of continuous improvement. This BOF session will engage participants in discussing their challenges in designing and implementing program evaluations. Participants will have the opportunity to share strategies, evaluative resources, and challenges in building evaluative capacity and conducting effective evaluations. Discussion leaders will share resources developed as part of an evaluation capacity building initiative with informal CS education programs--CS Outreach Program Evaluation Network (CS OPEN--a collaboration between the National Girls Collaborative and Google). As an outcome of this BOF discussion, we hope to collectively identify some lessons learned and next steps for building evaluative capacity around informal CS education.",Strengthening Informal CS Education Program Delivery through Evaluation Capacity Building (Abstract Only),NA:NA:NA:NA,2017
Michael P. Rogers:Bill Siever,"The recipe might not sound particularly exciting: take a microcontroller, garnish with sensors and various output devices, season with a bit of code, and then network until done: but the result -- the Internet of Things (IoT) -- is a rapidly burgeoning field that provides a novel and enticing context for sophomore to senior level students to hone their networking, coding, problem solving and presentation skills, exercise their creativity, and unleash their entrepreneurial spirit. In short, it is a perfect mid-to-upper division elective course. Faculty considering such a course are faced with a myriad of difficult decisions, however, including the appropriate class level, course structure, prerequisites, and platform choice. The purpose of this session is to bring together people who have taught, or are considering teaching, IoT, to discuss these issues. Topics may include: a) an overview of platforms and tools, b) appropriate course topics, c) platform acquisition, deployment, and costs, d) identification of support materials (e.g., classroom friendly materials/guides/documentation), e) appropriate prerequisites, f) IoT platform fidelity (i.e. will the experience translate to real-world IoT skills), and g) discussion of potential broader curricular advantages that come from including IoT topics..",An IoT BOF (Abstract Only),NA:NA,2017
Rafi Santo:David Phelps,"Do different people hold different reasons for promoting universal computer science education (CS4All)? Do different rationale for CS education imply different learning designs? Is it possible to design educational activities that meaningfully integrate multiple purposes and visions? As CS4All initiatives kick off in localities across the United States, we believe that these questions are key to developing policies, pedagogies and technologies that actually are 'for all'. In this session, participants will engage in a facilitated conversation supported by an informal collaborative tabletop card game. The game, meant to promote reflection, debate, discussion and ideation around CS education, will engage participants as designers tasked with integrating multiple commonly-held values and visions of Computer Science education into a concrete learning activities. The goal of this informal activity and brainstorm is not to become a master designer in 45 minutes. Rather, this design challenge acts as a launching pad to have meaningful discussions around the various visions of Computer Science education and what it looks like to translate these visions into practice. We will also invite participants to give feedback on their experience using the game as a conversation starter, with the hope that it might be used by others engaged in deliberations around how to design CS educational experiences. The game will be supplementing an ongoing research project, ""CSed Visions"" (http://wp.me/P3GrOX-ek) that investigates the role that visions and values play in Computer Science education.",CS4What?: A Game-based Discussion about the Purposes of Universal Computer Science Education (Abstract Only),NA:NA,2017
Deborah Seehorn:Lissa Clayborn,"Computer Science education in the K-12 school system is in the forefront of education news. Schools, districts, and states are looking for guidance in developing and delivering standards-based computer science curriculum in K-12 schools, and many are turning to the CSTA standards. The CSTA K-12 Computer Science Standards have been revised and align to the K-12 CS Framework. The standards delineate what CS concepts students are to know and what CS practices students are to be able to do at the various grade levels. President Obama and the OSTP have initiated a widely supported Computer Science for all initiative for K-12 education in the US. How do the newly revised CSTA K-12 CS Standards support the CS for All initiative? How can the standards be used by individual teachers, curriculum developers, and administrators to develop their K-12 Computer Science Education program? This BOF will provide a forum for participants to share how they are using the CSTA standards and what successes and challenges they have encountered.",CSTA K-12 CS Standards for All (Abstract Only),NA:NA,2017
Mark Sherriff:Christopher Gregg:Shawn Lupoli,"Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts, and greater pay as demonstrated by excellence in teaching, educational material development, and service. As this type of position has been growing rapidly in popularity, CS departments have been developing the expectations and responsibilities for such faculty almost ad hoc, creating policies that can be vastly different similarly-named positions at other universities. This birds-of-a- feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.",Teaching Track Faculty in CS (Abstract Only),NA:NA:NA,2017
Donald Slater:Eric Brown:Wanda Dann,"This session is for anyone currently using Alice 2 and/or Alice 3, or those exploring the possibility of using Alice in their curriculum. The discussion leaders and attendees will share teaching strategies, tips, and techniques with each other and those new to Alice. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources. There will be a special emphasis on mapping Alice curriculum and instructional materials to CSTA, CSP, code.org and ACM curriculum standards and guidelines for a wide range of age/grade levels. The team will also share feedback from the Beta users of the new textbook and CS Principles Course.",Mapping Alice Curriculum to Standards: A BOF for the Alice Community (Abstract Only),NA:NA:NA,2017
Anya Tafliovich:Jennifer Campbell:Daniel Zingaro:Francisco Estrada:Leo Porter,"With growing enrolment and ongoing research into best practices for team work, many instructors are rethinking how to form, evaluate, and manage teams. In this BoF, instructors will discuss the strategies they have employed, the effectiveness of those approaches, and the tools that support administering teams. Discussion topics may include self- and peer-evaluation, grading strategies, software support, and conflict resolution.",Forming Strong and Effective Student Teams (Abstract Only),NA:NA:NA:NA:NA,2017
Gloria Childress Townsend,"In January 2004, we organized the second SIGCSE Committee (""Expanding the Women-in-Computing Community""). Our 14th Annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ABI, ACM-W, CDC, CRA-W, NCWIT. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organizations and who do not customarily have an opportunity to share ideas face-to-face.",A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only),NA,2017
Richard Weiss:Ambareen Siraj:Jens Mache:Elizabeth Hawthorne:Blair Taylor:Siddharth Kaza:Michael E. Locasto,"We have been teaching cybersecurity using hands-on, interactive exercises that have successfully engaged students. However, in order to meet the increasing demand for security professionals, we need to greatly expand the community of faculty teaching in this area. We would like to bring together new and experienced faculty to do this. Ambareen Siraj has set up a dedicated Facebook group to allow us to work together outside of SIGCSE events, but we need to develop a critical mass of users. During the BoF, we will encourage participants to sign up for the closed group, and we will have an exercise where they ask and answer questions about what they want from this learning community. One benefit of having a learning community is that it will be easier to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts, including our own (e.g. Security Injections, the Security Knitting Kit project, and EDURange). The BoF also benefits experienced members, helping them to reach other faculty with similar interests. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. For the last five years, we have been doing that at SIGCSE. We will discuss ways to integrate security-related exercises into existing courses. The questions we will ask are, ""What exercises have you tried? What are your experiences? What are you looking for from the community?""",Building and Supporting a Community of CS Educators Teaching Cybersecurity in 2017 (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2017
Pat Yongpradit,"With the explosive growth and interest in computer science, the CS education research community has been been asked significant questions from the K-12 community: What should students learn in a K-12 computer science pathway? When should they learn particular concepts? How do you implement computer science for all students? How can computer science be integrated into other subjects? The ACM, Code.org, CSTA, Cyber Innovation Center, and National Math and Science Initiative have collaborated with lead states/districts and the CS education community have developed the K-12 Computer Science Framework, a high-level guide for states or districts who want to design curriculum, standards, assessments, or teacher development programs. The framework identifies the core concepts and practices at grades 2, 5, 8, and 12. Yet the research base for the framework is incomplete. The BOF session will allow researchers to discuss opportunities in K-12 CS ed research within five areas related to the implementation and future of the framework: Equity and access, Learning progressions, Pedagogical content knowledge, Facilitating learning in other disciplines, and Policy and implementation within K-12 education systems.",Researching the K-12 Computer Science Framework (Abstract Only),NA,2017
Dominic A. Amato:Ugochi Acholonu,"This workshop introduces participants to the Digital Youth Network's Minecraft City Server; a project that seeks to lower the barrier of who can lead computing-related learning opportunities for diverse youth. We present teaching techniques and advice for adapting the Minecraft platform as an educational portal based upon the research we have done with youth across Chicago. Participants will receive handouts describing mentorship techniques and curriculum models that facilitate learning interactions in a blended space. Of critical focus will be exploring the question of how to coordinate mentorship when working in two learning spaces (online and physical) simultaneously. Handouts will be supplemented with a discussion of the adult support roles that we identified as being critical to running engaging Minecraft learning experiences for youth. The workshop will also allow participants to experience the affordances of Minecraft to create an engaging blended learning environment that teaches computational concepts. Participants will receive a hands-on introduction to the basic game mechanics, designing with Redstone, the in-game equivalent to electrical circuitry, and exploring computer programming in-game with Python.",Designing Blended Learning Models to Support Computational Learning: Minecraft Edition (Abstract Only),NA:NA,2017
Edwin Franklin Barry,"Computer systems courses are often challenging to students who must learn the characteristics and behavior of a variety of system components and tools across multiple levels of abstraction. This workshop shows how microcontroller-based projects (""micro projects"") can make topics such as data/program representation, bit-manipulation, I/O operation, event-handling, and digital communication more visible, concrete, and motivating. Participants will learn to use a low-cost hardware platform (programming in C/C++) to develop two example micro projects that demonstrate bit manipulation using digital I/O, and event handling with interrupts. We discuss how these projects may be extended or modified to introduce other topics, including microcontroller ISA, assembly language programming, and stack operation. Other project examples will be presented that use serial communication, timers, and a simple multitasking executive to illustrate program/data representation, digital communication, optimization, and operating system principles. We will discuss ways micro projects can be integrated into systems courses at various levels of the curriculum (by varying scaffolding) or used as a framework for an embedded systems/physical computing course. In addition to handouts, we supply participants with the software and hardware for use during the workshop and sources for acquiring them for future classroom use.",Micro Projects: Putting Light and Magic into Learning Computer Systems Concepts (Abstract Only),NA,2017
Bradley Beth:Amy Moreland,"UTeach Computer Science Principles (CSP) is a classroom-ready curriculum designed in alignment with the CSP framework and endorsed by the College Board for Advanced Placement (AP) Computer Science Principles implementation. Piloted in dual enrollment format with 700 high school students, and refined iteratively from 2011--2015, UTeach CS Principles is now being offered in about 300 high schools, and preliminary data suggest great promise for broadening the participation of students from historically underrepresented groups in computing. Building on UTeach's foundation of teacher preparation and advocacy, UTeach CS Principles teachers receive intensive implementation training and support, including comprehensive teacher materials, regional summer workshops, regular remote micro-workshops during the school year, dedicated phone/email coaching, and access to an online professional learning community. The UTeach professional learning model encourages the participation of teachers with a variety of backgrounds and levels of experience, and leverages participating teachers' diverse areas of expertise to strengthen learning and support opportunities for all participants. By 2017, online professional learning modules will be available to rural teachers and others who are otherwise unable to attend a summer workshop. K-12 educators and school and district administrators should plan to attend this hands-on workshop. Presenters will engage participants in demonstration lessons and activities, and participants will leave with materials for immediate use in K-12 computer science classrooms. Opportunities for professional learning and support also will be discussed. Laptops are required.",UTeach CS Principles: Broadening Participation Through K-12 Computer Science Education and Teacher Professional Learning and Support (Abstract Only),NA:NA,2017
Neil C.C. Brown:Amjad Altadmri,"BlueJ is a beginner's IDE for Java which has been in popular use for over ten years. But it continues to improve and evolve: BlueJ 4.0.0 was recently released with several new features. Git support has been added in a user-friendly way, and the support for writing JavaFX GUI applications has been improved. BlueJ 4 also includes the frame-based Stride editor (previously seen in Greenfoot), which allows for block-like programming. BlueJ 4 also retains all its existing functionality such as interactive object creation and method invocation, a ""REPL""-like code pad, a debugger and testing support. This workshop, run by the developers of BlueJ, will take the participants, whether new to BlueJ and Java or long-time users, through the new features while also providing an introduction/refresher on the existing capabilities of the software. Participants will learn how to share BlueJ projects via Github, create a new JavaFX application, dabble with Stride and get a tour of the existing BlueJ functionality. A laptop with BlueJ 4.0 installed is required.","What's New in BlueJ 4: Git, Stride and more (Abstract Only)",NA:NA,2017
Josh Caldwell:Dani McAvoy:GT Wrobel,CS Discoveries: An Introductory Course for Late Middle and Early High School,CS Discoveries: An Introductory Course for Late Middle and Early High School (Abstract Only),NA:NA:NA,2017
Aaron Dingler:Peter Bui,"With the recent emphasis on Parallel and Distributed Computing topics in the Computer Science Curricula 2013, instructors are increasingly incorporating these topics into their undergraduate courses. Unfortunately, many universities lack the dedicated computing resources to provide hands-on experiences in this area. This workshop guides attendees through the open source WorkQueue software to teach parallel and distributed computing principles to undergraduate students. WorkQueue is a distributed master worker framework developed by the Cooperative Computing Lab at the University of Notre Dame. WorkQueue is well-suited for inclusion in undergraduate courses due to the ease of use and deployment on a wide range of computer systems, low administrative overhead, and scalability. WorkQueue can be deployed on any system, from a small Raspberry Pi cluster to a high-performance grid computing environment. This workshop walks attendees through the use of WorkQueue with three demonstrations: a ""live demo"" such as would be used to engage students in the classroom with a hands-on introduction to distributed computing principles, and a guided ""tour"" through two lab assignments. The first lab assignment will give attendees a hands-on example of a simple distributed computing problem from implementation to deployment. The second lab will demonstrate WorkQueue MapReduce, a simple framework that can be used to introduce the MapReduce programming model without the overhead of a Hadoop cluster or equivalent. A laptop is required to participate in the workshop; the presenters will provide a pre-configured Linux VirtualBox virtual machine to facilitate software setup, or attendees can use their own Linux installations.",Teaching Distributed Computing with WorkQueue (Abstract Only),NA:NA,2017
Barbara Ericson:Rebecca Dovi:Ria Galanos,"To reach President Obama's vision of computer science for all, we will need to prepare many more secondary teachers to teach computer science. In 2015, less than 3,000 schools passed the College Board's audit to offer the Advanced Placement (AP) Computer Science (CS) A course, while close to 12,000 schools passed the audit to offer Calculus AB. The presenters have led teacher professional development workshops for many years and will share their knowledge and materials to help others offer effective teacher professional development. In particular they will cover how to plan a workshop, how to find funding, how to prepare materials for secondary teachers, what materials are available for teacher professional development, how to teach pedagogical content knowledge (how to teach computer science), and how to increase diversity in computer science classrooms. The presenters have free materials for the new Advanced Placement Computer Science Principles (CSP) course as well as the Advanced Placement Computer Science A course. These materials include free interactive ebooks for both CSP teachers and students to help them learn programming and a free interactive ebook for the AP CS A course. Participants will be encouraged to share their materials and strategies as well. Laptop Required.",How to Plan and Run Effective Teacher Professional Development (Abstract Only),NA:NA:NA,2017
Tasha Frankie:Duane Wesley:James Gappy:Harry Cheng,"This workshop is an introduction to using Linkbots as a teaching tool to engage students in CS0/CS1 courses, both at the college/university and high school levels. Participants will learn how to program Linkbot robots using RoboBlockly (block-based) and Ch (C/C++ interpreter with ChIDE) in C-STEM Studio through hands-on activities. Additionally, we will present an overview of the curricula developed by the UC Davis Center for Integrated Computing and STEM Education (C-STEM) that integrates robotics into computing and math classes for the elementary school level through the college level. In the second half of the session, participants will gain more hands-on practice and a better understanding of how Linkbots inspire learning in the classroom by forming teams and tackling problems from the annual C-STEM RoboPlay Challenge Competition, which is designed for students to showcase their real-world problem solving skills. Further information about C-STEM is at: http://c-stem.ucdavis.edu/. Laptop with administrative installation privileges is required to install the software used in this workshop.",C-STEM: Engaging Students in Computing with Robotics (Abstract Only),NA:NA:NA:NA,2017
Crystal Furman:Sandy Czajka:Adrienne Decker:Dianna Xu,"This workshop provides participants with hands-on approaches to teaching common algorithms in an AP Computer Science A context, but common in CS1 in general. Teachers will explore strategies for teaching students: how to introduce commonly used algorithms to students; how to have students problem solve using hands-on techniques; how to determine which algorithm to use provided a program specification; write and modify the algorithm; and interpret the result of an algorithm. Together, participants will be looking at the commonly taught and assessed algorithms in first semester computing courses, especially those found on the AP Computer Science A assessment. A set of example free response questions from the AP Computer Science A assessment will be examined to identify how these algorithms are used and modified in solutions.",Engaging Students with Algorithms (Abstract Only),NA:NA:NA:NA,2017
Ananda D. Gunawardena,"The modern teaching should be based on data driven techniques. Yet many of us do not have the resources to collect, analyze and act on course data on a regular basis. The process of collecting data from multiple sources, integrating and analyzing can be a daunting task. The purpose of this workshop is to help simplify this process. The workshop introduces participants to the basic process of establishing a data collection protocol, dealing with institutional review board (IRB) if applicable, setting up an interactive framework to help facilitate data collection, and developing customized dashboards to help support classroom teaching. We will also discuss ways to set up interactive reading and video viewing activities and student collaboration activities to increase student course engagement. These techniques can help collect student interaction data on a regular basis. The workshop will also discuss data integration standards such as Learning Tools Interoperability (LTI) that can facilitate data integration efforts across data rich learning applications that are already in use","How to Collect, Analyze and Act on Learning Data in Computer Science Courses (Abstract Only)",NA,2017
Sarah Heckman:Jeffrey C. Carver:Mark Sherriff,"One of the most important, and difficult, aspects of starting an education research project is identifying an interesting, answerable, repeatable, measurable, and appropriately scoped research question. The lack of a valid research question reduces the potential impact of the work and could result in wasted effort. The goal of this workshop is to help educational researchers get off on the right foot by defining such a research question. This workshop is part of the larger Designing Empirical Education Research Studies (DEERS) project, which consists of an ongoing series of workshops in which researcher cohorts work with experienced empirical researchers to design, implement, evaluate, and publish empirical work in computer science education. In addition to instruction on the various aspects of good research questions, DEERS alumni will join us to mentor attendees in development of their own research questions in small group breakout sessions. At the end of the workshop, attendees will leave with a valid research question that can then be the start for designing a research study. Attendees will also receive information on how to apply to attend the full summer workshop, where they can fully flesh out the empirical study design, and join a DEERS research cohort. More information about DEERS can be found at http://empiricalcsed.org.",Designing Empirical Education Research Studies (DEERS): Creating an Answerable Research Question (Abstract Only),NA:NA:NA,2017
Sean Hickey,"In K-12 classrooms, introductory computer science most often focuses on programming. However, teaching software really only tells half the story of how a computer works. Teaching hardware from an early point in a CS sequence helps to complete the picture for students and demystify what is happening under the hood of the machine. In this hands-on workshop, participants will work in teams to build computational circuits using switches, wires, breadboards, and LEDs. Starting from first principles of boolean logic and binary arithmetic, participants will collectively assemble a working multi-bit addition circuit. This workshop targets K-12 teachers (especially middle school and high school) who have experience teaching programming. Attendees should bring a laptop, if possible.",From Lightbulbs to Logic: Teaching Hardware in Intro to CS (Abstract Only),NA,2017
Stephan Krusche:Andreas Seitz:Nadine von Frankenberg:Bernd Bruegge,"Learning to apply computer science requires practical experience and cannot only be taught in theory. Interactive learning is a new approach: educators teach small chunks of content in short cycles of theory, example, exercise, solution and feedback. It is based on active, computer-based and experiential learning and focuses on immediate feedback to improve the learning experience. It allows students to reflect about the content incrementally. It includes hands-on activities, guidance by the instructor and increases students' motivation and engagement. This workshop describes experiences of multiple interactive learning courses for large classes, including exercises for (1) multiple choice quizzes, (2) interactive tutorials, (3) interactive programming exercises, (4) interactive modeling, and (5) team activities. Based on our experience, we present multiple case studies and concrete examples of interactive exercises. While the assessment of many exercises can be (semi-)automated, teaching assistants in the classroom manually assess other exercises. We show how educators can integrate these exercises into large classes without significantly increasing their effort. Participants should bring a laptop to this workshop.",How to Integrate Interactive Learning into Large Classes (Abstract Only),NA:NA:NA:NA,2017
Zachary Kurmas,"Many students find testing software as difficult and frustrating as they find writing prose. As with writing, no pedagogy will magically replace the need for plenty of practice. Therefore, we believe students should be required to write tests in as many courses as practical. This workshop will present a survey of tools that instructors can use to incorporate testing into many different courses throughout the curriculum. We will begin with a quick review of JUnit, then present tools such as (1) RSpec (Ruby's unit testing framework, on which many other testing frameworks are based), (2) MIPSUnit (MIPS assembly) (3) DLUnit (digital logic and simulated CPUs), (4) CUnit (Operating Systems and Networking), (5) Jasmine (JavaScript), (6) and Cucumber (which has many uses, including system tests on web applications). See http://www.cis.gvsu.edu/~kurmasz/TestingWorkshop for more details. (Note: This workshop is not designed to teach high-level testing principles such as ""what tests do I need?"", or ""how do I know when I've written enough tests?"" Similarly, this workshop will not cover TDD or BDD.)",Testing Across the Curriculum (Abstract Only),NA,2017
Yesem Kurt Peker,"Cryptography is a major area of study that provides mechanisms to achieve confidentiality, integrity, authenticity, and non-repudiation in information and computer security. For many not in the area of cryptography, teaching cryptography may be a challenge due to the mathematically heavy background underlying the subject. For students it may be intimidating to read about cryptography with all the terminology new to them. This workshop provides an introduction to basic functions and terminology of cryptography without going into the details of the specific implementations and the mathematics involved in them. The workshop includes four modules focusing on four main mechanisms of cryptography; namely, symmetric key encryption, public key cryptography, hash functions, and digital signatures and certificates. Each module in the workshop starts with a presentation of the topic and proceeds with hands-on activities. The presentations include descriptions of mechanisms as well as the reasons for using such mechanisms. For example, it provides answers to questions such as what does asymmetric encryption provide us that symmetric key encryption does not? Why are hash functions necessary in digital signatures? Why do we need digital certificates in addition to digital signatures? The participants will receive access to presentations and hands-on exercises as well as supplementary material such as assignments for students and questions for assessment. Educators who want to introduce computer security and cryptography early in their curriculum and students and educators who want to learn the basics of cryptography would benefit from this workshop. A laptop is needed for the hands-on activities.",Modules for Integrating Cryptography in Introductory CS and Computer Security Courses (Abstract Only),NA,2017
Clif Kussmaul:Chris Mayfield:Helen H. Hu,"This workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-5 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach, and has been shown to significantly improve student performance. Workshop participants will work through POGIL activities as students, and work through POGIL meta-activities that are designed to help teachers learn core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses and concepts. For more information, see http://cspogil.org and http://pogil.org, including activities for CS1, CS2, and other courses. Laptops optional.",Workshop: Guiding Students to Discover CS Concepts & Develop Process Skills Using POGIL (Abstract Only),NA:NA:NA,2017
Shawn Lupoli:Karan K. Budhraja,"The workshop will focus on the overall aspects of creating a successful peer grading experience for instructors and students using video rubrics. This includes: determining the right exam rubric, video creation, creating a blind ""coupon"" sheet, using students and class time to grade and storage. A solid rubric is the best candidate for a test to be peer graded. The rubric will be used in creating videos that along with a correct answer, describe each point breakdown in detail. As the instructor, the class meeting is the only time to have everyone together, answer questions, make grading decisions that affect the whole, show the answers, display exam point breakdown, and finally, grade. In order to get all of this done, a private set of videos are created to quicken the information needed for grading. The workshop will use a trial version Camtasia to create the videos. When taking the test, the students are given a test with the blind ""coupon"" cover sheet so later, the student graders are unable to determine which student really took this test - protecting the privacy of the original test taking student. After the tests have been taken, the next class meeting can be set aside for peer grading. The instructor plays the afore mentioned videos which are broken up into segments in order for the student to either the focus on the grading or on their own answer since the possibility of one of them getting it right.",Creating Peer Grading Videos (Abstract Only),NA:NA,2017
David J. Malan:Nikolai Onken:Dan Armendariz,"This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Amazon's Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker ""container"" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional ""less comfortable"" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.",A Web-Based IDE for Teaching with Any Language (Abstract Only),NA:NA:NA,2017
John Maloney:Michael Nagle:Jens Mönig,"The first programming language for most children worldwide today is a blocks-based language like Scratch or Snap. GP is a blocks-based programming language designed to be a follow-on. GP aims to be a general purpose language, like Python or Ruby, in which students can create more complex programs or create standalone applications. GP includes a mechanism for creating modules for others to re-use and a wide variety of primitives, including tools for manipulating CVS and JSON data, using serial port and network connections, and manipulating pixels in pictures or samples in sounds. The language could be used in computer science classes beyond introductory computer science. GP explores the questions: ""How far can we go with a blocks-based programming language? Do we have to move students to a textual programming language to explore advanced computational ideas and applications?"" In this laptop required workshop, participants will try out GP. They will explore sample projects and create their own projects that push on advanced features of GP such as using multiple classes and instances, creating sets of blocks that can be shared as extension modules, using cloud data, or manipulating images and sounds. GP will be released (free and open source) in Summer 2017, so our goal is to find early adopters who are interested in trying GP and developing examples for others.",GP: A General Purpose Blocks-Based Language (Abstract Only),NA:NA:NA,2017
Fred Martin:Samantha Michalka:Harry Zhu:Jere Boudelle,"MIT App Inventor is widely used to introduce students to programming and building mobile apps. In this workshop, we will introduce AppVis, an extension to App Inventor that allows users to create apps that publish data to iSENSE (isenseproject.org), a web-based system for collaborating with data and visualizations. Using AppVis, apps can also retrieve data from iSENSE and display visualizations in the app. This workshop will provide a hands-on introduction to App Inventor, AppVis, and iSENSE. You will build our demo apps, including jump counter, survey, and map-marking. We will have conversations about how to introduce AppVis to your non-majors courses, intro-CS courses, and interdisciplinary teaching. Prior experience with App Inventor is helpful, but not necessary.",Using AppVis to Build Data-rich Apps with MIT App Inventor (Abstract Only),NA:NA:NA:NA,2017
Suzanne J. Matthews:Joel C. Adams:Richard Brown:Elizabeth Shoop,"Parallel computing is one of the new knowledge units in the ACM/IEEE CS 2013 curriculum recommendations. This workshop will present the Raspberry Pi as an inexpensive hardware platform for providing each student with her own parallel processor. The tactile and visceral benefits of each student having her own machine and being able to take full advantage of its multicore capabilities are significant. In this hands-on workshop, we show how parallelism can be used to spread the workload of compute-intensive applications across the multiple cores of a Raspberry Pi, and explore its use as an inexpensive hardware platform for teaching parallel computing. CS educators who are interested in learning about parallel computing, OpenMP, and how to teach these concepts on a Raspberry Pi are encouraged to attend. Attendees will enjoy a hands-on hardware/software experience, exploring how parallel computations operate and work in practice. In Part I of the workshop, attendees will set up and explore a Raspberry Pi multi-core computer in small teams. In Part II, each team will use the parallel capabilities of the Raspberry Pi to explore parallel computation through the use of OpenMP ""patternlets"" published on CSinParallel.org. Part III explores applications of the Raspberry Pi to parallel applications such as image processing and population dynamics, using OpenMP. All materials from this workshop will be freely available from CSinParallel.org.",Teaching Parallel Computing with OpenMP on the Raspberry Pi (Abstract Only),NA:NA:NA:NA,2017
Bradley Miller:Paul Resnick:Barbara Ericson,"Runestone is an open-source ebook platform designed to create and publish interactive computer science textbooks (See http://runestoneinteractive.org/). Runestone textbooks support programming within the browser, code visualizations, and a wide variety of practice activities, from multiple choice and fill-in-the-blank questions to Parsons Problems (drag-and-drop mixed-up code). The presenters have several years of experience developing and using ebooks for CS1, AP CS A, AP CSP, data structures, and web programming. Several studies have demonstrated good usability and positive learning and attitude impacts on students using these ebooks. Runestone ebooks can be customized to meet the needs of individual courses and teachers. The goal of this workshop is to help computer science teachers use and modify Runestone ebooks. The hands-on session will start by leading participants through use of the ebooks as if they were students. Participants will next create their own custom course of any existing ebook in the library and will use the instructor's dashboard to review student activity, modify the course, and grade students. Finally, participants will create their own assignments using Runestone's active learning components, which serves as a starting point for authoring their own content in Runestone. Laptop Required.",Using and Customizing Open-Source Runestone Ebooks for Computer Science Classes (Abstract Only),NA:NA:NA,2017
Briana B. Morrison:Mark Guzdial:Cynthia Lee:Leo Porter:Beth Simon,"In this workshop participants will receive an overview of teaching practices in computer science that research indicates are effective. While the field of computer science education is young, it has uncovered several teaching practices that can be adopted by instructors that can improve both the retention and performance of students. These evidence based teaching practices include active learning techniques such as peer instruction and prior-knowledge activities, pair programming, and use of subgoal labels. Participants will experience firsthand many of these techniques and will be provided with resources on where to find more information, including the original research papers, on each technique. If you want to attend a workshop that will have an immediate impact in your class -- attend this one. The workshop will be interactive, engaging, and show you how to incorporate teaching practices that are empirically proven to provide benefits. You are guaranteed to leave with a list of many freely available resources and ideas to use in your next class. You will also have the opportunity to ""ask the experts"" as the authors of many of these research papers will be leading that session of the workshop.",Evidence Based Teaching Practices in CS (Abstract Only),NA:NA:NA:NA:NA,2017
Krishnendu Roy:Kristine Nagel:Sarah T. Dunton,NA,How to Plan and Run Computing Summer Camps: Logistics (Abstract Only),NA:NA:NA,2017
Ingrid Russell:Zdravko Markov,"The workshop introduces participants to Weka, an open source Data Mining software package written in Java and available from www.cs.waikato.ac.nz/~ml/weka/. The goal of the workshop is to present the basic functionality of Weka that may be used in the undergraduate computer science and engineering curricula. The Weka system provides a rich set of powerful Machine Learning algorithms for Data Mining tasks, along with a comprehensive set of tools for data pre-processing, statistics and visualization, all available through an easy to use graphical user interface. Weka is widely used for educational purposes. Recently, with the increasing popularity of Big Data, it becomes a popular tool for Analytics and Data Science. Weka's rich functionality also allows its use for Text and Web document pre-processing and mining. All this makes it a suitable platform for enhancing the CS curriculum with hands-on exercises and practical projects. The workshop will present examples of such projects and exercises in the area of Web document classification and clustering. The basic steps of document collection, creating the vector space model, data preprocessing, attribute selection, and applying classification and clustering algorithms will be discussed. These topics will be covered in a way that will allow participants with no particular background in machine learning or data mining to appreciate the use of Weka in computer science education.",An Introduction to the Weka Data Mining System (Abstract Only),NA:NA,2017
Bill Siever:Michael P. Rogers,"Internet of Things (IoT) devices -- networked microcontrollers with attached sensors and outputs (LEDs, actuators, etc.) -- are becoming ubiquitous in the home (e.g., smart light bulbs, security systems), on the road (e.g., smart parking meters, traffic control), in industry (e.g., equipment monitoring, asset tracking) and in healthcare (e.g., fitness monitors, drug monitors). Consequently, IoT provides an opportunity to demonstrate the pervasiveness and social relevance of computing. Moreover, today's hobbyist- oriented IoT platforms empower entry-level students to create meaningful, real-world IoT applications. This allows rich computer science topics, such as event driven programming, concurrency, networking, information representation, cloud computing, etc., to be introduced earlier in the curriculum. Most importantly, IoT examples provide a compelling context for students to hone their critical thinking skills while solving engaging, real-world problems. Faculty interested in including IoT topics face several challenges: selecting a suitable set of topics, identifying an appropriate pedagogical approach, and, perhaps most daunting, choosing a cost-effective platform that lends itself to classroom use. This workshop will introduce the basic terms and technologies in IoT, discuss issues that arise when including IoT topics in classes, compare and contrast the most popular platforms for IoT, and walk participants through several classroom-tested, hands-on examples using a classroom-friendly platform (Particle's Photon) where they create both Wi-Fi-based IoT devices and corresponding web apps. Participants will need a laptop (any OS) with Internet access.",An IoTa of IoT (Abstract Only),NA:NA,2017
Kalpathi Subramanian:Jamie Payton,"This workshop introduces participants to the concepts and use of BRIDGES, a software infrastructure designed to facilitate hands-on experience for solving traditional problems in sophomore level computer science courses (data structures, algorithms) using data from real-world systems that are of interest to students, such as social networks (Twitter, Facebook), scientific or engineering datasets (USGIS Earthquake data), Google Maps, etc. BRIDGES provides easy access (typically function calls) to real-world data sets for use in routine data structures programming assignments, without requiring students to work with complex and varied APIs to acquire such data. BRIDGES also provides visualization capabilities, allowing the students to visualize the data structure they have created as part of their assignment. BRIDGES visualizations can be easily shared, via a web link, with peers, friends, and family. Workshop attendees will engage in hands-on experience with BRIDGES and multiple data sets, and will have the opportunity to discuss how BRIDGES can be used to support various introductory computer science courses. A laptop with internet connection is required to participate in hands-on activities.",Increasing Student Interest in Data Structures Courses with Real-World Data and Visualizations Using BRIDGES (Abstract Only),NA:NA,2017
Cynthia Taylor:Joe Hummel:David Hovemeyer:David Bunde:John Dooley:Jaime Spacco,"Peer Instruction (PI) is an active learning technique with over 25 years of research supporting its efficacy in Physics Education. More recently, the CS Education community has found that the benefits of PI are true for CS as well, including lower WDF rates, higher exam scores, and improved retention in the CS major. One of the key differences between PI and traditional lecture is the use of a series of multiple choice ""clicker questions"" in class to challenge the students' conceptual understanding. Students discuss and answer these questions in small groups, then the instructor reviews why each choice was right or wrong with the entire class. The workshop is a practical look at the kinds of clicker questions used in PI. Attendees with see examples of some of our best and worst questions, and also work to design and improve some of their own questions. In addition, we will provide a demonstration of PI, and share our practical experiences in adopting PI in a wide variety of class sizes.",Peer Instruction in Practice (Abstract Only),NA:NA:NA:NA:NA:NA,2017
Richard Weiss:Jens Mache:Michael E. Locasto:Frankly Turbak,"Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to empower faculty to add hands-on security exercises to their courses. We introduce EDURange, a framework for accessing, developing and assessing interactive cybersecurity exercises. We want to reach and engage all students. The first step is to have interesting challenges that are easy to access. EDURange uses VMs in a public cloud, which also provides flexible resources. No software needs to be installed - students only need an ssh client. Another step is to give students feedback on how they are doing. This is an important role for faculty and is not something to automate. Instead, EDURange provides basic tools to visualize what students are doing as they work on the exercises. This allows instructors to more easily see when students are stuck or heading in the wrong direction. Since cybersecurity exercises are often easy to understand but hard to solve, guidance is especially important so that students don't become frustrated. In this workshop, participants will get to try EDURange and several exercises, including an introduction to ssh. Participants don't need to be security experts. We will provide sample syllabuses for an introductory security course as well as an interdisciplinary security course, and we will show how our exercises can be integrated into these courses. More information at http://www.edurange.org. Laptop required.",Hands-on Cybersecurity Exercises That are Easy to Access and Assess (Abstract Only),NA:NA:NA:NA,2017
Victor Winter:Betty Love,"Bricklayer is a freely-available online educational ecosystem designed in accordance with a ""low-threshold infinite-ceiling"" philosophy. Its purpose is to teach coding to people of all ages and coding backgrounds. A significant portion of the Bricklayer ecosystem has been developed specifically to help novices, especially primary school children, learn how to code. When executed, Bricklayer programs can produce LEGO® artifacts, Minecraft artifacts, and even artifacts suitable for 3D printing. Bricklayer resides in a domain in which there is a strong connection between math, art, and computer science. This workshop is suitable for (1) university instructors and faculty who are interested in freshmen-level programming, (2) CS educators who work with and/or teach K-12 teachers in order to deliver coding-based curricula, (2) K-12 teachers and facilitators interested in exploring options for how they might teach coding - either directly as part of the in-school curriculum, or indirectly as part of an after school program. No background in coding is assumed. The aim of the workshop is to provide participants with a general understanding of what Bricklayer coding entails, how it relates to math, as well as providing a framework and road map for learning how to code in Bricklayer. An example of a 10 week (1 hour/week) primary school curriculum will be provided.",Two Birds: Teaching Coding and Math in Primary Schools and Beyond (Abstract Only),NA:NA,2017
Ashish Aggarwal,"Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague & Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.",Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab,NA,2017
Benjamin Romano,"The number of devices connected to the Internet has increased dramatically in recent years, driven in large part by a new movement called the ""Internet of Things"" (IoT). With the IoT, new applications for Internet connectivity have emerged beyond just laptops and smartphones, to unite a heterogeneous collection of connecting points tied to various aspects of daily life (e.g., Internet-enabled appliances, vehicles and wearable computing devices). As more devices are added to the Internet each day, controlling their interaction has become very challenging. The goal of this project is to create a software solution that will manage connected devices and allow users to specify the meaning of the device interactions. To achieve this, we are currently creating an Internet of Things platform, Wendo, to handle device connections, and a website to manage these devices. The platform is hardware agnostic allowing users to run the software on their own devices that support the communication standards they need. Additionally, Wendo can be extended easily to support new communication standards as they are released. To allow non-programmers to take advantage of our platform, we created ThingScript, a simple domain-specific language that has an English-like syntax that can be adopted by end-users to define the relationship between devices. We determine what actions can be performed on a device by requiring a thing definition file (.tdef). This file includes information about the actions, events and public data of each device.",Managing the Internet of Things,NA,2017
Peeratham Techapalokul,"Code smells codify poor coding patterns known to degrade software quality. Block-based languages have proven to be a viable educational and end-user programming paradigm with increasing adoption across a broad spectrum of users and domains. This rising popularity of this programming paradigm calls for a serious look at the program quality written in block-based languages. While code smells in the context of text-based languages have been studied extensively, the research community lacks a comprehensive understanding of code smells in block-based software. To address this problem, we present the results of a large-scale study of code smells prevalent in programs written in the highly popular Scratch programming language. We analyzed programs submitted to the public Scratch repository in 2016, considering a million programs altogether. We discovered interesting relationships between the prevalence of certain smells and the levels of proficiency of the programmers commonly introducing them. Our findings not only can help block-based programmers improve the quality of their software, but also establish the requirements for refactoring support in this programming domain.",Sniffing Through Millions of Blocks for Bad Smells,NA,2017
Daniel Welch,"This work aims to show through a detailed case study that scaling up automated verification to larger non-trivial data structures is not only possible, but when combined with appropriate tool support, can be made more comprehensible and practicable to users in a variety of settings, including the undergraduate curriculum. The study involves an interplay of multiple components annotated with formal interface contracts and the components are all designed to be modular, reusable, and amenable to automated verification and analysis. The components are built using a formal integrated development environment (F-IDE). The plan is to evaluate the F-IDE in an upper-level undergraduate software engineering course in the Spring semester at Clemson University.",Scaling Up Automated Verification: A Case Study and Formal-IDE for the Construction of High Integrity Software,NA,2017
Alec Battles,"Tensors are a natural extension of matrices and vectors. They provide an ideal framework for abstracting relationships between related parameters. In image processing, tensors can be used to represent gradient information. The 2D structure tensor is one such representation, useful in corner detection and non- photorealistic rendering. This abstract summarizes my image processing filter based on the 2D structure tensor that generates artistic abstraction from photographs. With the 2D structure tensor, I explored ways to present the gradient directions of an image as artwork and investigated the relationship between the Gabor filter and the eigenvectors of the 2D structure tensor. Using this filter, I produce images that consist of a dense patchwork of lines, somewhat resembling certain artistic types of pen shading such as hatching and cross-contour shading. By applying this filter, I have found ways to categorize images that display salient groups of parallel lines. These images present a higher artistic quality and display better compositional style after being processed using the 2D structure tensor than the average photograph. Another finding is that not all resolutions of images are ideal for structure tensor processing and that an image size of 700-1000 pixels per side yields the best results from both a mathematical and artistic standpoint.",The Application of the 2D Structure Tensor in Visual Arts and Design,NA,2017
James W. Belford,"The Urban Archivist Application is designed to capture Urban Artwork and its associated metadata from around the world. The Application itself is available for mobile platforms and has a web-interface for viewing the data. Urban Archivist allows users to take photos of urban art they may find while out in the field on research. Once these photos are gathered, the application will automatically grab all the associated metadata from the image and populate those field within the application, minimizing user error. The user will then enter their own findings regarding the image and may upload it to the central database. This art and its associated metadata is instantly available to view by any individual using either the web or mobile Urban Archivist interface. Furthermore, we want to be able to build a dataset large enough to explore and contribute to the realms of machine learning and virtual reality. The goal of this research project is to implement something that has been done prior, while adding modern technological options available to increase the research opportunities for Computer Science and Humanitarian scholars. Preliminary tests via the prototype confirmed the project's ability to achieve this goal.",Urban Archivist Application,NA,2017
Lukasz Brodowski:Cameron Dziurgot:Donald Moretz,"Passkeys have been around since personal phones have existed. The typical numeric PIN offers a limited number of combinations and is relatively easy to crack by guessing or eavesdropping. A tap sequence used as a passkey offers an infinite number of different combinations making it unique to that person and that person alone. Once a passkey is saved, it can be compared using the Euclidean distance formula to any other passkey resulting in a dissimilarity score to the master key. If this score is within a certain threshold, that passkey will grant or deny the user access. Our results show that it is possible to authenticate using a unique tap sequence, and convenient enough to be used every day to unlock a personal device.",Tapped-based Authentication for Mobile Device Security,NA:NA:NA,2017
Joshua W. Buck:Saverio Perugini,"Specification and implementation of flexible human-computer dialogs is challenging because of the complexity involved in rendering the dialog responsive to a vast number of varied paths through which users might desire to complete the dialog. To address this problem, we developed a toolkit for modeling and implementing task-based, mixed-initiative dialogs based on metaphors from lambda calculus. Our toolkit can automatically operationalize a dialog that involves multiple prompts and/or sub-dialogs, given a high-level dialog specification of it. Our current research entails incorporating the use of natural language to make the flexibility in communicating user utterances commensurate with that in dialog completion paths.",Mixed-initiative Personal Assistants,NA:NA,2017
Eduardo J. Castillo:Xenia Mountrouidou:Xiangyang Li,"Covert channels are unique methods for exchanging messages, since they permit sending information secretly. Unlike encryption, covert communication allows to send information covertly, using an otherwise legitimate medium of transfer, thus it is not apparent that a message is being transferred at all. There is limited research on Covert Timing Channels (CTCs), i.e., channels that manipulate packet inter-arrival time to exchange messages based on a certain encoding. Implementing and testing CTCs in real network environments is lacking in the current literature due to sensitivity to network delays that significantly affects this type of communication. Thus, it is important to implement CTC communication to analyze the challenges of creating robust, efficient, and undetectable channels in real life situations. It is also paramount to test these implementations in a wide range of realistic network conditions. In this research, we have developed and tested two implementations of CTCs. The first implementation is based on [1] using standard bits encoding and ASCII for simplicity and robustness. This implementation suffers from easy detection. On the other hand, we developed the second implementation with goal to make the channel undetectable by using encoding with five different delays, i.e., symbols, where five symbols in a specific order correspond to one letter of the alphabet. This implementation has sufficient randomness to be undetected with standard statistical mechanisms. We have tested both implementations on local networks, the Global Environment for Network Innovations (GENI) controlled environment, networks across states in the US, and internationally.",Time Lord: Covert Timing Channel Implementation and Realistic Experimentation,NA:NA:NA,2017
Jianting Chen:Medha Gopalaswamy:Prabir Pradhan:Sooji Son:Peter-Michael Osera,"There is a natural correspondence between mathematical proofs and computer programs. For instance, a recursive function and its correctness relate directly to inductive proofs in mathematics. However, many undergraduate students feel a disconnect between mathematics and computer science. There are several proof assistant tools which have been used by the educational community to introduce such concepts to students, but since these tools are not primarily created for educational purposes, students often do not benefit from them to the expected extent. We have created an educational tool that draws from the benefits of existing provers and assistants and includes a novel proof language that mimics handwritten proofs. By creating a proof assistant with an intuitive user interface and a rich mechanism for providing constructive feedback, we hope to bridge the gap that many introductory computer science students find between mathematical proofs and program correctness.",ORC2A: A Proof Assistant for Undergraduate Education,NA:NA:NA:NA:NA,2017
Josephine K. Chow:Xiangyang Li:Xenia Mountrouidou,"Messages through covert channels may contain valuable information either in clear text or encrypted. This study focuses on a Covert Storage Channels (CSC) in TCP/IP network packets that uses the 6-bit TCP flag header to transmit messages between accomplices. It uses relative entropy to characterize the irregularities in the TCP flags. First a normal profile of TCP flags is represented by their frequency distribution of regular traffic packets. Then the TCP flag frequency distribution in network traffic is computed for each unique IP pair. The distance of the testing traffic data set from this normal profile is the relative entropy between these two distributions. Moreover, to evaluate the performance of the proposed method this study uses real regular traffic data sets as well as CSC messages generated for both clear text and encrypted forms of a list of keywords common in Unix systems. Different approaches are used to choose the packets to be included in extracting the TCP flag frequencies. The experimentation results by Receiver Operating Characteristic (ROC) curves have shown that the method is promising to choose the best control threshold to differentiate normal and CSC traffic packet streams.",Raising Flags: Detecting Covert Storage Channels Using Relative Entropy,NA:NA:NA,2017
Philip J. Costello,"This research project investigates the vulnerabilities of civilian Unmanned Aerial Vehicles (UAV) systems and how they can be exploited by law enforcement should a UAV be utilized in a terrorist attack against the United States. Research into the vulnerabilities of civilian UAVs focused primarily on how such systems could be compromised and taken over by a third party, and for law enforcement to exploit as a potential countermeasure. In particular, the focus of the research was on using Internet Protocol (IP) Address and Media Access Control Address spoofing to spoof the UAV controller. Multiple techniques of spoofing attacks were conducted to compromise the UAV systems and allow for precision control from a third party computer. Additional research was conducted into intercepting an autonomous UAV via spoofing. This paper identifies the threats that UAVs pose to the United States, while providing a reliable and safe way to counter certain hostile UAV threat scenarios.",Identifying and Exploiting Vulnerabilities in Civilian Unmanned Aerial Vehicle Systems and Evaluating and Countering Potential Threats Against the United States Airspace,NA,2017
Christopher Gillespie:Mark Moore:Colin Brown,"A mesh is the discretization of a geometric domain into small, simple shapes. The focus of this project is the generation of strictly convex quadrilateral (quad) meshes with provable quality guarantees through the conversion of good quality triangle meshes of planar straight line graphs. The conversion is achieved with an algorithm that uses the dual graph of the input triangulation to quadrangulate small groups of triangles at a time [1,3,4]. A specific goal of the project is proving an upper bound on the aspect ratios of all quads in the mesh. We implement two different metrics to measure the aspect ratios of the quads in the generated meshes. The first metric simply takes the ratio of the longest edge to the shortest edge for each quad. The disadvantage of this method is that it does not take into account the angle measures of the quads. The second approach, a method developed by John Robinson [2], utilizes both edge lengths and angle measures to calculate aspect ratio. We develop code to produce empirical results for both metrics of aspect ratio measurement and histogram plots showing the distribution of quad aspect ratios in a given mesh. With these experimental results, we aim to prove that, given a good quality input triangle mesh with a minimum angle bound, we can give a provably good upper bound on aspect ratio for the resulting quad mesh.",Quadrilateral Mesh Generation with a Provably Good Aspect Ratio Bound,NA:NA:NA,2017
Joseph Jamison,"This project attempted to find a solution to the problem of declining yield rates at colleges and universities around the nation. Yield rate, the rate at which accepted students decide to enroll at a given school, is important to a school for academic, economic and logistical reasons. As such, this project aimed to raise the yield rate at Davidson College by applying machine learning techniques to applicant data in order to predict the yield decisions of the applicants. Using these techniques, a model was created that predicted applicants' yield decisions with 86% accuracy. With these predictions, Davidson College can have a better understanding of their yield and can consequently make more informed, tactical admissions decisions, thus raising their yield rate.",Applying Machine Learning to Predict Davidson College's Admissions Yield,NA,2017
Jakub Jancek:Darya Aleinikava:Grace M. Mirsky,"The Microsoft Kinect® provides a low-cost solution for measuring distance; however, it has poor performance in bright light conditions. The focus of this project is to design a system to autonomously adjust a pair of polarizing filters in order to effectively utilize the Kinect®'s depth measurement capabilities in different lighting conditions, including outdoor applications. A system designed to dynamically change the orientation of the polarizing filters to select the optimal depth image, without manual adjustment, is the novel contribution of this work. Our approach involves a feedback loop that allows the system to autonomously determine which filter position results in the best image and rotates the filter automatically. Furthermore, the system can perform these tasks periodically over time as light conditions change. This system captured images of objects at various distances from the sensor in different lighting conditions to determine the system performance. Our experiments have demonstrated the effectiveness of dynamically adjusted polarization filters to actively select the best depth image, even in environments challenging for the Kinect®.",Optimizing Kinect® Depth Sensing Using Dynamic Polarization,NA:NA:NA,2017
Zane Ryan Johnston,"The vocal user interface (VUI) Myna allows a user to interact with the block-based language development environment Scratch. Unfortunately, the original implementation of Myna does not allow for screen resolutions outside of its original implementation, for the scrolling of scrollbars, and the navigation of prompts and dialogs created by Scratch, essentially halving its functionality relative to what the Scratch graphical user interface (GUI) offers. In this paper, I offer three solutions to these problems, which will be evaluated by Computer Science students and users with mobility impairments in order to determine the validity of these solutions as well as the user's satisfaction with Myna and using voice as an input modality.",One Size Doesn't Fit All,NA,2017
Amy MacDonough,"Ideally, we would always be able to write clear, concise programs and have them run quickly. One major impediment is the redundancy which can occur in direct recursive solutions. In some cases, this means writing a loop even if the programmer is more comfortable thinking in terms of recursion. In other cases the impact on code is even more dramatic, and in these cases most programmers choose to sacrifice clarity in exchange for improved asymptotic complexity. There exist program transformation techniques that would allow us to write idiomatic recursive programs without losing efficiency. One such transformation is the ""tupling"" transformation, which can and has been implemented as an automatic compiler optimization. This transformation is, however, only applicable to a narrow class of problems. We are exploring related transformations, such as tabulation, which can helpfully be applied to a wider class of recursive programs, and attempting to answer the question of when these transformation techniques are most useful to programmers aiming to balance program clarity with performance.",Recursive Convergence,NA,2017
Sierra Magnotta:Anushikha Sharma:Jingya Wu:Darakhshan J. Mir,"Understanding of computing skills and concepts is no longer viewed as optional, but is knowledge that is required to progress in several fields outside of computer science, even outside STEM fields. Despite the need for this knowledge, non-STEM majors' participation in computing courses is still lacking. This is especially true for women and other minority groups. In our work, our main motivation was creating a course at our institution, Bucknell University to make computer science more accessible to non-STEM majors on our campus. We adopted an approach of situating course design in the experiences and perspectives of undergraduate students themselves. To achieve this, the course curriculum and materials were mainly designed and created by three undergraduate students, all below the junior level, who connected course topics to a wide variety of topics outside computing. This project is based on the precept that students from varied disciplinary backgrounds and intermediate computing knowledge can provide a unique lens to articulate the needs of their fellow students. In order to serve the purpose of emphasizing creativity and society, we chose a sketch based programming language, namely p5.js (a JavaScript library which brings Processing to the web), which gives students the possibility and flexibility to create projects that are directly relevant to their own interests, while gaining a basic conceptual understanding of Computer Science",Creative Computing and Society: When Undergraduates Design a Curriculum for an Introductory Computing Course,NA:NA:NA:NA,2017
Hannah E. Murphy,"In this study, we evaluate a new electronic mobile application, PGA (Programming Grading Assistant). It was designed to make grading paper-based exams easier for graders and professors. Not only does it facilitate grading, but PGA also provides students with more meaningful (semantic) feedback than non-PGA grading. We outline the PGA grading process, the execution of a user study, and the results from that study that prove the effectiveness of PGA technology. Other results indicate that PGA awarded grades are equivalent to red-pen awarded grades and that PGA grades are more consistent across the board.",Digitalizing Paper-Based Exams: An Assessment of Programming Grading Assistant,NA,2017
Meghana Subramaniam:Veronica Cateté,"Computer science education in high school is fundamental for increasing the diversity in computing majors at a university level. However, computer science is not often taught in America before university, and usually, the professionals who teach it are not trained experts in computer science concepts and terminology. In this paper, we introduce a new style of coding rubric, which allows teachers to better understand the fundamentals of the course being taught. In the scope of this research, we focus solely on the Beauty and Joy of Computing, an AP Computer Science Principles course. Coding assignments were collected from two groups of students, and assignments were graded and compiled by raters. After being rated, the rubrics were modified to be better adapted to teachers' expectations.",A Pathway to Strengthening Support for Beauty and Joy of Computing Teachers,NA:NA,2017
Nath Tumlin,"COPPER (CustOmizable Puzzle Programming EnviRonment) is a meta-configurable tool for creating coding puzzles on a grid using a blocks-based programming language, similar to puzzles in Code.org's Hour of Code. COPPER has the potential to increase student interest and engagement by allowing a teacher to customize levels for individual classes or students. Teachers can create characters for specialized puzzles by uploading pictures to customize their appearance and using the block-language to design the character's behavior. They can then place these characters onto a grid, and arrange them into a puzzle for their students to solve. A teacher can specify the goal of each coding puzzle, as well as restrict which blocks a student may use, allowing a teacher to gradually introduce programming concepts. For example, an elementary school teacher could highlight concepts from a history lesson by building a customized grid where characters from a historical context navigate around objects relevant to the topic being studied. COPPER uses Google's Blockly framework to eliminate the mental overhead of memorizing textual syntax, allowing students to focus on building computational thinking skills. Block-based languages have been shown to be more effective than text-based languages when teaching programming to first-learners. Combined with customization, COPPER has the potential to lead to higher student interest and comprehension of programming concepts in a customized context. This poster will also summarize results obtained through initial experimentation through collaboration with K-8 teachers and their students.",Teacher Configurable Coding Challenges for Block Languages,NA,2017
Haoze Wu,"In this project, we aimed to improve the runtime of Minisat, a Conflict-Driven Clause Learning (CDCL) solver that solves the Propositional Boolean Satisfiability (SAT) problem. We first used a logistic regression model to predict the satisfiability of propositional boolean formulae after fixing the values of a certain fraction of the variables in each formula. We then applied the logistic model and added a preprocessing period to Minisat to determine the preferable initial value (either true or false) of each boolean variable using a Monte-Carlo approach. Concretely, for each Monte-Carlo trial, we fixed the values of a certain ratio of randomly selected variables, and calculated the confidence that the resulting sub-formula is satisfiable with our logistic regression model. The initial value of each variable was set based on the mean confidence scores of the trials that started from the literals of that variable. We were particularly interested in setting the initial values of the backbone variables correctly, which are variables that have the same value in all solutions of a SAT formula. Our Monte-Carlo method was able to set 78% of the backbones correctly. Excluding the preprocessing time, compared with the default setting of Minisat, the runtime of Minisat for satisfiable formulae decreased by 23%. However, our method did not outperform vanilla Minisat in runtime, as the decrease in the conflicts was outweighed by the long runtime of the preprocessing period.",Improving SAT-solving with Machine Learning,NA,2017
Ziyan Yang,"Polygonal meshes have become the industry standard for the representation of surfaces with highly complex geometry and arbitrary genus in computer graphics and geometry processing applications. We investigate how to extend a point-set algorithm that utilizes a quadtree subdivision to construct a quadrilateral mesh with both angle and aspect ratio bounds. The main goal is to adapt the algorithm to respect polygonal edges so that we will obtain a method to mesh polygonal regions (possibly with holes), with quadrilateral elements that have guaranteed worst-case minimum and maximum angles as well as aspect ratio (longest edge over shortest). Currently, there is no known algorithm that generates quadrilateral meshes with both angle and aspect ratio guarantees.",Quadrilateral Mesh Boundary Classification and Editing,NA,2017
Dan Garcia:Tiffany Barnes,NA,Session details: Opening Keynote,NA:NA,2018
Brenda Darden Wilkerson,"As founder of the original Computer Science for All (CS4All) initiative in the Chicago Public Schools, Brenda Darden Wilkerson set the standard for integrating computer science classes into the curriculum for every student. Now, she's leading the charge to break down barriers for women and members of other underrepresented minorities in the tech industry. She argues that, while many administrators and community leaders see CS4All as merely a key component of a new core curriculum, CS educators are actually sowing the seeds of the next workplace revolution. In this inspirational keynote, Brenda will share the ways that educators on the front lines of this inclusive movement can expect to reap the fruits of their labor -- not just professionally, but personally -- in surprising ways. And she'll spotlight the historic role of women, and people of color, in technology and computer science, offering examples that will better allow us all to reclaim our rightful seats at the table.",The Evolution Before the Revolution,NA,2018
Becky Grasser,NA,Session details: Paper Session: Automated Support for Education,NA,2018
Luciana Benotti:Federico Aloi:Franco Bulgarelli:Marcos J. Gomez,"In this paper we do three things. First, we describe a web-based coding tool that is open-source, publicly available and provides formative feedback and assessment. Second, we compare several metrics on student performance in courses that use the tool versus courses that do not use it when learning to program in Haskell. We find that the dropout rates are significantly lower in those courses that use the tool at two different universities. Finally we apply the technology acceptance model to analyse students perceptions.",The Effect of a Web-based Coding Tool with Automatic Feedback on Students' Performance and Perceptions,NA:NA:NA:NA,2018
Emmanuel Schanzer:Kathi Fisler:Shriram Krishnamurthi,"Bootstrap:Algebra is a curricular module designed to integrate introductory computing into an algebra class; the module aims to help students improve on various essential learning outcomes from state and national algebra standards. In prior work, we published initial findings about student performance gains on algebra problems after taking Bootstrap. While the results were promising, the dataset was not large, and had students working on algebra problems that had been scaffolded with Bootstrap's pedagogy. This paper reports on a more detailed study with (a) data from more than three times as many students, (b) analysis of performance changes in incorrect answers, (c) some problems in which the Bootstrap scaffolds have been removed, and (d) an IRT analysis across the elements of Bootstrap's program-design pedagogy. Our results confirm that students improve on algebraic word problems after completing the module, even on unscaffolded problems. The nature of incorrect answers to symbolic-form questions also appears to improve after Bootstrap.",Assessing Bootstrap: Algebra Students on Scaffolded and Unscaffolded Word Problems,NA:NA:NA,2018
Laura Zavala:Benito Mendoza,"In introductory programming courses, proficiency is typically achieved through substantial practice in the form of relatively small assignments and quizzes. Unfortunately, creating programming assignments and quizzes is both, time-consuming and error-prone. We use Automatic Item Generation (AIG) in order to address the problem of creating numerous programming exercises that can be used for assignments or quizzes in introductory programming courses. AIG is based on the use of test-item templates with embedded variables and formulas which are resolved by a computer program with actual values to generate test-items. Thus, hundreds or even thousands of test-items can be generated with a single test-item template. We present a semantic-based AIG that uses linked open data (LOD) and automatically generates contextual programming exercises. The approach was incorporated into an existing self-assessment and practice tool for students learning computer programming. The tool has been used in different introductory programming courses to generate a set of practice exercises different for each student, but with the same difficulty and quality.",On the Use of Semantic-Based AIG to Automatically Generate Programming Exercises,NA:NA,2018
Patrick Kinnicutt,NA,Session details: Paper Session: Courses for Non-majors,NA,2018
Zoë J. Wood:John Clements:Zachary Peterson:David Janzen:Hugh Smith:Michael Haungs:Julie Workman:John Bellardo:Bruce DeBruhl,"Since 2010, the Cal Poly Computer Science Department has required computing majors to select from a variety of CS0 courses to start their academic year. The broad objective of the course is to attract and retain undergraduates that have no prior experience in CS by using authentic problems that demonstrate the relevance and highlight the role of computers in solving ""real world"" problems. The course is offered in a variety of thematic ""flavors"" that leverage a student's pre-existing interests (e.g. in music or art), but all share the common goals of introducing students to the basics of programming, teamwork, and college-level study. While there is overlap in overall goals, the courses vary drastically in topic matter (e.g. robotics, gaming, music, computational art, mobile apps, security) and in pedagogical approach (e.g. principles of design, project-based student driven learning, and traditional topic-based programming modules). The introduction of this CS0 course has increased students' commitment to their major and success in follow-on classes. We present these successes and show that student GPAs in a follow-on object oriented programming course do not vary significantly for the differing subtopics and teaching pedagogies employed in the various flavors. Our report includes examining two student subgroups (those experienced with programming and those new to programming). Our evaluations suggest that the existence and goal of the course matter more than the specific content, with all subtopics and pedagogical approaches performing well.",Mixed Approaches to CS0: Exploring Topic and Pedagogy Variance after Six Years of CS0,NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Jessica Q. Dawson:Meghan Allen:Alice Campbell:Anasazi Valair,"Demand for computing courses from students in disciplines outside of Computer Science is growing. This growth has created increasing challenges in offering one-size-fits-all CS1 courses. We found that non-CS majors' experiences and outcomes in our existing CS1 course were worse than those of intended CS majors. In response, we developed an introductory programming course, CS0.5, aimed at meeting the needs of the diverse population of non-CS major students interested in our courses. In this paper, we present the motivation, curriculum design, and evidence of effectiveness for this new course. We describe the specific design decisions we made in response to the experiences of non-CS majors in CS1. We also demonstrate that students' outcomes in CS0.5--measured in terms of students' pass rates, satisfaction, and attitudes--all not only improve compared to non-CS majors in CS1, but also largely match those of CS majors in CS1. Finally, we present student feedback, gathered through surveys and Appreciative Inquiry focus groups, that illustrates how our curriculum design choices better meet our non-major students' needs. The most-valued course design elements, as identified by focus group participants, provide insight for other CS educators who are designing similar courses.",Designing an Introductory Programming Course to Improve Non-Majors' Experiences,NA:NA:NA:NA,2018
Chris S. Crawford:Christina Gardner-McCune:Juan E. Gilbert,"As CS + X courses become more common, it is important for us to investigate ways to leverage interdisciplinary learning tools to expand the types of experiences available to students. This paper discusses our experiences introducing CS undergraduates to basic Brain-Computer Interface (BCI) concepts using NeuroBlock. Neuroblock is a visual programming environment that allows users to build applications driven by near-real-time neurophysiological (i.e., brainwaves) data. Brainwave data is captured using a commercial-grade BCI device. Students use brainwave data from the BCI device to create interactive hybrid-BCI applications (e.g., games) featuring objects that respond to students' affective states (e.g. engagement, relaxation, and attention) and keyboard events. In this paper, we describe NeuroBlock, three example activities, and results from an exploratory empirical study that suggests exposure to NeuroBlock increased students' confidence in their ability to develop applications that leverage neurophysiological signals. NeuroBlock and the discussed activities have the potential to supplement future CS + X courses by providing students hands-on experiences with emerging physiological devices.",Brain-Computer Interface for Novice Programmers,NA:NA:NA,2018
Leigh Ann Delyser,NA,Session details: Paper Session: CS4All,NA,2018
Sohail Alhazmi:Margaret Hamilton:Charles Thevathayan,"Increasingly, students enrolled into foundational CS courses such as programming fundamentals include those from many non-CS majors including Data Analytics, Business, Science and Social Sciences. Staff teaching foundational programming courses must therefore cater for varying student backgrounds, cognitive abilities and interests while teaching abstract concepts such as encapsulation, inheritance and polymorphism. In the past assignments played a major role in learning such abstract concepts as they allowed students to construct their own meanings experientially. However, a single assignment in a given domain pitched at an average student cannot cater effectively to students with varying cognitive abilities and backgrounds resulting in poor learning outcomes and student satisfaction. In this paper we report our experience, substantially improving learning outcomes and student satisfaction in a Master's level introductory programming course with weak learning outcomes and poor student satisfaction by offering a choice of assignments. Our novel approach requires designing assignments which take into account the interests of students and their zone of proximal development which determines the extent to which a learner can grasp new concepts. Our pre and post assignment tests and survey feedback clearly show a substantial improvement in learning outcomes and student perception.",CS for All: Catering to Diversity of Master's Students through Assignment Choices,NA:NA:NA,2018
Cheri Fancsali:Linda Tigani:Paulina Toro Isaza:Rachel Cole,"NYC's Computer Science for All (CS4All) is a 10-year, districtwide initiative aimed at providing high-quality computer science (CS) education to all NYC public school students. It aspires to greatly increase the number of students, teachers, and schools exposed to CS in NYC, and to offer meaningful learning experiences that build on prior exposure and skills at every grade level. These plans include providing high-quality professional development (PD) to some 5,000 teachers, designed to help them learn new programs and pedagogies in CS education, as well as strategies for integrating CS into existing courses. This paper presents findings from an assessment of CS in NYC, conducted in the second year of the CS4All initiative. Using a telephone survey of a representative sample of schools, we describe the current state of CS programming and training in the City. Overall, we found high participation in CS teacher training opportunities (both through and independent of the initiative) and widespread offering of CS courses Specifically, we estimate just over half of schools districtwide (56%) participated in some type of CS training in the 2015-16 school year, and about two thirds of schools (64%) offered students some kind of CS coursework in the 2016-17 school year (through either stand-alone CS courses or the integration of CS into other subjects). The type of programming and training varied by school level (elementary, middle and high). We also explored the extent to which programming and training are reaching schools and students who are historically underrepresented in CS--including women and girls, students of color, low-income students and students with disabilities. We found that schools offering CS courses and activities served fewer Black and Latino students and more White and Asian Students, compared with schools not offering CS. This work is unique, as it is the only districtwide assessment of CS education conducted anywhere in the country to date, thus adding to an under-researched but important and growing field of study",A Landscape Study of Computer Science Education in NYC: Early Findings and Implications for Policy and Practice,NA:NA:NA:NA,2018
Steven McGee:Randi McGee-Tekula:Jennifer Duck:Catherine McGee:Lucia Dettori:Ronald I. Greenberg:Eric Snow:Daisy Rutstein:Dale Reed:Brenda Wilkerson:Don Yanek:Andrew M. Rasmussen:Dennis Brylow,"This study investigated patterns in the development of computational thinking practices in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Past research indicates that the personal relevance of the ECS experience influences students' expectancy-value towards computer science. Expectancy-value is a construct that is predictive of career choices. We extended our research to examine whether expectancy-value influences the development of computational thinking practices. This study took place in the context of two ECS implementation projects across two states. Twenty teachers, who implemented ECS in 2016-17, participated in the research. There were 906 students who completed beginning and end of year surveys and assessments. The surveys included demographic questions, a validated expectancy-value scale, and questions about students' course experiences. The assessments were developed and validated by SRI International as a companion to the ECS course. Overall, student performance statistically increased from pretest to posttest with effect size of 0.74. There were no statistically significant differences in performance by gender or race/ethnicity. These results are consistent with earlier findings that a personally relevant course experience positively influences students' expectancy for success. These results expanded on prior research by indicating that students' expectancy-value for computer science positively influenced student learning.",Equal Outcomes 4 All: A Study of Student Learning in ECS,NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Roberto Hoyle,NA,Session details: Paper Session: Cybersecurity #1,NA,2018
Valdemar Švábenský:Jan Vykopal,"Cybersecurity games are an attractive and popular method of active learning. However, the majority of current games are created for advanced players, which often leads to frustration in less experienced learners. Therefore, we decided to focus on a diagnostic assessment of participants entering the games. We assume that information about the players' knowledge, skills, and experience enables tutors or learning environments to suitably assist participants with game challenges and maximize learning in their virtual adventure. In this paper, we present a pioneering experiment examining the predictive value of a short quiz and self-assessment for identifying learners' readiness before playing a cybersecurity game. We hypothesized that these predictors would model players' performance. A linear regression analysis showed that the game performance can be accurately predicted by well-designed prerequisite testing, but not by self-assessment. At the same time, we identified major challenges related to the design of pretests for cybersecurity games: calibrating test questions with respect to the skills relevant for the game, minimizing the quiz's length while maximizing its informative value, and embedding the pretest in the game. Our results are relevant for educational researchers and cybersecurity instructors of students at all learning levels.",Challenges Arising from Prerequisite Testing in Cybersecurity Games,NA:NA,2018
Michael H. Dunn:Laurence D. Merkle,"It is well documented that there is a sizable shortage of workers in cybersecurity and related careers. Exacerbating this problem are severe imbalances with respect to gender and other underrepresented categories, with one recent study finding only 11% of cybersecurity professionals are women. One approach to addressing these shortages is to attempt to increase interest in cybersecurity careers through extracurricular cybersecurity competitions. CyberPatriot is the largest cybersecurity competition for middle and high school students in North America, with over 14,000 young people participating during the 2016-2017 school year. This paper assesses the impact of this competition on participants' interest in cybersecurity careers. Survey data previously collected by the competition organizers is analyzed with rigorous statistical methods. Results show that participants' interest in cybersecurity increased meaningfully in several dimensions relevant to career selection. Further analysis also finds that despite lower initial interest in cybersecurity careers among female participants, this interest increased by an even greater amount than it did for male participants.",Assessing the Impact of a National Cybersecurity Competition on Students' Career Interests,NA:NA,2018
Ge Jin:Manghui Tu:Tae-Hoon Kim:Justin Heffron:Jonathan White,"Cybersecurity is critical to the national infrastructure, federal and local government, military, industry, and personal privacy. To defend the U.S. against the cyber threats, a significant demand for skilled cybersecurity workforce is predicted in government and industrial sectors. To address this issue, National Security Agency and the National Science Foundation jointly funded GenCyber program to stimulate the K-12 students' interest in the cybersecurity field and raise their awareness of cybersecurity and safe online behavior. Purdue University Northwest has successfully launched four GenCyber summer camps in 2016 and 2017 to 181 high school students, with 51.3% underrepresented minority ratio (Africa American and Hispanics), and about 2:1 male to female ratio. We delivered GenCyber summer camp activities in the format of game based learning and hands-on labs. The use of game-based learning in the camp was an excellent platform to teach concepts of cyber security principles. For example, in Cyber Defense Tower Game, students need to protect their servers from the different types of cyber-attack. They need to select the correct type of defense to stop each wave of cyber-attack. As the students advanced through the game, combinations of the different attacks would come faster, making it more difficult for the students to defend their servers. This game was well received by the students, support staffs, instructors, and site visit team. Learning through these activities provided high school students with an immersive, learner-centered experience, which has been proven very effective on cybersecurity awareness training and practical skill acquisition for learners from diverse backgrounds. Further analysis of survey data revealed that the gamification of cybersecurity education to raise students' interests in computer science and cybersecurity was more effective in male high school students than in female students.",Game based Cybersecurity Training for High School Students,NA:NA:NA:NA:NA,2018
Sarah Heckman,NA,Session details: Paper Session: Introductory Courses,NA,2018
Iris Gaber:Amir Kirsh,"Students in Computer Science programming courses often have difficulty with coding, which results in flawed exercises. We asked students working on programming exercises to report known defects in their submission. We distinguish between three types of defects: bugs in the program, missing features, and poorly written code. Results show that students detect and report missing features and bugs quite accurately (59% of the bugs and 61% of the missing features were reported), but they are much less aware of the quality of their code (only 28% of the code issues were reported). After comparing their grades to the grades of the previous year we argue that the request to report defects helps student in submitting exercises with fewer bugs. Finally, the students affirmed that the request to report defects helped them in detecting problems and improved their time management.",The Effect of Reporting Known Issues on Students' Work,NA:NA,2018
Chris Wilcox:Albert Lionelle,"The superior performance of students with prior exposure to programming has long been evident to faculty that teach introductory courses. In this paper we replicate previous studies that quantify the difference between students with and without previous programming experience, and we provide further focus on gender differences. Our research is based on an initial CS1 course that we divided into a section with students having previous programming experience (P) and two sections for students without (N). Both sections of CS1 were taught with the same curriculum and assessments. We find that the advantages of prior experience are substantial, with P students outscoring N students by more than 6% on exams and 10% on programming quizzes. However, the performance gap between P and N students narrows considerably by the end of the following CS2 course, with no significant difference in overall scores. Analyzing results by gender, our data shows that 22% of N students in CS1 are female versus only 12% of P students. However, the female students with prior exposure outperform their male peers in all areas. Another finding of our research is the confirmation of a significant difference in confidence between female and male students.",Quantifying the Benefits of Prior Programming Experience in an Introductory Computer Science Course,NA:NA,2018
Nabeel Alzahrani:Frank Vahid:Alex Edgcomb:Kevin Nguyen:Roman Lysecky,"Many teachers of CS 1 (introductory programming) have switched to Python rather than C, C++, or Java. One reason is the belief that Python's interpreted nature plus simpler syntax and semantics ease a student's learning, but data supporting that belief is scarce. This paper addresses the question: Do Python learners struggle less than C++ learners? We analyzed student submissions on small coding exercises in CS 1 courses at 20 different universities, 10 courses using Python, and 11 using C++. Each course used either the Python or C++ version of an online textbook from one publisher, each book having 100+ small coding exercises, expected to take 2-5 minutes each. We considered 11 exercises whose Python and C++ versions were nearly identical and that appeared in various chapters. We defined struggle rate for exercises, where struggle means a student spent excessive time or attempts on an exercise. Based on that rate, we found the learning for Python was not eased; in fact, Python students had significantly higher struggle rates than C++ students (26% vs. 13%). Higher rates were seen even when considering only classes with no prerequisites, classes for majors only, or classes for non-majors only. We encourage the community to do further analyses, to help guide teachers when choosing a CS 1 language.",Python Versus C++: An Analysis of Student Struggle on Small Coding Exercises in Introductory Programming Courses,NA:NA:NA:NA:NA,2018
Peter Froehlich,NA,Session details: Paper Session: Systems Courses,NA,2018
Suzanne J. Matthews:Joel C. Adams:Richard A. Brown:Elizabeth Shoop,"With the requirement that parallel & distributed computing (PDC) topics be covered in the core computer science curriculum, educators are exploring new ways to engage students in this area of computing. In this paper, we discuss the use of the Raspberry Pi single-board computer (SBC) to provide students with hands-on multicore learning experiences. We discuss how the authors use the Raspberry Pi to teach parallel computing, and present assessment results that indicate such devices are effective at achieving CS2013 PDC learning outcomes, as well as motivating further study of parallelism. We believe our results are of significant interest to CS educators looking to integrate parallelism in their classrooms, and support the use of other SBCs for teaching parallel computing.",Portable Parallel Computing with the Raspberry Pi,NA:NA:NA:NA,2018
Sam Silvestro:Timothy T. Yuen:Corey Crosser:Dakai Zhu:Turgay Korkmaz:Tongping Liu,"This paper presents the design and evaluation of a novel project designed to facilitate the learning of memory management concepts and interactions between different components. This project removes the complexity of a full or specific operating system by implementing memory management inside the user space. Evaluation results show that the mean exam scores improved by about 29% to 34%. On average, the total code size is less than 300 lines and time spent working on this project is under 17 hours. Therefore, this project is beneficial in helping students learn memory management while maintaining a reasonable project workload.",A User Space-based Project for Practicing Core Memory Management Concepts,NA:NA:NA:NA:NA:NA,2018
Brian P. Railing:Randal E. Bryant,"This work describes our experience in revising one of the major programming assignments for the second-year course Introduction to Computer Systems, in which students implement a version of the malloc memory allocator. The revisions involved fully supporting a 64-bit address space, promoting a more modern programming style, and creating a set of benchmarks and grading standards that provide an appropriate level of challenge. With this revised assignment, students were able to implement more sophisticated allocators than they had in the past, and they also achieved higher performance on the related questions on the final exam.",Implementing Malloc: Students and Systems Programming,NA:NA,2018
Mohsen Dorodchi,NA,Session details: Paper Session: Pedagogy #1,NA,2018
Lisa Yan:Nick McKeown:Mehran Sahami:Chris Piech,"As computer science classes grow, instructor workload also increases: teachers must simultaneously teach material, provide assignment feedback, and monitor student progress. At scale, it is hard to know which students need extra help, and as a result some students can resort to excessive collaboration--using online resources or peer code--to complete their work. In this paper, we present TMOSS, a tool that analyzes the intermediate steps a student takes to complete a programming assignment. We find that for three separate course offerings, TMOSS is almost twice as effective as traditional software similarity detectors in identifying the number of students who exhibit excessive collaboration. We also find that such students spend significantly less time on their assignment, use fewer class tutoring resources, and perform worse on exams than their peers. Finally, we provide a theory of the parametric distribution of typical student assignment similarity, which allows for probabilistic interpretation.",TMOSS: Using Intermediate Assignment Work to Understand Excessive Collaboration in Large Classes,NA:NA:NA:NA,2018
Matti Nelimarkka:Arto Hellas,"Being able to seek help is a crucial part of any learning process. This includes both collaborative models such as asking for help from others as well as independent models such as using course materials and the vast resources provided by the Web. Currently, MOOC research has addressed social help-seeking within the MOOC course, either using MOOC platform tools (forum, chat) or arranging activities using external platforms (Google Hangout, Facebook groups). However, MOOC learning activities take place in a larger social ecology, including friends and teachers, general online communities and alumni communities. Using survey data from a programming MOOC, we show a typology of social learning strategies: non-use of social help-seeking, seeking help from friends and seeking help from alumni and teacher communities. We further show that students using social help-seeking strategies orient themselves more with a surface approach but are also less likely to drop the course. We conclude this work by addressing the various design possibilities identified by this work.",Social Help-seeking Strategies in a Programming MOOC,NA:NA,2018
Mia Minnes:Christine Alvarado:Leo Porter,"With surging enrollments in computer science, large classes are becoming standard, even at the upper division. Unfortunately, this new reality can leave students feeling anonymous and unsupported. This work examines the impact of several lightweight interventions on students' sense of connection with instructors and the class. These strategies were employed in a range of large courses at a public research-focused university. The implemented techniques include: opportunities for one-on-one tutoring, seating assignments with consistent teaching staff members seated in class, and assigned small discussion sections, among others. All strategies are lightweight and require only the usual staffing resources afforded to a class. In this report, we evaluate student sense of community and reflect on the benefits and challenges of these techniques.",Lightweight Techniques to Support Students in Large Classes,NA:NA:NA,2018
Ali Erkan:John Barr:Valerie Barr:Michael Goldweber:Deepak Kumar,"Computer science curricula has been well defined for many years through the publication of the Computer Science Curricula reports developed jointly by the two major professional societies, the Association for Computing Machinery (ACM) and the IEEE Computer Society. These documents define computer science curricula by providing knowledge areas and course exemplars. The most recent curriculum report, the Computer Science Curricula 2013 (CSC13 [1]), provides 18 knowledge areas (KAs). Though it stresses that KAs do not necessary represent courses, computer science departments have traditionally created courses around the KAs. Indeed, the course exemplars presented in the CSC13 report, for the most part, center around KAs.",Holistic Approaches to Computer Science,NA:NA:NA:NA:NA,2018
Douglas H. Fisher:Jacqueline Cameron:Tamara Clegg:Stephanie August,"Computing for social good has become a common topic in computing circles, with professional organizations and conferences sponsoring discussions on the relevance of ""social good"" material for computer science research [e.g., 1] and for education [e.g., 12,13,18].",Integrating Social Good into CS Education,NA:NA:NA:NA,2018
Colleen M. Lewis:Catherine Ashcraft:Kyla McMullen,"Many SIGCSE attendees are committed to inclusive teaching practices and creating an inclusive culture within their classrooms; yet, advocating for and sustaining these initiatives may require having difficult conversations with our colleagues and students. Understandably, many faculty are unsure about how to talk about sensitive topics such as race and gender with their colleagues and students. Research suggests that practicing some of these difficult conversations is essential to achieve the goals of inclusive teaching and culture. Most SIGCSE attendees probably use active learning throughout their teaching, but we rarely see active learning at SIGCSE - let's try it! In this interactive session, attendees will learn strategies for responding to bias in academic settings. Attendees will then practice those strategies in small groups. This will be facilitated by playing two rounds of a research-based game learning approach developed by the NSF project CSTeachingTips.org (#1339404), which has been tested in group of 200 teaching assistants. This is the fifth iteration of the game-learning approach and all attendees will receive a printed copy of the game and a link to download and print more copies.","What Would You Say if...: Responding to Microaggressions, Bias, and Other Nonsense",NA:NA:NA,2018
Sushil K. Prasad:Charles C. Weems:John P. Dougherty:Debzani Deb,NA,NSF/IEEE-TCPP Curriculum Initiative on Parallel and Distributed Computing: Status Report,NA:NA:NA:NA,2018
Dan Garcia:Tiffany Barnes,NA,Session details: First Timer's Lunch Keynote & 2018 SIGCSE Award for Lifetime Service to the Computer Science Education Community,NA:NA,2018
Eric Roberts,"Academic computer science is at a critical juncture that offers both challenges and opportunities. More students than ever before are choosing to major in computer science and an even larger number of students are taking computer science courses in recognition of the fact that knowledge of computing is essential in the modern world. That interest, of course, is exciting. At the same time, most computer science departments are overwhelmed by the growing demand from students. In this talk, I draw on my own experience as a young faculty member in the similarly challenging 1980s to offer advice on how to make the most of the opportunities that are intrinsic to teaching in such a vibrant field.",Teaching Computer Science in a Time of Opportunities and Challenges,NA,2018
Elizabeth Hawthorne,NA,Session details: Paper Session: Computational Thinking #1,NA,2018
Fredrik Heintz:Linda Mannila,"The Swedish government has recently introduced digital competence including programming in the Swedish K-9 curriculum starting no later than fall 2018. This means that 100 000 teachers need to learn programming and digital competence in less than a year. In this paper we report on our experience working with professional teacher training in Sweden's fifth largest city. The city has about 150 000 inhabitants and about 50 schools with about 14 000 students in primary education. The project has been carried out in close cooperation with the municipality. The work started in the fall of 2014 with a pilot study with 10 teachers in different subjects that was carried out during spring 2015. The pilot study was successful as the teachers were able to introduce activities related to programming and computational thinking in their subjects after only two half day workshops. The next step was to scale this up to include all the schools in the city. As expected, this turned out to be a larger challenge. More than 70 teachers were involved in the second part of the project. Some of the lessons learned are that it is quite easy to provide teacher training, but harder to get teachers to actually change their teaching and even more challenging to get teachers to help their colleagues introduce programming or computational thinking in their teaching. Based on our experience we draw some general conclusions and make suggestions for how to scale up the teaching of programming and computational thinking to all.",Computational Thinking for All: An Experience Report on Scaling up Teaching Computational Thinking to All Students in a Major City in Sweden,NA:NA,2018
Bushra Chowdhury:Austin Cory Bart:Dennis Kafura,"Collaborative learning can help reduce the anxiety level of learners, improve understanding and thus create a positive atmosphere for learning. This study analyzes students' collaborative learning experiences within small interdisciplinary ""cohorts"" while learning computational thinking in a university-level class. The cohort allows students from different disciplines to contribute diverse perspectives, socially interact with each other and in turn create situations where two or more students learn together. This study uses both qualitative and quantitative means to explore students' collaborative learning experiences. Ethnographically-informed qualitative data using Stahl's collaborative framework is analyzed. The analysis revealed that most students found the cohort model to be valuable in learning computational thinking by allowing them to ask about and explain problems, especially with students from different disciplines who perceive and explain a problem differently. Quantitative data from a multi-term survey complements and confirms the findings from the qualitative data. Our study helps to inform those teaching foundational computing concepts to a diverse audience of learners.",Analysis of Collaborative Learning in a Computational Thinking Class,NA:NA:NA,2018
Jakita O. Thomas,"Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that the solution solves the problem, and evaluating the solution based on some set of criteria. Supporting Computational Algorithmic Thinking (SCAT) is both a longitudinal between-subjects exploratory research project and a free enrichment program supporting and guiding African-American middle school girls over three years as they iteratively design a set of games for social change. This paper explores the CAT Capability Flow, which begins to describe the processes and sub-skills and capabilities involve in CAT. To do this, we engage in an approach which results in an initial flowchart that depicts the processes students are engaging in as an iteratively-refined articulation of the steps involved in computational algorithmic thinking.",The Computational Algorithmic Thinking (CAT) Capability Flow: An Approach to Articulating CAT Capabilities over Time in African-American Middle-school Girls,NA,2018
Dee A.B. Weikle,NA,Session details: Paper Session: Creativity,NA,2018
Markeya S. Peteranetz:Shiyuan Wang:Duane F. Shell:Abraham E. Flanigan:Leen-Kiat Soh,"The purpose of the present study was to investigate how the inclusion of computational creativity exercises (CCEs) merging computational and creative thinking in undergraduate computer science (CS) courses affected students' course grades, learning of core CS knowledge, self-efficacy, and creative competency. CCEs were done in lower- and upper-division CS courses at a single university. Students in CCE implementation courses were compared to students in the same courses in different semesters. Propensity score matching was used to create comparable groups (control and implementation) based on students' GPA, motivation, and engagement. Results showed that implementing CCEs in undergraduate CS courses enhanced grades, learning of core CS knowledge, and self-efficacy for creatively applying CS knowledge. However, CCEs did not impact creative competency. The effect of the CCEs was consistent across upper- and lower-division courses for all outcomes. Unlike previous studies that only established the support for CCEs, such as positive dosage effects, the results of this study indicate that CCEs have a causal effect on students' achievement, learning, and self-efficacy, and this effect is independent of general academic achievement, motivation, and engagement. These findings establish the CCEs as a validated, evidence-based instructional method.","Examining the Impact of Computational Creativity Exercises on College Computer Science Students' Learning, Achievement, Self-Efficacy, and Creativity",NA:NA:NA:NA:NA,2018
Emmanuel Schanzer:Shriram Krishnamurthi:Kathi Fisler,"Game programming projects are concrete and motivational for students, especially when used to teach more abstract concepts such as algebra. These projects must have open-ended elements to allow for creativity, but too much freedom makes it hard to reach specific learning outcomes. How many degrees of freedom do students need to make a game feel like one they genuinely designed? What kinds of personalization do they undertake of their games? And how do these factors correlate with their prior game-playing experience or with their identified gender? This paper studies these questions in the concrete setting of the Bootstrap:Algebra curriculum. In this curriculum, students are only given four parameters they can customize and only a few minutes in which to do so. Our study shows that despite this very limited personalization, students still feel a strong sense of ownership, originality, and pride in their creations. We also find that females find videogame creation just as satisfying as males, which contradicts some prior research but may also reflect the nature of games created in this curriculum and the opportunities it offers for self-expression.","Creativity, Customization, and Ownership: Game Design in Bootstrap: Algebra",NA:NA:NA,2018
Dianna Xu:Ursula Wolz:Deepak Kumar:Ira Greenburg,"This paper reports on the results of a multi-year project in which we identified essential pedagogy and curriculum for teaching introductory computing courses focused on Creative Computation using Processing. The curriculum aligns with a traditional 'CS1' approach as well as 'AP CS A', and goes well beyond ""CS Principles"" standards to teach foundations of computer science and programming. We addressed the bridge between high school and entry-level college curriculum in computer science (American freshman high school to freshman college) and demonstrated how algorithmic art provides a powerful vehicle for diverse student populations within a broad range of pedagogical frameworks ranging from traditional structured classrooms to inquiry-based student-driven project labs. A secondary result is that instructors require long-term engagement with mentors to extend their own knowledge of computing, visual arts and appropriate pedagogy.",Updating Introductory Computer Science with Creative Computation,NA:NA:NA:NA,2018
Sotirios Kentros,NA,Session details: Paper Session: Cybersecurity #2,NA,2018
Jan Vykopal:Radek Ošlejšek:Karolína Burská:Kristína Zákopčanová,"Cyber defence exercises are intensive, hands-on learning events for teams of professionals who gain or develop their skills to successfully prevent and respond to cyber attacks. The exercises mimic the real-life, routine operation of an organization which is being attacked by an unknown offender. Teams of learners receive very limited immediate feedback from the instructors during the exercise; they can usually see only a scoreboard showing the aggregated gain or loss of points for particular tasks. An in-depth analysis of learners' actions requires considerable human effort, which results in days or weeks of delay. The intensive experience is thus not followed by proper feedback facilitating actual learning, and this diminishes the effect of the exercise. In this initial work, we investigate how to provide valuable feedback to learners right after the exercise without any unnecessary delay. Based on the scoring system of a cyber defence exercise, we have developed a new feedback tool that presents an interactive, personalized timeline of exercise events. We deployed this tool during an international exercise, where we monitored participants' interactions and gathered their reflections. The results show that learners did use the new tool and rated it positively. Since this new feature is not bound to a particular defence exercise, it can be applied to all exercises that employ scoring based on the evaluation of individual exercise objectives. As a result, it enables the learner to immediately reflect on the experience gained.",Timely Feedback in Unstructured Cybersecurity Exercises,NA:NA:NA:NA,2018
Muhammad Rizwan Asghar:Andrew Luxton-Reilly,Teaching cyber security techniques can be challenging due to the complexity associated with building secure systems. The major issue is these systems could easily be broken if proper protection techniques are not employed. This requires students to understand the offensive approaches that can be used to breach security in order to better understand how to properly defend against cyber attacks. We present a novel approach to teaching cyber security in a graduate course using an innovative assessment task that engages students in both software obfuscation and reverse engineering of obfuscated code. Students involved in the activities gain an appreciation of the challenges in defending against attacks. Our results demonstrate a positive change in the students' perception during the learning process.,Teaching Cyber Security Using Competitive Software Obfuscation and Reverse Engineering Activities,NA:NA,2018
Younghee Park:Hongxin Hu:Xiaohong Yuan:Hongda Li,"Software-Defined Networking (SDN) represents a major shift from ossified hardware-based networks to programmable software-based networks. It introduces significant granularity, visibility, and flexibility into networking, but at the same time brings new security challenges. Although the research community is making progress in addressing both the opportunities in SDN and the accompanying security challenges, very few educational materials have been designed to incorporate the latest research results and engage students in learning about SDN security. In this paper, we presents our newly designed SDN security education materials, which can be used to meet the ever-increasing demand for high quality cybersecurity professionals with expertise in SDN security. The designed security education materials incorporate the latest research results in SDN security and are integrated into CloudLab, an open cloud platform, for effective hands-on learning. Through a user study, we demonstrate that students have a better understanding of SDN security after participating in these well-designed CloudLab-based security labs, and they also acquired strong research interests in SDN security.",Enhancing Security Education Through Designing SDN Security Labs in CloudLab,NA:NA:NA:NA,2018
Meghan Allen,NA,Session details: Paper Session: Diverse Topics in CS Ed,NA,2018
Amanpreet Kapoor:Christina Gardner-McCune,"Understanding professional goals and identities of undergraduate Computer Science (CS) students is critical for curriculum decisions, workforce development, and retention programs. This paper aims to explore the ways in which undergraduate CS students describe their professional goals and identities, and gauge how these goals and identities vary across gender and academic standing. This paper is part of a larger study aimed at understanding how students form their professional goals and identities. In the study presented in this paper, we surveyed 109 CS undergraduate students and interviewed 14 CS undergraduate students across gender and academic standing. The data were qualitatively analyzed using inductive coding and thematic analysis. Our findings indicate that most students identify themselves professionally as software development professionals, various specialized CS professionals, and by their majors. We also found that both male and female students were interested in becoming entrepreneurs, and females were more likely to have professional goals to move into management. This paper contributes to the fields' growing knowledge of undergraduate students' professional goals and professional identities. This knowledge can help CS departments to better align their degree programs, curriculum, and specialization tracks with student goals. Such an alignment has the potential to increase retention in the major as well as prepare students to be competitive in the workforce.",Understanding Professional Identities and Goals of Computer Science Undergraduate Students,NA:NA,2018
Kristen Shinohara:Saba Kawas:Andrew J. Ko:Richard E. Ladner,"Industry demand for software developers with knowledge of accessibility has increased substantially in recent years. However, there is little knowledge about the prevalence of higher education teaching about accessibility or faculty's perceived barriers to teaching accessibility. To address this gap, we surveyed 14,176 computing and information science faculty in the United States. We received a representative sample of at least one response from 318 of the 352 institutions we surveyed, totaling 1,857 responses. We found that 175 institutions (50%) had at least one instructor teaching accessibility and that no fewer than 2.5% of faculty overall teach accessibility. Faculty that teach accessibility are twice as likely to be female, to have expertise in HCI and software engineering, and to know people with disabilities. The most critical barriers to teaching accessibility that faculty reported were the absence of clear and discipline-specific accessibility learning objectives and the lack of faculty knowledge about accessibility. Faculty desired resources that were specific to the areas of computing in which they teach rather than general accessibility resources and guidelines.",Who Teaches Accessibility?: A Survey of U.S. Computing Faculty,NA:NA:NA:NA,2018
Lori Postner:Heidi J.C. Ellis:Gregory W. Hislop,"Studies have shown that Humanitarian Free and Open Source Software (HFOSS) projects provide a rich learning environment for students, allowing them to gain a range of both technical and professional skills. Although there have been a number of studies on student attitudes toward learning within HFOSS projects, little has been documented about instructors' experiences supporting their students in the classroom. This paper examines survey results from 26 faculty members who participated in an NSF-funded Professors' Open Source Software Experience workshop with the goal of incorporating HFOSS into their curriculum. The survey was designed to identify barriers to using HFOSS in the classroom, to understand the type of classes where instructors incorporated HFOSS, the successes attained and challenges faced by instructors, and to understand instructors' future plans. The data gathered was used to enhance semi-structured interviews that are currently being analyzed. This paper focuses on the hurdles reported by faculty members, the cross-section of uses of HFOSS in the classroom as well as factors that may influence one's ability to integrate HFOSS into the curriculum. The results of the survey demonstrate that faculty have successfully incorporated HFOSS into a wide range of courses across all four years of the curriculum with both large and small classes. The major hurdles are time to prepare materials for one's course as well as finding time within an existing course to integrate HFOSS material.",A Survey of Instructors' Experiences Supporting StudentLearning using HFOSS Projects,NA:NA:NA,2018
Brandon Myers,NA,Session details: Paper Session: Pedagogy #2,NA,2018
Nuno Gil Fonseca:Luís Macedo:António José Mendes,"Several studies showed that teacher's support is essential to the students learning process. Often it is difficult for teachers to follow all their student's evolution and make timely interventions when needed. Often, in the same class, there are students with substantially different performance levels, and many times a teacher intervention is cructial to help lower performing students. To help the teacher identify these students, we propose the use of CodeInsights, a tool able to capture autonomously and unobtrusively real-time information about the students' performance based on snapshots of their code. The information available can be used by the teachers to support the adoption of the necessary measures to address each student needs or difficulties in a more grounded manner. We present the system and some results of a field test involving students from an introductory course on PHP programming.",Supporting Differentiated Instruction in Programming Courses through Permanent Progress Monitoring,NA:NA:NA,2018
Nicole Herbert,"Many undergraduate ICT degrees culminate with students completing a team-based capstone project under academic supervision. Capstone projects provided by external clients facilitate authentic experiential learning, but sourcing external projects can be difficult, and there can be issues managing industry clients within an academic setting. Capstone projects also provide an opportunity for professional skill development to increase student employability, though to fully assess generic learning outcomes requires evaluating more than the final product created for the client. Teamwork can have a positive impact on student learning, however it is challenging to determine a process of assessment that enables formative and summative assessment that does not require an academic to immerse themselves within a team to evaluate an individual's contribution. Team members are often the best source of meaningful information, and self and peer assessment is commonly used as part of an assessment scheme, but to ensure the objectivity and integrity of the final grade it is necessary to correlate data from a variety of sources. This experience report reflects on a team-based capstone project approach that has been offered for 17 years and proposes some effective strategies for coordinating the more challenging aspects of capstone projects.","Reflections on 17 years of ICT Capstone Project Coordination: Effective Strategies for Managing Clients, Teams and Assessment",NA,2018
Paul Gestwicki,"This paper describes the design, evolution, and evaluation of a second-year undergraduate course on professional software development practices. The course design arose from two properties of a curriculum revision: the removal of redundancy across Discrete Mathematics, Data Structures, and Algorithms coursework and the identification of desired skills for students entering the upper-division courses. A research-informed design for the course incorporates code quality, version control, teamwork, user-centered design, risk management, design thinking, and reflective practice, presented in keeping with the values of agile software development. We describe the evolution of the course over its six years of implementation, including a transition from a Java-specific textbook to a more generic book about code quality and the transition from a six-week to a nine-week project. The course has become a linchpin for mid-major assessment of students' software development skills, and we discuss the strengths, weaknesses, and results of our assessment strategy. We provide a reflection of the role this course has had within our program and advice for those who might wish to adopt or adapt this design.",Design and Evaluation of an Undergraduate Course on Software Development Practices,NA,2018
Suzanne Matthews,NA,Session details: Paper Session: Science Education,NA,2018
Bjørn Fjukstad:Nina Angelvik:Maria Wulff Hauglann:Joachim Sveia Knutsen:Morten Grønnesby:Hedinn Gunhildrud:Lars Ailo Bongo,"We describe our citizen science approach and technologies designed to introduce students in upper secondary schools to computational thinking and engineering. Using an Arduino microcontroller and low-cost sensors we have developed the air:bit, a programmable sensor kit that students build and program to collect air quality data. In our course, students develop their own research questions regarding air quality before using their own air quality sensor kit to answer their respective questions. This project combines electronics and coding with natural sciences providing a truly interdisciplinary course. We have open-sourced the teaching materials including the building and coding instructions. In addition, students can contribute to our web-based platform for storing, visualizing, and exploring the collected air quality data. It also provides an open API for anyone to download air quality data collected by the students. Through the website, available at airbit.uit.no, students are motivated to contribute air quality data open to the public. We describe lessons learned from our pilot project in a Norwegian upper secondary school and how we are deploying it in 10 schools across Northern Norway. In the pilot, students successfully built and coded the air:bits, and after two months of data collection they could correctly describe local patterns in the air quality. We believe that by combining electronics and coding with the natural sciences we motivate students to engage in all scientific disciplines.",Low-Cost Programmable Air Quality Sensor Kits in Science Education,NA:NA:NA:NA:NA:NA:NA,2018
Tanya Berger-Wolf:Boris Igic:Cynthia Taylor:Robert Sloan:Rachel Poretsky,"We present the curriculum and evaluation of a pilot Biology-themed CS1 course offering at a large public university. Inspired by Harvey Mudd's CS 5 Green, we adapt CS1 + Bio to fit the needs of our student body, which is much more typical for those US institutions that produce the bulk of the nation's CS undergraduate degrees. This course was team-taught by a computer science professor and a biology professor, and combined typical CS1 topics with relevant biology content. Our initial offering attracted students who would not otherwise have taken CS1, and was the only one of our three CS1 courses where more students reported planning to major in CS after the course than before it.","A Biology-themed Introductory CS Course at a Large, Diverse Public University",NA:NA:NA:NA:NA,2018
Anna Ritz,"Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.",Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts,NA,2018
Cliff Shaffer,NA,Session details: Paper Session: Visualization,NA,2018
Ryosuke Ishizue:Kazunori Sakamoto:Hironori Washizaki:Yoshiaki Fukazawa,"Many researchers have proposed program visualization tools for memory management because this is a challenging concept for novice programmers. For example, SeeC and PythonTutor (PT) are state-of-the-art tools for C languages. However, three problems hinder the use of these and other tools: capability (P1), installability (P2), and usability (P3). (P1) Tools do not fully support dynamic memory allocation or File Input / Output (I/O) and Standard Input. (P2) Novice programmers often have difficulty installing SeeC due to its dependence on Clang and setting up an offline environment that uses PT. (P3) Revisualization of the modified source code in SeeC requires several steps. To alleviate these issues, we propose a new visualization tool called PlayVisualizerC (PVC). PVC, which is designed for novice C language programmers to provide solutions (S1-3) for P1-3. S1 offers complete support for dynamic memory allocation, standard I/O, and file I/O. S2 involves installation in a user web browser and its server program is initiated by executing a jar file. S3 reduces the steps required for revisualization. To evaluate PVC, we conducted an experiment and questionnaire involving 30 students. Students using PVC solved a set of four programming tasks on average 1.7 times faster and with 19% more correct answers than those using a current state-of-the-art visualization tool.",PVC: Visualizing C Programs on Web Browsers for Novices,NA:NA:NA:NA,2018
Jinyue Xia:David C. Wilson,"The use of online video in learning environments is prevalent -- serving in a variety of roles, such as multimedia textbook, video lecture, or medium for documenting student coursework. For instructors who employ video as a learning material, it is becoming increasingly important to gain a deeper understanding of the fit of video content across student cohorts, as well as the impact on student engagement, learning, and success. In order to better understand instructor interests and needs in this regard, we developed a learning analytics visualization tool that links data on student viewing and video interactions with student demographics and performance measures. Instructors can use the tool to generate and compare correlated heatmap visualizations representing student engagement across segments of the video. This paper describes an initial user study conducted with instructors in an HCI course context to understand how this kind of feedback can inform their use of video in the classroom. Results show that instructors find such feedback very useful across a variety of use cases.",Instructor Perspectives on Comparative Heatmap Visualizations of Student Engagement with Lecture Video,NA:NA,2018
Kalle Ilves:Juho Leinonen:Arto Hellas,"In this article, we study how visualizations could be used to support students' self-regulation in online learning. We conducted a randomized controlled trial with three groups: one control group without visualization, one treatment group with textual visualization, and one treatment with graphical visualization with information on peers' average achievement. We studied how different visualizations affect students' academic performance and behavior. We focused on four factors; starting, scheduling, earliness and exercise points, where the first three are related to time management and self-regulation. The last factor measures course performance in terms of completed exercises. Our results suggest that the lowest performing students can benefit from a visualization, whereas the highest performing students are not affected by the presence or absence of a visualization. We also found that visualizations that do not provide the means to compare your own performance with others may even be harmful to performance oriented students.",Supporting Self-Regulated Learning with Visualizations in Online Learning Environments,NA:NA:NA,2018
Liz Hutter:Halcyon M. Lawrence:Melinda McDaniel:Marguerite Murrell,NA,Fostering Meaningful Collaboration in an Interdisciplinary Capstone Course,NA:NA:NA:NA,2018
Keith O'Hara:Sven Anderson:David Musicant:Amber Stubbs:Thomas Way,"This panel will include experience reports from five computer science faculty members who have team-taught courses with professors from outside the sciences. Specifically, we will discuss lessons learned and best practices with collaborating with faculty from the arts and humanities. Courses that look outward have the potential to broaden participation and promote computing's role in the broader world beyond software engineering concerns. The panelists will highlight how to: find a topic, find a collaborator(s), design the course, maintain rigor in both disciplines, target the right audience, assess how well it worked, and do it more than once.",Team-Teaching with Colleagues in the Arts and Humanities,NA:NA:NA:NA:NA,2018
Cheri Fancsali:Linda Tigani:Paulina Toro Isaza:Rachel Cole:Wendy Martin,"The objective of this session is to increase evaluator capacity to study CS education initiatives and to share knowledge and resources with the CS education research community. We plan to use the session to share our own experience as evaluators of the NYC CS4All initiative, and to brainstorm effective strategies and approaches to address the challenges inherent in evaluating such efforts. In the session, we will pay particular attention to identifying and developing reliable and valid measures of teacher, student and district outcomes.",SIGCSE Special Session: Evaluating CS4All Initiatives---Challenges and Opportunities,NA:NA:NA:NA:NA,2018
Colleen M. Lewis:Leslie Aaronson:Eric Allatta:Zachary Dodds:Jeffrey Forbes:Kyla McMullen:Mehran Sahami,"SIGCSE is packed with teaching insights and inspiration. However, we get these insights and inspiration from hearing our colleagues talk about their teaching. Why not just watch them teach? This session does exactly that. Each of six exceptional educators will be given ten minutes to teach the audience something. After this, the moderator will draw the attention of the audience to particular pedagogical moves that the instruction included. Attendees can see a new approach to introducing a topic or a new pedagogical move. No matter what, we expect attendees will be taking ideas from this session directly back to their teaching! The format is based upon a practice in chemistry of sharing ""Five Slides About,"" which introduce a topic in a novel or concise way (https://www.ionicviper.org/types/five_slides_about). Resources from each of the presenters will be shared on the website CSTeachingTips.org.","Five Slides About: Abstraction, Arrays, Uncomputability, Networks, Digital Portfolios, and the CS Principles Explore Performance Task",NA:NA:NA:NA:NA:NA:NA,2018
Jessica Schmidt,NA,Session details: SRC Session,NA,2018
Gabrielle I. Zahuantitla:Aryanna Holder,"Currently, there is a push for integrating computer science education and computational thinking into the classroom. For example, major local and national organizations such as CS4ALL: NYC and Code.org aim to expose all students, including typically underrepresented groups, to computer science education nurturing students' intrinsic motivation. Furthermore, current research indicates that first-exposure to computer science is an important deciding factor as to whether students are open to computer science in future endeavors. Being one of the most diverse campuses in the nation, and a commuter campus, The State University of New York (SUNY) Old Westbury provides a unique opportunity to pilot how one might go about creating a motivating first exposure to computer science. Through a four point student-led strategy, we explore student pre-conceived attitudes towards computer science and programming to better understand what strategies might increase CS engagement. In order to do this, we host workshops revolving around creative computer science activities such as 3D game design and multimedia art projects. During these workshops, we collect pre and post questionnaires and use their data to gain insight into the Old Westbury student body's notions of computer science. Initial analyzed pre-survey data shows that 70% of students thought Computer Science was difficult. However, post-survey data shows that, after the experience, approximately 90% of students want to take additional workshops involving Computer Science.",A Four Point Student-Led Strategy for Attracting Diverse Small College Commuter Campus Students to Computer Science: (Abstract Only),NA:NA,2018
Pedro Valdivia,"Many software engineering students make the transition from an academic setting to professional software development careers. Due to its popularity in the software industry, it is important for students to learn software testing skills and adhere to professional practices to prepare them for their transition and be successful. Software testing is an important skill for students but there are many different approaches that enables students to gain this skill. We created a unique approach that enables students to learn software testing with a unique mentality and developed a tool to make educational assessments and feedback quick and scalable. Our approach is implemented within an undergraduate classroom where students are separated into two groups. Each group develops software tests through Test-Driven Development (TDD) with a different mentality. With this approach, we hope to see an improvement in the quality of software that students produce.",A Mental Approach to Software Testing: (Abstract Only),NA,2018
William Zamora,"Software Engineering courses are essential for undergraduates to achieve a smooth transition from higher education to a career. However, many of these courses encounter complications that forbid them from meeting their goals such as: Real products and customers, project duration, software sophistication and more. At Chico State, we have implemented the Tech Startup Model in which the Software Engineering students partner with entrepreneurship students to allow for more collaboration and the creation of a customer-employee relation to address some of these issues. This model utilizes both Lean Startup as well as Agile Development to continuously test a student's ability to adapt to the customer's needs. The data accumulated from the past couple of semesters allowed us to analyze student behavior when exposed to the Tech Startup Model as opposed to other methods tested from previous semesters.",Software Engineering Education: (Abstract Only),NA,2018
Nina Angelvik,"We have developed an applied computer science project to introduce students in upper secondary schools to computer science and engineering. In the project, students build and code their own air quality sensor kits before investigating a research question by analyzing their collected data. An important part of the analysis is to investigate the air quality data in context of other data sources, such as data from other sensor kits or climate data. The task of curating such datasets are too complex for such an introductory project and it therefore requires a specialized service. In this poster we present the design and implementation of an air pollution data analysis platform that stores air quality measurements collected by students, combines it with open environmental data, and provides students with an open interface to analyze their data. During spring 2018, ten school classes from Northern Norway are going to use the platform, online at airbit.uit.no, to study air quality patterns across Northern Norway. We also provide the source code for the platform at the same address.",Air Pollution Data Analysis Platform for Computer Science Education Projects: (Abstract Only),NA,2018
Blayde Dill,"With the integrated use of technology in daily activities, the need for more end-users who can program solutions in their domain of expertise is increasing. There is also growing interest to introduce children to coding activities that are engaging and appropriate for their experience level. Additional resources are needed that initiate and teach computer science in a way that incorporates hardware components to children and first-learners. This poster introduces a new block-based programming environment (called CodePlayground) built from Google's Blockly Developer Tools. The Blockly library injects an editor into an HTML file that represents coding concepts as interlocking blocks, and then outputs the blocks as syntactically correct code. CodePlayground was designed to be compatible with the Adafruit Circuit Playground, which was released as an all-in-one low cost device that can be used for education. CodePlayground allows teachers to utilize the Circuit Playground as an educational device that includes both hardware and software elements. The Circuit Playground uses the firmata provided by Adafruit to communicate with Python code generated by CodePlayground. Blockly Developer Tools was used to create the frame for the language and Atom was used to insert the specialized JavaScript for code generation. After the language was complete, 90 sample programs were created and evaluated to demonstrate the ability of CodePlayground to serve as a programming environment for first learners.",Developing a Blocked Based Language for the Adafruit Circuit Playground: (Abstract Only),NA,2018
Eric Tilley,"NADER (NEXRAD Algorithm Development Environment) is a desktop-based programming environment that allows users to build algorithms for the analysis of NEXRAD level-II Doppler weather radar data. NEXRAD level-II data provides a high-resolution 3D mapping of precipitation intensity and wind speeds around a radar site. These datasets are available from NCEI (National Centers for Environmental Information, a division of the National Oceanic and Atmospheric Administration) both from archives and in real-time, providing nearly endless opportunities for automated algorithmic analysis of weather features. The language provided by NADER is block-based and is built on the powerful Google Blockly platform. In addition to blocks for logic, math, and control flow functions, NADER also presents the user with a succinct set of blocks providing abstractions for common radar data structures. NADER also includes a visualization tool for level-II data, allowing users to clearly see exactly what data is passed into their algorithms and exactly what data is output. With NADER, users can develop a huge variety of algorithms' for example, an algorithm for hail detection, an algorithm for tracking snowfall, or even an algorithm for estimating tornado damage. NADER strives to accomplish two main objectives. One objective is to provide beginning programmers with a straightforward programming environment with an intriguing, real-life application. The other objective is to provide meteorology experts with a rapid-feedback prototyping environment for developing new algorithms.",Weather Radar Algorithm Development using Google Blockly: (Abstract Only),NA,2018
Ayaan M. Kazerouni,"Assessment of software tends to focus on postmortem evaluation of metrics like correctness, mergeability, and code coverage. This is evidenced in the current practices of continuous integration and deployment that focus on software's ability to pass unit tests before it can be merged into a deployment pipeline. However, little attention or tooling is given to the assessment of the software development process itself. Good process becomes both more challenging and more critical as software complexity increases. Real-time evaluation and feedback about a software developer's skills, such as incremental development, testing, and time management, could greatly increase productivity and improve the ability to write tested andcorrect code. My work focuses on the collection and analysis of fine-grained programming process data to help quantitatively model the programming process in terms of these metrics. I report on my research problem, presenting past work involving the collection and analysis of IDE event data from junior level students working on large and complex projects. The goal is to quantify the programming process in terms of incremental development and procrastination. I also present a long-term vision for my research and present work planned in the short term as a step toward that vision.",Toward Continuous Assessment of the Programming Process: (Abstract Only),NA,2018
Ramin Ayanzadeh,"Natural Language Processing and Semantic Web include several NP complete/hard problems that are intractable for classical computing machines. Even though distributed computing has provided remarkable advances (more precisely in dealing with big data), non-decomposable NP problems are still intractable in many real-world applications. And, from quantum computing perspective, solving complex problems with universal quantum gates requires developing of quantum algorithms. Considering commercializing quantum annealing machines by D-Wave, achieving global optimum for discrete optimization problems has been realized. In this study, a novel approach has been introduced to convert symbolic AI problems into quadratic unconstrained binary optimization (QUBO) form. More narrowly, this method represents classification of text documents (fragments) as optimizing a QUBO function. After embedding the train corpus into a QUBO function, D-Wave quantum annealer is used to classify new observations with finding the minimum energy level of the system.",Quantum Artificial Intelligence for Natural Language Processing Applications: (Abstract Only),NA,2018
Blaine Billings:Xenia Mountrouidou,"In October of 2016, we saw a Denial of Service (DoS) attack, the Mirai botnet, which made use of machines on a global scale, primarily targeting often-unprotected devices like webcams and routers. Due to the widespread use of the Internet of Things (IoT), and, specifically, webcams, the attack surface available to malicious actors has increased dramatically. Whereas some researchers tackle this problem by measuring and increasing the efficiency of existing Intrusion Detection Systems (IDSs) or by creating models for the purpose of characterizing cyber-attacks, such solutions do not investigate the problem of identifying when a system itself is behaving under incorrect operation. Through our research, we established a set of stochastic models that are able to accurately and efficiently model the correct operation and behavior of webcams. In order to verify the efficacy and validity of such models, we ran a multitude of normal-operation scenarios and cyber-attacks against webcams using an isolated network. Using the data from these emulated experiments, we correlated network traffic data and audit logs to verify the correctness and accuracy of our models.",Modelling Correct Operation of Webcams for Security Purposes: (Abstract Only),NA:NA,2018
Jiaqi Wu:Terry Wen,"Research has shown that the cheat sheet preparation process helps students with performance in exams. However, results have been inconclusive in determining the most effective guiding principles in creating and using cheat sheets. The traditional method of collecting and annotating cheat sheets is time consuming and exhaustive, and fails to capture students' preparation process. This work examines the development and impacts of a new web-based study preparation tool, Study Genie, supporting collaborative note creation, editing, sharing, and cheat sheet organization. This new educational technology enables big-data learning analytics, permitting quantitative data modeling on connecting formal and informal digital learning footprints. Study Genie also systematically automates cheat-sheet quality evaluation, which traditionally could only have been done qualitatively. A classroom study was conducted to measure the technology and learning effects in an introductory computer science programming course. Results suggest that actions associated with editing and organizing cheat sheets are positively correlated with exam performance, and that there is a significant difference between the activity of high-performing and low-performing students. Through these results, Study Genie presents itself as an opportunity for mass data collection, providing insight into the assembly process rather than just the finished product in cheat sheet creation.",Study Genie: An Intelligent and Collaborative Web-based Study Platform (Abstract Only),NA:NA,2018
Luke Gusukuma,"Automated feedback needs instructor input to be most effective. The increasing demand in computing education necessitates automated feedback systems for teaching programming. However, most current automated feedback tools do not incorporate instructor input. Great strides are being made with identification and code edit steps for automated student feedback, but tools for instructor crafted feedback are lacking in the field of computing. My research, currently targeted at novice programmers aims to close that gap with a hybrid approach of a teacher in the loop feedback system I facilitate writing instructor feedback delivered to students in an automated fashion to give meaningful, instruction enhancing feedback. I also evaluate these mechanisms in classrooms by measuring learning gains, student perception, and other metrics.",Automation for Instruction Enhancing Feedback: (Abstract Only),NA,2018
Sherry Seibel,"The gender disparity in technology related fields is well known and well documented. Only 18% of computer science undergraduates and 26% of computer science professionals are women. Despite numerous interventions in the past decade, there is still not gender parity in the undergraduate pipeline. However, 43% of post-baccalaureate ""coding bootcamp"" participants were women in 2016, indicating that this population may have different characteristics, attitudes, and mindsets than younger women and girls. In this project, the authors have investigated these changes in gender role perceptions that create barriers for girls but are seemingly resolved for some adult women. We hypothesize that older women come to view their own abilities as well as the impact of failure differently than girls and younger women. By recruiting a subject pool of women who have entered the computer science profession through traditional baccalaureate as well as non-traditional bootcamp pathways and posing reflective as well as current questions in semi-structured interviews we assess the changes in attitudes regarding the subjects' self-efficacy and mindset with respect to technical work. From these findings, we hope to identify triggers and possible interventions.",Social Motivators and Inhibitors for Women Entering Software Engineering through Coding Bootcamps vs. Computer Science Bachelor's Degrees: (Abstract Only),NA,2018
Elisabeth Kimmich Mitchell:Toby Dragon,"Collaborative learning can be beneficial for students, but its success is highly dependent on the characteristics of the students grouped together. Structuring group interactions enhances the effectiveness of collaborative learning [1] and therefore the structuring must be done appropriately. Creating successful groups is challenging for instructors, who generally do not have the ability to hand-select groups. We have created a system to dynamically recommend student groups for short-term collaboration. Instructors can request group suggestions based on various criteria related to students' performance on assessment materials. This system creates groups based on different pedagogical theories we find to be salient to group learning.",Intelligent Group Suggestions Based on Students' Conceptual Understanding: (Abstract Only),NA:NA,2018
Caitlin Fanning,"Students often encounter assembly language during the course of their education as part of learning about the low-level operation of computer systems. While there are many assembly languages ranging from simple to complex, x86-64 is widely used in introductory level computer systems courses. Unfortunately, students often have difficulty visualizing the execution of an x86-64 program. Interactions between instructions, relevant registers, and the effect that instructions have on memory are all concepts that students struggle to understand. While students can use GDB or other debuggers to help them step through the execution of a program, there are currently no x86-64 simulators aimed at introductory computing students.  Below C Level (BCL) is an x86-64 simulator aimed at helping novices overcome the barriers to learning this challenging language. BCL visualizes program state, specifically the program stack and register file in order to assist novice x86-64 programmers in tracing the execution of their programs.  One of the primary motives for the creation of BCL was the desire for a simulator with a simple and intuitive interface that enables the user to spend more time focusing on the task at hand rather than attempting to understand a complex program. BCL provides this simple interface, which allows users to view firsthand the effects their code has upon the program stack and registers.",Below C Level: A Simulator for Visualizing x86-64 (Abstract Only),NA,2018
Duc Manh Doan:Clayton Gordon:Dong H. Jeong,"Since data size is continuously increasing, analyzing large-scale data is considered as one of the major research challenges in computational data analysis. Although researchers have proposed numerous approaches, most of them still suffer from analyzing the data efficiently. To overcome the limitation, identifying the optimal number of features is critical for analyzing the data. In this paper, we introduce a newly designed feature selection technique, called Summit Selection, which boosts model performances by determining optimal features in noisy mixed data. First, testing all features is conducted to determine an initial base feature that satisfies a pre-defined criterion for maintaining the highest performance score. Then, a continuous evaluation is managed to build a model by successively adding or removing features based solely on the performance score tested with chosen computational models. To show the effectiveness of our proposed technique, a performance evaluation study was conducted to determine fraudulent activities in the UCSD Data Mining Contest 2009 Dataset. We compared our proposed technique with different feature extraction techniques such as PCA, ANOVA test, and Mutual Information (MI). Specifically, multiple machine learning techniques such as Decision Tree, Random Forest, and k-Nearest Neighbor (KNN) are tested with the feature extraction techniques to determine performance differences. As results, we found that our proposed technique showed about 8.78% performance improvement in detecting fraudulent activities. Since our technique can be extended to a cloud computing environment, we also performed a scalability testing with a known distributed cloud computing model (i.e., Apache Spark).",Summit Selection: Designing a Feature Selection Technique to Support Mixed Data Analysis (Abstract Only),NA:NA:NA,2018
Don Kerrigan,"Current tools required for teaching computer science at any level of education are expensive and require a dedicated lab. With an increasing desire for early computer science education, pairing with the expensive costs for computers, there is an increasing need for a solution. In this paper, I will investigate a mobile-based solution to more effectively, both educationally and financially, solve this problem. I will describe the system and how it could be used as an effective solution.",Creating a Classroom Programming Lab Using Android and Blockly: (Abstract Only),NA,2018
Sydney Pugh:David Binkley,"As the complexity of software systems grows, it becomes increasingly difficult for developers to be aware of all the dependencies that exist between a system's artifacts (e.g., its files or methods). Change impact analysis has been proposed as a technique to overcome this problem, as it suggests to a developer relevant source-code artifacts related to his/her changes. Association rule mining has shown promise for determining change impact by uncovering relevant patterns in a system's change history.  State-of-the-art change impact mining typically makes use of a history of tens of thousands of transactions. This makes a priori generation of all possible rules costly and thus led to the introduction of targeted association rule mining, which only generates rules for transactions relevant to a particular query. Because the set of relevant transactions is much smaller than the complete history, these algorithms are more efficient. However, they still require processing the history's complete set of relevant transactions.  Our work considers the dynamic selection of relevant transactions. It can be viewed as a further constrained version of targeted association rule mining, in which as few as a single relevant transaction might be considered when determining change impact. This initial look at dynamic algorithms empirically studies seven algorithm families. These are referred to as families because some are parameterized and thus give rise to multiple algorithms. Using over 20,000 queries from 19 systems, we empirically show that dynamic algorithms are viable, can be just as applicable as start-of-the-art algorithms, and even outperform them for certain queries.",Change Impact using Dynamic History Analysis: (Abstract Only),NA:NA,2018
Pierce Stegman,"In recent years, advances in electroencephalography (EEG) brain-computer interfaces (BCIs) have led to the development of applications that allow users to control prosthetic arms, fly drones, and play video games using only their thoughts. However, these use cases are occasionally restricted to laboratory environments. As BCI software is often designed to work with research-grade equipment, it can be inaccessible to the average consumer. This research poster describes why JavaScript-based BCIs would be more accessible to developers and students. We also discuss the current issues with JavaScript-based BCIs and introduce a new library, WebBCI, which is designed to take the initial step towards addressing these issues. Example BCI systems that can be created with WebBCI are described in this poster, along with the outputs of these systems given sample EEG data.",WebBCI: An Electroencephalography Toolkit Built on Modern Web Technologies (Abstract Only),NA,2018
Caitlin Duncan,"Across the world there has been a paradigm shift in school education, as many countries are incorporating Computer Science (CS), programming, and Computational Thinking (CT), into their K-12 curriculums for the first time. In 2018 these subjects will be introduced to the New Zealand (NZ) Digital Technologies curriculum under the subject of ""Computational Thinking"". Like the majority of countries who have introduced these topics, NZ faces challenges in preparing teachers, and in successfully implementing a curriculum which achieves its educational goals. To support this curriculum, we have been conducting studies in primary schools across NZ, trialing resources with teachers and students.  Building on a 2014 exploratory study on CS and programming in intermediate school, this project investigates the existing assumptions around CT education in K-12. It aims to address the specific questions: How do we teach CT concepts and approaches to primary aged students? If they learn CT, does it have the expected positive impacts on students learning? And, what other positive and negative impacts does this have? Throughout 2015 and 2016 a study was conducted with 18 primary school teachers from across NZ, who used CS Unplugged and educational programming languages in their classrooms. Teachers submitted feedback on these classes through an online form, and participated in semi-structured interviews. The feedback responses and interview transcripts were analysed using a thematic approach, which revealed many positive impacts on students general learning, minimal negative impacts, and observations of CT development.","Reported Development of Computational Thinking, Through Computer Science and Programming, and its Benefits for Primary School Students: (Abstract Only)",NA,2018
Rick Parker,"My research investigates the role of practical experience on professionalization and confidence in students of software engineering during their university-to-work transition. Practical experience comes in many forms, including internships, capstone projects, and ""year-in-industry"" experiences. These hands-on opportunities place the learner into an authentic role using professional methods and tools to accomplish legitimate work. Improved understanding of the positive and negative influences of practical experience during the university-to-work transition may support ongoing discussions of the potential for integrating such experiences earlier in the learning pipeline. I apply a mixed-methods approach to studying the implementation of a computer science software engineering capstone course at an R1 research institution. My work integrates a case study of the artifacts produced during the capstone, qualitative interviews of student reflections about their experiences in the capstone, and a pilot run of a quantitative survey on professional identity and behaviors. Taken together, the three methods shed light on different roles that professional experience plays during the university-to-work transition.",Developing Software Engineers: A Study of Professionalization in a CS Senior Capstone (Abstract Only),NA,2018
Megan Fowler:Tim Schwab,"Computer science (CS) students often evaluate the behavior of the code they write by running it on specific inputs, studying the outputs, and then inductively reasoning to a more general understanding of the code. This is a good starting point in the student's career, but successful graduates must be able to reason deductively about the code they create and encounter. They must be able to reason about the code on all inputs, without running the code. This paper describes an online system named ""BeginToReason"" that is designed to introduce symbolic reasoning, and the results of its use. One hundred and fourteen students were asked to use BeginToReason after receiving no prior instructions on formal reasoning. Several weeks later, a question on their final exam tested their ability to utilize formal reasoning. Across all question variations presented to the students, they completed an average of at least 80% correctly indicating that the online tool is a useful tool for teaching formal reasoning. Subsequent analysis of the results indicates that student responses may have been influenced by the phrasing of the questions as well as their use of concrete numerical examples to solve the problem.",BeginToReason: An Introduction to Symbolic Reasoning (Abstract Only),NA:NA,2018
Zhiyi Li,"When students learn programming, the assignment feedback information from current automatic programming assessment systems, such as Web-CAT [1] is often negative, objective, and unfriendly. These feedback information can easily frustrate students to lose interest in programming related activities. The negative feedback information can have possible serious consequences to students. We work to improve current feedback mechanism in mindset perspective: encourage students by positive feedback with a group of fifteen progress indicators and possible reward. The fifteen progress indicators were designed and implemented based on students' sequential programming submissions. These fifteen indicators include seven general purpose indicators about various aspects when students construct solutions for assignments; eight other software testing indicators concentrate on students' progress when students self-checking their code [3]. We did statistical analysis for these fifteen indicators' suitability to a collection of programming assignments data set including 257 students. In order to validate fifteen progress indicators' effectiveness, we also apply a student performance model: Recent-Performance Finite Analysis model (R-PFA) [4] to the same programming assignment data set we used before. We calculate R-PFA model's prediction accuracy and apply learning curves analysis. In learning curve analysis, eight software test indicators demonstrate students gradually learn positively when they work on their assignment submissions. Based on progress indicators information, we plan to give students possible reward when they make progress. We will research on reward mechanism, reward format, and timing, etc. In this way, moves students to growth mindset [2] - belief that hard work and practices can improve their skills and capabilities.",Improve Feedback Mechanism in Programming Assessment Systems with Progress Indicators and Reward to Foster Students' Growth Mindset: (Abstract Only),NA,2018
Adam Koehler,"Students in introductory computer science courses (CS 1) typically receive little formal instruction in proper programming style. They may gain limited understanding of proper style by reading code samples, observing an instructor write code with proper style, or by receiving feedback on homework submissions. In our research, we evaluate the effectiveness of an alternative pedagogical approach in which students are provided brief instruction on proper style and are then asked to critique examples of improper style. This research answers three questions: First, when a student knows style will be graded, is proper style utilized? Second, does the student's ability to use proper style correlate with academic performance? Third, do our exercises increase the student's ability to employ proper style? We investigated the first two of these questions using data from three CS 1 courses with distinct forms of style assessment: 1) no style grading and no feedback; 2) automated style grading with feedback; and 3) hand-graded style with feedback. We investigated the third research question, by augmenting the first two course forms with our pedagogical approach. In all courses, a CS 1 style guide was distributed at the beginning of the term and similar lecture examples were used. We found that grading of style is necessary to motivate students, and that our approach shows some promise in increasing ability to use proper style.",Teaching Programming Style in CS 1 with Erroneous Examples: (Abstract Only),NA,2018
Paul Cao,NA,Session details: Paper Session: Auto-graders,NA,2018
Georgiana Haldeman:Andrew Tjang:Monica Babeş-Vroman:Stephen Bartos:Jay Shah:Danielle Yucht:Thu D. Nguyen,"Autograding systems are increasingly being deployed to meet the challenge of teaching programming at scale. We propose a methodology for extending autograders to provide meaningful feedback for incorrect programs. Our methodology starts with the instructor identifying the concepts and skills important to each programming assignment, designing the assignment, and designing a comprehensive test suite. Tests are then applied to code submissions to learn classes of common errors and produce classifiers to automatically categorize errors in future submissions. The instructor maps the errors to concepts and skills and writes hints to help students find their misconceptions and mistakes. We have applied the methodology to two assignments from our Introduction to Computer Science course. We used submissions from one semester of the class to build classifiers and write hints for observed common errors. We manually validated the automatic error categorization and potential usefulness of the hints using submissions from a second semester. We found that the hints given for erroneous submissions should be helpful for 96% or more of the cases. Based on these promising results, we have deployed our hints and are currently collecting submissions and feedback from students and instructors.",Providing Meaningful Feedback for Autograding of Programming Assignments,NA:NA:NA:NA:NA:NA:NA,2018
Stephan Krusche:Andreas Seitz,"The increasing number of students in computer science courses leads to high efforts in manual assessment of exercises. Existing assessment systems are not designed for exercises with immediate feedback in large classes. In this paper, we present an AuTomated assEssment Management System for interactive learning. ArTEMiS assesses solutions to programming exercises automatically and provides instant feedback so that students can iteratively solve the exercise. It is open source and highly scalable based on version control, regression testing and continuous integration. ArTEMiS offers an online code editor with interactive exercise instructions, is programming language independent and applicable to a variety of computer science courses. By using it, students gain experiences in version control, dependency management and continuous integration. We used ArTEMiS in 3 university and 1 online courses and report about our experiences. We figured out that ArTEMiS is suitable for beginners, helps students to realize their progress and to gradually improve their solutions. It reduces the effort of instructors and enhances the learning experience of students.",ArTEMiS: An Automatic Assessment Management System for Interactive Learning,NA:NA,2018
Debzani Deb:Muztaba Fuad:James Etim:Clay Gloster,"Classroom formative assessment augmented with timely and frequent feedback has become one of the most prominent teaching practices in education research. On the context of Computer Science (CS) courses that expose students to the functionality and dynamic aspects of various algorithms, traditionally, students are evaluated by exploring in-class paper-based exercises. In these exercises, they simulate the steps of an algorithm by drawing several instances of a diagram. This traditional approach is time consuming, is inherently difficult for students to express the dynamics of an algorithm, does not allow timely feedback, and restricts the number of exercises that students can practice and receive feedback on. Mobile Response System (MRS) is a software environment that facilitates in-class exercises and their real-time assessment using mobile devices and therefore focuses on addressing many of the above-mentioned problems. In this paper, we present results of eight semester-long studies using MRS in two of the required CS courses at Winston-Salem State University (WSSU). Our experimental evaluation shows the educational benefits of the proposed approach in terms of enhanced student retention of covered concepts, reduced failing rate, and increased student engagement and satisfaction.",MRS: Automated Assessment of Interactive Classroom Exercises,NA:NA:NA:NA,2018
Scott Turner,NA,Session details: Paper Session: Computational Thinking #2,NA,2018
Patricia Ordóñez Franco:Joseph Carroll-Miranda:María López Delgado:Eliud Gerena López:Grace Rodríguez Gómez,"This paper intends to share both the experience of teachers and document the research of the design, implementation, and evaluation of a massive open online course (MOOC). The primary purpose of the MOOC was to do outreach and build community to interest teachers from any discipline in Puerto Rico to incorporate Computational Thinking (CT) into their curriculum and peak their interest in Computer Science Education (CSE). Additional objectives were to use CT as a way to build self-efficacy in high school teachers as integrators of this newly gained knowledge while investigators learned the state of CSE and technology integration in schools of Puerto Rico. The MOOC titled Integrating Computational Thinking into the Curriculum was the first free online Professional Development offered to educators in Puerto Rico and has served as the launching board for the Computer Science Teachers' Association (CSTA) in Puerto Rico. This paper will describe the course's development, content and pertinent activities as they relate to the established goals of the project. Finally, it will share some vignettes of the educators' experiences as well as the results of a survey that was administered to 164 participants of the MOOC in its second rendition and had a 32% response rate.",Incorporating Computational Thinking in the Classrooms of Puerto Rico: How a MOOC Served as an Outreach and Recruitment Tool for Computer Science Education,NA:NA:NA:NA:NA,2018
Russell Feldhausen:Joshua Levi Weese:Nathan H. Bean,"This paper describes our experiences developing and teaching two different interventions focused on computational thinking and computer science at a yearly STEM outreach program hosted by a local school district. We describe the creation of our lesson plans, how we worked with experienced and pre-service teachers alike to deliver the lessons, and how we assessed the effectiveness of each intervention. We will discuss our successes and failures, and provide information on our future plans to incorporate more formalized education theory, pedagogy, and research methodology in future years to further this project. Based on our assessment results, we observed statistically significant gains in student self-efficacy with creating computer programs that perform a variety of operations. In addition, students reported a significantly higher understanding of how computer programming can be used in daily life. Our survey also highlighted differences in student self-efficacy between the two interventions, and we discuss possible sources for that result. We discuss observed results based on student groups with various backgrounds, previous STEM experiences, and socioeconomic status.",Increasing Student Self-Efficacy in Computational Thinking via STEM Outreach Programs,NA:NA:NA,2018
Youwen Ouyang:Katherine L. Hayden:Julie Remold,"Many programs offer informal experiences in programming for select students who may qualify or whose parents pay fees for attending. Integrating computational thinking (CT) in the formal classroom setting provides equal opportunities to develop valuable problem-solving skills for all students. However, such integration poses challenges since teachers may have limited experiences in computing and may be pressured by time constraints due to the need to cover Common Core and Next Generation Science Standards (NGSS) as well as district specific initiatives. A 2-year intervention has been designed to target upper elementary level self-contained classrooms to increase teachers' knowledge and ability for integrating CT into science lessons. Twenty teachers from four school districts in Southern California participated in the first year of the project's professional development activities. These schools have varying levels of diversity and socioeconomic status of student populations. Instead of using popular drag-and-drop programming tools such as Scratch or Tynker, the first year of the project focused on key CT concepts and helped teachers connect these concepts with skills important for student success in science activities. This paper reports on the study of the project's impact on student learning of key CT concepts among students from project classrooms. The main elements of the professional development are also described.",Introducing Computational Thinking through Non-Programming Science Activities,NA:NA:NA,2018
Debra M. Duke,NA,Session details: Paper Session: Databases,NA,2018
Sriram Mohan,"An increase in data tracking by organizations has created a need for systems that can handle a variety of data models at scale. NoSQL databases and Polyglot persistence - the industry's preferred solution to modern data problems is not covered in sufficient detail, if covered at all in the undergraduate curriculum. The paper reports on our experience of introducing NoSQL paradigms using a four-tiered learning model to undergraduate students over the last two years. We believe that our methodology exposes these new ideas in an approachable manner and would provide a great starting point for other programs interested in teaching modern database paradigms and distributed data modeling and processing.",Teaching NoSQL Databases to Undergraduate Students: A Novel Approach,NA,2018
Don Goelman:Suzanne W. Dietrich,"The goal of the presented pedagogical tool is to engage all disciplines in learning how to understand their data and the relationships among the data, and subsequently representing those data in a relational database. The tool provides a visual introduction to important concepts in database design using Entity Relationship Diagrams as the primary visual design model, relating these same concepts to other models, such as UML diagrams and the crow's feet notation used in MySQL Workbench. Once the conceptual design is realized, the tool visually presents a methodology for mapping the various data concepts to a collection of relations. Relational databases are ubiquitous and conceptually simple for all majors to understand based on the analogy of a spreadsheet with named columns. A unique feature of this tool is a built-in formative self-assessment feature, called a checkpoint, to engage learners in reflecting on what they have learned. The checkpoint provides 20 questions, multiple-choice and true/false, over a given conceptual design to test the student's understanding of the design features and mapping to relations. Another novel capability of this tool is its ability for instructors to customize the example to their discipline, supporting the introduction of database topics within the context of the domain to which it is being applied. There are already customizations of the tool available in several disciplines, broadening the accessibility of data design to many majors. Experience has shown that the tool supports visual learners in all majors, including computer science.",A Visual Introduction to Conceptual Database Design for All,NA:NA,2018
Saturnino Garcia,"Numerous studies have demonstrated the effectiveness of flipped classrooms (e.g. peer instruction) in computer science courses. Flipped classrooms rely on students having obtained first exposure to concepts through pre-class activities such as viewing videos or reading a textbook. Having engaged with the material before class, class time can be spent on more challenging activities with feedback from the instructor and classmates. These pre-class activities can be a challenge for students, who often do not have the skills necessary to critically engage with the assigned reading/viewing. As a result students often come to class under-prepared despite completing the pre-class activities. This paper presents the author's experience with adding guided practice worksheets to improve student preparedness in two courses: a CS1 course and a lower-division ""Introduction to Computer Systems"" course. These pre-class worksheets provided a structured set of learning objectives for students to focus on in their reading as well as exercises to test those objectives. Limited results indicate a high worksheet completion rate and a strong positive correlation between individual completion rates and final course grade. This paper also presents recommendations for those instructors wishing to adopt guided practice in their class.",Improving Classroom Preparedness Using Guided Practice,NA,2018
Michelle Craig,NA,Session details: Paper Session: Pedagogy #3,NA,2018
Giuseppe De Ruvo:Ewan Tempero:Andrew Luxton-Reilly:Nasser Giacaman,"Design smells are design structures that indicate poor design quality. Many identified smells are difficult to teach as they require a degree of experience and judgement that novices, by definition, do not have. We have identified a design smell, which we call ""unencapsulated collection"", that is common in novice designs. It is simple to describe, allowing it to be objectively detected, and the refactoring steps needed to remove the smell are usually simple to illustrate. We give a description of the smell and present the results of an empirical study showing its prevalence. We outline the general steps for refactoring the smell, and illustrate it with a case study. The simplicity of this smell makes it a good candidate for teaching good design principles to novices.",Unencapsulated Collection: A Teachable Design Smell,NA:NA:NA:NA,2018
Luke Gusukuma:Austin Cory Bart:Dennis Kafura:Jeremy Ernst:Katherine Cennamo,"This paper reports on a systematic method used to improve an existing unit of instruction. The method is distinctive in combining steps of instructional design with ""knowledge components"" from a cognitively-based framework of learning. Instructional design is used to develop assessment instruments that incorporate information about student misconceptions. The method uses the assessment instruments to evaluate student performance and learning gains, while statistical analysis evaluates the quality of the instruments themselves using measures of difficulty and discrimination. Fine-grain insight into possible improvements is enabled by the knowledge components implicated by the assessment. The method is illustrated and evaluated by applying it to a unit of instruction on collection-based iteration in a computational thinking class. Data gathered during this evaluation highlights a number of opportunities within the unit to refine the instruction.",Instructional Design + Knowledge Components: A Systematic Method for Refining Instruction,NA:NA:NA:NA:NA,2018
Benjamin Xie:Greg L. Nelson:Andrew J. Ko,"We propose and evaluate a lightweight strategy for tracing code that can be efficiently taught to novice programmers, building off of recent findings on ""sketching"" when tracing. This strategy helps novices apply the syntactic and semantic knowledge they are learning by encouraging line-by-line tracing and providing an external representation of memory for them to update. To evaluate the effect of teaching this strategy, we conducted a block-randomized experiment with 24 novices enrolled in a university-level CS1 course. We spent only 5-10 minutes introducing the strategy to the experimental condition. We then asked both conditions to think-aloud as they predicted the output of short programs. Students using this strategy scored on average 15% higher than students in the control group for the tracing problems used the study (p<0.05). Qualitative analysis of think-aloud and interview data showed that tracing systematically (line-by-line and ""sketching"" intermediate values) led to better performance and that the strategy scaffolded and encouraged systematic tracing. Students who learned the strategy also scored on average 7% higher on the course midterm. These findings suggest that in <1 hour and without computer-based tools, we can improve CS1 students' tracing abilities by explicitly teaching a strategy.",An Explicit Strategy to Scaffold Novice Program Tracing,NA:NA:NA,2018
Briana Morrison,NA,Session details: Paper Session: Retention in CS,NA,2018
Markeya S. Peteranetz:Abraham E. Flanigan:Duane F. Shell:Leen-Kiat Soh,"Retaining students in computer science (CS) courses and majors is a concern for many undergraduate CS programs in the United States. A large proportion of students who initially declare a major in CS do not complete a CS degree. The impact of future-oriented motivational constructs such as career aspirations and future connectedness on retention has received relatively little research attention, but these are potential contributors to students' retention in CS courses. The purpose of this study was to investigate how future-oriented motivation related to CS students' retention in CS courses over three consecutive semesters. Students enrolled in CS courses (four 100-level courses, one 200-level course, three 300-level courses, and five 400-level courses) completed survey measures of future-oriented motivation, and course enrollment data were collected for the three semesters. Logistic regression was used to determine whether motivation variables could distinguish between students who were enrolled in at least one CS course during a given semester and students who were not enrolled in any CS courses. Results indicate that, across all three semesters, career aspirations and knowledge of CS career paths were associated with a greater likelihood of continuing to take CS courses, and stronger future connectedness was associated with a lower likelihood of continuing to take CS courses. Implications for CS educators are discussed.",Future-Oriented Motivation and Retention in Computer Science,NA:NA:NA:NA,2018
Barbara Ericson:Tom McKlin,"Rise Up 4 CS was created at Georgia Tech in the spring of 2013 to help African American students succeed in their Advanced Placement (AP) Computer Science A (CSA) high school course and on the exam. The AP CSA course is intended to be equivalent to a college level CS1 course. In the fall of 2014, Sisters Rise Up 4 CS was also created to help female students succeed. Rise Up (RU) and Sisters Rise Up (SRU) both offer remote and in-person help sessions led by undergraduate students, who serve as near-peer role models. The long-term goal of these projects is to attract more underrepresented students to computing careers by increasing their self-efficacy. Self-efficacy is the belief that one can succeed in a particular task or field. Thanks to generous support from Google, RU and SRU have been offered at several other colleges and universities as well. This paper summarizes the results from spring 2013 to summer 2016, reports on an alumni survey answered by 68 (32%) of the 211 alumni, and includes excerpts from five semi-structured interviews. The majority (63%) of the alumni survey respondents, who are in college, are majoring in computing. A similar percentage of the alumni who are still in high school intend to major in computing (62%). When asked about the programs' impact on their career choices and interest in computing, 61% of respondents indicated that the program increased their interest in computer science and 24% indicated that it changed their career plans to computing.",Helping Underrepresented Students Succeed in AP CSA and Beyond,NA:NA,2018
Rahman Tashakkori:Cindy Norris:Mary E. Searcy,"In 1999, the National Science Foundation created the ""Computer Science, Engineering, and Mathematics Scholarships"" (CSEMS) program to provide funding for institutions to supply scholarships for academically talented and financially needy students to complete an associate, baccalaureate, or graduate degree in computer science, computer technology, engineering, engineering technology, or mathematics. In 2004, the program was renamed to ""Scholarships for Science, Technology, Engineering, and Mathematics"" (S-STEM) and modified to include students from physical and life sciences. Appalachian State University (ASU) has been the recipient of four CSEMS/S-STEM awards since 2001 and the scholarships have funded 161 students. Nearly all of these students have high levels of financial need and the majority are first generation college students. Overall, the program has retained 87 percent of these students; 12 percent of the scholars completed a bachelor's and then continued on to complete a master's degree or are in the process of doing so. The retention rate has increased as our program has improved. The retention rate of the current cohort of S-STEM students is 92.3 percent; 31 percent of the students in the current program completed a bachelor's degree and are pursuing or have completed a master's degree. These retention numbers are significantly higher than the 31 percent national average reported by the U.S. Department of Education. In addition, these retention numbers are higher than those found at our own institution for all Computer Science and Mathematics majors. This paper discusses the components of our successful program.",The Components of a Successful S-STEM Program: What Works at Appalachian State University,NA:NA:NA,2018
Elva J. Jones,NA,Session details: Paper Session: Robotics,NA,2018
Michael V. Doran:George W. Clark,"The study of robotics is often an excellent recruitment motivation for students entering a computing curriculum. It is also often cited that Artificial Intelligence (AI) and related robotics is a critical area of future innovation in computing. However, there are a number of challenges to implementing a robotic curriculum at the university level. A few of those challenges include, lack of a uniform hardware platform, incongruity in the software used, and the missing significant deliverable artifacts by students at the end of a term to encourage learning and further interest. Educational robotic activities are often treated as advanced research topics with high associated costs that prohibit widespread integration into the curriculum. In this paper, we present the deployment of a multi-stage robotic platform that attempts to address these challenges and overcome the obstacles. We detail the evolution of the hardware from using a readily available LEGO Mindstorm base platform to next include the addition of an Arduino and Raspberry Pi. Likewise, we detail the transition from the basic LEGO Mindstorm software to the use of leJOS and PYTHON. At each stage, additional sensors and software libraries can likewise be added. Finally, we present an achievable academic goal for students to use the hardware and software platforms to develop a model autonomous vehicle with aspects of intelligent control, learning and adaptive behaviour. All levels of projects can be undertaken at the appropriate level of maturity for the students in the computing curriculum.",Enhancing Robotic Experiences throughout the Computing Curriculum,NA:NA,2018
Stephanie Ludi:Debra Bernstein:Karen Mutch-Jones,"Making technology and computer science learning experiences accessible to students with disabilities is an important step in preparing them to enter the workforce of the future--one in which many jobs will require skills to solve problems with technology. This paper presents the tool and curricular enhancements developed to make the Exploring Computer Science Robotics unit accessible to students with visual impairments (VI). It describes the evolution of enhancements, based on formative evaluation studies, to increase support as VI students engaged in building and programming LEGO Mindstorms robots. Results describe the ways in which enhancements were iteratively designed in response to student engagement and confidence, as well as their emerging understanding of top-down and bottom-up processes in robotics design and programming.",Enhanced Robotics!: Improving Building and Programming Learning Experiences for Students with Visual Impairments,NA:NA:NA,2018
Farha N. Ali,"With the increasing impact of the Internet of Things (IoT) in our everyday lives, it is imperative that a work force would be needed not only to develop the new IoT solutions but also to maintain the established IoT systems. In this paper, we discuss our experiences in curriculum development for three courses on the topic of IoT. This paper's main focus is course development for the latest offering (Spring 2017), and a discussion about what we changed from the previous two offerings. We discuss our weekly lecture plans for IoT topics' coverage along with programming assignments and other assessment activities. We also discuss our observation of students' interest levels, and how we used an incremental project development approach to keep students engaged and motivated. We conclude with our observations of what did and didn't worked for us. We also discuss what we missed because of time constraints but would try to include in our next offering.",Experiences in Teaching the Internet of Things Courses,NA,2018
Carlos Cabrera,NA,Session details: Paper Session: Security Education,NA,2018
Vandana P. Janeja:Abu Zaher Md Faridee:Aryya Gangopadhyay:Carolyn Seaman:Amy Everhart,"The focus of this paper is an evaluation of our peer mentoring framework designed to encourage more students to seek cybersecurity career pathways through providing peer interactions. We present and compare results from two years (Spring 2016 and 2017) of interaction between students in an introductory Information Systems class (IS 300: Management of Information Systems) and an upper-level elective Cybersecurity course (IS 471: Data Analytics for Cybersecurity). Our results show a continuation of the general trend observed in the 2016 study. The students who receive peer mentoring show more interest in cybersecurity issues and careers and gain more overall knowledge throughout the semester, than those who don't. This is reflected by the results of an anonymous survey and overall grade improvements. These students show more variations regarding their choice of cybersecurity as a career compared to students who did not receive any mentoring, demonstrating that they are able to make more informed decisions. Female students exhibit more pronounced responses to peer mentoring in contrast to their male counterparts.",Enhancing Interest in Cybersecurity Careers: A Peer Mentoring Perspective,NA:NA:NA:NA:NA,2018
Madiha Tabassum:Stacey Watson:Bill Chu:Heather Richter Lipford,"Security vulnerabilities are still prevalent in today's software, yet many can be prevented with standard secure programming techniques. Thus, educators of future developers need to teach students not just how to program, but how to program securely. Many researchers advocate integrating secure programming knowledge and skills across the computer science curriculum. In this paper, we report the results of a study comparing two such methods: our own tool ESIDE, which provides students with security warnings on assignment code, and a security-clinic approach, a one-on-one session with a teaching assistant. Both methods suffered from challenges in incentivizing students to incorporate secure programming techniques into their code. We discuss the relative strengths and weaknesses of these methods, and the challenges of timing and motivation of secure programming education.",Evaluating Two Methods for Integrating Secure Programming Education,NA:NA:NA:NA,2018
Manish Bhatt:Irfan Ahmed:Zhiqiang Lin,"Historically, hands-on cybersecurity exercises helped reinforce the basic cybersecurity concepts. However, most of them focused on the user level attacks and defenses and did not provide a convenient way of studying the kernel level security. Since OS kernels provide foundations for applications, any compromise to OS kernels will lead to a computer that cannot be trusted. Moreover, there has been a great interest in using virtualization to profile, characterize, and observe kernel events including security incidents. Virtual Machine Introspection (VMI) is a technique that has been deeply investigated in intrusion detection, malware analysis, and memory forensics. Inspired by the great success of VMI, we used it to develop hands-on labs for teaching kernel level security. In this work, we present three VMI-based labs on (1) stack-based buffer over-flow, (2) direct kernel object manipulation (DKOM), and (3) kernel integrity checker which have been made available online. Then, we analyze the differences in approaches taken by VMI-based labs and traditional labs and conclude that VMI-based labs are better as opposed to traditional labs from a teaching standpoint because they provide more visibility than the traditional labs and superior ability to manipulate kernel memory which provides more insight into kernel security concepts.",Using Virtual Machine Introspection for Operating Systems Security Education,NA:NA:NA,2018
Mia Minnes:Bruce Maxwell:Stephanie R. Taylor:Phillip Barry,"The importance of written communication and critical thinking in Computer Science is widely acknowledged. It was called out specifically in the curriculum guidelines ACM CS2013 [6] and has been the topic of a number of previous SIGCSE papers, for example [1-4]. Moreover, writing as a pedagogical practice can help make CS more accessible for a broader population. However, special challenges may arise for students who are English-language learners or have writing-specific learning differences.",Writing in CS: Why and How?,NA:NA:NA:NA,2018
Richard Weiss:James Caristi:Jesse M. Heines:Aaron Koehl:Kelly Rossum,"One of the ways to attract a more diverse group of students to computer science is by offering courses that are interdisciplinary. Some of the first examples of this combined multimedia with programming. There are many more possibilities, but as computer scientists, we often do not have the domain knowledge to teach these courses alone. Team teaching offers a solution to this dilemma. The goal of this panel is to present some of the problems we have encountered and to discuss some of the solutions.",Perfect Harmony: Team Teaching Computing & Music,NA:NA:NA:NA:NA,2018
Lucia Dettori:Ronald I. Greenberg:Steven McGee:Dale Reed:Brenda Wilkerson:Don Yanek,"Since President Obama's announcement of the Computer Science for All Initiative in 2016, there has been a surge in the number of districts that are planning for or newly implementing computer science (CS) offerings at their schools. Chicago Public Schools (CPS) is the first large school district to have adopted Computer Science as a high school graduation requirement, taking this significant step along the path towards systemic change. The foundation was laid eight years ago when an informal alliance was formed between a CPS high school CS teacher, a CPS administrator, and three university computer scientists.",CS as a Graduation Requirement: Catalyst for Systemic Change,NA:NA:NA:NA:NA:NA,2018
Alla Webb:Ray Gonzales,"1.SUMMARY This special session will focus on a multi-year project based on an AAC&U Teaching to Increase Diversity and Equity in STEM (TIDES) grant focused on integrating Culturally Responsive Teaching (CRT) in Computer Science courses at Montgomery College, a highly diverse urban-suburban community college in Maryland. The presenters will discuss the project's development of a CRT model based on a ""Discover-Adjust-Assess"" process that took into account the realities of the college's faculty and student contexts. Attendees will participate in awareness-raising activities, analyze case studies involving common teaching-learning challenges using CRT-based concepts and tools, and be presented with sample data in the form of student/faculty survey results and interview responses. Several CRT resources created as part of the project will also be presented.",Striving for Excellence in Introductory Computer Science Courses Using Culturally Responsive Teaching (CRT),NA:NA,2018
Dan Garcia:Tiffany Barnes,NA,Session details: Morning Keynote & 2018 SIGCSE Award for Outstanding Contributions to Computer Science Education,NA:NA,2018
Tim Bell,"Computer Science is seen in many different ways in society; some may consider it to be an esoteric collection of jargon-laden skills, while others view it as an essential topic of study for all citizens. Many of us are very passionate about sharing our enthusiasm for the subject with others, and we are at a time in history where much of the hard work to get the public to understand that it is something special is starting to bear fruit, as we see Computer Science and Computational thinking appearing in K-12 curricula around the world. But what is it about Computer Science that makes it so important and exciting? Is it a subject in its own right that deserves space in the curriculum? We will explore the reasons that young students should become engaged with the subject, illustrated using an Unplugged perspective.",What's the Big Idea with CS Education in K-12?,NA,2018
Matthew Hertz,NA,Session details: Paper Session: CS1 #1,NA,2018
Celine Latulipe:Audrey Rorrer:Bruce Long,"We present results of a college wide undergraduate retention study tracking student retention in computing, comparing students who experience a flipped, active learning version of CS1 against those who experience a traditional lecture and lab version of CS1. We examine demographic subgroups to understand retention differences between sexes and racial/ethnic groups. Specifically, we examine which students exit computing majors in the semester immediately after taking CS1, and those who leave following one academic year. This allows us to focus on how the immediate experience of the CS1 teaching approach impacts desire to continue in computer science during the critical first year in CS. Our dataset includes 698 CS majors who took CS1 in either the flipped or traditional style, between Fall 2013 and Fall 2016, at a large, comprehensive, urban research university in the US. Our results show that women were less likely to switch majors after taking the flipped version than after taking the traditional version. Conversely, male students were more likely to be retained following the traditional course, and less likely to be retained following the flipped course. Performance of CS majors in CS1, as measured by DFW rates, is statistically higher in the flipped classes than performance in the traditional classes. One-year retention in the major for under-represented groups (women and racial minorities) was higher in the flipped classes for new freshmen taking CS1, but not for transfer students.",Longitudinal Data on Flipped Class Effects on Performance in CS1 and Retention after CS1,NA:NA:NA,2018
Adalbert Gerald Soosai Raj:Kasama Ketsuriyonk:Jignesh M. Patel:Richard Halverson,"Computer Science (CS) is taught in India, using English as the medium of instruction, to students whose native language is not English. This places a high cognitive load on students who learn programming for the first time and who are not very proficient in English. The problems these students face become even harder since learning to program can be an incredibly difficult task. Our study aims to find out if a student's native language has any effect on the student's ability to learn programming. We taught linked list, a basic concept in CS, to two groups of undergraduate students for a week in Tamil Nadu, India. We used English to teach one group of students and English and Tamil (the native language in Tamil Nadu) to teach the other group. Our intervention consisted of three lectures and one live-coding session. We collected quantitative and qualitative data using technical tests and open-ended feedback respectively. We found that although teaching programming using both English and Tamil is no different when compared to using only English with respect to student learning, students have expressed positive opinions about teaching and learning CS using two languages.",Does Native Language Play a Role in Learning a Programming Language?,NA:NA:NA:NA,2018
Brian Harrington:Nick Cheng,"Much work has been done on the achievement gap between code tracing and code writing in CS1 students. The generally accepted explanation for this gap is that tracing and writing form separate steps in a learning scaffolding; students must first learn to trace code before they can be expected to write code. The expectation is that once students have mastered these skills, future grades will be driven by their ability to understand the deeper learning concepts, and so the gap between tracing and writing should disappear. In this paper, we detail and evaluate a study on 384 CS2 students to evaluate whether a tracing-writing gap still exists, and assess whether anything can be deduced about students who continue to exhibit such a gap. We find that not only does the gap seem to have closed by CS2, students are equally likely to show a reverse gap in the writing-tracing direction. However, further analysis shows a strong correlation between students who do continue to have a gap (in either direction) and poor overall performance in the course.",Tracing vs. Writing Code: Beyond the Learning Hierarchy,NA:NA,2018
Chris Gregg,NA,Session details: Paper Session: Curriculum Issues #1,NA,2018
Michael J. Oudshoorn:Stan Thomas:Rajendra K. Raj:Allen Parrish,"The Computing Accreditation Commission of ABET accredits over 300 Computer Science programs worldwide under the Computer Science program criteria. In the past few years, the Commission has engaged the computing community to modify and update these criteria, and has now signed off on an updated set of program criteria that take into account factors such as the CS2013 curricular guidelines, impact on currently accredited programs, structural changes to clarify the criteria, and the reduction of the assessment burden. These recent changes to the Computer Science program criteria primarily impact student outcomes (what program graduates are expected to know and be able to do by graduation) and curriculum. Those changes will impact computer science programs in a variety of ways and degrees---some programs will be impacted significantly while others will be affected in a relatively minor way. This paper examines the changes that will take effect starting in the 2019-20 accreditation cycle, covering the rationale for those changes and exploring the likely impact on computer science programs that are currently accredited or seeking accreditation in the near future.",Understanding the New ABET Computer Science Criteria,NA:NA:NA:NA,2018
Cara Tang:Cindy Tucker:Christian Servin:Markus Geissler,"After two years of intense curriculum development effort, the ACM CCECC (Committee for Computing Education in Community Colleges) published Computer Science Curricular Guidance for Associate-Degree Transfer Programs with Infused Cybersecurity, known as CSTransfer2017. Based on Computer Science Curricula 2013 (CS2013), this guidance was specially designed to aid in the smooth transfer from associate degrees to baccalaureate degrees. The curriculum contains 17 of CS2013's 18 knowledge areas, and a variety of knowledge units appropriate in the first two years of a computer science degree. The guidance comprises over 200 learning outcomes, 64 of which are infused with cybersecurity, along with a three-tiered assessment rubric using measurable verbs from Bloom's Revised Taxonomy. In addition to the CSTransfer2017 task group consisting of 20 community college educators, input from both two- and four-year educators was collected via surveys administered to a global audience, as well as two rounds of public review and comment on drafts of the guidance. Examples of degree and certificate programs that align with CSTransfer2017 are part of a growing repository hosted on the CCECC website, ccecc.acm.org. These program examples demonstrate the adaptability of this competency-based curriculum approach to a variety of computing programs. The CCECC invites institutions to highlight their computer science degree program by submitting a program example at ccecc.acm.org/correlations.",Computer Science Curricular Guidance for Associate-Degree Transfer Programs,NA:NA:NA:NA,2018
Susana Masapanta-Carrión:J. Ángel Velázquez-Iturbide,"Bloom's taxonomy is a model that allows characterizing students' learning achievements. It is frequently used in computer science education (CSE), but its use is not straightforward. We present a systematic review conducted to know actual use of the taxonomy in CSE. We found that it was mostly used in programming education and to assess students' performance. A more relevant contribution is a classification of authors' difficulties. In particular, the most often reported difficulty is determining the level of the taxonomy where an assessment task can be classified. In addition, we present authors' hypotheses about possible causes of the difficulties and the solutions they adopted.",A Systematic Review of the Use of Bloom's Taxonomy in Computer Science Education,NA:NA,2018
Kinnis Gosha,NA,Session details: Paper Session: Diversity #1,NA,2018
Danielle Cummings:Loretta Cheeks:Rosario Robinson,"The intersection between Science, Technology and the Arts is providing an insightful and rich playground for engaging historically underrepresented and underserved youth. This paper discusses an innovative and effective approach for learning Science, Technology, Engineering, the Arts and Mathematics (STEAM) with an emphasis on using expressive arts as a culturally-centered engagement tool. Our framework incorporates a multimodal model that considers unconventional learning styles that appeal to underrepresented and underserved students, the power of cultural cues and the presence of minority STEM professionals to shape students learning experiences. In addition to demonstrating the importance of culturally-centered learning approaches, we've identified methods of engaging students' families and communities as a means of strengthening the pipeline to continued education in STEM.",Culturally-Centric Outreach and Engagement for Underserved Groups in STEM,NA:NA:NA,2018
Jennifer M. Blaney,"While the gender gap in undergraduate computing is often discussed in reference to the representation of women in the computing major, less is known about leadership and other affective outcomes for women and men in computing. This study examines how gender shapes (a) introductory computing students' perceptions of their leadership, including measures of both general self-rated leadership ability and perceived capacity for leadership in computing, (b) how these perceptions change during the introductory computing course, and (c) the experiences that are related to change in leadership outcomes. Findings reveal gender differences in how incoming introductory course students report both their general leadership abilities and their perceived capacity for leadership in computing. Additionally, both women and men experienced a decline in their perceived capacity for leadership in computing during the introductory course. These and other findings are discussed, with attention given to the implications for both researchers and instructors seeking to broaden women's participation in computing.",Looking Beyond Representation: How Women Develop Their Leadership Perceptions During the Introductory Computing Course,NA,2018
Penny Rheingans:Erica D'Eramo:Crystal Diaz-Espinoza:Danyelle Ireland,"At our university, women are a minority in all computing and engineering majors. This situation is mirrored at other universities nationwide, as well as in technical industries. Stereotype threat, the risk of confirming a negative stereotype about one's social group, can result in women not performing as well as their male counterparts in computing, mathematics, and engineering courses. The aftermath of these experiences cause women to fear they do not belong or are not ""smart enough"", resulting in women switching to a different major. Even high-performing women can be subject to these pressures. We present a Scholar model for increasing gender diversity in technology fields and an evaluation of its impact on the retention and success of women in computing and engineering majors. We compare the performance of Scholars to that of non-Scholars with similar demographic and academic backgrounds who entered into the College of Engineering and Information Technology at the University of Maryland, Baltimore County.",A Model for Increasing Gender Diversity in Technology,NA:NA:NA:NA,2018
Paul T. Tymann:Dale Reed:Chinma Uche:Carol S. Yarbrough,NA,The Impact of AP Computer Science Principles: Are You Ready to Change Your Undergraduate Courses?,NA:NA:NA:NA,2018
Mia Minnes,NA,Session details: Paper Session: Peers and Cohorts,NA,2018
Scott Vandenberg:Sharon G. Small:Meg Fryling:Robin Flatland:MaryAnne Egan,"Computer Science (CS) is not taught in enough high schools thus many students arrive at college or university knowing little about it and often do not consider taking a CS course during their first year. At the same time, we encounter many college or university juniors and seniors who, while taking their first CS course, discover an aptitude and interest, at which point it is too late. We describe an innovative one-week residential summer program designed to educate non-computer science majors, before their second year of college or university, about the field's many areas and long-term prospects. The program has succeeded at encouraging undecided students to major or minor in CS and thus somewhat ameliorates the lack of CS in K-12 education and furthers the conference goal of ""CS For All"".",A Summer Program to Attract Potential Computer Science Majors,NA:NA:NA:NA:NA,2018
Pablo Frank-Bolton:Rahul Simha,"This study presents and evaluates a scalable approach for improving learning outcomes by having students ""teach"" peers in the same course via video. The approach was tested in a standard upper-level undergraduate computer algorithms course with material commonly considered challenging to teach: combinatorial optimization and NP-complete problems. An important design goal was to incentivize students to learn deeply in crafting their instructional videos while minimizing the added burden on instructors to review their products, allowing for scalability. A learning assessment administered to two successive cohorts (N=89) showed statistically significant improvement (P<0.0001) in learning for students who make the videos compared to those who merely study the materials or view the videos. Students not only enjoyed applying their creativity in making videos but, in the process, also strengthened their conceptual learning. While much of the existing research on student-created videos has shown its effectiveness in motivating students, few studies exist that directly isolate learning gains in those who craft instructional videos.",Docendo Discimus: Students Learn by Teaching Peers Through Video,NA:NA,2018
Lina Battestilli:Apeksha Awasthi:Yingjun Cao,"Programming projects are widely used in CS1 classes to develop students' coding skills. To improve the learning impact of these projects, we propose and study a special project format named two-stage project in an introductory computer science course. For the first stage, students submit their programming projects individually followed by a second stage where they are paired to work on the same project in order to create an improved solution. Through peer collaboration, students review each other's work from the first stage, and write correctly-styled, well-documented, and more thoroughly tested code during the second stage. We used isomorphic assessments before and after the second stage of a project to measure students' understanding of the course material. Results indicate that two-stage projects tend to improve student understanding of course learning objectives. We also studied students' perceptions and experiences with two-stage projects, and their confidence toward computing. Students liked working on two-stage projects because they saw new ways to approach the same problem, and they liked discussions with their peers.",Two-Stage Programming Projects: Individual Work Followed by Peer Collaboration,NA:NA:NA,2018
Cheryl Seals,NA,Session details: Paper Session: Service Learning,NA,2018
Lori Pollock:James Atlas:Tim Bell:Tracy Henderson,"Study abroad offers students the opportunity to experience other cultures, languages, and environments while obtaining credits toward their degree. Students are also taught to appreciate the diversity of people and culture, such that they may dismiss stereotypes and learn to communicate and collaborate cross-culturally in a global economy. Unfortunately, few universities offer study abroad programs directed specifically to computer science and particularly in combining student technical learning with service learning for broadening participation in computing throughout the world. In this paper, we describe a service-learning-based model for computer science students and other university students with minimal prior computer science experience to engage and inspire themselves and the next generation of computational thinkers through learning, teaching and creating web-based learning games along with local children and teachers in a foreign country. We describe the model focusing on learning objectives, curriculum, field component, planning, and partnership building. We describe the products that undergraduates were able to create in four weeks and their CS education service learning field experiences. Finally, we investigate the impact of the study abroad model on undergraduates' content knowledge, and their career and personal development.",A Computer Science Study Abroad with Service Learning: Design and Reflections,NA:NA:NA:NA,2018
Spencer Robinson:Margeret Hall,"Experiential learning is ever-more popular with educators, industry, and with students themselves. Finding and delivering appropriate applied use cases can be challenging though, as on one hand industry partners may not willing to give insights to non-employees into their systems for creating truly meaningful case studies, and on the other hand the appropriate balance between instruction and application is ill-defined. Service learning projects are one solution for filling in the applied project gap. This case study takes place in the nexus between blended classrooms, applied software development, and service learning. Junior and senior level students partnered with a community actor to develop deployable software applying the Agile methodology. The service-learning project enabled students to engage in a full-cycle development project, from requirements gathering to hypercare. However, significant trade-offs in structure and classroom management must be made when the focus of the class is a full implementation. Blended technologies and course delivery were found to aid delivery and project management in a seamless manner. Drawing on feedback from stakeholders and students, this experience report makes a series of recommendations for implementing applied software development. Our contribution is the introduction and assessment of a method to marry (online) information systems education with service learning.",Combining Agile Software Development and Service-learning: A Case Study in Experiential IS Education,NA:NA,2018
Brian Thoms:Evren Eryilmaz,"Service-learning continues to play an increasing role in higher education as instructors look to incorporate high impact practices that challenge students through active and experiential learning. Yet limitations in learning management systems (LMS) can be barriers to service-learning project success. In this paper, we present an experience report on the design and implementation of an interdisciplinary service-learning course for computer science. We also present on the design and implementation of specialized social networking software as a mechanism to support service-learning across interdisciplinary computer science courses. More specifically, this research introduces customized social software, consisting of blogging, wiki and discussion software as tools for facilitating the specialized needs of these courses. These needs range from the ability for project management and milestone tracking, which are supported through wiki technology and messaging, self-reflection, which is supported through blogging and information exchange and knowledge sharing, which are supported through online discussion boards, social bookmarking and file-sharing. Results were largely positive, with a majority of students indicating that the course learning environment supported learning, collaboration and course community.",Social Software Design To Facilitate Service-learning In Interdisciplinary Computer Science Courses,NA:NA,2018
Joseph Chao,NA,Session details: Paper Session: Summer and Boot Camps,NA,2018
Quinn Burke:Cinamon Bailey:Louise Ann Lyon:Emily Green,"This study reports on the perceived capacity of coding boot camps versus computer science (CS) undergraduate programs to instill a range of software development skills from an industry perspective. We present findings from a series of national focus groups and individual interviews with representatives from the software development industry, who spoke about their hiring procedures and preferences as well as how they perceived coding boot camp applicants in comparison to graduates from four-year CS degree programs. We also present findings on how the boot camp and university participants viewed their role in developing necessary skills for employability. Results indicate that hiring managers filling positions, generally have a favorable perspective of coding boot camp hires in relation to their demonstration of ""soft"" skills, such as teamwork, passion, and persistence; With regards to four-year university hires, several industry representatives indicated that a four-year degree is mandatory for hire, while also listing a solid understanding of CS principles and substantial exposure to mathematics. The Discussion section focuses on the future potential of coding boot camps as an alternative training ground for the software development industry.",Understanding the Software Development Industry's Perspective on Coding Boot Camps versus Traditional 4-year Colleges,NA:NA:NA:NA,2018
Yu-Cheng Tu:Gillian Dobbie:Ian Warren:Andrew Meads:Cameron Grout,"Recently, there has been a strong demand for talented ICT (Information and Communication Technology) graduates in the software industry in New Zealand. To meet this demand, in 2015, the government of New Zealand provided funding for three new ICT Graduate Schools. The challenge for the schools was twofold: to provide a qualification for students transitioning into ICT and to prepare those with an ICT education for the workforce. Each of the Schools offer different programmes. We offer two postgraduate programmes for growing talent and knowledge to support the New Zealand's ICT sector. In this paper, we describe our experience with delivering one of the postgraduate programmes, the Postgraduate Certificate in Information Technology. The programme consists of two courses, Programming for Industry and Programming with Web Technologies. The courses focus on providing industry-focused education to students with non-ICT backgrounds for a career in IT. The programme has been running for 2 years and runs over one semester (12 weeks) in a ""boot-camp"" style, which has proved to be successful. In this paper, we provide an overview of the features of the programme, which incorporates industry-focused activities for building students' knowledge relevant to the software industry. Finally, we discuss key challenges and identify directions for improvement.",An Experience Report on a Boot-Camp Style Programming Course,NA:NA:NA:NA:NA,2018
Kelvin Sung:Karen Gourd:Ann McMahon:Kulsoom Mansoor:Riley Gaggero,"Summer coding or programming camps are popular. With sufficient organization, offering these camps at higher education institutions can facilitate outreach objectives including engaging underrepresented groups. However, the challenges involved in organizing and offering a camp are many, including: recruitment of instructors and campers, camp management, finances, and curriculum development. We addressed these challenges by engaging a non-profit summer camp provider, Pacific Science Center (PSC), to handle camp logistics; and offered a new course for students with backgrounds in computer science (CS) or education (ED) to learn to teach Java programming and develop a curriculum appropriate for middle school aged campers. The university students then worked as paid summer camp instructors. Three professors, one each from CS, ED, and the Office of Research, co-planned and co-facilitated the course. Reflecting a hands-on and collaborative learning philosophy of PSC camps, the course grouped students into multidisciplinary teams and challenged the teams to learn by collaboratively developing and practice teaching the content. By the end of the course, we had classroom-ready instructors with technical knowledge in both programming and learning theories and a customized curriculum ready for use. This paper details our project, including results from the summer camps. With all developed materials freely available. Interested institutions can either adapt the curriculum or offer a similar course.",A Collaborative Course for Learning How to Teach Summer Java Coding Camps,NA:NA:NA:NA:NA,2018
Ben Stephenson,NA,Session details: Paper Session: Tools and Exercises,NA,2018
John MacCormick,"Computational and complexity theory are core components of the computer science curriculum, and in the vast majority of cases are taught using decision problems as the main paradigm. For experienced practitioners, decision problems are the best tool. But for undergraduates encountering the material for the first time, we present evidence that non-decision problems (such as optimization problems and search problems) are preferable. In addition, we describe technical definitions and pedagogical strategies that have been used successfully for teaching the theory course using non-decision problems as the central concept.",Strategies for Basing the CS Theory Course on Non-decision Problems,NA,2018
Amruth N. Kumar,"Performance on Parsons puzzles has been found to correlate with that on code-writing exercises. Parsons puzzles are preferred by students over alternative programming tasks. In order to make Parsons puzzles widely available to students in the introductory programming course, we developed a tool that administers the puzzles in C++, Java and C#, called epplets. Our design of the tool improves upon the work done by earlier researchers in several ways: students rearrange lines of code rather than program fragments; they get credit based on the number of actions they take to reassemble the code; they get feedback that helps them fix their incorrect answer; and the tool adapts to the needs of the student. The tool runs as a Java Web application. We describe our experience using the tool for two years: how it benefited the students; the revisions made to address the feedback provided by the users; and our plans for future work. We found that practicing with the tool helped reduce the time and actions with which students solved successive puzzles.",Epplets: A Tool for Solving Parsons Puzzles,NA,2018
Mark McCartin-Lim:Beverly Woolf:Andrew McGregor,"This paper describes a new method for helping students improve their ability to develop proofs, a skill necessary for comprehending and appreciating the foundational topics of computer science. Our method transforms ordinary pen-and-paper homework problems into a puzzle-like game, where students connect dots to justify assertions, in a quest to reach a desired goal. We have implemented a software tutoring system using this method, for students to use at home as an optional study aid. Potentially, our system could one day become a full replacement for traditional hand-written homework, which has the additional benefit for course instructors of automating the grading of student work. Our system is also easy to adapt to any class that requires students to write proofs, and it is easy for instructors to create new problems to use with this system. This stands in contrast to many other educational tools for teaching proofs, which are limited to specific topic domains. We have demonstrated the versatility of our system by testing it in two computer science classes at a large public university. One was a Sophomore-level discrete mathematics course where the students were learning first-order prepositional logic, and the other was a Junior-level algorithms course where students were being first exposed to the concept of NP-completeness. Students from our experiments reported that they would like our system to be used in more of their classes.",Connect the Dots to Prove It: A Novel Way to Learn Proof Construction,NA:NA:NA,2018
Eric Roberts:Tracy Camp:David Culler:Charles Isbell:Jodi Tims,NA,Rising CS Enrollments: Meeting the Challenges,NA:NA:NA:NA:NA,2018
Richard E. Ladner:Ramin Ayanzadah:Samsara N. Counts:Kavita Krishnaswamy:Kevin Wolfe,"A panel of students with disabilities who are pursuing computing degrees will describe their experiences both in and out of the classroom. The goal of the panel is to provide the audience with an opportunity to hear first-hand how their educational needs were met as non-traditional computing students. In addition to the panelists' short presentations, the moderator will facilitate a dialog between the members of the audience and the panelists.",2018 Panel of Computing Students with Disabilities,NA:NA:NA:NA:NA,2018
John Cigas:Adrienne Decker:Crystal Furman:Timothy Gallagher,"With the record growth in computing classes, it has been challenging for faculty to keep up with the logistics of the classroom, particularly in assessment. Automatic grading software and unit tests have been employed successfully in many settings to help ensure proper scoring of programming assignments. However, assignments that are not necessarily complete programs (in-class short quizzes, homework problems or worksheets, exams) present different challenges for scoring. In this session, we propose some tips and techniques for scoring such assessment items quickly and consistently, with the added benefit that grading criteria are clearer to the students.",How am I Going to Grade All These Assignments?: Thinking About Rubrics in the Large,NA:NA:NA:NA,2018
Patrick Virtue:Steven A. Wolfman:John P. Dougherty,"In a session with live music and collaborative parody, we celebrate the long tradition of computing parody songs (""filks"") and their potential to contribute to education and a fun environment in CS courses. We perform several new and classic CS filks, such as ""Like it Called on Me (QuickSort)"" [1], interspersing discussion of how and why these parodies were written. We also propose a song for the audience to parody and walk them through a structured small-group activity to help them brainstorm topics and lyrical phrases and fit them to the existing lyrics and music. Attendees should expect to laugh (and possibly cry) with the singing and to leave inspired to incorporate filks and other creative activities into their computing education practice: playing, performing, or writing songs themselves, and encouraging their students to do so as well.","SIGCSE Filk Circle: CS Parody Songs for Learning, Engagement, and Fun",NA:NA:NA,2018
Muztaba Fuad,NA,Session details: Paper Session: Algorithms,NA,2018
Arthur Nunes-Harwitt:Matthew Gambogi:Travis Whitaker,"The traditional functional formulation of quick-sort is simple and elegant. But is it fast? Through a dialog, we observe that this traditional formulation does not retain certain crucial properties of the imperative version. We include a known derivation of a higher performing functional implementation together with a graph that illustrates the differences. Our pet peeve is that the faster quick-sort is frequently left out of texts on functional programming.",Quick-Sort: A Pet Peeve,NA:NA:NA,2018
James D. Teresco:Razieh Fathi:Lukasz Ziarek:MariaRose Bamundo:Arjol Pengu:Clarice F. Tarbay,"We present the algorithm visualization capabilities of the METAL project. Using METAL's graph data which represents highway systems, a selection of interactive algorithm visualizations are performed. Progress of the algorithm is shown by changing the colors of the graph's vertices and/or edges overlaid on Google Maps and in color-coded tabular form, including contents of important data structures. Advantages include the real-world data set and the variety of data sizes available, enhancing student engagement. While many visualizations and visualization tools exist for graph and related algorithms, most focus on small, synthetic graphs. We describe our algorithm visualization capabilities, which include implementations of sequential search, graph traversals, Dijkstra's algorithm, and convex hulls. These can be executed on graphs ranging in size from a few vertices and edges to hundreds. We also present results of a survey of students who have used METAL's algorithm visualizations.",Map-based Algorithm Visualization with METAL Highway Data,NA:NA:NA:NA:NA:NA,2018
Shamama Zehra:Aishwarya Ramanathan:Larry Yueli Zhang:Daniel Zingaro,Dynamic Programming (DP) is considered to be one of the most difficult topics for students to understand in theoretical CS. Prior work suggests that misconceptions arise even when students have completed a course in which there is considerable focus on learning how to solve DP problems. We conducted think-aloud interviews with students who have completed the DP portion of the Algorithms course at a top North American research university. We report on three themes and their misconceptions discovered through this process. The first theme delves into students' struggles defining the notion of a subproblem and identifying particular subproblems. The second theme focuses on the understanding and usage of DP solution techniques compared to other algorithmic approaches. The third theme is composed of misconceptions related to defining and using recurrences. Analysis of each misconception provides insight into student thinking and offers ideas for improving the education of DP to university students.,Student Misconceptions of Dynamic Programming,NA:NA:NA:NA,2018
Christopher Moretti,NA,Session details: Paper Session: CS1 #2,NA,2018
Chris Piech:Chris Gregg,"This paper presents BlueBook, a lightweight, cross-platform, computer-based, open source examination environment that overcomes traditional hurdles with computerized testing for computer science courses. As opposed to paper exam testing, BlueBook allows students to type coding problems on their laptops in an environment similar to their normal programming routine (e.g., with syntax highlighting), but purposefully does not provide them the ability to compile and/or run their code. We seamlessly transitioned from paper exams to BlueBook and found that students appreciated the ability to type their responses. Additionally, we are just beginning to harness the benefits to grading by having student answers in digital form. In the paper, we discuss the pedagogical benefits and trade-offs to using a computerized exam format, and we argue that both the students and the graders benefit from it.",BlueBook: A Computerized Replacement for Paper Tests in Computer Science,NA:NA,2018
Terence Nip:Elsa L. Gunter:Geoffrey L. Herman:Jason W. Morphew:Matthew West,"While most efforts to improve students' learning in computer science education have focused on designing new pedagogies or tools, comparatively little research has focused on redesigning examinations to improve students' learning. Cognitive science research, however, has robustly demonstrated that getting students to practice using their knowledge in testing environments can significantly improve learning through a phenomenon known as the testing effect. The testing effect has been shown to improve learning more than rehearsal strategies such as re-reading a textbook or re-watching lectures. In this paper, we present a quasi-experimental study to examine the effect of using frequent, automated examinations in an advanced computer science course, ""Programming Languages and Compilers"" (CS 421). In Fall 2014, students were given traditional paper-based exams, but in Fall 2015 a computer-based testing facility enabled the course to offer more frequent examinations while other aspects of the course were held constant. A comparison of 292 student scores across the two semesters revealed a significant change in the distribution of students' grades with fewer students failing the final examination, and proportionately more students now earning grades of B and C instead. This data suggests that focusing on redesigning the nature of examinations may indeed be a relatively untapped opportunity to improve students' learning.",Using a Computer-based Testing Facility to Improve Student Learning in a Programming Languages and Compilers Course,NA:NA:NA:NA:NA,2018
Lisa L. Lacher:Albert Jiang:Yu Zhang:Mark C. Lewis,"In an effort to improve student performance in a flipped classroom environment, this paper explores the impact of including auto-graded coding questions in gate check quizzes associated with videos for a flipped CS1 course. Previous work showed that having students complete multiple choice questions that were intended to verify that they had done the preparation work did not have a statistically significant impact on outcomes as measured through written quizzes and exams. In an attempt to engage higher-level processing of learned information, this work builds on top of that by adding questions that require students to write short segments of code for most of the quizzes in addition to doing some multiple choice questions. We found that students who were given these coding video quizzes performed better on written assessments, especially for the final exam.",Including Coding Questions in Video Quizzes for a Flipped CS1,NA:NA:NA:NA,2018
Xuesong Zhang,NA,Session details: Paper Session: Curriculum Issues #2,NA,2018
Laura Benvenuti:Erik Barendsen:Gerrit C. van der Veer:Johan Versendaal,"Computing is an interdisciplinary field that can be approached from different points of view. Each point of view has its goals, aims and fundamental assumptions. This makes computing a complex discipline. Moreover, new computing disciplines appear regularly. With the trend that ICT-professionals should have non-ICT competences as well, and non-ICT-professionals should have ICT-competences, new computing curricula are often hybrid in nature. As a hybrid computing curriculum cannot cover the full range of computing, it is interesting to investigate the 'computing part' of such curricula. Our analysis framework consists of three elements: the curricular components 'goals and objectives' and 'instructional strategies', and the underlying epistemological view on the discipline ('cultural styles'). Taking a historical perspective, we describe the origins of the ACM/IEEE Curriculum Recommendation series. We discuss the three main cultural styles of computing: theoretical, scientific and engineering. Observing that in a curriculum the above elements should be aligned, we present three trade-offs for the case of hybrid computing curricula. We apply our results to two concrete examples, Liberal Arts and Computer Science and Front End Development. Based on our investigation, we formulate recommendations for designers of hybrid computing curricula. We recommend, for example, discussing disciplinary boundaries and resulting trade-offs explicitly while designing and documenting curricula.",Understanding Computing in a Hybrid World: On the Undergraduate Curriculum Front-End Development,NA:NA:NA:NA,2018
Gail Carmichael:Christine Jordan:Andrea Ross:Alison Evans Adnani,"Work-integrated learning is a common approach to add practical, real-world work experience to academic settings. Traditional co-op programs in colleges and universities alternate courses with semesters spent as an intern at a relevant workplace. We have designed an academic-industry partnership that takes work-integrated learning further by deliberately aligning workplace experience to the academic curriculum. Our students earn a Bachelor of Computer Science from the university, and are paid employees of the industry partner throughout their degree. While advanced courses and electives are taken on campus as usual, some core computer science classes and practicum courses are delivered with the industry partner so as to integrate them with placements on site. Assessment remains the responsibility of the university. In this report, we describe the partnership from the perspective of the industry partner. We describe our goals, partnership design, and first two iterations of the implementation. We discuss the challenges we have faced with our first cohort, and share suggestions for others looking to create similar programs.",Curriculum-Aligned Work-Integrated Learning: A New Kind of Industry-Academic Degree Partnership,NA:NA:NA:NA,2018
Ryan Rybarczyk:Lingma Acheson,"A key learning objective of the CS2 curriculum is for a student to obtain the necessary computer science skills to be proficient in the understanding and usage of software objects in an object-oriented programming language. In typical CS programs there are two prevalent object-oriented languages that are used to fulfill this requirement: Java and C++. In most instances, one language is selected as the primarily tool in which to teach these concepts. In other instances, both languages may be used, but not in a side-by-side fashion which can often leave the students confused or with an incomplete understanding of both languages. Each language has its documented trade-offs (benefits and drawbacks) when it comes to adequately preparing students. An aspect that is often overlooked as part of this traditional course structure is the ability to leverage a teaching component that allows the students to analyze trade-offs between languages and the Why/When/How to select a given language based upon their analysis. We provide an outline for how these two languages can be successfully taught in a side-by-side, or simultaneous, fashion that will still satisfy all of the existing expectations and requirements of a course. We describe how this component can be integrated into a career preparation module that will further augment the students' overall learning experience and their academic preparation. Results of this trial demonstrate that student satisfaction, understanding, learning of concepts, and educational preparation can be improved while maintaining the necessary standards set forth as part of the CS2 curriculum.",Integrating A Career Preparedness Module into CS2 Curricula Through The Teaching C++ and Java Side-by-Side,NA:NA,2018
Andrea Lawrence,NA,Session details: Paper Session: Diversity #2,NA,2018
Andrew J. Ko:Leanne Hwa:Katie Davis:Jason C. Yip,"Influencing adolescent interest in computing is key to engaging diverse teens in computer science learning. Prior work suggests that informal mentorship may be a powerful way to trigger and maintain interest in computing, but we still know little about how mentoring relationships form, how mentors trigger and maintain interest, or what qualities adolescents value in informal mentors. In a 3-week career exploration class with 18 teens from underrepresented groups, we had students write extensively about their informal computing mentors. In analyzing their writing, we found that most teens had informal computing mentors, that mentors were typically teachers, friends, and older siblings (and not parents or school counselors), and that what teens desired most were informal mentors that were patient, helpful, inspiring, and knowledgeable. These findings suggest that computing mentors can come in many forms, that they must be patient, helpful, and inspiring, but that they also require content knowledge about computing to be meaningful. Future work might explore what knowledge of computing is sufficient to empower teachers, parents, peers, and family to be effective computing mentors.","Informal Mentoring of Adolescents about Computing: Relationships, Roles, Qualities, and Impact",NA:NA:NA:NA,2018
Audrey Smith Rorrer:Joseph Allen:Huifang Zuo,"In this paper, we describe a large-scale, long-term study of a National Science Foundation undergraduate research program via the Computer and Information Science and Engineering (CISE) Research Experiences for Undergraduates (REU) Evaluation Toolkit project. The overarching research questions are: what attitudinal shifts occur for undergraduate research experience student participants, and do experience perceptions differ based upon student demographics? Results across two cohort years showed statistically significant gains for several key program level outcomes. However, intent to go to graduate school decreased in both cohorts. Gender and ethnicity differences were observed. Women and underrepresented minority group students had significantly higher scores for several factors. These findings are discussed in context of culturally relevant pedagogy for undergraduate research programs. This study is unique in its scale and scope, providing a depiction of student outcomes across multiple cohorts of a national sample including over 58 computing research sites and more than 900 undergraduate students.",A National Study of Undergraduate Research Experiences in Computing: Implications for Culturally Relevant Pedagogy,NA:NA:NA,2018
Heather E. Metcalf:Tanya L. Crenshaw:Erin Wolf Chambers:Cinda Heeren,"While we celebrate the dramatic increase in women's undergraduate enrollment at computer science programs around the country, to see this surge translate into career-long outcomes, we cannot ignore ongoing gendered and racialized disparities in computing, particularly as they relate to a student's sense of belonging. Even in times of high enrollment, fostering a sense of belonging cannot occur just through ad-hoc methods, the goodwill of a few faculty, or a standalone mentoring program. Policies and structures must be put into place and enacted holistically. We report on a multi-phase, 10-year case study of undergraduate student experiences at the University of Illinois (2007, n=61; 2017, n=339). Our 2017 study explores the policies and structures enacted over a decade and their impact on departmental culture. We report on three areas: i) Inclusive classroom experiences; ii) Quality of mentorship opportunities; iii) Student sense of identity. While there have been significant departmental improvements, there are some cultural, policy, and structural issues to be addressed in order to foster a sense of belonging and success for all students.",Diversity Across a Decade: A Case Study on Undergraduate Computing Culture at the University of Illinois,NA:NA:NA:NA,2018
Cecily Heiner,NA,Session details: Paper Session: Elementary #1,NA,2018
Johanna Joentausta:Arto Hellas,"Worked examples are step-by-step instructions that are used to demonstrate and teach problem-solving processes. Subgoal labels are used to group the steps of worked examples into cohesive units that may help the learner to identify key information about the process. We conducted a study on the applicability of subgoal labeled worked examples with 9 and 10-year-old pupils (n=43) who were learning the principles of programming using LightBot. Using a between groups design, pupils in three classes were working with LightBot. One of the groups had no additional instructional materials for the LightBot environment, one of the groups had a set of worked examples without subgoal labels, and the last group had the same set of worked examples with subgoal labels. We measured pupils' success in terms of how many LightBot levels they completed during the class. In addition, pupils' beliefs and attitudes towards programming were assessed before and after the experiment. Our results indicate that in a programming environment such as LightBot, simple worked examples provide no significant benefit over no examples, but worked examples with subgoal labels can help pupils complete more levels. At the same time, the instructional materials in the study had no significant influence on the pupils' beliefs towards computer use or programming.",Subgoal Labeled Worked Examples in K-3 Education,NA:NA,2018
Jennifer Tsan:Fernando J. Rodríguez:Kristy Elizabeth Boyer:Collin Lynch,"Collaboration plays an essential role in computer science. While there is growing recognition that learners of all ages can benefit from collaborative learning, little is known about how elementary-age children engage in collaborative problem solving in computer science. This paper reports on the analysis of a dataset of elementary students collaborating on a programming project. We found that children tend to make several different types of suggestions. In turn, their partners address those suggestions in different ways such as by implementing them directly in code or by replying through dialogue. We observe that students regularly accept or reject suggestions without explanation or explicit acknowledgement and that it is often unclear whether they understand the substance of the suggestion. These behaviors may inhibit the development of a shared understanding between the partners and limit the value of the collaborative process. These results can inform instructional practice and the development of new adaptive tools that facilitate productive collaborative problem solving in computer science.",I Think We Should...: Analyzing Elementary Students' Collaborative Processes for Giving and Taking Suggestions,NA:NA:NA:NA,2018
Michelle Friend:Michael Matthews:Victor Winter:Betty Love:Deanna Moisset:Ian Goodwin,"As computer science becomes more prevalent in the K-12 world, elementary schools are increasingly adopting computing curricula. Computer scientists have recognized the connection between math and computer science, but little work has demonstrated how and whether computer science can support improved learning in math. This paper reports on a project in which elementary students in a gifted program used Bricklayer, a functional programming environment that supports artistic and mathematical expression. A pre- and post-test design demonstrates significant learning gains in coordinate graphing and visual-spatial skills.",Bricklayer: Elementary Students Learn Math through Programming and Art,NA:NA:NA:NA:NA:NA,2018
Brian Railing,NA,Session details: Paper Session: Errors,NA,2018
Brett A. Becker:Cormac Murray:Tianyi Tao:Changheng Song:Robert McCartney:Kate Sanders,"In order to help students learning to develop computer programs, several computing education researchers have analyzed the compiler error messages generated by novices' attempts to compile their programs. The goal is to help students diagnose the errors they make through the messages generated by the compiler. This paper builds on that previous work by applying a technique based on a heuristic well-known to programmers - fix the first error and ignore the rest - to the analysis of over 21 million compiler error messages from the Blackbox dataset. We find that the ranks and frequencies obtained by considering all error messages are generally consistent with previously published lists, but when we consider first messages only, these ranks and frequencies are different. These differences could have important implications for teaching, and can inform tool design and future research efforts.","Fix the First, Ignore the Rest: Dealing with Multiple Compiler Error Messages",NA:NA:NA:NA:NA:NA,2018
Brett A. Becker:Kyle Goslin:Graham Glanville,"There is an active strand of research in the literature exploring the effects of Enhanced Compiler Error Messages on student programming behavior, however many results seem conflicting. This is compounded by the fact that directly comparing these results is difficult as these studies utilize different metrics, and what metrics are best suited to measure the effects of enhanced compiler error messages is not known. Common to most studies to-date is that the metrics employed measure how many errors students produce, and/or rectify while writing programs. This study takes a different approach by measuring how many pre-existing syntax errors are rectified by students while debugging programs. Specifically, we measured the effect of enhanced compiler error messages in an empirical control/intervention experiment where students were given the task of removing syntax errors from non-compiling source code they did not write. We find a significant positive effect on the overall number of errors rectified, as well as the number of certain specific error types, but no significant effect on the number of non-compiling submissions or student scores. These results (in different ways) support the findings of several recent studies and suggest that their results may not be as conflicting as they seem. This is evidence that enhanced error messages may be effective, but also that the signal of these effects are relatively weak, indicating that how and what is measured when attempting to observe these effects is important.",The Effects of Enhanced Compiler Error Messages on a Syntax Error Debugging Test,NA:NA:NA,2018
Cruz Izu:Claudio Mirolo:Amali Weerasinghe,"We want undergraduate students to develop higher-order thinking skills that enable them to master program behaviour. Nonetheless, many students of both introductory and advanced programming courses appear to struggle with the abstraction required for this purpose. In particular, a recent think-aloud study showed a group of students were able to reason about and reverse the effect of assignments and vector updates, but most of them failed when asked to reverse a seemingly simple conditional statement. We have extended that study by assigning a similar task to two cohorts of novice programmers as part of their final exam paper. Students' answers, including code and short explanations, have been analysed through the lens of the SOLO taxonomy: 28% of the solutions were correct (classified as relational); an additional 23% were partially correct but failed to identify the overlap between the two paths of the conditional statement (classified as multistructural). Furthermore, the concept of reversibility and related ""low-ceiling"" tasks, such as the one discussed in this study, could be useful resources for educators to assess and develop students' understanding of program behaviour.",Novice Programmers' Reasoning about Reversing Conditional Statements,NA:NA:NA,2018
Durga Suresh,NA,Session details: Paper Session: Peer Mentoring,NA,2018
Devorah Kletenik:Deborah Sturm,"We report our experience teaching elective game development courses at two colleges at a public university. Over the past nine years these courses have been taught in a variety of languages on several platforms. As the courses evolved we introduced serious games with game-based-learning as a focus for the projects and ultimately offered a special topics elective in serious game development. In this paper, we discuss the merits of using serious games as a focus in game programming, including the benefits for students without a strong interest in gaming. We also describe the novel restructuring of one college's Computer Science elective sequence in response to recommendations from students, alumni, and an advisory board of computing professionals. By introducing 200-level electives, students are able to sample advanced topics including game development early in their academic sequence. This has led to involving more students in game-based undergraduate research which can result in increased interest and retention in Computer Science. We discuss our curriculum design and lessons learned including challenges and successes, and data from student surveys indicating student motivation and engagement.",Game Development with a Serious Focus,NA:NA,2018
Meg Fryling:MaryAnne Egan:Robin Y. Flatland:Scott Vandenberg:Sharon Small,"Recruiting and retaining STEM majors has been an ongoing challenge for colleges and universities. This research paper describes two initiatives to recruit and retain Computer Science (CS) majors that were implemented at Siena College starting in the fall of 2014. Both initiatives are directed at rising sophomores who have completed the first year CS sequence as an early strategy to encourage them to declare and complete the CS major. The first initiative is an early internship program directed at providing students an opportunity to apply those technical skills, extend their skill set, and introduce them to meaningful real-world projects between their freshman and sophomore years. The second initiative is a lab/classroom assistant program where sophomore or older students provide mentoring during lecture and lab sessions for the introductory CS courses. The paper provides preliminary findings, lessons learned, and directions for the future.",Catch 'em Early: Internship and Assistantship CS Mentoring Programs for Underclassmen,NA:NA:NA:NA:NA,2018
Jody Clarke-Midura:Frederick Poole:Katarina Pantic:Megan Hamilton:Chongning Sun:Vicki Allan,"In response to the national demand to increase participation in CS, we argue that youth's interest in computer science (CS) can be sparked by providing them with role models who are relatable and who resonate with their identities. To that end, we developed a mentoring model in which we train high schoolers to be near-peer mentors for middle schoolers learning to program in summer camps. In this paper, we present results from a mixed-methods study where we examined the relationship between mentor relatability and middle school campers' self-efficacy and interest in CS. Pre- and post-surveys were used to measure campers' affective outcomes around computing and mentor relatability. In addition, interviews and observations were used to illustrate the mechanisms that led to change in affect. Our findings suggest that mentor relatability is a significant predictor of campers' self-efficacy and interest in CS. Results from the qualitative data further exemplify how mentor relatability was perceived and manifested in the camps.",How Near Peer Mentoring Affects Middle School Mentees,NA:NA:NA:NA:NA:NA,2018
Kathleen J. Lehman:Maureen Doyle:Louise Ann Lyon:Kyle Thayer,"Declaring a computer science (CS) major at the outset of college and going on to earn a computing degree may be the most direct route to a career in computing, but it is certainly not the only pathway. However, much of the work on pathways to computing careers focuses on those who have taken this traditional route, while less attention has been paid to those who pursue alternative pathways into computing. Understanding alternative pathways into computing may be particularly important to discussions about diversity in the field, as some research has shown that women and underrepresented minority (URM) students who enroll in CS courses are more likely than men and other majority students to be non-computing majors and to take computing courses later in their academic careers. This panel will provide perspectives from individuals with expertise in several alternative pathways into computing, such as through coding boot camps, undecided students, community colleges, and retrained end-user programmers.",Alternative Paths to Computing Careers and Their Role in Broadening Participation,NA:NA:NA:NA,2018
Ursula Wolz:Lina Battestilli:Bruce Maxwell:Susan Rodger:Michelle Trim,"The New York Times published an op-ed by Anita Hill [3] suggesting that women in tech consider class action to remedy the gender bias that is increasingly being reported in the mass-media. This panel raises the question ""what are we doing in undergraduate programs to reduce the 'Mad Men', 'Brogrammer' culture she describes that is increasingly being reported in the popular press. Part of our mission as educators is to develop professional behavior so that our students entering the workforce not only understand what it means to act professionally, but understand that it is their responsibility to actively push back on the existing bias within the tech culture. As moderator Ursula Wolz brings a depth of insight from 40 years of industrial and academic experience, including a National Science Foundation project to broaden participation in computing [5]. She does not believe this problem can be solved through quantitative data collection on who does well in computer science, but that SIGCSE needs to begin to collect good stories (ala Sally Fincher [2]) on what constitute best practices to support diversity. The panelists present a range of perspectives that have the potential to establish new cultural norms in the single most influential industry in our economy.",Best Practices in Academia to Remedy Gender Bias in Tech,NA:NA:NA:NA:NA,2018
Lucia Dettori:Don Yanek:Helen Hu:Dennis Brylow,NA,The Role of Researcher-Practitioner Partnerships in CS4All: Lessons from the Field,NA:NA:NA:NA,2018
Austin Cory Bart:Kalpathi Subramanian:Ruth E. Anderson:Nadeem Abdul Hamid,"Working with real-world data has increasingly become a popular context for introductory computing courses. As a valuable 21st century skill, preparing students to be able to divine meaning from data can be useful to their long-term careers. Because Data Science aligns so closely with computing, many of the topics and problems it affords as a context can support the core learning objectives in introductory computing classes. In many instances, incorporating a real-world dataset to provide concrete context for an activity or assignment can improve student engagement and understanding of the abstract educational content being presented. However, there are many problems inherent to bringing real-world data into introductory courses. How do instructors, with finite amounts of time and energy, find and prepare suitable datasets for their pedagogical needs? Once the datasets are ready, how can students conveniently interact with and draw meaning from the datasets, especially when they are used in complex projects that are typical of later introductory courses? On the other hand, how does an instructor balance the complexities of using real-world datasets in the classroom, making sure that students appreciate the meaningfulness of course activities and their connection to learning objectives? This panel brings together experts with experience in using real-world data in introductory computing courses. Each panelist provides unique perspectives and skills to the problem of preparing, interacting, visualizing, and using pedagogical datasets. This panel should be of particular interest to instructors who are considering integrating current and real-world data into their assignments and projects, and to educational developers who want to create and manage datasets for pedagogical purposes. The panel will follow a conventional format: 5 minutes of introduction, 10 minutes for each panelist to present, and then 30 minutes for audience Q&A.","Preparing, Visualizing, and Using Real-world Data in Introductory Courses",NA:NA:NA:NA,2018
Rafi Santo:Sara Vogel:Leigh Ann DeLyser:June Ahn,"The rapid expansion of the Computer Science for All (CSforAll) movement in the United States has catalyzed promising policies, tools, and pedagogies for K-12 universal CS education. It has also created significant challenges for schools and districts, namely, decision-making around the programs, curricula, and professional development that will best align to their communities' broader visions and goals around equitable computing education for all.","Asking ""CS4What?"" as a Basis for CS4All: Workshop Tools to Support Sustainable K-12 CS Implementations",NA:NA:NA:NA,2018
Brian Harrington,NA,Session details: Paper Session: CS1 #3,NA,2018
Daniel Zingaro:Michelle Craig:Leo Porter:Brett A. Becker:Yingjun Cao:Phill Conrad:Diana Cukierman:Arto Hellas:Dastyni Loksa:Neena Thota,"Replication research is rare in CS education. For this reason, it is often unclear to what extent our findings generalize beyond the context of their generation. The present paper is a replication and extension of Achievement Goal Theory research on CS1 students. Achievement goals are cognitive representations of desired competence (e.g., topic mastery, outperforming peers) in achievement settings, and can predict outcomes such as grades and interest. We study achievement goals and their effects on CS1 students at six institutions in four countries. Broad patterns are maintained --- mastery goals are beneficial while appearance goals are not --- but our data additionally admits fine-grained analyses that nuance these findings. In particular, students' motivations for goal pursuit can clarify relationships between performance goals and outcomes.",Achievement Goals in CS1: Replication and Extension,NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Jane G. Stout:N. Burçin Tamer:Christine J. Alvarado,"Underrepresented students in computing (women and non-White/non-Asian men) are known to feel a weaker sense of belonging than majority students (Asian/White men). This difference is important because a low sense of belonging can lead to disengagement and attrition in education settings. In the current study, we assessed whether and how early formal research experience might narrow this gap in sense of belonging. The sample for this study derives from a longitudinal study on undergraduate students affiliated with computing departments across the United States. We used propensity scores to generate an appropriate sub-sample of students to compare against formal research participants (n = 110 formal research students; n = 110 students with no formal research experience). We found formal research experience during students/ first year was associated with a strong sense of mentor support during their second year. Perceived mentor support predicted a strong sense of belonging for underrepresented students, but not majority students. Importantly, the typical gap in sense of belonging among underrepresented and majority students disappeared among students with high mentor support. Our work suggests that formal research, when introduced early, might promote greater diversity in computing in the long term. We present a model for early undergraduate research, and resources for readers who wish to adopt the model.",Formal Research Experiences for First Year Students: A Key to Greater Diversity in Computing?,NA:NA:NA,2018
Jonathan P. Munson:Joshua P. Zitovsky,"There is much interest in predicting student performance in computer programming courses early in the semester to identify weak students who might benefit from targeted support. To this end, we analyzed detailed keystroke transcripts and outputs of compilation attempts during programming activities, both in and out of class. In linear regression models predicting grades, we identified multiple behavioral indicators and performance indicators that explained a significant portion of the variation in final grades using only the data collected within the first three weeks. Because the indicators identify specific behaviors and are generated automatically, they may be used as the basis for interventions instructors may use when counseling weaker students concerning their performance early in the course before they fall too far behind. Furthermore, in contrast with some other automated struggling-student detection models, our predictors are based on generic behaviors and generic performance metrics that can be extended to a wide range of introductory programming contexts. Our models also predict performance on a continuous scale rather than a binary ""weak""/""not weak"" classification, which would allow instructors to offer interventions to marginal students who want to improve, or to promising students who want to excel.",Models for Early Identification of Struggling Novice Programmers,NA:NA,2018
Jeff Forbes,NA,Session details: Paper Session: Diversity #3,NA,2018
Sathya Narayanan:Kathryn Cunningham:Sonia Arteaga:William J. Welch:Leslie Maxwell:Zechariah Chawinga:Bude Su,"CSin3 is a cohort-based, three-year computer science bachelor's degree program that has increased graduation rates of traditionally underrepresented computer science students. A collaborative effort between a community college and a public university, CSin3 provides a clear pathway for upward socio-economic mobility into the high-paying technology industry. CSin3 students are 90% from traditionally underrepresented groups, 80% first-generation, 32% female, and have a three-year graduation rate of 71%, compared to a 22% four-year graduation rate for traditional computer science students. Upon graduation, CSin3 students score similarly on a standardized exam of computer science knowledge as compared to traditional students who graduate in 4 years or more. The first graduates had a job placement rate of 78% within two months of graduation, including positions at large technology companies like Apple, Salesforce, and Uber. By implementing a cohort-based learning community, a pre-defined course pathway, just-in-time academic and administrative support, comprehensive financial aid, and a focus on 21st century skills, the CSin3 program has demonstrated promising results in addressing the capacity, cost, quality, and diversity challenges present in the technology industry.",Upward Mobility for Underrepresented Students: A Model for a Cohort-Based Bachelor's Degree in Computer Science,NA:NA:NA:NA:NA:NA:NA,2018
Nwannediya Ada Ibe:Rebecca Howsmon:Lauren Penney:Nathaniel Granor:Leigh Ann DeLyser:Kevin Wang,"In the US, many groups of students are underrepresented in computer science (CS) classes at the K-12 level [23,25]. Many of the activities of TEALS (Technology Education and Literacy in Schools), a national computer science education program, have the potential to impact the diversity of students enrolled in computer science classes, student performance on AP exams, and student attitudes towards CS careers. TEALS works with high schools to build and grow sustainable computer science programs through teaching partnerships between classroom teachers and volunteers who work in the tech industry. In 2016, TEALS initiated a Diversity, Equity, and Inclusion Working Group (DEIWG) to holistically address the overall impact of the program on increasing diversity in CS, including TEALS' approach to: selection of schools, student recruitment efforts into CS courses, recruitment and training of TEALS volunteers, curriculum design and resources, and instructional support of volunteers and teachers. The working group compared national, regional, and state-wide outcomes and demographics to those of TEALS partner schools, students, volunteers, and teachers to identify best practices and areas in need of investment. This paper describes these findings and presents strategies for future work.","Reflections of a Diversity, Equity, and Inclusion Working Group based on Data from a National CS Education Program",NA:NA:NA:NA:NA:NA,2018
Stephanie Ludi:Matt Huenerfauth:Vicki Hanson:Nidhi Rajendra Palan:Paula Garcia,"An increasing importance of accessibility awareness and knowledge emanates from a moral imperative and as an employment differentiator. It is important that educational programs have a demonstrated ability to teach these skills. In this paper, we focus on the role that educational courses can play in increasing accessibility awareness for undergraduate students. We review literature indicating that a number of accessibility teaching interventions have been reported; yet the evaluation of their effectiveness has not been conducted in a consistent manner. We report on our 3-semester evaluation of undergraduate students' accessibility awareness and knowledge following a week of accessibility lectures as part of courses on Human-Computer Interaction (HCI), where a subset of students also interact with stakeholders with disabilities during the conduct of the course projects. Gains in awareness and knowledge occur when accessibility lectures were part of the course. These gains are compared across the teams who interacted with a person with a disability and teams with no such interaction. In addition, we provide the test battery developed to measure these skills, to enable other researchers to conduct evaluations of the effectiveness of interventions for teaching inclusive thinking in undergraduate computing at their own institutions.",Teaching Inclusive Thinking to Undergraduate Students in Computing Programs,NA:NA:NA:NA:NA,2018
Ashok Basawapatna,NA,Session details: Paper Session: Elementary #2,NA,2018
Michele Roberts:Kiki Prottsman:Jeff Gray,"Much well-deserved attention in K-12 Computer Science (CS) education has focused recently on the successful launch of the College Board's new AP CS Principles course, which is breaking participation records and broadening CS participation. To further leverage the national investment in a successful high school CS program, however, it is important to create, sustain and study a continuous CS pipeline that begins early and spans all grade levels. This experience report articulates the characteristics of Code.org's K-5 CS Fundamentals (CSF) program and summarizes the experiences of adopting the CSF curriculum to support large-scale, university-driven K-5 Professional Development (PD) programs across two states in different geographical regions of the USA. An overview of Code.org's CSF curriculum and PD survey data is provided, followed by a summary of each state's experience. A set of lessons learned offers recommendations for those considering implementation of statewide PD programs in K-5 CS; future plans are discussed to investigate observations from this experience report within a formal research setting.",Priming the Pump: Reflections on Training K-5 Teachers in Computer Science,NA:NA:NA,2018
Cecily Heiner,"Robotics can be a meaningful and motivating application of computer science that helps make abstract concepts concrete and visible, but most elementary school robotics thus far has focused on design and after school extra-curricular activities with small groups of select students rather than in-school, school-wide robotics for all the students within a school. This paper describes our experience designing, implementing, and trying to evaluate a robotics curriculum and program for all the students within an elementary school; the primary focus of this paper is scale. We describe challenges and opportunities we experienced as part of this project and reflect on the degree to which they are unique to our relatively small, isolated rural town and the timing of our project. We present data points suggesting that robotics can be effectively and economically implemented in the elementary school curriculum.",A Robotics Experience for All the Students in an Elementary School,NA,2018
Ashish Aggarwal:David S. Touretzky:Christina Gardner-McCune,"Over the last decade, CS Education researchers have developed different curricula, resources, and strategies to foster computer science learning in K-12 education. However, there is a lack of research about how elementary school students develop the ability to reason about programs. Reasoning about programs consists of a student's ability to read, write, debug, trace, and predict program behavior. This paper presents results from a think-aloud study of fourth and fifth grade students learning to program in Kodu. The goal of this study was to track students' understanding of how Kodu interprets and executes rules of a program. To understand students' reasoning of program execution, we explicitly taught them the Laws of Kodu computation which govern the decision making and execution process of Kodu rules. We collected students' responses on pre- and post-assessments, and we conducted think-aloud interviews with students where students explained their answers to assessment questions. We found that explicitly teaching students how Kodu rules are interpreted significantly improved their ability to understand the execution of programs and to explain program behavior. The results of this study provide insight into how elementary school students reason about simple programs, and how this ability can be scaffolded.",Demonstrating the Ability of Elementary School Students to Reason About Programs,NA:NA:NA,2018
Shuchi Grover,NA,Session details: Paper Session: K thru 12,NA,2018
Karla Hamlen:Nigamanth Sridhar:Lisa Bievenue:Debbie K. Jackson:Anil Lalwani,"Common barriers to broad-based adoption of Computer Science in secondary schools include 1) insufficient numbers of trained teachers who are capable of teaching CS courses in K-12 schools, and 2) a narrow base of students interested in taking CS courses which does not include a large number of females or students from traditionally underrepresented racial groups. In an effort to overcome these obstacles, we developed and employed a teacher professional development program to develop both content and pedagogical strategies to teach Computer Science Principles while also broadening and expanding participation in CS. Teachers were selected for this program in an effort to understand the impact of the intervention with teachers of diverse backgrounds, who teach in a variety of types of schools and with diverse student populations, and with a range of previous Computer Science content knowledge and teaching experience. Teacher content mastery, confidence and attitudes, as well as student content mastery and confidence were assessed at multiple times. Key goals of the program were to develop ability and confidence in programming skills among teachers and students, and to train and encourage teachers to use peer instruction, allowing for a great deal of interaction among students and engagement with the content facilitating the development of expertise among students. Significant findings showed that teachers improved in both knowledge and confidence after taking the workshop, and the gains were evident for their students as well. Their students also demonstrated improvement in both skills and confidence after taking CS Principles, regardless of gender, race, or ethnicity.","Effects of Teacher Training in a Computer Science Principles Curriculum on Teacher and Student Skills, Confidence, and Beliefs",NA:NA:NA:NA:NA,2018
Rui Zhi:Nicholas Lytle:Thomas W. Price,"Instructional supports (Supports) help students learn more effectively in intelligent tutoring systems and gamified educational environments. However, the implementation and success of Supports vary by environment. We explored Support design in an educational programming game, BOTS, implementing three different strategies: instructional text (Text), worked examples (Examples) and buggy code (Bugs). These strategies are adapted from promising Supports in other domains and motivated by established educational theory. We evaluated our Supports through a pilot study with middle school students. Our results suggest Bugs may be a promising strategy, as demonstrated by the lower completion time and solution code length in assessment puzzles. We end reflecting on our design decisions providing recommendations for future iterations. Our motivations, design process, and study's results provide insight into the design of Supports for programming games.",Exploring Instructional Support Design in an Educational Game for K-12 Computing Education,NA:NA:NA,2018
Amber Dryer:Nicole Walia:Ankur Chattopadhyay,"Today's organizations, including online businesses, use the art of data-driven decision-making i.e. business-intelligence (BI) to benefit from all the data out in the open. Given the current market demand for BI skill-sets, including the knowledge of different sources and tools for data-collection plus processing, today's youth need a basic understanding of data-driven intelligence, and an awareness of big-data related ethics and privacy. However, there has been limited research and development work towards designing an effective educational module in this regard at the K-12 level. We intend to address this particular limitation by presenting a uniquely engaging middle-school learning module based upon a combination of useful topics, like data-mining, predictive-analytics, data-visualization, big-data, ethics and privacy, using the free RapidMiner software-tool. The novelty of our module lies in the use of a GUI-based visual hands-on platform (RapidMiner), a Hollywood movie-theme based educational activity, as well as an added focus on big-data ethics and privacy, and its conceptual mapping to the NSA-GenCyber security-first principles. We discuss and analyze the survey data obtained from over hundred participants through several offerings of our module as an educational workshop through our Google-IgniteCS and NSA-GenCyber programs. The collected learning-analytics data indicate that our module can become a simple yet effective means for introducing data-mining, big-data, ethical and privacy issues, and GenCyber security-first principles at the middle-school level. Our results show prospects of motivating middle-school participants towards further learning of topics in data-science, data-ethics and data-security, which is necessary today in a variety of professions.","A Middle-School Module for Introducing Data-Mining, Big-Data, Ethics and Privacy Using RapidMiner and a Hollywood Theme",NA:NA:NA,2018
Swapneel Sheth,NA,Session details: Paper Session: Pair Programming,NA,2018
Onni Aarne:Petrus Peltola:Juho Leinonen:Arto Hellas,"We explore educational pair programming in a university context with high student autonomy and individual responsibility. The data comes from two separate introductory programming courses with optional pair programming assignments. We analyze lab attendance and course outcomes to determine whether students' previous programming experience or gender influence attendance. We further compare these statistics to self-reported data on study motivation, study strategies, and student enjoyment of pair programming. The influence of grading systems on pair programming behavior and course outcomes is also examined. Our results suggest that gender and previous programming experience correlate with participation in pair programming labs. At the same time, there are no significant differences in self-reported enjoyment of pair programming between any of the groups, and the results from commonly used study motivation and strategy questionnaires provide little insight into students/ actual behavior.",A Study of Pair Programming Enjoyment and Attendance using Study Motivation and Strategy Metrics,NA:NA:NA:NA,2018
Mehmet Celepkolu:Kristy Elizabeth Boyer,"Collaborative learning frameworks such as pair programming have been shown to be highly effective for computer science learning. Skeptics of this approach often refer to the risk of one student relying on a stronger partner to solve the problem. Lending weight to this skepticism, many theories emphasize the importance of learner autonomy. Therefore, it is reasonable to hypothesize that a hybrid pair programming paradigm-one in which partners work together side-by-side at two separate computers and produce their own versions of the code-may be even more effective than traditional pair programming. To investigate this hypothesis, we conducted a study in which 200 introductory programming students were paired and then placed in either a pair-programming condition (two students at one computer) or a hybrid condition (two students at two computers). The results show that traditional pair programming fostered comparable learning gains as measured on an individual post-test, and significantly higher student satisfaction, than the hybrid approach. These findings highlight the importance of not just collaborating, but working together on shared code, for novice computer science learners.",The Importance of Producing Shared Code Through Pair Programming,NA:NA,2018
Mehmet Celepkolu:Kristy Elizabeth Boyer,"Pair programming is a successful approach for improving student performance, retention, and motivation toward computer science. However, not all students benefit equally from this approach. An open challenge for researchers is to develop a deep understanding of the student experience in pair programming, particularly for novices. This paper reports on a study of the cognitive, affective, and social experiences of students in an introductory programming course in which pair programming was utilized throughout the term. Students reported their experience through reflection essays written at the end of the semester. We analyzed 137 student reflection papers in a mixed-methods study. The quantitative results show that overall, students have a positive attitude toward pair programming. Looking more deeply at the reflection essays, thematic analysis revealed themes centered around cognitive, affective, and social dimensions. In the cognitive dimension, students expressed the importance of exposure to different ideas and developing deeper understanding. Affectively, students reported that working with a partner reduced their frustration and increased their confidence. Students also pointed out the social benefits of forming friendships and helpful connections. These results highlight the powerful benefits of pair programming and point to ways in which this collaborative approach could be adapted to better meet student needs.",Thematic Analysis of Students' Reflections on Pair Programming in CS1,NA:NA,2018
Hubert Johnson,NA,Session details: Paper Session: Professional Development,NA,2018
Mark Meysenburg:Tessa Durham Brooks:Raychelle Burks:Erin Doyle:Timothy Frey,"The DIVAS (Digital Imaging and Vision Applications in Science) project addresses workforce challenges in science, technology, engineering, and mathematics by creating a pedagogical and programmatic ""on-ramp"" that empowers natural science majors to engage in authentic computational problems as members of skilled, professional teams. We are developing and testing institutional practices and curricular innovations that engage and train STEM undergraduate students to use Python programming, and image processing in particular, in their undergraduate research projects. Students are recruited into the DIVAS program in the first semester of their first year. DIVAS scholars and other participating students can experience a variety of interventions including: 1) a one-credit DIVAS seminar exploring several imaging and computing topics; 2) image capture and analysis modules in introductory- or upper-level biology and chemistry courses; 3) a week-long, intensive coding bootcamp that introduces bash, git, Python programming, and the OpenCV image processing library; 4) pair programming exercises to solve genuine morphometric and colorimetric problems; 5) an extended summer research project involving image processing; and 6) weekly code reviews to check on progress and provide guidance. The DIVAS projects measures the impact of these interventions on students' self-reported efficacy in using computation to solve problems, their attitudes towards computation, and their computational thinking skills, using both established and newly developed instruments. Our first year results show that multiple interventions have had significant positive impact on students' self-efficacy and interest in using computing in their future careers, and certain computational thinking skills.",DIVAS: Outreach to the Natural Sciences through Image Processing,NA:NA:NA:NA:NA,2018
Yunjeong Chang:Leslie Cintron:James P. Cohoon:Luther Tychonievich,"Although computing occupations increasingly dominate the workforce, the computing discipline does not attract sufficient and diverse students to meet societal workforce needs. LIGHTHOUSE FOR CS is a collection of professional development efforts seeking to increase computing diversity through faculty education. LIGHTHOUSE CC provides an open online course extending a decade of successful face-to-face TAPESTRY workshops. LIGHTHOUSE CC targets community college computing faculty, building off of research suggesting that online professional development can be as effective as in-person professional development. We believe it is one of the first attempts to validate that finding for community college computing faculty. The paper examines participant motivations and perceptions of online and face-to-face diversity-focused professional development for community college computing educators. To meet the needs of the community college computing faculty, we began with a needs assessment survey. Its feedback and prior face-to-face workshop experiences were integrated with several instructional design principles and theories to engage community college faculty, notably the ARCS motivational design model (Keller, 1987) and the Community of Practice model (Wenger, 1998). Project analyses involved both surveys and focus group interviews. The paper also provides directions for future improvements and suggestions for others who are considering online or diversity-focused professional development.",Diversity-focused Online Professional Development for Community College Computing Faculty: Participant Motivations and Perceptions,NA:NA:NA:NA,2018
Beth A. Quinn:Wendy M. DuBow:Jamie Huber Ward,"This paper describes the creation of a virtual, interactive professional development course to build the capacity of community college faculty to recruit and retain women and underrepresented minorities in computing programs. The project was designed in response to community college faculty reporting need for practical methods to broaden participation in their programs and their feelings of isolation from like-minded faculty. The 12-session prototype has been piloted with eight community college faculty. The finalized PD will be available as free, standalone web-based modules. The course includes instruction on research-based practices for recruiting and retaining women and underrepresented minorities in computing. Evaluation mechanisms are developed to assess the impacts of the PD on faculty attitudes and teaching practices, and the effect of changed practices on introductory computing students' engagement and persistence. Here we report preliminary findings from interviews. The project outputs will include polished online content modules, validated student survey instruments, a classroom observation protocol, and student and faculty interview instruments.",Broadening Participation in Computing via Professional Development for Community College CS/IT Faculty,NA:NA:NA,2018
S. Monisha Pulimood,NA,Session details: Paper Session: Software Engineering,NA,2018
Sarah Heckman:Jason King,"Situated learning theory supports engaging students with materials and resources that reflect professional standards and best practices. Starting with our introductory courses, we incorporate situated learning to support student engagement in software engineering practices and processes through the use of industrial strength open-source tools in several classes throughout the undergraduate computer science curriculum at NC State University. Additionally, these tools support several logistical and educational needs in computer science classrooms, including assignment submission systems and automated grading. In this tools paper, we present our Canary Framework for supporting software engineering practices through the use of Eclipse for development; GitHub for submission and collaboration; and Jenkins for continuous integration and automated grading. These tools are used in five of ten core courses by more than 3000 students over ten semesters. While the use of these tools in education is not unique, we want to share our model of using professional tools in a classroom setting and our experiences on how this framework can support multiple courses throughout the curriculum and at scale.",Developing Software Engineering Skills using Real Tools for Automated Grading,NA:NA,2018
Gene Fisher:Corrigan Johnson,"In 2016 we introduced a tool called ""Spest// for the automated generation of software tests from formal specifications. That introductory presentation of Spest described its basic functionality and our initial results of using Spest in software engineering courses. Here we describe further experience of using Spest in classes, including qualitative and quantitative analyses of its effectiveness. The analysis consists of a qualitative survey of students/ experience, a quantitative study of the readability of Spest-generated tests, and a quantitative analysis that compares the coverage quality of hand-written student tests with Spest-generated tests. The results of the analyses are mixed. The experience survey finds that a majority of students did not enjoy using Spest nor fully understand how to use it effectively. The results of the readability study show that Spest-generated tests are not as readable for students as tests written by human experts, however the differences in readability are not extreme. Finally, the results of the coverage comparison are good, showing that Spest-generated tests achieve better code coverage than students/ hand-written tests. Given the mixed results, we discuss how we are moving forward to make Spest a more usable and effective tool.",Specification-Based Testing in Software Engineering Courses,NA:NA,2018
Maria Lydia Fioravanti:Bruno Sena:Leo Natan Paschoal:Laíza R. Silva:Ana P. Allian:Elisa Y. Nakagawa:Simone R.S. Souza:Seiji Isotani:Ellen F. Barbosa,"Software Engineering (SE) is an important topic to be taught in Computer Science courses. However, teaching of theoretical concepts with no link to their practical applications or no examples in the student's context may discourage learning, justifying why teaching and learning are great challenges of education in universities. In attempt to bridge such gap, several approaches have been proposed and applied to improve teaching and learning SE such as project based learning (PBL), a well-known approach already applied to teach SE. Nevertheless, there's a lack of understanding about how to better apply PBL and how to take advantage of this approach, for future use. There is also a lack of experience report describing how to use, its challenges and difficulties, what could be hampering to widely adopt it. We present our experience applying a PBL approach combined with project management to create an environment considering aspects such as dealing with managers and real stakeholders. The goal is to bring students closer to the reality of developing a software project in the business context. Our experience indicates positive results on the adoption of a PBL approach. In general, students were enthusiastic and positive about the use of this approach, the presence of a manager and the importance of using real-world problems with real stakeholders.",Integrating Project Based Learning and Project Management for Software Engineering Teaching: An Experience Report,NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Crystal Furman:Timothy Gallagher:Richard Kick,"With the launch of the new AP Computer Science Principles course many high school and higher education institutions are curious how these two courses will work together and what credit each course should be awarded. In this session, participants will be presented with a comparison of these two courses, an overview of existing credit and placement policies, and hear from two high school teachers who have successfully implemented both of these courses at their schools. Higher Ed faculty will have an opportunity to share how their individual schools are awarding credit or placement for these courses.",AP Computer Science: Two Complementary Courses,NA:NA:NA,2018
Joel C. Adams:Richard A. Brown:Jalal Kawash:Suzanne J. Matthews:Elizabeth Shoop,"The Raspberry Pi (R-Pi) is a single board computer priced at 35 USD -- less than the cost of many textbooks. The current model (3B) includes a quad-core ARM 64-bit CPU, 1GB of RAM, a GPU, and numerous communication ports, including USB, HDMI, Ethernet, WiFi and Bluetooth. This combination of low cost and high functionality creates many new pedagogical possibilities for CS educators, ranging from using the R-Pi to teach assembly language to using it as a multiprocessor. Relatedly, mathematics educators have produced an extensive literature on the use of pedagogical tools known as ""manipulatives"" that have been shown to be effective at starting students through a ""concrete, representational, abstract"" progression of understanding of an abstract topic. We believe that by using the R-Pi as a manipulative, this same ""concrete, representational, abstract"" progression can be used to help CS students master many topics that are often taught as abstractions. By providing a ""concrete"" foundation on which to build, a single board computer like the R-Pi can provide the first step in helping students build mental models of such abstractions, and thus enhance student learning. Experience also indicates that many students find the R-Pi to be a fun and enjoyable way to learn about these abstractions. In this panel session, four CS educators will share their experiences using the R-Pi in their courses, followed by a Q&A conversation between the audience and the panelists.",Leveraging the Raspberry Pi for CS Education,NA:NA:NA:NA:NA,2018
Amardeep Kahlon:Deborah Boisvert:Louise Ann Lyon:Melanie Williamson:Cheryl Calhoun,NA,The Authentic Inclusion and Role of Community Colleges in National Efforts to Broaden Participation in Computing,NA:NA:NA:NA:NA,2018
Adrienne Decker:Monica M. McGill:Jason Ravitz:Eric Snow:Rebecca Zarch,"With the growth of computing education research in the last decade, we have found a call for a strengthening of empiricism within the computing education research community. Computer science education researchers are being asked to focus not only the innovation that the research creates or the question it answers, but also on validating the claims we made about the work. In this session, we will explore the relationship between evaluation and computing education research and why it is so vital to the success of the many computing education initiatives underway. It will also help computing faculty engaged in computer science education research understand why it is essential to integrate evaluation and validation from the very first conceptual stages of their intervention programs.",Connecting Evaluation and Computing Education Research: Why is it so Important?,NA:NA:NA:NA:NA,2018
Helen H. Hu:Clifton Kussmaul:Lisa M. Olivieri,"As a form of active learning, POGIL (Process Oriented Guided Inquiry Learning) engages students by grouping them in teams to work collaboratively through activities and construct their own understanding of computer science content. POGIL activities are carefully designed to foster student learning by guiding students through a learning cycle of exploration, concept invention and application. Computer science assignments typically emphasize application questions and problems, where students are expected to apply the new concept to different applications (e.g., writing multiple programs involving while-loops). In contrast, POGIL activities require students to first explore a model, possibly by asking critical thinking questions about some code and its output, before leading students to recognize patterns in the model, thereby helping them to form a better understanding of the new CS concept. Only after students have explored and developed an understanding of the concept, do the POGIL activities proceed to more traditional application questions. Studies of POGIL's effectiveness in STEM classrooms have generally found that (1) attrition is lower for POGIL than for traditional courses; (2) content mastery is greater than for traditional instruction; (3) students prefer POGIL over traditional methods; (4) students have more positive attitudes about the course and the instructors; and (5) learning skills appear to improve during the course. These advantages have drawn many Computer Science instructors to adopt POGIL in their classrooms, but very few instructors are developing POGIL activities for Python, even though Python lends itself well to learning cycle questions as an interpreted language. All CS instructors, but especially Python instructors, can benefit from adding exploration and concept invention questions to assignments before asking application questions.The growing popularity of Jupyter Notebooks makes it even easier for instructors to embed learning cycle questions in Python (or any other Jupyter supported programming language). This special session will provide SIGCSE attendees the opportunity to experience a CS POGIL activity for themselves, before introducing attendees to the learning cycle. Attendees will be view several examples of exploration and concept invention questions, which should be helpful to anyone creating CS assignments, not just POGIL instructors. The presenters will provide a short tour of two collections of POGIL activities in Python before the question and answer period.",Special Session: Exploring and Discovering Concepts via POGIL,NA:NA:NA,2018
Stan Kurkovsky,NA,Session details: Paper Session: Active Learning #1,NA,2018
Lijuan Cao:Audrey Rorrer,"It has been long established that discrete structures is an important and foundational component of the computer science curriculum. However, the topics covered in this course tend to be more abstract than those covered in most other introductory computer science courses. This leads to additional challenges for instructors and students. To deal with these challenges, we introduce a new pedagogy for teaching this course. Our approach is based on a variant of the flipped classroom paradigm and is comprised of four main components: before class preparatory work, in-class mini lecture, in-class team based problem solving activities, and weekly individual assignments. In this paper, we discuss these components in detail. Our approach is informed by several cutting-edge teaching methodologies including active learning, light weight teams, and gamification. We conclude the paper by discussing the results of a survey taken by the students and a summary of the grades attained in the class. These show that our approach was well received by the students and has led to good learning outcomes.",An Active and Collaborative Approach to Teaching Discrete Structures,NA:NA,2018
Saúl A. Blanco,"In this paper, we describe the active learning and collaborative learning activities implemented in an introductory mid-size discrete mathematics course for Informatics majors. Active learning and collaborative learning have been used to increase student engagement, but incorporating them in smaller classes is a completely different experience from doing so in larger classes. We offer some tips and suggestions on how to incorporate these activities in larger classes including the utilization of undergraduate teaching assistants during lectures, and allowing students to work together on worksheets during lectures with the help of the teaching staff. Course questionnaires collected from five different sections that ran in the spring, summer, and fall of 2016 with around 60 to 70 students suggest that this approach has been well-received. Furthermore, the DFW rate (the proportion of students that received a D, F, or withdrew from the class) of these sections was lower than the DFW rate of other sections that shared the same evaluations (exams, homework assignments, and quizzes) and grading scheme to determine the final letter grade.",Active Learning in a Discrete Mathematics Class,NA,2018
Darina Dicheva:Austin Hodge,"Data Structures is a fundamental Computer Science discipline, challenging students/ abstract thinking, problem solving and programming skills. In this paper, we present an educational game intended to explicate several features hindering students/ understanding of the data structure Stack on conceptual and practical level. The game targets all three aspects of teaching data structures: conceptualization, application and implementation. These aspects are embodied as three parts of the game tied together through a meaningful storyline. The application part targets the use of stacks to solve problems, such as converting arithmetic expressions from infix to postfix notation and evaluating postfix and infix expressions. The implementation part involves solving Parson/s problems and writing Java code for implementing the methods of the Stack class. The results of the conducted evaluation of the game show statistically significant learning gains for the students and a strong positive attitude towards this type of active learning.",Active Learning through Game Play in a Data Structures Course,NA:NA,2018
Patricia Ordóñez,NA,Session details: Paper Session: CS Education Around the Globe,NA,2018
Tom Neutens:Francis Wyffels,"The Progra-MEER professional development workshop is a one year program organized collaboratively by the computer science departments of three Flemish universities. It aims to improve the computer science knowledge of in service teachers in a physical computing context. Since Flemish schools are starting to implement STEM in their schools, the program links computer science to STEM and project based learning. This paper gives a description of the design and implementation of the program while providing an analysis of its strengths and weaknesses. We show that the program leads to the successful implementation of different physical computing projects. However, it needs to further support the practical project implementations while spending more attention on assessment and context definition. Additionally, the program has to invest more effort in creating a sustainable community of practice so knowledge and experiences can still be shared even after the program has finished.",Bringing Computer Science Education to Secondary School: A Teacher First Approach,NA:NA,2018
Karsten Lundqvist:Craig Anslow:Michael Homer:Kris Bubendorfer:Dale Carnegie,"The Information and Communications Technology (ICT) industry in New Zealand is growing rapidly. The traditional university courses are preparing an insufficient number of graduates to sustain the growth. Many of the traditional graduate students lack key soft skills that are important in team based software development. This paper reports on the development of a conversion Master of Software Development degree. The students are all graduates with little or no computer science degrees, are taught key programming skills, with a focus on agile development. The programme begins by focusing on individual programming skills through solving problems. Later industrial partners are engaged by providing industrial problems to agile teams of students. The industrial partners are active partners in the agile teams as product owners. By solving the problems, the students develop both technical and non-technical skills while utilizing the skills obtained from previous studies. The results from the first year of the programme are encouraging. A key result is that a high number of students found work in paid IT positions before graduating. The main issue of the first year was introducing too many topics at the same time, over-assessment, not enough communication and contact time, little opportunity for the students to make their own experiences, and learning by making mistakes. The programme has been changed for the next year/s cohort to introduce less topics at once, provide time and space for learning, and a redesign of scheduling assessments.",An Agile Conversion Masters Degree Programme in Software Development,NA:NA:NA:NA:NA,2018
Simon:Raina Mason:Tom Crick:James H. Davenport:Ellen Murphy,"Parallel surveys of introductory programming courses were conducted in Australasia and the UK, with a view to examining the programming languages being used, the preferred integrated development environments (if any), and the reasons for these choices, alongside a number of other key aspects of these courses. This paper summarises some of the similarities and differences between the findings of the two surveys. In the UK, Java is clearly the dominant programming language in introductory programming courses, with Eclipse as the dominant environment. Java was also the dominant language in Australasia six years ago, but now shares the lead with Python; we speculate on the reasons for this. Other differences between the two surveys are equally interesting. Overall, however, there appears to be a reasonable similarity in the way these undergraduate courses are conducted in the UK and in Australasia. While the degree structures differ markedly between and within these regions -- a possible explanation for some of the differences -- some of the similarities are noteworthy and have the potential to provide insight into approaches in other regions and countries.",Language Choice in Introductory Programming Courses at Australasian and UK Universities,NA:NA:NA:NA:NA,2018
Tracy Lewis-Williams,NA,Session details: Paper Session: Data Structures,NA,2018
Leo Porter:Daniel Zingaro:Cynthia Lee:Cynthia Taylor:Kevin C. Webb:Michael Clancy,"Establishing learning goals for a course allows instructors to design course content to address those goals, helps students to focus their learning appropriately, and enables researchers to assess learning of those goals. In this work, we propose six learning goals for a topic prevalent in CS2 courses: Basic Data Structures. These learning goals arise from reviewing several CS2 courses at a variety of institutions, surveying faculty experts who commonly teach CS2, and meeting and working closely with these experts. We outline our process for creating learning goals, identify important topics underlying these goals, and provide examples of how the goals developed on the path to consensus. We also document that the term ""CS2"" does not have a unified interpretation within the CS education community and describe how this hurdle influenced our decision to focus on Basic Data Structures.",Developing Course-Level Learning Goals for Basic Data Structures in CS2,NA:NA:NA:NA:NA:NA,2018
Matthew Mcquaigue:David Burlinson:Kalpathi Subramanian:Erik Saule:Jamie Payton,"In recent years, interactive textbooks have gained prominence in an effort to overcome student reluctance to routinely read textbooks, complete assigned homeworks, and to better engage students to keep up with lecture content. Interactive textbooks are more structured, contain smaller amounts of textual material, and integrate media and assessment content. While these are an arguable improvement over traditional methods of teaching, issues of academic integrity and engagement remain. In this work we demonstrate preliminary work on building interactive teaching modules for data structures and algorithms courses with the following characteristics, (1) the modules are highly visual and interactive, (2) training and assessment are tightly integrated within the same module, with sufficient variability in the exercises to make it next to impossible to violate academic integrity, (3) a data logging and analytic system that provides instantaneous student feedback and assessment, and (4) an interactive visual analytic system for the instructor to see students/ performance at the individual, sub-group or class level, allowing timely intervention and support for selected students. Our modules are designed to work within the infrastructure of the OpenDSA system, which will promote rapid dissemination to an existing user base of CS educators. We demonstrate a prototype system using an example dataset.","Visualization, Assessment and Analytics in Data Structures Learning Modules",NA:NA:NA:NA:NA,2018
Jeffrey Young:Eric Walkingshaw,"Explanations of data structures and algorithms are complex interactions of several notations, including natural language, mathematics, pseudocode, and diagrams. Currently, such explanations are created ad hoc using a variety of tools and the resulting artifacts are static, reducing explanatory value. We envision a domain-specific language for developing rich, interactive explanations of data structures and algorithms. In this paper, we analyze this domain to sketch requirements for our language. We perform a grounded theory analysis to generate a qualitative coding system for explanation artifacts collected online. This coding system implies a common structure among explanations of algorithms and data structures. We believe this structure can be reused as the semantic basis of a domain-specific language for creating interactive explanation artifacts. This work is part of our effort to develop the paradigm of explanation-oriented programming, which shifts the focus of programming from computing results to producing rich explanations of how those results were computed.",A Domain Analysis of Data Structure and Algorithm Explanations in the Wild,NA:NA,2018
Manuel Perez-Quinones,NA,Session details: Paper Session: High School #1,NA,2018
Christine Alvarado:Gustavo Umbelino:Mia Minnes,"Many college computer science majors have little or no pre-college computing experience. Previous work has shown that inexperienced students under-perform their experienced peers when placed in the same introductory courses, and are more likely to drop out of the CS program. However, not much is known about what, if any, differences may persist beyond the introductory sequence for students who remain in the program. We conducted a study across all levels of a CS program at a large public university in the United States to determine whether grade differences exist between students with and without pre-college experience, and if so, for what types of experiences. We find significant grade differences in courses at all levels of the program. We further find that students who took AP Computer Science receive significantly higher average grades---by up to a half grade---in nearly all courses we studied. Pre-college experience appears to have a weaker relationship with retention and with low-stakes assessment grades. We discuss the limitations of these findings and implications for high school and college level CS courses and programs.",The Persistent Effect of Pre-College Computing Experience on College CS Course Grades,NA:NA:NA,2018
Kevin Robinson:Keyarash Jahanian:Justin Reich,"Equity is a core component of many computer science teacher preparation programs. One promising approach is addressing unconscious bias in teachers, which may impact teacher expectations and interactions with students. Since early intervention literature indicates that asking individuals to suppress biases is counterproductive, our work uses online interactive case studies as practice spaces to focus on teaching decisions that may be impacted by unconscious bias. Our initial findings indicate that when embedded within teacher preparation programs, practice spaces produce rich learning opportunities, and our analysis yields insights into how beliefs or biases may interfere with principles of equity like disrupting preparatory privilege.",Using Online Practice Spaces to Investigate Challenges in Enacting Principles of Equitable Computer Science Teaching,NA:NA:NA,2018
Yvonne Kao:Katie D'Silva:Aleata Hubbard:Joseph Green:Kimkinyona Cully,"Pedagogical content knowledge (PCK) is specialized knowledge necessary to teach a subject. PCK integrates subject-matter content knowledge with knowledge of students and of teaching strategies so that teachers can perform the daily tasks of teaching. Studies in mathematics education have found correlations between measures of PCK and student learning. Finding robust, scalable ways for developing and measuring computer science (CS) teachers' PCK is particularly important in CS education in the United States, given the lack of formal CS teacher preparation programs and certifications. However, measuring pedagogical content knowledge is a challenge for all subject areas. It can be difficult to write assessment items that elicit the different aspects of PCK and there are often multiple appropriate pedagogical choices in any given teaching scenario. In this paper, we describe a framework and pilot data from a questionnaire intended to elicit PCK from teachers of high school introductory CS courses and we propose future directions for this work.",Applying the Mathematical Work of Teaching Framework to Develop a Computer Science Pedagogical Content Knowledge Assessment,NA:NA:NA:NA:NA,2018
Abby Funabiki,NA,Session details: Paper Session: K thru 8 #1,NA,2018
Moran Tsur:Natalie Rusk,"In this paper, we present our experience developing introductory coding environments called Scratch Microworlds. These interactive environments enable learners to get started with coding by creating projects, rather than solving puzzles. The primary educational goal of these microworlds is to engage learners (ages 8 to 14) who otherwise may not be drawn to coding. The microworlds are simplified versions of the Scratch coding environment that contain a small set of blocks and are designed to encourage exploration and experimentation. They are also interest-based, so learners can choose to work on a topic that is motivating to them (such as dance, music, or soccer). We present three main design principles and related challenges that we addressed through the iterative process of developing Scratch Microworlds: (1) how to simplify initial experiences while still supporting creativity, (2) how to provide scaffolding while maintaining learners' agency, and (3) how to provide starting points that spark rather than limit the imagination. We share observations and feedback from workshops with children and educators, which informed our iterative design process. We conclude by considering next steps for providing more entry points into coding that support children as creative thinkers.",Scratch Microworlds: Designing Project-Based Introductions to Coding,NA:NA,2018
Meg J. Ray:Maya Israel:Chung eun Lee:Virginie Do,"Despite the proliferation of K-12 computer science (CS) programs and implementation of ""CS for All"" initiatives in U.S. schools, little research has been conducted on effective pedagogical approaches in K-12 CS. Even less research has focused on meeting the needs of students with disabilities. This paper presents findings from a qualitative case study examining the experiences of teachers who taught CS classes that included students with disabilities. The goal of this study was to identify pedagogical approaches that the teachers used to meet the needs of all students. Results indicated that teachers implemented three primary instructional strategies to address the needs of students with disabilities including facilitating student collaboration, using the Universal Design for Learning (UDL) framework, and using explicit instruction to teach CS concepts.",A Cross-Case Analysis of Instructional Strategies to Support Participation of K-8 Students with Disabilities in CS for All,NA:NA:NA:NA,2018
Philip Sheridan Buffum:Kimberly Michelle Ying:Xiaoxi Zheng:Kristy Elizabeth Boyer:Eric N. Wiebe:Bradford W. Mott:David C. Blackburn:James C. Lester,"The K-12 Computer Science Framework has established that students should be learning about the computer science concept of variables as early as middle school, although the field has not yet determined how this and other related concepts should be introduced. Secondary school computer science curricula such as Exploring CS and AP CS Principles often teach the concept of variables in the context of algebra, which most students have already encountered in their mathematics courses. However, when strategizing how to introduce the concept at the middle school level, we confront the reality that many middle schoolers have not yet learned algebra. With that challenge in mind, this position paper makes a case for introducing the concept of variables in the context of middle school science. In addition to an analysis of existing curricula, the paper includes discussion of a day-long pilot study and the consequent teacher feedback that further supports the approach. The CS For All initiative has increased interest in bringing computer science to middle school classrooms; this paper makes an argument for doing so in a way that can benefit students' learning of both computer science and core science content.",Introducing the Computer Science Concept of Variables in Middle School Science Classrooms,NA:NA:NA:NA:NA:NA:NA:NA,2018
Julie Zelenski,NA,Session details: Paper Session: Nifty Session,NA,2018
Nick Parlante:Julie Zelenski:Ben Stephenson:Ali Malik:Phil Ventura:Michael Guerzhoy:David Reed:Josh Hug,"I suspect that students learn more from our programming assignments than from our much worried-over lectures, with their slide transitions and attempts at live coding in lecture. A great assignment is deliberate about where the student hours go, concentrating the student's attention on material that is interesting and useful. The best assignments solve a problem that is topical and entertaining, providing motivation for the whole stack of work. Unfortunately, creating great programming assignments is both time consuming and error prone. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.",Nifty Assignments,NA:NA:NA:NA:NA:NA:NA:NA,2018
Jan. Plane:Rebecca Zarch:Marie desJardins:Dianne O'Grady-Cunniff:Scott Nichols:Pat Yongpradit,NA,Maryland Computing Education Expansion: From Grassroots to the MCCE,NA:NA:NA:NA:NA:NA,2018
Michael E. Caspersen:Judith Gal-Ezer:Enrico Nardelli:Jan Vahrenhold:Mirko Westermeier,"Recent years have seen an increase in activities geared towards making Computer Science courses available to all K-12 students. However, due to administrative regulations, such activities and their implementation often need to be localized on a national or even local context; these constraints, often paired with subtle but important terminology differences, hinder those wanting to compare the status quo across the boundaries of administrative units and to draw on experiences made elsewhere.",The CECE Report: Creating a Map of Informatics in European Schools,NA:NA:NA:NA:NA,2018
Diana Burley:Matt Bishop:Siddharth Kaza:David S. Gibson:Scott Buck:Allen Parrish:Herb Mattord,"In this special session, members of the Joint Task Force (JTF) on Cybersecurity Education will provide an overview of the CSEC2017 curricular guidelines (finalized in December 2017) and engage session participants in a discussion of the curricular framework and body of knowledge. The session will conclude with an interactive panel discussion on implementing the curricular guidance.",Special Session: Joint Task Force on Cybersecurity Education,NA:NA:NA:NA:NA:NA:NA,2018
Adrienne Decker:Monica M. McGill:Leigh Ann DeLyser:Beth Quinn:Miles Berry:Kathy Haynie:Tom McKlin,"Over the last few years, a number of repositories of information relevant to the computing education community have come online, each with different content and purpose. In this special session, we present an overview of these repositories and the content that each provides. Demonstrations of the functionality of the repositories will be shown and attendees are encouraged to come with their questions and suggestions for improvement if they are currently users of the repositories.",Repositories You Shouldn't Be Living Without,NA:NA:NA:NA:NA:NA:NA,2018
Chris Mayfield,NA,Session details: Paper Session: Active Learning #2,NA,2018
Ricardo Caceffo:Guilherme Gama:Rodolfo Azevedo,"We present our experience in a Computer Science (CS) introductory course, where three teaching practices were implemented and compared: lectured-based learning, problem-based learning, and peer instruction. We chose Information Systems, a first-term undergraduate course, for this study. It overviews a variety of topics in CS, such as algorithms, data structures and programming logic. We initially conducted interviews with previous instructors, who assisted in the collection of data, requirements, and needs pertaining to both students and instructors. We also carried out a survey among students enrolled in the program, in order to identify suggestions on how the classes could become more dynamic and motivating. In sequence, the experiment was designed to format and evaluate classes in the chosen paradigms. We focused on assessing and analyzing how the students' motivation and learning process were affected, as well as how difficult it was for instructors to prepare classes and how much time they expended in doing so. Results indicate that a paradigm shift from traditional teaching is not only expected by students and instructor; it is well received, and had a positive influence on the students' learning and motivation. We also found, however, that the proposed changes brought on an unwelcome overhead for the instructors, as additional time and effort are required to implement such practices.",Exploring Active Learning Approaches to Computer Science Classes,NA:NA:NA,2018
Shannon Duvall:Dugald Ralph Hutchings:Robert C. Duvall,"Pedagogical approaches abound in computer science. Common approaches include flipped classrooms, active learning, gamification, and the traditional lecture-based approach. There are also a wide variety of computer science learning materials including videos, interactive tutorials, and textbooks (whether presented online or on paper). Instructor choices of approach and materials present a series of trade-offs and may favor some groups of students over others. We propose a method, Scrumage, (SCRUM for AGile Education) in an attempt to overcome the necessity of making trade-offs. We allow each student in a course to select among several pedagogical approaches and sets of materials to fit each individual student's learning needs and desires. Scrumage adapts concepts from the Scrum project management technique. In Scrum, project teams are developing a product for a client. In Scrumage, student teams are developing knowledge with support from the instructor. We define and motivate Scrumage and discuss the implementation and outcomes of the technique in a class at our undergraduate institution.","Scrumage: A Method for Incorporating Multiple, Simultaneous Pedagogical Styles in the Classroom",NA:NA:NA,2018
Qiang Hao:Bradley Barnes:Ewan Wright:Eunjung Kim,"This research investigated the impacts of active learning environments and instructional methods adapted to such environments on the academic performance of computer science students. Two consecutive studies involving a total of 267 novice students in the same course were conducted across two different semesters. The course was taught by the same instructor and set up with two different sections. One section was taught in a conventional lecture hall, while the other was taught in an active-learning classroom with adapted instructional methods. Active learning environments and the adapted instructional methods were found to have significantly positive effects on students' learning outcomes. Fine-grained results grouped by major were discussed. The findings of this study demonstrate positive effects of active learning environments in computer science education, thereby adding to the literature on both computer science education and learning environments.",Effects of Active Learning Environments and Instructional Methods in Computer Science Education,NA:NA:NA:NA,2018
Ruth Anderson,NA,Session details: Paper Session: Ethics,NA,2018
Michael Skirpan:Nathan Beard:Srinjita Bhaduri:Casey Fiesler:Tom Yeh,"Our paper offers several novel activities for teaching ethics in the context of a computer science (CS) class. Rather than approaches that teach ethics as an isolated course, we outline and discuss multiple ethics education interventions meant to work in the context of an existing technical course. We piloted these activities in an Human Centered Computing course and found strong engagement and interest from our students in ethics topics without sacrificing core course material. Using a pre/post survey and examples from student assignments, we evaluate the impact of these interventions and discuss their relevance to other CS courses. We further make suggestions for embedding ethics in other CS education contexts.",Ethics Education in Context: A Case Study of Novel Ethics Activities for the CS Classroom,NA:NA:NA:NA:NA,2018
Michael Skirpan:Jacqueline Cameron:Tom Yeh,"This paper presents Quantified Self: Immersive Data and Theater Experience (QSelf) as a case study in collaborative and interdisciplinary learning and toward a project-based education model that promotes technical art projects. 22 students from several departments engaged in a semester-long effort to produce an immersive theater show centered on ethical uses of personal data, a show that drew more than 240 people over 6 performances. The project was housed out of the computer science department and involved multiple computer science undergraduate and graduate students who had the chance to work with students from the department of theater and dance. By analyzing the technical artifacts students created and post-interviews, we found this project created a novel and productive space for computer science students to gain applied experience and learn about the social impacts of their work while the arts students gained a fluency and understanding around the technical issues presented.",Quantified Self: An Interdisciplinary Immersive Theater Project Supporting a Collaborative Learning Environment for CS Ethics,NA:NA:NA,2018
Jeffrey S. Saltz:Neil I. Dewar:Robert Heckman,"Data science is a new field that integrates aspects of computer science, statistics and information management. As a new field, ethical issues a data scientist may encounter have received little attention to date, and ethics training within a data science curriculum has received even less attention. To address this gap, this article explores the different codes of conduct and ethics frameworks related to data science. We compare this analysis with the results of a systematic literature review focusing on ethics in data science. Our analysis identified twelve key ethics areas that should be included within a data science ethics curriculum. Our research notes that none of the existing codes or frameworks covers all of the identified themes. Data science educators and program coordinators can use our results as a way to identify key ethical concepts that can be introduced within a data science program.",Key Concepts for a Data Science Ethics Curriculum,NA:NA:NA,2018
Howard Francis,NA,Session details: Paper Session: High School #2,NA,2018
Robin Flatland:Ira Goldstein:MaryAnne L. Egan:Scott Vandenberg:Meg Fryling:Sharon Small,"In this paper, we describe our experiences with a new model for in-service computer science (CS) professional development that embeds college/university faculty into local high school classrooms partnered with a high school teacher. The high schools we have worked with had not previously offered any rigorous CS courses, and the teachers had little or no CS background. Our goal is to provide the development necessary for the high school teachers to be able to independently teach an engaging and rigorous college level CS course. We have leveraged the local nature of our program to ensure an on-going partnership between the high schools and the college/university lasting beyond the structured professional development program. Here we describe our program, the teachers and schools we have worked with, our community building efforts, and our next steps. We also present outcomes and data from our initial evaluations.",Connecting Colleges/Universities and Local High Schools: A New Model for High School CS Teacher Development,NA:NA:NA:NA:NA:NA,2018
Monica M. McGill:Adrienne Decker:Zachary Abbott,"This paper provides a detailed examination of pre-college computing activities as reported in three Association of Computing Machinery (ACM) venues (2012-2016). Ninety-two articles describing informal learning activities were reviewed for 24 program elements (i.e., activity components, and student/instructor demographics). These 24 program elements were defined and shaped by a virtual focus group study and the articles themselves. Results indicate that the majority of authors adequately report age/grade levels of participants, number of participants, the type of activity, when the activity was offered, the tools/languages used in the activity, and whether the activity was required or elective. However, there is a deficiency in reporting many other important and foundational program elements, including contact hours of activity participants, clear learning objectives, the prior experience of participants (students and instructors), and many more. In conjunction with previous work, this paper provides recommendations to reduce these deficiencies. The Recommendations for Reporting Pre-College Computing Activities (Version 1.0) are presented to help researchers improve the quality of papers, set a standard of necessary data needed to replicate studies, and provide a basis for comparing activities and activity outcomes across multiple studies and experiences.",Improving Research and Experience Reports of Pre-College Computing Activities: A Gap Analysis,NA:NA:NA,2018
Chris Rhoton,"Virginia House Bill 831 (2016) put the state on a path toward K-12 Standards of Learning that include computer science (CS) at all levels. Accompanying the initiative is an effort to define the ""State of the State['s]"" current CS offerings. The author examined course offerings at 251 of the state's 320 high schools to determine how accessible on-site CS courses were across the state. The results indicate a significant disparity between school systems located in rural communities and small townships when compared with suburban/city locales. Perhaps more striking was the emerging connection between the region where one lives in the state and that individual's access to (or lack thereof) in-person CS instruction. The results also suggest fewer than half the schools in Virginia are running a CS class as of spring 2017 when the study was conducted.",Examining the State of CS Education in Virginia's High Schools,NA,2018
Anya Tafliovich,NA,Session details: Paper Session: Interdisciplinary Perspectives,NA,2018
Sebastien Siva:Tacksoo Im:Tom McKlin:Jason Freeman:Brian Magerko,"EarSketch is a curriculum and learning environment designed to engage diverse student populations in introductory computing courses through an approach that connects coding and computational thinking with the composition, production, and remixing of popular music. Prior studies at the high school level have shown significant impacts on student engagement and intention to persist in computing, especially for female students. This paper describes an adaptation of EarSketch for use in an introductory undergraduate-level programming course for non-majors at an open-access four-year college. The paper describes a quasi-experimental study comparing student engagement, content knowledge, and intention to persist between course sections using EarSketch and non-EarSketch flavors of the curriculum, along with a path analysis exploring factors related to student engagement and intention to persist. The findings suggest that STEAM learning interventions such as EarSketch can significantly impact gains in student content knowledge, engagement, and intention to persist across diverse undergraduate student populations.",Using Music to Engage Students in an Introductory Undergraduate Programming Course for Non-Majors,NA:NA:NA:NA:NA,2018
Richert Wang:Vincent Olivieri,"This paper describes our experience and observations in creating an experimental interdisciplinary course focusing on sound design and its implementation in computer games. This paper provides a model for others that may want to develop similar courses that focus on interdisciplinary collaboration in this genre. The course was targeted to motivated computer science and sound design / art students, and was not designed as an introduction to computer science. Rather, it was designed as a project course where students can apply topics in sound design by creating a video game within a diverse team, enabling a collaborative learning opportunity. Students applied both creative sound design principles and technical implementation using industry-standard tools such as QLab, Wwise, and Unity.",Sound Design for Video Games: An Interdisciplinary Course for Computer Science and Art Students,NA:NA,2018
Tom McKlin:Brian Magerko:Taneisha Lee:Dana Wanzer:Doug Edwards:Jason Freeman,"STEAM education is an approach to engage students in STEM topics by prioritizing personal expression, creativity, and aesthetics. EarSketch, a collaborative and authentic learning tool, introduces students to programming through music remixing, has previously been shown to increase student engagement, and increases learner's intentions to persist in computing. The goal of EarSketch is to broaden participation in computing through a thickly authentic learning environment that has personal and real world relevance in both computational and music domains. This article reports a quasi-experimental study suggesting that an authentic learning environment predicts increased intentions to persist via identity/belongingness and creativity. We ran a path analysis that exposed the creativity subscales, and this analysis reveals that ""sharing"" is the one creativity sub-construct that predicts increased intention to persist. This work makes a significant contribution to computer science education by revealing how an authentic STEAM curriculum affects student attitudes and knowledge, by presenting scales to measure authenticity and personal creativity, and by discussing how identity/belongingness may affect student success.",Authenticity and Personal Creativity: How EarSketch Affects Student Persistence,NA:NA:NA:NA:NA:NA,2018
James Heliotis,NA,Session details: Paper Session: K thru 8 #2,NA,2018
Francisco J. Gutierrez:Jocelyn Simmonds:Cecilia Casanova:Cecilia Sotomayor:Nancy Hitschfeld,"Advancing computational thinking in elementary education has been rapidly gaining attention due to the prospective of developing 21st century skills. However, interventions in this domain risk failure if they do not explicitly address the particular socio-cultural traits of the deployment scenario. This is the case in most countries of Latin America, where computing has not reached a sustainable penetration in K-12 education. In order to bridge this gap, we designed a one-week workshop for advancing computational thinking targeted to 10-12 years old Chilean students with no prior experience in programming. This paper describes our intervention and presents the results of a qualitative study analyzing positive and negative aspects of the experience. Although most participants effectively acquired basic programming skills by the end of the intervention, we also identified several inaccurate views on computing and computer scientists. For instance, computing was mostly perceived as a set of informal experiences rather than a way for enabling creation, automation, and work. The word ""hacking"" appears to be used as a metaphor for more technical terms, such as ""programming"" or ""algorithm"". Finally, negative stereotypical views of computer scientists resulting from the intervention were not as frequent as initial perceptions. These results provide fresh evidence on how to design, adapt, and evaluate computational thinking interventions targeted to K-6 students in Latin America.",Coding or Hacking?: Exploring Inaccurate Views on Computing and Computer Scientists among K-6 Learners in Chile,NA:NA:NA:NA:NA,2018
Shuchi Grover:Satabdi Basu:Patricia Schank,"Block-based programming environments such as Scratch, App Inventor, and Alice are a key part of introductory K-12 computer science (CS) experiences. Free-choice, open-ended projects are encouraged to promote learner agency and leverage the affordances of these novice-programming environments that also support creative engagement in CS. This mixed methods research examines what we can learn about student learning from such programming artifacts. Using an extensive rubric created to evaluate these projects along several dimensions, we coded a sample of ~80 Scratch and App Inventor projects randomly selected from 20 middle school classrooms in a diverse urban school district in the US. We present key elements of our rubric, and report on noteworthy trends including the types of artifacts created and which key programming constructs are or are not commonly used. We also report on how factors such as students' gender, grade, and teachers' teaching experience influenced students' projects. We discuss differences between programming environments in terms of artifacts created, use of computing constructs, complexity of projects, and use of features of the environment for creativity, interactivity, and engagement. Our findings will help educators of introductory computing be more cognizant of how best to leverage the programming environments they are using, and what aspects they need to focus on as they attempt to address the learning needs of all in ""CS For All.""",What We Can Learn About Student Learning From Open-Ended Programming Projects in Middle School Computer Science,NA:NA:NA,2018
Luis Gustavo J. Araujo:Roberto A. Bittencourt:David M.B. Santos,"Previous studies have presented approaches to teach programming based on contexts close to students, such as games, robotics, and media. Those contexts may turn learning easier and more motivating. Media manipulation is one of such contexts relevant to teenage students, for their thorough use of image applications and social networks. In this work, we design and evaluate a spiral approach to teach programming to ninth-grade students of a middle school in Brazil's countryside. The approach is contextualized by media, i.e., image creation and manipulation, and we use the Python language with turtle graphics and JES tools to support it. Results point out to the influence of context and tools on learning, significant changes of perception about computing, high motivation to learn how to code, as well as a positive correlation between learning and motivation.",An Analysis of a Media-Based Approach to Teach Programming to Middle School Students,NA:NA:NA,2018
Maria Jump,NA,Session details: Paper Session: Recursion,NA,2018
Ramy Esteero:Mohammed Khan:Mohamed Mohamed:Larry Yueli Zhang:Daniel Zingaro,"Recursion and iteration are two key topics taught in introductory Computer Science. This is especially so for CS2 students, as CS2 is the course where recursion is typically taught and where control-flow concepts are solidified. When asked to solve a problem that could feasibly be solved with recursion or iteration, what do CS2 students choose to do? And how does this choice relate to the correctness of their code? This paper provides one answer to these questions through an analysis of student exam responses to a problem on finding deepest common ancestors in trees. We find that 19% of students choose to use iteration, 51% choose recursion, and 16% choose to combine both iteration and recursion. In terms of correctness, we find that students who choose iteration perform better than those who choose recursion and the combination of both. Additionally, we find concern in the number of students who seemingly do not understand what the question is asking. We end the paper with some comments on helping students choose an appropriate control-flow strategy and a discussion of this type of question on a final exam.",Recursion or Iteration: Does it Matter What Students Choose?,NA:NA:NA:NA:NA,2018
Robert Ball:Linda DuHadway:Spencer Hilton:Brian Rague,"Teaching CS1 can be daunting. The first courses in the CS curriculum help determine which students will ultimately matriculate into the program. There have been various studies on how to improve motivation and reduce attrition by using visual-based environments and assignments. We performed a year-long study in which we addressed two research questions: 1) How is student performance affected by drag-and-drop GUI assignments when compared to traditional text-based assignments? 2) If given the choice, would students select GUI-based or text-based assignments? For the first question, there was no statistical significance, indicating that student performance is not affected by this visual component. For the second question, we discovered more students selected the text-based assignments over the GUI-assignments. Separating the students into groups based on what they chose revealed that the students that selected the GUI-assignments scored on average one letter grade higher, enjoyed the assignments more and spent less time on the assignments. We recorded the reported motivations behind why students chose to do the GUI-based assignments versus the text-based assignments: Overall, the GUI Group's responses trended toward self-improvement (e.g. more like the real world, improve skills, more challenging) while the Text Group's responses trended toward ease (e.g. easier/simpler, save time). Lastly, at the end of each course we asked the students if, given the hypothetical case in which they were not pressed for time, they would create the Java application with or without a GUI? 93% of the students responded that they would create a GUI Java application.",GUI-Based vs. Text-Based Assignments in CS1,NA:NA:NA:NA,2018
Preston Tunnell Wilson:Kathi Fisler:Shriram Krishnamurthi,"We evaluate a notional machine for recursion based on algebraic substitution. To do this, we decompose recursion into a progression of function call patterns, parameter name reuse, and data structure complexity. At each stage, we test students' ability to trace programs using substitution. We evaluate the correctness of their traces along multiple dimensions, finding that students generally do well, and also observe shortcuts and identify misconceptions. For comparison, we also have students trace two problems using a traditional, imperative notional machine. Even though the substitution model is unwieldy to use with compound data, students still perform better with it than with the traditional notional machine.",Evaluating the Tracing of Recursion in the Substitution Notional Machine,NA:NA:NA,2018
Brett Becker,NA,Session details: Paper Session: Undergrad Education: Data Science and Gaming,NA,2018
Austin Cory Bart:Dennis Kafura:Clifford A. Shaffer:Eli Tilevich,"Data science keeps growing in popularity as an introductory computing experience, in which students answer real-world questions by processing data. Armed with carefully prepared pedagogical datasets, computing educators can contextualize assignments and projects in societally meaningful ways, thereby benefiting students' long-term professional careers. However, integrating data science into introductory computing courses requires that the datasets be sufficiently complex, follow appropriate organizational structure, and possess ample documentation. Moreover, the impact of a data science context on students' motivation remains poorly understood. To address these issues, we have created an open-sourced manual for developing pedagogical datasets (freely available at https://think.cs.vt.edu/pragmatics). Structured as a collection of patterns, this manual shares the expertise that we have gained over the last several years, collecting and curating a large collection of real-world datasets, used in a dozen of universities worldwide. We also present new evidence confirming the efficacy of integrating data science in an introductory computing course. As a significant extension of our ongoing work, this study not only validates existing positive assessment, but also provides fine-grained nuance to the potential of data science as a motivational educational element.",Reconciling the Promise and Pragmatics of Enhancing Computing Pedagogy with Data Science,NA:NA:NA:NA,2018
Sarah Dahlby Albright:Titus H. Klinge:Samuel A. Rebelsky,"As part of the development of a new interdisciplinary initiative in data science that draws from statistics, mathematics, computer science, and the social sciences, we have developed a new introductory CS course that emphasizes data science and that we refer to as DataCSCi. Unlike other introductory data science courses, such as Berkeley's Data 8, our course retains the broad array of concepts necessary not only to introduce programming principles related to data science, but also to prepare students for the second course in our standard introductory computer science sequence. In particular, the course includes coverage of recursion (numeric and structural), unit testing, linked data structures, and other concepts we rely upon in subsequent courses in computer science. At the same time, we introduce students to a wide variety of techniques and approaches that support them in their subsequent work in data science, including techniques for wrangling, cleaning, and visualizing data. We achieve this combination of breadth and depth through two core approaches: We focus on a spiral ""use then implement"" approach and we focus on a functional model of programming using Scheme/Racket. While Python and R are the most commonly used languages for data science, we find that Scheme works particularly well to introduce students to concepts both complex, like map-reduce, and simple, like list filtering. In this paper, we report on the design of the curriculum, particularly the capstone project and the ways in which we incorporate the burgeoning subfield of data science for social good.",A Functional Approach to Data Science in CS1,NA:NA:NA,2018
David Frye:Mary Lou Maher:Deborah Seehorn:Sam Morris,"Broadening participation in computing education for K-12 students requires all levels of the education system to collaborate on five critical needs: 1) creating diverse student opportunities and access to CS activities; 2) empowering highly qualified, highly skilled CS teachers; 3) developing relevant and accessible CS courses and curricula; 4) establishing CS policy and leadership at the local and state levels; and 5) engaging communities and industry partners in broadening participation in CS.",CS4NC Summit 2017: Lessons Learned in Developing a Coordinated Statewide CS For All Initiative,NA:NA:NA:NA,2018
Ria Galanos:Michael Ball:John Dougherty:Joe Hummel:David J. Malan,"The pace of technology for use in computing education is staggering. In recent years, the following technologies have completely transformed our teaching: Piazza, GradeScope, YouTube, Google Docs, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part. We love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have ""bubbled to the top"" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the configuration options required to make their technology ""sing"". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any ""gotchas"" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite ""can't live without"" technologies as well.","Technology We Can't Live Without!, revisited",NA:NA:NA:NA:NA,2018
Mihaela Sabin:John Impagliazzo:Hala Alrumaih:Cara Tang:Ming Zhang,"ACM and IEEE have developed a computing curriculum report titled Information Technology Curricular 2017: Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, also known as IT2017 [4]. The development of this report has received content contributions from industry and academia through surveys as well as many international conferences and workshops. Open online publication of the report became available in fall of 2017. In this special session, five members of the IT2017 executive committee will present a digest of the content of the report, describe the proposed IT curricular framework, and facilitate open and vigorous discussion of the report/s guidelines for developing new information technology programs or enhancing existing ones. The novelty of the report is its focus on industry-informed competencies that IT graduates should have to meet the growing demands of a changing technological world in the next decade. The experience should provide a better understanding of IT in a modern age.",IT2017 Report: Implementing A Competency-Based Information Technology Program,NA:NA:NA:NA:NA,2018
Douglas Baldwin,"The SIGCSE Committee on Computing Education in the Liberal Arts seeks to identify distinctive needs of liberal arts computing educators, and to suggest ways of addressing those needs. This session will be the initial presentation of the Committee's findings and recommendations, and a chance for the community to comment on the results prior to our final written report. The Committee found considerable variety among liberal arts computing programs, but enough common features to consider ""liberal arts computing program"" to be a distinct category with needs that arise from its shared features. The liberal arts computing community expressed a very strong desire for a permanent organization to support its members and represent its interests to the rest of the world. Conversely, we see evidence that the computing education community as a whole values liberal arts computing perspectives and would benefit from a well-defined source for those perspectives. The Committee's main recommendation is therefore to establish a permanent liberal arts computing organization that can serve both to support computing education in the liberal arts and to represent that community in larger conversations.",Draft Report of the SIGCSE Committee on Computing Education in the Liberal Arts,NA,2018
Dan Garcia:Tiffany Barnes,NA,Session details: Closing Keynote,NA:NA,2018
Ruthe Farmer,"Over the last few years, efforts to reinvigorate K-12 computer science (CS) education have emerged from the inner circles of education and become a global movement. CS is now seen as a competitive advantage in the global economy and a way up the economic ladder for countries of all sizes. Nations including the UK, South Korea, New Zealand, Israel and Estonia have taken the lead in establishing CS as a core subject. Using the US-based Computer Science for All (CSforALL) initiative as a case study, Ruthe Farmer, Chief Evangelist at CSforALL and former Senior Policy Advisor for Tech Inclusion under President Obama, will share lessons learned and challenges faced in the work to bring CS to all US students such as education policy transformation, weathering changes in political leadership, and leveraging the ""long tail"" of the CS stakeholder community to achieve sustainable change through collective impact and local engagement. This talk will offer examples and opportunities for all SIGCSE attendees to contribute to the CSforALL movement and become nodes in the distributed national network of organizations and initiatives, both big and small, that will make CSforAll a reality.",CSforALL: Nodes and Networks for National Impact,NA,2018
Brian Kokensparger:Wade Peyou,"CS instructors are sometimes tasked with modifying CS1 courses to teach introductory programming for the Digital Humanities. Training computer science students in DH programming methods may also have some additional benefits, such as bringing more women into computing, and helping in the recruitment and retention of CS students overall. DH projects may also provide Service-Learning opportunities that will give students experiential learning opportunities not provided in industry. The presenters have developed six assignments in Python that are oriented towards DH topics while still providing CS students solid experiences in core programming concepts. This workshop introduces the participants to five of the assignments and gives them immersive abbreviated experiences in each. The topics include Computing Change over Time (calculating burials in a historic cemetery), Visualization of Change over Time (visualizing the burials in the historic cemetery), Textual Analysis (finding word frequencies and ""stop words"" in public domain texts), Stylometrics (comparing measured features of graphic images), and Social Network Analysis (analyzing extended relationships in historic social circles). A balance of direct coding experience and discussion of gotchas and best practices in classroom management will give workshop participants confidence in offering and managing these assignments in their own classrooms. Participants should bring a laptop/keying-friendly mobile device that has a Python 3.x IDE already installed, and some familiarity with the Python language.",Programming for the Humanities: A Whirlwind Tour of Assignments (Abstract Only),NA:NA,2018
Ariel Ortiz,"Node.js is one of the hottest open source web platforms currently available. It's used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Node.js allows you to use JavaScript to write all kinds of network servers in just a few lines of code, definitely easier than using other platforms based on languages such as C++, C# or Java. If you know how to use JavaScript on the front end (i.e., the browser), it's a breeze to use it on the back end (i.e., the server). This workshop is aimed at CS instructors that wish to teach students how to use and write RESTful web services (a.k.a. web APIs) using Node.js on a cloud platform. The only thing you need is a computer with a modern web browser and a Wi-Fi connection. Participants will use the free service provided by the Cloud9 platform (https://c9.io/) to learn how to write scalable web services using Node.js, the Express web framework, MySQL, and Ajax via jQuery. Web services allows us to build powerful web based applications using data from multiple online sources. And, by using a cloud platform, we have all our tools readily available through a web browser, thus eliminating the hassle related to installing a complete and fully functional web development environment. Participants are expected to have a working knowledge of JavaScript, SQL and HTML. Additional information available at http://node.arielortiz.info/ Laptop required.",Programming Web Services on the Cloud with Node.js: (Abstract Only),NA,2018
Siddharth Kaza:Blair Taylor,"The ACM CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area, the ACM Community College curricular guidelines, CSTransfer2017, places great emphasis on cybersecurity as well. However, introducing security in introductory programming courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, CS2, and AP CS A classes. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include learning objectives focused on cybersecurity based on ACM and CAE guidelines. Laptop recommended.","Introducing Secure Coding in Undergraduate (CS0, CS1, and CS2) and High School (AP Computer Science A) Programming Courses: (Abstract Only)",NA:NA,2018
Christine Alvarado:Neil Spring,"Engaging undergraduates in research has been shown to improve retention, increase students' sense of science identity, and increase the chances that they will continue to graduate school. Yet many undergraduates don't participate in research until very late in their undergraduate program, while most undergraduates don't participate in research at all. On the other hand, many faculty are eager and willing to do research with undergraduates, but are unsure how to mentor and supervise them, particularly early undergraduates who may have very little specific technical knowledge and skills. This workshop will provide participants with concrete skills and techniques for engaging early undergraduates (first and second-year students) in real research projects, and, if desired, for developing or growing a department-wide early undergraduate research program. Participants will engage in hands-on activities where they will learn how to develop appropriately scoped research projects, manage and mentor early undergraduates successfully, and teach core research skills like reading research papers and writing research proposals. The workshop will also cover how to mitigate specific challenges faced by students from groups underrepresented in computer science. The materials presented in this workshop are based on the successful NSF-funded Early Research Scholars Program at UC San Diego (ersp.ucsd.edu), which is in its fourth year, and engages 40 second-year students per year--the majority of whom are women and/or students from underrepresented racial or ethnic groups--in academic-year research apprenticeships.",Successfully Engaging Early Undergraduates in CS Research: (Abstract Only),NA:NA,2018
Charles Wallace,"This workshop presents a novel approach to teaching the mathematical foundations of computing commonly known as Discrete Structures. Following the common model of the programming lab, we provide interactive learning experiences in relational algebra, predicate logic, and graph theory that are both human- and computer-mediated. Students use the Alloy language and analyzer to express constraints in formal mathematical notation and search for models that satisfy the constraints. Alloy is an industrial-strength tool, but with careful scaffolding even students in introductory discrete structures can benefit from highly interactive and visual guided explorations mediated through Alloy code. We design exercises carefully to take students from observers of Alloy program behavior to tweakers of established code and later to builders of their own code. We find that the feedback provided by the Alloy Analyzer eliminates common misconceptions among students. Compared to a traditional approach where students simply submit written answers to homework problems, students working on Alloy problems get immediate critique of the well-formedness and satisfiability of their responses. The interactive nature of Alloy allows them to explore, discover new concepts, and challenge their assumptions with unexpected corner cases. After an introduction to Alloy, teams of workshop participants will engage in learning activities in discrete structures, using the Alloy tool for exploration and application of concepts. Teams will reflect on their experiences and comment on the applicability of this socio-technical learning approach in their own teaching contexts. A laptop is recommended for participation in the workshop.",Learning Discrete Structures Interactively With Alloy: (Abstract Only),NA,2018
Jeffrey C. Carver:Sarah Heckman:Mark Sherriff,"One of the most important, and difficult, aspects of starting an education research project is identifying an interesting, answerable, repeatable, measurable, and appropriately scoped research question. The lack of a valid research question reduces the potential impact of the work and could result in wasted effort. The goal of this workshop is to help educational researchers get off on the right foot by defining such a research question. This workshop is part of the larger Designing Empirical Education Research Studies (DEERS) project, which consists of an ongoing series of workshops in which researcher cohorts work with experienced empirical researchers to design, implement, evaluate, and publish empirical work in computer science education. In addition to instruction on the various aspects of good research questions, DEERS alumni will join us to mentor attendees in development of their own research questions in small group breakout sessions. At the end of the workshop, attendees will leave with a valid research question that can then be the start for designing a research study. Attendees will also receive information on how to apply to attend the full summer workshop, where they can fully flesh out the empirical study design, and join a DEERS research cohort. More information about DEERS can be found at http://empiricalcsed.org.",Designing Empirical Education Research Studies (DEERS): Creating an Answerable Research Question (Abstract Only),NA:NA:NA,2018
Remi Sharrock:Baptiste Gaultier:Petra Taylor:Michael Goudzwaard:Mathias Hiron:Ella Hamonic,"Any CS educator has to explain sooner or later a portion of code or a structured text to learners. The Codecast tool http://www.codecast.info has been specially designed by CS educators and developed initially for MOOCs to replace non-interactive screencasts. This workshop is a hands-on lab to Codecast: an open-source innovative tool to create in-browser interactive coding tutorials. Codecast supports syntax highlighting for over 110 languages and as of 2017 can compile/interpret and execute a subset of the C and Arduino languages. In this workshop, participants will explore how, using our Codecast tool, a CS educator can explain the creation of a computer program while their audio as well as their interactions with the code editor and interpreter are being recorded for interactive playback. Workshop participants will furthermore experience how different aspects of the coding process like testing, running, debugging and optimizing can be illustrated with the help of several data, memory and algorithm visualization modules. Participants will create recordings and experience (like learners) how they can be played back interactively by taking control over and modify the coding process at any time. Codecast enables the learner to interact directly with the code and experiment with different ideas while listening to the instructor's explanation. The learner can make changes to the code, test it with different inputs, run the code step-by-step to better understand its behavior and visualize other parts of the algorithm or the data. Workshop participants will also integrate their creations in their online curricula.",Coding Tutorials for any Programming Language or Interactive Tutorials for C and Arduino: (Abstract Only),NA:NA:NA:NA:NA:NA,2018
Shimon Schocken,"We present a full semester course in which students build a complete computer system - hardware and software - from the ground up. Also known as ""Nand to Tetris"", the course is presently taught at 100+ universities, and is listed in Coursera's top-rated courses. The course synthesizes many abstractions, algorithms, and data structures learned in CS courses, and makes them concrete by building a complete computer system from first principles. The methodology is based on guiding students through a set of 12 homework assignments that gradually construct and unit-test a simple hardware platform and a modern software hierarchy, yielding a surprisingly powerful computer system. We'll start the workshop by demonstrating some interactive computer games running on this platform. The hardware projects are done in a simple hardware description language and a hardware simulator supplied by us. The software projects (assembler, VM, compiler and OS) can be done in any language, using API's and test programs supplied by us. The result is a general-purpose computer system, simulated on the student's PC. The course is completely self-contained, requiring only programming as a pre-requisite. Also, it is highly modular, and can be viewed as a set of 12 exciting, stand-along homework assignments. The course and the workshop assume no specific knowledge of, or bent for, computer organization/architecture, and are aimed at any instructor who wishes to strengthen his or her courses with engaging programming projects and with an integrated and hands-on understanding of how modern computer systems work, and how they are built.",Nand to Tetris: Building a Modern Computer System from First Principles (Abstract Only),NA,2018
Stan Kurkovsky:Stephanie Ludi,"LEGO is a construction toy familiar to many students. Creating software, regardless of scale, is often similar to building with tangible objects, such as houses or bridges--an analogy that is often used in the classroom. In this workshop, we will show how to use LEGO bricks as a surrogate representing the lines of code, software objects, or other artifacts in the process of constructing software systems. LEGO-based analogies and case studies enacted as hands-on exercises for student teams help develop a better understanding of the underlying concepts, while keeping students deeply engaged in the course material. This workshop is intended for faculty teaching undergraduate and graduate courses focusing on software development, software engineering, and related concepts. This workshop will also benefit other educators looking for ways to supplement their courses with engaging and playful hands-on activities aimed to strengthen the teamwork, oral communication, problem solving, and design skills of students. We will practice several hands-on LEGO-based activities during the workshop. Specific topics of these activities will include change management and object-oriented interfaces, as well as activities specific to the phases of software development. Workshop participants will learn about other LEGO-based activities that focus on a broad range of topics including requirements engineering, architectural design, and software dependability. A laptop is not required for this workshop. This work is supported in part by the National Science Foundation Awards 1611905, 1709244 and a 2015 ACM SIGCSE Special Project grant. For more information visit http://www.cs.ccsu.edu/~stan/sigcse2018/",LEGO-based Active Learning Exercises for Teaching Software Development: (Abstract Only),NA:NA,2018
Karen Anewalt:Jennifer Polack,"Active learning techniques are widely reported to enhance student learning and increase student engagement. They provide a powerful tool to reinforce course concepts and allow students with diverse backgrounds and learning styles to master essential concepts efficiently. In addition, many students and faculty find hands-on activities to be fun and memorable. Workshop attendees will participate in five hands-on activities covering concepts that are commonly taught in introductory programming courses including variable declaration, object instantiation, parameter passing, memory management, and the software development process. Workshop participants will be challenged to create additional activities to be included in an online repository. Instructors of introductory programming courses at the undergraduate and K-12 level who are interested in creating memorable learning experiences using free and low-cost props will find this participatory workshop to be relevant to their teaching. Come ready to play!",Playing to Learn: Using Hands-on Activities to Boost Learning in Computer Science (Abstract Only),NA:NA,2018
Ali Erkan:John Barr,NA,Geographic Information Systems (GIS): Opportunities of Spatial Data Processing for Computer Science Education (Abstract Only),NA:NA,2018
Richard Brown:Joel Adams:Suzanne Matthews:Elizabeth Shoop,"CS2013 brings parallel and distributed computing (PDC) into the CS curricular mainstream. The Message Passing Interface (MPI) is a platform independent, industry-standard library for parallel and distributed computing. The MPI standard includes support for C, C++, and Fortran; third parties have created implementations for Python and Java. This hands-on workshop introduces MPI basics and applications in C/C++ using Raspberry Pi single-board computers, as an inexpensive and engaging hardware platform for studying PDC. The workshop includes: (i) personal experience with the Raspberry Pi (units provided) accessed via participant laptops (Windows, Mac, or Linux); (ii) assembly of Beowulf clusters of Raspberry Pis quickly in the classroom; (iii) self-paced hands-on experimentation with the working MPI programs; and (iv) a discussion of how such clusters can be used to engage students in and out of the classroom. Participants will experience how to teach distributed computing essentials with MPI by means of reusable, effective ""parallel programming patterns,"" including single program multiple data (SPMD) execution, send-receive message passing, the master-worker, parallel loop, and other common patterns. Participants will then explore more in-depth ""exemplar"" applications, such as drug design and epidemiology. All materials including the Raspberry Pi software system setup from this workshop will be freely available from CSinParallel.org. No prior experience with MPI, PDC, or the Raspberry Pi is required. Windows, Mac, or Linux laptop required.",Teaching Parallel and Distributed Computing with MPI on Raspberry Pi Clusters: (Abstract Only),NA:NA:NA:NA,2018
Denise Case:Douglas Hawley,"This workshop will provide participants with several small, fun classroom activities culminating in a useful web-based application that allows individuals to fully customize the page resulting from opening a new tab in Google Chrome. Attendees will participate in, and receive Canvas lessons introducing popular web-based techniques including HTML, JSON, Cascading Style Sheets, JavaScript and Google Chrome extension creation and distribution. The workshop proceeds in six short lessons in which we will: (1) download and install all software required, (2) introduce basic concepts in HTML, (3) create and link cascading style sheets, (4) construct a JavaScript file implementing some basic, and fun logic constructs into our web page, (5) create a JSON manifest file that allows our application to run as a Google Chrome extension, and (6) make our extension available to the public in the chrome web store. With these lessons, participants will be able to create a universal ""New Tab"" page for their school with Google Chrome. This page can be re-customized and re-distributed by anyone taking these six lessons. Online lessons will be provided. A laptop is recommended.",Chrome Home: Six Fun Activities Introducing Basic Web Programming Techniques (Abstract Only),NA:NA,2018
Sami Khuri,"The workshop is intended for CS educators who would like to get an overview of some of the major techniques used in bioinformatics and a hands-on experience with some of its most popular algorithms. Attendees will be exposed to topics, examples, and problems that can be added to their repertoire of projects for CS1/CS2, data structures and algorithms, and other CS courses, including bioinformatics. No prior knowledge of biology is needed. Whether in an elective bioinformatics course, or in introductory or data structures and algorithm classes, the attendees will be able to incorporate the topics presented in the workshop. We consider interdisciplinary problems drawn from the field of biology. After formulating them as computational problems, we use traditional algorithmic techniques to solve them. The workshop may also be appropriate for high school teachers who want to use bioinformatics as a domain for their programming assignments. All material, including lecture notes, sample programs, hands-on exercises, and links to visualization packages, will be available to the attendees, before the workshop, through our university/s web page. The hands-on exercises using online publicly available tools will enhance the understanding of the common bioinformatics tasks.",Introducing Bioinformatics Algorithms in Computer Science Courses: (Abstract Only),NA,2018
Ursula Wolz:Gwen Charles:Laura Feire:Elanor Nicolson,"Broadening participation in computing invites a diverse constituency into a traditional computing culture. This workshop provides a novel perspective: skills that are often labeled 'women's work' are the foundational principles of computer science developed from textile crafts. The 'Code Crafters' curriculum, which expands Andrea Mayer's Snap-based TurtleStitch embroidery programming project, is being successfully taught in 3 ways: as a full semester undergraduate course, as a weeklong summer workshop for middle and high school students, and as a half day event. The SIGCSE workshop will introduce participants to potential adaptations of this curriculum, report on its use as both a CS 0, and CS 1 course, and give participants hands-on experience in designing and rendering a machine embroidery pattern in TurtleStitch and Processing Stitch (Java). Key concepts from the full semester curriculum will be demonstrated: (1) crocheting is a vehicle for learning about primitive operations instruction codes for process control, and reading and writing patterns (algorithms); (2) programing machine embroidery provides exposure to agile design; (3) contrasting embroidery with quilting provides experience in abstraction and reuse; (4) weaving and tapestry provide concrete illustrations of manipulating two dimensional data structures; (5) studying embroidery machine file formats demonstrates how language translation takes place; (6) sharing a limited resource (a $500 programmable, single thread embroidery machine) provides concrete experience in scheduling, and product testing; (7) collaborative crochet and quilted projects provide experience in team dynamics. Participants should bring a laptop, and will be invited to join an online community of mutual support.",Code Crafters Curriculum: A Textile Crafts Approach To Computer Science (Abstract Only),NA:NA:NA:NA,2018
Douglas Blank:Lisa Meeden:Jim Marshall,"This workshop is a hands-on exploration of Deep Learning techniques and topics for use in the classrooms of Computer Science and related fields. Deep Learning denotes the latest in a series of advances in neural network training algorithms and hardware that allow Artificial Neural Networks (ANNs) to learn quickly and effectively, even with many, stacked layers. These types of networks can be applied to almost any learning problem, such as driving a car, describing images, controlling a robot, or understanding language. This workshop will start with the mathematical and algorithmic foundations of Deep Learning, and introduce an accessible Python-based library, called ""conx,"" which is based on the Keras library and was developed by the workshop instructors. The workshop will demonstrate ideas through animation and visualizations, examine the path to advanced topics, and explore ideas for incorporating Deep Learning topics into the classroom. The workshop is designed to allow participants to gain a foothold with these complex topics, and to help them develop their own materials for teaching. Workshop materials will be made freely available before the workshop as Jupyter notebooks.",Deep Learning in the Classroom: (Abstract Only),NA:NA:NA,2018
Aaron Bloomfield:Blythe Samuels:Andrew Norton,"This workshop will show participants how to host a successful programming competition aimed at high school students, and will also be broadly applicable to collegiate level competitions. These contests encourage high school students to major in computer science and can have a positive effect on the recruitment for the host institution. In addition, our anecdotal evidence has shown a high participation rate from under-represented groups at such contests. Running a successful contest, however, is a challenging endeavor. With potentially hundreds of people attending -- both students and coaches -- there are many logistical issues to address. Beyond that, generating an appropriate problem set and ensuring the contest submission system that runs smoothly are critical to a successful event. A poorly run contest can do more harm than good, as the participants will leave with a negative view of the contest, the institution, and possibly even the field. The workshop will cover problem generation and submission system usage, as well as provide discussions and handouts covering all the logistical aspects for hosting such a high school contest. Documentation covering all aspects of the contest will be provided to participants. The workshop organizers include a faculty advisor, a high school coach, and a former student who both participated in -- and later ran -- the contest. At least one organizer has been in every one of the roles in this type of contest. We have successfully run seven such contests, with the last four having 200 high school contestants.",Organizing a High School Programming Contest: (Abstract Only),NA:NA:NA,2018
Helen H. Hu:Clifton Kussmaul:Chris Mayfield,"his workshop introduces Process-Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-4 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach, and has been shown to significantly improve student performance. Workshop participants will work through POGIL activities as students, and work through POGIL meta-activities that are designed to help teachers learn core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses and concepts. For more information (including activities for CS1, CS2, and other courses), see http://IntroCSpogil.org and http://pogil.org. Laptops optional.",Guiding Students to Discover CS Concepts & Develop Process Skills Using POGIL: (Abstract Only),NA:NA:NA,2018
Colleen M. Lewis:Eleanor Rackoff:Emily Cao:Saber Khan:Cynthia Lee:Saturnino Garcia,"Meaningful and engaging assignments are important to retention in CS. An interesting problem context may be able to make routine practice of programming basics more interesting for students. Problem contexts also provide the opportunity to bring in content related to social justice topics, which are important for providing students a well-rounded education. With funding from the NSF (#1339404), we have developed eight homework assignments that integrate social justice topics as the problem context for CS1 assignments. Workshop attendees will work in small groups to revise or adapt existing assignments, translate existing assignments into the language of their course, or develop a new assignment. Attendees will be encouraged to submit their work to Nifty Assignments for 2019 and NCWIT's peer-reviewed curriculum repository, Engage CS Edu (engage-csedu.org). All assignments will be posted on CSTeachingTips.org to be shared with the community.",Integrating Social Justice Topics into CS1: (Abstract Only),NA:NA:NA:NA:NA:NA,2018
J.D. Chase:Prem Uppuluri,"Challenge-Based Learning (CBL) is an active learning approach using just-in-time instruction where students are introduced to instructional material in the context of solving a particular challenge. The CBL approach has proven very effective as an introductory instructional strategy, especially when working with K-12 outreach. For example, in Cybersecurity, many universities are reaching out to high school and community college students using the Capture the Flag contests with learning materials built in for each challenge. In this workshop, we will explore building just such a virtual, challenge-based, contest environment. Workshhop participants will walk through the process of setting up the Mellivora contest environment, be given the opportunity to create challenges on their own, and be provided with a tutorial on the administrative tools available. Similarly, participants will be provided an introduction to the installation and management of a virtual environment that will provide virtual machines of various platforms (Windows, Linux, etc.) for the challenges. Participants will also be provided a brief overview of the creation of short, high-impact instructional materials to accompany challenges. Finally, participants will compete in a short Capture the Flag contest to demonstrate the efficacy of the CBL approach.",Building a Virtual Challenge-Based Learning Environment: (Abstract Only),NA:NA,2018
Meghan Allen:Steven A. Wolfman:Anasazi Valair,"In this workshop, we as a group use Appreciative Inquiry (AI) techniques to explore and develop our strengths as CS educators. As a participant, you will gain appreciation for your strengths as an educator, with concrete plans for building on these strengths. You will also learn about AI as a qualitative research methodology that is complementary to more common CS research methodologies, and that you can apply to evaluate and improve your own educational practice. Appreciative Inquiry drives change by building on what's already working well in an organization. Similarly to other qualitative methods, AI generates rich, deep feedback that is grounded in stakeholders' experiences, but in contrast to other methods its focus on strengths and positives surfaces unique, strength-based findings and make it an energizing and fulfilling approach to professional development and the scholarship of teaching and learning. AI is commonly used in education and organizational research and is an effective and community-building way to drive organizational or program change and positively impact participants' morale. We will share our materials and key tips to enable you to apply Appreciative Inquiry in your own work. You may wish to run Appreciative Inquiry workshops with students as an evaluation method, or run them with colleagues for professional development or for promoting positive change in your unit or program, or take smaller steps integrating the appreciative mindset into your teaching or other professional work.",Playing to Your Strengths: Appreciative Inquiry as a Scholarly Tool for Your Computing Education Practice and Professional Development (Abstract Only),NA:NA:NA,2018
Leigh Ann DeLyser:Jumee Song,"The SCRIPT, the School CSforALL Resource & Implementation Planning Tool, is a new tool created by the CSforALL Consortium that will serve as a framework and platform to guide CSforALL advocates and district staff in the creation of CSforALL implementation plans that adhere to CSforALL values and reflect the unique needs and goals of any school district. The SCRIPT engages school districts in self reflection, review of examples, and goal setting for 6 areas designed from the literature supporting curriculum adoption and organizational change. These areas include: (1) Leadership, (2) Technology Infrastructure, (3) Teacher Capacity, (4) Curriculum and Materials Selection and Refinement, (5) Partners, and (6) Community. The goal of this workshop is to train any CSforALL advocate to be able to lead a school district in an implementation planning session to create a K-12 district wide computer science education plan, by following the SCRIPT. Based on an extensive needs assessment conducted by the CSforALL Consortium (publication under review), districts require professional development and resources to (1) understand the goals of the CSforALL movement and how it can benefit their students, (2) identify ways to create meaningful K-12 pathways for students, and (3) navigate available resources in order to identify appropriate partners and resources to support the implementation of CS education. The SCRIPT was created to address these needs in a replicable way that could be used at scale by any CSforALL advocate.",CSforALL School District Implementation Facilitators Workshop: Just Follow the SCRIPT! (Abstract Only),NA:NA,2018
Lori Pollock:Terry Harvey:James Atlas:Chrystalla Mouza,"This workshop's goal is to help faculty who want to establish a course (or alternate vehicle) for mentoring undergraduates with some CS background to participate in K-12 teaching CS in local schools with engaging pedagogy. The workshop leverages the experiences and lessons learned from ten semesters of the organizers leading a course that meets once a week on campus for mentoring to support the undergraduates' field experience in local schools and libraries. The workshop will dive deep into logistics including how to establish and maintain strong teacher partnerships, establishing student-teacher matches and weekly field experience schedules, weekly in-class activities and assignments to support the field experience, weekly student reflective journal prompts, and surveys for formative evaluation. Participants will actively reflect on their own contexts with potential opportunities and challenges, and organizers will facilitate small group discussions of how to address the challenges, different models for different contexts, and how to get started. Participants should leave with a plan for next steps toward offering a mentored undergraduate field experience in teaching computer science and access to a community of faculty who are working to help to broaden participation in computer science in K-12 while providing opportunities for undergraduates to hone their communication and leadership skills, increase their self confidence, and participate in giving back to the community using their technical skills. The activities do not require a laptop, only pens and handouts provided by the organizers.",Customizing a Field Experience for CS Undergrads in Teaching Computer Science for Your School Context: (Abstract Only),NA:NA:NA:NA,2018
Leland Beck:Alexander Chizhik:Patty Kraft:Alan Riggins,"Many approaches to active learning rely on a set of tasks that help students engage cognitively with the material. Studies have shown that this approach can significantly improve student learning. However, for best results it is not enough simply to have students solve problems: the activities must be carefully designed to produce the desired learning outcomes. In many cases, it is helpful to define a sequence of activities that lead students though a developmental progression toward a desired learning goal. This kind of approach is sometimes described in educational research as a ""learning trajectory."" In this workshop, we will help you get started on the path to developing your own active learning classroom activities. We'll begin by looking at examples that have been used successfully in a variety of different courses, and discussing some of the principles involved. Participants will be encouraged to bring examples of topics they have found challenging to teach. We'll work together with you to help develop possible approaches and get started on the design of active learning activities to address those topics.",Designing Classroom Activities to Improve Student Engagement and Learning: (Abstract Only),NA:NA:NA:NA,2018
Ambareen Siraj:Sheikh Ghafoor,"Since security education is not required in CS curriculum, many CS undergraduates can successfully achieve their degree without being exposed to any security courses during their course of study and enter the digital workforce with no knowledge or basic understanding of information security -- one of the essential skill sets for the 21st century. To address this concern, Information Assurance and Security (IAS) has been designated as a new knowledge area in the new ACM/IEEE-CS Curricula 2013. This workshop empowers CS faculty to access and use freely available resources to integrate security in to their CS curriculum will help institutions to meet ACM/IEEE-CS guideline. With support from NSF (Award# DUE-1140864, #1438861), at the CyberSecurity Education, Research and Outreach Center at Tennessee Tech, we have developed a set of readily available resources called SecKnitKit (Security Knitting Kit, www.secknitkit.org), which offers a suite of instructional material for non-security faculty (faculty whose primary teaching/research focus is not security) to integrate security in upper division CS courses such as operating systems, software engineering, computer networks and databases. Resources include lecture slides with notes, assessment questions and homework/classroom assignments with all details and technical support. The participants will receive access to all SecKnitKit materials (instructional and assessment) of interest and demonstrated use of the active learning exercises. There are six participant slots for each of the four courses mentioned above and participants will have an option to select their courses of choice at registration time.",CReST-Security Knitting Kit: Readily Available Teaching Resources to Integrate Security Topics into Traditional CS Courses (Abstract Only),NA:NA,2018
Joe Gibbs Politz:Kathi Fisler:Shriram Krishnamurthi:Benjamin S. Lerner,"Data Science is at the center of many current curricular efforts. It is emerging as an integrated field that has far-reaching and important applications, from news media to policy making to business. While these applications can provide compelling uses of computer science techniques, an introduction to one is not an introduction to the other. How do topics like data structures and program design emerge from data science applications? How do we transition from data science applications to computer science topics? How can data science be integrated into other contexts with little overhead? This workshop presents assignments and curricula designed to answer these questions, and tools that support them.",From Spreadsheets to Programs: Data Science and CS1 in Pyret (Abstract Only),NA:NA:NA:NA,2018
Kevin Robinson:Justin Reich,"Equity is a core component of many computer science teacher preparation programs. One promising approach is addressing unconscious bias in teachers related to the race, ethnicity or gender of students. These biases may impact teacher expectations and interactions with students in a variety of classroom scenarios. Early literature on interventions targeting unconscious bias suggests that asking individuals to suppress biases is counterproductive. Our work uses the affordances of interactive online practice spaces to instead focus on specific teaching decisions that may be impacted by unconscious bias. We developed practice spaces and embedded them within CS teacher preparation programs. Our early findings indicate that practice spaces produce rich learning opportunities and analysis yields insight into what biases or beliefs may be interfering with teachers enacting principles of equity like disrupting preparatory privilege. In this workshop, we'll use online practice spaces to examine how we approach different classroom situations related to equity, and practice how we respond. We'll try two different variations on these practice spaces, and create space for participants to try a variety of other iterations on their own. We'll close by inviting folks to share their own stories of important classroom moments that problematized how they approached equitable teaching, and prototype creating practice spaces from those experiences. Participants will leave with links to practice spaces, and related curriculum materials they can use in CS teacher preparation courses, in teacher-led PLC groups, online CS teacher groups, or with local CSTA chapters.",Playing with and Creating Practice Spaces for Equitable Teaching: (Abstract Only),NA:NA,2018
Alexandra Milliken:Michael Ball:Lauren Mock,"The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 400 high school teachers. BJC covers the big ideas and computational thinking practices required in the AP CSP curriculum framework, using an easy-to-learn blocks-based programming language called Snap! (based on Scratch). During this workshop, we will provide an overview of the BJC curriculum, share our experiences as instructors of the course at the university and high school levels, and share details of potential summer professional development opportunities. Attendees should be prepared to program a BJC project in the Snap! environment. Please bring laptops with the Chrome browser installed.",AP CS Principles and The Beauty and Joy of Computing Curriculum: (Abstract Only),NA:NA:NA,2018
Bill Siever:Michael P. Rogers,"Are you interested in a fun way to introduce a variety of students to significant contemporary CS topics, like wireless networking, robotics, and the Internet of Things (IoT)? Do you want to do so using a platform that is cheap, has a low barrier to entry, but where learning can translate to the real world and where advanced students can pursue advanced topics? If so, you need a micro:bit! The micro:bit is a platform developed by the British Broadcasting Corporation (BBC) to encourage children to pursue computing and electronics. Although designed for children, its capabilities are sufficient for a variety of postsecondary applications. It includes a 32-bit processor, lights, buttons, an accelerometer, digital I/O, and wireless communication, making it ideal for wearables and robotics. It also leverages some of the latest trends in introductory computing, like support for block-based languages (àla Scratch), while also being sophisticated enough for complex topics in Operating Systems and Networking. This workshop will introduce the micro:bit and focus on engaging, lightweight coverage of complex topics, including robotics, mesh networks, and IoT. Participants will work through classroom-ready exercises suitable for K-12 workshops, student recruiting events, CS1/2, or as bootstrap topics in IoT courses. The workshop will include some subjects not commonly covered in existing micro:bit material, like integration with mobile apps and IoT applications. Participants will be provided with hardware but will need a laptop with internet access and a mobile device (any OSes).","Micro:bit Magic: Engaging K-12, CS1/2, and Non-majors with IoT & Embedded (Abstract Only)",NA:NA,2018
Stephanie E. August:Mark Pauley:S. Megan Che:Eileen T. Kraemer:Murali Sitaraman,"You develop the prototype for a new learning strategy, and want to test it in class or across institutions. You identify an NSF program that supports proposals for the idea, and then what? What goes through the minds of reviewers once a proposal is submitted? What prompts one proposal to be recommended for funding while another is declined? Close examination of the panel review process can inform proposal writing and ensure that reviewers will understand a PI's idea, identify its merit, and value a PI's vision of how the work will broaden participation in STEM education. This workshop steps through the NSF proposal review process from submission of proposal to award or decline, touching on elements of a good review, NSF intellectual merit and broader impact criteria, elements of a good proposal, assessment and evaluation, and volunteering to review proposals. Participants gain insight into writing a good review and improving one's own proposal writing. The interactive workshop leads participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and providing ""expert"" opinion on these issues. Examples include funded and non-funded projects and a Top Ten List of Do's and Don'ts. For further information see: https://people.cs.clemson.edu/~etkraem/UPCSEd/",Understanding the Essence of Successful Computing Education Projects through Analyzing NSF Proposals: (Abstract Only),NA:NA:NA:NA:NA,2018
David Hayes,"With the increasing breadth and sophistication of open-source languages, libraries, frameworks, standards, tools and resources, Mobile Web App development is possible for a broad audience. The barriers to participation in app development have been reduced; learners can quickly begin creating simple apps and can use online resources to expand their knowledge and skill. In this workshop, participants will learn how to build simple (and not-so-simple) data-driven, mobile apps using the Mobile Web App model, and they'll learn how to scaffold projects to focus students' efforts on specific lesson, unit or assignment goals. The workshop is intended for post-secondary, secondary and even middle school educators who want to increase student engagement by including app projects in their courses. The material may also be of interest to those who provide CS education in other, less-structured environments. Participants will create several apps and will leave with sample projects. All languages, libraries, frameworks, standards, tools and resources are open-source and run in the browser. Because participants will be developing apps during the workshop, they will need a laptop or will need to work with a colleague.",Mobile Web App Development for All!: (Abstract Only),NA,2018
Russell McMahon,"Improvisation is viewed by many people as jazz musicians jamming in the early morning hours or comedians ad-libbing to create a funny skit, but it is so much more. Improv is about listening and moving a conversation (or music) forward in a positive and supportive manner. Above all, it is about supporting all members of the team. These precepts can be found in the Agile, UX (user experience), and the AI worlds and companies are using improv methods as a way of creating more innovative and collaborative teams and which are so necessary for success in today's work environment. Dick Costolo, the former CEO of Twitter and a computer scientist, is an accomplished improviser and credits these techniques in advancing his professional life. The skills learned through using improv are as important as the technical skills for all computer scientists and they can help one to become better a learner, listener, and communicator. This workshop will cover some of the basics of improvisation and its rules as well as ideas on how it can be used in a classroom or a place of employment. Come and learn about improv and why organizations such as IDEO, Marriott, and NASA have embraced improv to create more than just teams, but ensembles of highly functioning creative and caring individuals. This workshop is interactive and attendees will have fun learning and practicing the skills within a safe and accepting environment.",Improv for Computer Scientists: (Abstract Only),NA,2018
Leen-Kiat Soh:Elizabeth Ingraham:Duane F. Shell,"In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include ""how-to"" presentations, panel-based Q&A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!",Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only),NA:NA:NA,2018
Shannon Duvall:Dugald Ralph Hutchings:Robert Duvall,"While the ""flipped classroom"" style has some educational benefits, there are also known benefits to other pedagogical approaches such as lectures, educational games, class discussions, and case studies. In addition to a wide variety of pedagogical approaches, there are a wide variety of computer science learning materials, including videos, interactive tutorials, e-textbooks and traditional textbooks. The choices of approach and materials present a series of trade-offs and may favor some groups of students over others. In this workshop, we present a methodology called Scrumage, (SCRUM for AGile Education) which allows each student in a course to adopt the pedagogical approach and materials that best fit each student's individual learning needs. Scrumage adapts concepts from the Scrum project management technique to manage student teams where the project is learning. Each team learns with the style they prefer, so that multiple pedagogical styles and materials are in use in the course simultaneously. Participants in this workshop will be introduced to the methodology, benefits, and tools of this approach and will work through guided steps to implementing it in the course of their choice.","Beyond the Flipped Classroom: Implementing Multiple, Simultaneous Pedagogical Styles Using Scrumage (Abstract Only)",NA:NA:NA,2018
Richard E. Ladner:Brianna Blaser:Daniela Marghitu,"Approximately 10% of computer science and engineering majors have a disability. Students with disabilities are more likely to drop out of the major than those without disabilities. At the K-12 level, many tools used to teach computing have limited accessibility to students with disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing and AccessCSforAll, will be shared.",Access to Computing Education for Students with Disabilities: (Abstract Only),NA:NA:NA,2018
Henry M. Walker:Mehran Sahami:Christine Alvarado,"For many years, computing faculty have devoted substantial time and energy to the retention of diverse populations. But how are we doing really? The ACM Retention Committee has identified at least 5 populations of interest in tracking student retention: * Students who start college expecting to major in computing. * Students who enter college with some interest in computing, but also with other interests. * Students who enter college with interests outside computing, but who take computing early as part of a broad education. * Students who enter college with little or no interest in computing, but need a computing course to satisfy a general education requirement or a prerequisite in another discipline. * Students who transfer into a four-year university from a two-year college, partway into a computer science program. In practice, each group has different characteristics, and retention rates may vary dramatically. On some campuses, gathering data for the first group may be manageable--particularly if students declare majors as they enter college. Data collection and tracking for others is difficult, since these populations may not be known in early years. This BoF will identify approaches for tracking students and for exploring retention rates. Further, this BoF will encourage sharing and brainstorming for further mechanisms to help data collection. As we better identify retention rates among various populations, the ACM Retention Committee hopes we can better understand obstacles and opportunities related to retention. Session Agenda: Context/Introduction, Data most relevant locally, What data are currently tracked, Thoughts about a common data gathering instrument",Challenges and Approaches for Data Collection to Understand Student Retention: (Abstract Only),NA:NA:NA,2018
Michael S. Kirkpatrick:Dee Weikle,"The ACM Code of Ethics provides a framework for ethical conduct within the computing industry. The Code describes ethical conduct for individuals and organizations, as well as the basic moral principles underlying these prescriptions. Principles defined in the Code include: Avoid harm; be fair and take action not to discriminate; respect privacy; ensure the public good is the central concern during all professional computing work. While these principles are intuitive in many situations, students, faculty, and industry professionals often struggle to apply these concepts to computing. It is not obvious how to apply the concepts of harm, privacy, or the public good in courses on Operating Systems or Programming Languages, so discussion of the Code is often restricted to specialized Ethical Issues in Computing or Software Engineering courses. We believe this approach misses an educational opportunity to build on moral sensitivity--the ability to detect a potential moral problem within a particular context--as a foundation. Integrating the Code throughout the CS curriculum provides an opportunity to increase students' exposure to subtle moral dilemmas and improve their moral sensitivity. In this birds-of-a-feather (BoF) session, we will discuss: Which topics can be used to introduce ethical discussions into core Computer Science courses? How do you write and facilitate case study discussions? What other active learning techniques can be used to examine ethical issues? What concerns would faculty have in introducing ethical discussions into technical courses? What portions of the Code might be difficult for students and future practitioners to uphold?",Active Learning Strategies for Integrating the ACM Code of Ethics into CS Courses: (Abstract Only),NA:NA,2018
Rajendra K. Raj:Allen Parrish,"Due to the ongoing demand for cybersecurity professionals, universities have begun to step up to the challenge of providing degrees in cybersecurity or related disciplines. However, growth in academic programs has been unfocused, in part because there is no standard definition of what a cybersecurity undergraduate program should contain and no cohesive community of practice with which those programs are aligned. This session is intended to establish dialog intended to lead to a community of practice for undergraduate cybersecurity education. The presenters will briefly review prior efforts in defining cybersecurity at the collegiate level, including the Centers for Academic Excellence (CAE), National Initiative for Cybersecurity Education (NICE), Cyber Education Project, CSEC2017 curricular guidelines and ABET cybersecurity accreditation. Session participants will examine current efforts, explore the development of a cybersecurity community of practice, and get clarity about where their own efforts fit into overall computing education.",Bringing Up Cybersecurity Degree Programs: (Abstract Only),NA:NA,2018
Clifford A. Shaffer:Peter Brusilovsky:Kenneth R. Koedinger:Stephen H. Edwards,"CS Education makes heavy use of online educational tools like IDEs, Learning Management Systems, eTextbooks, interactive programming environments, and other smart content. Instructors and students would benefit from greater interoperability between tools. CS Ed researchers increasingly make use of the large collections of data generated by click streams coming from them. However, we all face barriers that slow progress: (1) Educational tools do not integrate well. (2) Information about CS learning process and outcome data generated by one system is not compatible with that from other systems. (3) CS problem solving and learning (e.g., coding solutions) is different from the type of data (discrete answers to questions or verbal responses) that current educational data mining focuses on. This BOF will discuss ways that we might support and better coordinate efforts to build community and capacity among CS Ed researchers, data scientists, and learning scientists toward reducing these barriers. CS Ed infrastructure should support broader re-use of innovative learning content that is instrumented for rich data collection, formats and tools for analysis of learner data, and best practices to make large collections of learner data available to researchers. Achieving these goals requires engaging a large community of researchers to define, develop, and use critical elements of this infrastructure to address specific data-intensive research questions.",CS Education Infrastructure for All: Interoperability for Tools and Data Analytics (Abstract Only),NA:NA:NA:NA,2018
David Reed:Fred Martin:Deborah Seehorn:Chinma Uche,"The Computer Science Teachers Association (CSTA) is an ACM-affiliated member organization of more than 26,000 educators and supporters of K-12 computer science. CSTA supports local communities of educators and partners through more than 70 local chapters, made up of educators, administrators, college faculty, and industry supporters, which meet regularly for networking and professional development. In addition, CSTA provides valuable resources to teachers and CS advocates, such as the newly revised K-12 CS Standards, research reports, a member listserv, a bimonthly newsletter, and recorded sessions from the annual conference. This session will provide a brief overview of CSTA, its chapters, and available resources for teachers. College faculty who are interested in connecting with local K-12 teachers will be encouraged to network and explore mutually beneficial partnerships. An open forum will follow for discussing CSTA's mission, possible initiatives, and benefits to K-12 and college educators. The major goals of this Birds-of-a-Feather session are: To inform K-12 teachers and college faculty of the current initiatives underway at CSTA, as well as possible initiatives that are under development.To allow K-12 teachers and college faculty with common interests to connect and potentially partner in supporting computer science in K-12.To provide a forum for discussing the needs and desires of K-12 educators, which will then inform future CSTA initiatives and college partnerships.To receive feedback from the community on current and possible initiatives.",CSTA: Connecting Colleges and K-12 CS Teachers (Abstract Only),NA:NA:NA:NA,2018
Lillian Cassel:Christo Dichev:Darina Dicheva:Don Goelman:Michael A. Posner,"Participants in this Birds-of-Feather session will share thoughts and experiences in offering an introductory course in this exploding field. It will be the third consecutive year that these facilitators will conduct a SIGCSE session on a first course in Data Science. The interest in the field has increased greatly over the years, and attendees of varying backgrounds, points of view and experience are welcome. Whether the course will serve as an outreach vehicle to students of all majors, including non-technical ones, or as a first course in a formal program of some sort, we will be exchanging points of view regarding both topic coverage and pedagogical approaches. Regarding topics, we'll raise questions on the relative emphases of statistics, programming (should R be the vehicle? how about Python? other languages?), machine learning (which algorithms?), other tools, and appropriate data sets. Participants who have taught such a course will be invited to describe some of their approaches, especially if they've used such active learning methods as flipped classrooms. The facilitators, PI's on an NSF IUSE grant now winding down, bring experience from two institutions and three departments, including one interdisciplinary course. They hope to expand the community begun through the grant and these sessions, hosted at http://computingportal.org/DataScienceCommunity.",Designing an Introductory Course in Data Science: Topics and Pedagogy (Abstract Only),NA:NA:NA:NA:NA,2018
Sarah T. Dunton:Stephanie Rodriguez,"Afterschool and summer learning programs are an essential tool to support and expand K-12 computer science education. When used strategically, they can fill out a pathway of CS opportunities across the grade-span, spark interest, deepen engagement, and connect in- and out-of-school learning. Because African-American and Hispanic youth, and youth from low-income households, participate in afterschool programs in higher numbers (America After 3pm, 2014), and because more schools offer informal CS than offer formal coding classes (Google/Gallup, 2016), these programs provide access to ""preparatory privilege""--the additional exposures that prime well-resourced students' confidence with computing (Margolis, 2008).",Examining the Role of Informal Education in K-12 Computing Pathways & CS Education Reform Efforts: (Abstract Only),NA:NA,2018
Farzana Rahman:Perry Fizzano:Evan M. Peck:Shameem Ahmed:Stu Thompson,"There has been a dramatic increase in computer science undergraduate research activity at colleges and universities in recent years. However, developing a research culture that is explicitly designed to empower undergraduates (student-centered research) requires different models and objectives than those traditionally employed at more research-oriented universities. The goal of this BOF is to explore what effective techniques are employed by other primarily undergraduate institutions to build a culture of research that benefits undergraduate students. Some of the key issues covered in this BOF will be: defining student-centered research and its impact (How does student-centered research differ from traditional research? What secondary effects in the classroom and community might undergraduate research have?), redefining success metrics in student-centered research (How can we capture impact beyond publications and grants? How can we define measures that align with student impact?), exploring issues of accessibility and participation (How might student-centered research change models of student selection? How might it change faculty's scope and focus of research?), and structural mechanisms to empower student-centered research (Given constraints on time and/or resources, how can faculty enable undergraduate research?). Through this BOF, we also plan to build a sustainable community of interested academics leaders (using private Google+ or Facebook group) interested to share and collaborate on future undergraduate research efforts.",How to Build a Student-Centered Research Culture for the Benefit of Undergraduate Students: (Abstract Only),NA:NA:NA:NA:NA,2018
Cynthia Taylor:Jaime Spacco:David Bunde:Joe Hummel:David Hovemeyer,"Peer Instruction (PI) is an active learning technique with over 25 years of research supporting its efficacy. Documented benefits in CS include lower WDF rates, higher exam scores, and improved retention in the CS major. One key difference between PI and traditional lecture is the use of ""clicker questions"" in class to challenge students' conceptual understanding. Students discuss and answer these questions in small groups before the instructor goes over the question with the entire class. This BoF is for both those using PI and those interested in starting. Attendees will meet other PI practitioners, discuss tips and tricks, and exchange materials. We will provide pointers to PI materials for a variety of courses, including CS1 & CS2, Machine Organization, Programming Languages, OS and more.","Peer Instruction: Tips, Techniques and Resources (Abstract Only)",NA:NA:NA:NA:NA,2018
Jennifer Bivens:Ashwin Satyanarayana:Jan Way Chen,"In the last decade, data analytics has been successfully applied in the field of education to predict student performance. There exists an obvious opportunity for this educational data to make a positive impact on computer science instruction. Machine learning models can use historical data containing behavioral and education-related attributes, such as previous course work, grades and time spent in class discussions, to make predictions about academic performance for prospective students. Even with proven predictive success, many questions related to the application of performance prediction remain unanswered, particularly in the context of larger debates about risk identification, grouping, and bias. This BoF will provide a platform for exploring the following questions: (a) How should computer science instructors use prediction data? Could results be used to group students by predicted academic performance levels? Could predictions help in the identification of students with low performance predictions for additional mentoring? (b) Should predictions be shared with students/instructors? (c) If so, how could instructor bias resulting from these predictions be minimized to ensure fair evaluation of students' actual performance? (d) Do computer science instructors attending this BoF currently implement any predictive tools or risk grouping? Would they consider doing either? (e) How much importance would instructors place on the results of performance predictions? To what degree would the accuracy of a model affect adoption?",Pros and Cons of Using Data Analytics for Predicting Academic Performance in Computer Science Courses: (Abstract Only),NA:NA:NA,2018
Catherine Bareiss,"Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Topics include: sharing classes, increasing enrollment, general education, and specialized courses.",Small Department Initiative: (Abstract Only),NA,2018
Chris Gregg:Mark Sherriff,"Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position, providing the possibility of promotion, longer-term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information.",Teaching Track Faculty in Computer Science: (Abstract Only),NA:NA,2018
"Amardeep Kahlon:Cheryl Calhoun:Wendy DuBow:Jill Denner:Louis Ann (""Lou Ann"") Lyon:Deborah Boisvert:Melanie Williamson","Over half of community college (CC) students are non-white, and more than half of all Hispanic and Black undergraduates start at community college. Given that community colleges (CCs) enroll minorities and women in larger numbers than four-year institutions, it is imperative for both, CCs and four-year institutions, to engage in collaborative efforts to broaden the participation of diverse peoples into computing and facilitate unobstructed pathways from the two-year to four-year educations. While CCs are rich in diversity, their students face an inordinate number of obstacles transferring to a bachelor's degree particularly in computer science (CS). The complexities of the CC landscape require that experts from various backgrounds come together to share knowledge and experiences to contribute to a better understanding of the role CCs can play with four-year institutions in broadening the participation efforts in CS and information technology (IT).",The Authentic Inclusion and Role of Community Colleges in National Efforts to Broaden Participation in Computing: (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2018
Briana B. Morrison:Adrienne Decker,"Subgoal labels are function-based instructional explanations that describe the problem-solving steps to the learner, highlighting the solution process. There is strong evidence that the use of subgoal labels within worked examples improves student learning in other STEM fields. Initial research shows that using subgoal labels within computer science improves student learning, but this has only been tested using a single programming concept (indefinite loops) with text-based programming languages. The proposers are currently expanding subgoal labels to the main programming concepts taught in an introductory programming course using an imperative programming language. In this BOF we seek to uncover tacit knowledge that programming instructors have in order to develop instructional materials that bridge the gap between students, who are CS novices, and instructors, who are CS experts, to improve learning for students who are under-prepared for or struggle in CS1. We will be seeking feedback on the selection of programming topics to be covered, the defined subgoals for those topics and the worked examples created for instructional purposes.",Using Subgoals to Improve Student Performance in CS1: (Abstract Only),NA:NA,2018
Michael P. Rogers:Bill Siever,"There is no doubt that Computer Organization (Comp Org) is not as central a topic as it once was. In the ACM's curricular guidelines, the number of hours devoted to Computer Architecture and Organization has fallen from 36 core hours in 2001 and 2008 to 16 tier 2 hours in 2013, and, incredibly, students are not always as enthralled with the subject as their instructor. Therefore, we are compelled to ask? what to do about Comp Org? How might we revamp it to make it more relevant and appealing? Should we concentrate on one ISA? Use CISC, RISC, or both? Do we need to use real, contemporary hardware, or stick with simulators? More radically, can micro-controllers, used for Internet of Things (IoT) platforms, be used to broaden the course, to weave together both traditional Comp Org topics and IoT?",What to do about Comp Org?: (Abstract Only),NA:NA,2018
Sloan Davis:Olga Garcia:Chris Stephenson,"The demand for CS teacher professional development (PD) is increasing rapidly, but not all education stakeholders are equipped to identify CS PD needs, evaluate CS PD options, and track teacher and student outcomes. In this BOF, representatives of Google's CS educator PD grant program (formerly CS4HS) will share conclusions from the 2016 PD grant cycle and a recent literature review. Participants will discuss how the CS education community can disseminate knowledge about CS PD to the communities that need it most. At SIGCSE 2017, Google discussed CS PD best practices and common successes and challenges in creating sustainable PD programs. This year, we will discuss how to equitably scale these best practices so that education stakeholders are equipped to implement quality CS education, ensuring all students have quality CS learning experiences. This session is intended to be highly interactive and solution-oriented. Discussion themes and outcomes will be documented and shared with attendees.",Working Together to Provide Equitable CS K-12 Educator Professional Development at Scale: (Abstract Only),NA:NA:NA,2018
John P. Russo,"Increasingly we teach a diverse population of students, many with learning differences such as ADHD and Autism Spectrum Disorder. An educational framework called universal design for learning guides the development of flexible learning environments that can accommodate individual learning differences. This BOF will look at employing universal design to CS courses in order to accommodate the diverse learning styles of today's students.",Designing CS Courses using Universal Design Concepts: (Abstract Only),NA,2018
Gloria Childress Townsend:Paula Gabbert:Wendy Powley,"In January 2004, we organized the second SIGCSE Committee (""Expanding the Women-in-Computing Community""). The SIGCSE Board approved the charter, because the underrepresentation of women in computing is an international problem and an embarrassment for our profession. A BOF provides SIGCSE program advertising that will create a large audience for dissemination of information concerning successful gender issues projects and can provide time for discussion and brainstorming. We select projects to highlight through listserv communication and through our connections with ACM-W, NCWIT, ABI, CDC, CRA-W, etc. The forum provides an important annual meeting for a large group of people, who work to increase the representation of women in computing in their separate organization and who do not customarily have an opportunity to share ideas face-to-face.",A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only),NA:NA:NA,2018
Brian P. Railing:Cynthia Taylor:Saturnino Garcia,"Research shows the benefit of using active learning in computer science education; however, only limited resources (such as, prior publications) exist for systems courses (including architecture, networking, operating systems). This BoF brings together practitioners of various levels of experience to discuss ways to augment or replace traditional lecturing. We will discuss different techniques, possible materials available, and results measured. This BoF should benefit both instructors considering adopting techniques and instructors looking to discuss issues with their usage.",Active Learning in Systems Courses: (Abstract Only),NA:NA:NA,2018
Linda Ott:Leo C. Ureel:Charles Wallace,"The need for K-12 students to engage in Computer Science has been acknowledged in the White House call for ""Computer Science for All"" and supported through a variety of institutions. Implicit in many initiatives, and explicit in Google's CS4HS initiative, is the notion of a ""Community of Practice"" involving K-12 teachers. Communities of Practice are mutually supportive groups to assist newcomers as they find their way in a new endeavor. Teachers can support one another at multiple levels: technical, pedagogical, political, and emotional. Maintaining a Community of Practice for CS teachers, however, can be challenging. Demands on teacher time, lack of institutional buy-in, physical isolation, and lack of appropriate peer institutions are some confounding factors. A true community of practice requires maintenance: ways to identify newcomers or other participants in need, and ways to identify and share the resources that can help others. In this BoF, educators who are working to expand CS within K-12 education will discuss the challenges in the Community of Practice approach and share proven ways of addressing them.",Building and Nurturing Communities of Practice among K-12 CS Teachers: (Abstract Only),NA:NA:NA,2018
Jacqueline Smith:Diane Horton,"Booming interest in computer science and innovations in the way we teach it have allowed us to teach a larger, more demographically and geographically diverse group of students. One of the new challenges facing us now is that it can be harder for instructors to get to know many of their students, and for students to connect with their peers. Building community in our physical and virtual classrooms is difficult, but important for the success and learning experience of our students. Community is especially important for ""non-traditional"" CS students, who are more likely to struggle with imposter syndrome, or to feel like they don't belong in a CS classroom. Building Community in Large or Virtual Classrooms In this BoF session, we'll discuss the strategies, activities, and interventions we've tried and found successful or unsuccessful in building course community, and helping students believe they belong in CS.",Building Community in Large or Virtual Classrooms: (Abstract Only),NA:NA,2018
Lori Carter:Derek Schuurman,"Computing is not neutral. The way that we collect and manipulate data, the decisions that are programmed into autonomous devices, even the ways that we use each other's code reflects someone's values. Because technology has more and more influence in society, consideration of these values should be a part of a Computer Science student's education. The ACM/IEEE 2013 Curricula Guidelines for Computer Science programs reflects this imperative. The writers of the document suggest that between 11 and 16 of the core hours be devoted to Social Issues and Professional Practice. Where and how should we include the essential discussions of values, ethical considerations, social issues, and professional practice in the curricula? Should a whole course be devoted to the topic? If so, when in the program should it appear? Should we instead incorporate values topics related to the subject matter in each computing course? If so how? Perhaps we should leave the discussion to the philosophers or ethicists on campus. Will our students then be able to make the connection between computing and general ethics/values frameworks? Which aspects of values judgments should be addressed? Can we generalize in a way that will still apply to future advances in our fields? We'd like to hear from you.",Computing and Values: (Abstract Only),NA:NA,2018
Karen C. Davis:Brandeis Marshall:Lancie Affonso,"Widespread interest in developing and enhancing undergraduate data science education is evidenced by the interim report Envisioning the Data Science Discipline: The Undergraduate Perspective recently released by the National Academies of Science/Engineering/Medicine. The report identifies data modeling as one of the key concepts for developing and applying data acumen (making good decisions and judgements with data). We define data modeling as a process for documenting how data is connected, processed, and stored; a particular data model may address one or more of these aspects. This BoF session is proposed to focus specifically on data modeling skills for data science study. Traditional data models taught in computing curriculum include Entity-Relationship, UML, and relational models; these topics can be covered at various points in the curriculum, but are typically included in database courses. The proliferation of advanced data models and systems (for example, but not limited to, document stores, graph databases, column stores, key-value stores, and relational + map reduce) provides an opportunity for developing/enhancing database curriculum at the undergraduate level to support programs in data science. A goal of this BoF is to identify faculty who wish to develop and share best practices for teaching data modeling for data science, including course learning objectives and outcomes, techniques, and materials.",Data Modeling for Undergraduate Data Science: (Abstract Only),NA:NA:NA,2018
Farzana Rahman:Mohsen Dorodchi,"The use of Process-Oriented Guided Inquiry Learning model (POGIL) in introductory computer science courses has shown to be very useful in active learning delivery of fundamentals of computer science. Moreover, the aspect of organized teamwork in POGIL helps students develop professional skills to be ready to participate in team-based upper division CS courses such as software engineering or capstone courses. POGIL introduces a structured, yet flexible model for group activities. It also resolves the issue of member participations in activities since everyone needs to take a role and switch them in different activities. Time-management is also enhanced with POGIL. Though POGIL is a promising pedagogy, it also presents some unique challenge such as how to adopt the current activities to specific model of the classrooms. The implementation of courses can follow various approaches depending on factors like: class size, institutional culture, background of the students, the nature of facilities, and instructor preferences. In particular, faculty might need to invest significant amount of time to develop and/or work on modifying existing materials for specific courses. Therefore, instructors who choose to be POGIL facilitators has various decision choices. Detailed discussion about all these challenges, choices, options, and approaches are provided which can benefit faculty who are using and/or interested in adopting POGIL in CS courses. The discussions could be helpful to those who are only interested in group-based active learning teaching of CS courses.",Effective POGIL Implementation Approaches in Computer Science Courses: (Abstract Only),NA:NA,2018
Amardeep Kahlon:Bonnie MacKellar:Anastasia Kurdia,"Plagiarism is of great concern to faculty in all fields, including computer science as it leads to one certain outcome -- a compromise not just in student learning but also in the entire academic process. Faculty have tried to find ways to deal with this epidemic such as writing new course materials each semester, putting a larger or entire grade focus on exams, or even asking individual students to explain their assignments. However, plagiarism remains a source of frustration for both faculty and administrators. This BOF will bring interested faculty together to discuss the various and surprising ways in which students plagiarize, the methods of countering plagiarism, and the currently available tools for detecting plagiarism. Questions we will be discussing include: Do students understand plagiarism in the context of writing software? How can we develop an atmosphere that discourages plagiarism? Does such a thing as a ""plagiarism-proof"" assignment exist? If programmers go to online repositories, modify the code, and use it in professional programs then is it fair to expect the students to do just the opposite?",Combating the Wide Web of Plagiarism: the Discussion Continues (Abstract Only),NA:NA:NA,2018
Barbara Boucher Owens:Alison Clear:John Impagliazzo:Mirella Moro:Ming Zhang,"SIGCSE members are part of a worldwide community of computing educators and professionals. This discussion provides participants an opportunity to share global differences in vocabulary and interpretation of idioms and assumptions that pervade teachers and researchers. Lack of cultural knowledge can hinder understanding meaning of terms; communication among colleagues can be confusing. Lack of understanding also inhibits the leveraging of scholarly work and cooperation among colleagues from different cultures. E.g., information technology in Australia means the field of computing, and the baccalaureate degree ""Computer Science and Technology"" in China is equivalent to a degree in computer engineering. Terminology that Americans use such as AP for Advance Placement or K-12 for pre-undergraduate education is meaningless in many parts of the world. This discussion is an outgrowth of an ad hoc subcommittee formed by the ACM Education Council on global issues. Serving as a reference for the discussion is the seminal article by Clear, A. et al. ""What's in a Name?: International Interpretations of Computing Education Terminology,"" in The Proceedings of the 2015 ITiCSE on Working Group Reports. Attending this BOF should heighten awareness of what changes might lead to a truly global computing education community. In addition to Owens, Alison Clear from New Zealand, Ming Zhang from China, and John Impagliazzo from the USA have agreed to help lead the discussion.",Global Awareness for Computing Educators and Scholars: (Abstract Only),NA:NA:NA:NA:NA,2018
Christopher Gregg:Benjamin Hescott,"In their ""Generation: CS"" report this past year, The Computing Research Association detailed the explosive growth of computer science majors across both large and small institutions calling it ""larger today than any time previously"". Using data from The Taulbee Survey they show a 500% increase in the number of majors in computer science, but only a 50% increase in full-time faculty. Unfortunately, this growth has major consequences outside the classroom setting. The ability for faculty to engage in meaningful advising relationships with students has been severely impacted by this record growth. One solution could be to hire staff to assist students in course selection and degree requirements, but meaningful mentorship is much more than checking boxes and exemptions. Can we be effective advisors when advising loads have skyrocketed? In 2004, The CRA, lists effective mentoring as one of the challenges faced by broadening participation in computer science. In particular, they advocate for better training for mentors. Now faced with extreme ratios the need for creative mentoring practices is paramount. This BOF will provide a platform to discuss and share solutions from a variety of institutions. Questions such as: ""How can we identify students who would like to do research and continue to graduate school?"", ""How do we expose students to independent learning in large classes?"", ""Can we leverage peer mentoring?"" ""How can we make advising better?"" ""What processes can be automated?"".",How Do We Provide Effective Student Advising and Mentoring During Record Growth?: (Abstract Only),NA:NA,2018
Richard Weiss:Ambareen Siraj:Jens Mache:Blair Taylor:Siddharth Kaza:Ankur Chattopadhyay:Michael E. Locasto,"We need to greatly expand the community of faculty teaching cybersecurity using hands-on exercises. The number of security-focused competitions and exercises has increased in recent years so that faculty need to choose those that can best be integrated into their courses. As a community, we can contribute to each other/s projects. We would like to bring together both new and experienced faculty to build community. Our Facebook group (https://www.facebook.com/groups/TeachingCyber/) allows us to work together outside of SIGCSE events, and we are developing a critical mass of users. In the BoF, participants can sign up for the closed group. Participants will discuss answers to specific questions on teaching security. One goal of our BoF is to provide support for new members to learn about resources and get help. These resources include exercises, webinars, and slides. We will share experiences, practices and ongoing efforts, including our own (e.g. Security Injections, the Security Knitting Kit project, and EDURange). The BoF also benefits experienced members, helping them to disseminate their work and reach other faculty with similar interests. As a community we have begun to share exercises and discuss what works and what problems students and instructors have encountered. We will discuss ways to integrate security-related exercises into existing courses. The questions we will ask are, What materials and exercises have you tried? What are your experiences? How do we expand and improve cybersecurity education?",Integrating Hands-on Cybersecurity Exercises into the Curriculum in 2018: (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2018
John Owen:Carol Fletcher:Pat Yongpradit:David Benedetto,"Currently, 27 states and the District of Columbia have some form of teacher certification in computer science. This includes a variety of pathways such as endorsement, certification, licensure or other authorization that explicitly names CS. Many of these states, as well as those that have no CS teacher certification, are in the process of reviewing certification standards and pathways with the goal of increasing the number and quality of K-12 CS instructors and thus, access to high quality CS coursework in K-12. The Praxis exam is one of the few nationally recognized measures of CS teacher content knowledge but the current exam is out of date. A group of state leaders have been working with ETS to update the competencies measured by the Praxis. The objective of this BOF is to bring together stakeholders interested in contributing to the conversation around what a beginning CS teacher should know and be able to do to in CS, provide an overview of what has happened thus far to address these questions, share the recently revised Praxis draft framework, and give individuals an opportunity to provide input on the development of a national consensus related to new K-12 CS teacher competencies.",K-12 CS Teacher Certification: What Should New CS Teachers Know and Be Able to Do? (Abstract Only),NA:NA:NA:NA,2018
Darci Burdge:Gregory W. Hislop:Joanna Klukowska,"Free and Open Source Software (FOSS) is interesting to many students and provides an excellent opportunity to observe and practice many aspects of software product development and management. There is an active community of faculty fostering student participation in open source within computing curricula (see http://teachingopensource.org). However, the opportunity to add coverage of FOSS varies considerably from institution to institution, and there are always limits to what can be done with existing computing curricula. One approach to solving this limitation is for students to learn about and participate in FOSS projects as an extra-curricular activity. This BoF will provide a forum for faculty members to discuss open source student clubs. The Mozilla Foundation has been developing a program to support open source clubs. The initial clubs were primarily located in Asia, but Mozilla started an effort to expand the clubs to the U.S. during the current academic year. The BoF will include discussion of this effort and materials developed by Mozilla. (See https://opensource.mozilla.community/)",Open Source Student Clubs: (Abstract Only),NA:NA:NA,2018
Paul Ruvolo:Jeff Dusek:Larry Goldberg,"What is needed to help CS professors teach their students about the fundamental concepts of accessible design? How can every CS student become competent in the development of mainstream technologies that meet the needs of people with disabilities? Society is demanding such capabilities and companies such as Microsoft, Facebook, Oath (Yahoo), Adobe, and Google are today working with major universities to assure that new hires graduate college with this essential skillset. The Teach Access project is actively addressing the barriers, incentives and mechanisms through curriculum change, influencing accreditation, faculty bootcamps, industry guest lectures, online tutorials, and student engagement programs. What works for you and how can more university and faculty champions be engaged?",Teach Access: Teaching the Design and Development of Inclusive Technologies for All (Abstract Only),NA:NA:NA,2018
Darina Dicheva:Christo Dichev:Elva J. Jones:Peter J. Clarke:Lillian N. Cassel,"The low performance and drop-outs in Computer Science classes are frequently attributed to lack of engagement and motivation. Meanwhile, gamification - the application of game design principles and game mechanics to a non-game context -- increasingly attracts the interest of educators due to its potential to foster motivation and behavioral changes in learning contexts. Course gamification is about using game elements, such as instant feedback, freedom to fail, freedom of choice, achievements, leveling, progress mechanics, badges, and leaderboards, as interventions in the learning process. This BOF will provide a platform for a discussion of when and how course gamification strategies can be beneficial for improving student motivation, engagement and achievements in Computer Science classes. Questions to be discussed include: What game elements could be useful in gamifying a computer science course? How can an instructor incorporate game elements in the design of their courses? What support the instructor may need for gamifying their courses? Could some game elements have potential drawbacks on student motivation and performance? The discussion leaders and attendees with experience in applying gamification in their courses will share examples of successes or failures, challenges, problems, tips, and techniques for gamifying learning with each other and those new to the use of gamification. Two NSF sponsored projects related to the use of gamification in STEM courses will seed the discussion. As an outcome of the discussion, we hope to collectively identify some lessons learned and challenges to be overcome for a successful application of gamification in Computer Science education.",Using Gamification Strategies to Motivate and Engage Students in Computer Science Courses: (Abstract Only),NA:NA:NA:NA:NA,2018
Christian Murphy:Jennifer Akullian,"Long hours, pressure to meet deadlines, and fear of failure are just some of the stressors that affect CS students and professionals alike, leading to burnout, anxiety, depression, and other mental illnesses. A quarter of the world's population lives with some form of mental illness, and a 2015 UC-Berkeley study reported that nearly 50% of STEM graduate students live with depression. Furthermore, recent research suggests that 50% of those working in the tech community have been diagnosed with a mental illness, a statistic that may actually underestimate the problem because of stigmas in certain cultures and communities around seeking mental health services. These numbers all suggest a significant need for awareness and support in the tech industry. This BOF will provide attendees an opportunity to discuss the mental illnesses that affect CS students, including how to recognize symptoms, what resources are available, and how to create a culture of understanding and support within their communities. More importantly, we hope to create a space in which those living with mental illness can share their stories so that other participants can get a first-hand appreciation of the challenges they face.","We're All in This Together: CS Students, the Tech Industry, and Mental Health (Abstract Only)",NA:NA,2018
Stefan C. Christov:Mark E. Hoffman,"The ability to manage software development teams is an important skill in the computing professions. The Software Engineering Body of Knowledge devotes a separate knowledge area to this skill. It is difficult, however, to effectively teach software project management (SPM) in a traditional undergraduate setting, because it is logistically challenging to find software development teams that students can manage over a sufficiently long period of time. Thus, students often cannot apply in practice the SPM theory they learn in class and, in particular, the soft-skill aspects of SPM. To enhance student learning and experience of SPM, we have established a collaboration between a senior-level SPM course and a sophomore-level introduction to software development (ISD) course. In this collaboration, SPM students serve as managers of teams of ISD students during a semester-long project. We designed a methodology to evaluate the collaboration in terms of student learning and experience. This methodology is based on student surveys, reflections, meetings with students, and analysis of student artifacts (e.g., meeting minutes). We are in the third year of a longitudinal study in which we evaluate the collaboration after each semester it runs and evolve that collaboration based on the collected evidence. This poster describes the collaboration, the evaluation methodology, the continuous improvement process for evolving the collaboration, lessons learned on the educational benefits of the collaboration, and issues, such as the amount of managers/ authority, nature of managers/ tasks, logistics, and scheduling.",The Ongoing Development of a Collaboration between a Software Project Management Course and an Introduction to Software Development Course: (Abstract Only),NA:NA,2018
Mark M. Meysenburg,"This poster summarizes the product of the author/s 2016 ACM SIGCSE Special Projects grant. The author created a Reacting to the Past (RTTP) historical role-playing game entitled ""Charles Babbage, Ada Lovelace, and the Dawn of Computing."" According to the RTTP Web site, RTTP ""...consists of elaborate games, set in the past, in which students are assigned roles informed by classic texts in the history of ideas. Class sessions are run entirely by students; instructors advise and guide students and grade their oral and written work. It seeks to draw students into the past, promote engagement with big ideas, and improve intellectual and academic skills."" In the Babbage game, students take on the personae of the key figures in early Victorian science and engineering, and debate whether or not the British government should provide funding for the development of Babbage/s Difference and Analytical Engines. Game sessions take place at Babbage/s home, the London Mechanic/s Institute, and the Royal Society. The game can be played in six, seven, or eight class sessions, and includes three optional labs. There are 28 playable characters in the game. The game can be used in history of science or history of computing courses, and also in general-audience first-year seminar courses, to encourage students to study computing. The poster covers the background of RTTP games in general; some of the specifics of the Babbage game in particular; and includes pictures and insights from the first playtesting of the game during the author's fall 2017 first-year seminar course.","Charles Babbage, Ada Lovelace, and the Dawn of Computing: (Abstract Only)",NA,2018
Sven Jatzlau:Ralf Romeike,"Since the emergence of block-based visual programming languages as a new take on programming environments, they have served as a successful entry point into programming for novice learners. Over time, they have been developed and improved to become increasingly accessible, intuitive, and easy to use. In the course of this evolution, both uncommon and entirely new language concepts have been introduced, such as the cloning of objects, or nesting of sprites. However, the question of how to teach them has yet to be answered: the mostly visual representation of program flow, output and code, and the way a user interacts with these aspects can make traditional teaching practices inadequate. Instead, block-based languages require new practices, methods, and strategies, which will be developed in this research project. To this end, new concepts must be evaluated with regards to their strengths, weaknesses, and applications. Following this step, strategies with which to teach these concepts can be developed. Therefore, this poster presents the initial findings of a research project concerned with the theory of teaching block-based programming. In this preliminary study, we have identified new concepts found in Scratch, Snap! and GP, members of the most common block-based language family. In the next phase of the project, strategies for teaching these new concepts will be developed and assessed.",New Teaching Strategies for New Concepts -- What is Different with Block-based Programming?: (Abstract Only),NA:NA,2018
Adam Fischbach:Yana Kortsarts:Suk-Chung Yoon,"We present our experience developing and managing new interdisciplinary programs in computer forensics and digital media informatics -- the results of successful collaboration with social science faculty. The computer forensics minor is an interdisciplinary program that integrates criminal justice and computer science and combines both theoretical concepts and practical skills to prepare students for a career in the area of information security and digital forensics. The digital media informatics major is an interdisciplinary program run jointly by the computer science and communication studies departments. The program provides both broad and targeted perspectives on the field of informatics and helps students develop unique skills that can be adapted to the rapidly changing computer and media environment through four specialized concentrations: (1) audio-visual, (2) graphics, mobile, & web development, (3) gaming & artificial intelligence, and (4) digital writing. We describe the various stages in developing the interdisciplinary programs including an analysis of competitive academic programs, evaluation of current resources, qualifications and faculty considerations, the process of developing the program objectives and learning outcomes, and assessment strategies. We focus on common issues that arose during the development process such as the challenge of designing balanced curricula for interdisciplinary programs, the need for designing new courses and renovating existing courses. We also discuss the anticipated costs of the programs, required resources, recruitment strategies, and the administrative approval mechanism.",Developing Interdisciplinary Programs: Challenges and Opportunities (Abstract Only),NA:NA:NA,2018
Brandon Myers,"Research shows that active learning can increase student performance and engagement, but access to materials is a notable barrier to using research-based instruction strategies in CS and Engineering. We present results of a project-in-progress that aims to create, pilot, revise, and disseminate POGIL activities for Computer Organization and Architecture. POGIL is a research-based instruction strategy that comprises self-managed teams, guided inquiry (or, exploration), and development of process skills, such as critical thinking and assessment. The strategy has been shown to improve student performance and engagement in courses in scientific disciplines and, more recently, CS. This poster presents how we have applied the methodology for POGIL activities to Computer Organization and Architecture and highlights one activity in depth. From 2 pilots with 36 and 70 students we produced revisions and timings for 6 activities. We also discuss lessons learned in a) facilitation, such as the importance of roles and the tradeoffs of class-level synchrony and b) authorship, such as the appropriate choice of model (or, subject of inquiry) and level of guidance in the exploration phase of an activity. The intended outcome of this project is to make these activities publicly available on cspogil.org.",POGIL Activities for Computer Organization and Architecture: (Abstract Only),NA,2018
Zhen Zeng:Yuli Deng:Sharon Hsiao:Dijiang Huang:Chun-Jen Chung,"Engaged students are more likely to spend longer time on study, and obtain a better academic performance. Previous studies investigated the role of student engagement in virtual learning environments (e.g., online course, online discussion forum, and intelligent tutoring systems). However, it is still challenging to engage students on a virtual hands-on lab system. Comparing to other virtual learning environment, students have a unique learning model -- learning by doing in virtual hands-on lab. To successfully engage students in a large hands-on lab in cybersecurity education, instructors need to understand how students engage in a lab session, and how their engagement affect lab learning outcome in this specific educational setting. In this paper, we developed a conceptual model, especially for virtual hands-on lab education, to describe student engagement during learning processes in working on virtual hands-on lab tasks. This model adopts two existing educational models on engagement behavior. Preliminary data was collected from 109 students' lab project in a computer network security course at Arizona State University in 2016 Fall semester. Pearson correlation coefficient analysis results reveal two statistically significant preliminary results: the longer time a student spends on reading lab instructional material, the more likely the student works longer time on lab tasks (p < 0.01); the longer time a student works on lab tasks, a better learning performance the student archives (p < 0.01).",Conceptualizing Student Engagement in Virtual Hands-on Lab: Preliminary Findings from a Computer Network Security Course (Abstract Only),NA:NA:NA:NA:NA,2018
Isabella Corradini:Michael Lodi:Enrico Nardelli,"The term ""coding"" is more and more used to talk about the diffusion of computer science in school. While computer scientists, computing professionals, and educators consider this term very close or even equivalent to ""programming"", media tend to use it to describe something new and different from the ""old boring CS"". We provide here the main results of a large-scale investigation among primary school teachers (N=972) exploring their viewpoint on coding and its relation to programming. We asked to describe what coding is for them: only 40% of the relevant answers used terms explicitly mentioning programming. An additional 19%, while not directly mentioning programming, made reference to an information processing agent executing instructions. An additional small subset of teachers, while considering coding different from programming, described such difference using ""tolerable"" characterizations. We also analyzed the (sometime conflicting) misconceptions of teachers trying to explain why coding and programming are different.",Coding and Programming: What Do Italian Primary School Teachers Think? (Abstract Only),NA:NA:NA,2018
Rentaro Yoshioka:Tastuki Kawaguchi,"The importance of problem solving skills in addition to computational skills for computer science graduates is increasing. The authors present a curriculum of a creativity development program for undergraduate computer science students that aims at exposing them to problem solving and software development through a series of three courses spanning a period of six months. The focus of this initiative is to teach problem solving skills and software development skills as an integrated skill-set and take advantage of the combined effect to address the challenge for students to connect computer science knowledge to real-world problems, an issue apparent in our current curriculum. The curriculum starts with the first course on creativity development in which students propose solutions to a real-world problem through field-work and information gathering/analysis spanning five days. The second course introduces project management and software development through another five-day software development team project. In the final course, student teams work on a software development request from customers during a period of 4 months. All three courses use the same problem. The program is in its first year of offering with a relatively small group of students. The presentation will display our findings from program assessment including student scores on individual performance tests and student perception. Details of the project can be found at: https://www.u-aizu.ac.jp/enpit/",How to Foster Creativity?: Curriculum of Creativity Development Program for Computer Science Students (Abstract Only),NA:NA,2018
Xiaojun Wu:Yongqiang Chen,"The ACM International Collegiate Programming Contest (ICPC) is the most popular programming competition for universities worldwide. This contest examines the comprehensive ability of teams to program to solve problems. Teamwork is important besides team members' personal skills and capabilities. There have been literature on computer algorithms, personal training for programming contests, and team strategies during the contests. However, few articles involve team building and teamwork training for programming contests. This poster hopes to provide guidance and reference for coaches and contestants in teamwork training for programming contests, so that a team can benefit most from limited time of training to make as great progress as possible. This poster shares the authors' experience in team training for ICPC. Knowledge, skills, and attitudes (KSAs) of teamwork for programming contests are concluded and presented in details. The authors represent various teamwork methods graphically, so that it is visually helpful for study and discussion. These teamwork methods are pure teamwork, no-teamwork, some paired methods, and the method preferred by the authors. A team training form is then proposed to record the team behaviors in team training. By examining the training record, the coach and the team themselves can discover the team's strengths and weaknesses in various aspects, and evaluate the teamwork quality in the ways of communication, coordination, balance of member contributions and mutual support. Handouts will be available showing various teamwork methods in a graphical representation and some real training record forms.",Teamwork Training for Programming Contests: (Abstract Only),NA:NA,2018
Rebecca N. Wright:Jane Stout:Geraldine Cochran:Thu Nguyen:Cynthia Sanchez Gomez,"We have developed the Douglass-SAS-DIMACS Computer Science Living-Learning Community (LLC) for first-year women at Rutgers, now in its second year. Each year, around 20 first-year women undergraduates at Rutgers who intend to major in computer science are selected for the LLC. LLC participants live in a common dorm and are provided with an educational, mentoring, and community-building program that supports their progress as Rutgers students and as computer science majors. To our knowledge, this is the first undergraduate living-learning community for women in computer science at any university. A focus group conducted with women from the inaugural cohort revealed that faculty support contributed to feelings of belonging, both in the program and in the CS department, among the participants; participants valued the academic support they received as part of the program and felt communication structures within the program were effective; and participants expressed a desire for advanced undergraduate peer mentors. A quasi-experimental study of this cohort indicated that LLC participants showed a decrease in satisfaction with the CS department at Rutgers; a decrease in computing-related self-efficacy; and an increase in the belief that computing ability is inborn. Follow up interviews suggested that the efficacy of the LLC might be dependent on two factors: participants' commitment to a CS major coming into the program and participants' level of involvement with the LLC group. In response to these results, we have made some changes to the program and continue to carefully study the program in order to maximize its effectiveness.",Computer Science Living-Learning Community for Women at Rutgers: Initial Experiences and Outcomes (Abstract Only),NA:NA:NA:NA:NA,2018
Subhajit Chakrabarty:Fred Martin,"Student success rates in introductory computer science courses at colleges and universities across worldwide are scandalously low - 30% to 50% of students fail a first-semester course. At our university, over the past ten semesters, 40.6% of our students failed our first-semester computer science course. A survey (204 computer science students) was administered at the beginning of Fall 2016 to measure two hypothesized constructs: one on prior engagement in activities (such as summer camp, jobs) related to computer science, and another on prior experience in computer science topics. The prior experience bank consisted of several yes/no questions asking about familiarity with specific topics found in a first-year computer science course (e.g. globals, arrays, conditionals). The survey data was matched with the final course grades. Results revealed that the prior experience variables could be construed as a construct, but this was not the case with the prior engagement variables. We discovered a statistically significant relation between prior experience and course grade, with more experience predicting higher grades. Except ethnicity, other variables such as gender and transfer status were not found to be significant. This study emphasizes the need to consider the prior knowledge of students in building introductory computer science curricula, such as creating multiple tracks with students self-selecting into higher or lower prior-experience cohorts.",Role of Prior Experience on Student Performance in the Introductory Undergraduate CS Course: (Abstract Only),NA:NA,2018
Xiaochun Yang:Jiawei Liang,"With the increasing demand for understanding the theory of machine learning, professional people without technical background need to work with machine learning to solve the problem and to facilitate fostering work. The poster describes machine learning online education experience for professional industry people without technical background and machine learning knowledge. Firstly, the poster lists machine learning application requirements of professional people from various of industry area. Secondly, the poster analyzes the demand and typical characteristics of professional people. Based on above analysis, the poster proposes course framework including assignment, small projects and reading materials to assist professional people to understand the theory of machine learning and utilize Python machine learning open source framework to solve the problem in the industry and facilitate industry development. From the perspective of the application, the poster presents classical machine learning algorithms to help professionals to resolve collaborative filtering, classification, clustering, and optimization problem. Also, the poster introduces the instruction process of deep learning by using TensorFlow and teaches the student to understand complicated conception along with philosophy thinking. To broaden students/ horizons, a general-purpose reasoning system, Non-Axiomatic Reasoning System which is different from conventional reasoning systems is introduced. To help the student understand mathematics related conception, the author describes the instruction techniques including the graphical representation of knowledge, teaching with dialogue, to guide students to think deeply and to attract attention. To evaluate the objective of the course, the author summarizes the development progress, feedback from students and future improvement teaching action.",Machine Learning Online Education Experience for Non-technical People: (Abstract Only),NA:NA,2018
Laura Hobbes LeGault:Matthew Berland,"Pair programming in CS1 courses has been shown to have many benefits (both to students and instructors), and it is widely employed. Other than assignment by instructors, how do students select their partners, and what are their perceptions of working with a partner? In our study, students in a CS1 course for non-majors were required to complete a brief, anonymized survey after each homework assignment; we analyzed their survey responses over the course of the semester and compared the results of students who worked with a partner and students who worked alone. Pairs and individuals judged assignments to be about the same difficulty, but pairs spent less time on assignments. Individuals generally worked alone out of preference, but a minority of them reported interest in working with partners but could not find one on their own. Through our analysis we model relationships between survey constructs, student success, and student satisfaction.",Students' Perceptions of Pair Programming in CS1: (Abstract Only),NA:NA,2018
Amanda Dickes:Shari Metcalf:Amy Kamarainen:Joe Reilly:Karen Brennan:Tina Grotzer:Chris Dede,"In recent years, the field of education has challenged researchers and practitioners to incorporate computing as an essential focus of K12 STEM education. Widely recognized as a ""basic skill"" necessary for economic opportunity and social mobility, integrating computing within K12 STEM supports learners of all ages in applying computational thinking within established and accessible contexts while co-developing practices essential to mathematical and scientific expertise. The EcoMOD project is an example of such an integration. In EcoMOD, immersive virtual environments are blended with interactive computational modeling tools designed specifically for younger children in an attempt to support ecological knowledge, complex causal reasoning and computational creation in third grade students. Our curricular design is grounded in the Science-as-Practice perspective and literature on young children's computing. In this proposal, we present outcomes from early pilot work with 35 third graders across the greater Boston area. This work has implications for designers of educational technologies by illuminating aspects of children's understanding that researchers and designers can leverage to support deeper and earlier understandings of ecological dynamics and computational practices.",EcoMOD: Integrating Computational Thinking into Ecosystems Science Education via Modeling in Immersive Virtual Worlds (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2018
William Gregory Johnson:Raj Sunderraman:Anu G. Bourgeois,"A recent 2017 study from HigherEd.com, shows that roughly 35% of students transfer colleges during their academic career. While much research has focused on the impact of undergraduate student success factors such as flipped classrooms, hybrid learning, and technology usage, we found no studies comparing transfer students versus non-transfer (native). In our research, we measure impact based on CS course load per semester related to pass/fail rates and contrast student status of transfer versus non-transfer (native). We show that transfer students tend to enroll in more CS courses per semester, beyond the department's recommended two. We also show that their performance is consistently different than that of native students, namely higher CS course fail rates and lower CS GPA scores. The detrimental effects and realization in this study is reason for further investigation. More features will be gathered to be used in our continued analysis and we see the need to examine the difficulty of CS courses taken to indicate why one cohort performs poorly and one does not. We conjecture that most transfer students tend to complete their core classes and are left with only CS courses to complete upon transfer. This results in the transfer students taking a heavier CS load and thus impacting their performance negatively, as compared to native students. Considering that many transfer students start their path way in 2-year institutions, it is imperative that better advising strategies are developed to enable the students to succeed upon their transition.",Performance Impact of Computer Science Course Load and Transfer Status: (Abstract Only),NA:NA:NA,2018
Cheryl Calhoun,"With an expanding need for a diverse STEM workforce, community colleges play an instrumental role in filling the need with qualified technicians. This research project will identify and synthesize the experiences of developing and implementing online course components in technical education programs, including information technology and cybersecurity, with an emphasis on projects supported by the National Science Foundation's Advanced Technological Education program (ATE). This study presents findings from a multiple case study of seventeen community colleges programs. The research questions guiding this study include 1) how online education is being used in technical courses and programs and 2) how challenges and benefits are perceived from implementing online education. Two participants from each project (PI and Faculty) were interviewed and program artifacts were collected. The interviews were thematically coded and data were analyzed to determine how hands-on work occurs in online technical courses including key challenges and benefits. The findings include descriptions of synchronous vs asynchronous models, use of didactic and lab based curriculum, fidelity of experience and teaching strategies. Benefits and challenges experienced by both faculty and students are discussed. Findings from this study contribute knowledge about how colleges are implementing online technical education including broader changes that occur concerning structure and philosophy. This project is important to the CSforALL initiative in that it evaluates online implementations of Cybersecurity and Information Technology programs and it provides an insight into best practices for implementing online, hybrid and flipped classroom models.",Online Technical Education in Advanced Technical Education Funded Programs: (Abstract Only),NA,2018
Katelyn Bright Alderfer:Brian K. Smith:Santiago Ontañón:Bruce Char:Jessica Nebolsky:Jichen Zhu:Anushay Furqan:Evan Freed:Justin Patterson:Josep Valls-Vargas,"In parallel programming, there is a shift away from the single execution path of sequential programming to situations where non-deterministic operation force consideration of multiple paths of execution. Compared to the substantial computer science education literature on helping students to learn sequential programming, there are fewer studies of the cognitive difficulties that students follow when learning parallel programming. To address this, we created a computer game, Parallel involving concurrent situations. The game is an abstract representation of concurrency problems where players are asked to solve a progression of puzzles involving arrows moving concurrently on tracks. Play does not require coding. The goals of our research were to 1) explore how students acquire skills in the design of solutions with parallelism, and 2) explore how interactive games can substitute or compliment conventional parallel programming courses. Through two user studies of the game (n=7) where students played the game and used a talk-aloud protocol alongside a researcher, three major themes emerged, that of non-determinism where students were able to make the connection of non-deterministic behavior in parallel programming to the game, self-efficacy where students were stating they felt their knowledge of parallel programming increased after playing the game, and expertise where researchers learned that expertise was important to successful connection of the game to parallel programming concepts These findings show that students are beginning to see the connection between the game/s presentation of concurrency to programming concepts such as non-determinism.",Lessons Learned From an Interactive Educational Computer Game About Concurrent Programming: (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Mohsen Dorodchi:Aileen Bendict:Devansh Desai:Mohammad J. Mahzoon,"Reflection is a way to get quick opinions from users, clients, etc. Analysis of reflection often involves subjective review and interpretations. On the other hand, data analytics provides guidelines to collect and measure as well as analyze and reflect on data. In our case, learning analytics of students' reflections reveals information about learners, their learning experience, and all their related contexts. Eventually, learning analytics aim is to understand and optimize learning and the corresponding environments (in which learning occurs). It plays a critical role in evaluating students performance and making decisions on how to improve students' success and overall retention. In our study, we focus on applying learning analytics to a heterogeneous data set collected in the introductory programming course. This data set integrated self-assessment reflections along with the existing active learning group activities. By integrating self-assessment reflections, large amounts of valuable data can be gathered to facilitate continuous assessment of students' learning. Using activity-based active learning and peer-instruction, the effectiveness of the content interventions targeting students to understand the fundamental concepts of computer programming is also evaluated. For analysis purposes, we applied a time-based learning analytics model called sequence analysis to learn about the pattern of our at-risk students and use the learned model to predict at-risk students based on their reflections as well as performance in the course.",Reflections are Good!: Analysis of Combination of Grades and Students' Reflections using Learning Analytics (Abstract Only),NA:NA:NA:NA,2018
Darren Tirto:Alexander Hamme:Keith J. O'Hara:Sven Anderson,"Bard College introduces all incoming students to computing through a coding module in its long established writing-intensive program, Language and Thinking (L&T). The L&T program is a mandatory three-week experience for first-year students that has taken place every year at the college since 1981. We present a new version of the computing module that focuses on introducing all first-year students to computer programming through the lens of literature and creative writing. We designed and implemented an interactive text-based game that taught the basics of computer programming using Twine. After playing the game, students attended an undergraduate-led workshop where they transformed paper-based writing pieces into interactive essays in Twine that execute code. We discuss the outcomes of the module and also evaluate the design of a coding experience designed to meet the needs of a writing-intensive course.","Language, Thinking, Code: Interactive Essays with Twine (Abstract Only)",NA:NA:NA:NA,2018
Yvonne S. Kao,"When creating assessments, computer science educators and researchers must balance items? cognitive complexity and authenticity against scoring efficiency. In this poster, the author reports results from an end-of-course assessment administered to over 500 high school students in an introductory block-based programming course. The poster focuses on three atypical multiple-choice items, in which students had to select all the correct responses. The items were designed to be more cognitively complex than simple multiple choice questions while remaining easy to score. Results show that this type of item was challenging for students but was predictive of their overall performance.",Alternatives to Simple Multiple-Choice Questions: Computer Scorable Questions that Reveal and Challenge Student Thinking (Abstract Only),NA,2018
Shannon Ernst:Jennifer Parham-Mocello,"This study examines the results of establishing a rubric for design in freshmen computer science courses. The rubric consists of six categories (Understanding the Problem, Relationship Among Parts, Logic, Diagrams, Code Present, Testing) on a binary scale indicating if the category was included or not. The analysis examines four terms of data, one course per term, where students are required to submit a program design a week before they submit their assignment code. The terms differ in population (traditional and non-traditional), content (CS 1 and CS 2) and the level of design guidance (increased guidance/details in the syllabus). Each qualitative design was evaluated using the same rubric to facilitate comparisons between different courses, correlation to assignment grades and overall course grades, there were notable differences between what the populations included in their designs and how frequently the populations included the various categories of the rubric over time. In particular, non-traditional students tend to include more diagrams, logic and relationship among parts than traditional students, and in a CS 1 class without object oriented programming (OOP) versus a CS 2 class with OOP, CS 2 students tend to provide a more global picture of the program than specific details outlined in CS 1 designs, which lacked a big-picture perspective. These insights allow us to better understand how students from varying populations and different course content approach problem solving and design in computer science differently.",Analysis of the Difference in Designs between CS 1 and CS 2 Students: (Abstract Only),NA:NA,2018
Mahnas Jean Mohammadi-Aragh:Phyllis J. Beck:Amy Barton:Donna Reese:Bryan A. Jones:Monika Jankun-Kelly,"Learning to program is a complex task and is a documented persistent challenge. We are intermingling Writing-to-Learn (WTL) strategies in support of learning to program. Initial efforts examined existing writing in the form of guided source code comments. This poster displays the results for the following three research questions: RQ1) What do source code comments tell us about novice programmers' thinking processes while coding? RQ2) What do source code comments tell us about how students visually organize their source code? RQ3) What differences exists for students receiving traditional instruction versus WTL instruction? To answer these questions, we analyzed students' programming assignments from an introductory programming course with and without WTL instruction. The analysis generated a qualitative codebook that can be used to classify source code comments with respect to thinking processes and organizational patterns. The resultant qualitative codebook is displayed and audience members can use the codebook to classify comments. We are soliciting feedback regarding the reliability, validity, and completeness of the codebook, and future project plans. This material is based upon work supported by the National Science Foundation under Grant No. DUE-1612132. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.",Coding the Coders: Creating a Qualitative Codebook for Students? Commenting Patterns (Abstract Only),NA:NA:NA:NA:NA:NA,2018
Jian Zhang:Marie-Anne Demuynck:Don Edwards:Mari Tietze,"It is projected that over 51% of all STEM jobs will be in CS-related fields by 2018 (Georgetown University Center on Education and the Workforce Report). CS4All is the initiative to ""empower a generation of American students with the computer science skills they need to thrive in a digital economy"" (Computer Science for All, 2016). While embracing this initiative enthusiastically, the undergraduate computer science education community faces many challenges including the curriculum and program development to meet the non-CS major's background and retain their interests in computer science skills in their own degree program. One starting implementation point in the CS4All initiative is to broaden the awareness of computer science in other disciplines. Efforts such as CS+X focus on the joint majors/degree plans between CS and other humanities disciplines (Joint Majors: CS+X). At Texas Woman's University, the Mathematics and Computer Science department developed several new Informatics degree programs that were crafted to be interprofessional and interdisciplinary with a core of traditional computer science courses. In this poster, the authors describe the holistic design and development of those programs, the obstacles and challenges during the degree program approval process, the competency based education practice, and corresponding challenges observed on the traditional undergraduate CS program in the department.",Computer Science at the Interdisciplinary/Interprofessional Education Crossroad: Informatics at Texas Woman's University (Abstract Only),NA:NA:NA:NA,2018
Stephen H. Edwards:Mukund B.M. Manniam Rajagopal:Nischel Kandru,"Pedagogical agents have received a large amount of interest in the recent years. Equipped with the ability to express emotions, these agents can influence the user attitudes, perceptions and behaviour. In our study, we are leveraging these emotionally-intelligent pedagogical agents to deliver effective and efficient feedback to students about their programming assignments and also act as a teaching assistant for any general programming related queries. We have integrated the pedagogical agent as part of Web-CAT - an automated online grading tool for students' programs. One of our main objectives is to communicate clearly the feedback about student programs while motivating them to perform better. Displaying the feedback and motivational messages to students all the time can quickly become noise and students tend to ignore them. Our study is to strategically have the pedagogical agent communicate with the student to provide them growth mindset feedback and also provide motivation to improve upon their work. The feedback would be based upon few indicators which would be triggered based on the student's program and the agent would guide the students to the correct solution by providing appropriate suggestions. The students can also voluntarily ask the agent for feedback and areas of improvement in their work. In addition, the agent can also help the students with any programming related queries or ways to fix a specific error encountered in the student's program. We will conduct a user study to gather feedback from students about the influence of the agent in helping them achieve their goal",Pedagogical Agent as a Teaching Assistant for Programming Assignments: (Abstract Only),NA:NA:NA,2018
David P. Bunde:Cynthia Taylor:Jaime Spacco:Andrew Petersen:Soohyun Nam Liao:Leo Porter,"Peer Instruction is an active learning pedagogy that has been shown to improve student outcomes in computing, including lower failure rates, higher exam scores, and better retention in the CS major. A key classroom mechanism for Peer Instruction is the ""clicker question"": a formative multiple-choice question on which students vote, then discuss, then vote again. While research indicates that clicker questions lead to learning gains for students, relatively little is known about the questions themselves and how faculty employ them. Additionally, much of the work has examined clicker data collected by CS Education researchers operating in a quasi-experimental setting. In this project, we examine clicker data collected incidentally by multiple instructors using clickers as a pedagogical technique in their classroom. This work represents a first effort to systematically evaluate how instructors use clicker questions, including how many clicker questions are used in a course, how difficult the questions used are, and whether instructors add or modify questions over time.",A Multi-Institution Exploration of Peer Instruction in Practice: (Abstract Only),NA:NA:NA:NA:NA:NA,2018
Caelin Bryant:Jonathan Gilmour:Beatriz Herce-Hagiwara:Anh Thu Pham:Halle Remash:Marli Remash:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky,"Quick. Think of an outreach activity in computer science and a target audience. If you're like most people, you think of the target audience as middle-school students or high-school students and you think of activities like robotics, app development, or games. As a computer science educator, you might also note that these outreach activities should not just be designed to bring more people to CS, they should be designed to bring more people underrepresented in computing to CS-female students, domestic students of color, and lower-socio-economic-status students. But at the College level, what topics have shown the most efficacy in diversifying the discipline? It's not necessarily robotics, app development, or games. For example, the Media Computing project, led by Mark Guzdial, has shown the power of computing for the arts as a motivating factor for college-age female students. Can such an approach work for younger students? In this project, we developed and presented a week-long ""craft of code"" camp for elementary school students in which they used block-based languages to explore three kinds of creative computing, two of which had tangible output: programmable embroidery using TurtleStitch, programmable 3D models using BeetleBlocks, and programmable storytelling using Scratch. In this poster, we describe the curriculum for the camp, explore design issues, present results, and suggest approaches for others interested in developing similar camps. Our curriculum and materials are available at https://codecamp.sites.grinnell.edu/craftofcode/.",The Craft of Code: Exposing Elementary Students to Computing Through Tangible Crafts (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Amanpreet Kapoor:Christina Gardner-McCune,"Understanding the development of professional identity in Computer Science (CS) undergraduate students can help better evaluate CS degree program's effectiveness in preparing students for their career goals. This poster presents findings from a study where we surveyed 105 CS undergraduate students about their self-perceptions of technical competencies in their chosen CS professions, the mechanisms to develop their competencies, as well as their motivations behind attaining these skill sets. Preliminary analysis of this data indicates that most CS students (93.3%), identified themselves into 7 different computing professions including Software Engineering (81.0%), Web Development (37.1%), User Experience (19.0%), and Computer Security (12.4%). They indicated using multiple mechanisms to develop their technical competencies including coursework, internship/professional experience, and research. Motivations behind their learning included self-interest as well as industry demands. We analyzed the relationships between students' skill proficiencies, motivations, and mechanisms for learning and found differences between novice, intermediate, and advanced learners. We found that students who self-assessed their proficiencies as novices in their chosen professional identity had a single mechanism for learning, most commonly coursework preparation. On the other hand, students who rated themselves as intermediate or advanced learners had multiple mechanisms and motivational factors behind attaining their skill set. These findings are important for better understanding students' learning needs and career aspirations. CS departments can use this information for better aligning their degree programs to student goals and creating pathways that ensure the development of CS students professional identity.",Understanding How Computer Science Undergraduate Students are Developing their Professional Identities: (Abstract Only),NA:NA,2018
Pankaj Kamthan:Samia Hilal,"To be successful in their program and in their subsequent professional commitments, the students of Requirements Engineering, in general, and Agile Requirements Engineering, in particular, need to acquire a certain set of cognitive, behavioral, social, and technical skills. These skills can be instilled through practice. The students also need to have a ""toolbox"" with a diverse collection of tools which complement each other. This poster aims to show that paper remains one of those tools which can help towards developing aforementioned skills within the framework of an active learning classroom environment. In that regard, the authors' approach is described, preliminary results of the authors' experience with the graduate students over the period of two semesters are presented, and recommendations for educators who may be interested in putting the approach into practice are given.",On the Role of Paper in Agile and Active Requirements Engineering Education: (Abstract Only),NA:NA,2018
Travis Mandel:Jens Mache:Richard Weiss:Peter Drake,"Abstract: Data science is on the rise, being a high-demand skill for a number of employers, both in the tech field and in various scientific disciplines. Since it is a new field, only a handful of schools offer a data science program, most of those being large research institutions. This presents a unique opportunity for smaller schools to combine an exciting and highly relevant topic with the personalized education, small class sizes, and individual attention they are known for. On the flip side, building out data science at small schools also presents numerous challenges, including finding sufficient faculty time and expertise, attracting a sufficient number of students, forging interdepartmental connections, and convincing the administration to approve the new courses and program. In this poster, we present lessons learned from data science efforts at three small institutions, including one which recently successfully developed a data science certificate (containing four new data science courses).",Building Out Data Science at Small Colleges: (Abstract Only),NA:NA:NA:NA,2018
Matthew Neis:Vincent Cefalu:Ankur Chattopadhyay,"With the growing demand for cybersecurity workforce, as we look to prepare our youth in cybersecurity, a lack of basic awareness about mobile device security and limited practical knowledge in securing mobile devices may expose our young generation to data hacks and cyber-attacks. The current IEEE/ACM CS2013 curricular recommendations and the latest CSEC2017 cybersecurity curriculum guidelines clearly point to a need for inclusion of mobile security related topics within the present CS knowledge areas. However, even though there are limited mobile security-based curriculum development initiatives at the K-12 level, none of them focus on the theme of mobile app related permissions, vulnerabilities and exploits. Therefore, in order to address this gap in mobile security based K-12 experiential learning, we have designed and developed a unique Android app-driven information security-based learning module for educating middle-school (fifth to ninth grade) learners about relevant cybersecurity topics, like good password practices, ethics, Android app permissions, vulnerabilities, exploit-based hacking, using an Android device. This poster will describe our creative mobile security theme-driven middle-school educational module, including our original unique Android app, which has been successfully used to conduct several hands-on workshop sessions for middle-school students as part of our Google IgniteCS outreach program and the NSA GenCyber camp program. Our poster will also present the survey data collected from middle-school participants in an effort to evaluate mobile security-based experiential learning model as a potential cybersecurity educational interface for engaging K-12 students.",Developing a Unique Android App-driven Nifty Middle-School Educational Module on Mobile Security for Driving Basic Information Security Awareness and Generating Interests in Cybersecurity: (Abstract Only),NA:NA:NA,2018
Rebecca Grasser,"In 2015, it became apparent that the traditional lecture/lab courses were not working for the Computer Science/Software Engineering students at our community college. The students wanted more out of the class, and the lecture model was, frankly, boring for all of us. This began a four-year long project to convert the three major programming courses from standard lecture to a variation on project based learning. In each course, the project would be slowly introduced and appropriately scaffolded, with each new skill tied to the text and lectures. At the end of the term, students presented their work, as a written and oral report, to faculty and staff they did not know. While this project started out as a grand experiment, students were overwhelmingly positive about not only the project, but how much they learned that wasn/t in the text or lectures, and just as important, how much they learned about themselves. The growth in student confidence was clear. The poster will display information about two current projects, typical student artifacts, and an assortment of student comments from their final presentations. We will also discuss how the project idea was scaffolded to balance formal and informal student learning in the classroom.",A Year of Living Actively: Hybrid PBL in a Community College CS Curriculum (Abstract Only),NA,2018
Yu Cai,"There is a growing acceptance that a holistic cybersecurity approach incorporating technical, human, and business factors is needed to address the myriad cyber threats nowadays. This paper introduces a new holistic and case-analysis (HCA) teaching approach for cybersecurity education by dissecting recent high-profile cybersecurity breaches. The traditional way of teaching cybersecurity usually introduces a list of technical security topics in an isolated context with little or no effort to link these topics together. It is also not easy to find a good place to teach human and business factors in cybersecurity. The proposed HCA model starts with selected real-world cyber breaches including the Target Corporation breach, the Anthem Inc. breach, and selected Distributed Denial of Service (DDoS) attacks. Students look into the details of these attacks and learn how these attacks took place from the beginning to the end. During the process of case analysis, a list of security topics reflecting different aspects of these breaches is introduced. Student learning will be reinforced through in-class discussion, selected readings materials, and hands-on labs. Compared with traditional methods, the proposed HCA model has a few advantages. First, it can draw students' attention and increase their interest with real-world cases. Second, it can improve student analytical skills by helping them obtain a whole picture of cybersecurity systems in an enterprise environment. Third, it can help the student gain a holistic view of cybersecurity by incorporating complicated socio-technical factors.",A Holistic and Case-Analysis Approach for Cybersecurity Education: (Abstract Only),NA,2018
Miriam E. Armstrong:Keith S. Jones:Akbar Siami Namin:David C. Newton,"There is a growing need for cybersecurity professionals with the knowledge, skills, and abilities (KSAs) necessary for risk and vulnerability analysis. Cybersecurity curricula should emphasize KSAs most important in cyber work. To determine which KSAs should be prioritized in curricula, we interviewed 38 cyber professionals with a specialty in vulnerability assessment and management. Interviews took place at the premier hacking conferences Black Hat and DEF CON in 2016 and 2017. Participants rated the importance of 31 KSAs taken from the National Initiative for Cybersecurity Education's Cybersecurity Workforce Framework. Of the 31 KSAs, 12 were rated as being significantly important to vulnerability assessment and management work. Half of these KSAs dealt with system and application vulnerabilities (e.g., Skills in conducting vulnerability scans and recognizing vulnerabilities). The other 6 most important KSAs concerned attacks (e.g., Knowledge of different classes of attacks), penetration testing (e.g., Skill in the use of penetration testing tools and techniques), and network protocols (e.g., Knowledge of network protocols). Overall, results suggest that vulnerability assessment students should graduate with: 1) knowledge of and skills in identifying vulnerabilities and robustness of systems and applications; 2) conceptual familiarity with classes of attacks and attack stages; 3) knowledge of and skills in penetration testing principles and tools, and 4) knowledge of network traffic and network protocols. Handouts will be provided.",What Vulnerability Assessment and Management Cybersecurity Professionals Think Their Future Colleagues Need to Know: (Abstract Only),NA:NA:NA:NA,2018
Debarati Basu:N. Dwight Barnette:Godmar Back:David McPherson:William M. Naciri:Paul E. Plassmann:Calvin J. Ribbens:Vinod K. Lohani:Margaret Ellis:Kira R. Gantt,"The current emphasis on cybersecurity worldwide, demonstrates the importance of this topic. This poster describes a unique NSF funded project that aims to create cybersecurity education opportunities at Virginia Tech (VT). It is a collaborative effort among faculty and graduate students in the Engineering Education, Computer Science (CS), Electrical and Computer Engineering (includes two majors, Electrical Engineering (EE) and Computer Engineering (CPE)) Departments, and the Hume Center in the College of Engineering at VT. The goal is to integrate cybersecurity modules into eight required CS and CPE courses, from freshman to junior levels, utilizing Jeremy Bruner's spiral-theory-based1,2 curriculum model. A spiraling theme of ""handling threats to software for securing information"" is chosen that will be returned to repeatedly as learners advance in their knowledge and intellectual capacity. Cybersecurity goals of the Confidentiality, Integrity, Availability, Authenticity, Anonymity, Assurance (CIA/AAA) triad, as appropriate for various academic levels, are adopted to develop the cybersecurity modules. Each module engages students in an authentic activity that reinforces the cybersecurity concepts. The project includes an engineering education research component, which is focused on evaluating the effectiveness of the curriculum in enhancing students' knowledge, skills, and motivation in cybersecurity concepts. The first year of the project has been completed by introducing cybersecurity modules into four courses (CS: Introduction to Software Design, and Software Design and Data Structures, and CPE: Engineering Problem Solving with C++, and Data Structures and Algorithms) impacting ~1600 students. The details of curriculum development, implementation and, preliminary findings of the research will be presented.",Development and Analysis of a Spiral Theory-based Cybersecurity Curriculum: (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Sonal Dekhane:Nannette Napier,"While many efforts exist to recruit underrepresented minorities in computing, retention of those that choose the field, still remains a challenge. To retain more women in computing at an open access, baccalaureate degree granting institution, the authors have been hosting a programming boot camp (PBC) for women IT and MIS majors at the institution since May 2014. PBC is a holistic program that focuses on academic preparation, professional development and mentoring. Freshman and sophomore women are invited to participate in this annual PBC each year. While some candidates accept the invitation to participate in the boot camp, some elect not to. The goal of this study is to investigate if participants progress and persist at a different rate than the invited candidates (non-participants) in their chosen field of study. This study compares the academic progression and retention data of candidates vs. participants over a period of three years (2014-2016). The authors look at measures such as current academic status, graduation rates, current (or graduation) major, and completion rates of programming sequence. Preliminary findings indicate that recruitment is a challenge without any incentives for participation. While participation in PBC alone cannot impact retention, this study investigates if students' participation or non-participation can be an indicator of their persistence in their chosen program. This information can be further used to create targeted initiatives meeting students' needs.",Does Participation in a Programming Boot Camp Impact Retention of Women in Computing?: (Abstract Only),NA:NA,2018
Jian Zhang:Kimberly Huett:Jonathan Gratch,"The importance of rigorous standards in computer science education research to include a description of hypotheses, research questions, methodologies, and results has been recognized in the computer science education community. The driving force for computer science education research is to understand the learning needs of our students who are human subjects. Therefore, some computer science education researchers may need to answer a critical question before they start their planned research: Do I need Institutional Review Board (IRB) approval to conduct this research using my students as research subjects? The key goal of the IRB is to protect human subjects from physical or psychological harm (""Code of Federal Regulations, Title 45, Public Welfare, Part 46, Protection of Human Subjects""). Although commonly used in the fields of health and social sciences, the role and purpose of IRB, the different categories of IRB reviews, the timeline from planning and submission of an IRB application, and the general rules for citing IRB in publications and grant proposals are not widely understood in the computer science education research community. In this poster, the authors describe the history, the purpose, review categories, and guidelines for reporting on the IRB. The authors will tailor the discussions on the different IRB review categories to computer science educators interested in conducting computer science education research with their students.",Do I Need an IRB?: Computer Science Education Research and Institutional Review Board (IRB) (Abstract Only),NA:NA:NA,2018
Candido Cabo:Ashwin Satyanarayana,"First-year, college-level computing courses are gateway courses with low passing rates, resulting in student attrition and transfers out of computer science degrees. Learning Communities (LC) are a group of students who enroll in two or more courses, generally in different disciplines that are linked together by a common theme, in an academic semester. LCs capture and combine two important parts of college life: education and student cooperation. At our institution we have implemented a LC linking three first-year courses (Introduction to Computer Systems, CS0; Problem Solving with Computer Programming, CS1; and English Composition I) for over five years. In this study, we empirically show the pedagogical impact of LCs on student academic retention and performance outcomes in first-year computing courses (CS0 and CS1). We compared performance, attendance and study habits of students taking the computer courses as part of a LC (LC group) with students taking the same courses outside the LC (nLC group). Our results show that when first-year students take computing courses as part of the LC, retention rates increase and students perform significantly better. For example, student performance in three basic programming skills (sequence, selection and repetition) increases significantly from 66% (nLC; n = 146) to 82% (LC; n = 112) when students take the CS1 course as part of a LC. We also found that LCs promote class attendance and that the nature of students' relationships with classmates may play a critical role in the improvement of student performance observed in LC students.",Building a Community of First Year Students Improves Student Retention and Performance in Computing Courses: (Abstract Only),NA:NA,2018
Paul-Marie Moulema,"In an ever changing and globalizing work environment, Educational institutions in the field of Information Technology (IT) face a constant challenge in developing relevant and competitive courses and curricula that stay up to date with changes in technology. Developing curriculum should go beyond the supply-centered educational approach where institutions and faculty alone are responsible for the design of curricula and instead, should be from end-to-end a collaborative effort from all stakeholders. However, the current collaborative efforts in developing curricula only involve industry and academia. Even though students are the raison d'être of the curriculum, they are still perceived as merely consumers of knowledge. Students are kept out of the curriculum development process and their expectations, perceptions, and opinions often are not taken into consideration. In this poster, the author proposes a distributed and collaborative curricula design framework that promotes a closer integration of all stakeholders namely academia, industry, and students. Similar to the PIECE (Partnering Industry and Education for Curricular Enhancement) model, the proposed framework prescribes a multi-stage curriculum design process from initial analysis to final assessment. In addition, the author plans to conduct an anonymous survey of CS/IT major students at WNEU and explores the benefits of integrating students in the curriculum development process. Preliminary investigation suggests that the integration of students in the curriculum development process would improve students' engagement in classes, and create an atmosphere of trust and a sense of ownership for students. Ultimately, this would enable institutions to create consumer-friendly curriculum and programs.",On Integrating Students in the Development and Review of IT Undergraduate Curriculum: (Abstract Only),NA,2018
Mostafa Mohammed:Sushma Mandava:Jieun Chon:Margaret Ellis:Clifford A. Shaffer,"Understanding basic manipulation of object references is a conceptual prerequisite to understanding many data structures, beginning with linked lists and trees. Unfortunately, there is often a gap between introductory programming courses that introduce reference variables and creation of objects, and second-semester programming courses that immediately skip to introducing linked lists. As a consequence, students begin using references extensively during Data Structures and Algorithms courses without enough knowledge about how references work. To fill this gap, we created a tutorial about basic use of references and the manipulation of objects using references. The tutorial, implemented as part of the OpenDSA eTextbook system, focuses on learning through visualizations and interactive exercises. Students work a series of small code-writing exercises, inspired by the JhavePOP system. These exercises use simple program visualization to let students see the result of running their program. Manipulative exercises test student proficiency at reading and understanding small sections of code that use references to link objects. All exercises are automatically assessed, providing immediate feedback. Our evaluation of the tutorial's effectiveness will focus on identifying and correcting student misconceptions. Optional sections of the tutorial introduce the program stack and the dynamic memory heap.",An Interactive Tutorial for Learning to Manipulate References: (Abstract Only),NA:NA:NA:NA:NA,2018
Reza Soltanpoor:Charles Thevathayan,"Introductory programming students unable to grasp and apply abstract concepts are known to become disengaged and drop out of the course. The large class sizes, increasing diversity and inadequate teaching support have exacerbated the problems leading to failure rates as high as 50% in exams. To address this issue, we employed a novel learning analytics technique named Personalized Prescriptive Quiz (PPQ). Our approach combined the rich metadata captured for each question including topic, cognitive level, difficulty index, and the underlying concepts(s) with individual student performance in the past to arrive at personalized learning pathways designed to correct the root-causes for their misunderstandings. Over 90% of surveyed students agreed that the PPQ has been effective in clarifying their misconceptions before the final exam. Following our experiments, the exam pass rate has gone up by over 40%.",Correcting Novice Programmers' Misconceptions Through Personalized Quizzes: (Abstract Only),NA:NA,2018
Godmar Back:Lance Chao:Pratik Anand:Thomas Lux:Bo Li:Ali Butt:Kirk Cameron,"Computer systems form the backbone of computing from very small, mobile devices to the huge datacenters that power the digital economy. These systems often exhibit large degrees of variability in their performance that is little understood, but such variability threatens to severely diminish the effectiveness of critical systems upon which society relies. Funded by a large NSF grant, the VarSys project at Virginia Tech researches the sources of variability in computer systems and develops methods to overcome it. We believe it is crucial to raise awareness of the phenomena surrounding variability in computer systems at the undergraduate level. Towards this end, we are connecting the research techniques developed as part of this NSF award to ongoing classroom projects in a core systems course. Our key insight is to expose students to the phenomenon as it occurs in the systems software modules (e.g. a memory allocator, a fork-join thread pool) they are themselves developing in the course. We have implemented a web-based system that allows students to submit their own systems-level code to a specialized cluster which then benchmarks it while systematically varying a number of ordinal and categorical variables. These variables reflect environmental factors that can influence the performance of complex systems. Students are then presented with a visual statistical analysis of the results and asked to interpret those results. We have successfully deployed this system in 2 semesters to over 250 students and collected student data about their experience with this system and are documenting our progress towards these important learning objectives.",Teaching Variability in a Core Systems Course: (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2018
Michael H. Dunn:Robert J. Caruso:Laurence D. Merkle:Ray Trygstad,"Cybersecurity is a significant challenge facing our society, and the industry is in desperate need of more talent. With a projected worker shortage of 1.8 million by 2022, it is imperative to recruit more young people to study and work in this critical field. One time-tested method of engaging young people to explore prospective careers is through Scouting's advancement program. The Girl Scouts of the USA has recognized this need, and recently announced that they will be introducing a series of cybersecurity badges for their programs. This poster outlines a proposal for a Cybersecurity merit badge for the Boy Scouts of America (BSA). A background on the merit badge program is presented, including research supporting the idea that badges can be an effective method at engaging young people in experiential learning. A set of draft recommended requirements is presented. The authors have drafted a proposal for consideration by the BSA, and this poster reports the status of that proposal and the authors' efforts at engaging the BSA.",Proposed Cybersecurity Merit Badge for the Boy Scouts of America: (Abstract Only),NA:NA:NA:NA,2018
N. Rich Nguyen,"Increasing women's representation in computer science (CS) has become a national priority. One of the many reasons female students nationwide choose not to finish their study in CS is that they do not feel a deep sense of belonging in the major. To foster the sense of belonging among female CS students, the affective learning outcomes, which are adapted from Bloom's Taxonomy on human learning, are integrated into the context of peer tutoring as five successive stages. Through the five stages of affective peer tutoring, students gradually deepen their sense of belonging in CS by: (1) being aware of the tutoring services; (2) proactively seeking answers to their programming questions; (3) recognizing the value of self-efficacy; (4) discussing learning issues in a supportive environment; and (5) contributing to a peer-led learning program to help others. Our data indicate that affective peer tutoring has resulted in an increased level of peer-to-peer interaction outside of the classrooms, significantly better grade performance in introductory programming courses, and improved retention rate among female CS students. Therefore, this poster may be of interest to any CS educator who wishes to improve the interaction, performance, and retention among female CS students while sustaining a peer-led learning program at their institution.",Affective Peer Tutoring: (Abstract Only),NA,2018
Zack Butler:Ivona Bezakova:Kimberly Fluet,"End-of-course evaluations and other student surveys typically include the opportunity for students to provide free-form comments. These are rich sources of data but are often only subjectively taken into account to further improve course delivery or analyze the effectiveness of assignments. We designed several puzzle-based assignments for typical CS1/2 topics and surveyed students as part of our efforts to analyze the assignments' efficacy and improve them over time. The surveys included traditional measures such as demographic data, Likert-scaled questions about assignment perceptions, and open-ended comments. With thousands of survey responses, we wanted to see if the open-ended comments yield additional, statistically significant, insights on either the assignments or students' learning. We developed a coding scheme for the comments using grounded theory analysis to represent patterns among the data. After refining the coding scheme we statistically analyzed the comments and found some interesting relationships, not apparent from the Likert-scaled questions, among certain codes. We also conducted extensive semi-structured interviews with instructors and student teaching assistants, also using grounded theory analysis to develop a set of codes for these different perspectives. The coding processes themselves allowed for a deeper understanding of the concerns about and appreciation for the assignments from both groups of participants. This poster reports on how the statistical results and the coding schemes, including the overlap and dissonance between the two coding schemes, inform our continued efforts to improve both assignment development and future research on the teaching and learning of CS concepts.",Qualitative Analysis of Open-ended Comments in Introductory CS Courses: (Abstract Only),NA:NA:NA,2018
Michael A. Posner:Darina Dicheva:Christo Dichev:Don Goelman:Lillian (Boots) Cassel,"Data Science, often described at the intersection of computer science, statistical thinking and analysis, and subject matter expertise, has seen an exponential growth in the past few years. Courses (and entire programs) have been appearing at such a fast rate at most institutions of higher education, as well as some high schools, that comparisons between curricular and delivery models and rigorous discipline-based education research are often overlooked in order to gain competitive advantages. This study attempts to rectify that absence by evaluating, comparing, and discussing four different courses offered at two different institutions of higher education. Funded by NSF via a collaborative grant (DUE-1432438), faculty from Computer Science and Statistics departments collaborated on the development and evaluation of introductory courses in Data Science for all students, using a discipline-based education research approach. Data on students were gathered including demographics, curriculum, statistical knowledge, and attitudes towards Data Science. Post-course growth was measured, when available, and compared through formal statistical inference. End-of-course evaluations, with supplemental questions about student learning, were reviewed and will be summarized. Finally, reflections on successes, challenges, and lessons learned will be shared.",1 Grant + 2 Institutions + 3 Course Variations = Data Science 4 All: (Abstract Only),NA:NA:NA:NA:NA,2018
Md Mahmudur Rahman,"A core challenge in introductory programming courses during the freshmen year is getting students to understand how a static textual representation (source code) maps to a highly dynamic process (program execution). Most students nowadays are visual learners who learn programming concept better through web-based visual and interactive learning instead of learning from traditional black board lecturing styles. This presentation will report our experience with positive learning outcomes in teaching an introductory programming course in Python by using a dynamic visual programming development environment based on flow-charts (RAPTOR) and active learning with an interactive eBook (zyBook). In this study, eleven sections of COSC 111 were included over three semesters as control and experimental groups. Analysis showed a marginally significant difference (F (1,5) = 5.87; p = 0.060) between sections taught via the traditional method and sections taught with the proposed pedagogical innovation. We also found that there are statistically significant positive correlations in between uses of the interactive book (eBook) and performances of students in tests. To add to our understanding of what students were experiencing, we also administered a survey to students at the end of the course. Regarding learning styles and tools, survey result showed that the eBook was helpful in understanding programming concepts (71.5%), that the instant feedback that the online book provided was helpful (82.9%), that the class discussion and interaction were helpful (85.7%). Overall, it seems that the proposed pedagogical approaches have made a positive difference by increasing student motivation and engagement, and reducing failure rates.",Infusing Visual Programming and Interactive Learning to Teach an Introductory Programming Course with Positive Learning Outcomes: (Abstract Only),NA,2018
Todd Lash:Maya Israel,"Now more than ever, students with disabilities are participating in computer science (CS) education. As CS increasingly becomes a part of the general curriculum in grades K-8, ensuring that these learning experiences are equitable and accessible for a wide range of learners may help broaden the diversity of individuals who choose to engage in computing experiences throughout their schooling and into their professional lives (Qualls & Sherrell, 2010). Therefore, it is essential to identify pedagogical approaches that lower barriers for students with disabilities and give teachers new tools to help those students succeed. Initial findings will be presented from a National Science Foundation STEM+C project derived from a series of qualitative case studies about challenges faced by K-8 students with disabilities in CS education. These findings have been converted to practitioner-oriented pedagogy briefs, written in the form of vignettes, and grounded in our own research findings as well as special education best practice. These pedagogy briefs are disseminated to practitioners and used for professional development and intervention work. Current topics include: Universal Design for Learning, project planning, co-teaching, working with paraeducators, and promoting student collaboration. Pedagogy briefs will be available and can be found on the Creative Technology Research Lab (CTRL) website: http://ctrl.illinois.education.edu",Bridging the Research to Practice Gap with Project TACTICal Briefs: (Abstract Only),NA:NA,2018
Matthew Peveler:Evan Maicus:Buster Holzbauer:Barbara Cutler,"Traditionally, automated testing and grading of student programming assignments has been done in either a jailed sandbox environment or within a virtual machine (VM). For a VM, each submission is given its own instantiation of a guest operating system (OS) running atop the host OS, with no ability for a given submission to affect anything outside the VM. However, using a VM is expensive in terms of system resource usages, especially for RAM and memory, making it less than ideal for solutions without unlimited resources. Jailed sandboxes on the other hand allow student submissions to run directly on the server. Sufficient security measures must be implemented to ensure that students cannot access each other's submissions or the server at large, and must prevent runaway programs, over-utilization of system resources. Jailed sandboxes have a larger attack vector than VMs. Within the past several years, container systems have been gaining popularity and usage within the computer science industry, primarily through solutions such as Docker. These containers give similar security protections as a VM, but with better performance due to being able to utilize of resources installed within the host OS and other containers. However, containers do not have the full isolation of a VM, and thus implementing Docker for autograding ends up facing its own set of security concerns, as well as with the increased system resource usage. In this poster, we will analyze how well containers work, measuring system resources and throughput of submissions of containers against the traditional jailed environment.",Analysis of Container Based vs. Jailed Sandbox Autograding Systems: (Abstract Only),NA:NA:NA:NA,2018
Mehmet Ergezer:Bryon Kucharski:Aaron Carpenter,"Artificial intelligence (AI) and machine learning are rapidly developing fields, garnering increased attention from the public, as well as academia and industry. Recent advances allow us to use our smart devices at home to control TVs, speakers, and lights. A smart speaker that is plugged into the wall can handle powerful processing that can service complex user requests. However, as we rely more and more on AI conveniences, we expect them to be at our disposal when we are moving around. In this poster, we present preliminary work on the development of a new upper-level undergraduate course open to all computer science, electrical engineering, and applied mathematics students at Wentworth Institute of Technology (WIT). The new course, titled Embedded AI (EAI), introduces topics from embedded systems, artificial intelligence, digital signal processing, linear algebra, and probability and statistics. The proposed course includes lectures introducing the theory behind each topic and laboratory assignments that provide the students with the hands-on experience. At the end of the semester, students develop an embedded AI project of their own. An interdisciplinary academic team of computer scientists and electrical and computer engineers has been working on a curriculum and researching different platforms, datasets and sensors that will ultimately enable students at WIT to develop an embedded device that can support AI tasks as well as give the students the practical skills that employers seek. Handouts will be prepared with sample curriculum and breakdown of topics.",Curriculum Design for a Multidisciplinary Embedded Artificial Intelligence Course: (Abstract Only),NA:NA:NA,2018
Yifan Guo:Yang Song:Edward F. Gehringer,"Open-source course projects offer students a glimpse of real-world projects and opportunities to learn about architectural design and coding style. While students often have more difficulties with these projects than with traditional ""toy"" projects, instructors are also spending excessive time on grading miscellaneous projects. There is an improvising need for means to help students and instructors with their difficulties. This poster presents our work on predicting which course projects are likely to fail at an early stage with machine learning approaches. We collected metadata from 247 course projects in a graduate-level Object-Oriented Design and Development course over the past 5 years, built models to fit the course projects and use the classifier to help instructors to identify potential failing projects, thus to help students to salvage their works. By assuming that the project acceptances are related to the working patterns of project teams, we made innovations of adding temporal-based patterns into the training data, and achieved 86.36% classification accuracy with the addition of those features. We also proved several observations, such as most of the rejected projects are those begun relatively late during the project period, and the projects which modified more files/code does not result in better possibility of being accepted. By contrast, accepted projects tend to deliver a volume of code that is neither very small nor very large, compared to rejected ones. Our results also suggest that setting milestone checkpoints at roughly a week before the submission deadlines would enable more students to succeed in their OSS projects.",Early Detection on Students' Failing Open-Source based Course Projects using Machine Learning Approaches: (Abstract Only),NA:NA:NA,2018
Caelin Bryant:Jonathan Gilmour:Beatriz Herce-Hagiwara:Anh Thu Pham:Halle Remash:Marli Remash:Jonah Zimmerman:Sarah Dahlby Albright:Samuel A. Rebelsky,"The underrepresentation of women, students of color, and people from lower-SES (socio-economic-status) backgrounds within computer science remains a national issue. Recent studies demonstrate one reason: persistent stereotypes about ""who does computer science"" can cause minority groups to preclude interest in the field. Unfortunately, these stereotypes are not the only threat to diversifying the discipline. Engaging a diverse group of individuals in computer science is unlikely so long as computing curriculum is perceived as ""irrelevant"" and ""asocial/"". Confronting the stigma of triviality applied to computer science, much like approaching student perceptions about who can do computer science, is a necessary step for increasing the perceived applicability of the discipline.  As a step in combating the perception that programming curriculum is irrelevant, we developed and ran a week-long summer coding camp for local middle school students that camp applied principles of computing for social good with data science approaches to encourage campers to consider how computing could help them explore societal issues. Throughout the week, campers learned how to extract meaning from their work and gained experience collaborating in pairs to solve problems.  In this poster, we discuss the camp curriculum and its emphasis on the applications of computing. We consider the effects of the camp on the self-efficacy of campers and their perceptions of computer science. We then present some recommendations for those intending to conduct similar camps.",A Middle-School Code Camp Experience Emphasizing Data Science for Social Good: (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Zhiping Xiao:Siqi Li:Zachary Pardos,NA,"AutoQuiz: A Personalized, Adaptive, Test Practice System (Abstract Only)",NA:NA:NA,2018
Maddie Zug:Hanna Hoffman:Forest Kobayashi:Miles President:Zachary Dodds,"CS for All has set computer science on an unusual journey. Literacies are skills asked of us all: thus, ""CS for All"" identifies computing skills as a full-fledged human literacy. Yet, Computer Science departments are not uniformly ready to build a computing literacy for all students. This project has investigated on how different institutions are coping with this challenge.  We share the results of a 50-institution curricular survey, tracking CS course offerings for a variety of cohorts outside the CS major. We add additional detail to this big-picture snapshot with data from a ten-year experiment offering a biology-and-computing introductory course. The downstream outcomes are heartening in both computing skills (no difference at all in subsequent performance relative to a peer control-group) and in spurring overlapping interest. We also share several new paths, termed ""bridges"" and ""injections,"" to help computing contribute to the academic identities of students in other disciplines.  Just as cogent writing, critical reading, and compelling speaking are today/s hallmarks of literacy, the future may ask us to make computing part of our common goals and expectations. Through local and national data, this project is exploring new curricular paths with the goal that CS in many forms -- as a discipline, as an academic department, and as an identity of its own -- can fully support the challenge of ""CS for All.""",CS for All Academic Identities: (Abstract Only),NA:NA:NA:NA:NA,2018
Fay Zhong,"How to actively engage students using a more personalized approach in both online and face-to-face classes is an important topic in Computer Science discipline. Studies showed that adaptive learning approach can be used to redesign a course to achieve a better and more effective learning experience for the students. As a result, the Data Structures and Algorithms course at CSUEB has been redesigned using Smart Sparrow platform, with engaging adaptive learning objects embedded in the Blackboard LMS. Other tools like Open Educational Resources and ZyBook, as well as project-based group assignments were also utilized to transform the classes and student learning at the same time. The author reports on some preliminary results of a collaborative NSF grant that promotes the STEM education to a more diverse student body. Comparative results for control courses and the redesigned course demonstrate our findings and confirm the effectiveness of adaptive learning.",Designing Adaptive Learning Objects for Enhanced Student Engagement in Data Structures and Algorithms: (Abstract Only),NA,2018
Samuel Breese:Evan Maicus:Matthew Peveler:Barbara Cutler,"A flexible late submission policy can be used to help address breaches of academic integrity and student stress as they relate to programming assignments. To this end, we examine the use of late days -- earned, penalty free deadline extensions -- during our large format, two-semester introductory programming sequence. In particular, we examine correlations between patterns of student assignment submission and student plagiarism. Lexical-analysis-based techniques are used to identify probable cases of plagiarism across student submissions. Furthermore, we present metrics for estimating student stress at submission time. Our metric utilizes the automated grading score of the student""s current and previous submission attempts, the imminence of the assignment""s deadline, and the availability of late days. We corroborate these patterns with self-reported student surveys conducted at the end of the academic year.",Correlation of a Flexible Late Day Policy with Student Stress and Programming Assignment Plagiarism: (Abstract Only),NA:NA:NA:NA,2018
Stefan Seegerer:Ralf Romeike,"As the importance of Computer Science for all grows, questions about the foundation of CS related skills and knowledge everyone should be familiar with arise. Different education institutions or initiatives offer courses or other materials to provide CS knowledge and skills necessary to participate in future life, or any profession. Among these institutions are numerous universities and colleges which started to offer Computer Science courses explicitly aimed at non-CS majors. These course materials form an extensive data pool for determining crucial CS knowledge for non-majors. While the courses differ with regards to intention and topics, reflect a personal perception of the designer, or address specific local demands, they may still contain a foundation of CS for everyone. By examining multiple university and college courses, one can determine this foundation. In this preliminary study, we analyzed an initial sample of thirty different international Computer Science for all courses offered at colleges and universities between 2010 and 2017. The materials - syllabi and schedules of these different courses - were examined using a qualitative content analysis as proposed by Mayring. Based on coding results from the content analysis we identified the types of learning objectives those courses aim at. We also list inductively derived topic categories (e.g., representation of data, security, and social implications) and present different programming languages or tools used within those courses. Afterwards, the frequencies of topics in proportion to the number of courses were reported and associated with the previously identified learning objectives.","Goals, Topics and Tools of Computer Science for All University or College Courses: (Abstract Only)",NA:NA,2018
Ana Milanova:Barbara Cutler:Buster Holzbauer:Evan Maicus:Samuel Breese:Elizabeth Dinella:Matthew Peveler,"With surging enrollment in Computer Science courses at both the introductory and advanced level, it is critical to leverage automated testing and grading to ensure consistent assessment of student learning. Program analysis tools allow us to streamline the grading process so instructors and TAs can spend more time teaching, one-on-one tutoring, and mentoring students. We present complex use cases of automated assignment testing and grading within the open-source homework submission system, Submitty. Students receive immediate and detailed feedback from the automated grader, and can resubmit to correct errors. Submitty uses custom-built grading tools, including difference checking of plaintext program output, instructor authored assignment-specific custom graders, and static analysis tools that reason about program structure. In addition, it employs a variety of external tools, including version control (Git and SVN), unit testing frameworks (JUnit), memory debugging tools (Valgrind and DrMemory), and code coverage tools (Emma). In this poster we describe our experience with memory debugging and code coverage tools, and outline plans to include immutability inference and verification.",Program Analysis Tools in Automated Grading of Homework Assignments: (Abstract Only),NA:NA:NA:NA:NA:NA:NA,2018
Juan Chen:Li Shen:Jianping Yin:Chunyuan Zhang,"With the increasing demand of big data technology, there has been a growing interest of introducing high performance computing in computer science curriculum. One challenge in helping students understand the nature of efficiency and scalability issues in high performance computing is the lack of opportunities for them to be engaged in large-scale applications that run on supercomputer system architecture. This poster presents a collection of example projects that have been used in a parallel computing course in multiple universities in China, including National University of Defense Technology, Sun Yat-sen University and Hunan University. These projects were adopted from a wide range of scientific computing applications such as CFD, text mining of biomedical literature and so on. The large-scale computing resource for courses is supported by two National Supercomputing Centers, one in Guangzhou and the other in Changsha. The poster describes the background, objective, structure, task, practice process and outcome for each project. It also discusses the impact on student understanding all kinds of key topics and major challenges related to computational efficiency and scalability. Such projects build a positive practical environment to make students indulge in doing all kinds of interesting and helpful trials to validate their assumptions, especially when they have different perspectives or results for one problem. The poster presents our design evaluation rubric to reflect the effectiveness of our practice, as well as the statistics about the students"" achievements for the last three semesters.",Design of Practical Experiences to Improve Student Understanding of Efficiency and Scalability Issues in High Performance Computing: (Abstract Only),NA:NA:NA:NA,2018
Ke Zhang:Mingyu Chen:Yungang Bao,"To cultivate students"" capability of computer system thinking and software/hardware programming, experimental curriculum of computer system is regarded as one of the most effective methods. Some universities have set up hardware labs equipped with several or dozens of FPGA (Field Programmable Gate Array) boards for these courses. However, these lab kits are always in a relatively low utilization rate and how the students"" capability is improved by these assets is not easy to be evaluated. Inspired by the merits of FPGA public cloud (e.g. Amazon AWS F1 instance), an in-house-designed FPGA-based online cloud platform (named ZyForce) is proposed to deploy in UCAS. This platform is equipped with 40 custom designed boards using Xilinx Zynq UltraScale+ MPSoC FPGAs and the utilization rate of these education resources is boosted by means of advanced cloud computing technology. With ZyForce, students remotely carry out lab assignments (e.g. MIPS, RISC-V or domain-specific architecture processor design with cache/memory, DMA, accelerator and performance counter) as using local FPGA boards; instructors can analyze the downloaded operation log file for each student and know how these kits are being used. It""s believed that this kind of online hardware lab appliances provides a novel pay-as-you-go service model for those universities in remote regions who cannot afford to set up their own hardware laboratories, and also facilitates our students, the future scientists and engineers, with this promising cloud development approach.",ZyForce: An FPGA-based Cloud Platform for Experimental Curriculum of Computer System in University of Chinese Academy of Sciences (Abstract Only),NA:NA:NA,2018
Yu Zhang,"The rapidly growing scale of modern computer systems has been increasing the skill gaps between graduating students and industry expectations. The Compiler Course, as one of the core CS courses, is not only a course introducing the theory and practice of programming language translation, but also a comprehensive course cultivating students/ multidimensional competencies, such as programming, language design, software engineering, communication and collaboration, etc. Writing a compiler for a toy language is a common assignment in many compiler courses. Yet our compiler practice system differs from most of its peers in several aspects: integrated with real open source LLVM compiler, practice of some modern compilation mechanisms, process control and version management (using git), team work, etc. We designed two kinds of projects to integrate the LLVM compiler, one is coding class, e.g. developing an LLVM IR generator and a JIT-compiler on LLVM IR; the other is source code understanding class, e.g. providing guidance and issues for understanding the mechanisms of Clang parser or static analyzer. We also designed some team projects to let students investigate some modern language features and their implementation mechanisms, to discuss within and among teams, and finally to give team presentation. The poster describes the components of our compiler practice system, related practice support package and guidance. Some tradeoffs among difficulty, complexity, time and knowledge points are discussed. So far we have been practiced and improved the practice system for 4 years, and lessons as well as experiences are shared on the poster as well.",Compiler Practice System Integrated with Real Open Source Compiler: (Abstract Only),NA,2018
Stacey Watson:Julio César Bahamón:Harini Ramaprasad:Heather Richter Lipford,"Soft skills such as collaboration, communication and time management are essential to the success of computer science students both in school and after they enter the IT profession. While employers value these skills highly, there are so many technical skills to cover in computer science programs that these soft skills are not typically primary learning objectives for CS classes. As such, it is difficult to find time and space to address them directly. In this study, we investigate whether Classcraft, a game-based classroom behavior management platform designed for K-12 students, can motivate undergraduate students to develop their soft skills in large computing classes. To this end, we utilized Classcraft with 234 students across two face-to-face sections and one online section of an undergraduate ""Introduction to Operating Systems and Networking"" course to determine whether gamifying the engagement component of the course would motivate students to participate in co-curricular activities, enhance student collaboration and improve communication and time management. There were no in-game activities - the students in each section of the class earned experience points in Classcraft as a reward for completing class activities ahead of time, collaborative learning and teamwork, and asking or answering questions in class or via discussion forums in our learning management system. In this poster, we report our preliminary results of the impact of such a platform on student engagement in soft skills.",Developing Soft Skills with a Classroom Behavior Management Game: (Abstract Only),NA:NA:NA:NA,2018
Paulina Haduong:Karen Brennan,"Debugging is an essential practice in programming. Yet for many novice programmers, the process of finding and fixing errors in code can be frustrating. Debugging is rarely explicitly taught in introductory programming courses, perhaps because best practices of teaching debugging are largely undefined. In K-12, teachers new to teaching CS may also experience trepidation about supporting student-directed work in languages and environments unfamiliar to them. In this poster, we build on previous research that documented the individual and social debugging strategies employed by young novice programmers, from studying projects to asking for help (Brennan, 2013). With a focus on classroom settings, we have designed a set of debugging activities for young people working in Scratch--the Getting Unstuck activities. Through these interactive activities, students and teachers explore creative and collaborative strategies for debugging Scratch projects. In July 2017, the authors piloted these strategies with 17 novice programmers, ages 14 to 18. This poster describes this new resource, reports on findings from the pilot testing, and offers recommendations for the design of K-12 programming activities.",Getting Unstuck: New Resources for Teaching Debugging Strategies in Scratch (Abstract Only),NA:NA,2018
Peter E.J. Kemp:Miles G. Berry:Billy Wong,"In 2014 English schools undertook a shift from a mainly ICT based curriculum to one that focuses on computer science. Qualifications in computing have been introduced and ICT was subsequently phased out. The question now arises as to whether the students who would have previously taken ICT qualifications are now taking the new computer science courses. Using student data for all English examinations taken by 16 and 18 year olds, we have profiled the student cohorts taking ICT and computing, as well as the schools offering them. We have analyzed the differences between these two cohorts in terms of prior attainment, course outcomes, gender, socio-economic groupings, ethnicity, and geographic spread. We find that there are large differences between the two groups: computing has far fewer female, working class and particular minority ethnic students. Computing students tend to have achieved better in mathematics than their ICT peers, and there is some evidence that academic selection criteria are being used to restrict entry. We conclude that it is unlikely that all, or even most, students who would have previously sat ICT qualifications will now sit qualifications in computer science. The shift in curriculum and examinations may have produced a less inclusive subject.",The New Computing Curriculum in English Schools: A Statistical Analysis of Student Participation (Abstract Only),NA:NA:NA,2018
Gina Sprint:Andy O'Fallon,"Many universities offer an optional CS0 course taken prior to traditional CS1 and CS2 courses. Students enrolling in CS0 represent a variety of programming experience levels and majors. To more successfully recruit students to CS0 and retain students as CS majors, it is important to engage students in the course materials early on and frequently. There are several types of course materials (e.g. lesson notes, in class activities) and approaches to design engaging material (e.g. team-based learning, POGIL). In this poster, we focus on programming assignments that incorporate engagement practices put forth by the National Center for Women in Information Technology (NCWIT). NCWIT sponsors a program called EngageCSEdu, which is a collection of peer-reviewed introductory CS materials that are contributed by faculty. All materials in the database have demonstrated evidence of NCWIT""s engagement practices. In this poster, we present seven of our programming assignments that have been accepted into the EngageCSEdu database, two of which have won Engagement Excellence awards. The assignments cover the topics in a Python-based CS0 course at Washington State University. The poster presents the assignments, their learning outcomes, and their engagement practices. We include student commentary and examples of student submissions that demonstrate students"" interest and creativity. Lastly, we present advertising materials we deployed that showcase the CS0 programming assignments to recruit more students to take the course. The assignments, student examples, and advertising efforts we present offer insights for educators about recruiting, engaging, and retaining students of all majors in introductory CS courses.",Engaging Programming Assignments to Recruit and Retain CS0 Students: (Abstract Only),NA:NA,2018
Neal Mazur:Joseph Zawicki:Sarbani Banerjee,"The poster describes an innovative approach to help secondary school teachers enhance their computer science (CS) knowledge through the Google funded CS4HS (Computer Science for High School) program. Through a 4-day professional training workshop teachers learn different computational thinking skills, CS concepts and related tools in an attempt to promote CS education by establishing a computer club and eventually teaching CS courses in their schools. The training includes units from the Exploring Computer Science curriculum and brainstorming sessions on starting clubs, club activities, and strategies for recruiting more girls and minorities in clubs. Participating teachers are invited back during the school year to participate in events including a CS conference and a competition and showcase for their students to continue the momentum started by the workshop. Teachers share the barriers to establishing clubs and success stories of being the first teachers to introduce computer science into their schools. More than 150 teachers from more than 50 secondary schools have participated in the CS4HS workshops since the program""s inception. The result is that many of the participating teachers now have established computer clubs; many teach CS courses and many bring their club students to participate in the annual CS4HS Showcase and Competition event at Buffalo State College; all contributing to the goals of CS4HS which is to promote CS education in every secondary schools of Western New York. This will create a pipeline of aspiring CS students and help to alleviate the current and predicted shortage of CS professionals.",Attracting Secondary School Students to Computer Science through Training Teachers to Establish Computer Clubs: (Abstract Only),NA:NA:NA,2018
Shannon Campe:Jill Denner:Emily Green:Linda Werner,"Pair programming is considered a best practice since it has been shown to reduce the gender gap and increases confidence for university students in introductory computer programming courses. However, little is known about what it looks like in middle school. This study was designed to provide detailed descriptions of what pair programming looks like, how it varies across demographic groups, and how it changes over time. The data presented in this poster is from a subset of a larger study (81 middle school students) which consists of 66 (28 girls; 38 boys) students (55% Latino/a; 23% White) who worked in 33 same-gender pairs (42% female) to design and program their own video game. Data include video and audio recordings, screen capture files and logging files. The findings suggest that students are spending log periods of time not interacting, and those with more experience have a third person present more often while programming. When pairs are interacting specifically about their game the girls spend more time engaging constructively around ideas and solutions in comparison to boys. The results will be used to inform strategies to support effective pair programming in middle school, and to inform future studies.","Pair Programming Interactions in Middle School: Collaborative, Constructive, Dismissive, or Disengaged? (Abstract Only)",NA:NA:NA:NA,2018
Kris Jordan:Gabi Stein,"This poster investigated the data from the past year of CS1 and found overwhelming evidence that students who have taken calculus are significantly more likely to succeed and less likely to fail that those who do not. On a Fall 2016 CS1 final exam, students who had not earned credit for a first course in college-level calculus were 2.8 times more likely to fail it than those who had (p=<0.0001,N=844). The mean final score for students with calculus was an 84, and those without was 61 (p=<0.0001). The result surprised the instructor, course staff, and faculty familiar with the course because the course itself does not emphasize mathematical or scientific computing. The course was Java-based, objects-early, and introduces both object-oriented and imperative programming fundamentals. The effect was evident across a range of problems, none seemingly requiring beyond basic algebra. In the Spring of 2017, the instructor and course staff set forth to explore these questions and close the math gap discovered in the Fall of 2016. This poster further proposes to develop interventions to aid those with a lower math maturity level through introducing a specialized CS1 to better accommodate those with a lower math maturity level by reducing the pace and installing prerequisites for the established CS1. Prospective Computer Science students at liberal arts colleges and universities enter with a wide range of mathematical backgrounds. Failing to acknowledge these disparities is demoralizing to students during their first course in CS and is counter-productive to inclusivity.",The Math Gap in an Inclusive CS1 Course: (Abstract Only),NA:NA,2018
Andrea Bonani:Vincenzo Del Fatto:Gabriella Dodero:Rosella Gennari,"Smart interactive tangible objects (briefly, tangibles) can help teachers in the scaffolding of algorithmic thinking of 10-13 years old children. In this work, tangibles deal with graph algorithmic thinking. By following an action-research design approach, tangibles were rapidly developed and used in studies with children and teachers (Bonani et al., 2017, 2018). This poster shows their evolution and the most recent experience: a field study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. Data collected by researchers were mixed (qualitative and quantitative), concerning engagement and learning (e.g., Gennari et al., 2017). Results suggest that tangibles engage pupils and help them understand simple and connected graphs. Future work will seek their adaptation to classes (e.g., Di Mascio et al., 2012).",Tangibles for Graph Algorithmic Thinking: Experience with Children (Abstract Only),NA:NA:NA:NA,2018
Shan Jiang:Gary K.W. Wong,"In recent years, we have seen an increasing interest in bringing programming back to K-12 education. Many educators begin to recognize the necessity of helping children develop computational thinking (CT) as an essential skill to address 21st century challenges. In this poster, we report the preliminary findings from the first year of a 3-year longitudinal study based on a coding curriculum for Grade 4 to Grade 6. This 3-year study aims to gain an understanding of how coding activities helps children at upper primary school ages develop CT for problem solving, and if this problem-solving mindset is transferrable to other contexts, for example, daily life scenario and mathematical field. A part of the research focuses on a comparative study between students' intrinsic motivation of coding (i.e. ""plugged"") activities and ""unplugged"" activities (i.e. learning concepts from computer science through paper-based games without programming), which helps us understand the advantages and disadvantages of different learning approaches to CT. At the end of the first year, around 600 fourth graders"" were assessed with their CT competence and affective tendency through: (1) a pre/post-test on the CT skill and mathematical ability; (2) a questionnaire on intrinsic motivation in plugged and unplugged activities. The preliminary findings indicate that students have gained a good programming-related knowledge and improved problem-solving skills through our curriculum. They were intrinsically motivated to participated in both types of activities. However, students did not show the ability to transfer computational thinking to mathematical context.",Are Children More Motivated with Plugged or Unplugged Approach to Computational Thinking?: (Abstract Only),NA:NA,2018
Dale R. Thompson:Bryan Hill:David Shannon:Himasri Lekkala:Wen-Juo Lo,"Training Arkansas Computing Teachers (TACT) is an NSF-funded three-year project, designed to rapidly address both a) Arkansas' pressing need for computer science (CS) talent and b) the new law requiring all Arkansas high schools to provide access to CS instruction for their students. The goal is to train high school teachers on computational thinking practices and the seven big ideas from the AP CS Principles curriculum framework and to make them CS-certified teachers. The TACT professional development (PD) consists of a two-week face-to-face hands-on workshop for high school teachers during the summer and offers online support throughout the year. During the first week, TACT hosts the UTeach CS Principles course, a classroom-ready curriculum designed in alignment with the CS Principles framework. During the second week, TACT hosts the TACT CS Boot Camp designed to cover CS topics that are typically covered in licensure exams. Effectiveness of the project is measured through the surveys taken by teachers before and after the PD regarding their integration and confidence levels of topics corresponding to seven big ideas. The poster will display details of the PD, example survey questions and our findings in a tabular format. See https://tact.uark.edu.",Preliminary Results of TACT Integration and Confidence Levels on Seven Big Ideas of CS: (Abstract Only),NA:NA:NA:NA:NA,2018
Fred Martin:Chike Abuah:Subhajit Chakrabarty:David Nguyen:Mark Sherman:Diane Schilder,"Assessing students' learning of concepts in programming is an essential part of teaching computer science. We developed the Tablet Game, an embedded assessment that measures students' skill in identifying programming structures used to create various behaviors in MIT App Inventor. The assessment was implemented as an app for Android devices. Students conducted an activity in the app, and identified which code-blocks would create those behaviors. Students' responses were transmitted to our custom data-collection server. In two five-day app development summer camps held with middle school students, students completed the same Tablet Game assessment on day 1 and day 5. Students also completed pre/post surveys which gathered ethnographic data and asked about interest levels in computer science and prior programming experience. Using data from 44 students with pre/post assessments matched to surveys, our results indicated that (1) students with high self-reported prior experience in App Inventor outperformed students with low prior experience on the Tablet Game pre-test, indicating that the assessment measures programming skill and (2) students with low prior experience achieved equivalent results as the high prior experience cohort in the post-test, indicating that the camp was successful in imparting programming skills. Both of these results are statistically significant. Further, (3) there were no statistically significant differences in gender composition of the two experience cohorts, indicating that the camp was equally accessible to girls and boys.",The Tablet Game: An Embedded Assessment for Measuring Students' Programming Skill in App Inventor (Abstract Only),NA:NA:NA:NA:NA:NA,2018
Sara-Lynn Gopalkrishna,"In states, school districts, individual schools, and alone in classrooms, educators are providing access to computer science (CS) for more students than ever before. Many are learning as they go. Education leaders and teachers are finding effective tools for hurdles to expanding CS access through their own experiences, formal and informal networks, and partnerships with external organizations. However, much is known in the education policy community which can be applied to CS for All efforts. This poster presents the framework for a doctoral dissertation which examines the implementation of a CS for All policy using a policy implementation lens. The site of the study is a school district that was an early adopter of CS for All; Computational thinking activities were inserted into K-8 classrooms and all high schools introduced accessible and rigorous CS classes. The ""story"" of this district provides both models and cautions for those undertaking CS for All initiatives. Replicating implementation is unrealistic since educational environments are unique and complex. The questions inspiring this work are not about how to implement a CS for All policy, but rather about the conditions under which CS for All policy was implemented in this school district (Honig, 2006). The framework presented is developed from education implementation literature with consideration for the challenges unique to CS for All. Those working in CS education will identify how their experiences fit into the framework and can use it to move their own work ahead.",Implementation of a District-Level CS for All Policy: What Can We Learn? (Abstract Only),NA,2018
Jennifer Sabourin:Lucy Kosturko:Scott McQuiggan,"Spatial reasoning skills are highly predictive of STEM achievement and self-efficacy, yet they are not often part of computer science curricula. In an effort to support spatial reasoning and STEM development, we have created several activities using SAS® CodeSnaps, a free coding environment that brings coding to the physical world through 3-dimensional problem solving and tangible coding blocks. In these activities students represent and navigate real-world obstacle courses in order to solve coding challenges. Tangible coding blocks allow students to organize and interact with code in ways that both build upon and use spatial reasoning skills. These blocks are then scanned and executed by a robot -- bringing their code, and any mistakes, off the screen and into the real world. Together these features offer opportunities for developing spatial reasoning while using existing skills in support of CS learning. This approach meets students where they are; thinking, engaging and interacting with the physical world.",SpatialCS: CS to Support Spatial Reasoning (Abstract Only),NA:NA:NA,2018
Jayce R. Warner:Carol L. Fletcher:Wesley Monroe:Lisa S. Garbrecht,"With the goal of better understanding how to increase the computer science (CS) teacher workforce, this study examined the factors that predict eventual success in achieving teacher certification in CS. Participants (N = 500) were teachers who were certified in other subject areas and who expressed an interest in becoming certified to teach computer science in Texas. Results showed that teachers were more likely to become certified in CS if they already held a certification in another STEM field or if they had some prior knowledge in CS. The extent to which teachers participated in an online professional development course predicted certification success after controlling for prior CS knowledge and other factors whereas the number of hours spent in face-to-face CS professional development did not. These findings have important implications for policy makers and professional development providers who make investments of time and money to grow CS teacher capacity and increase student access to computer science education at the high school level.",Growing the High School CS Teacher Workforce: Predictors of Success in Achieving CS Certification (Abstract Only),NA:NA:NA:NA,2018
Thea Charles:Amber Oliver:Kate Mulloy,"Initial research shows the promise of instructional and learning benefits for students when computational thinking is effectively integrated across the curriculum. Benefits include building higher-order thinking and problem-solving skills, creating real-world applied contexts, and enabling students to create, produce and interact with information. These are critical levers to wide adoption. To address this challenge, in partnership with the Education Development Center, we have developed a three-year study in which we will work closely with five high-poverty New York City elementary schools that, with the help of an external implementation partner, are trying out distinctly different approaches to integrating CT into elementary instruction, in order to understand how those models work in various contexts, and which models may be particularly effective.Our poster will display the proposed integration model of our first demonstration site as well as the indicators and instruments we are using to understand how this model works.",Effective Models for Integrating Computational Thinking into NYC Elementary Schools: A Proposed Research Agenda (Abstract Only),NA:NA:NA,2018
Carol Ramsey:Justin Cannady:Michael DeGraff,"Gender and racial/ethnic participation gaps in computing is a well-documented problem motivating several interventions aimed at attracting and retaining women and underrepresented students (Black or African American, Latinx, and Native American students) in this high-need area. One such effort is the College Board's Computer Science Principles (CSP) course, a survey course designed to engage students who have traditionally opted-out of computer science in secondary education. UTeach CSP is UTeach's Project-Based Learning (PBL) curriculum designed for the CSP course. Students learning from teachers implementing the UTeach CSP curriculum scored higher on the 2017 College Board AP CSP assessment, when compared with students taught with other curriculum. Scores were significantly higher for girls and Latinx students, even after adjustments were made to standardize the demographic characteristics of the schools where the UTeach CSP curriculum was implemented. This poster presents curriculum design research that suggests explanations for the higher results. The research can also provide CS teachers with ideas for moving beyond traditional lecture-based CS instruction for increased student performance and more diverse engagement. Handouts will be provided with a sample UT CSP project including lesson plan, student handout, video link, pacing guide, assessment, and rubric.",Closing the Gender and Underrepresented Minority Gap in CS: UTeach Computer Science Principles AP Assessment Results (Abstract Only),NA:NA:NA,2018
Roxana Hadad:C. Meghan Hausman Jacobson:Kate Thomas:Germania Solórzano:Mila Kachovska:Yue Yin,"Work in culturally responsive pedagogy and culturally responsive computing (CRC)(Scott, et al., 2014) holds promise for how to include underrepresented students into making communities as they develop their computational thinking (CT) skills. Cultural responsiveness involves instructors using what they know about students' individual identities to develop learning opportunities; having high expectations; and understanding students' sociopolitical contexts (Ladson-Billings, 1995). By integrating these approaches, students encounter a makerspace without pre-determined cultural norms that encourages questioning assumptions that limit the development of inclusive technology. This poster explores preliminary results from a mixed methods multiple case study. Sixteen high school students participated in a two-week summer making program that focused on CT and physics skills. Students shared elements of their identities, brought in artifacts for ""show and tell"", collected data on how they spend their time, and categorized assets in their communities to then incorporate into their own projects. Researchers analyzed classroom observations, videos, interviews, and student notebooks, as well as students' pre-post tests and attitudinal surveys. Findings reflect the importance of valuing student identity, building community, and highlighting how CT and physics affect students' lives. More information: https://actmaproject.wordpress.com/ Keywords: computational thinking, cultural responsiveness, makerspaces. DOI: https://doi.org/10.1145/3159450.3162291",Using Cultural Responsiveness to Elicit Computational Thinking in Maker Environments: (Abstract Only),NA:NA:NA:NA:NA:NA,2018
Diane Levitt:Judith Spitz,"While 57% of US undergraduate degrees are awarded to women, women account for only 18% of computer science and related degrees. Studies of recent interventions have shown promise in increasing the number of women who choose to major or minor in computing or related disciplines. Two key findings from this research indicate the promising impact of high school outreach and providing a ""mission driven"" context for computer science for young women. We will present early findings from Summer Guild, a two-week immersive experience for rising freshman women offered in the summer between graduation from high school and the start of their first year of college. During this experiential learning program, students are engage in a compressed digital product development lifecycle including all of the elements of design thinking, prototyping and iteration in the context of a real-world civic or business challenge. In addition, they gain an introduction to Python and work with professional developers to build their digital solutions. We present the results of changes in student's self-reported attitudes, academic plans and acquisition of computing skills based on pre- and post-surveys, a selection and analysis of qualitative data provided by students via daily exit tickets, and the number of students registered for computer science or related classes during their freshman year.",Impact of a Pre-College Summer Workshop on Women's Confidence and Interest in Pursuing Undergraduate Computer Science Studies: (Abstract Only),NA:NA,2018
Kim C. Huett:Carl Westine,"The remoteness of rural K-12 school districts brings unique challenges to school leaders seeking to expand access to computer science education. Limited resources and perceived relevance of computer science education to rural life are but some of the challenges rural school leaders may face. To ensure the success of the current computer science education reform movement, reformers should incorporate needs assessment into their rationale for change. Supported by insights from a needs assessment, school district leaders are equipped to make the case to stakeholders for the need for computer science education. In the current study, two university-based educational researchers in the State of Georgia conducted a qualitative needs assessment single-case study to explore the challenges and opportunities a rural school district faces in broadening access to computer science education. The researchers used a collaborative process to guide the assessment of the school district's resources, educational programming, and outcomes. Data collection and analysis included documents, archival records, school walk-throughs of the district's five schools, and 15 in-depth interviews with administrators and teachers. Findings included the identification and prioritization of needs as well as themes related to challenges faced by the school district in broadening access to computing. Visitors to this poster session will have the opportunity to learn about one rural school district's unique case and what it suggests for expanding rural computer science initiatives.",Using Needs Assessment to Inform a Rural School District's Efforts to Expand Access to Computer Science Education: (Abstract Only),NA:NA,2018
Leigh Ann DeLyser:Lauren Wright,"The landscape of computer science education curriculum and tools is rapidly expanding. After President Obama made a call to action for Computer Science For All, the National Science Foundation (NSF) has continued to award curriculum writing projects, and recently non-profits and for-profit offerings have expanded. This poster presents a landscape analysis of a subset of the curriculum available for K-12 computer science (CS). The subset is derived from CSforAll Consortium's (www.csforall.org) 208 current members that are classified as content providers, a resource for stakeholders in CS education who are looking to see the breadth of offerings available, or choose a particular curriculum. The landscape presented in this poster is organized by grade band and concept areas as defined by the K-12 CS Education Framework. In this poster, we will describe a methodology for categorizing the content providers, evaluate whether they have available curriculum for review, and provide summary landscape statistics about the alignment between the content reviewed and the K12 CS Framework.[1] This will enable us to demonstrate both the breadth of CS content areas available in curriculum for stakeholders in CS, as well as the areas in which curriculum is not widely available.",Creating a Landscape of K-12 CS Curriculum: (Abstract Only),NA:NA,2018
Jill Denner:Shannon Campe,"Latino/a youth are interested in computer science, but studies show they have less access to computers and role models, and lower confidence to pursue computer science activities than their peers in the US. Little is known about how to create learning environments outside of school that attract and retain Latino/a youth who come with a range of computer science interest, preparation, and resources. This poster will describe how one community technology center in a low income rural community provides opportunities and supports for students to pursue technical education and work experiences, and the role it plays in creating computer science (CS) pathways. Survey data from 97 high school students were used to describe variations in students' motivation to participate at the center, how those motivations change over time, and the factors that contribute to students entering a CS pathway. Interviews with 20 students were used to identify the different ways that students entered a CS pathway, including the influence of natural mentors, relationships with peers, and digital badges, as well as the factors that prevent them from participating in computational activities. The data were used to generate case studies that provide an in-depth look at the factors that promote or undermine CS pathways over time. The findings have implications for designing learning ecologies that support high school students from under resourced communities to enter and stay on computer science pathways.",Computer Science Pathways for Latino/a Youth in a Community Technology Center: (Abstract Only),NA:NA,2018
Samuel Adam Micka:Brittany Terese Fasy:Stacey A. Hancock:Jachiike C. Madubuko:Allison Shay Theobold,"Montana is home to a large American Indian population and a rich history. The Indian Education for All (IEFA) Act, passed in 1999, reinforces the educational goals stated in Montana's 1972 Constitution that ""every Montanan, whether Indian or non-Indian, be encouraged to learn about the distinct and unique heritage of American Indians in a culturally responsive manner."" IEFA requires that American Indian education be integrated into ""the education of each Montana citizen,"" making Montana the only state to mandate Indian education by law. We propose an integration of CS concepts into existing content standards using the IEFA curricula. To make these concepts approachable, we utilize Alice, a drag-and-drop programming environment. This software allows students to animate stories while learning programming techniques in a user-friendly way. Furthermore, Alice 2 allows customized models; in particular, we can create models specific to American Indian culture. In this poster, we present an overview of the Storytelling project and preliminary results, an example lesson plan, evaluation techniques, and a description of the 3D model creation process. With these lesson plans and customized models, we strive to broaden participation of students from rural and American Indian communities in CS and related fields.",American Indian Storytelling with Alice: (Abstract Only),NA:NA:NA:NA:NA,2018
"David S. Touretzky:Christina Gardner-McCune:Joseph Isaac, Jr.:Laura M. Tomokiyo","We believe teaching elementary school students to reason about programs is as important as teaching them to write programs. To facilitate development of this skill in young children one must choose a developmentally appropriate domain. Microsoft's Kodu Game Lab is a pattern-matching rule-based language whose semantics is significantly different than Scratch or Python. We chose Kodu because one can write non-trivial programs in two to four lines, and analyzing these programs is within the abilities of a typical 8 year old. Reasoning about programs requires students to understand the structure of code. The approach we're advocating is analogous to sentence diagramming, where one starts with a sequence of words and develops a representation of their syntactic and semantic relationships. One can similarly analyze Kodu programs by characterizing rules and recognizing relationships between rules. In this poster we describe ""couplets"", an analysis technique that reveals the presence within a program of an important Kodu design pattern called Pursue and Consume. Using this technique leads to accurate predictions about program behavior, and uncovers bugs if the pattern is not fully realized. As part of a study of 40 third graders who were learning Kodu, we provided brief instruction in the couplets technique. We found that they were able to apply couplets to 3-4 line programs and answer prediction questions with a roughly 85% success rate. Our results demonstrate that elementary school children can learn to reason abstractly about programs if given the right mental tools.",Couplets: Helping Elementary School Students Recognize Structure in Code (Abstract Only),NA:NA:NA:NA,2018
Karen H. Jin,"Loops are a fundamental concept in computing and well known to be difficult for novices. Recent research shows that the open-ended learning approach often used in teaching block-based programming can be insufficient to help young students gain a solid understanding of computing concepts. Misconceptions about loop are very common despite the user-friendly block-based programming syntax. This study aims to contribute to the current understanding of how elementary-aged students can learn the concept of loops through a more structured instructional design. We engage students in structured learning activities consisting of ""tangible"" programming concept demo and progressive problem solving exercises. These activities were used to teach a group of 3-5th graders two types of loops: counting loops that repeat a set number of times without logic conditions, and conditional loops where the loop iteration is controlled by a Boolean condition. The evaluation results indicate that most students are able to understand and use counting loops correctly in their programs after the weeklong class. The understanding of conditional loops, however, remains difficult for elementary-aged students. Our study suggests that computing concepts may be learned more effectively with a structured instruction setting. Nonetheless, teaching young students conditional loops, especially how to apply them in computational problem solving is a very challenging task even in block-based environments.","A ""Loopy"" Encounter: Teaching Elementary Students the Concept of Loops (Abstract Only)",NA,2018
Jeremiah J. Blanchard:Christina Gardner-McCune:Lisa Anthony,"The computing and STEM industries face challenges in attracting people to fill expanding needs. The literature shows that computing preconceptions shape interest in and impact decisions of whether or not to enter computing disciplines, especially for women and underrepresented minorities. In this study, our research questions focused on how perceptions of programming in elementary and middle school students varied based on prior programming experience. We examined the programming constructs they found challenging. Our study was in the context of a week-long summer camp dedicated to Scratch-based game development. We conducted semi-structured interviews at the beginning, middle, and end of the weeklong program with 28 students who agreed to participate. During the interviews, we asked students about their perceptions of programming in general and which programming constructs they found easy and/or hard. We found that all students perceived programming as a means of creating artifacts, but that students with prior programming experience went deeper by associating programming with process and function. We also characterize the specific Scratch programming constructs that beginning versus experienced children perceive as easy and/or hard. These findings will help experts and educators better understand how children think about programming and how experience changes these perceptions over time. These findings also have implications on the design of curricula and instructional resources to address difficulties children face while learning to program.",How Perceptions of Programming Differ in Children with and without Prior Experience: (Abstract Only),NA:NA:NA,2018
Yifat Amir,"One method of increasing accessibility to computer science education is through massive open online courses (MOOCs). The Beauty and Joy of Computing MOOC (BJCx) on edX is an introductory computer science course aimed to reach a broad audience of learners and designed to fulfill the AP CS Principles curriculum. However, like most MOOCs, BJCx faces high rates of student attrition. Some of this can be attributed to variance in student intentions; there are students who enroll only to browse the material with no plan of completing the course. On the other hand, the attrition of those students who intend to finish but drop out along the way is a point of concern. It could be reduced if course staff could predict it using the students' behavior and intervene. In this project, I explore how patterns of student engagement with course material can predict attrition. Using a recurrent neural network, I model student behavior over time. I am then able to analyze the behavioral patterns which are likely to precede dropping out. Furthermore, I explore which topics in the course curriculum most often immediately precede students dropping out. I visualize the time-series trends overlaid with the curriculum in order to gain insights into correlations between introductory computer science topics and student attrition. This information, along with the predictive student engagement model, can potentially allow teachers to design interventions at MOOC scale, something that is otherwise lacking in comparison to traditional classroom settings where the teacher can directly gauge student behavior.","Modeling Student Engagement and Attrition in BJCx, a CS Principles MOOC: (Abstract Only)",NA,2018
June Mark,"The Beauty and Joy of Computing (BJC; bjc.edc.org) is curriculum and professional development program developed jointly by EDC and UC Berkeley and endorsed by the College Board for the Advanced Placement (AP) Computer Science Principles (CSP) exam. The purpose of this course is to attract more students, and particularly girls and underrepresented minority students, to the breadth and depth of ideas in modern computer science. BJC is aimed at helping students develop computational habits of mind including abstraction, modularity, algorithms, and modeling. BJC uses Snap!, a visual programming language based on Scratch, to expose students to the beauty and joy of programming using a project-based learning approach (including games, art, mathematics, language, etc.) and addresses social issues of computing (e.g., privacy, copyright, artificial intelligence, networking, and cybersecurity). This poster will share curriculum examples, results of early research on teacher and student use in New York City schools, teacher and student experiences and feedback, implementation challenges and supports, and preliminary results and outcomes including engagement, attitudes, and achievement.",Broadening Participation in Advanced Placement Computer Science Principles: (Abstract Only),NA,2018
Meg J. Ray:Diane Levitt:Maya Israel,"As CS for All initiatives expand in K-12 districts across the country, there is a need to create ongoing teacher support and training. Cornell Tech's Teacher in Residence program builds computational agency. Agency is often defined as the power to freely act and make choices. The Teacher in Residence program seeks to build the agency of school administrators, teachers, and students to make choices about CS education and to act on them based on a foundation of content knowledge rather than programs bound to specific tools or individuals. The Teacher in Residence program is grounded in evidence-based practices, but has made unique adaptations in order to support teachers who are new to CS content. The writers will share practices, learnings, and preliminary outcomes from the first year and a half of the program. His data includes qualitative measures of teacher confidence, agency, and accuracy as well as initial data on student engagement and generalization. The Teacher in Residence program includes K-8 teachers who are incorporating CS instruction into their classrooms. In this program, a master teacher is embedded in a school community for a limited amount of time to coach teachers, offer professional development, and consult with the administration about implementation. It focuses on three elements: content proficiency, appropriate pedagogy, and giving equitable access to all students. Handouts will be provided.",Teacher in Residence: (Abstract Only),NA:NA:NA,2018
Amber Solomon:Vedant Pradeep:Sarah Li:Mark Guzdial,"Computer science teachers want to know what their students are and are not learning and understanding. Gestures, or spontaneous hand movements produced when talking, could help teachers understand what their students are thinking. During communication, gestures often reflect thoughts not expressed when people talk (Goldin-Meadow & Wagner, 2005). Listeners can then extract meaningful information from the gestures they see. When learning computer science, gestures may be an external representation of students' understandings of code. In this research, we conducted a qualitative study observing and interviewing a high school CS class to understand how and when gestures were used. When students trace code, their gestures show how well they understand the code's execution. In another context when students described their code to the teacher or other students, the students' gestures showed how abstracted their knowledge was. Students who understood their code made more general gestures, while struggling students made pointing gestures for each line of their code. These findings suggest that teachers could use students' gestures as a formative assessment to understand how well their students are learning.",The Role of Gestures in Learning Computer Sciences: (Abstract Only),NA:NA:NA:NA,2018
Frieda McAlear:Allison Scott:Sonia Koshy:Alexis Martin,"In order to inform ongoing efforts to broaden participation in computing, this study examines a CS initiative which provides a three summer sequence of rigorous, culturally relevant, and project based exposure opportunities for underrepresented secondary school students of color. Previous studies demonstrated that the CS initiative increased the rate of majoring in CS in college more than eight fold. This study uses quantitative data from the summer 2017 CS program and subsequent CS academic year data to examine persistence in CS on a more granular scale. In particular, instructional practices, social and emotional learning outcomes, and course taking data are examined to understand the factors which increase student persistence in taking secondary computer science courses. Findings include a significant relationship between social and emotional learning outcomes and persistence in CS for underrepresented students of color and the importance of student participation and relevant assignments to the development of resilience in CS. A handout will also be given to poster audiences in order to stimulate discussion, exchange best practices within the CS education research community, and to contribute to the growing evidence base to broaden participation in CS.",Do Social and Emotional Learning Outcomes and Instructional Practices Promote Persistence in Computer Science for Underrepresented Secondary Students of Color?: (Abstract Only),NA:NA:NA:NA,2018
S. Monisha Pulimood,NA,Session details: Lightning Talk #1,NA,2018
Madeleine Lorås:Trond Aalberg,"This lightning talk will present experiences from using a student-centered approach when implementing educational innovations in computer science programs. The Norwegian Center for Excellent IT education (Excited) is currently researching new ways to organize computer science education and innovative educational structures. By involving students from day one of the research and development process we hope to learn more about what educational and structural changes and innovations are most effective and why. However, we have faced some challenges in this effort. One challenge is the fact that many of the courses in need of innovation has a large student population. This can make it difficult to implement changes without substantial bureaucracy and organizational efforts, as well as the risk of damaging the students' educational progress. Another challenge is that the students do not respond well to the proposed changes. This was somewhat surprising; however, it is a problem that must be solved in order to succeed in creating better computer science education. Therefore, we have proposed using a student-centered approach to the implementation and evaluation of new initiatives. By organizing changes in smaller pilot-groups with students involved the whole time, we can hopefully reduce the bureaucracy and risk attached to changing large and important courses. Additionally, with the students involved every step of the way the resistance to change might decrease. The project has just begun, and this talk will present the initiative in more detail, experiences from the first semester and further plans.",Exploring a Student-centered Approach to Innovating Computer Science Education: (Abstract Only),NA:NA,2018
Alex Edgcomb:Frank Vahid,"Introductory programming courses often use a full-featured programming language, such as Python, Java, or C++, wherein students concurrently learn programming concepts along with language syntax. However, many instructors believe that learning programming concepts first, then learning a specific language's syntax, may be more effective than learning both concurrently. Thus, some courses first teach programming via flowcharts and pseudocode. Some tools and materials support teaching programming via flowcharts, but we felt much improvement was needed. Therefore, we developed a new flowchart language, named Coral-Charts, specifically intended to teach fundamental programming constructs like assignments, branches, loops, functions, and arrays. We developed a web-based graphical simulator for Coral-Charts; no local tool installation is necessary (unlike the most common existing flowchart tool). The simulator always displays the values of variables, which helps students comprehend the impact of statements. The simulator enforces a layout that intentionally mirrors textual code's top-to-bottom execution and sub-statement indentation, easing the transition to a textual language. Furthermore, we defined a new pseudocode-like language, named Coral (corallanguage.org), that is executable and that matches Coral-Charts. Syntax is ultra-simple and only essential constructs are included. Certain features automatically detect or eliminate many new-learner errors. Students can type Coral code, from which a Coral-Charts flowchart is auto-generated, and students can execute both the code and flowcharts. Coral was carefully designed to naturally lead into languages Python, Java, or C++. Coral and Coral-Charts are used in the textbook Fundamental Programming Concepts (zybooks.com/catalog/fundamental-programming-concepts). We welcome feedback on the approach and potential collaborators in implementing experiments.","Interactive, Language-neutral Flowcharts and Pseudocode for Teaching Core CS0/1 Programming Concepts: (Abstract Only)",NA:NA,2018
Cruz Izu:Olga Sanchez Castro,"This lighting talk provides a literature review that supports the concept that small failures can have a positive effect on learning compared with more traditional scaffolding techniques that prevent students from failing. From a sociocultural approach to education, scaffolding is provided through mediated dialogue within the students' zone of proximal development (ZDP) to minimize failure. However, productive failure has been found to promote wider exploration and to provide deeper learning experiences by assisting learners to self-identify knowledge gaps. Related to the idea of scaffolding in teaching, is the concept of task difficulty. Selecting problem-solving tasks that are neither too difficult nor too easy is critical in assisting learning as this reduces learner frustration and can foster development of learner self-efficacy. Many issues need to be addressed when exploring the ideal mediated task difficulty including: (1) how to assess learners' ZDP, (2) how to find an adequate balance between challenging tasks that seek to traverse learners' ZPD and the degree and type of failure they can trigger, and (3) how to provide support to learn from experienced failure. Our first goal, in collaboration with interdisciplinary multi-institutional partners, is to design sequenced activities that ask students to attempt a problem-solving task prior to any instruction/scaffolding activities usually provided to guide task completion. This will trigger foreseeable small failures, which can be used as learning opportunities. Note that this approach may not only foster learning, as observed at high school level, but also build resilience.",Designing Active Mediated Learning Tasks: Can Small Failures Enhance Student Learning? (Abstract Only),NA:NA,2018
Jared O'Leary,"This lightning talk describes considerations for designing interest-driven coding projects. I provide examples of what an interest-driven coding class looks like and how projects are designed for a variety of experience levels and interests within a shared space. I discuss some of the research informing this approach, share examples of interest-driven projects, and provide suggestions for creating interest-driven coding projects and resources.",Interest-driven Coding Projects: (Abstract Only),NA,2018
Michael Ball,"This lightning talk will give a very quick introduction to ""Item Response Theory"", or IRT. IRT evolved from psychometrics as one method for evaluating the Quality of survey questions. In the classroom, IRT is a fantastic way to gain better insights into the quality and efficacy of the assessments we offer. IRT has been used by testing companies to evaluate exams like the GRE, SAT, and AP, but the same ideas can be applied to our classrooms. By applying some ideas from IRT we can start to look at exam scores with just a few simple charts, and we can begin to assess whether assigned questions are effective. We'll start by looking at correlations between individual question scores and overall assessment scores. While this is a simplification of IRT, we'll look at how we can use it to diagnose potential exam errors. The goal is to better understand the exams we give our students, and we can use this as a jumping off point to continue to evaluate our assessments.",IRT in 5 Minutes: Easy Ways to Better Understand an Assessment (Abstract Only),NA,2018
Jared O'Leary,"This lightning talk describes considerations for facilitating multiple programming languages in one space. I provide video examples of what it looks like when young coders select from four different programming languages to create projects of interest. Following an overview of what coders created in the classes I designed and facilitated, I discuss considerations for simultaneously facilitating multiple languages. This discussion includes quick suggestions for selecting and creating resources, questioning techniques, peer-to-peer mentoring, room setup, and more.",Facilitating Multiple Programming Languages in One Space: (Abstract Only),NA,2018
Paul Dickson,"We often give students large projects because solving them teaches students so much. If we give them messy problems with a lot of structured ambiguity, we can make it so that they learn even more because they will have to really think about the problems they are solving. This concept is often applied through project/problem-based learning. If only this were true, we could just give our students a lot of poorly defined problems and in so doing create extremely competent graduates. The idea breaks down because we as faculty think about how much students will learn from the process and gain insight through doing, while students tend to focus on their final product/grade and ignore the journey. Students learn a lot but not as much as they could. The problem is not with the projects and their intrinsic messiness but instead with our students' focus. We propose the concept of messy learning, which couples project/problem-based learning with reflection to solve this problem. Messy learning involves giving deliberately ambiguous problems where we want students to focus on learning about how to solve the ambiguous parts of the problem. Reflection is the method that we propose to use to make the messy learning projects effective for our students by using it to focus attention on appropriate parts of the messy problems.",We Should Give Messy Problems and Make Students Reflect on What They Learn: (Abstract Only),NA,2018
Roman Lysecky:Frank Vahid,"This lightning talk presents new free, online material to provide new programmers with a solid foundation in debugging. Nearly every instructor who teaches programming notices that students have weak debugging skills. Faced with a failing program, many students make random changes and hope things improve. Or they shrug their shoulders, say ""I have no idea what/s wrong"", and ask an instructor for help. Most textbooks and websites provide insufficient coverage or training of debugging. This new material teaches a basic systematic process for debugging: Create a hypothesis, test the hypothesis, repeat. Seems obvious, but it/s not to most students. The material first teaches a general troubleshooting process using everyday systems, like smartphones can cars. With a solid foundation of the basic systematic process, the material then teaches basic debugging using a generic programming language. The material starts from the basics, following that adage that one must walk before they can run. Students typically don/t have the concept of ""Hypothesize / Test"". But after repeated examples that stress those items, they will hopefully have developed a habit of thinking of troubleshooting more systematically. The material is targeted at the fifth week of a CS1 course, when students have some programming experience and are beginning to face harder debugging challenges, but is also beneficial for any programming class beyond CS1, where it could be used in the first week. The material is delivered as free two-chapter online book available with sign in at http://www.zybooks.com/catalog/troubleshooting-basics/.",Teaching Students a Systematic Approach to Debugging: (Abstract Only),NA:NA,2018
Toby Dragon,"This lightning talk describes our current effort to create a system that helps teachers organize the content of their computer science courses while simultaneously providing a basis for intelligent support. This work blends the disciplines of computer science education, artificial intelligence in education, and instructional design to create a holistic system that helps teachers create a unified vision of their course from diverse learning resources and assessment techniques. The vision is created in the form of a concept map with links to external materials and assessments (including traditional materials like textbooks and exams, and more advanced technology like online interactive practice environments). We are creating these concept maps for our computer science curriculum at Ithaca College and we have found clear benefits to organization and content. Beyond these improvements to courses, we seek to use the resulting concept map to offer intelligent support for students and instructors. Students can benefit by seeing their assessment automatically summarized by concept rather than by assignment, and receive suggestions of materials crucial to their understanding. Instructors can benefit from assessment summaries about individuals/ or entire classes/ understanding of specific concepts. The system can also make recommendations for dynamic groups to be formed for short-term in-class collaboration. Currently we have basic prototypes of this functionality and we/re seeking feedback from others who may have engaged (even informally) in similar techniques, as well as any collaborators who are interested in trying this technique in their courses or integrating their materials with our system.",Improving Course Content and Providing Intelligent Support Simultaneously: (Abstract Only),NA,2018
Lea Wittie:Anastasia Kurdia:Meriel Huggard,"A concept inventory is a research-based multiple-choice test that measures a student's knowledge of a set of concepts while also capturing conceptions and misconceptions they may have about the topic under consideration. It can aid educators and researchers in a variety of ways. When administered at both the beginning and end of a course, it measures the amount of knowledge that students gain during the course. For a given student, a concept inventory points out the topics that they need to focus on and can give their instructor specific misconceptions to tackle. For a researcher, concept inventories routinely administered at the end of a course show the effects that different teaching methods have on student understanding. Concept inventories for computer science currently exist for many topics but not for a course on basic data structures, commonly refereed to as Computer Science 2 (CS2). To aid in assessing students' understanding of the material of this core course in the computer science curriculum, we are developing a concept inventory for CS2. We are seeking input from instructors and researchers with knowledge and experience of CS2 (experts) to establish the set of important and challenging topics that are fundamental to a CS2 course, using an iterative consensus-reaching methodology (the Delphi method). These topics will be used to create a concept inventory, which will then undergo validity and reliability checking. Interested members of the SIGCSE community are invited to attend the presentation and consider participating as experts.",Recruiting Experts: Toward a Concept Inventory for Computer Science 2 (Abstract Only),NA:NA:NA,2018
Michael S. Kirkpatrick,"The goal of the OpenCSF project is to develop an on- line, interactive textbook focused on the Computer Systems Fundamentals (CSF) Core Tier 1 teaching objectives of the ACM 2013 Computing Curriculum. This area includes material that would traditionally be taught in courses such as Computer Organization, Operating Systems, Computer Networks, and Parallel & Distributed Systems. The CSF Knowledge Area highlights the most vital concepts and themes for these courses, emphasizing that this material should be core for all CS graduates. OpenCSF is built on the OpenDSA framework. This framework includes built-in capabilities for interactive activities designed to assess student reading comprehension. Furthermore, as a web-based resource, the intention of OpenCSF is to use HTML5 features to support interactive illustrations and exercises embedded along with the readings. Additionally, the OpenDSA framework supports integrating these activities with the Canvas Learning Management System to track student reading completion; this feature is not currently enabled in OpenCSF. At the time of this writing, drafts of five chapters have been written: Processes and OS Basics; Concurrency with IPC; Multithreading; Synchronization Primitives; Synchronization Problems. The goals for this lightning talk are to demonstrate these initial chapters, to discuss plans for future interactive components, and to gather feedback from those present. OpenCSF is publicly available at https://opencsf.org/.",OpenCSF: An Online Interactive Textbook for Computer Systems Fundamentals (Abstract Only),NA,2018
Adam Fischbach:Yana Kortsarts:Suk-Chung Yoon,"This lightning talk will discuss our experience of developing and managing a new Computer Forensics Minor. The Computer Forensics minor is an interdisciplinary program that integrates criminal justice and computer science and combines both theoretical concepts and practical skills to prepare students for a career in computer forensics-related fields. Students will be prepared for a career in law enforcement or corporate security as a digital investigator and evidence examiner as well as pursue graduate education in the area of information security, digital forensics, or law. The lighting talk will describe the various stages in developing the minor including an analysis of competitive academic programs, evaluation of the current resources, qualifications and faculty considerations, the process of developing the program objectives and learning outcomes, and assessment strategies. The program will be run jointly by Criminal Justice and Computer Science departments, and faculty will communicate regularly to track the number of students in the minor and their progress through the curriculum. Both departments will ensure that the minor provides appropriate course content and learning experiences for graduates seeking employment. In our discussion, we will focus on challenges of designing the balanced curriculum to make it accessible for criminal justice and other non-computer science/computer information systems majors, the need of designing new courses and renovating existing courses to answer growing need to address this new emerging field. Lightning talk will also discuss the anticipated cost of the program, required resources, recruitment strategies, and the administrative approval mechanism.",Developing Computer Forensics Minor -- Challenges and Opportunities: (Abstract Only),NA:NA:NA,2018
Debasis Bhattacharya,"This lightning talk describes the current effort to distill the essence of the growth of bitcoins, blockchains and their implications to cybersecurity. Crypto currencies are becoming popular with banks, consumers and various industries. There is a need for consumers to understand the basic underlying technology behind these crypto currencies and the underlying security risks and concerns. This talk provides a broad overview of the topic and the benefits/risks involved. This talk also describes how these topics are integrated into a classroom curriculum in a standard business and accounting course found in many universities.","Bitcoins, Blockchains and Cybersecurity: Teaching Emerging Technologies in the Classroom (Abstract Only)",NA,2018
S. Monisha Pulimood,NA,Session details: Lightning Talk #2,NA,2018
Robert Montante,"ntroductory computer networks courses often include descriptive coverage of the network protocol headers. A straightforward listing of the headers and their meanings can lead to questions like ""Will this be on the test""? Programming exercises may involve selecting values for some aspects of a protocol but tend to abstract away the details, and depend on prior programming skills. In addition, campuses without dedicated network lab facilities may have limited ability to experiment with protocols on an existing institutional network. The Python-based Scapy package provides explicit, detailed control of the contents of header fields, and includes graphical visualization features that offer easy feedback. Programming ability is helpful but not necessary; the interactive Python environment permits step-by-step and guided exploration of the various protocols. Effective use of scapy requires root (administrator) privileges; a virtual machine environment such as that provided by Oracle VirtualBox allows complete control and access to the operating system. This talk is about scapy-based lab modules that the author is developing, which provide active, hands-on exposure to and manipulation of network headers. So far, a Transport-layer activity and a preliminary Link-layer activity have been written. The current activities will be discussed, along with ideas for additional modules.",Using Scapy in Teaching Network Header Formats: Programming Network Headers for Non-Programmers (Abstract Only),NA,2018
Elizabeth Boese,"Experience for yourself an unplugged active learning experience to understand how arrays are stored in memory differently than linked-lists. You will participate in a short demo just as my students experience this exercise, to gain a fuller understanding of how to apply this in your own classroom. Each student receives a card with a memory address. Inside the card, if it is allocated for a linked list then there is a letter and a next pointer; if it is part of an array there is just the letter. First the students with addresses for the array stand up; acknowledge how they are all contiguous in memory. Next, the student with a head pointer stands up and calls out the address they are pointing to. The student with that address on their card stands up, and calls out the address of their pointer. This continues until a student calls out their pointer is NULL. Now acknowledge how distributed through memory a linked-list can be! Come see how powerful learning can be with this physically engaging exercise! Successfully used in classes up to 200 students.",Linked-List vs Array in Memory: an Unplugged Active Learning Experience (Abstract Only),NA,2018
Robert Ravenscroft,"It is often difficult to teach dynamic data structures such as linked lists by modeling them on a static medium such as a white board or slides. This lightning talk introduces Dynamic Data Structures-Linked List (DDS-LL), an HTML5 browser application that allows the user to build and manipulate graphical models of linked lists. DDS-LL is not an algorithm visualization tool. Instead the user models their data using only actions that are consistent with a language such as Java. Nodes must be instantiated and linked together. Lists must be traversed to access a node. Reference assignment is modeled by dragging links. DDS-LL removes the old links, keeping the model accurate. With the wrong reference assignment, garbage can be created. Though still under development, DDS-LL has been used in an introductory data structures course to motivate linked lists, trace algorithms, and model scenarios. Its use provided several benefits. Scenarios can be prepared ahead of time. Models can be manipulated without drawing/erasing the white board. Scenarios can be quickly reloaded in response to student questions. Since the original intent of this tool was to assist the instructor with modeling linked lists, no attempt was made at this time to measure the impact on student engagement or learning. After a quick introduction to DDS-LL, this talk discusses the instructor's experience using it in the classroom, and presents some possible enhancements, including features to allow the tool to be used for student assignments. Handouts and links to online resources will be provided at the talk.",An HTML5 Browser Application for Modeling and Teaching Linked Lists: (Abstract Only),NA,2018
Ramachandra B. Abhyankar,"Logic for Computer Science courses have traditionally emphasized algorithmic approaches: Resolution, Semantic Tableau, and Sequent Systems. The Athena System, described in a new book (""Fundamental Proof Methods in Computer Science"" by Konstantine Arkoudas and David Musser, MIT Press, 2017), emphasizes Natural Deduction. Natural Deduction has the well-known advantage of matching human intuition. Athena is a language that combines computation and deduction, and is a system to aid the development of natural deduction proofs. The central insight realized in Athena is that the development of a proof is similar to the development of programs using stepwise refinement. Athena is not a theorem prover, but is integrated with theorem provers and SMT solvers. Athena users can make use of these integrated tools without having to learn details of the usage of these tools, as Athena provides seamless integration with these tools, and a convenient interface to these tools for Athena users. While Athena uses these tools to aid the development of natural deduction proofs, I have found that a combined use of Athena with theorem provers, SMT solvers and model builders can help impart to students a more well-rounded introduction to deduction.",Teaching Deduction Using Athena and Related Tools: (Abstract Only),NA,2018
Lisa Lacher:Cydnee Biehl,"This lightning talk describes our current effort to implement and use Discord - a new tool to facilitate group work that an instructor can use to moderate the level of group participation of students. By utilizing Discord's features to their full extent, an instructor can actively moderate the group's interactions, keep track of who is/isn't participating, and even send messages to student groups. Instructors have the ability to create a Discord server, which acts as a virtual classroom, and then use the server to store student accounts, sort students into groups, and enable group chatrooms. Within these chatrooms, the instructor can observe for language, how well teams are keeping on task, and most importantly, level of participation. This tool keeps students accountable for how often they collaborate with the team by using a chat log with timestamps that the instructor can audit. A goal of implementing Discord is to introduce a user-friendly tool that instructors can use to moderate group interactions and hold students accountable for their level of participation within their groups. A second goal of this project is to utilize the ability to programmatically access the communications in an effort to automate content and sentiment analysis to determine team effectiveness.",Using Discord to Understand and Moderate Collaboration and Teamwork: (Abstract Only),NA:NA,2018
Wensheng Wu,"We present SLASH, a learning tool currently under development in our graduate program. SLASH aims to help students review concepts in lectures slides using flash cards automatically generated from the slides. Many courses in our program have weekly quizzes and students can get stressed quite easily. So we hope that SLASH can make the process of reviewing lectures more fun and interesting to the students. Extracting concepts from lectures slides is itself an interesting but challenging problem, since the contents of the slides may be fragmented (e.g., point-based, with an incomplete sentence for each point) and noisy (e.g., containing formulas and codes). Past research on text mining has tried to ""glue"" together the points to construct a grammatically correct sentence, which is then used to extract concepts and relationships. In contrast, we focus on discovering popular concepts in the slides and generating flash cards with (just) sufficient contexts to help students recall the concepts. To the best of our knowledge, this is the first work on the automatic generation of concept-based flash cards from lecture slides. In the presentation, we will show our preliminary work, example flash cards, student feedback, and challenges in developing SLASH. We believe that SLASH may benefit all instructors who are using PowerPoint for lecture presentation, and may be used to largely stimulate students' interests in learning the subjects.",SLASH: Automatically Generating Flash Cards for Reviewing Concepts in Lectures Slides (Abstract Only),NA,2018
Dante Ciolfi,"This Lightning Talk describes a current effort to create an online learning system to address the unique learning needs of under-served groups. To ensure success in the most challenging scenarios, our first project iteration targets United Sates migrant farm workers and their families. Our goal is to teach migrant farm worker parents and children computer programming. Central to our project is the introduction of a new learning delivery model, the LMS/Support Model. The primary components of the model are: 1) a learning management system, featuring an open source course on the Go Programming Language hosted on a corporate cloud service), 2) live tutoring support provided by bilingual volunteers, and 3) a solar-powered, mobile wi-fi network on school buses. We have created the first course iteration and have made initial contact with a few non-governmental organizations (NGOs). We seek to form an interdisciplinary cadre, with scientists from the following fields: computer science, sociology, psychology and political science. We also seek to interface our educational effort with established social service efforts of universities near a high concentration of migrant farm workers. Our model scales well and can be replicated nationally and internationally. Successful deployment of our model in its initial iteration will significantly impact the lives of tens of thousands of overlooked migrant farm worker families. More importantly, it will lay the foundation for changing the lives of millions of children and adults internationally. In our allotted five minutes, we will discuss project details, assessment instruments and our inspiration for the project.",Computer Programming Training for Under-Served Groups: (Abstract Only),NA,2018
Sven Jatzlau:Ralf Romeike,"Since the emergence of block-based visual programming languages as a new take on programming environments, they have served as a successful entry point into programming for novice learners. Over time, they have been developed and improved to become increasingly accessible, intuitive, and easy to use. In the course of this evolution, both uncommon and entirely new language concepts have been introduced, such as the cloning of objects, or nesting of sprites. However, the question of how to teach them has yet to be answered: the mostly visual representation of program flow, output and code, and the way a user interacts with these aspects can make traditional teaching practices inadequate. Instead, block-based languages require new practices, methods, and strategies, which will be developed in this research project. Therefore, this Lightning Talk presents the initial findings of a research project concerned with the theory of teaching block-based programming. In a preliminary study, we have identified new concepts found in members of the most common block-based language family. In the next phase of the project, strategies for teaching these new concepts will be developed and assessed. This phase will be the focus of this Lightning Talk.","Toward Teaching Strategies for Block-based Languages: Possibilities, Challenges, and Experiences (Abstract Only)",NA:NA,2018
Ryan Clarke:Sarah Judd,"Girls Who Code, a national nonprofit founded in 2012 with the mission to close the gender gap in the computer science (CS) fields, has reached tens of thousands of girls through our CS enrichment programs. To date, our Summer Immersion Program (SIP) has provided nearly 5,000 rising 11th- and 12th-grade girls from across the U.S. with the opportunity to engage in a seven-week introductory CS course. In this lightning talk we will describe our recently established Research Team's efforts to understand the ways SIP is affecting girls, describe challenges and limitations of this work, and offer a glimpse at how we hope to assess the program's longer-term impact on CS persistence and longevity by leveraging our organization's growing alumni network.",Evaluating the Impact of the Girls Who Code Summer Immersion Program: (Abstract Only),NA:NA,2018
Jeffrey Miller,"This lightning talk describes the benefits of exposing K12 students to Computer Science through short camp programs. The [email protected] Summer Camps (http://summercamps.usc.edu), founded jointly with the Institute for Education, provide girls, minorities, and low-income K12 students with an opportunity to learn about Computer Science through one week camps held during summer. Now in our third year, the camps have given nearly 1500 students the experience of being in college for a week on campus at the University of Southern California, changing classrooms, eating at the dormitory cafeteria, seeing college students in their natural environment, and learning from current Computer Science majors. Students learn about Computer Science through programming platforms, including Scratch Jr. (K-2nd), Scratch (3rd-8th), Java (7th-12th), and Python (7th-12th). The camps are provided for free or reduced cost based on donations from individuals and organizations. Through camp surveys, student interest in STEM fields raises from around 50% of students highly interested to over 80% by the end of the camp. Although the camp is only 32 hours long, early exposure to Computer Science can provide students of all ethnicities (nearly 75% of the attendees are Hispanic or African American) and genders (47% of the attendees are girls) with the foundation needed to prepare them for making an educated decision about STEM careers.",Benefits of Exposure Programs to K12 Student Interest in Computer Science: (Abstract Only),NA,2018
Abril Vela,"There is currently a dire need to improve efforts to integrate a better understanding of career and college pathways in all computing fields into our Computer Science (CS) curricula; versus continuing to label and advertise everything we do as ""computer science"". This effort is essential to improving post-secondary opportunities for students being introduced to computing through the nationwide CS for All commitment. For high school students in Chicago, this effort starts with Exploring Computer Science (ECS), which serves as our foundational CS course at [email protected], now that CS is a graduation requirement. I am examining the potential long term outcomes and benefits of segmenting each unit of ECS -- Human Computer Interaction, Problem Solving, Web Design, Programming, Big Data, and Robotics -- into different fields of computing and identifying the skillsets gained in these computing fields in order to articulate this to students with these interests. This effort is just underway and those interested in providing students with post graduation opportunities, as well as those personally interested in exploring career and college opportunities in computing fields, are invited to attend this talk, share feedback, and consider collaborating with CS4All.",Exploring Computer Science Beyond High School: Introducing Career and College Pathways (Abstract Only),NA,2018
Adrienne Smith:Rebecca Zulli,"Asset maps serve as a simple, yet impactful tool for helping underrepresented groups connect with important people, programs, and resources that would support their recruitment and retention in computing. At the end of this talk, individuals will walk away with a list of steps that they can use to develop a comprehensive map that could be distributed immediately to current and future computer science majors (including high school seniors). These steps include identifying current assets within an array of existing categories (e.g., tutoring centers, individual faculty mentors, local chapters of computing associations) designed to help mappers think expansively about existing supports. Additional steps involve reviewing contact lists and asking others to assist in the identification of assets, performing internet searches of the school/organization website looking for key words, and reading through the university directory to highlight offices that work on diversity issues or support the individuals targeted. The assets can be plotted directly onto a campus map and supplied to underrepresented groups so they are aware of and can locate the resources and supports available to them. (An enhancement would be an online version that links directly to web pages, contact information, and directions to further increase the accessibility of supports.)",Asset Maps: A Simple Tool for Recruiting and Retaining Underrepresented Populations in Computer Science (Abstract Only),NA:NA,2018
Orit Hazzan,"In the industry, the Dual Career Ladder allows employees to be promoted along either a supervisory or technical track. Such programs are common in the engineering, scientific and medical industries. In the Lightning Talk, I will borrow the metaphor of Dual Ladder and explore two kinds of experience -- academic and industrial experience -- that undergraduate computer science students can be offered to equip them with the needed tools for the future job market. Specifically, I will address the questions: What kind of real world experience should undergraduate students in computer science get and how? How should answers to this question be expressed in the computer science undergraduate programs? My talk will focus on the case of Israel -- the Start Up Nation (Senor and Singer, 2009) -- and the crucial role of computer science graduates in this job market. Data will be presented from the Technion -- Israel Institute of Technology, which is the ranked 1st among the Israeli universities. I will share our findings and data analysis, and propose possible ways to let students get both an academic and industrial experience in a way that prepare them both for academic and industrial careers.",The Dual Ladder -- Academic vs. Industrial Experience: What kind of Experience should Computer Science Students Gain during their Undergraduate Studies and How? (Abstract Only),NA,2018
Peter-Michael Osera,NA,Session details: Demonstrations,NA,2018
Gina Likins:Jen Krieger,"Electronic Textiles, or eTextiles, are textiles that directly incorporate conductive fibers or elements. eTextile projects are engaging and hands-on, and can serve as an introduction to computing, electrical engineering, and the Internet of Things. In addition, evidence suggests eTextile projects are especially well-suited for girls and young women, and may help improve their overall attitudes and confidence about computing. This demo will prepare instructors to lead a successful eTextiles workshop. Attendees will learn by doing -- up to 20 participants will experience the fun of eTextiles by adding an LED sequin to an article of clothing they bring. In addition, the demo will cover: what information should be included in an eTextiles workshop -- and what can be skipped; variants to accommodate experience and knowledge levels; and how instructors can ensure that workshops go off without a hitch. Participants should bring an article of clothing to ""hack"" (such as a t-shirt or hoodie).","Teaching ""Blinky Flashy"": Best Practices and Helpful Tips for Teaching eTextiles to a Wide Range of Students (Abstract Only)",NA:NA,2018
John Maloney,"Scratch and other blocks languages have introduced millions of young people to coding. However, as students get older they naturally seek new horizons and new programming languages. At the same time, CS educators in higher grades want to explore concepts that go beyond the scope of Scratch. Unfortunately, text-based languages present challenges. Syntax issues, cryptic error messages, and complex programming environments can alienate students and consume valuable classroom time. GP allows exploration of computational ideas in the context of a welcoming, media-rich blocks language.",GP: A New Blocks Language for CS Education (Abstract Only),NA,2018
David S. Touretzky:Christina Gardner-McCune,"In light of our field/s progress in making programming accessible to novices, we contemplate an even more ambitious goal: make AI accessible to all. The Cozmo robot by Anki is revolutionizing consumer and educational robotics through built-in computer vision and artificial intelligence algorithms. Calypso is a scaffolded robot programming environment for Cozmo inspired by Microsoft/s Kodu Game Lab. Calypso allows novices to program with advanced features such as visual recognition of objects and faces, simultaneous localization and mapping (SLAM), landmark-based navigation, and speech input. Like Kodu, Calypso emphasizes rule-based programming with high-level primitives such as ""see"", ""hear"", ""move toward"", and ""grab"", and it uses an Xbox game controller as its primary interface. User testing of Calypso has shown that children as young as eight can easily use it to program Cozmo.   This demo will show off some of Calypso/s most striking features, including real-time graphical display of the robot/s world map, object detection with OpenCV, and speech recognition. We will share a Calypso curriculum that can be adapted to students from primary school through undergraduates. The demo will conclude with a discussion of the changes coming in both K-12 and undergraduate robotics instruction as we move from simple control of servos to true vision-guided mobile manipulators. For an advance look at Calypso, please see https://Calypso.software.",Calypso for Cozmo: Robotic AI for Everyone (Abstract Only),NA:NA,2018
"Leo C. Ureel, II:Charles R. Wallace","We present a demonstration of our WebTA tool, which facilitates the teaching of programming by providing automatic critique and grading of student source code. Programming is in fact a complex set of interconnected activities. Learning to design, analyze, implement, test, and revise software is crucial for student success, not just for computer science students but for a broad and growing body of students in other disciplines as well. Our approach is to teach students agile development methods through small cycles of teaching, coding integrated with testing, and immediate feedback. WebTA facilitates our teaching approach by providing automatic critique of student source code. WebTA provides immediate feedback to students and gives them experience with interactive, test-driven development. Students using WebTA are engaged in communication-by-proxy with the instructor. This communication does not replace instructor feedback; rather, it codifies common feedback scenarios, triggered by errors, warnings, or textual code analysis, to assist the instructor in reaching students just when the student is engaged in problem solving and learning. This prompts the student to reflect and refactor in an iterative design process. WebTA compiles student code and executes it over a series of shakedown tests. It also analyzes student performance and generates preliminary grading reports. Students are coached through code critiques and suggestions that prompt them to reflect and refactor. The demonstration consists of a walkthrough of two use-case scenarios: Student use of WebTA as a code snippet critiquer and its use by faculty as an automated grading system.",WebTA: Online Code Critique and Assignment Feedback (Abstract Only),NA:NA,2018
Barbara Cutler:Matthew Peveler:Samuel Breese:Evan Maicus:Ana Milanova:Buster Holzbauer:Andrew Aikens:James Anderson:Josh Barthelmess:Timothy Cyrus:Marisa Lee:Leon Montealegre:Jessica Wang,"Submitty is an open source programming assignment submission system from the Rensselaer Center for Open Source Software (RCOS) at Rensselaer Polytechnic Institute (RPI) accessed via an online interface. Submitty allows students to submit their code through file upload or version control, such as an internal Git/SVN server or Github, where it is then tested with a highly configurable and customizable automated grader. For each assignment, instructors can specify whether or not students can work in teams. For team assignments, the instructor can either assign teammates or allow the students to choose. In addition to the auto-grading for submissions, Submitty supports human grading. The human graded rubric is developed by the graders as they work, allowing reuse of common feedback messages and partial credit points. The rubric can be searched and modified during and after grading is complete for consistency. By default, grading is handled by instructors and TAs who are assigned to sections of students, which can be rotated through the semester. However, an instructor can choose to incorporate peer grading, which will allow students to anonymously view and submit grades for each other, receiving multiple peer grades per assignment. Submitty has been used at RPI for several years for a variety of courses, serving over 1500 students and 50 instructors and TAs each semester, and has recently been used by several other universities. We will present ""case studies"" of assignment configurations for autograding and manual grading and demonstrate the grading interface in support of team submissions and peer grading.",Supporting Team Submissions and Peer Grading within Submitty: (Abstract Only),NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA,2018
Rita Garcia:Katria Falkner:Rebecca Vivian,"Parsons Problems is an effective Introductory Programming teaching tool that allows students to arrange code to form a functional program, reducing their cognitive load so they can focus on programming concepts. This demonstration shows how Parsons Problems can be used as a pedagogical strategy in a Massive Open Online Course (MOOC) for introductory programming. A MOOC is a learning platform, where compilers and IDEs have already been embedded for CS students to immerse themselves in a single learning environment. The Parsons Problems package, js-parsons, available at https://github.com/js-parsons/js-parsons has been successfully integrated into the University of Adelaide's edX's MOOC platform as a component that can potentially be made available for other edX platforms. The demonstration presents the educators' interface to add new questions and receive students' results, along with students' perspective, including subgoals. The demonstration prototypes new feedback models when students encounter Parsons Problems errors, opening discussion up to the audience for opinions and input. This demonstration is intended for anyone wanting to know how to use Parsons Problems within MOOCs as a pedagogical approach; those seeking to incorporate MOOCs into their coursework with focused exercises; and those wanting to contribute to future Parsons Problems enhancements. Laptops are recommended, since participants will have the hands-on opportunity to evaluate the package during the demonstration.",Parsons Problems usage within a MOOC Pedagogy: (Abstract Only),NA:NA:NA,2018
Timothy Hickey:Fatima Abu Deeb,"Enrollments in Computer Science classes have been increasing at an exponential rate in many colleges and universities, which has resulted in a rapid increase in class size especially for the Introduction to Programming classes. The Spinoza system was developed as a way to add active learning to very large CS1 classes taught in Python. The main goals were to keep all students actively involved in learning how to code and how to debug. The key innovation of Spinoza is the Solve-Then-Debug activity in which students first solve a problem by getting their code to pass a suite of unit tests and then they debug the most common incorrect attempts of their classmates. The instructor has access to a wide variety of tools for viewing performance of the class and the individual students in real-time. In this demo, we will show you how to use Spinoza in your own classes. In particular, we show how to create a class, create a problem, and how to monitor the progress of the students in both the solving and the crowdsourced debugging phase, and how to use the other orchestration features to effectively explore the concepts exposed by that problem.",SPINOZA: In-class Python Problem Solving with Classroom Orchestration (Abstract Only),NA:NA,2018
Seongtaek Lim:Rama Adithya Varanasi:Tapan Parikh,"Despite software engineering's inherently collaborative nature, collaboration with others hasn't been the primary way for students to learn how to program. Although various collaboration frameworks, such as Git, are widely used in software engineering, they've been treated as separate skills to acquire in addition to learning programming languages, rather than ways of learning, working, and thinking while learning to program. One collaborative software development task that students often want to engage in is building websites. However, the complexity of web syntax and architecture has been a hurdle in teaching and learning web design and development, especially for beginners without sufficient technical background. Specifically, syntactic barriers in several different languages for a webpage, inherent coupling of content and design in HTML, difficulty in understanding server-client model, and need for hosting resources for deployment contribute to a steep learning curve in building websites ""from scratch"". This work aims to address these issues by developing GLIDE (Git-Learning Integrated Development Environment) - a set of tools and curriculum that support in-class collaborative development in web engineering courses. GLIDE structures the website development process as a teacher-guided Git workflow for a team of students collaborating in groups in a Git repository. The application also provides a web programming model that separates content, from design, from implementation, allowing students to take on different roles and responsibilities during the development process. This demo presents a tutorial on how a group of students can build websites collaboratively with teacher's assistance based on the GLIDE software platform and curriculum.",GLIDE (Git-Learning IDE; Integrated Development Environment): In-class Collaboration in Web Engineering Curriculum for Youths (Abstract Only),NA:NA:NA,2018
Mark Mahoney,"There is value in instructors guiding students through complex programming problems. An instructor can describe how they start a program, decide what to do next, recover from poor problem solving choices, and check their work. Worked examples give students an inside look at an expert/s mental model and show how an expert approaches a problem. Live coding demonstrations of complex problems can be difficult for instructors to do well, however. This demonstration will show a tool that allows programmers to guide an audience through the evolution of some code without requiring a live performance. The open source tool, Storyteller (https://github.com/markm208/storyteller), integrates with a popular text editor to record all file editing and file operations so that they can be replayed in an animated, annotated playback. Instructors can replay their work to reflect on it. They can insert comments (text, drawings, screenshots, and audio) to describe their code and to explain the reasons why certain decisions were made. These comments are linked not only to a place in the code but to a point in time during the evolution of the code. The comments are recorded and are visible in future playbacks of the code. The author of a playback can create a narrative describing how and why their code is changing. These can be used by instructors to provide worked examples for their students. The demonstration will show some example playbacks and how they were used in class along with how to create and share playbacks with the tool.",Storyteller: A New Medium for Guiding Students Through Code Examples (Abstract Only),NA,2018
