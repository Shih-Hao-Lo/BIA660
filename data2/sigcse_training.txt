Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Elliot B. Koffman	Over the last 45 years as a student and faculty member in Computer Science, I have been involved in learning, teaching, and writing for the CS1 course. I have authored or co-authored textbooks for CS1 in nine different programming languages from Fortran to Java. Each new language was used because of a particular set of features it provided to solve the critical problem in programming or software development of the day. This talk will take a look back at these languages and the extent to which they succeeded. I will also take a look ahead to see what direction CS1 might be taking in the future.	All I really need to know I learned in CS1	NA	2009
Ursula Wolz	NA	Session details: Starting with scratch in CS 1	NA	2009
Ursula Wolz:Henry H. Leitner:David J. Malan:John Maloney	NA	Starting with scratch in CS 1	NA:NA:NA:NA	2009
James Huggins	NA	Session details: Developing problem-solving skills	NA	2009
Katrina Falkner:Edward Palmer	The ability to solve problems is the key to developing software, and it is an ability that can be difficult to learn. Introductory Computer Science students are often taught syntax and semantics, along with simple problems designed to develop logical, structured thinking, but authentic problem-solving skills are rarely developed at these early stages. In this paper we describe an approach to introductory computer science education that addresses student engagement through integrating cooperative learning techniques and authentic problem solving processes throughout each aspect of the curriculum. Over a period of 4 years, the introductory computer science course at the University of Adelaide has been modified to support a cooperative learning style. A three-stage methodology has been implemented in place of traditional lectures to achieve this. The process focuses on observing the application of programming techniques, observing problem solving techniques and then applying cooperative problem solving exercises in the classroom. The results from this change in teaching methodology have been an increase in attendance rates at lectures and practical sessions as well as improved learning outcomes as measured by exam results. Student experience surveys show students have greater motivation for learning and believe they have a better understanding of concepts since the changes have occurred.	Developing authentic problem solving skills in introductory computing classes	NA:NA	2009
Maureen Biggers:Tuba Yilmaz:Monica Sweat	It is common knowledge that enrollments in computer science have plummeted and educators are challenged to find ways to engage and promote success and retention of students while maintaining standards in introductory computer science courses. This study focuses on the implementation of a collaborative, modified peer-led team learning (PLTL) instructional approach in a large sized introductory computer science course. The site is a major southeastern university in the United States where all students are required to take one of three introductory computer science classes. The course version selected for this study specifically targets computer science majors and the study spans three years of data, and involves 591 students. Students who experienced the student-centered instruction and worked in small groups facilitated by a peer leader (treatment) in years 2006-07 and 2007-08 were compared with students who experienced a traditional recitation lecture section (control) in 2005-06. The content and the course owner was the same for all three years. Quantitative data analysis show marked and statistically significant improvements in student performance, for both male and female students. These findings suggest that using undergraduate leaders to implement a peer-led team learning model can be as effective in promoting achievement and retention in computer science education as it has shown to be in math and science classes over the past several years.	Using collaborative, modified peer led team learning to improve student success and retention in intro cs	NA:NA:NA	2009
Kristy Elizabeth Boyer:Robert Phillips:Michael D. Wallis:Mladen A. Vouk:James C. Lester	In the quest to find instructional approaches that benefit student learning, engagement, and retention, evidence suggests providing students with hands-on practice is a worthwhile use of class time. This paper presents results from an exploratory study of two different instructional approaches that were encountered in a study of experienced human tutors working with novice computing students engaged in a programming exercise. No difference in average learning gains was found between a moderate approach, in which students were given control of problem solving nearly half the time, and a proactive approach in which the tutor took initiative nearly three-fourths of the time. Implications of this finding for fine-grained instructional strategy, as well as for broader classroom management decisions, are discussed. This paper also makes the case for the value of one-on-one tutoring studies as an exploratory research methodology for the comparative evaluation of computer science teaching strategies.	The impact of instructor initiative on student learning: a tutoring study	NA:NA:NA:NA:NA	2009
Tammy VanDeGrift	NA	Session details: Listening to students	NA	2009
Brian Hanks:Laurie Murphy:Beth Simon:Ren√©e McCauley:Carol Zander	We collected advice on how to succeed at learning to program from 164 CS1 students at 3 institutions during a "saying is believing" intervention designed to encourage a growth mindset. More students gave general advice (63%) than programming-specific (23%) or attitudinal advice (34%), despite being prompted to encourage future students to develop a growth mindset toward programming. Advice categories and quotes offer educators insights into student beliefs and practices and suggest a framework for considering how best to advise students. We discuss the implications of students offering advice to other students and provide a handout of representative advice intended for distribution to students in introductory programming courses.	CS1 students speak: advice for students by students	NA:NA:NA:NA:NA	2009
Brian Hanks:Matt Brandt	Learning to program continues to be challenging for many students. This paper reports on problem-solving approaches undertaken by pair programming students. We examine reasons why some approaches lead to success while others lead to failure. We also identify some aspects of the Java language that appear to lead to student misconceptions. Finally, we provide suggestions for educators interested in helping students learn successful approaches and avoid unsuccessful ones.	Successful and unsuccessful problem solving approaches of novice programmers	NA:NA	2009
Jill Courte:Cathy Bishop-Clark	We are in a time where computing programs are seeking to differentiate themselves. The ACM suggests that there are five distinct computing disciplines -- Computer Science (CS), Information Technology (IT), Information Systems (IS), Computer Engineering (CE), and Software Engineering (SE). In practice, it seems that there can be extensive overlap between these disciplines. For example, IS is defined by the ACM as computing in an organization context, typically in business while IT is defined as focusing on computing infrastructure and needs of individual users. If each of the different types of programs wishes to identify and attract interested students, it is important to understand if students perceive differences between them. This paper presents the results of a survey to determine if students differentiate between these five disciplines. Computing majors and non-majors were presented with several task descriptions commonly associated with each discipline and asked to identify them as belonging to one of the five disciplines. Data was collected from over 300 students at several different institutions and from a variety of different majors and computing disciplines. The results of the survey are presented along with comparisons of the perceptions of majors and non-majors.	Do students differentiate between computing disciplines?	NA:NA	2009
Afsaneh Minaie	NA	Session details: Networking and mobile apps	NA	2009
Damon Tyman:Nirupama Bulusu:Jens Mache	Wireless sensor networks are revolutionizing the instrumentation of the physical world, across scientific, industrial and military applications. In this paper, we describe our efforts developing and classroom-testing hands-on materials for use in undergraduate-accessible courses on sensor networks. In Winter 2008 at Portland State University, we introduced an in-class laboratory component to a sensor networks course that had previously been entirely lecture-based. For the laboratory exercises, we utilized Sun's Java-programmable Sun SPOT [7] sensor network technology. We found the Sun SPOT based laboratory activities to be quite powerful as a teaching and excitement-fostering tool.	An activity-based sensor networks course for undergraduates with sun spot devices	NA:NA:NA	2009
Muthucumaru Maheswaran:Alexis Malozemoff:Daniel Ng:Sheng Liao:Song Gu:Balasubramaneyam Maniymaran:Julie Raymond:Reehan Shaikh:Yuanyuan Gao	GINI (GINI Is Not Internet) is an open-source toolkit for creating virtual micro Internets for teaching and learning computer networking. It provides lightweight virtual elements for machines, routers, switches, and wireless devices that can be interconnected to create virtual networks. The virtual elements run as unprivileged user-level processes. All processes implementing a virtual network can run within a single machine or can be distributed across a set of machines. The GINI provides a user-friendly GUI-based tool for designing, starting, inspecting, and stopping virtual network topologies. This paper describes the different components of GINI, briefly discusses ways of using the toolkit in a computer networking course, and reports on user feedback on an early (incomplete) version of the toolkit.	GINI: a user-level toolkit for creating micro internets for teaching & learning computer networking	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Stan Kurkovsky	This paper describes using mobile game development as a motivational tool to engage students early in the curriculum. Mobile devices have become an integral part of everyday lives of modern students; using these devices as a part of the coursework may help them see the immediate connections between Computer Science and real-world technology. Compared to traditional game development, programming mobile games is less complex, which enables students with limited programming experience to create playable mobile games within the scope of a single course. Experience presented in this paper may be easily duplicated, but it may be especially useful in the first college-level course for students with CS AP credits.	Engaging students through mobile game development	NA	2009
Ken Surendran	NA	Session details: Breadth n-th	NA	2009
Don Blaheta	"Information and knowledge management" is the title and theme of a course outlined in CC2001 that was designed to cover a diverse range of core CS topics. In this paper we discuss our experiences implementing it: it succeeds at guaranteeing coverage, but also acts as a useful prerequisite for advanced electives, and as a survey course that engages student interest in unexpected topics.	CS262: a breadth-second survey of informatic CS	NA	2009
William W. White:Jerry B. Weinberg	In this paper, we introduce the concept of breadth-last technical elective courses, which are designed to assist undergraduate CS students in integrating their entire core curriculum into a coherent whole at the end of their degree programs. Specific breadth-last courses in intelligent mobile robotics and computer game development have been implemented and are presented here to demonstrate the pedagogical concepts being discussed.	Breadth-last technical electives: integrating the CS core via computer games and mobile robotics	NA:NA	2009
Leen-Kiat Soh:Ashok Samal:Stephen Scott:Stephen Ramsay:Etsuko Moriyama:George Meyer:Brian Moore:William G. Thomas:Duane F. Shell	We report on a recently funded project called Renaissance Computing, an initiative for promoting student participation in computing. We propose a radical re-thinking not only of our core curriculum in CS, but of the role of CS at the university level. In our conception, ''computational thinking'' is neither easily separated from other endeavors nor easily balkanized into a single department. We thus imagine a CS curriculum that is inextricably linked to other domains. Our proposed initiative covers introductory, depth, and capstone courses, targeting both CS majors and minors. It is also aimed to develop interdisciplinary CS courses in sciences, engineering, arts, and humanities. Furthermore, the framework embraces collaborative learning to help improve learning.	Renaissance computing: an initiative for promoting student participation in computing	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Lillian Cassel	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Lillian N. Cassel:Richard H. Austing:Elliott Koffman	This session proposal is part of the recognition of 40 years of SIGCSE. We will look at the organization itself, how it came to be and where it might be going. It will be an interactive session with the participation of the audience informing the SIGCSE leadership of appropriate directions for the future of this group that has been so important to computing education.	SIGCSE: from the beginnings to a bright future	NA:NA:NA	2009
Daniel D. Garcia	NA	Session details: Special session	NA	2009
Daniel D. Garcia:Robb Cutler:Zachary Dodds:Eric Roberts:Alison Young	At the SIGCSE Symposium in 2007, the ACM Education Board organized a well-attended special session exploring the crisis in computing education and its underlying causes. The idea behind the session was to provide a forum at which a larger and more broadly representative subset of the education community could engage in direct dialogue with the members of the ACM Education Board and Education Council, who are charged with developing educational policy for the ACM as a whole. Last year, we extended that dialogue and explored concrete strategies for emphasizing the "passion, beauty, joy, and awe" (PBJA) of computing about which Grady Booch spoke so eloquently in his 2007 keynote address. The extremely positive feedback we received served as motivation to continue the discussion this year, to allow us to hear from new voices and receive updates on the current state of the crisis. It is increasingly clear that students today find less joy in the process of creating software than their predecessors did a generation ago. At the same time, these skills have become increasingly important, forcing companies to cast an ever widening net in their search for people with the necessary skills and training. Continued progress in the computing disciplines--and indeed the economic health of a society that relies increasingly on computing technology--can continue only if we can encourage an even larger number of students to pursue the many opportunities that careers in computing provide.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, continued	NA:NA:NA:NA:NA	2009
Stephen Cooper	NA	Session details: Special session	NA	2009
Stephen Cooper:Joan Peckham:Harriet Taylor	NA	Exploring NSF funding opportunities in EHR and CISE	NA:NA:NA	2009
Joseph Urban	NA	Session details: Panel session	NA	2009
Joseph E. Urban:Jesse M. Heines:Edward A. Fox:Harriet G. Taylor	NA	Panel on revitalized undergraduate computing education	NA:NA:NA:NA	2009
Sarah Monisha Pulimood	NA	Session details: Quotidian pedagogy	NA	2009
Janet Davis	I report on my experiences with Just-in-Time Teaching (JiTT) in two systems courses and two design courses as a new instructor at a small liberal arts college. My purposes are threefold: to further raise awareness of JiTT in the computer science education community, to show instructors can achieve JiTT's goals with simple technology and preparation on the fly, and to consider strengths and limitations of the approach, particularly for new faculty. My experience has been very positive: classes have been fun, engaging, and conversational. Students have reported that they come to class better prepared and appreciate the opportunity to ask and discuss questions before class. Where others have warned of the high workload with this approach, my experience is that the workload is reasonable compared to preparing a new course from scratch; the approach discourages some types of overpreparation. For these reasons, I would recommend the approach for other new instructors.	Experiences with just-in-time teaching in systems and design courses	NA	2009
Chris Bennett:Timothy Urness	Many CS1 courses lack a breadth in coverage of computing-related topics and do not actively engage in non-programming computer science topics. In addition, many introductory (and advanced) courses fail to help students develop oral communication skills. In this paper, we describe our experience with addressing these issues in CS1 courses at two different institutions through the use of brief, daily student presentations. Not only can this help recruitment and retention, but it helps to develop more well-rounded students. We also describe the results of a survey students take before and after the course to evaluate how participating in the course can affect attitudes and beliefs about computer science.	Using daily student presentations to address attitudes and communication skills in CS1	NA:NA	2009
Edward F. Gehringer:Carolyn S. Miller	Active-learning exercises are an effective use of class time to bring about desired learning outcomes. Instead of listening to a lecture, students are engaged in tasks that allow them to discover new knowledge, or apply what they have just learned. A barrier to wide usage of active-learning exercises is the need to design them, since few are available in textbooks, technical papers, or on the Web. The work reported in this paper demonstrates that students can design active-learning exercises that are worthy of being used in CS1 and CS2. This frees the instructor from having to write all the exercises him/herself. This paper makes three contributions: a methodology for creating student-generated active-learning exercises, several exercises for teaching difficult concepts in CS1 and CS2, and guidance about the kinds of active-learning exercises that students will enjoy and learn most from.	Student-generated active-learning exercises	NA:NA	2009
Madeleine Schep	NA	Session details: Recruitment	NA	2009
Amy Bruckman:Maureen Biggers:Barbara Ericson:Tom McKlin:Jill Dimond:Betsy DiSalvo:Mike Hewner:Lijun Ni:Sarita Yardi	Computing education suffers from low enrollment and a lack of diversity. Both of these problems require changes across the entire computing education pipeline. The "Georgia Computes!" alliance, funded by the National Science Foundation's Broadening Participation in Computing program, seeks to improve the computing education pipeline in Georgia. "Georgia Computes!" is having a measurable effect at each stage of the pipeline, but has not yet shown an impact across the whole pipeline.	"Georgia computes!": improving the computing education pipeline	NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Patricia Morreale:Stan Kurkovsky:George Chang	This paper presents a methodology for increasing undergraduate Computer Science (CS) major enrollment at comprehensive public universities, particularly those that have first generation college students or students from underrepresented populations in professional computer science in the United States. While there has been significant prior discussion of undergraduate recruiting to increase major enrollment in CS, this is the first identification of a systematic approach to recruiting distinct undergraduate student populations into the CS major. Nationally, highly selective and selective universities and colleges have worked within their student populations to increase major enrollments, while CS departments at comprehensive public universities primarily focused on regional recruiting have also worked to identify and increase CS major enrollments. The approach outlined here addresses regional recruiting for undergraduate majors in CS and has been used at two public universities. The resulting methodology serves as a template for any department or faculty member seeking to increase undergraduate enrollment in CS.	Methodology for successful undergraduate recruiting in computer science at comprehensive public universities	NA:NA:NA	2009
Brad Richards	This paper presents an analysis of the data on representation of women in US liberal arts computer science departments, using 10 years' worth of IPEDS data. What began as a search for departments with exemplary representation ended with the conclusion that the representation data is too unstable to be a useful measure of success: The correlation between average representation values in consecutive five-year periods is small, only r=0.156, and not significantly different from zero (p=0.143, t=1.477) for this set of institutions. Other metrics and sample populations are considered with similar results. This result has important implications for studies assessing the impact of departmental interventions on the representation of women, as well as research on the factors that influence representation.	Representation of women in CS: how do we measure a program's success?	NA	2009
Douglas Harms	NA	Session details: Distributed computing for the classroom	NA	2009
Jeannie R. Albrecht	Distributed applications have become a core component of the Internet's infrastructure. However, many undergraduate curriculums, especially at small colleges, do not offer courses that focus on the design and implementation of distributed systems. The courses that are offered address the theoretical aspects of system design, but often fail to provide students with the opportunity to develop and evaluate distributed applications in real-world environments. As a result, undergraduate students are not as prepared as they should be for graduate study or careers in industry. This paper describes an undergraduate course in Distributed Systems that not only studies the key design principles of distributed systems, but also has a unique emphasis on giving students hands-on access to distributed systems through the use of shared computing testbeds, such as PlanetLab and GENI, and open-source technologies, such as Xen and Hadoop. Using these platforms, students can perform large-scale, distributed experimentation even at small colleges.	Bringing big systems to small schools: distributed systems for undergraduates	NA	2009
Richard A. Brown	The potential benefits of data-intensive scalable computing (DISC) in CS education are considered in the context of a small college with an active student-operated Beowulf cluster initiative. The map-reduce computational model, of great importance in industry, is reviewed, and the Hadoop implementation of that model is connected to specific courses throughout the undergraduate CS curriculum. Concerns when running a local Hadoop-capable cluster at a small college are identified.	Hadoop at home: large-scale computing at a small college	NA	2009
Justin Cappos:Ivan Beschastnikh:Arvind Krishnamurthy:Tom Anderson	Cloud computing is rapidly increasing in popularity. Companies such as RedHat, Microsoft, Amazon, Google, and IBM are increasingly funding cloud computing infrastructure and research, making it important for students to gain the necessary skills to work with cloud-based resources. This paper presents a free, educational research platform called Seattle that is community-driven, a common denominator for diverse platform types, and is broadly deployed. Seattle is community-driven -- universities donate available compute resources on multi-user machines to the platform. These donations can come from systems with a wide variety of operating systems and architectures, removing the need for a dedicated infrastructure. Seattle is also surprisingly flexible and supports a variety of pedagogical uses because as a platform it represents a common denominator for cloud computing, grid computing, peer-to-peer networking, distributed systems, and networking. Seattle programs are portable. Students' code can run across different operating systems and architectures without change, while the Seattle programming language is expressive enough for experimentation at a fine-grained level. Our current deployment of Seattle consists of about one thousand computers that are distributed around the world. We invite the computer science education community to employ Seattle in their courses.	Seattle: a platform for educational cloud computing	NA:NA:NA:NA	2009
Martha Kosa	NA	Session details: CS1/2 transitions	NA	2009
Richard J. Enbody:William F. Punch:Mark McCullen	How suitable is a Python-based CS1 course as preparation for a C++-based CS2 course? After fifteen years of using C++ for both CS1 and CS2, the Computer Science Department at Michigan State University changed the CS1 course to Python. This paper examines the impact of that change on the second course in the sequence, CS2, which kept C++ as its primary language. We report results on a CS2 class which had a mixture of students who had used either C++ or Python from our CS1 course. The CS2 class covered the same topics as previously, though with some changes, and even gave the same final exam as a previous offering. Independent samples t-tests were used to compare students from the Python group with students from the non-Python group on three outcomes: final exam grade, programming projects scores, and final grade for the course. The main result was that there were no significant differences between the groups for all three outcomes. In addition, multiple regression analysis showed that students' past performance (overall GPA) in the University predicted final grades, final exam scores, and programming project scores for the course, but there was no effect of the programming language feature: Python or non-Python. We feel this shows that the Python-based CS1 course prepared students for the C++-based CS2 course as well as the C++-based CS1 course did---while exposing them to a different, powerful and useful language.	Python CS1 as preparation for C++ CS2	NA:NA:NA	2009
Marty Stepp:Jessica Miller:Victoria Kirst	Web programming is increasing rapidly in importance at the university level, yet there is no consensus about when and how it should be incorporated into the computer science curriculum. This paper describes our results in teaching an experimental introductory web programming course at the University of Washington that has had great success in attracting large numbers of students from inside and outside the computer science major. The course requires CS1 as a prerequisite, striking a good balance between making the course open to non-majors but also more rigorous for students with programming background. We classify the course as "CS 1.5" because many of our students take it between CS1 and CS2. We use our evaluation data to argue that a web programming course at this level leads to a great deal of student interest and enthusiasm, broadens the reach of computer science, and provides a valuable service to other departments.	A "CS 1.5" introduction to web programming	NA:NA:NA	2009
Judith Gal-Ezer:Tamar Vilner:Ela Zur	The ongoing debate among Computer Science educators about the advantages and disadvantages of the shift from the procedural to the Object-Oriented paradigm usually relates to the introductory course. Indeed, we were also concerned when in our institute we decided to implement this shift in our introductory course and started to teach Java, instead of a procedural paradigm. In our previous study we saw that the effect of the shift did not lower the achievements of students taking the CS1 course. Furthermore, we wanted to be equally sure that this was the case when students take Data Structures courses. This is the focus of the study presented in this paper. The results show that there is no significant difference in the achievements of students who came from different paradigm backgrounds. This encouraging result probably relates to the fact that our CS1 course focuses on the fundamentals of introductory Computer Science and does not only emphasize the language aspects.	Has the paradigm shift in CS1 a harmful effect on data structures courses: a case study	NA:NA:NA	2009
Curt White	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Curt M. White	This special session will present an historical look at all past SIGCSE conferences, beginning with 2008. If possible, the conference chair, from each conference will present a brief synopsis of his/her conference. This synopsis may include a photo of the conference site, the number of attendees, the paper acceptance ratio, any special awards and the awardees, the "theme" of the conference, any special issues relevant at that conference, and one or two "interesting" events that occurred during that conference.	An historical look at the SIGCSE conference	NA	2009
Kim Bruce	NA	Session details: Special session	NA	2009
Mark Bailey:Kim Bruce:Kathleen Fisher:Robert Harper:Stuart Reges	This special session will present a summary of the recommendations of the First SIGPLAN Workshop on Undergraduate Programming Language Curricula, held at Harvard University in May, 2008. The purpose of the workshop was to generate new recommendations for programming languages topics to be learned by all undergraduate CS majors. In this special session we will present a summary of the curriculum recommendations, why they were made, and ways of incorporating them into undergraduate CS curricula.	Report of the 2008 SIGPLAN programming languages curriculum workshop: preliminary report	NA:NA:NA:NA:NA	2009
Gregory Hislop	NA	Session details: Panel session	NA	2009
Gregory W. Hislop:Heidi J.C. Ellis:Allen B. Tucker:Scott Dexter	This panel will discuss issues and methods for incorporating free and open source software (FOSS) in computer science education. The panelists are investigating approaches to student participation in FOSS that produce results that are contributed to the FOSS community and actually used by others.	Using open source software to engage students in computer science education	NA:NA:NA:NA	2009
Daniel Ernst	NA	Session details: Panel session	NA	2009
Daniel Ernst:Barry Wittman:Brian Harvey:Tom Murphy:Michael Wrinn	NA	Preparing students for ubiquitous parallelism	NA:NA:NA:NA:NA	2009
Maureen Doyle	NA	Session details: Test-driven pedagogical approaches	NA	2009
Viera K. Proulx	Test-Driven Design (TDD) has been shown to increase the productivity of programming teams and improve the quality of the code they produce. However, most of the introductory curricula provide no introduction to test design, no support for defining the tests, and do not insist on a comprehensive test coverage that is the driving force of the TDD. This paper presents a curriculum, pedagogy, and the software support for introductory object-oriented program design that uses the TDD consistently from the very beginning. The testing software does not increase the program complexity and is designed to work with the simplest programs. It has been used by hundreds of students at several colleges and is freely available on the web. Our experiences show that besides improving the quality of code students produce, TDD combined with the novice-appropriate test libraries reinforces students' understanding of the object oriented program design.	Test-driven design for introductory OO programming	NA	2009
Joel Adams	Software testing is an increasingly important topic in engineering reliable software systems, and test-driven development is an increasingly popular methodology for building reliable systems. However, most software engineering instructors' courses are already very full, so that increasing coverage of testing in those courses can only occur at the expense of another topic. In this paper, we argue that testing should be introduced early in the CS curriculum, that the Data Structures (CS2) course is an especially natural place to emphasize unit testing and test-driven development, and that doing is a way to revitalize the CS2 course.	Test-driven data structures: revitalizing CS2	NA	2009
Chetan Desai:David S. Janzen:John Clements	Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.	Implications of integrating test-driven development into CS1/CS2 curricula	NA:NA:NA	2009
Jeanette Allen	NA	Session details: Retention	NA	2009
Lecia J. Barker:Charlie McDowell:Kimberly Kalahar	This paper describes an exploratory study to identify which environmental and student factors best predict intention to persist in the computer science major. The findings can be used to make decisions about initiatives for increasing retention. Eight indices of student characteristics and perceptions were developed using the research-based Student Experience of the Major Survey: student-student interaction; student-faculty interaction; collaborative learning opportunities; pace/workload/prior experience with programming; teaching assistants; classroom climate/pedagogy; meaningful assignments; and racism/sexism. A linear regression revealed that student-student interaction was the most powerful predictor of students' intention to persist in the major beyond the introductory course. Other factors predicting intention to persist were pace/workload/prior experience and male gender. The findings suggest that computer science departments interested in increasing retention of students set structured expectations for student-student interaction in ways that integrate peer involvement as a mainstream activity rather than making it optional or extracurricular. They also suggest departments find ways to manage programming experience gaps in CS1.	Exploring factors that influence computer science introductory course students to persist in the major	NA:NA:NA	2009
J. McGrath Cohoon:Zhen Wu:Jie Chao	Using longitudinal survey data from women in the CRA-W Graduate Cohort program, we measured the prevalence of observed or experienced sexism and its impact on departure from Computer Science and Computer Engineering (CSE) doctoral programs. Our data suggest that sexist behavior is perceived less often by these women than it is by women in general. In addition, few of the women who observe sexism are motivated by it to think of leaving their CSE doctoral programs. Nevertheless, when their reason for thinking of leaving is due to sexism they observed or experienced, the odds of women actually departing are at least 21 times greater than if they thought of leaving for any other reason.	Sexism: toxic to women's persistence in CSE doctoral programs	NA:NA:NA	2009
Susan Horwitz:Susan H. Rodger:Maureen Biggers:David Binkley:C. Kolin Frantz:Dawn Gundermann:Susanne Hambrusch:Steven Huss-Lederman:Ethan Munson:Barbara Ryder:Monica Sweat	This paper describes the implementation and evaluation of a program that uses active recruiting and peer-led team learning to try to increase the participation and success of women and minority students in undergraduate computer science. These strategies were applied at eight universities starting in the fall of 2004. There have been some impressive results: We succeeded in attracting under-represented students who would not otherwise have taken a CS course. Evaluation shows that participation in our program significantly improves retention rates and grades, especially for women. Students in the program, as well as the students who served as peer leaders, are uniformly enthusiastic about their experience.	Using peer-led team learning to increase participation and success of under-represented groups in introductory computer science	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Dean Hendrix	NA	Session details: Capturing and analyzing student artifacts	NA	2009
Roy P. Pargas:Samuel Bryfczynski	This paper presents and discusses a web-based software tool called GraphPad designed to facilitate interactivity in a CS2 or CS7 (data structures) course in which Tablet PCs or WACOM tablets are available. We describe how GraphPad enables an instructor to: establish a temporary network with the instructor's Tablet as server and the students' Tablets as clients, broadcast instructions and collect student Ink responses, evaluate student submissions and distribute evaluations with a single button-click, use student submissions as examples to guide lecture, and save student submissions in a database. The saved submissions may then be reviewed individually, tagged for errors, and analyzed statistically. An immediate goal is to use GraphPad to deliver CS2/CS7 course content more effectively. A long term goal is to use data collected by GraphPad to help understand the thought process of the CS2/CS7 student for the purpose of identifying students at risk early in order to provide intervention assistance.	Using ink to expose students' thought processes in CS2/CS7	NA:NA	2009
Anthony Allevato:Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Dynamic memory management and the use of pointers are critical topics in teaching the C++ language. They are also some of the most difficult for students to grasp properly. The responsibility of ensuring that students understand these concepts does not end with the instructor's lectures---a library enhanced with diagnostics beyond those provided by the language's run-time system itself is a useful tool for giving students more detailed information when their code fails. We have designed such a toolkit, Dereferee, which students can incorporate into their code with minimal intrusion into the learning process. To demonstrate its effectiveness, we examine C++ code from students in a course that relied solely on the built-in memory management behavior of the language, without any significant additional diagnostic or debugging facilities. We instrument this code with Dereferee in order to explore the causes of errors that result in program crashes and to expose hidden faults that previously lay undetected. Dereferee provided enhanced diagnostics for bugs in 63% of student submissions, and pinpointed the source of 83% of abnormal program terminations. 95% of the students would have received extra diagnostic help from using Dereferee.	Dereferee: exploring pointer mismanagement in student code	NA:NA:NA	2009
Christian Murphy:Gail Kaiser:Kristin Loveland:Sahar Hasan	It is difficult for instructors of CS1 and CS2 courses to get accurate answers to such critical questions as "how long are students spending on programming assignments?", or "what sorts of errors are they making?" At the same time, students often have no idea of where they stand with respect to the rest of the class in terms of time spent on an assignment or the number or types of errors that they encounter. In this paper, we present a tool called Retina, which collects information about students' programming activities, and then provides useful and informative reports to both students and instructors based on the aggregation of that data. Retina can also make real-time recommendations to students, in order to help them quickly address some of the errors they make. In addition to describing Retina and its features, we also present some of our initial findings during two trials of the tool in a real classroom setting.	Retina: helping students and instructors based on observed programming activities	NA:NA:NA:NA	2009
John Rabung	NA	Session details: Computational thinking across disciplines	NA	2009
Susanne Hambrusch:Christoph Hoffmann:John T. Korb:Mark Haugan:Antony L. Hosking	This paper describes the development and initial evaluation of a new course ``Introduction to Computational Thinking'' taken by science majors to fulfill a college computing requirement. The course was developed by computer science faculty in collaboration with science faculty and it focuses on the role of computing and computational principles in scientific inquiry. It uses Python and Python libraries to teach computational thinking via basic programming concepts, data management concepts, simulation, and visualization. Problems with a computational aspect are drawn from different scientific disciplines and are complemented with lectures from faculty in those areas. Our initial evaluation indicates that the problem-driven approach focused on scientific discovery and computational principles increases the student's interest in computing.	A multidisciplinary approach towards computational thinking for science majors	NA:NA:NA:NA:NA	2009
Hong Qin	Modern biology has transformed from an insular entity into an interdisciplinary science, which in turn demands interdisciplinary and cross-disciplinary training for future work force in biology and life sciences. Computational thinking is a way of thinking that uses concepts and methodologies of computing to address questions in a broad range of subjects, and as such, computational thinking offers an important skill set in modern sciences. Despite its importance, the concept of computational thinking has generally been side-stepped in undergraduate biology education. Many students in life sciences are often weak in quantitative/computing skills and tend to avoid computing-orient courses. To address these issues, we incorporated computational thinking into a bioinformatics course for undergraduate life science majors. We developed comprehensive computer laboratory exercises that offer hands-on learning experience for the targeted student pool, and employed peer-assisted collaborative learning environment. Preliminary results of these explorative efforts will be helpful for others to teach computational thinking to biology students.	Teaching computational thinking through bioinformatics to biology students	NA	2009
Owen Astrachan	Ponder means "to weigh in the mind with thoroughness and care" [31]. Pander means "to cater to the weaknesses and base desires of others" [31]. We report on a course we have designed and delivered over a six year period. The course was originally designed as a technical writing course for majors, but has evolved into a non-major's version whose enrollment ranks it as one of the three most highly-enrolled and thus arguably most popular courses for undergraduates at our university. We have worked diligently to ensure that students ponder the topics and problems that comprise the material for the course --- and the material is deeply technical at many levels. We have also pandered to student needs in meeting curriculum requirements, offering the course at a time convenient for athletes and others, and using popular media when possible. We started with the goal of engendering interest and passion for computer science and how it affects the world. We report on our efforts to attain this goal while keeping material appropriately technical. We claim our students are engaged in a different type of computational thinking than that espoused in [32, 5, 15]. For the purposes of this paper and discussion we call our approach pander-to-ponder. We provide examples and illustrations of the material we cover, relate it to similar courses at other institutions, and show how we use problems to motivate learning. In the work we report on here the learning is specific to understanding how contributions from computer science are changing the world.	Pander to ponder	NA	2009
Nell Dale	NA	Session details: Invited session: SIGCSE at 40	NA	2009
Nell Dale:Andrew McGettrick:John Impagliazzo:Robert Aiken:Elliot Koffman:Jim Leisy	NA	A historical look at curricula and materials	NA:NA:NA:NA:NA:NA	2009
Ursula Wolz	NA	Session details: Panel session	NA	2009
Ursula Wolz:Tiffany Barnes:Jessica Bayliss:Jamie Cromack	NA	Girls do like playing and creating games	NA:NA:NA:NA	2009
Jon Beck	NA	Session details: Panel session	NA	2009
Jon Beck:Vicki L. Almstrum:Heidi J.C. Ellis:Massood Towhidnejad	NA	Best practices in software engineering project class management	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Craig Mundie	Computing is undergoing a major paradigm shift. Radical new approaches to hardware and software will transform our online and offline lives, seamlessly combining the power of the internet with a world of devices. Craig Mundie, Microsoft's chief research and strategy officer, will discuss the possibilities and show how close we are to realizing them.	Rethinking computing	NA	2009
Kelvin Sung	NA	Session details: Panel session	NA	2009
Mark Lewis:Scott Leutenegger Leutenegger:Michael Panitz:Kelvin Sung:Scott A. Wallace	NA	Introductory programming courses and computer games	NA:NA:NA:NA:NA	2009
Zachary Kurmas	NA	Session details: Graphical frameworks for CS1	NA	2009
Michael H. Goldwasser:David Letscher	We describe cs1graphics, a new Python drawing package designed with pedagogy in mind. The package is simple enough that students can sit down and make use of it from the first day of an introductory class. Yet it provides seamless support for intermediate and advanced lessons as students progress. In this paper, we discuss its versatility in the context of an introductory course. The package is available at www.cs1graphics.org.	A graphics package for the first day and beyond	NA:NA	2009
Ben Stephenson:Craig Taube-Schock	This paper describes a new tool for introducing computer graphics and multimedia applications into first year, called QuickDraw, and our experience using it. QuickDraw provides an easy to use language and platform independent interface which permits students to create multimedia applications beginning with their first assignment in an introductory computer science course. QuickDraw has been carefully designed to avoid complex "magical" statements in order to setup, use, or tear down the multimedia environment, making it an appropriate tool for use with students with no prior programming experience. As instructors, we have found that QuickDraw effectively engages students by allowing them to create visually impressive programs with minimal complexity, while continuing to allow us to effectively teach fundamental computer science concepts.	QuickDraw: bringing graphics into first year	NA:NA	2009
Andrew Luxton-Reilly:Paul Denny	Computer games are widely used in programming assignments to motivate students. Traditionally, these have been text-based games such as hangman, but as Java has become widespread, the use of graphics and graphical games has increased correspondingly. We report on a framework used as scaffolding to help students understand how to design and implement a variety of interactive games. We share our experiences using this framework for assignments over a number of years.	A simple framework for interactive games in CS1	NA:NA	2009
Jill Pala	NA	Session details: Engaging K-12	NA	2009
Michelle Craig:Diane Horton	In order to address the under-representation of women in Computer Science, we have created a program for middle-school girls that specifically aims to change their attitudes about CS and encourages them to see it as a potential career. Our assessment of the program shows that it did indeed have a significant, positive impact and suggests that this was still in effect three months later. This paper describes the program and its assessment, and makes suggestions for those considering offering a similar program.	Gr8 designs for Gr8 girls: a middle-school program and its evaluation	NA:NA	2009
Mary Beth Rosson:Anastassia Ioujanina:Timothy Paone:Gretel Sheasley:Hansa Sinha:Craig Ganoe:John M. Carroll:Jan Mahar	We describe work on developing workshop activities that are part of wConnect, a project that is building an online community of women in computer and information science. The workshops are designed by college women for high school girls, with hands-on construction of dynamic web sites. Because of limited workshop time, the activities use scaffolding to help girls achieve the in-tended learning objectives. In this paper we describe the design of the activities, their formative evaluation in a series of four work-shops, and how we are using these results in the larger project.	A scaffolded introduction to dynamic website development for female high school students	NA:NA:NA:NA:NA:NA:NA:NA	2009
Tomohiro Nishida:Susumu Kanemune:Yukio Idosaka:Mitaro Namiki:Tim Bell:Yasushi Kuno	"Computer Science (CS) Unplugged" is an educational method for introducing non-specialists to concepts of CS through hands-on activities that don't require the use of a computer. Often the deeper concepts of CS have been considered as being too difficult for elementary and middle school students, and many educators teaching "IT" are not even aware of the richness of the topic. CS Unplugged methods have been used successfully with students of a wide range of ages. In this paper, we analyze the structure of CS Unplugged activities to identify the elements that make them work well. Based on the analysis, we propose a design pattern which will be useful as a guideline for developing new activities, and to revise existing ones. We also describe our experience developing original teaching material, using the pattern as a benchmark for evaluation.	A CS unplugged design pattern	NA:NA:NA:NA:NA:NA	2009
Jaime Nino	NA	Session details: Secure systems	NA	2009
Joel Brynielsson	To authorize and initiate necessary investments and enforce appropriate policies and procedures, decision-makers need to have at least a fair understanding of computer security fundamentals. This paper presents the course design and the laboratory settings that have been developed for, and used within, the high rank officer curriculum at the Swedish National Defence College. The developed course looks at computer security from an attack versus defend viewpoint, meaning that computer attacks are studied to learn about prevention and self-defense. The paper discusses the pedagogical challenges related to education of high rank officers and similar personnel in light of recently-held courses and contrasts the course relative to similar undertakings. A standpoint taken is that computer security is best taught using hands-on laboratory experiments focusing on problem solving assignments. This is not undisputed since, e.g., high rank officers are busy people who are not fond of getting stuck learning about the peripherals.	An information assurance curriculum for commanding officers using hands-on experiments	NA	2009
Li Yang	Hands-on laboratory experiences are essential critical for students to understand concepts and gain real-world insights in database security and auditing. We are developing a set of hands-on labs to integrate theories of database security into practices. Our designed labs do not require purchasing any commercial software or pre-configuration. Each lab includes objectives, results, and resources to help students to understand database security concepts including access control, virtual private database, and database auditing etc. We use two major database products (Microsoft SQL Server and Oracle 10g) to design and implement our labs.	Teaching database security and auditing	NA	2009
Joel Wein:Kirill Kourtchikov:Yan Cheng:Ron Gutierez:Roman Khmelichek:Matthew Topol:Chris Sherman	Complex distributed systems are increasingly important in modern computer science, yet many undergraduate curricula do not give students the opportunity to develop the skill sets necessary to grapple with the complexity of such systems. We have developed and integrated into an undergraduate elective course on parallel and distributed computing a teaching tool that may help students develop these skill sets. The tool uses virtualization to ease the burden of resourcing and configuring complex systems for student study, and creates varied "firefighting" gaming scenarios in which students compete to keep the system up and running in the presence of multiple issues. Preliminary experience indicates that (1) students find the tool engaging and (2) it is a manageable way in which to give students a novel perspective on interaction with complex distributed systems.	Virtualized games for teaching about distributed systems	NA:NA:NA:NA:NA:NA:NA	2009
Nancy Kinnersley	NA	Session details: Shaking up our worldview	NA	2009
Kirby McMaster:Brian Rague:Steven Hadfield	Many Computer Science educators have campaigned to increase mathematical content in the computing curriculum. However, mathematical concepts are often presented in a manner that conflicts with the general mental framework, or gestalt, of CS students. Fortunately, there is more than one gestalt in mathematics. In previous research, we developed two scales for measuring mathematical gestalt in books-a Logical Math scale and a Computational Math scale. In this paper, we apply our two scales to current Computer Theory books to assess the relative emphasis these books give to each gestalt. Our findings have relevance in the development of approaches for teaching mathematical topics in computer courses, especially Computer Theory courses.	Two mathematical gestalts for computer theory	NA:NA:NA	2009
Duane Buck:David J. Stucki	The most commonly stated definition of abstract data type (ADT) is that it is a domain of values and the operations over that domain. So, for example, a language's built-in types, like int are seen to be ADTs. It is our opinion that a pure interpretation of this definition yields a semantics in which using an ADT is the same as using built-in types: the operations are side effect free and there is no concern over alias, shallow copy or synchronization problems. Unfortunately, the term abstract data type has over time been associated with at least three distinct meanings, and those incompatible definitions have often been conflated, causing confusion to students and textbook authors alike. We believe that this has resulted in a loss of appreciation for the value-based semantics of ADTs.	The hidden injuries of overloading 'ADT'	NA:NA	2009
James J. Lu:George H.L. Fletcher	Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency? We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content.	Thinking about computational thinking	NA:NA	2009
Robert McCartney	NA	Session details: Special session	NA	2009
Jonas Boustedt:Robert McCartney:Katherine Deibel:Jim Huggins:Beth Simon:Suzanne Westbrook:The Mystery Presenter	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA	2009
Renee McCauley	NA	Session details: Special session	NA	2009
Andrew McGettrick:Ren√©e McCauley:Richard LeBlanc:Heikki Topi	NA	Report on the ACM/IEEE-CS undergraduate curricula recommendations	NA:NA:NA:NA	2009
Orit Hazzan	NA	Session details: Special session	NA	2009
Judith Gal-Ezer:Orit Hazzan:Noa Ragonis	This special session examines frameworks for the preparation of high school computer science (CS) teachers from the Israeli perspective. Specifically, several Israeli CS teacher preparation programs and their components are presented. The presentation includes both a general overview and a detailed description of the actual implementation of such programs. This bipolar presentation, we suggest, provides practical guidelines with respect to CS teacher preparation, both for policy makers and for faculty members who wish to establish a CS teacher preparation program at their universities.	Preparation of high school computer science teachers: the Israeli perspective	NA:NA:NA	2009
Khadija Stewart	NA	Session details: Graphical introduction to programming in K-12	NA	2009
Susan H. Rodger:Jenna Hayes:Gaetjens Lezin:Henry Qin:Deborah Nelson:Ruth Tucker:Mercedes Lopez:Stephen Cooper:Wanda Dann:Don Slater	This paper describes the integration of the Alice 3D virtual worlds environment into a diverse set of subjects in middle school, including the development of tutorials, example worlds and lesson plans. In the summer of 2008 our experiences with middle school teachers included three-weeks of training in Alice and guidance in the development of lesson plans. Our experiences with middle school students involved two one-week summer camps of instruction in Alice. We found both the teachers and the students strongly engaged with Alice. The teachers created lesson plans with Alice worlds to interactively teach a topic and other lesson plans in which students build an Alice world on a particular topic either from scratch or using a template world. The students in the Alice camps had both instruction in Alice and free time to develop Alice worlds of their choice. We found that the students used a large variety of basic Alice concepts and computer science concepts in the worlds they built in their free time.	Engaging middle school teachers and students with alice in a diverse set of subjects	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2009
Joey C.Y. Cheung:Grace Ngai:Stephen C.F. Chan:Winnie W.Y. Lau	To address the unique demands and challenges of educational computing, various kinds of environments, including graphics-rich and textual environments, have been proposed for use in introductory courses to provide students with a rich and interesting learning environment. In our experience, students in Grade 7 and younger respond best to the graphics environments while senior high school students prefer a conventional textual programming environment. Clearly, this leaves a gap at Grade 11-13, with students often on the one hand finding the graphics-based environments too limited and on the other finding the textual environments too difficult. In this paper, we propose a text-enhanced graphical programming environment which is innovative and interactive, and designed for junior high students with no programming experience. This environment allows students to design their own creative stories or programs. They build their programs using drag-and-drop iconic blocks, but unlike other, similar icon-based programming languages, they are also presented with the syntax of the actual program they are constructing in real-time. Once a particular icon block has been dropped in the programming area, the syntax statements corresponding to that block is immediately generated and presented to the user. The environment also allows them to modify the code without any limitations. Our results show that our textual-graphical hybrid environment has a positive impact on the learning experience of the students.	Filling the gap in programming instruction: a text-enhanced graphical programming environment for junior high students	NA:NA:NA:NA	2009
Gary Kacmarcik:Sylvie Giral Kacmarcik	This paper describes our work motivating a group of students (grades 5-8) to learn real-world computer programming by introducing them to homebrew development for the Nintendo Gameboy Advance (GBA) and DS (NDS) systems using C. Students use a freely available professional toolchain (devkitPro) for development. A custom application was written that allowed the students to easily create their own tilesets (sprites and background maps) and quickly get started building their first ROMs. A series of tutorials was created to complement the program and help the students through the creation of their first game.	Introducing computer programming via gameboy advance homebrew	NA:NA	2009
William Hochstettler	NA	Session details: Mental hygiene -- analysis and promotion of good CS work habits	NA	2009
Vincent A. Cicirello	In this paper, we explore the potential important role that unannounced (or "pop") quizzes can play in CS-1. "Pop" quizzes generate continual feedback to both the student and the instructor of the course. They also encourage students to avoid missing class unless necessary. We present the results of a three year study on the effectiveness of "pop" quizzes in CS-1. Our results demonstrate that students who experience "pop" quizzes in CS-1 score higher on exams than do their counterparts who did not experience "pop" quizzes. This appears especially true for upperclassmen, particularly for juniors. The use of "pop" quizzes in CS-1 also improves performance on programming assignments for juniors. CS/IS majors and Math majors both receive a greater benefit from "pop" quizzes than do other non-majors.	On the role and effectiveness of pop quizzes in CS1	NA	2009
Christopher Hundhausen:Anukrati Agrawal:Dana Fairbrother:Michael Trevisan	Formal code inspections are employed by teams of professional software engineers to identify software defects and improve the quality of software. After reviewing a piece of code individually, members of an inspection team come together to log the issues they have found, and to find new ones. Within the scope of a multi-institutional research project to adapt, refine, and evaluate studio-based learning methods in computing education, we are developing an adaptation of the formal code inspection called the pedagogical code review for use in lower-division computer science courses. In a pedagogical code review, a group of three to four students, led by a trained moderator, (a) walk through segments of each other's programming assignments, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. We implemented pedagogical code inspections in three lab sessions of a CS 1 course. Through an analysis of inspection logs and exit surveys, we compiled evidence that the reviews improved the quality of students' code, stimulated increasingly sophisticated discussions of programming issues and practices, and promoted a sense of community.	Integrating pedagogical code reviews into a CS 1 course: an empirical study	NA:NA:NA:NA	2009
James B. Fenwick, Jr.:Cindy Norris:Frank E. Barry:Josh Rountree:Cole J. Spicer:Scott D. Cheek	This paper reports on the progress of an NSF funded research project investigating the development practices of students in introductory programming courses. In previous work, we describe our extension of the BlueJ IDE to capture events associated with program development. Here we report on data collected during the Fall 2007 and Spring 2008 semesters on CS 1 students. In particular, we show that our data analysis independently confirms the results obtained in separate studies by Jadud [3, 2]. In addition we use our empirical evidence to discern some higher level "patterns" of beginning student programming behaviors including potential cheating and the impact on success of students starting projects late.	Another look at the behaviors of novice programmers	NA:NA:NA:NA:NA:NA	2009
Leila Wallace	NA	Session details: Taking software engineering out of the classroom	NA	2009
Adrian Rusu:Amalia Rusu:Rebecca Docimo:Confesor Santiago:Mike Paglione	It is widely recommended by both academia and industry that today's technology and software engineering students be well prepared for industry before graduation, especially given global outsourcing and other trends. Various methods have been developed to ensure student readiness, including co-ops and capstone courses. These approaches increasingly use real-world projects for their benefits to industry and often to the community at large. In this paper, we argue that students can be prepared to effectively join industry and keep the US technology workforce competitive through a curriculum that includes a theoretical software engineering course with real-world projects and the collaboration of paired teams across two or more universities. We present a case study of a successful teaching experience that features these aspects, and describe the outcome along with the unique perspective of a participating student.	Academia-academia-industry collaborations on software engineering projects using local-remote teams	NA:NA:NA:NA:NA	2009
M. H.N. Tabrizi:Carol B. Collins:Vipul Kalamkar	Students in software engineering need experiences that prepare them for a global work environment that is more and more likely to be structured around team work in which team members may come from a variety of disciplines and cultures and be geographically dispersed. New grads in software engineering are more and more likely to communicate with team members and managers solely via electronic means (e.g. teleconference, videoconference, e-mail, e-file sharing). This paper describes a highly successful international collaboration of students from two universities enrolled in undergraduate software engineering classes, one in the USA and the other in India. Within a semester, these students collaborated remotely to produce software for a leading international software development company. This collaboration, repeated for two semesters and planned for a third, met all learning objectives while successfully producing the desired software. This experience truly engaged our students and enabled the students to learn via a standard course in software engineering about many aspects of professional practice without resorting to special programs like co-op/internships, honors/research independent study, or capstones.	An international collaboration in software engineering	NA:NA:NA	2009
Ralph Morelli:Trishan de Lanerolle	Can engaging students in free and open source software(FOSS) pique their interest in computer science? This paper describes an introductory computer science course that introduced students to using FOSS, to contributing to a humanitarian FOSS project, and to studying the broader impact of FOSS on our society. Students learned basic webprogramming skills (PHP/MySQL) and made small but significant contributions to a global FOSS project. Mistakes were made and opportunities were missed. But overall theexperiment was a success and the experience was enjoyable and educational for students and instructor alike. By building on what worked well, this course could serve as a model for incorporating study of FOSS into the introductory computing curriculum.	Foss 101: engaging introductory students in the open source movement	NA:NA	2009
Don Bailes	NA	Session details: Games 2 teach	NA	2009
Bo Brinkman	I describe a simple game for use in starting a class discussion about corporate decision-making and whistle-blowing. The game allows students to experience the power of managers to influence (for good or bad) the decisions of their underlings, and the counter-balancing powers held by workers.	The heart of a whistle-blower: a corporate decision-making game for computer ethics classes	NA	2009
Michael Eagle:Tiffany Barnes	We are developing games to increase student learning and attitudes in introductory CS courses. Wu's Castle is a game where students program changes in loops and arrays in an interactive, visual way. The game provides immediate feedback and helps students visualize code execution in a safe environment. We compared the game to a traditional programming assignment in an introductory CS course. In our study, half of the students were randomly selected to play the learning game first and half to write a program first. Our results show that students who play our learning game first outperform those who write a program before playing the game. Students in the game-first group felt they spent less time on the assignments, and all students preferred the learning game over the program. These results suggest that games like Wu's Castle can help prepare students to create deeper, more robust understanding of computing concepts while improving their perceptions of computing homework assignments.	Experimental evaluation of an educational game for improved learning in introductory computing	NA:NA	2009
Emily Navarro:Andr√© van der Hoek	In this paper, we describe a multi-site evaluation of SimSE, an educational software engineering simulation game. This study was designed to build on our previous experience of evaluating SimSE in courses and controlled lab settings at UC Irvine, in order to validate our findings and discover any factors that come into play when SimSE is used in other institutions. The study consisted of three different universities using SimSE in their respective courses and reporting the results to us. The results confirmed several of our previous findings, as well as highlighted a number of critical considerations that must be taken into account when using SimSE in a course.	Multi-site evaluation of SimSE	NA:NA	2009
Paul Tymann	NA	Session details: Special session	NA	2009
Paul T. Tymann:Laurie White	The objective of this special session is to provide an opportunity for computer science educators, at both the college and high school level, to provide input to the AP CS Development Committee as it refines the curriculum for the A course in light of the elimination of the AB exam. The input and active participation of educators attending this special session will help the members AP CS Development Committee to define a course and exam that continues to meet the high standards for teaching and learning required in the comparable college course.	The future of the AP CS program	NA:NA	2009
Florence Appel	NA	Session details: Special session	NA	2009
Florence A. Appel:Katherine Deibel:C. Dianne Martin:Joseph D. Oldham:Tarsem S. Purewal, Jr.:Carol L. Spradling	NA	From the man on the moon to 2001 and beyond: the evolving social and ethical impact of computers a session to commemorate SIGCSE' 40 anniversary	NA:NA:NA:NA:NA:NA	2009
Richard Salter	NA	Session details: Panel session	NA	2009
Richard M. Salter:Robert D. Cupper:Stuart Hirshfield:Alexa M. Sharp	NA	New models for the CS1 course: a fifteen year retrospective	NA:NA:NA:NA	2009
Esmail Bonakdarian	NA	Session details: Games how-to	NA	2009
Jessica D. Bayliss	Computer Science degree program enrollments have fallen precipitously since the year 2000 and it is not surprising that novel approaches to education are being tried to both attract and retain students. One of the areas with a record of success is with using games in introductory programming courses. While there are several successful programs, the drawbacks of these approaches are not commonly discussed along with their benefits. Having run a successful game-based program that retained students within the CS major at a 93% rate, we discuss both the benefits of the program as well as the problems that need to be considered and overcome.	Using games in introductory courses: tips from the trenches	NA	2009
Briana B. Morrison:Jon A. Preston	This paper considers how gaming has been infused into the computing curriculum of institutions in the United States. To increase motivation of students and improve retention, many programs have begun using gaming in their introductory courses, as upper level electives, or as separate degree programs. The authors review the current use of gaming within curricula and analyze the content of game development degree programs. Finally, the authors describe plans at their institution to incorporate gaming throughout the computing curriculum and present initial results.	Engagement: gaming throughout the curriculum	NA:NA	2009
Monica McGill	Game development programs are being added to computer science departments as either a track, minor, or major in post-secondary institutions across the United States. These programs are being developed with little published quantitative or qualitative research on what such programs should entail. The quantitative research in this pilot study defines qualifications sought when hiring game developers for positions in industry. Using cross-sectional data, qualifications from job advertisements were coded, categorized, and then subcategorized and weighted totals were calculated based on skills being either required or desired. Weighted totals in each subcategory were compared and ranked. The top 10 qualifications are provided, along with a breakdown of rankings of all subcategories within each category. Subcategories of Languages and Tools/Environments are also discussed briefly to highlight key qualifications in each.	Weighted game developer qualifications for consideration in curriculum development	NA	2009
Richard A. Brown	NA	Session details: Departmental issues	NA	2009
Donald B. Sanderson	This paper will describe the changes made to an existing student outcomes assessment system to more closely conform to the new assessment guidelines of the Computer Accreditation Commission of ABET. The processes, results and effectiveness of the techniques will be examined.	Revising an assessment plan to conform to the new ABET-CAC guidelines	NA	2009
Charles P. Riedesel:Eric D. Manley:Susan Poser:Jitender S. Deogun	For decades, US universities and colleges have had policies pertaining to the conduct of their students at the institutional level. These policies are referred to as Academic Integrity Policies or Codes of Conduct. The Code of Ethics, instituted by Association of Computing Machinery (ACM) has been the standard for the computing sciences profession for over 15 years. However, the traditional institution-wide academic integrity policies have not adapted to the complexities that arose from rapid progress in information technology (IT) and thus either fail to address or are in conflict with the nature of problems in computer science education. In this paper, we propose a model for development and implementation of an academic ethics policy (ethics is a broader concept that includes integrity) that addresses the challenges imposed by information technology vis-√°-vis the best modern teaching practices in computer sciences and engineering. Implementing policies that are more in line with the methods of industry and compatible with newer educational pedagogies should make the whole educational environment more engaging to students.	A model academic ethics and integrity policy for computer science departments	NA:NA:NA:NA	2009
Mujtaba Talebi:Thomas Way	Computer science educators are uniquely positioned to promote greater awareness of Green Computing, using the academic setting to encourage environmentally conscious use of technology. This paper reports on practical techniques that can engage faculty and students, enabling Green Computing to be integrated into the classroom and research laboratory. Analysis and empirical evaluation of each reported technique is given, comparing the efficacy of each in terms of energy, environmental and financial cost savings. These results are provided as technological and economic evidence for the benefits of "Going Green," and to promote education in Green Computing in the classroom, department and research lab.	Methods, metrics and motivation for a green computer science program	NA:NA	2009
Diana Cukierman	NA	Session details: Reflecting on programming	NA	2009
Michael R. Wick	This paper describes an entry-level programming assignment that can be used to help students learn the value of diversity through computer programming. The assignment was given as part of a preliminary experiment to establish the impact of a student programming assignment on student attitudes toward cultural diversity. The results provide suggestive evidence that students learn to value diversity via the given programming assignment.	Using programming to help students understand the value of diversity	NA	2009
Naveed Arshad	Many studies have shown that students often face difficulty in applying programming concepts to design a program that solves a given task. To impart better problem solving skills a number of pedagogical approaches have been presented in the literature. However, most of these approaches provide a general strategy of problem solving. But in reality problem solving is a skill that is developed with experience over a period of time. In this paper, we present a pedagogical approach to teach problem solving using think-alouds. In a think-aloud problem solving approach students learn the skill of problem solving by closely observing an 'experienced programmer. We used this approach in a CS2 class and our evaluation results show that think-aloud problem solving is an extremely effective pedagogical technique, particularly for female students.	Teaching programming and problem solving to CS2 students using think-alouds	NA	2009
Stuart A. Hansen	Retaining students in Computer Science may be improved by engaging them in the learning process while preventing them from becoming overly frustrated. While engaging students during lecture is certainly important, most students spend a significant amount of time working on programming projects outside of class. Gaining a deep understanding of student engagement in programming is difficult, since the instructor is seldom present during the process. This paper presents the results of student surveys administered after each programming project for multiple sections of two courses: CS2, and Data Structures and Algorithms. We analyze the data in terms of engagement, frustration and niftiness.	Analyzing programming projects	NA	2009
Sriram Mohan	NA	Session details: Models for cross-course fertilization of ideas	NA	2009
Susan L. Reiser:Rebecca F. Bruce	In this paper, we describe our CS0 course, 3D Modeling and Fabrication, that includes a service-learning CNC milling project as a high tech hook to interest students, both our own and middle school students, in computer science and engineering. Among the CS0 learning outcomes achieved through the design and fabrication projects are computer literacy, writing-across-the curriculum, and development of problem-solving skills such as quantitative reasoning and critical thinking. This course is situated in the Integrated Liberal Studies program at University of North Carolina at Asheville. It can be offered as part of any general education program to fulfill a computer literacy or writing-across-the-curriculum requirement. Taking an idea and nurturing it from a concept to a model, to a series of working drawings, and then to a three-dimensional prototype is exciting and fun, and leaves a tangible reminder of the creativity inherent in computer science.	Fabrication: a tangible link between computer science and creativity	NA:NA	2009
Robin Y. Flatland:James R. Matthews	In this paper we show how an engaging problem can be used in both a discrete mathematics course and a programming course as a way to expose students to multiple methods of inquiry and to strengthen the links between the two courses. Since students typically take Discrete Mathematics and a programming course simultaneously, this is an opportunity for them to analyze a problem from multiple perspectives during a single semester. We describe how we have accomplished this using a relatively new problem that is easily stated and has a surprising solution that defies intuition. In the programming course, students experienced a design/empirical approach to the problem by implementing simulations of various solutions and collecting experimental results. By adjusting the emphasis of the programming assignment, we show that it can fit naturally into a range of programming courses, i.e. courses on introductory programming, data structures, and object-oriented techniques. In the Discrete Mathematics course, students analyzed solutions using tools from counting, probability, and calculus. We observed that by linking the two courses using a common problem, our students were more cognizant of inquiry methods and student engagement increased.	Using modes of inquiry and engaging problems to link computer science and mathematics	NA:NA	2009
Christopher Brown:Robert Pastel	We developed combined graduate and undergraduate courses in which undergraduates created a prototype based on user-centered design, and graduate students worked with them to evaluate those prototypes based on common usability principles. It provided undergraduate students experience practicing user centered design, while providing graduate students experience with usability evaluation. It also provided graduate students the opportunity to introduce current HCI research areas to students who may be considering graduate school. The course successfully engaged both graduate and undergraduate students while providing a beneficial experience through their interactions.	Combining distinct graduate and undergraduate HCI courses: an experiential and interactive approach	NA:NA	2009
Owen Astrachan	NA	Session details: Special session	NA	2009
Owen Astrachan:Henry Walker:Chris Stephenson:Lien Diaz:Jan Cuny	The Advanced Placement (AP) Computer Science program is intended to reflect enough of a common core of a first semester or year of university-level computer science so that placement or credit can be awarded for work done before college. The SIGCSE symposia have a long history of providing forums for discussing the evolution of the AP program from its inception [1] to the transition from Pascal to C++ [3] to the transition from C++ to Java [2,5,7,8,9]. Panels related to how credit and placement are awarded have also been part of the SIGCSE conferences [4,6]. This special session is a report of the ongoing process of developing new and possible wide-ranging changes to the AP program.	Advanced placement computer science: the future of tracking the first year of instruction	NA:NA:NA:NA:NA	2009
Lecia Barker	NA	Session details: Panel session	NA	2009
Lecia J. Barker:Elizabeth Adams:Amardeep Kahlon:Andrea Lawrence:Allison Young	NA	Trends and discoveries of the computing educators oral history project	NA:NA:NA:NA:NA	2009
Inna Pivkina	NA	Session details: Special session	NA	2009
Inna Pivkina:Desh Ranjan:Jerry Lodder	NA	Historical sources as a teaching tool	NA:NA:NA	2009
Bengt Aspvall	NA	Session details: Tools for engagement	NA	2009
Susan H. Rodger:Eric Wiebe:Kyung Min Lee:Chris Morgan:Kareem Omar:Jonathan Su	We describe the results from a two-year study with fourteen universities on presenting formal languages in a more visual, interactive and applied manner using JFLAP. In our results the majority of students felt that having access to JFLAP made learning course concepts easier, made them feel more engaged in the course and made the course more enjoyable. We also describe changes and additions to JFLAP we have made based on feedback from users. These changes include new algorithms such as a CYK parser and a user-controlled parser, and new resources that include a JFLAP online tutorial, a wiki and a listserv.	Increasing engagement in automata theory with JFLAP	NA:NA:NA:NA:NA:NA	2009
Anne Philpott:Tony Clear:Jacqueline Whalley	This paper extends the work of the BRACElet project [17] by assessing the program comprehension skills of intermediate level students. Student performance on a pathfinder algorithm simulation task is reviewed to assess the students' comprehension levels, as categorized according to the SOLO educational taxonomy. The paper describes the nature of student responses, and the variety of representations provided, illustrating the role of discovery in effective student learning.	Understanding student performance on an algorithm simulation task: implications for guided learning	NA:NA:NA	2009
Andrew Brownfield:Cindy Norris	The small instruction set size of the LC-3 as well as its similarities to more powerful instruction sets make it an ideal hypothetical machine for introductory computer science and computer engineering students. Several tools are available for working with this hypothetical machine including simulators, and assemblers for various platforms. We have created an additional tool, LC3uArch, that is useful for debugging LC-3 programs like the existing simulators, but unlike existing simulators also helps student to develop an understanding of the LC-3 microarchitecture. The results of a student survey on the use of LC3uArch indicate our students find LC3uArch a valuable learning tool.	LC3uArch: a graphical simulator of the LC-3 microarchitecture	NA:NA	2009
Richard M. Salter:John L. Donaldson	Students of Computer Organization should be able to "learn by doing" at all levels of computer design. Digital logic circuitry is frequently taught using simulation software, however such platforms are often limited to exposing only a narrow range of design levels. This paper describes how, in the new multilevel simulation system DLSim 3, we are able to incorporate abstraction and extensibility to present the many levels of complex circuit designs in a single environment: from low level combinational and sequential circuits, through models of complete CPUs. Among other features, DLSim 3 is able to accomplish this by providing three different types of circuit abstraction: cards, chips, and plug-ins. Using DLSim 3, students recognize the uniformity of system structure, as well as the principles of abstraction that link the various levels of design.	Abstraction and extensibility in digital logic simulation software	NA:NA	2009
Lucia Dale	NA	Session details: Robots	NA	2009
Glenn V. Nickens:Ethan J. Tira-Thompson:Thorna Humphries:David S. Touretzky	Hand-eye systems combine computer vision with kinematics and dynamics calculations to achieve dexterous manipulation. These versatile platforms for teaching robotics principles have not been widely used in undergraduate laboratories due to cost. We describe a new hand-eye system constructed from Robotis Dynamixel servos, a USB interface module, and a webcam, that can be built for under $500 and run by a PC using the Tekkotsu open source software framework. A suggested curriculum is outlined.	An inexpensive hand-eye system for undergraduate robotics instruction	NA:NA:NA:NA	2009
Tom Lauwers:Illah Nourbakhsh:Emily Hamner	We present CSbots, an ongoing program to use robots as educational tools in the Introduction to Computer Science CS1) course. We aim to use robotics to improve learning and retention by altering course work so that it is more relevant to students. In our development process we use an iterative cycle composed of design, pilot, and evaluation steps. We have completed the first of these cycles, the alpha cycle, and describe the robot hardware, software, and curriculum development processes as well as key evaluation results from pilots conducted at two community colleges in Fall 2007. We discuss the implications of these results and our experiences on the in-progress beta design cycle and planned pilots.	CSbots: design and deployment of a robot designed for the CS1 classroom	NA:NA:NA	2009
Jay Summet:Deepak Kumar:Keith O'Hara:Daniel Walker:Lijun Ni:Doug Blank:Tucker Balch	We have developed a CS1 curriculum that uses a robotics context to teach introductory programming [1]. Core to our approach is that each student has their own personal robot. Our robot and software have been specifically developed to support the needs of a CS1 curriculum. We frame traditional problems (robot control) in terms that are personal, relevant, and fun. Initial trial classes have shown that our approach is successful and adaptable.	Personalizing CS1 with robots	NA:NA:NA:NA:NA:NA:NA	2009
William Isaac McWhorter:Brian C. O'Connor	The purpose of the research study described in this paper was to investigate the effectiveness of using LEGO Mindstorms robotic activities to influence student motivation in an introductory university computer programming course. Various aspects relating to student motivation were measured using the Motivated Strategies for Learning Questionnaire. Tests revealed no statistically significant differences between groups in relation to intrinsic goal orientation, task value, control of learning beliefs, self-efficacy, and test anxiety at the alpha = .05 level. The experiment did detect a statistically significant difference between groups in relation to extrinsic goal orientation. The LEGO group, however, showed a larger decrease in levels of extrinsic goal orientation, suggesting they were less motivated in learning the material for rewards such as grades. While this is not necessarily a bad thing, ideally a decline in extrinsic goal orientation would be accompanied by a statistically significant increase in intrinsic goal orientation suggesting students were instead motivated because they were interested in the content of the material. This was not the case in this study. Despite the lack of positive quantitative results, responses to student follow-up questions suggest that at least some of the students enjoyed the LEGO Mindstorms activities. A discussion of possible factors influencing these results is provided.	Do LEGO¬Æ Mindstorms¬Æ motivate students in CS1?	NA:NA	2009
Richard Ord	NA	Session details: Systems	NA	2009
Shimon Schocken:Noam Nisan:Michal Armoni	We describe a synthesis course that provides a hands-on treatment of many hardware and software topics learned in computer science (CS) programs. Using a modular series of twelve projects, we walk the students through the gradual construction of a simple hardware platform and a modern software hierarchy, yielding a basic yet powerful computer system. In the process of building the computer, the students gain a first-hand understanding of how hardware and software systems are designed and how they work together, as one enterprise. The course web site contains all the materials necessary to run this course in open source, and students and instructors are welcome to use and extend them freely. The course projects are modular and self-contained, and any subset of them can be implemented in any order and in any programming language. Therefore, they comprise a flexible library of exercises that can be used in many applied CS courses. This paper gives a description of the approach and the course, juxtaposed against general educational principles underlying meaningful learning.	A synthesis course in hardware architecture, compilers, and software engineering	NA:NA:NA	2009
Michael D. Black	This paper describes a semester project where students design an operating system from the ground-up, capable of booting from a floppy disk on an actual machine. Unlike previous projects of this kind, this project was designed for students with only one semester of programming experience and no prior exposure to data structures, assembly language, or computer organization. Students nevertheless wrote a full system consisting of system calls, program execution, a file system, a command-line shell, and support for multiprocessing. The project was assigned to a class and successfully completed by nearly every student.	Build an operating system from scratch: a project for an introductory operating systems course	NA	2009
Ben Pfaff:Anthony Romano:Godmar Back	Pintos is an instructional operating system, complete with documentation and ready-made, modular projects that introduce students to the principles of multi-programming, scheduling, virtual memory, and filesystems. By allowing students to run their work product on actual hardware, while simultaneously benefiting from debugging and dynamic analysis tools provided in simulated and emulated environments, Pintos increases student engagement. Unlike tailored versions of commercial or open source OS such as Linux, Pintos is designed from the ground up from an educational perspective. It has been used by multiple institutions for a number of years and is available for wider use.	The pintos instructional operating system kernel	NA:NA:NA	2009
Geoffrey M. Draper:Robert R. Kessler:Richard F. Riesenfeld	Many courses on the history of computing are designed for a general student audience, and as such, include fewer technical details than one might find in a typical CS course. While this approach is appropriate in some contexts, it risks losing the interest of the students who could perhaps benefit most from the subject-namely, future computer scientists. This paper describes a technically-oriented History of Computing course which we taught at the University of Utah in 2008. Like other History of Computing courses, ours included a significant amount of writing and discussion. However, inasmuch as our course was created specifically for CS students, we also incorporated several "hands-on" programming exercises and demonstrations, giving students actual experience with the computing environments of the past. Students and faculty alike have responded enthusiastically to this dual-faceted approach.	A history of computing course with a technical focus	NA:NA:NA	2009
Monica Brockmeyer	NA	Session details: Interdisciplinary multimedia	NA	2009
Mark Christensen van Langeveld:Robert Kessler	Many Universities and Colleges are building interdisciplinary programs between engineering and fine arts that focus on games, special effects, animation and other areas that require interdisciplinary efforts. This is in response to the needs of the entertainment industries. The video game and 3D animation businesses fundamentally involve computer scientists and artists working closely together. The Entertainment Arts and Engineering (EAE) program (founded in 2007) is an undergraduate interdisciplinary program at the University of Utah (UofU). Students pursuing an animation or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. Two courses taught at the UofU with curriculum in the middle of the continuum between the two departments are the courses: Digital Character Production and Machinima. These courses provide an extraordinary applied learning experience for students to combine learning concepts that are not commonly taught together. The curriculums are designed to teach students to breakdown extremely complex problems, requiring understanding from both disciplines, into manageable segments that allow easy understanding of diverse concepts from computer graphics principles to sculptural ideology and from graphic algorithms to film/storytelling. It is a process that provides a direct view of the correlations of the critical concepts from each of the disciplines. This paper presents our insights from teaching and reviewing these two classes.	Two in the middle: digital character production and machinima courses	NA:NA	2009
Daniela Stan Raicu:Jacob David Furst	This paper presents a successful model for undergraduate research where student participants work on interdisciplinary research projects; in our case, at the frontier between computer science and medicine. Students are part of research teams comprised of other undergraduates, graduate students, faculty and medical experts, participate in professional development and training activities within the larger group, and disseminate their results at the host institutions or conferences specific to the interdisciplinary focus. The model outcomes at the end of the first three years (2005-2007) indicate that the interdisciplinary model successfully 1) expanded the student participation in research by recruiting students who might not otherwise have research opportunities, 2) attracted a diversified pool of talented students into science, 3) promoted interdisciplinary undergraduate studies in computer science and medical informatics as well as in future graduate studies; and 4) trained students in all phases of research, including writing and presenting research papers at conferences.	Enhancing undergraduate education: a REU model for interdisciplinary research	NA:NA	2009
Jennifer Burg:Jason Romney	This paper reports on an NSF-grant supported summer workshop that brought music and computer science students together for eight weeks to explore creative projects in digital sound production. The dynamics of the students' collaborations were observed as they crafted experimental projects weaving together music, theatre production, sampled digital audio, and MIDI. Moving among various levels of abstraction, the students found practical and artistic motivations to learn the science of digital sound. The projects they produced suggest ways to revitalize computer science courses by linking science, art, and practice through digital sound, a subject naturally interesting to students.	Linking computer science, art, and practice through digital sound	NA:NA	2009
Jesse M. Heines:Gena R. Greher:Sarah Kuhn	This paper describes how a graphical user interface (GUI) programming course offered by the Dept. of Computer Science (CS) was paired with a general teaching methods course offered by the Dept. of Music in an attempt to revitalize undergraduate CS education and to enrich the experiences of both sets of students. The paper provides details on the joint project done in these classes and the evaluation that assessed its effect on the curriculum, students, and professors.	Music performamatics: interdisciplinary interaction	NA:NA:NA	2009
Nick Parlante	NA	Session details: Special session	NA	2009
Nick Parlante:Thomas P. Murtagh:Mehran Sahami:Owen Astrachan:David Reed:Christopher A. Stone:Brent Heeringa:Karen Reid	Assignments determine much of what students actually take away from a course. Sadly, creating successful assignments is difficult and error prone. With that in mind, the Nifty Assignments session is about promoting and sharing successful assignment ideas, and more importantly, making the assignment materials available for others to adopt.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2009
David Berque	NA	Session details: Special session	NA	2009
Dave A. Berque	NA	A tutorial on stroke-based interfaces: unistroke recognition algorithms appropriate for compelling projects in introductory courses	NA	2009
Lillian Cassel	NA	Session details: Special session	NA	2009
Gordon Davies:Lillian N. Cassel:Arthur Pyster:Michael Caspersen:Heikki Topi	This special session will proved information about the status of work related to Masters programs in Computing. Specifically, the session will describe work completed in the following areas: the categorization of masters programs in computing, the development of curriculum recommendations for masters programs in software engineering, the collaborative work with the Association for Information Systems on the Masters program in Information Systems	ACM education board and masters level programs	NA:NA:NA:NA:NA	2009
Daniel Cliburn	NA	Session details: Data- and code-space animation	NA	2009
Michael G. Boland:Curtis Clifton	Like a screenplay, a program is both a static artifact and instructions for a dynamic performance. This duality can keep laypeople from appreciating the complexity of software systems and can be a stumbling block for novice programmers. PyLighter lets laypeople and novice programmers perceive the relationship between static Python code and its execution. PyLighter works with everything from simple console applications to arcade-style games, and because PyLighter is easy to adopt and use, instructors can integrate it into any Python-based introductory course without changing the rest of their syllabus.	Introducing PyLighter: dynamic code highlighter	NA:NA	2009
David Scot Taylor:Andrei F. Lurie:Cay S. Horstmenn:Menko B. Johnson:Sean K. Sharma:Edward C. Yin	We investigate the effectiveness of a predictive interaction animation tool for understanding graph algorithms. We compare performance improvement of students after they have used two different animation tools for the given algorithms, when one of the tools forces a more active, predictive approach while the other is a more traditional animation. Results show significant improvement in performance after students use the predictive tool.	Predictive vs. passive animation learning tools	NA:NA:NA:NA:NA:NA	2009
Amruth N. Kumar	We incorporated animation of the data space into a web-based tutor for solving problems on C++ pointers and made the tutor available to students. In evaluation of the tutor, we found that data space animation indeed helps students learn the semantics of pointers. But, it is no more effective at this than text explanation of the step-by-step execution of the program.	Data space animation for learning the semantics of C++ pointers	NA	2009
James Early	NA	Session details: Summer outreach programs	NA	2009
Winnie W.Y. Lau:Grace Ngai:Stephen C.F. Chan:Joey C.Y. Cheung	As enrollments in engineering and computer science programs around the world have fallen in recent years, those who wish to see this trend reversed take heart from findings that children are more likely to develop an abiding interest in technology if they are exposed to it at an early age [3, 9]. In line with this research, we now see more summer camps and workshops being offered to middle school students with the objective of teaching programming and computer technology [1, 6, 8, 12]. To offer students a stimulating and interesting environment while teaching computing subjects, the learning tools in these camps usually revolve around robots and graphical programming of animations or games. These tools tend to mainly attract youngsters who like robotics or game design. However, we believe that we can improve the diversity of the student pool by introducing other topics. In this paper, we describe our experience in designing and organizing a programming course that focuses on wearable computing, fashion and design for middle school students. We will show that 1) wearable computing is interesting and inspiring to the students, 2) wearable computing motivates both boys and girls to learn technology and computing, which implies that it may be able to increase the potential computer science population, 3) wearable computing can provide a space for students to exercise their creativity while at the same time, teaching them about technology and programming.	Learning programming through fashion and design: a pilot summer course in wearable computing for middle school students	NA:NA:NA:NA	2009
Inna Pivkina:Enrico Pontelli:Rachel Jensen:Jessica Haebe	This paper describes the Young Women in Computing program, an ongoing outreach program in Computer Science at New Mexico State University (NMSU). Features of the program include summer camps and academic year activities, computing in context, peer mentoring, and role models. The main goal is to increase interest in computing among female high school students. The paper discusses lessons learned from three years of experience with the program.	Young women in computing: lessons learned from an educational & outreach program	NA:NA:NA:NA	2009
Anna C. Cavender:Richard E. Ladner:Robert I. Roth	Deaf and hard of hearing students are an underrepresented group in computing and face extra challenges in university-level computing courses. This paper describes a 9-week Summer Academy for Advancing Deaf and Hard of Hearing in Computing that jump-starts the academic careers of deaf and hard of hearing students and strengthens their interest in computing. Students take introductory computing and animation in a fun, supportive, accessible environment. We report on some of the problems students face and lessons we have learned about helping them overcome those problems. Through the academy, they meet other successful deaf and hard of hearing technology professionals, tour top computing companies, and display their own work to the local deaf and hard of hearing community. Students gain leadership, independent learning skills, and complete the program better prepared for a college major in computing.	The summer academy for advancing deaf and hard of hearing in computing	NA:NA:NA	2009
Scott Sigman	NA	Session details: Software design	NA	2009
Alex Baker:Andr√© van der Hoek	In this paper, we report on our experience in designing and deliv-ering two new software design courses in the Informatics major at UC Irvine. When the major was created in 2004, it explicitly con-tained slots for two software design courses to be created from the ground up. The authors led this effort, focusing one course on the topic of system design and one course on the topic of implementation design. We discuss the philosophy and pedagogy behind the courses, present key class activities, and reflect on having offered each course twice over the past two years.	An experience report on the design and delivery of two new software design courses	NA:NA	2009
Dana P. Leonard:Jason O. Hallstrom:Murali Sitaraman	We describe an approach to teaching formal interface specifications using aspects of the Collaborative Reasoning Paradigm. The module requires students to construct test cases independently and cooperatively based on their understanding of a given set of method specifications. Students are supported by software-based reasoning assistants that guide them through their exercises and provide realtime feedback as they work --- both for the students and the instructor. We describe the design of the course module, the supporting reasoning assistant, and representative reasoning exercises. We conclude with a discussion of evaluation results from a recent pilot study conducted at Clemson University.	Injecting rapid feedback and collaborative reasoning in teaching specifications	NA:NA:NA	2009
Andrew Meneely:Laurie Williams	Working remotely is becoming the norm for both professionals and students alike. Software development has become a global industry due to outsourcing, teleworking, flex time, and companies' desire to use the best and/or most economical talent regardless of where that talent is located. Professionals are not alone because students usually work from home despite having sufficient resources on campus. In this paper we share our experiences from using Jazz, a synchronous, collaborative development platform, with our inevitably distributed software engineering students. Eleven students optionally used the tool while working on a five-week team project. Students primarily used the version control, chat, and work item features in Jazz. We collected their reactions in retrospective essays and found that all Jazz students supported using Jazz in future semesters of the course. We also examined grade differences and found that the students who used Jazz were more successful than those who did not use Jazz.	On preparing students for distributed software development with a synchronous, collaborative development platform	NA:NA	2009
Ernst Grundke	NA	Session details: Curriculum innovation	NA	2009
Robert Kessler:Mark van Langeveld:Roger Altizer	The Entertainment Arts and Engineering (EAE) program is a unique, new undergraduate interdisciplinary program at the University of Utah bringing together the School of Computing and the Division of Film Studies in an effort to teach both video game development and computer animation. Students pursuing a film or computer science degree may enroll in the program as a means of focusing their education on digital arts and entertainment. The key characteristic of the program is the shared classes where students from both Computer Science and Fine Arts study together and cooperate on game and animation projects. The program is highlighted by a yearlong capstone course in which the students work together to make a video game or animated short from scratch. This paper chronicles our efforts starting the EAE program and demonstrates how to create an interdisciplinary program that not only attracts students to CS, but also equips them for careers or research in video games and animation.	Entertainment arts and engineering(or how to fast track a new interdisciplinary program)	NA:NA:NA	2009
Chi-Cheng Lin:Mingrui Zhang:Barbara Beck:Gayle Olsen	To engage a broader audience in computer science, we have developed a set of curriculum units embedded with computer science concepts for K-12 science education. We chose bioinformatics as a vehicle to deliver these units. Our curriculum development cycle began with the identification of a set of computer science concepts which are potentially relevant to life sciences. Problems in life sciences as well as bioinformatics tools to be used for solving these problems were carefully examined for the delivery of identified computer concepts. They were later presented to groups of regional K-12 science teachers in our summer workshop on bioinformatics. With their help, we adapted and polished these curriculum units to meet Minnesota state standards for K-12 science education. This paper describes our approach in developing the curriculum units.	Embedding computer science concepts in K-12 science curricula	NA:NA:NA:NA	2009
Lijun Ni	Computer Science (CS) education researchers hope their research has real impact on teaching practices. Developers of innovative curricula and tools for CS education want teachers to adopt their new approaches. What convinces a CS teacher to change and adopt something new--or not? This paper explores factors that influence CS teachers' adoption and change. We studied our workshop participants to determine factors influencing their decision on whether to adopt a new CS curriculum. The results from our study indicate that multiple factors, some surprising, influence CS teachers' adoption. Our findings suggest that teacher excitement in a new approach drives adoption, while more organizational or social issues inhibit adoption.	What makes CS teachers change?: factors influencing CS teachers' adoption of curriculum innovations	NA	2009
Joan Peckham	NA	Session details: Panel session	NA	2009
Owen Astrachan:Susanne Hambrusch:Joan Peckham:Amber Settle	NA	The present and future of computational thinking	NA:NA:NA:NA	2009
Samuel Rebelsky	NA	Session details: Whither scheme? 21st century approaches to scheme in CS1	NA	2009
Richard Brown:Janet Davis:Samuel A. Rebelsky:Brian Harvey	NA	Whither scheme?: 21st century approaches to scheme in CS1	NA:NA:NA:NA	2009
Sue Fitzgerald	NA	Session details: Keynote address	NA	2009
Gary Lewandowski	NA	Session details: Keynote address	NA	2010
Sally Fincher	In this talk, I'll explore some of the ways educators share details of their practice and of how they find out "what works" from others. This exploration will include examining some barriers and inhibitors to successful exchange and some thoughts on the importance of representations of practice; that is how we represent our teaching to ourselves, to each other and for posterity. As part of this exploration, I will present a model of sharing I have devised with Josh Tenenberg, called the Disciplinary Commons: further details of this can be seen at: http://www.disciplinarycommons.org.	Useful sharing	NA	2010
Deborah Dunn	NA	Session details: Compilers & languages	NA	2010
Ariel Ortiz	This paper discusses some useful insights for instructors who might want to consider using a web approach in courses involving language design and implementation. The basic idea is to have students build a language processor that actually runs on the web, instead of a processor that just runs on a command-line shell. The author documents the advantages and possible shortcomings of this approach, as well as his class experiences.	Building server-side web language processors	NA	2010
Katsuhiko Gondow:Naoki Fukuyasu:Yoshitaka Arahori	This paper proposes a novel visualization tool for educational compilers, called MieruCompiler. Educational compilers that generate native assembly code like i386 have many practical and pedagogical advantages, but they also have a disadvantage that the undergraduate students need to acquire a wide range of knowledge on native machine instructions, assembly directives, application binary interface (ABI), so on. To reduce this learning cost, MieruCompiler provides various visualizations as a rich internet application (RIA) including: (1) highlighting all related slices (called "horizontal slicing" after [13], but not implemented in [13]) among the source code, abstract syntax tree, assembly code, symbol table, stack layout and compiler code, when the user hovers the mouse pointer over a piece of them, (2) displaying tooltips for machine instructions, assembly directives, etc., and (3) visualizing stack layouts which are very likely to be implicit. As a preliminary evaluation, MieruCompiler was used in two universities, which produced promising results.	MieruCompiler: integrated visualization tool with "horizontal slicing" for educational compilers	NA:NA:NA	2010
Tyler Sondag:Kian L. Pokorny:Hridesh Rajan	Compiler and programming language implementation courses are integral parts of many computer science curricula. However, the range of topics necessary to teach in such a course are difficult for students to understand and time consuming to cover. In particular, code generation is a confusing topic for students unfamiliar with low level target languages. We present Frances, a tool for helping students understand code generation and low level languages. The key idea is to graphically illustrate the relationships between high level language constructs and low level (assembly) language code. By illustrating these relationships, we take advantage of the students existing understanding of some high level language. We have used Frances in a compiler design course and received highly positive feedback. Students conveyed to us that Frances significantly helped them to understand the concepts necessary to implement code generation in a compiler project.	Frances: a tool for understanding code generation	NA:NA:NA	2010
Barbara Ericson	NA	Session details: Diversity	NA	2010
Joseph A. Cottam:Samantha S. Foley:Suzanne Menzel	Outreach programs communicating the importance and diversity of computing to K-12 students are essential to improving attitudes toward computing. However, the effectiveness of outreach programs, and roadshows in particular, has only recently come under study. Just Be is an outreach roadshow program at Indiana University. It directly addresses stereotypical attitudes towards computing. This paper demonstrates, through statistical analysis of surveys given to college students who participated in a Just Be presentation prepared for high school students, that the Just Be roadshow effectively shifts attitudes for the better.	Do roadshows work?: examining the effectiveness of just be	NA:NA:NA	2010
Joanna Goode	In this paper, a K-16 computer science reform effort is described as an effort that depends on curriculum development, professional development, and collaborative policy strategies.	Connecting k-16 curriculum & policy: making computer science engaging, accessible, and hospitable for underrepresented students	NA	2010
W. Richards Adrion:Renee Fall:Manuel Matos:Alan R. Peterfreund	The Commonwealth Alliance for Information Technology Education (CAITE) is one of 11 National Science Foundation Broadening Participation in Computing (BPC) alliances aimed at increasing the participation and success of underrepresented groups in information technology (IT). From the beginning, CAITE partners worked to integrate a detailed and comprehensive evaluation strategy to provide a quantitative assessment of the effectiveness of CAITE action plans on its main objectives. We collected large institutional data sets for the seven academic years prior to the project inception from each of the nine original partners, the six additional partners and several other institutions. These data serve as a baseline for assessing the efficacy of CAITE interventions and make it possible to examine trends in student participation and success across each CAITE partner and the alliance as whole. Importantly, these data provide valuable insight into each of the institutions that has allowed CAITE to tailor its inventions to reflect local conditions at each institution and within each region. From the evaluation data, it became clear that we needed to adjust action plans to better meet CAITE objectives. We describe specific aspects that warranted data-driven adjustments, and highlight lessons learned from these revelations.	Integrating evaluation into program development: benefits of baselining a NSF-BPC alliance	NA:NA:NA:NA	2010
Daniel Kaplan	NA	Session details: Computation & the sciences	NA	2010
Ali Erkan:Jason Hamilton:Tom Pfaff:Michael Rogers	The most important problems of our century require collaborative work. Therefore, as educators, we must be producing individuals who understand how to communicate and work with professionals from other fields. In this paper, we outline our ongoing efforts in addressing this need, without compromising discipline specific qualities or goals. Specifically, we present a number of programming projects that fulfill curricular requirements as well as making students aware of the Science Technology Engineering and Math (STEM) context of their work.	Use of satellite imagery in multidisciplinary projects	NA:NA:NA:NA	2010
Eric Andrew Freudenthal:Mary K. Roy:Alexandria Nicole Ogrey:Tanja Magoc:Alan Siegel	Media-Propelled Computational Thinking (MPCT - pronounced impact) is a course designed to introduce programming in the context of engaging problems in media computation, math, and physics. Programming concepts are introduced as incremental steps needed to solve pragmatic problems students already understand. The problems, graphical API, and hands-on program features are intended to expose fundamental concepts in mathematics and quantitative science. MPCT is offered in an entering students program for freshmen who plan to specialize in a variety of STEM (science, technology, engineering and math) and non-STEM subjects. The curriculum is intended to strengthen student intuition and interest in mathematical modeling and programming by engaging students in the direct manipulation of simple mathematical systems that model and display familiar physical phenomena. MPCT uses programs as concrete and manipulatable examples of fundamental concepts to engage a diverse range of students including women and underrepresented minorities. Variants of MPCT are being developed for high schools, and as a means to introduce computational science to upper division undergraduates studying non-computational STEM disciplines. This paper provides an overview of MPCT and representative problem studies including models of ballistics and resonant systems. The evaluation plan is described and very preliminary results are presented.	MPCT: media propelled computational thinking	NA:NA:NA:NA:NA	2010
Sheikh Iqbal Ahamed:Dennis Brylow:Rong Ge:Praveen Madiraju:Stephen J. Merrill:Craig A. Struble:James P. Early	This paper describes "Computational Thinking for the Sciences", a 3-day summer workshop for high school science and mathematics teachers. Our workshop emphasizes the deep connections between the natural sciences, mathematics and computer science through activities and simulation development appropriate for scientific explorations. Teachers were exposed to simulation development in VPython, a visual extension to the popular Python programming language. By broadening exposure of computational thinking to the natural sciences and developing activities specifically for science domains, we hope to attract new students into computer science and better prepare natural science students to employ the computational tools they will utilize in the future.	Computational thinking for the sciences: a three day workshop for high school science teachers	NA:NA:NA:NA:NA:NA:NA	2010
Yu Cai	NA	Session details: Curriculum design	NA	2010
Mehran Sahami:Alex Aiken:Julie Zelenski	While the discipline of computing has evolved significantly in the past 30 years, Computer Science curricula have not as readily adapted to these changes. In response, we have recently completely redesigned the undergraduate CS curriculum at Stanford University, both modernizing the program as well as highlighting new directions in the field and its multi-disciplinary nature. As we explain in this paper, our restructured major features a streamlined core of foundation courses followed by a depth concentration in a track area as well as additional elective courses. Since its deployment this past year, the new program has proven to be very attractive to students, contributing to an increase of over 40% in the number of CS major declarations. We analyze feedback we received on the program from students, as well as commentary from industrial affiliates and other universities, providing further evidence of the promise this new curriculum holds.	Expanding the frontiers of computer science: designing a curriculum to reflect a diverse field	NA:NA:NA	2010
Mark D. LeBlanc:Tom Armstrong:Michael B. Gousie	Computer science holds a unique position to craft multidisciplinary curricula for the new generation of faculty and students across the academy who increasingly rely on computing for their scholarship. We propose that computer science programs cease curricula models that begin with a two-course sequence that emulates the natural sciences and mathematics. We report on an aggressive strategy to work with faculty from across the disciplines of arts, humanities, and the social and life sciences to help design and deliver sets of multidisciplinary, applied, and "connected" pairs of introductory courses. Preliminary results at our small liberal arts college include an increase in the percentage of women enrolling in our connected courses, more students taking an additional course in computing, a faculty energized with sharing their research early on, and new interdisciplinary research opportunities for computer science faculty and students.	Connecting across campus	NA:NA:NA	2010
Christine Alvarado:Zachary Dodds	Historically, Harvey Mudd College (HMC) has had very little success attracting women to the study of computer science: women have chosen CS less than any other field of study. In 2006 HMC began three practices in order to increase the number of women studying and majoring in CS; these practices have now been in place for 3 years. With this paper we describe these practices and present a thorough evaluation of the quantitative and qualitative differences that have accompanied them. In sum, these efforts have rebalanced our department by significantly increasing women's participation in our computer science program.	Women in CS: an evaluation of three promising practices	NA:NA	2010
Reynold Bailey	NA	Session details: Panel	NA	2010
Reynold Bailey:Guy-Alain Amoussou:Tiffany Barnes:Hans-Peter Bischof:Thomas Naps	Projects funded by the National Science Foundation (NSF) Research Experiences for Undergraduates (REU) program aim to (a) enhance participation of students who otherwise might not have research opportunities, and (b) increase the number of students interested in graduate programs, thus expanding the pool of a well-trained scientific workforce. To provide meaningful experiences for these students, REU projects make use of a set of interesting, appropriate research problems that can be tackled in 8 to 10 weeks in summer. The panelists have all served as PIs or Co-PIs on NSF REU projects in computing. They will present their REU research problems, highlight challenges they encountered, and present their results. They will also discuss what they have done, or what can be done, to incorporate such research problems within the regular computing curriculum, for example, in capstone courses or senior projects. A significant amount of time will be set aside for audience participation and discussion.	Relevant real-world undergraduate research problems: lessons from the nsf-reu trenches	NA:NA:NA:NA:NA	2010
Valerie Barr	NA	Session details: Panel	NA	2010
Valerie Barr:Chun Wai Liew:Rich Salter	With the declining interest among incoming college students and the nationwide drop in computer science (CS) enrollments ([2, 1]), many CS departments would like to broaden participation in computing by reaching out to other departments on their campuses. One tactic is to encourage interdisciplinary work that has computing as a significant component. These efforts may result in more CS majors, increased enrollments in certain CS courses, and a student population that is better equipped to utilize computing within the contexts of their disciplines. This panel presents three approaches to building bridges to other departments and disciplines. Rich Salter, Oberlin College, will discuss the involvement of CS in the Oberlin Center for Computation and Modeling. Chun Wai Liew, Lafayette College, will discuss ways in which the CS department has built tools specifically to assist faculty in other departments, facilitating student exposure to and understanding of computation. Valerie Barr, Union College, will focus on the infusion of computation into course curricula outside CS, often coupling the use of existing tools with discussion of the underlying models and computational issues.	Building bridges to other departments: three strategies	NA:NA:NA	2010
Mark Guzdial	NA	Session details: Special session	NA	2010
Mark Guzdial:David Ranum:Brad Miller:Beth Simon:Barbara Ericson:Samuel A. Rebelsky:Janet Davis:Kumar Deepak:Doug Blank	The SIGCSE community has been exploring the role of multimedia to enhance computing education since the earliest algorithm visualization systems and studies [1]. Media Computation is a shift in focus [2]. Where algorithm visualization presents information to the student to facilitate their understanding, media computation is about having students manipulate media as the data for their programming, i.e., as the focus of the course activities. Students in media computation produce new images, sounds, and video. We aim to show that computer science is about more than numbers and strings. Computer science is also about creative expression. The original media computation work focused on using media to motivate non-computing majors [2]. The role of media in motivating student learning for computing education has broadened. Inventive teachers are using media computation for lots of different kinds of students, at different kinds of institutions, with a range of languages and toolkits. This special session is a mixture of "Five Minute Madness," science fair, and art gallery. Each participant will present how he or she is using media to motivate student learning, and some student work will be available for audience inspection	Variations on a theme: role of media in motivating computing education	NA:NA:NA:NA:NA:NA:NA:NA:NA	2010
Ping Chen	NA	Session details: Capstones & professional development	NA	2010
James Parrish, Jr.:Janet Bailey:Bradley Jensen	This paper describes the use of the Microsoft Imagine Cup Software Design Invitational (SDI) as a way to overcome some of the issues related to traditional or "closed" style capstone projects. Problematic issues with traditional capstone projects, as identified by literature, are discussed in conjunction with how the SDI addresses them. The main premise is participation in the Imagine Cup SDI can address the issues faculty wrestle with as they attempt to provide students with the best possible learning experience. Additionally, the authors present some of the advantages and challenges that they have noted from personal experiences using SDI as a part of a capstone course.	Using the imagine cup SDI as the foundation for computer science capstone projects	NA:NA:NA	2010
Josh Tenenberg	The Industry Fellows project involves a practicing college or university faculty member and practicing industry professional (the industry fellow) in the joint curriculum review, planning and delivery of a course related to the professional's domain of expertise. Working together exploits what each does best. The faculty member brings a broad, theory-based understanding to the discipline, while the industry fellow brings knowledge gained from professional practice. The faculty member retains full responsibility for all academic aspects of the course: planning and writing the syllabus, developing the assignments and examinations, and assigning grades. The professional joins the faculty member in the classroom on a regular basis as a co-lecturer, interacts directly with the students, and evaluates a sample of the student work on an advisory basis. This model was successfully run in winter 2009, with the project leader collaborating with an interaction designer from Google on teaching a Human Computer Interaction course at the University of Washington, Tacoma (UWT). This paper describes the Industry Fellows model, its instantiation at UWT, and an evaluation of this instantiation.	Industry fellows: bringing professional practice into the classroom	NA	2010
Joseph Mertz:Scott McElfresh	This paper describes a course at Carnegie Mellon University that engages students as consultants working with non-profit organizations. Different from most "service learning" courses, students in the Technology Consulting in the Community course focus on building capacity within organizations to sustain IT solutions without ongoing assistance. They do not merely provide IT support, nor do they focus on system development. Rather they focus on solving organizational problems using IT solutions. In doing so, they may develop a system, or adapt open source or commercial tools as appropriate to the situation. Computing systems do not exist in isolation, but in the context of people, organizations, and their policies. We want to train leaders in our community who can not only develop new technologies, but can solve organizational and societal problems. The course has as its learning goals to build inquiry, communication and leadership skills, in addition to engaging students in project development. At the same time it provides a valuable service in the community.	Teaching communication, leadership, and the social context of computing via a consulting course	NA:NA	2010
Stefan Andrei	NA	Session details: Upper-level courses	NA	2010
Mark Christensen van Langeveld:Robert Kessler	Many Universities are building interdisciplinary programs that overlap engineering and fine art departments that focus on games, special effects, animation and other forms of interdisciplinary efforts. With increasing demands for education linking the Engineering Sciences and Fine Arts, fueled by the competitive nature of the industries that recruit graduates, educators need to become more efficient and effective in their task of educating engineering and art majors in cross-disciplinary courses. CS3650 at the University of Utah is a digital character production course. This course is interdisciplinary and draws from several disciplines including computer science, graphics, anatomy, sculpture, art, and entertainment. It is a prerequisite for our machinima class, which immerses students into 3D game engines. Visualization tools are used in the course to help students learn to create better digital models. Presented in this paper is an experimental comparison between traditional visualization tools and digital visualization tools, which are less expensive, easier to distribute, arrange/procure and transport than the traditional tools. Traditional visualization tools include lifelike skeleton reproductions, wooden body mass structures, actual live human models, and anatomy drawing books. The digital visualization tools that are contrasted in this paper are: a layered anatomically correct, digital human model (skin, muscles, masses and some bones adapted from several sources) and a VisTrails version of a properly produced human figure (interactive animation). The digital tools are used to replace the traditional visualization tools used in the same educational curriculum, which teaches students to design, model and produce digital characters for games, machinima, and animation. The quantitative experiment demonstrates that digital visualization tools help to improve a student's understanding of the complex software packages used to produce characters, helps to improve specific techniques used to model 3D characters, and it helps to improve understanding of 3D form, more than the traditional tools within the context of this educational curriculum.	Digital visualization tools improve teaching 3D character modeling	NA:NA	2010
Frank McCown	Courses centered around the field of Web Information Retrieval (IR) and web search are slowly being introduced at the undergraduate level. In this paper, we show how the curriculum for a new undergraduate course on web search engines was developed, and we share our experiences in having students develop their own search engine components from scratch or modify and extend a popular open source search engine. We hope our experiences will be helpful to other Computer Science departments that are looking to develop an undergraduate Web IR course.	Teaching web information retrieval to undergraduates	NA	2010
Joel Coffman:Alfred C. Weaver	Website security is essential for successful e-commerce ventures, but the vital "how-to" components of security are often lacking in academic courses. This paper describes our attempt to instill an awareness of security concerns and techniques by having the students develop an Artist eXchange website, a social networking site that permits the posting and sharing of pictures, music, and text, including an end-user rating system. The six-homework set progresses through HTML, JavaScript, PHP, MySQL, file uploads, and security testing. An innovative feature is that each assignment is evaluated via automated testing, which guides the student toward detecting and correcting mistakes, especially with regard to common attack vectors.	Electronic commerce virtual laboratory	NA:NA	2010
Keith Shomper	NA	Session details: Concept inventories	NA	2010
Allison Elliott Tew:Mark Guzdial	Previous studies of student programming ability have raised questions about students' ability to problem solve, read and analyze code, and understand introductory computing concepts. However, it is unclear whether these results are the product of failures of student comprehension or our inability to accurately measure their performance. We propose a method for creating a language independent CS1 assessment instrument and present the results of our analysis used to define the common conceptual content that will serve as the framework for the exam. We conclude with a discussion of future work and our progress towards developing the assessment.	Developing a validated assessment of fundamental CS1 concepts	NA:NA	2010
Geoffrey L. Herman:Michael C. Loui:Craig Zilles	A concept inventory (CI) is a standardized assessment tool that evaluates how well a student's conceptual framework matches the accepted conceptual framework of a discipline. In this paper, we present our process in creating and evaluating the alpha version of a CI to assess student understanding of digital logic. We have checked the validity and reliability of the CI through an alpha administration, follow-up interviews with students, analysis of administration results, and expert feedback. So far the feedback on the digital logic concept inventory is positive and promising.	Creating the digital logic concept inventory	NA:NA:NA	2010
Lisa C. Kaczmarczyk:Elizabeth R. Petrick:J. Philip East:Geoffrey L. Herman	Computing educators are often baffled by the misconceptions that their CS1 students hold. We need to understand these misconceptions more clearly in order to help students form correct conceptions. This paper describes one stage in the development of a concept inventory for Computing Fundamentals: investigation of student misconceptions in a series of core CS1 topics previously identified as both important and difficult. Formal interviews with students revealed four distinct themes, each containing many interesting misconceptions. Three of those misconceptions are detailed in this paper: two misconceptions about memory models, and data assignment when primitives are declared. Individual misconceptions are related, but vary widely, thus providing excellent material to use in the development of the CI. In addition, CS1 instructors are provided immediate usable material for helping their students understand some difficult introductory concepts.	Identifying student misconceptions of programming	NA:NA:NA:NA	2010
Wayne Summers	NA	Session details: Spamming, hacking, & social networks: themes for educating the next generation	NA	2010
Tarsem S. Purewal, Jr.	This paper describes a course in online social networking that is flexible enough to meet the needs of most CS0 courses. Two sections of the course were taught at the College of Charleston during the Spring 2009 semester. We describe our experiences, we outline the topics and we offer suggestions on how the topics can meet the objectives of more traditional CS0 offerings.	Social networking: the new computer fluency?	NA	2010
Joel Sommers	Compelling experiences in introductory courses make a key difference in whether non-majors develop an interest in computer science, possibly even converting them into undergraduate majors or minors. In this paper we advocate integrated hands-on laboratory style activities to provide such pivotal experiences. In the lab activities we describe, students do not engage in programming, yet they learn to think computationally by engaging in computational activities. The course in which these labs are implemented is oriented around three aspects of the the internet's underside: its techno-scientific underpinnings, environmental and energy problems and promise brought on by its rapid growth, and security threats associated with its use. We describe the goals and content of the lab activities, as well as various challenges encountered through their implementation. We also discuss student responses and future directions.	Educating the next generation of spammers	NA	2010
Sergey Bratus:Anna Shubina:Michael E. Locasto	The "Hacker Curriculum" exists as a mostly undocumented set of principles and methods for learning about information security. Hacking, in our view, is defined by the ability to question the trust assumptions in the design and implementation of computer systems rather than any negative use of such skills. Chief among these principles and methods are two useful pedagogical techniques: (1) developing a cross-layer view of systems (one unconstrained by API definitions or traditional subject matter boundaries) and (2) understanding systems by analyzing their failure modes (this approach works well with learning networking concepts and assessing software vulnerabilities). Both techniques provide a rich contrast to traditional teaching approaches, particularly for information security topics. We relate our experience applying Hacker Curriculum principles to education and training programs for undergraduates, including the Secure Information Systems Mentoring and Training (SISMAT) program and the Cyber Security Initiative at Dartmouth College, which allows undergraduates to perform supervised red team activities on Dartmouth's production systems.	Teaching the principles of the hacker curriculum to undergraduates	NA:NA:NA	2010
Mike Goldweber	NA	Session details: Panel	NA	2010
John Barr:Steve Cooper:Michael Goldweber:Henry Walker	NA	What everyone needs to know about computation	NA:NA:NA:NA	2010
Scott Grissom	NA	Session details: Special session	NA	2010
Scott Grissom:Joan Peckham:Harriet Taylor:Guy-Alain Amoussou:Victor Piotrowski	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty, and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA	2010
Billy Lim	NA	Session details: Special session	NA	2010
Billy L. Lim:Bryan Hosack:Paul Vogt	Web services technology is a burgeoning technology that has received much attention in the software industry in recent years under the broader umbrella of service-oriented architecture (SOA). The popularity of the service-oriented paradigm is echoed by Microsoft's Bill Gates, where in a memo to Microsoft's top managers and engineers, he states "The broad and rich foundation of the internet will unleash a 'services wave' of applications and experiences available instantly over the internet to millions of users" [1]. While Web services have been incorporated in many industries in the market place, they are only beginning to appear in the academia, primarily in upper division and graduate CS/IS curricula [2,3]. In this special session, we share our belief that Web services technologies can and should be introduced early in CS/IS curricula. We describe and demo a number of scenarios that illustrate how Web services can be integrated into CS1/IS1 to make these courses more interesting and more importantly, make the students better prepared for upper division classes and for the industry upon graduation. This special session also shares the results of our preliminary findings involving the aforementioned integration and introduces participants to the related courseware. Participants will also receive hands-on experience with some of the scenarios experimented in our study. The intended audience is CS/IS educators who are interested in a novel way of teaching CS1/IS1. NOTE: Participants are encouraged to bring a laptop with wireless access to the Web and with NetBeans.	A web service-oriented approach to teaching CS/IS1	NA:NA:NA	2010
Dennis Brylow	NA	Session details: Networks & security	NA	2010
Jianping Pan	Experimenting in courses such as operating systems, computer networks, and distributed systems is challenging due to the need to access system kernels and network infrastructures, as well as the distributed nature of these experiments. In this paper, we design and develop a laboratory platform that can be rapidly and economically adopted in any educational institutions to teach introductory computer networks courses. By using commercial, off-the-shelf hardware and open-source software, and together with our technical solutions, the platform gives students an opportunity to experiment in a real, flexible and scalable network, and to interact with the network both as a network user and more importantly as a network operator. These features can help students to better understand the algorithms, protocols and practice of computer networks. This easy-to-use lab platform has been received favorably by students. Also, the low-cost platform is easy to maintain, and can be repeatedly used in multiple, back-to-back lab sections.	Teaching computer networks in a real network: the technical perspectives	NA	2010
Niakam Kazemi:Shiva Azadegan	Active learning and using visualization tools provide an effective approach in computer science education. Without meaningful hands-on exercises or access to training tools, it is usually difficult for students to understand or elaborate on complex algorithms, protocols, and concepts underlying different aspects of computing. This paper introduces a tool, IPsecLite, which demonstrates the inner-working of IP Security (IPsec) standard. Built on many networking technologies and cryptographic techniques, IPsec provides services to secure network communication. We introduce IPsecLite through a series of labs that can be used in several security courses. IPsecLite is fully developed and can be easily integrated into curriculum.	IPsecLite: a tool for teaching security concepts	NA:NA	2010
Dave Feinberg	We created a course that, beginning from a hypothetical shared light bulb as our physical layer, introduced students to a hierarchy of simplified versions of network protocols, including Ethernet, IP, and TCP. This paper describes those simplified protocols, along with the Java framework students used to implement and simulate them.	Teaching simplified network protocols	NA	2010
Chenglie He	NA	Session details: Course design	NA	2010
Norman Neff	The "2007 SIGCSE Report On the Implementation of a Discrete Mathematics Course" recommends relocating some discrete structures topic areas to other courses, for the sake of coherency. Our implementation of the one semester course also relocates topics, but additionally features a focus on a significant computer science problem: regular language acceptors. This problem-directed course model promises superior coherency, motivation, and integration with computing.	Problem-directed discrete structures course	NA	2010
David J. Malan	Computer Science 50 is Harvard College's introductory course for majors and non-majors alike, enrollment in which both rose and fell along with the dotcoms. Although enrollment peaked in 1996 at 386 students, it had settled by 2002 in the neighborhood of 100. We set out in 2007 to combat that trend by tackling two problems. We hypothesized that CS50 suffered from two, one of perception and one of design. Although, per end-of-term surveys, the course had never lacked for good teachers or good content, the consensus on campus for years had been to beware this particular course. And the course's own syllabus may very well have been dated in the eyes of students who had begun to carry regularly modern hardware and software in their backpacks and pockets. Not only did we proceed to revamp every one of CS50's problem sets, we brought its syllabus more in line with technological trends already familiar to students. And we altered the tone of the course to appeal to those "less comfortable" with computing on campus. But we took care to preserve the course's rigor and underlying fundamentals, lest we do our own students a disservice. Our new approach appears to be working. Between 2006 and 2007, enrollment in CS50 more than doubled from 132 to 282 (+114%). Between 2007 and 2008, enrollment increased another 17% to 330, though even more striking was that year's 48% increase in female enrollment. By 2009, enrollment remained strong at 338. We present in this work what we have done and why we have done it.	Reinventing CS50	NA	2010
Marie desJardins:Michael Littman	We describe the "Great Insights in Computer Science" courses that are taught at Rutgers and UMBC. These courses were designed independently, but have in common a broad, engaging introduction to computing for non-majors. Both courses include a programming component to help the students gain an intuition for computational concepts, but neither is primarily programming focused. We present data to show that these courses attract a diverse group of students; are rated positively; and increase students' understanding of, and attitudes towards, computing and computational issues.	Broadening student enthusiasm for computer science with a great insights course	NA:NA	2010
Jan Vahrenhold	NA	Session details: Coaching & mentoring	NA	2010
Ray Bareiss:Martin Radley	At Carnegie Mellon's Silicon Valley campus we employ a learn-by-doing educational approach in which nearly all student learning, and thus instruction, is in the context of realistic, team-based projects. Consequently, we have adopted coaching as our predominant teaching model. In this paper we reflect on our experience with the nature of teaching by coaching using a framework derived from Cognitive Apprenticeship, and explain how we employ the techniques it suggests in our teaching. We also discuss a range of instructional tensions that arise in teaching by coaching and present a survey of student attitudes regarding the effectiveness of our approach.	Coaching via cognitive apprenticeship	NA:NA	2010
Kristy Elizabeth Boyer:E. Nathan Thomas:Audrey S. Rorrer:Deonte Cooper:Mladen A. Vouk	Recent years have seen a growing awareness in the computing education community that initiatives outside the classroom are vital for retaining students and preparing them for a collaborative and dynamic professional environment. Particularly important are programs that develop rich technical skills while increasing students' interest in computing disciplines. We present Computing Identity Mentoring, an intervention designed to increase commitment to computing while enhancing students' technical and leadership skills. This program was implemented at seven universities during 2008-2009. Preliminary results suggest that Computing Identity Mentoring contributes to students' self-efficacy regarding computing and leadership, and solidifies students' commitment to a career in computing. This paper presents early findings on the effectiveness of the approach and illustrates Computing Identity Mentoring in the context of three of the seven institutions where it has been implemented.	Increasing technical excellence, leadership and commitment of computing students through identity-based mentoring	NA:NA:NA:NA:NA	2010
R. Brook Osborne:Antony J. Thomas:Jeffrey R.N. Forbes	This paper describes a program in which undergraduates mentor teams of local middle and high school students on robotics projects. These teams learn and apply the scientific, mathematical, and computing fundamentals behind the construction of robots and the design of control algorithms. The mentors play a crucial role in the effectiveness of the program. Mentor training has evolved over the five-year life of the program from ad-hoc preparation to a service-learning course where students learn both the technical skills required to design, construct, and test, mobile robots and the pedagogical techniques necessary to mentor middle and high school students. We provide an overview of the program and some evaluation results.	Teaching with robots: a service-learning approach to mentor training	NA:NA:NA	2010
William Birmingham	NA	Session details: Tools	NA	2010
Daniel D. Garcia:Gene Zhang:Sean Carr:Sameer Iyengar:Hava Edelstein:Albert Liu	For several years, the lectures in our introductory Electrical Engineering and Computer Science (EECS) courses have been videotaped and webcast, mainly as an aid to students with time conflicts that prevent them from attending class. We present the Weiner Lecture Archives - a project to identify, archive, filter, and make available the best of these lectures with their notes on the web. We provide a hierarchical, ontology-driven interface to entire courses, which allows users to choose any topic and/or subtopic to view, from a small snippet of one lecture to one that spans many lectures. Once the topic is chosen, our system launches RealPlayer to play the lecture video in one window while showing synchronized lecture notes or slides in another window. By the spring of 2007, we had finished encoding our department's entire four-course introductory sequence into this system. Student and worldwide use was greater than 100,000 views last year alone, direct feedback has been encouraging, and we hope to expand to other EECS courses in the future.	The Weiner lecture archives: an ontology-driven interface for viewing synchronized lectures and notes	NA:NA:NA:NA:NA:NA	2010
Christopher Hundhausen:Anukrati Agrawal:Kyle Ryan	Inspired by the formal code inspection process commonly used in the software industry, we have been exploring the use of pedagogical code reviews (PCRs), in which a team of three to four students, led by a trained moderator, (a) walk through segments of each other's programming assignments, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. We have found that PCRs not only improve the quality of students' code, but also positively impact students' communication and sense of community. However, implementing PCRs also presents a key logistical challenge: how to make code solutions and review results accessible to team members before, during, and after the team reviews? To address this challenge, we are developing an online environment specifically tailored to support PCRs. Our environment enables students to submit their code solutions; to review team members' code solutions on-line prior to PCRs; to carry out PCRs; and to resubmit their solutions based upon the results of the PCRs. In an empirical evaluation of the environment in a CS1 course, we found that it not only eased the logistics of implementing PCRs, but also improved the organization and efficiency of the PCR process.	The design of an online environment to support pedagogical code reviews	NA:NA:NA	2010
Rafael del Vado V√≠rseda	NOTE FROM ACM: It has been determined that the author of this article plagiarized the contents from a previously published paper. Therefore ACM has shut off access to this paper. The paper by Rafael del Vado V√≠rseda plagiarizes the following article: Pita, I., Segura, C.: A tool for interactive learning of data structures and algorithms. In: 8th International Symposium on Computers in Education, SIIE 2006, vol. 1, pp. 141-148 (2006). For further information, contact the ACM Director of Publications.	A visualization tool for tutoring the interactive learning of data structures and algorithmic schemes.	NA	2010
Sally Fincher	NA	Session details: Panel	NA	2010
Sally Fincher:Stephen Cooper:Michael K√∂lling:John Maloney	This panel will showcase and compare three leading Initial Learning Environments (ILE): Alice, Greenfoot and Scratch.	Comparing alice, greenfoot & scratch	NA:NA:NA:NA	2010
Joel C. Adams	NA	Session details: Panel	NA	2010
Joel C. Adams:Daniel J. Ernst:Thomas Murphy:Ariel Ortiz	Although Moore's Law continues to hold at present, Moore's Dividend - where software developers could rely on increasingly faster CPUs to make their software faster - has expired [5]. Instead of manufacturing uni-core CPUs with faster clocks, hardware manufacturers are producing multi-core CPUs, and many-core CPUs (with 32 or more cores) have begun appearing. Traditional sequential applications will not take advantage of these new hardware capabilities, and thus will not run any faster. To gain performance on these new and future hardware platforms, applications must be designed and written in pieces that run simultaneously on different cores. Ideally, the performance of such parallel applications should scale as the number of available cores increases. As computer science educators, it behooves us to prepare our students for this brave new parallel world. In this session, the panelists will discuss different aspects of doing so, including: " How do we integrate parallelism into the CS curriculum? What aspects of parallelism do we cover, and where? " What available technologies (e.g., programming languages, libraries, etc.) facilitate parallel application development? " What resources are available for CS faculty members to learn how to design and build parallel applications? Each panelist will focus on one of these aspects of the problem.	Multicore education: pieces of the parallel puzzle	NA:NA:NA:NA	2010
David G. Kay	NA	Session details: Special session	NA	2010
David G. Kay:Kim B. Bruce:Michael Clancy:Nell Dale:Mark Guzdial:Eric Roberts	This special session is devoted to identifying the CS education papers of the 20th century that have had the greatest influence on our practice of CS education today. The point is not primarily to produce the list of papers; rather it is to derive criteria, principles, and practices for identifying valuable contributions to CS education. This will provide a basis for establishing of awards or other recognition for influential contributions to CS education; it may also clarify the criteria for reviewing all papers. Invited participants will identify influential papers and their criteria for selecting them; the audience will also be encouraged to nominate papers and propose selection criteria. The results of this session will be communicated to the SIGCSE leadership, who will decide whether, and how, to implement any actual awards.	Recognizing the most influential CS education papers	NA:NA:NA:NA:NA:NA	2010
Thomas Cortina	NA	Session details: Keynote address	NA	2010
Carl E. Wieman	Guided by experimental tests of theory and practice, science has advanced rapidly in the past 500 years. Guided primarily by tradition and dogma, science education meanwhile has remained largely medieval. Research on how people learn is now revealing how many teachers badly misinterpret what students are thinking and learning from traditional science classes and exams. However, research is also providing insights on how to do much better. The combination of this research with modern information technology is setting the stage for a new approach that can provide the relevant and effective science education for all students that is needed for the 21st century. I will discuss the failures of traditional educational practices, even as used by "very good" teachers, and the successes of some new practices and technology that characterize this more effective approach, and how these results are highly consistent with findings from cognitive science.	Science education for the 21st century: using the insights of science to teach/learn science	NA	2010
Valerie Barr	NA	Session details: Philosophy	NA	2010
Matthew Hertz	Thirty-one years ago, the ACM Computing Curricula used the terms "CS1" and "CS2" to designate the first two two courses in the introductory sequence of a computer science major. While computer science education has greatly changed since that time, we still refer to introduction to programming courses as CS1 and basic data structures courses as CS2. This common shorthand is then used to enable students to transfer between institutions and as a base of many research studies. In this paper we show that while there is wide agreement on the connotation of CS1 and CS2, there is little agreement as to the denotation of these terms. Surveying CS1 and CS2 instructors, we find little agreement on how important various topics are to each of these course and less agreement on how well students master the material. Even after limiting the analysis to whether a topic has ANY important or students complete a course with ANY mastery of the material, we continue to find significant disagreements between instructors.	What do "CS1" and "CS2" mean?: investigating differences in the early courses	NA	2010
Arno Pasternak:Jan Vahrenhold	In this paper, we propose a new approach to thinking about and implementing Computer Science curricula in secondary education. The characteristic feature is to organize the items to be taught into what we call "strands" which then can be interlaced during the course. This naturally leads to a spiral curriculum in secondary Computer Science education. In the view of our proposed approach, we also comment on the role of programming in secondary education.	Braided teaching in secondary CS education: contexts, continuity, and the role of programming	NA:NA	2010
Alan Garvey	This paper discusses the use of writing as a teaching approach for an upper level computer science course. In describing my experiences, I hope to encourage those schools/teachers who are considering incorporating writing into such a course. Many different kinds of writing are compared and contrasted. Attention is paid to practicalities of the writing process and of the demands made of faculty in these writing-based courses.	Writing in an upper-level CS course	NA	2010
Boleslaw Mikolajczak	NA	Session details: Concurrency	NA	2010
Suzanne Rivoire	The technique of scaling hardware performance through increasing the number of cores on a chip requires programmers to learn to write parallel code that can exploit this hardware. In order to expose students to a variety of multicore programming models, our university offered a breadth-first introduction to multicore and manycore programming for upper-level undergraduates. Our students gained programming experience with three different parallel programming models, two of which are less than five years old and targeted specifically to multicore and manycore computing. Assessments throughout the semester showed that the course gave students a broad base of experience from which they will be able to understand ongoing developments in the field.	A breadth-first course in multicore and manycore programming	NA	2010
Mathias Ricken:Robert Cartwright	Concurrent programming is becoming more important due to the growing dominance of multi-core processors and the prevalence of graphical user interfaces (GUIs). To prepare students for the concurrent future, instructors have begun to address concurrency earlier in their curricula. Unfortunately, test-driven development, which enables students and practitioners to quickly develop reliable single-threaded programs, is not as effective in the domain of concurrent programming. This paper describes how ConcJUnit can simplify the task of writing unit tests for multi-threaded programs, and provides examples that can be used to introduce students to concurrent programming.	Test-first Java concurrency for the classroom	NA:NA	2010
Kim B. Bruce:Andrea Danyluk:Thomas Murtagh	Because of the growing importance of concurrent programming, many people are trying to figure out where in the curriculum to introduce students to concurrency. In this paper we discuss the use of concurrency in an introductory computer science course. This course, which has been taught for ten years, introduces concurrency in the context of event-driven programming. It also makes use of graphics and animations with the support of a library that reduces the syntactic overhead of using these constructs. Students learn to use separate threads in a way that enables them to write programs that match their intuitions of the world. While the separate threads do interact, programs are selected so that race conditions are generally not an issue.	Introducing concurrency in CS 1	NA:NA:NA	2010
Tim Bell	NA	Session details: Middle school issues	NA	2010
Youwen Ouyang:Katherine Hayden	Technology-enhanced science curriculum has potential for introducing fundamental computing concepts to adolescents. iQUEST (investigations for Quality Understanding and Engagement for Students and Teachers) is designed to transform middle school science teachers into advocates for technology being a critical part of student learning. It targets 7th and 8th grade science classrooms that serve high percentages of Hispanic students. To prepare student leaders in iQUEST teachers' classrooms, a group of 24 Hispanic students from project schools were invited to participate in a weeklong technology infused science summer camp. These students would continue on in project classrooms where teachers receive intensive technology training and support over the next year. This paper describes the camp activities and reports how the camp impacted students' aptitude and attitude toward technology and science.	A technology infused science summer camp to prepare student leaders in 8th grade classrooms	NA:NA	2010
Gabriela Marcu:Samuel J. Kaufman:Jaihee Kate Lee:Rebecca W. Black:Paul Dourish:Gillian R. Hayes:Debra J. Richardson	A significant focus in the United States recently has been to increase engagement and interest in STEM curricula, particularly among girls and underrepresented minorities [3]. In this work, we take an approach to teaching and learning that supports flexibility, experimentation, and play with technology. With this approach, we aim to make STEM curricula more comfortable and engaging for all types of children and teens, with a particular emphasis on lower socio-economic status female students. We designed and tested a computing course for middle school girls, and this work resulted in three best practices: hands-on work incorporating creativity through crafts into engineering and computing, the frequent presence of an audience to motivate engagement, and engineering-focused individual roles structuring group work. Pre- and post-surveys and exit interviews revealed significant changes in attitudes and an enthusiasm for engineering projects and careers as a result of participation in the course.	Design and evaluation of a computer science and engineering course for middle school girls	NA:NA:NA:NA:NA:NA:NA	2010
Ursula Wolz:Meredith Stone:Sarah M. Pulimood:Kim Pearson	To address the critical shortage of students entering computing fields, as well as broaden participation in computing, we present a summer and afterschool program in Interactive Journalism through which middle school students and their teachers develop an appreciation for and competence in computational thinking. We report on the outcomes of our first year in which three middle school language arts teachers, a technology teacher and a guidance counselor collaborate with college faculty to publish a school magazine of the future. Students and their teachers research and conduct interviews to develop news stories that are then presented as story packages with text, video, and procedural animations in Scratch. Results of formal data collection show changes in students' perceptions of what it means to program, as well as their emerging confidence in their ability to design computational solutions and to program.	Computational thinking via interactive journalism in middle school	NA:NA:NA:NA	2010
Suzanne Buchele	NA	Session details: Pairs & partners	NA	2010
Joshua Sennett:Mark Sherriff	This paper details the results of an investigation into the compatibility of partnered computer science students. The study involved approximately 290 students at the University of Virginia (UVA). This study builds on the work of researchers at North Carolina State University (NCSU). NCSU researchers have conducted a number of studies on the compatibility of pair programmers. We examined many of the factors that the NCSU researchers explored in their studies (including personality type, learning style, skill level, programming self esteem, work ethic, and time management choices) in order to determine whether the conclusions of the research at NCSU also hold true at UVA. Consistent with the NCSU studies, we found that skill level continues to be the most important factor in student compatibility.	Compatibility of partnered students in computer science education	NA:NA	2010
Grant Braught:John MacCormick:Tim Wahls	An analysis of data from 259 CS1 students is performed to compare the performance of students who were paired by demonstrated ability to that of students who were paired randomly or worked alone. The results suggest that when given individual programming tasks to complete, lowest-quartile students who were paired by ability perform better than those who were paired randomly and those who worked alone.	The benefits of pairing by ability	NA:NA:NA	2010
Mindy L. Hart	This paper is an experience report that describes a computer science based workshop titled Are You Smarter than YOUR 5th Grader? and targeted at fourth through sixth grade female students and parents. The novel approach of including parents as a pair programmer with the student is highlighted. Additionally, the paper probes the impact of this workshop and plans for revision and replication of future workshops.	Making contact with the forgotten k-12 influence: are you smarter than your 5th grader?	NA	2010
Mark Guzdial	NA	Session details: Panel	NA	2010
Mark Guzdial:Jane Prey:Lucy Sanders:Heikki Topi:Joseph Urban	NA	Report on the future of computing education summit	NA:NA:NA:NA:NA	2010
Robert Schnabel	NA	Session details: Special session	NA	2010
Robert Schnabel:Susan Rodger:Mark Stehlik:Chris Stephenson:John White	NA	Surfacing computer science in STEM education	NA:NA:NA:NA:NA	2010
Daniel D. Garcia	NA	Session details: Special session	NA	2010
Daniel D. Garcia:Colleen M. Lewis:John P. Dougherty:Matthew C. Jadud	Computational Thinking (CT) has been articulated as a "fundamental skill for everyone, not just for computer scientists" [10]. Almost all agree with the lofty goals of the initiative, to teach humanity the ability to see the world through the sharpened eyes of a computer scientist. Others have shared their vision of what CT is, how to pave the way [7], weave it into a curriculum [1, 2, 9], and what the effects might be [8]. However, what does it really mean to be a computational thinker? While it is helpful to see examples that show we're already engaged in CT (e.g., using a backpack is pre-fetching and caching), it is perhaps more valuable to see everyday situations that are transformed when viewed through a computational thinker's trained eyes (e.g., writing dates as YYYY-MM-DD so they'll sort correctly). We hope to present enough examples to satisfy a growing chorus of those who need more grounding, using a unique delivery format. Jeff Foxworthy is a popular and successful stand-up comedian, especially in rural areas of the southern United States [5]. His signature bit is to find subtle aspects of life that are common to "rednecks", a term used to describe "uneducated white farm laborers" (whose neck is red from sunburn) [3]. These observations are never meant to be mean-spirited, are told with acute comic timing, and audiences love them. Here are some of his best [4], using his template: If _____________________________, you might be a redneck! ...you think the last words to the Star Spangled Banner are 'Gentlemen, start your engines'... ...you get stopped by a state trooper, and when he asks you if you have an I.D. and you say, 'Bout what?'... ...you carried a fishing pole into Sea World... We will use a similar template and each of the four "stand up computational thinkers" will riff on observations of life as seen through CT eyes. We hope to provide enough examples that the (mostly CT) audience will feel compelled to join us in an "open mike" format and share their experiences. Whenever possible, we will channel Mr. Foxworthy and aim for the funny bone.	If ____________, you might be a computational thinker!	NA:NA:NA:NA	2010
Monica McGill	NA	Session details: Games	NA	2010
Alexander Repenning:David Webb:Andri Ioannidou	Game design appears to be a promising approach to interest K-12 students in Computer Science. Unfortunately, balancing motivational and educational concerns is truly challenging. Over a number of years, we have explored how to achieve a functional balance by creating a curriculum that combines increasingly complex game designs, computational thinking patterns and authoring tools. Scalable Game Design is a research project exploring new strategies of how to scale up from after school and summer programs into required curriculum of public schools through game design approaches. The project includes inner city schools, remote rural areas and Native American communities. A requirement checklist of computational thinking tools regarding curriculum, teacher training, standards and authoring tools has been developed and is being tested with thousands of students.	Scalable game design and the development of a checklist for getting computational thinking into public schools	NA:NA:NA	2010
Cinnamon Hillyard:Robin Angotti:Michael Panitz:Kelvin Sung:John Nordlinger:David Goldstein	Despite the proven success of using computer video games as a context for teaching introductory programming (CS1/2) courses, barriers including the lack of adoptable materials, required background expertise (in graphics/games), and institutional acceptance still prevent interested faculty members from experimenting with this approach. The Game-Themed programming Assignment (GTA) modules are designed specifically for these faculty members such that they can selectively pick and choose a subset to experiment with and gradually adopt the materials in their own classes. The design and academic merits of the GTA modules have been verified and presented previously [24]. This paper begins by describing results from GTA workshops for CS1/2 faculty and goes on to detail the results of our year-long project in adopting the GTA modules in classes. In this case, we have demonstrated that introductory programming concepts can be examined, practiced, and learned based on GTA modules when neither the faculty nor the students involved have backgrounds in graphics or games. More importantly, our results showed that it is straightforward to blend the GTA modules into existing classes with minimum alterations. In these ways, the GTA modules are excellent catalysts enabling faculty to begin exploring teaching with game-themed materials.	Game-themed programming assignments for faculty: a case study	NA:NA:NA:NA:NA:NA	2010
Michael Hewner:Mark Guzdial	Video game development is an attractive career objective for many computer science students. Colleges are starting degree programs and specializations to serve this interest, but faculty may not have an informed idea of what game programming is like or how to advise students interested in the field. This paper describes the results of interviews with developers, managers, and artists at one company to determine what qualifications were most significant when evaluating college hires for jobs in game development. The qualifications we elicited formed the basis of a company-wide survey.	What game developers look for in a new graduate: interviews and surveys at one game company	NA:NA	2010
Hong Lin	NA	Session details: Parallel computing	NA	2010
Robert A. Chesebrough:Ivan Turner	This paper is an experience report describing the interaction between parallel programmers from industry and a select group of 16 high school students and six faculty from a Technical High School during a three-day "Clubhouse Parallel Universe Boot Camp" held summer 2009. Based on observations of what worked, this whitepaper offers next steps for getting parallelism topics taught at the high school level around the country. The paper also explores elements in the area of experimentation and human factors and touches on algorithms taught and languages used at this camp. The paper evaluates role playing exercises and hands-on labs presented by industry parallelism experts. We also explore how this specific group of high school kids responded, and draw some conclusions about next steps based on the teaching experience of the co-authors.	Parallel computing: at the interface of high school and industry	NA:NA	2010
Barry L. Kurtz:Rahman Tashakkori:John J. Helfert:Michael Sage	Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of" the lecture. This approach was developed for a modern distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid) into a single course and required a substantial course project that used all these levels. After presenting the current status of our activities, we will discuss future directions that include stand-alone distributed computing modules and a distributed computing repository. This work is supported, in part, by a National Science Foundation grant.	Using microlabs to teach modern distributed computing	NA:NA:NA:NA	2010
Shane Torbert:Uzi Vishkin:Ron Tzur:David J. Ellison	All students at our high school are required to take at least one course in Computer Science prior to their junior year. They are also required to complete a year-long senior project associated with a specific in-house laboratory, one of which is the Computer Systems Lab. To prepare students for this experience the lab offers elective courses at the post-AP Computer Science level. Since the early 1990s one of these electives has focused on parallel computing. The course enrolls approximately 40 students each year for two semesters of instruction. The lead programming language is C and topics include a wide array of industry-standard and experimental tools. Since the 2007-2008 school year we have included a unit on parallel algorithmic thinking (PAT) using the Explicit Multi-Threading (XMT) system. We describe our experiences using this system after self-studying the approach from a publicly available tutorial. Overall, this article provides significant evidence regarding the unique teachability of the XMT PAT approach, and advocates using it broadly in Computer Science education.	Is teaching parallel algorithmic thinking to high school students possible?: one teacher's experience	NA:NA:NA:NA	2010
John Dooley	NA	Session details: CS education research I	NA	2010
Michael Stepp:Beth Simon	Academic integrity and cheating are issues of specific importance in computing courses due to the restricted nature of much of our assigned work. Additionally, use of valued pedagogical and professional practices such as pair programming can muddy the waters when it comes to students' understandings and experiences with collaboration. In this study we report on 112 students at the beginning of a second programming course being asked to describe a scenario of student-to-student collaboration that "crosses the line" in terms of what should be allowed in the course. We find that students describe inappropriate acts involving sharing of code and sharing of information, with the former being more prevalent. Additionally, about half of the scenarios include mitigating circumstances that should not affect the propriety of those acts. Finally, when presented with other students' (often vague) scenarios, students have little consensus on whether those reflect appropriate or inappropriate collaborations.	Introductory computing students' conceptions of illegal student-student collaboration	NA:NA	2010
Lynda Thomas:Carol Zander:Anna Eckerdal	Transformational biographies are used to shed light on situations when students have experienced 'surprise.' These biographies are examined in light of a philosophical position that surprise is useful in engendering learning, and, that as educators, we should try and set up situations in which our students experience it more often. The paper reports on a grounded-theory inspired examination of 108 students' transformational biographies for evidence of surprise. Students clearly perceived an 'anomaly or contradiction to a previous belief or understanding' in just under half of them. The paper then goes on to further identify different kinds of surprise and the triggers that caused them and concludes with suggestions for enhancing learning by capitalizing on students' surprise.	Harnessing surprise: tales from students' transformational biographies	NA:NA:NA	2010
Sue Fitzgerald:Brian Hanks:Ren√©e McCauley	This paper describes a process for establishing and maintaining a computer science education research group. Its purpose is to tell the story of one long-standing group, describe the benefits afforded by collaborative research groups and provide advice about how to form such a group. The intended audience is faculty members at teaching-intensive institutions who wish to establish or revive a research program in computer science education. We discuss establishing and maintaining a computer science education research agenda in a teaching-intensive environment.	Collaborative research in computer science education: a case study	NA:NA:NA	2010
Carol Taylor	NA	Session details: K-12 instruction	NA	2010
Seok-Ju Chun:Jungwoo Ryoo	This paper describes a new programming learning system. It consists of a Web-based flowchart application and Light Emitting Diode (LED) display kits. The LED kits produce various animations or static images according to a flow chart. The flowchart tool allows students to manipulate program elements through a Graphical User Interface (GUI). Survey results show that the proposed system makes learning how to program less challenging and more interesting for beginners. Encouraged by these initial findings, the authors are developing a system with add-on features including sensor accessory options and compatibility with well known LEGO¬Æ products.	Development and application of a web-based programming learning system with LED display kits	NA:NA	2010
Tom Lauwers:Emily Hamner:Illah Nourbakhsh	Many efforts are being made to improve computer science education in order to address the retention and motivation of students. These efforts rely on the development of educational tools and environments, tools that, when successful, require many years to integrate into the computer science education community. We introduce a strategy that both speeds uptake in the community and improves the chances of the project creating an educationally successful tool. The strategy hinges on creating an initial community of educators before an educational tool is fully mature but at the point at which it becomes usable by teachers. While this is somewhat analogous to the beta-testing communities in software development, our aim is for the community to drive the underlying design in significant ways. Our context is CSbots, a project to develop a robot, software environment, and associated curricula for introductory computer science education. We detail our collaborative outreach effort, which resulted in the concurrent creation of a community of 30 invested educators and a well aligned educational tool ready for broad dissemination.	A strategy for collaborative outreach: lessons from the CSbots project	NA:NA:NA	2010
Stephen Cooper:Wanda Dann:John Harrison	To combat the decline of teaching computing courses in high schools, a plan was created to offer professional development (in both content and pedagogy) to high school computing teachers, and to have college faculty partner with those high school teachers to implement innovative curricula. This paper describes a pilot program that was run in support of an NSF Innovative Technology Experiences for Students and Teachers (ITEST) project that funded this plan of action. Professional development activities were offered during summer 2006 and the resulting curriculum was taught in high school the following academic year (2006-2007).	A k-12 college partnership	NA:NA:NA	2010
Paul Gestwicki	NA	Session details: Panel	NA	2010
Ellen Spertus:Mark L. Chang:Paul Gestwicki:David Wolber	NA	Novel approaches to CS 0 with app inventor for android	NA:NA:NA:NA	2010
Youwen Ouyang	NA	Session details: Panel	NA	2010
Youwen Ouyang:Ursula Wolz:Susan H. Rodger	NA	Effective delivery of computing curriculum in middle school: challenges and solutions	NA:NA:NA	2010
Owen Astrachan	NA	Session details: Special session	NA	2010
Owen Astrachan:Kathleen Haynie:Chris Stephenson:Lien Diaz:Amy Briggs	NA	Re-imagining the first year of computing	NA:NA:NA:NA:NA	2010
Curtis Hill	NA	Session details: Peers	NA	2010
Scott Turner:Manuel A. P√©rez-Qui√±ones:Stephen Edwards:Joseph Chase	In computer science, students could benefit from exposure to critical programming concepts from multiple perspectives. Peer review is one method to allow students to experience authentic uses of the concepts in a non-programming manner. In this work, we examine the use of the peer review process in early, object-oriented, computer science courses as a way to develop the reviewers' knowledge of object-oriented programming concepts, specifically Abstraction, Decomposition, and Encapsulation. To study these ideas, we used peer review exercises in two CS2 classes at local universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding exercises), we measured the students' conceptual understanding throughout the semester with concept maps and the reviews they completed. We found that reviewing helped students learn Decomposition, especially those reviewing the instructor's programs. Overall, peer reviews are a valuable method for teaching Decomposition to CS2 students and can be used as an alternative way to learn object-oriented programming concepts.	Peer review in CS2: conceptual learning	NA:NA:NA:NA	2010
Benjamin Yu:George Tsiknis:Meghan Allen	Most students see exams as a stressful experience, having crammed as much as they possibly can and hoping that the material they have studied would indeed be on the exams, and the material that they did not have the time to study for, nor understand, would be overlooked by their professors. At the same time, instructors see exams as formal assessments of student learning. Exams are seldom thought of as a learning experience. In this paper, we report our experiences in the use of two-stage exams as a learning experience for the students in two different courses. In a two-stage exam, students write an exam individually, then they rewrite the same exam in collaboration with three or four other students. One of the main objectives is to encourage peer instruction and promote learning even during the exams. Students obtain immediate feedback during the exam, and initial results have shown that this type of exam format produces some positive effects in later assessment.	Turning exams into a learning experience	NA:NA:NA	2010
Beth Simon:Michael Kohanfars:Jeff Lee:Karen Tamayo:Quintin Cutts	Peer Instruction (PI) is a pedagogical technique to increase engagement in lectures. Students answer a multiple choice question (MCQ) typically using clickers (hand-held remote devices with a minimum of 5 option buttons), discuss the question with their peers, and then answer the question again. In physics, PI has years of evidence of increased conceptual learning, as measured by the Force Concept Inventory (FCI)[7]. In this experience report, we describe how PI was applied in CS1 and CS1.5 courses teaching Java. We identify specifics of the standard PI model which were adopted, adapted, or discarded for use in introductory computing, describe the process involved for the instructor, give examples of the types of questions asked of students, report on students' performance in answering these questions, reflect on the value for the instructor, and report the attitudes and opinions of the students. We conclude with observations, advice and suggested improvements.	Experience report: peer instruction in introductory computing	NA:NA:NA:NA:NA	2010
Kelvin Sung	NA	Session details: Scratch	NA	2010
Colleen M. Lewis	This study compares the attitudinal and learning outcomes of sixth grade students programming in either Logo or Scratch. Given proposed affordances of the visual programming language, Scratch, I hypothesized that those students learning Scratch would demonstrate greater competence in interpreting loops and conditional statements and would have more positive attitudes towards programming. However, differences in performance between the two groups appeared only in the greater ability of the students that learned Scratch to interpret conditional statements. Contrary to our hypothesis, we found that students that learned Logo had on average higher confidence in their ability to program and students were no more likely to plan to continue to program after the course or view the learning of topics as difficult if they learned Logo or Scratch.	How programming environment shapes perception, learning and goals: logo vs. scratch	NA	2010
Alex Ruthmann:Jesse M. Heines:Gena R. Greher:Paul Laidler:Charles Saulters, II	This paper discusses our ongoing experiences in developing an interdisciplinary general education course called Sound Thinking that is offered jointly by our Dept. of Computer Science and Dept. of Music. It focuses on the student outcomes we are trying to achieve and the projects we are using to help students realize those outcomes. It explains why we are moving from a web-based environment using HTML and JavaScript to Scratch and discusses the potential for Scratch's "musical live coding" capability to reinforce those concepts even more strongly.	Teaching computational thinking through musical live coding in scratch	NA:NA:NA:NA:NA	2010
Joel C. Adams	Each July since 2003, the author has directed summer camps that introduce middle school boys and girls to the basic ideas of computer programming. Prior to 2009, the author used Alice 2.0 to introduce object-based computing. In 2009, the author decided to offer these camps using Scratch, primarily to engage repeat campers but also for variety. This paper provides a detailed overview of this outreach, and documents its success at providing middle school girls with a positive, engaging computing experience. It also discusses the merits of Alice and Scratch for such outreach efforts; and the use of these visually oriented programs by students with disabilities, including blind students.	Scratching middle schoolers' creative itch	NA	2010
Zachary Kurmas	NA	Session details: Computer organization	NA	2010
Dino Schweitzer:Jeff Boleng	Stack frames are a fundamental concept in computer science often taught in an operating systems or an assembly language programming course. Computer security courses also rely on an understanding of stack frame concepts when teaching buffer overflow attacks. To assist students in learning the fundamentals of stack frames and related concepts, we have developed an interactive Simple Machine Simulator tool that allows students to step through a C-like language program and watch how memory changes. We have used this tool successfully in various courses to teach different aspects of stack frames and their use. This paper will describe the tool, how it is used to teach stack frame concepts, our experience, and future plans.	A simple machine simulator for teaching stack frames	NA:NA	2010
Stan J. Thomas:Paul M. Whitener	In this paper, we report on our efforts, extending over several years, to provide computer science students experience with a variety of operating system and computing environments. We describe our explorations into the use of virtual machine environments for instructional purposes, explorations that have led to the current multifaceted approach to virtualization. We also demonstrate that implementing a diverse, sophisticated virtual computing environment does not require a large investment in computer hardware, in fact it can lead to a cost saving by extending the useful life of systems and reducing the complexity of system administration.	In the zone: virtual computing on a budget	NA:NA	2010
J. Stanley Warford:Chris Dimpfl	This paper presents a virtual machine simulator with a memory trace facility having two unique features. First, the machine is designed to illustrate the translation from C/C++ to assembly language and from thence to machine language. Instead of the more common memory dump labeled by address, the tracer displays a graphic representation of the cell labeled by its symbol. Second, the simulator displays in real time the growth of the run-time stack on function activation, detects and displays the boundaries of the activation record, and displays all the cells on the run-time stack labeled by symbol. The paper includes download information for the open-source application.	The pep/8 memory tracer: visualizing activation records on the run-time stack	NA:NA	2010
Anna Cavender	NA	Session details: Teaching gems	NA	2010
Aaron Tenenbaum:Gerald Weiss:David Arnow	It is curious but there is widespread misuse of floating-point types to represent monetary amounts in introductory programming classes. This is evident from a survey of popular CS1 textbooks. It is instructive to examine how dollars and cents and other currency values are represented in actual practice and how we can utilize those techniques in computer science education, for both the sake of correctness and to illustrate important general principles. Furthermore, it is particularly interesting to review the history of CS education and determine how this situation came to pass. The interplay between technology, academic cultures and institutional development turns out to be quite significant.	Monetary values: double trouble or dollars and sense?	NA:NA:NA	2010
Darrah P. Chavey	You're teaching elementary sorting techniques, and you would like your students to do a programming assignment that tests their understanding of the ideas. But all of the code for elementary sorting techniques are in the textbook, easily found on the Web, etc. We suggest the use of two "Double Sorting" techniques whose solution is not standardly available, are fairly straight-forward to code, and offer speed improvements over the "straight" sorts. Double Sorting, the idea of processing two chosen elements simultaneously, applies to both Insertion Sort and Selection Sort, with speedups of 33% and 25%, hence are good enough to justify coding, but not good enough to be in Web collections. Code for this can be written in as little as a dozen lines of C++/Java code, and is easily within the reach of introductory students who understand the basic algorithms. In addition, the ideas used for double sorting are natural first steps in understanding how the N2 sorts can be improved towards the N log N sorts that they will study later. For more advanced students, these double sorts also generate good exercises in the analysis of algorithms.	Double sorting: testing their sorting skills	NA	2010
David Ginat	The notions of "as if" and "don't care" are essential notions in computational thinking. The former appears in the reformulation of tasks, reduction between tasks, auxiliary variables, and more. The latter is the core of non-determinism, asynchronous execution, and arbitrary choices in deterministic algorithms. The two notions are not intuitive, and require abstraction. We expect computer science (CS) graduates, who developed computational thinking during their studies, to demonstrate comprehension of these notions. Unfortunately, this may not be the case. In this paper we present a study of CS graduates, which reveals difficulties of limited comprehension and acceptance of these notions. We characterize the difficulties, relate them to cognitive aspects of abstraction, and offer some didactic suggestions.	The baffling CS notions of "as-if" and "don't-care"	NA	2010
Susanne Hambrusch	NA	Session details: Panel	NA	2010
Vicki Allan:Valerie Barr:Dennis Brylow:Susanne Hambrusch	The number of undergraduates entering computer science has declined in recent years. This is paralleled by a drop in the number of high school students taking the CS AP exam and the number of high schools offering computer science courses. The declines come at a time when career opportunities in CS continue to grow and computer science graduates are seen as crucial in building a globally competitive workforce for the 21st century. Efforts aimed at reversing the declining interest in computer science include curriculum revisions at the undergraduate level at many institutions, a re-design of computer science AP courses [1], and the inclusion of computational thinking into disciplines outside computer science [3]. This panel discusses four projects of computer science researchers collaborating with high school teachers on integrating computing and computational thinking into their courses. The majority of the high school teachers involved is teaching science and math courses. They are teaching a diverse group of talented and college-bound students. The goal of all projects is to integrate computing into disciplines represented in the high school curriculum and to raise the awareness of computer science as an exciting and intellectually rewarding field. This panel will outline recent and on-going activities and interaction with high school teachers. Each panelist will describe how he/she got involved and the nature of the interaction. The panelists will talk about their individual projects, outline their visions for future interactions, and how their effort can be replicated by others. The session will briefly describe NSF's RET program which provided teacher support for three of the four projects. The session will then be opened for discussion; the audience will be encouraged to ask questions and contribute additional ideas for the inclusion of computational thinking in high school courses.	Computational thinking in high school courses	NA:NA:NA:NA	2010
Doug Baldwin	NA	Session details: Panel	NA	2010
Doug Baldwin:Bill Marion:Murali Sitaraman:Cinda Heeren	NA	Some developments in mathematical thinking for computer science education since computing curricula 2001	NA:NA:NA:NA	2010
Daniel D. Garcia	NA	Session details: Panel	NA	2010
Daniel D. Garcia:Gail Chapman:Orit Hazzan:Maggie Johnson:Leigh Ann Sudol	NA	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 3	NA:NA:NA:NA:NA	2010
Lynda Thomas	NA	Session details: Global perspectives	NA	2010
Ming Zhang:Virginia M. Lo	This paper examines the current status of professional computing education for undergraduate majors and fundamental computer education for non-majors in China. We describe the evolution of computing education over the past decade and its role in meeting society's requirements for IT talent, and we discuss developing trends for computing education at China's universities. We conclude with a description of the Computer Science major at Peking University, one of the nation's leading research-based computer science departments.	Undergraduate computer science education in China	NA:NA	2010
Noa Ragonis:Orit Hazzan:Judith Gal-Ezer	This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are among the educational and pedagogical challenges faced by those involved in the current development of CS. It presents a survey that reflects the accumulative knowledge gained in Israel over the past twenty years with respect to CS teacher preparation. We explored nine institutes (six universities and three teacher education colleges) that offer CS teacher preparation programs. The survey indicates that while the programs vary in their implementation details, they are all motivated by the unique characteristics of CS, which play a central role in their design. We suggest that this observation further emphasizes the obvious: CS deserves designated CS teacher preparation programs. We therefore hope that this survey will contribute to the community of CS educators in general and to practitioners involved in developing CS teacher preparation programs in particular.	A survey of computer science teacher preparation programs in Israel tells us: computer science deserves a designated high school teacher preparation!	NA:NA:NA	2010
Adnan H. Yahya	Many countries, including those in the developing world, have introduced mandatory Information Technology (IT) courses for high school (HS) students. This was motivated by the importance of IT skills for the general population in view of the widespread use of computers. The HS curriculum is frequently decided upon by university faculty, with university needs very much in mind. A steady shift of introductory college level material to HS curriculum is observed. With all the positive effects of IT HS education, the issue of how to modify the first year computing courses to account for the material transferred to HS had to be addressed. The problem is complicated by the nonuniform adoption of IT education in high schools even within a single country, the varying emphasis on theory vs. practice in HS courses and the differences in the availability of resources at high schools, inadequacy of testing procedures and, in the case of many developing countries, the language of instruction difference between HS and college. Ignoring the HS curriculum when designing college level courses is a waste of resources and may render the college classes boring for many students. Accounting for the HS computing education at the college level may require a suite of placement tests. Even then, it may not be straightforward to figure out how to modify each of the introductory college courses to account for the HS material. On the example of the completely revamped IT education in Palestinian schools, which introduced mandatory technology education for grades 5-12 for all HS students, we discuss the dilemma of how to account for the HS IT knowledge and skills at the college level, especially the way this should affect the first computing courses at the college level, which has been a topic of debate in the last years.	The inteaction between high school curriculum and first year college courses: the case of computing	NA	2010
Sarah Douglas:Art Farley:Ginnie Lo:Andrzej Proskurowski:Michal Young	Internationalization of computer science education involves incorporating awareness, knowledge and skills of professional life in a global environment. Through an NSF CPATH1 grant we have established a Pacific Rim community of computer science departments, high tech industry and international programs exploring a new model of computer science education that focuses on the knowledge, skills and competencies necessary for professional success and leadership in a global context. This paper describes our progress in building an international community of computer science educators, as well as our efforts in curricular innovation and establishment of international summer schools. Internationalization of computer science education will help attract the best and brightest students and broaden the appeal of computer science to a much more diverse population. Computer science will be seen as a pathway to a career not in an isolated cubicle but in the wide-open world.	Internationalization of computer science education	NA:NA:NA:NA:NA	2010
Kimberly Voll	NA	Session details: CS education research II	NA	2010
Jennifer Parham:Leo Gugerty:D. E. Stevenson	We describe the second phase of an ongoing study whose aims are to explore how computer science students solve problems and to understand the relationship between metacognition and schemata. This research uses verbal protocols from computer science students, and based on the analysis of their transcripts, empirical evidence supports metacognition as a significant role in computer science problem solving. For the problem solved in this research, the students reveal a pattern in their interactions between metacognitive processes and the domain-specific strategies used to develop a program.	Empirical evidence for the existence and uses of metacognition in computer science problem solving	NA:NA:NA	2010
Paul Denny:Brian Hanks:Beth Simon	PeerWise is a collaborative web-based system that engages students in the creation and evaluation of a test bank of multiple-choice questions. Previous studies involving two large CS1 courses in New Zealand have provided preliminary evidence that PeerWise usage is positively correlated with exam performance. In addition, it was reported that the student generated assessment questions were mostly free from errors and were clearly written, and the students appeared to positively value the system. Here we report on the first use of PeerWise in a CS1.5 course (second programming course) in the United States. Although the usage model was modified slightly to accommodate pedagogical factors, we highlight similar positive outcomes to those observed in New Zealand. Of particular note, students who were most active using PeerWise improved their rank in class relative to their peers who were less active.	Peerwise: replication study of a student-collaborative self-testing web service in a u.s. setting	NA:NA:NA	2010
Timothy T. Yuen:Min Liu	This paper discusses a cognitive study of how interactive multimedia authoring (IMA) affects novice computer science students' conceptual understanding of object-oriented programming (OOP). In this study, interactive multimedia authoring refers to the construction of a role-playing game using a game template developed with Adobe Flash CS3 and ActionScript 2.0. Three cognitive processes of disequilibrium, exploration, and awareness were observed in this study, which aided the transformation of students' understanding of OOP through interactive multimedia authoring.	How interactive multimedia authoring transforms object-oriented thinking	NA:NA	2010
Quintin Cutts:Emily Cutts:Stephen Draper:Patrick O'Donnell:Peter Saffrey	Introductory programming classes are renowned for their high dropout rates. The authors propose that this is because students learn to adopt a fixed mindset towards programming. This paper reports on a study carried out with an introductory programming class, based on Dweck's mindset research. Combinations of three interventions were carried out: tutors taught mindset to students; growth mindset feedback messages were given to students on their work; and, when stuck, students were encouraged to use a crib sheet with pathways to solve problems. The study found that the mixture of teaching mindset and giving mindset messages on returned work resulted in a significant change in mindset and a corresponding significant change in test scores - improvements in test scores were found in a class test given immediately after the six-week intervention and at the end-of-year exam. The authors discuss the results and the strengths and weaknesses of the study.	Manipulating mindset to positively influence introductory programming performance	NA:NA:NA:NA:NA	2010
Adrian German	NA	Session details: Assessment	NA	2010
Leigh Ann Sudol:Cassandra Studer	As professional educators we produce a large number of assessments for our students to complete. These assessments or exams are often evaluated informally based upon student feedback and simple measures such as average score on a question. This paper highlights another more rigorous approach to item evaluation, and presents an evaluation of several items from an assessment as examples of the type of information that Item Response Theory can provide.	Analyzing test items: using item response theory to validate assessments	NA:NA	2010
Alex Gerdes:Johan T. Jeuring:Bastiaan J. Heeren	Programming exercise assessment tools alleviate the task of teachers, and increase consistency of markings. Many programming exercise assessment tools are based on testing. A test-based assessment tool for programming exercises cannot ensure that a solution is correct. Moreover, it is difficult to test if a student has used good programming practices. This is unfortunate, because teachers want students to adopt good programming techniques. We propose to use strategies, in combination with program transformations, as a foundation for functional programming exercise assessment. Expert knowledge, in the form of model solutions, can be expressed as programming strategies. Using these strategies we can guarantee that a student program is equivalent to a model solution, and we can report which solution strategy has been used to solve the programming problem.	Using strategies for assessment of programming exercises	NA:NA:NA	2010
Daniel Heersink:Barbara M. Moskal	Many projects throughout the United States are underway that seek to increase the appeal of technology as a field of study. To better understand the impacts of such projects, validated instruments are needed which measure students' attitudes and beliefs in both computer science and information technology. This paper describes the development and validation of two assessment instruments. One measures attitudes and beliefs about computer science; the other measures attitudes and beliefs about information technology. The questions that comprise these instruments are identical with the exception of the use of the terms "computer science" and "information technology". Both instruments sought to measure five constructs: confidence, interest, gender, usefulness, and professional. Based on the results of factor analyses, high school students are able to distinguish among these constructs in computer science but not in information technology. This raises questions as to what high school students understand about field of information technology	Measuring high school students' attitudes toward computing	NA:NA	2010
Legand L. Burge:Ronald J. Leach	In this paper we describe a tool developed as part of the assessment process used at our university. The tool allows the automatic determination of the degree to which individual students meet the learning objectives that indicate how well students meet both course objectives and program directives. We also describe a portion of our assessment process that helps us perform the difficult step of "closing the loop" to make sure that the results of our data analysis are used to insure continuous program improvement.	An advanced assessment tool and process	NA:NA	2010
Roy Pargas	NA	Session details: Supporting student learning	NA	2010
James B. Fenwick, Jr.:Cindy Norris:Andrew R. Dalton:William Kreahling	Assessment of student learning through tests, or examinations, is one of those necessary evils. No one seems to enjoy it, but everyone admits the necessity of it. Reducing student anxiety and frustration is an important activity to obtain a meaningful assessment of their learning. A common way for teachers to help students prepare is with a review session. This paper describes a structured review technique that actively engages every student in a multisensory way, requires little work on the part of the instructor, and is both entertaining and fun. Most important, this paper describes an empirical study that demonstrates the dramatic efficacy of the technique.	24/7 lectures as an exam review technique	NA:NA:NA:NA	2010
Kristy Elizabeth Boyer:William Lahti:Robert Phillips:Michael D. Wallis:Mladen A. Vouk:James C. Lester	Using effective teaching practices is a high priority for educators. One important pedagogical skill for computer science instructors is asking effective questions. This paper presents a set of instructional principles for effective question asking during guided problem solving. We illustrate these principles with results from classifying the questions that untrained human tutors asked while working with students solving an introductory programming problem. We contextualize the findings from the question classification study with principles found within the relevant literature. The results highlight ways that instructors can ask questions to 1) facilitate students' comprehension and decomposition of a problem, 2) encourage planning a solution before implementation, 3) promote self-explanations, and 4) reveal gaps or misconceptions in knowledge. These principles can help computer science educators ask more effective questions in a variety of instructional settings.	Principles of asking effective questions during student problem solving	NA:NA:NA:NA:NA:NA	2010
Ketrina Yim:Daniel D. Garcia:Sally Ahn	Computer Science Illustrated1 is an endeavor to help visual learners comprehend computer science topics through a series of resolution-independent illustrations, which are made available online for use as handouts in class and posters in the computer labs. These illustrations are designed to present concepts as engaging and memorable visual metaphors combined with concise explanations or short narratives, intended to maintain the students' interest and facilitate retention. An additional goal of the project is to make learning the concepts an entertaining experience through the use of colorful and whimsical characters in the illustrations. In producing our twenty-seven illustrations, we determined which topics were most difficult for students to understand in our university's introductory computer science courses and followed a step-by-step process of design, redesign, and revision to generate our illustrations. We also assessed the effectiveness of our creations, using both subjective and objective measures.	Computer science illustrated: engaging visual aids for computer science education	NA:NA:NA	2010
Martin C. Carlisle	We provided 21 short YouTube videos for an Introduction to Programming in Java course. Students were surveyed on how often they watched the videos and did the readings, and how much these activites contributed to their learning. When professors reduced lecture time and increased lab time, students watched videos and read significantly more. Their test scores were at least as high and they indicated they would prefer to not have more lecture. The YouTube videos also provided a source of outreach for the university, drawing a large number of views, including the 13-17 year-old demographic.	Using You Tube to enhance student class preparation in an introductory Java course	NA	2010
Clifford A. Shaffer	NA	Session details: Special session	NA	2010
Clifford A. Shaffer:Thomas L. Naps:Susan H. Rodger:Stephen H. Edwards	NA	Building an online educational community for algorithm visualization	NA:NA:NA:NA	2010
Paul Tymann	NA	Session details: Special session	NA	2010
Karen Donathan:Paul Tymann	Every year, for the past 10 years, more than 10,000 students have taken the Advanced Placement Computer Science exam (AP CS). The free response section of the AP CS exam is manually scored by a group of about 100-150 high school and college faculty referred to as readers. The exams are scored accurately and consistently even though thousands of exams are being scored by dozens of readers. This accuracy is due in large part to the rubrics that are developed to score the exams. Rubrics not only improve the consistency and speed at which exams can be scored, they also can be used to communicate expectations to students. This special session will discuss how to develop a rubric, show how they are used in the AP CS scoring process and illustrate how rubrics can be used to convey expectations to students.	The development and use of scoring rubrics: (or how to grade thousands of exams without losing your mind)	NA:NA	2010
Nick Parlante	NA	Session details: Special session	NA	2010
Nick Parlante:Julie Zelenski:Zachary Dodds:Wynn Vonnegut:David J. Malan:Thomas P. Murtagh:Todd W. Neller:Mark Sherriff:Daniel Zingaro	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2010
Weiqing Sun	NA	Session details: Operating systems	NA	2010
Oren Laadan:Jason Nieh:Nicolas Viennot	Students learn more through hands-on project experience for computer science courses such as operating systems, but providing the infrastructure support for a large class to learn by doing can be hard. To address this issue, we introduce a new approach to managing and grading operating system homework assignments based on virtual appliances, a distributed version control system, and live demonstrations. Our solution is easy to deploy and use with students' personal computers, and obviates the need to provide a computer laboratory for teaching purposes. It supports the most demanding course projects, such as those that involve operating system kernel development, and can be used by both on-campus and remote distance learning students even with intermittent network connectivity. Our experiences deploying and using this solution to teach operating systems at Columbia University show that it is easier to use, more flexible, and more pedagogically effective than other approaches.	Teaching operating systems using virtual appliances and distributed version control	NA:NA:NA	2010
Rob Hess:Paul Paulson	In this paper, we present a series of programming projects based on the Linux kernel for students in a senior-level undergraduate operating systems course. The projects we describe cover several key operating systems concepts, including process scheduling, I/O scheduling, memory management, and device drivers. In addition, we assess these projects along several dimensions, from their difficulty to their capacity to help students understand operating systems concepts, based on six terms (three years) of detailed student exit surveys along with observations and anecdotal evidence. Through this assessment, we conclude that our Linux-based projects are an effective means by which to teach operating systems concepts and, additionally, that students' response to these projects is overwhelmingly positive.	Linux kernel projects for an undergraduate operating systems course	NA:NA	2010
Alexander Schmidt:Andreas Polze:Dave Probert	When studying operating systems, students need to understand user-mode system interfaces (U), they need to learn about tools to monitor and measure OS behavior (M), and they finally should understand central implementation details of the OS kernel (K). Following the UMK approach, even complex projects such as modifying the memory management inside the Windows kernel can be carried out in an undergraduate OS curriculum. Here we concentrate on the kernel- and measurement part and present the Abstract Memory Management (AMM) project. AMM provides a framework for modifying the working set management in Windows while still hiding many implementation details of the kernel. AMM has been used in OS courses at U of Washington Bothell and HPI/U of Potsdam, Germany, with very good results. The AMM lab - together with other labs - is based on the Windows Research Kernel (WRK) as available in source from Microsoft. These labs complement our previously developed Curriculum Resource Kit (CRK) and are available for download.	Teaching operating systems: windows kernel projects	NA:NA:NA	2010
Salvador Garcia-Martinez	NA	Session details: Active learning	NA	2010
Ana Paula L. Ambr√≥sio:F√°bio M. Costa	The introductory undergraduate course on Algorithms and Computer Programming, commonly known as CS1, has always presented a challenge when considering student failure and drop out rates. Despite this, it is acknowledged that this is a foundational course for a large part of the CS curriculum. In this paper we present the results of a project that combines the use of mobile, pen-based, computing technology and Problem-Based Learning in the redesign of an introductory computer programming course. The course redesign focused on the integrated use of tablet PCs to assist in the several activities involved in the use of the PBL method in the classroom. The results show a promising future for the methodology, also pointing to the need for some important adaptations in order to make its use more effective to teach and learn this particular discipline.	Evaluating the impact of PBL and tablet PCs in an algorithms and computer programming course	NA:NA	2010
Christopher Hundhausen:Anukrati Agrawal:Dana Fairbrother:Michael Trevisan	Given the increasing importance of communication, teamwork, and critical thinking skills in the computing profession, we believe there is good reason to provide students with increased opportunities to learn and practice those skills in undergraduate computing courses. Toward that end, we have been exploring studio-based instructional methods, which have been successfully employed in architecture and fine arts education for over a century. We have developed an adaptation of studio-based instruction for computing education called the pedagogical code review, which is modeled after the code inspection process used in the software industry. To evaluate its effectiveness, we carried out a quasi-experimental comparison of a "studio-based" CS 1 course with pedagogical code reviews and an identical "traditional" CS 1 course without pedagogical code reviews. We found no learning outcome differences between the two courses; however, we did observe two interesting attitudinal trends: (a) self-efficacy decreased more in the traditional course than in the studio-based course; and (b) peer learning decreased in the traditional course, but increased in the studio-based course. Additional questionnaire and interview data provide further evidence of the positive impact of studio-based instruction.	Does studio-based instruction work in CS 1?: an empirical comparison with a traditional approach	NA:NA:NA:NA	2010
Dean Hendrix:Lakshman Myneni:Hari Narayanan:Margaret Ross	This paper presents an experience in designing, implementing, and evaluating a studio-based learning model for CS2. Adapted from architecture and art education, as well as from collaborative problem-solving pedagogies, studio-based learning has shown great promise for computing education. Key elements of studio-based learning include exploring multiple solutions to a problem, justifying the choice of one solution, and being subject to, as well as providing, peer reviews. We describe the design, implementation, and revision of a studio model for CS2, and then present the results of an evaluation of the model when compared to traditional instruction in CS2.	Implementing studio-based learning in CS2	NA:NA:NA:NA	2010
Ariel Ortiz	NA	Session details: Programming language issues	NA	2010
James T. Streib:Takako Soma	Organick, Forsythe, and Plummer extensively used contour diagrams to illustrate the semantics of procedural and functional programming languages. However, many of the benefits of contour diagrams can still be utilized in explaining the semantics of object-oriented languages and is evident in the software JIVE created by Gestwicki and Jayaraman. This paper illustrates the use of both contour diagrams and JIVE to help students understand passing objects via parameters, returning objects from methods, comparing objects, and using inheritance in the Java programming language. The results from a small informal survey are included. This paper is useful to those teaching Java in a first-year computer science sequence.	Using contour diagrams and JIVE to illustrate object-oriented semantics in the Java programming language	NA:NA	2010
Paolo A.G. Sivilotti:Matthew Lang	Abstraction is a critical concept that underlies many topics in computing science. For example, in software engineering, the distinction between a component's behavior and its implementation is fundamental. Java provides two constructs that correspond to precisely this distinction: A Java interface is a client's abstract view of a component's behavior, while a class is a concrete implementation of that same component. We have developed a course that introduces Java while following a discipline of diligently decomposing every component into these two separate linguistic elements. In this course, interfaces are given the same prominence as classes since both are needed for a complete component. This approach is helpful to students by providing: (i) a clear manifestation of the role of abstraction in software systems, and (ii) a framework that naturally motivates many good coding practices adopted by professional programmers.	Interfaces first (and foremost) with Java	NA:NA	2010
Richard J. Enbody:William F. Punch	If you change the CS1 language to Python, what is the impact on the rest of the curriculum? In earlier work we examined the impact of changing CS1 from C++ to Python while leaving CS2 in C++. We found that Python-prepared CS1 students fared no differently in CS2 than students whose CS1 course was in C++, even though CS2 was taught in C++ and covered the same topics as in previous years. Was that an anomaly? What happens in the next tier of courses? When our CS1 was first changed to Python there were many students who had taken CS1 in C++ still in the system. The result is that there is a cadre of students with either CS1 in Python or CS1 in C++ moving together through our curriculum. This one-time occurrence is an opportunity to study the students with many variables fixed. Our next tier of courses is a C-based computer organization course, a C++ based object-oriented software design course, and a data structures course. We found that the students who started with Python fared as well as the CS1 C++ students. As before, the best predictor of performance was their college GPA. Python versus C++ CS1 preparation was not a predictor of performance in any course. We conclude again that in our C++ based curriculum changing CS1 to Python had no negative impact on student performance and did not require any significant change in those subsequent courses.	Performance of python CS1 students in mid-level non-python CS courses	NA:NA	2010
Phillip Barry	NA	Session details: Computing for the social good	NA	2010
Yu Cai	In the past few years sustainability and green computing have received tremendous interest across the world. Computing plays a critical role in our society, thus it has a special responsibility for sustainability and green movement. In this paper, we advocate sustainability integration into undergraduate computing education. We present three sustainability integration strategies, our efforts to develop a green computing course and learning modules, and course evaluation. We believe that sustainability integration will help prepare our graduates with computing competencies, multi-disciplinary knowledge, and computational thinking to create a sustainable future.	Integrating sustainability into undergraduate computing education	NA	2010
Richard J. Anderson:Ruth E. Anderson:Gaetano Borriello:Joyojeet Pal	Applying information and communication technologies to development (ICTD) is emerging as an interesting and motivating research area in computer science and engineering. It spans application areas from healthcare to transportation, and requires the use of computing skills from networking to user interface design. Addressing problems of developing regions and under-served communities lets students explore a different part of the ICT design space, leading to new implementation and research questions. ICTD is also an area that has the potential to excite students about the CSE field more generally, with its emphasis on enabling social benefits with technology, and is rich in possibilities for interesting student projects. In this paper we report on two offerings of a course at the University of Washington that introduce students to the field by way of 1) reading papers from literature in the area to gain exposure to this very different design mindset and 2) doing practical projects that engage students in engineering problems under unique design constraints. Our hope is that CSE educators may find our experiences useful in identifying an approach to integrating the field of ICTD into their curricula.	An approach to integrating ICTD projects into an undergraduate curriculum	NA:NA:NA:NA	2010
Archana Chidanandan:Lori Russell-Dag:Cary Laxer:Reyyan Ayfer	In this paper, we describe a collaborative course experience between students from universities in the USA and Turkey. Student teams worked together on a software engineering project for a non-profit organization based in Turkey. The students learned valuable skills in team-work, collaboration-facilitating software tools and working with peers from a different culture and a different time-zone. At the end of the course, in a focus group, students were asked for feedback regarding the course and its outcomes. In this paper, we describe the course from the student perspective. From this, and the instructor's experiences we provide a list of guidelines.	In their words: student feedback on an international project collaboration	NA:NA:NA:NA	2010
Paul Gestwicki	NA	Session details: CS-1 issues	NA	2010
Amruth N. Kumar	The majority of earlier studies have found no positive effect of closed labs on student performance or retention in Computer Science I. Since these studies used written tests to assess student performance, their results may have been affected by a mismatch between what was taught in closed labs and what was assessed in the written test. On the other hand, online tests that involve writing and debugging programs assess the very knowledge and skills taught in closed labs. So, we conducted a study to evaluate the effect of closed labs on student performance and retention when they are combined with online testing in the course. We found that even with online testing, closed labs did not significantly affect either the total score of the students in the course or retention in the course. On the other hand, students with closed or even optional labs scored significantly better on their online first test than students with open labs scored on their written first test. Since this is in spite of the fact that online tests are more stressful to students than written tests, closed labs helped students prepare for online tests. Closed labs, when combined with online testing, helped significantly improve the course performance of above-average students. Finally, there was significant and large correlation between Math SAT score and student performance in Computer Science I.	Closed labs in computer science I revisited in the context of online testing	NA	2010
Lijun Ni:Tom McKlin:Mark Guzdial	This paper presents the findings of an exploratory, qualitative study revealing computing instructors' experience in adopting curriculum innovations. We interviewed eight instructors a year after they attended workshops on several innovative introductory Computer Science (intro CS) courses at undergraduate level. The interview was designed to elicit the extent to which instructors had adopted or adapted what they learned from the workshops, and what drove or prevented their efforts to make curriculum change. The results of this study reveal that the adoption and adaptation of computing curriculum innovations in new situations may involve systemic change affecting instructors, departments and institutions as a whole. The findings of this study suggest a list of questions that a computing instructor might ask before committing to a new innovation. We also consider implications of this study for disseminating computing education innovations.	How do computing faculty adopt curriculum innovations?: the story from instructors	NA:NA:NA	2010
Daniel L. Schuster	Computer game programming has been adopted by some instructors and schools in an effort to motivate students and make the learning more relevant to the student's world than the console programs many of their instructors learned with. This paper describes the author's experience teaching CS1 using the ACM Java library to write arcade game programs. An online book, the Free Java Book, has been written to support this approach. Experience over the last two years teaching with this approach will be shared and the book will be described.	CS1, arcade games and the free Java book	NA	2010
J. McGrath Cohoon	NA	Session details: Panel	NA	2010
J. McGrath Cohoon:Leisa D. Thompson:Jennifer J. Goodall:Rebecca L. Dohrman:Elizabeth Litzler	NA	Consultants on systemic reform for gender balance	NA:NA:NA:NA:NA	2010
Guy-Alain Amoussou	NA	Session details: Special session	NA	2010
Guy-Alain Amoussou:Myles Boylan:Joan Peckham	This session will be conducted by panelists who have carried out funded interdisciplinary research and education, and who have funded and managed interdisciplinary programs. They will provide an opportunity for computing educators to engage in a conversation to assess what is needed to better educate the next generation of students to participate and contribute actively in resolving emerging and future interdisciplinary challenges. Many of the computing education discussions have recently been around "computational thinking" and how this might prepare students in all disciplines, including computing, to formulate and solve problems with other disciplinary partners. The difficult question is how to prepare students to engage in these activities without eroding the depth that is also needed to tackle the deepest and most difficult problems.	Interdisciplinary computing education for the challenges of the future	NA:NA:NA	2010
Robert McCartney	NA	Session details: Special session	NA	2010
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Edward F. Gehringer:Raymond Lister:Dave Musicant	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA	2010
Gary Lewandowski	NA	Session details: Keynote address	NA	2010
Robert Michael Panoff	Students and faculty alike at all education levels are clearly spending much more of their time interacting with computing and communication tools than with each other. Is this good? Are all uses of computational technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how computing enables multiple representations in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. Moving "beyond PowerPointless-ness," we have the opportunity to demonstrate that computing really matters in teaching and learning. Computing "matters" because quantitative reasoning, computational thinking, and multi-scale modeling are the intellectual "heart and soul" of 21st Century science and therefore are the essential skills of the 21st Century workforce. Computing "matters" because we can apply the power of dynamic, visual, and interactive computing to reach a deeper understanding of models across math and science while exploring their role in understanding our world.	Computational thinking for all: the power and the peril	NA	2014
Andrea W. Lawrence	This paper describes the many possibilities that SIGCSE affords to those who make use of the resources and opportunities the organization and the annual conferences provide.	SIGCSE plus you equals leverage	NA	2014
Hadi Partovi	Code.org first exploded on the CS education scene in Feb 2013 with its first video featuring Mark Zuckerberg and Bill Gates talking about computer science. 10 months later, it launched an Hour of Code campaign that has taken the world by storm. Reaching 10 million students in just 3 days, the Hour of Code became the fastest-spreading service in the history of technology OR education. Code.org founder Hadi Partovi will talk about how he came up with the concepts behind these grassroots campaigns, and how Code.org hopes to harness the reach of the broader CS community to grow computer science education in schools.	Transforming US education with computer science	NA	2014
A.J. Bernheim Brush	Inspired by the availability of inexpensive connected devices-such as lights, water sensors, security cameras, power meters, and thermostats-we built the Lab of Things (LoT) platform to enable easy interaction with devices for a range of applications, including automation, security, energy management, and elder care. Our goal is to substantially lower the barrier for researchers and students to develop and experiment with new technologies for the home environment. LoT provides a common framework to write applications that use connected devices and includes a set of cloud services that enable remote command/control of devices, monitoring of system health, and data collection. We released the LoT SDK in July 2013 for non-commercial use. I will describe the research studies that motivated the development of Lab of Things, student and research projects developed using Lab of Things and its precursor HomeOS, and our long-term vision of research groups working together to create a test bed of homes around the world that are willing to participate in field studies.	Lab of things: a devices research and teaching platform for home and beyond	NA	2014
Ashraf Saad	NA	Session details: Automated assessment	NA	2014
Nickolas Falkner:Rebecca Vivian:David Piper:Katrina Falkner	Computer-based assessment is a useful tool for handling large-scale classes and is extensively used in the automated assessment of student programming assignments in Computer Science. The forms that this assessment takes, however, can vary widely from simple acknowledgement to a detailed analysis of output, structure and code. This study focusses on output analysis of submitted student assignment code and the degree to which changes in automated feedback influence student marks and persistence in submission. Data was collected over a four year period, over 22 courses but we focus on one course for this paper. Assignments were grouped by the number of different units of automated feedback that were delivered per assignment to investigate if students changed their submission behaviour or performance as the possible set of marks, that a student could achieve, changed. We discovered that pre-deadline results improved as the number of feedback units increase and that post-deadline activity was also improved as more feedback units were available.	Increasing the effectiveness of automated assessment by increasing marking granularity and feedback units	NA:NA:NA:NA	2014
Stephen H. Edwards:Zalia Shams:Craig Estep	Infinite looping problems that keep student programs from termi-nating may occur in many kinds of programming assignments. While non-terminating code is easier to diagnose interactively, it poses different concerns when software tests are being run auto-matically in batch. The common strategy of using a timeout to preemptively kill test runs that execute for too long has limita-tions, however. When one test case gets stuck in an infinite loop, forcible termination prevents any later test cases from running. Worse, when test results are buffered inside a test execution framework, forcible termination may prevent any information from being produced. Further, overly generous timeouts can de-lay the availability of results, and when tests are executed on a shared server, one non-terminating program can delay results for many people. This paper describes an alternative strategy that uses a fine-grained timeout on the execution of each individual test case in a test suite, and that adaptively adjusts this timeout dynamically based on the termination behavior of test cases com-pleted so far. By avoiding forcible termination of test runs, this approach allows all test cases an opportunity to run and produce results, even when infinite looping behaviors occur. Such fine-grained timeouts also result in faster completion of entire test runs when non-terminating code is present. Experimental results from applying this strategy to 4,214 student-written programs are dis-cussed, along with experiences from live deployment in the class-room where 8,926 non-termination events were detected over the course of one academic year.	Adaptively identifying non-terminating code when testing student programs	NA:NA:NA	2014
Matheus Gaudencio:Ayla Dantas:Dalton D.S. Guerrero	In introductory programming courses it is common to demand from students exercises based on the production of code. However, it is difficult for the teacher to give fast feedback to the students about the main solutions tried, the main errors and the drawbacks and advantages of certain solutions. If we could use automatic code comparison algorithms to build visualisation tools to support the teacher in analysing how each solution provided is similar or different from another, such information would be able to be rapidly obtained. However, can computers compare students code solutions as well as teachers? In this work we present an experiment in which we have requested teachers to compare different code solutions to the same problem. Then we have evaluated the level of agreement among each teacher comparison strategy and some algorithms generally used for plagiarism detection and automatic grading. We found out a maximum rate of 77% of agreement between one of the teachers and the algorithms, but a minimum agreement of 75%. However, for most of the teachers, the maximum agreement rate was over 90% for at least one of the automatic strategies to compare code. We have also detected that the level of agreement among teachers regarding their personal strategies to compare students solutions was between 62% and 95%, which shows that there may be more agreement between a teacher and an algorithm than between a teacher and one of her colleagues regarding their strategies to compare students' solutions. The results also seem to support that comparison of students' codes has significant potential to be automated to help teachers in their work.	Can computers compare student code solutions as well as teachers?	NA:NA:NA	2014
Mario Guimaraes	NA	Session details: Gamification	NA	2014
Alexandru Iosup:Dick Epema	Technical universities, especially in Europe, are facing an important challenge in attracting more diverse groups of students, and in keeping the students they attract motivated and engaged in the curriculum. We describe our experience with gamification, which we loosely define as a teaching technique that uses social gaming elements to deliver higher education. Over the past three years, we have applied gamification to undergraduate and graduate courses in a leading technical university in the Netherlands and in Europe. Ours is one of the first long-running attempts to show that gamification can be used to teach technically challenging courses. The two gamification-based courses, the first-year B.Sc. course Computer Organization and an M.Sc.-level course on the emerging technology of Cloud Computing, have been cumulatively followed by over 450 students and passed by over 75% of them, at the first attempt. We find that gamification is correlated with an increase in the percentage of passing students, and in the participation in voluntary activities and challenging assignments. Gamification seems to also foster interaction in the classroom and trigger students to pay more attention to the design of the course. We also observe very positive student assessments and volunteered testimonials, and a Teacher of the Year award.	An experience report on using gamification in technical higher education	NA:NA	2014
Lassi Haaranen:Petri Ihantola:Lasse Hakulinen:Ari Korhonen	Achievement badges are increasingly used to enhance educational systems and they have been shown to affect student behavior in different ways. However, details on best practices and effective concepts to implement badges from a non-technical point of view are scarce. We implemented badges to our learning management system, used them on a large course and collected feedback from students. Based on our experiences, we present recommendations to other educators that plan on using badges.	How (not) to introduce badges to online exercises	NA:NA:NA:NA	2014
Briana B. Morrison:Betsy DiSalvo	Gamification is the buzzword for adding gaming elements such as points or badges to learning experiences to make them more engaging and to increase motivation. In this paper we explore how Khan Academy has incorporated gaming elements into its CS learning platform. By mapping the literature on motivational processes to popular games we critically analyze how successful Khan Academy is at gamifying their site.	Khan academy gamifies computer science	NA:NA	2014
Jodi Tims	NA	Session details: Software engineering: projects	NA	2014
Sonal Dekhane:Richard Price	In this paper we describe our initiative to incorporate research, professional practice and methodologies into two undergraduate software engineering courses. As part of the Undergraduate Research Experience (URE) initiative on our campus, we modified two of our core software engineering courses. In our Software Development II (junior level) and Software Development Project (senior level) courses we integrated research projects, corporate visits and research talks to develop a deeper understanding of software engineering research and practice amongst our students.	Course-embedded research in software development courses	NA:NA	2014
Daniel E. Krutz:Samuel A. Malachowsky:Thomas Reichlmayr	Although testing often accounts for 50% of the budget of a typical software project, the subject of software testing is often overlooked in computing curriculum. Students often view testing as a boring and unnecessary task, and education is usually focused on building software, not ensuring its quality. Previous works have focused on either making the subject of testing more exciting for students or on a more potent lecture-based learning process. At the Department of Software Engineering at the Rochester Institute of Technology, recent efforts have been focused on the project component of our Software Testing course as an area of innovation. Rather than previous methods such as a tightly controlled and repetitive testbed, our students are allowed to choose a real-world, open source project to test throughout the term. With the instructor as both counsel and client, students are expected to deliver a test plan, a final report, and several class-wide presentations. This project has achieved significant student praise; qualitative and quantitative feedback demonstrates both increased satisfaction and fulfilled curricular requirements. Students enjoy the real-world aspect of the project and the ability to work with relevant applications and technologies. This paper outlines the project details and educational goals.	Using a real world project in a software testing course	NA:NA:NA	2014
Claudia Szabo	Teaching software engineering through group-based project work supported by theory lectures is effective, as recognized by both academia and industry. However, exposing students to practical software maintenance is often overlooked in favor of building software from scratch under the guidance of a lecturer or client. The developed software is usually delivered to the lecturer/client and no maintenance efforts are further required. In contrast, industry projects require fresh graduates to perform maintenance exercises and very rarely to build software from scratch. To address this issue, existing software maintenance assignments usually focus on small codebases of very good quality, in which artificial issues are introduced. In this paper, we propose to enhance a group-based project course with a software maintenance assignment that uses a medium-sized, student-produced codebase with real software bugs. Our analysis shows the effectiveness of our approach and highlights future avenues for improvement.	Student projects are not throwaways: teaching practical software maintenance in a software engineering course	NA	2014
David Stucki	NA	Session details: Mathematical perspectives	NA	2014
Diego Zaccai:Aditi Tagore:Dustin Hoffman:Jason Kirschenbaum:Zakariya Bainazarov:Harvey M. Friedman:Dennis K. Pearl:Bruce W. Weide	Syrus is courseware designed with the goal of helping students better understand logical sentences involving quantifiers. Syrus uses template-guided mutation of "seed" formulas to generate candidate practice problems, and third-party theorem-provers to automatically determine the truth value of each. It provides students with a virtually unlimited supply of unique and relevant practice problems and provides immediate feedback on each problem. Results of an empirical study of its efficacy are reported.	Syrus: providing practice problems in discrete mathematics with instant feedback	NA:NA:NA:NA:NA:NA:NA:NA	2014
Maria Knobelsdorf:Christoph Kreitz:Sebastian B√∂hne	High failure rates in introductory courses on theoretical computer science are a common problem at universities in Germany, Europe, and North America, as students often have difficulties coping with the contents of such courses due to their abstract and theoretical nature. This paper describes modifications to the pedagogy of a theory course held at the University of Potsdam, Germany that are motivated by a cognitive apprenticeship approach and have led to a significant reduction of the course's failure rates. Since our approach is based on the typical infrastructure for teaching introductory computer science courses and does not require additional expenses or special resources, it can be replicated by other institutions. We believe that it is a serious contribution to better support teaching as well as student learning success in this field.	Teaching theoretical computer science using a cognitive apprenticeship approach	NA:NA:NA	2014
Jason Gorman:Sebastian Gsell:Chris Mayfield	Relational algebra provides a theoretical foundation for how modern database management systems optimize and execute queries. Its main concepts are based on set theory and first order logic, which can be challenging for students to learn due to their abstract nature. This paper presents Bags, a new type of visual programming environment (inspired by Snap!) for the teaching of relational operations and data analysis. Students formulate algebraic queries by snapping together graphical blocks that represent data sets and relational operators, resulting in an interactive visualization of the underlying concepts. The outcomes of this work will not only enhance university-level database courses, but also provide an engaging computational thinking resource for K-12 teachers in content areas outside of science and engineering.	Learning relational algebra by snapping blocks	NA:NA:NA	2014
Richard Brown	NA	Session details: Special Session	NA	2014
Richard A. Brown:Elizabeth Shoop:Joel C. Adams	The ACM-IEEE CS2013 curricular recommendations include a dramatic growth in parallel and distributed computing (PDC) topics, in response to the necessary industry shift toward multicore computing, and to emerging technologies such as cloud computing. How can your institution integrate those recommendations into your undergraduate CS curriculum? In this special session, leaders in PDC education will succinctly present their curricular strategies in relation to CS2013 recommendations, while attendees carry out a workshop-style activity to identify opportunities and assemble resources for blending more PDC content into their own local CS curricula.	Bringing CS2013 recommendations for parallel and distributed computing into your CS curriculum	NA:NA:NA	2014
Andrew McGettrick	NA	Session details: Special session	NA	2014
Andrew McGettrick:Lillian N. Cassel:Melissa Dark:Elizabeth K. Hawthorne:John Impagliazzo	This session reports on a workshop convened by the ACM Education Board with funding by the US National Science Foundation and invites discussion from the community on the workshop findings. The topic, curricular directions for cybersecurity, is one that resonates in many departments considering how best to prepare graduates to face the challenges of security issues in employment and future research. The session will include presentation of the workshop context and conclusions, but will be open to participant discussion. This will be the first public presentation of the results of the workshop and the first opportunity for significant response.	Toward curricular guidelines for cybersecurity	NA:NA:NA:NA:NA	2014
Jane Prey	NA	Session details: Special session	NA	2014
Jan Cuny:Jeffrey Forbes:Harriet Taylor:Valerie Barr:Victor Piotrowski:Jane Prey:Paul Tymann	This session will provide information about the current status of Federal budget as it impacts NSF and the computing community. Representatives from both Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates will provide the most up-to-date information about available funding opportunities. It is anticipated that the session will include information about the below listed programs plus others. In addition, proposal and review processes as well as strategies for writing competitive proposals will be discussed.	Understanding NSF funding	NA:NA:NA:NA:NA:NA:NA	2014
Netiva Caftori	NA	Session details: Engaging students through artistic expression	NA	2014
Jason Freeman:Brian Magerko:Tom McKlin:Mike Reilly:Justin Permar:Cameron Summers:Eric Fruchter	In this paper, we describe a pilot study of EarSketch, a computational remixing approach to introductory computer science, in a formal academic computing course at the high school level. The EarSketch project provides an integrated curriculum, Python API, digital audio workstation (DAW), audio loop library, and social sharing site. The goal for EarSketch is to broaden participation in computing, particularly by traditionally underrepresented groups, through a thickly authentic learning environment that has personal and industry relevance in both computational and artistic domains. The pilot results show statistically significant gains in computing attitudes across multiple constructs, with particularly strong results for female and minority participants.	Engaging underrepresented groups in high school introductory computing through computational remixing with EarSketch	NA:NA:NA:NA:NA:NA:NA	2014
Shaundra B. Daily:Alison E. Leonard:Sophie J√∂rg:Sabarish Babu:Kara Gundersen	n this paper, we introduce an embodied pedagogical approach for learning computational concepts, utilizing computational practices, and developing computational perspectives. During a five-week pilot, a group of students spent after-school time learning the basic elements of dance and then using them to program three-dimensional characters that could perform. Throughout the pilot, we found students consistently standing up in front of their computers and using their bodies to think through the actuation of their characters. Preliminary results suggest that designing a virtual-physical dance performance is a motivating and engaging social context in which to introduce students, especially girls, to alternative applications in computing.	Dancing alice: exploring embodied pedagogical strategies for learning computational thinking	NA:NA:NA:NA:NA	2014
Ashley Robinson:Manuel A. P√©rez-Qui√±ones	The computing profession is lacking representation that mirrors the fabric of society in the United States. Most studies show a low percentage of participation for women and minority groups. In this paper, we present our experiences conducting a week-long Human-Computer Interaction (HCI) workshop with underrepresented middle school girls. Our description is focused on an activity where girls created a paper prototype for a chat application. We present qualitative results showing characteristics of the prototypes built, and discuss the participant responses to a few of the questions in an interview at the end of the week. Our results reveal that paper prototyping can be used as a motivator for a career path in computer science. In spite of the negative stereotypes that the underrepresented females had prior to the intervention, the HCI workshop revealed a user-centric component of computer science that gave participants a positive perception of the discipline.	Underrepresented middle school girls: on the path to computer science through paper prototyping	NA:NA	2014
Sam Rebelsky	NA	Session details: Research: concept inventories & neo-piagetian theory	NA	2014
Kevin C. Webb:Cynthia Taylor	Operating systems courses often present students with multiple approaches to solve a problem, often with differing trade-offs. While students are more than capable of memorizing the details of these competing approaches, they often struggle to recommend a specific approach and analyze its implications. In particular, we find that students exhibit difficultly in interpreting text-based scenario descriptions in a way that allows them to correctly choose between potential solutions when presented with a high-level, conceptual scenario. In this paper, we describe the development of a pre- and post-course concept inventory, which we utilize to explore students' misconceptions of operating systems and their associated trade-offs. We compare the results of our assessment with in-class peer instruction questions and exam questions to characterize the areas in which students most commonly struggle with operating systems material.	Developing a pre- and post-course concept inventory to gauge operating systems learning	NA:NA	2014
Kuba Karpierz:Steven A. Wolfman	In this paper, we triangulate evidence for five misconceptions concerning binary search trees and hash tables. In addition, we design and validate multiple-choice concept inventory questions to measure the prevalence of four of these misconceptions. We support our conclusions with quantitative analysis of grade data and closed-ended problems, and qualitative analysis of interview data and open-ended problems. Instructors and researchers can inexpensively measure the impact of pedagogical changes on these misconceptions by using these questions in a larger concept inventory.	Misconceptions and concept inventory questions for binary search trees and hash tables	NA:NA	2014
Claudia Szabo:Katrina Falkner	The development of a coherent curriculum, encapsulating appropriate topics, learning materials and assessment, is crucial for a successful educational experience. However, designing such a curriculum is a complicated task, with challenges in tracing the development of concepts across multiple courses and ensuring that assessment is at an appropriate level at specific points in the curricula. In this paper, we introduce a curriculum mapping framework based on Neo-Piagetian theory that assists lecturers in tracing concept development and assessment throughout their courses. This framework supports the identification of prerequisite concepts, where students are already assumed to be aware of specific topics, and assessment leaps, where students are assessed at a different conceptual level than they have been taught. We illustrate the application of our framework through a case study analysing the syllabus of a sequence of three first year programming courses.	Neo-piagetian theory as a guide to curriculum analysis	NA:NA	2014
Susan Reeder	NA	Session details: Active learning	NA	2014
Barry L. Kurtz:James B. Fenwick:Rahman Tashakkori:Ahmad Esmail:Stephen R. Tate	Closed labs have provided hands-on experience for students under supervised conditions. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." We have tested this approach using tablets as small as 7 inches; student laptops can also be used. Logical microlabs allow students to solve a conceptual problem in computer science that does not involve any programming. Solutions are entered graphically and submitted for evaluation. Code magnet microlabs allow students to construct a method to solve the same problem programmatically. The code is compiled and, if successful, evaluated by a sequence of unit tests. These are integrated into a Microlab Learning Cycle of exploration (the logical microlab), invention (the instructor guides the students toward an algorithm during lecture), and application (the code magnet microlab). This approach has been evaluated at three universities and proven to be popular with students and educationally effective. This work is supported, in part, by three National Science Foundation grants.	Active learning during lecture using tablets	NA:NA:NA:NA:NA	2014
Helen H. Hu:Tricia D. Shepherd	The computer science community has started to experiment with process oriented guided inquiry learning, or POGIL, a learning approach that focuses on concept and process skills development by having students work together in organized teams. By emphasizing the learning process and group discussions, instructors who implement POGIL activities and roles in their classrooms may better address the different needs of their CS 1 students. After explaining how POGIL activities differ from other group activities, this paper elaborates on the importance of incorporating the learning cycle when developing a POGIL activity, so as to encourage rich group discussions and teamwork. It then describes the role of the instructor in a POGIL activity, and how POGIL roles need to be adapted for programming activities. It presents the results of using six POGIL activities in three CS 1 sections at a comprehensive liberal arts college, where the pass rate for female students increased compared to historical female pass rates for that class. Students who were introduced to recursion through a POGIL activity appear to have learned the material as well and retained the material better than students who learned recursion through a more traditional group activity.	Teaching CS 1 with POGIL activities and roles	NA:NA	2014
Michele Van Dyne:Jeffrey Braun	: In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors.	Effectiveness of a computational thinking (CS0) course on student analytical skills	NA:NA	2014
Krish Narayanan	NA	Session details: Big data	NA	2014
Yasin N. Silva:Suzanne W. Dietrich:Jason M. Reed:Lisa M. Tsosie	An important recent technological development in computer science is the availability of highly distributed and scalable systems to process Big Data, i.e., datasets with high volume, velocity and variety. Given the extensive and effective use of systems incorporating Big Data in many application scenarios, these systems have become a key component in the broad landscape of database systems. This fact creates the need to integrate the study of Big Data Management Systems as part of the computing curricula. This paper presents well-structured guidelines to perform this integration by describing the important types of Big Data systems and demonstrating how each type of system can be integrated into the curriculum. A key contribution of this paper is the description of an array of course resources, e.g., virtual machines, sample projects, and in-class exercises, and how these resources support the learning outcomes and enable a hands-on experience with Big Data technologies.	Integrating big data into the computing curricula	NA:NA:NA:NA	2014
Paul Anderson:James Bowring:Ren√©e McCauley:George Pothering:Christopher Starr	We describe Data Science, a four-year undergraduate program in predictive analytics, machine learning, and data mining implemented at the College of Charleston, Charleston, South Carolina, USA. We present a ten-year status report detailing the program's origins, successes, and challenges. Our experience demonstrates that education and training for big data concepts are possible and practical at the undergraduate level. The development of this program parallels the growing demand for finding utility in data sets and streaming data. The curriculum is a seventy-seven credit-hour program that has been successfully implemented in a liberal arts and sciences institution by the faculties of computer science and mathematics.	An undergraduate degree in data science: curriculum and a decade of implementation experience	NA:NA:NA:NA:NA	2014
Philip Sheridan Buffum:Allison G. Martinez-Arocho:Megan Hardy Frankosky:Fernando J. Rodriguez:Eric N. Wiebe:Kristy Elizabeth Boyer	Spurred by evidence that students' future studies are highly influenced during middle school, recent efforts have seen a growing emphasis on introducing computer science to middle school learners. This paper reports on the in-progress development of a new middle school curricular module for Big Data, situated as part of a new CS Principles-based middle school curriculum. Big Data is of widespread societal importance and holds increasing implications for the computer science workforce. It also has appeal as a focus for middle school computer science because of its rich interplay with other important computer science principles. This paper examines three key aspects of a Big Data unit for middle school: its alignment with emerging curricular standards; the perspectives of middle school classroom teachers in mathematics, science, and language arts; and student feedback as explored during a middle school pilot study with a small subset of the planned curriculum. The results indicate that a Big Data unit holds great promise as part of a middle school computer science curriculum.	CS principles goes to middle school: learning how to teach "Big Data"	NA:NA:NA:NA:NA:NA	2014
Monica McGill	NA	Session details: Games	NA	2014
Robert Don Collier:Jalal Kawash	The challenges that instructors face attempting to motivate novice programming students are amplified when the students are not pursuing degrees or careers in computer science. For the programming module of our course for non-computer science majors we assigned a video game programming deliverable that we expected would engage students and enhance their experiences. After extensive analyses of the survey responses of 245 enrolled students we were surprised to learn that, although the majority believed the game programming experience enhanced their learning overall, another majority reported that the project itself was not enjoyable. Through qualitative analysis we have identified several key areas that seem to have detracted from the overall level of enjoyment, and in this paper we follow this investigation with discussion surrounding how these issues could be remedied in the future. These recommended strategies will bolster student enjoyment and motivation in future offerings and we believe this discussion will prove very useful to other instructors planning to employ game programming components.	Lessons learned and recommended strategies for game development components in a computer literacy course	NA:NA	2014
Veronica Catet√©:Kathleen Wassell:Tiffany Barnes	This design research paper examines the implementation and curriculum changes of an after school computer science program that promotes computational thinking to middle school students. The program, Students in Programming, Robotics, and Computer Science (SPARCS), can adapt to different presentation environments, such as independent after school sessions or a semester-long apprenticeship program. We trace one implementation of the program through the initial deployment, the development of infrastructure, and a reorganization of content to address student interests. We found that student attrition dropped and the average session enjoyment increased when our sessions integrated consumer technologies such as mobile applications, video games, and the Minecraft computer game. In this paper, we provide readers a framework for running computing outreach activities around similar consumer technologies.	Use and development of entertainment technologies in after school STEM program	NA:NA:NA	2014
Jiangjiang Liu:Cheng-Hsien Lin:Joshua Wilson:David Hemmenway:Ethan Hasson:Zebulun Barnett:Yingbo Xu	Game design is becoming increasingly popular among K-12 teachers and students. In this paper, we present our experience, findings, and lessons learned from conducting a one-week Stencyl Game Design Summer Computing Workshop for K-12 teachers. Our workshop focused on introducing fundamental computing concepts to K-12 teachers using Stencyl, a drag-and-drop game development environment. During the workshop, the teachers developed curriculum games for the subjects they will teach in the following semesters with the help of our workshop tutors. Our assessment results show that the average score of Stencyl knowledge in the pre-workshop survey was 1.26 out of 5, which was increased to 3.76 in the post-workshop survey and the average score of computing knowledge was improved by 61%.	Making games a "snap" with Stencyl: a summer computing workshop for K-12 teachers	NA:NA:NA:NA:NA:NA:NA	2014
Mehran Sahami	NA	Session details: Panel session	NA	2014
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:Elizabeth K. Hawthorne:Amruth Kumar:Richard LeBlanc:David Reed:Remzi Seker	For over 40 years, the ACM and IEEE-Computer Society have sponsored international curricular guidelines for undergraduate programs in computing. The rapid evolution and expansion of the computing field and the growing number of topics in computer science have made regular revision of curricular recommendations necessary. Thus, the Computing Curricula volumes are updated on an approximately 10-year cycle, with the aim of keeping curricula modern and relevant. The latest volume in the series, Computer Science Curricula 2013 (CS2013), is due for release in the Fall of 2013. This panel seeks to inform the SIGCSE community about the final version of the report, provide insight on interpreting the CS2013 guidelines, and give guidance regarding how the guidelines may be implemented at different institutions.	ACM/IEEE-CS computer science curricula 2013: implementing the final report	NA:NA:NA:NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Rebecca Brook Osborne:Irene Lee:Bradley Beth:Jeff Gray	NA	Diverse learners, diverse courses, diverse projects: learning from challenges in new directions	NA:NA:NA:NA:NA	2014
Joseph Hollingsworth	NA	Session details: Special session	NA	2014
Joseph E. Hollingsworth:Murali Sitaraman	SIGCSE has for a long time nourished an audience excited about teaching mathematical reasoning principles across the curriculum through the Math Thinking Birds-of-a-Feather session and panels on mathematical reasoning. While these forums are useful for discussing reasoning topics, they do not provide a consistent venue for sharing math-reasoning activities to be used in the classroom. Therefore, SIGCSE attendees interested in math thinking have routinely wished for a place for discussing engaging math reasoning examples and assignments. Providing such a forum is the purpose of this session. The exercises and assignments will help faculty find ways to incorporate mathematical reasoning in CS1, CS2, data structures and algorithms, discrete math, and software engineering courses.	Special session: engaging mathematical reasoning exercises	NA:NA	2014
Shaileen Pokress	NA	Session details: Focus on K-12: growing the profession and professional development	NA	2014
Orit Hazzan:Noa Ragonis	The conference theme - "Leveraging Computing to Change Education" - focuses on the influence of computing on the way we educate at all levels. In this paper we highlight the conference theme from the perspective of computer science (CS) teacher preparation and describe the Views program, launched at the Technion -- Israel Institute of Technology, two year ago. Views invites Technion graduates back to the Technion to study toward an additional bachelor's degree in the Department of Education in Science and Technology. The degree they earn includes a high school teaching certificate in one of eight tracks: math, physics, biology, chemistry, CS, environmental sciences, electrical engineering, and mechanical engineering. Views students receive full study scholarships and are not required to commit to work in the education system after graduation. In the paper, we (a) present the Views program; (b) analyze factors that motivate and demotivate CS graduates to enroll in the program; (c) describe the characteristics of students in the program and their contribution to the learning environments and (d) address hopes with respect to the expected future impact of the Views program on the education system in Israel in general and on CS education in particular.	STEM teaching as an additional profession for scientists and engineers: the case of computer science education	NA:NA	2014
Scott Bell:Tim Frey:Eugene Vasserman	We present our experiences and outcomes from a programming camp held for sixth through ninth grade students. The instructional team included five pre-service teachers who earned field experience credit for this work, and one in-service teacher. The pre-service teachers were art and music teachers-in-training, providing an opportunity for us to utilize their creative expertise in developing content for the camp. In turn, we helped the teachers explore ways they might incorporate today's user-friendly programming environments (in this case, Scratch) into their curriculum. During each of four week-long sessions, the pre-service teachers gradually took over more teaching responsibilities, modifying and then presenting lessons that incorporate their own music and art expertise into the programming activities. Student pre-camp and post-camp surveys show that self-efficacy towards programming, enjoyment of programming, and interest in continuing to program increased over the course of the week-long sessions. Meanwhile, the teachers-in-training discovered they are capable of incorporating their subject matter into Scratch-based classroom activities, and teaching this material in a classroom setting. This is an encouraging demonstration of a way to introduce programming to the K-12 teaching community without overloading in-service teachers or requiring additional course work for pre-service teachers.	Spreading the word: introducing pre-service teachers to programming in the K12 classroom	NA:NA:NA	2014
Rahman Mitchel Tashakkori:Robert Mitchell Parry:Adam Benoit:Rebecca A. Cooper:Jessica L. Jenkins:Nicholas T. Westveer	Our department received funding from the National Science Foundation to establish a three-year Research Experience for Teachers site in Data Analysis & Mining, Visualization, and Image Processing. The objective is to provide twelve in-service high school teachers and community college faculty to work with faculty mentors and their graduate and undergraduate assistants to conduct research in these fields. During this six-week summer program, participants gain skills that they can utilize to assist their students to solve interdisciplinary problems. In addition, participants design learning modules to teach STEM concepts in their courses. The goal of our program is for teachers to bring knowledge of computer science and its application to their classroom exposing their students to computer science. This paper will share some of the activities of this experience.	Research experience for teachers: data analysis & mining, visualization, and image processing	NA:NA:NA:NA:NA:NA	2014
Carl Alphonce	NA	Session details: Design: courses and curricula	NA	2014
Fredrik Heintz:Inger Erlander Klein	In 2013 Link√∂ping University started the first 5-year engineering program in Computer Science and Software Engineering in Sweden. The goals of the program are to provide a holistic perspective on modern large scale software development, to provide a deep and broad understanding of computer science and computational thinking, and encourage innovation and entrepreneurship. The student response has been very good with more than 600 applicants to the 30 slots, of which more than 130 had this program as their first choice among all programs in Sweden. In this paper we present the goals, the design principles, and the resulting program. The ACM/IEEE CS Curricula has been used to make sure that the program provides a solid foundation in Computer Science. Three pedagogical ideas that we have used are (1) project courses to integrate theory and practice as well as provide experience with the most common form of working in industry; (2) courses that cover multiple programming paradigms and languages as well as multiple software development methodologies so that the students are prepared to take on the continual changes we know will come; and (3) a special course in engineering professionalism with groups of students from the first three years together reflecting on topics related to being a professional engineer. The paper concludes with a discussion about some important aspects such as computational thinking and the relation to the ACM/IEEE CS Curricula.	The design of Sweden's first 5-year computer science and software engineering program	NA:NA	2014
Guangzhi Zheeng:Chi Zhang:Lei Li	Business intelligence (BI) and healthcare analytics are emerging technologies that provide analytical capability to help healthcare industry improve service quality, reduce cost, and manage risks. However, such component on analytical healthcare data processing is largely missed from current healthcare information technology (HIT) or health informatics (HI) curricula. This paper conducts a preliminary analysis on how healthcare business intelligence can be incorporated into a HIT program. A general framework and several exemplar implementation strategies are presented. They can be used to guide the development and improvement of HIT curriculum.	Bringing business intelligence to healthcare informatics curriculum: a preliminary investigation	NA:NA:NA	2014
Jason O. Hallstrom:Cathy Hochrine:Jacob Sorber:Murali Sitaraman	This paper summarizes our experiences integrating topics in the software development fundamentals (SDF), programming languages (PL), and software engineering (SE) knowledge areas of the ACM 2013 curriculum within a single course. It is novel in combining object-oriented programming and software development practices with fundamental analytical reasoning about software correctness. The aim is to integrate and cover the topics in an effective fashion. The course description in this paper represents an approach we have applied successfully for over 5 years. Students tend to consider this course to be one of the more challenging encountered in the first two years of study. Interestingly, the challenge appears to stem equally from mastering object-oriented programming and design pattern components of the course, as it does from learning to use specifications for analytical reasoning of component correctness.	An ACM 2013 exemplar course integrating fundamentals, languages, and software engineering	NA:NA:NA:NA	2014
Don Blaheta	NA	Session details: Collecting and analyzing student data I	NA	2014
Barbara Ericson:Mark Guzdial	We examine the current state of computing education in the United States, in order to be able to identify problems in diversity and performance. Data on computing education are difficult to come by, since computer science courses are not tracked in US public education systems. By using a large and nationwide quantitative data source, we can gain new insights into who is participating in computing education, where the greatest need is, and what factors explain the variance between states. We used data from the Advanced Placement Computer Science A (AP CS A) exam to get a detailed view of the demographics of who is taking the exam across the United States and in each state, and how they are performing on the exam. We use economic and census data to provide explanations for some of the AP CS data. We find that minority group involvement is low in AP CS A, but the variance between states in terms of exam-takers is driven by minority group involvement. We find that wealth in a state influences the number of students taking the AP CS A exam, but indirectly.	Measuring demographics and performance in computer science education at a nationwide scale using AP CS data	NA:NA	2014
Neil Christopher Charles Brown:Michael K√∂lling:Davin McCall:Ian Utting	Automatically observing and recording the programming behaviour of novices is an established computing education research technique. However, prior studies have been conducted at a single institution on a small or medium scale, without the possibility of data re-use. Now, the widespread availability of always-on Internet access allows for data collection at a much larger, global scale. In this paper we report on the Blackbox project, begun in June 2013. Blackbox is a perpetual data collection project that collects data from worldwide users of the BlueJ IDE -- a programming environment designed for novice programmers. Over one hundred thousand users have already opted-in to Blackbox. The collected data is anonymous and is available to other researchers for use in their own studies, thus benefitting the larger research community. In this paper, we describe the data available via Blackbox, show some examples of analyses that can be performed using the collected data, and discuss some of the analysis challenges that lie ahead.	Blackbox: a large scale repository of novice programmers' activity	NA:NA:NA:NA	2014
Kenny Heinonen:Kasper Hirvikoski:Matti Luukkainen:Arto Vihavainen	A large body of systems that gather data on students' programming process exists, and with the increase of massive open online courses in programming, the amount of gathered data is growing even at a higher rate. A common issue for data analysis is the lack of common tools for visualizing source code snapshots. We have created a browser-side snapshot analysis tool called CodeBrowser that provides a clean REST API that anyone can integrate their snapshot data into. In this article, we describe CodeBrowser and as an example, discuss how it has been used to seek differences between novice programmers that have passed (n=10) or failed (n=10) an introductory programming course.	Using CodeBrowser to seek differences between novice programmers	NA:NA:NA:NA	2014
Robert Lutz	NA	Session details: Tactile computing	NA	2014
Raghuraman Balasubramanian:Zachary York:Matthew Doran:Aritra Biswas:Timur Girgin:Karthikeyan Sankaralingam	This paper details the creation of a hands-on introduction course that reflects the dramatic growth and diversity in computer science. Our aim was to enable students to get an end-to-end perspective on computer system design by building one. We report on a two-year exercise in using the Arduino platform to build a series of hands-on projects. We have used these projects in two course instances, and have obtained detailed student feedback, which we analyze and present in this paper. The instructions, code and videos developed are available open-source.	Hands-on introduction to computer science at the freshman level	NA:NA:NA:NA:NA:NA	2014
Yasmin Kafai:Kristin Searle:Cr√Æstobal Martinez:Bryan Brayboy	There have been many efforts to increase access and participation of indigenous communities in computer science education using ethnocomputing. In this paper, we extend culturally responsive computing by using electronic textiles that leverage traditional crafting and sewing practices to help students learn about engineering and computing as they also engage with local indigenous knowledges. Electronic textiles include sewable microcontrollers that can be connected to sensors and actuators by stitching circuits with conductive thread. We present findings from a junior high Native Arts class and an academically-oriented summer camp in which Native American youth ages 12-15 years created individual and collective e-textile designs using the LilyPad Arduino. In our discussion we address how a culturally responsive open design approach to ethnocomputing with e-textile activities can provide a productive but also challenging context for design agency and cultural connections for American Indian youth, and how these findings can inform the design of a broader range of introductory computational activities for all.	Ethnocomputing with electronic textiles: culturally responsive open design to broaden participation in computing in American indian youth and communities	NA:NA:NA:NA	2014
Shaun K. Kane:Jeffrey P. Bigham	Introductory programming activities for students often include graphical user interfaces or other visual media that are inaccessible to students with visual impairments. Digital fabrication techniques such as 3D printing offer an opportunity for students to write programs that produce tactile objects, providing an accessible way of exploring program output. This paper describes the planning and execution of a four-day computer science education workshop in which blind and visually impaired students wrote Ruby programs to analyze data from Twitter regarding a fictional ecological crisis. Students then wrote code to produce accessible tactile visualizations of that data. This paper describes outcomes from our workshop and suggests future directions for integrating data analysis and 3D printing into programming instruction for blind students.	Tracking @stemxcomet: teaching programming to blind students via 3D printing, crisis management, and twitter	NA:NA	2014
Rajeev Agrawal	NA	Session details: Projects and capstone courses	NA	2014
Maria Vasilevskaya:David Broman:Kristian Sandahl	Larger project courses, such as capstone projects, are essential in a modern computing curriculum. Assessing such projects is, however, extremely challenging. There are various aspects and tradeoffs of assessments that can affect the quality of a project course. Individual assessments can give fair grading of individuals, but may loose focus of the project as a group activity. Extensive teacher involvement is necessary for objective assessment, but may affect the way students are working. Continuous feedback to students can enhance learning, but may be hard to combine with fair assessment. Most previous work is focusing on some specific assessment aspect, whereas we in this paper present an assessment model that consists of a collection of assessment activities, each covering different aspects. We have applied, developed, and improved these activities during a six-year period and evaluated their usefulness by performing a questionnaire-based survey.	An assessment model for large project courses	NA:NA:NA	2014
Christopher Brown:Robert Pastel:Marika Seigel:Charles Wallace:Linda Ott	This HCI course incorporated unit testing as a quality improvement initiative with an Experiential Learning Model. The focus of the research was on observation and conceptualization---students should be able to associate the benefits of usability and unit testing and apply them to more general situations. Based on our survey results and student interviews, the most difficult challenge incorporating unit testing in an experiential course was ensuring students overcome their negative bias to discover the benefits of functional testing. We recommend emphasizing the concrete benefits of unit tests and ensuring that all students fully participate in the testing experience.	Adding unit test experience to a usability centered project course	NA:NA:NA:NA:NA	2014
Aaron Bloomfield:Mark Sherriff:Kara Williams	We present the design and execution of a Service Learning Practicum (SLP) course sequence intended to be year-long capstone for computer science seniors. Students are teamed into groups of six, and develop software for local nonprofit organizations. In addition to the structure of the course, we describe the challenges faced (legal, organizational, etc.), student perceptions via survey results, and provide a number of suggestions for other institutions who are looking to create a similar course sequence. At the end of the cap- stone experience, the customers are provided with working software that meet their current needs.	A service learning practicum capstone	NA:NA:NA	2014
Richard Ladner	NA	Session details: Panel session	NA	2014
Richard E. Ladner:Jillian Hall:Samir Jain:CeAhna Lathon:Vincent Martin	A panel of college students with disabilities who are computing majors or have taken multiple computing courses will describe their experiences both in and out of the classroom. The goal of the panel is to provide the audience with an opportunity to hear first-hand how their educational needs were met as non-traditional computing students. In addition to the panelists' short presentations, the moderator will facilitate a dialog between the members of the audience and the panelists.	Panel of computing students with disabilities	NA:NA:NA:NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Jennifer Campbell:Rebecca Dovi:Cay Horstmann	In his keynote at SIGCSE 2007, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following six SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to trumpet. What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. While the initial PBJA sessions evolved from a need to understand and combat the enrollment crisis of eight years ago, we are now seeing an incredible resurgence in interest in our field, partially because --coders are hip and computer science is hot?. There are colleges where the numbers have exceeded historic highs, and some rightfully claim the crisis is over. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun for beginners. In the past, we either tried to gather educators who brought a wide variety of perspectives, who would focus on a particular issue, or who have instituted very creative and successful paths into the major. This year we have gathered three seasoned educators who have taken the leap and built online classes for introductory computing on three different platforms. What innovative ideas did they employ to support collaboration? Does the need to auto-grade mean students can no longer choose their own final projects, and how does that stifle PBJA? Do these auto-graded formative assessments feel like drill-and-kill? The hope with this panel is to explore how online offerings, in these crucial early years, extol (and perhaps suppress!) the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 7	NA:NA:NA:NA	2014
Scott Grissom	NA	Session details: Special session	NA	2014
Scott Grissom:Christopher Hundhausen:Phillip Conrad	This session will demonstrate best practices for introducing peer instruction and pedagogical code reviews into the computer science classroom. Presenters play the role of instructors on the first day of class. Audience members play the role of students as they collaborate on a variety of sample activities. By providing models of active learning in computing contexts, we seek to motivate instructors to adopt these pedagogies in their classrooms. Sufficient time will be reserved for questions and discussion.	Alternatives to lecture: experience peer instruction and pedagogical code reviews	NA:NA:NA	2014
David Levine	NA	Session details: CS2	NA	2014
Joel C. Adams	In today's multicore world, every CS student should learn about and gain experience with (at least) shared-memory parallelism. CS Curriculum 2013 acknowledges this by shifting parallel computing from elective status into the core. This paper argues that students should be introduced to parallelism early, that the CS2 (Data Structures) course is a natural place to do so, and reports our experience in doing this. The paper also argues that students should be taught to solve problems using parallel patterns, which are industry-standard best-practice strategies for parallel problem solving. To support such teaching, the paper presents patternlets -- minimalist, scalable, executable programs, each illustrating the behavior of a parallel pattern -- as a useful pedagogical tool for teaching parallel concepts. Several patternlets and their executions are given. The paper presents evidence that this injection of parallelism into CS2 has been successful.	Injecting parallel computing into CS2	NA	2014
Ivona Bezakova:James Heliotis:Sean Strout	We report on a study comparing an open-ended freshman-level CS2 project with a fully specified project of similar difficulty. We employed a randomized, controlled trial methodology. The students needed to use similar data structures and algorithms, presented during lectures, for both projects. The first half of the milestones were almost identical for both groups, but the open-ended project asked students to develop a player strategy for a specific board game, while in the other project the students executed the game by communicating with the player modules and verifying the moves against the rules of the game. In the final stages of the project while one group of students worked on honing their own strategy, the other students implemented a pre-specified tie breaking mechanism used when two player strategies tie in a match. At the end of the term, both groups had a friendly tournament: the player strategies faced each other for the ultimate winner while the other group's submissions were ranked by a team of judges based on the implementation's correctness and style. The tournament was just for fun - it did not contribute to the final grade. We hypothesized that the player group would enjoy the project more, would score higher, and would be better motivated and equipped to study computer science. Our study confirmed higher enjoyment and interest of the study group participants. We did not observe statistically significant differences among other measured quantities, or example grade distribution, of the respective groups.	On the efficacy of board game strategy development as a first-year CS project	NA:NA:NA	2014
Austin Cory Bart:Eli Tilevich:Simin Hall:Tony Allevato:Clifford A. Shaffer	While computing is becoming increasingly distributed, programming projects in introductory classes remain mostly divorced from the student's day-to-day computing experiences. These experiences entail interacting with real-time Web-based data from sources that include weather reports, news updates, and restaurant recommendations. The disconnect between student experiences and the content of their programming projects is known to drive some students away from computing. In addition, to adequately prepare students for the realities of modern software engineering, educators should introduce issues pertaining to distributed computing early in the curriculum. To address these problems, we have created RealTimeWeb - an architectural framework that makes real-time web data accessible for introductory programming projects. The framework effectively introduces important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. Preliminary results indicate that our approach can be effective in the context of a typical CS2 course, and that real-time data is relevant to students. RealTimeWeb libraries and associated resources are publicly available for use, with multiple language bindings to many real-time data sources. A rapid-prototyping tool available through the project's website facilitates the development of client libraries with easily accessible APIs for new real-time Web-based data sources.	Transforming introductory computer science projects via real-time web data	NA:NA:NA:NA:NA	2014
Ria Galanos	NA	Session details: Assessment and evaluation	NA	2014
Leo Porter:Daniel Zingaro	It is generally assumed that early success in CS1 is crucial for success on the exam and course as a whole. Particularities of students, densely-connected CS1 content, and recurring core topics each suggest that it is difficult to rebound from early misunderstandings. In this paper, we use Peer Instruction (PI) data, in addition to exam data, to explore relationships between in-class assessments and performance at the end of term and on the exam. We find that early course performance very quickly and strongly predicts performance on the final exam and that subsequent weeks provide no major increase in that predictive power. In contrast, early performance is similarly predictive of performance in the last weeks of PI questions, but subsequent weeks are increasingly more predictive. We speculate on what this means for the content of these assessments and potential future assessment practices.	Importance of early performance in CS1: two conflicting assessment stories	NA:NA	2014
Don Blaheta	Traditional processes for homework assignments are not always a good fit for the sorts of problems often seen in computer science classes. We present our experiences in implementing policies designed to encourage students to involve the instructor and fellow students in their learning process. By shifting to group assignments and permitting students a revision cycle, we improve student satisfaction and maintain or increase student outcomes while decreasing the instructor's grading load.	Reinventing homework as cooperative, formative assessment	NA	2014
Jennifer Campbell:Diane Horton:Michelle Craig:Paul Gries	This case study explores an inverted classroom offering of an introductory programming course (CS1). Students prepared for lecture by watching short lecture videos and completing required in-video quiz questions. During lecture, the students worked through exercises with the support of the instructor and teaching assistants. We describe the course implementation and its assessment, including pre- and post-course surveys. We also discuss lessons learned, modifications that we plan to make for the next offering, and recommendations for others teaching inverted courses.	Evaluating an inverted CS1	NA:NA:NA:NA	2014
Peter DePasquale	NA	Session details: Classroom management	NA	2014
Andy Sayler:Dirk Grunwald:John Black:Elizabeth White:Matthew Monaco	Higher education is facing a paradigm shift in the ownership and use of computer hardware. The school computer lab is no longer the primary place of student computer use. Instead, students increasingly expect to use their own hardware to complete their school assignments. This creates a challenge for computer science educators: we must now support a wide range of heterogeneous hardware without the benefits of tight control over its use. To address this ``Bring-Your-Own-Device'' (BYOD) challenge, we leverage virtualization and software packaging systems to gracefully deploy and support a standardized development environment for all core CS courses across a range of both school-owned and student-owned computing devices. We have deployed and evaluated our system for the previous two years at scale and continue to actively use and develop it. It has effectively helped us support multiple classes comprising hundreds of students with very limited IT staffing. We describe the design and management of our system, present our experience using our system, and discuss the lessons we've learned. We also provide data reflecting current student user experience with our system. Our system has proven very effective in addressing the student BYOD challenge in a manageable, cost-efficient, and easy-to-use manner.	Supporting CS education via virtualization and packages: tools for successfully accommodating "bring-your-own-device" at scale	NA:NA:NA:NA:NA	2014
Lecia J. Barker:Melissa O'Neill:Nida Kazim	Despite the best laid plans, counterproductive student behavior can interfere with faculty establishment of supportive classroom climates. This paper describes methods for framing the climate of the computer science classroom to minimize outspoken students' unwanted displays of intellectual prowess and engender co-learning behavior among students. Explicit framing of a supportive climate reduces student anxiety about their status among peers, leads them to expect to co-learn concepts, and reduces trepidations about speaking up in class. The framing is grounded by preemptively establishing expectations and addressing concerns through student discussion; asking students to go outside of their interaction style comfort zones for speaking in class; and explicitly describing teaching choices and classroom processes. The framing is reinforced by exposing wrong answers as useful rather than embarrassing, turn-taking techniques for equal student participation, and collaborative learning for assignments and in-class problem solving. Classroom-based retention techniques are important for retaining students who are less experienced with computer science and unsure how to interpret peers? public knowledge claims in relation to their own knowledge or faculty expectations.	Framing classroom climate for student learning and retention in computer science	NA:NA:NA	2014
Don Davis:Timothy Yuen:Matthew Berland	This paper discusses two case studies of students observed in an introductory computer science (CS1) course. Observations reinforce notions of the potential benefits of culturally and personally relevant instruction in the computer science (CS) classroom and call into question the stigmatization of 'nerd' culture within the literature of CS education. As this study is qualitative and exploratory in nature, it does not provide definitive, statistically generalizable findings -- however, it does unearth nuanced and potentially beneficial pathways of investigation for CS educators and researchers that many quantitative methods might miss. Specifically, observations highlight potential benefits of supporting students' perceptions of more diverse CS identities including broader understandings of the "CS nerd" identity.	Multiple case study of nerd identity in a CS1 class	NA:NA:NA	2014
Jill Pala	NA	Session details: Focus on K-12: middle school	NA	2014
Caitlin Hulsey:Toni B. Pence:Larry F. Hodges	In this paper we report on the design and results of a one-week, residential summer camp experience that introduced computing concepts to middle school girls in the context of an online, multiplayer, virtual world known as the Curiosity Grid. In contrast to programming environments designed specifically as teaching tools to introduce children to programming, virtual world programming exposes novice learners to a more representative computer science experience. Students write real code and get real syntax errors when their code is not correct. They also design objects in a three-dimensional world where knowledge of mathematical concepts such as 3-D global and local coordinate systems, and 3-D transformations are important to the creation of objects and behaviors. Programming artifacts from the camp and feedback from the camp participants provide a strong argument that middle school girls can handle the challenge of this approach and even be enthusiastic about it.	Camp CyberGirls: using a virtual world to introduce computing concepts to middle school girls	NA:NA:NA	2014
Elizabeth Schofield:Michael Erlinger:Zachary Dodds	This paper describes the MyCS curriculum, which aims to encourage middle-years students, i.e., grades 4-10, to engage not only as consumers of CS, but as composers of computational artifacts. MyCS draws from many successful online tools and curricula, including Exploring Computer Science (ECS) and Scratch. MyCS's 18-week curriculum balances a broad treatment of the modern role of the computer with deepening students' hands-on skills through computational problem-solving, both unplugged and via programming. This paper summarizes assessments from several MyCS professional-development workshops, with an emphasis on eliciting teachers' needs and goals for their classrooms. In addition, we discuss the project's future in the format of a teacher-mediated MOOC that will enable a larger group of teachers to engage their students in CS.	MyCS: CS for middle-years students and their teachers	NA:NA:NA	2014
Shuchi Grover:Roy Pea:Stephen Cooper	Past research extensively points to gross misperceptions of the discipline of Computer Science among students in middle and high school. As efforts to introduce computing education in K-12 gains traction in tandem with initiatives that address issues of interest and attitudes towards CS, misperceptions of computing as a discipline must also be addressed as early as middle school, which is known to be a key time for identity building. This paper shares the results of a curricular intervention that aims to show CS to students in a new light - in real world contexts and as a creative and problem-solving discipline; as something bigger and broader than the "computer-centric" view that students are known to harbor.	Remedying misperceptions of computer science among middle school students	NA:NA:NA	2014
Sarah Heckman	NA	Session details: Soft skills: industry perspectives	NA	2014
Mark E. Hoffman:Paul V. Anderson:Magnus Gustafsson	A recent study of new software developers at Microsoft reveals the significance and integration of communication skills in their daily tasks. While the literature offers a variety of approaches to promote the integration of communication skills into the Computer Science curriculum, a discrepancy remains between what students get and what they need. In this paper, we propose using workplace scenarios that integrate communication skills with technical content situated in and mediating workplace activity. Workplace scenarios are based on an analysis of the workplace as an activity system. Guidelines for implementing workplace scenarios are provided. A case study analyzes the integration of communication skills with technical content using workplace scenarios in a software development course.	Workplace scenarios to integrate communication skills and content: a case study	NA:NA:NA	2014
Marisa Exter	This paper reports on part of the findings of a mixed-methods study which explored the educational experiences of Computing Professionals who design and develop educational software. A particular focus is given on the gaps professionals perceive between what was covered in their formal (university) education and the skills and knowledge that have been most important to them in their professional roles. Discrepancies were found particularly in areas related to practical skills (such as testing, maintaining code over time, use of source code control and development tools), communication, critical thinking and problem solving, and strategies used to continue learning on-the-job. Participant suggestions for improving university programs focused largely on the use of large scale, complex, authentic projects of significant duration. The author recommends further consideration be given to explicitly teaching the type of self-learning skills and strategies used by experienced professionals.	Comparing educational experiences and on-the-job needs of educational software designers	NA	2014
Mark Zarb:Janet Hughes:John Richards	A set of industry-inspired pair programming guidelines have been derived from qualitative examinations of expert pairs in order to aid novice programmers with their intra-pair communication. This research describes the evaluation of these guidelines with a set of student pairs, and demonstrates how novice pairs who were exposed to the guidelines were more comfortable communicating within their pairs.	Evaluating industry-inspired pair programming communication guidelines with undergraduate students	NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
David Reed:Andrea Danyluk:Elizabeth K. Hawthorne:Mehran Sahami:Henry M. Walker	NA	Experiences mapping and revising curricula with CS2013	NA:NA:NA:NA:NA	2014
Erin Mindell	NA	Session details: Panel session	NA	2014
Erin Mindell:Karen Brennan:Gwendolyn Britton:Jennifer S. Kay:Jennifer Rosato	CS4HS (Computer Science for High School) is an initiative sponsored by Google to promote Computer Science and Computational Thinking in high school and middle school curricula. In the past, workshops were offered in a face-to-face format; however, this left many K-12 computer science teachers unable to attend a workshop in their geographical region. During the 2013 round of funding, Google funded the creation of 4 workshops to be delivered in an online format, open to teachers across the United States and beyond. The panelists will share their experiences with development and deployment of large scale workshops that aim to fill the gap in professional development for K-12 computer science teachers.	CS professional development MOOCs	NA:NA:NA:NA:NA	2014
Annemieke Craig	NA	Session details: Panel session	NA	2014
Annemieke Craig:Catherine Lang:Michail N. Giannakos:Carsten Kleiner:Judith Gal-Ezer	There is a growing awareness of the importance of including computing education in the curriculum of secondary schools in countries like the United States of America, the United Kingdom, New Zealand, and South Korea. Consequently, we have seen serious efforts to introduce computing education to the core curriculum and/or to improve it. Recent reports (such as Wilson et al. 2010; Hubwieser et al. 2011) reveal that computing education faces problems regarding its lack of exposure as well as a lack of motivators for students to follow this line of study. Although students use computers for many tasks both at home and at school, many of them never quite understand what computer science is and how it relates to algorithmic thinking and problem solving. This panel will bring together leaders in computing education from Australia, Germany, Greece, Israel and Norway to describe the state of computing education in each of their countries. Issues raised will include how high school computer education is conducted in that country, how teachers are skilled /accredited, the challenges that are being faced today and how these challenges are being addressed. Panellists will suggest lessons other countries may find of value from their way of doing things. An important issue is how to recruit female students in to computer education at high school level and how to encourage them to continue in the discipline to university. The problem is exacerbated because computer education is still not included as a compulsory subject in the regular curriculum of high schools in all of these countries	Looking outside: what can be learnt from computing education around the world?	NA:NA:NA:NA:NA	2014
Jian Zhang	NA	Session details: Peer instruction	NA	2014
Daniel Zingaro	Recent work in computing suggests that Peer Instruction (PI) is a valuable interactive learning pedagogy: it lowers fail rates, increases retention, and is enjoyed by students and instructors alike. While these findings are promising, they are somewhat incidental if our goal is to understand whether PI is "better" than lecture in terms of student outcomes. Only one recent study in computing has made such a comparison, finding that PI students outperform traditionally-taught students on a CS0 final exam. That work was conducted in a CS0, where the same instructor taught both courses, and where the only outcome measure was final exam grade. Here, I offer a study that complements their work in two ways. First, I argue for and measure self-efficacy as a valued outcome, in addition to that of final exam grade. Second, I offer an inter-instructor CS1 study, whose biases differ from those of intra-instructor studies. I find evidence that PI significantly increases self-efficacy and suggestively increases exam scores compared to a traditional lecture-based CS1 class. I note validity concerns of such an in-situ study and offer a synthesis of this work with the extant PI literature.	Peer instruction contributes to self-efficacy in CS1	NA	2014
Christine Alvarado:Cynthia Bailey Lee:Gary Gillespie	New CS1 curricula and pedagogies have resulted in many positive outcomes over the last several years including lower fail rates and increased long-term retention. Given these positive outcomes, the question becomes how much do the traditional factors of prior experience and confidence still play a role in students' performance in and attitudes about these courses' Furthermore, given that increasingly recommended collaborative pedagogies (e.g. pair programming) force students to interact with their peers for a large percentage of their work in the class, how much does the confidence of their peers affect their own attitudes and performance? This paper presents a study investigating these questions. We find that prior experience and confidence still predict success, but only for some students. We also find that student confidence levels have little to no impact on the attitudes and performance of their peers.	New CS1 pedagogies and curriculum, the same success factors?	NA:NA:NA	2014
Zhen Li:Eileen Kraemer	We conducted an observational case study of pair programmers and solo programmers in a challenging, time-limited programming exam in a split level course at the University of Georgia during the spring semester of 2013. Although we observed no significant difference in performance on the exam, we found that pair programming promoted the early application of critical thinking in the process of solving a challenging programming task. Specifically, the pair programmers were found to conduct more critical thinking and to ask important questions in the program design phase while solo programmers postponed the same required thinking activity and associated questions until the testing and debugging phase. We attribute the solo programmer's failure to delve into the difficult questions to the phenomenon of "bounded rationality" and propose that the social effects of pair programming serve to mitigate this phenomenon with the result that the pair programmers' behaviors better align with good software engineering practices and promote the acquisition of expertise.	Social effects of pair programming mitigate impact of bounded rationality	NA:NA	2014
Cam MacDonell	NA	Session details: Software engineering: courses	NA	2014
Andres Neyem:Jose I. Benedetto:Andres F. Chacon	Software Engineering is an important area within industry and academia. Empirical software engineering has grown in importance in the software engineering research and education community. This means that it has become very relevant to include empirical studies or practices into computer science and software engineering curricula. This paper shows the results of applying an empirical approach to teaching software engineering through real-life projects. The computer science capstone experience is designed to bridge the gap from university expectations to those of industry.	Improving software engineering education through an empirical approach: lessons learned from capstone teaching experiences	NA:NA:NA	2014
Therese Mary Smith:Robert McCartney:Swapna S. Gokhale:Lisa C. Kaczmarczyk	Aspiring software engineers must be able to comprehend and evolve legacy code, which is challenging because the code may be poorly documented, ill structured, and lacking in human support. These challenges of understanding and evolving existing code can be illustrated in academic settings by leveraging the rich and varied volume of Open Source Software (OSS) code. To teach SE with OSS, however, it is necessary to select uniform projects of appropriate size and complexity. This paper reports on our search for suitable OSS projects to teach an introductory SE course with a focus on maintenance and evolution. The search turned out to be quite labor intensive and cumbersome, contrary to our expectations that it would be quick and simple. The chosen projects successfully demonstrated the maintenance challenges, highlighting the promise of using OSS. The burden of selecting projects, however, may impede widespread integration of OSS into SE and other computing courses.	Selecting open source software projects to teach software engineering	NA:NA:NA:NA	2014
Claudia Szabo	Academia and industry recognize the effectiveness of teaching Software Engineering through group-based project work supported by lectures discussing software engineering theory. However, while undertaking such project work, only a very small number of students in the team are exposed to team leadership and project management. This is because teams usually struggle with organization and timely task completion, and there is usually no time left to rotate leadership roles. To alleviate this problem, several gaming approaches have been proposed. In this paper, we analyze GameDevTycoon, the most recent addition to such games. We include a gameplay and reflection component in our group-based project course and perform a quantitative analysis of a team management and leadership aspects that the students encountered during their gameplay. We further compare and evaluate GameDevTycoon against five other software engineering-focused games. Our analysis shows the advantages and disadvantages of using GameDevTycoon for teaching project management and highlight further directions towards better inclusion in the curriculum.	Evaluating GameDevTycoon for teaching software engineering	NA	2014
John Dooley	NA	Session details: Web-based instruction	NA	2014
Radu P. Mihail:Beth Rubin:Judy Goldsmith	Asynchronous online discussions are considered the cornerstone of online education. Many instructors of face-to-face courses are "web-enabling" their classes to improve learning through critical inquiry using online discussions. In this exploratory study, we collected and analyzed online discussion data from two dissimilar computer science courses (one technical Graphics for Gaming (G4G) course and a writing intensive Science Fiction and Ethics (SF&E) course). Our findings suggest that, overall, making more posts, posting more questions and engaging in Devil's Advocacy have positive effects on learning, while making more informational posts, explaining to others and making longer posts do not. In the SF&E course, all students perceive that posting helped their learning, while in the G4G course students do not, but posting behavior differentiates those who perform well from those who perform poorly.	Online discussions: improving education in CS?	NA:NA:NA	2014
Luca de Alfaro:Michael Shavlovsky	CrowdGrader is a system that lets students submit and collaboratively review and grade homework. We describe the techniques and ideas used in CrowdGrader, and report on the experience of using CrowdGrader in disciplines ranging from Computer Science to Economics, Writing, and Technology. In CrowdGrader, students receive an overall crowd-grade that reflects both the quality of their homework, and the quality of their work as reviewers. This creates an incentive for students to provide accurate grades and helpful reviews of other students' work. Instructors can use the crowd-grades as final grades, or fine-tune the grades according to their wishes. Our results on seven classes show that students actively participate in the grading and write reviews that are generally helpful to the submissions' authors. The results also show that grades computed by CrowdGrader are sufficiently precise to be used as the homework component of class grades. Students report that the main benefits in using CrowdGrader are the quality of the reviews they receive, and the ability to learn from reviewing their peers' work. Instructors can leverage peer learning in their classes, and easily handle homework evaluation in large classes.	CrowdGrader: a tool for crowdsourcing the evaluation of homework assignments	NA:NA	2014
John DeNero:Stephen Martinis	We describe an effort to improve the composition quality of student programs: the property that a program can be understood effectively by another person. As a semester-long component of UC Berkeley's first course for majors, CS 61A, we gave students composition guidelines, scores, and qualitative feedback-all generated manually by a course staff of 10 graders for over 700 students. To facilitate this effort, we created a new online tool that allows instructors to provide feedback efficiently at scale. Our system differs from recently developed alternatives in that it is a branch of an industrial tool originally developed for internal code reviews at Google and used extensively by the open-source community. We found that many of the features designed for industrial applications are well-suited for instructional use as well. We extended the system with permissions controls and comment memories tailored for giving educational feedback. Using this tool improved the consistency of the feedback we gave to students, the efficiency of generating that feedback, and our ability to communicate that feedback to students. Emphasizing composition throughout the course improved the composition of our students' code. The quality of student programs improved by a statistically significant margin (p<0.01) over those from a previous semester, measured by a blind comparison of student submissions.	Teaching composition quality at scale: human judgment in the age of autograders	NA:NA	2014
Alvaro Monge	NA	Session details: Recruitment and retention of underrepresented groups	NA	2014
An-I Andy Wang:Gary Tyson:David Whalley:Robert van Engelen:Zhenghao Zhang	Computer science Ph.D. training provides numerous opportunities to prepare doctoral graduates to write research grant proposals. However, writing scholarship grant proposals is a very different process, and a newcomer might go through many attempts before obtaining their first awarded grant. This paper documents our four proposal submissions prior to acquiring our first NSF S-STEM grant for the Department of Computer Science at Florida State University. This paper also highlights major issues to consider when writing such proposals. We hope that future newcomers will be able to avoid some of the pitfalls we encountered in obtaining scholarship grants of a similar nature.	A journey toward obtaining our first NSF S-STEM (scholarship) grant	NA:NA:NA:NA:NA	2014
Tia Newhall:Lisa Meeden:Andrew Danner:Ameet Soni:Frances Ruiz:Richard Wicentowski	In line with institutions across the United States, the Computer Science Department at Swarthmore College has faced the challenge of maintaining a demographic composition of students that matches the student body as a whole. To combat this trend, our department has made a concerted effort to revamp our introductory course sequence to both attract and retain more women and minority students. The focus of this paper is the changes instituted in our Introduction to Computer Science course (i.e., CS1) intended for both majors and non-majors. In addition to changing the content of the course, we introduced a new student mentoring program that is managed by a full-time coordinator and consists of undergraduate students who have recently completed the course. This paper describes these efforts in detail, including the extension of these changes to our CS2 course and the associated costs required to maintain these efforts. We measure the impact of these changes by tracking student enrollment and performance over 13 academic years. We show that, unlike national trends, enrollment from underrepresented groups has increased dramatically over this time period. Additionally, we show that the student mentoring program has increased both performance and retention of students, particularly from underrepresented groups, at statistically significant levels.	A support program for introductory CS courses that improves student performance and retains students from underrepresented groups	NA:NA:NA:NA:NA:NA	2014
Barbara Ericson:Shelly Engelman:Tom McKlin:Ja'Quan Taylor	This paper describes Project Rise Up 4 CS, an attempt to increase the number of Black students in Georgia that pass the Advanced Placement (AP) Computer Science (CS) A exam. In 2012 Black students had the lowest pass rates on the AP CS A exam both in Georgia and nationally. Project Rise Up 4 CS provided Black students with role models, hands-on learning, competitions, a financial incentive, and webinars on AP CS A content. The first cohort started in January of 2013 and finished in May 2013. Of the 27 students who enrolled in the first cohort, 14 met all of the completion requirements, and 9 (69%) of the 13 who took the exam passed. For comparison, in 2012 only 22 (16%) of 137 Black students passed the exam in Georgia. In 2013, 28 (22%) of 129 Black students passed the exam in Georgia. This was the highest number of Black students to pass the AP CS A exam ever in Georgia and a 27% increase from 2012. In addition, students who met the completion requirements for Project Rise Up 4 CS exhibited statistically significant changes in attitudes towards computing and also demonstrated significant learning gains. This paper discusses the motivation for the project, provides project details, presents the evaluation results, and future plans.	Project rise up 4 CS: increasing the number of black students who pass advanced placement CS A	NA:NA:NA:NA	2014
Eric Aaron	NA	Session details: Interdisciplinary courses and curricula	NA	2014
Lori Carter	The benefits of interdisciplinary computing classes have been widely discussed. For the computing students, they provide a context in which to apply their skills, and appear to aid in recruitment and retention. For non-computing students, they provide additional skills to enhance their own crafts. For both, interdisciplinary programs open up new career possibilities and hone soft skills. In consideration of these and other benefits, the Point Loma Nazarene University Mathematical, Information, and Computer Sciences department have teamed up with the Biology, Chemistry, and Physics departments to offer several opportunities for interdisciplinary experiences to their students. In addition to the benefits, however, these programs produce significant challenges. This paper reviews the benefits of interdisciplinarity and discusses three different models of interdisciplinary experiences used at PLNU. It reports on the challenges that arose in each, and ways these difficulties were resolved. Finally, it discusses the hurdle of recruiting for such courses.	Interdisciplinary computing classes: worth the effort	NA	2014
Bill Manaris:Ren√©e McCauley:Marian Mazzone:William Bares	In this paper, we describe Computing in the Arts (CITA), an innovative interdisciplinary major, which combines computer science with artistic theory and practice. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. CITA is relatively easy to implement across a variety of higher education institutions, because it repurposes existing courses and resources in computer science and the arts. At our institution, this involves three tracks (music, visual art, and theatre). CITA incorporates four synthesis courses, one per academic year, which help students interweave the two distinct curricular experiences into a cohesive whole in preparation for their capstone project. CITA has been fully implemented at the authors' institution. In the three years of its existence, it has increased participation in computer science by 23% mainly from an underserved population (students interested in the arts). Approximately 40% of these students are women. While these students are not necessarily strong in mathematics, they tend to be strong in design and creativity, thus enriching the pool of computing professionals with people able to envision new technologies and surprising innovations. Such people are fully versed in computer science so they can easily collaborate with more traditional computing professionals such as software engineers and scientific programmers. We discuss our successes, and provide pointers for others to establish similar degree programs, including potential challenges and lessons learned.	Computing in the arts: a model curriculum	NA:NA:NA:NA	2014
Debra S. Goldberg:Elizabeth K. White	Computer science is increasingly becoming interdisciplinary, with applications not only in scientific disciplines, but also in the arts, humanities, and social sciences. Training computer scientists to work in diverse application disciplines is imperative for modern departments. We have had success using interdisciplinary groups for this purpose in a computational biology class, Algorithms for Molecular Biology. In this class, carefully-balanced interdisciplinary groups learn to take advantage of each other's abilities, and to communicate effectively with students with a much different background. From this diversity, we get much more (e pluribus, plurima) than would be possible if we tried to train all students to have a more homogeneous blend of multiple disciplinary knowledge. Within a single semester, students go from virtually no understanding of one discipline to completing research projects on a relevant problem that they have defined themselves.	E pluribus, plurima: the synergy of interdisciplinary class groups	NA:NA	2014
Daniel D. Garcia	NA	Session details: Panel session	NA	2014
Daniel D. Garcia:Baker Franke:Stephanie Hoeppner:Josh Paley	"Seldom was any knowledge given to keep, but to impart; the grace of this rich jewel is lost in concealment." -- Bishop Hall At the SIGCSE Symposiums in 2007 and 2011, we presented panels in which seasoned teachers shared the teaching tips we wished we'd known before starting our careers. The difference from earlier "Teaching Tips" panels was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources. We clustered these tips into categories: Grading, Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), Classroom (organization, interactions, and incentives), Personal (fostering relationships), and Meta (advice spanning categories). The sessions were received quite well, and the audience contributed many of their own teaching tips throughout the presentations. This year, we're presenting a "High School edition", and have invited inspirational teachers from a broad variety of schools. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for the online collection.	Teaching tips we wish they'd told us before we started: high school edition	NA:NA:NA:NA	2014
Ruth Anderson	NA	Session details: Special session	NA	2014
Ruth E. Anderson:Michael D. Ernst:Robert Ord√≥√±ez:Paul Pham:Steven A. Wolfman	NA	Introductory programming meets the real world: using real problems and data in CS1	NA:NA:NA:NA:NA	2014
Helen H. Hu	NA	Session details: Panel session	NA	2014
Helen H. Hu:Matthew Lang:Clif Kussmaul:Chris Mayfield:Tammy Pirmann	NA	Guided inquiry learning in context: perspectives on POGIL in CS	NA:NA:NA:NA:NA	2014
Brian Dorn	NA	Session details: Research: predictors, creative thinking, co-linking courses	NA	2014
Christopher Watson:Frederick W.B. Li:Jamie L. Godwin	Research over the past fifty years into predictors of programming performance has yielded little improvement in the identification of at-risk students. This is possibly because research to date is based upon using static tests, which fail to reflect changes in a student's learning progress over time. In this paper, the effectiveness of 38 traditional predictors of programming performance are compared to 12 new data-driven predictors, that are based upon analyzing directly logged data, describing the programming behavior of students. Whilst few strong correlations were found between the traditional predictors and performance, an abundance of strong significant correlations based upon programming behavior were found. A model based upon two of these metrics (Watwin score and percentage of lab time spent resolving errors) could explain 56.3% of the variance in coursework results. The implication of this study is that a student's programming behavior is one of the strongest indicators of their performance, and future work should continue to explore such predictors in different teaching contexts.	No tests required: comparing traditional and dynamic predictors of programming success	NA:NA:NA	2014
L. D. Miller:Leen-Kiat Soh:Vlad Chiriacescu:Elizabeth Ingraham:Duane F. Shell:Melissa Patterson Hazley	Our research is based on an innovative approach that integrates computational thinking and creative thinking in CS1 to improve student learning performance. Referencing Epstein's Generativity Theory, we designed and deployed a suite of creative thinking exercises with linkages to concepts in computer science and computational thinking, with the premise that students can leverage their creative thinking skills to "unlock" their understanding of computational thinking. In this paper, we focus on our study on differential impacts of the exercises on different student populations. For all students there was a linear "dosage effect" where completion of each additional exercise increased retention of course content. The impacts on course grades, however, were more nuanced. CS majors had a consistent increase for each exercise, while non-majors benefited more from completing at least three exercises. It was also important for freshmen to complete all four exercises. We did find differences between women and men but cannot draw conclusions.	Integrating computational and creative thinking to improve learning and performance in CS1	NA:NA:NA:NA:NA:NA	2014
Yolanda Reimer:Michael Cassens	An on-going problem with many courses across the CS curriculum is finding time to incorporate programming activities that are necessary for other critical aspects of the course. For example, in UI design the practice and evaluation of good design principles typically depends on the creation of at-least a semi-functional software prototype. However, having to include software implementation in courses whose main focus lies elsewhere can distract from core concepts, and oftentimes there are pedagogical reasons to separate out implementation. By co-linking upper-division courses in our CS program, we attempted to solve this problem by leveraging concepts of software design and implementation across two courses. In this experience report, we describe how the co-linked courses were structured, what we encountered, what worked well and what still needs improvement. Other CS educators might capitalize on our successes, and learn from our mistakes, in similar set-ups within their own curriculums.	Perspectives on co-linking design and development courses in CS	NA:NA	2014
Daniela Marghitu	NA	Session details: Focus on K-12: informal education, curriculum, and robots	NA	2014
Betsy DiSalvo:Cecili Reid:Parisa Khanipour Roshan	In this study we found that search terms that would likely be used by parents to find out-of-school computer science (CS) learning opportunities for their children yielded remarkably unproductive results. This is important to the field of CS education because, to date, there is no empirical evidence that demonstrates how a lack of CS vocabulary is a barrier to accessing informal CS learning opportunities. This study focuses on the experience of parents who do not have the privilege of education and technical experience when searching for learning opportunities for their children. The findings presented will demonstrate that issues of access to CS education go beyond technical means, and include ability to conduct suitable searches and identify appropriate computational learning tools. Out-of-school learning is an important factor in who is motivated and prepared to study computer science in college. It is likely that without early access to informal CS learning, fewer students are motivated to explore CS in formal classrooms.	They can't find us: the search for informal CS education	NA:NA:NA	2014
Joanna Goode:Jane Margolis:Gail Chapman	In recent years, the computer science education community has shown strong commitment to broadening participation in computing in K-12 classrooms. Educational research highlights the critical role of professional development in supporting teachers to attract and effectively teach underrepresented students in computing. In this paper we present the Exploring Computer Science (ECS) professional development model and the research on which it is based. We also present findings about the impact of ECS professional development on teachers' practice. As computing education initiatives become increasingly concerned with scaling up from a regional to a nationwide presence, it is important to consider how the essential components of effective professional development can drive this reform.	Curriculum is not enough: the educational theory and research foundation of the exploring computer science professional development model	NA:NA:NA	2014
Jennifer S. Kay:Janet G. Moss:Shelly Engelman:Tom McKlin	Few question the need to offer excellent programs in computer science at the Bachelors and Graduate Levels. But computer science is not just for computer scientists! An understanding of key computer science concepts is essential to comprehending the underpinnings of what drives much of the culture and environment that students will encounter upon graduation. Unfortunately, in the United States most state, regional, and national K-12 standards do not include computer science among the core competencies required of all students. However, careful study reveals many opportunities to satisfy mandatory non-computer-science standards while simultaneously teaching important concepts in computer science. This paper begins with an overview of these standards and suggests that educational robotics could be incorporated into K-12 curricula to satisfy these standards. But even if robots truly are a magic panacea, most K-12 teachers have never used them. The remainder of this paper discusses a pair of 3 day workshops we offered in the summers of 2011 and 2012 which were designed to introduce K-12 teachers with no prior programming experience to LEGO robot programming. We discuss the content of the workshops, how teachers' skills and attitudes changed as a result of these workshops, and how teachers used the material they learned in their schools.	Sneaking in through the back door: introducing k-12 teachers to robot programming	NA:NA:NA:NA	2014
Valerie Henderson, Summet	NA	Session details: Focus on K-12: before middle school	NA	2014
Osvaldo L. Oliveira:Maria C. Nicoletti:Luis M. del Val Cura	Many studies have provided qualitative arguments for the premise that the ability to compute is fundamental and therefore should be treated at all levels of education. This work presents a quantitative indication of the validity of this premise for primary school students. In order to precisely define what ability a student should have to use a model of computation to compute, this work reports an experimental study that shows a significant correlation between the student's ability to compute and his/her academic performance in a primary school.	Quantitative correlation between ability to compute and student performance in a primary school	NA:NA:NA	2014
Hilary Dwyer:Charlotte Hill:Stacey Carpenter:Danielle Harlow:Diana Franklin	The desire to expose more students to computer science has led to the development of a plethora of educational activities and outreach programs to broaden participation in computer science. Despite extensive resources (time and money), they have made little impact on the diversity of students pursuing computer science. To realize large gains, computational thinking must be integrated into K-12 systems, starting with elementary school. In order to do so, existing resources need to be adapted for a school setting. To make a curriculum with lessons that build on each other over several years, and accountability for student learning, we need standards, an understanding of how students learn, and identification of what students know before exposure to the curriculum. In this paper, we present our detailed findings of what fourth graders know before encountering a computational thinking curriculum. Groups of students participated in activities modified from CS Unplugged in order to discover their knowledge (rather than provide instruction). We identify aspects of the activities students were able to complete successfully, and where they will need further instruction. We then explain how we used these results to modify our pilot curriculum.	Identifying elementary students' pre-instructional ability to develop algorithms and step-by-step instructions	NA:NA:NA:NA:NA	2014
Neil Smith:Clare Sutcliffe:Linda Sandvik	Code Club is a network of after-school programming clubs for primary (US: elementary) schoolchildren, run by technically-competent volunteers in conjunction with (generally technically-unskilled) teachers. The main motivation of Code Club is to inspire children with a sense of fun and achievement for programming and digital creativity. This paper reports on the first year of Code Club in 1000 UK schools. The results were extremely positive, but some children had difficulty understanding the concepts behind the projects.	Code club: bringing programming to UK primary schools through scratch	NA:NA:NA	2014
Elizabeth Hawthorne	NA	Session details: Security among the cloud	NA	2014
Justin Cappos:Richard Weiss	One of the central skills in computer security is reasoning about how programs fail. As a result, computer security necessarily involves thinking about the corner cases that arise when software executes. An unfortunate side effect of this is that computer security assignments typically necessitate deep understanding of a topic, such as how the stack is laid out in memory or how web applications interact with databases. This work presents a series of assignments that require very little background knowledge from students, yet provide them with the ability to reason about failures in programs. In this set of assignments, students implement two very simple programs in a high-level language (Python). Students first implement a reference monitor that tries to uphold a security property within a sandbox. For the second portion, the students are provided each others' reference monitors and then write attack code to try to bypass the reference monitors. By leveraging a Python-based sandbox, student code is isolated cleanly, which simplifies development and grading. These assignments have been used in about a dozen classes in a range of environments, including a research university, online classes, and a four year liberal arts school. Student and instructor feedback has been overwhelmingly positive. Furthermore, survey results demonstrate that after a 2-3 week module, 76% of the students who did not understand reference monitors and access control learned these key security concepts.	Teaching the security mindset with reference monitors	NA:NA	2014
Khaled Salah	Cloud computing has become an attractive paradigm for many organizations in government, industry as well as academia. In academia, the cloud can offer instructors and students (whether local or at a distance) on-demand, dedicated, isolated, unlimited, and easily configurable machines. Such an approach has clear advantages over access to machines in a classic lab setting. In this paper, we show how cloud services and infrastructure could be harnessed to facilitate practical experience and training for cybersecurity. We used the popular Amazon Web Services (AWS) cloud; however, the use cases and approaches laid out in this paper are also applicable to other cloud providers.	Harnessing the cloud for teaching cybersecurity	NA	2014
Yanyan Zhuang:Chris Matthews:Stephen Tredger:Steven Ness:Jesse Short-Gershman:Li Ji:Niko Rebenich:Andrew French:Josh Erickson:Kyliah Clarkson:Yvonne Coady:Rick McGeer	Distributed platforms are now a de facto standard in modern software and application development. Although the ACM/IEEE Curriculum 2013 introduces Parallel and Distributed Computing as a first class knowledge area for the first time, the right level of abstraction to teach these concepts is still an important question that needs to be explored. This work presents our findings in teaching cloud computing by exposing upper-level students to testbeds in use by the distributed systems research community. The possibility of giving students practical and relevant experience was explored in the context of new course assignment objectives. Furthermore, students were able to significantly contribute to a pilot class project with medium-scale computation based on satellite data. However, the software engineering challenges in these environments proved to be daunting. In particular, these challenges were exacerbated by a lack of debugging support relative to the environments students were more familiar with---requiring development practices that out-stripped typical course experiences. Our proposed set of experiments and project provide a basis for an evaluation of the trade-offs of teaching cloud and distributed systems on the wild side. We hope that these findings provide insight into some of the possibilities to consider when preparing the next generation of computer scientists to engage with software practices and paradigms that are already fundamental in today's highly distributed systems.	Taking a walk on the wild side: teaching cloud computing on distributed research testbeds	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Leisa D. Thompson	NA	Session details: Panel session	NA	2014
Leisa D. Thompson:Crystal Eney:Ruth Davis:Tiffany Grady	NA	Recruit and retain women in undergraduate computing: success stories using research-based practices	NA:NA:NA:NA	2014
Jan Cuny	NA	Session details: Panel session	NA	2014
Jan Cuny:Diane A. Baxter:Daniel D. Garcia:Jeff Gray:Ralph Morelli	Our grand challenge is to scale high-quality computer science curriculum and instruction to reach all high school students. CS10K -- an NSF and ACM-sponsored project -- is working to do just that by supporting curriculum development, computer education research and professional development through the Computing Education for the 21st Century (CE21) program at NSF. Professional Development (PD) is a key piece of the project, as we need to train 10,000 teachers to teach rigorous computing courses in 10,000 high schools by 2016 -- the school year that a new Advanced Placement Course will be rolled out. This panel will provide an overview of the PD landscape and then each panelist will discuss the unique aspects of their PD project for high school teachers.	CS principles professional development: only 9,500 to go!	NA:NA:NA:NA:NA	2014
Paul Medlock-Walton	NA	Session details: Panel session	NA	2014
Paul Medlock-Walton:Kyle J. Harms:Eileen T. Kraemer:Karen Brennan:Daniel Wendel	NA	Blocks-based programming languages: simplifying programming for different audiences with different goals	NA:NA:NA:NA:NA	2014
Richard Brown	NA	Session details: Panel session	NA	2014
Richard A. Brown:Joel C. Adams:Clayton Ferner:Elizabeth Shoop:Anthony Barry Wilkinson	The industry shift to emerging forms of parallel and distributed computing (PDC), including multi-core CPUs, cloud computing, and general-purpose use of GPUs, have naturally led to increased presence of PDC elements undergraduate Computer Science curriculum recommendations, such as the new and substantial "PD" knowledge area in the ACM/IEEE CS2013 recommendations. How can undergraduate students grasp the extensive and complex range of PDC principles and practices, and apply that knowledge in problem solving, while PDC technologies continue to evolve rapidly? Parallel design patterns occur at all computational levels, ranging from low-level concurrent execution patterns (such as message passing or thread pool patterns) to high-level software design patterns suitable for organizing entire systems or their components (such as model-view-control or pipe and filter patterns). The ubiquity of these patterns in all forms of parallel and distributed computation makes parallel patterns relevant and illuminating at all undergraduate levels, and knowledge of those patterns can guide effective problem solving for parallel programs. This panel presents four viewpoints representing various approaches for teaching parallel patterns to CS undergraduates at various academic levels, including short "patternlets" examples, patterns in domain applications and parallel problem solving, and two tools, Seeds and Paraguin, for teaching parallel design patterns to undergraduates.	Teaching parallel design patterns to undergraduates in computer science	NA:NA:NA:NA:NA	2014
Ariel Ortiz Ram√≠rez	NA	Session details: Operating systems and programming languages	NA	2014
Christoffer Dall:Jason Nieh	Learning about operating systems often involves modifying a large and complex code base. Grading student projects can be difficult and time consuming, yet students often do not learn from their programming errors and struggle to understand core operating system concepts. We present GradeBoard, a code review system designed to simplify grading for instructors and enable students to understand and learn from their errors. GradeBoard provides an easy-to-use Web interface that allows instructors to annotate student code submissions with grading comments and scores, and students to discuss the comments and scores with instructors. GradeBoard presents student code changes with syntax highlighting and lets users collapse or expand code sections to provide a desired level of context, making it easier to read and understand student programming project submissions. Comments and scores are easily identifiable by visual cues, improving interaction between instructors and students. We have deployed and used GradeBoard in a large operating systems course involving Linux kernel programming projects. GradeBoard provided robust, easy-to-use functionality for reviewing Linux kernel code changes, improved the instructional staff grading experience, and over 90% of students surveyed indicated that GradeBoard improved their understanding of the kernel programming projects better than other alternatives.	Teaching operating systems using code review	NA:NA	2014
Christopher Corsi:Robert Geist:Dennis Lingerfelt	Open source Linux has become increasingly popular as a vehicle for incorporating hands-on experience with a real system into both undergraduate and graduate operating systems courses. System virtualization tools, such as VMWare, Xen, VirtualBox, and KVM, allow students to freely experiment with kernel modifications without requiring dedicated hardware and without generating significant concern for the ill-effects of system crashes. Nevertheless, certain kernel projects that are highly desirable from an educational standpoint remain unavailable under standard approaches to virtualization. One such project that is known to carry substantial instructional value is the design and implementation of an SMP-safe driver for a high-performance graphics card. Standard virtualization tools export only a minimally-capable, SVGA graphics adapter, which is an inadequate architecture for such a project. This paper describes an extremely simple, kernel-independent, software tool for use by instructors of operating systems courses. The tool provides a virtual, high-performance graphics card that is suitable for Linux device driver design and implementation. The code for the virtual card, which is relatively short, is easily modified by instructors to present different interfaces each semester. The code for both the virtual card and a sample Linux 3.2.36 driver for it may be freely downloaded from http://people.cs.clemson.edu/~ccorsi/kyouko/.	A virtual graphics card for teaching device driver design	NA:NA:NA	2014
Timothy Fossum	This paper describes PLCC, a compiler-compiler tool to support courses in programming languages, compilers, and computational theory. This tool has proven to be useful for implementing interpreters, building compilers, and creating parsers for context-free languages. PLCC is a Perl program that takes an input file that specifies the tokens, syntax, and semantics of a language and that generates a complete set of Java files that implement the semantics of the language. PLCC stands for "Programming Language Compiler-Compiler". PLCC is not intended to be a production-quality tool. Rather, it supports understanding and implementing the essential elements of lexical analysis, parsing, and semantics without having to wrestle with the complexities of dealing with "industrial-strength" compiler-compiler tools. Students quickly learn how to write PLCC "grammar" files for small languages that have straightforward syntax and semantics and use PLCC to build Java-based parsers, interpreters, or compilers for these languages that run out-of-the-box. Input to PLCC is a text file with a token definition section that defines language tokens as simple regular expressions, a syntax section that specifies the grammar rules of an LL(1) language as simple Backus-Naur Form (BNF) productions, and a semantics section that defines the language semantics as Java methods. PLCC generates a set of Java source files that are entirely self-contained and that import only standard elements of 'java.util' in JDK5 and above. For testing purposes, PLCC generates a read-eval-print loop that (1) reads standard input, (2) scans, parses, and evaluates the input, and (3) prints the evaluation to standard output.	PLCC: a programming language compiler compiler	NA	2014
Briana Morrison	NA	Session details: Soft skills: academic perspectives	NA	2014
Orit Hazzan:Gadi Har-Shai	This paper continues a previous paper [1] in which we described students' gradual understanding of computer science (CS) and software engineering (SE) soft skills. Our study focused on a course we taught on soft skills in CS and SE, offered by the Department of Computer Science at the Technion -- Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip Technion CS graduates with such skills. In [1] we presented the nature of CS soft skills, described the course schedule, including the teaching principles applied in the course, and showed how, in the course of the course, students gradually constructed a mental perception of CS soft skills in a 4-stage process. In this paper, we refine the comprehension process into a 6-rung ladder, based on further data analysis and additional experience gained when teaching the course for a second time. We elaborate on the additional rungs and further illuminate the results of two evaluation surveys on the course that were distributed to the students (in addition to the formal course evaluation administrated by the Technion's Center for the Promotion of Teaching). One of our main conclusions is that the course provides students with the opportunity to express their desire to be more involved in the teaching process of the course and to discuss and analyze their own soft skills. In other words, students realize the importance and significance of learning soft skills by actually implementing these skills in the learning process. In the Summary part of the paper, we present several pedagogical conclusions that are based on this observation and that we intend to implement in the future when teaching this course.	Teaching and learning computer science soft skills using soft skills: the students' perspective	NA:NA	2014
Daniela Inclezan:Luis Pradanos	Promoting sustainability, critical thinking, and ethical awareness are goals that appear in the vision statements of the majority of universities in the United States nowadays. One way of achieving these goals is by increasing the ecological literacy (i.e., ecoliteracy) of our students. In order to be effective, ecoliteracy should be taught not only in environmental studies classes, but rather across the institutional curriculum. In this paper we present three activities designed to be used in the first week of class in an introductory Database Systems course. Our activities promote critical thinking, systemic thinking, ethical behavior, and an increased awareness of ecological problems -- building blocks that set up the stage for teaching ecoliteracy.	Promoting ecoliteracy in an introductory database systems course: activities for the first week	NA:NA	2014
Janet E. Burge:Gerald Gannod:Mike Carter:Alanna Howard:Brian Schultz:Mladen Vouk:David Wright:Paul Anderson	Communication skills, including reading, writing, speaking, and teaming, are among the most sought after by employers of recent Computer Science/Software Engineering (CS/SE) graduates. We have been conducting a project that has developed a general framework for program-level integration of communication into CS/SE education. Our framework has been developed through workshops and field evaluation of training materials (and other resources) by faculty from a wide variety of institutions under the guidance of experts in writing and communication across the curriculum. This paper discusses the current state of communication teaching in the CS/SE domain, and presents our framework and experiences for program-wide implementation of communication skills.	Developing CS/SE students' communication abilities through a program-wide framework	NA:NA:NA:NA:NA:NA:NA:NA	2014
Raghuram Ramanujan	NA	Session details: What we say, what they do	NA	2014
Joseph P. Sanford:Aaron Tietz:Saad Farooq:Samuel Guyer:R. Benjamin Shapiro	In this paper we present an initial study of how metaphors are used by university-level Computer Science instructors. The goal of this research is to gain a better understanding of the role that metaphors play in Computer Science education, to catalog the kinds of metaphors that are used, and to assess their effectiveness in supporting learning. We interviewed 10 educators in Computer Science about the metaphors they have used in the classroom, with a focus on introductory "CS1" programming courses. We analyze these interviews with an existing theory of metaphors, which provides a framework for describing their structure and features. The theory predicts that most metaphors have limitations, and eventually fall apart. Therefore, we also asked educators to assess how far they could push their metaphors with and to describe what happens at the breaking point. Our preliminary findings provide a foundation to inform and guide more in-depth analyses in the future.	Metaphors we teach by	NA:NA:NA:NA:NA	2014
Malcolm Corney:Sue Fitzgerald:Brian Hanks:Raymond Lister:Renee McCauley:Laurie Murphy	Recent studies have linked the ability of novice (CS1) programmers to read and explain code with their ability to write code. This study extends earlier work by asking CS2 students to explain object-oriented data structures problems that involve recursion. Results show a strong correlation between ability to explain code at an abstract level and performance on code writing and code reading test problems for these object-oriented data structures problems. The authors postulate that there is a common set of skills concerned with reasoning about programs that explains the correlation between writing code and explaining code. The authors suggest that an overly exclusive emphasis on code writing may be detrimental to learning to program. Non-code writing learning activities (e.g., reading and explaining code) are likely to improve student ability to reason about code and, by extension, improve student ability to write code. A judicious mix of code-writing and code-reading activities is recommended.	'explain in plain english' questions revisited: data structures problems	NA:NA:NA:NA:NA:NA	2014
Kevin Buffardi:Stephen H. Edwards	While Computer Science curricula teach students strategic software development processes, assessment is often product-instead of process-oriented. Test-Driven Development (TDD) has gained popularity in computing education, but evaluating students' adherence to TDD requires analyzing their development processes instead of only their final product. Consequently, we designed an adaptive feedback system for reinforcing incremental testing behaviors. In this paper, we compare the results of the system with different reinforcement schedules and with- or without- visually salient testing goals. We analyzed snapshots of students' programming projects gathered during development and interviewed students at the end of the academic term. From our findings, we identify potential for influencing student development behaviors and suggest future direction for designing adaptive reinforcement.	A formative study of influences on student testing behaviors	NA:NA	2014
Ellen Walker	NA	Session details: Extending frameworks	NA	2014
James R. Miller	Shader-based OpenGL is a powerful and exciting tool for individuals with data visualization needs, interests in gaming, a need to create and manipulate synthetic environments, and a variety of other high-performance tasks. It is well-known that shader-based OpenGL is difficult to learn for programmers with no prior graphics API experience -- some have even claimed it's impossible to teach to individuals without such prior exposure. In this paper, we report on our experiences developing an educational approach that we believe has contributed to the base of evidence that it is not only possible, but also desirable to do so. Our overriding goal has been to learn and exploit the extent to which mastering a complex graphics API like modern shader-based OpenGL can be enhanced by using a software design framework into which relevant concepts can be placed, thus facilitating more rapid assimilation and mastery of the concepts. We have been using this technique in our Introduction to Computer Graphics course in which we have two primary goals: teach shader-based OpenGL to students who have no prior experience using a graphics API, and present a framework to students that will scale up to medium and large scale applications, both in terms of code size as well as data size. We do not in any way suggest that our architecture is the 'best' for all advanced graphics applications, or even for teaching. Instead we simply claim that use of such a framework helps students master complex OpenGL concepts and develop nontrivial interactive 3D applications. Once students fully understand the basics, they should find it easy to migrate to other perhaps quite different architectures.	Using a software framework to enhance online teaching of shader-based OpenGL	NA	2014
James Cross:Dean Hendrix:Larry Barowski:David Umphress	In this paper, we describe our experiences using dynamic program visualizations in our Java-based CS1 and CS2 courses during the spring semester 2013. The visualizations were constructed by both faculty and students using the new viewer canvas in jGRASP. A public beta version was downloaded and installed in our computer labs and on student and faculty machines. Program visualizations were used in the classroom as well as in lab activities and programming projects. Since the viewers had already been evaluated in controlled experiments, our focus was on ease of use of the viewer canvas by the students and the utility of the program visualizations in helping students understand their programs. Direct observations in the lab and individual meetings with students to discuss their work indicated that students could indeed build dynamic visualizations that, in conjunction with the debugger, helped them understand and correct bugs in their programs much more effectively than using the debugger alone.	Dynamic program visualizations: an experience report	NA:NA:NA:NA	2014
Ivaylo Ilinkin	Mobile devices have become ubiquitous in our daily lives and are replacing the desktop for email, social networking, daily planner, and so on. A typical mobile device now integrates a wide range of accessories, such as camera, GPS receiver, accelerometer, and offers a touch-screen with gesture-based interaction. This makes mobile devices an exciting platform for software development and programming projects for mobile devices have great potential to provide engaging experiences for computer science majors. This paper describes a pedagogical tool for introducing Android in a traditional CS1 course. The goal is not to teach Android programming, but to create a framework that integrates seamlessly with the CS1 course structure and supports the introduction of the fundamental computer science concepts by creating an engaging learning environment. The framework enables the students to port their CS1 projects to an Android device with minimal effort.	Opportunities for android projects in a CS1 course	NA	2014
Nick Parlante	NA	Session details: Special session	NA	2014
Nick Parlante:Julie Zelenski:Josh Hug:John Nicholson:John DeNero:Antti Laaksonen:Arto Vihavainen:Frank McCown:Kevin Wayne	A great CS assignment is a delight to all, but the path to one can be most roundabout. Many CS students have had their characters built up on assignments that worked better as an idea than as an actual assignment. Assignments are hard to come up with, yet they are the key to student learning. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Ursula Wolz	NA	Session details: Panel session	NA	2014
Lillian (Boots) Cassel:Bonnie MacKellar:Joan Peckham:Carol Spradling:Han Reichgelt:Suzanne Westbrook:Ursula Wolz	NA	Interdisciplinary computing in many forms	NA:NA:NA:NA:NA:NA:NA	2014
Murali Sitaraman	NA	Session details: Special session	NA	2014
Murali Sitaraman:Bruce W. Weide	Program correctness is central to computing, with instructors striving to convey the importance of getting it right starting in CS1. Teaching this material carefully demands a uniform framework to specify, implement, and reason about software correctness. To make these ideas accessible to educators and students, the tutorial will use RESOLVE, an integrated specification and programming language with a toolset especially designed for building verified components. The tutorial will also discuss how to get students involved through hands-on activities with software construction and modular verification using a web-integrated environment that requires no software installation and that features a prototype 'push-button' verifying compiler. The proposers have taught the ideas contained here using engaging pedagogical methods in introductory and advanced CS courses to thousands of students and dozens of educators over the past 20 years, and this SIGCSE tutorial will leverage that experience.	Special session: "hands-on" tutorial: teaching software correctness with RESOLVE	NA:NA	2014
Wanda Dann	NA	Session details: Special session	NA	2014
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba	In this special session, attendees learn about techniques of teaching with team projects with Alice 3's new Save Type, Import Type, and Merge capabilities. Using this technique, students in introductory level programming courses can participate in team projects where students work as a team in various stages of design, development, and testing. As part of this process students may work independently to code one or more classes and then merge their work with that of other members of the team to create the final project.	Tutorial: team projects with Alice 3	NA:NA:NA:NA	2014
Martha Kosa	NA	Session details: Tools	NA	2014
Andr√©s Moreno:Erkki Sutinen:Mike Joy	A review of the practical uses of errors in education reveals three contexts where errors have been shown to help: teaching conceptual knowledge, changing students' attitudes and promoting learning skills. Conflictive animations form a novel approach to teaching programming that follows a long tradition on research and development on program animation tools. Conflictive animations link the benefits of errors with program animation tools and programming education. This approach involves presenting to the students conflictive animations that do not animate faithfully the programs or concepts taught. Conflictive animations are versatile enough to cover the fundamental building blocks of programs such as operators, expressions and statements. With conflictive animations a novel set of learning activities can be introduced to computer science classes. This conflictive dimension of activities augments an engagement taxonomy for animation tools at all levels. They are an example of activities that promote critical thinking. A particular implementation of conflictive animations has been empirically evaluated aiming for ecological validity rather than statistical significance. Results indicate that students using conflictive animations improve their metacognitive skills, and, when compared to a control group, their conceptual knowledge improves at a better rate.	Defining and evaluating conflictive animations for programming education: the case of jeliot ConAn	NA:NA:NA	2014
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene:Chaoli Wang	This paper describes a visualization tool RSAvisual that helps students learn and instructors teach the RSA cipher. This tool permits the user to visualize the steps of the RSA cipher, do encryption and decryption, learn simple factorization algorithms, and perform some elementary attacks. The demo mode of RSAvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in encryption, decryption, the Extended Euclidean algorithm, two simple factorization algorithms and three elementary attacks. The user may compute the output of each operation and check for correctness. This helps students learn the primitive operations and how they are used in the RSA cipher. The opportunity for self-study provides an instructor with greater flexibility in selecting a lecture pace for the detailed materials. Classroom evaluation was positive and very encouraging.	RSAvisual: a visualization tool for the RSA cipher	NA:NA:NA:NA:NA:NA	2014
Stephen H. Edwards:Daniel S. Tilden:Anthony Allevato	Pythy is a web-based programming environment for Python that eliminates software-related barriers to entry for novice programmers, such as installing an IDE or the Python runtime. Using only a web browser, within minutes students can begin writing code, watch it run, and access support materials and tutorials. While there are a number of web-based Python teaching tools, Pythy differs in several respects: it manages student assignment work, including deadlines, turn-in, and grading; it supports live, interactive code examples that instructors can write and students can explore; it provides auto-saving of student work in the cloud, with full, transparent version control; and it supports media-computation-style projects that manipulate images and sounds. Pythy provides a complete ecosystem for student learning, with a user interface that follows a more familiar web browsing model, rather than a developer-focused IDE interface. An evaluation compares student perceptions of Pythy in relation to JES, another student-friendly beginner Python environment. Classroom experiences indicate that Pythy does reduce the novice obstacles that it aims to address.	Pythy: improving the introductory python programming experience	NA:NA:NA	2014
Giti Javidi	NA	Session details: Focus on K-12: outreach and computational thinking	NA	2014
Antti-Jussi Lakanen:Ville Isom√∂tt√∂nen:Vesa Lappalainen	This paper presents lessons learned from five years of teaching a five-day game design and programming outreach course. The course was offered in summer time and targeted at middle and high school students. In total, 462 youngsters have taken part in 21 course instances. We describe our course concept, and discuss our successes and challenges. In particular, we focus on understanding our student populations by presenting descriptives and statistics of the events, and performing a statistical cluster analysis based on pre- and post-surveys. The cluster analysis was complemented with an analysis of the qualitative data, also originating from the surveys. Taken together, students could be classified into five groups with substantial differences: Enthusiasts, Newbies, Uncertains, Experimenters, and Unsatisfieds. Awareness of the clusters helps instructors of similar courses in developing course content, designing differentiated instruction, and planning follow-up or advanced courses.	Five years of game programming outreach: understanding student differences	NA:NA:NA	2014
Polina Charters:Michael J. Lee:Andrew J. Ko:Dastyni Loksa	Computer programming is now used broadly across many industries, with a diversity of working adults writing programs and interacting with code as part of their jobs. However, negative attitudes toward programming continue to deter many from studying computer science and pursuing careers in technology. To begin understanding adults' attitudes toward computer programming and how we can improve them, we used an educational video game to give 200 adult participants a concrete programming experience via the web, and then collected their self-reported opinions about programming. We found that adults initially had poor attitudes toward programming, believing that it was difficult, boring, and something they generally could not learn. After the online learning experience, their attitudes improved significantly, regardless of gender, population density, or level of education. These results demonstrate that adult attitudes toward programming, while initially negative, can be quickly changed with a brief, positive exposure to programming.	Challenging stereotypes and changing attitudes: the effect of a brief programming encounter on adults' attitudes toward programming	NA:NA:NA:NA	2014
Ashok Ram Basawapatna:Alexander Repenning:Kyu Han Koh:Mark Savignano	Future school science standards, such as the Next Generation Science Standards (NGSS), emphasize the integration of simulation and modeling activities in the classroom environment. The extremes of these activities have two vastly different implementations. On one hand, a teacher can have students experiment on a pre-made simulation associated with the material. On the other hand, students can use, for example, an end-user programming tool to create the simulation from scratch. This allows students to not only experiment on, but also, to model the real world phenomenon being studied- a key component of computational thinking. However, the greater amount of time necessary for student authoring of simulations can make such an approach infeasible in the classroom environment. This paper presents a spectrum of strategies for integrating simulations into class- rooms emphasizing our research at the Scalable Game Design Lab, University of Colorado Boulder as well as research from other entities. Starting at consuming simulations and adding more user interaction and authoring elements begins to provide a gentle slope from consumption towards simulation creation. Results indicate that many of these strategies are quite effective.	The consume - create spectrum: balancing convenience and computational thinking in stem learning	NA:NA:NA:NA	2014
Michelle Craig	NA	Session details: MOOCs	NA	2014
Joe Warren:Scott Rixner:John Greiner:Stephen Wong	Human/human interaction is a critical component of learning in many domains including introductory computer programming. For on-campus courses, lectures and problem sessions provide opportunities for students to interact with the instructor(s) and their peers. For online courses, opportunities for human/human interaction are more limited and usually correspond to activities like forum postings and online study groups. For online programming courses, the situation is potentially even worse since many of the computational tools designed to facilitate learning to program, such as unit testing, emphasize human/machine interaction and can be frustrating for beginning students. In this paper, the authors describe their experience in teaching an introductory programming MOOC. The guiding philosophy for this course is that learning to program should be a social experience that emphasizes human/human interaction, not human/machine interaction. Both the tools and assessment methods deployed in this course were chosen to help achieve this goal. In particular, this paper discusses a key tool that supports human/human interaction and several aspects of the course that contributed to its success.	Facilitating human interaction in an online programming course	NA:NA:NA:NA	2014
Terry Tang:Scott Rixner:Joe Warren	We describe a web-based programming environment designed to support teaching introductory programming for a massive open online class. We discuss some of the thought processes behind the design of this environment and then focus on two key innovations incorporated in our environment: a simplified GUI library for interactive Python programming and a browser-based tool for visualizing the execution of event-driven Python programs.	An environment for learning interactive programming	NA:NA:NA	2014
Pascal Van Hentenryck:Carleton Coffrin	The practice of discrete optimization involves modeling and solving complex combinatorial problems which have never been encountered before and for which no universal computational paradigm exists. Teaching such skills is challenging: Students must learn, not only the core technical skills, but also an ability to think creatively in order to select and adapt a paradigm to solve the problem at hand. This paper explores the question of whether the teaching of such creative skills translates to massive open online courses (MOOCs). It first describes a methodology for teaching discrete optimization that has been successful on campus over fifteen years. It then discusses how to adapt the campus format to a MOOC version. The success of the approach is evaluated through extensive data analytics enabled by the wealth of information produced by MOOCs.	Teaching creative problem solving in a MOOC	NA:NA	2014
Ruth Anderson	NA	Session details: Collecting and analyzing student data II	NA	2014
Chris Mayfield:Carole Ottenheimer:Bethann Canada:Brooke Bell	Apps4VA is a bold initiative to improve K-12 education by leveraging data on Virginia public school students' progress toward college and career readiness. The goal of the project is for students, professionals, and the general public to create "apps" that explore new ways of using K-12 education data to aid in better data-driven decisions and intervention strategies. In Spring 2013, sixty students in a database systems course participated in a semester-long project based on Apps4VA. This paper describes our teaching experiences, reports our lessons learned working with education data, and documents improvements in student outcomes. We also describe how instructors of database and data analytics courses may partner with local governments to adopt similar projects in their communities.	Introducing undergraduate database students to K-12 education research	NA:NA:NA:NA	2014
Douglas A. Kranch	This retrospective study of the performance of Computer Information Systems (CIS) students from between 1987 and 2010 found evidence that remedial math, reading, and writing courses can significantly increase student mean GPA, persistence, and completion in a CIS program. Remediation was most effective when verbal as well as mathematical deficiencies were addressed, and the performance of fully remediated students was indistinguishable as a group from students not requiring remediation.	Remediation and student success in CIS programs	NA	2014
Yuliya Cherenkova:Daniel Zingaro:Andrew Petersen	We examine student difficulties with CS1 concepts by analyzing a dataset containing 266,852 student responses to weekly code-writing problems. We find that conditionals and loops prove particularly problematic, even when considering 'second chance' data; and that, while we observe some evidence of improvement, certain straightforward applications of loops continue to be problematic at the end of the term. Our contribution is the corroboration of earlier findings, and a call to use online repositories of student submissions as rich sources of data on the student learning experience.	Identifying challenging CS1 concepts in a large problem dataset	NA:NA:NA	2014
Paul Tymann	NA	Session details: Special session	NA	2014
Paul T. Tymann:Frances P. Trees:Robert Glen Martin:Richard Kick:Lien Diaz	College Board has joined national efforts to improve the state of STEM education, in particular to address the challenge of increasing participation with a diverse population of computer scientists to meet the growing demands of the field of computing. The Advanced Placement (AP) Program is pleased to endeavor in enhancing AP Computer Science offerings by maintaining college level integrity and addressing issues of equity and access for students and teachers. In addition to the established AP Computer Science A course, the AP Program is engaged in the development of a forthcoming AP Computer Science Principles course. The additional option for high school students to study college level computing will provide more students with an opportunity to be introduced to important computer science concepts, gain a broader perspective of the field of study, and have access to a larger pathway into computing. This session will review information regarding the AP Computer Science A course and will discuss updated course content and exam development. It will then discuss the new Computer Science Principles course and plans for the development and launch of the course. The session will conclude with a Q&A session addressing questions regarding both courses. The session will be moderated by members of the Computer Science A and Principles Development Committees.	Advanced placement computer science: AP computer science a and AP computer science principles	NA:NA:NA:NA:NA	2014
Owen Astrachan	NA	Session details: Special session	NA	2014
Owen Astrachan:Amy Briggs:Gail Chapman:Joanna Goode:Rebecca Brook Osborne:Pat Yongpradit	NA	A public/private partnership for expanding computer science in schools	NA:NA:NA:NA:NA:NA	2014
Paul Anderson	NA	Session details: Panel session	NA	2014
Paul Anderson:James McGuffee:David Uminsky	The purpose of this panel is to discuss the creation and implementation of a data science degree program at the undergraduate level. The panel includes representatives from three different universities that each offers an undergraduate degree in Data Science as of fall 2013. We plan to share information on the logistics of how the data science programs came to exist at each of our schools as well as encourage a robust interactive discussion about the future of data science education at the undergraduate level.	Data science as an undergraduate degree	NA:NA:NA	2014
Chunming Gao:Noriyuki Iwane	Introducing computer programming to non-computer science students has been a challenge. Concerns deal mainly with various backgrounds and expectations of students, planning of course components, and the adoption of effective teaching methods. This poster presents a guided active learning model with blended approach to help teaching computer programming to non-majors. The model starts with an outline of course objectives and the selection of textbooks, online tools, classrooms, and lab rooms. Under the blended approach, the model consists of classroom modules, lab room face-to-face modules, and online modules. It considers active learning in: online modules before and after classes or labs, in-class module, and in-lab module. The model concludes with the course evaluation which feeds back to the start for future improvement. By using this blended active learning model for five years, it has proven to be effective in engaging students in the course study and flexible to integrate various educational techniques. In the future, we plan to further study its flexibility by integrating innovative e-text learning techniques into the model.	Application of a blended active learning model in teaching computer programming to non-majors (abstract only)	NA:NA	2014
Kuan-Yu Lin:Janet Mei-Chuen Lin:Hue-Ching Kao	This study investigated the difficulties encountered by novice Alice programmers. The researchers conducted one-on-one clinical interviews with 22 10th-grade students at a senior high school in Taipei, Taiwan. The participants were offered nine Alice programming tasks, each requiring the use of a different set of programming constructs, which included objects, primitive methods, expressions, built-in functions, variables, conditional execution, repetition control, arrays, user-defined methods, and parameter passing. Each participant was observed closely as s/he worked through the given tasks. Whenever an impasse occurred while a student was trying to solve a problem, the observer would intervene by asking a sequence of questions with increasing specificity, ranging from strategic prompts to hints to provides, in order to determine the cause of the impasse. This study summarized the common difficulties for each of the Alice programming constructs used by the participants in the programming tasks, and students' difficulties were categorized into four types: connection, location, usage, and math-and-other difficulties. Students having connection difficulties were unable to apply appropriate programming constructs to implement the actions required; location difficulties indicated students? inability to locating, in the Alice interface, the programming constructs they needed; usage difficulties referred in general to semantic errors in a student's programs; whereas math-and-other difficulties were caused mainly by students' inadequate math knowledge. It is hoped that the findings of this research will help Alice instructors to improve their students' performance by familiarizing themselves with the existence of the identified difficulties, and by addressing the missing conceptions or misconceptions underlying those difficulties.	An analysis of difficulties encountered by novice alice programmers (abstract only)	NA:NA:NA	2014
Ting-Yun Hou:Yu-Tzu Lin:Yu-Chih Lin:Cheng-Chih Wu	his study investigates the cognitive processes involved in program comprehension based on eye gaze tracking. Thirty-eight participants were asked to comprehend the test programs. Eye-movement analysis was employed to track the students' gaze paths while they traced the programs for comprehension. Cognitive processes were then obtained by sequential analysis of the gaze data to investigate the significant sequences of attention areas. The mined cognitive processes were compared between high and low comprehenders. The experiment results show that most subjects focused on major part of the program to comprehend the program. However, high comprehenders traced the program in a more logical manner. In addition, low comprehenders needed more manual calculation and also needed to trace back to prior statements for recalling required information, which might be because they had limited working memory capacities for computing and memorizing. Subjects performed better on cognitive processes involved in the working memory (short-term memory, mental arithmetic, and logical thinking) also performed better on program comprehension. Working memory seems to play an important role in program comprehension. These results can provide suggestions for researchers/instructors to develop adaptive instructional strategies for students of different characteristics.	Exploring cognitive processes in program comprehension based on eye-movement analysis (abstract only)	NA:NA:NA:NA	2014
Stephanie Rogers:Steven Tang:Dan Garcia	Coding style is important to teach to beginning programmers, so that bad habits don't become permanent. This is often done manually at the University level because automated Python static analyzers cannot accurately grade based on a given rubric. However, even manual analysis of coding style encounters problems, as we have seen quite a bit of inconsistency among our graders. We introduce ACCE--Automated Coding Composition Evaluator--a module that automates grading for the composition of programs. ACCE, given certain constraints, assesses the composition of a program through static analysis, feature extraction, supervised learning and clustering (unsupervised learning), automating the subjective process of grading based on style and identifying common mistakes. Further, we create visual representations of the clusters to allow readers and students understand where a submission falls, and the overall trends. We have applied this tool to CS61A--a CS1 level course at UC, Berkeley experiencing rapid growth in student enrollment--in an attempt to help expedite the involved process as well as reduce human grader inconsistencies.	ACCE: automatic coding composition evaluator (abstract only)	NA:NA:NA	2014
Cecily Heiner	In CS1, students have a limited set of programming skills and they often represent a wide range of experience levels; this combination can make group work especially challenging. I describe guidelines for selecting group work projects and problems, suggestions for forming groups and assigning roles, and four projects appropriate for group work in CS1.	Guidelines for group work in CS1 (abstract only)	NA	2014
Shearon Brown:Xiaohong Yuan	It has been a challenge to retain computer science students, especially underrepresented students such as woman and minority. This poster describes our experiences in implementing a mentoring program to improve computer science retention and graduate rates at North Carolina A&T State University (NCATSU). NCATSU is among the United States' Historically Black Colleges and Universities (HBCU) serving more than 10,000 students. The Department of Computer Science on the average enrolls 195 undergraduate students, among them approximately 90% are African American and 30% are African American woman. The Computer Science Department at NCATSU in an attempt to increase retention and graduate rates of minority and women students developed the High-Need Student Mentoring Program supported by the Department of Education Minority Science and Engineering Improvement Program (MSEIP). This poster describes the High-Need Student Mentoring Program (HNSMP). HNSMP is designed to provide special attention to undergraduate students who show signs of having academic difficulty. The goal of this Program is to increase retention by increasing the academic performance of these students. HNSMP's strategy is to assist these students before they reach the point of academic probation or suspension. We will describes data we collected, our findings and challenges we encountered in implementing this program, and our proposed strategies to overcome these challenges. Our experiences and the effective techniques found may be beneficial for other colleges and universities in retaining computer science students, especially African American students.	Techniques for retaining low performing students: high-need student mentoring program (abstract only)	NA:NA	2014
Wingyan Chung:Albert Chan:Daniel Plante:Ray Villalobos:Joseph Woodside	Intelligence and Security Informatics (ISI) is a cross-disciplinary field that connects advanced information technologies, systems, algorithms, and databases with international, national and homeland security related applications. Our NSF-funded project, titled Computing in Context, has a focus of developing new teaching modules and pedagogies for the ISI discipline at the undergraduate level. In this poster, we present five exemplar modules that we developed for the ISI discipline: database design for cybercrime investigation, securing private data on the Internet, data visualization for understanding privacy sentiment, security intelligence for healthcare mobility, and program design for digital forensics. Our materials are designed for inquiry-based learning and for active engagement of students through discussion, hands-on practices, and various exercises.	Intelligence and security informatics: developing curricular modules in context (abstract only)	NA:NA:NA:NA:NA	2014
Stephanie E. August:Michael A. Fraser:Miguel A. Vazquez	The Teaching Artificial Intelligence as a Laboratory Science (TAILS) project is designed to develop a new paradigm for teaching introductory artificial intelligence (AI) concepts by implementing an experimental approach modeled after the lab sciences. In the Basic and Informed Search module of TAILS students learn about various search algorithms by first observing how each algorithm searches a map, watching the construction of the corresponding search tree as the path planning proceeds. Once students understand the differences between algorithms, they proceed to exercises. Students are provided a version of the program with the search algorithm replaced by a comment that guides the students through the process of implementing each algorithm and testing it with the existing application. This enables the students to focus on the AI aspect of the coding without requiring them to also develop the user interface. This poster describes the search module and assessments and presents preliminary results.	Teaching artificial intelligence as a lab science: basic and informed search (abstract only)	NA:NA:NA	2014
Daniel A. Breakiron:Eric Fouh:Sally Hamouda:Clifford A. Shaffer	As the use of online interactive tutorials becomes more widespread, there will be more opportunities to use fine-grained interaction log data to deduce student behavior. Log data can help debug usability or pedagogical problems with the tutorials, or guide redesign to discourage pedagogically poor student behavior. OpenDSA is a collection of open source interactive materials for teaching data structures and algorithms. We present a case study analysis of the activity logs from use of OpenDSA tutorials by roughly 150 students over several weeks. We identified clusters of student use based on when they completed exercises, verified the reliability of estimated time requirements for exercises, provided evidence that a majority of students do not read the text, and found evidence that students complete additional exercises after obtaining credit. Furthermore, we determined that slideshow use was fairly high, but that skipping to the end of slideshows was common.	Analysis of interaction logs for online tutorials (abstract only)	NA:NA:NA:NA	2014
Elizabeth K. Hawthorne:Cara Tang:Jim Nichols:Cindy Tucker	Directed by the ACM Education Board, the ACM CCECC (Committee for Computing Education in Community Colleges) has produced curricular guidance for associate-degree IT programs consisting of core IT learning outcomes with associated assessment rubrics. The learning outcomes express core IT competencies which should be common to all IT-related associate-degree programs. The three-tiered assessment rubrics provide further clarity and meaningful evaluation metrics for each outcome, as well as facilitate integration into assessment-based curricula. The outcomes have been influenced by current and future needs of business and industry, certifications, related curricula, and government and standards bodies, along with the intent of being adaptable, not overly technology specific, and having reasonable staying power. These results are being made available during the poster session, in the exhibit hall at the committee booth, and online at www.capspace.org.	ACM associate-degree IT curricular guidance (abstract only)	NA:NA:NA:NA	2014
Jakita O. Thomas	Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that it solves the problem, and evaluating the solution based on some set of criteria. Supporting Computational Algorithmic Thinking (SCAT) is a research project that explores how African-American middle-school girls develop CAT capabilities over time in the context of game design. SCAT is also a free enrichment program designed to expose middle school girls to game design. Spanning three years, participants, also called SCAT Scholars, develop CAT capabilities as they design more and more complex games. This poster presents the Supporting Computational Algorithmic Thinking (SCAT) project, which is an on-going longitudinal between-subjects research project whose goals are: 1) to guide African-American middle school girls through the iterative game design cycle over three years resulting in a set of complex games around broad themes, and 2) to expose them to the broad range of opportunities that exist for them in all types of industries and areas if they develop their CAT capabilities.	Supporting computational algorithmic thinking (SCAT): development of a complex cognitive capability in african-american middle-school girls (abstract only)	NA	2014
Nadeem Abdul Hamid:Steven Benzel	A number of contextualized approaches to teaching introductory Computer Science (CS) courses have been developed in the past few years, catering to students with different interests and learning styles. For instance, entire courses have been developed around media computation or robots (real and virtual). There is however one context which, to our knowledge, has not been exploited in a systematic fashion - that of "big data," by which we mean massive, openly accessible online datasets from a wide variety of sources. We present progress on a code framework and methodology to facilitate the incorporation of large, online data sets into traditional CS1 and CS2 courses. The goal of our project is to develop a way to provide students a library that relieves them from low-level issues of reading and parsing raw data from web-based data sources and that interfaces with data structures and representations defined by students themselves. In addition, the library requires minimal syntactic overhead to use its functionality and allows students and instructors to focus on algorithmic exercises involving processing live and large data obtained from the Internet. At a minimum, the library should serve to create drop-in replacements for traditional programming exercises in introductory courses - raising the engagement level by having students deal with "real" data rather than artificial data provided through standard input.	Towards engaging big data for CS1/2 (abstract only)	NA:NA	2014
Susan H. Rodger:Daniel MacDonald:Elizabeth Onstwedder:Bella Onwumbiko:Edwin Ward	The Adventures in Alice Programming project at Duke University has created a variety of Alice curriculum materials for integrating computer science into other disciplines at the K-12 level, focusing on both computer science topics and animation topics. For example, one of our new animation tutorials shows how to attach multiple camera views to an object to move with the object through a virtual Alice world. Our newest curriculum materials focus on integrating computer science into middle school mathematics. Our math related tutorials guide users on programming math projects from scratch, and our math challenges are partially built programs for students to complete. We use topics that are attractive to middle school students. For example, we have created a wizard world math and programming challenge that is an eight-level game. Each level in the game is titled similarly to courses one might take in the school Hogwarts in the Harry Potter book series by J.K. Rowling. Students must add code related to either a math or computer science concept in order to complete a level and move to the next level. Since 2008, we have taught extensive multi-week Alice beginner workshops every summer to K-12 teachers, teaching over 200 teachers. Our new curriculum materials are mapped to both the CSTA and the Common Core Math standards, and are available for free at www.cs.duke.edu/csed/alice/aliceInSchools along with teacher lesson plans.	Integrating computer science and mathematics in middle school with alice (abstract only)	NA:NA:NA:NA:NA	2014
Chiung-Fang Chiu	Novice programmers usually fail to combine abstract concepts and knowledge into program design, even though they know the syntax and semantics of individual statement. Adult novice programmers with little computer background knowledge might face more difficulties than young ones do. Therefore, it's important to choose feasible teaching approach and proper programming language to teach adult novice programmers basic programming concepts. This study aims to investigate the use of problem-solving approach to teach Scratch programming for adult novice programmers. A total of 10 graduate students aged from 24 to 45 participated in this study. In additional to the lectures of Scratch programming concepts, students solved programming problems by the scaffoldings of worksheets, which is a problem-solving approach. The worksheets contained a sequence of questions which guide the principles of problem-solving approach -- problem analysis, solution design, coding, testing and debugging. Students were then asked to design and implement their projects by following this approach after learning fundamental programming concepts. The experiment lasted for one semester. The findings of the questionnaire survey and results of interviews with students revealed that most students had positive attitudes toward learning Scratch programming by the problem-solving approach. They considered this approach useful in enhancing their comprehension of the program design process and helping them to implement the programming project more effectively.	Use of problem-solving approach to teach scratch programming for adult novice programmers (abstract only)	NA	2014
Johanna Pirker:Christian G√ºtl	Motivational Active Learning (MAL) is an innovative pedagogical approach based on MIT's teaching format TEAL (Technology-Enabled Active Learning) combined with advanced motivational strategies based on gamification design aspects. The main idea of MAL is to enhance learning outcomes using motivational and social learning experiences. The lecture format is designed for courses, which combine theory in computer science with hands-on programming challenges and collaborative in-course problem solving. The main features of MAL include collaborative learning, constant activities to stimulate interactions between instructor and students, immediate feedback for self-assessment, and motivational feedback such as badges or leaderboard information. The course is structured in the form of mini lectures with constant interactive challenges and interactions such as small arithmetic problems, programming challenges, or research and discussion assignments, which are available using a learning management system as supportive in-course technology to provide the interactive course content and according immediate feedback. First outcomes show positive impact on student motivation and attention during the lessons. Also, more students are willing to complete bonus tasks volunaryly do gain extra points.	Motivational active learning for computer science education (abstract only)	NA:NA	2014
Emmett Tomai:Christine F. Reilly	At our university, like at many other institutions, the pass rate in the introductory programming (CS1) course is relatively low, in the approximate range of 50% to 75%. We would like to discover factors that have an impact on student success in introductory programming in order to better advise and place our students into the course at the appropriate point in their academic careers. Our main motivation for increasing the CS1 pass rate is to help our students graduate on time. It has long been thought that mathematics background is a factor in determining a student's success in introductory computer science courses. Currently, our students must be concurrently enrolled in college algebra or placed into a higher mathematics course. However, given our current low pass rate, we wonder whether this is the proper prerequisite. In order to gather information about mathematics background, we administered a questionnaire to the students enrolled in the class during Spring 2013. We then analyzed the pass rate of our introductory programming students in relation to their mathematics background. Our findings indicate that students who are prepared to take calculus I in the same semester as they take introductory programming were more likely to pass introductory programming. These findings suggest that changing our math prerequisite to pre-calculus may increase the pass rate in our introductory programming course.	The impact of math preparedness on introductory programming (CS1) success (abstract only)	NA:NA	2014
Catherine S. Ashcraft:Wendy Dubow:Zhen Wu	Girls and women continue to be underrepresented in technology. This persistent underrepresentation inhibits innovation by ignoring the diverse perspectives and life experiences women bring to invention and problem solving. Furthermore, disregard for girls and women's participation exacerbates existing economic disparities for women. To reverse these trends, a number of programs designed to engage girls in computing have emerged in recent years. Often these programs are not evaluated, or if they are, informal surveys are used. These instruments are usually unable to adequately assess change in interest, confidence and future plans for computing. In addition, sample sizes tend to be small and, because different programs use different surveys, results cannot be aggregated or compared across programs. To address this gap, NCWIT has been piloting a new evaluation instrument informed by Social Cognitive Career Theory (Lent et al., 2008). The instrument was piloted with two groups of girls: 312 Globaloria middle and high school students and 1500 girls who applied to NCWIT's Aspirations program from 2007 to 2013. Reliability analysis and confirmatory factor analysis were conducted for both datasets, showing high internal consistency. This poster session will provide more detail on the instrument, how it has been used and tested, and next steps in scaling its use. In making this tool widely available, we hope to increase consistency in the evaluation of girls? participation in computing education programs, enabling us to increase sample sizes; compare results across programs; and accelerate contributions to the gender and computing knowledge base.	How do we measure success?: a new instrument for evaluating girls' progress in middle and high school computing programs (abstract only)	NA:NA:NA	2014
Allison G. Mart√≠nez-Arocho:Philip Sheridan Buffum:Kristy Elizabeth Boyer	Exposing students early to computer science may influence their choice of career, and there is increasing recognition that even for students who do not pursue computer science careers, computational literacy is important. This poster reports on a project targeting the development of a new middle school computer science curriculum. This research aims to highlight the role of computation in Big Data in the context of middle school computer science education, which serves as a catalyst to keep students engaged in computer science through middle school via the ENGAGE narrative game-based learning environment. This poster discusses steps taken to validate one activity meant to highlight the role of computation in the context of Big Data: skip list manipulation. While we found that most of the middle school students performed poorly in assessments after the skip list activities, several students showed they were capable of completing the activity successfully, implying that a repetition of the revised skip list study and additional pilot studies for other Big Data activities are needed to pave the way for the development of this Big Data curriculum. This activity will be just one part of a broader curriculum designed to showcase the social relevance and power of Big Data.	Developing a game-based learning curriculum for "Big Data" in middle school (abstract only)	NA:NA:NA	2014
Daniela Marghitu:Lavaris Thomas:Yasmeen Rawajfih:Jillian Hall:Andrew Marshall	This poster describes the "Computer Science for All Bulldogs (CS4ALL-B) pilot, a 7-week long course taught in Fall 2013 at Opelika Middle School, located in the Auburn- Opelika, Alabama Metropolitan Area (https://cs4allb.eng.auburn.edu). The program marks the first time a formal Computer Science (CS) course has been taught in an Alabama middle school. The CS4ALL-B curriculum builds upon the Auburn University innovative 'three-step' model of K-12 computing and robotics instruction that introduces CS and Computational Thinking (CT) concepts for K-12 students. This model uses programming frameworks such as Kodu, Alice, App Inventor, Lego NXT-G and Tetrix, and Computer Science Unplugged (CSU) activities. While moving between the three steps, students explore the fundamentals of CS/CT concepts. The CS4ALL-B curriculum is structured in four main sections: First, introduction to Kodu for 7th graders and Alice for 8th graders; Second, introduction to CS/CT Concepts; Third, participation in selected CSU activities, then students develop their programs to demonstrate their abilities to design and create Kodu or Alice worlds that implement the concepts learned while participating in CSU activities; Fourth, students build their own course project that includes all concepts and skills grasped throughout their training. This model helps maintain high levels of motivation, concentration, and engagement during the entire course. The results of the pilot assessment, including tools such as traditional written assessments (e.g. quizzes, tests) as well as alternative assessments tools (e.g. projects and blog posts), will be presented. We have found that our methods foster the learners' nascent development in CS.	Kodu alice and computer science unplugged: a model of effective introducing middle school students to computer science and computational thinking (abstract only)	NA:NA:NA:NA:NA	2014
Diane Horton:Michelle Craig	In the interest of better understanding why many students fail to complete CS1 successfully, we analyze a class of 555 CS1 students, 127 of whom either failed or dropped the course. We find that students with previous experience are more likely to pass even if the experience is not a formal programming course. Contrary to intuition, students who drop have enrolled in fewer courses and have fewer hours of non-school commitments than those who stay. We present a classification scheme to categorize student outcomes based on their performance at a course midpoint.	Who drops CS1? (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science educators are constantly reinventing introductory CS0, CS1 and CS2 courses to retain students and increase their learning and motivation. While the focus on drawing students into Computer Science is vital to maintain enrollment, it is also paramount to sustain student motivation by using new pedagogical approaches, contextualized to how students learn, throughout the curriculum to develop technical and interpersonal skills. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. In this poster, we present the initial results of a project with two aims to: (1) design, pilot, and offer new curriculum materials for three upper-level Computer Science courses using a mobile computing platform paired with pedagogical approaches sensitive to the learning styles of today's student; and, (2) develop out-of-classroom learning opportunities including mobile computing student seminars, externship opportunities and service-learning projects reinforcing in-classroom technical skills. We believe that these two components synergistically, can be leveraged to revitalize the undergraduate Computer Science curriculum, better motivate student learning and provide in-demand technical skills to students without losing the fundamental Computer Science concepts. This project is partially supported by NSF DUE#1140781.	Revitalizing the computer science undergraduate curriculum inside and outside of the classroom using mobile computing platforms (abstract only)	NA:NA:NA	2014
Bruce W. Char:Thomas T. Hewett	This is work-in-progress on an entry-level course on computational problem-solving and programming for engineering students. It has been run since 2006 at our institution at a scale of 800 students/term, as a hybrid in-person lab and out-of-class on-line autograded exercises using Maple TA. The course is in the process of changing languages (from Maple to Matlab), with upgraded resources: a lecture period, some manually graded assignments, projects, and automatic code testing. To date the assessment of the impact of the course has been through conventional means: assigning grades and indications as to whether student grades are consistent with those obtained in other courses taken. During the transition from Maple to Matlab more detailed and individualized performance assessment plans are being developed which are intended to enable the staff and students to better judge weaknesses in program knowledge and who would benefit from additional personal contact.	A first year common course on computational problem solving and programming (abstract only)	NA:NA	2014
David Sturgill	This poster presents preliminary investigation of the content and quality of on-line peer mentoring in competitive problem solving. Discussion board postings from the Queue-ICPC Challenge were analyzed with respect to content, including type of communication, topic, intended audience and accuracy, as well as attempts at relationship building. Responses outnumbered questions more than 2 to 1, suggesting that even in a competition, people are willing to assist others. Interestingly, some of the most successful competitors were also the most willing to offer help to others. As part of a voluntary competition, this kind of peer mentoring is useful resource for attracting and supporting new participants. In the academic context, peer mentoring may be an essential aspect of learner support for large, traditional classes. In very large scale efforts such as MOOCs, it may provide a scalable resource for helping participants to succeed and remain engaged.	Altruism among programmers: the availability and effectiveness of on-line, spontaneous peer mentoring in competitive problem solving (abstract only)	NA	2014
Amber Wagner:Jeff Gray	During the Summer of 2013, we participated in a United Cerebral Palsy supported summer camp for children with disabilities. While our initial motivation for attending the camp was to conduct a user study of a Vocal User Interface, we worked with the camp attendees outside of testing and beyond computer activities, and during these activities, we were able to ask the attendees about their computer experience and interest. The attendees' experience and interest was noted along with the results of the study. The study demonstrated that voice was a useful modality for this audience; however, we were more surprised to learn that the majority of the attendees were not enthusiastic about using the computer and preferred more social activities. Three different types of computer science education activities were offered during the six week camp. The first activity was a group activity in which roughly ten students participated. The next activity was completed with smaller groups consisting of 2-3 attendees in which five students participated throughout the camp. The final activity was a one-on-one activity, and only three students chose to participate in the one-on-one activity. This poster presents the details of these activities, results of the user study, and thoughts as to why few attendees chose to participate in the smaller group activities based on observations during the summer camp.	Observations of first learners with different capabilities (abstract only)	NA:NA	2014
Gili Rusak:Darren Lim	Despite dramatic changes in technology over the past several years, educating young students in computer science at the elementary school level remains a challenge. Tackling this issue, we created 'Codester,' a novel Android application, as a tool to engage learners in the basics of computer science and to teach them computational thinking. Unlike other educational coding programs such as Scratch and Lego Mindstorms, our app is unique because it is mobile and allows users to learn a variety of concepts at a rapid rate. By running user studies for participants in grades 1-3 and 4-6, we quantified the effectiveness of Codester. Students were challenged and developed logic skills throughout the sessions. Using surveys, pretests, and posttests, we found an improvement in the five main computational thinking concepts that Codester teaches: sequencing, iteration, code reuse, decision-making, and logic. The participants especially showed an increased understanding of the code reuse concept: grade 1-3 students improved by 32% at the end of the program; grade 4-6 users improved by 43%. Additionally, the software and the tablet platform were attractive to the participants. Eighty percent of students stated that they enjoyed using the tablets to learn new material, and 72% said that they would like to continue learning with Codester. These figures show a promising increase of interest in coding and thus match the goal of our app: teach youngsters programming in a fun and challenging way. Please see www.codesterapp.com.	"Come code with codester": an educational app that teaches computer science (abstract only)	NA:NA	2014
Jean H. French	The living lab concept promotes innovation by solving problems in an open, user-centric environment. A living lab approach was implemented in an undergraduate, advanced software engineering course to develop applications for the Leap Motion. The Leap Motion is a novel device that provides touch-less interaction with computer systems. Sixteen students worked toward the common goal of developing applications for the Leap Motion. All aspects of the project were supported in the student-led, open environment, from initial research to implementation. Because the Leap Motion device was not available until shortly before the semester, students had no prior experience in application development for the technology, adding to the difficulty and uniqueness of the task. This poster provides the details of the living lab implementation as the project progressed through the semester.	Implementing a living lab approach to foster innovation in an advanced software engineering course (abstract only)	NA	2014
Thomas Ashmore:Sorathan Chaturapruek:Zachary Dodds:Corinne Druhan:Bridgette Eichelberger:Michael Erlinger:Elizabeth Schofield	In this poster we present a CS curriculum aimed at "middle-years" students. In the U.S., this corresponds roughly to students aged 11-15. This MyCS curriculum provides a hands-on introduction to computer science through six distinct modules. Three programming modules use the Scratch environment to build computational sophistication and procedural intuition within an inviting development environment. Alternating with Scratch are three problem-solving modules whose activities deepen awareness and facility with computation through novel exercises. More than 25 classrooms and 900 students have participated in MyCS's pilot years within the Pomona, CA and Lihue, HI school districts. 2013-15 will see an expansion of its workshops, academic-year classes, and program evaluation. Course materials will be served by the OpenEdX platform both at HMC and on Amazon EC2. This poster shares our development and deployment of MyCS to date, and invites feedback from other institutions in their efforts to foster adolescents' computational identities.	MyCS: building a middle-years CS curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Daniel Armendariz:Zachary MacHardy:Daniel D. Garcia	The Online Course Tool for Adaptive Learning (OCTAL) is an adaptive exercise system that customizes the progression of question topics to each student. By creating a concept dependency graph of topics in a course and modeling a student's knowledge state, the tool will present questions that test knowledge within a student's zone of proximal development. We intend OCTAL to be a formative assessment tool that is not tied to any specific course by providing language-agnostic questions on computer science concepts. While the tool will be generalizable for many courses, our first prototype will include a concept map and question set from an introductory CS1 course, UC Berkeley's CS10: The Beauty and Joy of Computing. Using the tool, we are investigating metacognitive improvements in the identification of knowledge gaps by presenting online course material in a nonlinear fashion.	OCTAL: online course tool for adaptive learning (abstract only)	NA:NA:NA	2014
Debzani Deb:Mohammad Muztaba Fuad	This poster addresses a significant learning barrier experienced at many CS departments, specially at predominantly minority institutions, which is the problem of students? inability to keep engaged and interested in classroom. In this research, we investigate the applicability of using mobile devices in the classroom and incorporation of interactive problem solving using those devices to increase class engagement and active learning for students. By allowing the students to solve problems in their preferred devices, the research expects to create a friendly learning environment where the students want to retain, be active and skillful. The poster will present the design aspects of Mobile Response System (MRS) software that will be utilized to communicate, collaborate and evaluate interactive problems using mobile devices. The poster will also showcase several interactive problem-solving activities utilizing mobile devices and MRS software, which have been developed and are being adopted in CS and IT courses at Winston-Salem State University (WSSU). It is expected that this research will invigorate interest in Computer Science among minority and underrepresented students through exposure to the technology-rich learning environment. By enhancing student learning and problem solving abilities, it is also expected that this research work will improve the quality and quantity of underrepresented minority students in STEM workforce or graduate study. The successful execution of this project will advance research and the knowledge of mobile device usage in CS classrooms and more importantly the way it impact teaching strategy and student learning at WSSU and other institutions.	Use of mobile application to improve active learning and student participation in the computer science classroom (abstract only)	NA:NA	2014
Wenliang Du:Li Yang:Joseph Kizza:Xiaohong Yuan	Browser security as an important and relatively new area is yet not part of existing IA curriculum or National Security Agency (NSA) knowledge units. Browser security incorporate threats, vulnerabilities, risks, and countermeasures faced by browsers and browser-based applications ranging from design principles, security architecture to applications. Our effort contributes to courseware development and IA education in terms of browser security. Hands-on labs are effective to improve student learning in IA and sharpen their skills in real-world settings. We develop hands-on labs to help students to build necessary skills on developing secure browser and browser-based applications. Our developed hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and Information Assurance (IA) courses.	New hands-on labs on browser security (abstract only)	NA:NA:NA:NA	2014
Rajshekhar Sunderraman	The treatment of abstract query languages such as Relational Algebra, Relational Calculus, and Datalog in introductory database courses varies considerably across the various computer science departments around the world. We propose an integrated approach in which students learn how to express a natural language query in Domain Relational Calculus (DRC), apply a query-transforming algorithm to the DRC expression tree to produce Datalog Rules (DLG), and finally apply another query-transforming algorithm to the DLG rules to produce an equivalent Relational Algebra (RA) expression. This systematic approach works very well for "forall-queries" in which the forall-quantifier is necessary in the DRC expression. To make this approach even more effective, the students are required to use DRC, DLG, and RA interpreters that allow them to execute query expressions as well as produce equivalent expressions. The students are also involved in implementing these interpreters to get a deeper understanding of querying in relational systems.	An integrated approach to teaching of abstract query languages and their implementations (abstract only)	NA	2014
Martha J. Kosa:Ambareen Siraj	We describe a new annual awards program, the Rising Renaissance Engineer Spectrum Awards, which recognizes a diverse body of students across all engineering departments at our institution for their initiatives and achievements in educational, research, and professional development activities. This award is unique at our institution because it is inclusively for students from all six engineering departments and specifically promotes underrepresented groups. This awards program complements existing engineering awards honoring faculty, staff, and alumni for their research, teaching, and service. It is modeled after the NCWIT (National Center for Women in Information Technology) Aspirations in Computing Award, which has successfully encouraged many female high school students to persist in computing careers. With the Computer Science Department spearheading the effort, this project is a collaborative partnership among representatives from all engineering departments.	The rising renaissance engineer spectrum awards (abstract only)	NA:NA	2014
Anna Koufakou:Dahai Guo	Incorporating social networks in the curriculum to better engage students has gained a lot of attention as a result of the popularity of social networks with college students. We introduce EasySocial, a social network plugin for Eclipse, written by a CS educator, the second author of this poster. The goal of the plugin is for students to be able to easily write code using their own personal data, e.g. on their Facebook or Twitter account, with minimal knowledge of the specific social network API. The EasySocial plugin has several features which makes it useful in our CS classes: it seamlessly embeds the process for authenticating with Facebook; it abstracts the process for making HTTP requests and parsing various data formats, such as JavaScript Object Notation (JSON); it integrates Gephi functionality, so that students can access Gephi's powerful functions for network analysis and visualization in their Java programs. We used the plugin in our Fall 2013 Data Mining course for CS undergraduate students in order to quickly introduce them to social data visualization and social network analysis concepts such as community detection. The students easily wrote Java code to visualize their network graph and detect communities. We received a very positive response, and several students expressed enthusiasm about the programming aspect as well as the application topic. Future plans include further employing EasySocial in other courses, for example to help students in entry-level courses understand programming concepts, such as arrays and loops.	Developing and using an in-house plugin for easy social network programming (abstract only)	NA:NA	2014
Marcell Amorim Almeida Mesquita:Armando Maciel Toda:Jacques Du√≠lio Brancher:Ricardo Melo Casseb do Carmo	Programming Languages and its uses play a vital role in IT higher education courses, because it is necessary that students have a good understanding in order to become full fledged developers. We made a study to verify the initial reception of this method regarding the students satisfaction and so, this meta-paper proposes the continuation of this research. It involves the utilization of a Social Network and gamification concepts, like badges, points, levels and leader boards to improve students participation.	Utilizing gamification with social network to aid students in programming languages lessons in higher education IT courses (abstract only)	NA:NA:NA:NA	2014
Andrew Hicks:Barry Peddycord II:Irena Rindos:Christopher Simmons	Intelligent tutoring systems have been shown to significantly aid in student learning without requiring extensive instructor intervention. One feature of intelligent tutors is their ability to provide hints to students who get stuck, but the production of hints by hand is prohibitively expensive. Hint Factory (Stamper et al., 2008) is a domain-independent technique for generating hints from interaction graphs. In this work, we explore approaches for creating graphs that represent interactions in an educational programming game called BOTS. We use data from seven programming puzzles that contain a total of 1100 interactions with the game. We believe that we can begin by seeing what works in the small language of a programming game to inform how we can scale the techniques for "real" languages in "real" tutors.	A comparison of two approaches for hint generation in programming tutors (abstract only)	NA:NA:NA:NA	2014
Johanna Pirker:Christian G√ºtl:Frank Kappe	Organizing a Programming 101 course for a thousand computer science freshmen poses a challenge. One major problem is the high dropout-rate due to insufficient social interactions and the missing feeling of presence. Collaborative home assignments can help to overcome such issues. However, due to scheduling conflicts not all students are able to meet in person to work together. Many tools support collaborative online programming, but have several disadvantages in comparison to face-to-face meetings. This work presents a virtual world environment, where student groups can meet online, but experience the advantages of face-to-face interactions. They can commonly use different tools for collaborative problem solving at one shared virtual location. They experience the feeling of presence, which increases the individual contribution, even from distant sites. Furthermore, the environment provides facilitated possibilities for tutor meetings, where students can discuss and present their solutions. In this work a first prototype of the environment is described. In addition advantages as well as potential issues or difficulties are discussed.	Collaborative programming exercises in virtual worlds (abstract only)	NA:NA:NA	2014
Stoney Jackson:Heidi Ellis:Robert Crouse	Programming contests have been used at the high school level to motivate students to study computing and generate excitement about computing topics. However, little investigation has been done into whether the selection of programming language impacts success in such contests. This poster presents the results of an analysis of five years of high school contest results held at Western New England University. The analysis looks at the languages used by winning teams and number of submissions. Results appear to indicate that winning teams use Java and Python for programming languages while less successful teams use BASIC, VisualBasic and C++. Interestingly, the majority of teams used BASIC as their programming language. Another interesting result was that low performing teams tend to have a disproportionately large number of submissions.	Impact of programming language on success in high school programming contests (abstract only)	NA:NA:NA	2014
Amanda Ochsner:Rane Johnson-Stempson:Matthew Berland	This project consists of a collaborative effort between the Games+Learning+Society Center at the University of Wisconsin-Madison and Microsoft Research to create an online community to engage girls in computer programming and game design. The goals of this community are threefold: 1) to support initial interest in computer science among young women and then build on that interest through increasingly involved participation within the community; 2) to foster the learning of programming specifically, and computational and design thinking more broadly; and 3) to provide support to the young women within the community at the critical engagement and learning points. At SIGCSE 2014 we will present the first major phase of the project-an updated version of our team's Studio K curriculum for teaching game design and computational thinking to middle and high school students. We will also report on early research findings from the first all-girl cohorts to complete the curriculum.	Mission critical: building community to engage young women in computer science (abstract only)	NA:NA:NA	2014
Sagar Raina:Blair Taylor:Siddharth Kaza	Addressing the crucial need for cybersecurity learning materials, the Security Injections @ Towson project (towson.edu/securityinjections) has developed modules for CS0, CS1, CS2 and Computer Literacy courses that target key secure coding concepts including integer overflow, buffer overflow, and input validation. Assessment results indicate that these modules have led to an increase in students' security-awareness and their ability to apply secure coding principles. Each security injection module includes four sections - background, code responsibly (includes methods to avoid security issues), laboratory assignment with a security checklist, and discussion questions. In this study, we are proposing to enhance these modules by incorporating e-learning strategies including lesson segmentation, instant feedback, and self-paced lessons to increase student learning. In addition, we are designing a system with auto-grading functionality and dashboards to encourage adoption by instructors. Segmenting modules into smaller sections and including --gatekeeper questions will facilitate learning and reduce cognitive overload. Providing feedback on incorrect answers encourages students to revisit relevant sections. The goal of this feedback based approach is to improve student learning and content retention. The nature of the enhanced modules allows for self-paced learning which is applicable for online learning environments. We conducted a pilot study using a module in CS0 undergraduate computer science class that included 60 in-class and 9 online students. The results of the pilot study indicated increased attention towards the content and possible improvement in retention of concepts. This project is partially supported by NSF under grant DUE-1241738	Interactive e-learning modules for teaching secure: a pilot study (abstract only)	NA:NA:NA	2014
Lisa M. Marvel:Stephen Raio:Lori Pollock:David Arty:Gerard Chaney:Giorgio Bertoli:Christopher Paprcka:Wendy Choi:Erica Bertoli:Sandra K. Young	In this poster, we describe our experience of designing and executing two different weeklong programs for 10th -- 12th grade students. The goal of our program is to attract students to the field of computing, increase their computing confidence and familiarize them with ways that computing impacts our community. Student groups consist of 32 students for each week with a 1:0.8 male-to-female ratio. No prerequisite knowledge is required to attend. We compare the different facets of the curriculums by evaluating the impact of each week both quantitatively and qualitatively. Our evaluation implies the attraction of cyber security topics to this age group, particularly male students, and presents a curriculum that may help increase confidence in computing concepts, particularly for female students. We solicit feedback and welcome input on our curriculum and evaluation method.	A comparison of two hands-on laboratory experiences in computers, networks and cyber security for 10th-12th graders (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Prem Uppuluri:Jeff Pittges:Joseph Chase	Radford University's Scare and Prepare (SP) program is being developed to enable high-school teachers to cultivate security cons cious cyber-citizens and, in the process, spark a passion for computer science. We are accomplishing this in two ways: (a) incentivize high school teachers to incorporate security into their curriculum with little investment in resources (hardware, software and personnel), and (b) introduce computer science concepts such as programming (e.g., Javascript) and basic operating system functionality (e.g., file organization and memory management). Our experience shows that success of high school CS programs depends on the teacher's motivation. SP will reduce preparation times for teachers by providing all the necessary learning materials in the form of screencast lectures and portable and remote hands-on labs. Ultimately, we propose to develop a dual enrollment college credit course. SP's learning materials are intended to spark interest among students by both scaring and preparing them. The first strategy is to scare students with the potential implications of cyber-attacks on aspects that matter to them: social networking sites and smart phones. Next, students are prepared to defend against such attacks. Finally, to sustain interest prepared high schools students will compete in cyber-defense exercises.	Scare and prepare: increasing awareness, safety, and passion for cyber-security (abstract only)	NA:NA:NA	2014
Volker Ahlers	Computer graphics is a subject which is typically enjoyed by students and which has the potential to attract pupils to consider studying computer science. Although the programming methods used by computer graphics have significantly changed in recent years due to the integration of programmable shaders into the graphics rendering pipeline, a lot of computer graphics courses still start with the fixed-function pipeline. In view of future applicability, however, it is desirable to teach students modern concepts of computer graphics from the beginning. One problem with teaching shader-based computer graphics is that a lot of technical tasks lie in the hand of the programmer: loading and compiling shader programs, managing buffer objects, defining transformations by means of matrices, etc. This poster presents a scene graph library which is fully based on the programmable rendering pipeline. It uses the OpenGL 3.2 core profile, which does not allow deprecated fixed-function functionality. The teaching approach combines the high-level abstraction of a scene graph with the low-level programming of shader cores, which are attributed to scene graph nodes. The presented scene graph library has a simple and clear structure and is extensible in order to let students implement advanced concepts taught in the lecture, like shadows or particle systems. Finally, the poster presents code samples, results of student projects, and student evaluation results.	An extensible scene graph library for teaching computer graphics along the programmable pipeline (abstract only)	NA	2014
Roy P. Pargas:Punit Kulkarni:Greg Edison:Barbara J. Speziale	Teaching a mobile device software development course is very different from teaching a CS1, CS2, or advanced programming class. In a traditional software development class the target computer (on which the software being developed is to run) is a laptop or desktop computer. In a mobile device software development course, the target computer is a smartphone or tablet that has a large number of features (web access, a camera, GPS, a gyroscope, media display, etc.) that can be controlled by software. The material that must be covered in such as course is so broad that new approaches to delivering course content must be used. This poster describes the overall method by which we have taught such a course. We describe four challenges: (1) The content is new and constantly changing. (2) The material to be covered is very broad and includes diverse components. (3) The course requires that the students understand databases design and implementation, topics often taken in the final year of the curriculum and too late for this course. (4) Finally, finding meaningful course projects is difficult and we benefit greatly from a program such as Clemson's Creative Inquiry Undergraduate Research Program. We explain how we address each of these challenges and describe the structure of the course in detail. We conclude with the results we have produced over the past five years, evaluation by students, and successes students have achieved. We also demonstrate both iOS and Android apps that have been developed through this course.	Teaching mobile app software development is a challenge! (abstract only)	NA:NA:NA:NA	2014
Joseph B. Wiggins:Joseph F. Grafsgaard:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Emotion, or affect, plays a central role in learning. In particular, promoting positive emotions throughout the learning process is important for students' motivation to pursue computer science and for retaining computer science students. Positive emotions, such as engagement or enjoyment, may be fostered by timely individualized help. Especially promising are interventions if the student is having difficulty completing a task. Recognizing when a student is facing a complex task may better inform teachers or adaptive learning environments about the students' affective states, which in turn can inform instructional adaptations. We approach this research goal by analyzing a data set of student facial videos from computer-mediated human tutorial sessions in Java programming. Students and tutors interacted with a synchronized web-based development environment. The tutorial sessions were divided into six lessons each with subtasks, and featured corresponding learning objectives for the students. In post-hoc analysis, we identified "difficult" tasks by comparing the frequencies of student-tutor interaction and task behaviors such as running the program and the time to complete tasks. Nonverbal behaviors, such as gesturing or postural shifting, were then compared with task difficulty. Understanding such nonverbal behavior can inform individualized interventions, which may keep students engaged and foster greater learning gains.	The relationship between task difficulty and emotion in online computer programming tutoring (abstract only)	NA:NA:NA:NA:NA	2014
Scott Turner	Looking Glass is a library designed to support the testing of students' C++ code through reflection. Instructors can design tests that compile even if there are mismatches between the instructor's and student's code (like misspelled function names or parameters that do not have the expected types). Using the autogenerated metadata, instructors can search for and call functions or methods in the student code, including the main function, while providing feedback (rather than a compile error) if the required code is not found. Although not suitable for all C++ programs, Looking Glass was designed to support instructors in introductory and intermediate classes and to be transparent to the students. This poster describes the setup and use of Looking Glass with examples of the functionality it currently supports.	Looking glass: a C++ library for testing student programs through reflection (abstract only)	NA	2014
David P. Bunde:Michael Graf:Deyu Han:Jens Mache	There are many different ways to write parallel programs. We illustrate a variety of relevant language paradigms by presenting implementations of the Game of Life, a simple simulation motivated by living organisms. Featured paradigms include shared memory, GPU acceleration, message passing, and Partitioned Global Address Space (PGAS).	Parallel programming paradigms illustrated (abstract only)	NA:NA:NA:NA	2014
Stephen Jacobs:Amit Ray:Jonathan Schull	This poster will briefly show and describe the five year history of FOSS course offerings and projects in the School of Interactive Games and Media that led to the development of the minor and then diagram and describe the Minor's design and content. It will show how the Humanitarian focus of the student work, beginning with the development of educational games for the One Laptop per Child and Sugar communities built a foundation for the minor. It will then discuss the design of the minor, how the required courses leading to advanced electives also prepare students to become contributors and, potentially, project leaders within Free and Open Source Software and Free Culture communities within the students' own academic specializations. It will diagram the paths that both technical and non-technical students can take to succeed in completing the minor.	RIT's new minor in free and open source software and free culture (abstract only)	NA:NA:NA	2014
D. Brian Larkins	Modern robotics are at the locus of several related disciplines including computer science, mechanical engineering, electrical engineering, and others. The interleaving of these disciplines within a single robotic system can make teaching the fundamentals of robotics to undergraduate students within a traditional computer science curriculum a challenging task. One way to address this challenge is with an immersive, experiential approach that exposes students to these different facets of robot design in context. This poster describes the application of the Cognitive Apprenticeship (CA) framework to an undergraduate robotics course comprising of projects that touch on several different engineering disciplines. CA techniques are used to help students gain insight and understand how contributions from a variety of domains are interwoven to build a functioning robotic system. Throughout the class, students work on teams to complete projects at different levels of abstraction using two different robot platforms. Students learn about software design and implementation by constructing reactive paradigm behaviors on a Khepera III robot in the first part of the course. Later, students construct a quadcopter UAV from a kit, handling all aspects of construction, calibration, and configuration. This work focuses on two perspectives of this course: the use of the CA framework as a structure for experiential learning and also to describe a set of projects that emphasize the interdisciplinary nature of robotics.	Making use of the cognitive apprenticeship framework in an undergraduate robotics course (abstract only)	NA	2014
Leo C. Ureel II:John Earnest:Charles Wallace	With the continued and alarming lack of involvement in computing among college students, attention has recently focused on engaging students at the middle and high school levels. Our "Copper Country Programmers" club began as a community outreach program to fill a gap left by the elimination of the computing curriculum in the local school district. In our club, university faculty and students provide curriculum, tools, and classroom tutoring for young novice programmers across the school district. Our curriculum teaches programming through a series of exercises involving HTML, BASIC, LOGO, and Processing (a graphics-oriented Java variant.) Contrary to some other approaches, we present students initially with a low level, bare bones programming model and development environment, then gradually increase the functionality and complexity. We find that students readily grasp the simple, transparent initial model, then experience first-hand the motivations for adding functionality (and complexity). Our cross-curricular programming topics include graphic design, interactive fiction, computer generated poetry, mathematical simulation, computational geometry, game physics, computer art, artificial intelligence, video game development, and critical thinking. We provide examples of our curriculum, student work, problems encountered, and how they were resolved.	Copper country programmers: a novel curriculum for beginning programmers in middle and high school (abstract only)	NA:NA:NA	2014
Gabriella Anton:Matthew Berland	Studio K is a game design curriculum constructed to provide middle school students an engaging entry into computer science and programming. Developed at the University of Wisconsin-Madison, the program employs Microsoft's 3D programming environment, Kodu, in tandem with support and analytic tools for facilitators, and an online community that provides players with a support system. These key features are bolstered with incorporation of telemetry data gathered through design sessions that are used to improve site functioning, curriculum relevancy, and administrative tools. This program is applied across contexts, with applications in formal classrooms, informal extracurricular clubs or camps, and alternative learning environments such as library systems or home schools. Studio K provides a well-supported, unique entry into computer science in which programming knowledge becomes a tool that supports learners' goals in designing and developing games.	Studio K: a game development environment designed for gains in computational thinking (abstract only)	NA:NA	2014
Ankur Chattopadhyay:Thomas Nehring	Given that many modern computing technologies have led to privacy issues in today's digital world, the latest CS curriculum (CS2013 - Ironman Version 1.0) has recommended a strong need for inclusion of privacy topics within the present body of knowledge. According to the above curriculum, there is a requirement for global awareness of today's growing privacy concerns with technology. Our proposed lab caters to the above curricular recommendation. We present a physical security focused lab, which is based on the technology of PVA (Privacy through Visual Anonymity). Through this hands-on PVA lab, we teach pre-university and university students the notion of privacy in images/videos and educate them in the technique of VA (Visual Anonymity), which can help safeguard one's privacy by obscuring the individual identity in pictures/videos captured by cameras. Using this lab, we intend to enhance CS education and outreach by making students aware of the global issue of privacy invasion in today's surveillance and by demonstrating how the issue can be addressed via VA. The lab exercises are based on two open-source applications, namely "ObscuraCam" and "YouTube-FaceBlur". These applications are used as tools for enabling students to learn the concept of PVA. In this process, we show students an innovative aspect of balancing security and privacy in technology, thereby drawing their focus to the humanitarian side of CS applications. Our topic of PVA also enhances the IAS knowledge area in the latest CS curriculum.	PVA (privacy through visual anonymity) lab for enhancing CS education and outreach (abstract only)	NA:NA	2014
Remy DeCausemaker:Stephen Jacobs	This poster will briefly describe the components of the Humanitarian Free/Open Source Software Development (HFOSS) course offered by the Department of Interactive Games and Media at Rochester Institute of Technology in Upstate NY. It will depict this model of an "Open" Course (i.e. Open Courseware, Open Curriculum, Open Classroom, and Open Code) informed both by academic theory, and industry best practice. It will show the results of designers, developers, and project leaders, working in tandem with professors, staffers, and administrators to offer students a chance to apply research, and put theory into practice. It will discuss strategies of engagement, metrics of success and failure, and what resources are available for others to do the same.	Adventures in hackademia: leveraging humanitarian free/open source software development in the class room (abstract only)	NA:NA	2014
Michele S. Roberts	While programming has long been utilized as a recruitment path into computer science, data analysis as a recruitment path is relatively under-explored. Through a series of modular curriculum units developed in computational thinking, the potential impact of explorations in data analysis to impact teacher and student affect toward and interest in computer science is being investigated. Developed units include exercises such as statistically determining the author of selected text passages, modeling roller coaster simulations, solving crime mysteries and controlling zombie contagions. Computational thinking modules have been delivered in a CS Pilot course, as well as in K-12 outreach programs in non-computing courses (STEM and non-STEM, including classes in English literature, sociology, biology, physics and math). Initial results show significant and promising opportunities to utilize data analysis to create computing interest in a broadened population of students and teachers, extending the impact of computational thinking into a variety of subject domains.	Data-driven broadened participation (abstract only)	NA	2014
Kevin Buffardi:Stephen H. Edwards	Rudimentary programming skills are essential to developing fundamental proficiency in computer science. However, learning programming techniques can be challenging and frustrating for many students. CodeWorkout is an online learning environment that offers drill-and-practice exercises with novel social and adaptive scaffolding. Learners can track their progress on an assortment of computer science areas and skills while taking advantage of social features to discuss questions and help teach each other. Meanwhile, objective measurements of questions and teaching hints help promote the best, most effective content for learning. Our poster demonstrates how both computer science students and teachers benefit from joining the CodeWorkout community and taking advantage of its unique features.	Introducing CodeWorkout: an adaptive and social learning environment (abstract only)	NA:NA	2014
Jeff Gray:Mokter Hossain:Jonathan Corley:Amber Wagner:Cassidy Lamm:Mary Boehm:Carol Crawford:Kathleen Haynie:Sheryl Packman:Deepa Muralidhar:Jeff Baker:Roy Black:Sandy Falgout:Leella Holt:Albert Lilly:Gina McCarley:James Morse:Jennie Rountree:Jill Westerlund:Carol Yarbrough	This poster describes our first-year experience in developing and evaluating a CS Principles professional development model for training a cohort of teachers across an entire state geography. The scalable deployment and sustainable persistence of the new CS Principles course adopts the successful practices of a national AP training program developed by the National Math and Science Initiative (NMSI). It applies those practices in a professional development program based on year-long in-person training and distance learning collaboration. A statewide "Teacher Leader" model is being explored where those already teaching more rigorous CS courses will assist in training new peer cohorts as they establish CS Principles in their schools. Teachers in these cohorts collaborate together on content and pedagogical learning experiences, fostered by peer leaders. The assessment is uncovering the facets of our model that are most suitable for building a sustainable network of CS Principles teachers. This poster is focused on a description of our first-year experiences and extensive evaluation results. The poster will describe the curriculum that is being developed by our teachers, a set of lessons learned from our PD experiences, and the details of our evaluation. The Teacher Leaders will be available near the poster to discuss their experience with anyone who has an interest in our professional development model for CS Principles.	A first-year experience report on a model for statewide deployment of CS principles courses (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Jonathan McKinsey:Samuel Joseph:Armando Fox:Daniel D. Garcia	Pair programming, a form of collaborative learning where two programmers work on the same computer, enhances learning in novice programmers and improves code quality in experienced programmers. Remote pair programming (RPP) brings the pedagogical technique of pair programming to the distributed online environment of Massively Open Online Courses (MOOCs). UC BerkeleyX's CS169 Software as a Service MOOC successfully uses a Google+ community for students to generate their own RPP events or join events created by their peers. We will examine survey results summarizing the RPP experiences and RPP technologies of student pairings in the Fall 2013 offering of CS169, as well as analyze RPP sessions. In the future, the aim is to generalize RPP methodology, expand its applications to other MOOCs and traditional classrooms, and compare its effectiveness to in-person pair programming.	Remote pair programming (RPP) in massively open online courses (MOOCs) (abstract only)	NA:NA:NA:NA	2014
Frank McCown:Michael L. Nelson	This poster reports on course materials that have been developed for teaching an Introduction to Web Science course to computing majors at the undergraduate level. This is the first comprehensive collection of resources that we are aware of that targets undergraduates in the exciting new field of Web Science. The course materials include slides, reading assignments, homework assignments, programming projects, and exams. We hope these materials will make adopting a Web Science course easier for a computing department or for creating an interdisciplinary course which could expose computing to a more diverse and broader group of students. Course materials may be obtained from the authors and from the following URLs: http://www.harding.edu/fmccown/classes/comp475-s13/ http://www.cs.odu.edu/~mln/teaching/cs595-f13/ This work was supported by the National Science Foundation (IIS 1008492).	Resources for teaching web science to computer science undergraduates (abstract only)	NA:NA	2014
John K. Estell:Ken Christensen	The Pledge of the Computing Professional (http://computing-professional.org), endorsed by SIGCAS and the ACM Committee on Professional Ethics, was developed to both support professional responsibility in computing and to raise awareness of one's ethical responsibilities. To date, 25 institutions across the US have conducted Pledge Ceremonies to welcome their graduates into the computing profession. In a recent Inroads article, Don Gotterbarn asserts that, if one's ethics is influenced by those around us, then "just being aware of the existence of this Pledge helps to refocus us all on our own responsibility and the profession's responsibility." So in what ways can this Pledge be used both inside and outside of the classroom to better promote such traits? This session is for those interested in computing ethics and professional responsibility to get together and collaborate on new initiatives featuring The Pledge of the Computing Professional as a means to this end.	Promoting professional responsibility and ethics: the pledge of the computing professional (abstract only)	NA:NA	2014
Elissa M. Redmiles:Jandelyn D. Plane	Mentors-prot√©g√© relationships have been shown to improve retention of women and under-represented students in computing (Cohoon, 2011). Mentorship relationships are also the driving factor in female students' selection and completion of a computing career (Ashcraft, Eger, & Friend, 2012). More generally, mentor-prot√©g√© relationships are a significant factor in retaining and encouraging under-represented students in many academic fields. Beginning with a brief discussion of our experience facilitating mentorship between female undergraduate and middle school computing students, this Birds of a Feather Session will provide a platform for the exploration of mentor training techniques and mentor-prot√©g√© relationships. We will discuss and share different strategies (e.g. readings, hands-on workshops) for training mentors and facilitating strong mentor-prot√©g√© relationships. We will also explore how mentorship relationships affect student performance in all school subjects and how to best create a broad mentorship experience that extends beyond computing. Using a summary of recent literature as a springboard, we will consider optimal mentor-prot√©g√© age gaps, experience levels and interaction frequencies. Finally, we will explore session participant's personal experiences as mentors/prot√©g√©s and compile a list of "do's and don'ts" for those facilitating or participating in mentorship programs.	An exploration of mentor-prot√©g√© relationships and how to train future mentors (abstract only)	NA:NA	2014
Ernst Leiss:Lila Ghemri	The unprecedented use of social networking, the Web and other related technologies by all fringes of population, has not been accompanied by an adequate awareness of its potential for abuse, privacy violation and cybercrimes. Furthermore, technology nowadays provides extensive capabilities which often times clash with society's laws and ethics. In particular, modern societies have certain expectations of privacy; that may be contradicted by the capabilities of new technology. It seems then incumbent upon computer science instructors to raise awareness of these risks and threats among the students they teach. The purpose of this session is to provide a forum for discussing technologies that are widely used by CS and non CS professionals alike, and that may well be at variance with society's privacy expectations. A second purpose of this session is to introduce instructional modules currently under development that may assist instructors in addressing some of the relevant themes in courses, in particular privacy in social networks, on the internet, in mobile apps and also privacy in electronic voting and law enforcement. We expect that attendees will provide varying opinions and insight that will help shape the course offering. In addition, attendees will be invited to share their experience teaching or talking about privacy issues and the approaches, resources and techniques they have used in presenting the topic to students.	Privacy between technological capabilities and society's expectations (abstract only)	NA:NA	2014
Frances P. Trees:Lissa Clayborn	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, to provide member services at the local level, and to promote CSTA membership on the national level [1]. With the recently announced AP¬Æ Computer Science Principles Course to Launch in Academic Year 2016--17, local CS communities are vital. This BOF will provide a platform for the discussion of CSTA chapter formation, CS education community building, and tools and techniques used to successfully host professional development for K-12 CS teachers.	CSTA chapters: building a CS community (abstract only)	NA:NA	2014
William (Bill) John Pulling	Teaching by analogy or simile is a strategy many of us employ when we try to explain fundamental CS concepts. One popular analogy for explaining the difference between a class and an object is that the class is the "blueprint" and the object is the "house" that gets built from the blueprint. Others describe the class as the "cookie cutter" and the object is the "cookie". Another example is that an indeterminate loop is like a person hammering a nail into a board. We know that the loop will end when the nail is flush with the board. However, we are not sure how many strokes or iterations the loop will take, as it depends on who is doing the hammering, the length of the nail, etc. This BOF will encourage attendees to describe analogies, metaphors, and similes they use in the classroom to help illustrate different concepts in programming, or in other areas such as database or networking fundamentals. Discussion will also include "analogies that seemed like a good idea at the time" but did not work out as well as had been hoped.	What analogies/metaphors/similes do you use when teaching CS concepts? (abstract only)	NA	2014
Mark Sherriff:Daniel Garcia:Jody Paul	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2014
Aidan L. Feldman:Matthew McCullough	When working in the constantly challenging field of Computer Science, all but the most brazen individuals will inevitably feel "in over their heads", which is the simplest incarnation of impostor syndrome. This issue affects members of this field at all levels: students, teachers, researchers, etc. For students, impostor syndrome is a great barrier to success, because they don't have full context of the skills necessary to be successful in CS. Computer Science attrition rates are extremely high relative to other areas of study, particularly among first and second-year college students. What can be done by educators and the industry to retain talent, that would otherwise be lost by those individuals not feeling like they belong? How can we instill confidence and encourage growth? How can these strategies applied personally, or to other experienced members of the field?	Fighting impostor syndrome (abstract only)	NA:NA	2014
Carsten Kleiner	The number of papers on database system education has been close to zero at recent conferences. As database systems are a fundamental part of computer science curricula this comes as a surprise. The apparent draught in new ideas in database system education is even more surprising given the fact that this area of computer science has arguably undergone its most significant changes for more than 30 years within the last 5 years. Many new database system paradigms (most of them appearing under the NoSQL label) have been introduced for various reasons. Some of these massively distributed database systems facilitate unprecedented data processing capabilities often labeled as BigData. In order to offer a sustainable and practical CS education, at least some of those new paradigms and methodologies should probably be included into database education. This BoF can be a starting point for a discussion about which of those deserve inclusion into a typical CS curriculum and (even more interestingly) at what time in the curriculum and by replacing what other topics. Depending on interest of the audience a decision could be made as to what is the correct technology support for continuing the discussion beyond the conference. The BoF will also offer participants a forum to share their opinions, ideas and experiences on recent and future changes in database system education in general.	No news in database education by all accounts: seriously? (abstract only)	NA	2014
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Celebrations of Women in Computing.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2014
Magdy Ellabidy:John P. Russo	The cloud has become prevalent today and is used both in academia as well as industry. Many services, such as Amazon Web Services, provide an inexpensive way to provision servers in many different platforms. These cloud providers also have prebuilt instances which have many different popular configurations, such as LAMP and many popular databases. This bird of a feather session will discuss experiences with utilizing the cloud both as a temporary fix for times when hardware is unavailable for laboratories (such as during renovations) as well as using the cloud as a permanent replacement for physical labs	Using the cloud to replace traditional physical networking laboratories (abstract only)	NA:NA	2014
Brian Patterson:WIlliam E.J. Doane	Often underlying discussions with those who are not professional computer scientists is the idea that computer scientists are programmers and programmers make tools. Yet many computer science professionals view themselves primarily as scientists, with programs being used to create and express a deeper understanding of computation. This Birds of a Feather session discusses how participants can effectively bridge the gap between toolmaker and scientist views, either through modifying their own view or changing the viewpoint of others. Topics include: participants' personal balance between how they view themselves as scientists and toolmakers; how to encourage students to see themselves as scientists and toolmakers in balance; how to effectively conduct group work with a variety of viewpoints present; how student motivation interacts with how they see themselves as computer scientists; and other viewpoints that exist about what it means to be a computer scientist. Computer scientists and non-computer scientists welcome. Laptop not recommended.	Toolmaker or scientist? (abstract only)	NA:NA	2014
Paige H. Meeker	There is a tremendous need for computer science in every discipline; however, our K-12 institutions seem reluctant to alter traditional teaching methods and curriculum in order to include computing concepts at an early age. Therefore, most students are not exposed to computer science until they reach college. In this BOF, I'd like to explore what can be done to help introduce more young people to this exciting discipline, as well as encourage educators and administrators to incorporate computer science curriculum in their schools. As a leader in my children's school for the "Hour of Code" initiative, I was able to witness firsthand how children as youg as four and as old as high school seniors are hungry for more when it comes to programming. During this talk, we will explore what can be done from this point to encourage schools, teachers, and administration to continue (or begin) our youth's knowledge and experience with programming. As a nation, the United States is failing in the proper instruction of our children in the field of computer science. While employment for computer related fields is rising, and knowledge of the discipline is necessary no matter what the ultimate field of study or occupation of the student, only about two thirds of the states within the United States have computing education standards for grade levels K-12 (http://www.acm.org/runningonempty/roemap.html). As an educator (and a mother) I find this disturbing. A good work was begun by "Code.org" this past December, with more than 15 million students logging in to the site and working through the tutorials there. How can we promote and continue this initiative in our local schools and encourage up to date requirements for our students.	Inspiring a love of computer science through the education of our youth (abstract only)	NA	2014
Jian Zhang:Philip Sweany	The need for workers in the information technology and computing industry is on the rise. Code.org estimates that by 2020, there will be more that 1 million more computer jobs available than there will be computer science graduates to fill them. Efforts, by organizations such as the Computer Science Teachers Association (CSTA) and code.org, to attract students to information technology and computing appear to be working. While it appears that there will be students to teach, will there be qualified teachers to teach them? The CSTA report "Bugs in the System: Computer Science Teacher Certification in the U.S." asserts that the "certification/licensure processes for Computer Science in the U.S. are deeply flawed." The goal of this session is to bring together educators from the high school and college level to discuss what the CS Education community needs to do to address this problem.	Debugging teacher certification (abstract only)	NA:NA	2014
Peter H. Froehlich:Joanne Selinski	At many universities, computer science departments traditionally offer introductory programming as a "service course" to other departments. In recent years, however, more and more outside departments---apparently dissatisfied with the CS courses---have begun to offer their own versions of introductory programming. Our BOF will provide a forum to discuss this development and to exchange ideas for addressing it.	Introduction to programming for scientists and engineers (abstract only)	NA:NA	2014
Ming Zhang:Bo Li:Ginnie Lo	A key challenge for the Chinese educational system is the development of a CS1 course for non-major college students that can meet the unique environment in our country. In mainland China, CS1 is required of all freshmen at their first semester, approximately 7 million freshmen per year. We have named this CS1 course "Fundamentals of University Computer Science" to reflect our ambitions to bring our students to the cutting edge of information technology and society. Over the past few years, many Chinese universities have advanced and experimented with their ideas for introducing computational thinking into CS1, one of the most important core courses. In this BOF session, we want share our ideas and concrete solutions and to engage in dialogue with our international colleagues in order to enrich and improve our approach. This BOF Session is sponsored by the ACM China Subcommittee on Education.	China's perspective from the viewpoint of computational thinking on CS1 for non-majors (abstract only)	NA:NA:NA	2014
Elizabeth K. Hawthorne:Robert D. Campbell:Jim Nichols:Cara Tang:Cindy Tucker	At the direction of the Association for Computing Machinery (ACM) Education Board, the ACM Committee for Computing Education in Community Colleges (CCECC), has undertaken a project to produce IT curricular guidance which defines core IT competencies accompanied by well-designed assessment measures. To that end, the ACM CCECC convened a task force of subject matter experts from both academe and industry to define core IT learning outcomes which should be common to all associate-degree IT programs. Assessment consultants worked alongside these subject matter experts to create easy-to-use evaluation rubrics. The session will include an overview of the findings from this project including mappings to other curriculum models, as well as a discussion concerning curriculum, assessment and pedagogy of IT courses and programs at associate-degree granting institutions.	IT curricular guidance for associate-degree granting institutions (abstract only)	NA:NA:NA:NA:NA	2014
Nina Onesti:Saul Blanco:John Duncan:Mitja Hmeljak:Dan Richert	As educators want to try to find new ways to engage our students in and out of the classroom, allowing them to enhance their learning as well as their overall experience of the class. Active learning techniques challenge students to learn in a "non-traditional" way by developing critical thinking skills and having a little fun at the same time. While our students become more effective students, we can also become more effective educators, as we can quickly and accurately assess learning outcomes. In this discussion, you will hear from faculty members that currently use active learning in their classroom such as classroom assessment techniques (CATs) [4], Team-Based Learning (TBL) [5], and Just in Time Teaching (JITT). We will provide short in-session demonstrations of these activities, ending with time to consult with each other to select activities that will be good for every attendee's specific classroom.	CAT's: not just a furry friend. using active learning in your classrooms (abstract only)	NA:NA:NA:NA:NA	2014
Daniela Inclezan	Computer science students graduating in the next decade will face the big energy and environmental challenges of the 21st century. According to current trends, an increasing number of them will be employed in "green jobs" and will contribute to promoting biodiversity, minimizing the consumption of energy and materials, or restoring environmental quality. It is our job to prepare them for the task ahead. While the vast majority of textbooks and materials used in different areas of CS are oblivious to these problems, many resources can be found at the boundaries with other disciplines (e.g., environmental science, architecture, agriculture, etc.). Moreover, new computer applications are created every day for the analysis of current environmental problems and the evaluation of their possible solutions, but these applications are normally not mentioned in CS classes. This is a lost opportunity for engaging our students in the real world challenges we are facing today. Environmental problems can be addressed in the CS classroom in a way that does not impede the learning of the technical content, but rather increases students' ability to think critically about complex systems. This BoF intends to brainstorm innovative resources, examples, activities, and assignments that can be incorporated into the CS classes, in order to raise students' awareness to current ecological problems and, at the same time, illustrate the role computer scientists can play in solving them. For this BoF session, a laptop is optional.	Preparing computer science students for a sustainable future (abstract only)	NA	2014
William Richards Adrion	While it is exciting to see an increasing number of national efforts to reform computing education, such as those led by CSTA, Computing in the Core, ACM, NCWIT, code.org and many others, real change at the state, district and school level requires the active participation of individuals and local organizations to engage policy makers, superintendents and communities. The U.S. education system is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level -- with large differences between neighboring states. The system is organized along pathways of elementary schools, middle and high schools, community colleges, four-year colleges, and universities. A reform process for improving computing education pathways will take place at multiple levels and state by state. This birds-of-a-feather session will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change.	State-level advocacy for computing education reform (abstract only)	NA	2014
Adrian German:Suzanne Menzel:Joan Middendorf:John F. Duncan	After thirty years or more of the scholarship of teaching and learning (SoTL) many students still struggle to learn at the university level, while ever more techniques are being developed to help students learn and measure their success. In practice, however, efforts to reshape classes begin with questions such as: "How can I make use of this new technique?" Or, "How can I increase my students' critical thinking?" Such questions are often too broad to provide a clear focal point for designing efficient strategies. They sometimes draw attention to parts of the course not in great need of reform, and generally focus the process on the means (teaching) rather than the end (student learning). A shift is taking place in higher education so that teaching is approached not from content or from the teaching methods, but from the mental processes that are crucial to functioning in a discipline. Decoding the Disciplines (Middendorf & Pace, 2004) is an evidence-based, learner-centered methodology that can conclusively improve teaching by prioritizing what really matters in making meaning in a discipline and boosting learning outcomes in the classroom. It offers a meta-strategy, providing both a framework to define the task at hand and a means to determine which tools would be most useful in accomplishing it. Starting from the bottlenecks, the places where students get stuck, and connecting them with what experts do so they won't get stuck, the crucial mental processes drive the teaching and learning so students can be successful.	How to decode student bottlenecks to learning in computer science (abstract only)	NA:NA:NA:NA	2014
Jamie Payton:Tiffany Barnes:Jason Black:Cheryl Seals	The demand for computing professionals in the U.S. workforce is expected to increase over the next several years, while the number of students intending to major in computing has declined. In this BOF session, we focus on the use of service learning to address the growing concern of creating a sustainable pipeline for computing professionals, with an emphasis on broadening participation in computing. We center the discussion around our experiences with the STARS Computing Corps, which engages college students in service-learning to address the national computing talent shortage. The model has been shown to be effective in retaining college students in computing, and STARS alumni credit participation in STARS with helping to develop professional skills. This session will include interactive small group discussions on goals, obstacles, and strategies for applying service learning to broaden participation in computing, grow the K-12 pipeline, and prepare college students with skills demanded in the 21st century workforce.	Engaging college students in service learning to grow the K-12 computing pipeline and prepare the 21st century workforce (abstract only)	NA:NA:NA:NA	2014
Suzanne W. Dietrich:Don Goelman	Given the ever-growing importance of data across all disciplines, there is a need to enhance the fluency and comfort with data technology for a diversity of majors, not just technical ones. Which topics should be included in a data fluency course for all majors? A non-exhaustive list of possible topics includes spreadsheets, relations and relational databases, querying, conceptual design, bar graphs, charts, other data visualization, XML, and "Big Data." Join the discussion to brainstorm a data experience for students with diverse majors.	Data fluency: curricular issues for all majors (abstract only)	NA:NA	2014
Karl Wurst:Lori Postner:Stoney Jackson	Integrating Free and Open Source Software (FOSS) into our curricula can provide students with a rich, motivating learning experience that helps them develop technical as well as soft skills. However, integrating FOSS into curricula does have its challenges. This birds-of-a-feather (BoF) seeks to bring together faculty to discuss challenges, share resources, share solutions, and make connections. So, whether you are considering integrating FOSS into a class for the first time, or you are looking for ways to improve what you are already doing, this BoF is for you. Members of the Teaching Open Source (http://teachingopensource.org) and the foss2serve (http://foss2serve.org/) communities will help guide the discussion and be on hand for questions.	Teaching open source (software) (abstract only)	NA:NA:NA	2014
Debra Davis:Dave Berque:Janet Davis:Matt Jadud:Paul Resnick	With a growing awareness of the importance of Human Computer Interaction (HCI) and User Experience (UX) Design and Research in industry, many departments are examining ways to integrate this topic into their curriculum. What are the best ways to do this? Should HCI and UX be integrated into existing courses such as event-driven programming or mobile computing? Or should it be a separate course that integrates visual design, psychology and ergonomics? How important is this topic to students looking for internships and entry-level jobs? At what levels should these topics be taught in the curriculum? This is important as there is a growing demand in industry for User Experience specialists due to an increased focus on software quality and product success. A major complaint of employers is that this skill is lacking in many college graduates. Teaching computing students how to incorporate UX into the design and development process helps to address this critical need. This BOF will let participants share their ideas and learn from their peers. Some of the discussion leaders led a similar lively and enthusiastic discussion at SIGCSE 2013. Discussion spanned the role of HCI in the participants? various curricula; modules versus dedicated courses; projects versus standalone assignments; and textbooks, tools, and other pedagogical materials. Bringing together new and previous participants will bring new insights and expansion of these, including discussions of our recent experiences and lessons learned, as well as the broaching of new topics such as the roles of non-computing courses in HCI education.	Including HCI and user experience (UX) methodologies in computing curricula (abstract only)	NA:NA:NA:NA:NA	2014
Lillian Cassel:Lois Delcambre:Gregory Hislop	The Ensemble computing portal originated under the NSF NSDL program and enjoys the respect and continued interest of the computing education community. The project has reached a maturity level at which it is time to focus on the long-term viability of the activity. The original proposal included a commitment from the Villanova University library to adopt the system and keep in running in perpetuity. However, merely keeping the system running will not preserve nor extend the true promise of the project. That requires an active, engaged community. The leaders of the Ensemble project invite our partner projects and the SIGCSE community to join us in an initial meeting of an organization devoted to the continued development and support of the Ensemble vision: that of a community of educators sharing their best efforts, showcasing the best resources, and archiving materials that deserve long term preservation.	Ensemble: the sharing community (abstract only)	NA:NA:NA	2014
Chris Mayfield:Dennis Brylow	With initiatives like CS Ed Week, Code.org, and the AP CS Principles course, many educators are designing new and engaging ways to introduce students to computer science. But are we doing a good enough job presenting computer science as a field? Is it sufficient for prospective students to understand that CS is about creativity, abstraction, data, algorithms, programming, the Internet, and impact? Or should they also learn something about computer architecture, operating systems, networking and security, programming languages, software engineering, database systems, and so forth? This BOF will discuss how survey courses can meet the learning objectives of AP CS Principles, while providing a wealth of content knowledge that maps directly to undergraduate computer science programs.	Survey courses and AP CS principles (abstract only)	NA:NA	2014
Shiva Azadegan:Josh Dehlinger:Siddharth Kaza	Computer Science (CS) educators are constantly reinventing introductory and advanced courses contextualized with new technology to better engage, retain students and increase their learning and motivation. Mobile and wearable computing are the most recent examples. However, while it is important to attract students into CS, it is equally vital to sustain student motivation by using pedagogical approaches contextualized to how students learn throughout the curriculum without losing fundamental, core concepts. Many educators have developed one-off courses employing new technology or a project-driven approach to engage students and transfer ready industry skills. Yet, too few have woven a combination of pedagogical approaches sensitive to how students learn with in-demand technology and skills contiguously throughout the upper-level curriculum and tied it to opportunities outside of the classroom. To ensure that CS educators are not simply adopting the newest technological fad at the expense of students learning and fundamental, core CS concepts, the CS education community must understand how mobile computing technology can be successfully leveraged to change education through measured, contextualized pedagogical approaches. To start facilitating this dialog, this Birds of a Feather session will provide a platform for the discussion of how mobile computing has been successfully (and unsuccessfully) incorporated into CS courses; the mobile platforms and tools used; and, the pedagogical utility of using mobile computing as a learning intervention. This project is partially supported by NSF DUE#1140781.	Incorporating mobile computing into the CS curriculum (abstract only)	NA:NA:NA	2014
Sushil K. Prasad:Almadena Chtchelkanova:Anshul Gupta:Arnold Rosenberg:Alan Sussman	Parallelism pervades all aspects of modern computing, from in-home devices such as cell phones to large-scale supercomputers. Recognizing this - and motivated by the premise that every undergraduate student in a computer-related field should be prepared to cope with parallel computing - a working group sponsored by NSF and IEEE/TCPP, and interacting with the ACM CS2013 initiative, has developed guidelines for assimilating parallel and distributed computing (PDC) into the core undergraduate curriculum. Over 100 Early-Adopter institutions worldwide are currently modifying their computer-related curricula in response to the guidelines. Additionally, the CDER Center for Curriculum Development and Educational Resources, which grew out of the working group, is currently assembling a book of contributed essays on how to teach PDC topics in lower-level CS/CE courses, to fill the serious lack of textual material for students and instructors. This session is intended: (i) to report on the current state of this initiative; (ii) to bring together authors of book chapters and Early Adopters and other interested parties for discussions on ongoing activities and needs; (iii) to discuss the initiative and collect direct feedback from the community.	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates (abstract only)	NA:NA:NA:NA:NA	2014
Michael S. Kirkpatrick:Leo Porter	There is a growing body of evidence showing active learning pedagogies are effective for ensuring long-term student learning, reducing course failure rates, and retaining majors. While active learning pedagogies are more often employed in lower divisional CS courses, systems classes-such as OS, architecture, and networks-are just beginning to see a shift from standard lecture to active learning. This BOF will provide a forum for sharing ideas of how to integrate active learning techniques into systems courses, using the following questions as starting points: What are active learning techniques, and how are they used? What impact does active learning have on coverage? Must adoption of active learning techniques entail abandoning lectures entirely? If not, how can I use active learning to augment, rather than replace, my lectures? What transitional steps can I take toward active learning methodologies? If you've tried active learning techniques, what results have you seen?	Integrating active learning techniques into systems courses (abstract only)	NA:NA	2014
Richard Weiss:Michael E. Locasto:Jens Mache:Elizabeth Hawthorne:Justin Cappos	We see teaching information security through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have tried require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have used hands-on exercises and those who would like to. We recognize that few CS programs can afford new required courses, so we would be discussing ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering and algorithms. The questions we will ask are, "What exercises, if any, have you tried" What are your experiences? What are you looking for?	Teaching security using hands-on exercises (abstract only)	NA:NA:NA:NA:NA	2014
Douglas E. Harms	Many computer science students and faculty want to participate in service projects; these projects might include service learning in the classroom, service experiences in the local community, or service projects at a domestic or international site. Developing service projects that incorporate computer science and/or technology skills that are both interesting and meaningful often presents a challenge. During this BOF participants will discuss and answer questions about service projects in which they have participated, their successes and failures, techniques for finding appropriate partners, logistical issues, etc. This session will be helpful to faculty having no prior service experience, as well as veteran faculty who have organized multiple service trips.	Community engagement and service learning opportunities in computer science (abstract only)	NA	2014
Daniel D. Garcia:Dan Armendariz	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, PandaGrader, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users' Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2014
Rebecca Bates:Judy Goldsmith:Valerie Summet:Nanette Veilleux	Are you interested in incorporating some of your favorite science fiction in your classes? Did you know it can help improve student interest in the technical topic? Come join us as we talk about ways to connect SciFi to artificial intelligence, robotics, networking, intellectual property, and other topics. We'll start with overviews of how we've used SciFi and have plenty of time for discussion of new works and old that connect to the material we need to cover, while drawing students into the content and the field.	Using science fiction in CS courses (abstract only)	NA:NA:NA:NA	2014
David Hovemeyer:Jaime Spacco:Robert Duvall:Stephen Edwards:Amruth Kumar:Andrew Petersen:Daniel Zingaro	Short, automatically-assessed programming exercises, and other types of short practice problems, are a useful way to introduce and reinforce concepts and techniques in introductory programming courses. When delivered over the web, they allow students to learn and practice, with immediate feedback, at any time and place where they have access to a web browser. However, such exercises do not seem to be as widely used as they could be. Similarly, there is not a lot of literature on the effectiveness of these types of problems. The purpose of this BOF is to bring together users (and potential users) of programming exercises with developers of programming exercise systems to discuss how exercises could be used more widely and effectively. Possible discussion topics include: What features are absolutely essential for faculty to consider adoption? What are the major obstacles preventing more widespread adoption? Are faculty willing to share their exercises under an open/non-commercial license? Should exercises best used for extra practice, as graded assignments, or both?	Using and sharing programming exercises to improve introductory courses (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Peter-Michael Osera:Brent Yorgey	Induction is a notoriously difficult topic for beginning computer science students to understand. Even if they can produce an inductive proof of some mathematical fact, many students never see the relevance of inductive reasoning outside of the classroom for anything beyond the natural numbers. This is unfortunate because inductive reasoning is closely intertwined with algorithm design and one of the cornerstones of reasoning about (recursive) programs. With the adoption of functional programming into the CS curricula core, it is a good time to revisit how we teach induction and try to make more explicit this fundamental connection between inductive reasoning and recursive programming. In this BoF session, we will discuss curriculum, strategies, and fun examples for teaching induction with an eye towards giving induction tangible and practical relevance for the computer science undergraduate.	Making induction meaningful, recursively (abstract only)	NA:NA	2014
Martin Stepp:Jessica Miller	Several times in the past few years we have held BoF sessions about teaching web programming at the college level. Our feedback indicates that the most valuable aspect of the past sessions was simply to get everyone together for an exchange of ideas and information, so this will be the focus of the session again. We'd like to bring together two groups of web programming instructors: Newcomers who have not yet taught this material before (or are just starting) and want to soak up information, and veterans who have now taught it and have insights to share with the group. Newcomers can ask questions about materials, languages and technologies to use, what works and what doesn't, and so on. Veterans can share tips from the classroom and helpful resources. We can also discuss the latest technologies such as HTML, ECMAScript/JavaScript, iPhone/iPad, Android, and web application frameworks such as Node.js, Rails, AngularJS, and more.	Web programming (abstract only)	NA:NA	2014
Stephanie E. August:Jungwoo Ryoo	MOOCs, 3D virtual world environments, game-based learning, simulations, digital story telling, and other learning-focused digital interactions hold tremendous potential for presenting information science concepts and problem-solving strategies to the generations of the 21st century. We use them to present both theoretical and practical concepts in an engaging manner, tailored to specific age groups and at many levels of abstraction. An abundance of recent projects have examined these individually and brought to light many common concerns. This session explores several interrelated questions: How can these varied activities can be integrated to effectively teach programming concepts, problem solving strategies, and programming skills at age- and discipline-appropriate levels? Do interactive digital simulations and visualizations facilitate construction of the mental models underlying computing concepts? What assessments will be effective in determining whether we are achieving our knowledge- and skill-related goals? How are these tools related to student learning styles and learning objectives? How can these artifacts be disseminated and sustained in the context of dynamic delivery platforms? This brainstorming session is an opportunity to share ideas and explore future collaborations.	Can 3D virtual world environments and game-based learning effectively teach computer science concepts? (abstract only)	NA:NA	2014
Yan Bai:Xinli Wang	With NSF funding, we have developed a collection of instructional laboratories to enhance the security component in IT education. The labs are developed with a layered and modular design that can be tailored for different courses, accommodating new tools and being conducted in various environments with minimum modifications. This workshop introduces to participants these labs and the environment to conduct them. The workshop proceeds in four sessions in which we: 1) introduce the labs, techniques and environment; 2) demonstrate a lab; 3) guide participants to practice with a lab, 4) debrief. The intended audience is educators who teach IT security courses or other courses with security components at colleges or universities. Experience is not required. Each participant receives an electronic version of 1) the lab assignments that we have developed and used in our teaching practice, and 2) preconfigured virtual machines and tools used to conduct the labs. Laptop required.	ITSEED: hands-on labs for IT security education (abstract only)	NA:NA	2014
Tiffany Barnes:Veronica Catete:Andrew Hicks:Barry Peddycord	The new CS Principles curriculum, a pilot Advanced Placement course, offers novice students an exciting opportunity to learn computing in a hands-on, fun way. High school and college teachers of introductory computer science course are invited to this workshop to learn basic game and mobile phone development. Participants will learn GameMaker, AppInventor, and Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. Participants should bring their own laptops (ideally with AppInventor installed). Windows 7 phones will be provided during the workshop. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course.	Making games and apps in introductory computer science (abstract only)	NA:NA:NA:NA	2014
Valerie Barr:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF proposals: learn about effective proposal writing via the review process (abstract only)	NA:NA	2014
Peter J. Clarke:Yujian Fu:James Kiper:Gursimran Walia	NA	Integrating software testing into programming courses (WISTPC 2014) (abstract only)	NA:NA:NA:NA	2014
Greg Wilson:Fernando Perez:Peter Norvig	The IPython Notebook is an interactive browser-based environment where you can combine code execution, text, mathematics, plots, and rich media into a single document. Originally designed for use as an electronic lab notebook for computational science, it is increasingly being used in teaching as well, and a rich ecosystem of open source plugins and extensions for teaching is growing around it. The first half of this hands-on workshop will introduce the Notebook and present examples of lessons and instructional materials built around it. In the second half, attendees will explore future directions for the Notebook as a teaching platform. For more information, please view our GitHub repository online at https://github.com/gvwilson/sigcse2014-ipython-workshop.	Teaching computing with the IPython notebook (abstract only)	NA:NA:NA	2014
Xumin Liu:Rajendra K. Raj:Thomas J. Reichlmayr:Alex Pantaleev:Chunmei Liu	NA	Teaching service-oriented programming to CS and SE undergraduate students (abstract only)	NA:NA:NA:NA:NA	2014
Vicraj Thomas:Niky Riga:Sarah Edwards	This hands-on workshop will introduce GENI to instructors of computer networking and distributed systems classes. Instructors can use GENI [http://groups.geni.net/geni/wiki], an easy-to-use virtual laboratory, to improve the educational experiences of their students by having them experiment with new concepts without requiring expensive laboratory facilities. It has been used by over twenty graduate and undergraduate classes. GENI is being used by over 1200 researchers and educators. It enables them to run large-scale, well-instrumented, end-to-end experiments engaging real users. These experiments may be fully compatible with today's Internet, variations or improvements on today's Internet protocols, or indeed radically novel "clean slate" designs. GENI includes compute and communications resources distributed across the United States. GENI is "deeply programmable" i.e. experimenters can install their custom software or operating systems on the compute nodes and can program the behavior of the switches that connect these nodes. GENI is funded by the National Science Foundation and is free to use for research and education. Workshop participants will have the opportunity to set up and run experiments using GENI. They will also learn about class logistics when using GENI and support resources such as ready-to-use exercises. Those doing the hands-on activity will need a laptop running relatively a recent version of Mac OS, Windows or Linux; at least 4GB of memory; a modern processor (at least dual core and faster than 1.5 GHz) and a WiFi interface.	GENI as a virtual laboratory for networking and distributed systems classes (abstract only)	NA:NA:NA	2014
Sarah Monisha Pulimood:Kim Pearson:Diane C. Bates	Innovative solutions for complex problems entail diversity of perspectives, and students must learn to integrate concepts from multiple disciplinary areas. Yet, to provide collaborative experiences that cross disciplinary boundaries, educators must navigate numerous administrative and pedagogical challenges. In this hands-on workshop participants will learn how to leverage existing courses for students and faculty to collaborate across disciplines and with a community partner, to develop socially-relevant computational solutions for real-world problems. Participants will also brainstorm ideas on addressing specific challenges at their own institutions. The intended audience is educators interested in engaging their students in deep computational thinking through immersive multidisciplinary collaborative experiences. Registered participants will be reimbursed the workshop registration fee through NSF Award# 1141170. We will additionally offer a stipend to participants who adopt our model, administer assessments and provide us with their results for analysis and inclusion in reports. More information will be available at http://tardis.tcnj.edu/cabect/. Laptop Recommended.	CABECT: collaborating across boundaries to engage undergraduates in computational thinking (abstract only)	NA:NA:NA	2014
Robert Lutz:Evelyn Brannock	This workshop provides an introduction to three-dimensional (3D) printing. This tutorial will: cover the general background of 3D printing, summarize popular software tools, describe associated challenges and offer suggestions for application within computer science (CS) coursework. Participating CSE educators will get hands-on experience with 3D printing tools and will be able to print a limited number of items during the workshop. Attendees will perform a full lifecycle exercise in the printing workflow, progressing from a concept, to a digital model, to a physical implementation. The workshop will also describe the authors' experience integrating this authentic learning into several IT and CS courses. Experience gained will be useful after the session in both printer and printer-less environments. See http://tinyurl.com/k65jxsm for more information. Laptop required.	Enhancing computer science education (CSE) with the use of 3D printer technology	NA:NA	2014
Mark C. Lewis:Konstantin L√§ufer:George K. Thiruvathukal	Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at #12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library. Participants are strongly recommended to bring a laptop.	Scala for introductory CS and parallelism(abstract only)	NA:NA:NA	2014
Andrea F. Lobo:Ganesh R. Baliga	This workshop presents an award-winning, NSF-funded, project-based curriculum for algorithm design that includes algorithmic strategies for intractable problems. This curriculum is a sequence of laboratory projects comprising increasingly sophisticated solvers for a single intractable problem, designed to integrate into existing, one-term, undergraduate courses that teach algorithm design and/or intractability without sacrificing traditional course content. The presenters have used the curriculum in the Design and Analysis of Algorithms course at their institution to help students tackle and appreciate intractability. This workshop presents versions of the curriculum centered on TSP, SAT and Sudoku. Attendees will receive adoption materials and access to an adopters' forum. NSF is funding the development, evaluation, dissemination and adoption of the curriculum. Potential adopters are encouraged to apply for funding to attend this workshop and SIGCSE 2014 at http://www.rowan.edu/~lobo/AlgosCurriculum. This material is based upon work supported by the National Science Foundation under Grant No. 1140753. Laptop optional.	Teach algorithm design and intractability with a project-based curriculum centered on a single intractable problem: three domains to choose from (abstract only)	NA:NA	2014
Gail Chapman:Joanna Goode	The ECS program includes an inquiry-based college-preparatory curriculum that introduces students to the creative nature of computing, technology as a tool for solving problems, and the relevance and impact of CS. This workshop will provide participants the opportunity to engage in activities from the ECS curriculum that highlight the six computational practices common to ECS and CS Principles. We will explicitly model the inquiry-based design of the activities and facilitate discussions that highlight how inquiry manifests itself in the computational practices. This workshop is appropriate for K-12 educators and college/university faculty who are interested in deepening their understanding of how teacher pedagogy is critical to broadening participation in computing. Laptop Optional.	Exploring computer science: computational practices in action (abstract only)	NA:NA	2014
Joel C. Adams:Richard A. Brown:Elizabeth Shoop	Curriculum 2013 brings parallelism into the CS curricular mainstream. This hands-on workshop is intended for faculty with little or no background in parallel computing. OpenMP is a platform independent, industry-standard library for shared-memory parallel programming supported by all modern C and C++ compilers. The workshop introduces the basics of OpenMP multithreading using parallel patterns, including single program multiple data (SPMD) execution, fork-join threading, and pragmas for parallel loops, parallel blocks, mutual exclusion, etc. The workshop includes: (i) an overview of OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how these may be used to achieve the goals of Curriculum 2013. Workshop materials will be distributed from csinparallel.org. Participants will receive and explore 15 short programs designed to help students understand multithreading concepts, plus longer programs that use OpenMP to solve significant problems. A participant may explore these programs on their own laptop, provided it has installed a C/C++ compiler that supports OpenMP (e.g., gcc 4.2 or later; Visual Studio 2008 or later). Those comfortable with the command-line may explore the programs on our remote servers using a laptop or tablet with a suitable SSH client. Laptop recommended.	Teaching shared memory parallel concepts with OpenMP (abstract only)	NA:NA:NA	2014
Eli Tilevich:Clifford A. Shaffer:Austin Cory Bart	This workshop introduces participants to RealTimeWeb, a technology developed under the auspices of an NSF-funded project at Virginia Tech. RealTimeWeb is a software architecture framework that makes real-time web data, such as weather reports, news updates, and restaurant recommendations, accessible for introductory programming projects. The presented technology offers technical scaffolding for the students to gradually ease into (or completely circumvent if appropriate) some of the most vexing complexities of distributed computing. At the heart of RealTimeWeb are carefully engineered client libraries through which students can access the data provided by real-time web services. To support computing educators teaching introductory CS classes in a variety of programming languages, each library is available in Python, Java, and Racket, with compatibility on key platforms, including Android. These libraries are readily available through an online curated gallery, designed to be quickly adapted to instructors' specific academic needs. This gallery also provides a tool for rapidly prototyping new libraries based on our framework. RealTimeWeb enables computing educators to introduce important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. This workshop introduces RealTimeWeb via a hands-on approach by introducing participants to the core functionality of our architectural framework and client libraries. The workshop proceeds in three parts in which we: (1) present RealTimeWeb by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants' choice; and (2) critically discuss the technology in small and large groups. Further information is at: http://research.cs.vt.edu/vtspaces/realtimeweb/	Creating stimulating, relevant, and manageable introductory computer science projects that utilize real-time web-based data (abstract only)	NA:NA:NA	2014
Brian Magerko:Jason Freeman:Christopher Michaud:Michael Reilly	Our work has focused on how to create a learning experience that is highly personally motivating for students, has a low barrier of entry for creation an artistic computational artifact, and is scalable for use in formal and informal education settings at the national level. We have created a learning environment called EarSketch that addresses student engagement through a STEAM learning experience that provides authentic learning in both the technical (i.e. computing) and artistic domains (i.e. music remixing). EarSketch is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will use Python to place audio clips, create rhythms, and add and control effects to a multi-track digital audio workstation (DAW) while learning computing concepts such as variables, iteration, conditionals, strings, lists, and functions. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation. EarSketch has been used in introductory computing summer camps, secondary school classes, and is currently working towards integration with CS Principles pilot programs. All participants will need a laptop for running the EarSketch software. EarSketch will run on OSX and Windows laptops. Participants will also need headphones for listening to projects created using EarSketch. It is highly suggested that participants download the EarSketch installer at http://earsketch.gatech.edu/downloads and install the software prior to the workshop.	Computational music remixing with EarSketch (abstract only)	NA:NA:NA:NA	2014
Victor T. Norman	Participants will learn how to install Scratch, the Xbox Kinect libraries, and the software that integrates the two. The participant will then practice basic Scratch programming, and then learn how to program Scratch when connected to an Xbox Kinect. Five programming challenges will be given to participants, ranging from easy to difficult. During these activities, the participants will experience the excitement of using their bodies (instead of a mouse and keyboard) as the program controller. Discussions will be held to think about human-computer interactions, standard interaction models, etc., as well as how to help students engage more deeply with computer programming activities. Participants will work in teams of 3 or 4 using participant-supplied laptops running Windows 7.	Scratch + Xbox Kinect: a magical combination for outreach (abstract only)	NA	2014
Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()).	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2014
Darci Burdge:Lori Postner:Becka Morgan:Heidi J.C. Ellis:Stoney Jackson:Gregory W. Hislop:Michelle Purcell	Have you ever wanted your students to contribute to or learn from a real-world software project that benefits society? Want some help getting started? Many students find involvement in Humanitarian Free and Open Source Software (HFOSS) projects engaging and motivating. As a first step, this workshop will introduce faculty to FOSS tools and culture. Through a virtual field trip into the world of HFOSS you will learn how to find a project, discern characteristics of a good project for student participation and understand how to use IRC, a communication tool used by FOSS developers. The use of version control to support project development will also be discussed. Along the way, you will learn how to support student learning in such projects. All topics will be covered at an introductory level. Participants will take away exercises that can be used in the classroom. Additionally, participants will have access to support in the creation of assignments or curriculum and their implementation from teachers experienced in supporting students in HFOSS participation. Additional information at: http://www.foss2serve.org/index.php/SIGCSE_2014_Workshop Laptop required.	Teaching with HFOSS to provide students with real world experience: an introduction (abstract only)	NA:NA:NA:NA:NA:NA:NA	2014
Clifton Kussmaul:Helen H. Hu:Matthew Lang	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. POGIL is based on learning science, and shares characteristics with other forms of active, discovery, and inquiry learning. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. POGIL has particular potential for CS education. Software development is largely a team-based problem-solving activity, and POGIL helps students to learn from each other and develop problem-solving abilities as well as important team process skills. POGIL has been developed and validated over the last 15 years in a range of STEM disciplines. The workshop consists primarily of hands-on team activities. Workshop participants will experience POGIL activities, learn core practices, and draft activity pieces. POGIL materials for a variety of CS concepts will be shared. More information and materials are available at http://cspogil.org and http://pogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional. This material is based upon work supported by the National Science Foundation under grant DUE-1044679.	Guiding students to discover CS concepts and develop process skills using POGIL (abstract only)	NA:NA:NA	2014
Franklyn Turbak:Fred Martin:Shaileen Crawford Pokress:Ralph Morelli:Mark Sherman:David Wolber	Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.	Mobile computational thinking with app inventor 2 (abstract only)	NA:NA:NA:NA:NA:NA	2014
Frank Klassner:Benjamin Schafer	This workshop will conduct an exploration of the newly released Lego Mindstorms EV3 robot platform and its applicability to the college computer science curriculum. Participants will learn about the EV3 through handouts and hands-on programming exercises. The first part of the workshop will focus on demonstrating EV3 robots as well as the STEM concepts and computing concepts they illustrate. The second part of the workshop will focus in on the new capabilities of the EV3. This workshop will be more detailed than the vendor led workshop. It will be of benefit to participants new to Mindstorms robotics as well as those with NXT/RCX experience who want to see the evolution of the platform and new components featured in the EV3. These include a revision of the controller brick hardware and software, new color and gyroscopic sensors, and increased processing and memory capabilities. The organizers have a combined 20 years of experience using Mindstorms in CS courses (including courses in introductory programming, systems, and artificial intelligence) with Lego and third party programming environments. Participants must bring a Bluetooth-capable laptop (Mac or Windows), and will have a robot, software, and kit to use for the workshop. Participants will receive a promotion code to purchase a 10% discounted Mindstorms kit.	Using the new lego MindStorms EV3 robotics platform in CS courses (abstract only)	NA:NA	2014
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Dan Armendariz:Jon McKinsey:Zachary MacHardy:Omoju Miller:Barry Peddycord, III:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Richard Weiss:Jens Mache:Michael E. Locasto:Vincent Nestler	Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to provide faculty with tools and interactive exercises that would facilitate adding this topic to their curriculum. We will introduce the EDURange framework for developing interactive cybersecurity exercises. We have several exercises for participants to try, including network scanning and firewall configuration. We will give an introduction to some tools such as nmap, as well as the basic concepts. We have tested our framework several times in classrooms and workshops for students and faculty. One of its advantages is that faculty can use it in their classes with very little set-up. It uses Amazon's EC2/AWS to make the exercises readily available, so instructors will be able to access them with an account. We will also discuss other security exercises, including ones in the RAVE. It also provides each user with a number of VMs with tools and vulnerabilities. We will discuss using exercises as assessment tools. No previous experience in security is necessary. Laptop required. http://blogs.evergreen.edu/edurange	Hands-on cybersecurity exercises in the EDURange framework (abstract only)	NA:NA:NA:NA	2014
Ariel Ortiz	Node.js is one of the hottest open source web platforms currently available. It's built on Google Chrome's V8 JavaScript runtime engine and it allows you to write all kinds of network applications and servers in just a few lines of code. Node.js uses an asynchronous programming model built on non-blocking I/O and a single-threaded event loop. What this means, basically, is that you don't need to be concerned with awful race conditions or synchronization issues that arise when programming for a concurrent multi-user environment. This workshop is aimed mainly at web development instructors that would like to consider teaching a single programming language, JavaScript, for both client-side and server-side coding. Participants will learn how to employ Node.js on Windows, Mac OS or Linux in order to write scalable web servers and applications. Additionally, the Express web framework will be introduced in order to demonstrate how to quickly program traditional webapps and single-page applications (SPA) with the aid of jQuery, AJAX and RESTful web services. The resulting programs will be usable from any modern web browser, including those found in desktop and laptop computers, and mobile devices such as tablets and smart-phones. Participants should have prior working knowledge of client-side (running on a browser) JavaScript and HTML. More information: http://node.arielortiz.info/ Laptop Required.	Server-side web development with JavaScript and Node.js (abstract only)	NA	2014
Adam Norton:Holly Yanco	This workshop introduces participants to the Artbotics program, which combines art and robotics to teach students about computer science while creating kinetic, interactive sculptures. The material covered will be provided in introductory fashion, requiring no prior experience with computer science, art, or robotics. The Lego Mindstorms NXT platform will be used to create two projects during the workshop: a spirograph-like drawing produced by programming a car holding a marker to drive using a sequence of motor movements (teaching the need for looping in programming) and an interactive, kinetic sculpture that reacts to sensor input (teaching the need for decisions in programming and building simple mechanisms). Examples of both projects can be seen at youtube.com/artbotics. The workshop will end with a short discussion of lessons learned and best practices, using examples from previous Artbotics programs for a variety of ages. Topics will include appropriate time frames, how to best use limited resources, and appropriate levels of depth for each age group. The workshop administrators will be providing laptops with the proper Lego Mindstorms NXT software, Lego Mindstorms NXT kits, and all needed building materials.	Artbotics with lego mindstorms (abstract only)	NA:NA	2014
Robert Glen Martin:Paul Tymann:Lester Wainwright	The Advanced Placement (AP) Computer Science (CS) A Development Committee is replacing the large case study (GridWorld) with a hands-on structured lab component with the following characteristics: At least three labs explore computing in context at a significant level, building upon supplied code that provides examples of good style and appropriate use of programming language constructs. -- Each lab contains a significant problem-solving component in which students study alternative approaches for solving a problem, solve new problems, or modify existing code to solve altered problem. -- At least one lab provides students with experience working with programs involving multiple interactive classes and may involve decomposing a program into classes and using inheritance, interfaces, and other object-oriented concepts as identified in the AP Computer Science A topic outline. -- Collectively, lab experiences will cover at least 80% of the topics listed in the course description and will involve at least 20 hours of class time. In investigating the use of labs, the AP CS A program developed three labs that cover many introductory topics and may be used at various times throughout a course. Since these labs cover many basic concepts and perspectives, the labs are appropriate for both AP CS A courses and many college CS1 courses. This workshop will introduce teachers to the AP CS A lab materials and provide practical experience in using these materials within introductory courses.	Using the AP CS labs in the classroom (abstract only)	NA:NA:NA	2014
Peter Drake:Mark Goadrich	The Learn Java in N Games project (LJING) aims to teach topics in CS1, CS2, and other courses by having students implement a variety of games. Each game is presented as a stand-alone module, easily incorporated into an existing course without committing to major curricular changes. Modules include unusually clear solution code, skeleton code for students to complete, JUnit tests for quick feedback to students and automated grading, and clear assignment statements with learning objectives. Program code strictly separates game logic from graphic user interfaces (GUIs), allowing the same code to be used in both conventional and mobile Android environments. In this three-hour tutorial, participants will complete two assignments. These assignments are ready to be used in classes the next day.	Learn Java in N games (abstract only)	NA:NA	2014
David P. Bunde:Kyle Burke	Chapel is a programming language being developed for high-performance applications. It is well suited for teaching parallelism in a wide variety of undergrad courses. Chapel is easy to learn since it supports a low-overhead style like a scripting language as well as a full OO style. It is concise, needing a single keyword to launch an asynchronous task, run a parallel loop, or perform a reduction. This helps undergrads focus on the main point of examples and lets them quickly try different parallel algorithms. It is also versatile, usable on both multicore systems and clusters. In this workshop, attendees will learn basics of Chapel, complete hands-on exercises, and see possible uses in algorithms, programming languages, and parallel programming courses. Laptop with SSH client required.	Chapel: a versatile tool for teaching undergraduates parallel programming (abstract only)	NA:NA	2014
Neil Christopher Charles Brown	The Blackbox project, launched in 2013, collects large amounts of data about beginner student behaviour in the BlueJ IDE. In this this workshop, we will introduce researchers to the Blackbox data and show them how to get started with analyzing it to answer their own research question(s). The workshop provides an ideal opportunity to find out what can be done with the Blackbox data, and will be run by the system's architect and maintainer. The data set includes Java source code as well as information about compilations, debugger usage and other compiler interactions. The Blackbox project has over 150,000 users, over 10,000,000 compilations and tens of gigabytes of source code. (For more detailed information, see the paper "Blackbox: A Large Scale Repository of Novice Programmers' Activity" by Brown et al. in the SIGCSE 2014 proceedings.) Computing education researchers may apply for free, permanent access to the data, but is not necessary to do so before this workshop. The session will be hands-on, and participants should bring a laptop that is capable of running an SSH terminal (e.g. Mac OS X, Linux, or PuTTY on Windows) over a wireless connection.	Introduction to analysing the BlueJ blackbox data (abstract only)	NA	2014
Blair Taylor:Siddharth Kaza:Elizabeth Hawthorne	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing secure coding in CS0, CS1, and CS2 (abstract only)	NA:NA:NA	2014
Barbara J. Ericson:Christopher Michaud:Xin Xu:Krishnendu Roy	This workshop will provide details on the projects that we recommend for non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective at improving attitudes towards computing, especially for females and African-American students. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor. Georgia Tech has also helped eleven other colleges and universities in Georgia start or expand computing summer camps. Some of these other institutions also offer camps on GameSalad, GameMaker, and web development. These other camps have also improved attitudes towards computing. The workshop will include an overview of the projects that we have found to be successful and include hands-on work with App Inventor, GameSalad, LEGO NXT robots, and LEGO EV3 robots. laptop optional	Projects for computing summer camps for 4th-12th grade students (abstract only)	NA:NA:NA:NA	2014
Brian Harvey:Daniel D. Garcia:Tiffany Barnes:Nathaniel Titterton:Omoju Miller:Dan Armendariz:Jon McKinsey:Zachary Machardy:Eugene Lemon:Sean Morris:Josh Paley	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses, especially the AP CS: Principles course. SNAP! (Build Your Own Blocks) is a free, browser-based, graphical, drag-and-drop language inspired by Scratch. The beauty of the Scratch programming environment, designed for 8-14 year olds, is that it makes abstract concepts more concrete and understandable to a broader audience. SNAP! extends Scratch to support older learners (14-20) with built-in named procedures (thus recursion), procedures as data (thus higher order functions), structured lists, and sprites as first class objects with inheritance. Participants will learn SNAP! hands-on. See http://snap.berkeley.edu for details. Network connected laptop required.	Snap! (build your own blocks) (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2014
Raja Sooriamurthi:Nickolas J.G. Falkner:Ed Meyer:Zbigniew Michalewicz	Puzzle-based learning (PBL) is a new and emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles and games. What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.	Puzzle-based learning: introducing creative thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA:NA	2014
James Cross:Dean Hendrix:David Umphress	This workshop will focus on using the new jGRASP viewer canvas which provides an exciting new dimension to dynamic program visualization. The canvas allows students and instructors to organize dynamic viewers of multiple objects and primitives to quickly form coherent program visualizations. Students can quickly build and save visualizations of their own programs, and faculty can create visualizations and provide them to students with example programs. "Playing" a program in canvas mode brings the visualization to life as objects come into scope and the canvas is updated automatically. All educators who teach Java will benefit from this workshop. It will be especially suitable for instructors who teach CS1 (introduction to programming), CS2 (introduction to data structures), and CS3 (introduction to algorithms), as well as for instructors of AP courses in high schools. jGRASP is a freely available educational IDE (http://www.jgrasp.org/); no prior experience with jGRASP is expected. Laptop required.	Dynamic program visualizations for Java (abstract only)	NA:NA:NA	2014
Jessica Hodgins	Universities have traditionally drawn firm lines between classes in art and those in technology based fields such as computer science, placing them in separate departments, schools, and colleges. Human resources departments of companies have drawn similar lines between their "creative" and their "tech" employees, recruiting from different universities and creating different job titles and pay structures. In this talk, I will argue that the leaders of the next generation are going to be "hybrids" who each contribute to both sides of the art and tech divide and find it natural to interact and collaborate with co-workers with varied and mixed educational and work backgrounds. As an example of this style of education, I will report on an interdisciplinary course entitled Animation Art and Technology, which I have co-taught with Professor James Duesing in the School of Art for the past ten years at Carnegie Mellon University. The students are an interdisciplinary mix drawn from the traditional majors of art, computer science as well as a computer science and art bachelors degree program. The class produces four or five animations each semester, most of which have a substantive technical component, and the students are challenged to consider content innovation as equal to the technical aspects of their projects. Building on this style of education, Carnegie Mellon has recently created a program called IDeATE (Integrative Design, Arts and Technology Network) that offers a variety of minors and concentrations to students interested in blending art and technology in a variety of ways. 120 students enrolled in the first year indicating that the students recognize the need for these "hybrid" skill sets. As an example of the success of these efforts in industry, I will report on several research projects completed at Disney Research that would not have been possible without the highly collaborative efforts of teams of creative and techies.	Educating for Both Art and Technology	NA	2015
Frank H. Young	This talk will discuss the value and benefits of volunteering - to one's career, to one's profession, and to one's life.	Paying Back and Paying Forward	NA	2015
Mark Allen Weiss	The "Data Structures" course is arguably one of the most important for computer science majors. In this talk, I will discuss how this course has evolved over the last three decades, and discuss some topics we might want to start thinking about in the next decade.	Data Structures Courses: Past, Present, and Future	NA	2015
Keith N. Hampton	Digital technologies are increasingly an ubiquitous part of everyday communication. These technologies offer contact with friends and family that is both persistent and pervasive. Social ties that at one time would have gone dormant, or vanished entirely, are now made persistent through social media. As we transition through different jobs, neighborhoods, schools, and communities our social ties remain. Contact is no longer reliant on the occasional phone call and holiday card, but has a persistent presence on our screens and through our mobile devices. What are the benefits and the consequences of being connected? Are our relationships more committed? What impact will these emerging developments in computing have for society? It has been said that these technologies offer new opportunities for democratic participation, that they support collective action, and give marginalized individuals a voice. Social capital, once lost through the dormancy of ties, hidden as a result of infrequent contact, can be made visible through the persistent and pervasive nature of these new media. Yet, the practice of social media may not live up to its hype; they may contribute to social isolation, stress, and disengagement. Based on a series of large-scale studies of where people connect, who they connect with, and what they discuss, this presentation explores contradictory evidence of how digital technologies are related to social capital, democratic engagement, and the fear and joy that we may all be missing out.	Connected, Committed and Social?: The Consequences of Computing for Relationships	NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Jason Freeman:Brian Magerko:Regis Verdin	EarSketch (http://earsketch.gatech.edu) is a free integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. EarSketch students write code in either Python or JavaScript to make music, with a focus on popular genres such as hip hop and dubstep, while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Attendees to this demonstration session will be introduced to a new web-based version of EarSketch that integrates a code editor, digital audio workstation (DAW) music production interface, curriculum browser, and sharing service into a single integrated browser-based learning environment. This demo is of interest to secondary and early post secondary CS educators and to computing education researchers interested in STEAM and/or broadening participation. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required.	EarSketch: A Web-based Environment for Teaching Introductory Computer Science Through Music Remixing	NA:NA:NA	2015
Jake Trower:Jeff Gray	Over the past decade, an increased interest has emerged in block-based languages that have been used to support initial exposure of programming concepts to new learners (children or adult). Such languages can shield initial-learners from some of the frustrations of learning the syntax of a programming language, and allow them to focus on the core computational idea being taught. Blockly is a type of visual block language development kit that allows the rapid construction of new block-based visual programming languages to address a specific pedagogical or content focus. This demo provides a brief tutorial on the steps used to create a new Blockly environment, along with two case studies demonstrating the power of Blockly. The two environments introduced have two different contexts: the manipulation of images via operations on pixels (Pixly), and programmatic control of a Sphero robot (Spherly). Pixly and Spherly serve as a context for introducing how new Blockly languages are created, as well as showcasing the opportunity to use these languages as new educational environments in the context of media computation and robotics. More information can be found at http://outreach.cs.ua.edu/pixly/ and http://outreach.cs.ua.edu/spherly/. This work is supported by an NSF CE21 project and a Google CS4HS award.	Blockly Language Creation and Applications: Visual Programming for Media Computation and Bluetooth Robotics Control	NA:NA	2015
Ahmad Ghafarian	NA	Session details: Paper Session: CS Education Research	NA	2015
Noah John:Jaime Ruiz	Programming is a creative process that requires the ability to concentrate and juggle multiple concepts simultaneously in one's mind. Existing research shows there is a tangible cost when a programmer is interrupted as the programmer must recover the context of his work and refocus on the task at hand. However, CS students are rarely taught about interruptions and how to manage them. Instead, teaching tends to focus only on technical concepts. In addition, there is little research on interruptions with respect to CS students. Therefore, our research examines what happens when CS students are taught about interruptions and how to cope with them. The objective of this paper is to determine if CS students are affected by interruptions, what knowledge CS students possess regarding memory cues and resumption strategies, and what their opinion is of this material. We conducted a study with approximately two-hundred undergraduate CS students to answer these questions. Our study was comprised of an initial questionnaire, a seminar on memory cues and resumption strategies, and a follow-up questionnaire. Our results demonstrate that CS students are affected by interruptions, but 73% of students report not knowing methods to mitigate them. After learning about memory cues and resumption strategies, students report that the material was useful and that they want to study it. Their most significant feedback is that they have a strong desire to include these techniques in CS curriculums, reporting a mean score of 7.78 out of 10, where 0 signifies strong disagreement and 10 signifies strong agreement.	Student Response to Teaching of Memory Cues and Resumption Strategies in Computer Science Classes	NA:NA	2015
Ashok Ram Basawapatna:Alexander Repenning:Kyu Han Koh	Teachers are increasingly integrating game design and simulation creation projects as part of their classroom curricula. These projects have many benefits including motivating students in STEM activities and exposing students to computational thinking - a key part of upcoming science standards. However, barriers still exist to project-based computer science in a lab environment. One major issue is that, as students are creating their projects, it is extremely difficult for teachers to know how every student is progressing through a given activity and how to keep every student engaged. This paper introduces a Cyberlearning system entitled REACT (Real-Time Evaluation and Assessment of Computational Thinking) that is an initial step towards giving teachers quickly discernible real-time data corresponding to each student project. REACT provides teachers with a sortable dashboard, consisting of data from each student, that shows the characters students created and used to populate their game or simulation world as well as the semantic meaning behind what students have programmed. A feasibility test with four middle school classrooms shows that REACT helps teachers formatively assess students and provide targeted instruction to struggling individuals. Furthermore, teachers showed excitement at the summative and student self-assessment capabilities of REACT, and every teacher independently stated they would use the REACT system in subsequent end-user programming units.	Closing The Cyberlearning Loop: Enabling Teachers To Formatively Assess Student Programming Projects	NA:NA:NA	2015
Jaime Spacco:Paul Denny:Brad Richards:David Babcock:David Hovemeyer:James Moscola:Robert Duvall	Web-based programming exercises are a useful way for students to practice and master essential concepts and techniques presented in introductory programming courses. Although these systems are used fairly widely, we have a limited understanding of how students use these systems, and what can be learned from the data collected by these systems. In this paper, we perform a preliminary exploratory analysis of data collected by the CloudCoder programming exercise system from five introductory courses taught in two programming languages across three colleges and universities. We explore a number of interesting correlations in the data that confirm existing hypotheses. Finally, and perhaps most importantly, we demonstrate the effectiveness and future potential of systems like CloudCoder to help us study novice programmers.	Analyzing Student Work Patterns Using Programming Exercise Data	NA:NA:NA:NA:NA:NA:NA	2015
Henry Walker	NA	Session details: Paper Session: Curriculum	NA	2015
Jerod Weinman:David Jensen:David Lopatto	Many instructors and institutions offer research experiences and training in computing research methods. However, in a national survey, we find that undergraduate students rate their computing research experiences lower than students in other STEM fields. To address this learning gap, we have offered summer undergraduate research experiences in computing that include not only instruction in the important mechanics of research but also grounding in a philosophy of computing science that emphasizes generalized explanation of behavior as a means for control and prediction. After five years, survey results indicate the experience helps close the gap between CS and other STEM fields in benefits gained.	Teaching Computing as Science in a Research Experience	NA:NA:NA	2015
Michael S. Kirkpatrick:Mohamed Aboutabl:David Bernstein:Sharon Simmons	This paper summarizes our experiences restructuring a core portion of our required courses for majors. Internal and external reviews of our program highlighted areas of concern in our "systems core," including inconsistent student outcomes, missing required material, and inadequate opportunities for programmatic assessment. To fix these problems, we initiated a curricular review to redesign these courses. Our novel approach employed a process known as backward course design that starts with desired student outcomes and works backward toward defining content coverage. By extending this design approach to our curriculum as a whole, we have defined a new systems core structure that has tightly integrated curriculum assessment opportunities. The result is a new systems core that changes almost 1/3 of the required courses for the major. This new structure provides increased student control over their learning goals while defining a consistent foundation of systems fundamentals; it also has tightly integrated program objectives and assessments. Applying the backward design philosophy to the curriculum, rather than to a single, pre-defined course, is both a rewarding and challenging experience. In this paper, we describe this approach, summarize the results of the process, and map the outcomes to the ACM 2013 curriculum. We also provide advice and lessons learned for others who may consider such an undertaking.	Backward Design: An Integrated Approach to a Systems Curriculum	NA:NA:NA:NA	2015
Martin Burtscher:Wuxu Peng:Apan Qasem:Hongchi Shi:Dan Tamir:Heather Thiry	The widespread deployment of multicore systems over the last decade has brought about major changes in the software and hardware landscape. The resulting importance of parallel computing is reflected in the 2013 Curriculum Guidelines developed by the joint ACM/IEEE taskforce. The document recommends increased coverage of parallel computing and describes a new Knowledge Area on this topic. These recommendations have already been adopted by several universities in the form of new parallel programming courses. Implementing the recommendations in a complete curriculum, however, poses many challenges, including deciding on existing material to be removed, complying with administrative and ABET requirements, and maintaining caps on graduation credit hours. This paper describes an alternative approach for adopting the 2013 curricular recommendations on parallel computing. Specifically, we use a module based approach that introduces parallel computing concepts and re-iterates them through a series of short, self-contained modules taught across several lower-division courses. Most of these concepts are then combined into a new senior-level capstone course on parallel programming. Each module covers parallelism aspects in the context of a conventional computer science topic, thus enabling us to include parallel computing without a major overhaul of the curriculum. Evaluations conducted during the first year show encouraging results for this early-and-often approach in terms of learning outcomes, student interest, and confidence gains.	A Module-based Approach to Adopting the 2013 ACM Curricular Recommendations on Parallel Computing	NA:NA:NA:NA:NA:NA	2015
Valerie Summet	NA	Session details: Paper Session: CS1/CS2: Focus on CS1	NA	2015
Kian L. Pokorny	This paper presents experiences with creating a computer simulator as a student project in a CS1 course. Each student writes the simulator using C++ during the last ten weeks of the course. The project consists of a simulated memory, and simple CPU simulator including a machine language. Additionally, students implement an assembly language and a simple high-level language with associated compiler. The course has no programming prerequisite and can be taken to fulfill a general education requirement or as the first course for students majoring in computer science or information systems. Integrating such a project in an entry level course has a number of benefits as well as challenges. The project acts as a vehicle that engages students in a breadth of computer science topics, leading into discussions of theoretical considerations, languages, and computing devices. The project components provide an active learning environment. Students are introduced to numbering systems, number conversions, and numeric representations. The computer architecture components include introductions to main memory, CPU, and memory access techniques. The transition from and motivations for, the utilization of machine languages, assembly languages and high-level languages are demonstrated with the implementation of the project. Beginning students are given opportunity to practice programming and problem solving on a project of significant complexity. The biggest challenge is organization. Management of such a project requires a well-defined plan.	Creating a Computer Simulator as a CS1 Student Project	NA	2015
Aaron Keen:Kurt Mammen	Inexperienced and novice programmers in CS 1 are often faced with the expectation that they will be able to decompose a problem into subproblems, solve these subproblems independently, and then recompose these solutions. As with programming in general, decomposition is a skill that benefits from explicit instruction and that must be practiced to see improvement. This paper introduces a term-long project approach to CS 1 that emphasizes program decomposition. Existing software quality metrics are used to assess student decomposition progression through the project and to compare the decomposition skills of students in courses using the term-long project approach against those in courses using a more typical "stand-alone" project approach.	Program Decomposition and Complexity in CS1	NA:NA	2015
Tammy VanDeGrift	In this paper, we describe CS 1 programming assignments that encourage design creativity and that utilize user testing. All course assignments allowed for some student-defined specifications; some assignments required user tests to encourage interaction with other people. The open-ended nature of the assignments supported students' creativity and motivation to learn. The user tests provided a platform for students to share their creations and knowledge about computing with others. Both the creative aspect and sharing aspect of the assignments led to students taking ownership of their work. Overall, 41 of 44 (93.2%) students enjoyed the open-ended nature of the assignments and sharing programs with users also enhanced their understanding of their programs and computing concepts.	Supporting Creativity and User Interaction in CS 1 Homework Assignments	NA	2015
Carsten Kleiner	NA	Session details: Paper Session: Beyond CS2: Miscellaneous Topics	NA	2015
Michael Whitney:Heather Lipford-Richter:Bill Chu:Jun Zhu	Many of the security vulnerabilities common in today's software can be prevented with standard secure coding practices. Computer science students who will become the developers of that software need to learn about those practices so they can prevent such vulnerabilities. Many computing programs are addressing this need through additional lectures, elective courses, or more holistic approaches to integrate security across curriculums. We are exploring a complementary approach, integrating secure coding education into the IDE to provide a learning opportunity in the context of writing code. In this paper, we report on two field studies using an IDE tool in an advanced Web programming course. Our results indicate that the tool can increase students' awareness and knowledge of secure programming, but to be most effective, instructors may need to incentivize its use through in-class methods and careful timing of its introduction.	Embedding Secure Coding Instruction into the IDE: A Field Study in an Advanced CS Course	NA:NA:NA:NA	2015
Andrey Esakia:Shuo Niu:D. Scott McCrickard	Smartwatches are emerging as wrist-based computers capable of complex calculation and communication, and the computer science curriculum should reflect the challenges and opportunities that they provide in the education domain. This paper puts forth an experience report focused on efforts to incorporate smartwatches in an upper-level undergraduate mobile application development class during two academic terms. Lectures, in-class activities, homeworks, and projects were tailored toward providing rich design and implementation experiences for the students that engaged them in developing for the smartwatch and a paired mobile device. Our experiences highlighted how incorporating smartwatches into a mobile app development class adds a valuable dimension in terms of design and implementation challenges and allowed students to exercise some of the fundamental computer science topics.	Augmenting Undergraduate Computer Science Education With Programmable Smartwatches	NA:NA:NA	2015
Wlodek W. Zadrozny:Sean Gallagher:Walid Shalaby:Adarsh Avadhani	IBM Watson exemplifies multiple innovations in natural language processing and question answering. In addition, Watson uses most of the known techniques in these two domains as well as many methods from related domains. Hence, there is pedagogical value in a rigorous understanding of its function. The paper provides the description of a text analytics course focused on building a simulator of IBM Watson, conducted in Spring 2014 at UNC Charlotte. We believe this is the first time a simulation containing all the major Watson components was created in a university classroom. The system achieved a respectable (close to) 20% accuracy on Jeopardy! questions, and there remain many known and new avenues of improving performance that can be explored in the future. The code and documentation are available on GitHub. The paper is a joint effort of the teacher and some of the students who were leading teams implementing component technologies, and therefore deeply involved in making the class successful.	Simulating IBM Watson in the Classroom	NA:NA:NA:NA	2015
Wanda Dann	NA	Session details: Special Session	NA	2015
Wanda Dann:Dennis Cosgrove:Don Slater	In this special session, attendees will learn about techniques for teaching concepts of concurrency with Alice 3's latest release of a Java IDE plugin. The new plugin makes use of Java 8's lambda expression to provide a Do together control structure with simpler syntax. Using this technique and Java 8 plugin, students in early-level programming courses can make use of Alice's Do together control structure to create concurrent threads in their Java code.	Tutorial: Concurrency with Alice 3 and Java	NA:NA:NA	2015
Tracy Camp	NA	Session details: Panel Session	NA	2015
Tracy Camp:Stu Zweben:Ellen Walker:Lecia Barker	This panel will discuss the enrollment boom, as well as potential effective practice strategies to respond to the increasing demand for computing education. Does the current enrollment "boom" represent the "third bubble", or is it here to stay? Is there a difference in what's happening at universities that offer Ph.D. degrees or what's happening at 4-year universities and colleges? What 'best practice' strategies exist (if any) to handle the demand? And, importantly, will this "boom" have a positive or negative effect on underrepresented students' Join us for a lively discussion on the recent student interest in computing education at our universities and colleges.	Booming Enrollments: Good Times?	NA:NA:NA:NA	2015
J. D. Chase	NA	Session details: Special Session	NA	2015
J. D. Chase:Prem Uppuluri:Tracy Lewis:Ian Barland:Jeff Pittges	It is well understood and has been well documented that there is much to gain by using live projects in the computer science classroom [1-13]. Live projects include those that serve a real client with a real problem as well as those those that integrate live datasets. However, the use of live projects has always come with a variety of challenges including supporting the project once it is complete, providing secure and safe access to large data sets, adjusting live client expectations, and limiting the scope of a project to the context of a single term and within the learning outcomes. The purpose of this special session is to provide attendees an introduction to and examples of the way that live projects have been integrated throughout the computing curriculum at Radford University.	Integrating Live Projects Into Computing Curriculum	NA:NA:NA:NA:NA	2015
Sarah Heckman	NA	Session details: Paper Session: Automated Assessment	NA	2015
Antonio Carvalho Siochi:William Randall Hardy	Grading student submissions of webpage assignments is difficult and time-consuming because it involves reading and evaluating source code for compliance with assignment specifications. In addition, the pages must be examined in a browser to check for required functionality such as working links. As a result fewer assignments tend to be given, or instructors spend significant time grading at the expense of working with students or other necessary activities. There is thus a need for automated assessment of webpage assignments. This paper describes WebWolf, a simple framework for automated assessment of assignments in an introductory web programming class. A WebWolf program can load web pages, find and inspect elements, click links and make assertions about expected results. WebWolf was evaluated with assignments from three different classes and on a set of assignment submissions with injected errors. WebWolf correctly identified errors in the submissions. Manual grading of a four page assignment took an average of 17 minutes, while the WebWolf program took 35 seconds.	WebWolf: Towards a Simple Framework for Automated Assessment of Webpage Assignments in an Introductory Web Programming Class	NA:NA	2015
Chris Wilcox	Increasing enrollments in undergraduate computer science courses are overloading faculty, teaching assistants, labs, and other resources. To cope with resource problems, many universities have automated key processes such as program grading. Before replacing a manual process with an automated tool, we believe that two questions should be answered. First and most importantly, does the proposed automation contribute to or detract from student learning? Second, do the benefits outweigh the costs of the automation? In this paper we present results from an introductory programming course in which we have incorporated high levels of automation. We find that carefully designed and managed automation can improve student performance while realizing a significant savings of scarce teaching resources.	The Role of Automation in Undergraduate Computer Science Education	NA	2015
James R. Wright:Chris Thornton:Kevin Leyton-Brown	We describe Mechanical TA, an automated peer review system, and report on our experience using it over three years. Mechanical TA differs from many other peer review systems by involving human teaching assistants (TAs) as a way to assure review quality. Human TAs both evaluate the peer reviews of students who have not yet demonstrated reviewing proficiency and spot check the reviews of students who have. Mechanical TA also features "calibration" reviews, allowing students to quickly gain experience with the peer-review process. We used Mechanical TA for weekly essay assignments in a class of about 70 students, a course design that would have been impossible if every assignment had had to be graded by a TA. We show evidence that it helped to support student learning, leading us to believe that the system may also be useful to others.	Mechanical TA: Partially Automated High-Stakes Peer Grading	NA:NA:NA	2015
Eric Aaron	NA	Session details: Paper Session: Gender & Diversity	NA	2015
Samantha Krieger:Meghan Allen:Catherine Rawn	Our study explores the use of tinkering strategies across genders in undergraduate students of Computer Science. We present a definition and a framework for tinkering as it applies to this context, and use these to investigate how students across genders tinker with hardware and software. Our goal is to examine gender-based differences in tinkering behaviour and to discuss the meaning and implications of these differences on teaching and learning in Computer Science. We gathered data via interviews and a questionnaire and used both qualitative and quantitative methods for analysis. Our work is preliminary and suggests further areas of research in this domain.	Are Females Disinclined to Tinker in Computer Science?	NA:NA:NA	2015
Jennifer Dempsey:Richard T. Snodgrass:Isabel Kishi:Allison Titcomb	Recruitment and retention of women has been a persistent problem in the field of computer science. With a growing number of jobs that require a computer science degree, this problem does not only affect computer science departments with low enrollment, but also impacts industry. There is still no universally accepted explanation for the underrepresentation of women in the computing field. Various solutions have been implemented in an attempt to resolve this problem and yet gender imbalance in fields related to computer science persists. In this paper we study how perceptions held by students influence their intention to pursue computer science. Through a descriptive study, using a survey given out to first semester students in a computer science class, we measure perceptions, attitudes, self-efficacy, and identity, then we study the correlations between them and students' intentions to further pursue computer science. Our goal is to understand how determinative these constructs are to having students continue in the major. Interestingly, self-perception, in terms of self-efficacy (does the student feel they are able to use computer science techniques to solve a problem) and identity (does the student see themselves as a computer scientist), emerged as the primary driver for differences in intention. Many other aspects turned out not to exhibit statistically significant gender differences. Understanding at a detailed level what factors influence students to pursue computer science is critical in devising effective interventions that may increase participation in computer science.	The Emerging Role of Self-Perception in Student Intentions	NA:NA:NA:NA	2015
Gabriela T. Richard:Yasmin B. Kafai:Barrie Adleberg:Orkan Telhan	While coding competitions and hackathons have steadily increased in number, few women participate. Because these public events present viable opportunities to broaden participation in computing, we designed the theme to focus on "Wear & Care" and collaborative arrangements in a hardware hackathon, called StitchFest, in which 33 undergraduate and graduate students used the LilyPad Arduino to design wearables. Our analysis focused on the interviews conducted with eight female and seven male college participants to understand how targeted recruitment, thematic framing, space arrangements, kinds of materials and material distribution impacted participation and perception. We discuss what we learned about setting a thematic focus and fostering collaborative learning in coding competitions for broadening participation in computing.	StitchFest: Diversifying a College Hackathon to Broaden Participation and Perceptions in Computing	NA:NA:NA:NA	2015
Jian Zhang	NA	Session details: Paper Session: Non-majors/Interdisciplinary	NA	2015
Andrea Tartaro:Renee J. Chosed	We present the development, implementation and evaluation of a new team-taught introductory computer science course focused on the topic of bioinformatics. Our course is unique when compared to other bioinformatics and interdisciplinary (biology and computer science) courses taught to undergraduates. Instead of analyzing data provided to them, students collect their own data at the biology lab bench and then analyze their data utilizing various bioinformatics tools in the computer lab. In addition, while other bioinformatics classes focus on programming, our course introduces other computer science topics relevant to the biological problems under investigation such as artificial intelligence, networks and databases. Our approach resulted in students acquiring an appreciation for how biology and computer science function synergistically.	Computer Scientists at the Biology Lab Bench	NA:NA	2015
Christopher Plaue:Lindsey R. Cook	We present the design and implementation of an interdisciplinary service course on data journalism, a first-ever collaboration between the computer science department and college of journalism at our institution. The course covered the basics of dataset acquisition, cleaning, and analysis, and taught key programming and web development concepts. Students created an online portfolio of exercises, culminating in a news story and data visualization. The course was well received by students coming from a variety of backgrounds. We provide recommendations for future iterations of this course.	Data Journalism: Lessons Learned While Designing an Interdisciplinary Service Course	NA:NA	2015
Heather Bort:Mimi Czarnik:Dennis Brylow	This paper presents an approach to integrating computer science and quantitative literacy concepts in an undergraduate English Literature course. We show how students with no prior background in computer science can engage in computing activities directly related to their topic of interest and gain a deeper understanding of their topic as well as a better appreciation and understanding of computer science and quantitative literacy in the process. Students work in an interdisciplinary learning environment focusing on literary analysis and quantitative literacy with computing concepts acting as the bridge between the two areas.	Introducing Computing Concepts to Non-Majors: A Case Study in Gothic Novels	NA:NA:NA	2015
Suzanne Matthews	NA	Session details: Paper Session: CS1/CS2: Themed Approaches	NA	2015
Olaf A. Hall-Holt:Kevin R. Sanft	The ability to use computational tools to collect, organize, visualize, and analyze data is a valuable skill both inside and outside of computer science. In this paper we describe the design and implementation of a statistics-infused introduction to computer science, developed in collaboration with statistics faculty, at St. Olaf College. We propose that there exists a growing demographic of 'data-centric' students who expect to write small amounts of code in the context of work in other fields, and who are eager to take a CS course adapted to their needs. This particular data-centric CS1 course has been a catalyst for collaboration between faculty in multiple fields and multiple institutions.	Statistics-infused Introduction to Computer Science	NA:NA	2015
Zo√´ Wood:Aaron Keen	When teaching introductory computing courses, we are often guilty of writing rudimentary programming assignments - those meant to illustrate one simple language feature, comprised mostly of code that will never be used beyond the assignment. Admittedly, first-year computing students must navigate a myriad of challenges, sometimes learning both imperative and object-oriented programming, in addition to mastering syntax, logic,debugging, and testing. To tackle the difficulties of developing CS 1 and CS 2 courses that engage students in learning while addressing the numerous course objectives, we chose to challenge students to create virtual worlds in one large comprehensive two-quarter long programming project. Students were granted creative freedom within a framework that gradually introduced many programming skills and that required the mastery of object-oriented programming and some engaging algorithms. We present the curriculum, performance comparisons, and observations. Overall, we consider the experimental courses a success that will have an impact on our department's future curricular offerings.	Building Worlds: Bridging Imperative-First and Object-Oriented Programming in CS1-CS2	NA:NA	2015
Ruth E. Anderson:Michael D. Ernst:Robert Ord√≥√±ez:Paul Pham:Ben Tribelhorn	This paper reports on our experience teaching introductory programming by means of real-world data analysis. We have found that students can be motivated to learn programming and computer science concepts in order to analyze DNA, predict the outcome of elections, detect fraudulent data, suggest friends in a social network, determine the authorship of documents, and more. The approach is more than just a collection of "nifty assignments"; rather, it affects the choice of topics and pedagogy. This paper describes how our approach has been used at four diverse colleges and universities to teach CS majors and non-majors alike. It outlines the types of assignments, which are based on problems from science, engineering, business, and the humanities. Finally, it offers advice for anyone trying to integrate the approach into their own institution.	A Data Programming CS1 Course	NA:NA:NA:NA:NA	2015
Monisha Pulimood	NA	Session details: Paper Session: Beyond CS2: Programming Languages/Compilers	NA	2015
Michael Wirth	Computer science is a discipline which has swiftly evolved since its inception in the 1950s. This has invariably meant that new courses introduced into a curriculum are often of the bleeding-edge sort: genetic algorithms, parallel processing, mobile-based applications. Programming languages too have changed as progress ensues. Yet little is discussed of the darker side of computer science - the huge repositories of what some term legacy software running our financial, scientific and engineering systems. This paper looks at the introduction of a course which teaches legacy languages and the process of re-engineering with the aim to instill a reverence for the role legacy software plays in the modern world.	A Descent into the Maelstrom: Teaching Legacy Programming and Re-engineering	NA	2015
Kent D. Lee	This paper provides a description of a framework for programming language implementation that is accessible to students in a one semester course focused on programming languages. Rather than concentrating solely on language features, this paper describes a framework where imperative, functional, and logic programming languages are all used to develop a compiler for a non-trivial subset of a functional programming language. Provided by the framework are a virtual machine, a disassember of Python programs, a partial implementation of a Standard ML compiler with suggested tests, and a partial implementation of a type inference system implemented using Prolog, again with suggested tests. Classroom experience gained while using this framework is also shared. A suggested fourteen week sequence is provided. Real reactions from students and reflections on coverage of the ACM 2013 Curricula guildelines conclude the paper.	A Framework for Teaching Programming Languages	NA	2015
John H.E. Lasseter	An undergraduate compilers course poses significant challenges to students, in both the conceptual richness of the major components and in the programming effort necessary to implement them. In this paper, I argue that a related architecture, the interpreter, serves as an effective conceptual framework in which to teach some of the later stages of the compiler pipeline. This framework can serve both to unify some of the major concepts that are taught in a typical undergraduate course and to structure the implementation of a semester-long compiler project.	The Interpreter In An Undergraduate Compilers Course	NA	2015
Jesse M. Heines	NA	Session details: Panel Session	NA	2015
Jesse M. Heines:Jeff L. Popyack:Briana Morrison:Kate Lockwood:Doug Baldwin	Flipped classrooms are a new twist on an old idea: homework. The basic formula is simple: do the prep work before coming to class and come to class ready to discuss that work, do an activity to reinforce what you learned, or even take a quiz on the reading or research that was assigned. But as with all approaches to teaching, the reality is never that simple. This panel will report the experiences of four "flippers" and explore the pros and cons of those experiences. Educators who are considering flipping all or part of their courses will gain insight into how to do so to their and, more importantly, their students'-advantage, while those who have used this technique may gain new insights into approaches that might help them be more successful if they faced any issues similar to those of the panelists.	Panel on Flipped Classrooms	NA:NA:NA:NA:NA	2015
Owen Astrachan	NA	Session details: Special Session	NA	2015
Daniel D. Garcia:Owen Astrachan:Bennett Brown:Jeff Gray:Calvin Lin:Bradley Beth:Ralph Morelli:Marie desJardins:Nigmanath Sridhar	NA	Computer Science Principles Curricula: On-the-ground; adoptable; adaptable; approaches to teaching	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Stephen Edwards	NA	Session details: Demonstration Session	NA	2015
Elissa Redmiles:Mary Allison Abad:Isabella Coronado:Sean Kross:Amelia Malone	In 2012, women earned 18% of computer science degrees; African American and Hispanic students made up less than 20% of computing degree holders that year. Research shows that relatable role models and engaging curriculum are required to engage underrepresented students in computing. There is a need for engaging and relatable curriculum to be delivered to students at the middle school level, when these students first begin to lose interest in computing. Thus, based on the results of a survey of current and former middle school computing teachers and a comprehensive literature review, we developed the University of Maryland Curriculum In A Box (CIAB). The CIAB includes profiles of relatable computing role models, accessible video and text curriculum and challenge projects for HTML/CSS. To simulate a "real world" programming environment, the CIAB guides students through programming within open source social media frameworks and Github. The CIAB also includes teacher enablement resources such as assessments and a week-by-week implementation guide. The CIAB was successfully implemented with a group of 6th and 7th grade students in Prince Georges (PG) County, a majority minority county in Maryland. Our demo will provide a walk-through of the CIAB assets, accessibility features and design process, as well as implementation advice informed by our CIAB implementation in PG County.	A Classroom Tested Accessible Multimedia Resource for Engaging Underrepresented Students in Computing: The University of Maryland Curriculum In A Box	NA:NA:NA:NA:NA	2015
Amjad Altadmri:Neil C.C. Brown:Michael K√∂lling	The Raspberry Pi is an affordable and powerful (for its size) credit-card sized computer that has become very popular since its launch two years ago. It functions as a desktop machine but with easy access to peripheral hardware, such as buttons, sensors and LEDs, via its GPIO pins. Using a Java IDE like Eclipse or NetBeans is out of the question as the Pi is not powerful enough to run those. However, the beginners' Java IDE BlueJ is ideal in this situation: lightweight enough to run on the Pi, but well-featured and designed for education. This demo will show how BlueJ's features such as the object bench allow easy exploration and manipulation of the Pi's GPIO pins, and how easy it can be to write some Java to interact with peripherals connected to the Pi. More information on BlueJ and the Raspberry Pi is available at http://bluej.org/raspberrypi/	Using BlueJ to Code Java on the Raspberry Pi	NA:NA:NA	2015
Sen Zhang	NA	Session details: Paper Session: Block Languages	NA	2015
Yasin N. Silva:Jaime Chon	A significant amount of recent research in Computer Science Education has focused on studying block-based programming. In this approach, computer programs are created by connecting blocks and the blocks' shapes determine the permitted connections. The focus is on the program's logic instead of its syntax. This paper introduces DBSnap, a web-based application to build database queries, particularly relational algebra queries, by snapping blocks. DBSnap fully supports the construction of intuitive database query trees, which is one of the most effective approaches to teach database queries. DBSnap is also highly dynamic and shows the query results as the query is being built. The user can also inspect, at any time, the intermediate results of any query node. This paper presents DBSnap's design and implementation details, an evaluation of its effectiveness as a learning environment, and a thorough comparison with alternative ways to teach query languages. DBSnap is publicly available and aims to have the same transformational effect on database learning as previous block-based systems had on traditional programming learning.	DBSnap: Learning Database Queries by Snapping Blocks	NA:NA	2015
Yoshiaki Matsuzawa:Takashi Ohata:Manabu Sugiura:Sanshiro Sakai	In the past decade, improvements have been made to the environments used for introductory programming education, including by the introduction of visual programming languages such as Squeak and Scratch. However, migration from these languages to text-based programming languages such as C and Java is still a problem. Hence, using the OpenBlocks framework proposed at the Massachusetts Institute of Technology, we developed a system named BlockEditor, which can translate bidirectionally between Block (the block language used here) and Java. We conducted an empirical study of this system in an introductory programming course taken by approximately 100 university students not majoring in computer science. When students were given opportunities to select the language to solve their programming assignments, we traced their selection by tracking working time with BlockEditor or Java for each individual student. The results illustrate the nature of the seamless migration from Block to Java, and show that there is great diversity in the timing and speed of migration to Java by each individual. Additionally, we found that students with low self-evaluation of their skill chose to use Block at a significantly higher rate than did students with high self-evaluation. This suggests that BlockEditor can act as scaffolding for students by promoting mixed programming between Block and Java in their migration phase.	Language Migration in non-CS Introductory Programming through Mutual Language Translation Environment	NA:NA:NA:NA	2015
Mark Dorling:Dave White	There is concern amongst teachers about how to support all pupils in making the transition from popular graphical languages like Scratch to text-based languages like Python. In a new subject, not taught widely before at both primary and secondary education in England, there is inevitably a lack of tuned-in pedagogical expertise. In this paper, the authors address the transition process by exploring established pedagogy in Computer Science, and other subjects including Mathematics, Science and Languages, and by sharing and testing their findings with pupils and teachers in the classroom. Teaching the fundamentals of programming is well served by applying sequential solutions in both graphical and text-based languages. This practitioner action research paper focuses on scaffolding support for pupils when making the transition from graphical to text-based languages. In an approach which uses graphical languages in conjunction with, not in place of, text-based programming languages, the authors discuss ways to tackle the difficulties presented to pupils by text-based languages, and propose a tested strategy for teachers to enable pupils to undertake the transition successfully.	Scratch: A Way to Logo and Python	NA:NA	2015
Lina Battestilli	NA	Session details: Paper Session: Gender & Diversity	NA	2015
Gloria Childress Townsend:Kay Sloan	Motivated by the significance and the consequences of women's underrepresentation in computing, researchers evaluated the effectiveness of a project linking ACM-W's (Association for Computing Machinery's Women in Computing) Celebrations of Women in Computing (conferences) with projects sponsored by two additional organizations in the United States, the Anita Borg Institute's Grace Hopper Celebration of Women in Computing (GHC) and the National Center of Women & IT's Annual Summit. The collaborative project, funded by the National Science Foundation and titled, the Grace Hopper Regional Consortium, featured twelve new regional Celebrations of Women in Computing (Celebrations). An external assessment agency surveyed conference organizers and participants. The paper analyzes data derived from the surveying, demonstrating the impact of the conferences on Celebration attendees, and shows for the first time a comparison of identical survey items from separate GHC and Celebrations assessments.	An Effective Alternative to the Grace Hopper Celebration	NA:NA	2015
A. Nicki Washington:Legand Burge:Marlon Mejias:Ketly Jean-Pierre:Qi'Anne Knox	While computer science (CS) continues to permeate every aspect of society, the number of high-school students that are adequately prepared to enroll in university computer science programs is declining. To address the nation's needs it is clear that the retention rates of underrepresented minorities in CS programs across the country must increase, including the instruction and retention of students at Historically Black Colleges and Universities (HBCUs). At the university, a multi-phased program was developed that first partnered the department with Google to develop a unique program that incorporated Google software developers and undergraduate students, as well as course restructuring to better prepare underclassmen in their first three courses of study. First-year results indicated the program was successful in increasing student retention and interest in CS.	Improving Undergraduate Student Performance in Computer Science at Historically Black Colleges and Universities (HBCUs) through Industry Partnerships	NA:NA:NA:NA:NA	2015
Francisco C. de M.B. Oliveira:Gerarda N.C. Gomes:Adriano T. de Freitas:Anibal C. de Oliveira:Lidiane C. Silva:Bruno Queiroz	Teaching a programming language to a person who is deaf or hearing impaired (DHI) has, along with other challenges, the lack of signs to convey basic concepts in computing. This shortage of signs makes learning even harder for the DHI. The creation of signs from co-present discussions involving instructors, translators and the DHI can lead to regionalism, which might hinder their acceptance by members of other DHI communities throughout the country. A way to combat regionalism is through the asynchronous collaborative creation of signs, normally supported by web tools. But are the signs created through web discussions inferior in any way to those created via co-present discussions? This article presents a comparative study on the acceptance of signs created by both methods showing that acceptable and legitimate signs can also be produced using web discussions and the users can not distinguish from which method they come from.	A Comparative Study of the Acceptability of Signs for the Brazilian Sign Language Created in Person and Remotely	NA:NA:NA:NA:NA:NA	2015
Madeleine Schep	NA	Session details: Paper Session: Student Engagement: Flipped Classroom	NA	2015
Michael Skirpan:Tom Yeh	Traditionally, the inverted (or flipped) classroom has students complete traditional, passive learning tasks (e.g., watching lectures) while at home and uses class time to actualize what is learned through labs, discussions, and exercises. In this paper, we present an instructional model for teaching computer science (CS) that compounds features of the flipped classroom with components of peer instruction and formative assessment. Outside of class, in lieu of a lecture, students worked collaboratively on learning challenges that introduced content through a series of hands-on exercises. During class time, we used hack-a-thons to create an active classroom environment to promote peer coding and cultivate the growth of relevant real-world technical skills. Class work was digitally synced to Google Drive in real-time to allow instructors the opportunity to customize on-the-spot feedback. Further, we used journals as a formative assessment measure to synthesize student interests and opinions into our continued design of the class. In this paper, we describe our pedagogical model and discuss the results and lessons learned from the class using mined data from Google Drive and student journal responses.	Beyond the Flipped Classroom: Learning by Doing Through Challenges and Hack-a-thons	NA:NA	2015
Mary Lou Maher:Celine Latulipe:Heather Lipford:Audrey Rorrer	The basic principles of a flipped classroom teaching method are to deliver content outside of the class and to move active learning into the classroom. There are many strategies for delivering the content online, such as having instructors prepare online lectures, wrapping the course around a MOOC, and curating online videos from various sources. There are also many strategies for including active learning in the classroom that go beyond providing programming labs, and can include various forms of peer instruction. In this paper we describe our experiences flipping four different computer science classes across multiple semesters over two years. This breadth of experience with classroom flipping has enabled us to compare strategies and approaches and develop an understanding of which approaches appear to work under which circumstances. We discuss how we structured out-of-class preparatory work, how we created or sourced online videos, how we used active learning activities in-class to scaffold skills development and identify students' misconceptions, and how we structured teams for in class activities. This paper contributes a set of flexible strategies to consider for provision of curricular content out-of-class, structuring students' preparatory work, applying active learning of skills and concepts, and leveraging social interaction and peer instruction for CS education. We present the impact of our approaches based upon leading indicators of course evaluations and student surveys. We discuss lessons learned and students' responses to our strategies.	Flipped Classroom Strategies for CS Education	NA:NA:NA:NA	2015
Lisa L. Lacher:Mark C. Lewis	The use of online videos and flipped classrooms is a natural fit for many CS courses, especially in the introductory sequence, and the use of these techniques is growing. However, the benefits of these techniques depend heavily on student preparation before class meetings. This paper presents tests of the effectiveness of basic multiple choice quizzes as gateway checks in a flipped classroom by looking at the impact they have on student grades. Programming aptitude and learning approaches were considered as additional factors. Ignoring aptitude and learning approaches, statistical analysis of the student grades did not support our hypothesis that the gate-check video quizzes would be beneficial. Nor did it support our hypothesis that the benefit of quizzes would be greatest for students who had lower aptitudes entering the class. However, there was some evidence that it might have helped raise the grades of students who have a propensity toward surface learning.	The Effectiveness of Video Quizzes in a Flipped Class	NA:NA	2015
Mark Zarb	NA	Session details: Paper Session: CS1/CS2: Persistance and Attitudes	NA	2015
Amber Settle:John Lalor:Theresa Steinbach	Student success in an introductory programing course is crucial, both because it influences retention and because student attitudes and habits in a first course can have a lasting impact on student success in computer science as a field. In this paper we present results about student attitudes and habits before and after a CS1 class. Statistically significant attitude differences were found in three areas: students were less likely to report they were good at programming, more likely to agree they are challenged by programming problems they can't understand immediately, and are less likely to report that computer science allows them to be creative. Statistically significant differences in female and first-quarter responses were also found.	Reconsidering the Impact of CS1 on Novice Attitudes	NA:NA:NA	2015
Diane Horton:Michelle Craig	Much attention has been paid to the failure rate in CS1 and attrition between CS1 and CS2. In our study of 1236 CS1 students, we examine subgroups of students, to find out how characteristics such as prior experience and reason for taking the course influence who drops, fails, or passes, and who continues on to CS2. We also examine whether student characteristics influence outcomes differently in traditional vs. inverted offerings of the course. We find that more students in the inverted offering failed the midterm test, but those who failed were much more likely to either drop the course or recover and ultimately pass the course. While we find no difference between the offerings in the overall drop-fail-pass rates or in the percentage and types of students who go on to take CS2, there is a significant, widely felt, boost in exam grades in the inverted offering.	Drop, Fail, Pass, Continue: Persistence in CS1 and Beyond in Traditional and Inverted Delivery	NA:NA	2015
Jason Carter:Prasun Dewan:Mauro Pichiliani	In an offering of CS 1, we monitored the amount of help students in a class received through various means. We found that most students wanted help that went beyond office hours and email, and that for the vast majority of them, their grades correlated positively with the amount of help they received. However, increasing help also requires increasing instructional resources unless techniques can be found to separate the surmountable difficulties from the insurmountable ones. We have developed such a technique that looks at individual interaction logs and classifies difficulties incrementally as they occur. The insight behind the technique is that when students face surmountable difficulties, they tend to repeat certain action sequences, which can be detected to distinguish the surmountable difficulties from the insurmountable ones. A lab study shows that the mechanism gives significantly better results than the baselines.	Towards Incremental Separation of Surmountable and Insurmountable Programming Difficulties	NA:NA:NA	2015
Ariel Ortiz	NA	Session details: Paper Session: Beyond CS2: Algorithms	NA	2015
Joan M. Lucas	A thorough understanding of algorithms and data structures is essential for any student of Computer Science. In this paper we present a sequence of programming projects that elegantly integrate both the study of algorithmic paradigms with an illustration of how the choice of data structure significantly impacts an algorithm. We do this in the context of a single, easily understood problem domain, that of finding a maximum matching in a graph. By focusing on only a single problem, students more fully appreciate the concept that any problem can be solved in a variety of different ways.	Illustrating the Interaction of Algorithms and Data Structures Using the Matching Problem	NA	2015
Saad Mneimneh	As an advocate of infusing various algorithmic and mathematical aspects when teaching about programming, I have come to realize that an early such practice is essential for a rounded computer science education. In this paper, I show how this can be done while focusing on one theme: Fibonacci. Perhaps the most common use of Fibonacci has been to show the power of recurrence in implementing the Fibonacci sequence, which is often accompanied by a caveat that it is not the best implementation (very slow). Nevertheless, the sequence, with its rabbit story and celebrated golden ratio, is a rather exciting "gadget" for many students and it often pays off to introduce it. Therefore, I explore ways to use Fibonacci (the binary word) and the golden ratio for guiding implementation, and to successfully convey an important message of computer science that programming is not just about writing code. This will be done in the context of one dimensional and two dimensional arrays.	Fibonacci in The Curriculum: Not Just a Bad Recurrence	NA	2015
Brian C. Dean:Raghuveer Mohan:Chad G. Waters	Despite their power and simplicity, randomized algorithms are often under-emphasized in the classroom (and as a consequence, ultimately in practice) since they can be more challenging to analyze than their deterministic counterparts. In this paper, we describe a simplified framework that streamlines the analysis of dozens of common randomized algorithms and data structures. The key component of this framework, which we call the randomized reduction lemma, builds on intuition that is already commonly held by most students based on their experience with deterministic algorithms, and reduces the necessary prerequisites one must know from probability theory to a minimal subset. For example, one can prove that randomized quicksort runs in O(n log n) time with high probability in two paragraphs, without knowledge of random variables or Chernoff bounds. This paper is intended to be self-contained and written in a sufficiently student-friendly fashion so that it may serve as a classroom handout.	Randomized Reduction	NA:NA:NA	2015
Henry M. Walker	NA	Session details: Special Session	NA	2015
Henry M. Walker:Sue Fitzgerald:John F. Dooley	This session seeks to initiate a discussion regarding simple approaches through which faculty can gain meaningful insights into components of their courses and/or programs with only modest expenditures of time and energy.	Curricular Assessment: Tips and Techniques	NA:NA:NA	2015
Michael S. Kirkpatrick	NA	Session details: Panel Session	NA	2015
Michael S. Kirkpatrick:Janice E. Cuny:Mark Guzdial:Amanda Holland-Minkley:Clifford A. Shaffer	NA	Best Practices for IRB Approval: Four Perspectives	NA:NA:NA:NA:NA	2015
Amy Briggs	NA	Session details: Panel Session	NA	2015
Amy Briggs:David Bau:Caroline Meeks:Pat Yongpradit	How do students learn computer science? Successful students climb a ladder of learning and meta-learning. Not only do they learn content, but also they gain proficiency with new processes that aid their learning. Each learner takes her/his own path, of course, but the beginning CS student must clear a number of hurdles that we can identify and help them with. In programming, for example, one might struggle with the leap from visual programming to text programming, or from using well-designed integrated tutorials while learning one language, to the chaos of the Internet when learning another. Numerous ongoing efforts in computer science education and professional development [5, 6] have contributed to tremendous increases in the numbers of students studying computer science at all levels. These efforts have included academic innovations as well as partnerships with industry, government, and non-profit organizations [7]. Expanded access means that more students have the opportunity to study computer science, but also that the diverse needs of many new learners need to be understood and addressed.	Supporting the Computer Science Learning Process	NA:NA:NA:NA	2015
Stephen Edwards	NA	Session details: Demonstration Session	NA	2015
Caitlin Kelleher	Looking Glass is the successor to Storytelling Alice designed for middle and high school students. By dragging and dropping, users can construct programs that direct the behavior of characters in a 3D scene. The system consists of a downloadable application and an online community. Looking Glass is intended to support creative, open-ended programming. To help spark ideas, the Looking Glass community hosts a set of community-created templates and remixes, animations that can be imported into any new world. These templates and remixes can help to inspire a story line. In more formal settings, templates and remixes allow an instructor to provide shared resources for an assignment and for students to collaborate with each other. Exploring the behavior of existing code examples can be a powerful way to learn new skills. In addition to providing story inspiration, community remixes serve as code examples that students can explore. To support users in learning new skills based on code shared through remixes, Looking Glass includes a play and explore mode in which the environment records an execution history and changes to the 3D scene as a program runs. Users can scroll back in time, see which actions were executing, and replay individual statements. A free download is available at lookingglass.wustl.edu for Windows, Mac, and Linux.	Looking Glass	NA	2015
Alvaro Monge:Beth A. Quinn:Cameron L. Fadjo	How do you engage students in the computer science classroom? In this Demo Session we will examine this question within the context of EngageCSEdu (http://www.engage-csedu.org), a web-based collection of instructional materials for introductory CS classes. Developed by computer scientists, social scientists, and learning scientists from California State University, Long Beach, Carnegie Mellon University, University of Pittsburgh, the National Center for Women & Information Technology (NCWIT), and Google, EngageCSEdu is comprised of ~1500 instructional materials (such as assignments, projects, labs, and assessments) and 17 Engagement Practices (strategies and techniques for engaging and retaining students based on CS education and social science research). During this session we will demonstrate key features of EngageCSEdu, discuss how research-based findings on gender diversity and student engagement were used in its development, and invite participants to contribute their ideas for engaging and retaining students. Attendees will explore EngageCSEdu with members of the original development team and discuss how this focused and comprehensive open collection of instructional materials can be effectively used to support instructors. As a product by and for the CS education community, this demo is an opportunity for potential users to provide valuable feedback and input into the ongoing development and dissemination of materials on EngageCSEdu. By the end of this demonstration participants will be more familiar with the research-based factors shown to increase engagement among undergraduate students, particularly women and underrepresented minorities, and have an opportunity to play an active role in positioning EngageCSEdu within the CS education community.	EngageCSEdu: CS1 and CS2 Materials for Engaging and Retaining Undergraduate CS Students	NA:NA:NA	2015
Maria Jump	NA	Session details: Paper Session: Student Engagement: Self Explanation	NA	2015
Leigh Ann Sudol-DeLyser	Novices struggle with the implementation of algorithms in code. Assessments asking students to describe algorithms in code have shown that use of abstractions in the descriptions have correlated with students' ability to produce algorithms in code. In this study, 24 introductory computer science students were asked to think out loud while writing code involving simple array algorithms in an online system. Student statements were classified based on the level of abstraction used in the statement. An analysis of the statements revealed that students with greater proficiency at writing code were more likely to use multiple levels of abstraction when describing the code they were writing, and moved between levels with higher frequency than less proficient students. The results align with self explanation research and provide insight into the cognitive mechanisms responsible for the transfer between the skills of reading and writing code.	Expression of Abstraction: Self Explanation in Code Production	NA	2015
Paul Denny	Written exams are a common form of assessment in introductory programming courses. Creating exam questions is normally the responsibility of the course instructor, however the process of authoring such questions may be a useful learning activity in itself. We explored this idea with a randomized controlled experiment (n > 700) in which a group of first-year programming students generated practice questions prior to an exam. Even though all questions were available to every student in the course for practice, the group that generated the questions performed significantly better on the exam. The effects were most pronounced when students answered exam questions on topics that were targeted by questions they had generated. We suggest that some existing tools for computer science education may benefit from incorporating related activities.	Generating Practice Questions as a Preparation Strategy for Introductory Programming Exams	NA	2015
Arto Vihavainen:Craig S. Miller:Amber Settle	One approach for helping students learn to program is the use of self-explanation assignments. In these assignments, students explain instructional materials using domain knowledge covered in the course. In this work, we describe a randomized experiment where students in an introductory programming course were given two kinds of self-explanation assignments. One randomly selected group worked on self-explanation assignments with supporting questions while the alternate group had the same self-explanation questions but no additional supporting exercises. The combined groups performed better on comparable test questions than students from the previous year, who did not use self-explanation questions. The group with supporting questions performed better than the group with no additional support. Based on our results and previous research on self explanation, we argue that embedding self-explanation questions into programming material is beneficial for students. Moreover, further gains are achieved from supporting questions that help focus their explanations.	Benefits of Self-explanation in Introductory Programming	NA:NA:NA	2015
Charles Hardnett	NA	Session details: Paper Session: Focus on K-12: Professional Development	NA	2015
Stephen Cooper:Susan H. Rodger:Madeleine Schep:RoxAnn H. Stalvey:Wanda Dann	In this experience report, we share our experiences in growing a community of practice for middle and high school teachers focused on teaching introductory computing with Alice. We have offered professional development for over four hundred teachers, teachers who each year provide nearly 2,000 students with an introductory computing experience in courses during the school day. We report on several lessons learned in creating, growing, and supporting a community of practice.	Growing a K-12 Community of Practice	NA:NA:NA:NA:NA	2015
Brian Dorn:Derek Babb:Dawn M. Nizzi:Cory M. Epler	Access to high quality K-12 computer science education has garnered considerable public attention in the United States in the wake of Code.org's December 2013 Hour of Code. An increasing number of states are now counting CS coursework towards high school graduation requirements, and teacher certification for computing courses is being revisited across the country. In this work, we explore the current state of computer science education in Nebraska public schools using objective enrollment data from the 2013-2014 academic year. We find limited access to introductory programming courses, while basic computer/IT literacy coursework is commonplace. Lack of CS courses is particularly acute in small schools, which make up a majority of Nebraska's public schools. We also present data illustrating limited pursuit of IT teaching endorsement/certification in the state and highlight current issues for teacher training programs that lead to such certification in Nebraska.	Computing on the Silicon Prairie: The State of CS in Nebraska Public Schools	NA:NA:NA:NA	2015
Robin Flatland:Darren Lim:James Matthews:Scott Vandenberg	We describe a new methods of teaching computer science (CS) course tailored for mathematics education majors but also applicable to others interested in teaching CS. Goals of the course are enhancing their ability and confidence in developing and offering CS courses at high schools and starting CS courses at high schools that do not offer them. The course involves a combination of reading, programming, lesson/unit plan development, code reviews, and discussion of the various paradigms for introducing CS at the secondary level. Results indicate the course enhances the students' confidence, ability, and preparation for teaching CS in high schools.	Supporting CS10K: A New Computer Science Methods Course for Mathematics Education Students	NA:NA:NA:NA	2015
Elissa Redmiles	NA	Session details: Paper Session: Soft Skills: Teamwork & Communication	NA	2015
Raymond Greenlaw:Christopher Brown:Zachary Dannelly:Andrew Phillips:Sarah Standard	In this work we describe how a message board can be used to teach a number of important concepts in cyber security in a novel and hands-on manner. The message board is used daily in class and serves the routine functions of disseminating information to students, offering a forum for interactive discussions, allowing a convenient method to copy and paste complex expressions, providing a venue for class interaction, permitting archiving of information, and serving as a general blackboard. We use the message board to illustrate and teach important cyber-security concepts and common attacks such as the following: authentication and cookies, cross-site scripting and injection attacks, man-in-the-middle attack on public-key cryptography, password selection, and password-file management. From the student-learning perspective the tool appears to work very well. We hope that others can make use of the message board in their lessons or incorporate parts of it to improve the educational experience of their students. The message board can be integrated seamlessly into a class to enhance hands-on learning.	Using a Message Board as a Teaching Tool in an Introductory Cyber-Security Course	NA:NA:NA:NA:NA	2015
Mark Zarb:Janet Hughes:John Richards	Pair programming has several benefits when it is successfully used by students and experts alike. However, research shows that novice pairs find the necessary pair communication to be one of the main challenges in adopting this process. A set of industry-inspired pair programming guidelines have been derived and evaluated from qualitative examinations of expert pairs, with the aim of helping novice programmers communicate within their pair. This research describes a further evaluation of these guidelines with a number of student pairs, and demonstrates how novice pairs who were exposed to the guidelines became comfortable communicating with their partners.	Further Evaluations of Industry-Inspired Pair Programming Communication Guidelines with Undergraduate Students	NA:NA:NA	2015
Christopher D. Hundhausen:Adam S. Carter:Olusola Adesope	Social learning theory emphasizes the importance of providing learners with opportunities to observe their peers, and to participate actively in a community. Unfortunately, early computing courses tend to emphasize individual programming assignments, which discourage learners from observing and working with their peers. In order to explore the possibility that increased opportunities for social awareness and interaction while working on programming assignments might influence learning outcomes in early computing courses, we are studying the design and use of social networking-style activity streams in such courses. In an empirical study of the use of two types of activity streams in a CS 2 course - one that was part of a learning management system, and one integrated directly into students' programming environment - we found that students who used the integrated stream were twice as socially active; however, social participation in both environments was positively correlated with students' grades. Our results suggest that the use of activity streams as an adjunct to individual programming assignments can positively influence learning; computing instructors would do well to find ways to get their students to participate actively in activity streams during the programming process.	Supporting Programming Assignments with Activity Streams: An Empirical Study	NA:NA:NA	2015
Don Goelman	NA	Session details: Paper Session: Beyond CS2: Cloud Computing	NA	2015
Weiying Zhu	Hands-on activities are important for computer science students to achieve their learning objectives. Compared to developing and maintaining on-campus physical or virtual laboratories, using the public cloud to host hands-on activities is a very promising approach because of the scalability, flexibility, security, cost-efficiency, and accessibility of the services offered in the public cloud. This paper presents the design of four cloud-based network programming projects and our experience of using the services and infrastructure in the public cloud for these hands-on projects in our Computer Networks course. Each student was able to use multiple virtual machines in the public cloud together with a local computer to develop and test networking programs. Both the instructor's observation and student surveys demonstrated that our approach has a strong positive impact on the student learning experience. A vast majority of the students favor using the public cloud not only in this course but also in other computer science courses if applicable.	Hands-On Network Programming Projects in the Cloud	NA	2015
Richard S. Weiss:Stefan Boesen:James F. Sullivan:Michael E. Locasto:Jens Mache:Erik Nilsen	This paper reports on the experience of using the EDURange framework, a cloud-based resource for hosting on-demand interactive cybersecurity scenarios. Our framework is designed especially for the needs of teaching faculty. The scenarios we have implemented each are designed specifically to nurture the development of analysis skills in students as a complement to both theoretical security concepts and specific software tools. Our infrastructure has two features that make it unique compared to other cybersecurity educational frameworks. First, EDURange is scalable because it is hosted on a commercial, large-scale cloud environment. Second, EDURange supplies instructors with the ability to dynamically change the parameters and characteristics of exercises so they can be replayed and adapted to multiple classes. Our framework has been used successfully in classes and workshops for students and faculty. We present our experiences building the system, testing it, and using feedback from surveys to improve the system and boost user interest.	Teaching Cybersecurity Analysis Skills in the Cloud	NA:NA:NA:NA:NA:NA	2015
M. Suhail Rehman:Jason Boles:Mohammad Hammoud:Majd F. Sakr	We have designed, developed and administered a course on cloud computing that was taught to over 700 students at our institution over two years. The goal of this project-based course is to provide students with foundational systems concepts as well as experience in developing the required skills to design and deploy viable, robust and elastic web-services within performance and budgetary constraints. We present our objectives, learning outcomes, projects, learning model, outcomes and lessons learned. So far, for this demanding course, our student retention rate is above 80% and enrollment is doubling every year.	A Cloud Computing Course: From Systems to Services	NA:NA:NA:NA	2015
Joel C. Adams	NA	Session details: Special Session	NA	2015
Joel C. Adams:Jacob Caswell:Suzanne J. Matthews:Charles Peck:Elizabeth Shoop:David Toth	In response to the shift to multicore processors, the ACM-IEEE CS2013 curriculum recommendations [1] include parallel and distributed computing (PDC) as a new core knowledge area. Some of the key concepts in PDC are the distinctions between shared-memory, distributed-memory, and heterogeneous system architectures.  Most CS educators would agree that providing students with hands-on experience improves their students' learning. Given the ubiquity of multicore processors, it is quite easy to give today's students hands-on experience developing software on shared-memory architectures. By contrast, providing students with hands-on experience developing software for distributed architectures has typically required access to a Beowulf cluster, the price of which was beyond the reach of many institutions. However, hardware manufacturers have recently begun producing a variety of inexpensive --system on a board multiprocessors. Creative CS educators are using these multiprocessors to design and build inexpensive Beowulf clusters, and using them to provide students with hands-on experience with shared-memory, distributed-memory, and heterogeneous computing paradigms.  In this special session, several PDC educators will bring, present, and demonstrate their innovative Beowulf clusters; each designed and built using a different inexpensive multiprocessor board.	Budget Beowulfs: A Showcase of Inexpensive Clusters for Teaching PDC	NA:NA:NA:NA:NA:NA	2015
Meimei Gao	NA	Session details: Panel Session	NA	2015
Meimei Gao:Julie Johnson:Dale Reed:Cate Sheller:Franklyn Turbak	NA	Using App Inventor in Introductory CS Courses	NA:NA:NA:NA:NA	2015
Cameron L. Fadjo	NA	Session details: Panel Session	NA	2015
Cameron L. Fadjo:Betsy DiSalvo:Irene Lee:Karen Peterson	Informal computer science (CS) education is currently taking shape within the myriad of social and technological solutions available to a wider audience. Increased access to low-cost mobile devices has led to the proliferation of web-based CS education programs accessible by more and more people. Online social networks further bolster the dissemination of information and help establish connections among individuals knowledgeable about the discipline. The disconnection comes when a solution is created but no strategy is devised to support distribution among the general population. In this overview we will outline the scope of this problem within the context of informal CS education by illustrating the range of programs and issues addressed by the panelists. We will highlight how each program contributes to core challenges within informal CS education and situate them within an approach that has the potential to transform how informal CS education programs are supported, developed, and scaled.	Research, Resources and Communities: Informal Ed as a Partner in Computer Science Education	NA:NA:NA:NA	2015
Bo Brinkman	NA	Session details: Paper Session: CS Education Research	NA	2015
Renee McCauley:Brian Hanks:Sue Fitzgerald:Laurie Murphy	This study compares differences in students' ability to comprehend recursive and iterative programs by replicating a 1996 study. These studies are interesting for the following reasons: (1) there have been few studies on the comprehension of recursive programs, (2) there have been few studies of recursion that involve the use of data structures, (3) subjects were asked to read and comprehend code that manipulated linked lists recursively. In a 1996 study, subjects found a recursive version of a linked list search function easier to comprehend than an iterative version. The results of this study contradict these earlier findings; subjects in this study were equally likely to correctly describe the purpose of the search algorithm, regardless of iterative or recursive implementation. Consistent with the findings in the 1996 study, subjects in this study were more likely to correctly describe the copy task using the iterative version of this problem rather than the recursive version. Subjects who correctly described the purpose of the copy method wrote abstract summaries. Many of the subjects who did not recognize the purpose of the code, and who answered incorrectly, provided a line-by-line (partial) trace of the code. While revealing some understanding of the execution of the code, these subjects were generally not able to see the forest for the trees.	Recursion vs. Iteration: An Empirical Study of Comprehension Revisited	NA:NA:NA:NA	2015
Daniel Zingaro:Leo Porter	Recent computer science education research using isomorphic questions in Peer Instruction (PI) classes demonstrates that students learn from talking to their peers and listening to the instructor's follow-up explanation. These results provide evidence of the effectiveness of the PI process but are limited to what happens in a single class session. The present work extends the use of isomorphic questions to investigate how in-class learning translates to success on the final exam. Despite considerable time between in-class questions and the final exam, we find that students who learn in class are shown to retain that learning and to perform better than students who did not learn in class. In addition, compared to students already understanding the material, those who learned the material in class are almost (87%) as likely to correctly answer isomorphic exam questions. Our results have implications for the value of difficult PI questions and the meaning of in-class response graphs.	Tracking Student Learning from Class to Exam using Isomorphic Questions	NA:NA	2015
Amruth N. Kumar	A controlled study was conducted to evaluate the effectiveness of providing visualization as part of feedback in a problem-solving software tutor on arithmetic expression evaluation. Data was collected over six semesters from multiple institutions. ANOVA analysis of the collected data was conducted in three stages. Statistically significant results include that visualization helped students learn more concepts; visualization did not improve the speed of learning; the benefits of visualization accrued primarily to less-prepared students; and visualization may affect different demographic subgroups differently. Incidental results include that there was no difference among demographic groups (male/female, traditional/underrepresented, Computer Science/non-CS) in the number of concepts learned using the software tutor, although some groups (female, underrepresented) were less-prepared before using the tutor than their counterparts, and some groups learned concepts with fewer practice problems (male, traditionally represented) than their counterparts. Concurrence of the results obtained whether the analysis was conducted based on pre-condition (need) or post-condition (benefit) of using the tutor strengthens the claims made as a result of this study.	The Effectiveness of Visualization for Learning Expression Evaluation	NA	2015
Martha Kosa	NA	Session details: Paper Session: Focus on K-12: Professional Development	NA	2015
Ralph Morelli:Chinma Uche:Pauline Lake:Lawrence Baldwin	The Mobile Computer Science Principles (Mobile CSP) project is an NSF-funded CS 10K project. Its goal is to train a new cohort of high school computer science teachers to teach an Advanced Placement (AP) level course based on the emerging Computer Science Principles (CSP) framework. Mobile CSP uses App Inventor, a graphical programming language for Android devices, to engage students in app building as a means to get them interested in computer science. This paper reports on the first year of this effort. In addition to describing the project's Professional Development (PD) course, a 6-week, full-time summer course for teachers, and the Mobile CSP curriculum, the paper provides a preliminary analysis of demographic and performance data obtained from high school students who took the course during the 2013-2014 academic year.	Analyzing Year One of a CS Principles PD Project	NA:NA:NA:NA	2015
Lori Pollock:Chrystalla Mouza:James Atlas:Terry Harvey	A major challenge for broadening participation in computing within K-12 settings is the lack of trained teachers. While professional development programs provide opportunities for the development of knowledge, skills, and pedagogy in teaching computing, teachers need ongoing support throughout the academic year. In this paper, we describe a course-based model for partnering undergraduates with teachers and students in a field experience model. We describe the model focusing on learning objectives, curriculum, field component and partnership building. We subsequently report on the products that undergraduates were able to create with their partner teachers. Finally, we investigate the impact of the field experience model on undergraduates' content knowledge, pedagogical skills and career development.	Field Experiences in Teaching Computer Science: Course Organization and Reflections	NA:NA:NA:NA	2015
Jeff Gray:Kathy Haynie:Sheryl Packman:Mary Boehm:Carol Crawford:Deepa Muralidhar	This paper summarizes our mid-project results in developing and evaluating a CS Principles (CSP) professional development (PD) model for training several cohorts of teachers across an entire state geography. CS4Alabama is an NSF-funded project that has adopted the successful practices of a national AP training program developed by the National Math and Science Initiative (NMSI) in pursuit of scalable deployment and sustainable persistence of new CSP courses across Alabama. We have created a CSP curriculum and PD program based on year-long in-person training and distance learning collaboration, which also was offered as a national MOOC as part of Google CS4HS. A statewide Teacher Leader (TL) model is used, where those who have previously taught rigorous CS courses serve as mentors in training new peer cohorts as they establish CSP courses in their schools. Teachers in these cohorts collaborate together on content and pedagogical learning experiences, fostered by the TLs. This paper reports on assessment results that are uncovering the facets of our model that are most suitable for building a sustainable network of CSP teachers. The paper summarizes our PD model, offers various lessons learned, and details the findings of the project's external evaluation team.	A Mid-Project Report on a Statewide Professional Development Model for CS Principles	NA:NA:NA:NA:NA:NA	2015
Susan Hammond	NA	Session details: Paper Session: Student Engagement: Active Learning	NA	2015
David Toth:Mary Kayler	Gaming has been identified as a way to increase student engagement in the classroom. This qualitative study explored 78 undergraduate students' experiences with a role-playing game infused into two computer science courses. Open-ended student surveys served as the primary data source to explore, "In what ways, if any, does role-playing quest based curriculum support student learning and engagement?" Key curricular innovations are described along with assignments and assessments that were integrated. Three broad themes emerged and identified personalized learning, deepened content understandings, and enhanced collaboration skills as three areas that supported student learning and engagement. Many students felt that the infusion of role-playing aspects into the courses supported their learning and engagement, but some students did not.	Integrating Role-Playing Games into Computer Science Courses as a Pedagogical Tool	NA:NA	2015
Celine Latulipe:N. Bruce Long:Carlos E. Seminario	We present a new approach to help make computer science classes both more social and more effective: "lightweight teams". Lightweight teams are class teams in which the team members have little or no direct impact on each other's final grades, yet where there is a significant component of peer teaching, peer learning and long-term socialization built into the curriculum. We explain how lightweight teams have been used in a CS1 class at our institution, and how this approach, combined with a flipped class approach and gamification, has led to high levels of student engagement, despite the difficulty of the material and the frustration that is common to those first learning to program.	Structuring Flipped Classes with Lightweight Teams and Gamification	NA:NA:NA	2015
Hanna M√§enp√§√§:Sasu Tarkoma:Samu Varjonen:Arto Vihavainen	This article describes an experimental course where students developed Internet of Things device prototypes to improve the upkeep of an urban rooftop greenhouse. With the help of a problem-based learning approach, students were first familiarized with their new learning environment and encouraged to find issues that could be improved as a meaningful personal learning experience. A project-based learning approach was then used to develop innovative solutions while validating their relevance in collaboration with gardeners that were taking care of the greenhouse. As a result, a number of practical applications for monitoring the state of the greenhouse were developed along with new practices for its maintenance. As participants were given the freedom to choose both the topic and technologies to work with, the course provided a learning experience that was tailored to suit personal interests and competences. Having the common background story allowed students to practice teamwork skills and collaborative software engineering in the context of the emerging topic of Internet of Things.	Blending Problem- and Project-Based Learning in Internet of Things Education: Case Greenhouse Maintenance	NA:NA:NA:NA	2015
Ahmad Noor	NA	Session details: Paper Session: Testing: Improving Quality of Student Testing	NA	2015
Sara Hooshangi:Richard Weiss:Justin Cappos	Writing secure code requires a programmer to think both as a defender and an attacker. One can draw a parallel between this model of thinking and techniques used in test-driven development, where students learn by thinking about how to effectively test their code and anticipate possible bugs. In this study, we analyzed the quality of both attack and defense code that students wrote for an assignment given in an introductory security class of 75 (both graduate and senior undergraduate levels) at NYU. We made several observations regarding students' behaviors and the quality of both their defensive and offensive code. We saw that student defensive programs (i.e., assignments) are highly unique and that their attack programs (i.e., test cases) are also relatively unique. In addition, we examined how student behaviors in writing defense programs correlated with their attack program's effectiveness. We found evidence that students who learn to write good defensive programs can write effective attack programs, but the converse is not true. While further exploration of causality is needed, our results indicate that a greater pedagogical emphasis on defensive security may benefit students more than one that emphasizes offense.	Can the Security Mindset Make Students Better Testers?	NA:NA:NA	2015
Raymond Pettit:John Homer:Roger Gee:Susan Mengel:Adam Starbuck	As automated tools for grading programming assignments become more widely used, it is imperative that we better understand how students are utilizing them. Other researchers have provided helpful data on the role automated assessment tools (AATs) have played in the classroom. In order to investigate improved practices in using AATs for student learning, we sought to better understand how students iteratively modify their programs toward a solution by analyzing more than 45,000 student submissions over 7 semesters in an introductory (CS1) programming course. The resulting metrics allowed us to study what steps students took toward solutions for programming assignments. This paper considers the incremental changes students make and the correlating score between sequential submissions, measured by metrics including source lines of code, cyclomatic (McCabe) complexity, state space, and the 6 Halstead measures of complexity of the program. We demonstrate the value of throttling and show that generating software metrics for analysis can serve to help instructors better guide student learning.	An Empirical Study of Iterative Improvement in Programming Assignments	NA:NA:NA:NA:NA	2015
Kevin Buffardi:Stephen H. Edwards	Writing meaningful software tests requires students to think critically about a problem and consider a variety of cases that might break the solution code. Consequently, to overcome bugs in their code, it would be beneficial for students to reflect over their work and write robust tests rather than relying on trial-and-error techniques. Automated grading systems provide students with prompt feedback on their programming assignments and may help them identify where their interpretation of requirements do not match the instructor's expectations. However, when automated grading systems help students identify bugs in their code, the systems may inadvertently discourage students from thinking critically and testing thoroughly and instead encourage dependence on the instructor's tests. In this paper, we explain a framework for identifying whether a student has adequately tested a specific feature of their code that is failing an instructor's tests. Using an implementation of the framework, we analyzed an automated grading system's feedback for programming assignments and found that it often provided hints that may discourage reflective testing.	Reconsidering Automated Feedback: A Test-Driven Approach	NA:NA	2015
Steven Andrianoff	NA	Session details: Paper Session: Beyond CS2: OS/Virtualization	NA	2015
Lee Wittenberg	Computer Science departments have special requirements for their computing environments, distinct from the "normal" requirements of most other departments. However, shrinking budgets and other factors make it difficult for many of us to provide an adequate computing environment for our students, above and beyond the generic support provided by our school's computing services division. This paper describes the use of bootable, "live" USB keys to provide students with a standard, portable environment that they can use on their own computers as well as in our labs.	MC-Live: A Portable Computing Environment for Computer Science Students	NA	2015
Abhinand Palicherla:Tao Zhang:Donald E. Porter	Virtual machines (VMs) are an increasingly ubiquitous feature of modern computing, yet the interested student or professional has limited resources to learn how VMs work. In particular, there is a lack of "hands-on" exercises in constructing a virtual machine monitor (VMM, or hypervisor), which are both simple enough to understand completely but realistic enough to capture the practical challenges in using this technology. This paper describes a set of assignments to extend a small, pedagogical operating system (OS) to form a hypervisor and host itself. This pedagogical hypervisor, called HOSS, adds roughly 1,000 lines of code to the MIT JOS source, and includes a set of guided exercises. Initial results with HOSS in an upper-level virtualization course indicate that students enjoyed the assignments and were able to apply what they learned to solve different virtualization-related problems. HOSS is publicly available.	Teaching Virtualization by Building a Hypervisor	NA:NA:NA	2015
Rafael Rom√°n Otero:Alex A. Aravind	Operating systems is a central subject in computer science curriculum, and teaching it successfully has been a challenge. Effective learning requires carefully designed programming projects that can facilitate deep thinking and enhance hands-on experience. This paper presents MiniOS, an instructional embedded operating system designed to carry out operating systems projects successfully. We explain MiniOS approach, the rationale behind it, and compare it with other similar approaches.	MiniOS: An Instructional Platform for Teaching Operating Systems Projects	NA:NA	2015
Lien Diaz	NA	Session details: Special Session	NA	2015
Paul T. Tymann:Fran P. Trees:Lester Wainwright:Richard Kick:Sandy Czajka:Andrew Kuemmel:Lien Diaz	College Board has joined national efforts to improve the state of STEM education, in particular to address the challenge of increasing participation with a diverse population of computer scientists to meet the growing demands of the field of computing. The Advanced Placement (AP) Program is pleased to endeavor in enhancing AP Computer Science offerings by maintaining college level integrity and addressing issues of equity and access for students and teachers. In addition to the established AP Computer Science A course, the AP Program is engaged in the development of a forthcoming AP Computer Science Principles course. The additional option for high school students to study college level computing will provide more students with an opportunity to be introduced to important computer science concepts, gain a broader perspective of the field of study, and have access to a larger pathway into computing. This session will review information regarding the AP Computer Science A course and will discuss plans for collecting feedback from college faculty regarding course content and approaches to programming techniques and languages. It will then discuss the new Computer Science Principles course and plans for the development and launch of the course and exam. The session will conclude with a Q&A session addressing questions regarding both courses. The session will be moderated by Lien Diaz from the AP Program at the College Board.	Achieving a shared goal with AP Computer Science A and AP Computer Science Principles	NA:NA:NA:NA:NA:NA:NA	2015
Lecia J. Barker	NA	Session details: Special Session	NA	2015
Lecia J. Barker:Stephen Cooper:Andrew McGettrick:Jason Thatcher:Heikki Topi	NA	Towards Grand Challenges in Computing Education Across Disciplines	NA:NA:NA:NA:NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Shuo Niu:Andrey Esakia:Scott McCrickard	This demo features smartwatch applications created by junior/senior CS students in a mobile development course. The course featured the Pebble smartwatch, with an e-ink display, vibrating motor, and accelerometer. Smartwatches enhance mobile device use by acting as a secondary display and providing immediate notifications, but designing for them has challenges in memory management, sensor programming, networking issues, and display size. Incorporating Pebble smartwatch development in a mobile app development class allowed students to exercise core computer science concepts to overcome Pebble hardware and software limitations and to develop applications that leverage Pebble affordances. Two sections of the class featured Pebble-focused assignments, including an open-ended homework, a focused homework, and a term design project coordinating smartphone-smartwatch use. The two-semester experience yielded apps in all Pebble-defined categories, including tools and utilities, notifications, remotes, health and fitness, and games. Examples of the students' work from each of the categories will be presented in this demo on topics such as music synthesizing, remote camera operation, course management alerts, and server management. The presented apps reflect student understanding of the sensor functionalities, hardware capabilities and limitations, and interactions of the phone-watch pair. This demo will serve as a valuable resource for those who plan to incorporate smartwatch development into their teaching practice. Based on the educational experience gleaned, future opportunities can explore the role of the smartwatch in mobile development and programming education for college and K-12 students.	Exploring Computer Science Topics with Programmable Smartwatches	NA:NA:NA	2015
Kristy Boyer:Philip Sheridan Buffum:Kirby Culbertson:Megan Frankosky:James Lester:Allison Martinez-Arocho:Wookhee Min:Bradford Mott:Fernando Rodriguez:Eric Wiebe	We present ENGAGE, a game-based learning environment for teaching computational thinking to middle school students. This project has dual aims: introducing computational thinking practices to students at a young age, and improving computational thinking attitudes among underrepresented students. In pursuit of these two goals, the ENGAGE team has mapped the learning objectives of the AP CS Principles course to the middle school level, and then built an immersive game experience upon that foundation. Students choose computer scientist avatars to represent themselves, and then play in pairs as they investigate a data-related mystery in an underwater research station, solving computational thinking challenges along the way. ENGAGE is currently being implemented as part of a quarterly elective in four middle schools in North Carolina. During the elective, students spend a total of ten classroom sessions playing the game, supplemented by "unplugged" activities that reinforce concepts learned in the game environment. We plan to expand to more middle schools in the 2015-2016 school year. In this demo, members of the SIGCSE community will be able to experience the ENGAGE game for themselves and learn more about its development and future directions. We will also discuss our success in recruiting and teaching the ENGAGE curriculum to middle school teachers who had no prior computer science experience, and the success of those middle school teachers in implementing ENGAGE within their classrooms.	ENGAGE: A Game-based Learning Environment for Middle School Computational Thinking	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Sohum Sohoni	NA	Session details: Paper Session: CS Education Research	NA	2015
Shaymaa Sorour:Kazumasa Goda:Tsunenori Mine	Assessment of learning progress and learning gain play a pivotal role in education fields. New technologies like comment data mining promote the use of new types of contents; student comments highly reflect student learning attitudes and activities compared to more traditional methods and they can be a powerful source of data for all forms of assessment. A teacher just asks students after every lesson to freely describe and write about their learning situations and behaviors. This paper proposes new methods based on a statistical latent class "Topics" for the task of student grade prediction; our methods convert student comments using latent semantic analysis (LSA) and probabilistic latent semantic analysis (PLSA), and generate prediction models using support vector machine (SVM) and artificial neural network (ANN) to predict student final grades. The experimental results show that our methods can accurately predict student grades based on comment data.	Correlation of Topic Model and Student Grades Using Comment Data Mining	NA:NA:NA	2015
Barry Wittman:Jean Pretz	If a bat and a ball cost $1.10 in total and the bat costs $1.00 more than the ball, how much does the ball cost? Many people trained in logical reasoning answer this question incorrectly. Is the kind of logical trap posed by this question similar to the logical traps in computer science? This paper examines the similarity between computer science programming problems with intuitive yet incorrect "lure" answers and logical problems from psychology and economics that share this characteristic. We find that there are fundamental similarities between these kinds of problems and that these problems can even be used as predictors of grades in introductory programming courses. Furthermore, we demonstrate that certain cognitive styles identified in recent psychological literature perform better on such problems.	Bats, Balls, and Lures: Cognitive Style in CS Education	NA:NA	2015
David Ginat:Eti Menashe	We present the utilization of the educational SOLO taxonomy for assessing algorithmic features of introductory programming. The SOLO taxonomy was recently studied by CS research educators, with respect to code reading and code writing. Most of the studies focused on code reading. In this paper we offer a framework of SOLO utilization for assessing basic algorithmic design features of code writing. Our novelty stems from focusing on: selection, flexible manipulation, and composition of basic design patterns, as well as on capitalization on unfolded task characteristics. We specify SOLO levels with respect to algorithmic design, and relate to common errors. We display our findings of applying the suggested framework in an ordered study with CS1 students.	SOLO Taxonomy for Assessing Novices' Algorithmic Design	NA:NA	2015
Ravi Gandham	NA	Session details: Paper Session: Focus on K-12: Engaging Students	NA	2015
Antti-Jussi Lakanen:Ville Isom√∂tt√∂nen	Phenomenographic studies in computing education research have previously focused on learning "programming thinking" [3], the act of learning to program [2], and conceptions of learning generally in an engineering context [10]. In the present study we analyze and discuss "what it takes to do computer programming" using phenomenography as research approach. This study is based on a large survey dataset gathered in summer outreach courses for K-12 students. The analysis resulted in 12 qualitatively different categories belonging to five separate, emergent themes: Syntax and language features, nature of programming work generally, computational thinking and problem solving, prerequisites, and auxiliary skills. We additionally reviewed whether the students' previous experience explains the categories, and observed that a mechanistic view of programming was prevailing among the inexperienced users, while experienced students more often stressed algorithmic thinking and logical reasoning. This study resembles work done by Eckerdal et al. [3], but gives a K-12 perspective to the question, "what does it takes to do programming?"	What Does It Take to Do Computer Programming?: Surveying the K-12 Students' Conceptions	NA:NA	2015
David Musicant:S. Selcen Guzey	The new AP CS Principles curriculum has a significant component regarding modeling and simulation, and many teachers will need to figure out how to accomplish this in their classroom. We have developed a new publicly available media-enhanced approach for teaching modeling and simulation, designated as TrafficJam. The approach consists of two core activities, both of which involve students optimizing traffic signals (also known as traffic lights, or stoplights). TrafficJam is likely best distinguished from other classroom simulation exercises in that these activities are introduced, motivated, and demonstrated in a video created by Twin Cities Public Television (TPT). The video uses an inquiry-driven format to feature four high school students who take on the task of improving signal timing in their own neighborhood. A pilot study of TrafficJam in four schools indicates that students find the video engaging, the activities relevant and interesting, and that they gain understanding of modeling and simulation from the experience.	Engaging High School Students in Modeling and Simulation through Educational Media	NA:NA	2015
Rachel Menzies:Michael Crabb:Daniel Herron:Karen Petrie:Craig Stewart:Mark Zarb	Computing is now one of the fastest growing fields of employment, with a large bias placed on developing Science, Technology, Engineering, and Mathematics (STEM) education in schools. However, due to the fast pace of technology development, it is increasingly difficult for schools to keep up with the latest computing methodologies. A possible solution is the use of university outreach programmes, whereby local universities can provide training workshops on areas that can be challenging for schools to implement. This can be problematic, as there is a perceived lack of interest in the methods used to interact with secondary school pupils on a university level. This paper introduces a week long 'Easter Computing School', comprising of five workshop sessions on different topics. These sessions were analysed in terms of user engagement, to better understand aspects that are important to secondary school pupils. It was found that a combination of theory and interactive workshop sessions can provide the highest levels of engagement and their use is encouraged in future workshop design.	An Analysis of User Engagement in Relation to Computing Workshop Activities	NA:NA:NA:NA:NA:NA	2015
Joan Lucas	NA	Session details: Paper Session: Testing: Tools & Techniques	NA	2015
Don Blaheta	This paper describes Unci, a unit-testing language with a clean and minimal interface suitable for introducing beginning programming students to the ideas of unit testing and test-driven development. We detail why CppUnit, a common C++-based unit-testing framework, is not well-suited for beginners, and present Unci and explain how it addresses the weaknesses of CppUnit. Finally, we present a comparison of CS2 student performance in the two systems, showing that moving from CppUnit to Unci resulted in an approximate doubling in the proportion of students able to write an effective test suite for a lab assignment.	Unci: a C++-based Unit-testing Framework for Intro Students	NA	2015
Laurie Murphy:Sue Fitzgerald:Scott Grissom:Ren√©e McCauley	A goal-plan analysis was conducted to examine the variety of plans students use in writing a recursive method for an operation on a binary search tree. Students were asked to write a recursive method to count the nodes in a binary search tree with exactly one child. The problem incorporated two goals: traversing the tree and counting nodes with one child. Three traversal plans and four counting plans were observed in student solutions. Over half of the students used the arm's-length recursion plan, which involves testing for the base case before it is actually reached in order to avoid making recursive calls. This strategy creates complex and error prone code. Making students aware of arm's-length recursion may help them avoid introducing bugs into their recursive code. Although nearly all of the 18 participants demonstrated viable plans for solving the problem, their solutions contained a variety of errors: 55 total errors of 15 types. Students had particular difficulty with base cases, misplaced calculations, and missing method calls. Knowledge of these errors can be useful for instructors when developing lecture examples, identifying distractors for peer instruction multiple-choice questions and for designing homework exercises. Instructors can counteract these problems by providing a variety of recursive examples.	Bug Infestation!: A Goal-Plan Analysis of CS2 Students' Recursive Binary Tree Solutions	NA:NA:NA:NA	2015
Michael K. Bradshaw	We introduce the Ante framework to automate the evaluation of student tests in such a way that students will see them as an integral part of the software development process. Our unique approach is to evaluate student testing before students are allowed to submit implementations of the assignment. By evaluating student testing, we can ensure that 1) students understand the assignment before moving on to implementing it and 2) students have a set of tests to aid in implementing their assignment. In this paper we will describe the existing tools and techniques to evaluate student testing, discuss the process of utilizing this framework from both the student and instructor points of view, describe the technical and usability issues in crafting Ante, and report preliminary feedback of student attitudes towards testing in the context of this new paradigm.	Ante Up: A Framework to Strengthen Student-Based Testing of Assignments	NA	2015
Ruth Anderson	NA	Session details: Paper Session: Soft Skills: Teamwork	NA	2015
Anya Tafliovich:Andrew Petersen:Jennifer Campbell	Project experience and teamwork have been identified as two of the most important deficiencies of recent graduates, so experiences with team projects are a critical component of computer science and software engineering education. However, evaluating these projects is difficult, as it requires a balance between rewarding the team's effort (and the development of skills that enable the team to work effectively) and recognizing individual contributions. We report on an investigation of the student perspective on evaluation of software development team projects. We find that (1) computer science and software engineering educators hold several misconceptions about students' preferences in teamwork evaluation methods, (2) that students' preferences with regard to evaluation change dramatically as they advance through the program and even in the course of a single term, and (3) that the change in preference occurs early in the term, before they complete any work as a team, with most students shifting their preference towards putting more weight on the team's effort.	On the Evaluation of Student Team Software Development Projects	NA:NA:NA	2015
Craig Anslow:Frank Maurer	Teaching group based Agile software development project courses is difficult. There are many aspects that need to be considered for a project to be successful such as a well defined scope, students working effectively together, and engaging with the customer. In this paper we present an experience report at teaching an Agile software development project course that involved teams developing web applications. The resources developed for the course and discussion about our experience will help inform others who also wish to teach group based software development courses.	An Experience Report at Teaching a Group Based Agile Software Development Project Course	NA:NA	2015
Jennifer Campbell:Anya Tafliovich	We report on our experience with incorporating Android software development in a second-year software design course. Our primary course goals are twofold: (1) teach principles of object-oriented design, and provide students with an opportunity to apply these principles in designing and developing Java programs, and (2) introduce students to the basics of software engineering with a team project that follows a Scrum-like software development process. In this report, we describe a team-based Android application development project that achieves our teaching goals, helps motivate student learning, and increases student satisfaction with the course. We provide an overview of our approach, outcomes, and student feedback. We also describe lessons learnt by the instructors and identify promising directions for improvements.	An Experience Report: Using Mobile Development To Teach Software Design	NA:NA	2015
Stephen Edwards	NA	Session details: Lightning Talk Session	NA	2015
Nicole Anderson:Tim Gegg-Harrison	When it comes to educating children, we may agree that it makes no sense to teach them to write before they have mastered the alphabet. Yet, it is common for CS instructors to forge ahead with the next topic even though some students have failed to gain the necessary understanding of the current topic. The tightly integrated nature of CS topics often makes this "forward progress" turn into no progress at all for those students. We propose an individualized approach to CS instruction where students progress to more advanced concepts only after they have demonstrated proficiency in prerequisite topics. We use a constructivist model of individualized instruction supported by specialized materials and a support system of instructor and peers: core Montessori components. In our case, the specialized materials are realized in a "living textbook" which incorporates scaffolded lessons delivered to students at the appropriate time based on their individual progress and also integrates a social communication network between students, peers, and the instructor (guide). Maria Montessori said that "our aim is not only to make the child understand ... but to enthuse them to their innermost core." Our prior work focused on giving our students motivating materials and creating a "Comfort Zone of Proximal Development." Combining this with Montessori methods, we believe we can help all students succeed in Computer Science, some at a slower pace and others exploring more concepts than we previously dreamed possible. We will explore the details of this approach in our (en)lightening talk.	Montessori Methods + A Living Textbook > Traditional CS Instruction (Abstract Only)	NA:NA	2015
Robert R. Lewis	coaster is a project that teaches a semester-long introductory computer graphics class by means of ten programming assignments. The assignments are incremental - each one building on the previous ones - and ultimately require implementation of most of the course content in the final one: a first-person rollercoaster simulation. Briefly described, the assignments (and their course contents) are: circles ("warmup", 2D graphics, applying trigonometry), wire track (3D graphics, parametric curves), wire car (meshes), "hedgehog" car (face and vertex normals), shaded car (lighting models and vertex shaders), shaded track (extrusion, model transforms), surfaces (B√©zier surfaces, height maps), first person (viewing transforms, animation, splines), dynamics (physics-based modeling), and textures (textures, pixel shaders). There is also an eleventh project of the student's own (approved) design. Students are provided with template code for the first ten programming assignments. The languages used are C++ on the CPU and GLSL on the GPU. Students are presumed to have access to OpenGL/GLSL 3.3/3.30 and the GLUT and GLEW libraries. Both undergraduate and graduate students take the class. and it has been presented twice at Washington State University, both times with about half of the students on a remote campus receiving it as a live telecourse. Student response has been very positive. The goal of this lightning talk is to elicit interest from the computer graphics teaching community in making coaster systematically available to other universities by providing source code and training to instructors.	coaster: Teaching Computer Graphics Incrementally (Abstract Only)	NA	2015
Shuchi Grover	Computational Thinking (CT), now widely recognized as a necessary skill for today's generation of learners, is typically being introduced to students in middle and high school (and even at the college level) in the context of programming in visual, block-based, drag-drop environments such as Scratch, Alice, Blockly, Tynker, Agentsheets and Kodu. How well are these first experiences preparing students to apply their learning successfully to future computational experiences, which are likely to be in the context of higher-order, text-based programming languages? How can we teach so as to facilitate successful 'transfer of learning' to future contexts? The art of teaching for transfer, or mediating transfer, has been actively studied for decades in education research. Pedagogies such as 'bridging', 'hugging', and 'preparation for future learning' (PFL) have shown promise in the context of education research in STEM domains at the secondary level. This fun lightning talk will shed light on these very pertinent ideas that CS education will benefit from, and share concrete strategies that can be employed in K-12 and college-level introductory programming classrooms to prepare students for better success with future computational experiences. The broader goal is to get CS educators and researchers thinking about an important aspect of teaching introductory programming and get a conversation started.	Hugging and Bridging: What It Is And Why You Should Be Doing It! (Abstract Only)	NA	2015
Marie Bienkowski	Researchers, practitioners, and policymakers are (in most states) rallying around the Next Generation Science Standards. First released in 2012, the NGSS address the "mile wide, inch deep" science teaching so prevalent in K-12 and instead emphasize disciplinary core ideas, cross-cutting concepts, and practices in science and engineering. The NGSS make a nuanced distinction between science (inquiry) and engineering (design) and include performance standards for engineering design that "literate citizens" are expected to know. Early versions of the NGSS caused kerfluffles in the CS community - "the attention paid to the discipline of computer science does not match its importance in terms of workforce demand." Ignoring calls from industry and academia to promote computer science, the authors relegated it, like statistics, to a supporting role. Putting CS in a supporting role means that it becomes a second-class object of study - a tool for investigating other disciplines - instead of a first-class object that is investigated in terms of disciplinary core ideas. Part of the problem is the lack of widely accepted core ideas that are easily explained. In the course of our work on building assessments for the Exploring Computer Science course (including drawing from the AP CS Principles framework) we have identified a manageable set of core ideas and mapped them to the NGSS engineering design standards. In this talk, I will point to materials we have developed that the community can use to show how computer science can replace engineering in the NGSS to teach practices and meet standards.	Making Computer Science a First-Class Object in the K-12 Next Generation Science Standards (Abstract Only)	NA	2015
David Heise	This lightning talk describes the current effort to create a research group at Lincoln University to conduct Computational Research On Music & Audio (CROMA). A CROMA Team of Interdisciplinary Collaborators (CROMA-TIC) will be assembled to participate in different aspects and applications of computational audio signal processing, drawing from disciplines such as computer science, mathematics, music, psychology, and nursing. This effort is modelled upon the Centre for Interdisciplinary Research in Music Media and Technology (CIRMMT) housed at McGill University, but it will be distinct in its focus on undergraduate research. Further, this research group will be unique among Historically Black Colleges and Universities (HBCUs). A goal of assembling CROMA-TIC and establishing the CROMA-Lab is to inspire participants, especially including minority students, to seek graduate degrees while enriching their undergraduate learning experiences. The initial research aims will focus on sound event separation within musical audio, with the idea that the research conducted by CROMA-TIC will be applicable to a wide array of applications (such as improving the performance of hearing aids in noisy environments or automatic transcription of music recordings, among innumerable possibilities). This effort is just underway; interested faculty and students are invited to attend the presentation and consider participation in CROMA so that it may develop into a truly interdisciplinary, multi-institutional endeavour.	Launching CROMA: Computational Research On Music & Audio	NA	2015
Eric A. Freudenthal:Kien Lim:Karla Carmona:Catherine Tabor	We are infusing inquiry-driven programming activities into algebra and physics courses with the objective of strengthening disciplinary understandings and providing all students a meaningful first experience with programming. The majority of students who complete 9th grade algebra fail to connect its syntactic and graphical representations to concepts related to rate of change. These learning deficits contribute to the well documented failure of high school and college physics courses to effectively convey conceptual understandings of the relationships between force, acceleration, velocity and position. Our programming activities for algebra and physics classrooms focus student attention towards the principles underlying symbolic and graphical representations of slope. Implementations of these inherently multi-disciplinary activities within math, physics, and even computing classes have previously only been successful when instructors have broad content and pedagogical knowledge. For our most recent implementations within physics lab courses led by inexperienced TAs, instructional modules that introduce and explore the lab course's conventional kinematic experiments were developed.	Integrating Programming into Physics and Algebra (Abstract Only)	NA:NA:NA:NA	2015
Samuel A. Rebelsky	Although undergraduate computer science enrollments are again on the upswing, increased enrollments do not seem to have led to increased diversity -- CS, at least in America, remains a field dominated by white males. A variety of evidence shows that many underrepresented groups, such as women and domestic students of color, are often motivated by course work that includes a clear societal benefit. The Humanitarian Free and Open Source Software (HFOSS) approach suggests that working on FOSS projects that have humanitarian benefits provides such motivation. Unfortunately, adding new themes and topics to courses can be difficult. CS2, in particular, often feels packed enough that it's hard to envision adding something else. And, while HFOSS is attractive, it's sometimes hard for the particular needs of a project to help students develop course-specific knowledge (about data structures and algorithms). I've recently experimented with an idea that I call "HFOSS-lite". Rather than students contributing directly to an HFOSS project, they use an HFOSS project as a source of data for their data structures and algorithms. The Ushahidi crowdmapping platform has proven especially useful. Students can contribute data to Ushahidi sites and even build their own sites. The data can be used in a variety of exercises, from simple searching to sorting algorithms in which they use different criteria (not just alphabetical or by time, but also by distance from a location and a variety of hybrid approaches) and beyond. And, because they are using the HFOSS software, they think about societal impact.	HFOSS-Lite in CS2: Incorporating the Ushahidi Crowdmapping Program in a Data Structures and Algorithms Course (Abstract Only)	NA	2015
Dee A.B. Weikle	Peer tutoring has been used in a variety of contexts and a variety of institutions to both improve learning and retention for the classroom students and to improve the confidence and knowledge base of the peer tutor. Much of the current literature focusses on how to implement peer tutoring with a fairly large program, including at least one graduate TA and multiple undergraduates who have recently taken the course. In addition, these peers were trained outside of the normal classroom hours and/or paid to participate. While useful at larger institutions, or at least those with substantial resources, this model is generally unworkable at a smaller institution without funding to pay students, or a sufficient critical mass of students to enable formal training outside of the classroom. This lightning talk describes a slightly different model that involves the university's academic support center staff for tutoring training, class attendance for technical training, and the giving of credit as opposed to payment for the student. To receive more than one hour of credit the student also works closely with the professor to complete one or more "learning modules" that later become resources for the class and provide an additional learning opportunity for the tutor. This method has been used by the author with over 9 peer tutors across a range of 7 classes, with generally good success.	A Peer Tutoring Model for Small Schools with Limited Funding and Resources (Abstract Only)	NA	2015
Douglas Fisher	In Spring 2015, instructors at participating universities and colleges plan to run their Introduction to Database courses using Jennifer Widom's self-paced online course as an optional or required resource. We call the collective of students and instructors who will be moving through Widom's course in relative synchrony, a (loosely) collaborative, distributed open, online course (CDOOC). This way of exploiting a self-paced course allows an organized cohort (e.g., a campus course) to move through at the cohort's "own" pace. If the organized cohort's progress through the self-paced course is open to other learners, outside the a priori organized cohort (as it will be in our case), then this larger population amounts to a MOOC. Because such a MOOC can be convened at anytime, by any instructor, we call it an anytime MOOC.	An Across-Institution Anytime MOOC in Database	NA	2015
Joseph Kendall-Morwick	CS faculty are responsible for educating future software developers and thus have a unique responsibility to combat the problem of sexism within the software development industry. Game development is an important subfield in which to address this problem because of its cultural impact, which extends beyond the developers involved, and its incorporation into pedagogy for the purposes of engagement and retention. The recent #GamerGate controversy has brought to public attention the issue of sexism within a white male-dominated gaming subculture as it enters the cultural mainstream, particularly due to anonymous threats of violence being made against women who have criticized the #GamerGate movement. This controversy is particularly important for CS because it centers on software developers. In addition to harming the targeted women, such threats create a chilling effect that threatens not only to silence important voices within gaming, but also to undermine progress toward gender equality in CS and the recruitment and retention of female CS students. It is important for CS faculty to evaluate their responsibility to students and to the field in light of these concerns. This lightning talk will assess the outcome of a round-table to be held with students at Capital University in which this controversy and its broader implications will be discussed. In particular, the talk will focus on outcomes related to CS education and outreach, with the goal that lessons learned through the round-table can inform the efforts of faculty planning to address such issues at their institutions.	The Need for Voices in CS to Address the #GamerGate Controversy (Abstract Only)	NA	2015
Wen-Jung Hsin	When teaching computer networking courses, over the years, the author has used Java applets and other software tools for illustrating standards, protocols, and networking concepts. Although these Java applets and software tools do perform what they are designed to do, they have their limitations. For example, the Java applets that the author used can only illustrate a fixed set of scenarios, and software tools such as Wireshark need devices to generate traces, posing a problem when the teaching resource is limited. In recent years, our school has joined the Cisco Networking Academy and taught computer networking courses offered through the Academy. Cisco Networking Academy provides a networking software program, Packet Tracer, which allows the users to setup and configure various networks which involve routers, switches, and end devices using various wired and wireless cables and protocols in local area networks or wide area networks. There are several nice features about the Packet Tracer. For example, an instructor can use the Packet Tracer to illustrate networking concepts. A student can use the Packet Tracer to iron out networking design issues by first implementing the network using Packet Tracer before implementing it in a physical lab. Additionally, students can closely examine the header information in each layer of the protocol stack as a packet steps from layer to layer and node to node. In this lightning talk, the author will share the experience of using Packet Trace in teaching computer networking courses.	Learning Computer Networking Through Illustration (Abstract Only)	NA	2015
Helen H. Hu	NA	Session details: Special Session	NA	2015
Helen H. Hu:Clifton Kussmaul:Deepa Muralidhar:Kristine Nagel	POGIL (Process Oriented Guided Inquiry Learning) is based on the principle that students learn more when they construct their own understanding. Instead of attending lecture, student teams work through POGIL activities to discover concepts on their own, while instructors circulate and facilitate learning. Students learn the material better, and this constructivist approach also teaches them important process skills, including critical thinking, team work, and leadership. In this special session, SIGCSE attendees will experience a POGIL activity for themselves, learn about the structure of POGIL activities (through a POGIL meta-activity), and hear perspectives from teachers who recently adopted POGIL activities available at http://cspogil.org. We will share classroom-tested guided inquiry activities and discuss how POGIL can transform CS classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Special Session: Perspectives on Adopting and Facilitating Guided Inquiry Learning	NA:NA:NA:NA	2015
Andreas Stefik	NA	Session details: Special Session	NA	2015
Andreas Stefik:Richard E. Ladner	This special session is for SIGCSE attendees who are interested in K-12 computing education, especially those who have or are planning to have a NSF CS 10K project. A major goal of CS 10K is broadening participation, which includes providing computing education to students with disabilities. This interactive session will introduce attendees to AccessCS10K, a project to help teachers include students with disabilities in their K-12 computing classes. Furthermore, attendees will have a hands-on experience with the Quorum language, a language designed for youth regardless of disability. It is expected that attendees to the special session will be better prepared to include a student with a disability in their computing classes or to help other teachers do the same.	Introduction to AccessCS10K and Accessible Tools for Teaching Programming	NA:NA	2015
Daniel D. Garcia	NA	Session details: Panel Session	NA	2015
Daniel D. Garcia:Wei Ding:Joseph Cohen:Barbara Ericson:Jeff Gray:Dale Reed	The recent successes of Computer Science Education Week and code.org's Hour of Code have meant that more K-12 students than ever are being given an authentic, engaging and eye-opening exposure to the wonders of computer science. There are resources aplenty to help high school and college faculty with outreach. These range from easy-to-learn, open-ended programming environments (Scratch, Alice, Snap!), to online coding challenges (code.org, Lite-bot), to non-computer activities with live performances (CS Unplugged, cs4fn), to having the entire outreach experience delivered "in a box", thanks to NCWIT. We wanted to bring educators together to share experiences with what they've done specifically with a one-day event, given these vast resources. Now that there are so many online coding experiences, it is enough to shuttle young students into a computer room, point their browser at one of these experiences, and answer questions as they come up? Is it important to include hands-on and hands-off (e.g., nifty demos, inspiring talks) components, and if so, in what order? What do different demographics find the most engaging? Is there any chance that we can do "damage", since these highlight-reel experiences might over-simplify how hard some of the problems are, and that not every important result has a flashy payoff? Do some of the early experiences leave students with the impression that computer science is only (say) apps, interactive multimedia programs or solving mazes? Finally, when it's over, what follow-up is appropriate? Participants on the panel will share best practices, common pitfalls, and advice.	One-Day Activities for K-12 Face-to-Face Outreach	NA:NA:NA:NA:NA:NA	2015
Sambit Bhattacharya	NA	Session details: Paper Session: Testing: Student Programming Errors	NA	2015
Amjad Altadmri:Neil C.C. Brown	Previous investigations of student errors have typically focused on samples of hundreds of students at individual institutions. This work uses a year's worth of compilation events from over 250,000 students all over the world, taken from the large Blackbox data set. We analyze the frequency, time-to-fix, and spread of errors among users, showing how these factors inter-relate, in addition to their development over the course of the year. These results can inform the design of courses, textbooks and also tools to target the most frequent (or hardest to fix) errors.	37 Million Compilations: Investigating Novice Programming Mistakes in Large-Scale Student Data	NA:NA	2015
Scott Alexander Turner	Looking Glass (https://github.com/sturner84/LookingGlass) is a library designed to support the testing of students' C++ code through reflection. Instructors can design tests that compile even if there are mismatches between the instructor's and student's code (like misspelled function names or parameters that do not have the expected types). Using the automatically generated metadata, instructors can search for and call functions or methods in the student code, including the main function, while providing feedback (rather than a compile error) if the required code is not found. Although not suitable for all C++ programs, Looking Glass was designed to support instructors in introductory and intermediate classes and to be transparent to the students.	Looking Glass: A C++ Library for Testing Student Programs through Reflection	NA	2015
Zalia Shams:Stephen H. Edwards	Many educators currently use code coverage metrics to assess student-written software tests. While test adequacy criteria such as statement or branch coverage can also be used to measure the thoroughness of a test suite, they have limitations. Coverage metrics assess what percentage of code has been exercised, but do not depend on whether a test suite adequately checks that the expected behavior is achieved. This paper evaluates checked coverage, an alternative measure of test thoroughness aimed at overcoming this limitation, along with object branch coverage, a structure code coverage metric that has received little discussion in educational assessment. Checked coverage works backwards from behavioral assertions in test cases, measuring the dynamic slice of the executed code that actually influences the outcome of each assertion. Object branch coverage (OBC) is a stronger coverage criterion similar to weak variants of modified condition/decision coverage. We experimentally compare checked coverage and OBC against statement coverage, branch coverage, mutation analysis, and all-pairs testing to evaluate which is the best predictor of how likely a test suite is to detect naturally occurring defects. While checked coverage outperformed other coverage measures in our experiment, followed closely by OBC, both were only weakly correlated with a test suite's ability to detect naturally occurring defects produced by students in the final versions of their programs. Still, OBC appears to be an improved and practical alternative to existing statement and branch coverage measures, while achieving nearly the same benefits as checked coverage.	Checked Coverage and Object Branch Coverage: New Alternatives for Assessing Student-Written Tests	NA:NA	2015
Joseph Kendall-Morwick	NA	Session details: Paper Session: Focus on K-12: Elementary	NA	2015
Linda Seiter	This paper presents an assessment designed to measure computational thinking skills of fourth grade students. The students in two public schools were given a set of Scratch programming challenges. The SOLO taxonomy was used to classify student programming responses based on the degree of understanding of the problem structure. The majority of fourth grade students from one school demonstrated the ability to synchronize the costume and motion of a single character sprite, as well as synchronize a basic conversation between multiple sprites. However, they struggled to integrate motion and costume changes into a multi-sprite conversation. The majority of fourth grade students from the second school, where reading and math comprehension scores fall below the state minimum requirements for proficiency, were unable to demonstrate a basic understanding of the programming tasks. The results suggest that fourth grade students who read at grade level are capable of understanding the relationships between multiple concerns within a single script, along with synchronizing a single concern across multiple scripts, but are challenged when synchronizing multiple concerns across multiple scripts.	Using SOLO to Classify the Programming Responses of Primary Grade Students	NA	2015
Charlotte Hill:Hilary A. Dwyer:Tim Martinez:Danielle Harlow:Diana Franklin	The recent renaissance in early computer science education has provided K-12 teachers with multiple options for introducing children to computer science. However, tools for teaching programming for children with wide-scale adoption have been targeted mostly at pre-readers or middle school and higher grade-levels. This leaves a gap for 4th -- 6th grade students, who differ developmentally from older and younger students. In this paper, we investigate block-based programming languages targeted at elementary and middle school students and demonstrate a gap in existing programming languages appropriate for 4th -- 6th grade classrooms. We analyze the benefits of Scratch, ScratchJr, and Blockly for students and curriculum developers. We describe the design principles we created based on our experiences using block-based programming in 4th -- 6th grade classrooms, and introduce LaPlaya, a language and development environment designed specifically for children in the gap between grades K-3 and middle school students.	Floors and Flexibility: Designing a Programming Environment for 4th-6th Grade Classrooms	NA:NA:NA:NA:NA	2015
Diana Franklin:Charlotte Hill:Hilary Dwyer:Ashley Iveland:Alexandria Killian:Danielle Harlow	The recent growth of interest in computer science has created a movement to more readily introduce computer science in K-12 classrooms. However, little research exists on how to successfully bring computer science to lower grade levels. In this paper, we present advice for researchers and curriculum developers who are getting started working with computer science in elementary schools. Specifically, we focus on practical tips for studies of this nature, developed from our experiences piloting a computational thinking curriculum with 4th-6th grade students. We address issues arising in elementary school classrooms such as recruiting and interfacing with teachers and schools, classroom management strategies, student computer literacy and developmental stages, and curriculum life cycles.	Getting Started in Teaching and Researching Computer Science in the Elementary Classroom	NA:NA:NA:NA:NA:NA	2015
Evan Barba	NA	Session details: Paper Session: Non-majors/Interdisciplinary	NA	2015
Victor T. Norman:Joel C. Adams	At our comprehensive liberal arts college, we offer a 2-credit hour CS1 course for engineering majors that includes all of the standard learning objectives of a typical 4-credit hour course. To help the students learn the course material in this compressed time frame, we switched our programming language from C++ to Python, and we replaced weekly homework assignments with labs and online problem sets. All other factors in the course were unchanged, including instructor, course and weekly learning objectives, tests, grading criteria, pedagogical style, and even textbook (the textbook came in two versions -- a C++ version and a Python version). This transition offered a unique opportunity to observe, compare, and measure student learning outcomes across the two semesters. Our measured results show a moderate but statistically significantly improvement from the semester using C++ and homework assignments to the semester using Python and online problem sets.	Improving Non-CS Major Performance in CS1	NA:NA	2015
Douglas Baldwin	Proponents of "flipped" instruction offer a vision of class meetings devoted to active learning, in exchange for students spending time outside of class acquiring basic knowledge from readings or video lectures. The price paid for this vision is the need to create the readings or videos. However, such materials are becoming available as open educational resources, and if they become widely enough available it may be possible to flip classes without requiring each instructor to develop his or her own materials. In the spring of 2014 I flipped an introductory programming course for non-computing majors in an effort to see if freely available video lectures could support it. This paper reports my findings, notably that open resources can support such a course, but just barely.	Can We "Flip" Non-Major Programming Courses Yet?	NA	2015
Clem O'Donnell:Jim Buckley:Abdulhussain Mahdi:John Nelson:Michael English	The ubiquitous nature of software has resulted in many non-computer-science (NCS) major students taking courses in computer programming. The appeal of learning computer programming for this cohort may be diminished, given that they do not usually have an initial desire to become expert programmers. This, coupled with the difficulty of learning computer programming, means that efforts to heighten their engagement with/learning of, programming skills are required. Paired programming is an approach that has been hypothesized as increasing computer science students' attendance and performance. The study presented here reports on a controlled study investigating the impact of a pair-programming approach to teaching computer programming to NCS majors. The results indicate that pair programming has a positive impact on student attendance, particularly for weaker students. While a comparison of the paired programming cohort and a traditional lab cohort is not statistically significant with respect to performance, there are definite trends which suggest that pair programming may increase the number of weaker students that succeed in the programming module. These trends are re-enforced by qualitative feedback from the participants.	Evaluating Pair-Programming for Non-Computer Science Major Students	NA:NA:NA:NA:NA	2015
Christine Moore	NA	Session details: Paper Session: Focus on K-12: Outreach/Summer Camps	NA	2015
Allison Saupp√©:Daniel Szafir:Chien-Ming Huang:Bilge Mutlu	This paper details the creation of a two-day computer science and robotics outreach course aimed at simultaneously engaging youth (children, ages 9-14) and senior (their grandparents, ages 55+) students. Our goal is to encourage enthusiasm for science and technology in students of all ages as well as provide practical instruction regarding common computer science concepts, including variables, loops, and boolean logic. To this end, we ground our course in the emerging field of social robotics, which enables the design of several multidisciplinary hands-on activities for students. We report on a four-year experience in the development of our course, which has been offered twelve times and involved over 210 youth and senior students. Our work presents a discussion regarding the challenges in designing a course for students from diverse ages, guidelines for creating similar courses, and a reflection on how we might improve our own class. The activities and project code developed for our course are available online as open-source resources.	From 9 to 90: Engaging Learners of All Ages	NA:NA:NA:NA	2015
Chulakorn Aritajati:Mary Beth Rosson:Joslenne Pena:Dana Cinque:Ana Segura	In this paper, we describe the first phase of a longitudinal study focusing on young people's attitudes towards computing careers and their computational self-efficacy. Using summer camps as a springboard to pique their interests, we are interested in enhancing their knowledge in computing topics and assessing their views through surveys. Working from the findings of this first phase in the project, we discuss our future plans for an online community learning system that is grounded in a socio-cognitive learning process, and intended to engage young people in continuous engagement with and exposure to computing concepts and skills.	A Socio-Cognitive Analysis of Summer Camp Outcomes and Experiences	NA:NA:NA:NA:NA	2015
Courtney Starrett:Marguerite Doman:Chlotia Garrison:Merry Sleigh	Computing, together with jewelry design and 3D printing offers an innovative introduction to the possibilities of technology and programming. This combination was presented to participants of a weeklong summer technology day camp focusing on computer-aided design (CAD) using jewelry design and modeling. The participants then saw their design creations built through 3D printing. In this paper we present the design of a weeklong day camp called "Computing and Jewelry Design". Initial findings are positive and suggest opportunities for improvement.	Computational Bead Design: A Pilot Summer Camp in Computer Aided Design and 3D Printing for Middle School Girls	NA:NA:NA:NA	2015
Orit Hazzan	NA	Session details: Special Session	NA	2015
Orit Hazzan:Clifford A. Shaffer	Recent years have seen the emergence of applications and concepts that rely on the involvement of the general public (the "crowd") and, consequently, create big data (e.g., MOOCs, search engines, crowdsourcing, crowdfunding, citizen/crowd science, and more). Education in particular is changing dramatically with the use of online resources and courses that generate large streams of data. In this special session, we ask: What research questions in computer science education can be explored using big data? And how can computer science education researchers apply big data analysis to support education in other disciplines? To answer these and related questions, we focus in this special interactive session on how computer science education research can be promoted by integrating big data into the research process.	Big Data in Computer Science Education Research	NA:NA	2015
Owen Astrachan	NA	Session details: Special Session	NA	2015
Owen Astrachan:Ralph Morelli:Gail Chapman:Jeff Gray	NA	Scaling High School Computer Science: Exploring Computer Science and Computer Science Principles	NA:NA:NA:NA	2015
Janet Burge	NA	Session details: Panel Session	NA	2015
Janet Burge:Armando Fox:Dan Grossman:Gerald Roth:Joe Warren	NA	SPOCs: What, Why, and How	NA:NA:NA:NA:NA	2015
Daniel D. Garcia	NA	Session details: Panel Session	NA	2015
Daniel D. Garcia:Eric Allatta:Manuel P√©rez-Qui√±ones:Jeff Solin	The pace of technology for use in computing education is staggering. In the last five years, the following technologies have completely transformed our teaching: Piazza, Google Docs, PandaGrader (now GradeScope), YouTube, Doodle, Skype, Google Hangout, Khan Academy, etc. Hardware has also played a part; we love our Zoom H2 digital voice recorder (for CD-quality lecture audio), Blue Yeti USB mike (for audio / videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of the Technology that Educators of Computing Hail (TECH) Birds-Of-a-Feather session that we've held at SIGCSE for seven years. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top", what problems they solve, and why they are so valuable. Like concert musicians, presenters will give live demonstrations and reveal the particular configuration options required to make their technology "sing". We hope this forum will allow the chance to dive deeply into the common use cases of these technologies, and explain how others can adopt them at their institutions.	Technology We Can't Live Without!	NA:NA:NA:NA	2015
Michael E. Caspersen	NA	Session details: Demonstration Session	NA	2015
Joseph B. Wiggins:Kristy Elizabeth Boyer:Alok Baikadi:Aysu Ezen-Can:Joseph F. Grafsgaard:Eun Young Ha:James C. Lester:Christopher M. Mitchell:Eric N. Wiebe	Introductory computer science courses cultivate the next generation of computer scientists. The impressions students take away from these courses are crucial, setting the tone for the rest of the students' computer science education. It is known that students struggle with many concepts central to computer science, struggles that could be alleviated in part through hands-on practice and individualized instruction. However, even the best existing instructional practices do not facilitate individualized hands-on support for students at large. We have built JavaTutor, an intelligent tutoring system for introductory computer science, which works alongside students to support them through both cognitive (skills and knowledge) and affective (emotion-based) feedback. JavaTutor aims to make advances in interactive, scalable student support. JavaTutor's behaviors were developed within a novel framework that leverages machine learning to acquire tutorial strategies from data collected within tutorial sessions between novice students and experienced human tutors. This demo presents an overview of the data-driven development of JavaTutor and shows how JavaTutor assesses and responds to students' contextualized needs. It is hoped that JavaTutor will help to usher in a new generation of tutorial systems for computer science education that adapt to individual students based not only on incoming student knowledge, but on a broad range of other student characteristics.	JavaTutor: An Intelligent Tutoring System that Adapts to Cognitive and Affective States during Computer Programming	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Eileen Fordham:Halley Freger:Amanda Hinchman-Dominguez:Alexander Mitchell:Daniel Rebelsky:Victoria Tsou:Earnest Wheeler:Zoe Wolter:Samuel A. Rebelsky	MIST, the Mathematical Image Synthesis Toolkit, is an open-source, Web-based graphics application in which students develop skills in computational thinking and deepen their understanding of mathematical functions through creative play in making images. Using a drag-and-drop interface, students build functions that describe animated abstract images. These functions combine a few basic images (e.g., a horizontal blend, a vertical blend, and a time-based blend) using mathematical operators whose semantics are based on corresponding points in each image (e.g., MIST includes models for adding and multiplying colors). Students develop a variety of skills in computational thinking by using the small set of images and operations to develop complex images, not only images that the system challenges them to make but also images that they find themselves inspired to create and even images that their peers challenge them to build. MIST also incorporates a community of artists/learners. Images created in MIST are available to other MIST users to comment on and remix (provided the designer permits reuse). MIST community members may also create challenges for other community members and can curate "galleries" of images they find particularly engaging, interesting, or even useful as challenges for others. Users can also share their images via Facebook or "tweet" their recent creations. We find that this additional community further encourages students to develop new and interesting images.	MIST, The Mathematical Image Synthesis Toolkit	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
John Cigas	NA	Session details: Paper Session: Teaching Practices	NA	2015
Janet Burge	There has been significant interest in MOOCs, both inside and outside the educational community. Some of this interest focuses on how they could be used to replace traditional brick-and-mortar education while others are interested in using them to supplement more traditional courses. Instructors can also use MOOCs to gain new insight into teaching and learning by taking on a student perspective. This paper describes how taking several MOOCs has given me a better understanding of student motivation, time commitment issues, and student perception of grading and describes how I am feeding this knowledge back into my own courses.	Insights into Teaching and Learning: Reflections on MOOC Experiences	NA	2015
Lecia Barker:Christopher Lynnly Hovey:Jane Gruning	Despite widespread development, research, and dissemination of teaching and curricular practices that improve student retention and learning, faculty often do not adopt them. This paper describes the first findings of a two-part study to improve understanding of adoption of teaching practices and curriculum by computer science faculty. The paper closes with recommendations for designers and developers of teaching innovations hoping to increase their chance of adoption.	What Influences CS Faculty to Adopt Teaching Practices?	NA:NA:NA	2015
Dirk Grunwald:Elizabeth Boese:Rhonda Hoenigman:Andy Sayler:Judith Stafford	Fostering an effective learning environment in large classes is a challenge: instructors and teaching assistants are stretched thin across many students, students often lack opportunities for personal interaction with course staff, and the size of the classes makes them seem impersonal. Furthermore, students in large classes can often find solutions to their labs and assignments online or copy them from other students, diminishing their impetus to learn and raising plagiarism concerns. This paper describes our experience and evaluation of an assessment method that resolves many of these problems and appears to scale to large classes of 600+ students. Using this method, students are evaluated via a combination of automatic grading mechanisms (or clear objective rubrics) and a 1-on-1 "grading interview". The grading interview serves to ensure the provenance of the student's work product and their depth of understanding. This change allows us to make more effective use of peer-instruction and pair-programming in our courses. It also provides the ability to re-use assignments, the insurance of timely feedback to students, and the opportunity for individualized staff attention. This paper describes variations on this method across numerous classes over the past seven years, some of the goals of this method, modifications and adaptations of the method over time, and the student experience of using this method based on survey feedback.	Personalized Attention @ Scale: Talk Isn't Cheap, But It's Effective	NA:NA:NA:NA:NA	2015
Adrian German	NA	Session details: Paper Session: Focus on K-12: Miscellaneous topics	NA	2015
Emmanuel Schanzer:Kathi Fisler:Shriram Krishnamurthi:Matthias Felleisen	Many educators have tried to leverage computing or programming to help improve students' achievement in mathematics. However, several hopes of performance gains---particularly in algebra---have come up short. In part, these efforts fail to align the computing and mathematical concepts at the level of detail typically required to achieve transfer of learning. This paper describes Bootstrap, an early-programming curriculum that is designed to teach key algebra topics as students build their own videogames. We discuss the curriculum, explain how it aligns with algebra, and present initial data showing student performance gains on standard algebra problems after completing Bootstrap.	Transferring Skills at Solving Word Problems from Computing to Algebra Through Bootstrap	NA:NA:NA:NA	2015
Philip Sheridan Buffum:Eleni V. Lobene:Megan Hardy Frankosky:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Knowledge assessment instruments, or tests, are commonly created by faculty in classroom settings to measure student knowledge and skill. Another crucial role for assessment instruments is in gauging student learning in response to a computer science education research project, or intervention. In an increasingly interdisciplinary landscape, it is crucial to validate knowledge assessment instruments, yet developing and validating these tests for computer science poses substantial challenges. This paper presents a seven-step approach to designing, iteratively refining, and validating knowledge assessment instruments designed not to assign grades but to measure the efficacy or promise of novel interventions. We also detail how this seven-step process is being instantiated within a three-year project to implement a game-based learning environment for middle school computer science. This paper serves as a practical guide for adapting widely accepted psychometric practices to the development and validation of computer science knowledge assessments to support research.	A Practical Guide to Developing and Validating Computer Science Knowledge Assessments with Application to Middle School	NA:NA:NA:NA:NA:NA	2015
Alan Cleary:Lucas Vandenbergh:John Peterson	In this paper we present our experiences using a novel programming style, reactive programming, to deliver a summer camp for students in grades 8 through 12. This software uses a declarative programming approach to allow students without a background in computing to explore a wide variety of subject material within a 3D virtual environment, including computer science, mathematics, physics, and art. This work is based on PyFRP, a reactive programming library written in Python. We describe our camp experience and provide examples of how this style of programming supports a wide variety of educational activities.	Reactive Game Engine Programming for STEM Outreach	NA:NA:NA	2015
Rachelle Hippler	NA	Session details: Paper Session: Computers & Society	NA	2015
Mikko Apiola:Jarkko Suhonen:Abbi Nangawe:Erkki Sutinen	Sub-Saharan Africa (SSA) needs to transform from an information society that consumes information technologies into a knowledge economy that creates technologies. Key domains for transformation include computer science education, research and development. The lack of research culture and support for research activities often results in low research outcomes, and slows down the development of innovative and independent thinkers and problem solvers. To increase research capacities, we have launched a doctoral level computer science research training program between the College of Business Education (CBE), Dar es Salaam, Tanzania, and the University of Eastern Finland (UEF), School of Computing. This paper discusses the preliminary experiences of planning and setting up that program.	Building CS Research Capacity in sub-Saharan Africa by Implementing a Doctoral Training Program	NA:NA:NA:NA	2015
Jennifer Burg:V. Pa√∫l Pauca:William Turkett:Errin Fulp:Samuel S. Cho:Peter Santago:Daniel Ca√±as:H. Donald Gage	This paper describes a new program for attracting non-traditional students into computer science and retaining them through sustained peer and faculty mentoring. The program is centered on socially-inspired learning, - learning in and for a community. It consists of a STEM Incubator course, hands-on projects with real-world applications, a sandbox lab, and a mentoring system that begins in the STEM Incubator course and continues with students who choose to remain involved in projects and courses. Our program is in its second year. Data collected on enrollment and retention and results of student questionnaires show promise for the success and sustainability of the program.	Engaging Non-Traditional Students in Computer Science through Socially-Inspired Learning and Sustained Mentoring	NA:NA:NA:NA:NA:NA:NA:NA	2015
Grace Ngai:Stephen C.F. Chan	Service learning has been gaining attention in recent years. It has been established as an effective method to teach students a variety of concepts that are not easily taught in the classroom, and much effort has gone into making service learning accessible and relevant to computer science students. This paper investigates a popular mode of computing-related service learning -- offshore projects that seek to introduce information and computing technologies (ICTs) into a beneficiary population. Based on multiple years of experience working with ICTs in service learning, the authors examine the impact on students and beneficiaries through several critical questions, and draw conclusions and recommendations on good practices for designing offshore service learning projects for computing students.	How much impact can be made in a week?: Designing Effective International Service Learning Projects for Computing	NA:NA	2015
Faisal Kaleem	NA	Session details: Paper Session: Beyond CS2: Networking/Security	NA	2015
Joel Sommers	Developing systems-level networking software to implement switches, routers, and middleboxes is challenging, rewarding, and arguably an essential component for developing a deep understanding of modern computer networks. Unfortunately, existing techniques for building networked system software use low-level and error-prone tools and languages, making this task inaccessible for many undergraduates. Moreover, working at such a low-level of abstraction complicates debugging and testing and can make assessment difficult for instructors and TAs. We describe a Python-based environment called Switchyard that is designed to facilitate student projects for building and testing software-based network devices like switches, routers, and middleboxes. Switchyard exposes a networking abstraction similar to a \textit{raw socket}, which allows a developer to receive and send Ethernet frames on specific network ports, and provides a set of classes to simplify parsing and construction of packets and packet headers. Systems-level software created using Switchyard can be deployed on a standard Linux host or in an emulated environment like Mininet. Perhaps most importantly, Switchyard provides facilities for test-driven development by transparently allowing the underlying network to be replaced with a test harness that is specifically designed to help students through the development and debugging process. We describe experiences with using Switchyard in an undergraduate networking course in which students created an Ethernet learning switch, a fully functional IPv4 router, a firewall with rate limiter, and a deep-packet inspection middlebox device.	Lowering the Barrier to Systems-level Networking Projects	NA	2015
Maxim Timchenko:David Starobinski	In recent years cybersecurity has gained prominence as a field of expertise and the relevant practical skills are in high demand. To reduce the cost and amount of dedicated hardware required to set up a cybersecurity lab to teach those skills, several virtualization and outsourcing approaches were developed but the resulting setup has often increased in total complexity, hampering adoption. In this paper we present a very simple (and therefore highly scalable) setup that incorporates state-of-the-art industry tools. We also describe a structured set of lab assignments developed for this setup that build one on top of the other to cover the material of a semester-long Cybersecurity course taught at Boston University. We explore alternative lab architectures, discuss other existing sets of lab assignments and present some ideas for further improvement.	A Simple Laboratory Environment for Real-World Offensive Security Education	NA:NA	2015
Keunhong Lee:Joongi Kim:Sue Moon	We present the KENSv2 (KAIST Educational Network System) framework for network protocol implementation. The framework is event-driven to guarantee deterministic behaviour and reproducibility, which in turn delivers ease of debugging and evaluation. Our framework consists of four components: the event generator, the virtual host, the TCP driver and the IP driver. The two drivers are what students have to implement, and we offer to the students the drivers in the binary format for paired testing and debugging. We have developed a test suite that covers three categories of test cases: specification, paired, and logic tests. The framework logs packet transmissions in the PCAP format to allow use of widely available packet analysis tools to inspect logical behaviour of student solutions, such as congestion control. We have designed five step-by-step assignments and evaluated student submissions. With our automated test suite, we have cut down the number of TAs by half for the doubled class size compared to the previous semester, in total 3 TAs with 49 students. We plan to continue using KENSv2 in our undergraduate networking course and expand the test suite.	An Educational Networking Framework for Full Layer Implementation and Testing	NA:NA:NA	2015
Nafeesa Dewji	NA	Session details: Special Session	NA	2015
Nafeesa Dewji:Steven A. Wolfman:Geoffrey L. Herman:Leo Porter:Cynthia Taylor:Jan Vahrenhold	This session is a chance for researchers studying concept inventories (CIs)--low-cost assessments highlighting student misconceptions in a field--and CS education practitioners to communicate about advances in concept inventories in an engaging and utterly ridiculous way. We use a "quiz show" format to present CI items from various authors' work across the computing curriculum. On each question, audience members and volunteer contestants consider their own response and guess students' common responses. Then, they see how authentic student data illustrate the misconceptions these items probe. The session's goal is three-fold: educate practitioners about recent results in concept inventory research that may suggest surprising trends in student learning, popularize concept inventories as a tool in research and practice, and collect the audience's expert responses to concept inventory items.	The CS Concept Inventory Quiz Show	NA:NA:NA:NA:NA:NA	2015
Katie Apone	NA	Session details: Panel Session	NA	2015
Katie Apone:Marina Bers:Karen Brennan:Diana Franklin:Maya Israel:Pat Yongpradit	As awareness of computer science education grows in the general public, it is important to showcase computer science education as accessible for all grades K-12 and beyond. As panelists present the projects and research they've been conducting, we will highlight three overarching topics: The importance of K-5 computer science education to educators of all grade levels, Thoughts on why K-5 has traditionally been less prominent in the computer science education landscape, and Strategies on how we, the computer science education community, can promote K-5 computer science education as worthwhile as 6-12+ computer science education. Barriers to why K-5 computer science education is not as prominent as that in grades 6-12, such as scarcity of wide-spread curriculum or scarcity of research, will lead to panelists presenting how their work is rectifying this imbalance. This session's panelists are pioneers and important thought leaders in the K-5 computer science education field. Panelists in this session are either producing research in the K-5 computer science education field or working at a large scale to promote or increase participation of K-5 students in computer science.	Bringing Grades K-5 to the Mainstream of Computer Science Education	NA:NA:NA:NA:NA:NA	2015
Nick Parlante	NA	Session details: Special Session	NA	2015
Nick Parlante:Julie Zelenski:Peter-Michael Osera:Marty Stepp:Mark Sherriff:Luther Tychonievich:Ryan Layer:Suzanne J. Matthews:Allison Obourn:David R. Raymond:Josh Hug:Stuart Reges	A great CS assignment is a delight to all, but the path to one can be most roundabout. Many CS students have had their characters built up on assignments that worked better as an idea than as an actual assignment. Assignments are hard to come up with, yet they are the key to student learning. The Nifty Assignments special session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments. Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. A key part of Nifty Assignments is the mundane but vital role of distributing the materials -- handouts, data files, starter code -- that make each assignment ready to adopt. The Nifty Assignments home page, http://nifty.stanford.edu, gathers all the assignments and makes them and their support materials freely available. If you have an assignment that works well and would be of interest to the CSE community, please consider applying to present at Nifty Assignments. See the nifty.stanford.edu home page for more information.	Nifty Assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Sarah J. Wille:Dae Kim	Little research exists on factors that affect high school computer science student engagement. The BASICS Study (Barriers and Supports to Implementing Computer Science) brings rigor to this issue by building on instruments developed to measure implementation and factors affecting implementation of math and science programs, and customizing them for use with Exploring Computer Science (ECS). One goal of the 2-¬Ω year BASICS Study is to provide the computer science education community with tools to systematically and rigorously measure computer science program implementation components, like student engagement. Aligning efforts in computer science around data collection and description can support the collective effort to grow and sustain computing education. This poster reports on BASICS Study Year 1 findings about factors related to student engagement in ECS classes. The sample includes 232 students from eight public high schools in Chicago and Washington, DC. Student questionnaire data collected focused on: 1) Student engagement, 2) Teacher instruction, 3) Student attitudes, and 4) Other student characteristics, such as grade, gender, race/ethnicity, and previous computing experience. Analyses included multi-factor confirmatory factor analysis to examine the validity of the measures, and multiple linear regression analysis to estimate the effects of teacher instruction and student attitudes on engagement. Results indicate teacher instruction significantly positively affects student engagement in ECS classes. Some student attitude variables are also significantly related to student engagement, but there was no significant variation in engagement across gender or race/ethnicity categories.	Factors Affecting High School Student Engagement in Introductory Computer Science Classes (Abstract Only)	NA:NA	2015
Daniel W. Lewis:Lisa Kohne:Timothy Mechlinski:Mariana Schmalstig	This poster presents preliminary data in the field of computing education research, focusing on the relationship between high school student participation in Exploring Computer Science (ECS) and their achievement on the math portion of the California Standard Test (CST). The course uses an inquiry-based approach that is expected to improve students' problem solving skills. Students who enrolled in ECS at ten high schools in San Jose, California were monitored over a three-year period to investigate possible relationships between participation in ECS and scores on standardized math tests. Results show a statistically significant difference between ECS participants and their peers for two of three project years.	Exploring Computer Science Course and Math Achievement (Abstract Only)	NA:NA:NA:NA	2015
Karen H. Jin:Gavin Kearns	Programmable robots have become a very popular tool to introduce children to technology. However most curricula that emphasize on actual programming typically target kids 10 years and older. This summer, the University of New Hampshire organized an Elementary Program Introducing Computing (EPIC) camp. Children 7-9 years old, with no prior programming experience, were introduced to problem solving and creative program design using Lego EV3 Mindstorms robotics. The program followed a just enough principle, such that just barely enough contents were presented to the children in spite of a wider ranger of available materials. For example, a simple robot model was prebuilt to help children focus on programming rather than construction; program control flow and sensor data processing were introduced early on, but only using a very limited set of visual programming blocks and sensors. These basic structure blocks provide enough functionality to construct a moderately complex program, and help students stay focused on problem solving in a non-overwhelming setting. In order to gauge the learning outcome, a test was given before and after the camp. The comparison of the results showed that our method helped the children retain the programming skills and knowledge of general concepts of computing.	Just Enough Programming for Eight-years Olds (Abstract Only)	NA:NA	2015
Lori Carter:Tim Little:Claire Mathews	The use of computation alongside the natural sciences is moving research forward at unprecedented rates. Computational scientists are in high demand, and the undergraduate level is a great place to begin training students for work in this area. Furthermore, studies have shown that applied programs such as computational science are attractive to students and aid in retention. Yet, the number of undergraduate computational science programs remains very limited. Throughout informal conversations with colleagues who were interested in combining computing and science, we repeatedly heard 2 reasons why a computational science program was missing from their institution: 1) they lacked counterparts in the natural sciences who were interested in working with them and 2) their department couldn't support the change in personnel or curriculum that they thought was required to introduce and maintain a computational science program. Addressing the first concern, this poster displays some of what was learned from interviews with 20 natural scientists regarding how they currently or might work with a computational counterpart. Our hope is that this information might be used in conversations with reluctant natural scientists. Addressing the second concern, this poster summarizes the content of computational science programs that currently exist for undergraduates, including majors, minors, computational tracks in science majors or science tracks in computational majors, and science or computational courses with complementary material. Our hope is that this summary will encourage colleagues that, given such variety, there is a place for some form of computational science at their institution.	Moving Ahead with Undergraduate Computational Science Programs (Abstract Only)	NA:NA:NA	2015
Yesem Kurt-Peker:Lydia Ray:Rania Hodhod:Shamim Khan	Computational thinking is an essential skill for everyone in today's world. It is a problem solving skill that incorporates problem decomposition, pattern recognition, abstraction, logical and algorithmic thinking. Yet the exposure of students in K-12 curriculum to computational thinking is minimal in most schools. There are various opportunities for computational thinking to be included in almost all content areas in the curriculum. In order for this to be realized, teachers need introduction to the concept of computational thinking and they need to be equipped with tools to provide practices in this concept in the classrooms. Inspired by this idea, we organized a workshop in June 2014 to involve all teachers from all grade levels and all disciplines where we introduced them to the concept of computational thinking and taught them tools such as Scratch, Google Sites, HTML, and AppInventor. The workshop attracted 34 teachers mostly from the Muscogee County School District in Georgia. In this poster we present our recruitment strategy, methodology of our workshop, and results from our pre and post surveys. In particular, we present the influence of our workshop on teachers' views of computational thinking. We also share highlights from the projects that the teachers worked on during the workshop and presented at the end.	Computing in the Classroom: A Workshop for Teachers to Infuse Computational Thinking into K-12 Classrooms (Abstract Only)	NA:NA:NA:NA	2015
Helen H. Hu	As part of the new AAC&U TIDES initiative (TIDES: Teaching to Increase Diversity and Equity in STEM), Westminster College has created a new computer science course for non-majors and paired it with a biology course as a first-year Learning Community. The new CS0 course relies heavily on culturally sensitive POGIL activities to be welcoming of all students, shifting to a more equitable, multicultural approach to CS curriculum and instruction. Process Oriented Guided Inquiry Learning (POGIL) is a student-centered learning approach that 1) assigns students to work in self-managed learning teams, 2) on specially designed guided inquiry materials, 3) while the instructor facilitates the development of process skills [1]. By requiring students to derive CS concepts for themselves while working together in learning teams, POGIL activities allow diverse student voices to be heard. They also provide a framework for instructors to act as "guides on the side" rather than "sage on the stage" for a large portion of class time. These CS Principles POGIL activities are among the first POGIL activities in any discipline to be deliberately designed to be culturally sensitive. In Fall 2015, CS instructors at four partner institutions will adopt these POGIL activities in their CS0 courses.	Using POGIL Activities to Teach CS Principles to Diverse Students (Abstract Only)	NA	2015
Jeff Gray:Mary Boehm:Carol Crawford:Jeff Baker:Gina McCarley:Kitty Morgan:Kelley Rouze:Jill Westerlund:Carol Yarbrough	This poster describes our experience with the convening of a statewide committee of Mathematics and Computer Science teachers and content specialists to compare the content of the AP Computer Science A Course (AP CS A) and the Computer Science Principles (CSP) course with the Alabama Course of Study-Mathematics. The purpose of the comparison was to identify overlaps in content and to make recommendations to the State Department of Education and the State Board of Education regarding the option of awarding mathematics credit for completion of the Computer Science courses. This crosswalk activity led to the December 2013 decision by the Alabama State Department of Education (ALSDE) to count both CS Principles and CS A as courses satisfying the four-course requirement for high school graduation in Alabama. The poster will describe the crosswalk activity, the results, and the specific strategic approach to involve the ALSDE as collaborators in the activity.	A Case Study on Adding Computer Science as a Math Graduation Elective: A Report from the Alabama CS/Mathematics Crosswalk Committee (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Jake Trower:Jeff Gray	Introducing programming concepts to children early in their education can be beneficial because the type of problem solving that encompasses computational thinking is becoming increasingly relevant in our daily lives. A relatively new breed of programming environments has emerged to address this need. Visual programming languages (VPLs) allow programming logic to be represented with diagrams that illustrate its execution flow. Popular VPLs (e.g., Scratch, Snap, Alice, App Inventor) exist as full-featured, stand-alone programming environments with diagrammatic representations of the program instructions. This representation removes the syntactical barrier to entry that may exist with textual languages. Blockly, developed by Google, is a type of block language development kit that allows the rapid construction of new block-based visual programming languages to address a specific pedagogical or content focus. This poster provides a brief tutorial on the steps used to create a new Blockly environment, along with two case studies demonstrating the power of Blockly. The two environments introduced are focused on the manipulation of images via operations on pixels (Pixly), and programmatic control of a Sphero robot (Spherly). The construction and specific details of these two environments are described and illustrated with html, xml, and Javascript code examples and some of their potential applications. More information about Pixly and Spherly can be found at: http://outreach.cs.ua.edu/pixly and http://outreach.cs.ua.edu/spherly	Creating New Languages in Blockly: Two Case Studies in Media Computation and Robotics (Abstract Only)	NA:NA	2015
Sarah Heckman:Jason King:Michael Winters	Ideally, software engineering courses should adequately reflect real-world software development so that students obtain a better understanding and experience with practices and techniques used in industry. Our objective is to improve software engineering courses by incorporating best practices for automated software engineering and facilitating rapid feedback for students using an open source continuous integration framework for evaluating student software development. The open source Jenkins Continuous Integration Server is the core of our framework, which provides a consistent environment for building student projects, executing automated test cases, calculating code coverage, executing static analysis, and generating reports for students. By using continuous integration, a common tool in real-world software development, we can incorporate software engineering best practices, introduce students to continuous integration in practice, and provide formative feedback to students throughout the software development lifecycle. We found that 76% or more of students in each of the classes that deploy our framework reported that using Jenkins increased their productivity, and that 84% or more of students in each of the classes reported that using Jenkins increased their code quality.	Automating Software Engineering Best Practices Using an Open Source Continuous Integration Framework (Abstract Only)	NA:NA:NA	2015
Ariel Ortiz	When dealing with the topic of back-end programming many CS web development courses typically focus on how to use a popular web framework, for example Spring MVC or Ruby on Rails. The problem with this approach is that students will most likely end up using some other different framework or technology if ever they decide to become professional web developers. Our students need to learn concepts and skills that serve as a foundation to learn whatever different technologies are used now or happen to appear in the future. This poster presents the author's experience on using a bottom-up approach to teach the fundamental aspects of how the HTTP protocol works, and how this knowledge can be used to get a deep understanding of the inner workings of the web by building a simple yet complete server-side web framework. Using Node.js as the development platform, students are able to take TCP sockets as the building blocks for higher-level web abstractions. This approach allows covering a variety of specific topics that are essential for a professional web developer: request and response structure and headers, HTTP methods, form processing, cookies and sessions, text encodings, MVC software architectural pattern, database integration using ORM (Object-Relational Mapping), REST (Representational State Transfer) architecture, security issues (HTTPS protocol, common web vulnerabilities), and client-side integration using AJAX (Asynchronous JavaScript and XML). Anecdotal evidence shows that students with this knowledge repertoire are better suited for learning, using and debugging new and existing web technologies.	A Bottom-Up Approach to Teaching Server-Side Web Development Skills (Abstract Only)	NA	2015
David Weintrop:Uri Wilensky:Jennifer Roscoe:Daniel Law	This poster presents an environment and set of pedagogical strategies designed to explore how best to use blocks-based programming tools to prepare learners for future, text-based programming languages. Starting with the snap! programming environment, we added the capability to view the JavaScript equivalent of any blocks-based script authored inside the environment. Additionally, when students define behaviors for new blocks, they do so in JavaScript. This makes it possible to compose blocks-based scripts alongside text-based JavaScript programs and have the two run side-by-side. This environment was used during the first 5-weeks of an introductory programming class at the high school level as part of a quasi-experimental study investigating the relationship between programming modality and emerging student understanding. Teachers of the course used the blocks/text hybrid features in various ways to support learners developing an understanding of programming concepts and laying the foundation for future text-based instruction. These strategies included having students compose programs with graphical blocks then view the equivalent JavaScript, prompting class discussion on similarities and differences between the two modalities; having students write pseudocode for their blocks-based programs before comparing the pseudocode to the JavaScript; and finally, having students implement their algorithm directly in JavaScript, using blocks as a resource to reference proper syntax.	Teaching Text-based Programming in a Blocks-based World (Abstract Only)	NA:NA:NA:NA	2015
Sonal Dekhane:Kristine Nagel:Nannette Napier	This project addresses the issue of retaining women in Information Technology (IT) at an open access institution. To meet the goal of retention, we focused on supporting students' learning and mentoring needs. Female IT majors and minors were recruited and participated in a weeklong summer boot camp. At the boot camp they participated in Java programming sessions, various professional development and peer mentoring sessions and a field trip. These activities were aimed to increase not only the participants' knowledge of programming, but they were also designed to increase the participants' confidence, their knowledge of IT careers and fields of research and most importantly to form a community of support. Initial data collection shows that 61% of participants enrolled in a programming course following the boot camp, which is a crucial step in retention of majors and minors. Authors have also experienced an increase in the participants' engagement in an on-campus community building effort. Formal data analysis of pre and post surveys for evaluating changes in computing attitudes and engagement is currently being performed.	Summer Programming Boot Camp: A Strategy For Retaining Women In IT (Abstract Only)	NA:NA:NA	2015
Jennifer Albert:Barry Peddycord III:Tiffany Barnes	In this poster, we describe efforts to assess computational thinking activities that can be easily implemented in any science classroom. Studies have shown that a set of conditions must be met for computational thinking tools to be used in K-12 education and that when they are used, there is a wide spectrum in the level of computational thinking that the tool enables. This study extends this work by examining how middle school students translated their science fair projects into Scratch and what evidence of computational thinking is present. Scrape, a tool designed to analyze Scratch projects was used. Overall, it was found that most students simply created a presentation of their project without much complexity. Eight students created interactive projects that required user participation and used more advanced computational concepts. Finally, recommendations are given for next steps in the creation of a series of activities that would scaffold student learning as they apply to computational thinking concepts of a science concept.	Evaluating Scratch Programs to Assess Computational Thinking in a Science Lesson (Abstract Only)	NA:NA:NA	2015
Evelyn Brannock:Robert Lutz:Mai Yin Tsoi	Literature has estimated that about 33% of students who start a computer science degree program eventually drop or fail their first programming course. With the decreasing number of college graduates entering the computing industry, the workforce is missing out on the wealth and breadth of innate student ability and skills that are switching to non-STEM fields. This project developed, implemented and researched the effects of an innovative instructional strategy that integrated cutting-edge devices into an intermediate programming curriculum. Assignments were designed with the Java Software Ddevelopment Kkit for Java to strengthen student motivation and engagement by tapping into their creativity, collaborative skills, and critical thinking by using the InterAxon Muse, Oculus Rift, and the LeapMotion devices. Preliminary data indicates that although students may have enough motivation and interest in programming to persevere through the course, the implementation of this teaching methodology positively impacted their views and beliefs about programming skills and their relevance to their education. As well, survey data shows that student self-efficacy increased immediately after this educational intervention. Finally, instructor reflections point to a general shift in class morale and engagement with the inclusion of the assignments where students were required to solve problems without documentation. Future implications are also presented in this poster.	Integrating Cutting Edge Devices to Increase Student Retention in Programming (Abstract Only)	NA:NA:NA	2015
Jean H. French:D. Brian Larkins	This poster describes the operation and implementation of the E-Assess web-based program assessment tool. The E-Assess tool provides a centralized management system for generalized program assessment and has been used to support ABET program assessment within the CS/IS department at Coastal Carolina University for the past two years. This system defines multiple roles for several different assessment activities -- allowing individual faculty to operate independently, yet still providing an always up-to-date view of the process to assessment coordinators. Coordinators provide mappings between overall program objectives and specific measurement points across the curriculum. At the conclusion of a class, the instructor enters the assessment measures specific to the course. When all course data has been added, the E-Assess system automatically compiles the overall assessment data into summary reports that are used to evaluate program progress and to inform the continuous improvement process.	E-Assess: A Web-Based Tool for Coordinating and Managing Program Assessment (Abstract Only)	NA:NA	2015
E. Kent Palmer:Terry Linkletter:Paulette Alexander:Patricia L. Roden:Kewal Dhariwal:Indira R. Guzman	In the Fall of 2013, the Institute for Certification of Computing Professionals (ICCP) appointed the authors of this paper to the CS2013 Assessment Council. This council created a standardized exam to assess computer programs and identify areas of the curriculum that a school needed to strengthen to meet CS2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science. The existing Major Field Test for Computer Science from Educational Testing Service does not provide schools with sufficient guidance to determine what aspects of their computer programs are strong and what aspects need to be strengthened to meet the CS 2013 guidelines. The ICCP exam covers the Core Tier 1 Knowledge Units (KU). CS 2013 indicates that all computer programs should teach these KUs. The ICCP exam selects questions in proportion to the number of hours the CS2013 guidelines indicate are necessary to teach the Core Tier 1 learning objectives for a KU. Choices for multiple choice questions were limited to three per question, since research indicated that student mastery of topics could be assessed more rapidly with fewer distractors without reducing reliability. The exam was alpha tested in 2014 and beta tested in January and February 2015. The exam will be available in Spring of 2015.	CS2013 Assessment Exam (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Sarah Hug:Jane Krauss:Catherine Ashcraft	Counselors for Computing leverages the National Center for Women & Information Technology (NCWIT)'s organizational membership, applies evidence-based approaches for professional development, and monitors and adjusts practices to make inroads into CS education through K12 counselor engagement. This engagement is needed to assure more girls and other underrepresented people are prepared for careers in computing. Colleges and universities, businesses, youth-serving organizations, computer science educators, professional counselor associations and others work to bring C4C to places where reform is underway (e.g., CS Principles, CS10K, Exploring Computer Science initiatives). These new education and teaching initiatives have implications for K12 student computer science guidance, and C4C materials can provide the knowledge necessary to promote counselor and educator engagement with computing. In this poster presentation, the authors: a) illustrate how computer science educators have partnered with NCWIT and incorporated counselor education into multiple elements of their own work, b) direct K12 computer science educators and stakeholders to free resources developed for C4C, c) provide initial evidence of the program's effectiveness, and d) develop future partnerships with poster viewers at SIGCSE 2015 to educate K12 counselors about the opportunities available for their students in the computing fields.	Case Studies of Use: Creating Counselor Champions for Change in K12 Computing Education (Abstract Only)	NA:NA:NA	2015
Amit Maor	Undergraduate computer science students can have difficulty understanding quicksort and other divide-and-conquer sorting algorithms. It is important to understand how students think about quicksort in order to find out how to better teach the students, and also for those students to be able to write and analyze these algorithms for their own use. Data was collected from two interviews, each about an hour long, with undergraduate computer science students. The data was then qualitatively analyzed in order to draw conclusions on how the students approached the coding of the quicksort algorithm. Both interview participants were able to quickly and efficiently write quicksort using linked lists. However, both students struggled when asked to rewrite their algorithms using static arrays. From the transcripts and hand-written notes taken from the two interviews, it seems plausible that their issues stem from challenges with their treatment of the pivot in the array implementation. Additionally, the array implementation may have caused the participants to change the visualization of the algorithm to which they had grown accustomed, further accentuating their difficulties. While both students showed obvious proficiency with the linked-list algorithm, they failed to realize key intuitions when attempting to make their algorithms space-efficient by using a single array. Future work may include analysis of other divide-and-conquer algorithms, as well as a closer look into how visualizations of sorting algorithms affect student understanding.	A Qualitative Analysis of Students' Difficulties with the Quicksort Algorithm Using Arrays (Abstract Only)	NA	2015
Brittany Ann Kos:Elizabeth Sims	The STEM Career Infographic Project (SCIP) was a 4-week exploratory project deployed in an 8th grade classroom at Mountain Vista Middle School (MVMS). SCIP was poised to address the growing focus on STEM fields at MVMS and within the school district. We piloted SCIP in Spring 2014 with six science classes or about 180 students. SCIP allowed for students to explore their own STEM interests, while simultaneously engaging in the 6 Computational Thinking Practices (CTP) outlined by the College Board. Students were required to research a STEM career in-depth, then report on their careers using infographics (CTP #2: Creating Computational Artifacts and CTP #3: Abstracting). We used free and online programs to create the infographics; this provided the students the opportunity to learn software they were not previously exposed to and to explore new communication tools (CTP #1: Connecting Computing and CTP #2: Analyzing Problems and Artifacts). SCIP also provided many occasions for the students to work together by sharing career information or helping each other with the software (CTP #6: Collaborating). At the end of the project the students presented their infographics in front of the class and taught their classmates about their career (CTP #5: Communicating). The project was incredibly successful. The students had a positive affect through the duration of the project and many also expressed an extreme level of interest in doing similar projects in the future. We will be repeating this project in Spring 2015, with a few adaptations and formal evaluation scheme.	STEM Ccareers Inforgaphic Project (SCIP): Teaching Media-Based Computational Thinking Practices (Abstract Only)	NA:NA	2015
Elodie Fourquet	In early 2014 I created and taught an introductory CS course for non-CS students at Mount Holyoke College. I chose to emphasize algorithmic thinking as a way of solving problems on and off the computer, so I needed concrete and appealing problems for the students to solve. Having the students create their own problems was my way of doing so. Based on a one week introduction to visual design, each student designed the image or animation that they would later program. As they did so outside class, the students and I collaborated in class solving the problems of implementing a design I had chosen: solving design problems of their own overlapped with algorithmic solution of implementation problems in class. Subsequently, they applied the classroom lessons to their own designs. The result was a collection of programmed images and animations the students were eager to show their families and friends. The dual nature of their practice appealed to the students: they were motivated to do the course-work; they took ownership of their work and of skills they acquired; they formed a cohesive community working together in the lab. Modeling on the classroom work in which they participated was effective in building programming skills. Most important several students expressed unprompted interest in taking a follow-on course.	Algorithmic Thinking: Program that Solve Well-defined Visual Problems (Abstract Only)	NA	2015
Catherine Ashcraft	Girls and women continue to be underrepresented in computing, and this results in costly consequences for U.S. innovation and productivity; it also reproduces existing socioeconomic inequities, especially for women of color. This poster session will provide an in-depth look into Compugirls, a culturally responsive technology enrichment program for girls in under-resourced districts. The program ultimately enables girls to design technologies to address social inequities and foster social justice. Girls participate in three courses over the course of a year: 1) learning to use technologies such as iMovie, GarageBand, and iPhoto, 2) designing games with SCRATCH, and 3) programming "builds" in a virtual world environment. Throughout all three courses, the girls engage in a research project that connects the technologies they are learning to social justice issues they choose to address in their communities. The poster will also present findings from our three-year, NSF supported mixed-method study of the program. In particular, the session will illustrate how the girls developed their identities and abilities as technosocial change agents. The session also identifies conditions that, at times, limited the power of these possibilities and will report on key "lessons learned" in developing large-scale, sustainable computing programs.	Culturally Responsive Computing: An In-depth Examination of Outcomes in COMPUGIRLS (Abstract Only)	NA	2015
Emily Stansbury	This research found that some students conflate Python lists and dictionaries. This confusion could result from the visual similarity between the data-structures in Python print output. The goal of this research was to identify student's misconceptions about Python dictionaries. The data was collected in one-on-one, think-aloud interviews with two participants. When coding, one student treated her dictionary as if it were a literal list of two-element lists and could be accessed as such. Additionally, when asked to draw a visualization of dictionaries, she drew a representation that was identical to Python print output. It is likely that the output she is used to dealing with has shaped this visualization. This may be an example of negative transfer, where people transfer knowledge to a new setting and form an incorrect model. Based upon this research, educators should consider how print output can shape incorrect mental models, as well as emphasize the differences between lists and dictionaries.	Students' (Mis)Understanding of Dictionaries (Abstract Only)	NA	2015
Samuel A. Rebelsky	Student projects play a central role in the CS curriculum and are can be used everywhere, from low-level courses to upper-level capstones. Projects help students tie together ideas from their courses and put them in a "tangible" form for which they can feel a sense of pride. Projects also provide a clear way for students to show off their work to others. When we talk about student projects, we often focus on the functionality of the project: "Build something that does this." The modern Web suggests that software (or at least Web-based software) is often defined by more than a core computational task; in addition to the core functionality, modern Web software situates that core functionality in a broader "ecosystem" that often includes (a) a community of users that share ideas and comment on each others' work; (b) ways to link the software to and from social media sites, such as Facebook and Twitter; and (c) analytic tools to understand how people use the software; and more. I report on an experiment in which I asked students to expand their Web software project (an online drawing application) into a broader ecosystem. The extension from core functionality to broader ecosystem helped students think about different issues in computing, encouraged students to find aspects that most interested them (e.g., some liked analytics, some liked building the functionality, some liked thinking about how to create communities, and some liked designing and testing the interface), and made students think more carefully about their responsibilities as software builders.	It's Not Just About Functionality Anymore: Expanding Student Projects with Web Ecosystems (Abstract Only)	NA	2015
Gabriela T. Richard:Yasmin B. Kafai	We describe a workshop for high school youth to create interactive responsive and wearable interfaces for computing and gaming. The tools used in the workshop included tangible construction toolkits (the Lilypad Arduino and the MaKeyMaKey) and visual programming languages (Scratch, a coding and game design environment, and ModKit, a visual programming kit for Arduino devices and similar tangible kits) in addition to various conductive materials such as special fabric and aluminum foil. Past efforts with each of these toolkits have focused on interaction in one direction. This workshop focused on creating bidirectional tangible interfaces for gaming, meaning that interaction would happen on the screen and in the physical artifact or controller simultaneously. A further feature was the focus on creating wearable games. Thirteen students ages 13-15 years participated in the eight-session workshop. After learning the tools during the first four sessions, they started designing their own projects. Student teams created one bidirectional game with a textile interface, three inventive uni-directional wearable games and interfaces, and one half-completed design. Students felt that the workshop provided them with multiple entry points to computing, by capitalizing on different skill sets, and many expressed understanding bidirectional design, though they felt they needed more time. This poster will discuss the affordances and constraints of the workshop activities and toolkits, and how projects created relate to the students' understanding of tangible computing with different kinds of responsiveness. Finally, we offer recommendations for future workshops based on our own redesign of activities.	"Maker Innovators": A Workshop for Youth Creating Responsive and Wearable Game Interfaces with Tangible and Digital Construction Toolkits (Abstract Only)	NA:NA	2015
Zachary MacHardy:Daniel D. Garcia	Now finding footing in objective research methodology, MOOCs have made significant strides toward developing into mature platforms for not only offering educational materials but also performing exploratory analysis of educational methods. Bayesian Knowledge Tracing (BKT) has been repeatedly shown to be successful at providing an accurate model of student knowledge in more traditional classroom settings, and recent research has explored the application of BKT to MOOCs with promising results. Using data from several MOOCs run by Stanford university, we propose to extend earlier research into the application of BKT to MOOCS by developing a framework within which the use of course resources and student performance can be leveraged both to increase the predictive accuracy of BKT modeling and to provide an evaluative metric for the utility of those resources. We hope that such a framework can contribute not only to MOOC courses, but traditional classrooms as well.	Using Big Data and BKT to Evaluate Course Resources (Abstract Only)	NA:NA	2015
Mark E. Hoffman	Students frequently use a whiteboard to individually demonstrate understanding or interactively develop understanding in groups. The practice is employed to develop content knowledge; however, an opportunity to intentionally develop communication skills is overlooked. On the other hand, instructors carefully integrate instructional organization and communication to maximize student content learning. Taken together, this presents an opportunity for students to intentionally improve their communication skills in the service of content learning. This poster details a "work in progress" project where students follow organizational guidelines for written homework and board-writing to facilitate in-class, problem solution presentation. Problem solution presentations occur during one class period each week. Students are given colored pencils for written homework and colored markers for board-writing. Student work including written homework and board-writing was gathered from the 2013 and 2014 iterations of a sophomore-level computer architecture course. Preliminary analysis of student work shows that students either adopt the guidelines from the start or learn to use them through feedback and practice. On the semester-end survey, students report that adopting guidelines for written homework, board-writing, and color scheme improve presentation, and board-writing improves student learning. Future work includes gathering data from more students including recorded student presentations, developing quantitative scores to analyze student work, and developing measures of student learning.	Student Board-Writing to Integrate Communication Skills and Content to Enhance Student Learning (Abstract Only)	NA	2015
Cara Tang:Cindy S. Tucker:Elizabeth K. Hawthorne	As directed by the ACM Education Board, the ACM Committee for Computing Education in Community Colleges (CCECC) delivered the final version of its curricular guidance for associate-degree Information Technology (IT) programs. The guidance, An ACM Competency Model of Core Learning Outcomes and Assessment for Associate-Degree Curriculum in Information Technology, includes core IT learning outcomes with associated assessment metrics. Examples of degree and certificate programs that align with the ACM core IT learning outcomes are part of a growing repository at CAPspace.org. These correlations demonstrate the adaptability of this competency-based curriculum approach to a variety of computing courses, certificates, and degree programs. The CCECC invites institutions to highlight their IT degree and certificate programs by submitting correlations at capspace.org/correlation/ using an easy-to-use web form.	Correlating ACM Core IT Learning Outcomes with Associate Degree and Certificate Programs (Abstract Only)	NA:NA:NA	2015
Chris Johnson:Peter Bui	Madeup is a programming language for making things up. Its speakers walk paths through space to generate printable 3D models. The language is designed to teach computation from a tangible, first-person perspective and help students integrate computation back into the physical world. Madeup is inspired largely by Seymour Papert, whose goal was to provide learners objects to think with. Madeup joins a significant crowd of existing introductory teaching tools. What sets Madeup apart from many of these other projects is its physical product. The model that a programmer creates does not remain virtual. It can be printed, felt, carried in a pocket, and handed to a parent or friend - all of which may make computation more real and relevant in the eyes of the programmer. In this poster we demonstrate the language and how we have used it in outreach with local schools and libraries.	Madeup: A Language for Making Things Up (Abstract Only)	NA:NA	2015
Alisa Neeman:Michael Snider:Allen Hudson	In this poster we present a new approach to teaching ethics in a Network Security Programming course. Ethics is a crucial component of any network security course. As students learn to protect network services, they necessarily learn to attack network services, disguise their identities, et cetera. While a few colleges have gone as far as giving students background checks before teaching hacking skills, some simple new tactics can motivate students to employ their skills legally and ethically. These tactics lead students to discover what is ethical for themselves, rather than being told what is or is not ethical.	Student Discovery of Network Security Ethics (Abstract Only)	NA:NA:NA	2015
Carsten Kleiner:Felix Heine:Bastian Fischer	Automated assessment of computer programs submitted by students serves two main purposes: it may be used to increase grading efficiency and process optimization in large courses on one hand. On the other hand, if integrated properly into a suitable learning context, it may also improve student learning by supporting tutoring capabilities. Both aspects have been important in developing aSQLg, an automated grader for SQL statements ([1]). Unfortunately aSQLg so far only supports SQL queries. In order to provide a comprehensive efficiency and tutoring tool for SQL an extension to statements of the data manipulation (DML) and data definition language (DDL) is required. On this poster we present concepts for auto-grading of the most important DML and DDL statements as well as ideas on how to integrate those into the existing aSQLg grader.	Extending SQL Auto-Grading to DML and DDL Statements (Abstract Only)	NA:NA:NA	2015
Swaroop Joshi:Neelam Soundarajan:Rajiv Ramnath	Conflict and cooperation would seem to be ideas that are diametrically opposed to each other. But, in fact, classic work by Piaget on how children and adults learn shows that when learners engage with peers in critical discussion of ideas concerning which they have different understandings, that contributes very effectively to learners developing deep understanding of the concepts involved. At the same time, getting students in undergraduate computing (or other technical/engineering) courses to engage with other students in thoughtful discussion of important concepts is very challenging. It can be especially difficult to get women students and students from other underrepresented groups to participate effectively in such discussions. In our work, we exploit the affordances of mobile and web technologies to address these challenges. Our approach not only helps address these challenges, it has a number of other important advantages over face-to-face discussions. We present the theoretical underpinnings of the approach, some details of our prototype implementation, preliminary results from the use of the prototype in a junior/senior level class on Software Engineering, and the design for the next version of our tool. We also discuss the possibilities and usefulness of applying this approach in a range of computing courses from traditional classrooms to MOOCs.	Conflict-Driven Cooperative-Learning in Computing Courses (Abstract Only)	NA:NA:NA	2015
R. Mitchell Parry	Students increasingly decide to go to college in order to get better jobs and make more money. However, these advantages are typically thwarted if a student fails to graduate. Although much research has been aimed at predicting college performance using data collected before entering college, this preliminary work focuses on how college-level data could be used to inform student decision making. This work acquired historical class grades, test scores, and degree information for all students who have taken any computer science classes at Appalachian State University. This poster presents a web application that allows users to explore these data by selecting a target activity such as a class, and filtering students based on test scores, degrees, or how they have performed in other classes. The application displays overlaid histograms comparing how students in the subset perform relative to the class as a whole. For example, when a student considers retaking a course they may find it useful to know how other students with similar grades have performed in the major. For example, among the 29 attempts by 22 students with a 'C' in discrete math and CS 1, only 10 earned the required 'C' in CS 2 (35%) and 12 failed the course (41%). Three of these students went on to graduate with a degree in computer science (14%) and six in computer information systems (27%) while five did not graduate from Appalachian (23%).	A Nearest Neighbors Analysis of Student Academic Performance in Computer Science (Abstract Only)	NA	2015
Xiaohong Yuan:Kelvin S. Bryant:Kenneth Williams:Jinsheng Xu	The poster describes our project of integrating mobile computing and security into the Computer Science program at North Carolina A&T State University. Twelve (12) course modules in mobile computing and security are being developed and integrated into existing Computer Science courses such as computer programming, software development, operating systems, and information assurance courses. Each course module includes learning objectives, a tutorial, presentation slides, hands-on labs and/or case studies, test questions, etc. The course module material we develop and our teaching experiences will be beneficial to computer science educators who are considering including mobile computing and mobile security into their curricula.	Integrating Mobile Computing and Security into a Computer Science Curriculum (Abstract Only)	NA:NA:NA:NA	2015
Ama Nyame-Mensah	This poster explores the differential effects of formal undergraduate research experiences on the graduate degree intentions of underrepresented racial-ethnic minority and racial majority computing majors. Across two studies, it was found that formal undergraduate research experiences in computing have a greater and more positive effect on the educational aspirations of underrepresented racial-ethnic minorities as compared to racial majorities. For underrepresented racial-ethnic minorities, this effect is manifested in the gains in academic and career self-efficacy and gains in knowledge about the graduate admission process they develop as a result of their formal research experience. Together, these findings suggest that psychosocial skills that are strengthened during formal undergraduate research experiences play an important role in influencing the educational intentions of underrepresented racial-ethnic minorities in the field of computer science.	The Effects of Formal Undergraduate Research Experiences on Student Aspirations for Graduate Study in Computer Science (Abstract Only): Explaining the Relative Influence of Racial Identity Status	NA	2015
Louise Ann Lyon:Jill Denner:Jacob Martinez	Latinos are the fastest growing ethnic minority group in the US but are underrepresented in computer science. To increase the numbers of Latinos, we need learning environments that excite them about becoming a computer scientist starting in elementary school. This poster describes CSteach, an afterschool program that aims to move Latino/a students along the path to becoming a computer scientist by fostering capacities, identities, and relationships starting in 5th grade. It is the first known effort to integrate CS and social justice in elementary schools, and it builds off examples of "computing for the social good" in college (Goldweber et al., 2011). The poster includes a description of the curriculum, and research findings from over 200 5th graders and 13 high school "near peer" educators. It includes a list of tested strategies for how to introduce CS and social justice concepts in a developmentally appropriate way to 5th graders, and how to integrate those concepts to increase motivation and understanding. The poster also describes how to establish an effective "near peer" component in a K-12 CS program by selecting high school students who are from the community, excited about computers and want to teach, and also providing them with ongoing training and support. Screenshots of the students' Scratch projects show how they used CS to address a social justice issue at their school. And graphs provide a visual description of the pre-post survey data that were collected. This includes changes in students' knowledge of CS, attitudes toward CS, interest in pursuing CS, and their understanding of how computing can be used to address needs in their community.	CSteach: Engaging Latino/a Youth in Computer Science with Social Justice and Near Peers (Abstract Only)	NA:NA:NA	2015
Sagar Raina:Blair Taylor:Siddharth Kaza	Learning interventions based on modules are common in computer science education. Traditional learning modules that present a large amount of content in a linear format can induce cognitive overload in learners. We present theoretical support for increasing the effectiveness of learning modules, describe a system that implements these principles, and discuss the results of a pilot study across two sections of CS0. Using the Security Injections @Towson cybersecurity modules that target key secure coding concepts including integer error, buffer overflow, input validation, for CS0, CS1, and CS2, we enhanced select modules by incorporating the e-learning design principles of segmentation and interactivity. The pilot study compares student engagement and knowledge of software security and secure coding between the current (1.0) modules and the enhanced (2.0) modules. The use of the enhanced 2.0 modules significantly increased both secure coding and software security knowledge. In addition, student engagement increased and feedback from instructors indicates higher student and instructor interest. This project is partially supported by NSF through grant DUE-1241738	Security Injections 2.0: Using Segmentation, Instant-feedback, and Auto-grading to Enhance Secure Coding Modules for Lower-level Programming Courses (Abstract Only)	NA:NA:NA	2015
Guatam Mohan:Benjamin Rempel:Eli Rosenberg:David Wurtele:Cynthia Taylor:Kevin Webb	Concept Inventories (CIs) are short, multiple-choice exams that evaluate a student's understanding of core concepts of a particular course. CIs are especially useful for evaluating the effects of pedagogical techniques and interventions on student learning, as their focus on core concepts means any student should be able to answer the questions, and their use as a pre- and post-test allows them to measure student learning gains. However, CI development requires significant overhead: the current state of the art calls for an intensive, six step process. As a result, there are few CIs available for Computer Science, despite their effectiveness.  Our research is devoted to solving this problem by implementing an online platform for developing, deploying, and evaluating concept inventories. This open-source software will support any number of collaborators in following the process to develop a CI, including identifying concepts, interviewing both domain experts and students, developing and deploying surveys on concepts, and developing multiple-choice CI questions. Additionally, the tool will be able to manage, administer, and iteratively improve CIs after they are created, including allowing instructors to deploy the CI to their classes, and to compare their results with others who have used the CI. This work is part of a larger project, in which it will be used to develop a CI for CS2.	Conceptum: An Online Infrastructure for Concept Inventories (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Kenneth Fox:William Mongan:Jeffrey Popyack	Educating STEM students in the techniques of massively parallel computing anticipates a growing current and future need for scientists, engineers, and analysts who are facile with Big Data. Using very low cost hardware (Raspberry Pi) and free software (Hadoop) we are exposing students to distributed computing while limiting expense. We anticipate that micro-cluster labs and projects will give students hands on experience necessary so they can be prepared to use these methods in real world applications. A series of lessons and projects were developed to teach Hadoop and MapReduce, and were extended into STAR (Students Tackling Advanced Research) summer competitive research projects.	Raspberry HadooPI: A Low-Cost, Hands-On Laboratory in Big Data and Analytics (Abstract Only)	NA:NA:NA	2015
David Pritchard:Sandy Graham:Troy Vasiga	Computer Science Circles (http://cscircles.cemc.uwaterloo.ca) is a website that teaches Python for beginners, presented at SIGCSE 2013. It includes lessons, automatically-graded exercises, examples and visualizations. One purpose of the website is outreach with real human interaction: anyone who is stuck solving an exercise can privately send a question to the "CS Circles Assistant" (the author and two colleagues). As part of this poster, we will show some information about the 2500 student questions we have answered through this system, e.g. the questions where students most often reach out for help. We will also provide feedback from teachers using the site with their own classes. The website was open-sourced in August 2013 thanks to a SIGCSE Special Projects grant, bringing it in line with the great open-source components used to create it. One unique outcome of this open licensing is installing a site mirror in a correctional institute. The website was originally launched in English and French. Since then, we have worked with CS institutes from other countries: versions in German and Dutch have been released, with other translations under way. The poster will highlight some tools and caveats involved in this process. Users of the site submit their solutions for online auto-grading, with about 500000 exercises now completed. This has yielded a large amount of data about the frequency of different error messages. We will include a chart of the most common errors, and an illustration of how we used this to generate clickable hints to give better beginner-level explanations for the most common errors.	The State of CS Circles: Open Source and Outreach with an Introductory Python Website (Abstract Only)	NA:NA:NA	2015
David S. Touretzky	The Pascaline was the first working mechanical calculator, created in 1642 by the French polymath Blaise Pascal. Over the next two decades Pascal built 40 of these machines, of which nine survive today. Several good web resources describe the Pascaline, but to properly appreciate the sautoir, Pascal's kinetic energy solution to jam-free ripple carry, building a working replica is invaluable. Thanks to the growing availability of rapid prototyping tools, it has become relatively easy for CS educators to fabricate physical artifacts to help students explore computational ideas. I've created a Pascaline kit using laser-cut acrylic and standard fasteners that can be assembled with just a screwdriver, pliers, and Loctite. High school or college students with minimal skills can put it together in a few hours and have a functioning calculator. Exploring the Pascaline's design is an engaging way to connect a milestone in the early history of computing with more modern theoretical concepts. Students can investigate questions such as: What makes a device "digital"? (Slide rules have numeric scales but are analog devices.) How does nonlinearity produce discrete states in a continuous world? How are nonlinearities induced in the Pascaline vs. in digital electronics? How do the logic design concepts "half adder" and "full adder" map onto the components of the Pascaline? Is the Pascaline really adding, or merely counting? How does the Pascaline use nines complement arithmetic to perform subtraction, and why isn't it tens complement? The Pascaline kit, designed in SolidWorks, is open source and available at http://www.cs.cmu.edu/~dst/Pascaline.	Building the Pascaline: Digital Computing Like It's 1642 (Abstract Only)	NA	2015
Wu He:Ashish Kshirsagar:Alexander Nwala:Yaohang Li	Teaching information security courses is technically challenging. In an information security course, students and instructors often end up struggling in low-level and complicated software installation, system setup, service configuration, command operations, and data manipulation while losing concentration in learning the important information security principles. To help students in information security courses learn information security principles more effectively and efficiently, we used the workflow technology to create scenario-based workflows in order to improve the effectiveness of teaching and learning of several key information security principles and techniques. Two case studies simulating real-life scenarios, including one for an online banking system and one for an online grading system, are recreated within a laboratory setting using workflow technology and are then presented in information security classes. Our educational practice shows that the benefits of using workflow technology in information security education have been well received by students.	Using Workflow Technology to Create Scenario-based Workflows for Information Security Education: Scenario-based Workflows (Abstract Only)	NA:NA:NA:NA	2015
Hai Hong:Jennifer Wang:Jason Ravitz:Mo-Yun Lei Fong	Increasing women's participation in Computer Science (CS) is a critical workforce and equity concern. The technology industry has committed to reversing negative trends for women in CS, engineering, and related fields. Building on previous research, we surveyed 1,739 high school students and recent college graduates to understand factors influencing decisions to pursue CS-related college degrees. Results indicate social encouragement, career perception, academic exposure, and self perception are the leading factors for women, while the influence of these factors is different for men. These factors are actionable, and understanding differences in their influence on men and women will inform our approaches to achieving gender parity in tech.	Gender Differences in High School Students' Decisions to Study Computer Science and Related Fields (Abstract Only)	NA:NA:NA:NA	2015
Nicholas Senske	This poster describes an ongoing five-year assessment of a new introductory programming course for architecture students at the University of North Carolina at Charlotte. The goal of this course is to teach the fundamentals of computing with an emphasis on their relation to design and aesthetics. Many of the students struggle with the material, as they typically come into the course with no prior programming experience. To improve class performance, the author turned to instructional methods developed for Media Computation, which have been successfully used to teach introductory programming to non-major students for more than a decade. Our data suggest that the same methods -- media-based contextual content, pair programming, and peer instruction -- can have positive effects for students taking an introductory programming course taught by and for disciplines other than computer science. Compared to the first version of the course, which used traditional labs and lectures, the second iteration of the course, updated with the three instructional methods from Media Computation, resulted in higher student retention and an increase in student interest in computing topics. These improvements have remained consistent over the past three years. The data implies that research-based practices from computer science education can be used to improve computing education in other domains.	Learning from What Works: Improving an Introductory Computing Course for Architects with Teaching Methods from Media Computation (Abstract Only)	NA	2015
Zachary Kurmas:Jack Rosenhauer	We present MIPSUnit, a unit test framework for MIPS assembly. MIPSUnit's primary benefit is that it reduces the time needed to grade assembly language assignments. It also provides a time-efficient means for providing students additional testing experience. (We believe that students should be exposed to testing throughout the curriculum --- including their Computer Organization and/or Assembly Language courses.) MIPSUnit is a suite of two tools: MUnit, which allows users to test their assembly code with JUnit tests, and MSpec, which uses RSpec-style unit tests	MIPSUnit: A Unit Testing Framework for MIPS Assembly (Abstract Only)	NA:NA	2015
Yuting Zhang:Xin Shan:Yingyuan Zhang:Juejie Wang	CPU scheduling is one of the most important topics discussed in Operating Systems (OS) courses. In recent years, CPU scheduling for multiprocessor and real-time systems has become more and more essential as those systems can be found everywhere. While these topics should be introduced in OS courses, they are much harder to understand than simple uniprocessor scheduling algorithms due to the complexity involved. Particularly in introductory OS courses, only a couple of lectures can be used to cover these topics. To help students understand these complex topics more easily, we introduce a web-based simulator for learning multiprocessor real-time scheduling that is easy-to-use and self-explanatory. With this simulator, students can get visualized step-by-step instructions of how the algorithms work. They can also run the simulators interactively, and explore the algorithms in an empirical setting. The initial feedback from our students indicates that the tool is very useful in learning these complex algorithms. A demo will be shown in the poster session.	A Web-based Simulator for Learning Multiprocessor Real-time Scheduling (Abstract Only)	NA:NA:NA:NA	2015
Ying Zhu:G. Scott Owen	We present a set of online materials that teach debugging skills in college level computer graphics courses. Almost all the computer graphics textbooks use OpenGL and OpenGL Shading Language (GLSL). Most of the college level computer graphics courses are also taught using OpenGL/GLSL. Most students find OpenGL/GLSL programming very challenging. One of the reasons is that debugging is particularly difficult for computer graphics programming because many traditional debugging techniques can no longer be used. Debugging graphics programs requires a good understanding of OpenGL's error reporting mechanisms and different debugging techniques. Students also need to learn special GPU debugging tools. However, debugging is rarely covered in computer graphics textbooks and courses. Online resources on debugging OpenGL/GLSL programs are also scarce. To address this issue, we have developed online materials that teach students how to systematically debug shader-based OpenGL programs. This web site [1] provides error classification, debugging techniques, a list of common bugs, description of the OpenGL error reporting mechanisms, description of GPU debugging tools, symptom checker, code samples, and tutorials. This online resource fills an important gap in the current computer graphics curriculum. Students can use it to learn OpenGL/GLSL debugging skills. Instructors can use it as a supplement to their existing teaching materials.	Teaching Debugging Skills in Shader-Based Computer Graphics Programming (Abstract Only)	NA:NA	2015
Eileen Fordham:Halley Freger:Amanda Hinchman-Dominguez:Alexander Mitchell:Daniel Rebelsky:Victoria Tsou:Earnest Wheeler:Zoe Wolter:Samuel A. Rebelsky	Consider the following scenario: A student is browsing Facebook and sees a strangely compelling image on her friend's page. She follows the "how I made this link" to learn more. She finds herself on a page with a gallery of animations that she browses. Then she sees a "Create" button and clicks it. She skims the instructions and decides that this is not a "standard" graphics program - rather than using a timeline and "tools", it has just a few basic images (e.g., a horizontal blend, a vertical blend, some time-blends) and a few operations that you use to build new images from existing images. She plays a bit. And she finds that she can create some strange and interesting images, but not necessarily the ones she wants to make, and certainly not anything like her friend made. So she looks further. She learns that there are "challenges" that help you learn the system (and, as importantly, that help you consider and master different aspects of computational thinking), and tries to figure out how to make images as seemingly simple as a triangle or a circle using the limited selection of basic images and operations. It's not easy, but she finds it fun to try (and sometimes more fun to fail -- failures also create interesting images). You've just read a sample encounter with the Mathematical Image Synthesis Toolkit, or MIST. MIST is an open-source, Web-based graphics application that takes a constructionist approach in which open experimentation in image making helps students develop skills in computational thinking and deepen their understanding of mathematical functions. MIST is available at http://glimmer.grinnell.edu.	Developing Computational Thinking Through Image Making and Constructionist Learning (Abstract Only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2015
Andrey Esakia	Incorporating smartwatch app development into mobile app development classes has educational benefits. However, choice of a smartwatch platform imposes constraints on eligibility of students that can take the class because some of the platforms (ex. Pebble, Samsung Gear2, AGENTWATCH) use proprietary SDKs with programing environment very different from the smartphone's. This makes such classes too difficult for CS1/CS2 level students. This poster shows how newer smartwatches (Android Wear OS and Watch OS based) can make such classes accessible to CS1/CS2 students and how these newer smartwatches can broaden the CS topics that can be learned. For example, the hardware of Android Wear devices coupled with similar programing approach with Android OS, make a friendly platform for integrating smartwatch development into an Android app development class. These smartwatches offer new levels of information affordance with instantly obtainable interactive information on the wrist. It is possible to use such smartwatches as a tool for exploration of the fundamentals of Human Computer Interaction. Students can identify problems in existing interactive systems and design solutions with smartwatch capabilities in mind. Problems can be identified through exploratory studies of existing systems. Prototypes can be designed and implemented followed by evaluations. Students can also exercise concepts of Usability Engineering as there is need to address the ergonomic constraints of smartwatches, such as, small screen, poor visibility and fixed position on the body. In addition, Designing Android apps with Android Wear extensibility in mind can reinforce fundamental modularity concepts from Software Engineering in a natural setting.	Smartwatches For Junior/Senior Level CS Education (Abstract Only)	NA	2015
Emmett Tomai:Roberto Flores:Casey Richardson:Jose Rojas:Julio Oliva:German Zuniga	In this work, we seek to better understand how game design principles impact the effectiveness of a video game learning environment for computational problem solving. Video games naturally encourage problem solving and incremental learning of their game play systems, but it remains unclear how well that transfers to learning the structures and processes of computing. We are building a gateway game that establishes familiar problem solving game play, then expands player affordances to include the use of automation and abstraction. Programming in-game entities is presented to players as a constrained selection and refinement process, which they explore and master in order to achieve in-game goals. We are exploring whether computational problem solving can be cast as accessible, intrinsically engaging game play, by following principles of good game design: exploratory player-controlled pace and direction, encouraging trial and low-cost failure, immediate formative feedback, level-appropriate challenge, non-intrusive assessment and expanding affordances. The game we are building to evaluate these factors will be positioned as a bridge for middle- and early high-school students to engage with computational problem solving.	A Gateway Game to Make Computational Problem Solving Accessible and Engaging (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Michael Ball:Lauren Mock:Jonathan McKinsey:Zachary Machardy:Daniel Garcia:Nathaniel Titterton:Brian Harvey	CS10, is UC Berkeley's CS0 course. Each semester we have between 40% and 50% of our students continue on to CS61A, our CS1 course. Meanwhile an average of 25% more students express interest in continuing learning computer science through other means. CS10 is taught in a visual language called Snap! and CS61A in Python. This poster explores some of the trends we have seen between CS10 and CS61A enrollment, and our new "Besides Blocks" curriculum which helps transition students from a visual to text based language. Besides Block is approximately one fourth of the CS10 curriculum which introduces Python in the context of the Turtle Graphics system, and a tool called Codification which is a way of translating Snap! blocks to Python.	Oh, Snap! Enabling and Encouraging Success in CS1 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Richard E. Ladner:Brianna Blaser:Daniela Marghitu	Approximately 10% of computer science and engineering majors have a disability of some kind. Students with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together individuals who are interested in increasing the representation of students with disabilities in computing and improving their success. Participants will share strategies and promising practices to help each other do a better job of including these students in our classes and research projects. Resources, including those produced by AccessComputing (uw.edu/accesscomputing), will be shared.	Universal Access to Computing Education (Abstract Only)	NA:NA:NA	2015
Donald Slater:Wanda Dann:Steohen Cooper	This session is for anyone currently using Alice 2 and / or Alice 3, or those exploring the possibility of using Alice in their curriculum. The session will focus on a mapping of an Alice curriculum and instructional materials to CSTA, code.org and ACM curriculum standards and guidelines for a wide range of age/grade levels. The discussion leaders and attendees will share teaching strategies, tips, and techniques for implementing these standards. This is an opportunity to share assignments and pointers to web sites to access instructional materials, such as syllabi, student projects, exams, and other resources with experienced Alice instructors and those new to Alice. Goals for this session include: Review a course mapping of the Alice curriculum to well-known introductory curricula and pedagogy learning standards. Discuss learning standards and objectives encountered in the use of Alice in different environments and educational contexts. Allow educators using Alice to share exemplary assignments and teaching strategies. Provide an opportunity for those thinking about using Alice to ask questions as they determine how it may be most useful in their particular situation. Foster the development of community by allowing Alice teachers to connect and become resources for each other throughout the year. Allow educators to interact with Alice team members to learn more about the latest features of Alice 3 and Alice 2.	Birds of a Feather: Mapping Alice Curriculum to Standards (Abstract Only)	NA:NA:NA	2015
Greg Kawell:Benjamin Schafer	Many people know that Lego Mindstorms are great for teaching a wide range of different computer concepts to students. Some use them to teach programming, engineering, and of course robotics. In September of 2013, Lego released the latest generation of Mindstorms called EV3. This workshop focused on introducing participants on how to use Mindstorms EV3 and what many of the new features of the system are. At the workshop it was mentioned how some people are using this generation of Mindstorms for architecture classes, assembler coding projects, CS0 or CS1 courses, and conducting kids camps for k-12 students. This BOF is designed for people currently using any generation of Mindstorms and for those who are interested in finding out how they might start using Mindstorms in the classroom. The focus of this session will be to encourage people to use Mindstorms EV3 in a variety of different settings. During the BOF, people will have an opportunity to brainstorm new ways to use these tools to help students learn important CS concepts.	Brainstorming How to Use Lego Mindstorms EV3 in the Classroom (Abstract Only)	NA:NA	2015
Doug Baldwin:John P. Dougherty	"... we note that undergraduate CS students need enough mathematical maturity to have the basis on which to then build CS-specific mathematics (for example, as specified in the Discrete Structures Knowledge Area), which, importantly, does not explicitly require any significant college-level coursework in calculus, differential equations, or linear algebra." [Computer Science Curricula 2013]. Is this true? Perhaps we are finally acknowledging what critics have claimed for many years; namely, that the math traditionally studied by other engineers is the wrong math for computer science. But perhaps the even longer history of organizing college-level math curricula around continuous mathematics recognizes some important source of "mathematical maturity." This session will debate Curricula 2013's claim in order to explore what topics in mathematics, and perhaps logic, statistics, and other related disciplines, a computer science program should include in order to develop appropriate "mathematical maturity" in its students.	What Math is the Right Math for Computing? (Abstract Only)	NA:NA	2015
Shuchi Grover:R. Benjamin Shapiro:Brian Dorn	CS teacher development has become a major effort for the SIGCSE community in part due to NSF's CS10K efforts and expanding CSTA involvement. However there are few examples of university courses explicitly designed to train CS teachers. We do not yet have clarity on the topics CS education methods courses should cover and how best to prepare teachers to teach learners new to computational problem solving and programming. As an interdisciplinary field of study, CS education must necessarily draw on domain knowledge in CS, research in computing education, as well as research in education and the learning sciences about how students learn, both generally and in computing. At the same time, a methods course must provide prospective teachers with practical, hands-on experiences wherein they integrate research-based best practices with age-appropriate content for their target student population. BOF attendees are asked to bring materials from their classes and be ready to discuss multiple viewpoints about topics, pedagogical strategies and readings from a rich history of research in computing education and the learning sciences. Such a session will also afford attendees an opportunity to start an important conversation, connect with others who are currently developing and/or teaching CS methods courses, and form a community to share ideas, literature, and syllabi on an ongoing basis. Materials will be shared with the SIGCSE community.	K12 CS Teaching Methods Courses (Abstract Only)	NA:NA:NA	2015
Clif Kussmaul:Helen H. Hu:Chris Mayfield	Process-Oriented Guided Inquiry Learning (POGIL) is a research-based instructional strategy with a proven history across STEM disciplines. In a POGIL classroom, teams of students work on activities that are specifically designed to guide them to construct their own understanding of key concepts. At the same time, students develop key process skills such as communication, teamwork, problem solving, and critical thinking. For example, an activity might start with a simple game, and questions would guide teams to identify, analyze, and compare algorithms to play the game, leading them to develop techniques and identify issues and tradeoffs. POGIL incorporates practices shown to be particularly helpful for students from underrepresented populations. In a POGIL classroom, teachers are facilitators, not lecturers. Multiple studies have shown the students in POGIL classes do better on common exams and in subsequent courses. This BOF will enable people unfamiliar with POGIL to ask questions and learn more, and enable experienced POGIL practitioners to share experiences, concerns, ideas, and insights. As in a POGIL classroom, we will discuss topics in small teams and report out to the larger group. The CS-POGIL community has grown rapidly in the last few years. Our discuss forum has over 40 members, and http://cspogil.org has over 100 activities shared publicly or within the community. For more information, see http://cspogil.org and http://pogil.org.	Process Oriented Guided Inquiry Learning (POGIL) in Computer Science (Abstract Only)	NA:NA:NA	2015
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Regional Celebrations.	A Town Meeting: SIGCSE Committee on Expanding the Women-in-Computing Community (Abstract Only)	NA	2015
Edward Gehringer:Mark S. Hall	With interest in "flipped classrooms" rapidly growing, CS faculty are looking for ways to "flip" with a reasonable amount of effort and good results, There is no lack of resources or advice; videos and video-recording apps are proliferating, as are articles and web sites devoted to flipping. Only a small fraction of this is specifically targeted at CS, so it is a daunting task to sort through the available material to find what works well in computing. This BoF will bring together educators who have used, and can recommend, resources for flipping to their colleagues.	Resources and Strategies for Flipped Classrooms (Abstract Only)	NA:NA	2015
Michael P. Rogers:William Siever	Apple recently announced Swift, a new development language for iOS and OSX. While designed with developers in mind, it is also a boon to those who teach programming topics. Its relatively simple and familiar syntax; its integration in a scripting environment, Playgrounds, complete with built-in visualization tools; and the ability to incorporate live code in textbook form means that Swift is far better suited for teaching mobile app development than Objective-C. Indeed, the tools are so learner-friendly and the language so inviting that Swift might even find a place in a CS1 course. The language itself and the migration from Objective-C raise both logistical and pedagogical issues that will be addressed in this Birds of a Feather session.	The Great Objective-C Swift Migration of 2015 (Abstract Only)	NA:NA	2015
Mark Sherriff:Daniel Garcia	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching Track Faculty in CS (Abstract Only)	NA:NA	2015
Farzana Rahman:Dee Weikle	The enrollment in introductory computer science courses has been growing steadily for the last couple of years. Interest in the field is exploding across the nation. Colleges and universities of all shapes and sizes have seen enrollment in introductory computer science courses and to some extent in upper-division electives explode as well. Most R1 institutions handle such growth through the use of graduate TAs to teach CS1 courses. Many primarily undergraduate and/or liberal arts institutions don't have these resources, however. Complicating the scenario further, students coming to these non-research institutions expect personal interaction, are from a growingly diverse set of high-school graduates and seem to be less prepared for college than ever. Given the current funding climate for higher education, it is difficult to imagine how most universities and colleges will be able to negotiate this scenario. This BOF will provide a platform to discuss how to handle the growing, diverse, and uninitiated CS1 enrollment from many perspectives - individual, departmental, and institutional. What creative solutions can be brought to improve institutional motivation and how do we ensure that traditionally under-represented groups don't get left behind in the onslaught?	Juggling the Jigsaw: Enabling CS1 Growing Enrollment and Diversity at Undergraduate Institutions (Abstract Only)	NA:NA	2015
Cay Horstmann:Smita Bakshi:Amruth Kumar:Frank Vahid	Interactive activities in textbooks and online courses are no longer just decorative, but have become compelling tools for engaging students. This BOF, lead by professors and authors with experience in designing complex interactive tutoring materials, invites interested instructors and authors to discuss best practices in designing activities, integrating them into courses, and measuring outcomes.	Interactive Ebooks and Course Materials: A BOF for Authors and Instructors (Abstract Only)	NA:NA:NA:NA	2015
Mihaela Sabin:Svetlana Peltsverger:Cara Tang	At the direction of the ACM Education Board, the IT2017 Task Group was formed with the charge of updating the joint ACM and IEEE Computer Society Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, known as IT2008. The revised document, called IT2017, should be appropriately forward looking given the significant advances in information technology that have occurred since 2008. Participants attending the BOF will contribute their insights and assist with the revision process to update IT2008. Discussions will center on delineating knowledge areas and learning outcomes specific to IT; exploring the current and future roles of IT in computing disciplines; recommending changes to improve the usefulness of the report; and planning further communications to fully engage the academic and professional community in the revision process. The objective is to ensure that the updated document is a forward-looking curriculum framework of the disciplinary content and practices in the field of information technology and remains relevant into 2020 and beyond for incoming students, computing departments with IT programs, accreditation bodies, and employers in the U.S. and anywhere else in the world.	Updating the ACM/IEEE 2008 Curriculum in Information Technology (Abstract Only)	NA:NA:NA	2015
Emmanuel Schanzer:Kathi Fisler	Bootstrap teaches students to create their own videogames using a programming approach that directly reinforces state and national algebra standards. Used in classrooms across the country, Bootstrap is proving successful at transferring skills from programming to algebra word problems in 8th and 9th grade students. Due to the algebraic foundation for both content and pedagogy, math teachers with limited programming experience find the curriculum highly approachable; many offer it as a module within an algebra course. Bootstrap is a prefix to a higher-level computer science curriculum called Program by Design that emphasizes data-driven design and testing (with or without the videogame focus). In this BOF, current and potential users of these curricula will discuss the connections between introductory computing education and algebra education, share best practices for teaching and moving beyond these curricula, and generate ideas for future evolution of both curricula. The two facilitators will adapt the format as needed to support the interests of the participants.	Teaching Algebra and Computing through Bootstrap and Program by Design (Abstract Only)	NA:NA	2015
Richard Weiss:Michael Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne:Justin Cappos:Ambereen Siraj	We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have seen require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have developed hands-on exercises, those who have used them and those who would like to. We recognize that few CS programs can afford new required courses, so we will discuss ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering, algorithms and programming. The questions we will ask are, "What exercises have you tried? What are your experiences? What are you looking for?" Recent hiring forecasts indicate that there is still a tremendous need for skilled information security experts. Security is one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. It is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, and discuss how to teach analytical skills. We plan to share experiences, practices and ongoing efforts, including our own (e.g., our teaching experiences, the SISMAT program, Security Injections, the Seattle Platform, the Security Knitting Kit project, EDURange and the dissemination of infosec interactive exercises).	Teaching Security Using Hands-on Exercises in 2015 (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Geoffrey L. Herman:Ronald Dodge	Recent large-scale data breaches such as the credit card scandals of Target and Home Depot have significantly raised the public awareness of the importance of the security of their data and personal information. These incidents highlight a growing need and urgency to develop the cybersecurity infrastructure of our country and in the world. The development of ACM's Computer Science Curriculum 2013 and the National Initiative for Cybersecurity Education framework further highlight the growing importance of cybersecurity in computing education. Critically, recent studies predict that there will be a significant demand for cybersecurity professionals in the coming years, yet there is a lack of rigorous evidence-based infrastructure to advise educators on how best to engage, inform, educate, nurture, and retain cybersecurity students and how best to structure cybersecurity curricula to prepare new professionals for careers in this field. The development of validated assessment tools of student learning provide one means for increasing the rigor with which we make pedagogical and curricular decisions. During this Birds of a Feather session, participants will engage in a structured dialogue to identify what assessment tools are needed to improve cybersecurity education. Further, participants will provide feedback on initial efforts to identify a core set of concepts and skills that will be essential for students' success in cybersecurity fields.	Creating Assessment Tools for Cybersecurity Education (Abstract Only)	NA:NA	2015
Bruce Char:Jeffrey Popyack:Jeremy Johnson:William Mongan	This session invites educators interested in sharing and/or learning about experiences with tools for automatic feedback on technical work: the "if", "why" and "how". This includes experiences with program testing, problem-solving exercises, or quizzes, generated or checked with engines with expert-level technical capabilities, to scale up feedback to cope with burgeoning enrollment in CS courses while maintaining or improving student learning outcomes. Commercial, free and open-source tools now exist to assist in this endeavor. The benefits of providing timely, detailed, and insightful feedback for student effort are well known. Yet as enrollment in CS courses increases, many are hard pressed to find the human resources to scale up their feedback efforts. TAs and instructors may struggle to deal with the increased evaluation load, resulting in inconsistent, untimely, or lessened insight in feedback. Automatic grading and feedback offer a way to scale detailed and individualized feedback and for instructors to write materials with enhanced shelf-life, but with additional courseware engineering and administrative cost. It raises pedagogical questions about good ways for machine-based feedback to be blended with other types of learning activities, both conventional and novel. It has significance and relevance to departments facing the "scaling up" situation when it is understood if, how and why it can help address the problem.	Automatically Generated Feedback for CS student Work: Best Practices (Abstract Only)	NA:NA:NA:NA	2015
Josh Hug:Daniel D. Garcia	As classes grow beyond hundreds or even a thousand students, instructors must come to grapple with handling course logistics at scale. Otherwise mundane tasks can no longer be handled in an ad hoc way, and standard course design challenges become more acute. Just to name a few issues, the instructor might have to contend with: Exam scheduling, recruiting and managing a teaching staff that consists of dozens of people, ensuring consistency of grading, identifying and providing interventions for struggling students, providing a consistent policy for makeup work, and creating diverse course content (e.g. lab, HW, discussion section) that allows for an efficient path to mastery for each student regardless of diverse backgrounds and ability. If you have good ideas for handling these issues you'd like to share, or just want to learn what others are doing, come join us! Discussion will ideally include staffing techniques, technologies (including automated assessments), and ways of developing course content.	Handling Very Large Lecture Courses: Keeping the Wheels on the Bus (Abstract Only)	NA:NA	2015
Owen Astrachan:Lien Diaz:Amy Briggs:Fran Trees:Richard Kick	Computer Science Principles will become an Advanced Placement course in AY 2016-2017, with the launch of the first APCSP exam in May of 2017, with through-course assessments/performance tasks being completed by students starting at the beginning of that academic year. In this BOF we will hear from participants about their questions and concerns in anticipation of the launch of the course and exam. The BOF will be part of launching a community of practice for teachers and educators who are not part of a formal NSF project, Project Lead the Way, or Code.org whose participants may have a community of practice.	Computer Science Principles: Expanding the Community (Abstract Only)	NA:NA:NA:NA:NA	2015
Michael Oudshoorn:Stan Thomas:Barbara Boucher Owens:Deborah Trytten:Mary-Jane Willshire	The ACM/IEEE CS2013 Curriculum provides a somewhat rigid identification of topics to be covered by a model computer science curriculum. It was developed with significant input from industry, educators and other stakeholders and represents best practices in terms of Computer Science education. ABET is the accreditation body accrediting computer science programs in the US, and it also accredits a number of international programs. ABET's goal is to allow programs to identify their own outcomes and measure their success in delivering programs that achieve this, while also ensuring that all students receive a solid core education including key areas of the discipline without being excessively prescriptive. Both documents address excellence in computer science education. Changes to the Computer Science program criteria are being recommended which will more closely align the two documents in terms of identifying key areas to be covered by programs. This session provides participants with the opportunity to hear about the proposed changes and the rationale behind them and to offer feedback and input into the process.	Proposed ABET Computer Science Criteria and the CS2013 Curriculum (Abstract Only)	NA:NA:NA:NA:NA	2015
Paul Tymann:Lester Wainright:Sandy Czajka	This BOF will provide an opportunity for high school and college faculty to discuss the AP CS A curriculum and to explore possibilities for collaborations and outreach activities between high schools and colleges.	AP CS A: Sharing Teching Strategies and Curricular Ideas (Abstract Only)	NA:NA:NA	2015
Cindy S. Tucker:Cara Tang:Elizabeth K. Hawthorne	The ACM Computer Science Curricula 2013 (CS2013) guidance for undergraduate degrees was released in December 2013. This BOF will provide a platform for two-year and four-year computer science faculty and academic administrators to discuss CS2013 and its influence on associate-degree computer science curricula. The session will include a brief overview of the Core Tier-1 and Core Tier-2 CS2013 topics and attendees will primarily engage in an open dialog about which CS2013 topics and learning outcomes are most relevant to be included in a transfer curriculum. This CS2013 discussion will help inform the forthcoming update to Computing Curricular 2009: Guidelines for Associate-Degree Transfer Curriculum in Computer Science (www.capspace.org).	Perspectives on How Computer Science Curricula 2013 Influences Two-Year College Programs (Abstract Only)	NA:NA:NA	2015
Carsten Kleiner	Compared to their fundamental part of computer science curricula the small number of papers on database system education comes as a surprise. The apparent draught in new ideas in database system education is even more surprising given the fact that this area of computer science has arguably undergone its most significant changes for more than 30 years within the last 5 to 10 years. Many new database system paradigms (most of them appearing under the NoSQL label) have been introduced for various reasons. Some of these massively distributed database systems facilitate unprecedented data processing capabilities often labeled as BigData. In order to offer a sustainable and practical CS education, at least some of those new paradigms and methodologies should be included into database education. The BoF is meant to continue the discussion from the 2014 BoF about which of those deserve inclusion into a typical CS curriculum and (even more interestingly) at what time in the curriculum and by replacing what other topics. It shall offer participants a forum to share their opinions and ideas on recent and future changes in database system education as well as to present practical experiences with new concepts picked up at last year's BoF or elsewhere.	New Concepts in Database System Education: Experiences and Ideas (Abstract Only)	NA	2015
David Reed:Frances P. Trees	One of the greatest challenges for K-12 computer science educators is finding the opportunities and resources to stay up-to-date with the field and its pedagogical practices. Teachers often lack CS colleagues at their school, which makes the lack of professional development opportunities even more significant. As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues and to help connect teachers with professional development resources. This BOF will discuss existing professional development resources available to K-12 teachers, as well as providing a community building forum between high school teachers and college faculty. Attendees will be asked to share their professional development needs and desires, which will then guide the CSTA Professional Development committee in future efforts.	Addressing Professional Development Needs for K-12 CS: Working with Your Local CSTA Chapter (Abstract Only)	NA:NA	2015
Michael Goldweber	This BoF is to gather computer science educators interested in helping to create successful study abroad experiences for computer science students. While study abroad consistency places number one as the most impactful experience an undergraduate can have, computer science students have some of the lowest study abroad participation rates. While some of the reasons for this are financial, it is believed that the primary reason is the lack of meaningful study abroad opportunities. In the world of study abroad programs, it is a basic axiom that a study abroad program, to be successful, has to have a reason for being in its chosen location. Simply transplanting a course to an exotic location is considered educational tourism. The most successful study abroad programs leverage being present in a foreign location to provide some value added to the course over its back home-based counterpart. We define meaningful study abroad opportunities as ones where students can make forward progress in their major, but avoid becoming exercises in educational tourism. Furthermore, at all but the largest of institutions, discipline-specific study abroad programs, due to enrollment sizes need to be inter-institutional. How to create a meaningful study abroad experience in computer science is a difficult open question. The purpose of this BoF is to gather interested colleagues to brainstorm ideas and to begin a community-wide dialog on developing successful and meaningful study abroad programs for computer science students.	Study Abroad Experiences in Computer Science (Abstract Only)	NA	2015
Meghan Allen:Ben Coleman:Diane Horton:Lynn Lambert:Michele Ng	Alumni make contributions to a Computer Science program in three interconnected ways, all of which relate to the interplay between the academic environment and the "real world." For students who aim to enter the job market upon graduation, alumni provide a friendly way to receive mentoring and advice and develop a professional network. When faculty are looking for real-world projects and experiences for students, alumni provide an avenue for entrance into industry. Finally, alumni can provide assessment data about the performance of students in the workplace after graduation. In this BoF session, we will consider how individual faculty members or a department can engage alumni in meaningful ways. Small groups will consider each of the three ways to partner with alumni, with particular emphasis on sharing past experiences. Participants will be encouraged to consider ways to collaborate with their alumni office, development office, career center and student groups to leverage the potential of their alumni.	Sharing Best Practices for Alumni Engagement (Abstract Only)	NA:NA:NA:NA:NA	2015
Shuchi Grover:Marie Bienkowski:Eric Snow	As computer science (CS) and computational thinking (CT) make their way into all levels of K-12 education, valid assessments aligned with new curricula can assist in measuring student learning, easing the way for adoption of new computing courses, and evaluation of pedagogical approaches for teaching computing ideas and concepts. Without attention to rigorous assessment, CT can have little hope of making its way successfully into K-12 school education settings at scale. This BoF session will involve discussion around ongoing work at SRI International (under several NSF-funded projects) on the design and development of formative and summative assessments for the ECS curriculum. Additionally, various forms of assessment (including free response and multiple-choice questions, and computational artifacts), and insights from past research on their use will be discussed. BOF attendees will be able to discuss multiple viewpoints, connect with others who care about assessment of CT, and share resources and ideas.	Assessments for Computational Thinking in K-12 (Abstract Only)	NA:NA:NA	2015
Lori Postner:Stoney Jackson:Ben Coleman:Suzanne Mello-Stark:Samuel Rebelsky	Can students contribute to HFOSS projects as part of their computing curriculum? How and at what level can HFOSS be integrated? What are the success stories and challenges? This BOF will be led by a diverse group of faculty who have incorporated HFOSS into their classes. They will lead a discussion on the various approaches, successes and challenges they have encountered. Their experiences will provide a backdrop for this BOF session, which should lead to a lively discussion of how and why to use HFOSS in computing courses. Faculty who are interested in HFOSS, but who are novices, will learn about potential projects and classroom materials as well as make connections with more experienced faculty in this area.	Student Contributions to Humanitarian Free and Open Source Software (HFOSS) (Abstract Only)	NA:NA:NA:NA:NA	2015
W. Richards Adrion:Mark Gudial:Barbara Ericson	We are all excited to see an increasing number of national efforts to reform computing education. Persistent and sustainable change in a state, its higher education institutions, and its K12 districts requires the active participation of individuals and local organizations to engage policy makers, higher education, school districts and communities. U.S. education is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level. The system is organized along K20 pathways and a reform process to improve these pathways will take place at multiple levels and state by state. This BOF will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change. The NSF BPC Expanding Computing Education Pathways (ECEP) Alliance will present its 4-step model for state change: identify leaders, assess the CS education landscape, organize the statewide stakeholders, and find resources to enable change. We will moderate a discussion of how the ECEP model, its services and federal/foundation resources might be adapted to enhance state-based initiatives and partnerships. ECEP provides experts for state policy events, teacher professional development, and 2-4-year transfer summits. It provides training and funding to help start computing summer camps. ECEP trial interventions are helping more African American students pass the AP-CS-A exam.	Partnering to Promote State-by-State Computing Education Reform (Abstract Only)	NA:NA:NA	2015
Lillian (Boots) Cassel:Cynthia Lee:Cliff Shaffer:Darina Dicheva	Open educational resources - assignments, labs, course notes, and other types of materials made available for anyone interested in using them - have the potential to have a significant positive impact on courses and students at many institutions. Distribution and use of course materials is also an important factor in encouraging the adoption and use of innovative teaching practices. However, the use of open resources is still somewhat uncommon, with most instructors preferring to use their own materials. This BoF will bring together providers and users of open educational resources to pose the following questions: Who is using open resources? Who isn't using open resources? How could open resources, and the repositories where they are made available, better meet the needs of potential users? What is necessary to make sharing of educational resources easier and more effective? Are there inherent barriers to sharing and reuse, and how can they be overcome?	Open Educational Resources: What Next? (Abstract Only)	NA:NA:NA:NA	2015
Catherine Bareiss	Faculty members in a small department (5 FTE or less) face special challenges and strengths because of their size. This BOF is a time for faculty to meet and discuss ways to meet the shared challenges and take advantage of their strengths. The actual topics covered will be based on those attending. Possible topics might include: sharing classes, increasing enrollment, general education, and specialized courses.	Computer Science: Small Department Initiative (Abstract Only)	NA	2015
Mark Sherriff:Sarah Heckman	Over the past several years, there has been a marked increase in empirical validation in research papers presented at the SIGCSE Symposium. This birds-of-a-feather session intends to bring together faculty interested in empirical research in computer science education to share methodologies and techniques, while also continuing the conversation about how to move empirical computer science education research forward. The computer science education (CSEd) research community consists of a large group of passionate CS educators who often contribute to other disciplines of CS research. There has been a trend in other disciplines toward more rigorous and empirical evaluation of various hypotheses. Prior meta-analyses of the then-current state of CSEd research showed a distinct lack of rigor in the top CSEd publication venues, with most papers falling in the general category of experience reports. Our goal is to engage the SIGCSE community in a discussion as to how we can move empirical research in CSEd forward. We hope to help researchers establish connections that will allow them to share research methodologies and challenges.	Empirical Research in CS Education (Abstract Only)	NA:NA	2015
Farzana Rahman:Jennifer Stevens:Sharon Simmons	It is widely known that computer science students do not reflect the diversity of the population at large. Studies have shown that effective outreach programs can educate the public, increase student interest, help recruit and retain majors in computing disciplines. Traditionally the outreach events are organized by higher education institutions or nonprofit organizations. It will be highly effective if high school teachers are provided with the right tools so they can organize outreach events in their school or local community. Outreach programs can vary widely in terms of target audience, duration and objective. And it might seem daunting to design and deploy outreach events to make it sustainable. Our goal in this BOF is to discuss effective outreach activities to recruit and retain diverse students in CS K-12 pipeline. In particular, each facilitator will address the objective of the activity, the target audience, a description of the activity, and key aspects for successful deployment. This BOF will also provide an effective model for high school teachers to design and implement computing outreach activities in their schools. We will share techniques to increase students and parents interest in computer related discipline and provide them with appropriate tools to pursue their interest more. Facilitators will also share information about various funding agencies that can sponsor CS outreach programs. It will provide an opportunity for high school and college faculty to explore possibilities for collaborations and outreach between high schools and colleges.	CS 4 Everyone: Diversifying the K-12 Pipeline for CS at College and High School Level (Abstract Only)	NA:NA:NA	2015
Janet Davis:Christine Alvarado:Miranda C. Parker:Jennelle Nystrom	Students who attend academic conferences can broaden their horizons, increase their commitment to the discipline, find role models and mentors, and gain concrete opportunities for work and study. However, attending one's first conference can be an overwhelming experience. We often focus on the procurement of funding to send students to conferences, and do not spend as much time considering what will happen once they get there. In this BoF, we will share strategies for guiding and supporting undergraduates to take full advantage of attending a CS conference. This session will be led by two faculty members and two young alumni. We will draw on our collective experience helping our students/classmates make the most of attending the Grace Hopper Celebration of Women in Computing, SIGCSE, and other CS research conferences. We invite discussion of any and all conferences participants have experience with, as similar strategies may apply. Specifically, we may consider how to help students: act with confidence in a professional setting; rehearse an "elevator pitch"; navigate career fairs and exhibit halls; choose wisely among parallel sessions and the "hallway track"; network effectively with potential mentors, advisers, and employers; present their own work in talks or poster sessions; reflect on their experiences; and share what they learn at their home institution.	Preparing Undergraduates to Make the Most of Attending CS Conferences (Abstract Only)	NA:NA:NA:NA	2015
Kristine Nagel:Sonal Dekhane:Nannette Napier	Programming Boot Camp is one strategy to overcome the perceived and actual difficulties undergraduate students encounter in an introductory programming course. It is estimated that of the over two million students starting computer science studies in universities and colleges all over the world in 1999, 33% dropped or failed their first programming course. Consequently, undergraduate students delay enrolling in programming courses, which interrupts progress toward their degree and decreases confidence in their ability to succeed in college and computing careers. Programming Boot Camp provides a combination of intense programming labs with professional development and community building activities to help increase confidence, create awareness of opportunities, and build a supporting peer network. How does this strategy work on different campuses with different demographics? Attendees will be able to connect with people who have implemented boot camp, are interested in sharing resources, and discussing how appropriate a boot camp would be for their students. Those who have already implemented a boot camp will be encouraged to share their curriculum, workshop strategies, and how effective they were in goals like: increasing the programming skills of the participants and their confidence in it, inspiring participants to persist in computing, and building a network of mentors and peers to support persistence in computing. Participants who seek to increase success in programming courses will be encouraged to discuss campus specific needs to gather input from those who have implemented boot camps and how they adapted the concept to their population and institutional culture.	Can Programming Boot Camp Help Under-represented College Students Succeed in Computing Degrees? (Abstract Only)	NA:NA:NA	2015
Rebecca Bates:Judy Goldsmith:Valerie Summet	Did you read any of the common reads for SIGCSE 2015? Now's your chance to talk about them! Three books: I, Robot by Isaac Asimov (Bantam Spectra, 1950), Bellwether by Connie Willis (Bantam Spectra, 1997) and Ready Player One by Ernest Cline (Broadway Books, 2012) were proposed at the end of the 2014 conference. If you're interested in science fiction, whether on a personal, academic, or pedagogical level, come join us in this BoF and discuss one or more of the three suggested books. We'll provide potential topics and discussion questions targeting how to incorporate these books into a CS course, but the discussion will be open. The BoF will close with a discussion of potential books for the 2016 conference.	SIGCSE Reads: Time for Book Discussion (Abstract Only)	NA:NA:NA	2015
Chris Gregg:Colleen M. Lewis	Instructors struggling to support their ever-growing undergraduate population may be interested in starting, expanding, or improving an undergraduate teaching assistant (TA) program. This session seeks to connect individuals interested brainstorming and sharing strategies for improving the impact of undergraduate TAs. We will break into small groups to discuss tips for (0) structuring funded and unfunded undergraduate TA programs, (1) training undergraduate TAs, and (2) recruiting and selecting undergraduate TAs. All tips will be posted on CSTeachingTips.org for dissemination to other CS educators. This BoF welcomes instructors already supporting undergraduate TAs and instructors who are interested in build an undergraduate TA program.	Working with Undergraduate Teaching Assistants: Best Practices and Lessons Learned (Abstract Only)	NA:NA	2015
Douglas H. Fisher:Janet Burge:Mary Lou Maher:Jerry Roth	Computer science instructors are incorporating Massive Open Online Courses (MOOCs), and MOOC material, into their campus courses. The closed instance is the dominant model being followed, in which MOOC material (e.g., in AI, in Programming Languages, in Software Engineering) is ported to a protected LMS so that campus students can use the MOOC video and other material (e.g., assessments) and infrastructure (e.g., autograders) in a "private" manner. In an embedded instance, campus students take a live MOOC as one component of their on-campus course. Another model, albeit nascent, is to exploit self-paced open online courses so that campus cohorts can move through a course when a campus instructor wants, and at a pace the instructor wants, but still availing campus students to the advantages of interacting with global students (and vice versa). The BoF session will allow participants to talk about MOOC-based blended models, form a group interested to archiving experience, synthesizing best practices, creating shared learning-object repositories (e.g., of active learning, in-class activities), and to discuss issues of policy (e.g., FERPA).	Blended CS Courses using Massive, Open, Online Courses (and other Online Resources) (Abstract Only)	NA:NA:NA:NA	2015
Catherine Bareiss:Larry Vail	This workshop shows participants about a new way to teach non-computing majors about computing fundamentals. This involves teaching computing concepts (such as sources of error, algorithm analysis, data storage, and simulations) that students encounter when they use computers to do work in their own disciplines. While this new way of teaching can use any discipline, the workshop will use the sciences as the working example. It will focus on how scientists use computers in their work but will also introduce ways to expand this to other disciplines. The course that will be presented presents different modules of computer science interspersed with different science modules that apply the computing knowledge. More details can be found at http://cf4s.olivet.edu. Participants are highly encouraged to bring a laptop. Handouts associated with the entire course will be provided.	Teaching Computing Foundations to Non-Majors (Abstract Only)	NA:NA	2015
Joel C. Adams:Richard A. Brown:Elizabeth Shoop	CS2013 brings parallel and distributed computing (PDC) into the CS curricular mainstream. The Message Passing Interface (MPI) is a platform independent, industry-standard PDC library that includes support for C, C++, and Fortran; third parties have created implementations for Python and Java. This hands-on workshop introduces MPI basics using parallel patterns, including the single program multiple data (SPMD), send-receive message passing, master-worker, parallel loop, broadcast, reduction, scatter, gather, and barrier patterns. Participants will explore 12 short programs designed to help students understand MPI and PDC basics, plus longer programs that use MPI to solve significant problems. The intended audience is CS educators who want to learn about how message passing can be used to teach PDC. No prior experience with PDC or MPI is required; familiarity with a C-family language and the command-line are helpful but not required. The workshop includes: (i) self-paced hands-on experimentation with the working MPI programs, and (ii) a discussion of how these may be used to achieve the goals of CS2013. Participants will work on a remote Beowulf cluster accessed via SSH, and will need a laptop or a tablet with an SSH client (e.g., BitVise, iSSH), or a laptop with both a recent C/C++ compiler and MPI (e.g., OpenMPI or MPICH) installed. See http://csinparallel.org.	Teaching Parallel & Distributed Computing with MPI (Abstract Only)	NA:NA:NA	2015
Orit Hazzan:Gadi Har-Shai	This workshop addresses the teaching of computer science soft skills, such as teamwork, diversity, presentation and communication skills, and ethical behaviors. It is based on the assumption that the people involved in software development processes deserve more attention, and therefore, their soft skills should also be addressed, beyond their scientific and engineering skills. In the workshop, we will highlight such soft skills using activities that aim to analyze them from a social and cognitive perspective. We will also present and discuss a course outline dealing with soft skills of computer science, including suggestions for specific activities and tasks.	Teaching Computer Science Soft Skills (Abstract Only)	NA:NA	2015
Wenliang Du	Security courses have been integrated into many mainstream undergraduate and graduate computer science curricula. To achieve effective education, learning security principles must be grounded in experience. Over the last 12 years, we have developed 30 hands-on lab exercises for computer security education. These labs, called SEED labs (SEcurity EDucation), cover a variety of security topics, including vulnerabilities, attacks, software security, system security, network security, web security, access control, authentication, cryptography, etc. These labs are built upon a Linux virtual machine, the image of which can be downloaded from our web site. Students just need to use a single computer (can be their own laptop) to work on these labs, so there is no need for a dedicated physical laboratory. All software used in the labs is open-source and free. The SEED project has been funded by 3 NSF grants with a total budget of 1.3 million dollars. So far, SEED labs have been used by over 250 institutes in 30 countries. In this workshop, we will select some of the most popular SEED labs, demonstrate how they work. We will then select three labs, and guide the participants to work on these labs in the workshop. Participants are expected to bring their own laptops. Participants who want to gain experiences with more SEED labs can apply to attend our free 3-day workshop in June.	SEED Labs: Using Hands-on Lab Exercises for Computer Security Education (Abstract Only)	NA	2015
Jeff Stern:Emily Reid:Kari Bancroft	At a time when less than twenty percent of AP Computer Science test-takers are female, Girls Who Code [GWC] has developed a unique teaching philosophy and effective curriculum to engage young women in CS early in their careers. This curriculum is built around cultivating exposure, interest, community and support, and technical skills. More than 500 young women have participated in GWC's Summer Immersion Programs, a seven-week, full-time computer science program for high school students. Ninety-five percent of participants said they are definitely or more likely to consider a major / minor in computer science after participation. This workshop shares GWC's best practices with educators looking for new ways to effectively teach computer science. At the end of this workshop, participants will have concrete examples of how to effectively teach students who are underrepresented in computer science. Participants will also have the opportunity to practice teaching in the style and spirit of the GWC Summer Immersion Program, with the goal of engaging young women, and expanding this knowledge to reach minorities and other diverse populations.	Teaching Introductory Computer Science for a Diverse Student Body: Girls Who Code Style (Abstract Only)	NA:NA:NA	2015
Bill Manaris:Andrew R. Brown:Tobias Kohn	This is an introduction to creative software development and music making in Python. This material is intended for CS0/CS1 courses and for courses at the intersection of computing and the arts. The workshop will introduce music making activities for teaching traditional CS1 topics, GUIs, event-driven programming, and connecting to external devices (e.g., smartphones, digital pianos) via MIDI and OSC (Open Sound Control). Participants will be introduced to Jython Music (http://jythonMusic.org), a library of Python modules for creative programming and music making, and will be making their own music artifacts a few minutes later. Intended audience: Computer science educators interested in teaching creative programming and computational thinking for CS0, CS1, introductory courses in the intersection of computing and the arts, and courses intended to attract and retain new CS majors. Each participant will receive a copy of (1) handouts to be used during the workshop, (2) sample student assignments and projects, (3) API documentation, (4) all required software, and (5) numerous sample programs. Laptop required (with Java JDK 7 or higher). All other software will be provided. Headphones are recommended.	Making Music with Computers: Creative Programming in Python (Abstract Only)	NA:NA:NA	2015
David G. Kay	Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and "re-using" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required.	Intellectual Property Law Basics for Computer Science Instructors (Abstract Only)	NA	2015
Michael P. Rogers:William M. Siever	Swift is a new programming language recently introduced by Apple as a replacement for Objective-C. Considering that Objective-C ranks third on the Tiobe Index and is the progenitor of virtually all the 1.2 million apps in the App Store, Swift is likely to become the dominant language for creating both iOS and OS X apps. While Swift is aimed at application developers, the language and the tools that accompany it are also a boon for CS educators. Many of the features in Swift that aid commercial development, such as type-safety, clean syntax, closures, and named parameters, are also beneficial when learning programming. In addition to the language itself, Apple has introduced a remarkable feature called Playgrounds. As the name suggests, Playgrounds allow students to "play", that is, to interactively experiment, with code. They also provide a convenient visualization tool to graphically depict the impact of iteration, providing crucial insights for novice programmers. It is also possible to use Playgrounds to write tutorials or even entire textbooks with embedded, live code for students to experiment with. The workshop will introduce Swift through the use of Playgrounds. Participants will work through a variety of hands-on, active learning exercises to learn Swift's syntax and semantics. More importantly, they will experience a sample of active learning exercises that can be used in to introduce students to programming with Swift.	A Swift Introduction to Swift App Development (Abstract Only)	NA:NA	2015
Aman Yadav	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of research design; (2) learn about various types of research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests. The workshop will be beneficial to participants who have not yet done all of these activities as well as those who have some background in educational research. Participants will be provided with material on research designs.	Conducting Educational Research in the Computer Science Classroom: Choosing the Appropriate Research Design to Address your Research Questions (Abstract Only)	NA	2015
David Bau:Matthew Dawson:Anthony Bau	This workshop introduces a new educational programming environment Pencil Code, which helps bridge the learning gap between visual programming and text-based coding. The free open-source online tool allows students to work with programs using either blocks or Coffeescript or Javascript text code. Students can switch between visual and text modes at any time. The workshop will begin with a collaborative discussion of the opportunities, challenges, and differences presented when learning with block code and moving to text code. Then we will give a short presentation of how Pencil Code is used in classrooms, with some preliminary findings. The main part of the workshop is a hands-on activity where participants gain experience with Pencil Code. Participants will use the tool with lessons in a curriculum framework, for teaching functions and interactivity using both text code and block code. Finally, there will be a discussion of best practices for teaching students in the transition, and an opportunity to create your own lessons using Pencil Code or other tools. Attendees will come away with an understanding the issues faced by students transitioning to text code for the first time, and they will gain practical experience with teaching lessons with Pencil Code. Participants will receive curriculum material appropriate for middle-school and high-school classrooms. The tool is open-source and free to use at http://pencilcode.net/.	Using Pencil Code to Bridge the Gap between Visual and Text-Based Coding (Abstract Only)	NA:NA:NA	2015
Steve Carr:Melissa Keranen:Jean Mayo	Cryptography and access control are perhaps the two most fundamental mechanisms for data protection. This workshop presents hands-on methods for teaching cryptography and access control that leverage software tools developed with funding from the NSF. The workshop will proceed in two sessions. The first session will address teaching well-known ciphers (including Vigen√®re, DES, AES, RSA, and SHA) and elliptic-curve cryptography using tools from the cryptoVisual software suite. These tools step students through an algorithm with either the system or the student computing the result of each step. The second session will address access control and the Multilevel Security, Role Based Access Control, and Domain Type Enforcement models using tools from the acVisual software suite. These tools support graphical policy development and analysis. The presenters have used this material in undergraduate courses in Cryptography and Computer Security. The tools have been used and evaluated favorably at multiple institutions. Participants will install and use the software on their own laptops running Linux, Windows, or MacOS. The acVisual software runs natively on Linux and MacOS and through a Linux virtual machine under Windows. The cryptoVisual software suite is available at http://www.cs.mtu.edu/~shene/NSF-4/. The acVisual software suite is available at http://acv.cs.mtu.edu.	Teaching Cryptography and Access Control Hands-On (Abstract Only)	NA:NA:NA	2015
A. Nicki Washington:Legand Burge:Marlon Mejias:Ketly Jean-Pierre:Qi'Anne Knox	In order to increase the computer science pipeline, emphasis must be placed on not only who is taught, but also how they are taught. Traditional computer science pedagogy has been unsuccessful in attracting, engaging, instructing, and retaining underrepresented students. Culturally-responsive pedagogy must be leveraged to successfully instruct a diverse range of computer science students. With the onset of technologies such as Facebook, iPods, Xbox, smart phones, mobile applications, and more, underrepresented students are already actively engaged in utilizing computer technology. However, in order to transition them from consumers to creators of this technology, culturally-responsive curriculum must teach fundamental concepts such as algorithms, problem solving, and abstraction in the context of issues that affect their daily lives. This workshop is designed to help K-16 computer science educators, professionals, and others understand and identify activities and assignments that infuse culturally-responsive content throughout. By the end of the workshop, participants will have a clear understanding of culturally-responsive pedagogy, its importance in computer science, and how to begin infusing more of it into lessons and activities. Laptops are recommended.	Bridging the Divide: Developing Culturally-Responsive Curriculum for K-12 Computer Science Education (Abstract Only)	NA:NA:NA:NA:NA	2015
Zack Butler:Ivona Bezakova	Problem solving is a powerful teaching methodology for computer science -- giving students a real problem to solve instead of simply discussing abstract concepts can motivate them and give them a path to better understanding. However, it is challenging to create novel example problems that are meaningful and engaging yet can be easily understood by all students. In this workshop, we will introduce participants to the vibrant world of pencil puzzles and show how many different types of puzzles can be used for a variety of topics throughout the introductory CS curriculum. Pencil puzzles are those designed to be solved by hand with pencil and paper (such as Sudoku, but including dozens of new types!) that have clear rules and are made to be solved deductively. As such, they are explicitly designed to be easy to understand and intriguing and naturally inspire algorithmic thought. We will explore a variety of on-line resources, including our own curated repository, to see how assignments throughout the introductory CS curriculum can be easily kept fresh. Participants will also experience a sample problem-solving session and collaboratively develop a new assignment for a topic of the group's choice. This workshop is intended for all teachers (late secondary and post-secondary) of introductory programming courses. Laptops are recommended.	On Beyond Sudoku: Pencil Puzzles for Introductory Computer Science (Abstract Only)	NA:NA	2015
Marguerite A. Doman:Barbara J. Ericson:Kristine S. Nagel:Nannette P. Napier:Krishnendu Roy	This workshop will provide details on how to plan and run non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in past camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, EV3, and Tetrix), EarSketch, and App Inventor. Georgia Tech helped start or expand other computing camps at eleven other colleges and universities in Georgia from 2007 to 2010 as part of Georgia Computes!. This last year as part of the Expanding Computing Education Pathways (ECEP) NSF grant we have also helped institutions start or expand summer computing camps in South Carolina, Massachusetts, and California. The workshop will distribute a link to forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptops Recommended	How to Plan and Run Summer Computing Camps: Logistics (Abstract Only)	NA:NA:NA:NA:NA	2015
Andrea Danyluk:Michael Jipping:Rhys Price Jones:David Reed:Brad Richards:Richard Wicentowski	Roughly once per decade, the ACM and IEEE-Computer Society form a joint task force to produce curricular guidelines for undergraduate computer science programs. The latest guidelines document, Computer Science Curricula 2013 (CS2013), was released in December 2013. CS faculty at many institutions are interested in understanding CS2013, evaluating their curricula against it, and adopting some or all of the recommendations. This task is non-trivial at any institution, but it can be particularly challenging at small or liberal arts institutions. For instance, small schools with few faculty are limited in the number of courses they can offer, and many liberal arts colleges place limits on the number of courses that can be required for a major. How might a department with limited resources trade off covering the core while still providing electives to students? A meta-issue involves mapping CS2013 at all: Given the demands on a small department, are there ways to improve and update a curriculum without having to go through a complete CS2013 mapping? In this workshop we will: (1) give a brief overview of CS2013, (2) describe experiences mapping individual courses or an entire curriculum to CS2013, (4) split participants into working groups for course or curricular mapping based on starting points and goals, (4) re-group to share lessons learned from the mapping experience. Laptop Strongly Recommended.	Small or Liberal Arts Colleges Adapting to CS2013: Making It Work (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Remy DeCausemaker:Stephen Jacobs	This workshop introduces participants to the pedagogy and practice of using Free/Open Source Software development practices into their curriculum, and then guides them through deployment of a turnkey courseware framework to be used for their own courses. The framework supports automatic blog checking, automatically generated student profile pages, Gravatar integration for profile pictures, Travis-CI continuous Integration tests, and repository changes reported via Github webhooks to IRC. Participants will learn how to use Github in the Classroom, the basics of Flask, a python web framework, and how to deploy their courseware to Red Hat's OpenShift Cloud, a free Platform-as-a-Service to host courseware and/or other web sites.	Steal This Courseware: FOSS, Github, Python, and OpenShift (Abstract Only)	NA:NA	2015
Lien Diaz:Richard Kick:Andrew Kuemmel	This workshop focuses on content in two curriculum modules for AP Computer Science Principles (CSP) developed by the College Board. They highlight instructional approaches for teaching concepts about 1) the Internet and 2) the interplay between creative aspects of computing and impact of computing on society. The Internet module activities allow students to construct their own solutions to problems similar to some that the builders of the Internet faced. The topics in the Creativity and Global Impact module were chosen because they have rich potential for increasing interest with students, especially those from underrepresented demographics, and because they present instructional challenges for instructors new to AP CSP. Participants will learn detailed concepts addressed in the AP CSP course and will receive classroom materials from in each of the curriculum modules. These modules serve as exemplary resources for teachers.	The Internet, Creativity and Global Impact: Curriculum Modules for the New AP Computer Science Principles Course (Abstract Only)	NA:NA:NA	2015
Veronica Catete:Barry Peddycord, III:Tiffany Barnes	Students often take computing classes because they are eager to create games, to learn to create meaningful and useful software, or both. Connecting computing to real, cutting-edge applications has been shown to increase engagement of women and minorities. The new CS Principles curriculum, a pilot Advanced Placement course, seeks to broaden the participation in computing to a larger and more diverse audience. This curriculum emphasizes that computing is a creative activity where people work together to solve relevant problems. In this workshop, we introduce free software and curricula to enable novice high school and college students in a first computing course to learn basic game and mobile phone development. We discuss how these activities facilitate teaching high school and non-major (CS0) course topics, but they can also be used to illustrate more advanced topics. Participants will learn GameMaker and mobile phone programming using AppInventor, and/or Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course, as well as links to the GameMaker, AppInventor, and Touch Develop platforms and tutorials. Participants must bring a network-connected laptop with a modern browser, and the latest version of Java, and may optionally bring an Android, Windows, or iPhone.	Augmenting introductory Computer Science Classes with GameMaker and Mobile Apps (Abstract Only)	NA:NA:NA	2015
Jeff Gray:Fran Trees:Owen Astrachan	Many new curricula and tools have been developed recently to promote the exciting opportunities available in computer science. However, curriculum and supporting tools alone do not drive engagement -- the most interesting and innovative curriculum can still be taught in a disengaged manner, leading to lost opportunities for broadening the appeal and interest in computing across a diverse student population. The learning science literature on Cooperative Learning (CL) has been shown to increase class participation and student learning, while also promoting diversity in a manner that supports the differentiated instruction needed to engage students who have mixed abilities. This workshop will demonstrate how the best practices of CL can be applied in early CS courses (e.g., CS Principles, AP CS A, or CS1). Workshop participants will first be introduced to the CL structures that have been used in many different disciplines across multiple age/grade levels. These structures will then be used to demonstrate specific application toward computer science concepts. The workshop itself will be taught in a cooperative learning style so that participants can understand the dynamics and structure of a CL classroom. This workshop is for two categories of educations: 1) K-12 teachers who have experience with either AP CS A or CS Principles, or 2) university faculty who teach CS1 or other early courses.	Infusing Cooperative Learning into Early Computer Science Courses to Support Improved Engagement (Abstract Only)	NA:NA:NA	2015
Jason Freeman:Brian Magerko:Regis Verdin	EarSketch (http://earsketch.gatech.edu) is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will learn to code in Python and/or JavaScript to place audio clips, create rhythms, and add and control effects within a multi-track digital audio workstation (DAW) environment while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation to broaden participation and engagement in computing; the underlying concept of thickly authentic STEAM that drives this approach; the alignment of the curriculum and learning environment with CS Principles; and basic musical concepts underlying EarSketch. The intended audience for this workshop is secondary and early post secondary CS educators. The course is of particular relevance to CS Principles teachers but also applicable to any introductory programming or computing course. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required.	Computer Science Principles With EarSketch (Abstract Only)	NA:NA:NA	2015
Aaron Cadle:Ira Greenberg:Deepak Kumar:Darby Thompson:Ursula Wolz:Dianna Xu	This workshop showcases an engaging way to attract students who typically avoid a traditional introductory Computer Science course (CS1), with fully developed, classroom-tested course materials. This workshop has been successful at SIGCSE and other venues in the past. This year we highlight our successful approach in pre-AP courses, as well as continued refinement of curriculum for college-level CS1. Our courses focus on essential CS1 principles, but show applications of these principles with contemporary, diverse examples of computing in a modern context, including advanced areas typically not accessible in CS1 such as: physics-based simulations, fractals and L-systems, image processing, emergent systems, cellular automata and data visualization. Students produce dynamic visual work using the programming language Processing, which is fully compatible with Java. We aim to inspire the Computer Science community to use innovative and creative approaches to attract a broader audience to their classes. Participants will be introduced to the Processing language as well as its lightweight IDE through a series of on-the-fly coding examples. Additionally, course materials and handouts detailing the software, curricula and teaching resources will be given to the participants. Instructors of all levels are welcome; high school computer science teachers are particularly encouraged to attend. All participants will need to bring their own laptops.	Teaching Computing with Processing, the Bridge Between High School and College (Abstract Only)	NA:NA:NA:NA:NA:NA	2015
Daniel Zingaro:Leo Porter:Quintin Cutts:John Glick:Joe Hummel:Cynthia Lee:Jaime Spacco	Recent work in computing has converged on a collection of complementary findings suggesting the value of the Peer Instruction (PI) pedagogy. Compared to lecture, PI has been shown to decrease fail rates, increase final exam grades, and increase engagement and enjoyment. In PI, students work together to exchange perspectives and use clickers to answer challenging conceptual questions in the presence of a knowledgeable instructor. In our efforts to mentor potential PI adopters, we note difficulties bootstrapping PI uptake at new institutions and new departments. In this workshop, our main goal is to support potential adopters in the process of shifting from lectures to PI. In recent months, we have contributed materials for many freely-available PI courses, and led a successful 3-day NSF-funded PI workshop. We will work with participants and their existing lecture-based resources to begin considering the ways that PI might be effective in new contexts. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Supporting New Adopters to Peer Instruction in Computing (Abstract Only)	NA:NA:NA:NA:NA:NA:NA	2015
Michael Erlinger:Paul Tymann	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some "expert" opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don'ts will be provided.	Reviewing NSF Proposals: Learn about Effective Proposal Writing via the Review Process (Abstract Only)	NA:NA	2015
Eli Tilevich:Clifford A. Shaffer:Austin Cory Bart	This workshop introduces participants to CORGIS, a technology developed under the auspices of an NSF-funded project at Virginia Tech. The CORGIS Datasets Project comprises a software architecture framework and carefully engineered client libraries through which students can access either large datasets or those generated by real-time web services from domains, including weather reports, stocks, earthquakes, and news updates. The CORGIS technical scaffolding gradually introduces students to some of the most vexing complexities of distributed computing. To support the diverse needs of computing educators when teaching introductory CS classes, each CORGIS dataset is available in Python, Java, and Racket, with compatibility on key platforms. The dataset libraries are available through an online curated gallery, designed to be easily adapted to instructors' specific academic needs, including the ability to rapidly prototype new CORGIS libraries. With CORGIS, computing educators can introduce important big data or real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires. This workshop introduces CORGIS via a hands-on approach, familiarizing participants with the core functionality of our architectural framework and client libraries. We will proceed in three parts: (1) present CORGIS by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants' choice; and (3) critically discuss the technology in small and large groups. This presentation improves on our offering from SIGCSE 2014. Further information is at: http://think.cs.vt.edu/corgis.	Creating Stimulating, Relevant, and Manageable Introductory Computer Science Projects that Utilize Real-Time, Large, Web-Based Datasets (Abstract Only)	NA:NA:NA	2015
Barry L. Kurtz:Rahman Tashakkori:Ahmad Esmaili	Code magnet labs are 5-10 minute activities where students are asked to construct a method, function or rule to complete a specific task. The programming languages Java, C/C++, Python and Prolog are supported. In a code magnet lab the student is presented with a sequence of possible code magnets that can be arranged using drag-and-drop to create the desired method. Magnets for control statements can nest other magnets, including nested control statements. The completed method is compiled and subject to unit testing. Test results guide students towards a correct solution; multiple submissions are allowed. Since there is no keyboard entry when using code magnet labs, the labs can be completed using laptops, desktops, tablets and other mobile devices. This workshop is a shorter version of the half-day workshop presented with support from three NSF grants. Participants will experience using existing labs and learn to build their own code magnet lab for Java, Python, C or Prolog (participant's choice). Significant stipends averaging about $1000 will be available for after-workshop activities where the participant develops and tests multiple code magnet labs for his/her own courses in the 2014-2015 academic year. All participants will need a laptop to complete lab activities; teams will only require one laptop per team.	Building Code Magnet Labs for Tablets and Other Devices (Abstract Only)	NA:NA:NA	2015
Siddharth Kaza:Blair Taylor:Elizabeth K. Hawthorne	The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing Secure Coding in CS0, CS1, and CS2. (Abstract Only)	NA:NA:NA	2015
Raja Sooriamurthi:Nickolas Falkner:Ed Meyer:Zbigniew Michalewicz	Puzzle-based learning (PBL) is an emerging model of teaching critical thinking and problem solving used in Universities and schools. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles and games. What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.	Puzzle-Based Learning: Introducing Creative Thinking and Problem Solving for Computer Science and Engineering (Abstract Only)	NA:NA:NA:NA	2015
Diana Franklin:Hilary A. Dwyer	This workshop introduces our elementary school programming curriculum, KELP-CS, and the corresponding programming environment LaPlaya. KELP-CS (Kids Engaged in Learning Programming) is an innovative, modular computational thinking curriculum for 4th-6th grade students. Off-computer activities connect computer science concepts to students' every day experiences. On-computer activities in LaPlaya develop students' computational thinking and programming skills. Finally, an engineering design project allows students to apply these new skills through an open-ended, creative project (e.g. digital storytelling in Module 1, and virtual game in Module 2). LaPlaya is a modified Scratch programming environment tailored to the developmental needs of 4th-6th grade students. In this workshop, we begin by introducing the KELP-CS curriculum; LaPlaya, the development environment used in the on-computer activities; and the resources for teachers embedded in both. Workshop participants will do sample on- and off- computer activities from Module 1 (4th grade) and discuss tips and strategies for teaching computational thinking with this age group. For the second part of the workshop, we provide additional background for participants interested in creating their own curriculum with LaPlaya. This includes how to create projects and their analysis.	KELP CS and LaPlaya: A Computational Thinking Curriculum and Development Environment for 4th - 6th Grade (Abstract Only)	NA:NA	2015
Gerald Friedland:Serge Egelman:Daniel Garcia	Although frequent stories in the popular media have raised awareness about online privacy, most young people do not have a very good handle on what the specific issues are, nor the practical steps they can take to manage them. Teachers recognize that all their students' from future engineers to those totally bored by science need a realistic understanding of how online privacy works, so they can protect themselves online. In fact, the latest CS curricular recommendations include privacy but there is no comprehensive set of field-tested teaching materials. To address this, we are developing TROPE (Teachers' Resources for Online Privacy Education), a set of classroom-ready teaching materials (teachingprivacy.org). TROPE will provide educators with lesson modules, interactive demonstrations, and a teachers' guide, so they can readily integrate privacy into high school and college classes. Our goal for this workshop is twofold. First, we will introduce educators to TROPE and provide guidance on how they can cover privacy-related topics in their classrooms without being subject-matter experts. Second, we will solicit feedback and on-the-ground stories; by gaining a better understanding of specific problems faced by educators and students, we can increase TROPE's utility to teachers. We will provide teachers with up-to-date technical information about online privacy, including relevant highlights from our research; hands-on activities illustrating principles of online privacy; and an overview of the materials we are creating for TROPE. This will be an interactive workshop, driven by participants' questions, experiences, and interests. For CS educators at all levels; laptop or tablet recommended.	Teaching Privacy: What Every Student Needs to Know (Abstract Only)	NA:NA:NA	2015
Baker Franke:Brook Osborne	Code.org is developing a complete curriculum and professional development program for the new (AP) Computer Science Principles course. In this hands-on workshop, modeled after the professional development program, participants will get access to, and interact with the new curricular materials for this course: daily lesson plans, instructional guides, assessments, and custom-built software tools woven throughout. Code.org's CS Principles curriculum engages students by having them invent and create their own solutions to some of the great problems in computing upon which many CS principles are based. For example, the course begins by asking students to invent their own bit-sending device to send a single bit of information from one place to another. The curriculum employs a variety of instructional strategies, plugged and unplugged, to build a classroom experience that is engaging and emphasizes accessibility for both the students and instructors. The curriculum also emphasizes student preparation for the AP Performance Tasks by including model tasks at the conclusion of each unit of study. Participants will experience a snapshot of the professional development program, engaging with lessons from the curriculum as they would in a realistic classroom context (i.e. diving into the materials and planning to teach the lesson rather than just talking about it). Participants will hear from high school teachers who have taught the lessons in their classrooms during the 2014-15 field-testing year. Code.org's partner schools will pilot the course in the 2015-16 school year, but the course and its materials will be open and free for all to use.	Decoding CS Principles: A Curriculum from Code.org (Abstract Only)	NA:NA	2015
Deanna Biesan	Robotic mapping and localization are two large areas in robotics research that focus on how robots know and navigate within an environment. The current methods used to complete these tasks are not extremely accurate due to errors that are compounded as the robot moves. Since robots are often used in situations where precise navigation is a necessity, there is a strong motivation for the mapping and localization processes to be as accurate as possible. This project hopes to reduce the accumulated error which occurs during the mapping and localization processes through the integration of a Kinect sensor, which provides both visual and depth data about objects in front of a mobile robot and a sonar sensor which provides depth information about objects on the sides of the robot. The Kinect's images and depth information will be used to form an occupancy grid map of the environment, while the sonar data will track the walls as the robot moves throughout the environment in order to assist in keeping track of both position and orientation of the robot. These two sensors will allow the robot to reduce the errors accumulated during localization and navigation within the map being created and in navigating the subsequently completed map. When the occupancy grid map is completed, the cells in it will be combined into a topological map, which will hold information about the rooms such as doorway locations. The topological map will then be used as the robot plans a path to its goal.	Improvement of Robot Mapping and Localization Using Combined Sensory Data (Abstract Only)	NA	2015
Matthew Bowen	With recent advancements in smartphone digital camera technology, the opportunity to integrate computer vision into daily activities has become possible. A unique application of computer vision is ESPN's use of K-Zone during Major League Baseball broadcasts, which uses a combination of three cameras and multiple computers running sophisticated algorithms, to track a thrown baseball to within 2/5ths of an inch. While the sophistication of the K-Zone hardware and software allows for a high degree of accuracy, there is the potential for obtaining similar results using only a smartphone. The Mobile Video Velocity Estimation (MoVVE) project investigated the application of computer vision in the development of a speed-tracking app on a smartphone. This presentation will describe the design of the MoVVE software which uses OpenCV computer vision library functions to track the velocity and location of objects such as a thrown baseball using video obtained from a mobile digital camera. MoVVE was shown to successfully detect and track the baseball with a success rate greater than 90%. Baseball velocity estimates obtained with MoVVE were compared to those measured using a professional grade radar gun. For a test population of 112 pitches, 84% of the program's estimated velocities agreed to within 10% of the radar gun measurement, and 43% agreed to within 5%. Test pitch velocities varied from 30 mph to 60 mph with the program showing equal accuracy throughout the full range.	Speed Estimation Using Computer Vision (Abstract Only)	NA	2015
Donald D. Buhl-Brown	Robotics education is one of the most important subjects now and for the foreseeable future. Our project focuses on designing a robotics education platform, which includes extensive libraries of code that allows any student from high school to college level to study robotics. We also have significantly addressed two of the major problems in robotics, usability and affordability. Using a Cellbot, a robot that uses an Arduino microcontroller and an Android smartphone, enables us to quickly and affordably add new sensors or features to the entire robotics system. By combining a Cellbot with the advance software we developed, we have designed a system, which is easy to learn and allows the robot to perform numerous high performance tasks. As students advance in their programming abilities more complex algorithms and sensors can be easily added to the system. Effectively making the robot "grow" with the students.	Developing a Robotics Education Platform using Android Based Cellbots (Abstract Only)	NA	2015
Jae Hyun Choe	Reading is an integral part of our lives. Most of us learned to read while we were young and never thought about how we learned to read. "ACEit!" (Assist Children in English-language) is an Android app developed to facilitate children in learning to read English. The app consists of a subset of the Dolch words (a set of 220 sight words that are proven to improve reading skill when they are learned) and uses a fading image strategy to support children in the early stages of learning to read and/or in special education. It gradually transitions the user from depending on pictures clues to recognize words, to recognizing words by themselves. This app is geared towards visual learners and provides them a more succinct yet entertaining way to learn using mobile devices.	ACEit!: Assist Children in English-language (Abstract Only)	NA	2015
Erol Cromwell	The goal of our research project was to create an artificial chef program that produces novel salad recipes with limited human assistance. Our program was designed in two steps: first, we constructed a statistical model to rank recipes. Then, we experimented with various search algorithms to explore the salad recipe space for novel ingredient combinations. Surprisingly, we discovered that the top ranked recipes from a randomly generated population, as determined by our model, were already of high quality. To validate the quality of our automatically generated salads, we conducted a blind taste test with three computer designed and three human designed salads. The best performing computer salad was competitive with the human salads, but received a lower rating.	Computational Creativity in the Culinary Arts (Abstract Only)	NA	2015
Mindy DeWaal	An important and challenging part of the computer science curriculum is learning to program. A source of aggravation when learning this skill is finding syntactic mistakes in the code commonly referred to as bugs. This learning process is frustrating for new programmers because bug messages given by the compiler are incomprehensible and dominantly occupied by jargon. A group in the UK has started a data logging project called Blackbox to record novice programmers' source code and the related bug messages. In this project, we intend to build better bug messages through the utilization of Blackbox's logged data to anticipate student errors. In the second part of the project, we will test these improved bug messages in a plugin for BlueJ, a popular IDE for instructors to use in CS1 classes.	Data Mining: Building Better Bug Messages (Abstract Only)	NA	2015
Derek M. Duchesne	This project presents an approach to web application security that modifies general penetration testing tools to test for advanced vulnerabilities. As a proof of concept, the ZAP (Zed Attack Proxy) security tool was extended with functionality to find vulnerabilities such as server-side security misconfiguration, to test CABECTPortal (a website housing collaborations between multiple disciplines). By combining the general vulnerability checks built into tools like ZAP and the server-side maintenance checks that are normally conducted manually by system administrators and programmers, this project provides a more tailored approach to security testing that can be applied to any web application, making testing easier and more precise.	Using CABECTPortal as a Case Study to Extend the Capabilities of Penetration Testing Tools (Abstract Only)	NA	2015
Thomas D. Effland	Finding topically relevant content from disparate sources on the Web requires robust techniques due to the variability of sites. A focused web crawler is a type of crawler that attempts to make predictions about page relevance and traverse the web efficiently. In this work, we attempt to design a novel system of focused crawling tailored to identifying and extracting semantically similar topical information from disparate but known seed domains with highly variable structure that do not reference each other. We first extract rich predictive features from web pages. We then utilize Weakly-Supervised Machine Learning techniques to predict the link distance of current pages to target pages by employing two separate Random Forest classifiers that rank the current page and potential relevance gain of hyper-links. We use these page representations and rankings to efficiently tunnel through irrelevant pages and reach target pages with more optimal path traversals.	Focused Mining of University Course Descriptions from Highly Variable Sources (Abstract Only)	NA	2015
Brandon Gottlob	iBeacon technology has the potential to evolve occupancy detection over the traditional passive infrared motion sensor approach due to portability, relatively low cost, and capabilities beyond motion detection alone. This project implements study room occupancy detection in the TCNJ Library using a Raspberry Pi with a PIR sensor and an Estimote Beacon. The scalability of each approach is directly compared by cost, ease of setup and maintenance, and accuracy. Prototype occupancy detection systems that are set up in study room environments provide end-users with a listing of available rooms in real-time through new functionality in the TCNJ Library iOS app. Using iBeacon sensors can bring extra functionality to existing systems and new environments where portability is essential.	Real Time Occupancy Notification: A Comparison Between Passive Infrared and iBeacon Implementations (Abstract Only)	NA	2015
Barry Hamilton, Jr.	Application layer (L7) Distributed Denial of Service attacks are becoming more common and an emerging threat to legitimate sites. The goal of these attacks is to prevent legitimate users from accessing a website. Due to the nature of the attacks, the low rate, and the sophisticated imitation of user behavior from automated bots, it is difficult to diagnose these on time. There is an evolving 'industry' of blackmailing and using these attacks for illegal profit [1]. Even though L7 DDoS attacks are a serious threat, studying and experimenting with them is challenging. Organizations do not share server logs because of privacy concerns. Furthermore, implementing these attacks requires instrumentation and real testbeds in order to produce realistic attacks for analysis. Therefore, it is difficult to evaluate mitigation and detection techniques. Our contribution is twofold. First, we have developed a set of testbeds on the GENI (Global Environment for Network Infrastructure) cloud infrastructure [2] to facilitate research and development of detection and mitigation techniques of L7 DDoS attacks. Second, we have used a library of attacks to perform post forensic analysis and classify L7 DDoS attacks based on their individual characteristics. Our work automates and simplifies log generation of L7 DDoS attacks for research and experimentation, as well as provides criteria to detect abnormal requests using a library of attacks.	Automation of Layer 7 DDoS Attacks and Post Forensic Analysis of Server Logs	NA	2015
Andrew Keenan	Q-Learning is a type of reinforcement learning which learns how to optimize an agent's choice of actions in a given environment based on experience. Typically, Q-Learning is implemented using a lookup table indexed by state/action tuples. For many applications, this approach can be difficult or impossible, as their state space is too large or cannot accurately be captured in a table. A neural network can act as a function approximator for the Q-Learning Table. This reduces learning time and allows for generalization on unvisited states The neural network can be trained using the Back propagation algorithm with the state/action tuple as input and the output of the update rule as the new target value. The weights of the network are updated to produce the correct output value for inputs in the training set. We have implemented this technique in a 2-D simulation of soccer, where agents learn how to maneuver the ball in order to score a goal.	NeuroSoccer: Neural Network Q-Learning (Abstract Only)	NA	2015
Andreas Kellas:Alexander Molnar:Leo St. Amour:Frederick Ulrich:Suzanne J. Matthews	Cyber-crime is becoming alarmingly common through the use of anonymous e-mails. Author attribution helps digital forensics investigators filter through a large set of possible authors and focus traditional investigative techniques on the most probable culprits. A recent promising technique is to construct a write-print for each known author, and compare it to the write-print extracted from the anonymous message(s). A write-print is a unique digital fingerprint created by mining frequent patterns from a particular author's writing style. However, the process for generating a write-print is very slow, making it a poor choice for author attribution situations of a time-sensitive nature such as anonymous threats of attack, exposure, or ongoing harassment. We develop the Parallel Author Verification of E-mail (PAVE) algorithm for determining author write-prints. Our goal is to create a parallel approach that enables the analysis of large collections of e-mail. PAVE employs the Phoenix++ MapReduce framework hybridized with MPI, allowing us to exploit multiple nodes and cores. Our approach is significant because it drastically reduces the run-time complexity required to produce write-prints, and may expedite the process of author identification in time-sensitive situations. Our preliminary results suggest that our algorithm will enable the fast analysis of larger e-mail datasets and may be a potential asset to future investigations.	Parallel Author Verification of E-mail (Abstract Only)	NA:NA:NA:NA:NA	2015
Darrion Jarrell Long:David Heise	Analysis of musical audio is of interest for a variety of tasks within the field of music information retrieval (MIR). One component of MIR is audio event detection, of which onset detection is one component. Audio offset detection is a complementary task to audio onset detection, but this task has received scant attention in the literature. This research will develop an offset detection task that can be included in the Music Information Retrieval Evaluation Exchange (MIREX) 2015 suite of evaluation tasks. The development of this task will provide a tool for researchers to evaluate performance of offset detection algorithms while establishing a baseline of performance for the current state-of-the-art. An existing offset detection algorithm will be utilized for testing prior to public release of the task in Summer 2015. Results of the public evaluation will be presented during the MIREX session at the 2015 International Society for Music Information Retrieval (ISMIR) conference, to be held 26-30 October 2015 in Malaga, Spain.	Development of an Offset Detection Task for MIREX 2015 (Abstract Only)	NA:NA	2015
Melissa Katherine Mulcahy	Mobile devices are becoming an integrated part of every person's life regardless of age. Several studies have shown that falls account for over sixty percent of injuries in adults older than 65. These falls can leave permanent scars and limit the everyday lives of those people. Since people that fall are instructed not to move, it is crucial to provide them with a means to call for help. Systems like LifeAlert¬© have provided means for their clients to call for assistance by pressing a button they wear around their neck. However, if a person who has fallen is rendered unconscious, they are unable to do anything to obtain the assistance they need. This project focuses on developing a mobile application and related algorithms to allow mobile devices to determine if a person has fallen. The algorithms developed in this project takes in real-time data from a smartphone's accelerator and determines whether the sequential readings satisfy the three stages of falling (the free fall stage, collision with the floor stage, and remaining at rest stage). The results of the experiments demonstrate promising hands-free responses to the smartphone user falling. By using a smartphone or similar device, it is possible to autonomously call for assistance without the user having to manually press a button.	Automatic Fall Detection Using Mobile Devices (Abstract Only)	NA	2015
Christina Noe	The WAVER (Web-based Application for Virtual Exercise Regimen) project takes advantage of available 3D motion technology to provide stroke patients with an inexpensive and more accessible alternative to conventional rehabilitation. Specifically, WAVER uses the LEAP device to assist patients who have mobility and dexterity limitations due to a stroke, disability, or even sports-related injury. Patients may face physical adversity in pursuing rehabilitation. Not all patients are conveniently distanced from a medical facility and may find that commuting daily worsens their pain, lightens their wallets, and forces them from the comfort of their homes as they deal with pain and circumstances affected by their disability. The WAVER solution to these problems is a web-based application that utilizes the 3D LEAP Motion sensory controller, which is an affordable and compact device that can be used by any home computer or laptop. WAVER presents exercises to a patient that can be performed by the patient in their own 3D space, which is then tracked by WAVER for on-screen feedback to the patient, as well as the potential to share the results remotely with a therapist.	Web-based Application for Virtual Exercise Regimen (Abstract Only)	NA	2015
Lindsey Press	The level of detail portrayed in graphics environments is steadily increasing, and so does the challenge to enable users to accurately select 3D objects from a graphics scene in real time [2]. From a gaming perspective, complexity in computer graphics has increased drastically because thousands of users can now participate together in games that involve a high frequency of selecting objects. This poses a challenge because each three-dimensional object exists in a native, local coordinate system which will eventually be realistically displayed on a two-dimensional screen and then selected by users. Our project is broken down into two phases -- phase one will focus on the theory and mathematics behind these operations and phase two will evaluate the more efficient picking algorithm, ray casting [3] or color picking [4]. Our criteria for determining the better algorithm is to discover which algorithm is faster and more accurate in complex graphics scenes, with the ultimate goal of minimizing delay responses associated with selection.	Selection in 3D Graphics Enviornments (Abstract Only)	NA	2015
Joseph Rioux:James Vanderhyde	Jumping has been a prevalent and versatile game mechanic from the early days of games like Donkey Kong to our own sophisticated era of smartphone games like Temple Run and entertainment industry giants like the Call of Duty series. While the physical activity of jumping itself seems simple, a lot can change in the translation of this action to its game counterpart. Jumping must serve to make the game playable and enjoyable, and so realism is sacrificed in order to facilitate the particular "feel" that the game developers desire for the physics of their game. This project is a study of jumping as a game mechanic and its implementation in video games, and includes a playable simulation program that allows for hands-on experience of different jump implementations that were studied.	Jumping Implementation in Video Games (Abstract Only)	NA:NA	2015
Dharmin Shah	It is well-known that software maintenance is an arduous task. It is particularly so because of poor design decisions made by software engineers during the development phase. Past research has shown that there are smells in the code that can be used to gauge the quality of the project. Nevertheless, code maintenance due to these research tools is still costly because they are focused on curative solutions rather than preventive measures. Majority of the past research techniques detect code smells after the fact; and the classification of code changes rely on the commit messages written by the developers. However, developers do not always mention the necessary meta-data to determine the changes. The goal of my research is to find a set of design and implementation change categories using abstract syntax trees from the code rather than the commit messages. The categories will help classify the common changes in software projects and identify the resulting unstable regions. A rule-based system will be developed using these regions to recommend the potential improvements required to stabilize the code-base. The result of my research will contribute a toolset that will be used from the start of the development phase to evaluate the stability of the system using software metrics and recommend improvements. This will help project managers mitigate the design and implementation flaws early on during the product life-cycle and reduce the cost during the maintenance phase. Hence, the toolset will have the potential to change the software maintenance paradigm from corrective to preventative measures.	The Backbone Project (Abstract Only)	NA	2015
Austin Cory Bart	As Computational Thinking becomes pervasive in undergraduate programs, new students must be educated in meaningful, authentic contexts that they find both motivating and relatable. I propose working with big data as a novel context for introductory programming, authentic given its importance in diverse fields such as agriculture, history, and more. Big data is considered difficult to use because of its inherent technical obstacles. To overcome these difficulties, I introduce a new project: CORGIS - a "Collection of Real-time, Giant, Interesting, Situated Datasets". The CORGIS project comprises a collection of libraries that provide an interface to big data for students, architectures for rapidly enabling new datasets, and a web-based textbook platform for disseminating relevant course materials. This textbook features an online block-based programming environment, real-time collaborative text editing, and continuous server-side storage. In this poster, I describe the educational theory guiding this work, the novel technolgy created and deployed, and the initial, promising results.	Situating Computational Thinking with Big Data: Pedagogy and Technology (Abstract Only)	NA	2015
Hannah Blau	FrenchPress is an Eclipse plug-in that partially automates the task of giving students feedback on their Java programs. It is designed not for novices but for students taking their second or third Java course: students who know enough Java to write a working program but lack the judgment to recognize bad code when they see it. FrenchPress does not diagnose compile-time or runtime errors, or logical errors that produce incorrect output. It targets silent flaws, flaws the student is unable to identify for herself because nothing in the programming environment alerts her. FrenchPress diagnoses flaws characteristic of programmers who have not yet assimilated the object-oriented idiom. Such shortcomings include misuse of the public modifier and instance variables that function as local variables or class constants. Other rules address the all too common misunderstanding of the boolean datatype. Where it finds a problem, FrenchPress delivers an explanatory message in a vocabulary appropriate to the student's current level of understanding. FrenchPress is easy to use for both students and instructors. The instructor does not have to write a model solution or customized diagnostics for each assignment. The analysis applies to any compilable Java program. The Eclipse plug-in integrates seamlessly into the student's development environment. The student can get feedback as she works, so she can iteratively improve the code before submitting her project.	FrenchPress Gives Students Automated Feedback on Java Program Flaws (Abstract Only)	NA	2015
Saami Rahman	Prefetching is a commonly used technique of improving low-level cache usage that predicts memory requests ahead of time and thus, improves performance by hiding memory latency. Several prefetching algorithms are implemented in hardware. For example, the Intel Core2 processor has 4 different prefetchers, each of which serves a different type of data access pattern. These prefetchers are enabled by default, based on the assumption that the prefetch unit will be triggered when it can successfully prefetch data. However, we have discovered that this assumption is incorrect and can at times hurt performance by up to 11%. We present a simple and easy-to-use framework that determines which hardware-prefetching configuration should be used for a specific workload. The guiding principle of this work that sets it apart from other similar ones is that it fits well within the development process of an average programmer possessing no detailed hardware specific knowledge. For two programs in the PARSEC benchmark, on an Intel Core2 machine, our framework results in an effective speedup of 19% compared to the baseline default setting of using all available prefetchers.	Selecting the Optimal Hardware Prefetching Algorithm for Parallel Workloads (Abstract Only)	NA	2015
Brian P. Railing	Active learning techniques are increasingly used in lower-level Computer Science courses. This work explores the use of active learning techniques in a graduate Computer Science course on computer architecture, where the course enrollment is composed of both undergraduates and graduate students. Initial results are presented on how the two groups of students respond differently to the techniques. In particular, the study includes the effect of using POGIL in place of a subset of lectures, measured through both student responses and test scores.	Using Active Learning Techniques in Mixed Undergraduate / Graduate Courses (Abstract Only)	NA	2015
Mohammed Seyam	Today's Computer Science (CS) students may not give enough attention for the importance of the User Interfaces (UIs) they design for class projects, which becomes even more critical when they design for mobile applications. They also lack the required organization skills that help them manage how they work together. Although agile methods proponents and UI experts follow different guidelines for each to achieve their goals, integrating agile and UI design practices seems to be a promising combination that can help CS students (and developers in general) to better design for various mobile devices (smartphones, tablets, smart watches etc.) as well as to follow a semi-structured development approach to help them manage their programming work. Our research is concerned with studying the various approaches that can be used to combine agile practices with UI design guidelines for designing mobile applications. We are designing a framework that uses Pair Programming (PP) -- as an agile practice to guide the mobile UI design and application development processes. Unlike the previous studies that applied agile methods in classrooms, we are concerned with the special requirements of mobile devices as well as the regular development tasks. Moreover, we are focusing on applying certain practices that we believe to be easier to follow than the broader agile guidelines. Our current work aims at providing CS educators with a new adaptive teaching approach that is more student-oriented instead of the traditional task assignment approaches. Our research will then be extended to include teams from software development companies that are working on mobile application development. We believe that our practice-oriented framework that integrates agile with mobile UI design and development practices has much to do with industry as well as classrooms.	User Interface Design and Agility: Practices for Integration in CS Classrooms (Abstract Only)	NA	2015
Thomas Cortina	NA	Session details: Keynote	NA	2018
Matthias Felleisen	In 1995, my research team and I decided to create TeachScheme!, an educational outreach project, with the hope that our work on programming languages could effect a dramatic change in K-12 computer science. Specifically, we envisioned a virtuous cycle of two mutually reinforcing ideas. On the one hand, we would create a design-oriented curriculum path from middle school through college. On the other hand, our approach would help kids with learning school mathematics. Hence a course on programming would benefit every student, not just those who end up choosing computer science as a college major. At this point, we have a new design-oriented curriculum; a pedagogic program development environment to make it fun; and a series of matching programming languages. After focusing at the overlap between high schools and colleges at first, we now use after-school programs to move upstream, and we are working on two major downstream courses for the second semester in college: one on object-oriented design and another on logic in program design. My talk will focus on just one aspect of the project: the design-oriented curriculum and its smooth path from middle school to college. I will first demonstrate how to teach an intellectually interesting and fun course on programming with something that looks like plain school mathematics. For the rest of the talk, I will sketch the path from there through college.	TeachScheme!	NA	2018
James Caristi	NA	Session details: Panel	NA	2018
James Caristi:Valerie Barr:Joe Sloan:Eric Stahlberg	NA	Starting a computational science program	NA:NA:NA:NA	2018
Doug Baldwin	NA	Session details: Special session	NA	2018
Douglas Baldwin:Peter Sanderson:Robert McCartney:Stephanie Ludi:Narayanan T. Ramachandran:Carol Taylor	SIGCSE's special projects grant program provides small grants to SIGCSE members to carry out computing education projects whose results generalize to the whole computing education community. This session is a "showcase" for five recent grant projects: a MIPS simulator extended into FPGA hardware, a study of informal learning of computing, software engineering learning modules for the visually impaired, a study of student projects in computing, and curriculum resources for computer security.	SIGCSE special project showcase	NA:NA:NA:NA:NA:NA	2018
Robert Beck	NA	Session details: Special session	NA	2018
Robert E. Beck:Jennifer Burg:Jesse M. Heines:Bill Manaris	NA	Computing and music: a spectrum of sound	NA:NA:NA:NA	2018
Irene Polycarpou	NA	Session details: Security and society	NA	2018
Tadayoshi Kohno:Brian D. Johnson	Computer security courses typically cover a breadth of technical topics, including threat modeling, applied cryptography, software security, and Web security. The technical artifacts of computer systems - and their associated computer security risks and defenses - do not exist in isolation, however; rather, these systems interact intimately with the needs, beliefs, and values of people. This is especially true as computers become more pervasive, embedding themselves not only into laptops, desktops, and the Web, but also into our cars, medical devices, and toys. Therefore, in addition to the standard technical material, we argue that students would benefit from developing a mindset focused on the broader societal and contextual issues surrounding computer security systems and risks. We used science fiction (SF) prototyping to facilitate such societal and contextual thinking in a recent undergraduate computer security course. We report on our approach and experiences here, as well as our recommendations for future computer security and other computer science courses.	Science fiction prototyping and security education: cultivating contextual and societal thinking in computer security education and beyond	NA:NA	2018
Claude F. Turner:Blair Taylor:Siddharth Kaza	While many colleges offer specialized security courses and tracks for students in computing majors, there are few offerings in information security for the non-computing majors. Information security is becoming increasingly critical in many fields, yet most computer literacy courses insufficiently address the security challenges faced by our graduates. This paper discusses the development and impact of a set of modules designed to integrate security into computer literacy across two universities and several community colleges in the state of Maryland. Results from our comparative analyses based on pre- and post- test analysis show significant improvements in post-test results.	Security in computer literacy: a model for design, dissemination, and assessment	NA:NA:NA	2018
Trajce Dimkov:Wolter Pieters:Pieter Hartel	Practical courses in information security provide students with first-hand knowledge of technical security mechanisms and their weaknesses. However, teaching students only the technical side of information security leads to a generation of students that emphasize digital solutions, but ignore the physical and the social aspects of security. In the last two years we devised a course where students were given a practical assignment which includes a combination of physical security, social engineering and digital penetration testing. As part of the course, the students stole laptops using social engineering from unaware employees throughout the university campus. The assignment provided the students with a practical overview of security and increased their awareness of the strengths and weaknesses of security mechanisms. In this paper we present the design of the practical assignment and the observations from the execution.	Training students to steal: a practical assignment in computer security education	NA:NA:NA	2018
Matthew Hertz	NA	Session details: Organization and architecture	NA	2018
Joel C. Adams:Kathy Hoobeboom:Jonathan Walz	Traditional Beowulf clusters have been homogeneous platforms for distributed-memory MIMD parallelism. However, the shift to multicore architectures has made shared-memory MIMD parallelism increasingly important, and inexpensive manycore GPGPUs have revived SIMD parallelism. This paper presents a case study in designing and building a heterogeneous cluster as a learning platform for tera-scale distributed- and shared-memory MIMD parallelism, and GPGPU parallelism.	A cluster for CS education in the manycore era	NA:NA:NA	2018
Erik Brunvand	The design of computer games can be a powerful motivator as students learn about computer architecture and design. Students in classes where computer designs are developed and implemented (usually on Field Programmable Gate Arrays (FPGAs)) seem much more highly motivated if their computer design can be used for something visual and interactive when the project is complete. However, ensuring that the student teams can have a working game by the end of a semester requires careful planning of how their computer designs will interact with the world. Keyboard inputs and VGA outputs are a relatively simple set of I/O interfaces that open up significant new potential for development of game applications on the student's own computer designs. In this paper we describe the curriculum of a computer design course that uses game design as a "carrot" to encourage active student exploration and deeper understanding of computer architecture, I/O subsystems, and computer implementation.	Games as motivation in computer design courses: I/O is the key	NA	2018
Marc L. Corliss:Marcela Melara	In this paper, we present the VIREOS project, a new operating system designed specifically for the classroom. VIREOS is a simple, Unix-like, operating system, which runs on the Larc educational architecture. A VIREOS/Larc system can either be simulated or run on a pre-configured FPGA. The VIREOS project is well integrated with an introductory computer architecture course using Larc and the assignments are structured in a similar fashion: using a bottom-up approach. We have several resources available on the Web, which help reduce the overhead of adopting VIREOS. Finally, VIREOS has been used in one operating systems course already, and the feedback from students was generally favorable.	VIREOS: an integrated, bottom-up, educational operating systems project with FPGA support	NA:NA	2018
Elizabeth Shoop	NA	Session details: Learning objects and modules	NA	2018
L. D. Miller:Leen-Kiat Soh:Beth Neilsen:Kevin Kupzyk:Ashok Samal:Erica Lam:Gwen Nugent	Learning objects (LO) have previously been used to help deliver introductory computer science (CS) courses to students. Students in such introductory CS courses have diverse backgrounds and characteristics requiring revision to LO content and assessment to promote learning in all students. However, revising LOs in an ad hoc manner could make student learning harder for subsequent deployments. To address this problem, we present a systematic revision process for LOs (LOSRP) using proven techniques from educational research including Bloom's Taxonomy levels, item-total correlation, and Cronbach's Alpha. LOSRP uses these validation methods to answer seven questions in order to diagnose what needs to be revised in the LO. Then, LOSRP provides guidelines on revising LOs for each of the seven questions. As an example, we discuss how LOSRP was used to revise the content and assessment for 16 LOs deployed to over 400 students in introductory CS courses in 2009. Lastly, although initially designed for LO revision, we briefly discuss how LOSRP could be used for assessment revision in intelligent tutoring systems.	Revising computer science learning objects from learner interaction data	NA:NA:NA:NA:NA:NA:NA	2018
Jeffrey A. Stone:Tricia K. Clark	CS educators face many challenges in teaching basic computer programming to first-year students. As a result, faculty must find new and interesting ways to engage students and to provide opportunities for student success. This paper reports on a two-year study involving the Problem-Oriented Animated Learning Modules for Introductory Computer Science (PALMS for CS1) project. PALMS for CS1 is a set of animated learning modules designed to enhance student engagement, success, and retention through the use of computer animation, video, audio, and storytelling. The results of this study indicate that PALMS for CS1 has been successful in engaging introductory students but more work remains to improve student success and retention. Marked improvement in student success and retention was seen during the second year of the study, though success and retention are still a challenge for traditionally underrepresented groups.	The impact of problem-oriented animated learning modules in a CS1-style course	NA:NA	2018
L. D. Miller:Leen-Kiat Soh:Gwen Nugent:Kevin Kupzyk:Leyla Masmaliyeva:Ashok Samal	Learning objects (LOs) have been previously used in computer science education. However, analyses in previous studies have been limited to surveys with limited numbers of LOs and students. The lack of copious quantitative data on how LOs impact student learning makes detailed analysis of LO usefulness problematic. Using an empirical approach, we have studied a suite of LOs, comprehensive in both the content covered and the range of difficulty, deployed to CS1 courses from 2007-2010. We review previous work on predictors of achievement and impact of active learning and feedback. We also provide a high-level overview of our LO deployment. Finally, based on our analysis of student interaction data, we found that (1) students using LOs have significantly higher assessment scores than the control group, (2) several student attributes are significant predictors of learning, (3) active learning has a significant effect on student assessment scores, and (4) feedback does not have a significant effect, but there are variables with significant moderating effects.	Evaluating the use of learning objects in CS1	NA:NA:NA:NA:NA:NA	2018
Stephen Edwards	NA	Session details: Undergraduate innovations	NA	2018
Rahman Tashakkori:Barry L. Kurtz:Dolores A. Parks:James B. Fenwick, Jr.:Alice A. McRae	Research experiences are widely available to upper-division computer science students during the academic year and during summer. Co-op and internship opportunities are available to this group as well. Due to the fact that freshman and sophomore students do not have sufficient background, they are often left behind and are not involved in research activities. This paper shares some experiences with a program that was put in place through an NSF STEP grant that provides research opportunities to freshman, sophomore, and first year transfer students. The paper presents examples of projects in which computer science scholars were involved. We have learned that lower-division computer science students are excited about the opportunity to participate in research. Early participation in research helps build a strong community among the freshman and sophomore students, keeps these students engaged, and results in a higher retention rate.	Early participation of CS students in research	NA:NA:NA:NA:NA	2018
Janet Davis:Henry M. Walker	CC2001 and CC2008 recommend that an undergraduate computing curriculum include 16 hours related to social and professional issues. An ITiCSE 2010 Working Group discussed approaches for incorporating this material in the curriculum and outlined seven contrasting implementation cases. Also, Baldwin et al discuss the implementation of computing curricula at five different liberal arts colleges [TOCE, March 2010]. However, none of these provides specific implementation details for addressing social issues in a liberal arts computing curriculum. This paper identifies successful strategies from one college and begins a general discussion of teaching social issues of computing in a liberal arts setting.	Incorporating social issues of computing in a small, liberal arts college: a case study	NA:NA	2018
Paul E. Dickson	The use of undergraduate teaching assistants in computer science courses is not new but is primarily thought of as a way to help with large classes in universities and rarely for small classes in small colleges. In this paper we discuss the success we have had over the past 2 years using undergraduate students as teaching assistants for a number of small computer science classes. Our experience has shown that having undergraduates as teaching assistants helps to engage students with the material, creates a more relaxed classroom environment in which students feel more free to ask questions, improves the effectiveness of class time, and improves class quality. We believe that our experiences using undergraduate teaching assistants can be beneficial not only to small colleges but also to large universities.	Using undergraduate teaching assistants in a small college environment	NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Marie desJardins:Zachary Dodds:Todd Neller	In 2010 a new annual symposium on Educational Advances in Artificial Intelligence (EAAI) was launched as part of the AAAI annual meeting. The event was held in cooperation with ACM SIGCSE and has many similar goals related to broadening and disseminating work in computer science education. EAAI has a particular focus, however, as the event is specific to educational work in Artificial Intelligence and collocated with a major research conference (AAAI) to promote more interaction between researchers and educators in that domain. This panel seeks to introduce participants to EAAI as a way of fostering more interaction between educational communities in computing. Specifically, the panel will discuss the goals of EAAI, provide an overview of the kinds of work presented at the symposium, and identify potential synergies between that EAAI and SIGCSE as a way of better linking the two communities going forward.	Educational advances in artificial intelligence	NA:NA:NA:NA	2018
Gregory Hislop	NA	Session details: Panel	NA	2018
Heidi J.C. Ellis:Mel Chua:Matthew C. Jadud:Gregory W. Hislop	Free and Open Source Software (FOSS) and documentation projects provide excellent learning opportunities for students. In the context of active learning, FOSS is particularly interesting in providing transparent meritocracies that allow students to observe and contribute as part of their learning. This panel will present four different perspectives on student involvement in Free and Open Source Software (FOSS) projects. These perspectives will cover: (a) different ways that students can contribute to FOSS projects beyond coding, (b) an industry perspective on student involvement in FOSS projects, (c) how Humanitarian FOSS can provide a welcoming environment for student learning, and (d) barriers to faculty involvement and how such barriers can be overcome.	Learning through open source participation	NA:NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Jan Cuny:Chris Stephenson:Cameron Wilson	The CS10K project is a large-scale, collaborative project bringing together stakeholders from wide-ranging constituencies with the goal of systematically changing the scale, curriculum, and pedagogy of teaching computer science at all levels, but focusing in particular on computer science in U.S. high schools as well as introductory computing at the college level. As part of the systemic changes in teaching computer science the CS10K project aims to have 10,000 teachers in 10,000 high schools teaching a new curriculum by 2015.	The CS10K project: mobilizing the community to transform high school computing	NA:NA:NA:NA	2018
Khadija Stewart	NA	Session details: Teaching programming: non-traditional approaches	NA	2018
Peter Hubwieser:Marc Berges	In this paper, we describe a research project that investigates how far freshmen at the University (without any programming background) are able to learn object-oriented programming with as little (human) instruction as possible. We designed specific tasks for programming assignments and supporting worksheets that contained the only information input that the students received during the courses. We examined the program code the students produced in order to assess the quality of their products. The surprising result was that most of the students were able to write quite satisfying programs. Additionally, a cluster analysis of the results showed that there are two different types of students: the ones that accept and apply the object-oriented concepts quite willingly, while the others prefer to program in a more traditional, procedural style.	Minimally invasive programming courses: learning OOP with(out) instruction	NA:NA	2018
Arto Vihavainen:Matti Paksula:Matti Luukkainen	Learning a craft like programming is efficient when novices learn from people who already master the craft. In this paper we define Extreme Apprenticeship, an extension to the cognitive apprenticeship model. Our model is based on a set of values and practices that emphasize learning by doing together with continuous feedback as the most efficient means for learning. We show how the method was applied to a CS I programming course. Application of the method resulted in a significant decrease in the dropout rates in comparison with the previous traditionally conducted course instances.	Extreme apprenticeship method in teaching programming for beginners	NA:NA:NA	2018
Kathryn T. Stolee:Teale Fristoe	Educational programming environments such as Microsoft Research's Kodu Game Lab are often used to introduce novices to computer science concepts and programming. Unlike many other educational languages that rely on scripting and Java-like syntax, the Kodu language is entirely event-driven and programming takes the form of "when" do' clauses. Despite this simplistic programing model, many computer science concepts can be expressed using Kodu. We identify and measure the frequency of these concepts in 346 Kodu programs created by users, and find that most programs exhibit sophistication through the use of complex control flow and boolean logic. Through Kodu's non-traditional language, we show that users express and explore fundamental computer science concepts.	Expressing computer science concepts through Kodu game lab	NA:NA	2018
David Ranum	NA	Session details: Assessing and reviewing	NA	2018
Chris Loftus:Lynda Thomas:Carol Zander	In this paper we revisit previous research to elaborate on the question: "Can graduating students design software systems?" The work concluded that the answer was "not really". We wished to determine if this was true currently at our institution and also to look at whether students were able to design software in groups, and evaluate others' designs. In summary, it appears that our students, just as in the original experiment, struggle with doing design, even in a group situation. The representation of behavioral design was particularly lacking. That said, students were able to recognize weaknesses when evaluating other group designs. Based on our findings, we provide several pedagogic recommendations.	Can graduating students design: revisited	NA:NA:NA	2018
Allison Elliott Tew:Mark Guzdial	A primary goal of many CS education projects is to determine the extent to which a given intervention has had an impact on student learning. However, computing lacks valid assessments for pedagogical or research purposes. Without such valid assessments, it is difficult to accurately measure student learning or establish a relationship between the instructional setting and learning outcomes. We developed the Foundational CS1 (FCS1) Assessment instrument, the first assessment instrument for introductory computer science concepts that is applicable across a variety of current pedagogies and programming languages. We applied methods from educational and psychological test development, adapting them as necessary to fit the disciplinary context. We conducted a large scale empirical study to demonstrate that pseudo-code was an appropriate mechanism for achieving programming language independence. Finally, we established the validity of the assessment using a multi-faceted argument, combining interview data, statistical analysis of results on the assessment, and CS1 exam scores.	The FCS1: a language independent assessment of CS1 knowledge	NA:NA	2018
Christopher D. Hundhausen:Pawan Agarwal:Michael Trevisan	Given the increased importance of communication, teamwork, and critical thinking skills in the computing profession, we have been exploring studio-based instructional methods, in which students develop solutions and iteratively refine them through critical review by their peers and instructor. We have developed an adaptation of studio-based instruction for computing education called the pedagogical code review (PCR), which is modeled after the code inspection process used in the software industry. Unfortunately, PCRs are time-intensive, making them difficult to implement within a typical computing course. To address this issue, we have developed an online environment that allows PCRs to take place asynchronously outside of class. We conducted an empirical study that compared a CS 1 course with online PCRs against a CS 1 course with face-to-face PCRs. Our study had three key results: (a) in the course with face-to-face PCRs, student attitudes with respect to self-efficacy and peer learning were significantly higher; (b) in the course with face-to-face PCRs, students identified more substantive issues in their reviews; and (c) in the course with face-to-face PCRs, students were generally more positive about the value of PCRs. In light of our findings, we recommend specific ways online PCRs can be better designed.	Online vs. face-to-face pedagogical code reviews: an empirical comparison	NA:NA:NA	2018
Delvin Defoe	NA	Session details: Algorithms	NA	2018
Tim Bell:Bengt Aspvall	This paper offers an exercise for revisiting the main sorting algorithms after they have been taught to students. This is done in a way that emphasizes the relationships between them, and shows how considering abstraction and extreme cases can lead to the generation of new algorithms. A number of authors (including textbook authors) have noted particular relationships between algorithms, such as an uneven split in merge sort being equivalent to insertion sort. In this paper we use a flexible priority queue, the d-heap, to derive three common sorting algorithms. We combine this with using a BST as a priority queue, plus prior observations in the literature, to show strong relationships between the main sorting algorithms that appear in textbooks. In the process students are able to revisit a number of algorithms and data structures and explore elegant relationships between them. This approach can also lead to exercises and exam questions that go beyond desk-checking to evaluate students' understanding of these algorithms.	Sorting algorithms as special cases of a priority queue sort	NA:NA	2018
Clifford A. Shaffer:Monika Akbar:Alexander Joel D. Alon:Michael Stewart:Stephen H. Edwards	Algorithm visualizations (AVs) are widely viewed as having the potential for improving computer science education. However, the rate of AV use and overall impact on education does not match the positive interest in their use that instructors report. Surveys of CS faculty show that impediments to successful use of AVs in the classroom include difficulties in finding quality AVs on desired topics, difficulties in adapting AVs to a given classroom setting, and lack of knowledge on the best way to deploy AVs. This indicates a need for better support for instructors, to get them past these barriers. We seek to provide this support through an online educational community that relies on a new model based less on the "digital library" approach of information gained by going to a site and searching. Instead, the focus is on community-added content through members' discussions, reviews, and ratings of content items. The AlgoViz community effort will better focus the future direction of AV development and use.	Getting algorithm visualizations into the classroom	NA:NA:NA:NA:NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	We conducted two experiments evaluating Sketchmate, a tool used to teach the splay tree data structure and its algorithms. Learning and learning rates were compared across two groups, one using Sketchmate and the other using paper-and-pencil on practice problems. Results from Experiment I showed that when students used Sketchmate with minimal feedback, there were no significant differences across learning, time spent learning, or learning rate. Experiment II used a version of Sketchmate that provided richer feedback. Results showed similar learning but Sketchmate took significantly less time. Thus when feedback was added, learning rates were significantly greater relative to the paper-and-pencil condition. Discussion focuses on measuring learning rates when evaluating instructional tools.	Two experiments using learning rate to evaluate an experimenter developed tool for splay trees	NA:NA:NA	2018
Rowena Turner	NA	Session details: Software engineering	NA	2018
Sriram Mohan:Stephen Chenoweth	Requirements engineering, an integral part of the life of a software engineer, often receives little or no attention in the education of a computer science student. We report on our experiences in constructing an innovative curriculum that utilizes a three tier model of learning that provides students with hands-on experience on the various facets of requirements elicitation and management. This curriculum can be integrated into an existing course on software engineering, software requirements or the senior capstone experience. We believe our experience will be of use to other computer science and software engineering programs that are aiming at introducing requirements in the undergraduate curriculum.	Teaching requirements engineering to undergraduate students	NA:NA	2018
Peter J. Clarke:Jairo Pava:Yali Wu:Tariq M. King	One of the main concerns in the software industry continues to be the development of high quality software. This concern will be exacerbated as software systems become more complex. The training of software developers continues to grow in academia since more institutions are offering software engineering (SE) courses. However, the list of topics that are expected to be covered in this course leaves little or no time for topics that focus on developing quality software, such as software testing and the use of testing tools. In this paper we describe an approach that non-intrusively integrates the use of software testing tools in SE courses. The cornerstone of our approach is the interaction students have with a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on testing concepts and testing tools. WReSTT employs both collaborative learning and social networking features that are attractive to students. We present the results of preliminary study performed in two SE courses that show how using the resources in WReSTT can potentially impact the students' understanding of software testing and the use of testing tools.	Collaborative web-based learning of testing tools in SE courses	NA:NA:NA:NA	2018
Tom Nurkkala:Stefan Brandle	Software Studio is a studio-based learning (SBL) curriculum designed to train students as professional software engineers. Traditional software engineering courses remain important, but suffer significant gaps in preparing students for professional engagement. We describe our curriculum model, highlight ways in which it fills these gaps, and offer a SWOT analysis. As practical guidance, we reflect on our missteps and successes in implementing Software Studio over the past five semesters. Finally, we suggest future directions for Software Studio.	Software studio: teaching professional software engineering	NA:NA	2018
Henry Walker	NA	Session details: Panel	NA	2018
Karen Donathan:Barbara Ericson:Paul Tymann:Henry M. Walker	Much has been written about the decrease in the number of students pursuing computing in colleges. Unfortunately, most students form their (usually negative) opinions of computing long before they reach college [1], so it is beneficial for university faculty who want to increase college enrollment to do outreach aimed at a younger audience. Activities to promote computing among K-12 students can proceed at several levels, occur in various locations, and involve both students and faculty. College and high school faculty can collaborate in many ways. As teachers of introductory courses, both groups want to generate interest, cover important material, and provide a strong foundation for later work. For example, the AP CS course description includes material that fits well with both high school and introductory college courses. Also, today in both environments, there is much discussion regarding the best approaches for creating excitement and introducing students to computing. Although both faculties need to address common content and utilize active pedagogies, it also is important to acknowledge that college and high school environments are different, and both levels have special opportunities and constraints. Many college faculty are interested in doing K-12 outreach but often do not know where to start or do not know any successful strategies. The purpose of this panel is to present K-12 outreach strategies that have worked and then to provide the audience with the opportunity to brainstorm with the panelists to explore alternate ideas for outreach and to identify new approaches. Some ideas and strategies come from experiences of high school and college teachers working together as part of the AP CS program, but other approaches extend beyond AP CS.	Successful K-12 outreach strategies	NA:NA:NA:NA	2018
Mehran Sahami	NA	Session details: Panel	NA	2018
Mehran Sahami:Mark Guzdial:Andrew McGettrick:Steve Roach	Following a roughly 10 year cycle, the Computing Curricula volumes have helped to set international curricular guidelines for undergraduate programs in computing. In the summer of 2010, planning for the next volume in the series, Computer Science 2013, began. This panel seeks to update and engage the SIGCSE community on the Computer Science 2013 effort. The development of curricular guidelines in Computer Science is particularly challenging given the rapid evolution and expansion of the field. Moreover, the growing diversity of topics in Computer Science and the integration of computing with other disciplines create additional challenges and opportunities in defining computing curricula. As a result, it is particularly important to engage the broader computer science education community in a dialog to better understand new opportunities, local needs, and novel successful models of computing curriculum. The last complete Computer Science curricular volume was released in 2001 [3] and followed by a review effort that concluded in 2008 [2]. While the review helped to update some of the knowledge units in the 2001 volume, it was not aimed at producing an entirely new curricular volume and deferred some of the more significant questions that arose at the time. The Computer Science 2013 effort seeks to provide a new volume reflecting the current state of the field and highlighting promising future directions through revisiting and redefining the knowledge units in CS, rethinking the essentials necessary for a CS curriculum, and identifying working exemplars of courses and curricula along these lines.	Setting the stage for computing curricula 2013: computer science -- report from the ACM/IEEE-CS joint task force	NA:NA:NA:NA	2018
Robert McCartney	NA	Session details: Special session	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Stephen Cooper:Daniel D. Garcia:Michelle Friend Hutton:Nick Parlante:Brad Richards	We often learn of successful pedagogical experiments, but we seldom hear of the the ones that failed. For this special session we solicited submissions from the SIGCSE membership, selected the best from among these, and will have presentations at the session by the selected authors. Our contributions describe pedagogical approaches that seemed to be good ideas but turned out as failures. Contributors will describe their pedagogical experiment, the rationale for the experiment, evidence of failure, and lessons learned.	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA	2018
Janet Davis	NA	Session details: Recruitment and retention	NA	2018
James P. Cohoon:Luther A. Tychonievich	An effective CS1 approach has been developed for encouraging diverse students without prior computer science experiences to select computing majors. Separation of CS1 sections by prior experience level concentrates diverse students in the inexperienced section. Within that section we use several techniques to increase student comprehension and participation, including an integrated lecture/lab, many small examples and assignments, student participation, etc. We discuss the approach and evaluate its performance over a four-year time period.	Analysis of a CS1 approach for attracting diverse and inexperienced students to computing majors	NA:NA	2018
Elizabeth Sweedyk	Recruitment of students to Computer Science has been a major focus of effort for educators since the dot-com bust in 2001. Two largely disparate themes in these efforts are women and games. There have been numerous efforts to broaden participation in computer science by attracting women to the field. At the same time, games are increasingly used to attract new students. Our interest lies at the intersection of these methods. We began using game design/development projects in our software engineering course, CS121, in 2002. The game focus was extremely successful with many of our students. But a nagging minority of students objected to building games, and women tend to be overrepresented in that group. So while are awed by the power of games to engage and motivate many of our students, we need to ask: Do games in our curriculum reinforce gender stereotypes of Computer Science? Do they foster development of the so-called "Geek mythology?"[7] In short, must we choose: women or games? We argue the answer is no. While traditional game projects may disenfranchise women, our experience shows that serious game projects both attract and engage them. This paper describes our results.	Women build games, seriously	NA	2018
Jennifer S. Kay	America's youth perceive Computer Science to be difficult, tedious, boring, irrelevant and asocial. Unfortunately, many traditional introductory Computer Science classes and textbooks do little to improve that image. In contrast, contextualized approaches to teaching introductory Computer Science are very attractive. Instead of writing a leap year program, students can learn about conditional statements by programming a robot to follow a light, or by creating an animation to tell a story, or even by modifying a picture of the college president so that she is wearing a neon orange jacket instead of a navy blue one. The arguments in favor of contextualized approaches to attract non-Computer-Science-majors to our classes are very persuasive. But what about students who then choose to major or minor in Computer Science? Of course we want to offer them interesting and engaging first courses in Computer Science, and indeed this may help with our efforts to attract more students to our programs. But what happens in subsequent semesters? The purpose of this paper is to initiate a general discussion on the use of any sort of "cool" new approach into both undergraduate and K-12 Computer Science education. These approaches successfully attract students to study subjects that we ourselves are deeply engaged in. But we need to discuss as a community what happens to students who do choose to major or minor in Computer Science when our individual classes conclude and the rest of their studies commence.	Contextualized approaches to introductory computer science: the key to making computer science relevant or simply bait and switch?	NA	2018
Lillian N. Cassel	NA	Session details: Parallel/concurrent programming: tools and languages	NA	2018
Patrick Garrity:Timothy Yates:Richard Brown:Elizabeth Shoop	WebMapReduce (WMR) is a strategically simplified user interface for the Hadoop implementation of the map-reduce model for distributed computing on clusters, designed so that novice programmers in an introductory CS courses can perform authentic data-intensive scalable computations using the programming language they are learning in their course. The open-source WMR software currently supports Java, C++, Python, and Scheme computations, and can readily be extended to support additional programming languages, and configured to adapt to the practices at a particular institution for teaching introductory programming. Potential applications in courses at all undergraduate levels are indicated, and implementation of the WMR software is described.	WebMapReduce: an accessible and adaptable tool for teaching map-reduce computing	NA:NA:NA:NA	2018
Caitlin Sadowski:Thomas Ball:Judith Bishop:Sebastian Burckhardt:Ganesh Gopalakrishnan:Joseph Mayo:Madanlal Musuvathi:Shaz Qadeer:Stephen Toub	Multicore computers are now the norm. Taking advantage of these multiple cores entails parallel and concurrent programming. There is therefore a pressing need for courses that teach effective programming on multicore architectures. We believe that such courses should emphasize high-level abstractions for performance and correctness and be supported by tools. This paper presents a set of freely available course materials for parallel and concurrent programming, along with a testing tool for performance and correctness concerns called Alpaca (A Lovely Parallelism And Concurrency Analyzer). These course materials can be used for a comprehensive parallel and concurrent programming course, a la carte throughout an existing curriculum, or as starting points for graduate special topics courses. We also discuss tradeoffs we made in terms of what to include in course materials.	Practical parallel and concurrent programming	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Ariel Ortiz	Teaching how to write correct programs is hard; teaching how to write correct concurrent programs is even harder. There is a desperate need for a better concurrency programming model than what most people are currently using. The Erlang programming language might be a step in that direction. This paper provides an overview of Erlang and how it has been successfully used to teach concurrency-oriented programming (COP) in a sophomore level course at the Tecnol√≥gico de Monterrey, Campus Estado de M√©xico.	Teaching concurrency-oriented programming with Erlang	NA	2018
Jian Zhang	NA	Session details: Peer teaching and tutoring	NA	2018
Sarah Hug:Heather Thiry:Phyllis Tedford	This paper describes the benefits of Peer-Led Team Learning (PLTL), an NSF-sponsored program in the sciences, to peer leaders serving in the Computing Alliance for Hispanic Serving Institutions (CAHSI). Beyond the benefits to students enrolled in the PLTL courses, survey findings show the majority of peer leaders report increased self-efficacy in teaching computer science, improved content knowledge, and better communication and leadership skills following a semester of leading PLTL. Results from this diverse group of leaders indicate no differences in gains between underrepresented minority and majority students, suggesting the program may provide a path for improving retention of underrepresented groups in the field.	Learning to love computer science: peer leaders gain teaching skill, communicative ability and content knowledge in the CS classroom	NA:NA:NA	2018
Christian Murphy:Rita Powell:Kristen Parton:Adam Cannon	The Peer-Led Team Learning (PLTL) approach has previously been shown to be effective in recruiting and retaining students, particularly under-represented students, in undergraduate introductory CS courses. In PLTL, small groups of students are led by an undergraduate peer and work together to solve problems related to CS. At Columbia University, the Columbia Emerging Scholars Program has used PLTL in an effort to increase enrollment in CS courses beyond the introductory level, and to increase the number of students who select Computer Science as their major, by demonstrating that CS is necessarily a collaborative activity that focuses more on problem solving and algorithmic thinking than on programming. Over the past six semesters, over 80 students have completed the program, and preliminary results indicate that this program has had a positive effect on increasing participation in the major. This paper discusses our experiences of building and expanding the Columbia Emerging Scholars program, and addresses such topics as recruiting, training, scheduling, student behavior, and evaluation. We expect that this paper will provide a valuable set of lessons learned to other educators who seek to launch or grow a PLTL program at their institution as well.	Lessons learned from a PLTL-CS program	NA:NA:NA:NA	2018
Joseph A. Cottam:Suzanne Menzel:Janet Greenblatt	Peer tutoring is a simple, low-cost intervention that can be implemented in CS1/2 courses. It is hypothesized that peer tutoring helps students build a sense of community, succeed in course work, and build confidence to take further courses in the major. This paper examines the latter two hypotheses by examining the predicted and actual behavior of students in CS1/2. Course performance improvements were observed, which also strongly influence retention in computing-related courses. The measures also point to further research directions, such as social influences and the impact of peer tutoring relative to office hours or online forums.	Tutoring for retention	NA:NA:NA	2018
Duane Buck	NA	Session details: Musical, social, and intelligent robots	NA	2018
Andrea Salgian:Christopher Ault:Teresa M. Nakra:Yunfeng Wang:Meredith K. Stone	In this paper, we describe an ongoing multidisciplinary undergraduate seminar that we have developed, in which student teams build non-human systems that conduct our college orchestra. Students and faculty in the course come from four disciplines: computer science, interactive multimedia, music, and mechanical engineering. This paper describes the course structure, computer science components, final projects, team dynamics, and assessments. We evaluate the results to-date and discuss ongoing revisions and expectations for the future.	Multidisciplinary computer science through conducting robots	NA:NA:NA:NA:NA	2018
Michael Ferguson:Nick Webb:Tomek Strzalkowski	A social robot is a robotic platform that supports natural interaction with people in a human-scale environment. Such a platform allows interesting opportunities for both traditional Computer Science students and students from other disciplines, such as psychology, philosophy, design and communications. In this paper, we describe a new social robotic platform for educational uses that is equipped with a social face, arms for gesturing, advanced sensory, mobile base, and ROS integration. By using off-the-shelf and rapidly prototyped components, together with open source software, this platform is low-cost, easy to use, and easy to reproduce.	Nelson: a low-cost social robot for research and education	NA:NA:NA	2018
Nik Swoboda:Juan Bekios-Calfa:Luis Baumela:Javier de Lope	In this paper we describe a collection of course materials designed to be used in an undergraduate introduction to artificial intelligence (AI) course. These materials include three programming assignments, each touching upon core AI topics, which require that the students build the main functionalities of a guide robot. These assignments were carefully designed to allow the same solution to work both with a robot simulator and an inexpensive web-cam as well as with real robots. An overview of the course and the assignments is given along with references to online versions of the resources developed to teach the course.	An introduction to AI course with guide robot programming assignments	NA:NA:NA:NA	2018
Laurie Smith King	NA	Session details: Keynote	NA	2018
Susan Landau	Government's role in computer science is much larger than funding agencies. Digital rights management, net neutrality, and cybersecurity are hot topics in Washington, hot topics where regulation or legislation may have major impact on the computer systems we develop and enjoy. Yet the rules governing DC are very different than the rules that govern science and engineering, and learning how to operate in a world where facts are only ten percent of the equation can be a challenging experience for someone more accustomed to proving theorems and building systems. I'll describe what it takes for a nerd to be effective in the world of government, and give some specific examples in the hot area of cyberwar.	A computer scientist goes to washington: how to be effective in a world where facts are 10% of the equation	NA	2018
Jacob Furst	NA	Session details: Panel	NA	2018
Hans-Peter Bischof:Jacob D. Furst:Daniela S. Raicu:Susan D. Ruban	Undergraduate research is becoming increasingly common in colleges and universities, and, to support this, there is a need to have best practices and forums for promoting exchange of ideas. In particular, a working group at a recent National Science Foundation (NSF) Computer and Information Science and Engineering (CISE) Research Experiences for Undergraduates (REU) sites PI's meeting identified four important issues in undergraduate research: 1) how to design a good research project, 2) how to prepare students for research, 3) how to measure outcomes of undergraduate research and 4) incentives for undergraduates to publish as result of their participation in research. The panelists have all served as PIs or Co-PIs on NSF REU projects in computing and have mentored many undergraduates in a large variety of research projects both in REU settings as well as during the regular academic year. They will each address one of the issues identified above, and share their expertise in addressing the issue, providing solid guidance to anyone interested in promoting undergraduate research. A significant amount of time will be set aside for audience participation and discussion.	Top issues in providing successful undergraduate research experiences	NA:NA:NA:NA	2018
Sue Fitzgerald	NA	Session details: Special session	NA	2018
Sue Fitzgerald:Ren√©e McCauley:Vicki L. Plano Clark	This special session will recap qualitative research design and analysis as discussed during an NSF-sponsored two-part workshop for computer science education researchers held in 2009-2010. Several workshop participants will illustrate the use of qualitative methods by describing their research projects. They will briefly present their methodologies, analyses and findings. Attendees will be encouraged to ask questions about how qualitative methods can be used in their own research projects.	Report on qualitative research methods workshop	NA:NA:NA	2018
Philip East	NA	Session details: Special session	NA	2018
J. Philip East:Charmaine Bentley:Joe Kmoch:Stephen Rainwater:Chris Stephenson	This special session serves two purposes. It provides a progress report on the revision of the NCATE Standards for the Preparation of Secondary Computer Science Teachers and seeks input from computing education professionals on the proposed revisions. The Standards and their role in evaluating teacher preparation programs will be explained, the proposed revision discussed, and process for providing input explained.	NCATE standards for preparation of secondary computer science teachers	NA:NA:NA:NA:NA	2018
Jill Pala	NA	Session details: Computational thinking	NA	2018
Ashok Basawapatna:Kyu Han Koh:Alexander Repenning:David C. Webb:Krista Sekeres Marshall	End-user game design tools are effective in motivating and exposing students with no prior programming experience to computer science. However, while there is good evidence that these environments are effective motivators, the question remains what do students actually learn? For our purposes, using AgentSheets, we would like to know if students can apply the knowledge obtained from programming games to creating science simulations. Specifically, we want to better understand if students are able to recognize Computational Thinking Patterns (CTP) from their game programming experience. Computational Thinking Patterns are abstract programming patterns that enable agent interactions not only in games but also in science simulations. Students and teachers who participated in a game design summer institute were administered a Computational Thinking Pattern Quiz (CTP Quiz). This quiz tested the participants' ability to recognize and understand patterns in a context removed from game programming. We found that participants, for the most part, were able to understand and recognize the patterns in a variety of contexts	Recognizing computational thinking patterns	NA:NA:NA:NA:NA	2018
Dennis Kafura:Deborah Tatar	Experience with the first offering of a computational thinking course for computer science (CT4CS) students is reported. The course is grounded in student interaction with fundamental, recurring concepts suggested by comparison with two sets of computer science principles. By using specialized, freely available tools and physical simulations it is possible to provide concrete, tangible learning experiences that neither require knowledge of nor the overhead of programming. Student end-of-term reflections indicate that the course deepened and broadened their understanding of computer science even when they had previously encountered a topic, and improved their computer science vocabulary.	Initial experience with a computational thinking course for computer science students	NA:NA	2018
Charles Dierbach:Harry Hochheiser:Samuel Collins:Gerald Jerome:Christopher Ariza:Tina Kelleher:William Kleinsasser:Josh Dehlinger:Siddharth Kaza	Computational thinking has been identified as a necessary fundamental skill for all students. University curricula, however, are currently not designed to provide such knowledge to a broad student population. In this paper, we report on our experiences in the development of a model for incorporating computational thinking into the undergraduate, general education curriculum at Towson University. We discuss the model in terms of eliciting faculty interest, institutional support, and positive student response. In the first two years of this NSF-funded three-year project, we have developed, piloted and assessed five computational thinking general education courses - an Everyday Computational Thinking course, and four discipline-specific computational thinking general education courses. Initial assessments show promising and significant student, instructor and administration interest in computational thinking as a basis in courses covering multiple disciplines within the general education curriculum.	A model for piloting pathways for computational thinking in a general education curriculum	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Sara Miner More	NA	Session details: Discrete mathematics	NA	2018
Mehran Sahami	During the past 20 years, probability theory has become a critical element in the development of many areas in computer science. Commensurately, in this paper, we argue for expanding the coverage of probability in the computing curriculum. Specifically, we present details of a new course we have developed on Probability Theory for Computer Scientists. An analysis of course evaluation data shows that students find the contextualized content of this class more relevant and valuable than general presentations of probability theory. We also discuss different models for expanding the role of probability in different curricular programs that may not have the capacity to teach a full course on the subject.	A course on probability theory for computer scientists	NA	2018
Robert L. Scot Drysdale	Many students find that proof by induction is one of the most difficult topics in discrete mathematics. Even students who are able to write inductive proofs in a Discrete Mathematics course often find it difficult to write inductive proofs in Data Structures, Algorithms, Theory of Computation, and other computer science courses. Part of the reason for this is that discrete mathematics courses tend to emphasize weak induction over the natural numbers, but strong induction over recursively defined structures is much more useful in computer science. This paper argues that learning and using proof by induction is easier if the recursive nature of proof by induction is made explicit, especially for students familiar with recursion. It can be useful to view an inductive proof as a template for a recursive program that takes a specific instance as a parameter and generates a complete direct proof for that instance. The abstract idea of assuming and invoking an inductive hypothesis is replaced by the concrete idea of making a recursive call to prove a lemma. Viewing induction as a recursive process allows us to give a rule for determining what base cases need to be proved in strong induction and simplifies creating correct inductive proofs.	Mathematical induction is a recursive technique	NA	2018
James F. Power:Thomas Whelan:Susan Bergin	This survey paper reviews a large sample of publications on the teaching of discrete structures and discrete mathematics in computer science curricula. The approach is systematic, in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analyzed. A number of broad themes in discrete structures education are identified relating to course content, teaching strategies and the means of evaluating the success of a course.	Teaching discrete structures: a systematic review of the literature	NA:NA:NA	2018
Ingrid Russell	NA	Session details: Operating systems and databases	NA	2018
Peter J. Desnoyers	The "Computer Systems" course at Northeastern University is an MS-level core course which attempts to teach students how computers work, through a behavioral approach to the concepts involved in operating systems and their interface to the hardware. As an operating system is typically the first reactive system which students encounter in their studies, the goal of the class is to develop an understanding of the tools and reasoning which are involved in understanding and working with the internals of such a system, whether it be a conventional operating system or (as is more commonly found in industry) a consumer product, networking device, or other embedded system. This course is currently in its third year with enthusiastic responses from students, especially those who have been able to apply its lessons in co-operative work assignments, and an undergraduate class teaching substantially the same material is currently underway.	Teaching operating systems as how computers work	NA	2018
Oren Laadan:Jason Nieh:Nicolas Viennot	Linux has emerged as a widely-used platform for enabling hands-on kernel programming experience to learn about operating system concepts. However, developing pedagogically-effective programming projects in the context of a complex, production operating system can be a challenge. We present a structured series of five Linux kernel programming projects suitable for a one semester introductory operating systems course to address this issue. Each assignment introduces students to a core topic and major component of an operating system while implicitly teaching them about various aspects of a real-world operating system. Projects are of modest coding complexity, but require students to understand and leverage core components of the Linux operating system. The learning benefits for students from this approach include learning from real-world operating system code examples by expert kernel designers and gaining software engineering experience managing production code complexity. We have successfully used these structured Linux kernel projects to teach over a thousand students in the introductory operating systems course at Columbia University.	Structured linux kernel projects for teaching operating systems concepts	NA:NA:NA	2018
Suzanne W. Dietrich:Mahesh Chaudhari	The Language INtegrated Query (LINQ) language is a declarative query language integrated within an object-oriented programming language that provides a unified paradigm for querying relations, objects, and XML (ROX). This paper describes a suite of exercises, from cooperative in-class activities to larger-scale graded assignments, for incorporating LINQ into the database curriculum. These exercises support various student learning outcomes and illustrate the applicability of LINQ by querying the same database enterprise across the ROX data models.	LINQ ROX!: integrating LINQ into the database curriculum	NA:NA	2018
Ariel Ortiz	NA	Session details: CS 1: tools	NA	2018
A. T. Chamillard	Professors are continually exploring ways to increase the engagement of their students, but are sometimes concerned that doing "fun" things in class could adversely affect student learning. Over the course of several semesters, we had the same professor teach several CS1 and CS2 courses for computer science and game development majors. As part of his classroom approach, the professor used a student response system to engage the students in the flow of the lecture. In this paper, we examine the relationships between student participation using the student response system and student performance in the course assessments. We also explore the relationship between each student's perceived mastery of course topics and their demonstrated mastery of those topics on the Final Exam. Finally, we explore several differences between the multiple courses included in the study.	Using a student response system in CS1 and CS2	NA	2018
Wei Jin:Albert Corbett	In this paper, we describe our approach in addressing learning challenges students experience in introductory programming courses. We combine two effective instructional methodologies to help students learn to plan programs prior to writing code: Cognitive Apprenticeship Learning (CAL) and Cognitive Tutors (CT). In the CAL component, the instructor models program planning in class and paper handouts are used to scaffold program planning in homework assignments. In CAL-CT, the program-planning process is also supported by a computer tutor which provides step-by-step feedback and advice. The results show that the combined CAL-CT approach yielded substantial gains over traditional instruction. Its advantage over the CAL-Only approach is also significant.	Effectiveness of cognitive apprenticeship learning (CAL) and cognitive tutors (CT) for problem solving using fundamental programming concepts	NA:NA	2018
Jungsoon P. Yoo:Sung K. Yoo:Suk Seo:Chrisila Pettey	The ability to design an algorithm is one of the most important learning outcomes of a computer science program. Unfortunately, not only is learning how to design algorithms a challenging task, but many students believe that algorithm design is not an important part of problem solving. To address this challenge and hopefully change student attitudes, we developed AlgoTutor, a web-based algorithm development tutoring system. AlgoTutor's primary components are the algorithm composer and the algorithm tracer. A third component, ProgramPad, was added to show the connection between algorithms and code. This paper presents the results of experiments that assessed AlgoTutor's effectiveness in changing student attitudes about algorithm development. The results show that students who used AlgoTutor in CS-I were more likely to realize the importance of algorithm design in problem solving and to have confidence in their own algorithm development abilities.	Can algotutor change attitudes toward algorithms	NA:NA:NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Zachary Dodds:Timothy Huang:Samuel A. Rebelsky	Be an opener of doors for such as come after thee..." - Ralph Waldo Emerson, 1844. At the SIGCSE Symposium in 2007, we presented a panel in which seasoned teaching faculty from four large, PhD-granting universities shared the teaching tips we wished we'd known before starting our careers [1]. The difference from earlier "Teaching Tips" panels [6] was that our suggestions were meant to be hidden gems less often highlighted by our colleagues or by some of the best-known teaching resources [2, 3, 4, 8, 10, 11]. We clustered our tips into several categories: Lecturing, Office (hours), Staff (mentoring), Exams (authoring & administering), Labs (authoring & running), Section (TA-led discussion), Projects (and homework; authoring & supporting), and Meta (advice spanning categories). The session was received quite well, and the audience contributed many of their own teaching tips throughout the presentation. Since all of the presenters in 2007 regularly taught large, hundred-student classes, many of their suggestions (e.g., lecturing in a large venue or managing an army of teaching assistants) were not relevant to the experience of teaching small classes. Quite a few attendees suggested there be a follow-up session with presenters who could address the challenges specific to small college or university classes. To that end, we present the "Small College Class" edition, with seasoned educators who have expertise teaching smaller classes at their university or college. The position statements that follow offer a random sampling of two of these "hidden" pearls; presenters will share many more during the session, and time will be provided for audience participation. We'll endeavor to capture all the tips for an online collection. Complementing the categories above, we have added two more that capture the intimate setting of small classes: - Classroom (organization, interactions, and incentives) - Personal (fostering relationships).	Teaching tips we wish they'd told us before we started, small college class edition	NA:NA:NA:NA	2018
Scott Grissom	NA	Session details: Special session	NA	2018
Scott Grissom:Sue Fitzgerald:Victor Piotrowski:Jan Cuny:Joan Peckham:Harriet Taylor:Daniel Menelly:Mimi McClure	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty, and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA:NA:NA:NA	2018
Ali Erkan	NA	Session details: Special session	NA	2018
Henry M. Walker:Ali Erkan:Mark Guzdial:Steve Cooper	In this special session, we will discuss the role and value of quantitative instruments in gauging student perspectives in computer science education. After creating the appropriate context, we will discuss the road educators have traveled in creating such instruments as well as review one based on a variation of a survey developed by the University of Maryland Physics Education Research Group. Finally, we will present the importance of gathering this information from the perspective of grant agencies. During our conversation, we will invite our audience members to fill out the survey form for a particular instrument. If we are collectively on the same page, then our responses may be used to establish a baseline to which students progress can be compared.	Role and value of quantitative instruments in gauging student perspectives in a computing curriculum	NA:NA:NA:NA	2018
Todd Neller	NA	Session details: Computing in the arts and sciences	NA	2018
Erik Brunvand:Paul Stout	We describe a cross-disciplinary collaborative course that pairs computer science and engineering (CSE) students with art students to engage in joint engineering design and creative studio projects. These projects combine embedded system design with sculpture to create kinetic art. We believe that this is a natural pairing of two disparate disciplines, and one that provides distinct educational benefits to both groups of students. In this paper we describe the course content, the collaborative process, the materials used in the class, and experience with a pilot version of the course taught in Fall 2009 the University of Utah.	Kinetic art and embedded systems: a natural collaboration	NA:NA	2018
Ursula Wolz:Lillian (Boots) Cassel:Thomas Way:Kim Pearson	As the need for multidisciplinary computing education continues to increase, consideration for distributed expertise will become critical to implementing a successful curriculum. A model of cooperative expertise is presented in which faculty maintain responsibility for their own course, creating and evaluating assignments for their students that support learning in their colleagues' courses as well. We present outcomes of an experiment to implement this model at two geographically separated institutions through three courses (two at one institution, one at the other), by faculty in computer science, media and English. Results reported include faculty analysis of student achievement in each course and student surveys of attitudes toward multidisciplinary collaboration. Overall, it appears that student learning and attitudes are enhanced by the experience.	Cooperative expertise for multidisciplinary computing	NA:NA:NA:NA	2018
Kay A. Robbins:David M. Senseman:Priscilla Elizabeth Pate	The accelerating use of computation in all aspects of science continues to widen the gap between student skills and expectations. Currently, computation is taught using one of two approaches: teach students a standard programming language (e.g., FORTRAN, JAVA or C) perhaps augmented by support tools such as Alice or teach them to use a program such as MATLAB by formulating and solving math problems. Both approaches have high failure rates for students hindered by poor mathematics training and weak logic skills. This paper describes an alternative approach that introduces students to computing in the context of data analysis and visualization using MATLAB. Our goal is produce computationally qualified young scientists by teaching a highly relevant computational curriculum early in their college career. The course, which integrates writing, problem-solving, statistics, visual analysis, simulation, and modeling, is designed to produce students with usable data analysis skills. The course is in its third year of implementation and is required of all biology majors at the University of Texas at San Antonio.	Teaching biologists to compute using data visualization	NA:NA:NA	2018
Robert Noonan	NA	Session details: Data structures / CS 2	NA	2018
Andrew T. Duchowski:Robert Geist:Robert Schalkoff:James Westall	The TEXNH method is an approach to undergraduate computer science education that is based on cognitive constructivisim, in the sense of Piaget, and which invokes several course design directives that include re-combining art and science, problem-based learning, problem selection from the visual problem domain, and cognitive apprenticeship. The paper describes a new TEXNH course in data structures. It includes a full comparative assessment of the realized improvement in student problem solving capability and, for the first time, cognitive authenticity in problem selection, in that the course problem is a variation on a very recent research result.	TEXNH trees: a new course in data structures	NA:NA:NA:NA	2018
Scott Turner:Manuel A. P√©rez-Qui√±ones:Stephen Edwards:Joseph Chase	Computer science students need experience with essential concepts and professional activities. Peer review is one way to meet these goals. In this work, we examine the students' attitudes towards and engagement in the peer review process, in early, object-oriented, computer science courses. To do this, we used peer review exercises in two CS2 classes at neighboring universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding exercises), we measured the students' attitudes, their perceptions of their abilities, and how many of the reviews they completed. We found moderately positive attitudes that generally increased over time but were not significantly different between groups. We also saw a lower completion rate for students reviewing peers than for the other groups. The students' internal motivation, as measured by their need for cognition, was not shown to be strongly related to their attitudes nor to the number of assignments completed. Overall, our results show a strong need for external motivation to help engage students in peer reviews.	Student attitudes and motivation for peer review in CS2	NA:NA:NA:NA	2018
Briana B. Morrison:Mike Clancy:Robert McCartney:Brad Richards:Kate Sanders	It is important for students to be able to select and apply the appropriate data structure for the problem to be solved. Testing this knowledge on exams can be difficult, however. We examined 59 data structures final exams and found only 36 that contained questions involving the application of data structures. To promote assessment of this knowledge in the data structures course, we present a framework for classifying apply exam questions, with illustrations from the exams collected. We then show how a number of questions can be developed by varying a single rich apply question along the dimensions of this framework	Applying data structures in exams	NA:NA:NA:NA:NA	2018
Richard A. Brown	NA	Session details: Computer architecture teaching tools	NA	2018
Barry Fagin:Dale Skrien	In this paper, we describe a programmable emulator for the Princeton IAS/Von Neumann machine. The emulator is historically accurate, preserving the quirks and eccentricities of the machine. It is also user-friendly and robust, suitable for undergraduate architecture and programming classes as a teaching tool. Users can write non-trivial programs in IAS assembly code or machine code. We present some examples here, and discuss assignments from its first use in two undergraduate classes. IASSim is a Java application publicly available at no cost.	IASSim: a programmable emulator for the princeton IAS/Von Neumann machine	NA:NA	2018
Michael David Black:Priyadarshini Komala	This paper describes a new graphical computer simulator developed for computer organization students. Unlike other teaching simulators, our simulator faithfully models a complete personal computer, including an i386 processor, physical memory, I/O ports, floppy and hard disks, interrupts, timers, and a serial port. It is capable of running PC software such as FreeDOS, Windows, and Minix, and can run as a Java applet. Graphical user interfaces allow students to view and modify the processor, memory, disks, and hardware devices at runtime. The simulator includes a processor development utility that allows students to design their own datapath and control units, and run their custom processor alongside the x86 processor. The paper describes labs where students use the simulator to write x86 assembly programs, device drivers, hardware controllers; and design both simple and pipelined processors.	A full system x86 simulator for teaching computer organization	NA:NA	2018
Aaron Bloomfield:William Wulf	We present the development and implementation of the Itty Bitty Computing Machine (IBCM), a machine language designed specifically to be taught to lower-level undergraduate students. The presentation of the material takes about one-week of lecture, and allows understanding of all the concepts of machine language without having to deal with the complexity of modern machine language implementations, such as x86 and MIPS. A number of pedagogical aspects are addressed concisely via IBCM, such as treating all data as untyped and performing arithmetic on instructions. While we are not the first to introduce a short machine language module, we do provide a number of benefits over older versions: a modern browser-based implementation, a full set of pedagogical tools, and a decade of experience teaching this module. All of the necessary materials, including compilers, simulators, and documentation, are available online and licensed through Creative Commons licenses.	IBCM: the itty bitty computing machine a one-week module to teach machine language in computing courses	NA:NA	2018
Bin Peng	NA	Session details: Summer experiences	NA	2018
Heidi C. Webb:Mary Beth Rosson	We discuss a study conducted during a summer program for middle school girls that emphasized possible future careers that rely on computer technology. During the weeklong camp middle school girls created an original computer project, visited campus computer labs and listened to invited speakers - all with computer technology as the central theme. This paper discusses the program, girls' reactions to their experiences, and the projects they created during the summer camp.	Exploring careers while learning Alice 3D: a summer camp for middle school girls	NA:NA	2018
Deborah L. Dunn:Robert G. Strader:Michael M. Pickard	As we are well aware, there has been a significant nationwide decline in enrollment for computer science programs, as well as other STEM fields. One of the primary reasons the lack of participation and diversity in the STEM fields is becoming increasingly important is the potentially adverse effect it may have on the U.S. work force. Many successful programs have been put in place to combat this decline. But how do the small regional universities with limited resources and a limited "audience" (with limited resources) contribute to the field? In this paper we will discuss the mechanisms that may be implemented for smaller schools to address the decline in CS enrollment. This includes the ability to put in place programs which could allow more educators to become a part of the solution.	Camps on a shoestring: how we survived a summer	NA:NA:NA	2018
Jiangjiang Liu:Cheng-Hsien Lin:Ethan Philip Hasson:Zebulun David Barnett	In this paper, we describe a one-week summer computing workshop for teachers to improve computer science education in K-12. Our workshop focuses on using Scratch and Alice, two programs used to make simple games and animations, to introduce computing concepts to teachers in computer, technology, math, and science at all K-12 levels to expose students to computing at an early age and to reach more students. During the workshop the teachers developed curriculum materials for the subjects they will teach in the following semesters with the help of our workshop tutors. We present our workshop strategies, lessons learned, and assessment results in this paper.	Introducing computer science to K-12 through a summer computing workshop for teachers	NA:NA:NA:NA	2018
Suzanne Buchele	NA	Session details: Panel	NA	2018
Joel Adams:Brent Baas:Suzanne F. Buchele	The Fulbright Scholar Program is the flagship academic exchange program of the U.S. Department of State that provides the opportunity for U.S. Scholars to teach and/or conduct research at institutions abroad. Every year, approximately 1100 American scholars travel to approximately 125 countries to lecture, conduct research, and participate in a wide variety of academic and professional activities for one or more academic terms, up to one year. The Fulbright Scholar program is open to US Citizens with a Ph.D. or equivalent professional or terminal degree and university teaching experience [1]. In this panel, three computer science professors who have completed a total of five Fulbright grants in the last 12 years offer their experiences, anecdotes, and insights of the Fulbright Scholar program. The goal of the panel is to promote and inform the CS Education community about benefits of the Fulbright Scholar program, address questions or misconceptions regarding the program, and present realistic expectations for both the application process and the program itself. Each of the three panelists will present a 15 minute overview of their Fulbright experiences, leaving ample time for an interactive question and answer period.	CS Fulbright experiences abroad	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Tiffany Barnes:Daniel D. Garcia:Jody Paul:Beth Simon:Larry Snyder	Since 2008, NSF and The College Board, have been developing a "Computer Science: Principles" curriculum to "introduce students to the central ideas of computing and CS, to instill ideas and practices of computational thinking, and to have students engage in activities that show how computing and CS change the world". We report on the initial pilot of the CS Principles curriculum at 5 universities in 2010/11. The instructors from the pilot schools will describe their classes, the piloting experience (teaching under a microscope), and successes and failures. Emphasis will be on: mapping the CS Principles curriculum to a college's specific needs, and how others can use or modify the existing materials for pilots at their schools.	CS principles: piloting a new course at national scale	NA:NA:NA:NA:NA:NA	2018
Amy Csizmar Dalal	NA	Session details: Networks	NA	2018
Dennis Brylow:Kyle Thurow	We present extensions to the Embedded Xinu educational operating system that, when coupled with a target device like the Cisco-Linksys WRT54GL, provide for an extremely attractive hands-on laboratory platform in network courses. We present classroom and research lab evidence for the usefulness of this platform as a network education tool, and discuss its significance in the context of a wide spectrum of competitor systems. This project is part of a larger effort to bring cost-effective, hands-on embedded system laboratory experiences into systems courses throughout the undergraduate computer science core.	Hands-on networking labs with embedded routers	NA:NA	2018
Sami Rollins	The field of wireless sensor networks is growing rapidly and there is increasing interest in providing students with a foundation in the area. Curriculum in the field, however, is fairly limited and most courses reach only advanced graduate students. Undergraduate students typically lack the background, for example in distributed systems and networking, to digest the topics and assignments of a standard wireless sensor networks course. In this work, we present our approach to teaching wireless sensor networks to undergraduates and introductory graduate students. We discuss a unique, integrated approach to introducing relevant distributed systems and networking concepts in the context of wireless sensor networking applications. The course provides students who have never previously implemented a networked application with the necessary background to implement sensing applications on the Java SunSPOT sensor. It also provides a structured introduction to prerequisite concepts, such as distributed coordination algorithms, so that students can read and understand research papers. Our experience suggests that there is ample opportunity to expand curricula in sensor networking and reach a broader population of students.	Introducing networking and distributed systems concepts in an undergraduate-accessible wireless sensor networks course	NA	2018
Jae Woo Lee:Michael S. Kester:Henning Schulzrinne	We present a one-semester transition course intended to bridge the gap between a Java-based introductory sequence and advanced systems courses. We chose to structure our course as a series of lab assignments that, while independent, are also milestones in a single main project, writing a web server from scratch. By anchoring the course on a single real-world application, we were able to provide depth, instill good programming practices, give insight into systems, and generate excitement.	Follow the river and you will find the C	NA:NA:NA	2018
Louis Oliphant	NA	Session details: Relevant computing	NA	2018
Jane Turk	This paper presents an innovative computer literacy course that focuses solely on developing skills needed for life in a networked world in which one must protect oneself from identity theft, be careful posting on social networks, and use credit and debit cards wisely. The course emphasizes ethical responsibility and information literacy. Its target audience, first-year, non-computer science majors, learn what they need to know to use technology safely, effectively, efficiently, and ethically. The course is grounded in active learning, such as posting in a class wiki, and critical thinking. It is a radical alternative to a traditional software packages approach.	Computer literacy as life skills for a web 2.0 world	NA	2018
Cyndi Rader:Doug Hakkarinen:Barbara M. Moskal:Keith Hellman	Prior research indicates that today's students, especially women, are attracted to careers in which they recognize the direct benefit of the field for serving societal needs. Traditional college level computer science courses rarely illustrate the potential benefits of computer science to the broader community. This paper describes a curricula development effort designed to embed humanitarian projects into undergraduate computer science courses. The impact of this program was measured through student self-report instruments. Through this investigation, it was found that students generally preferred projects that they perceived as "fun" over the projects that were social in nature. This may, in part, be due to the fact that it was difficult to reduce socially relevant problems to a level that beginning students could easily comprehend. This made it difficult to capitalize on the appeal of socially relevant problems in the early computer science courses.	Exploring the appeal of socially relevant computing: are students interested in socially relevant problems?	NA:NA:NA:NA	2018
Ryan L. McFall:Matthew DeJongh	The breadth-first approach to teaching introductory computer science is one way of dispelling the common misperception that programming is the sole task of the computer scientist. The breadth-first approach is particularly useful in courses for non-majors. Hands-on activities that make up laboratory assignments for these courses tend to focus on learning to program or simulations of program execution. These activities unfortunately fail to build on the foundations laid by a breadth-first approach, and serve to perpetuate the computer science = programming misperception. We have developed a set of laboratory activities which are based on what we call authentic computing tasks: everyday tasks that students want to know how to accomplish. Example tasks include image editing, operating system installation and configuration, and building home computer networks. Explicit connections are made between these authentic computing tasks and the computer science concepts being covered in the lecture portion of the course. The course has experienced dramatic increases in enrollment, and we have evidence that students see the connections, rather than coming to believe that performing computing tasks well is the essence of computer science.	Increasing engagement and enrollment in breadth-first introductory courses using authentic computing tasks	NA:NA	2018
Mark Goadrich	NA	Session details: Parallelism across the CS curriculum	NA	2018
Thomas R. Gross	There is a debate on when and how to teach parallel programming in the undergraduate curriculum. We try to structure the debate along a number of dimensions and then present the solution that we adopted for an engineering-oriented curriculum. We added an introduction to parallel programming to the list of mandatory classes in the 2nd semester. The class exposes students to three styles of parallel programming: threads with shared memory, CSP-style message passing, and OpenMP-based parallel programming. Within these models, the class aims to focus the student's attention on communication as the key issue in parallel programs. Explicit communication (or their absence) causes correctness problems, implicit communication (e.g., when accessing shared data in different threads) forces the student to understand when updates are globally visible. An introductory class early in the undergraduate curriculum has a number of benefits and disadvantages, which are discussed in this paper. A preliminary evaluation after two editions of this course indicates that the design goals are met but also points to several issues that other institutions may want to consider.	Breadth in depth: a 1st year introduction to parallel programming	NA	2018
Sirong Lin:Deborah Tatar	Parallel thinking is a mindset that allows people to create support for activities that happen concurrently in a program. It crosscuts extant computer science boundaries, including parallel processing, network programming and multi-user systems, indeed, any system that involves the distribution and reintegration of work. Recent efforts to integrate parallelism across the CS curriculum begin to address the support of parallel thinking. We approach the pedagogy of parallel thinking by teaching students to model coordination explicitly using a specialized coordination language. We report a study of an experimental class taking this approach, finding that advanced CS students lack a good understanding of coordination but that the explicit modeling of coordination can address this lack.	Encouraging parallel thinking through explicit coordination modeling	NA:NA	2018
Richard Brown:Elizabeth Shoop	Given the recent emergence of multi-core and distributed computing that is transforming mainstream application areas in industry, demand is rising for teaching more parallelism and concurrency in CS curricula. We argue for teaching these topics incrementally in CS courses at all undergraduate levels, and propose a comprehensive approach involving flexible teaching modules with experiential programming exercises, technical and instructor supplementary materials, and an online community of educators to support adopters and module contributors. Progress on developing these materials and online resources is reported.	Modules in community: injecting more parallelism into computer science curricula	NA:NA	2018
Ping Chen	NA	Session details: K-12 instruction	NA	2018
Diana Franklin:Phillip Conrad:Gerardo Aldana:Sarah Hough	A popular approach to introducing students to computer science is to involve middle-school students in engaging programming activities. One challenge in such a program is attracting students who are not already positively predisposed to computing. In order to attract a diverse audience, we developed a summer program based on culturally-relevant themes that appealed to our two target audiences, females and Latina/os. This paper describes our success in developing and implementing a computing curriculum and recruiting materials for a 2-week summer camp integrating two themes, animal conservation and Mayan culture. Scratch programming was used to engage students in creating animations about animals and Mayan culture, allowing them an interdisciplinary experience that combined programming, culture, biology, art, and storytelling. Our recruiting efforts resulted in an application pool that was 73% female and 67% Latina/o, with only 6.5% in neither group. We had 34 students complete the program. Pre- and post- surveys showed that the number of students citing computer science as their top choice for a career doubled and interest in computer science as a career more than tripled.	Animal tlatoque: attracting middle school students to computing through culturally-relevant themes	NA:NA:NA:NA	2018
Ville Isom√∂tt√∂nen:Antti-Jussi Lakanen:Vesa Lappalainen	Several programming environments have been constructed to facilitate novice programming at K-12 and CS0/CS1 levels. The environments can be roughly divided into those using visual or textual programming. This paper presents a K-12 game programming course concept based on textual programming. The concept is based on an easy-to-use C# library, called Jypeli, built on top of Microsoft XNA Framework. The library tries to maintain advantages of visual programming and avoid challenges of textual programming. In particular, the library helps beginners to program their first games in a short period of time and without a heavy syntactic load. The course concept and an initial evaluation consisting of student feedback and a literature rationale are presented.	K-12 game programming course concept using textual programming	NA:NA:NA	2018
Aman Yadav:Ninger Zhou:Chris Mayfield:Susanne Hambrusch:John T. Korb	As computational thinking becomes a fundamental skill for the 21st century, K-12 teachers should be exposed to computing principles. This paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors. We summarize the results from open-ended and multiple-choice questionnaires given both before and after the module to assess the students' attitudes toward and understanding of computational thinking. The results suggest that given relevant information about computational thinking, education students' attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching.	Introducing computational thinking in education courses	NA:NA:NA:NA:NA	2018
Rajeev Agrawal	NA	Session details: Web-based tools	NA	2018
Paul Denny:Andrew Luxton-Reilly:Ewan Tempero:Jacob Hendrickx	Drill and practice exercises enable students to master skills needed for more sophisticated programming. A barrier to providing such activities is the effort required to set up the programming environment. Testing is an important component to writing good software, but it is difficult to motivate students to write tests. In this paper we describe and evaluate CodeWrite, a web-based tool that provides drill and practice support for Java programming, and for which testing plays a central role in its use. We describe how we have used CodeWrite in a CS1 course, and demonstrate its effectiveness in providing good coverage of the language features presented in the course.	CodeWrite: supporting student-driven practice of java	NA:NA:NA:NA	2018
Jesus Bobadilla:Antonio Hernando:Angel Arroyo	This paper presents the results obtained using a real e-learning recommender system where the collaborative filtering core has been adapted with the aim of weighting the importance of the recommendations in accordance with the users' knowledge. In this way, ratings from users with better knowledge of the given subject will have greater importance over ratings from users with less knowledge. In the same way, we validate the results obtained and we adjust, with just one parameter, the weight that should be awarded, in each specific e-learning recommender system, to the ratings of the users with the best reputation. The results obtained show a notable improvement regarding traditional collaborative filtering methods and suggest balanced weightings between the importance assigned to users with more or less knowledge.	e-learning experience using recommender systems	NA:NA:NA	2018
Daniel Malcolm Hoffman:Ming Lu:Tim Pelton	In Computer Science courses, we ask students to write a lot of code. All too often, the resulting code quality is poor. While it is widely believed that students would write better code if they spent more time reading code, it is difficult to get students to read code effectively. We present a web-based application supporting generation and delivery of quizzes designed to evaluate and improve code reading skills.	A web-based generation and delivery system for active code reading	NA:NA:NA	2018
Ursula Wolz	NA	Session details: Panel	NA	2018
Ursula Wolz:Youwen Ouyang:Scott Leutenegger	As the computing education community grapples with integrating computing into K-12 curriculum, the focus remains primarily on identifying appropriate grade level content and skills[3]. Two problems articulated by Margolis et al.[5], are (1) how to bring computing into an already over-burdened curriculum, (2) how to provide substantive professional development for teachers. We need to look beyond teaching computing concepts as isolated from other disciplines. The power of computing lies in its broad applicability to facilitate creativity in other domains. The panelists will report on using Scratch (http://scratch.mit.edu) in language arts, science and social studies curricula. Our programs demonstrate to middle and high school students and teachers how computational thinking, computing concepts and programming are essential to their course of study. We emphasize active learning where computing is a tool for creativity. We demonstrate how learning 21st century computing skills in the classroom can be fun. This panel will present three perspectives on using Scratch for humane games, scientific modeling and interactive storytelling. There will be significant time for the audience to participate in discussion of broad applicability of our approaches and whether this pedagogy can work at the undergraduate level.	Scratching the subject surface: infusing computing into K-12 curriculum	NA:NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Keith Schwarz:Dave Feinberg:Michelle Craig:Stuart Hansen:Michael Scott:David J. Malan	I worry over topics for the syllabus, fretting over demos and presentations. And yet, I always come back to the fact that most of what my students learn and remember from my course comes from the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and concrete materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Mark Johnson	NA	Session details: Teaching and studying novice programmers	NA	2018
Tammy VanDeGrift:Tamara Caruso:Natalie Hill:Beth Simon	Expertise is developed through both a) self-reflection and b) making useful plans for improvement [3, 10]. Traditional novice-level programming assignments require neither of these skills to be used. Could we get students to think about improving their software development processes? What areas would they identify as needing improvement? Could they write effective plans for themselves? In this experience report, we analyze the results of an intervention with 236 CS1.5 students asking them to do these activities. We find that they most commonly make improvements in planning, compared to coding and testing. Additionally, over half of the plans they make are so vague as to be of little use in helping students identify if they have, in fact, improved. Finally, we asked students at the end of the term to reflect on how their experiences with programming assignments changed over the term. We discuss our results in light of how instructors can focus instruction to help students become more meta-cognitive about their own software development processes.	Experience report: getting novice programmers to THINK about improving their software development process	NA:NA:NA:NA	2018
Guillaume Marceau:Kathi Fisler:Shriram Krishnamurthi	Good error messages are critical for novice programmers. Re-cognizing this, the DrRacket programming environment provides a series of pedagogically-inspired language subsets with error messages customized to each subset. We apply human-factors research methods to explore the effectiveness of these messages. Unlike existing work in this area, we study messages at a fine-grained level by analyzing the edits students make in response to various classes of errors. We present a rubric (which is not language specific) to evaluate student responses, apply it to a course-worth of student lab work, and describe what we have learned about using the rubric effectively. We also discuss some concrete observations on the effectiveness of these messages.	Measuring the effectiveness of error messages designed for novice programmers	NA:NA:NA	2018
Gregory Dyke	We present the preliminary analysis of a study whose long term aim is to track IDE usage to identify novice-programmers in need of support. Our analysis focused on the activity of 24 dyads on a 3 week assignment. We correlated frequencies of events such as use of code generation and of the debugger with assignment grades, final exam grades, and the difference in rankings within dyad on the final exam. Our results show several significant correlations. In particular, code generation and debugging are correlated with the final grade, and running in non-debug mode is correlated with differences in ranking. These results are encouraging as they show that it is possible to predict learning outcomes with simple frequency data and suggest more complex indicators could achieve robust prediction.	Which aspects of novice programmers' usage of an IDE predict learning outcomes	NA	2018
Dermot Shinners-Kennedy:David J. Barnes	We present some ideas for course material for the introductory teaching of programming that are based on the principle of allowing the students to be the domain experts. The idea is that the students' familiarity with the domain of discourse will make course material more motivating, and that it will be more likely that they will be able to model the concepts and artifacts being discussed. This approach thereby seeks to scaffold the students' understanding of programming-related concepts. For reasons discussed in the paper, we have chosen mobile phone technology for this discussion, but there is no reason why the same principles should not be applied to other culturally-accessible domains.	The novice programmer's "device to think with"	NA:NA	2018
Daniel Stevenson	NA	Session details: Communication skills	NA	2018
Lori Carter	Soft skills such as communication, teamwork, and organization are important to students' future success in the working world. Faculty members know it, students know it, and employers are explicitly asking for these skills. Are computer science departments responsible to teach these skills? If so, where in the curriculum should they be covered? This paper explores the soft skills that employers want, and possible places to include the teaching of those skills in the curriculum. It then shows how an extensive set of soft skills were incorporated into a service learning course for the students in the Mathematical, Information and Computer Sciences department at Point Loma Nazarene University. Finally, it makes suggestions as to how other service learning or capstone courses could be altered to afford more opportunity for soft skill education.	Ideas for adding soft skills education to service learning and capstone courses for computer science students	NA	2018
Mary Elizabeth "M.E." Jones:Melanie Kisthardt:Marie A. Cooper	Seizing and retaining student interest in programming is a difficult task. Many students find programming to be a dry and tedious task doable only by students gifted with strong analytical skills. Teaching introductory programming via creative writing begins by connecting the planning, organizing, and detailing of writing a story to the programming process. Creative concepts are taught first and then connected to an equivalent programming concept. Group-oriented activities using art, "Mad-Libs"", "Potato Heads"", and "Legos"" allow students to actively make the connections among the creative concepts, analytical concepts, and programming skills. Students work in pairs. Student pairings are assigned by matching a student with analytical tendencies with a student majoring in one of the humanities disciplines. The pairs apply the concepts and skills by creating stories, designing an animation, and implementing the animation using the Alice programming system. This research recognizes the creative nature of programming, invites students who would not consider studying programming to potentially identify an unrecognized talent, and attempts to develop a new approach for teaching introductory programming. This research and teaching is sponsored by a NSF Grant [11].	Interdisciplinary teaching: introductory programming via creative writing	NA:NA:NA	2018
Sarah Monisha Pulimood:Donna Shaw:Emilie Lounsberry	This paper describes a collaboration between computer science and journalism students and professors at our small, primarily undergraduate college, and a large metropolitan newspaper. Our students' work was a catalyst for a hard-hitting series of investigative stories, with far-reaching consequences. The Gumshoe project is a model for computational journalism at an undergraduate institution. The project demonstrates that when computer scientists and journalists reach out across disciplinary boundaries, computational thinking and collaboration can solve a real problem, and have a substantive impact on society.	Gumshoe: a model for undergraduate computational journalism education	NA:NA:NA	2018
Joe Mir√≥ Juli√†	Being able to write correctly is a valuable asset for future CS professionals and an important learning tool, but teaching to write is difficult both for professors and students. Part of this difficulty is that writing is taught using unverifiable concepts such as style, and is significantly based on intuition. In this paper we present an engineering approach to writing, in which engineering principles are used to teach and assess writing. The results are as good, and much better in some cases, and teaching and learning become easier.	An engineering approach to teaching writing.	NA	2018
Sherri Goings	NA	Session details: Teacher endorsement and preparation	NA	2018
Tim Bell:Lynn Lambert	This paper describes the design, implementation, and evaluation of a course teaching Computer Science majors about teaching Computer Science. The course was designed to address the need for teachers and resources to support rapid changes in topics being taught in high schools. It also helped prepare students for research in Computer Science Education, and for careers involving computing and education. The course is described in detail, and is evaluated based on student feedback and the outcomes from the course.	Teaching computer science majors about teaching computer science	NA:NA	2018
Christopher Whitehead:Lydia Ray:Shamim Khan:Wayne Summers:Rodrigo Obando	Computer Science and technology have been driving scientific innovations, expanding the Information Technology sector and increasing productivity in all economic sectors for the last few decades, thus contributing significantly to the economic output of the U.S. Each sector of this country, ranging from national security to everyday life, is enormously impacted by computing technology. Clearly, future economic growth and prosperity of this country heavily rely on the strength and skills of the IT and computing workforce that will be able to expand and maintain the nationwide IT infrastructure. Unfortunately, the decline in students interested in Computer Science over the last several decades may threaten the United States' capability to expand and maintain the nationwide IT infrastructure. One solution that may slow and possibly even reverse this decline is to increase the awareness of Computer Science in the secondary school system and to increase the knowledge of Computer Science, the ability to teach Computer Science, and the Computer Science professionalism of teachers in that system. In this paper, the authors describe one technique for realizing this solution-implementing a Computer Science endorsement program for secondary school teachers.	Implementing a computer science endorsement program for secondary school teachers	NA:NA:NA:NA:NA	2018
Lijun Ni:Mark Guzdial:Allison Elliott Tew:Briana Morrison:Ria Galanos	In this paper, we describe our experience in supporting high school CS teachers by building a local community through the Disciplinary Commons for Computing Educators (DCCE) project. The DCCE project is an effort to explore ways of supporting these CS teachers through the creation of a local community and by promoting teacher reflection. DCCE achieved this goal through an academic-year-long program where a cohort of CS teachers engaged in collaborative portfolio creation and peer observation of classroom teaching. We describe the design of the DCCE activities and present preliminary results from initial evaluations. Our short-term evaluations indicate that this project was successful in creating a supportive community, promoting teacher reflection, and advancing change in teaching practices among a group of computing educators.	Building a community to support HS CS teachers: the disciplinary commons for computing educators	NA:NA:NA:NA:NA	2018
Noa Ragonis:Orit Hazzan:Judith Gal-Ezer	This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are two of the main educational and pedagogical challenges faced by those involved in CS education. Specifically, the paper presents the second stage of a study, the first stage of which focused on the accumulative knowledge gained in Israel over the past twenty years on CS teacher preparation. The first stage of the study, presented in SIGCSE 2010, emphasized the obvious: CS deserves designated CS teacher preparation programs. The second stage of the study, presented in this paper, is based on a deeper analysis of the data gathered in the first stage. Specifically, we approached a wider community of CS teacher educators (from Israel, Europe, and the USA) and explored its perspective on one element of teacher preparation programs - the Methods of Teaching CS (MTCS) course. The conclusions from this stage can be viewed as a comprehensive framework for the design of an MTCS course, both in terms of topics to be included in the course as well as the relative weight (in time) that is to be dedicated to each topic.	A study on attitudes and emphases in computer science teacher preparation	NA:NA:NA	2018
Chun Liew	NA	Session details: Expanding the community	NA	2018
Carol Frieze	In this paper we describe a new "research and action" based course designed to give undergraduate students the opportunity to think beyond the classroom, to reach out and examine some of the broader issues surrounding computing. "Understanding and Broadening the Images of Computing" researches the images, the realities and the (mis)perceptions of computing that influence public understanding and participation in the field. Along with research students are encouraged to see themselves as future professionals who can be actively involved in re-shaping and re-presenting the field. To this purpose, students build an action component working in teams to develop and implement a public presentation aimed at broadening understanding of computing.	The images of computing: engaging undergraduates in the broad issues of computer science	NA	2018
Andreas M. Stefik:Christopher Hundhausen:Derrick Smith	The blind and visually impaired community is significantly underrepresented in computer science. Students who wish to enter the discipline must overcome significant technological and educational barriers to succeed. In an attempt to help this population, we are engaged in a three-year research project to build an educational infrastructure for blind and visually impaired middle and high school students. Our primary research goal is to begin forging a multi-sensory educational infrastructure for the blind across the United States. We present here two preliminary results from this research: 1) a new auditory programming environment called Sodbeans, a programming language called Hop, and a multi-sensory (sound and touch) curriculum, and 2) an empirical study of our first summer workshop with the blind students. Results show that students reported a significant increase in programming self-efficacy after participating in our camp.	On the design of an educational infrastructure for the blind and visually impaired in computer science	NA:NA:NA	2018
Yonina Cooper:M. Bernardine Dias:Ermine A. Teves:Sarah Belousov:M. Freddie Freddie Dias	While the needs and applications for computing technology have been growing, the enrollment and interest in Computer Science (CS) at the university level has not been growing in proportion. Moreover, the increasing prevalence of globalization requires a new set of skills for future technology leaders. These skills include the ability to work well in multidisciplinary and globally distributed teams, cross cultural boundaries with ease, create innovative solutions for problems that arise in unfamiliar settings, and think outside the box to solve a variety of problems while building effectively upon related work in the literature. These changes are also reflected in the growing interest among youth in global issues and how we can make a difference in underserved communities. This paper reports on our experience in designing and deploying an innovative internship that addresses these issues and seeks to enhance participation and education in CS through guided research projects in underserved communities.	Enhancing participation and education in CS through guided research projects in underserved communities	NA:NA:NA:NA:NA	2018
Rebekah Overdorf:Matthew Lang	Creating programs that engage undergraduate women with the broader community and encourage them to take an active role in changing the underrepresentation of women in computer science can effectively address both retention and recruitment of women in the discipline. This paper is an experience report describing the creation and outcomes of an outreach program for K-12 girls run entirely by undergraduate women. The contributions of this paper are the description of the creation of a successful student-led outreach program and a set of active-learning modules for K-12 students that illustrate advanced topics.	Reaching out to aid in retention: empowering undergraduate women	NA:NA	2018
Kent Lee	NA	Session details: Mobile computing	NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz:Joel Hollingsworth	Many schools have introduced, or are considering, a programming course targeting mobile devices to satisfy student interest in programming smart phones. In addition, a new class of mobile devices are appearing that combine the functionality of an eBook reader with a web browser, and many of them are based on the same programming frameworks as the smart phones. We report on the successes of mobile device programming courses at two schools. In addition, we report on the accomplishments of students developing software to leverage these newer, multi-function devices in supporting broader computer science education initiatives. In particular, we have developed a service-oriented application that allows students to compile and test programs written in Java and C++ that can be invoked from these devices. We have developed other software allowing these devices to function like Tablet PCs. After describing these important tools, we discuss our current efforts to use these mobile devices in computer science education.	Teaching mobile computing and developing software to support computer science education	NA:NA:NA	2018
Susan Loveland	Recently, several frameworks have been developed for writing mobile and web applications in Java, making the development of web and mobile applications accessible to HCI students with only a CS1 Java background. In this paper we describe using student projects based on the Google Android mobile platform and Google's Web Toolkit to provide students with experience designing and implementing user interfaces for mobile and web applications. Specific examples demonstrate how programming on these platforms reinforces standard HCI topics. As a result of being able to learn mobile device programming in the context of "cool" Google platforms, students expressed increased interest in studying HCI.	Human computer interaction that reaches beyond desktop applications	NA	2018
David Wolber	App Inventor is a visual "blocks" language for creating mobile apps. As part of a Google pilot program, App Inventor was taught to university students in a core curriculum course at the University of San Francisco. This paper introduces App Inventor and the course, focusing on how the language facilitated interactions with the world outside of the classroom.	App inventor and real-world motivation	NA	2018
Mark H. Goadrich:Michael P. Rogers	In a remarkably short timeframe, developing apps for smartphones has gone from an arcane curiosity to an essential skill set. Employers are scrambling to find developers capable of transforming their ideas into apps. Educators interested in filling that void are likewise trying to keep up, and face difficult decisions in designing a meaningful course. There are a plethora of development platforms, but two stand out because of their popularity and divergent approaches - Apple's iOS, and Google's Android. In this paper, we will compare the two, and address the question: which should faculty teach?	Smart smartphone development: iOS versus android	NA:NA	2018
Daniel D. Garcia	NA	Session details: Panel	NA	2018
Daniel D. Garcia:Michele Friend Hutton:Eugene Lemon:Josh Paley	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes [7]. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing [4]. This led to a series of room-packed sessions at the following three SIGCSE symposia to explore that idea from different perspectives [8, 9, 12]. They have provided a forum for sharing: " What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. - What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. - How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over [10, 13]. Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field [2]. Also, recent news of limited hiring in the information technology sector could have a damping affect [11]. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). This year, we've shifted from that "breadth-first" model to a "depth-first" one, and have invited three K-12 teachers who, collectively, have taught computing at an all-girls middle school, an under-served high school, and an affluent high school. The hope with this panel is to be able to drill down and understand the K-12 space, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 4	NA:NA:NA:NA	2018
Susan Rodger	NA	Session details: Special session	NA	2018
Susan H. Rodger:Mark Stehlik:Chris Stephenson:Cameron Wilson	NA	Progress in surfacing computer science in STEM	NA:NA:NA:NA	2018
Sushil K. Prasad	NA	Session details: Special session	NA	2018
Sushil K. Prasad:Almadena Chtchelkanova:Sajal Das:Frank Dehne:Mohamed Gouda:Anshul Gupta:Joseph Jaja:Krishna Kant:Anita La Salle:Richard LeBlanc:Manish Lumsdaine:David Padua:Manish Parashar:Viktor Prasanna:Yves Robert:Arnold Rosenberg:Sartaj Sahni:Behrooz Shirazi:Alan Sussman:Charles Weems:Jie Wu	NA	NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core topics for undergraduates	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Samuel Rebelsky	NA	Session details: Intro CS: panoptic views	NA	2018
Peter Drake:Kelvin Sung	Games assignments are increasingly popular in computer science education. This paper advocates and analyzes the inclusion of board, card, and dice games as programming assignments in introductory programming courses (CS1/2). The simple interface and strategy-based play of these types of games complement the immersive multimedia and agility-based play of video games. The implementation of board, card, and dice games typically demands less background knowledge from the instructor and offers fewer opportunities for extraneous work by the students. The paper lists 32 specific games that are suitable for teaching the major topics in CS1/2 and discusses the implementation of some of these games and their successful use as programming projects.	Teaching introductory programming with popular board games	NA:NA	2018
Stephen Davies:Jennifer A. Polack-Wahl:Karen Anewalt	We present results from a nationwide survey of undergraduate computer science departments regarding languages and techniques taught in CS0, CS1, and CS2. This snapshot of 371 schools provides an intriguing look into the state of computing education today in the U.S., quantifying which practices are actually in common use. Among other things, the study reveals the great variety in CS0 approaches, the relative uniformity of CS1 and CS2 approaches, the dominance of Java as a language for the introductory major sequence, and the tendency for departments to teach CS1 and CS2 in a consistent manner, rather than exposing students to different ideas in each.	A snapshot of current practices in teaching the introductory programming sequence	NA:NA:NA	2018
Andrew Petersen:Michelle Craig:Daniel Zingaro	Many factors have been cited for poor performance of students in CS1. To investigate how assessment mechanisms may impact student performance, nine experienced CS1 instructors reviewed final examinations from a variety of North American institutions. The majority of the exams reviewed were composed predominantly of high-value, integrative code-writing questions, and the reviewers regularly underestimated the number of CS1 concepts required to answer these questions. An evaluation of the content and cognitive requirements of individual questions suggests that in order to succeed, students must internalize a large amount of CS1 content. This emphasizes the need for focused assessment techniques to provide students with the opportunity to demonstrate their knowledge.	Reviewing CS1 exam question content	NA:NA:NA	2018
Sandro Pedrazzini	NA	Session details: Software design and development	NA	2018
Daniel Rocco:Will Lloyd	Modern distributed version control systems offer compelling advantages for teaching students professional software development practices and skills. In this paper, we explore the potential for incorporating Mercurial into introductory, intermediate, and advanced computing courses. By incorporating version control into the entire CS curriculum, instructors create unique opportunities to engage students in collaborative, real-world projects and activities, giving them critical early exposure to the expectations and assumptions prevalent in the software development community. Early introduction to version control provides students with an important foundation in both personal and collaborative development excellence, offering them a competitive edge in the marketplace and a superior understanding of software development best practice.	Distributed version control in the classroom	NA:NA	2018
Jason Snyder:Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	The Library for Interface Testing (LIFT) supports writing unit tests for Java applications with graphical user interfaces (GUIs). Current frameworks for GUI testing provide the necessary tools, but are complicated and difficult to use for beginners, often requiring a significant amount of time to learn. LIFT takes the approach that unit testing GUIs should be no different than testing any other type of code. By providing a set of frequently used filters for identifying GUI components and a set of operations for acting on those components, LIFT lets programmers quickly and easily test their GUI applications.	LIFT: taking GUI unit testing to new heights	NA:NA:NA	2018
Katherine Cennamo:Sarah A. Douglas:Mitzi Vernon:Carol Brandt:Brigitte Scott:Yolanda Reimer:Margarita McGrath	Revolutionary advances in technologies will require computer science professionals who are able to develop innovative software solutions. In order to identify techniques that can lead students to creative insights in their work, we have conducted an ethnographic study of the studio method as enacted in architecture, industrial design (ID), and human-computer interaction (HCI) classes. Our analysis of the activities conducted during studio critiques revealed that while the ID and architecture studios had a primary focus on experimentation, the primary emphasis of the HCI studios was on idea refinement. In this paper, we describe four barriers to creative thought observed in the HCI classrooms and identify ways that the architecture and ID instructors helped students to overcome similar challenges.	Promoting creativity in the computer science design studio	NA:NA:NA:NA:NA:NA:NA	2018
Matthew Jadud	NA	Session details: Cooperative learning	NA	2018
Alex D. Radermacher:Gursimran S. Walia	Pair programming is a programming technique where two programmers work together on the same programming task. Previous research has shown that it is effective for improving the learning effectiveness, efficiency, and enjoyment of students in introductory programming courses. Much research has also been dedicated to determining effective strategies for forming pairs. This paper discuss two different empirical studies conducted at North Dakota State University to a) test the feasibility of using pair programming in introductory computer science courses and b) determine whether or not major-based pairing produces effective pairs. The results of these studies provide support for implementing pair programming in introductory computer science courses and show that pairing of computer science and non-computer science students may produce pairs which are less compatible than other pairing methods.	Investigating the effective implementation of pair programming: an empirical investigation	NA:NA	2018
Steven Robbins	ClassQue is a classroom response system that goes beyond clickers to allow a wide selection of classroom interactions: teacher to individual student, teacher to all students, student to teacher and student to student. Questions are not restricted to multiple choice, and multiple questions can be pending at one time. One student can anonymously comment on another student's answer. After the class, students and teachers can receive reports of the classroom interactions. The current version of ClassQue is available for use in an environment in which each student is seated at a computer.	Beyond clickers: using ClassQue for multidimensional electronic classroom interaction	NA	2018
Shiri Azenkot:Theodore Golfinopoulos:Adam Marcus:Alessondra Springmann:Jonathan S. Varsanik	The Middle East Education Through Technology (MEET) program is a non-profit organization based in Jerusalem, that aims to empower future Israeli and Palestinian leaders by teaching them computer science and business. From the perspective of MEET's instructors, this paper describes how MEET uses computer science education to foster professional and personal contact among Israeli and Palestinian high school students, two groups who otherwise would have little or no interaction with each other. MEET's primary method of overcoming the barrier is teamwork: students are divided into groups that include both Israelis and Palestinians and are assigned software engineering tasks. We believe that the techniques used by MEET can serve as examples for other computer science programs that overcome barriers between groups in the United States and other countries.	Overcoming barriers among Israeli and Palestinian students via computer science	NA:NA:NA:NA:NA	2018
Paige Meeker	NA	Session details: Researching and evaluating teachers	NA	2018
Beth Simon:Elizabeth Bales:William G. Griswold:Stephen Cooper	Part of computer science education research focuses on the design of new technologies and techniques for improving educational experiences. However, for these systems and techniques to be truly impactful, their use must be disseminated to the larger instructor population. Single-instance workshops, where instructors are brought together to learn about a new technique or system so that they can possibly adopt it, are a common dissemination method. Unfortunately, rarely do we see reports regarding their effectiveness. In this case study, we report on two NSF-funded single-instance workshops designed to support adoption of the Ubiquitous Presenter (UP) active learning classroom presentation system. Though only 44% of workshop attendees used the system in their classrooms, 65% of those used the system repeatedly. Overall this impacted 1570 students. Additionally, 60% of our attendees used the active learning features of UP - a much higher usage rate than in the general UP user population. We reflect on the aspects of the workshops which seemed to promote, and hinder, instructor adoption and, finally, suggest some metrics for evaluating innovation dissemination workshops in general.	Case study: faculty professional development workshops for innovation diffusion	NA:NA:NA:NA	2018
Joshua T. Guerin:Daniel Michler	Undergraduate teaching evaluations are widely believed to be biased. We analyzed the evaluations from our department for all classes from 2000 through 2008, looking for specific biases. We looked for correlations between evaluation numbers and whether the course was required; how much time students spent on the course; student classification (freshman, sophomore, etc.), and expected grades. While all of these show correlations with teaching evaluation responses, the effect of each factor is not consistent over all questions and varied strongly depending on the evaluation question and the course level.	Analysis of undergraduate teaching evaluations in computer science	NA:NA	2018
Davide Fossati:Mark Guzdial	This paper explores the issue of what kind of evidence triggers changes in the teaching practice of Computer Science educators, and how educators evaluate the effectiveness of those changes. We interviewed 14 Computer Science instructors from three different institutions. Our study indicates that changes are mostly initiated from instructors' intuition, informal discussion with students, and anecdotal evidence.	The use of evidence in the change making process of computer science educators	NA:NA	2018
Thomas Cortina	NA	Session details: Keynote	NA	2018
Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Frederick P. Brooks, Jr.	The primary job of the teacher is to make learning happen; that is a design task. Most of us learned most of what we know by what we did, not by what we heard or read. A corollary is that the careful designing of exercises, assignments, projects, even quizzes, makes more difference than the construction of lectures. A second corollary is that project courses that go deeply into narrow aspects of a subject seem to stick longer and deeper than approaches aiming at comprehensive coverage. How to strike a balance? I've taught a first software engineering laboratory course 22 times, and an advanced computer architecture course about ten times. Here are some techniques that work for me.	The teacher's job is to design learning experiences; not primarily to impart information	NA	2018
Mehran Sahami	NA	Session details: Computer curricula 2013: update	NA	2018
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:David Reed	Beginning over 40 years ago with the publication of Curriculum 68, the major professional societies in computing--ACM and IEEE-Computer Society--have sponsored various efforts to establish international curricular guidelines for undergraduate programs in computing. As the field has grown and diversified, so too have the recommendations for curricula. There are now guidelines for Computer Engineering, Information Systems, Information Technology, and Software Engineering in addition to Computer Science. These volumes are updated regularly with the aim of keeping computing curricula modern and relevant. In the Fall of 2010, work on the next volume in the series, Computer Science 2013 (CS2013), began. Considerable work on the new volume has already been completed and a first draft of the CS2013 report (known as the Strawman report) will be complete by the beginning of 2012. This panel seeks to update and engage the SIGCSE community in providing feedback on the Strawman report, which will be available shortly prior to the SIGCSE conference.	Computer science curriculum 2013: reviewing the strawman report from the ACM/IEEE-CS task force	NA:NA:NA:NA	2018
Mark Hoffman	NA	Session details: Scrum across the CS/SE curricula	NA	2018
Charles Wallace:Sriram Mohan:Douglas Troy:Mark E. Hoffman	Scrum is one of the many agile approaches to software development that have been widely adopted over the past decade. Agile processes allow developers to embrace under-defined problems in complex environments where change in requirements is inevitable. The key agile features of Scrum are a flexible, adaptive schedule; democratic, collaborative teams; and frequent, iterative project and process reviews [2]. While students may engage with Scrum in the context of software development, the characteristics that suit many software problems to an agile approach also describe the student learning environment: complexity (new and unfamiliar concepts), under-defined problem space (students don't know what they don't know), short timeframe with frequent meetings (terms and class meetings), and inevitable change (apply new knowledge). This makes Scrum not only a software development strategy but a general learning strategy. Scrum facilitates frequent and iterative practice with timely feedback, development of mastery, and self-direction [1]. In this panel, the participants will describe how their students learn and practice Scrum in a software development context, how they use it to manage student projects outside the software development context, and how Scrum provides opportunities to integrate communication skills into the Computer Science (CS) and Software Engineering (SE) curricula. As participants in the NSF-funded CPATH II project (NSF Grants 0939122 and 0939081) "Incorporating Communication Skills Throughout Computer Science and Software Engineering Curricula," each panelist has developed Scrum-based assignments that exercise the skills of reading, writing, speaking, and teaming. The participants will discuss the design of these assignments and their experiences with them to date.	Scrum across the CS/SE curricula: a retrospective	NA:NA:NA:NA	2018
Ursula Wolz	NA	Session details: Special session	NA	2018
Ursula Wolz:Lillian (Botos) Cassel	NA	The role of interdisciplinary computing in higher education, research and industry	NA:NA	2018
Ivona Bezakova	NA	Session details: Paper: data structures and algorithms	NA	2018
Ali Erkan:Tom Pfaff:Jason Hamilton:Michael Rogers	During the past two years, we have been creating curricular material centered around complex problems rooted in sustainability. Since multi-disciplinary learning is one of our primary goals, these projects are most meaningful when they connect students from different disciplines working toward a common understanding. However, strong disciplinary components present in their solutions also allow us to frame these projects from strictly disciplinary perspectives. In this paper, we show how they can be used for increased engagement in the context of data structures and algorithms. We review two new ones to explore (i) the structural characteristics of the western part of the U.S. power-grid, and (ii) the effects of over-harvesting on fish stocks.	Sustainability themed problem solving in data structures and algorithms	NA:NA:NA:NA	2018
Michal Fori≈°ek:Monika Steinov√°	In this paper we explore the topic of using metaphors and analogies in teaching algorithms. We argue their importance in the teaching process. We present a selection of metaphors we successfully used when teaching algorithms to secondary school students. We also discuss the suitability of several commonly used metaphors, and in several cases we show significant weaknesses of these metaphors.	Metaphors and analogies for teaching algorithms	NA:NA	2018
Holger Danielsiek:Wolfgang Paul:Jan Vahrenhold	We describe the first results of our work towards a concept inventory for Algorithms and Data Structures. Based on expert interviews and the analysis of 400 exams we were able to identify several core topics which are prone to error. In a pilot study, we verified misconceptions known from the literature and identified previously unknown misconceptions related to Algorithms and Data Structures. In addition to this, we report on methodological issues and point out the importance of a two-pronged approach to data collection.	Detecting and understanding students' misconceptions related to algorithms and data structures	NA:NA:NA	2018
Sherri Goings	NA	Session details: Paper: robots	NA	2018
David Cowden:April O'Neill:Erik Opavsky:Dilan Ustek:Henry M. Walker	Using robots in introductory computer science classes has recently become a popular method of increasing student interest in computer science. This paper describes the development of a new curriculum for a CS 2 course, Imperative Problem Solving and Data Structures, based upon Scribbler 2 robots with standard C. The curriculum contains eight distinct modules with a primary topic theme, readings, labs, and project at the end. Each module resulted from collaboration among former CS 2 students and a faculty member, utilizing an iterative process with revisions. Each lab includes a survey to obtain student feedback that will allow the course to evolve and better fit the needs of future CS 2 students. All materials discussed here are available online for use by others.	A C-based introductory course using robots	NA:NA:NA:NA:NA	2018
Grant Braught	dLife is a free and open-source Java library that supports undergraduate education and research involving robotics, artificial intelligence, machine learning and computer vision. The design of dLife addresses many concerns raised by experience reports in the CS education literature including a shortened code/test/debug cycle, ready access to robot sensor information and close integration with a robotic simulation system. Full support is currently provided for the following robots: Finch, Hemisson (or Khepera Jr.), Sony Aibo, Khepera 2, Khepera 3, and Pioneer 3, with more in development. Easily extensible packages support classroom and research applications using neural networks, genetic algorithms, reinforcement learning and computer vision.	dLife: a Java library for multiplatform robotics, AI and vision in undergraduate CS and research	NA	2018
David S. Touretzky	Robotics is widely recognized as an interdisciplinary mixture of engineering and computer science, but the latter component is not well represented at many undergraduate institutions. The sophisticated technologies that underlie perception, planning, and control mechanisms in modern robots need to be made accessible to more computer science undergraduates. Following the curriculum design principles of Wiggins and McTighe (Understanding by Design, 2nd Ed.), I present seven big ideas in robotics that can fit together in a one semester undergraduate course. Each is introduced with an essential question, such as "How do robots see the world?" The answers expose students to deep concepts in computer science in a context where they can be immediately demonstrated. Hands-on labs using the Tekkotsu open source software framework and robots costing under $1,000 facilitate mastery of these important ideas. Courses based on parts of an early version of this curriculum are being offered at Carnegie Mellon and several other universities.	Seven big ideas in robotics, and how to teach them	NA	2018
Sheila Castaneda	NA	Session details: Paper: K-6 collaborations	NA	2018
Arno Pasternak:Jan Vahrenhold	We report on the design and evaluation of the first year of a Computer Science course in lower secondary education that implements the concept of braided teaching. Besides being a proof-of-concept, our study demonstrates that students an indeed be taught Computer Science (as opposed to Information and Communication Technology) as early as in sixth grade while at the same time not falling behind with respect to Information Technology Literacy. We present quantitative and qualitative results and argue that Computer Science can be taught just like any other science subject worth full curriculum credit.	Design and evaluation of a braided teaching course in sixth grade computer science education	NA:NA	2018
Chris Gregg:Luther Tychonievich:James Cohoon:Kim Hazelwood	Traditional introductory programming classes teach sequential programming using a single-threaded programming model. It is typical to wait until a student has developed proficiency in sequential programming before teaching parallel programming. As computer hardware becomes increasingly parallel, there is a greater need for software engineers who are proficient in designing parallel programs, and not just by "parallelizing" sequential designs. Teaching parallelism first is an important step towards educating tomorrow's programmers. We present an overview of a five-day introductory parallel programming course. We taught the course to nine and ten year-olds with no prior programming experience. Our course utilized a fundamentally parallel language we designed for the course, one with a near-natural language syntax that exposed the parallel processors throughout the code. This language, coupled with an interactive online programming environment, allowed us to teach a wide range of parallel programming concepts in a very limited timeframe. We also present examples of student-written code that demonstrates their understanding of some basic parallel programming concepts, and we describe the overall course goal and specific lesson plans geared towards teaching students how to "think parallel."	EcoSim: a language and experience teaching parallel programming in elementary school	NA:NA:NA:NA	2018
Colleen M. Lewis:Niral Shah	We found that fifth grade students' scores on Scratch programming quizzes in a summer enrichment course were highly correlated with their scores on a standardized test for mathematics. We identify ways in which the programming curriculum builds upon target skills from the Mathematics Content Standards for California Public Schools. We hypothesize that the programming curriculum leveraged and enriched students' mathematics content knowledge.	Building upon and enriching grade four mathematics standards with programming curriculum	NA:NA	2018
Sage Miller	NA	Session details: Paper: tools	NA	2018
Douglas Blank:Jennifer S. Kay:James B. Marshall:Keith O'Hara:Mark Russo	The Calico project is a multi-language, multi-context programming framework and learning environment for computing education. This environment is designed to support several interoperable programming languages (including Python, Scheme, and a visual programming language), a variety of pedagogical contexts (including scientific visualization, robotics, and art), and an assortment of physical devices (including different educational robotics platforms and a variety of physical sensors). In addition, the environment is designed to support collaboration and modern, interactive learning. In this paper we describe the Calico project, its design and goals, our prototype system, and its current use.	Calico: a multi-programming-language, multi-context framework designed for computer science education	NA:NA:NA:NA:NA	2018
Prasun Dewan	A language-based direct-manipulation user-interface generator automatically creates a visualization of an object directly from its class, allows users to edit the visualization, and invokes methods in the object in response to these edits. Such a generator can change, and we argue, improve the lectures and assignments on programming conventions, methods, state, constructors, preconditions, MVC, polymorphism, graphics, structured objects, loops, concurrency, and annotations. We have built such a generator, which has several novel features for teaching such as interactive instantiation of a class, interactive invocation of methods and constructors that take arbitrary arguments, visualization of objects representing records, sequences, table and graphics, use of preconditions to disable/enable user-interface elements, and automatic generation of model threads. We have been working on and using such a generator for teaching CS 1 and CS 2 for about a decade.	How a language-based GUI generator can influence the teaching of object-oriented programming	NA	2018
Jason Vandeventer:Benjamin Barbour	Computer science instructors often rely on the final version of a program for assessment and feedback. This ignores the process the student used to arrive at the final program. When the instructor has the ability to observe real-time development progress of each student, they are better equipped to provide appropriate and timely feedback. CodeWave, a software program developed at the University of North Carolina Wilmington looks to alleviate these issues. CodeWave is a real-time, collaborative Integrated Development Environment with traditional features such as syntax highlighting and non-traditional features such as integrated messaging and logged playback. CodeWave enhances productivity by integrating many common tools students and instructors use during the programming process. Communication is effortless and allows a user to specify a point in the code as a link in the message body. Log playback provides the ability to review the entire development process. In this paper, we describe the software program we developed to enhance learning in computer science programming courses.	CodeWave: a real-time, collaborative IDE for enhanced learning in computer science	NA:NA	2018
Richard Brown	NA	Session details: A stratified view of programming language parallelism for undergraduate CS education	NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop	It is no longer news that undergraduates in computer science need to learn more about parallelism. The range of options for parallel programming is truly staggering, involving hundreds of languages. How can a CS instructor make informed choices among all the options? This panel provides a guided introduction to parallelism in programming languages and their potential for undergraduate CS education, organized into four progressive categories: low-level libraries and; higher-level libraries and features; programming languages that incorporate parallelism; and frameworks for productive parallel programming. The four panelists will present representative examples in their categories, then present viewpoints on how those categories relate to coursework, curriculum, and trends in parallelism.	A stratified view of programming language parallelism for undergraduate CS education	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Special session	NA	2018
Daniel D. Garcia:David Ginat	One of the most important tasks an introductory computing student must do is to form a mental model of how the computer works. This could be as specific as understanding the read-evaluate-print loop of an interpreter, or as general as believing that the computer works predictably and deterministically. However, some have fuzzy mental models, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that an audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of magic tricks whose answer is grounded in computer science: modulo arithmetic, permutations, algorithms, binary encoding, probability, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	DeMystifying computing with magic	NA:NA	2018
Jeffrey Stone	NA	Session details: Community-based projects for computing majors: opportunities, challenges and best practices	NA	2018
Jeffrey A. Stone:Bonnie MacKellar:Elinor M. Madigan:Janice L. Pearce	The use of community-based projects has been recognized as having pedagogical and experiential value for computing majors (e.g. [3], [4], [5], [6]). Community-based projects can be valuable learning experiences for computing majors as well as for faculty and community partners. However, these types of projects do present challenges for faculty and should be aligned with desired course outcomes. This panel will discuss the use of community-based projects from multiple perspectives. The expectation is that the panel will serve as a forum for the participants to share the opportunities, challenges, pedagogical motivations, and best practices obtained from prior experience. Exemplar projects will be highlighted. The panel also hopes the session motivates the audience to share their own experiences and sparks the interest of those faculty members who may have no prior experience with community-based projects.	Community-based projects for computing majors: opportunities, challenges and best practices	NA:NA:NA:NA	2018
Adrienne Decker	NA	Session details: Paper: games	NA	2018
Gillian Smith:Anne Sullivan	This paper presents lessons learned from five years of teaching a game design and programming outreach course. This class is taught over the course of a month to high school students participating in the California Summer School for Mathematics and Science (COSMOS) at the University of California, Santa Cruz. Over these five years we have changed everything in the course, from the overall project structure to the programming language used in the class. In this paper we discuss our successes and failures, and offer recommendations to instructors offering similar courses.	The five year evolution of a game programming course	NA:NA	2018
Katie Seaborn:Magy Seif El-Nasr:David Milam:Darren Yung	Games are an important part of popular culture and have successfully engaged audiences from different age groups [8]. This has caused many educators to start thinking of different ways to infuse game-based techniques (playing or construction) to enhance education. Over the past five years, there has been several research efforts on curriculum development and the evaluation of game construction and playing methods to promote STEM (Science Technology, Engineering and Mathematics) concepts to middle and high school students. In this paper, we report on a new study following the lead of previous efforts. In particular, we were granted a block within Frank Hurt High School by the Surrey school district for which to develop a game construction-based curriculum as a basis for computer science education within the school, replacing a traditional computer science class. From February till June 2011 students were taught elementary programming using GameMaker, a digital game development tool. In addition to collecting students' overall impressions, we also evaluated students' technical competency (using tests) and self-efficacy (using surveys) at the start and end of the semester. Our findings show that the curriculum had a positive, statistically significant effect on concept comprehension, which suggests that the curriculum was effective for understanding computer science and game design concepts. In this paper we present the course structure, methods, and evaluation as a contribution.	Programming, PWNed: using digital game development to enhance learners' competency and self-efficacy in a high school computing science course	NA:NA:NA:NA	2018
Michael John Eagle:Tiffany Barnes	We present the Game2Learn methodology for the design and evaluation of educational games with a focus on well-defined learning objectives and empirical verification. This integrative process adapts ideas from educational design, intelligent tutoring systems, classical test-theory, and interaction and game design, and agile software development. The methodology guides researchers through the steps of the design process, including identification of specific learning objectives, translation of learning activities to game mechanics, and the empirical evaluation of the final product. This methodology is particularly useful for ensuring successful student research experiences or software engineering courses.	A learning objective focused methodology for the design and evaluation of game-based tutors	NA:NA	2018
Sarah Heckman	NA	Session details: Paper: professional experiences	NA	2018
Thomas Gibbons	A new model, professional course guides, describes how practicing professionals can be brought into the classroom as student mentors and integrated into the course material. This new model is compared to existing models for student interactions with practicing professionals including guest speakers, adjunct faculty, and program mentors.	Course guides: a model for bringing professionals into the classroom	NA	2018
Sriram Mohan:Stephen Chenoweth:Shawn Bohner	The computer science capstone experience is designed to bridge the gap from university expectations to those of industry. Yet trying to solve this problem with a single course sequence, even one spanning the senior year, has some shortcomings, in terms of learning outcomes which can be achieved, and also instructional strategies that can be employed. We describe here an alternative plan which first provides a junior year of practice on a client-based project integrated with learning design and other related topics, followed by a senior year in which students can work more independently to hone these skills on a harder year-long project with another client. This two-year sequence, with scaffolding provided at first that is gradually removed, has proven to be especially effective in preparing undergraduates for a career in the soft- ware industry. The approach also integrates well with the need for these students to become proficient at working in engineering teams.	Towards a better capstone experience	NA:NA:NA	2018
Jeffrey Saltz:Jae Oh	We present an open co-op program called Global Enterprise Technology Immersion Experience (GET IE) developed by JPMorgan Chase & Co. and Syracuse University. The new program creates a global enterprise focus in technology-oriented academic majors, integrated with hands-on experiential work-based learning to provide a context in which students are stimulated to utilize their classroom experience. The program includes a two-semester paid internship component that can be seamlessly incorporated with the existing computer science curriculum at Syracuse and else where. The internship's unique pedagogical innovation is to simultaneously provide the students academic course work that is integrated within a students extended internship and provides relevant problems in global enterprise technology. The curricula is "open" in the sense that other institutions and companies can join the consortium to enrich choices for the students and foster cross-fertilization of curricula activities. The program, in effect, creates a domain specific next generation co-op program that complements typical computer science curricula with a skill-set that is required for creating very large, global enterprise applications for technically and socially diverse organizations.	An open co-op model for global enterprise technology education: integrating the internship and course work	NA:NA	2018
Don Goelman	NA	Session details: Paper: a session with a view	NA	2018
Tamar Vilner:Ela Zur:Ronit Sagi	The Open University of Israel (OUI) is a distance learning university. Our CS1 course is taught through video-taped lectures that cover the study material. In addition, students may participate in face-to-face group meetings in study centers located all over the country and taught by tutors. There is a special group called Ofek, in which the tutor is located in a studio and the lesson is broadcast over the internet. Students enrolled in this group participate from their home PCs. The taped Ofek sessions as well as the lectures are stored on the course website, and students can watch them whenever convenient. We conducted a study to investigate students' viewing habits and the relationship between viewing and the success rate in the course.	Integrating video components in CS1	NA:NA:NA	2018
Tayfun Tuna:Jaspal Subhlok:Lecia Barker:Varun Varghese:Olin Johnson:Shishir Shah	Videos of classroom lectures have proven to be a popular and versatile learning resource. This paper reports on videos featuring Indexing, Captioning, and Search capability (ICS Videos). The goal is to allow a user to rapidly search and access a topic of interest, a key shortcoming of the standard video format. A lecture is automatically divided into logical indexed video segments by analyzing video frames. Text is automatically identified with OCR technology enhanced with image transformations to drive keyword search. Captions can be added to videos. The ICS video player integrates indexing, search, and captioning in video playback and has been used by dozens of courses and 1000s of students. This paper reports on the development and evaluation of ICS videos framework and assessment of its value as an academic learning resource.	Development and evaluation of indexed captioned searchable videos for STEM coursework	NA:NA:NA:NA:NA:NA	2018
James R. Miller	Metaview is an interactive tool that helps to teach concepts related to nested 3D coordinate systems, especially in the context of defining and establishing views of 3D scenes in common graphics APIs like OpenGL and Direct3D. We describe the context in which nested coordinate systems arise in the study of graphics programming, then we relate the common conceptual difficulties students typically experience when studying and trying to put this material into practice. We then describe the role that metaview plays in helping to overcome these problems. Space allows us only to describe its core uses in these areas; several of its additional features are briefly listed at the end. Metaview is packaged with a set of built-in 3D models used to demonstrate major concepts. In addition, external and/or student-programmed models are easily imported into the tool. Metaview can be run anywhere, anytime using Java Web Start. The latest released version of the tool can be executed from http://people.eecs.ku.edu/~miller/JOGL/metaview.jnlp. We are currently working on a port to OpenGL ES targeted for portable smart devices such as tablet computers.	Metaview: a tool for learning about viewing in 3D	NA	2018
Saquib Razak	NA	Session details: Paper: pedagogy: programming	NA	2018
Wanda Dann:Dennis Cosgrove:Don Slater:Dave Culyba:Steve Cooper	In this paper, we describe a pedagogy for an undergraduate programming course using Alice 3 and Java. We applied the educational theory of mediated transfer to develop a new version of the Alice system and accompanying instructional materials. The pedagogy was implemented and tested over two years. Student test scores in experimental, treatment course sections showed dramatic improvement over scores in comparable non-treatment sections.	Mediated transfer: Alice 3 to Java	NA:NA:NA:NA:NA	2018
Richard Gluga:Judy Kay:Raymond Lister:Sabina Kleitman:Tim Lever	A computer science student is required to progress from a novice programmer to a proficient developer through the programming fundamentals sequence of subjects. This paper deals with the capturing and representation of learning progression. The key contribution is a web-based interactive tutorial that enables computer science educators to practice applying the Bloom Taxonomy in classifying programming exam questions. The tutorial captures participant confidence and self-explanations for each Bloom [5] classification exercise. The results of an evaluation with ten participants were analyzed for consistency and accuracy in the application of Bloom. The confidence and self-explanation measures were used to identify problem areas in the application of Bloom to programming fundamentals. The tutorial and findings are valuable contributions to future ACM/IEEE CS curriculum revisions, which are expected to have a continued emphasis on Bloom [1].	Over-confidence and confusion in using bloom for programming fundamentals assessment	NA:NA:NA:NA:NA	2018
Chris Piech:Mehran Sahami:Daphne Koller:Steve Cooper:Paulo Blikstein	Despite the potential wealth of educational indicators expressed in a student's approach to homework assignments, how students arrive at their final solution is largely overlooked in university courses. In this paper we present a methodology which uses machine learning techniques to autonomously create a graphical model of how students in an introductory programming course progress through a homework assignment. We subsequently show that this model is predictive of which students will struggle with material presented later in the class.	Modeling how students learn to program	NA:NA:NA:NA:NA	2018
Rebecca Bates	NA	Session details: Science fiction in computer science education	NA	2018
Rebecca Bates:Judy Goldsmith:Rosalyn Berne:Valerie Summet:Nanette Veilleux	The use of science fiction (SF) to engage students in computer science learning is becoming more popular [1-6]. There is ample material available to help both undergraduate and graduate students make connections between technical content and human experience, from Star Trek to The Hitchhiker's Guide to the Galaxy to 2001: A Space Odyssey to I, Robot and many others. Fiction can be included in technical courses or used to draw students into the field in introductory classes. The panelists, who represent a range of schools, perspectives and classes, will present brief overviews (5-8 minutes) of how they have used science fiction to engage students in technical topics as well as ethical and societal issues related to computing. After the overviews, there will be plenty of time for discussion of examples used within the community and ways to make connections between science fiction and particular classes or topics. We will be gathering additional examples from the discussion and making them available online.	Science fiction in computer science education	NA:NA:NA:NA:NA	2018
Leisa D. Thompson	NA	Session details: Diversity initiatives to support systemic change for women in undergraduate computing	NA	2018
Leisa D. Thompson:Lecia J. Barker:Rita Manco Powell:Catherine E. Brawner:Tom McKlin	The National Center for Women & Information Technology (NCWIT) Extension Services for Undergraduate Programs (ES-UP) has created a large group of trained consultants (ESCs) and clients who are passionate about women's participation in computing. This panel will describe how our ESCs and clients have worked together to effect change and will show outcomes from our activities over the past three years.	Initiatives to support systemic change for women in undergraduate computing	NA:NA:NA:NA:NA	2018
Christopher Hundhausen	NA	Session details: Special session	NA	2018
N. Hari Narayanan:Christopher Hundhausen:Dean Hendrix:Martha Crosby	The studio-based learning (SBL) model aims to promote learning in a social and collaborative context by having learners construct, iteratively refine, and critically review design artifacts under the guidance of instructors and disciplinary experts. Recognizing the potential of SBL to foster the development of not only technical design skills, but also increasingly-coveted communication and collaboration skills, we have been adapting the approach for computing education, implementing it in various courses, and evaluating its impact over the past 5 years. This effort now involves 26 computing courses at 15 institutions in seven states. To our knowledge, this represents the most systematic implementation and evaluation of a pedagogy for computing education to date. This special session will introduce SBL to the SIGCSE community and facilitate a discussion and exchange of ideas. In addition to oral and poster presentations of the SBL model and its evaluation results, the session will feature "war stories" from teachers who have applied the model to their courses and hands-on activities to help attendees apply SBL to their courses.	Transforming the CS classroom with studio-based learning	NA:NA:NA:NA	2018
Kristine Nagel	NA	Session details: Paper: broadening participation	NA	2018
Pierluigi Crescenzi:Leonardo Rossi:Gianluca Apollaro	In this paper we describe how we tried to make the well-known JFLAP Turing machine simulator accessible to blind students taking a theoretical computer science course. Software accessibility is an important topic for both legal and ethical reasons: in our case, however, we also wanted to make the accessible software usable by blind students in cooperation with the other students, in order to encourage the integration of the blind students within the rest of the class. For this reason, the accessible version of the JFLAP Turing machine simulator that we developed is as much similar as possible to and fully compatible with the original one. In the paper, we also report some very satisfactory preliminary validation results that indicate how the new software can really make Turing machines accessible to blind students.	Making turing machines accessible to blind students	NA:NA:NA	2018
David C. Webb:Alexander Repenning:Kyu Han Koh	A fundamental challenge to computer science education is the difficulty of broadening participation of women and underserved communities. The idea of game design and game programming as an activity to introduce children at an early age to computational thinking in a motivational way is quickly gaining momentum. A pedagogical approach called Project First has allowed the Scalable Game Design project to reach a large group of middle schools students including a large percentage of female (45%) and underrepresented (48%) students. With over 4000 students in inner city, remote rural, and Native American communities Scalable Game Design has investigated the impact on students' interest level of pedagogical approaches employed by teachers such as mediation and scaffolding. Findings suggest strong gender effects based on classroom scaffolding approaches. For instance, girls are substantially less likely to be motivated through scaffolding based on direct instruction. Conversely, guided discovery scaffolding approaches are highly motivating to the point where they can even overcome other negative predictors such as small girls to boys class participation ratios. This paper introduces the project, discusses different scaffolding approaches and presents data connecting gender specific motivational levels with scaffolding approaches.	Toward an emergent theory of broadening participation in computer science education	NA:NA:NA	2018
Julie Krause:Irene Polycarpou:Keith Hellman	As percentages of women in computing jobs and university programs decline, recruiting and retaining women in the field of Computer Science (CS) becomes increasingly important. Undergraduate CS programs, and more specifically, introductory-level CS courses, offer an opportunity to introduce women to CS studies. Furthermore, learning experiences in introductory CS courses can be pivotal in shaping female students' perceptions of CS. Collaborative learning, in various forms, is an instructional construct that has been shown to be effective in recruiting and retaining women in undergraduate CS programs. In this paper we present an exploratory study on formal learning groups and their potential to attract and maintain female students' interest in CS studies.	Exploring formal learning groups and their impact on recruitment of women in undergraduate CS	NA:NA:NA	2018
Charles Leska	NA	Session details: Paper: online collaboration	NA	2018
Jam Jenkins:Evelyn Brannock:Thomas Cooper:Sonal Dekhane:Mark Hall:Michael Nguyen	The Java Wiki Integrated Development Environment (JavaWIDE) is an innovative environment that promotes active learning and collaboration in programming courses. This paper surveys how JavaWIDE's features have been used to promote active and collaborative learning in both traditional and distance education (synchronous) in four different environments: high school, summer enrichment courses, and at two- and four-year colleges. The authors describe the context of each teaching and learning environment and the parts of JavaWIDE that are particularly well suited in each context. After discussing the active learning and collaboration techniques employed, student responses to the experience are summarized. This collection of case studies illustrates how the concurrent editing, shared environment awareness and other features of JavaWIDE can be used to promote active learning and collaboration within a heterogeneous set of teaching and learning environments.	Perspectives on active learning and collaboration: JavaWIDE in the classroom	NA:NA:NA:NA:NA:NA	2018
Christopher Scaffidi:Aniket Dahotre:Yan Zhang	Animation programming is a widely-respected approach for helping students to learn programming skills, and online forums are a widely-used approach for helping students to interact with one another. But in what ways, if any, does combining animation programming with online forums lead to useful discussion and collaboration among learners? To answer this question, we analyzed online forum discussions among people who were learning to create animation programs using the Scratch programming environment. We discovered that specific kinds of online posts were more likely than others to be followed by discussion, and we found that the ensuing collaboration often involved the exchange of design ideas and feedback within small groups of users. These findings reveal opportunities for enhancing online forums and surrounding tools so they more effectively facilitate discussion, collaboration, and ultimately development of programming skills.	How well do online forums facilitate discussion and collaboration among novice animation programmers?	NA:NA:NA	2018
John Barr:Ananda Gunawardena	Classroom Salon is an on-line social collaboration tool that allows instructors to create, manage, and analyze social net- works (called Salons) to enhance student learning. Students in a Salon can cooperatively create, comment on, and modify documents. Classroom Salon provides tools that allow the instructor to monitor the social networks and gauge both student participation and individual effectiveness. This pa- per describes Classroom Salon, provides some use cases that we have developed for introductory computer science classes and presents some preliminary observations of using this tool in several computer science courses at Carnegie Mellon University.	Classroom salon: a tool for social collaboration	NA:NA	2018
Catherine Lang	NA	Session details: Paper: middle school collaborations	NA	2018
Elizabeth Carter:Glenn Blank:Jennifer Walz	In order to garner more student interest in the pursuit of computer science as both a major and a career path, K-12 students need to be made aware of what computer science is and what it is about earlier in their education. Although students in many high schools can pursue introductory programming, high school is arguably too late to interest students who may have developed ill-informed attitudes about computer science. This paper documents curricular items developed for and taught to an audience of mixed ability 6th through 8th graders taking a local Technology Education class that attempts to showcase some of the more interesting, less stereotypical, aspects of computer science using a breadth approach in an effort to encourage interest in the field.	Bringing the breadth of computer science to middle schools	NA:NA:NA	2018
Richard Burns:Lori Pollock:Terry Harvey	We have developed and implemented, over four semesters, a model for engaging computer science majors in service learning for teachers of grades 6-8 at a K-8 school in an underserved community. This paper describes the design of a course focused on interweaving software engineering practice, service learning, and development of "soft" professional skills. CS student teams partner with middle school teacher teams to create learning games for classrooms, and then conduct classroom instruction and observation. We report on our results from evaluating the experience of CS students and middle school teachers through pre-post surveys, evaluator observation of student demo presentations and classroom instruction, focus groups, and student reflective journals.	Integrating hard and soft skills: software engineers serving middle school teachers	NA:NA:NA	2018
Linda Werner:Jill Denner:Shannon Campe:Damon Chizuru Kawamoto	Computational thinking (CT) has been described as an essential capacity to prepare students for computer science, as well as to be productive members of society. But efforts to engage K-12 students in CT are hampered by a lack of definition and assessment tools. In this paper, we describe the first results of a newly created performance assessment tool for measuring CT in middle school. We briefly describe the context for the performance assessment (game-programming courses), the aspects of CT that are measured, the results, and the factors that are associated with performance. We see the development of assessment tools as a critical step in efforts to bring CT to K-12, and to strengthen the use of game programming in middle school. We discuss problems and implications of our results.	The fairy performance assessment: measuring computational thinking in middle school	NA:NA:NA:NA	2018
Julian Mason	NA	Session details: Paper: new tricks for the classroom	NA	2018
Stephen H. Edwards:Zalia Shams:Michael Cogswell:Robert C. Senkbeil	At SIGCSE 2002, Michael Goldwasser suggested a strategy for adding software testing practices to programming courses by requiring students to turn in tests along with their solutions, and then running every student's tests against every other student's program. This approach provides a much more robust environment for assessing the quality of student-written tests, and also provides more thorough testing of student solutions. Although software testing is included as a regular part of many more programming courses today, the all-pairs model of executing tests is still a rarity. This is because student-written tests, such as JUnit tests written for Java programs, are now more commonly written in the form of program code themselves, and they may depend on virtually any aspect of their author's own solution. These dependencies may keep one student's tests from even compiling against another student's program. This paper discusses the problem and presents a novel solution for Java that uses bytecode rewriting to transform a student's tests into a form that uses reflection to run against any other solution, regardless of any compile-time dependencies that may have been present in the original tests. Results of applying this technique to two assignments, encompassing 147 student programs and 240,158 individual test case runs, shows the feasibility of the approach and provides some insight into the quality of both student tests and student programs. An analysis of these results is presented.	Running students' software tests against each others' code: new life for an old "gimmick"	NA:NA:NA:NA	2018
Christopher Plaue:Sal LaMarca:Shelby H. Funk	Large introductory-level classes provide a cost-efficient approach for universities to serve many students at once, but also present several challenges to learning (e.g., poor visual angles). In addition, more students with declared, undeclared, or undiagnosed learning disabilities are entering the college and university systems. In the spirit of universal design, we created a group note-taking system in our large introductory computer science course to increase interaction amongst students, promote good note-taking strategies, and provide study resources to all students while also fulfilling the role of accommodating for students with learning disabilities. We show that the section of the course taught with our intervention performed significantly better on their final examination compared to a course taught without the intervention. We report that students enjoyed increased interactions with their peers, and that one third of the class self-reported an increase in their note-taking skills. Furthermore, our intervention only required minimal cost to the institution, and no financial cost to students, and is easily implemented in any size class.	Group note-taking in a large lecture class	NA:NA:NA	2018
Michelle Craig:Sarah Petersen:Andrew Petersen	This paper presents observations about teaching program tracing to novices drawn from a study of knitting patterns. Due to changes in audience, knitting patterns have evolved from vague, chatty discourse written for experts to precise, line-by-line procedures that are akin to programs. The modern knitting community has developed numerous conventions for articulating iteration, expressing conditions, and documenting design decisions. "Executing" one of these patterns is analogous to tracing, since the knitter must demonstrate understanding of the instructions. We argue that the conventions adopted by knitters to make their patterns more understandable to non-experts provide useful insight to computer scientists teaching novices. Our observations suggest that phrasing conditions as termination cases ("until" instead of "while") and partially unrolling loops may help beginners understand code and that some structures, like parameters to functions, may be unfamiliar because they have no common analog.	Following a thread: knitting patterns and program tracing	NA:NA:NA	2018
Tracy Camp:Paul Tyman	NA	Session details: Plenary Session	NA:NA	2018
Hal Abelson	SIGCSE members love the beauty of computational thinking. They know the joy of bringing those ideas to young people. That love for computational thinking entails respect for the computational values that empower people in the digital world. For academics, those values have been central to the flowering of computing as an intellectual endeavor. Today, those values are increasingly threatened by stresses from both within and outside academia: squabbles over who owns academic work, increasingly stringent and overreaching intellectual property laws, and the replacement of open computing platforms by closed applications and walled-garden application markets. In this talk I'll describe some things we've done at MIT to support computational values, like open publication of all our course materials, our faculty policy on open publication of academic research, and our recently announced initiative for open online instruction based on non-proprietary software platforms. I'll discuss Creative Commons licensing and Free Software, and the importance of tinkerability for empowering citizens in an information society. And I'll describe App Inventor for Android, a new programming tool motivated by the vision that all of us us can experience mobile computing as creators using tools that we can control and reshape, rather than only as consumers of packaged applications.	From computational thinking to computational values	NA	2018
Joan Krone	NA	Session details: Teaching mathematical reasoning across the curriculum	NA	2018
Joan Krone:Doug Baldwin:Jeffrey C. Carver:Joseph E. Hollingsworth:Amruth Kumar:Murali Sitaraman	NA	Teaching mathematical reasoning across the curriculum	NA:NA:NA:NA:NA:NA	2018
Scott Portnoff	NA	Session details: Special session	NA	2018
Scott R. Portnoff	The presentation, an interim report, will focus on the design, implementation and rationale for a pre-APCS HS curriculum of Interdisciplinary Central-Problem-Based units that model real-world applications. In a typical multi-week unit, students use an existing complex software application to explore a specific problem, e.g. configuring SDSC Biology Workbench to build a phylogenetic (evolutionary) tree for various animal species after determining the degree of homology between protein or DNA sequences obtained from online genomic and protein databases. Students then build a small-scale version of the program - focusing on 1 or 2 algorithms - using Processing, Excel, BYOB or Alice. This approach allows students a glimpse into the inner workings of such programs, and affords them both context and practical potential for their projects. Back-stories from film and literature (e.g. Inherit the Wind) place problems within an historical and social context so that students will understand both their importance and the contribution CS can make to their solution. Unit topics have come from the fields of Astronomy (Galileo's discoveries), Bioinformatics (evolution), Molecular Modeling (DNA double helix), Political Science (women's suffrage/ Florida 2000 Presidential election), Environmental Science, Music (visualization software like Synthesia), and Holocaust Studies (IBM's active hardware and programming support for Hollerith machine technology used in the Nazi extermination programs).	Teaching HS computer science as if the rest of the world existed: rationale for a HS Pre-APCS curriculum of interdisciplinary central-problem-based units that model real-world applications	NA	2018
Guy-Alain Amoussou	NA	Session details: Special session	NA	2018
Guy-Alain Amoussou:Scott Grissom	What are the perceived challenges by the computing education and research communities? After small groups discuss this question, we will compare and contrast these perceived challenges to the current trend in proposals submitted and funded by the National Science Foundation's (NSF) Transforming Undergraduate Education in STEM (TUES) program. The intention is to create awareness for all involved and to broaden the range of proposals submitted to the NSF.	Funding the challenges in computing	NA:NA	2018
Lori Carter	NA	Session details: Paper: CS1: new ideas	NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	In this paper, we present the design and development of a new approach to teaching the college-level introductory computing course (CS1) using the context of art and creative coding. Over the course of a semester, students create a portfolio of aesthetic visual designs that employ basic computing structures typically taught in traditional CS1 courses using the Processing programming language. The goal of this approach is to bring the excitement, creativity, and innovation fostered by the context of creative coding. We also present results from a comparative study involving two offerings of the new course at two different institutions. Additionally, we compare our results with another successful approach that uses personal robots to teach CS1.	Creative coding and visual portfolios for CS1	NA:NA:NA	2018
Daniel Zingaro:Andrew Petersen:Michelle Craig	In this paper, we explore the use of sequences of small code writing questions ("concept questions") designed to incrementally evaluate single programming concepts. We report on a study of student performance on a CS1 final examination that included a traditional code-writing question and four intentionally corresponding concept questions. We find that the concept questions are significant predictors of performance on both the corresponding code-writing question and the final exam as a whole. We argue that concept questions provide more accurate formative feedback and simplify marking by reducing the number of variants that must be considered. An analysis of responses categorized by the students' previous programming experience suggests that inexperienced students have the most to gain from the use of concept questions.	Stepping up to integrative questions on CS1 exams	NA:NA:NA	2018
Jeffrey A. Stone	The use of weekly, reflective student blogs can be one method for collecting ongoing feedback about a CS1 course. Reflective blogs permit a continuous feedback loop that can be used for both formative and summative assessment of pedagogical innovations. This paper reports on a two-year qualitative study involving the use of reflective blogging in six sections of two CS1-style courses. Reflective blogs were used as a low stakes, non-intimidating vehicle whereby concerns, requests, and other course-related issues could be voiced by students. The resultant blog posts were used as an assessment and feedback mechanism for a parallel pedagogical transformation of the participating courses. This study demonstrates that reflective student blogs in CS1 can be a useful tool for instructional planning. However, faculty must be careful to avoid reactionary changes which move the course away from predefined learning outcomes.	Using reflective blogs for pedagogical feedback in CS1	NA	2018
Jody Paul	NA	Session details: Paper: team work	NA	2018
Vreda Pieterse:Lisa Thompson:Linda Marshall:Dina M. Venter	We describe a process that we applied for teaching teamwork in a Software Engineering module. Our objective with this process was to create opportunities for our students to experience some of the problems of working in a group before they formed teams in which they had to work for the rest of the year. The process entails expecting students to work on well defined assignments for short periods in teams where risk factors were induced. Through experiencing these short bursts of intense team tribulation students are prepared to handle difficult events and situations in their teams. We describe the design and implementation of this process. We report on changes in the levels of participation of the students during the process. We offer our explanation of possible factors that may have caused the observed variations.	Participation patterns in student teams	NA:NA:NA:NA	2018
Alan C. Jamieson:Lindsay H. Jamieson:Angela C. Johnson	In the 1960s and 70s, Uri Treisman developed a specific style of workshops to encourage the retention of underrepresented minority students in Calculus courses at the University of California, Berkley. Since that time, workshops based on the Treisman model have been successfully implemented across the United States and have resulted in more underrepresented minority students successfully completing Calculus. Some attempts have been made to translate the Treisman model to Introductory Computer Science, but all previous attempts have been focused on programming skills. However, one of the student assumptions that deter women and underrepresented minorities from attempting a major or minor in Computer Science is that a computer scientist is purely a solitary programmer [11]. In this paper, we discuss a specific two year pilot program of non-programming focused Treisman-style workshops in conjunction with a Introductory Computer Science course.	Application of non-programming focused treisman-style workshops in introductory computer science	NA:NA:NA	2018
Ben Coleman:Matthew Lang	Improving communication and collaborative skills of computer science students has been a priority in the community for some time. We present our philosophy, collaboration across the curriculum, which moves beyond existing individual courses or course units to teach collaboration skills in a pervasive manner. In our approach, concepts are introduced and skills are developed throughout the computer science curriculum---from CS1 to a capstone experience. Students are provided with opportunities to exercise skills in reflective environments that eventually mirror real-world experiences, and technical course content is not compromised. We argue for this system and provide details about how collaboration across the curriculum is accomplished at a small liberal arts college.	Collaboration across the curriculum: a disciplined approach todeveloping team skills	NA:NA	2018
Kinnis Gosha	NA	Session details: Paper: summer experiences	NA	2018
Krishnendu Roy	Google's App Inventor for Android (AIA) is the newest visual "blocks" programming language designed to introduce students to programming through creation of mobile applications (apps). AIA opens up the world of mobile apps to novice programmers. Success stories of using AIA to introduce college students to programming exist. We used AIA in computing summer camps for high school students that we offer at our university. This paper is an experience report about using AIA in our camps. We provide a detailed description of designing our camps with AIA including the process of selecting and setting-up an Android device and instructional materials that we developed and made available to everyone. We evaluated our camps through surveys to determine the effects on the students. We found that there was mostly a slight increase in the favorable disposition towards computing. We also share our successes with using AIA and what still needs improvement for wider use.	App inventor for android: report from a summer camp	NA	2018
Barbara Ericson:Tom McKlin	universities. But, it is not enough to offer computing summer camps and hope that students like them. The camps should be effective by some measure, such as broadening participation by underrepresented groups and/or increasing learning. Summer camps should also be financially sustainable, so that institutions can continue to offer them regularly. The summer camps at Georgia Tech have become effective and financially sustainable. This paper presents the rationale for our camps, the evaluation results that demonstrate positive attitude changes and increases in learning, and the business model that makes them financially sustainable. It also reports on the evaluation results from seven other colleges and universities in Georgia that offered computing summer camps during the summer of 2011 with assistance from Georgia Tech.	Effective and sustainable computing summer camps	NA:NA	2018
Timothy A. Davis	This paper describes the principles, implementation, and results of a weeklong summer science course for junior high and high school students interested in computer science. To motivate and foster interest and creativity in students, while providing adequate complexity to introduce programming concepts and techniques, we used programming projects in computer graphics as the main learning tool. Included in our discussion are experiences across three course offerings, as well as detailed course assignments.	A summer science experience with computer graphics for secondary students	NA	2018
Ariel Ortiz	NA	Session details: Paper: software engineering	NA	2018
Chase Felker:Radka Slamova:Janet Davis	We report our experiences using the Scrum agile software development method in an undergraduate user-centered web development project. Our chief contributions are to report on using Scrum in a summer research setting as distinct from academic-year coursework and to consider the integration of Scrum and user experience (UX) development methods in a learning environment. Our experience with combining Scrum and UX was positive: this methodology gave our project a clear structure, kept us motivated, and focused us on developing a usable final product. We discuss our adaptations of Scrum to UX development and to the summer research setting, along with challenges we faced and lessons learned, to inform students and faculty who wish to apply such methods in future projects.	Integrating UX with scrum in an undergraduate software development project	NA:NA:NA	2018
Peter J. Clarke:Jairo Pava:Debra Davis:Frank Hernandez:Tariq M. King	There continues to be a lack of adequate training for students in software testing techniques and tools at most academic institutions. Several educators and researchers have investigated innovative approaches that integrate testing into programming and software engineering (SE) courses with some success. The main problems are getting other educators to adopt their approaches and ensuring students continue to use the techniques they learned in previous courses. In this paper we present a study that evaluates a non-intrusive approach to integrating software testing techniques and tools in SE courses. The study uses a Web-Based Repository of Software Testing Tools (WReSTT) that contains tutorials on software testing concepts and tools. The results of the study show that (1) students who use WReSTT in the classroom can improve their understanding and use of testing techniques and tools, (2) students find WReSTT a useful learning resource, and (3) the collaborative learning environment motivates students to complete assignments.	Using WReSTT in SE courses: an empirical study	NA:NA:NA:NA:NA	2018
Shvetha Soundararajan:Amine Chigani:James D. Arthur	The use of agile principles and practices in software development is becoming a powerful force in today's workplace. In our quest to develop better products, therefore, it is imperative that we strive to learn and understand the application of agile methods, principles and techniques to the software development enterprise. Unfortunately, in many educational institutions, courses and projects that emphasize agile software development are minimal. At best, students have only limited exposure to the agile philosophy, principles and practices at the graduate and undergraduate levels of education. In an effort to address this concern, we offered an advanced graduate-level course entitled "Agile Software Engineering" in the Department of Computer Science at Virginia Tech. The primary objectives of the course were to introduce the values, principles and practices underlying the agile philosophy, and to do so in an atmosphere that encour-ages debate and critical thinking. The course was designed around three central components: (1) teaching the essentials of how one develops a product within an agile framework, (2) having invited talks by notable industry experts, and (3) having students present and discuss current agile research topics and issues. This paper describes our experiences during the offering of that course, and in particular, the unique perspectives of the class instructor, the teaching assistant and a student who was enrolled in the course.	Understanding the tenets of agile software engineering: lecturing, exploration and critical thinking	NA:NA:NA	2018
Owen Astrachan	NA	Session details: Special session	NA	2018
Owen Astrachan:Ralph Morelli:Dwight Barnette:Jeff Gray:Chinma Uche:Bill Cowles:Rebecca Dovi	NA	CS principles: piloting a national course	NA:NA:NA:NA:NA:NA:NA	2018
Pat Yongpradit	NA	Session details: Special session	NA	2018
Pat Yongpradit	Microsoft XNA Game Studio and C# provide the basis of an advanced high school or introductory post-secondary game development computer science course. Game development is serious computer science. The curriculum tools enable students to create games, simulations, and applications for the PC, Xbox 360, Windows Phone, and Kinect that expand students' skills in complex logic, object oriented programming (OOP), advanced algorithms, and data structures.	Fun, phone, and the future: Microsoft XNA game studio, Windows phone, and Kinect SDK	NA	2018
Michael K√∂lling	NA	Session details: Special Session	NA	2018
Michael K√∂lling:Ian Utting	Many initiatives in improving learning of programming are based on gut instinct or localised experience. Gathering data as a basis for interventions, especially on a large scale, is hard. The BlueJ environment is being instrumented to collect data useful to a variety of educational programming researchers. BlueJ is ideally placed to collect such data: Users number in the millions, situated all over the world. This volume and diversity is unique in the history of such investigations and presents a significant opportunity for researchers. The data will be open to interested research groups, which will enable a wide variety of investigations that were previously impractical. This session presents work to date and solicits input from researchers about the design of the data collection.	Building an open, large-scale research data repository of initial programming student behaviour	NA:NA	2018
Adrian German	NA	Session details: Paper: collaborative learning	NA	2018
Alex Radermacher:Gursimran Walia:Richard Rummelt	Pair Programming has been shown to be beneficial to student learning. Much research has been conducted to effectively create student pairs when using pair programming in introductory computer science courses. This paper reports results of research investigating the effectiveness of pairing students based on their mental model consistency. Prior research has found a strong correlation between mental model consistency and performance in introductory computer programming courses. Evaluating students' mental models helps to provide insights into how students approach problem solving and may indicate how to effectively pair students to improve their programming ability and learning. The results from an empirical study conducted to investigate these effects indicate that mental model consistency is a predictor of student success in an introductory programming course. Future goals of this research are to fully evaluate all possible pairing arrangements and to produce tests that can be used to evaluate mental model consistency for other computer science concepts.	Assigning student programming pairs based on their mental model consistency: an initial investigation	NA:NA:NA	2018
David Socha	This paper reports on two simple innovations that helped create a more authentic and engaging modeling experience in an undergraduate Analysis and Design course: (a) having each team of students act both as modelers for another team, and as customers for another team, and (b) providing each team with their own whiteboard. The results from their use throughout the course, and for a single use of the whiteboards in a Computing Technology and Public Policy course, were quite positive. They resulted in a qualitatively different experience noticeable both to the instructors and the students. While some students were initially reluctant to use the whiteboards, by the end of the course most students were enthusiastic about their use.	Group whiteboards and modeler/customer teams: getting closer to industrial-style collaboration in a classroom	NA	2018
Randy W. Connolly	A variety of researchers have advocated for service learning projects in post-secondary computing programs. While these projects can achieve important disciplinary outcomes for the students, what has been under examined is the benefit that these projects have for the service recipients and their community. This paper argues that since service learning projects are meant to benefit both student donors and community recipients, we must examine much more carefully how computing service projects interact with all the social actors affected by the projects. Taking such an approach will require recognizing that ICT by itself will not improve or increase democracy, equality, social inclusion, or any other social good. Analogous to the experience of foreign aid recipients in the developing world, some service learning projects may actually do more harm than good. The paper concludes by providing some sample computer learning projects that are oriented more strongly towards achieving true service for the recipients.	Is there service in computing service learning?	NA	2018
Colleen Lewis	NA	Session details: Paper: curriculum issues	NA	2018
Tim Bell:Peter Andreae:Anthony Robins	Computer science became available as a nationally assessed topic in NZ schools for the first time in 2011. We review the introduction of computer science as a formal topic, including the level of adoption, issues that have arisen in the process of introducing it, and work that has been undertaken to address those issues.	Computer science in NZ high schools: the first year of the new standards	NA:NA:NA	2018
Su White:Michalis Vafopoulos	This paper discusses the role and place of Web Science in the computing disciplines. It provides an account of work which has been established towards defining an initial curriculum for Web Science. It presents and analyses plans for future curriculum developments utilizing novel methods to support and elaborate curriculum definition and review. The findings of a desk survey of Web Science education are presented. The paper then recommends future activities which may help determine whether we should expand the notion of computer science.	Web science: expanding the notion of computer science	NA:NA	2018
John Barr:Ali Erkan	We designed a system where non-computational faculty members (along with undergraduates) enroll in an introductory, multidisciplinary, open source Geographic Information System (GIS) course to experience integrative learning as students. The faculty participants are subsequently required to integrate their newly acquired expertise with their own disciplinary teaching and research; the necessary time commitment is compensated by a three-credit teaching load reallocation. Our hypothesis is that increasing the general faculty's appreciation of computation (in the context of integrative learning) is an indirect yet effective and scalable way to reach a wider group of students to convey our fundamental disciplinary message: computing is more than programming and computing empowers people.	Educating the educator through computation: what GIS can do for computer science	NA:NA	2018
Robert England	NA	Session details: Paper: active learning I	NA	2018
Paul Carter	We describe an experience using online multimedia instruction and just-in-time teaching in an introductory programming course. Survey data has shown that students are strongly in favour of the approach. A series of screencasts was developed to replace the traditional lecture component of the course. Students were asked to review a small number of screencasts before each class and were assessed on their comprehension at the start of class using a series of "clicker" questions. A just-in-time mini-lecture was provided in response to the initial assessment, on an as-needed basis. The remaining class time was devoted to small-group exercises.	An experience report: on the use of multimedia pre-instruction and just-in-time teaching in a CS1 course	NA	2018
Alexandra Martinez	This paper describes our experience using the Just-in-Time Teaching (JiTT) technique in an undergraduate database course for computer science majors during two semesters. JiTT was implemented by giving the students reading assignments and asking them to complete web-based reading tests the day before class, so that the teacher could detect weaknesses in students' understanding of the material and adjust the lesson plan just in time for the next day class. Based on surveys as well as on exams and course grades, we found a significant improvement on the students' interest in the course and learning of the material.	Using JITT in a database course	NA	2018
Clifton Kussmaul	This paper describes an ongoing project to develop activities for computer science (CS) using process oriented guided inquiry learning (POGIL). First, it reviews relevant background on effective learning and POGIL, compares POGIL to other forms of active learning, and describes the potential of POGIL for CS. Second, it describes a sample POGIL activity, including the structure and contents, student and facilitator actions during the activity, and how activities are designed. Third, it summarizes current progress and plans for a NSF TUES project to development POGIL materials for CS. Finally, it discusses student feedback and future directions.	Process oriented guided inquiry learning (POGIL) for computer science	NA	2018
James Early	NA	Session details: Paper: communication skills	NA	2018
Katrina Falkner:Nickolas J.G. Falkner	Computer Science majors must be able to communicate effectively. Industry surveys identify the development of communication and critical thinking skills as key to the reform of the higher education sector. However, academics are challenged by time and discipline content pressures, as well as a lack of familiarity with the teaching and assessment of communication skills content. There is considerable existing work in the area of communication skills development, positioned both in terms of curriculum guidelines for effective communication skills development, and example communication skills activities. However, this research is deficient in detailed, contextualised methodologies and frameworks for the development of communication skills within the Computer Science curriculum. We present a new methodology, building upon well established theoretical frameworks, designed to assist academics in the development of communication skills activities integrated with discipline content across the curriculum. We illustrate this methodology in the design of a CS1/CS2 communication skills course.	Integrating communication skills into the computer science curriculum	NA:NA	2018
Laurie Murphy:Ren√©e McCauley:Sue Fitzgerald	This paper reports on the replication of a study of novice programmers, looking for relationships between ability to 'explain in plain English' the meaning of a code segment and success in writing code later in the semester. This study explores the question in a different learning environment and qualitatively evaluates 'explain in plain English' responses to identify implications for teaching. Statistical results from this study are similar to those of the earlier work. Results highlight students' fragile knowledge, particularly for students excluded from the primary analyses by a set of screening questions, and suggest the need for assessment and instruction of basic concepts later into the term than instructors are likely to expect.	'Explain in plain English' questions: implications for teaching	NA:NA:NA	2018
Andrew Luxton-Reilly:Daniel Bertinshaw:Paul Denny:Beryl Plimmer:Robert Sheehan	Recent interest in student-centric pedagogies have resulted in the development of numerous tools that support student generated questions. Previous evaluations of such tools have reported strong correlations between student participation and exam performance, yet the level of student engagement with other learning activities in the course is a potential confounding factor. We show such correlations may be explained by other factors, and we undertake a deeper analysis that reveals evidence of the positive impact question-generation activities have on student performance.	The impact of question generation activities on performance	NA:NA:NA:NA:NA	2018
Suzanne Westbrook	NA	Session details: Special session	NA	2018
Victor Piotrowski:Suzanne Westbrook:Mimi McClure:Jeff Forbes:Harriet Taylor	This session highlights programs in the National Science Foundation's Division of Undergraduate Education, Office of Cyberinfrastructure and Directorate of Computer and Information Science and Engineering. The focus is on providing descriptions of several programs of interest to college faculty and discussing the requirements and guidelines for programs in these areas. It includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA:NA	2018
Lester Wainwright	NA	Session details: Teaching outside the text	NA	2018
Renee Ciezki:Robert Glen Martin:Barbara Ericson:Lester Wainwright	We know that students bring diverse experiences and an assortment of learning styles into our classrooms. We greet them and hand out a syllabus listing the required textbook(s). One size does not fit all when it comes to textbooks. In this session, participants will discover teaching activities that can be used to supplement any computer science textbook. These activities include human modeling and role playing, interactive whiteboard activities, case studies, class projects, games, and more. By exploring "extra" activities not found in most textbooks, participants will learn how these hands-on, interesting and fun activities can help students understand the topics listed in the AP Computer Science A Course Description: Object-oriented Program Design, Program Implementation, Program Analysis, Standard Data Structures, Standard Algorithms, and Computing in Context. Student attention spans seem to be getting shorter. The panelists found themselves spending more and more time searching for and/or developing supplemental resources in efforts to reach and retain students. Members of the AP Computer Science-A Development Committee will share these resources and lead a discussion of proven strategies and lesson ideas for teaching outside the textbook.	Teaching outside the text	NA:NA:NA:NA	2018
John Impagliazzo	NA	Session details: Special session	NA	2018
John Impagliazzo:Susan Conry:Eric Durant:Andrew McGettrick:Mitch Thornton:Timothy Wilson	In early 2011, the ACM and the IEEE Computer Society (IEEE/CS) created the CE2004 Review Task Force (RTF) and charged it with the task of reviewing and determining the extent to which the document "Curriculum Guidelines for Undergraduate Degree Programs in Computer Engineering," produced 2004 December 12 and known as CE2004 [1] required revisions. The RTF submitted a report to both societies in July of 2011. The report summarized a survey of academic and industry constituents conducted by the RTF. It recommended keeping the structure and the vast majority of the content of the original CE2004 document. However, it also recommended that contemporary topics should be strengthened or added while de-emphasizing other topics that appeared to be waning from the curricular mainstream of computer engineering. Additionally, the RTF recommended that the two societies form a joint special-purpose committee to update and edit the earlier document and to seek input and review from the computer engineering industrial and academic communities through presentations and workshops co-located at major conferences. The presenters of this special session were members of the 2011 RTF and two presenters were members of the original curricular task force from 2004. The presentation will provide insights in the RTF findings and thoughts on how a future computer engineering report might evolve.	Computer engineering review task force report	NA:NA:NA:NA:NA:NA	2018
Jeff Gray	NA	Session details: Paper: projects	NA	2018
Lisa Bender:Gursimran Walia:Krishna Kambhampaty:Kendall E. Nygard:Travis E. Nygard	Team work is the norm in major development projects and industry is continually striving to improve team effectiveness. Researchers have established that teams with high levels of social sensitivity tend to perform well when completing a variety of specific collaborative tasks. Social sensitivity is the personal ability to perceive, understand, and respect the feelings and viewpoints of others, and it is reliably measurable. However, the tasks in recent research have been primarily short term, requiring only hours to finish, whereas major project teams work together for longer durations and on complex tasks. Our claim is that, social sensitivity can be a key component in predicting the performance of teams that carry out major projects. Our goal is to determine if previous research, which was not focused on students or professionals in scientific or technical fields, is germane for people in computing disciplines. This paper reports the results from an empirical study that investigates whether social sensitivity is correlated with the performance of student teams on large semester-long projects. The overall result supports our claim that the team social sensitivity is highly correlated with successful team performance. It suggests, therefore, that educators in computer-related disciplines, as well as computer professionals in the workforce, should take the concept of social sensitivity seriously as an aid or obstacle to productivity.	Social sensitivity and classroom team projects: an empirical investigation	NA:NA:NA:NA:NA	2018
Shimon Schocken	Engaging students in large system development projects is an important educational objective, since it exposes design and programming challenges that come to play only with scale. Alas, large scale system projects can be monstrously complex - to the extent of being infeasible in academic settings. We describe a set of principles and a framework that enable students to develop large-scale systems, e.g. a complete hardware platform or a compiler, in several semester weeks.	Taming complexity in large-scale system projects	NA	2018
Heidi J.C. Ellis:Michelle Purcell:Gregory W. Hislop	Free and Open Source Software (FOSS) offers a transparent development environment and community in which to involve students. Students can learn much about software development and professionalism by contributing to an on-going project. However, the number of FOSS projects is very large and there is a wide range of size, complexity, domains, and communities, making selection of an ideal project for students difficult. This paper addresses the need for guidance when selecting a FOSS project for student involvement by presenting an approach for FOSS project selection based on clearly identified criteria. The approach is based on several years of experience involving students in FOSS projects.	An approach for evaluating FOSS projects for student participation	NA:NA:NA	2018
Kelly Powers	NA	Session details: Paper: alice and scratch	NA	2018
Susan Rodger:Melissa Dalis:Chitra Gadwal:Jenna Hayes:Peggy Li:Francine Wolfe:Wenhui Zhang:Liz Liang	For four years we have been integrating computing into a variety of middle school disciplines via the Alice programing language. Early on we focused on creating curriculum materials for teachers to use in teaching the basic programming and animation concepts. This paper describes our efforts over the past two years in creating model projects for students to build in all disciplines, and our most recent focus on science and mathematics projects. For science we have introduced experiments in Alice and the tools needed for them. In mathematics we have created projects to increase their understanding of programming and to use the projects to increase their understanding of mathematics. We also discuss our efforts in workshops to teach K-12 teachers Alice and an analysis of the teachers' lesson plans and worlds developed in the most recent workshop.	Integrating computing into middle school disciplines through projects	NA:NA:NA:NA:NA:NA:NA:NA	2018
Linda Werner:Shannon Campe:Jill Denner	Programming environments that incorporate drag-and-drop methods and many pre-defined objects and operations are being widely used in K-12 settings. But can middle school students learn complex computer science concepts by using these programming environments when computer science is not the focus of the course? In this paper, we describe a semester-long game-programming course where 325 middle school students used Alice. We report on our analysis of 231 final games where we measured the frequency of successful execution of programming constructs. Our results show that many games exhibit successful uses of high level computer science concepts such as student-created abstractions, concurrent execution, and event handlers.We discuss the implications of these results for designing effective game programming courses for young students.	Children learning computer science concepts via Alice game-programming	NA:NA:NA	2018
Quinn Burke:Yasmin B. Kafai	This study investigates the potential to introduce basic programming concepts to middle school children within the context of a classroom writing-workshop. In this paper we describe how students drafted, revised, and published their own digital stories using the introductory programming language Scratch and in the process learned fundamental CS concepts as well as the wider connection between programming and writing as interrelated processes of composition.	The writers' workshop for youth programmers: digital storytelling with scratch in middle school classrooms	NA:NA	2018
Douglas Kranch	NA	Session details: Paper: active learning II	NA	2018
Matti Luukkainen:Arto Vihavainen:Thomas Vikberg	Data Structures (CS2) courses and course books do not usually put much emphasis in the process of how a data structure is engineered or invented. Instead, algorithms are readily given, and the main focus is in the mathematical complexity analysis of the algorithms. We present an alternative approach on presenting data structures using worked examples, i.e., by explicitly displaying the process that leads to the invention and creation of a data stucture and its algorithms. Our approach is heavily backed up by some of the best programming practices advocated by the Agile and Software Craftsmanship communities. It brings the often mathematically oriented CS2 course closer to modern software engineering and practical problem solving, without a need for compromise in proofs and analysis.	A software craftsman's approach to data structures	NA:NA:NA	2018
Jordi Petit:Omer Gim√©nez:Salvador Roura	Jutge.org is an open access educational online programming judge where students can try to solve more than 800 problems using 22 programming languages. The verdict of their solutions is computed using exhaustive test sets run under time, memory and security restrictions. By contrast to many popular online judges, Jutge.org is designed for students and instructors: On one hand, the problem repository is mainly aimed to beginners, with a clear organization and gradding. On the other hand, the system is designed as a virtual learning environment where instructors can administer their own courses, manage their roster of students and tutors, add problems, attach documents, create lists of problems, assignments, contests and exams. This paper presents Jutge.org and offers some case studies of courses using it.	Jutge.org: an educational programming judge	NA:NA:NA	2018
Javier de San Pedro:Josep Carmona:Jordi Cortadella:Jordi Petit	This paper investigates the use of formal verification techniques to create online judges that can assist in teaching logic circuit design. Formal verification not only contributes to give an exact assessment about correctness, but also saves the instructor the tedious task of designing test cases. The paper explains how formal verification has been integrated in an online judge. It also describes the courseware created for a course on logic circuits and the successful experience of using it in a one-week summer course with students from secondary and high school.	Integrating formal verification in an online judge for e-Learning logic circuit design	NA:NA:NA:NA	2018
Derek Schuurman	NA	Session details: Paper: non-majors	NA	2018
Joel C. Adams:Randall J. Pruim	One of the challenges facing the U.S. technological workforce is that as fewer students take computing courses, fewer college graduates are being prepared for computing careers. Besides trying to attract more CS majors, another approach is to (i) design a computing curriculum that appeals to students and faculty from other (non-CS) disciplines, (ii) use special scholarships to attract students to that curriculum, and (iii) sponsor faculty development workshops for non-CS departments. In this paper, we detail this approach, using a new introductory course oriented to science majors, and scholarships funded by the National Science Foundation Scholarships for Science, Technology, Engineering, and Mathematics (NSF S-STEM) program to motivate non-CS majors to take CS courses. We also present several success stories that this approach has produced in its first two years.	Computing for STEM majors: enhancing non CS majors' computing skills	NA:NA	2018
Barbara M. Anthony	Operations research, while not traditionally taught at many small or liberal arts colleges, can be a significant asset to the offerings of a computer science department. Often seen as a discipline at the intersection of mathematics, computer science, business, and engineering, it has great interdisciplinary potential and practical appeal, allowing for recruitment of students who may not consider taking a CS0 or CS1 course. A special topics course in operations research was offered by the computer science department at Southwestern University as an upper-level elective, and it was also cross-listed as a business and mathematics elective. Not only did the course benefit computer science majors who appreciated the applications and different perspectives, but it provided a means for the department to serve a wider population, increased interdisciplinary education, and resulted in a filled-to-capacity upper-level course in computer science for the first time in recent memory. This course is now being considered as a permanent elective that will interest computer science majors and minors as well as draw in students from disciplines across campus. For departments with limited faculty resources for teaching non-major courses, offering an operations research course provides an alternative that simultaneously serves the department and the campus as a whole.	Operations research: broadening computer science in a liberal arts college	NA	2018
Jeff Cramer:Bill Toll	In the process of revising our general education course, which is required of a large fraction of students, we attempted to answer the question "What should a graduate of a liberal arts university understand about computational technology?" As computing technology has impacted and created drastic change in nearly all aspects of everyday life, university students may know more about narrow areas of technology but the true impact on their lives cannot be understood without an appreciation for the nature and limitations of the technology. This paper presents a set of assumptions about the impact of technology on individuals and society and describes elements of a computing context designed to enable students to critically evaluate the technology that has such an impact on their lives. Assessment of the approach indicates that students are more aware of the impact of technology and the importance of an understanding of the technology.	Beyond competency: a context-driven CSO course	NA:NA	2018
Nick Parlante	NA	Session details: Special session	NA	2018
Nick Parlante:Julie Zelenski:Daniel Zingaro:Kevin Wayne:Dave O'Hallaron:Joshua T. Guerin:Stephen Davies:Zachary Kurmas:Keen Debby	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Amy Briggs	NA	Session details: Special session	NA	2018
Owen Astrachan:Amy Briggs:Jan Cuny:Lien Diaz:Chris Stephenson	The CS Principles Project is a collaborative effort to develop a new introductory course in computer science, accessible to all students. Computer Science educators at all levels have worked together on the development of the new curriculum under the direction of the College Board with support from the National Science Foundation. This special session provides an opportunity for the CS Principles project leaders to report on recent updates and new directions, and to engage in discussion on all aspects of the project with SIGCSE participants	Update on the CS principles project	NA:NA:NA:NA:NA	2018
Wendy DuBow	NA	Session details: Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA	2018
Wendy DuBow:Elizabeth Litzler:Maureen Biggers:Mike Erlinger	While many computing departments may be aware there are "promising" and "proven" practices for recruiting and retaining female students, there seems to be a drive to try new and novel approaches rather than use what is known, or strongly suspected, to be effective. Developing a diverse student body is a long-term multi-faceted process that includes active recruitment, inclusive pedagogy, meaningful curriculum and necessitates student, faculty and institutional support, as well as assessment of progress [1,2,3]. Given all the moving parts and intrinsic challenges of enacting change, departments could make it easier on themselves - and very likely achieve better results - if they intentionally and systematically used practices that have been shown to be effective. This panel will present the rationale for implementing evidence-based practices to increase female enrollments in undergraduate computing departments, and share evidence of successes. Wendy DuBow will examine the concept of evidence-based practices as well as describe briefly the research-based approaches taken by the National Center for Women & Information Technology (NCWIT) to identify the evidence-based practices an academic institution could use and distribute easy-to-use materials explaining such practices. Elizabeth Litzler will supplement this rationale by sharing compelling evaluation data that show that academic departments that implement a variety of evidence-based practices and actively seek to increase their female enrollments actually do see increases. Maureen Biggers will describe her department's recent efforts to increase female undergraduates at Indiana University, which enabled them to double the number of new female majors. Mike Erlinger will discuss Harvey Mudd's recent successes in attracting more Computer Science majors overall, including a large percentage of female students.	Implementing evidence-based practices makes a difference in female undergraduate enrollments	NA:NA:NA:NA	2018
Tim Bell	NA	Session details: Paper: high school collaborations	NA	2018
Antti-Jussi Lakanen:Ville Isom√∂tt√∂nen:Vesa Lappalainen	In our faculty we have run week-long K-12 game programming courses now for three summers. In this paper we investigate what programming-related activities students do after they take a course, and what factors in the students' background relate to post-course programming. We also investigate a possible change in the students' interest towards higher education science studies. We find that most students continue programming after the course and that their interest towards science studies keeps increasing. In student background we observed some indicative trends, but did not find reliable explaining factors related to post-course programming or increased interest towards science studies.	Life two years after a game programming course: longitudinal viewpoints on K-12 outreach	NA:NA:NA	2018
Renate Thies:Jan Vahrenhold	To provide a unified view of any scientific field, outreach programs need to realistically portray the subject in question. Consequently, topics and methods actually taught in Computer Science courses should to be touched upon in Computer Science outreach programs or, conversely, elements from successful Computer Science outreach programs can be used to enrich established courses in Computer Science. We follow up on the latter aspect and investigate how outreach material might be used as a teaching resource in lower secondary Computer Science. In particular, we extract and classify learning objectives from the activities of the well-received Computer Science Unplugged program. Based upon this classification, we comment on where and to which extent these activities can be used to enrich teaching Computer Science in secondary education.	Reflections on outreach programs in CS classes: learning objectives for "unplugged" activities	NA:NA	2018
Ambareen Siraj:Martha J. Kosa:Summer-Mistine Olmstead	In this paper, we describe the Tennessee Technological University (TTU) Tapestry Workshop for high school (HS) teachers. The Tapestry Workshop initiative - a collaborative partnership between TTU, the University of Virginia (UVA) and HS teachers - shares strategies, practices, and innovative ideas for teaching Computer Science (CS) effectively. This three-day professional development workshop utilized informational, technical, networking, activity-, and discussion-oriented sessions geared towards attracting and engaging a diverse body of CS students. The workshop was a worthwhile professional development activity for both the organizers and attendees and contributed to the initiation of a local HS CS program.	Weaving a tapestry: creating a satellite workshop to support HS CS teachers in attracting and engaging students	NA:NA:NA	2018
Lijun Ni:Mark Guzdial	Quality computer science (CS) teachers are critical for secondary computing education. In addition to increasing the number of high school (HS) CS teachers, there is a great need for supporting those teachers to grow and stay as committed, effective teachers. Recent literature on teacher education suggests that teachers' sense of commitment and (other aspects of) teaching profession is tightly linked with their teacher identity. However, the current educational system in the U.S. does not provide typical contexts for teachers to build a sense of identity as CS teachers. This study is intended to gain an initial understanding of CS teachers' perceptions about their own professional identity and potential factors that might contribute to these perceptions. Our findings indicate that current HS teachers teaching CS courses do not necessarily identify themselves as CS teachers. They have different perceptions related to CS teaching. Four kinds of factors can contribute to these perceptions: teachers' educational background and certification, CS curriculum and department hierarchy, availability of CS teacher community, and teachers' perceptions about the field of CS.	Who AM I?: understanding high school computer science teachers' professional identity	NA:NA	2018
Jodi Tims	NA	Session details: Paper: parallelism and concurrency	NA	2018
Dan Grossman:Ruth E. Anderson	We report on our experience integrating a three-week introduction to multithreading in a required data structures course for second-year computer science majors. We emphasize a distinction between parallelism and concurrency that teaches students to use extra processors effectively and enforce mutual exclusion correctly. The material fits naturally in the data structures course by having the same mix of algorithms, programming, and asymptotic analysis as the conventional, single-threaded part of the course. Our department has used this unit for 1.5 years and will do so indefinitely. We report feedback from students, multiple instructors for the course, and students in a later course that uses threads. We developed a full set of course materials that have been adapted for use by instructors in various courses at five other institutions so far.	Introducing parallelism and concurrency in the data structures course	NA:NA	2018
Brian W. Rague	Laboratory work in the CS classroom is intended to solidify essential concepts and core design principles. Because of recent advances and the widespread adoption of multicore technologies, one area of investigation that has become increasingly important across all levels of CS instruction is parallel computing. This paper describes the initial version of the Parallel Analysis Tool (PAT), a pedagogical tool designed to assist undergraduate students in visualizing concurrency and effectively connecting parallel processing to applied coding strategies. The PAT is a complete Java development environment, with an emphasis on (1) helping students to identify appropriate code locations where parallelization can be applied and (2) allowing students to subsequently examine the practical performance tradeoffs of these parallelization decisions in a laboratory setting. The Parallel Quotient (PQ), a fundamental dimensionless metric generated by the PAT, supports the student's conceptual understanding and analysis of the relative benefits of employing various parallel programming strategies.	Exploring concurrency using the parallel analysis tool	NA	2018
Elizabeth Shoop:Richard Brown:Eric Biggers:Malcolm Kane:Devry Lin:Maura Warner	The reality of multicore machines as a standard and the prevalence of distributed cloud computing has signaled a need for parallel and distributed computing to become integrated into the computer science curriculum. At the same time, operating system virtualization has become a common technique with open standard tools available to any practitioners. Virtual machines (VMs) installed on available computer lab resources can be used to simulate high-performance cluster computing environments. This paper describes two such virtual clusters in use at small colleges, demonstrates their effectiveness for parallel computing education, and provides information about how to obtain the VMs for use in an educational lab setting. We have used these clusters to introduce parallelism into several courses in our undergraduate curriculum.	Virtual clusters for parallel and distributed education	NA:NA:NA:NA:NA:NA	2018
Chris Lupo:Zoe J. Wood:Christine Victorino	Massively parallel Graphics Processing Unit (GPU) hardware has become increasingly powerful, available and affordable. Software tools have also advanced to the point that programmers can write general purpose parallel programs that take advantage of the large number of compute cores available in the hardware. With literally hundreds of compute cores available on a single device, program performance can increase by orders of magnitude. We believe that introducing students to the concepts of parallel programming for massively parallel hardware is of increasing importance in an undergraduate computer science curriculum. Furthermore, we believe that students learn best when given projects that reflect real problems in computer science. This paper describes the experience of integrating two undergraduate computer science courses to enhance student learning in parallel computing concepts. In this cross teaching experience we structured the integration of the courses such that students studying parallel computing worked with students studying advanced rendering for approximately 30% of the quarter long courses. Working in teams on a joint project, both groups of students were able to see the application of parallelization to an existing software project with both the benefits and complications exposed early in the curriculum of both courses. Motivating projects and performance gains are discussed, as well as student survey data on the effectiveness of the learning outcomes. Both performance and survey data indicate a positive gain from the cross teaching experience.	Cross teaching parallelism and ray tracing: a project-based approach to teaching applied parallel computing	NA:NA:NA	2018
Cyndi Rader	NA	Session details: Paper: mobile computing	NA	2018
Paul E. Dickson	Mobile application development is a hot topic in computer science education, and debate rages over which platform to develop on and what software to use for development. Cabana is a web-based application designed to enable development on multiple mobile platforms and to make application development easier. It uses an approach to application programming based on a wiring diagram that is supplemented with the ability to program directly using JavaScript. It is an ideal choice for application development in introductory computer science courses and for upper-level courses where the focus is on application design and not application programming. This paper introduces Cabana and describes its use in two different computer science courses.	Cabana: a cross-platform mobile development system	NA	2018
Victor Paul Pauca:Richard T. Guy	Socially relevant computing has recently been proposed as a way to reinvigorate interest in computer science. By appealing to students' interest in helping others, socially relevant computing aims to give students life-changing experiential learning not typically achieved in the classroom, while providing software that benefits society at large. For the last two years, the Wake Forest University Computer Science Department has been using mobile device programming, agile methods, and real-world, socially relevant projects for teaching software engineering in a liberal arts Computer Science curricula. We report on the teaching methods, student experiences, and products delivered by this approach. In particular, one of these products, Verbal Victor, is now a commercial and social entrepreneurship success in the field of assistive technology for communication disabilities.	Mobile apps for the greater good: a socially relevant approach to software engineering	NA:NA	2018
Derek Riley	In this work an approach employing the Android mobile phone platform in an upper division computer science course to teach Java programming and other advanced computer science topics is presented. Mobile phones are growing influences in the computing market, but their strengths and popularity are rarely exploited in computer science classrooms. The aim of the course is to harness this enthusiasm to improve fluency in the Java language to afford an opportunity to learn how to work on large, complex projects and to enhance the students' preparedness for the job market. The ideas presented in this work could be adapted for improving learning in many courses across the computing curriculum.	Using mobile phone programming to teach Java and advanced programming to computer scientists	NA	2018
Anthony Allevato:Stephen H. Edwards	Making computer science assignments interesting and relevant is a constant challenge for instructors of introductory courses. Android has become popular in these courses to take advantage of the increasing popularity of smartphones and mobile "apps." This has been shown to increase student engagement but it is only the first step, and we must continue to provide support for teaching methodologies that we have used in the past, such as test-driven development and automated assessment. We have developed RoboLIFT, a library that makes unit testing of Android applications approachable for students. Furthermore, by supporting existing automated grading techniques, we are able to sustain large student enrollments, and we evaluate the effects that using Android has had on student performance.	RoboLIFT: engaging CS2 students with testable, automatically evaluated android applications	NA:NA	2018
Demian Lessa	NA	Session details: Paper: visualization	NA	2018
James D. Teresco	It is often a challenge to find interesting and appropriate data sets to use as examples to demonstrate graph data structures and algorithms. Goals for the data are often conflicting. The data should include examples small enough to work through in a class example by hand, but some large enough to demonstrate important behaviors of a structure or algorithm. Data should be freely available in a convenient format and should have some real-world relevance. Visualization of the data and results computed from it is helpful. This paper describes a collection of graph data sets generated from the Clinched Highway Mapping Project's highway data and some examples of their use in undergraduate courses on data structures and algorithms. The source data, the process used to convert the data into a more useful format, some examples of its use, and a visualization tool using the Google Maps API, are described.	Highway data and map visualizations for educational use	NA	2018
Michael C. Orsega:Bradley T. Vander Zanden:Christopher H. Skinner	This paper presents the initial stages of a teaching tool named iSketchmate, intended for instructor use during lecture. iSketchmate allows users to create and manipulate splay trees through an animated GUI. It improves upon existing tools by providing (1) the ability to begin with any user-defined tree, (2) a history mechanism so tree operations can be repeated or changed, and (3) finer-grained animation within each operation so instructors may give further descriptions at intermediate steps within any given operation. Experiments showed iSketchmate users could produce significantly more diagrams and these diagrams were significantly more accurate than those made with pencil and paper.	Experiments with algorithm visualization tool development	NA:NA:NA	2018
Sarah Buchanan:Brandon Ochs:Joseph J. LaViola Jr.	We present CSTutor, a sketch-based interface designed to help students understand data structures. It currently supports Linked Lists, Binary Search Trees, AVL Trees, and Heaps, and creates an environment in which a user's sketched diagram and code are combined seamlessly. In each of the data structure modes, the user can naturally sketch a data structure on the canvas just as they would on the white board. CSTutor analyzes the user's diagrams in real time, and automatically generates code in a separate code view to reflect any changes the user has made. Additionally, the code can also be edited and any new code changes animate the data structure drawn on the canvas. The connection between the data structure drawn on the canvas and the code implementation is intended to bridge the gap between the conceptual diagram of a data structure and the actual implementation. We also present the results of a perceived usefulness survey. The results of the study indicate that the majority of students would find CSTutor helpful for learning data structures.	CSTutor: a pen-based tutor for data structure visualization	NA:NA:NA	2018
Jun Tao:Jun Ma:Melissa Keranen:Jean Mayo:Ching-Kuang Shene	This paper describes a visualization tool ECvisual that helps students understand and instructors teach elliptic curve based ciphers. This tool permits the user to visualize elliptic curves over the real field and over a finite field of prime order, perform arithmetic operations, do encryption and decryption, and convert plaintext to a point on an elliptic curve. The demo mode of ECvisual can be used for classroom presentation and self-study. With the practice mode, the user may go through steps in finite field computations, encryption, decryption and plaintext conversion. The user may compute the output for each operation check each answer for correctness. This helps students understand the primitive operations and how they are used in an elliptic curve cipher. The opportunity for self-study provides an instructor greater flexibility in selecting a lecture pace for this detail-filled material. Classroom evaluation was positive and very encouraging.	ECvisual: a visualization tool for elliptic curve based ciphers	NA:NA:NA:NA:NA	2018
Daniel Garcia	NA	Session details: Rediscovering the passion, beauty, joy, and awe: making computing fun again	NA	2018
Daniel D. Garcia:Barbara Ericson:Joanna Goode:Colleen Lewis	In 2006, computing education was suffering from a crisis - enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the 2007 SIGCSE Symposium, the ACM Education Board organized a special session to explore the underlying causes. In his keynote at the same conference, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to a series of room-packed sessions at the following four SIGCSE symposia to explore that idea from different angles. They have provided a forum for sharing: "What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to celebrate. "What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it. "How we should do it (pedagogy): Sharing how a change in attitude / focus / etc. can make strides to improving PBJA. Fortunately, enrollments have been continually rising, and there are colleges where the numbers are so strong (returning to historic highs), that some claim the crisis is over. Some point to "the Facebook Factor" as the source of inspiration for many young students, claiming this is a "Sputnik moment". Many dispute this, however, citing statistics that indicate under-represented students have not returned, and continuing negative connotations about the field. This PBJA "movement" was born out of this enrollment crisis, but is not tied to it. There is always value in sharing novel best practices and advocating techniques that make computing fun. In the past, we tried to gather educators who brought a wide variety of perspectives (e.g., in 2010 we heard from international, domestic, high school, university and industrial representatives). At recent sessions, we've shifted from that "breadth-first" model to a "depth-first" one. This year we have invited three educators who have worked tirelessly toward broadening participation of computing to underrepresented groups. The hope with this panel is to be able to explore best practices in outreach, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 5	NA:NA:NA:NA	2018
Helen Hu	NA	Session details: Special session	NA	2018
Helen H. Hu:Clifton Kussmaul	POGIL (Process Oriented Guided Inquiry Learning) is a type of learning based on the principle that students learn more when they construct their own understanding. Rather than teaching by telling, POGIL instructors provide activities that guide students to discover concepts on their own. Students work in groups, encouraging them to discuss their findings with their peers. Not only do students learn the material better, but the very process of discovery teaches them to be better problem solvers. This special session will provide SIGCSE attendees the opportunity to experience a POGIL activity for themselves. The presenters will share guided inquiry activities tested in our classrooms. We will discuss ways that POGIL may be used to transform computer science classes at all levels, from high school to graduate-level classes, from small schools to large universities.	Promoting student-centered learning with POGIL	NA:NA	2018
Blair Taylor	NA	Session details: Special session	NA	2018
Blair Taylor:Matt Bishop:Diana Burley:Steve Cooper:Ron Dodge:Robert Seacord	Software is critical to life in the 21st century. It drives financial, medical, and government computer systems as well as systems that provide critical infrastructures in areas such as transportation, energy, networking, and telecommunications. As the number and severity of attacks that exploit software vulnerabilities increase, writing reliable, robust, and secure programs will substantially improve the ability of systems and infrastructure to resist such attacks. Education plays a critical role in addressing cybersecurity challenges of the future, such as designing curricula that integrate principles and practices of secure programming into educational programs. To help guide this process, the National Science Foundation Directorates of Computer and Information Science and Engineering (CISE) and Education and Human Resources (EHR) jointly sponsored the Summit on Education in Secure Software (SESS), held in Washington, DC in October, 2010. The goal of this session is to share some of the key findings and challenges identified by the summit and to actively engage the community in the discussions. Each of the speakers participated in the summit and brings a unique viewpoint to the session.	Teaching secure coding: report from summit on education in secure software	NA:NA:NA:NA:NA:NA	2018
Nanette Veilleux	NA	Session details: Paper: attracting majors	NA	2018
Mike Richards:Marian Petre:Arosha K. Bandara	In this paper, we describe a new undergraduate module for novice students conducted entirely through distance learning: My Digital Life (TU100). The module has been designed to lower the barriers to creating programs that interact with the world; TU100's materials have been designed to excite, encourage, reassure and support learners who explore the novel topic of ubiquitous computing through playful experimentation. It introduces the fundamentals of computing by giving students the capability for programming a device, the SenseBoard, which has built-in input/output and sensors. Programming is done in Sense, an extension of Scratch, which scaffolds programming and reduces the syntax burden. TU100 has taken inspiration from childhood learning and commercial product design to produce compelling, yet academically rigorous study materials.	Starting with Ubicomp: using the senseboard to introduce computing	NA:NA:NA	2018
Michael Haungs:Christopher Clark:John Clements:David Janzen	Many computer science programs suffer from low student retention rates. At Cal Poly San Luis Obispo, academic performance and retention rates among first-year computer science students are among the lowest on campus. In order to remedy this, we have developed a new CS0 course featuring different "tracks" that students can choose from (e.g. robotics, gaming, music, mobile apps). This allows students to learn the basics of programming, teamwork, and college-level study in a domain that is of personal interest. In addition, the course relies on classic Project-based Learning (PBL) approaches as well as a focus on both academic and non-academic factors shown to increase student retention. Initial assessment demonstrates positive results in the form of increased academic performance in post CS0 courses and student retention.	Improving first-year success and retention through interest-based CS0 courses	NA:NA:NA:NA	2018
Sara Sprenkle:Shannon Duvall	Low undergraduate enrollments in computer science will not meet the future demand of employers. Some reasons for the low enrollments are computer science's nerdy image, lack of understanding of the field, and low motivation for learning programming. We propose to change the image of computer science by exposing students to applications of computing and its impact on their lives through reading and discussing recent news articles in 15 minutes of class. We call this component of our courses the Broader Issues in computer science. In this paper, we present our motivation for the Broader Issues component, how we implemented the component in CS0 and CS1 courses, and our evaluation of the component, including student reactions to and impact of the component.	Reshaping the image of computer science in only fifteen minutes (of class) a week	NA:NA	2018
William Mongan	NA	Session details: Paper: OS and distributed computing	NA	2018
Ariel S. Rabkin:Charles Reiss:Randy Katz:David Patterson	We describe our experiences teaching MapReduce in a large undergraduate lecture course using public cloud services. Using the cloud, every student could carry out scalability benchmarking assignments on realistic hardware, which would have been impossible otherwise. Over two semesters, over 500 students took our course. We believe this is the first large-scale demonstration that it is feasible to use pay-as-you-go billing in the Cloud for a large undergraduate course. Modest instructor effort was sufficient to prevent students from overspending. Average per-pupil expenses in the Cloud were under $45, less than half our available grant funding. Students were excited by the assignment: 90% said they thought it should be retained in future course offerings.	Experiences teaching MapReduce in the cloud	NA:NA:NA:NA	2018
Barry L. Kurtz:James B. Fenwick, Jr.:Philip Meznar	Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." The programming microlab approach was developed for a distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid). Since that time we have developed logical microlabs where students solve conceptual problems that do not involve programming. These are integrated into a Microlab Learning Cycle. We want our microlabs to be usable with a wide variety of computing devices, including tablets. After experimenting with different development environments we have adopted the Google Web Toolkit (GWT). After presenting the current status of our activities, we discuss future directions for microlab development. This work is supported, in part, by three National Science Foundation grants.	Developing microlabs using Google web toolkit	NA:NA:NA	2018
Jeremy Andrus:Jason Nieh	The computing landscape is shifting towards mobile devices. To learn about operating systems, it is increasingly important for students to gain hands-on kernel programming experience in these environments, which are quite different from traditional desktops and servers. We present our work at Columbia University to teach operating systems using Android, an open, commercially supported software platform increasingly used on mobile and embedded devices. We introduce a series of five Android kernel programming projects suitable for a one semester introductory operating systems course. Each project teaches a core operating system concept infused with Android or mobile device specific context, such as Android specific process relationships, use of sensors, and design considerations for resource constrained mobile devices. We also introduce an Android virtual laboratory based on virtual appliances, distributed version control, and live demonstrations which gives students hands-on Android experience, with minimal computing infrastructure. We have used these Android kernel programming projects and the Android virtual lab to teach an introductory operating systems course. Although this was our first time teaching the course using Android, over 80% of students surveyed enjoyed using Android and the majority of students preferred Android to traditional desktop development.	Teaching operating systems using android	NA:NA	2018
Michael Hewner	NA	Session details: Paper: curricular innovations and research	NA	2018
Christo Dichev:Darina Dicheva	Open content and open access to resources are important factors in the innovation of Computer Science education. This paper presents a study aimed at gaining an understanding of the needs of Computer Science educators in terms of Open Educational Resources (OER): what kind of resources they need, when they need them, how they use them, and what are the barriers and the enablers for using OER The results of the study are compared and analyzed in the context of the popular OER sites. The work contributes to the research on OER utilization and discovery.	Open educational resources in computer science teaching	NA:NA	2018
Yolanda Jacobs Reimer:Katherine Cennamo:Sarah A. Douglas	The goal of our research and teaching collaboration has been to learn more about how key aspects of pedagogy commonly incorporated in architecture and industrial design classes might positively impact the teaching of user interface (UI) design within a standard computer science curriculum. Toward that end, we studied a number of studio design courses, developed a set of curriculum guidelines, and analyzed the effectiveness of these guidelines as implemented in a UI design course. We discovered three emergent themes: 1) students need early and constant reminders that design is an iterative process involving user feedback and testing; 2) instructor modeling is critical; and 3) technology needs to be carefully managed at critical junctures throughout the class.	Emergent themes in a UI design hybrid-studio course	NA:NA:NA	2018
Dimitrios Charalampidis:James Haralambides	Traditional curricular structures can be fragmented in the sense that course inter-relationships or links between theories, methodologies, and practices, are not immediately recognized by the students. The completion of the course puzzle and the integration of course knowledge usually become evident only after graduation. In this paper, we describe a course/lab implementation that has offered students a unique opportunity to experience the full spectrum of course elements, namely, fundamentals of theory, algorithmic design, hardware design and simulation, and implementation and testing on programmable logic devices all within a single framework. The course/lab design has been a collaborative effort between the Dept. of Electrical Engr. (EE) at the University of New Orleans (UNO) and the Dept. of Math and Computer Science (CS) at Barry University (BU). This has helped ensure that the course/ lab offerings can be implemented successfully in diverse environments.	A multilevel, multidimensional undergraduate course and lab experience on embedded multimedia systems	NA:NA	2018
Yana Kortsarts	NA	Session details: Paper: CS education research	NA	2018
Elizabeth Ann Patitsas:Steven Andrew Wolfman	We report on best practices we have established to teach first-year computer science students in closed laboratories, founded on over three years of action research in a large introductory discrete mathematics and digital logic course. Our practices have resulted in statistically significant improvements in student and teaching assistant perception of the labs. Specifically, we discuss our practices of streamlining labs to reduce load on students that is extraneous to the lab's learning goals; establishing a positive first impression for students and TAs in the early weeks of the term; and effectively managing the teaching staff, including weekly preparation meetings for TAs using and a gradual, iterative curriculum development cycle that engages all stakeholders in the course.	Effective closed labs in early CS courses: lessons from eight terms of action research	NA:NA	2018
Joel C. Adams:Andrew R. Webster	Drag-and-drop learning environments like Alice (alice.org) and Scratch (scratch.mit.edu) eliminate syntax errors, making them attractive as ways to introduce programming concepts to students. Alice is closely associated with storytelling, Scratch was designed for creating music videos, and both can be used to create games. Having had students create each kind of project, we began to wonder: Do students learn different things creating games compared to music videos or stories? What programming constructs do students actually use (and hence learn well enough to be able to apply)? To answer these questions, we conducted a quantitative analysis of a collection of over 300 different student projects created using these tools. In examining different kinds of projects, we found significant differences in how frequently the students creating those projects used variables, if statements, loops, and dialog constructs.	What do students learn about programming from game, music video, and storytelling projects?	NA:NA	2018
Adam Anthony:Mitch Raney	Time to completion is a major factor in determining the total cost of a college degree. In an effort to reduce the number of students taking more than four years to complete a degree, we propose the use of Bayesian networks to predict student grades, given past performance in prerequisite courses. This is an intuitive approach because the necessary structure of any Bayesian network must be a directed acyclic graph, which is also the case for prerequisite graphs. We demonstrate that building a Bayesian network directly from the prerequisite graph results in effective predictions, and demonstrate a few applications of the resulting network in areas of identifying struggling students and deciding upon which courses a department should allocate tutoring resources. We find that many of our observations agree with what has long been considered conventional wisdom in computer science education.	Bayesian network analysis of computer science grade distributions	NA:NA	2018
Laurie Smith King:Dave Musicant	NA	Session details: Plenary session	NA:NA	2018
Fernanda Vi√©gas:Martin Wattenberg	Data visualization has historically been accessible only to the elite in academia, business, and government. It was "serious" technology, created by experts for experts. In recent years, however, web-based visualizations--ranging from political art projects to news stories--have reached audiences of millions. What will this new era of data transparency look like--and what are the implications for technologists who work with data? To help answer this question, we report on recent research into public data analysis and visualization. Some of our results come from Many Eyes, a "living laboratory" web site where people may upload their own data, create interactive visualizations, and carry on conversations. We'll also show how the art world has embraced visualization. We'll discuss the future of visual literacy and what it means for a world where visualizations are a part of political discussions, citizen activism, religious discussions, game playing, and educational exchanges.	Through the looking glass: talking about the world with visualization	NA:NA	2018
John Barr:Ananda Gunawardena	This workshop introduces an innovative social collaboration tool called Classroom Salon (CLS). Developed at Carnegie Mellon University, CLS is a combination of electronic books, social networks, and analytic tools. With CLS, instructors can upload documents, create social groups, and monitor student activities. Students can annotate documents, answer questions, and communicate in a social networks context. Students learn through participation in social networks while instructors use the tools built into CLS to easily and effectively analyze their participation. The workshop covers extant social networks, introduces CLS web-based software (nothing to install) and demonstrates the use of CLS to help students master critical skills such as code review, debugging, and reading documentation. Participants will create Salons, learn how to use them in their courses, and learn how to use the built-in tools to analyze student activities. A laptop with wifi is mandatory.	Using social networking to improve student learning through classroom salon (abstract only)	NA:NA	2018
Aman Yadav:John Tim Korb	This workshop will provide CS educators with tools to conduct educational research. Primary objectives of this workshop are: (1) learn basic principles of educational research; (2) learn about educational research designs: qualitative vs. quantitative; experimental vs. quasi-experimental; case studies, survey; and (3) to practice designing research. This workshop will help participants make informed decisions when faced with limitations of educational research and collect empirical evidence about what works in the classroom. In addition, we will also discuss how to develop robust student outcome measures, such as surveys and tests.	Challenges and opportunities in conducting educational research in the computer science classroom: how to collect empirical evidence to assess whether students really learned (abstract only)	NA:NA	2018
Joseph E. Hummel	As hardware designers turn to multi-core CPUs and GPUs, software developers must embrace parallel programming to increase performance. No single approach has yet established itself as the "right way" to develop parallel software. However, C++ has long been used for performance-oriented work, and it's a safe bet that any viable approach involves C++. This position has been strengthened by ratification of the new C++0x standard, officially referred to as "C++11". This workshop will introduce the new features of C++11 related to parallel programming, including type inference, lambda expressions, closures, multithreading support, and thread-local storage. The workshop will close with brief discussion of other technologies, including Intel TBB, ArBB, Cilk Plus, and Microsoft PPL, AAL, AMP. This is a laptop optional workshop.	C++11 in parallel (abstract only)	NA	2018
Stephen H. Edwards:Manuel A. Perez-Quinones	Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom. This workshop provides a practical introduction to JUnit for educators. JUnit is the Java testing framework that is most commonly used in the classroom. Participants will learn how to write and run JUnit test cases; how-to's for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()). Laptop recommended.	The absolute beginner's guide to JUnit in the classroom (abstract only)	NA:NA	2018
Tom Reichlmayr	Over the past ten years Agile software development practices have grown in acceptance and have gained a solid foothold in commercial software development. Our students are entering the workforce with an increasing percentage of companies that are using Agile processes and practices in the development of their products and services. The most widely used Agile project management framework is Scrum. Scrum has a well defined approach for organizing and controlling a software development project. It is almost always implemented in combination with Agile software development practices, but is flexible enough to even be used for managing non-software projects. Selecting Scrum as the framework for student team projects has the advantage of introducing software process at a level of ceremony that both captures foundational software engineering practices and is manageable within the constraints of a class or capstone project. This workshop will introduce participants to the components of the Scrum framework with activities designed to demonstrate the flexibility of Scrum to support a diverse set of course learning outcomes at all levels of the curriculum. Laptop optional	Student scrums (abstract only)	NA	2018
Sue C. Fitzgerald:Guy-Alain Amoussou	This workshop focuses on the NSF proposal review process. Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals. The workshop uses a structured guided-interactive methodology to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some expert opinion on these issues. Good and bad examples and a Top Ten List of Do's and Don't's will be provided. The intended audience is faculty members at two-year and four year colleges and universities who wish to better understand the NSF review process and/or those who are seeking NSF funding in support of undergraduate education. Participants will include people with little or no proposal reviewing experience, novice proposal writers, and those with more experience who seek to improve their proposal writing and/or reviewing skills. Laptop optional.	Reviewing NSF proposals (abstract only): learn about effective proposal writing via the review process	NA:NA	2018
Michael Rogers:Mark Goadrich	This workshop is designed for faculty, considering teaching a course in mobile app development, who are unsure as to whether they should use iOS, Android, or both. To help them make an educated decision, in this workshop participants will build one app, to implement the game Pig, in both platforms. By so doing, they will be able to make a head-to-head comparison of the respective development environments, languages, and frameworks, guided by experienced instructors. Participants will need to bring (or share) a recent-vintage MacBook Pro / MacBook Air, with Xcode, Eclipse, and appropriate SDKs, installed prior to the workshop. Details, including installation instructions, may be found at androidios.goadrich.com. Laptop Required.	A hands-on comparison of iOS vs. android (abstract only)	NA:NA	2018
Joseph Mertz:Scott McElfresh:Steven Andrianoff:Jennifer Dempsey	Service learning is a great idea, but can be fraught with problems. We have taken an alternative to the project-course approach. Instead of team-based system-development, we use a student-consultant model. Students individually consult with a nonprofit. Each student leads a small technology project that brings about sustainable change in an organization, while developing analysis, planning, and communication skills. One instructor can manage 30 clients a semester, and we have had nearly 400 to date. Our clients are happy and recruit others. In this session we will share our tricks and help attendees adapt them to their situations: managing a large number of partnerships, helping students develop leadership and communication skills, and assessing their performance. A student presenter will describe her consulting experience.	Killing 3 birds with one course: service learning, professional writing, and project management (abstract only)	NA:NA:NA:NA	2018
Tim Bell:Daniela Marghitu:Lynn Lambert	You've been asked to talk to an elementary or high school class about Computer Science, but how can you ensure that the talk is engaging? Or perhaps you're trying to introduce a concept from Computer Science to a school group, but you want a fun way to get the class engaged. This workshop is a hands-on introduction to Computer Science Unplugged (www.csunplugged.org), a widely used set of kinesthetic, fun activities that cover many core areas of computer science without using high technology. We will explore how to use the activities in a variety of situations, including combining them with robotics activities, and explore some novel applications. Attendees will receive a CD with a copy of a handbook for teachers and a collection of videos demonstrating the activities.	Computer science unplugged, robotics, and outreach activities (abstract only)	NA:NA:NA	2018
William M. Jones:D. Brian Larkins	One of the challenges in modern curriculum design is balancing between breadth and depth of topics while simultaneously reinforcing the interconnections among topics in the field. To address these challenges, faculty are often forced to approximate real-world systems, sometimes at the expense of any hands-on experience. We have integrated field-programming gate array (FPGA) systems first used in our hardware-based courses into several higher-level systems and applications courses. This allows us to leverage student familiarity with a hands-on, flexible hardware platform and also strengthen the relationships between different subfields within computer science. In this workshop, we present participants with guided hands-on activities for making use of FPGAs in common computer science courses such as digital logic design, computer organization and programming, and compiler construction. Laptop required.	Introduction to using FPGAs in the computer science curriculum (abstract only)	NA:NA	2018
Janet E. Burge:Paul V. Anderson:Gerald C. Gannod:Michael Carter:Deanna Dannels:Margaret Heil:Mladen Vouk	To be successful, CS and SE graduates need strong communication skills (writing, speaking, and teaming), particularly within their discipline. Students exercise these skills during their classes but are not always given explicit domain-specific instruction on these skills, instead relying on instruction provided outside the program. CS and SE faculty are not always comfortable in evaluating these aspects of their assignments and are often unhappy with the results. In this workshop we will lead sessions on teaching writing, speaking, and teaming; situating assignments in workplace-scenarios (to motivate students); and writing communication rubrics that convey faculty expectations to students and support evaluation of student work. For more information, see www.muohio.edu/sigcse_workshop11. A laptop is recommended but not mandatory for this workshop.	Helping students become better communicators (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Michael Ferguson:Julian Mason:Sharon Gower Small:Zachary Dodds	The Microsoft Kinect and Willow Garage's Robot Operating System (ROS) are changing the way robots are developed. Together, these tools can enable today's CS educators to provide richer and more research-representative experiences with robots and perception. This hands-on workshop will introduce ROS and showcase two pilot courses taught using ROS and the Kinect. Four 20-minute talks will intersperse with participants' hands-on development of Python programs on low-cost Kinect-equipped robots and the ARDrone quadcopter. This workshop is intended for all college-level CS educators interested in robotics or embodied AI. First-time ROS/Kinect users are particularly welcome! Laptops and robots will be provided. See http://www.ros.org/wiki/Courses/sigcse2012. Laptops optional.	ROS for educators: teaching with the robot operating system and Microsoft Kinect (abstract only)	NA:NA:NA:NA	2018
Zachary Kurmas:James Vanderhyde	Participants will have fun learning and playing relatively unknown board games that are especially suitable for programming projects. We will present games where (1) all players can view the same screen, (2) the board is reasonably simple to program, and (3) there are several elements of the game that relate strongly to a common CS 1, CS 2, or discrete math topic. After we explain the rules and highlight the CS-related elements of the games, participants will have the opportunity to play the games, ask questions, and suggest rule variations that will improve the resulting programming project. See http://www.cis.gvsu.edu/~kurmasz/GamesWorkshop/ for more details and a list of games that may be presented. Laptop Optional.	Board game project ideas for CS 1 and CS 2 (abstract only)	NA:NA	2018
David Hyland-Wood:Marsha Zaidman	The Web has created a global information space of linked documents. The Semantic Web creates an information space of linked data from multiple sources. Information can be mined from the interlinking of available datasets by a distributed query language known as SPARQL, the SQL equivalent for the Semantic Web. Participants will understand and appreciate the role of linked data on the Semantic Web; be able to model, represent, and interpret simple linked data applications; complete exercises that create simple Linked Data models; appreciate the benefits of Linked Data over relational database modeling; be aware of successful commercial applications of linked Data; be directed to resources that facilitate incorporation of this material into their courses. WiFi/Laptop Required.	A taste of linked data and the semantic web (abstract only)	NA:NA	2018
Michael K√∂lling:Neil Brown	The Microsoft Kinect is a sensor module that allows accurate tracking of humans moving in front of it. Greenfoot is an introductory Java programming environment that makes it easy to create animated graphical projects. By combining Greenfoot and the Kinect students can write programs where the user's body is used for input. Users interact with games by waving their hands, jumping, running, dancing, .... These kinds of programs are incredibly good fun and engage target groups who would not normally be interested in programming. The workshop is aimed at teachers of introductory programming courses (high school/university) who have some programming experience and want to incorporate new kinds of projects into their teaching. Laptop recommended but not required. Kinect hardware will be provided.	Teaching with greenfoot and the Kinect: a novel way to engage beginners (abstract only)	NA:NA	2018
David G. Kay	Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and "re-using" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required.	Intellectual property law basics for computer science instructors (abstract only)	NA	2018
Nikolai Tillmann:Jonathan de Halleux:Tao Xie:Judith Bishop	Pex4Fun (pexforfun.com) is a web-based serious gaming environment for teaching computing at many levels, from high school all the way through graduate courses. Unique to the Pex4Fun experience is a cloud-based program evaluation engine based on dynamic symbolic execution and SMT-solving, which provides customized feedback to the student and automated grading for the teacher. Thus, Pex4Fun connects teachers, curriculum authors, and students in a social experience, tracking and streaming progress updates in real time. In particular, Pex4Fun finds interesting and unexpected input values that help students understand what their code is actually doing. The real fun starts with coding duels where students write code to implement a teacher's specification. Pex4Fun finds any discrepancies in behavior between the student's code and the specification. Then based on the reported discrepancies, the student improves his or her code towards the specification. Pex4Fun can be used to develop interesting, engaging, and demanding class materials on mathematics, algorithms, programming languages, or problem solving in general. A teacher can use an integrated wiki to author these class materials for students to work through. This workshop involves creating and teaching course materials at Pex4Fun. Participants should bring a laptop computer. The intended audience includes all levels of CS educators who are interested in integrating educational technology in their teaching environments.	Teaching and learning computing via social gaming with Pex4Fun (abstract only)	NA:NA:NA:NA	2018
Mel Chua:Sebastian Dziallas:Heidi J.C. Ellis:Gregory W. Hislop:Karl R. Wurst	Participating in free and open source (FOSS) software communities provides students with authentic learning while supplying instructors with a wide variety of educational opportunities including coding, testing, documentation, professionalism and more. However, instructors may be unfamiliar with how FOSS communities work and therefore may be reluctant to involve students in such communities. This workshop is a subset of material used in Red Hat's Professors' Open Source Summer Experience (http://communityleadershipteam.org/posse) workshop, now in its third year of successfully providing a ramp to FOSS projects for instructors. These instructors have demonstrated success in involving their students in FOSS communities where students have contributed code, interface design, and more. Intended audience: Computing educators at the college or high school level interested in involving students in open source software projects in any capacity (testing, coding, documentation, design, project management, observational shadowing of a large-scale project, etc). The workshop may also be of interest to pre-high school computing educators and members of the open source community. No experience with open source communities or contribution is necessary.	Welcome to Makerland: a first cultural immersion into open source communities (abstract only)	NA:NA:NA:NA:NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	This workshop showcases a new approach to teaching CS1 using computational art as a context. Participants will be introduced to the Processing programming language and environment, designed for the construction of 2D and 3D visual forms. Its IDE is lightweight, but well-suited for the rapid prototyping needed for dynamic visual work. We hope to bring the excitement, creativity, and innovation fostered by Processing into the computer science education community. Instructors of all experience levels are welcome. Hands-on portion of the workshop will enable participants to explore Processing and create visual effects on the fly. Course materials and handouts detailing the software, curriculum, and teaching resources will be given out. All participants will need to bring their own laptops.	Computational art and creative coding: teaching CS1 with processing (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at the University of California, Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey-Lee:John Glick:Leo Porter:Beth Simon	We introduce participants to Peer Instruction (PI): an active learning technique applicable to the teaching of many subjects, including CS. In PI, Students work together to exchange perspectives and answer challenging conceptual questions, and are supported by short teaching segments. We will introduce and motivate PI, demonstrate its use in combination with a clicker system, and show that PI is much more than the use of clickers. Participants will work in groups to develop new PI questions addressing challenges to their students' learning, and discuss numerous pedagogical benefits conferred through PI. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer instruction in the CS classroom: a hands-on introduction (abstract only)	NA:NA:NA:NA:NA	2018
Martin L. Barrett:Steve Chenoweth:Larry Jones:Amine Chigani:Ayse Bener:Mei-Huei Tang	This workshop introduces software architecture concepts and their incorporation into computer science and software engineering curricula. Participants will learn techniques used in industry to specify quality attributes critical to architecture and use those attributes to drive the system structure using common architectural styles. Exercises will demonstrate these techniques and explore pedagogical uses of the techniques in CS and SE classes. Sample computer science curricula with courses that integrate workshop material will be presented. Presenters will lead a brainstorming session to help participants develop practical methods for using the material in their courses. Participants will become part of a community of educators sharing educational resources in software architecture.	Incorporating software architecture in the computer science curriculum (abstract only)	NA:NA:NA:NA:NA:NA	2018
Robert A. Chesebrough:Johnnie W. Baker	This workshop is inspired by Dan Grossman's SIGCSE 2011 workshop on Data Abstractions. We also review C/C++ conversions of the original Java-based materials and will also include material from the Parallel Algorithms course at Kent State. The workshop will appeal to data-structure and algorithms course instructors. Workshop topics will include divide and conquer approaches, work sharing concepts, and a scoped locking scheme in OpenMP for C++ classes. This material is driven via core data-structure examples (queues, sorting, reductions, etc.) and using a Fork/Join Framework found in OpenMP and Intel¬Æ Cilk Plus and Intel¬Æ Threading Building Blocks. Participants will write parallel programs and test them on the Intel¬Æ Many-core Testing Lab. Laptop Required. Laptop is required.	Parallelism and concurrency for data-structures & algorithms courses (abstract only)	NA:NA	2018
Monica Anderson:David Touretzky:Chutima Boonthum-Denecke	In this half-day tutorial, we will introduce the ARTSI "Robotics Roadshow-in-a-Box (RRIB)", a single point resource for those getting started in robotics outreach. The RRIB is a kit which contains robots, software and prepared materials for providing robotics workshops for middle and high school students that focuses on showing computer scientists as problem solvers and not just programmers through activities with a larger context. The RRIB fills a need for materials that are accessible to those who may have limited knowledge of robotics or limited experience in middle school outreach, whether that is undergraduate students or faculty researchers who might have limited outreach experience or preparation time. Laptop Required.	ARTSI robotics roadshow-in-a-box: turnkey solution for providing robotics workshops to middle and high school students (abstract only)	NA:NA:NA	2018
Kathi Fisler:Stephen Bloch	We present the Program by Design introductory CS curriculum through the lenses of graphics, animations, algebra, and data structures. Animations programming is popular for CS1, but many such curricula lack clean paths into CS2. Program by Design is different. Using and reinforcing concepts from algebra, students learn to write animations (including standard topics such as model/view separation and event-handling), then move seamlessly into working with structured data, lists, trees, and objects. The curriculum emphasizes design, testing, and writing maintainable programs, without losing the engagement of animations. The workshop uses lectures and hands-on exercises to provide high- school and college teachers an overview of the approach. See www.programbydesign.org. Laptop Optional.	Program by design: from animations to data structures (abstract only)	NA:NA	2018
Michelle Friend:Jeff Gray	Mobile phone programming can provide teens an authentic and engaging hook into computer science. With App Inventor, developed by Google and moved to MIT, programming Android apps is as easy as clicking blocks together. App Inventor has been used successfully in after school programs, roadshows, summer camps, teacher workshops, and computer science classrooms from middle school through college. Participants will get an overview of App Inventor including project ideas and sample student code, hear outreach planning suggestions, write programs, develop outreach plans, and see how the Java Bridge helps transition from App Inventor to Java. Please bring a laptop with App Inventor. Even the most time-stretched professor or teacher can encourage students in computer science with App Inventor.	CS outreach with app inventor (abstract only)	NA:NA	2018
Jason O. Hallstrom:Joe Hollingsworth:Joan Krone:Murali Sitaraman	Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can we teach them to apply these principles using modern software tools? Can this be accomplished without displacing existing content? In each case, the answer is a resounding yes - but it takes the right set of pedagogical principles, teaching tools, and classroom exercises. This hands-on laboratory will introduce a set of principles, tools, and exercises that have proven to work. By adopting one content module at a time, educators will better prepare students to reason rigorously about the software they develop and maintain. The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught - from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials. Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. A laptop is required to participate.	Making mathematical reasoning fun: tool-assisted, collaborative techniques (abstract only)	NA:NA:NA:NA	2018
Brian Harvey:Daniel Garcia:Josh Paley:Luke Segars	This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses. It presents the programming environment used in two of the five initial AP CS Principles pilot courses. Snap! (Build Your Own Blocks) is a free, graphical, drag-and-drop extension to the Scratch programming language. Scratch, designed for 8-14 year olds, models programs as "scripts" without names, arguments, or return values. Snap! supports older learners (14-20) by adding named procedures (thus recursion), procedures as data (thus higher order functions) structured lists, and sprites as first class objects with inheritance. Participants will learn Snap! through discussion, programming exercises, and exploration. See http://snap.berkeley.edu for details. Laptop required.	Snap!: (build your own blocks) (abstract only)	NA:NA:NA:NA	2018
Marge M. Coahran:Janet Davis	This workshop will introduce a set of hands-on laboratory activities appropriate for a first Computer Organization course. Participants will work with real equipment: first implementing elementary digital circuits with TTL logic chips, and then programming AVR microcontrollers in assembly to drive fun accessories such as LEDs and speakers. Participants will not take equipment home afterwards, but will receive parts lists and vendor information. The workshop is intended for educators with little electronics background who are interested in incorporating electronics laboratories into their courses. Laptops (Linux, Mac, or Windows) will provide the programming environment for the AVRs. Free software will be available before the workshop. Participants will work in pairs. Laptop recommended.	Circuits and microcontrollers in computer organization laboratories (abstract only)	NA:NA	2018
Ariel Ortiz	Many instructors have already discovered the joy of teaching programming using the Python programming language. Now it's time to take Python to the next level. This workshop will introduce Django, an open source Python web framework that saves you time and makes web development fun. It's aimed at Computer Science instructors who want to teach how to build elegant web applications with minimal fuss. Django follows the Model-View-Controller (MVC) architectural pattern. Its goal is to ease the creation of complex, database-driven websites. Django emphasizes reusability and "pluggability" of components, rapid development, and the principle of DRY (Don't Repeat Yourself). Python is used throughout, even for settings, files, and data models. Topics that will be covered during the workshop include: setup and configuration, template language, and database integration through object-relational mapping. Participants should have some familiarity with Python, HTML and SQL. Laptop Required.	Web development with python and django (abstract only)	NA	2018
Richard Ladner:Karen Alkoby:Jeff Bigham:Stephanie Ludi:Daniela Marghitu:Andreas Stefik	Many wonderful enrichment programs have been created to introduce young people to computing, but with little attention to making them accessible to students with disabilities. In this workshop participants will learn from practitioners who have introduced computing and programming to young people with disabilities. They will also learn first-hand from students with disabilities about their needs in learning programming. There will be breakout sessions for participants to apply what they have learned to improve existing enrichment programs such as Alice, Arduino, Scratch, Kodu, App Inventor, Greenfoot, Lego Mindstorms, Processing, and Computer Science Unplugged.	Improving the accessibility of computing enrichment programs (abstract only)	NA:NA:NA:NA:NA:NA	2018
Samuel A. Rebelsky	Computer science teachers strive for new examples and problems to interest millenials. The Media Computation approach has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this workshop, we show how to go a step further and have write scripts and plug-ins in Python for open-source graphics programs such as the GNU Image Manipulation Program and Inkscape, open source alternatives to Photoshop and Illustrator. With this approach, students not only make images, they also write filters and features that they can share with others, even with non-programmers. For example, students have written filters that "fractalize" vector graphics or that turn images into something that looks like stained glass. The ability to make programs that others will use is particularly motivational. We will explore ways in which students can interact with both Inkscape and GIMP, from working with interactive programming consoles to writing plug-ins that can easily be shared with others. We will also consider the ways in which different models of image making can be used to motivate the major programming paradigms. The approach has been used with Python, Scheme, and C and for everything from a one-week module to a full course.	Enhancing student interest by extending graphics applications (abstract only)	NA	2018
Nikolai Tillmann:MichaB Moskal:Jonathan de Halleux:Manuel F√§hndrich:Tao Xie	We are experiencing a technology shift: Powerful and easy-to-use touchscreen-based mobile devices like smartphones and tablets are becoming more prevalent than traditional PCs and laptops. We propose that computer programming, and thus teaching of programming, can and should be done directly on the mobile devices themselves, without the need for a separate PC or laptop to write code. In this workshop, participants will learn about developing software directly on smartphones without a PC using TouchDevelop, a novel application creation environment on Windows Phone 7 from Microsoft Research (http://touchdevelop.com). Its typed, structured programming language is built around the idea of only using a touchscreen as the input device to author code. A semi-structured code editor makes it easy to navigate between different syntax elements. By inferring types and mining previously written programs, the editor provides highly predictive auto-completion suggestions to the user. The language provides built-in primitives that make it easy to access the rich sensor data available on a mobile device. Programming on mobile devices engages students in new ways, allowing them to access and manipulate programmatically their most personal digital data such as pictures, videos, and music. Programming on smartphones which we carry around with us at all times means instant gratification for students, as they can show their games and applications to their friends, and it means that students can do their homework or additional practicing at all times. For this workshop, a laptop is optional; Windows Phone 7 devices will be provided for exercises.	Engage your students by teaching programming using only mobile devices with TouchDevelop (abstract only)	NA:NA:NA:NA:NA	2018
Richard A. Brown:Elizabeth Shoop	Parallel computing with more and more cores is here to stay. This workshop presents four independent, class-tested, primarily hands-on modules for incrementally adding parallelism in undergraduate CS courses, each requiring 1 to 3 class days and versatile for diverse courses and curricula: parallelizing loops and sharing memory on Intel's Manycore Testing lab (for a second CS course or for computer organization); parallel web crawler in Java or C++ (second CS course); parallel sorting (algorithms); √Ä- calculus theory for communicating sequential processes (theory of computation). Workshop materials provided, drawn from CSinParallel.org. Intended audience: CS instructors. Laptop recommended (Windows, Mac, Linux).	CS in parallel: modules for adding parallel computing to CS courses, from CS2 to theory of computation (abstract only)	NA:NA	2018
Mark Guzdial:Barbara Ericson	Everybody teaches linked lists, with homework like implementing duplicate, weave, and reverse. When those nodes contain strings or numbers, these are pretty boring assignments. When these nodes contain music (MIDI), these operations are composing music, which can then be played. This workshop shows how to use music, images, and sounds to teach the basic data structures, including linked lists, circular linked lists, stacks, queues, and trees. These pieces can then be tied together through the use of simulations to generate animated movies. We will be using Java, though many of the methods can also be used in Python.	Listening to linked lists: using multimedia to learn data structures (abstract only)	NA:NA	2018
Raja Sooriamurthi:Nickolas Falkner:Zbigniew Michalewicz	Puzzle-based learning (PBL) is an emerging model of teaching critical thinking and problem solving. Today's market place needs skilled graduates capable of solving real problems of innovation in a changing environment. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees. In this interactive workshop we will examine a range of puzzles, games, and general problem solving strategies. Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course. Currently 40+ institutions around the world are offering courses based on PBL. More details are available at www.PuzzleBasedLearning.edu.au. Laptop optional.	Puzzle-based learning: introducing critical thinking and problem solving for computer science and engineering (abstract only)	NA:NA:NA	2018
Carl Alphonce:Joseph LeGasse	Feedback serves a critical role in the learning process. For formative assessment to be effective in supporting a student's learning, feedback must be provided in a timely fashion (so a student can derive benefit while engaging in the learning activity), it must be consistent across multiple submissions of the same student as well as across submissions by different students, and it must be of high quality (i.e. it must give students guidance as to how to improve their submission). In this poster we present a small library of Java classes which aid the writing automated tests for assessing the design of student programming exercises. Through its use of reflection we can allow more free-form assignments, and can provide feedback on both program functionality and design.	Using reflection to enhance feedback for automated grading (abstract only)	NA:NA	2018
Kai Qian:Dan Lo:Yi Pan:Yanqing Zhang:Xiaolin Hu:Liang Hong	Advanced mobile devices such as smart phones and tablets have become a part of daily lives for digital native students today. The integration of mobile computing with these devices into multiple courses in computer science (CS) curriculum will connect the education to leading-edge information technologies, motivate and engage students in CS learning, fill in the gap with IT industry needs, and help faculties build strong expertise on modern mobile computing. Meanwhile, the hands-on experience with mobile computing will supply the students with a better understanding of the classical CS concepts. In this paper, we propose to develop a cross-curriculum labware based on the Android platform to introduce the knowledge and practice of a wide range of CS subjects with smart phones and tablets.	The cross-curriculum mobile computing labware for CS (abstract only)	NA:NA:NA:NA:NA:NA	2018
Elizabeth V. Howard:Jill E. Courte:Donna M. Evans:Marilyn Anderson	Please be patient with us as we move to our new computer system' is a common sign at healthcare providers' offices. Mandates from the federal government are merging the fields of healthcare and information technology and experts predict a significant increase in jobs related to Health Information Technology (HIT). In this poster session, we will share our new HIT curriculum (Bachelor of Science in Information Technology with a major in Health Information Technology) along with the process followed to develop this curriculum. Developed in collaboration with nursing educators and in consultation with HIT professionals, this unique multi-disciplinary program blends technology and healthcare to prepare students for a wide variety of opportunities in the evolving field of HIT.	Merging healthcare and technology: a multi-disciplinary health information technology (HIT) curriculum (abstract only)	NA:NA:NA:NA	2018
William M. Mongan	We describe our experience in teaching an integrated module in networks, mathematics, and cryptography, suitable for high school students. The objective is to design a lesson with minimal prerequisite background and a varying degree of programming experience, with an aim towards exciting students early on about computing. Students create and implement a chat program protocol and a minimal RSA algorithm implementation, and implement a brute force algorithm to recover each other's private key. Depending on student experience, scaffolding can be provided to assist with the programming, and advanced topics are possible as extensions to this lesson. We hope that this lesson can be taught as an interdisciplinary unit in math and computer science classes.	An integrated introduction to network protocols and cryptography to high school students (abstract only)	NA	2018
Xuzhou Chen:Nadimpalli V.R. Mahadev	In this paper, we describe an approach of using a PC based robot (PCRob) for teaching advanced topic course in pattern recognition and computer vision. Unlike most of the robots where only the microprocessors are used, the robot we design and build uses mini PC and off-the-shelf peripherals to provide the computing power in order to process some functionalities such as image processing and pattern recognition.	A PC based robot for learning computer vision and advanced programming (abstract only)	NA:NA	2018
Shereen Khoja:Juliet Brosing:Camille Wainwright:Jeffrey Barlow	Girls Gather for Computer Science (G2CS) is an innovative computer science summer camp for middle school girls. The goal of the camp is to change how girls experience computer science by placing them in an all-female environment where they explore computer science in a fun and interactive way. Girls are exposed to female role models while middle school teachers and parents are educated about the issues facing women in technology fields. Each week of the camp has a different theme: web development, robotics, programming with Alice, and computer hardware and the camp includes field trips to local technology companies such as Intel and Vernier Software & Technology. Campers use a closed social networking site to communicate and share ideas, and continue to use this site after the camp is over. This provides the girls with a supporting community that will continue to foster their interest in computer science even after the camp has ended. Oregon Public Broadcasting (OPB) partnered with us to produce the camp website, a 10 minute video of the camp, 5 interviews with professional female computer scientists, and online interactive games that teach computer science concepts. The project includes a ten-year study to follow the progress of the campers. Initial assessment of G2CS shows that it had a positive and significant impact on the participants.	Girls gather for computer science (G2CS) (abstract only)	NA:NA:NA:NA	2018
Deborah A. Fields:Kristin A. Searle:Yasmin B. Kafai:Hannah S. Min	One challenge in assessing students' engineering and programming designs is that the problems are difficult to evaluate with pencil and paper. Projects with multiple types of designs (circuitry, coding, aesthetics) can go wrong in many ways (Resnick, Berg, & Eisenberg, 2000). Identifying, debugging, and solving these problems is at the crux of being able to design computational and material projects. In this poster we analyze high school students' collaborative engagement with a series of isomorphic deconstruction kits (debuggems) developed to assess their learning of coding, circuit design and creation (through sewing) in e-textiles with the LilyPad Arduino. The debuggem was designed based on our observations of common challenges that students faced when designing their own e-textiles projects during 4-week workshops. We videotaped ten students collaborating in pairs as they worked to turn on LEDs in a project strategically designed with problems in poor crafting, non-functional circuitry design and insufficient coding. Analysis includes what problems students struggled the most to solve and common types of problem solving strategies used. The debuggem was successful in that it revealed common problems, allowed for multiple solutions, and capitalized on collaborative learning. As hoped, all students solved most problems but no group solved every problem in the time allotted without help; student pairs also came up with multiple solutions. The findings indicate that deconstruction kits are not only promising tools for evaluating students' learning of designing with e-textiles but also valuable learning tools, especially when peer collaboration is taken into account.	Debuggems to assess student learning in e-textiles (abstract only)	NA:NA:NA:NA	2018
Janet Davis:Samuel A. Rebelsky:Jerod Weinman	upswing, Computer science teachers continue to strive for new examples and problems to interest millenials. The Media Computation approach (Guzdial 2003) has proven successful in attracting students in contexts from community colleges to R1 universities - students are clearly excited by writing programs that make images. In this project, take Media Computing in new directions: we have students build images by interactively scripting an application, which means that they can more easily experiment and mix work that they create "by hand" and work that they create "by programming"; we work collaboratively with studio art faculty, so students build works that must meet underlying design criteria; we teach using the workshop approach, so most classes involve students working in small teams on a set of problems; and we use a multi-paradigm approach - students make images using functional, declarative, imperative, and object-oriented techniques. This approach has proven quite successful - our enrollments are up (at least 33% in CS1, 50% in CS2). We are attracting more women (now 1/3 of our students). And comparative data suggest that our students gain significantly more confidence in their abilities than do student in other introductory science courses.	MediaScripting: teaching introductory CS by through interactive graphics scripting (abstract only)	NA:NA:NA	2018
Hannah Fidoten:Jaime Spacco	We asked all of the liberal arts faculty who advise undergraduates on course selection at the 14 colleges in the Associated Colleges of the Midwest a series of questions regarding their perceptions of the personality traits of Computer Science (CS) students, topics they think are covered in CS classes, and their overall impressions of CS. Our goal was to test empirically the hypothesis that many non-CS faculty are unaware of the differences between CS and Information Technology (IT). We received over 200 survey responses, which revealed that, among non-CS faculty, 10% disagree or are neutral that CS should even be part of a liberal arts curriculum, 9% think that CS students are taught to fix printers and other peripherals, and 35% believe that CS students are taught to use Microsoft Word and Excel in their courses. Our results also revealed that 60% of CS faculty believe that men are more interested in CS than are women (although we did not ask why they believe this to be the case). Overall, while we found statistically significant differences between the answers given by CS and non-CS faculty, the overall evidence suggests that the majority of non-CS faculty in the Associated Colleges of the Midwest have a good understanding of CS.	Do faculty recognize the difference between computer science and information technology?: a survey of liberal arts faculty (abstract only)	NA:NA	2018
Paige H. Meeker	In today's world, many students are being encouraged not only to participate in class work and internships, but to travel and gain experiential knowledge. At Presbyterian College, students are required to complete either a research/internship class or an experiential/travel class as a part of their general education requirements. Computer science students were often going on trips with other departments to fulfill this need. This poster explores a course offered at Presbyterian College in May, 2010, which took students from our Physics and Computer Science department behind the scenes of Kennedy Space Center and Walt Disney World. It will include information both about course content and about the cost and overhead involved in planning such a course.	Interdisciplinary travel courses in computer science (abstract only)	NA	2018
Monika Akbar:Clifford A. Shaffer	Educational portals such as Algoviz.org contain rich information resources, and a key concern is directing the users to specific resources that are of interest to them. While AlgoViz has significant traffic, we cannot count on active user participation in the form of explicit ratings of individual resources. Often called a "cold-start" problem, this scenario is well-known in community-based websites. Lacking active user data, we instead use log data to deduce user trends. We describe our techniques for clustering users based on the log data. We show how this cluster analysis can be used to refine searching and browsing within AlgoViz. Our approach has the potential to be useful for a wide range of educational resource portals.	User type clustering to refine search and browse for educational resources (abstract only)	NA:NA	2018
Steven Huss-Lederman	In 2005, the Beloit College Computer Science Program began a complete revision of its courses and curriculum facing usual issues: limited staff, declining enrollments, and the Computing Curricula 2001 document. We used 1/2 semester, 1/2 unit courses to address the diverse areas with limited courses allowing multiple entry points by interest and knowledge level and flexibility for non-majors; however, it did present scheduling and staffing issues. After two years of experience, we revised our ideas to recombine some 1/2 unit courses to allow larger projects, stacked courses where students at different levels took courses together, and instituted a two year capstone experience that combined material from several classes. The poster will provide details and an opportunity to exchange ideas.	A comprehensive CS curriculum revision, implementation, and analysis (abstract only)	NA	2018
Xiaohong Yuan:Jinsheng Xu:Kossi Edoh:Hong Wang	Health informatics is one of the nation's largest growth industries. With the government's increasing interest in electronic health records and growing investment by healthcare organizations in technology, there is a large demand for a health informatics and health information technology workforce. To protect health information systems, it is highly important for health informatics professionals to be well educated and trained in information assurance, and to understand the many concerns of security, privacy, integrity and reliability. This poster describes our project of developing a new interdisciplinary program of Bachelor of Science in Computer Science (BSCS) concentration in Health Informatics Security and Privacy (HISP) at North Carolina A&T State University (NC A&T SU). To establish this program, we are developing a new course on health information systems in the Department of Computer Science, a new course on Mathematics for Health Informatics in the Department of Mathematics, and modifying an existing course in the Department of Management. We are also developing three course modules on health informatics security and privacy: Health Information Assurance and Security, Access Control in Healthcare Information Systems, and XML Security in Health Information Systems. These course modules will be integrated in the existing computer security and information assurance courses in the Department of Computer Science. The BSCS concentration in HISP curriculum as well as project plan will also be described in this poster.	Developing an interdisciplinary health informatics security and privacy program (abstract only)	NA:NA:NA:NA	2018
Robert E. England	This poster describes a new upper level undergraduate computer science course in team software development, featuring the Apple iPad as the development platform. The course draws from a wide range of state-of-the-art topics in software development theory and practice, including use of Apple's extensive software development Cocoa Touch framework for its mobile devices, advanced Object-Oriented Programming, gang of four Design Patterns, and traditional Software Engineering practices, including accountability to external clients and public presentation of results. The course was developed at Transylvania University, a small Liberal Arts college of approximately 1200 students, and it was taught there during the Fall 2010 semester.	A team software development course featuring iPad programming (abstract only)	NA	2018
Nanette Veilleux:Rebecca Bates:Diane Jones:Cheryl Allendoerfer:Joy Crawford	Retaining students in computer science (CS) majors has been a persistent topic among CS educators for almost two decades. Discussion and research has largely focused on improving student engagement in the academic experience in order to provide a more welcoming and compelling introduction to the field. Research has identified a wide variety of factors affecting student engagement in general, which in turn affects key outcomes including academic achievement, retention and persistence. Feeling connected to a community and sense of belonging can substantially influence student engagement. Our study suggests that this sense of belonging can also help mitigate student perceptions that influence them to be discouraged, especially about their ability to succeed, and leave computer science. In particular, support from extra-curricular as well as academic communities may lead students to perceive that ability is not a binary, fixed constraint, but a malleable gradient that can be influenced by factors within the student's control.	The role of belonging in engagement, retention and persistence in computer science (abstract only)	NA:NA:NA:NA:NA	2018
Ellen Boyd:Anthony Allevato	Many introductory computer science courses include regular lab sessions that require students to develop short programs that relate to corresponding lecture material. Logistical tasks required for assignment completion, such as project setup and submission, impose certain burdens on students and instructors. Due to time constraints, instructors frequently provide starter files or skeleton projects for students to import into their workspace at the beginning of each lab so that they can feasibly complete the assignment in the required time. Setting up projects in Eclipse to include these files and dependencies still consumes significant time during these labs, however. To eliminate the time spent trying to fix project configuration issues, we have developed a plug-in for Eclipse that allows students directly from within the IDE to download and import multi-file projects corresponding to individual lab assignments. The projects will be automatically imported into the student's workspace and will be correctly configured and linked to any required dependencies. The plug-in can also be employed with large-scale programming assignments; as assignments increase in complexity, they may require a non-trivial amount of extra configuration before students can begin work on their solution. With this plug-in, students can now focus primarily on the problem-solving aspect of their work and accomplish all necessary tasks, from initial project configuration to final delivery, without leaving the Eclipse IDE and interrupting their workflow.	Streamlining project setup in eclipse for both time-constrained and large-scale assignments (abstract only)	NA:NA	2018
Stephen B. Hughes:J. Ben Schafer:Aaron Mangel:Sean Fredericksen	One of the major perceived barriers to the adoption of Classroom Response Systems, a.k.a. "clickers", is limited interactivity. Students using dedicated clicker hardware are often only able to provide basic multiple choice or simple numeric responses. The accessibility and flexibility of smartphones make them an intriguing platform for managing some of the shortfalls of traditional classroom response systems. This approach not only leverages a resource that a growing number of students already own, but also aims to enhance the effectiveness of the system by tapping into the robust interaction capabilities that these devices afford. This poster will describe a smartphone implementation of a classroom response system and discuss efforts to extend the basic clicker interaction model.	A customizable platform for classroom collaboration using mobile devices (abstract only)	NA:NA:NA:NA	2018
Demian Lessa:Bharat Jayaraman	An important challenge in teaching object-oriented (OO) programming and methodology in introductory Computer Science courses is explaining the run-time of OO programs. This is largely due to the OO methodology, which encourages the use of features such as polymorphism and design patterns, resulting in object interactions and control flow that are hard to grasp, especially for novice programmers. We present an approach to program comprehension in which students use storyboards and visual debugging to build a clear mental model of the dynamic behavior of OO programs. In this context, a storyboard consists of a sequence of figures representing run-time aspects of interest (e.g. states or interactions) and an explanatory narrative in terms of OO concepts and source elements. The selected visual debugger must render execution histories and run-time states using visual notations consistent with the OO methodology (e.g., objects, member fields, method calls within object contexts). Instructors create storyboards using figures exported from the debugger and incorporate them in course materials. Further, storyboards included in specifications of programming assignments alongside test cases provide students with a detailed account of their programs' run-time at interesting points in execution. By executing their programs under the visual debugger, students can compare the observed run-time states with those illustrated in the storyboards and effectively assess the behavioral correctness of their programs. Hence, the combined use of storyboards and visual debugging can benefit students during the coding phase by guiding them towards writing code that closely adheres to the OO methodology from the outset.	Explaining the dynamic structure and behavior of Java programs using a visual debugger (abstract only)	NA:NA	2018
D. Brian Larkins:H. Erin Rickard:William M. Jones	The field of computer science is continuously growing, requiring curriculum developers to make numerous tradeoffs between depth and breadth with every advance. Faculty must look for new ways to communicate more concepts within a fixed number of contact hours as well as employ techniques that underscore interrelated concepts over multiple courses. With this poster, we present the use of field-programmable gate arrays (FPGAs) as a flexible hardware system that may be modified to suit the needs of a wide variety of classes. While FPGA devices are a natural fit for teaching hardware concepts in organization and architecture classes, we feel that they can also be used in a variety of roles within a number of other courses. We describe our work integrating FPGA curriculum modules into several courses in the CS curriculum: organization and architecture, compiler construction, robotics, operating systems, security, and image processing. We believe that by using these devices in several courses, students gain greater familiarity with a hands-on, reconfigurable hardware platform and can leverage this experience throughout their coursework. This approach is consonant with recent trends that emphasize the importance of students being able to reason about the end-to-end operation of an entire system and helps strengthen the relationships between different subfields within computer science. We describe both the changes made to our curriculum and the effectiveness of our approach.	Using FPGA systems across the computer science curriculum (abstract only)	NA:NA:NA	2018
Raja S. Kushalnagar:Joeseph S. Stanislow	The introductory programming college course is usually difficult for many new students, as they struggle to master basic programming concepts and to develop logically correct programs. Surveys in college have estimated that around 30 percent of these students drop out or fail it. These tasks are even more difficult for Deaf and Hard of Hearing (DHH) students, even when provided with accessible visual translations through sign language interpreters or real-time captions. We have extended the idea of traditional audio capture and transmission accessible technology devices by developing and testing use of smart phones as multimedia recording devices to record multiple videos and stream them to the deaf or hard of hearing student. We call this approach multiple video perspectives.	Maximizing content learning for deaf students and English as a second language students (abstract only)	NA:NA	2018
Shamsi Moussavi:Giuseppe Sena	Laboratory-based courses--the corner stone of Computer Science programs in our community college--have been difficult to manage due to the shortage of lab space, available equipment, and basic infrastructures. This has meant that for the past few years, we have not been able to offer certain courses that allow students administrative privileges in order to complete their assignments, such as Web Server Administration course. We wanted to be able to offer a number of courses requiring various systems, levels of functionality, and networking set up in one laboratory. We researched and experimented with different virtualized systems. Specifically, we looked at the use of VMs in CS courses and laboratories. Through use of virtualization technology we implemented multiple VMs (one for each course) on each computer in a laboratory. Each VM was set up for specific course requirement; hence, multiple courses were offered simultaneously in one laboratory. In designing the laboratory, we were also careful not to adversely affect the security of college's computer network. Therefore, the virtualized laboratory was separated from the college's computer network. This approach not only provided the capabilities that we were looking for, but can also be used in future to provide easier access to students, even from outside the school network.	All-in-one virtualized laboratory (abstract only)	NA:NA	2018
Joseph A. Cottam:Suzanne Menzel	Computer scientists require a precise and complete understanding of recursion. Earlier work has indicated that recursion merits attention in CS1 [2]. We present a simple test question that, when used in a final exam for three courses over two semesters, is shown to significantly predict student performance on the final. To evaluate student responses, we present an evaluation rubric that directly reveals common misconceptions about recursion and recursive procedures.	Recursive thinkers and doers in CS1 (abstract only)	NA:NA	2018
Madalene Spezialetti	This poster presents a tool for providing novice students with a context in which to develop the ability to identify problems and patterns for their solutions by using video scenarios. A video scenario is a short film (typically 2-7 minutes) which has an extemporaneous feel. Each video depicts individuals facing a particular problem that can be helped through a computing solution. A selection of video scenarios is presented which is specifically designed to cultivate the problem identification and solution formulation skills of novice programmers by focusing on problems which can be solved using basic computing constructs. The videos can be used in a wide variety of settings and are suitable for use at the middle school, high school and college levels.	Computing in context: video scenarios for recognizing and utilizing basic computing constructs (abstract only)	NA	2018
Ivona Bezakova:James Heliotis:Sean Strout:Adam Oest:Paul Solt	Board games provide a natural context for the use of basic data structures and search algorithms taught in a typical introductory CS sequence. Unlike traditionally used programming assignments where students implement the actual game, we provide the game "engine" and ask the students to implement player strategies. The engine graphically displays the current state of the game and cyclically calls the individual player strategies to perform their moves. The students need to apply the same algorithms as if programming the rule checker for the game. And with the added strategy component, the project becomes open-ended, leaving space for continued improvements and experimentation. The poster describes the game we used last academic year, Quoridor by Mirko Marchesi and published by Gigamic Games. The goal of this game for two or four players is to move a piece from one side of a 9x9 grid board to another side, while placing walls that lengthen the opponents' paths to their destinations. The poster discusses Quoridor's relevance for basic data structures and algorithms, for example, breadth-first search. It then elaborates on the possibilities introduced by adding strategies into the picture, including an end-of-term tournament. Supported by the NSF, award ID 1044721.	Programming board-game strategies in the introductory CS sequence (abstract only)	NA:NA:NA:NA:NA	2018
John J. Wright	Whether we like it or not, college administrations and students are increasingly looking for online courses. K-12 schools are increasingly using online content and blending it with standard content. One of the bridges for us between traditional course delivery and online delivery is the blended course. This approach seems well suited to computer science, which often requires work in labs or with specialized equipment or software. It takes the approach of reversing that which is traditionally lecture and assignments, making classes more interactive and students less passive. This poster seeks input on a blended implementation of CS1 and a subsequent SoTL project to test the effectiveness of offering this course in a blended format.	Implementing and assessing a blended CS1 course (abstract only)	NA	2018
Scott Alexander Turner	Creating programming projects that engage students has been a continual challenge in computer science. Ideally, programming projects should require student to reflect upon and apply programming concepts and help them develop creativity, problem-solving, and other skills for the workplace. The use of real-world problems is one possible solution to the issue but it comes at the cost of increased complexity, size, and burden on the instructor. One approach to reducing these costs is to design (or redesign) programs, developed as part of a research agenda, for use as student projects. Designing these programs for flexibility, adding extra, student-appropriate, feedback and identifying portions of the code that could become interesting student projects helps support both research and classroom learning at the same time. By explicitly designing with projects in mind, instructors can control the complexity and size of these real-world problems and can, potentially, create a platform that can support multiple types of student assignments. This poster describes the experience of redesigning a UML diagramming tool to implement this idea and provides examples of the design decisions made, lessons learned during the process, and other programs that could be used in a similar fashion. Future work includes evaluating the students' reaction to the projects and whether enough support is being provided.	Designing with projects in mind: an approach for creating authentic (and manageable) programming projects (abstract only)	NA	2018
Jose M. Garrido	We propose an approach to introduce computational models and basic programming principles in an integrated manner and as early as possible in the computing curricula. Our goal is to help educate students of computer science, mathematics, and the various science disciplines, in computational modeling. For this, we have developed a sequence of four courses in computational modeling, the first of which integrates computational modeling with programming principles and includes elementary numerical methods for solving the models. This entry-level course is described and a URL is provided with details of the four courses. Developing a computational model of a problem includes formulating the mathematical representation and implementing it by applying Computer Science concepts, principles and methods.	Integrating elementary computational modeling and programming principles (abstract only)	NA	2018
Anthony Allevato:Stephen H. Edwards	Many computer science educators have adopted test-driven development practices in their introductory computer science courses, as a way of encouraging incremental development and decreasing defects in student code. This practice is straightforward for basic data-driven objects, but making unit testing of GUI applications approachable for students poses a larger challenge. We have previously addressed this problem for Swing applications by developing LIFT, a library that allows students to easily write JUnit tests for Swing interfaces. Since then, we have transitioned away from Swing to Android as the development platform in CS2 to better motivate and excite our students about their assignments. To fully support this change, we had to ensure that our students could fully test the GUI portions of their solutions on that platform as well. The Android operating system has significant built-in support for GUI testing, but the standard API is too complex for students to use. In order to address this, we developed RoboLIFT, a framework that eases the task of writing concise and complete unit tests for Android applications. Furthermore, RoboLIFT also has support for automated grading on the Web-CAT automated assessment system, so even if instructors do not require their students to follow test-driven development practices, they can still enjoy the benefits of automated grading by writing correctness tests that use RoboLIFT to exercise the students' graphical user interfaces.	RoboLIFT: simple GUI-based unit testing of student-written android applications (abstract only)	NA:NA	2018
Eric Fouh:Maoyuan Sun:Clifford Shaffer	OpenDSA is an open-source, community-based effort to create a complete active-eBook for Data Structures and Algorithms courses at the undergraduate level. Active-eBooks go beyond hypertextbooks, being a close integration of text and images with interactive visualizations and assessment activities. They solve two major problems: The difficulty of conveying dynamic process with static media, and the need by students to have many practice exercises and immediate feedback. Development in HTML5/JavaScript allows maximum portability. OpenDSA will proceed with broad participation from the algorithm visualization community. Focusing on reuse of materials, instructors can pick and choose content and modify as desired.	OpenDSA: a creative commons active-ebook (abstract only)	NA:NA:NA	2018
Murali Mani:Quamrul Mazumder	Courses that involve problem solving provide an opportunity to incorporate meta-cognition as an active learning strategy, where students reflect on their confidence levels on their solutions to problems. As compared to other typically used active learning strategies, meta-cognition provides concrete and comprehensive feedback about the students' learning. The data about confidence levels is potentially useful to both the instructor and the student: an instructor can utilize the data about confidence levels as a second measure of student learning (this is in addition to the scores obtained); a student gets valuable feedback with regards to his/her own comprehension of the topics when he/she examines the confidence levels. We have incorporated meta-cognition techniques in four computer science courses over two semesters at University of Michigan, Flint, including CS1, and also graduate level courses. By analyzing the data obtained, we are able to infer conclusions about (a) How correlated are the scores obtained to the confidence levels reported (b) Is meta-cognition assisting in learning, and (c) Are students more satisfied with a course that incorporates meta-cognition.	Active learning in computer science education using meta-cognition (abstract only)	NA:NA	2018
Yana Kortsarts:Vasily Kolchenko	Dynamic programming is one of the important algorithmic techniques often not appropriately covered in the core undergraduate CS courses, and there is no sufficient emphasize on application of advanced techniques to practical problems. As a result, students are not becoming fully familiar with this extremely important concept. We present our experience in integrating dynamic programming algorithmic technique in various core and elective undergraduate computer science courses, such as introductory programming, cryptography and bioinformatics. Examples are based on the real world scenarios and motivate students to learn in order to solve practical problems. The reported work was partially funded by the National Science Foundation, NSF CPATH award #0939120 and NSF I3 award #0930242	Dynamic programming across the CS curriculum (abstract only)	NA:NA	2018
Clif Kussmaul:Heidi J.C. Ellis:Gregory W. Hislop	Participating in free and open source software (FOSS) has numerous benefits for students (and faculty), and there is increasing interest in encouraging such participation. There is a broad range of possible contributions to FOSS projects including documentation, testing, coding, and more. This range allows people with a variety of backgrounds, including little or no CS background, to contribute to a FOSS project. This poster describes the status of a project to identify and categorize learning activities that contribute to FOSS. During Spring 2011, an NSF-sponsored workshop on student participation in humanitarian FOSS for the SoftHum project brought together a group of experienced FOSS developers, faculty, and students. One result of this workshop was a list of nearly 100 learning activities that could contribute to FOSS projects and provide meaningful experiences for students and faculty. We were surprised by the variety of results. Some of the activities have been used successfully or are variations of familiar learning activities; others are ideas that seem promising but require further development and validation. We are experimenting with individual activities, and seeking colleagues interested in doing likewise. We are also mapping the learning activities onto Computer Science Curriculum 2008 to make it easier for faculty to identify relevant activities and map them to course or program learning objectives. The poster briefly summarizes relevant background, describe the process used to identify appropriate activities and provide examples of activities and their mappings.	50 ways to be a FOSSer: simple ways to involve students & faculty (abstract only)	NA:NA:NA	2018
Daniela Marghitu:Taha Ben Brahim:John Weaver	Auburn University's Robo Camp K12 outreach program integrates various robotics platforms to maximize students' critical thinking and creativity development. This work presents how robotics could be used to teach students computer science concepts and skills through implementing the Computer Science Unplugged (CSU) activities. CSU provide an insightful learning environment where students learn computer science concepts through some playful, coordinated and stress free activities. Implementing such activities using robots resulted in multiple benefits: 1) students acquired advanced computer science notions without undergoing the high stress levels associated with such activities and 2) students maintained high levels of motivation and concentration during the entire six weeks of the camp.	Teaching computer science and programming concepts using LEGO NXT and TETRIX robotics, and computer science unplugged activities (abstract only)	NA:NA:NA	2018
Helen H. Hu	POGIL is a learning method that encourages students to learn coursework material in cooperative groups. Instead of passively listening to a traditional lecture, POGIL students work together on activities that guide students to discover programming concepts and algorithms for themselves. For example, instead of being told in lecture that a return statement ends the execution of a method, students might be asked what happens if two lines in their program are reversed (so that a line of code appears after the return statement). This emphasis on the process of discovery teaches students to become better problem solvers. POGIL has been used for over 15 years in science classrooms, where studies have shown it to be more effective than traditional lectures, measured both in student mastery of the material and in student retention. This poster provides examples of how traditional programming assignments can be transformed into POGIL lessons that emphasize problem solving and critical thinking skills. A POGIL activity on loops has students working through iterations of Newton's method by hand before writing the code. Critical thinking questions guide students to manipulate the code to experiment with infinite loops, initialization statements and conditionals. Two other activities on recursion and writing pseudocode are detailed on the poster. Information on facilitating a POGIL activity and writing your own POGIL activities can be found online at http://pogil.org/resources. Additional examples of computer science POGIL activities can be found at http://cspogil.org.	Using POGIL to teach students to be better problem solvers (abstract only)	NA	2018
Jinghua Zhang:Elva J. Jones	We propose a unique gaming concentration to reenergize computer science(CS) education at Winston-Salem State University (WSSU), an HBCU. Nationally, many gaming concentration programs in the CS curriculum have been successfully developed. Nevertheless, to our knowledge, none has been established at any of the HBCUs. The proposed gaming concentration aims to educate minority students with the skills necessary to participate as computer scientists in a game development team and other software development projects. The concentration will help the enrollment and retention of underrepresented students and increase the quality of graduates in this field. A successful gaming concentration at WSSU will advance the knowledge in developing curricula for HBCUs and other minority institutions.	Developing a gaming concentration in the computer science curriculum at an HBCU (abstract only)	NA:NA	2018
Jason Snyder	OSSIE is an open source SDR project created for education and research. When used as a teaching example, OSSIE provides lessons about open source and systems development. It is also an ideal platform for a variety of projects, from capstone studies to theses. A series of labs introduces new users to the software and quickly illustrate key SDR concepts and practices. Included components and waveforms provide excellent examples and allow for the simple creation of new waveform applications. The waveform workshop allows SDR developers to concentrate on the signal processing aspects of OSSIE software development by automatically generating code necessary for interfacing with the OSSIE Core Framework. Finally, the Core Framework provides an ideal platform for SDR and signal processing research.	OSSIE: an open source software defined radio (SDR) toolset for education and research (abstract only)	NA	2018
Jean H. French	While a focus on programming and mathematical skills is second nature to computer science faculty, perhaps equally important should be the recognition of the need for students to master communication skills. This poster presents the measured results of various methods used in the implementation of a communication-intensive core course into a CS curriculum at a small liberal arts university. The communication intensive core course is a CS1 introduction to computer science which is required to implement both oral and written assignments. Five key areas of success were implemented to help support the communication-intensive CS curriculum. They are: (1) communication skills need to be integrated within the CS curriculum, (2) communication skills should begin to be developed early in the student's academic career, (3) communication skills include a broad range of categories, (4) communication skills need to be supported by feedback, and (5) communication skills can be taught in the CS curriculum without sacrificing CS content. The results are provided on a four-point scale and focus on both student success and grading complexity. Scores are provided for each of the methods used since the course was first implemented in 2007. Such a comprehensive evaluation aims to assist in determining which methods are best suited for implementing a core communication that stresses continuous improvement in communication skills.	Implementing a communication-intensive core course in a CS curriculum: a survey of methods (abstract only)	NA	2018
Quinn Burke:Yasmin B. Kafai:Jean Griffin:Rita M. Powell:Michele Grab:Susan B. Davidson:Joseph S. Sun	Community service courses are often where undergraduates make connections between academic content and practical computer science applications, build bridges between the university and the community, and ultimately increase access to technology in such communities. In this poster we report on our efforts-supported by a NSF Broadening Participation in Computing grant-to design, implement, and evaluate a service-learning course based on a "cascading mentoring" model linking together the faculty, administration, and undergraduates of an urban university's computer science department with area high school students. The poster presents the cascading model and through a series of post-interviews offers preliminary data charting undergraduates' experiences as both mentees and mentors.	The reflective mentor: charting undergraduates' responses to computer science service learning (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Li Yang:Joseph Kizza:Andy Wang:Chung-Han Chen	Teaching cryptography is essential in undergraduate information assurance (IA) education as it is an indispensable component in the IA knowledge domain and plays a key role in ensuring information confidentiality, integrity and availability. Hands-on method in cryptography is a good approach to achieve this as it engages students in real-world settings, which will inspire creativity of students and train them to adapt cryptographic solutions to emerging areas. We design a collection of labs which allow students to gain hands-on experiences with cryptographic algorithms, especially increasing student awareness of possible threats and attacks to various cryptographic techniques. The developed hands-on exercises tied with each cryptography topic teach students both cryptographic algorithm and vulnerabilities. In each exercise students experience cryptographic techniques and its possible threats and attacks. In other words, students learn and understand both strength and weakness of each cryptography technique. Our labs cover topics of encryption, digital signature, key management, etc. These labs can be "plugged" into courses at different levels from CS1 to senior courses such as network security, security management, etc. Our approach enriches experiential learning materials in cryptography. Our effort contributes to cryptography courseware development and IA education in terms of hands-on exercises. The hands-on labs can be adopted in various levels of undergraduate Computer Science (CS) and IA courses. Hands-on labs are available at http://cryptolabs.info/.	Teaching cryptography using hands-on labs (abstract only)	NA:NA:NA:NA	2018
Pelle Hall:Andrew Hirakawa:Jennelle Nystrom:Samuel A. Rebelsky	Consider a middle-school student "playing" with a computer. What does she do? She may chat with friends. She may surf the Web. She may even play a few games. But she is also likely to make things with drawing programs, word processors, or other applications that make things. Can one leverage that creativity to encourage her to want to learn to program? Projects from Alice (Moskal et al. 2004) to Scratch (Maloney et al. 2010) have certainly shown that tools that tie creativity and programming can encourage students to think algorithmically. Despite the success of these programs, there is still room for new models that link children's artistic interests with programming. In this project, we explore the link between creativity and programming through a different model, one in which the drawing application "self discloses" underlying commands (DiGiano & Eisenberg 1995). As students draw images with the GNU Image Manipulation Program, a Photoshop-like application, a small window displays code that represents their actions. For example, when they draw a line, a "draw line" command appears that includes the coordinates of the line; when they change brushes, a "set brush" command appears that includes the name of the brush. Eventually, students refer to these commands to redraw their figures, to copy their figures, and to change their figures. Slowly they move from copying and pasting code, to modifying, to writing their own instructions, and beyond.	From drawing to programming: attracting middle-school students to programming through self-disclosing code (abstract only)	NA:NA:NA:NA	2018
Carol Spradling:Florence Appel:Elizabeth Hawthorne	The ACM/IEEE-CS 2001/2008 computer science curricular guidelines are in the process of being updated and the strawman version of CS2013 will be unveiled at SIGCSE 2012. Inclusion of the ethical, societal and professional responsibility issues dates back to Computing Curricula 1991. This poster session will present the revised Social and Professional issues knowledge area and provide a means for any SIGCSE community member to provide feedback directly to SIGCAS and the CS2013 steering committee. Specific core and elective knowledge units, topics and learning outcomes will be delineated. The current state of the discipline and the profession were examined to provide contemporary guidance for the education of ethical behavior, professional practice and societal impact for computer science majors.	Proposed revisions to the social and professional knowledge area for CS2013 (abstract only)	NA:NA:NA	2018
Zalia Shams:Stephen H. Edwards	Instructors often write reference tests to evaluate student programs. In Java, reference tests should be independent of submitted solutions as they are run against all student submissions. Otherwise, they may even fail to compile against some solutions. Reflection is a useful feature for writing code without compile-time dependencies, which is valuable for writing software tools that inspect code. However, educators avoid using reflection as code written using Java's Reflection API is complex, unintuitive and verbose. We present ReflectionSupport, a library that enables one to write reflection-based code in concise, simple and readable fashion. It helps educators write reference tests without compile-time dependencies of solutions and develop educational tools such as automated graders.	A better API for Java reflection (abstract only)	NA:NA	2018
Qusay H. Mahmoud:Nicholas Mair:Younis Mohamed:Sunny Dhillon	In this poster we present a set of hands-on labs for a mini-course on mobile application development that can be used as a lab component of any Computing course. The labs revolve around a single theme whereby students experiment with designing and developing the user interface, interaction model, and inter-connectivity of a mobile application for Google Scholar; the developed application can be deployed on a variety of mobile platforms, including BlackBerry, Android, and iPhone devices (smartphones and tablets). Students learn about mobile programming models and cross-platform development and appreciate the unique opportunities such devices offer, but also become aware of the development challenges they present. For more information, please visit: http://cmer.uoguelph.ca.	Hands-on labs for a mini-course on mobile application development (abstract only)	NA:NA:NA:NA	2018
Vicki L. Almstrum:Barbara Boucher Owens:Mary Z. Last:Deepa Muralidhar	This poster presents recent progress with the Computing Educators Oral History Project (CEOHP). To provide context, the poster includes a brief history of CEOHP and a summary of the interviews currently in the collection (a total of twenty-six completed interviews at the end of 2011). During Evaluation efforts in 2009 and 2010, a series of face-to-face and on-line qualitative interviews provided feedback about the CEOHP website, including its organization, content, and usability by target groups. The Evolution process incorporated ideas generated during Evaluation to improve both quality and consistency of the collection elements and the CEOHP website. In the Archival Storage process, all completed interviews in the CEOHP collection are being submitted to the prestigious Charles Babbage Institute for permanent indexing and archiving. These archival steps will become part of CEOHP's standard processing procedures, so each interview added to the CEOHP collection will be archived by the Charles Babbage Institute, guaranteeing that these materials will survive far into the future. This poster describes major steps, challenges, and achievements in the areas of Evaluation, Evolution, and Archival Storage, as well as the spiral nature of these activities as part of the on-going process of growing a collection such as CEOHP.	CEOHP evaluation, evolution, and archival storage (abstract only)	NA:NA:NA:NA	2018
Christy L. McGuire:Thomas K. Harris:Jonathan Steinhart:Leigh Ann Sudol-DeLyser	With grant funding from the National Science Foundation, we are developing the CodeTrainer Content Authoring System, a mechanism that allows educators to create and contribute their own curriculum content and align that content with the features of our larger intelligent tutoring system, CodeTrainer. Through a series of user studies, we evaluated the needs of computer science educators for both curriculum content and appropriate user interface. Results from these studies indicate that computer science educators would find CodeTrainer a useful tool, and offered suggestions for improving the usability. This material is based upon work supported by the National Science Foundation under Grant No. 1113692.	CodeTrainer teacher authoring system: facilitating user-created content in an intelligent tutoring system (abstract only)	NA:NA:NA:NA	2018
Edward Dillon:Monica Anderson:Marcus Brown	Improving the novice's experience with programming may be key to retaining more students interested in Computer Science. Programming environments is an area that lacks comprehensive study. Some entry-level sequences prefer visual environments while others tout the benefits of command line environments. In either case, there is little more than anecdotal evidence to support either choice. We present a novel categorization of programming tools based on assistive features that predict the usefulness of programming environments for novices. This categorization is supported by a controlled study that measured the differences in engagement, efficiency, comprehension, and usability. We found that the extremes of assistive features are problematic regardless of prior programming experience.	Comparing feature sets within visual and command line environments and their effect on novice programming (abstract only)	NA:NA:NA	2018
Jeffrey Forbes	The widespread use of online social networks provides a particularly compelling domain for introducing computer science techniques and concepts to undergraduate students. As part of the HarambeeNet project, I developed a new course on the Science of Networks that explores the interconnectivity of social, technological, and natural entities. Students in the course learn fundamental techniques from graph and game theory to analyze network structure and behavior. Material for the course was developed and refined through a survey of exemplar courses, workshops, and faculty learning communities all focused on network science. The poster describes the course framework, provides some example assignment and lecture material, and presents some lessons learned.	Exploring connected worlds (abstract only)	NA	2018
Tim Bell:Lynn Lambert:Daniela Marghitu	Outreach activities including Computer Science Unplugged demonstrate computer science concepts at schools and public venues based around kinesthetic activities rather than hands-on computer use. Computer Science Unplugged is a global project that has shared many such activities for children to adults using no technology, including how binary numbers represent words, images and sound, routing and deadlock, public/private key encryption, and others. These and other effective outreach programs can combat the idea that computer science = programming or, worse, keyboarding; and can educate the public, interest students, and recruit majors. Many people have used these activities, and adapted them for their own culture or outreach purposes. Come share your outreach ideas and experiences with such activities. Employers, researchers and teachers have noted the need for effective outreach to ensure that students and the public be exposed to, and understand what Computer Science is. CS Unplugged is a collection of activities that are accessible to a general audience, need no technology, are fun, and cover many core areas of computer science. The focus of this session will be discussing activities that introduce computer science concepts and way of thinking, and that are consistent with Jeanette Wing's Computational Thinking [Wing06]. The session is intended to allow exchanging ideas about effective outreach in the community, in K-12, and even non-major classes. There are many variations of these activities, and it is valuable to get practitioners together to share their successes - and not-so-successful events - so that others can benefit from them.	CS unplugged, outreach and CS kinesthetic activities (abstract only)	NA:NA:NA	2018
Elizabeth K. Hawthorne:Nancy R. Mead:Mark A. Ardis:Carol A. Sledge	Nearly every facet of modern society depends heavily on highly complex software systems. The business, energy, transportation, education, communication, government, and defense communities rely on software to function, and software is an intrinsic part of our personal lives. Teaching software assurance and secure coding practices are significant challenges currently facing computer science educators. The Strawman version of the CS2013 curricular volume recognizes this vital need and has included a new knowledge area to specifically address software and information assurance in undergraduate computer science education. Also recognizing the importance of the software assurance discipline for protecting national infrastructures and systems, the U.S. Department of Homeland Security (DHS) has identified the growing need for skilled practitioners in this area. At the direction of the DHS, the Software Engineering Institute at Carnegie Mellon University initiated the Software Assurance Curriculum Project. Session leaders will share curricular materials from this project and will facilitate active discussion centered on infusing software assurance into introductory computer science courses at two-year and four-year colleges and universities. The latest curricular volume published September 2011 will be distributed at the session and includes a review of related curricula, outcomes and body of knowledge, expected background of target audiences, and outlines of six courses. These curricular materials are also available online at www.sei.cmu.edu/library/abstracts/reports/11tr017.cfm.	Infusing software assurance and secure coding into introductory CS courses (abstract only)	NA:NA:NA:NA	2018
Stephen H. Edwards	Web-CAT is the most widely used open-source automated grading system, with about 10,000 users at over 65 institutions worldwide. Its plug-in architecture supports extensibility, with plug-ins for Java (including Objectdraw, JTF, Swing, and Android), C++, Python, Haskell, and more. It is also a powerful tool for educational research data collection. It supports a wide variety of assessment strategies, but is famous for "grading students on how well they test their own code". Web-CAT won the 2006 Premier Award, recognizing high-quality, non-commercial courseware for engineering education. This BOF will allow existing users and new adopters to meet, share experiences, and talk about what works and what doesn't. Information on getting started quickly with Web-CAT will also be provided.	Web-CAT user group (abstract only)	NA	2018
Sebastian Dziallas:Heidi J.C. Ellis:Mel Chua:Steven Huss-Lederman:Karl R. Wurst	Involving students from a wide range of backgrounds in Free and Open Source Software (FOSS) project communities gets them a hands-on, portfolio-building experience in the creation of a real-world project while simultaneously building their institution's public profile. The Teaching Open Source (http://teachingopensource.org) community is an emergent (3 year old) group working on scaffolding to bridge the cultural differences between academic and FOSS communities of practice. Join us to share questions, challenges, and triumphs of incorporating FOSS participation into existing and new curricula as well support resources for doing so. Alumni and current members of the POSSE (Professors' Open Source Summer Experience, http://communityleadershipteam.org/posse) will attend in mentorship roles. Faculty attendance at the SIGCSE 2010 BoF on Teaching Open Source (TOS) indicates that student involvement in FOSS projects is a teaching and learning approach of interest for many faculty members. The transparency of both artifacts and process make FOSS an attractive real-world experience that enhances peer learning and intrinsic motivation for a diversity of courses, from introductory, interdisciplinary, and non-major classes to software engineering core offerings and senior capstones. However, such student participation involves a significant learning curve and effort on the part of the faculty member, and support structures for faculty are still maturing. 2011-2012 marks the 3rd academic year the TOS community has explored this realm together, and the past year has seen the emergence of more best practices, support resources, and curricular material. Community members are starting to design cross-institutional research on the impact of FOSS participation on students. BoF attendees will be encouraged to ask questions, network, and take advantage of the TOS community as a support structure for their own courses and projects. The audience is expected to consist of instructors who 1) are interested in learning how to get started in involving students in FOSS projects; or 2) have involved students in FOSS projects and are looking for better ways to facilitate student learning within FOSS projects.	Teaching open source: involving students in free and open source software (FOSS) project communities (abstract only)	NA:NA:NA:NA:NA	2018
Brian Harvey:Tiffany Barnes:Luke Segars	The College Board's guidelines for the coming AP CS Principles course are broad enough to allow many different interpretations. In particular, different courses have different levels of technical depth. The "Beauty and Joy of Computing" curriculum, used by two of the initial five pilot sites, aims high, with recursion and higher order functions included in the programming half of the course. This session is for high school or college level instructors considering teaching an AP CS Principles course and interested in using the BJC curriculum, and/or the Snap! (formerly BYOB) visual programming language used in the curriculum. See http://bjc.berkeley.edu for the curriculum and http://snap.berkeley.edu for the language.	AP CS principles and the 'beauty and joy of computing' curriculum (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Jody Paul:Mark Sherriff	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position, providing the possibility of promotion, longer-term contracts, and higher pay for excellence in teaching and service. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2018
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight the new NSF Broadening Participation in Computing grant -- a grant that encompasses projects we presented in previous BOFs and a grant that builds on an alliance among ACM-W, ABI and NCWIT.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2018
Richard A. Brown:Elizabeth Shoop:Joel C. Adams:David P. Bunde:Jens Mache:Paul F. Steinberg:Matthew Wolf:Michael Wrinn	Recent industry changes, including multi-core processors, cloud computing, and GPU programming, increase the need to teach parallelism to CS undergraduates. But few CS programs can afford to add new courses or greatly alter syllabi, and the large parallelism body of knowledge relates to many courses. Participants in this BOF will share incremental approaches for adding parallelism to undergraduate CS curricula, where students study parallel computing in brief units. This networking event/ brainstorming session/ swap meet will bring together: " people with sharable parallelism expository readings, hands-on exercises, tech support ideas, etc.; "people wishing to include such materials in their courses; and" people curious about incremental approaches to teaching parallel computing.	Sharing incremental approaches for adding parallelism to CS curricula (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA	2018
James Jerkofsky:Cathy Bareiss	Faculty in small departments (perhaps 3 FTE, perhaps only 1 or 2,&) face special situations - both challenges and strengths. In this BOF, members will have a chance to talk about both. Challenges include maintaining a well-rounded curriculum and attracting students. Strengths include a close relationship with other members of the department and majors. These and other topics are open for discussion; the specific topics will be based upon the composition and interests of the group assembled.	Computer science: small department initiative (abstract only)	NA:NA	2018
Don Slater:Wanda Dann:Steve Cooper	This session is for anyone currently using Alice 2.2 and / or thinking about using Alice 3, or exploring the possibility of using Alice in his or her curriculum. The discussion leaders and experienced Alice instructors will share teaching strategies, tips, and tricks with each other and those new to Alice. The session provides an arena for sharing Alice instructional materials and ideas for courses at all educational levels. This is an opportunity to share assignments and pointers to web sites where collections of instructional materials, such as syllabi, student projects, exams, and other resources are available.	Teaching with Alice (abstract only)	NA:NA:NA	2018
Peter J. DePasquale:Michael E. Locasto:Lisa C. Kaczmarczyk	Few, if any, pedagogical practices exist for helping students embrace best practices in writing software documentation, particularly source code comments. Although instructors often stress the importance of good commenting, two problems exist. First, it can be difficult to actually define these best practices, and second, it can be difficult to grade or assess students' application of such methods/practices. This Birds-of-a-Feather session focuses on capturing for dissemination a concrete list of code commenting best practices used by the attendees as they teach their classes. We will aim to facilitate the development of commenting best practices by collecting the experiences and suggestions of the BOF attendees into a concrete list of practices and initiatives (and we plan to post this to our publicly accessible project wiki). Additionally, we plan to report on our progress in creating and deploying the COMTOR system, an NSF-funded project that supports feedback to students and grading capabilities for instructors of student source code comments.	Identifying effective pedagogical practices for commenting computer source code (abstract only)	NA:NA:NA	2018
Jeffrey L. Duffany:Alfredo Cruz	To enhance the learning process a certain amount of hands-on experience is desirable to supplement the theory portion of computer security-related courses. This includes courses in information assurance, database security, computer security and computer forensics, among others. Many classrooms designed for teaching computer programming have personal computers for use by each student. Some universities have dedicated laboratories. These labs and classrooms can be expensive to maintain and upgrade and this may be done by a separate IT department. There are budget constraints and political issues that must be addressed between the school, faculty and university administration. Because of these constraints, many schools and universities may be lacking in their lab resources for teaching computer security. This situation could be improved in many cases with little financial investment. This presentation is based on sharing the experience of professors that are currently teaching these courses to graduate and undergraduate students. These professors will present ideas on specific hardware and software that can be used to develop a computer security lab or to enhance a classroom environment, with an emphasis on free and open source software, operating systems and the use of virtual machines.	Design of a computer security teaching and research laboratory (abstract only)	NA:NA	2018
Joseph Mertz:Ralph Morelli:Ruth E. Anderson	This BOF is a chance for information sharing among faculty interested in involving students in ICTD research and/or service learning toward cultural and economic development globally. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations.	Student ICTD research and service learning abroad (abstract only)	NA:NA:NA	2018
Jerod Weinman:Ellen Walker	Within computing, the imaging field includes computer vision, image understanding, and image processing. While much research and teaching is done at the graduate level, the typical imaging educator at an undergraduate institution is the only specialist in his or her department. This BOF brings together educators who currently teach imaging courses or may be interested in expanding curricular offerings. We will emphasize sharing best practices, ideas, and resources as well as building a network for continued cooperation. Discussion topics may include course organization, assignments and projects, and lecture aids or other materials. Our network will include a mailing list for participants to ask questions and share ideas about imaging pedagogy and other means of sharing course materials.	Imaging college educators (abstract only)	NA:NA	2018
Kimberly D. Voll	Our students are the social media generation, touting Facebook, Google+, and even Twitter accounts as a matter of course. Providing rich, highly integrated environments, social media systems are a template for community and connection. In contrast, CS education is via singular modalities: lectures, textbooks, labs, discussions, et cetera, that share no active or social connection (you cannot +1 a lecture, for example, share a passage of a text with a classmate, or pull up a view that truly integrates a course and its community). But now we have the technology to create learning environments that share the same rich, multimedia experience as the popular social media sites. What should this look like? How do we start? What have you tried? We'll open with a brief overview of the leading social media tools for those unfamiliar, then proceed straight to an open discussion.	Let's talk social media (abstract only)	NA	2018
Viera K. Proulx:Stephen Bloch	Program by Design is a new name for the comprehensive introduction to programming at all levels that began with TeachScheme/ReachJava. This unconventional introductory computing curriculum covers both functional and the object- oriented program design in a systematic design-based style, enforcing test-first design from the beginning. The Bootstrap curriculum makes programming and algebra exciting for children ages 11-15. Special libraries support the design of interactive graphics-based games, musical explorations, client-server and mobile computing. We invite you to come and meet those who have used the curriculum, learn about new additions, libraries, bring in your experiences with the curriculum, show your projects, or ask questions about how it works and how you can use it. This work is sponsored by two NSF DUE CCLI grants: Redesigning Introductory Computing: The Design Discipline, Grant #00618543, and Integrating Test Design into Computing Curriculum from the Beginning, Grant #0920182.	Program by design: TeachScheme/ReachJava (abstract only)	NA:NA	2018
Frances P. Trees:Helen Hu:Chinma Uche	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, provision of member services at the local level, and to promote CSTA membership on the national level[1]. This BOF will provide a platform for the discussion of CSTA chapter formation and for the sharing of successful chapter activities.	CSTA chapters: supporting your local computer science educators (abstract only)	NA:NA:NA	2018
Kristine S. Nagel:Evelyn Brannock:Robert Lutz	Tech Camps are popular outreach tools to interest teens in computing programs and technology careers. One of the biggest obstacles is how to make Tech Camp "cool" and inviting for teenagers. How do we grab the attention of students to enroll? Once at camp, how do we engage teens with computing as a creative tool with relevancy to their lives? It is summer; subject areas must be entertaining and relevant. Can we stay ahead of the tech-savvy teens with our budget constraints? Robots and storytelling have long been used; how do we innovate and spark interest, throughout the year? The purpose of this BOF is to share ideas, such as App Inventor for Android to create apps, including text messaging, encouraging students to incorporate their own creative graphics, and using tablet devices.	Revitalizing computing camp and outreach: how do we engage teenagers in "cool" technology? (abstract only)	NA:NA:NA	2018
Clifford A. Shaffer	What should the textbook of tomorrow look like in a world of ubiquitous access to computing? Hypertextbooks have proved difficult to create and been fundamentally passive experiences. Commercial eBooks are merely books printed on an electronic screen instead of paper. New technologies such as HTML5 make it feasible to develop interactive applications that integrate with web services to provide a rich, pedagogically effective learning environment compatible with a range of computing platforms. We seek to generate discussion by participants to describe what they hope to see in online textbooks in the near future, and what resources and support would be required for them to adopt such a thing into their own courses.	Active eTextbooks for CS: what should they be? (abstract only)	NA	2018
N. Hari Narayanan:Martha Crosby:Dean Hendrix:Christopher Hundhausen	This BOF is related to the Special Session Transforming the CS Classroom with Studio-Based Learning (SBL). SBL promotes learning in a collaborative context by having students construct, present, review and refine their work with the guidance of peers and teachers. A team of CS educators and education experts have been implementing and evaluating SBL in CS courses over the past five years. The BOF will introduce SBL to the SIGCSE audience, and engage them in a discussion of the potential of, evidence for, and practical advice regarding SBL as an instructional approach that can motivate as well as teach students. Discussions will include "war stories" from teachers who have adopted the approach in their courses and hands-on activities to help participants apply SBL to their courses.	Enriching computing instruction with studio-based learning (abstract only)	NA:NA:NA:NA	2018
Lester L. Wainwright:Renee Ciezki:Robert G. Martin	This BOF will provide an opportunity for high school and college faculty to discuss the AP CS A curriculum and to explore possibilities for collaborations and outreach activities between high schools and colleges.	AP CS A: sharing teaching strategies and curricular ideas (abstract only)	NA:NA:NA	2018
Jodi Tims:Ellen Walker:Rachelle Kristof Hippler	Regional celebrations are locally organized, professional conferences modeled after the Grace Hopper Celebration of Women in Computing (GHC). This BOF allows people who have organized or would like to organize such a conference to get together to share successes and challenges. Attendees that have hosted a regional celebration should bring a un-poster (i.e. 8.5 x 11 flyer, 30 copies) that highlights their conference features and/or shares lessons learned. The leaders plan to divide the time between the 5 major areas of conference planning: program, sponsorship, publicity/communications, registration, and site/logistics.	Regional celebrations of women in computing (WiC): best practices (abstract only)	NA:NA:NA	2018
Richard S. Weiss:Michael E. Locasto:Jens Mache	Incorporating information security into the undergraduate curriculum continues to be a topic of interest to SIGCSE attendees. The purpose of this BOF is to help sustain the existing community of educators and researchers interested in bringing ethical hacking skills and an understanding of security into the classroom and relating these topics to the foundations of Computer Science. We would like to bring our colleagues together to share pedagogical practices, stories of hacking and how to use them to inspire our students and communicate complex concepts in computer science and security. We also plan to discuss our own experiences, practices and ongoing efforts (e.g., our infosec teaching experiences, the SISMAT program, EDURange and the dissemination of infosec interactive exercises). SISMAT is one of many alternatives for teaching cybersecurity to undergraduates. It is based on the "Hacker Curriculum" and includes a two-week summer intensive program, a research component and an internship. A description can be viewed at http://www.ists.dartmouth.edu/events/sismat/. An education in computer science can be an important resource in nurturing future leaders in cybersecurity, but only if we enable a community of educators willing to share approaches. This was highlighted by Sally Finch's keynote speech in 2010. At our BOF last year, several people had stories to share, and we plan to focus on that.	Hacking and the security curriculum: building community (abstract only)	NA:NA:NA	2018
Barry Brown	In a flipped classroom, students watch or listen to the lecture at home and do homework in the classroom. The classroom becomes much more interactive and the educator has ample opportunity to provide individualized guidance when it's most needed. The watch-at-home content can include recorded lectures, demonstration videos, adaptive quizzes, or anything in between. Come share your experiences developing "flip" material, learn from others what's involved, and find out whether it's working to improve success and retention.	Flipping the classroom (abstract only)	NA	2018
Semmy Purewal:Owen Astrachan:David Brown:Jeffrey Forbes	Social Networking continues to be a popular past-time among high school and college students. In this birds of a feather session, we will share ideas on integrating social networking topics into computer science courses at the introductory and non-major levels. Additionally we will discuss approaches to integrating social network programming into upper level courses. Finally we will attempt to address the following questions: will social networking draw new students into the computing disciplines the way that video games did in the previous generation? Will it attract new types of students with different expectations? Is social networking just a fad that will have no effect on Computer Science programs? Or is social networking a topic that is better left to other academic disciplines?	Using social networks to engage computer science students (abstract only)	NA:NA:NA:NA	2018
Robert E. Beck	This discussion will connect instructors who are reaching out to their colleagues in the humanities to discover areas of collaboration. It focuses on what these disciplines have to contribute to our knowledge of computing and how computational thinking informs these disciplines. One goal is to lay the foundation for a more general program of study in digital humanities that would reach students who would like to see how computing could enhance their work in history, literature, anthropology, or philosophy, for example.	Digital humanities: reaching out to the other culture (abstract only)	NA	2018
Trish Cornez:Richard Cornez	Attracting computer science students in a liberal arts setting serves to enhance the background and breadth of the class of professional programmers. There is a segment of the student population that is talented and artistic, but may not be aware of the interplay between computer science and the arts or computer science and mathematics and the sciences. Students are acculturated in a visual, interactive, and interdisciplinary world. This BOF will provide a platform for a discussion on how multimedia can be integrated in beginning level computing courses. Discussions will focus on attributes of conventional and unconventional first languages and explore a liberal arts approach to integrate disciplines both scientific and artistic. We envision discussions relevant to (a) mathematicians visualizing processes using multimedia and algorithms, (b) physicists using game programming to explore physical and virtual worlds, (c) computer scientists and behavioral scientists collaborating on responsive systems, (d) musicians, artists, and computer scientists creating computational art. The audience is expected to consist of faculty looking at nontraditional approaches to a first course in programming. Faculty with an aim to attract students to computer science studies will find this discussion useful. Those who feel their curriculum to be too narrowly focused and wish to broaden their curriculum to include the humanities and interdisciplinary approaches to computer science will find like-minded peers to communicate with.	A multimedia and liberal arts approach to a first course in programming and its crossover potential for computer science and the arts (abstract only)	NA:NA	2018
Hal Abelson:David Wolber:Ralph Morelli:Jeff Gray:Chinma Uche	App Inventor for Android is a visual blocks language for building mobile apps. Like Scratch, the language's drag-and-drop blocks interface significantly lowers the barrier to entry. Beginners can immediately build apps that interface with mobile technology (e.g., GPS, Text-to-speech, SMS Texting) and build apps that have a real-world impact. App Inventor has great potential for increasing interest in programming and attracting women and other underrepresented groups to computer science. Students learn by tinkering with their most beloved devices, phones and tablets, and even novices can create apps in an exciting and intuitive environment. App Inventor is relevant to teachers from middle school through the university level who are interested in a highly motivating method of teaching programming. In this BoF, we will discuss the language, its future in K-12 and university education, and its new home at the MIT Center for Mobile Learning.	Teaching with app inventor for android (abstract only)	NA:NA:NA:NA:NA	2018
Daniel D. Garcia:Luke Segars	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part - we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users? Come to this BOF! We'll also show the TECH website we've built that attempts to collect all of these tools in one place.	Technology that educators of computing hail (TECH): come, share your favorites! (abstract only)	NA:NA	2018
John Lewis:Anthony Allevato:Stephen Edwards	The use of Android in computing courses is growing. Students find it engaging because it offers a unique opportunity to develop Java apps for mobile devices. Android offers opportunities and challenges in a teaching environment, especially in CS1 and CS2. As a professional-level platform, it incorporates many design idioms that may require students to learn advanced language features earlier. It also introduces logistical complications in setting up development tools and code projects. Existing approaches to software testing and automated grading also must be adapted. This BOF will gather educators interested in using Android in their courses, focusing on issues that arise when balancing the need to teach fundamental concepts with the complexities required to accomplish basic tasks on the Android platform. We look forward to sharing assignments, resources, techniques, and experiences with others interested in Android.	Motivating CS1/2 students with the android platform (abstract only)	NA:NA:NA	2018
Suzanne W. Dietrich:Don Goelman	Databases play a major role across many disciplines for the storage and retrieval of information. Many database educators are establishing collaborations with colleagues representing a diverse spectrum of interests, for both research and pedagogical purposes. Further, the range of cooperating disciplines is expanding, as evidenced by the emergence of new fields such as computational journalism, as well as by the proliferation of discipline-specific dialects of XML. The goal of this Birds-of-a-Feather session is to bring database educators together to share their experiences on interdisciplinary collaborations in an open dialogue that is fostered by this format.	Interdisciplinary database collaborations (abstract only)	NA:NA	2018
Carol Smith	Google Summer of Code is the outreach program aimed at getting university students involved in a 3-month online internship working in open source software development. Google Code-in is the contest aimed at involving 13-18 year olds in open source software development, documentation translation, outreach, research, and more. I will be discussing both programs at this BoF and encouraging students and teachers to get involved. We'll open the forum for discussion amongst the attendees about how to participate, how to get the word out, and answer any questions they may have.	Google summer of code and google code-in BoF (abstract only)	NA	2018
Chris Stephenson:Steve Cooper:Don Yanek:Jeff Gray	Over the last five years, CSTA has built a solid outreach and teacher support network through the work of its chapters and Leadership Cohort. This network has also become a major source of active partnerships between K-12 teachers, their schools, and colleagues from colleges, universities, and industry. The goal of this BOF is to provide concrete examples and suggestions for SIGCSE members interested in building these kinds of partnerships.	Building partnerships across the CS education spectrum (abstract only)	NA:NA:NA:NA	2018
William Turkett:Pa√∫l Pauca:Joel Hollingsworth	As the popularity of mobile devices surges, more and more organizations are looking to exploit the novel interaction methods of mobile devices to re-deploy legacy software or to develop innovative new applications. Many organizations are looking to nearby universities for expertise in this area. At the same time, mobile computing has become increasingly integrated within courses in CS departments. Historically, capstone courses and other advanced electives have resulted in the production of non-trivial software artifacts. This BOF will provide a platform for discussion of how the use of mobile app platforms in such courses can allow for the development of meaningful software projects that engage with and give back to the community and provide rich opportunities for service learning.	Engaging the community with mobile app projects (abstract only)	NA:NA:NA	2018
Paige H. Meeker	At many schools, various disciplines offer travel courses to enhance the knowledge of the student. How can we introduce such courses to computer science departments across the country? This BOF will provide a time of sharing ideas for such courses and discuss travel courses that have been successfully taught. This will include not only the material for the course but also discussion concerning the additional planning overhead that must be considered when traveling - cost, insurance, itinerary, safety, etc.	Have class, will travel (abstract only)	NA	2018
Tracy Camp	The demand for computing professionals continues to grow, while women and minorities remain severely underrepresented at all levels. This opening SIGCSE 2013 keynote asks the crucial question "What can WE do to change the face of computing?" Several answers to this question will be provided in an unusual format with the following all-star cast. Each speaker will take five minutes to share 20 slides (which automatically advance every 15 seconds) to provide a stimulating presentation that ends with "What can YOU do to change the face of computing?"	Changing the face of computing	NA	2018
Henry Walker	Early discussion regarding a talk at the First-Timers Luncheon highlighted the opportunity for an oldtimer to welcome first timers, encourage participation, and provide perspectives. Throughout my career, I have been privileged to be able to connect my personal career with activities for the broad, educational-computing community. This talk reflects on factors that have impacted both my own career and the evolution of broader groups --- particularly SIGCSE. Some general principles (e.g., inclusion, respect, service and social responsibility) seem clear, but even then circumstances present challenges and contradictions. Other principles (e.g., encouraging creative brainstorming, utilizing serendipity, listening to people) may be less obvious, but equally vital. Many have described the SIGCSE community as a professional family, and this talk seeks to celebrate that community as promotes a vision for fulfilling personal careers and continued organizational development.	Principles, priorities, and pressures: personal and organizational	NA	2018
Michael K√∂lling	Tools to support and improve the learning and teaching of programming have been developed, used and researched for many years. Yet, sometimes it seems we are still faced with exactly the same problems we were trying to tackle a decade ago, or two decades ago. In this talk I will look back on educational software tools, through very subjective blinkers, and present a highly personal slice of the history of some of these efforts. This is followed by an attempt to speculate about the future. Where my crystal balls fail me, I will simply stipulate wishes, requirements and challenges always much easier than presenting facts. Overall, I hope that some current trends in educational software tools emerge.	This much I know: thoughts on the past, present and future of educational programming tools	NA	2018
John Etchemendy	There has been an explosion of interest in Online Education since Stanford made three computer science courses freely available in September 2011 and attracted 300,000 "students." Yet Online Education has been around in various forms for thirty plus years. What accounts for the sudden inflection point sparked by these courses? Will the rush to put courses online prove to be (a) a flash in the pan, (b) the savior of higher education, (c) the death knell of universities as we know them, (d) all of the above?	Online education	NA	2018
Jane Margolis	In the decade since Unlocking the Clubhouse: Women in Computing (MIT Press, 2002) was published, educational institutions have coalesced around the mission of increasing women's participation in computing. Yet, despite the uptick of interest in computer science majors and the surge of technology shaping all aspects of our lives, the numbers of women majoring in computer science are still abysmally small. In this talk, I will further reflect on why this is the case, and make connections to the issues raised in Stuck in the Shallow End: Education, Race, and Computing---the underrepresentation in computer science of students of color. I will examine how underrepresentation in computing relates to the larger educational crisis in this country and issues we face as world citizens. This talk is part of an overarching mission to understand how inequality is produced in this country and the types of social action required to equalize opportunities and broaden participation in computing.	Unlocking the clubhouse: a decade later and now what?	NA	2018
Yolanda Rankin:Jakita Thomas:Quincy Brown:Leshell Hatley	NA	Shifting the paradigm of african-american students from consumers of computer science to producers of computer science	NA:NA:NA:NA	2018
Mehran Sahami:Steve Roach:Ernesto Cuadros-Vargas:Richard LeBlanc	For over 40 years, the ACM and IEEE-Computer Society have sponsored the creation of international curricular guidelines for undergraduate programs in computing. These Computing Curricula volumes are updated approximately every 10-year cycle, with the aim of keeping curricula modern and relevant. The next volume in the series, Computer Science 2013 (CS2013), is currently in progress. This panel seeks to update and engage the SIGCSE community in providing feedback on a complete draft of the CS2013 report (called the Ironman report), which will be released shortly before SIGCSE. Since the Ironman report is the penultimate draft of the CS2013 report, this panel is an especially important venue for starting the last round of feedback that will impact the final CS2013 curricular guidelines.	ACM/IEEE-CS computer science curriculum 2013: reviewing the ironman report	NA:NA:NA:NA	2018
Michael Goldweber:John Barr:Elizabeth Patitsas	NA	Computer science education for social good	NA:NA:NA	2018
Jodi Tims	NA	Session details: Paper - data structures	NA	2018
Ivona Bezakova:James E. Heliotis:Sean P. Strout	We present three open-ended freshman projects where students design and implement their own player strategies for well-established board games: Quoridor by Mirko Marchesi (Gigamic), San Francisco Cable Cars by Dirk Henn (Queen Games), and The aMAZEing Labyrinth by Max J. Kobbert (Ravensburger). Unlike modern computer games, most board games are inherently discrete. For example, the board tends to have a fixed number of allowed positions for the game pieces and every player performs a search through a finite number of possible moves to decide which move to take next. As such, designing a player strategy for a board game provides a very natural context for basic data structures, searching algorithms, and other concepts typically covered in a freshman-level computer science sequence. Furthermore, the project allows for continual improvements to one's strategy, targeting both beginners as well as more advanced programmers.	Board game strategies in introductory computer science	NA:NA:NA	2018
John W. Coffey	A significant rethinking of the computer science curriculum at a regional comprehensive university has led to a much tighter integration of discrete mathematics, data structures and algorithm analysis in a two-course Data Structures and Algorithms sequence. The courses are 4 semester hours each with two hour weekly labs. The new approach provides good support for a substantially increased emphasis on the reinforcement of theoretical constructs with empirical studies. The nature of the programming assignments has been particularly impacted by these efforts to reinforce the theoretical with the empirical. This article has a focus on the second course content and conduct, and how these modifications support a different approach to the course projects. This article also contains a report of favorable trends in completion percentages of the course under the new regime.	Integrating theoretical and empirical computer science in a data structures course	NA	2018
Wolfgang Paul:Jan Vahrenhold	We present the result of assessing first-year students' misconceptions related to algorithms and data structures. Our study confirms findings from previous small-scale studies but additionally broadens the scope of the topics and methods investigated. The evaluation of our experiments sheds light on dependencies between active and passive knowledge as well as on the instruments used; in particular, we conclude that there is no "one size fits all" instrument but that instruments should be selected depending on the topic at hand.	Hunting high and low: instruments to detect misconceptions related to algorithms and data structures	NA:NA	2018
Adrian German	NA	Session details: Paper - peer instruction	NA	2018
Cynthia Bailey Lee	As computer programming is increasingly considered an essential literacy skill for all students, MATLAB courses in particular can play a role in introducing non-major students to a tool commonly used in many of their fields. This paper reports on our department's experience introducing a CS1 in MATLAB for non-majors course. The course assumed no prior programming experience and no training in linear algebra. Without linear algebra and without the ability to do domain-specific tailoring, we turned to Media Computation to contextualize the skills and motivate students. Media Computation is an approach to programming instruction that focuses on manipulation of visual, audio, and video media. The course design also featured the Peer Instruction lecture format, in which lectures are punctuated by frequent questions that students answer individually and in small groups. To our knowledge, this represents the first time that Media Computation and Peer Instruction pedagogies have been comprehensively adapted to a MATLAB course. This work shares selected materials designed for this course, and reports outcomes of the two terms the course has been offered.	Experience report: CS1 in MATLAB for non-majors, with media computation and peer instruction	NA	2018
Beth Simon:Julian Parris:Jaime Spacco	In this paper we look at the impact on student learning of how a class is taught. We compare 2 sections of a non-majors CS0 course offered in the same term, by the same instructor, covering the same content and utilizing the same book, labs and exams. One section was taught using standard lecture practices including lecture from slides, live coding and weekly quizzes. The other section was taught using the Peer Instruction (PI) method that actively engages students in constructing their own learning, instead of absorbing understanding from the instructor's explanations. Using a factorial analysis of variance, we find a main effect of instructional method on final exam grade (F (1,200) = 5.87, p = 0.016) with students in the Peer Instruction section scoring an average 5.7% higher than in the standard lecture practices section. We find no significant interactions among gender and grade or class status (lower or upper division) and grade. In a separate analysis, we also find the interaction of instructional method and high school background to be significant (F (1,147) = 7.48, p = 0.007). In discussion we consider the meaning of these results for educators and describe questions for future work.	How we teach impacts student learning: peer instruction vs. lecture in CS0	NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey Lee:Leo Porter	Peer Instruction has recently gained interest in computing as an effective active learning pedagogy. The general focus of PI research has been on the in-class portion of PI: multiple choice questions and group discussion. Here, our focus is the reading quizzes completed by students for purposes of class preparation. These quizzes contain content questions but also ask for difficulties or confusion with course material. Consistent with expectations, we demonstrate that providing correct responses to quiz questions positively correlates with other course assessments. Somewhat counter-intuitively, we find that identifying confusions, noting problematic sections, or asking questions about the reading are also correlated with lab grades.	Peer instruction in computing: the role of reading quizzes	NA:NA:NA	2018
Suzanne Buchele	NA	Session details: Paper - student dynamics	NA	2018
Murali Mani:Quamrul Mazumder	Metacognition refers to one's knowledge about one's cognitive processes, and is often associated with intelligence. Students who have good metacognition skills typically perform better in their cognitive tasks. For the Fall and Winter semesters in 2011-12, we incorporated metacognition into our computer science courses (both undergraduate and graduate level courses), so that the student becomes more aware of his/her own understanding of the various topics of the course. In this paper, we describe how we incorporated metacognition into our courses, and present results from our analysis of the data that we have gathered over the various courses.	Incorporating metacognition into learning	NA:NA	2018
Orit Hazzan:Gadi Har-Shai	In this paper, we describe a course on computer science and software engineering soft skills offered by the Department of Computer Science (CS) at the Technion -- Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip the Technion's CS graduates with such skills. This request actually reflects the industry's recognition of the importance of soft skills in software development processes, not only on the managerial level, but also among software team members. The paper describes the course and aims to deliver the message that like soft concepts of computer science (e.g., abstraction and readability), which cannot be imparted rigidly using formal definitions, soft skills too cannot be studied and taught formally and, rather, should be learned and grasped gradually over a certain period of time, based on students' engagement, active learning, and reflection. Furthermore, students must accept such soft skills as concepts that can neither be defined formally nor evaluated adequately.	Teaching computer science soft skills as soft concepts	NA:NA	2018
Nanette Veilleux:Rebecca Bates:Cheryl Allendoerfer:Diane Jones:Joyous Crawford:Tamara Floyd Smith	Retaining students in computer science majors has been a persistent topic among computer science educators for almost two decades. Researchers have examined the relationship between belonging and engagement, self-efficacy, retention and persistence. Our quantitative research suggests that a student's sense of belonging is related to a student's perception of his ability, possibly more so than to actual performance. Our qualitative analysis further suggests that feelings of belonging can influence students' attitudes toward the mutability of ability, based on conversation and support from their academic and non-academic communities. Supporting a student's sense of belonging both to the discipline and their supportive communities can improve the academic resilience of computer science students, thus improving retention.	The relationship between belonging and ability in computer science	NA:NA:NA:NA:NA:NA	2018
Debra Goldberg	NA	Session details: Paper - non-majors	NA	2018
David G. Sullivan	Relational databases and other collections of data are increasingly prevalent across a wide range of professions and disciplines. However, most courses on databases and data mining are designed for computer science majors, and students who wish to familiarize themselves with these topics must first take several prerequisite courses. This paper presents the design and implementation of a course for non-majors that provides a data-centric introduction to computer science. The course covers the basics of databases and data mining, and it also offers an introduction to programming and data visualization. By teaching a variety of computational methods for processing collections of data, the course provides students with tools they can use in their fields of study and future professions, while also exposing them to key concepts from computer science. The course has been well received by students from a variety of majors, and survey results suggest that it has had a positive impact on their perceptions of computer science.	A data-centric introduction to computer science for non-majors	NA	2018
Sridhar Iyer:Sahana Murthy	The goals of a typical Networking course for Computer Science majors include getting students to learn the relevant concepts, delving into details of various protocols, and using Networking utilities. Such focus on low-level details is unlikely to be interesting to non-majors. Also, there is a larger danger of students not understanding the basic concepts due to the perceived complexity in the details and technical jargon. We address both these issues by teaching Networking concepts through solving problems in analogical real-life scenarios. The main idea of our approach is: The instructor poses an analogy problem, students work in groups to devise solutions, followed by a class discussion to map the analogy problem as well as its solution to their corresponding technical details in Networking domain. Thus we emphasize the core concepts of Networking and demystify the specialized technical details. Across three offerings of this course, we have found that: (i) our students' performance on typical Networking questions is comparable or higher than traditionally taught students, (ii) students can solve unseen technical problems, (iii) students' confidence in tackling technical questions is high.	Demystifying networking: teaching non-majors via analogical problem-solving	NA:NA	2018
Marie desJardins	The Computation, Complexity, and Emergence honors seminar at UMBC is designed to introduce an interdisciplinary undergraduate audience to the principles of complex systems that permeate our world. The course goals are for students to understand how simple individual behaviors can lead to complex global behaviors and to be able to identify the sources and effects of complexity in natural and artificial systems. The course is designed to increase students' comfort and skill level in scientific writing, participating actively in written and oral discussions, and learning collaboratively in an interdisciplinary community. The paper describes the course and the innovative elements that lead to student engagement, then presents data from pre- and post-assessments about student attitudes and perceptions.	Computation, complexity, and emergence: an interdisciplinary honors seminar	NA	2018
Adam Anthony	NA	Session details: Paper - approaches for outreach	NA	2018
D. Brian Larkins:J. Christopher Moore:Louis J. Rubbo:Laura R. Covington	This paper details the development and implementation of a summer robotics camp for middle school children. The Cognitive Apprenticeship (CA) model is used as the framework for developing the camp. Specifically, methods such as modeling, coaching, scaffolding, articulation, reflection, and exploration are integrated throughout the camp structure. Activities include the use of an engineering notebook, debugging logs, and various cognitive challenges, all supervised by a team of expert mentors. During the two-week summer camp, participants realized a positive shift in attitudes towards science, developed common engineering design skills, and showed increased proficiency in the reasoning pattern of isolation of variables. The CA framework, in conjunction with robotics are an excellent way to build interest in STEM and develop skills in engineering, science, and computational thinking.	Application of the cognitive apprenticeship framework to a middle school robotics camp	NA:NA:NA:NA	2018
Heidi Webb:Mary Beth Rosson	In this paper we describe a set of computing activities that were used in an outreach enrichment program for middle school girls. The computing activities used a combination of scaffolded exam-ples and minimalist workbooks to introduce and support interaction with computational thinking (CT) concepts, including problem solving, abstraction and basic computational vocabulary. We describe the activities briefly, followed by a discussion of the girls' experiences, drawing primarily from interviews conducted at the end of each activity.	Using scaffolded examples to teach computational thinking concepts	NA:NA	2018
Yasmin Kafai:Jean Griffin:Quinn Burke:Michelle Slattery:Deborah Fields:Rita Powell:Michele Grab:Susan Davidson:Joseph Sun	This study reports on the design, implementation, and evaluation of a service-learning course based on a "cascading mentoring" model linking together the faculty, administration, and undergraduates of an urban university's computer science department with local high school students. We present findings from surveys and post-interviews that illustrate undergraduates' and high school students' experiences in the program and how their perceptions of computing and mentoring changed based upon the outreach. In our discussion, we focus on the institutional and conceptual challenges of implementing the community service course within the university's computer science department, while also highlighting the learning opportunities for streamlining such a model for future iterations.	A cascading mentoring pedagogy in a CS service learning course to broaden participation and perceptions	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Stoney Jackson:Stan Kurkovsky:Eni Mustafaraj:Lori Postner	Many institutions are considering offering a course on mobile application development to harness its popularity to attract new majors, retain those we have, and to motivate learning. The panelists present four experiences in teaching a mobile application development course. They share their experiences in an effort to start a discussion about mobile application development in computing curricula. In the first half of the session, each panelist presents their experience including: an overview of the course; its audience, position in the curriculum, and pre-requisites; the platform, language, and development environment used; positives about the course; and roadblocks and negatives about the course. This provides a foundation for an audience directed discussion in the second half.	Panel: mobile application development in computing curricula	NA:NA:NA:NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop	The new CS curricular recommendations call for a heightened emphasis on parallel and distributed computing (PDC), in response to the explosive growth of multicore processors and "cloud" distributed computing. How can an educator incorporate this urgent priority into undergraduate CS courses? This panel describes four approaches: exploring GPU architecture and programming in a Computer Organization course; incorporating shared memory parallelism into several core courses; adding the PDC notion of reduction to multiple CS courses; and inserting short PDC modules into many courses at multiple curricular levels. We will illustrate how these contrasting approaches all respond to PDC recommendations within the feasibility constraint of incrementally modifying individual courses.	Strategies for adding the emerging PDC curriculum recommendations into CS courses	NA:NA:NA:NA:NA	2018
Matthew Boutell:Tom Armstrong:Linda Ott	The Fulbright Scholar Program is the flagship academic exchange program of the U.S. Department of State; approximately 1,100 American scholars travel worldwide annually to lecture and conduct research. The program is open to all U.S. citizens with university teaching experience and a Ph.D. or equivalent professional/terminal degree. Opportunities for Computer Science educators to win Fulbright scholarships are many. The goal of this panel is to inform the community of computer science educators about the Fulbright program, including the application process, and to answer questions about the program. After an introduction to the program at large, the panelists will each give a 10-15 minute overview of their personal experience as a Fulbright scholar in 2011-2012, leaving ample time for questions from educators considering applying for a Fulbright scholarship. The panelists will offer diverse perspectives based on their experiences in India, Zambia, and Siberia.	Fulbrights abroad in computer science	NA:NA:NA	2018
Sherri Goings	NA	Session details: Paper - alternatives to lectures	NA	2018
Kate Lockwood:Rachel Esselstein	The inverted classroom is a pedagogical technique in which passive knowledge acquisitions activities (e.g. lecture, readings) are assigned as homework and hands-on knowledge assimilation tasks (e.g. problem solving, lab, creative work) replace traditional lecture during classroom contact hours. Recent initiatives like the Kahn Academy [1] have raised the visibility of the inverted classroom and it is being adopted in disciplines across the curriculum from Economics [2] to Biology [3]. In this experience report we present successful inverted classroom pilots in linear algebra and introductory programming classes. In particular, this pilot focused on combining the inverted classroom philosophy with other proven pedagogical techniques (e.g. inquiry based learning) there was also a focus on creating free materials that could replace traditional, expensive textbooks when using the inverted classroom. We explain how the inverted classroom pedagogy is well aligned with the hands-on practice required in both math and computer science and discuss our plans to continue our experiment and to expand it beyond the original two classes.	The inverted classroom and the CS curriculum	NA:NA	2018
Michael James Scott:Gheorghita Ghinea	It has been claimed that learning can be facilitated by a positive academic self-concept. Therefore, reinforcing this construct may benefit students and the application of 'projective identity' in educational multimedia could be a means of achieving this. To test this hypothesis, two versions of a debugging exercise were developed, with one incorporating elements of fantasy role-play. They were compared through a double-blind parallel-group randomised trial using a sample of 36 undergraduate computing students. Factor scores for academic self-concept in programming were imputed from responses to a 5-point Likert scale, validated through a confirmatory factor analysis of 91 responses. An ANCOVA revealed that students using the fantasy role-play learning activity developed a stronger self-concept than the control group, with respective gains of 2.4% and 1.1%. However, further work is required to determine if such modest gains are practically significant, can be further enhanced and maintained.	Integrating fantasy role-play into the programming lab: exploring the 'projective identity' hypothesis	NA:NA	2018
Andrea Salgian:Teresa M. Nakra:Christopher Ault:Yunfeng Wang	In this paper, we describe how a multidisciplinary undergraduate course in Conducting Robots becomes a venue for fostering creativity and teaching strategies for creativity enhancement. We perform a number of creativity measurements and explain our results in the context of creativity research.	Teaching creativity in computer science	NA:NA:NA:NA	2018
Ashish Amresh	NA	Session details: Paper - instructional technologies	NA	2018
Andrew P. Black:Kim B. Bruce:Michael Homer:James Noble:Amy Ruskin:Richard Yannow	Grace is a new object-oriented language that supports a variety of approaches to teaching programming. It integrates accepted new ideas in programming languages into a simple language that allows students and teachers to focus on the essential complexities of programming rather than the accidental complexities of the language. We motivate Grace, review its design, and evaluate it against Kolling's criteria.	Seeking grace: a new object-oriented language for novices	NA:NA:NA:NA:NA:NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz:Philip Meznar:Reed Phillips:Alex Weidner	Electronic books (ebooks) are becoming commonplace and widespread. Highly interactive ebooks actively engage the reader and have great potential to increase student learning. With the recent release of Apple's iBooks Author application, instructors can develop highly interactive ebooks. This paper reports on our experience of creating an interactive Prolog programming ebook using iBooks Author. A particular focus is placed on ebook features pertinent to undergraduate computer science instruction including code listings, coding tutorials, and integration with course management systems and automated grading systems. This work is supported, in part, by two NSF grants.	Developing a highly interactive ebook for CS instruction	NA:NA:NA:NA:NA	2018
David J. Malan	We introduce CS50 Sandbox, an environment for secure execution of untrusted code. Implemented as an asynchronous HTTP server, CS50 Sandbox offers clients the ability to execute programs (both interactive and non-interactive) written in any compiled or interpreted language in a tightly controlled, resource-constrained environment. CS50 Sandbox's HTTP-based API takes files, command lines, and standard input as inputs and returns standard output and error plus exit codes as outputs. Atop CS50 Sandbox, we have built CS50 Run, a web-based code editor that enables students to write code in a browser in any language, whether compiled or interpreted, that's executed server-side within a sandboxed environment. And we have built CS50 Check, an autograding framework that supports black- and white-box testing of students' code, leveraging CS50 Sandbox to run series of checks against students' programs, no matter the language of implementation. We present in this work the pedagogical motivations for each of these tools, along with the underlying designs thereof. Each is available as open source.	CS50 sandbox: secure execution of untrusted code	NA	2018
Andrea Danyluk	NA	Session details: Paper - tough curricular challenges	NA	2018
Charles B. Border	Cloud computing is a new buzzword for a group of old technologies that have been integrated to create a system that is more than the sum of its parts. After teaching a seminar in cloud computing three times over the last year I have gained a better understanding of the fundamental and enabling technologies that should be brought into our curriculum to facilitate our students becoming competent users of cloud computing. Developing and deploying an application on a cloud architecture appears very similar to working with any remotely accessible server architecture but to work with it effectively our students need to understand the following technologies: firewalls, addressing and sub-netting, encryption, scripting, storage architectures, and virtualization. There are several enabling technologies that make the cloud more than just the sum of its parts. Some of the most important enabling technologies include: segregation of services and multi-systems architectures, workload characterization, identity federation, load balancing, and content distribution networks.	Cloud computing in the curriculum: fundamental and enabling technologies	NA	2018
Scott Dexter:Elizabeth Buchanan:Kellen Dins:Kenneth R. Fleischmann:Keith Miller	We report on some initial findings of an investigation into current practices in, and the need for, information/computer ethics curricula at the graduate level. We give some results and analysis from a survey of faculty and graduate students at four diverse U.S. institutions. Faculty and students agree that students will face professional ethical challenges after graduation, but assessment of students' preparedness for these challenges differs widely across the surveyed institutions. A clear majority of faculty and students expressed support for an elective graduate-level ethics course, and roughly half supported a required graduate-level ethics course.	Characterizing the need for graduate ethics education	NA:NA:NA:NA:NA	2018
Matti Tedre	All major computing curricula recommendations mention methodological skills and knowledge as an important learning objective in undergraduate and graduate education. None of those curricula recommendations, however, include a methodology course for students. One reason for that lack might be the stunning diversity of computing fields and the unique methods each branch of computing uses in their research. A methodology course in computing has to make a choice between three options: a narrow but deep specialization in some techniques and methods, a broad but superficial covering of a large number of methods, and a higher-level view on the principles of methodology and research design. This paper adopts the high-level approach, and presents a course description for a methodology course that aims at providing students understanding of how the elements of a research study link together.	Methodology education in computing: towards a congruent design approach	NA	2018
Carl Alphonce	NA	Session details: Paper - retention	NA	2018
Leo Porter:Beth Simon	Beginning in 2008, we introduced a new CS1 incorporating a trio of best practices intended to improve the quality of the course, appeal to a broader student body, and, hopefully, improve retention in the major. This trio included Media Computation, Pair Programming, and Peer Instruction. After 3 and 1/2 years (8 CS1 classes, 3 different instructors, and 1011 students passing the course) we find that 89% of the majors who pass the course are still studying computing one year later. This is an improvement of 18% over our average retention of 71% for the previous version of the course (measured since Fall 2001). If the focus shifts from retention of passing CS1 majors to retention of CS1 initially enrolled majors, multiple improvements--fewer students drop, more students pass, and more passing students are retained--compound to increase retention by 31% (from 51% to 82%). In this paper we analyze further aspects of these results, detail the three instructional design choices, and consider how they impact issues known to affect retention.	Retaining nearly one-third more majors with a trio of instructional best practices in CS1	NA:NA	2018
Bethany Bowling:Heather Bullen:Maureen Doyle:John Filaseta	An early undergraduate research program for rising sophomores and juniors at risk of leaving STEM degree programs is described. Students are paid a stipend to work part-time, at a maximum of twenty hours per week, as part of a research team. Faculty researchers are not financially compensated for working with students. The program successfully brings together STEM departments to target students who are at risk of leaving their major. Initial results demonstrate a positive influence of undergraduate research in retaining STEM majors and improvements in Student Assessment of Learning Gains. Future work, including institutionalization of the project, is discussed.	Retention of STEM majors using early undergraduate researchexperiences	NA:NA:NA:NA	2018
Leo Porter:Cynthia Bailey Lee:Beth Simon	Peer Instruction (PI) is a teaching method that supports student-centric classrooms, where students construct their own understanding through a structured approach featuring questions with peer discussions. PI has been shown to increase learning in STEM disciplines such as physics and biology. In this report we look at another indicator of student success the rate at which students pass the course or, conversely, the rate at which they fail. Evaluating 10 years of instruction of 4 different courses spanning 16 PI course instances, we find that adoption of the PI methodology in the classroom reduces fail rates by a per-course average of 61% (20% reduced to 7%) compared to standard instruction (SI). Moreover, we also find statistically significant improvements within-instructor. For the same instructor teaching the same course, we find PI decreases the fail rate, on average, by 67% (from 23% to 8%) compared to SI. As an in-situ study, we discuss the various threats to the validity of this work and consider implications of wide-spread adoption of PI in computing programs.	Halving fail rates using peer instruction: a study of four computer science courses	NA:NA:NA	2018
Kristy Boyer	NA	Session details: Paper - CS education research	NA	2018
Brian Dorn:Allison Elliott Tew	We have begun the process of examining how students perceive the field of computer science by employing a novice-to-expert continuum framework. As part of this exploration we have developed and are validating the Computing Attitudes Survey (CAS). In this study, our research focuses on how students develop expert-like attitudes and what effect an introductory course may have on that development. In particular, we find that the CAS instrument can be used to detect pre/post attitude shifts after a single introductory course of instruction and that individual subpopulations show positive attitude gains across gender, area of study and pedagogy Further, the CAS can also be used to identify significant pre/post attitude shifts among individual component factors, groupings of items on the survey that characterize different aspects of novice thought processes.	Becoming experts: measuring attitude development in introductory computer science	NA:NA	2018
Noa Ragonis:Gila Shilo	The cognitive abilities of learners have been studied extensively in both psychological and educational contexts. In the field of education, attention is placed on high-order thinking strategies, while in computer science education the focus is on cognitive skills required for solving problems. Since any process of problem solving is based on answering questions, it is worth looking at the questions we ask. In this conceptual framework, the current study aims to investigate the cognitive requirements from learners answering questions that arise from the questions' formulation. The study focuses on a linguistic investigation of keywords that appear in questions aimed at promoting the learners' high-order thinking when solving problems. To sharpen our attention to the uses of particular keywords in questions, we present a comparison between questions used in two different disciplines, computer science and linguistics. The paper outlines and describes nine question keyword categories, demonstrates the question keyword categories, and argues that the cognitive requirements from learners answering those questions are very similar for both disciplines.	What is it we are asking: interpreting problem-solving questions in computer science and linguistics	NA:NA	2018
Matthew Hertz:Sarah Michele Ford	Instructors of the introductory computer science courses, commonly called "CS1" and "CS2", face a large number of choices when designing their classes. Instructors have available to them a multitude of ways to explain each topic as well as course-wide choices such as objects-first or objects-late or using a functional or procedural language. Understanding how these options can affect student learning would help simplify these decisions. Unfortunately, just comparing how well students perform may not be accurate as it ignores the many confounding factors that could also have made a difference. To get beyond that problem, this study investigates underlying factors that affect student learning. Using a survey of instructors, we find that students' abilities are nearly always correlated with the importance that the instructor placed on a particular topic. Our results also highlight several "hard" topics for which student mastery and topic importance were not correlated in CS1 and only weakly correlated in CS2. While one might expect the time spent covering a topic in class to also be correlated with student mastery, we find little evidence of this. In fact, for some basic programming concepts, we document negative correlations between instructional time and learning. We discuss how instructors can use these results when organizing their courses and how the computer science education community can use this finding of "hard" topics to focus their efforts.	Investigating factors of student learning in introductory courses	NA:NA	2018
Elizabeth K. Hawthorne:Florence A. Appel:Carol L. Spradling:Lisa C. Kaczmarczyk	Social and professional principles were included in ABET computer science accreditation standards in 1987 and first appeared in the ACM/IEEE-CS Computing Curricula in 1991. This moderated panel presented the Social Issues and Professional Practice Knowledge Area (SP KA) of the 2013 ACM/IEEE-CS draft curricular guidelines for computer science. Specific knowledge units from the Ironman version were highlighted for discussion along with course and module exemplars	Computer science curriculum 2013: social and professional recommendations from the ACM/IEEE-CS task force	NA:NA:NA:NA	2018
Jeffrey Forbes:Victor Piotrowski:Jane Prey:D. Suzanne Westbrook	This session highlights programs in the National Science Foundation's (NSF) Education and Human Resources (EHR) and Computer and Information Science and Engineering (CISE) directorates. The focus is on providing descriptions of several programs of interest to college faculty and discussing the requirements and guidelines for programs in these areas. The session includes a description of the proposal and review processes as well as strategies for writing competitive proposals. Participants are encouraged to discuss procedural issues with the presenters.	Understanding NSF funding opportunities	NA:NA:NA:NA	2018
Lynn Andrea Stein:Debbie Chachra:Yevgeniya V. Zastavker:Caitrin Lynch:Alisha Sarang-Sieminski	Being a computer science and engineering student is experienced differently by male and female students; gendered interactions affect the development of academic and professional role confidence as well as professional identity. In this hands-on special session, participants explore concepts of gender schemas, privilege, and identity using a range of interactive activities. We have found these concepts useful in framing discussion with our students and in understanding and improving student experiences. The session introduces and obtains feedback on a Gender and Engineering Exploration Kit, which the participants are encouraged to review, use, and share at their home institutions.	An interactive exploration of gender and computing: unpacking the student experience	NA:NA:NA:NA:NA	2018
Daniel D. Garcia:David Ginat	One man's "magic" is another man's engineering. Robert A. Heinlein Some beginning students have fuzzy mental models of how the computer works, or worse, sincerely believe that the computer works unpredictably, "by magic". We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. This is a continuation of our standing-room only SIGCSE 2012 special session. Magic is one of the most colorful examples of "unplugged" (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that the audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of new magic tricks whose answer is grounded in computer science: modulo arithmetic, human-computer interfaces, algorithms, binary encoding, invariants, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.	Demystifying computing with magic, continued	NA:NA	2018
Laurie King	NA	Session details: Paper - tools	NA	2018
Jennifer Bayzick:Bradley Askins:Sharon Kalafut:Michael Spear	We introduce ALE, a new framework for writing games for the Android platform. The primary motivation behind ALE is to emphasize reading code before writing it. Beginners read game code to learn how levels can be made, and advanced users read the code of ALE itself to learn how to create useful and extensible libraries. To date, roughly 200 students at our university have used ALE, ranging from first-semester engineering undergraduates through Masters students. ALE has proven useful in teaching non-majors about CS, in making introductory CS programming courses more exciting, and in encouraging creativity, entrepreneurship, and good program design in upper-level electives. Based on these experiences, we encourage educators at all levels to consider using ALE to improve students' ability to learn by reading code.	Reading mobile games throughout the curriculum	NA:NA:NA:NA	2018
Bryce Boe:Charlotte Hill:Michelle Len:Greg Dreschler:Phillip Conrad:Diana Franklin	Scratch programming has risen in prominence, not only as a potential language for K-12 computer science, but also in introductory college courses. Unfortunately, grading Scratch programs is time-consuming, requiring manual execution of each program. Automation of this process is greatly complicated by the very reason Scratch is an attractive introductory language--the projects are multimedia in nature, requiring eyes and ears to fully appreciate. We propose Hairball, an automated system that can be used both by a student to point out potential errors or unsafe practices, and by a grader to assist in inspecting the implementation of Scratch programs. Because automatic analysis will not be able to determine the sensory effect, Hairball focuses instead on the implementation, including safe/robust programming practices, providing a "lint-like" tool for Scratch. In this case study, we have created an initial set of Hairball plugins that detect and label instances of initialization of Scratch state, synchronization between say and sound blocks, synchronization between broadcast and receive blocks, and use of timing and loops for complex animation. Our evaluation shows that Hairball is very useful in conjunction with manual analysis. Overall, Hairball was actually slightly more accurate than manual analysis at labeling these instances. Specifically for broadcast/receive, Hairball's analysis correctly classified 99% of the 432 instances, manual analysis only 81%. Overall, if Hairball was only used to identify correctly implemented instances, with manual analysis for the remainder, it would remove 76% of the instances for the manual analysis and assist in the rest, with a false positive rate of less than 0.5%.	Hairball: lint-inspired static analysis of scratch projects	NA:NA:NA:NA:NA:NA	2018
Suzanne P. Balik:Sean P. Mealin:Matthias F. Stallmann:Robert D. Rodman	Combinatorial graphs, often conveyed as node-link diagrams, figure prominently in Computer Science and other Science, Technology, Engineering, and Mathematics (STEM) disciplines. Unfortunately, they are most often inaccessible to blind students and professionals. This paper introduces GSK, a self-contained Graph SKetching tool that allows blind and sighted people to easily create, edit, and share graphs in real-time using interaction mechanisms (mouse, keyboard, monitor, screen reader) that are standard for them. GSK was successfully used by a blind Computer Science student and his sighted instructors to create and access graphs specific to his automata theory and operating systems courses. Our hope is that GSK will enable more blind STEM students and professionals to actively participate in their disciplines by providing them and their sighted colleagues with a cross-collaboration tool that allows them to share graphs just as easily as they share text and word processing documents.	GSK: universally accessible graph sketching	NA:NA:NA:NA	2018
Martha Kosa	NA	Session details: Paper - student behaviors and experiences	NA	2018
Katrina Falkner:Nickolas J.G. Falkner:Rebecca Vivian	Collaborative learning encourages deeper learning, producing significant benefit in learning outcomes. There has been an increasing trend to adopt collaborative activities, due to the expected learning benefits but also because of the expected social benefits and their impact on transition concerns. However, collaborative activities may also introduce additional stress and anxiety for students as they cope with altered participation expectations, and the need to develop collaboration, communication and management skills concurrently with their discipline skills. In this paper we describe a phenomenographic analysis of student's reflections on collaborative activities, including their perceptions of the purpose of such activities, and corresponding behaviours.	Collaborative learning and anxiety: a phenomenographic study of collaborative learning activities	NA:NA:NA	2018
Adrienne Decker:Elizabeth Lane Lawley	There is little argument that creating experiences for students that will increase student success and retention is a goal that is shared by anyone teaching courses. In computing courses, we have seen a lot of focused attention on the first year introductory courses as it has been shown that it is failure in these courses that drives students away from the discipline. In this paper we describe success we have had with first year students through the creation of achievement system for the undergraduate experience. Through the Just Press Play project and its associated achievements, we observed a significant shift in student behavior in relation to our first year students which lead to a greater level of student success in their first course.	Life's a game and the game of life: how making a game out of it can change student behavior	NA:NA	2018
Anya Tafliovich:Jennifer Campbell:Andrew Petersen	This work explores the effects of prior exposure to programming on student experiences in an introductory computer programming course CS1). We take a student-focused approach: using a combination of surveys and semi-structured interviews, we obtain information on the student experiences in CS1 and their relationship to prior programming experience (PE). The analysis of the results provides insight into the following two questions: a) How does PE affect peer interaction: pair programming sessions, assignment partnerships, and online and in-class interactions? b) What are the students' beliefs on the relationship between PE and success in the course?	A student perspective on prior experience in CS1	NA:NA:NA	2018
Chris Hundhausen	NA	Session details: Paper - introducing CS in high school	NA	2018
David Thompson:Tim Bell:Peter Andreae:Anthony Robins	In 2011 New Zealand introduced computer science into high schools after a long period when computing was mainly focussed on training students to be users. The transition was rapid, and teachers had little time to upskill to prepare for the new topics, and yet there was widespread voluntary adoption of the new standards. The role of teachers and the national teachers' organisation in making the change has been pivotal, and this paper reviews the changes from the teachers' perspective. This story is intended to inform those planning similar changes in other countries, and provide a context for the next steps in NZ. The discussion centres around a survey of 91~teachers, which reveals strong intrinsic motivation from teachers to make the changes, a mixture of prior knowledge and skills that teachers shared with each other through peer support and online communication, a low level of confidence as teachers of computer science, and a need for further professional development.	The role of teachers in implementing curriculum changes	NA:NA:NA:NA	2018
Andrea Arpaci-Dusseau:Owen Astrachan:Dwight Barnett:Matthew Bauer:Marilyn Carrell:Rebecca Dovi:Baker Franke:Christina Gardner:Jeff Gray:Jean Griffin:Richard Kick:Andy Kuemmel:Ralph Morelli:Deepa Muralidhar:R Brook Osborne:Chinma Uche	In this paper we analyze the CS Principles project, a proposed Advanced Placement course, by focusing on the second pilot that took place in 2011-2012. In a previous publication the first pilot of the course was explained, but not in a context related to relevant educational research and philosophy. In this paper we analyze the content and the pedagogical approaches used in the second pilot of the project. We include information about the third pilot being conducted in 2012-2013 and the portfolio exam that is part of that pilot. Both the second and third pilots provide evidence that the CS Principles course is succeeding in changing how computer science is taught and to whom it is taught.	Computer science principles: analysis of a proposed advanced placement course	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Rex Page:Ruben Gamboa	We report on a course, entitled "How Computers Work: Logic in Action", which we have offered the past few years at the University of Oklahoma, and which will be offered soon at the University of Wyoming. Intended for non-CS majors, this course is our answer to the question, What would you teach if you had only one course to help students grasp the essence of computation and perhaps inspire a few of them to make computing a subject of further study? Assuming no prior knowledge of computers or mathematics beyond high school algebra, the course is compatible with the "Computer Science: Principles" approach proposed by the College Board, although it is a significant departure from the pilot courses that are currently following this approach.	A more formal approach to "computer science: principles"	NA:NA	2018
Allison Elliott Tew	NA	Session details: Paper - socio-cultural issues	NA	2018
Niral Shah:Colleen M. Lewis:Roxane Caires:Nasar Khan:Amirah Qureshi:Danielle Ehsanipour:Noopur Gupta	This paper offers a framework for equitable instruction that emerged while designing a computer science course for students entering the sixth grade. Leveraging research from a range of fields, including sociology, mathematics education, and the learning sciences, we argue that in addition to material resources, such as rich course content and quality instruction, equity also depends on students' access to non-material resources, such as productive domain identities and peer relationships. We illustrate each dimension of the framework by describing in detail a core set of pedagogical practices implemented during a summer course.	Building equitable computer science classrooms: elements of a teaching approach	NA:NA:NA:NA:NA:NA:NA	2018
Neil Christopher Charles Brown:Michael K√∂lling:Tom Crick:Simon Peyton Jones:Simon Humphreys:Sue Sentance	Computer science in UK schools is a subject in decline: the ratio of Computing to Maths A-Level students (i.e. ages 16--18) has fallen from 1:2 in 2003 to 1:20 in 2011 and in 2012. In 2011 and again in 2012, the ratio for female students was 1:100, with less than 300 female students taking Computing A-Level in the whole of the UK each year. Similar problems have been observed in the USA and other countries, despite the increased need for computer science skills caused by IT growth in industry and society. In the UK, the Computing At School (CAS) group was formed to try to improve the state of computer science in schools. Using a combination of grassroots teacher activities and policy lobbying at a national level, CAS has been able to rapidly gain traction in the fight for computer science in schools. We examine the reasons for this success, the challenges and dangers that lie ahead, and suggest how the experience of CAS in the UK can benefit other similar organisations, such as the CSTA in the USA.	Bringing computer science back into schools: lessons from the UK	NA:NA:NA:NA:NA:NA	2018
Sarah Hug:Richard Guenther:Michael Wenk	In this paper, we use a sociocultural lens to provide an in-depth case study of a computer science program at a high school serving traditionally underserved youth. The study illuminates the contextual factors that supported dramatic programmatic growth, including the policy, curriculum, pedagogy, community, and school factors leading to student recruitment and retention in computer science. By focusing on computer science classroom practices and beyond, the study sheds light on the role multiple stakeholders can take in supporting computer science education in a K12 setting, and suggests strategies for program development in other K12 computer science settings.	Cultivating a K12 computer science community: a case study	NA:NA:NA	2018
Blair Taylor:Matt Bishop:Elizabeth Hawthorne:Kara Nance	Teaching secure coding has never been more important. The CS2013 Ironman draft includes Information Assurance and Security as a new Knowledge Area and recommends that security be cross-cutting across all undergraduate computer science curricula. The Summit on Education in Secure Software recommended: 1) increasing the number of faculty who understand the importance of secure programming principles, and will require students to practice them; 2) integrating computer security content into existing technical and non-technical courses; and 3) using innovative teaching methods to strengthen the foundation of computer security knowledge. In this panel, we will speak to these recommendations and the new curricular guidelines and discuss the importance and challenges of teaching secure coding.	Teaching secure coding: the myths and the realities	NA:NA:NA:NA	2018
Scott Grissom:Beth Simon:Leland Beck:Alexander Chizhik	This session will demonstrate best practices for integrating a variety of student engagement pedagogies into the classroom. Presenters play the role of instructors on the first day of class. Audience members play the role of students as they collaborate on a variety of sample activities. By providing models of active learning in computing contexts, we seek to motivate instructors to adopt these pedagogies in their classrooms. Attendees will be invited to join a growing community of faculty who share resources and best practices. Sufficient time will be reserved for questions and discussion.	Alternatives to lecture: revealing the power of peer instruction and cooperative learning	NA:NA:NA:NA	2018
Andrea Danyluk:Steve Roach:Elizabeth K. Hawthorne:Henry M. Walker:Ruth E. Anderson:Christa M. Chewar	Beginning with the publication of Curriculum 68, ACM and IEEE-Computer Society have sponsored various efforts to establish international curricular guidelines for undergraduate programs in computing. Work on the next volume, Computer Science 2013 is well underway, with the Ironman draft out shortly before SIGCSE 2013. The Ironman draft includes course and curricular exemplars, which should serve as a rich resource for those trying to meet the curriculum standards. This special session highlights the exemplar section of the Ironman report through a description of its purpose, presentation of several exemplars, and an invitation to the SIGCSE community to participate by submitting exemplars and providing feedback on what they would find useful in this section of the CS 2013 final report.	ACM/IEEE computer science 2013 exemplar-fest	NA:NA:NA:NA:NA:NA	2018
Durell Bouchard	NA	Session details: Paper - student-centered approaches	NA	2018
Khuloud Ahmad:Paul Gestwicki	In this study, an experimental introductory CS course was implemented focusing on two pedagogic factors: the use of App Inventor for Android (AIA), a visual blocks programming environment for creating smart phone applications; and the adoption of studio-based learning (SBL) as the main teaching methodology. Participants included 18 non-CS major undergraduates. The Motivated Strategies for Learning Questionnaire (MSLQ) was implemented at several stages. With the exception of the Peer Learning scale in the mid-MSLQ, all participants scored in the high range in the three MSLQs. Results indicated that participants were comfortable collaborating with peers and asking questions. Additional data were collected from entry and exit interviews as well as student-created mind maps. The study revealed positive student response to the pedagogic factors and positive attitudes towards CS, and the subjects also demonstrated significant academic achievement. The experimental approach was found to have a positive effect on students' motivation, creativity, achievement, and attitude towards CS.	Studio-based learning and app inventor for android in an introductory CS course for non-majors	NA:NA	2018
Kevin Buffardi:Stephen H. Edwards	Studies have found that following Test-Driven Development (TDD) can improve code and testing quality. However, a preliminary investigation was consistent with concerns raised by other educators about programmers resisting TDD. In this paper, we describe an adaptive, pedagogical system for tracking and encouraging students' adherence to TDD. Along with an empirical evaluation of the system, we discuss challenges and opportunities for persuading student behavior through adaptive technology.	Impacts of adaptive feedback on teaching test-driven development	NA:NA	2018
Henry A. Etlinger	An introductory database course is well established within computer science curricula. Instructors in this course are challenged to select a subset of possible topics to cover and emphasize and also to design appropriate assignments to help students master those topics. As theories regarding effective educational practice continue to emerge and become known, we also seek to invigorate our courses by including some of these newer techniques. Contributing Student Pedagogy is an umbrella term that refers to a family of techniques that involves finding ways for students to become directly involved in the production of course content utilized by other students. Students not only make use of content provided by other students, but they come to view that content as valuable. This paper reports on initial efforts to incorporate an assignment based on contributing student pedagogy into a standard database course. Several iterations took place, with improvements made between the first and second iterations. Plans for future iterations are included and implications, not only for the database course, but other Computer Science courses, are discussed.	Adding a contributing student pedagogy component to an introductory database course	NA	2018
Eric Aaron	NA	Session details: Paper - underserved populations	NA	2018
Sarah Esper:Stephen R. Foster:William G. Griswold	Traditionally, computer science education research contributes new tools, techniques, and theories to improve institutionalized learning spaces e.g. classrooms. However, we take the position that the study and improvement of computer science learning spaces outside the classroom are just as important. We take a step toward illuminating the critical qualities of non-institutional computer science learning spaces by engaging in a grounded-theoretical examination of first-hand accounts of non-institutional learning. To further study the topic, we attempted to recreate (in the lab) a learning environment with many qualities that characterize non-institutional learning. To make this possible, we employed a modified version of CodeSpells -- a video game designed to teach Java programming in a way that engenders the sense of sustained, playful, creative exploration driven entirely by the learner. This study introduced 40 girls, ages 10 to 12, to programming for the first time. We use the results of both studies to develop a theoretical framework which we use to examine existing tools such as Scratch, Alice, and educational games in a new light.	On the nature of fires and how to spark them when you're not there	NA:NA:NA	2018
Yasmin B. Kafai:Kristin Searle:Eliot Kaplan:Deborah Fields:Eunkyoung Lee:Debora Lui	In this paper, we present and discuss the use of electronic textiles (e-textiles) for introducing key computational concepts and practices and broadening participation and perceptions about computing. The starting point of our work was the design and implementation of a curriculum module using the Lilypad Arduino in a pre-AP high school class. To understand students' learning of concepts, practices, and perceptions of computing, we focused on the structure and functionality of circuits and program code and their design approaches to making and debugging their e-textile creations, and on their views on computing by examining pre-post interviews. Our discussion addresses the challenges and potential of using e-textiles materials and activities for designing introductory courses that can reach a broader student population.	Cupcake cushions, scooby doo shirts, and soft boomboxes: e-textiles in high school to promote computational concepts, practices, and perceptions	NA:NA:NA:NA:NA:NA	2018
Betsy DiSalvo:Mark Guzdial:Charles Meadows:Ken Perry:Tom McKlin:Amy Bruckman	We report on the implementation and evaluation of a three-year program to increase interest in studying computer science (CS) among African American male high school students. Over the course of 3 years, the Glitch Game Tester (Glitch) program employed 25 African American male high school students. These students tested pre-release digital games, full-time in the summer and part-time in the school year, with an hour of each day dedicated to learning introductory CS. Initially, only 20% of our participants expressed interest in pursing computing as a career. After Glitch, 65% have pursued some form of post-secondary computing studies. These outcomes, and the participants' enthusiasm for engaging in computing, are in sharp contrast to the crisis in African American male education and learning motivation. The research presented in this report discusses lessons learned through implementation of the Glitch program and higher education outcomes after graduation from the program.	Workifying games: successfully engaging african american gamers with computer science	NA:NA:NA:NA:NA:NA	2018
Timothy Stanley	NA	Session details: Paper - architecture and hardware	NA	2018
Michael Black:Nathaniel Waggoner	This paper describes a new GUI-based tool to teach undergraduate students to design their own CPUs. The tool was purpose-built to teach a wide range of computer organization topics, including digital logic, instruction set encoding, datapath and control units, and pipelining. A datapath builder allows microarchitecture building blocks, such as registers, ALUs, and multiplexors, to be laid out, wired together, and simulated. A control builder allows students to develop control states and microinstructions for the datapath. Both units are integrated with a full PC emulator, allowing student-designed processors to use emulated devices, such as drives, video, and I/O ports. A tutorial teaches students to use the simulator to build a pipelined RISC processor.	Emumaker86: a hardware simulator for teaching CPU design	NA:NA	2018
Michael B. Gousie:James D. Teresco	Undergraduate computer science programs at many small colleges often include only one course focused on hardware. Many important concepts are covered in such a course, including the basics of computer architecture. By the end of such a course, students should have a good understanding of how a binary machine instruction is executed in hardware. Unfortunately, even a simplified diagram of a datapath is often difficult for students to master. We present two approaches that use lab exercises to help to address this problem. In one, students build a working model of the datapath out of ordinary materials; in the other, a software simulator is designed and implemented. These approaches are described and their merits discussed.	Helping students understand the datapath with simulators and crazy models	NA:NA	2018
Derek C. Schuurman	This paper describes a sequence of assignments, each building upon the next, leading students to a working simulation of a simple 8-bit CPU (Central Processing Unit). The design features a classic Von Neumann architecture comprising a simple data path with a few registers, a simple ALU (Arithmetic Logic Unit), and a microprogram to direct all the control signals. The first step involves the design of the ALU which is capable of eight basic operations. The second step guides students to construct a datapath complete with several 8-bit registers. The third step involves the design and implementation of a control unit which uses a microprogram to implement machine code instructions. The microprogram implements nine basic machine language instructions which are sufficient for writing many simple programs. The final step involves adding program memory and an input and output device to form a simple working simulation of a computer. At this point, students may hand-assemble code for their CPU and simulate its execution. All simulations are performed using a free and open source simulator called Logisim which performs digital logic simulations with the ability to build larger circuits from smaller subcircuits. Students can set an adjustable clock rate and observe the internal CPU state and registers as it retrieves instructions and steps through the microcode. The basic CPU architecture provides many opportunities for more advanced exercises, such as adding an instruction fetch unit, adding pipelining, or adding more machine language instructions. The assignments were introduced in a second year course on computer organization, providing an effective hands-on approach to understanding how a CPU actually operates.	Step-by-step design and simulation of a simple CPU architecture	NA	2018
Jian Zhang	NA	Session details: Paper - teaching CS1	NA	2018
Barry Lawson:Doug Szajda:Lewis Barnett	This paper describes our implementation and experience of incorporating computer science concepts into a team-taught, first-year interdisciplinary course for prospective science majors at the University of Richmond. The course integrates essential concepts from each of five STEM disciplines: biology, chemistry, computer science, mathematics, and physics. Including computer science in this course faces three primary challenges: few of the students have any CS background; the time devoted to CS instruction is reduced compared to a traditional introductory CS course; and the spirit of the course requires the CS material to be highly integrated with the other disciplines. Here we discuss our experience from three-plus years of offering the course and its impact on the major/minor pool of students in our own discipline.	Introducing computer science in an integrated science course	NA:NA:NA	2018
Vahab Pournaghshband	In this 21st century technological world, the inherent problems of computer security are becoming increasingly important, and it is critical that our students gain the necessary skills and knowledge, early in their academic programs, to handle these problems. Specifically, the lack of security mindset is responsible for many overlooked and exploitable security bugs in the computer programs that these students design. While learning the security concepts generally requires a more advanced knowledge of computer science, learning the security mindset can be, and should be, addressed as early as CS 1. Although the primary focus of any traditional CS 1 course is that of basic programming concepts, we believe that teaching the security mindset in this course is valuable and effective. In this paper we discuss the course that we have taught for four terms-an introductory course that teaches the security mindset to beginner programmers. We start out by using the term-long incremental development of a security-sensitive program-the login program. Students develop the security mindset by thinking as both hackers and defenders, in order to catch and fix the logical and run-time errors that may lead to security breaches in the program.	Teaching the security mindset to CS1 students	NA	2018
David Ginat:Ronit Shmalo	We developed an approach of learning from errors in CS1, taught in OOP. The approach is based on a set of principles, which include: cognitive conflict, constructivist characteristics, error attribution, self explanation, reflection, and refinement of concept images of fundamental OOP terms and mechanisms. The approach is presented, and some of its activities are illustrated. The developed activities aim at erroneous OOP conceptions that we have observed in a previous study. We applied the approach with CS1 college students, and conducted a comparative study, with an experiment group and a control group. We display a summary of the study's results, together with the students' opinions about the applied approach.	Constructive use of errors in teaching CS1	NA:NA	2018
Eric Snow	NA	Session details: Paper - assessment	NA	2018
Vicki E. Bennett:KyuHan Koh:Alexander Repenning	Conventionally creativity is often conceived as an aptitude to be discovered in an individual that cannot be mathematically measured. But the concept of creative thinking as a divergence from a standard "norm" is used in creativity research for the purpose of assessing creativity and is also linked to non-traditional or creative processes that lead to unique and divergent artifacts [1,2]. Using Computational Thinking Pattern Analysis (CTPA)[3], the divergence between implemented computational thinking patterns in a student-created game, and that game's tutorial "norm" is calculated as an indicator of creativity. Through a case study of one teacher using three unique learning conditions, CTPA's computed divergence is explored as a valid measurement of creativity in these student games.	Computing creativity: divergence in computational thinking	NA:NA:NA	2018
Renate Thies:Jan Vahrenhold	A variety of experience reports and studies has shown Computer Science Unplugged to be an effective resource for outreach, and it has been suggested to build upon these benefits to augment teaching in a regular classroom as well. Based upon an analysis of the learning objectives, "Unplugged" activities seem to be particularly well suited to serve as an introduction to Computer Science concepts and algorithms; whether or not the effectiveness of using these activities compares to that of traditional teaching methods, however, has remained an open question so far. We present the first experimental study of using Computer Science Unplugged material as part of a regular Computer Science class in lower secondary education. The evaluation of our study affirmatively answers the above question, i.e., teaching using "Unplugged" activities can be at least as effective as when following more conventional approaches.	On plugging "unplugged" into CS classes	NA:NA	2018
Diana Franklin:Phillip Conrad:Bryce Boe:Katy Nilsen:Charlotte Hill:Michelle Len:Greg Dreschler:Gerardo Aldana:Paulo Almeida-Tanaka:Brynn Kiefer:Chelsea Laird:Felicia Lopez:Christine Pham:Jessica Suarez:Robert Waite	Many institutions have created and deployed outreach programs for middle school students with the goal of increasing the number and diversity of students who later pursue careers in computer science. While these programs have been shown to increase interest in computer science, there has been less work on showing whether participants learn computer science content. We address two questions, one specific, and the other more general: (1) "What computer science did our middle school students learn in our interdisciplinary two-week summer camp?" (2) "How can computer science concepts be assessed in the context of Scratch-based outreach programs"? We address both questions by presenting the design of our summer camp, an overview of our curriculum, our assessment methodology, and our assessment results. Though the sample size is not statistically significant, the results show that a two-week, interdisciplinary, non-academic summer camp can be effective not only for engaging students, but also for imparting CS content. In just two weeks, with a curriculum not entirely focused on computer science, students displayed competence with event-driven programming, initialization of state, message passing, and say/sound synchronization. We have employed assessment methodologies that avoid written exams, an approach both outreach and classroom-based programs may find useful.	Assessment of computer science learning in a scratch-based outreach program	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Wendy M. DuBow:Ignatios Vakalis:Manuel A. Perez-Quinones:Jason T. Black	Computing has seen dramatic decreases in the major across the past decade, especially among under-represented populations. Recently, however, some institutions have begun to see an increase. What are these departments doing to reverse this historical trend? Learn about practices undertaken by U.S. universities that have increased undergraduate enrollments overall, with particular increases in female enrollment and retention. Computer science faculty from Cal Poly San Luis Obispo, Virginia Tech and Florida A&M will present their interventions and results. National Center for Women & Information Technology will share results from other institutions that also have used evidence-based practices resulting in increased enrollments and distribute materials describing those practices.	Growing female undergraduate enrollments in computer science: some successful approaches	NA:NA:NA:NA	2018
Daniel D. Garcia:Valerie Barr:Mark Guzdial:David J. Malan	In his SIGCSE 2007 keynote, Grady Booch exhorted us to share the "passion, beauty, joy and awe" (PBJA) of computing. This led to sessions that have provided a forum for sharing: What we've done: Highlighting successful PBJA initiatives the presenters have undertaken or seen and wish to trumpet; What we should do (curriculum): Pointing out where our curriculum is lacking in PBJA, and how to fix it; How we should do it (pedagogy): Sharing how a change in attitude/focus/etc. can make strides to improving PBJA. This year we've gathered educators whose intro class numbers are exploding or who have instituted very creative and successful paths into the major. In this panel we will explore best practices in these crucial early years, in terms of extolling the PBJA of computing.	Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 6	NA:NA:NA:NA	2018
Renee L. Ciezki:Lien Diaz:Robert Glen Martin:Henry M. Walker	The AP CS A program is exploring the possibility of moving from the utilization of the GridWorld case study to the inclusion of several in-class laboratory exercises, beginning in 2014-2015 or later. The Development Committee believes labs may achieve many benefits of the past case studies, but a lab format will allow teachers more flexibility in teaching and a more agile development cycle for new materials. This Special Session will review the motivations, experiences, limitations, and constraints of case studies, motivations for the use of in-class laboratory exercises, and some components of three laboratory exercises that currently are under development by the AP CS A program.	AP CS A exploration of a change from GridWorld to labs	NA:NA:NA:NA	2018
Gregory W. Hislop:Mark Ardis:David Budgen:Mark J. Sebern:Jeff Offutt:Willem Visser	Software Engineering 2004: Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering (SE 2004) [1] is one volume in a set of computing curricula adopted and supported by the ACM and the IEEE Computer Society. In order to keep the software engineering guidelines up to date the two professional societies began a review and revision project in early 2011. This special session will present the results of the review, present a first draft of the revision, and provide time for discussion and input from the computing education community.	Revision of the SE 2004 curriculum model	NA:NA:NA:NA:NA:NA	2018
Marie Bienkowski	NA	Session details: Paper - tools for teaching the core	NA	2018
Gregory H. Cooper:Arjun Guha:Shriram Krishnamurthi:Jay McCarthy:Robert Bruce Findler	Given the widespread use of memory-safe languages, students must understand garbage collection well. Following a constructivist philosophy, an effective approach would be to have them implement garbage collectors. Unfortunately, a full implementation depends on substantial knowledge of compilers and runtime systems, which many courses do not cover or cannot assume. This paper presents an instructive approach to teaching GC, where students implement it atop a simplified stack and heap. Our approach eliminates enormous curricular dependencies while preserving the essence of GC algorithms. We take pains to enable testability, comprehensibility, and facilitates debugging. Our approach has been successfully classroom-tested for several years at several institutions.	Teaching garbage collection without implementing compiler or interpreters	NA:NA:NA:NA:NA	2018
Steve Hodges:James Scott:Sue Sentance:Colin Miller:Nicolas Villar:Scarlet Schwiderski-Grosche:Kerry Hammil:Steven Johnston	In this paper we present the features of a new physical device prototyping platform called Microsoft .NET Gadgeteer along with our initial experiences using it to teach computer science in high schools. Gadgeteer makes it easy for newcomers to electronics and computing to plug together modules with varied functionality and to program the resulting system's behavior. We believe the platform is particularly suited to teaching modern programming concepts such as object-oriented, event-based programming and it could be a timely addition to established teaching tools given the current interest in improving high school computer science education in some regions. We have run a number of pilot studies in the US and in the UK with students of varying age and ability. Our results indicate that the tangible and expressive nature of Gadgeteer helps to engage and motivate a diverse set of students. We were also pleasantly surprised by the level of polish and sophistication of the devices which were built. We hope to further explore the potential of Gadgeteer for teaching in future work and we encourage others to build on our experiences.	.NET gadgeteer: a new platform for K-12 computer science education	NA:NA:NA:NA:NA:NA:NA:NA	2018
D. Brian Larkins:William M. Jones:H. Erin Rickard	This paper describes the adaptation of several common computer science courses to include the use of FPGA-based systems for project and assignment work. One of the principal challenges in modern curriculum design is balancing between breadth and depth of course topics while simultaneously reinforcing the interconnections among topics in the field. To address these challenges, faculty are often forced to approximate real-world systems, sometimes at the expense of any hands-on experience. At Coastal Carolina, we have integrated FPGA systems first used in our hardware-based courses into several higher-level systems and applications courses. This allows us to leverage student familiarity with a hands-on, flexible hardware platform and also strengthens the relationships between different subfields within computer science. We discuss both the changes made to our curriculum and the effectiveness of our approach.	Using FPGAs as a reconfigurable teaching tool throughout CS systems curriculum	NA:NA:NA	2018
Michael Helmick	NA	Session details: Paper - parallel distributed computing	NA	2018
Eric Larson:Rochelle Palting	MDAT is a multithreaded testing and debugging tool designed for students learning to program with multiple threads. MDAT automatically generates random schedules to allow students to more thoroughly test their programs. The design of MDAT takes full control over the scheduling allowing a failing run to be reproduced. To assist debugging, MDAT includes an output trace that shows the status of all threads, locks, and semaphores in the program and has an interactive mode that allows students to try out their own schedules. MDAT was effective at detecting deadlock and mutual exclusion violations in student submissions of the unisex restroom problem.	MDAT: a multithreading debugging and testing tool	NA:NA	2018
Barry Wilkinson:Jeremy Villalobos:Clayton Ferner	In this paper, we describe an approach for teaching parallel and distributed computing at the undergraduate level using computational patterns. The goal is to promote higher-level structured design for parallel programming and make parallel programming easier and more scalable. A pattern programming framework has been developed to create a distributed application that avoids the need to write code in low level message--passing APIs such as MPI. Several patterns have been implemented including workpool, pipeline, synchronous and iterative all-to-all, and stencil. We have redesigned a regular senior undergraduate parallel programming course to begin with a pattern strategy using our framework and provide a detailed syllabus around patterns.	Pattern programming approach for teaching parallel and distributed computing	NA:NA:NA	2018
Yousun Ko:Bernd Burgstaller:Bernhard Scholz	The computing landscape has shifted towards multicore architectures. To learn about software development, it is increasingly important for students to gain hands-on parallel programming experience in multicore environments. This experience will be significantly different from programming for uniprocessors, because it involves a profound understanding of how to write software that is (1) free of concurrency bugs and (2) able to effectively utilize the underlying parallel hardware architecture. We present our work at Yonsei University and The University of Sydney to teach parallel programming to first and second-year undergraduate students. Our objective is to introduce parallelism early on in the curriculum, to instill it as a first principle of computation. We introduce a series of five parallel programming course modules suitable for a one semester introductory programming course. Each module teaches one fundamental concept of parallel programming: parallelism and execution indeterminism, thread-and-lock based programming, performance of parallel programs, hardware acceleration using OpenCL, and stream-parallel programming with StreamIt. We report our experience from four course offerings (2008-2011) at Yonsei University, and two course offerings at The University of Sydney. Over 73% of students surveyed enjoyed this multicore programming experience and preferred exposure to parallelism at this early stage of their CS education. Our course has been awarded an Intel microgrant for "Parallelism in the Classroom", and it is available online at Intel's Multicore Curriculum Initiative Website.	Parallel from the beginning: the case for multicore programming in thecomputer science undergraduate curriculum	NA:NA:NA	2018
Shaileen Pokress	NA	Session details: Paper - teacher preparation	NA	2018
Linda Werner:Jill Denner:Shannon Campe:Eloy Ortiz:Dawn DeLay:Amy C. Hartl:Brett Laursen	Research shows the benefits of pair programming for retention and performance in computing, but little is known about how relationship dynamics influence outcomes. We describe results from our study of middle school students programming games using Alice and pair programming. From our analysis using statistical procedures that take into account the interdependence of pair data, we found evidence for partner influence moderated by the role of confidence over improvements in Alice programming knowledge in friend partnerships but not non-friend partnerships. We discuss implications for researchers and educators.	Pair programming for middle school students: does friendship influence academic outcomes?	NA:NA:NA:NA:NA:NA:NA	2018
Heather Bort:Dennis Brylow	In this paper, we aim to directly measure a CS4HS workshop's participating teachers' ability to synthesize CSTA computational thinking core concepts into actionable lesson plans for courses in their current teaching repertoire. Participants were expected to present a lesson plan on the final day of the workshop, highlighting the integration of their classroom curriculum with computing and computational thinking skills. We present our evaluation rubric, used to rate the teachers effective use of the computational thinking core concepts in their lesson plans, and describe how our method of evaluation may more accurately gauge the overall impact that CS4HS workshops have on their participants.	CS4Impact: measuring computational thinking concepts present in CS4HS participant lesson plans	NA:NA	2018
Jiangjiang Liu:Cheng-Hsien Lin:Phillip Potter:Ethan Philip Hasson:Zebulun David Barnett:Michael Singleton	More and more students are interested in developing their own mobile applications. Incorporating mobile technology into classrooms can greatly capture student attention, better student engagement, and improve student achievement. In this paper, we present our experience, findings, and lessons learned from conducting a one-week App Inventor for Android summer computing workshop for K-12 teachers. Our workshop focuses on using App Inventor, a drag-and-drop Android development environment, introduce computing concepts to K-12 teachers in all subjects. During the workshop the teachers developed curriculum applications for the subjects they will teach in the following semesters with the help of our workshop tutors. Workshop assessment results show a 29.5% increase in confidence level in teaching computer science and a 109% computing knowledge level increase.	Going mobile with app inventor for android: a one-week computing workshop for K-12 teachers	NA:NA:NA:NA:NA:NA	2018
Ruth Anderson	NA	Session details: Paper - diversity	NA	2018
Katie Redmond:Sarah Evans:Mehran Sahami	In this paper, we analyze gender dynamics in the undergraduate Computer Science program at Stanford University through a quantitative analysis of 7209 academic transcripts and 536 survey responses. We examine previously studied effects as well as present new findings. We also introduce Fisher's Noncentral Hypergeometric Distribution as a model for estimating the impact of program changes on underrepresented populations and explain why it is a more robust measure than changes in the percentage of minority participants.	A large-scale quantitative study of women in computer science at Stanford University	NA:NA:NA	2018
Carol Frieze:Jeria L. Quesenberry	In this paper we argue that gender difference thinking, with regards to attitudes towards computing, can work against diversity in the field of computing. Indeed, gender difference approaches to the participation of women in computing have not provided adequate explanations for women's declining interest in computer science (CS) and related technical fields. As yet "The Changing Face of Computing" has not led to significant changes in the levels of women's participation. Indeed, the number of computer science degrees awarded to women has steadily declined since 1984. Our objective in this paper is to present a critique on why gender difference approaches may be problematic and propose that a cultural approach offers a more effective framework for investigating and increasing women's participation in CS. We support our findings and recommendations from the most recent research in a series of studies carried out at Carnegie Mellon University (CMU) over the past 10 years. In brief, we found the Women-CS fit at CMU continues to present a positive and encouraging story. Our findings demonstrate that under certain conditions women, alongside their male peers, can fit successfully into a CS environment and help shape that environment and computing culture, for the benefit of everyone, without accommodating presumed gender differences or any compromises to academic integrity.	From difference to diversity: including women in the changing face of computing	NA:NA	2018
Annemieke Craig:Jo Coldwell-Neilson:Jenine Beekhuyzen	Over the past two decades, numerous interventions have been conducted to inform and inspire schoolgirls into studies and a career in computing and technology. Two successful intervention of this kind have been held over a number of years, and this paper presents the initial stages of a longitudinal study which evaluates the qualitative data from the survey from six Australian events in total. The paper explores the motivational aspects of the presentations in the context of the responses from students and teachers, and it highlights the importance of ensuring that presentation sessions at these events are fun, funny and interesting, and the importance of considering the age of the target audience. It concludes by raising a concern.	Are IT interventions for girls a special case?	NA:NA:NA	2018
Mehran Sahami:Mark Guzdial:Fred G. Martin:Nick Parlante	NA	The revolution will be televised: perspectives on massive open online education	NA:NA:NA:NA	2018
Joseph Hollingsworth:Joan Krone:Jason Hallstrom:Murali Sitaraman:Bruce Weide	NA	Engaging mathematical reasoning exercises	NA:NA:NA:NA:NA	2018
Renee L. Ciezki:Lien Diaz:Frances E. Hunt:Henry M. Walker	The Advanced Placement (AP) Program provides a framework for high school students to obtain college credit and/or placement for work done in high school. Toward this end, the College Board outlines course descriptions and organizes examinations in several dozen disciplines, including computer science. To meet its goals, each AP course must align with college courses, so students taking an AP course will master needed content Several approaches are used to monitor this connection between AP courses and college-level courses. This session will review these approaches, considering how the AP CS A course matches introductory college computer science courses.	How AP CS A matches college courses	NA:NA:NA:NA	2018
Karen Brennan:Mitchel Resnick	This special session aims to provoke discussion about new strategies for engaging young people in computer programming, drawing on experiences of educators and young people using the Scratch programming environment and online communities. The session will combine several different formats, including research presentations and analysis by two members of the team that develops and supports Scratch, short presentations and demonstrations by five educators and young people working with Scratch, and discussions among audience participants.	Stories from the scratch community: connecting with ideas, interests, and people	NA:NA	2018
Karl Schmitt	NA	Session details: Paper - assessment in programming courses	NA	2018
Wade Fagen:Samuel Kamin	The Programming Studio in the University of Illinois Computer Science department is a required course in which small groups of students participate in weekly code reviews of each other's programs. To increase student engagement in the discussions, Tablet PCs were introduced for several weeks in the middle of the semester. By recording the discussions before, during, and after the use of tablets, we measure the effectiveness of this intervention. In doing so, we develop a simple metric to measure the "active engagement" of the participants. We found each section was significantly more engaging when using Tablet PCs (p<0.0001) and the large majority of individual participants were more engaged. This paper contributes both an objective measurement of "active engagement" and a successful intervention in a programming studio-type course.	Measuring increased engagement using tablet PCs in a code review class	NA:NA	2018
Sue Fitzgerald:Brian Hanks:Raymond Lister:Renee McCauley:Laurie Murphy	This paper reports on a mixed methods study which examines how four experienced instructors approached the grading of a programming problem. Two instructors used a detailed, analytic approach and two instructors employed a holistic approach. One instructor exhibited elements of a primary trait approach. Even though the four instructors used different grading scales and philosophies, their raw scores were highly correlated (Spearman's rho of .81) supporting the conclusion that experienced instructors usually agree on whether a program is 'very good' or 'very bad'. Clearly there is no single right way to grade programs. Further discourse should be encouraged for the benefit of both educators and students.	What are we thinking when we grade programs?	NA:NA:NA:NA:NA	2018
Lewis Baumstark:Edwin Rudolph	We present a system for automatically and iteratively grading student work in a Systems Administration course. This system can grade and give feedback regarding live (running) virtual machines the students have configured. It is appropriate for both face-to-face and online course offerings.	Automated online grading for virtual machine-based systems administration courses	NA:NA	2018
Richard A. Brown	NA	Session details: Paper - active learning	NA	2018
Samuel A. Rebelsky:Janet Davis:Jerod Weinman	As the Media Computing approach has shown, writing programs that make images excites a wide variety of students. In this paper, we report on five years of experience with a new approach to media computation, which we call "media scripting". In our introductory class, students build images by interactively scripting an application, so they can experiment easily and mix work "by hand" and "by code"; we collaborate with studio art faculty, so students build works meeting design criteria; and we emphasize multiple paradigms, so students make images using functional, declarative, imperative, and object-oriented techniques. Our approach has proven quite successful--enrollments are up (at least 33% in CS1, 50% in CS2) and we attract more women (currently 40% of the students in the first course, 25% of those in the second course). Other outcomes are equally positive. For example, comparative data show that our students gain significantly more confidence in their abilities than students in other introductory science courses.	Building knowledge and confidence with mediascripting: a successful interdisciplinary approach to CS1	NA:NA:NA	2018
Edward F. Gehringer:Barry W. Peddycord, III	This paper reports on an experience in using the inverted-lecture model ("flipping the classroom") in computer architecture. The first author concurrently taught two courses in computer architecture. One of these courses was CSC/ECE 506: Architecture of Parallel Computers, an introductory Graduate-level course, taught via lecture both residentially and distance-ed. The other was the CSC 456: Computer Architecture and Multiprocessing, a senior-level undergraduate course which was "flipped." Students in the inverted-lecture class exhibited high levels of engagement. Their performance on exams was not quite up to the level of the students in the graduate class, but the difference was not wide. From this experience, we offer observations and suggestions about inverted classes in general.	The inverted-lecture model: a case study in computer architecture	NA:NA	2018
Nicole Anderson:Tim Gegg-Harrison	As computer science faculty, we are always looking for better ways to recruit and retain new majors. One way to achieve this goal is to incorporate material into the introductory courses that lies within the intersection of the student's "zone of proximal development" (which contains concepts that the student is capable of understanding) and "comfort zone" (which contains concepts that motivate the student and are presented in a way in which the student is familiar and comfortable). We refer to this region as the "comfort zone of proximal development." In this paper, we present a "comfort zone of proximal development" that we have created for computer science students which consists of a collaborative learning environment where programming concepts are introduced with gaming applications.	Learning computer science in the "comfort zone of proximal development"	NA:NA	2018
Brad Richards	NA	Session details: Paper - tools to support novice programmer	NA	2018
Ashok Ram Basawapatna:Alexander Repenning:Clayton H. Lewis	Computational thinking aims to outline fundamental skills from computer science that everyone should learn. These skills include problem formulation, logically organizing data, automating solutions through algorithmic thinking, and representing data through abstraction. One aim of the NSF is to integrate these and other computational thinking concepts into the classroom. This paper introduces a tool called the Simulation Creation Toolkit wherein users apply high-level agent interactions called Computational Thinking Patterns (CTPs) to create simulations. Programming at the Computational Thinking Pattern level allows users to directly create agent interactions in a simulation by employing generic icons acting out a scientific phenomenon they are trying to represent. The Simulation Creation Toolkit aims to preserve the computational thinking benefits of simulation creation while enabling higher-level implementation of agent behaviors. Initial study data collected from sixth grade students with no prior programming experience indicates that students can work the mechanics necessary to create simulations in the classroom environment using the Simulation Creation Toolkit.	The simulation creation toolkit: an initial exploration into making programming accessible while preserving computational thinking	NA:NA:NA	2018
Linda Werner:Charlie McDowell:Jill Denner	There is growing interest in how we can use computer logging data to improve computational tools and pedagogies to engage children in complex thinking and self-expression, but our techniques lag far behind our theories. Only recently have learning scientists begun to measure, collect, analyze, and report how data informs the science of children's learning. In this paper, we describe our initial efforts towards developing tools to mine computer logging data for information on how to enhance learning opportunities. The data were collected as part of an NSF-funded project, and include logs from 320 middle school students using Alice to program computer games in semester-long courses. We describe some lessons learned and decisions made in the process of reconstructing high-level user actions in Alice from low-level Alice logs.	Middle school students using Alice: what can we learn from logging data?	NA:NA:NA	2018
Renee Bryce:Quentin Mayo:Aaron Andrews:Daniel Bokser:Michael Burton:Chelynn Day:Jessica Gonzolez:Tara Noble	Bug Catcher is a web-based system for running software testing competitions. While programming competitions are a way to engage students, they require students to have coding experience. On the other hand, software testing competitions may reach high school students that do not have access to a programming course. In this paper, we present the Bug Catcher system and the results from four sessions of a competition that include a total of 94 high school students. Bug Catcher provides students with requirements, buggy code, and input fields to enter test cases. We observed that most students began entering test cases based on requirements, but then many took an interest in the code as time went on. Our results show that 90% of students would recommend this activity in the future and 72% of students report that the activity increased their interest in Computer Science. Students also provided feedback on the system from the perspective of students without background in Computer Science, allowing us to create and modify features for future use.	Bug catcher: a system for software testing competitions	NA:NA:NA:NA:NA:NA:NA:NA	2018
Colleen Lewis	NA	Session details: Paper - SE and professional practice	NA	2018
Lisa Lancor:Samyukta Katha	Given the popularity of PHP frameworks used in developing web-based applications, a comparative study is conducted to determine which framework is best suited for incorporation into the curriculum of an undergraduate software engineering course that uses project-based learning. The top six PHP frameworks (Zend, Yii, CakePHP, CodeIgniter, PRADO, and Symphony) were initially considered and then narrowed down to two (CakePHP and CodeIgniter) based on their alignment with common functionality in previous class projects, framework complexity for those new to frameworks (learning curve), and developer friendliness (availability of documentation and online resources). An in-depth comparative study is conducted by developing a functionally-equivalent web application using each of the two frameworks as well as plain PHP (no framework). This work was motivated by the difficulties that were encountered in an evolving, content-rich software engineering course and discusses the educational changes that were made to align student learning with sound software engineering principles and current software development practices used in the computing industry.	Analyzing PHP frameworks for use in a project-based software engineering course	NA:NA	2018
Alex Radermacher:Gursimran Walia	Although computer science, information systems, and information technology educators often do an exemplary job of preparing their students for jobs in industry or for further education, there are still many areas where these students do not possess the necessary skills or knowledge based on the expectations of employers or academia. These gaps between the abilities of graduating students and those expected to have can prevent them from succeeding in their careers. This paper presents the results of a systematic literature review conducted to determine which areas graduating students most frequently fall short of the expectations of industry or macademia. The results of this review indicate that graduating students are lacking in many different areas, including technical abilities (design, testing, configuration management tools, etc.) personal skills (communication, teamwork, etc.) and professional qualities (e.g. ethics). By raising awareness of these areas, it is possible for educators to become aware of areas where students most frequently fail to meet expectations and to make curriculum changes or adjustments to address these problems	Gaps between industry expectations and the abilities of graduates	NA:NA	2018
Amruth N. Kumar	A mid-career review is presented, of how the teaching of Computer Science I has changed for this instructor over the last two decades. The content of the course has evolved to include algorithm development and program design. Assessment in the course has gone online and moved away from testing how clever the student is, to how much the student has learned in the course. Professional practices are now covered that help students understand and incorporate preferred practices of the discipline. Changes incorporated into the pedagogy include going from using anthropomorphic and ad-hoc to discipline-specific and consistent vocabulary, and from writing code in the class like an experienced programmer to writing it to suit a beginning learner. It is hoped that this review will help new Computer Science I instructors avoid some misconceptions with which this instructor started out.	A mid-career review of teaching computer science I	NA	2018
Katrina Falkner:Nickolas J.G. Falkner	This session will help participants understand the importance of, and challenges in, introducing collaborative learning within introductory Computer Science curricula. At the University of Adelaide, we have designed our first year curriculum, a sequence of three courses, around collaborative learning - in this session we explore our experiences in developing collaborative activities, collaborative assessment and appropriate training for staff, academic and sessional, involved in collaborative sessions. Based on a seven year programme of designing and undertaking collaborative activities, we will discuss our successes, and our failures, in the use of collaborative learning techniques.	Designing and supporting collaborative learning activities	NA:NA	2018
Nick Parlante:Julie Zelenski:Michelle Craig:John DeNero:Mark Guzdial:David J. Malan:Aditi Muralidharan:Eric Roberts:Kevin Wayne	Every time I re-use a handout, I look it over and make a few little "improvements". I play around with code demos and entertain myself with different slide transitions. However, inevitably, I return to the conclusion that most of what my students learn in my course comes from the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and ready-to-use materials of successful assignments.	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Baker Franke:Jeanne Century:Michael Lach:Cameron Wilson:Mark Guzdial:Gail Chapman:Owen Astrachan	This session will present the research findings to date from an 18-month study commissioned by the ACM in partnership with the National Science Foundation, Google, Computer Science Teachers Association, Microsoft, and the National Center for Woman and Information Technology that started in July, 2012, and invite an open discussion about them. The study seeks to understand the national landscape of K-12 computer science (CS) professional development (PD) and the capacity to provide high quality CS PD on a large scale. The study is being conducted by The University of Chicago's Center for Elementary Mathematics and Science Education (CEMSE) who will present findings from the landscape study conducted in the Summer and Fall of 2012, as well as preliminary findings about the CS community's capacity for increasing the ranks of K-12 CS teachers in light NSF's stated goal of preparing 10,000 secondary education teachers to teach high-quality computer science[1]. A goal for this work is to produce actionable findings that will be of use to the broad CS education community. In the spirit of togetherness and engendering some collective action toward a coherent national strategy for expanding computer science education, it's vital that the SIGCSE community be both aware of this study's findings and be given an opportunity to reflect on its implications. Therefore, over half the time of this session will be devoted to open discussion during which several key questions stemming from the findings will be raised as well as questions raised by audience members. This session is an important opportunity for the SIGCSE community to offer feedback and help to guide the future direction of this study to ensure that the findings and plans for the remainder of the study are useful and actionable.	Expanding access to K-12 computer science education: research on the landscape of computer science professional development	NA:NA:NA:NA:NA:NA:NA	2018
Kurt Eiselt	NA	Session details: Paper - curricular innovations	NA	2018
Suzanne Fox Buchele	The critical need for computer security concepts to be taught in the undergraduate computer science curriculum is evident from current news stories, curricular guidelines, and government initiatives. Beginning to teach a standalone computer security course can be daunting, especially for instructors with little or no background or formal education in computer security. An elective course in cryptography and computer security was developed that matched the talents of the professor and the resources and context of the two Universities and departments in which it was taught. Two models of the course evolved: an elective semester-long computer science and mathematics cross-listed course, and an elective summer computer science course with significant hands-on laboratory exercises. Either course may be used as a model for an accessible course offering involving computer security.	Two models of a cryptography and computer security class in a liberal arts context	NA	2018
Timothy J. Hickey:Pito Salas	This paper describes three years of experience with an intensive three course summer semester on web and mobile entrepreneurship for second year CS students and beyond. The program is similar in structure to a high school summer camp or to a summer accelerator/incubator program except that it has a much higher level of academic content and provides the credit equivalent to three Computer Science electives and a full semester of residency. The program has been effective at teaching students production programming and entrepreneurship and has stimulated entrepreneurial activity during the academic year. It is taken by about half of the CS majors in the department which is surprising since it requires them to spend their summer months in a very intense academic and entrepreneurial experience which is quite different from the usual summer experience of their peers.	The entrepreneur's bootcamp: a new model for teaching web/mobile development and software entrepreneurship	NA:NA	2018
Timothy E. Roden:Rob LeGrand	A comprehensive undergraduate curriculum in computer game development is described. The program was created as a set of elective courses in the context of a traditional computer science (CS) degree. Primary goals of the program were to increase enrollment in CS and prepare students for careers in the entertainment software industry. In addition, the CS department sought to compete for students with larger state institutions. To do so effectively the department needed to offer a unique program. Results show the new program helped the CS department to nearly triple enrollment over four years and achieve both statewide prominence and national recognition.	Growing a computer science program with a focus on game development	NA:NA	2018
Pamela Cutter	NA	Session details: Paper - improving student learning in courses	NA	2018
Matthew Hertz:Maria Jump	Students in introductory programming courses struggle with building the mental models that correctly describe concepts such as variables, subroutine calls, and dynamic memory usage. This struggle leads to lowered student learning outcomes and, it has been argued, the high failure and dropout rates commonly seen in these courses. We will show that accurately modeling what is occurring in memory and requiring students to trace code using this model improves student performance and increases retention. This paper presents the results of an experiment in which introductory programming courses were organized around code tracing. We present program memory traces, a new approach for tracing code that models what occurs in memory as a program executes. We use these traces to drive our lectures and to act as key pieces of our active learning activities. We report the results of student surveys showing that instructor tracing was rated as the most valuable piece of the course and students' overwhelming agreement on the importance of the tracing activities for their learning. Finally, we demonstrate that trace-based teaching led to statistically significant improvements student grades, decreased drop and failure rates, and an improvement in students' programming abilities.	Trace-based teaching in early programming courses	NA:NA	2018
Kostadin Damevski:Badreldin Altayeb:Hui Chen:David Walter	The greater versatility and increasingly smaller sizes of computing, sensing, and networking devices have resulted in a new computing paradigm called Cyber-Physical Systems (CPSs), which integrates computation and sensing into physical processes producing a wealth of exciting applications in many domains of life, such as transportation, medicine, and agriculture. In order to equip students with the essential knowledge and skills to be successful in the future, this paradigm requires an expansion in the scope of computer science curricula to enable students to understand and overcome the complexity inherent in CPSs. In this paper, we describe our experience with teaching CPS via a set of course modules that rely heavily on modeling and verification. By using the popular Android platform, we aim to engage students to successfully build CPS applications while enhancing their understanding of intellectually challenging concepts.	Teaching cyber-physical systems to computer scientists via modeling and verification	NA:NA:NA:NA	2018
Ran Libeskind-Hadas	A common approach to teaching algorithms involves describing algorithms first and then proving their correctness afterwards. In this article we advocate a "derivation-first" approach in which algorithms are "derived," either from basic concepts or from simpler algorithms, before they are proved correct. We demonstrate how a number of "classical" algorithms can be derived, providing students with a more intellectually satisfying experience, a deeper intuition into how algorithm design works, and connections between algorithms that can be useful in developing algorithms for other problems.	A derivation-first approach to teaching algorithms	NA	2018
Timothy Fossum	NA	Session details: Paper - working the web	NA	2018
Philip J. Guo	This paper presents Online Python Tutor, a web-based program visualization tool for Python, which is becoming a popular language for teaching introductory CS courses. Using this tool, teachers and students can write Python programs directly in the web browser (without installing any plugins), step forwards and backwards through execution to view the run-time state of data structures, and share their program visualizations on the web. In the past three years, over 200,000 people have used Online Python Tutor to visualize their programs. In addition, instructors in a dozen universities such as UC Berkeley, MIT, the University of Washington, and the University of Waterloo have used it in their CS1 courses. Finally, Online Python Tutor visualizations have been embedded within three web-based digital Python textbook projects, which collectively attract around 16,000 viewers per month and are being used in at least 25 universities. Online Python Tutor is free and open source software, available at pythontutor.com.	Online python tutor: embeddable web-based program visualization for cs education	NA	2018
Daniel Zingaro:Yuliya Cherenkova:Olessia Karpova:Andrew Petersen	We present the Python Classroom Response System, a web-based tool that enables instructors to use code-writing and multiple choice questions in a classroom setting. The system is designed to extend the principles of peer instruction, an active learning technique built around discussion of multiple- choice questions, into the domain of introductory programming education. Code submissions are evaluated by a suite of tests designed to highlight common misconceptions, so the instructor receives real-time feedback as students submit code. The system also allows an instructor to pull specific submissions into an editor and visualizer for use as in-class examples. We motivate the use of this system, describe its support for and extension of peer instruction, and offer use cases and scenarios for classroom implementation.	Facilitating code-writing in PI classes	NA:NA:NA:NA	2018
David Pritchard:Troy Vasiga	Computer Science Circles is a free programming website for beginners that is designed to be fun, easy to use, and accessible to the broadest possible audience. We teach Python since it is simple yet powerful, and the course content is well-structured but written in plain language. The website has over one hundred exercises in thirty lesson pages, plus special features to help teachers support their students. It is available in both English and French. We discuss the philosophy behind the course and its design, we describe how it was implemented, and we give statistics on its use.	CS circles: an in-browser python course for beginners	NA:NA	2018
Catherine Lang	NA	Session details: Paper - computational thinking	NA	2018
Kyu Han Koh:Alexander Repenning:Hilarie Nickerson:Yasko Endo:Pate Motter	A strategy exposing middle school students to computer science through game design appears to be a promising means to mitigate the computer science pipeline challenge. Particularly when short game design activities are integrated into already existing middle school courses, research suggests that game design is effective in broadening participation and motivating large numbers of students, along with large percentages of women and minorities. A study with over 10,000 students is exploring the sustainability of this approach and finding positive responses to inquiries such as these: Do teachers continue to use game design? Can they advance beyond extrinsic rewards such as research stipends? After building one game, do students advance, building more games or even STEM simulations?	Will it stick?: exploring the sustainability of computational thinking education through game design	NA:NA:NA:NA:NA	2018
Yasmin B. Kafai:Quinn Burke	In this conceptual paper, we argue that recent developments in K-12 programming education are suggestive of what can be called a "social turn", a shift in the field in which learning to code has shifted from being a predominantly individualistic and tool-oriented approach to now one that is decidedly sociologically and culturally grounded in the creation and sharing of digital media. We discuss in detail three dimensions of this social turn (1) from writing code to creating applications, (2) from composing "from scratch" to remixing the work of others, and (3) from designing tools to facilitating communities. These three shifts illustrate how the development of artifacts, tools, and communities of programming lead us to move from computational thinking to computational participation. We draw from examples of past and current research, both inside and outside of school, and situate these developments in the context of current discussions around computational thinking, which has become a driving force in revitalizing programming in K-12 curricula and altogether broadening participation in computing.	The social turn in K-12 programming: moving from computational thinking to computational participation	NA:NA	2018
David S. Touretzky:Daniela Marghitu:Stephanie Ludi:Debra Bernstein:Lijun Ni	We describe a three-stage model of computing instruction beginning with a simple, highly scaffolded programming environment (Kodu) and progressing to more challenging frameworks (Alice and Lego NXT-G). In moving between frameworks, students explore the similarities and differences in how concepts such as variables, conditionals, and looping are realized. This can potentially lead to a deeper understanding of programming, bringing students closer to true computational thinking. Some novel strategies for teaching with Kodu are outlined. Finally, we briefly report on our methodology and select preliminary results from a pilot study using this curriculum with students ages 10-17, including several with disabilities.	Accelerating K-12 computational thinking using scaffolding, staging, and abstraction	NA:NA:NA:NA:NA	2018
Jakita Thomas	NA	Session details: Paper - camps and mobile computing	NA	2018
Janet E. Burge:Gerald C. Gannod:Maureen Doyle:Karen C. Davis	In this paper, we describe our experience running "Girls on the Go: The Mobile Computing College Experience." We decided to do a residential summer camp for HS-age girls to achieve two goals: to encourage our campers to attend college and to interest them in computer science as a possible career option. We centered the camp around the design of a zoo-themed research tool where campers designed a mobile application to be used by researchers to document and study animal behavior. Post-camp surveys gave statistically significant results indicating that the camp increased the girls' confidence in performing computer science and understanding what computer scientists did.	Girls on the go: a CS summer camp to attract and inspire female high school students	NA:NA:NA:NA	2018
Amber Wagner:Jeff Gray:Jonathan Corley:David Wolber	Educators are often seeking new ways to motivate or inspire students to learn. Our past efforts in K-12 outreach included robotics and media computation as the contexts for teaching Computer Science (CS). With the deep interest in mobile technologies among teenagers, our recent outreach has focused on using smartphones as a new context. This paper is an experience report describing our approach and observations from teaching a summer camp for high school students using App Inventor (AI). The paper describes two separate methods (one using a visual block language, and another using Java) that were taught to high school students as a way to create Android applications. We observed that initiating the instruction with the block language, and then showing the direct mapping to an equivalent Java version, assisted students in understanding app development in Java. Our evaluation of the camp includes observations of student work and artifact assessment of student projects. Although the assessment suggests the camp was successful in several areas, we present numerous lessons learned based on our own reflection on the camp content and instruction.	Using app inventor in a K-12 summer camp	NA:NA:NA:NA	2018
Matthew H. Dabney:Brian C. Dean:Tom Rogers	The use of mobile app development in pre-college computing education is rapidly gaining momentum due to the increasingly widespread use of mobile devices. To fully realize the learning potential of this technology in the classroom, however, one may need to re-examine traditional curricular approaches originating from desktop computing environments. In this work, we describe our experience with a new high-school computing camp designed from the ground up to engage students by taking full advantage of the specific benefits of mobile devices, such as built-in cameras, GPS, networking, and sensors measuring touch, sound, acceleration, and orientation. We describe the design of our camp including materials and examples used. We assess the effectiveness of this instructional approach by demonstrating a statistically significant increase in interest in future computing endeavors. We also comment on the use of MIT App Inventor to ease the transition, particularly for novice programmers, to more sophisticated Java-based apps.	No sensor left behind: enriching computing education with mobile devices	NA:NA:NA	2018
Edward F. Gehringer:Beth Lang Golub:Randi Cohen:David M. Arnow:Clifford A. Shaffer	Textbook pricing has become a hot-button issue in academe. Allegations are rife that textbook prices are increasing faster than tuition, and that some students spend even more on textbooks than on tuition. The matter is complicated by rapidly changing technology and the expectations that print textbooks may soon be obsolete. This panel brings together two textbook editors from major publishers and two authors with extensive experience in new media to discuss why textbooks are so expensive and how the market is likely to change in the foreseeable future.	Panel: textbook pricing, present and future	NA:NA:NA:NA:NA	2018
Owen Astrachan:Amy Briggs:Lien Diaz:R. Brook Osborne	NA	CS principles: development and evolution of a course and a community	NA:NA:NA:NA	2018
Debra Goldberg:Dirk Grunwald:Clayton Lewis:Jessica Feld:Kristin Donley:Odette Edbrooke	School districts across the country are embracing 21st century skills, and grappling with how to teach these to their K-12 students. At the same time, computer science educators are grappling with how to broaden participation. These two dilemmas are related, in that computer science can be used to teach many of the 21st century skills, and bringing computer science to all K-12 students can help broaden participation. For computer scientists, key 21st century skills [4] include creativity & innovation, critical thinking and problem solving, communication & collaboration, information literacy, media literacy and information, communications and technology (ICT) literacy -- these skills go beyond traditional "computational thinking" skills because they include reflections on how computation affects social processes (such as the role of computational media in society). Since 2009, K-12 educators and computer science graduate students in the Engaging Computer Science in Traditional Education (ECSITE, pronounced "excite") project have developed curricular units that are embedded into non-computing K-12 classes [3]. These units collectively address many 21st century skills, and have been introduced into arts, geography, government, health, music, and science classes. In this special session, we will interactively share some of our successful curricular units that address different 21st century skills, initiate a broader discussion on embedding computer science into K-12 curriculum and discuss methods we are exploring to enhance the sustainability of such efforts.	Addressing 21st century skills by embedding computer science in K-12 classes	NA:NA:NA:NA:NA:NA	2018
Sarah Heckman	NA	Session details: Paper - classroom management	NA	2018
Joseph Lawrance:Seikyung Jung:Charles Wiseman	Numerous CS faculty have demonstrated the benefits of using version control in courses other than software engineering. However, they maintained their own servers, and to the best of our knowledge, none published experiences with version control in CS1 courses for non-CS engineering majors. As a result, even faculty experienced with version control may hesitate to adopt it in some classes, fearing that it is too difficult, time consuming or distracting. In this paper, we describe how we adopted version control in a CS1 course for non-CS engineering majors, and how software hosting services facilitated its use. Our experience indicates that undergraduate engineering majors in CS courses can gain competence in version control, and software hosting services simplify class administration.	Git on the cloud in the classroom	NA:NA:NA	2018
Tyson R. Henry	Success in the computing industry often depends on an individual's ability to be a productive member of an effective study group or project team. In order to prepare students for successful careers, computer science curriculum often includes group projects. This paper discusses the challenges of forming effective student groups, discusses existing software for forming groups, and introduces groupformation.org, a new free and open source group formation service.	Creating effective student groups: an introduction to groupformation.org	NA	2018
Marc J. Rubin	Live-coding is defined as "the process of designing and implementing a [coding] project in front of class during lecture period". In this article we present our research design and results regarding the effectiveness of live-coding to teach introductory programming. The research design includes two experimental groups spread across four sections of an introductory C++ course at Colorado School of Mines. In the control group, students were taught using static code, meaning that instructors never typed, but instead viewed, compiled, and executed code examples. In the experimental or "live-coding" group, instructors started each lecture with a blank screen, and taught code examples by systematically typing, compiling, and testing code to solve example problems. To assess the effectiveness of live-coding, we administered four surveys and analyzed final grades. Two of the surveys were given at the beginning of the course, and were used to measure baseline programming knowledge and student learning preferences (i.e., VARK). The other two surveys, given at the end of the course, were designed to measure the amount of programming knowledge obtained as well as preferences towards live coding. Lastly, final grades were analyzed in terms of its subcomponents: the assignments, exams, final project, and overall grade. Based on our results, we conclude that teaching via live-coding is as good as if not better than using static code examples.	The effectiveness of live-coding to teach introductory programming	NA	2018
Laurie Murphy	NA	Session details: Paper - music and computing education	NA	2018
Brian Magerko:Jason Freeman:Tom McKlin:Scott McCoid:Tom Jenkins:Elise Livingston	In this paper, we describe EarSketch, an integrated curriculum, software toolset, and social media website, grounded in constructionist principles, that targets introductory high school computing education. We hypothesize that the use of collaborative computational music composition and remixing may avoid some of the engagement and culture-specific issues that other approaches, both in music and other media, have had. We discuss the design of EarSketch, its use in a pilot summer camp, and the evaluation results from that pilot.	Tackling engagement in computing with computational music remixing	NA:NA:NA:NA:NA:NA	2018
Jennifer Burg:Jason Romney:Eric Schwartz	This paper reports the results of a four-year National Science Foundation CCLI grant that supported development and assessment of curricular material linking computer science (CS), digital audio, music, and sound design. A book and online learning aids were created and used in courses and summer workshops. The material was refined based on feedback from students and instructors. Learning was measured by pre- and post-tests. In this paper, we map the curricular material to the Big Ideas for CS Principles as well as to core CS courses. Objective and subjective assessment of the material over the course of the grant leads us to recommendations for purposeful, parallel, and convergent learning, concepts that are explained in the paper.	Computer science "big ideas" play well in digital sound and music	NA:NA:NA	2018
Blake Sawyer:Jason Forsyth:Taylor O'Connor:Brennon Bortz:Teri Finn:Liesl Baum:Ivica Ico Bukvic:Benjamin Knapp:Dane Webster	This experience report presents the planning, execution and results of an exploratory 5-day musical instrument MAKErs camp for K-12 students. Students used various hardware sensors, a graphical programming environment and different physical prototyping techniques to create musical instruments. The design of a musical instrument introduces students to the full spectrum of the design process including form factor and function. Throughout the camp, students shared and performed in front of their peers to gain feedback as they iterated through the design of a musical instrument.	Form, function and performances in a musical instrument MAKErs camp	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
David Stucki	NA	Session details: Paper - security and secure programming	NA	2018
Minzhe Guo:Prabir Bhattacharya:Ming Yang:Kai Qian:Li Yang	As smart mobile devices grow increasingly in popularity, so do the incentives for attackers. Recent surveys on mobile security describe the rapidly increasing number and sophistication of mobile attacks. Newer sources of risks are being introduced or explored in the mobile computing paradigm where traditional security threats are also evolving. The prevalence of mobile devices and the rapid growth of mobile threats have resulted in a shortage of mobile security personnel. Educational activities are needed to promote mobile security education and to meet the emerging industry and education needs. This paper presents our initial effort on exploring a learning approach to mobile security, which aims at taking advantages of the benefits of mobile devices and the best practices in learning information security, promoting students' interests, and improving students' self-efficacy. An Android security labware is designed to implement the environment and materials for the learning approach. We integrated the pilot modules of the labware into two security courses in two semesters. The majority of the students provided positive feedback and enjoyed the Android security practices.	Learning mobile security with android security labware	NA:NA:NA:NA:NA	2018
Binto George:Martha Klems:Anna Valeva	Since human factor security exploits are on the rise, ensuring Usable Security has become extremely important for the overall security of computer systems. However, traditional undergraduate computer security curriculum focuses heavily on technical aspects of security and generally ignores Usable Security. To address this problem, we developed a new 3P Learning Method that encourages students to view security problems from three different perspectives (i.e. 3P), namely: Defense, Offense, and Use. The 3P Method lets us incorporate Usable Security into the existing curriculum and helps students to consider Usable Security as an integral part of secure system design rather than an optional add-on.	A method for incorporating usable security into computer security courses	NA:NA:NA	2018
Jun Zhu:Heather Richter Lipford:Bill Chu	Software flaws are a root cause of many of today's information security vulnerabilities. Current curricula emphasis on traditional information security issues does not address this root cause. We propose educating students on secure programming techniques through interactive tool support in the Integrated Development Environment (IDE). We believe this approach can complement other curricula efforts by teaching and providing continuous reinforcement of practices throughout programming tasks. In this paper, we evaluate our prototype tool, ASIDE, which provides instant security warnings, detailed explanations of vulnerabilities, and code generation. We report the results of an observational study on 20 students from an advanced Web programming course. The results provide early evidence that our tool could potentially help students learn about and practice secure programming in the context of their programming assignments.	Interactive support for secure programming education	NA:NA:NA	2018
Haklin Kimm	NA	Session details: Paper - capstones	NA	2018
Saquib Razak	Research shows that domain mastery requires three phases: acquiring core component skills, practicing integrating these skills, and then applying these skills to solve real-world problems. Although achieving domain mastery is the overall goal of the Computer Science (CS) curriculum, I will make the case that it is important to expose students to all three phases of learning in the first programming course. Having a mini-capstone project on a relevant problem gives the students the deep understanding of why these core components are needed and how they integrate as the students are learning them. In the process, working with a real application excites the students about computer science and can provide them with the confidence to engage in more challenging projects. This paper reports on an experiment where students implement a vehicle license plate number recognition project. Initial results from this experiment indicate that students who worked on the project perform better in the course learning objectives.	A case for course capstone projects in CS1	NA	2018
Paul V. Gestwicki:Brian J. McNely	We propose the periodic retrospective assessment (PRA) technique for reflection-based evaluation of interdisciplinary, team-oriented learning experiences. PRA is characterized by two forms: an assessment at the end of each production iteration, followed by a summative assessment after production has ended. An empirical evaluation of PRA was conducted within a fifteen-week immersive studio--a student-driven, faculty-mentored learning experience in which all learner activity is directed toward a single project, undertaken in collaboration with a community partner. This evaluation reveals that students maintain primary focus on pragmatic production issues during the studio duration, although with secondary yet consistent focus on learning and development. PRA surfaces how the immersive studio produced positive learning outcomes with respect to interdisciplinary collaboration and lifetime learning.	Empirical evaluation of periodic retrospective assessment	NA:NA	2018
Dianxiang Xu	This paper presents a unique summer project for a group of undergraduate students and high school computer teachers to gain research experiences in the area of cybersecurity. The students and teachers were selected from the participants in the NSF REU and RET programs at the host institution. Through the research on security testing of a real-world online banking system, the students and teachers have not only learned about the cutting-edge security testing techniques, but also made publishable contributions to the research base. The two collaborating graduate assistants served as an immediate role model for the undergraduates and an indirect role model for high school students through the teachers. With the help from the graduate assistants, the students and teachers were able to work effectively toward achieving their research objectives. The internal competition helped the participants get a better sense of achievement and satisfaction. The research experiences also prepared the teachers with the necessary knowledge for introducing cybersecurity topics (e.g., secure programming) into future classroom activity. As such, the project described in this paper provides a model summer program for undergraduate and/or K-12 teachers to gain research experiences.	Software security testing of an online banking system: a unique research experience for undergraduates and computer teachers	NA	2018
James Maher	NA	Session details: Paper - educational research	NA	2018
Marie desJardins:Susan Martin	The goals of UMBC's CE21-Maryland project are to build community and to increase the accessibility, diversity, and quality of high school CS education in Maryland. The ultimate objective is for all Maryland students to have access to high-quality, college preparatory CS courses. We present findings from a survey of high school computing teachers regarding the status of CS education in Maryland. Some findings of interest are that urban and rural students have less access to computing courses than suburban students; female teachers are more likely to attract female students and to have larger AP CS classes; and neither teacher race nor gender is correlated with the number of minority students enrolled in CS classes. We describe community building successes through two Google CS4HS workshops, a Maryland CSTA chapter, and statewide summit meetings for educators and administrators. We also discuss how our methodology can be used as a model for other states who are working towards CS education reform at the high school level.	CE21--Maryland: the state of computer science education in Maryland high schools	NA:NA	2018
Michail Giannakos:Peter Hubwieser:Nikos Chrisochoides	The curricula for Computer Science Education (CSE) of many countries comprise both Programming and Information and Communication Technology (ICT); however these two areas have substantial differences, inter alia the attitudes and beliefs of the students regarding the intended learning content. In this study, variables from the Unified Theory of Acceptance and Use of Technology and Social Cognitive Theory were chosen as important factors in students' behavior and attitude towards CSE. This hybrid framework aims to measure the level of the selected key variables on CSE and identify potential differences among ICT and Programming courses. Responses from the total of 126 Greek students, (71 attending ICT courses and 55 attending Programming Courses) were used to measure the variables and to identify the differences between ICT and Programming students. The results revealed several differences in the measured variables. The overall outcomes are expected to contribute to the understanding of students' likelihood to pursue computing related careers and promote the acceptance of CSE.	How students estimate the effects of ICT and programming courses	NA:NA:NA	2018
Shuchi Grover:Roy Pea	Past research on children and programming from the 1980s called for deepening the study of the pedagogy of programming in order to help children build better cognitive models of foundational concepts of CS. More recently, computing education researchers are beginning to recognize the need to apply the learning sciences to develop age- and grade-appropriate curricula and pedagogies for developing computational competencies among children. This paper presents the curriculum of an exploratory workshop that employed a discourse-intensive pedagogy to introduce middle school children to programming and foundational concepts of computer science through programming mobile apps in App Inventor for Android (AIA).	Using a discourse-intensive pedagogy and android's app inventor for introducing computational concepts to middle school students	NA:NA	2018
Lewis Baumstark	I report on experiences teaching a Senior-level Special Topics course in Combat Robotics during the Fall 2012 semester. The surface goal of the course was for student teams to design and build a three-pound remote-control combat robot conforming to the Robot Battles rules (http://robotbattles.com/rules) and then to compete against their peer teams at semester's end. The higher-level goal was to expose students to physical design and fabrication techniques -- topics well outside our regular Computer Science curriculum -- and integrate those techniques with software development. Students were required to: Design their robot using 3D Computer-Aided Design (CAD) software. The CAD model allowed students to experiment with design trade-offs, ensure proper fit and placement of parts, and to estimate the weight of the robot prior to build to ensure their design was under the limit. Fabricate parts for their robot using a Computer Numerical Control (CNC) milling machine (similar to that used by machinists and product designers in industry). Understand tool, machine, and workshop safety. Build and program a custom remote-control system using Arduino microcontrollers and Xbee wireless modules. This included soldering, obeying voltage and current limitations, serial communication, servo and motor control, and interfacing with other hardware (such as a Wii Nunchuck video game controller).	A combat robotics course: programming meets computer-aided design and fabrication (abstract only)	NA	2018
Charles Wallace:Shreya Kumar	We introduce Communication Patterns (CPs) as a tool for rigorous qualitative analysis of project communication. Using our library of student capstone project case studies as a test bed, we describe our approach to communication analysis. We identify, analyze and compare the communication, at various granularities, that takes place in student projects. The patterns allow us to objectively describe the structure (what, how, who, where, when, why) of the different forms of communication that occur in a software project. Patterns range from strategic (choice of genre) to tactical (wording or tone). We use CPs to sensitize students to their communication choices as developers and users. The CP framework is familiar to students (akin to design patterns) and generative (readily extendible to new scenarios). In addition, we as researchers and instructors plan to use CPs to assess how new pedagogical practices, moving from traditional classroom communication towards more blended learning, are changing the student experience and assess the effectiveness of current software project communication practices. We use CPs to analyze the communication that occurs in teaching computer use to novice senior citizens. The examples illustrate how CPs can be used to study communication practices in many different contexts of software development or use.	Communication patterns: a tool for analyzing communication in emerging computer science educational practices (abstract only)	NA:NA	2018
Tamara Denning:Tadayoshi Kohno:Adam Shostack	In this poster, we present Control-Alt-Hack": White Hat Hacking for Fun and Profit--a card game for computer security outreach and education. A general lack of awareness about computer security contributes to the insecurity of new consumer technologies. We seek to increase people's prioritization of computer security and their understanding of the variety of attacks and technologies that can be vulnerable to compromise. We work towards this goal via a recreational tabletop card game where people play as white hat hackers, using their characters' skills to perform a variety of hacking Missions. We licensed a game mechanic from a hobbyist game company, worked with graphic designers and illustrators, and rewrote card text to make the game about working as a computer security professional. Visit www.controlalthack.com for supplementary educational materials and to request free educator copies.	Control-Alt-Hack‚Ñ¢: a card game for computer security outreach and education (abstract only)	NA:NA:NA	2018
Sarah Hug:Jane Krauss	K12 students have limited access to computer science curricula in United States' public schools. Individuals' perceptions of the field as a masculine, elite, and individualistic profession can restrict which K12 students are encouraged to pursue careers in computer science. The Counselors for Computing (C4C) campaign is designed to expand the profile of the "future computer scientist" by educating school counselors about the need for qualified professionals in this engaging, creative, collaborative, and rich field of study. This project is a collaboration with the American School Counselor Association (ASCA), the Computer Science Teachers' Association (CSTA) and more than thirty other members of NCWIT K-12 Alliance are partners in this campaign, developed to educate and equip academic school counselors to best advise students regarding computing careers. Advocates of computing who serve as academic school counselors can support student interest and aspirations towards computing through broadening course scheduling practices, linking students' current interest to computing (e.g., bioinformatics, media development), and considering multiple post-secondary paths in computer science. The C4C training program equips counselors to better inform youth about computing career paths, encourages counselors to focus on computing careers across pathways (e.g., for military, community college, and four year college/university bound students). In this poster presentation, the authors: a) describe the collaborative professional development approach taken in C4C, b) direct K12 computer science educators and stakeholders to free resources developed for C4C, and c) provide initial evidence of the program's effectiveness.	K12 outreach: motivating k12 school counselors to embrace the changing face of computing (abstract only)	NA:NA	2018
Robert E. Beck:Daniel T. Joyce	Sustainability has been defined variously as the perpetual maintenance of diverse and productive environments upon which all life depends (Renewable Natural Resources Foundation); the responsible use of resources over an indefinite period of time (National Association of Biology Teachers); or "meet[ing] the needs of the present without compromising the ability of future generations to meet their own needs. (World Commission on Environment and Development)" A sustainable future depends on a workforce of professionals knowledgeable about creating practices, processes, and infrastructure to optimize resource management, and on a community informed about the ethics and influence of human activity on the integrated environmental, economic and social aspects of sustainability. For these reasons we believe that STEM education, which includes computing, is key to developing the knowledge, the technology, the skills, the motivation and the policies needed for a sustainable future. SIGCSE is one of eleven professional societies involved in the Sustainability Improves Student Learning (SISL) project, which seeks to engage those who teach computing in an effort to include sustainability ideas throughout the computing curriculum. This poster presents the current status and future plans of the SISL project, highlighting where and how computing plays a significant role (with special thanks to the ITiCSE sustainability-related working groups for the where and how information).	Sustainability improves student learning (SISL) in computing (abstract only)	NA:NA	2018
Steven I. Gordon	We present the components of model undergraduate and graduate programs in computational science that have been developed as part of the XSEDE Education Program. The models serve as a template to assist institutions in creating formal programs in computational science that span multiple disciplines including the sciences and engineering, mathematics, computer science, and, more recently, social sciences. The aim of the services is to encourage more institutions to consider computational science as a part of their core curriculum and to reduce the time it takes to integrate new materials and programs. The services provided include campus visits to explore program creation in the context of the interests of the current faculty conducting research and instruction that includes computational modeling. XSEDE also sponsors professional development workshops for faculty and students. These include one day to full week workshops focusing on computational science education in various disciplinary areas as well as technical training that focusing on a variety of computational tools and methods. XSEDE has also created an index to sharable instructional materials focused on building a virtual community interested in computational science education. The index will allow faculty and students to find reviewed examples of models, exercises, and instructions that can be incorporated into current and future courses.	Creation of interdisciplinary programs in computational science (abstract only)	NA	2018
Scott Britell:Lois Delcambre:Edward Fox:Randy Steele	With the proliferation of digital educational resources comes the requirement to provide educators with tools for collaboration, customization, and reuse of these resources. We describe our repository software built upon the Drupal content management system that allows educators to form curriculum-based online communities to create, share, and adapt educational resources and curricula. Teachers can create curricula from scratch, add to existing curricula, or clone and customize curricula to fit their teaching environment. We also show how our system can help educators see the usage contexts of their materials. The software is demonstrated in the STEMRobotics middle and high school robotics curricula repository and the MSScience middle school standards-based curriculum collaboration site.	Curriculum collaboration, customization, and reuse: creating communities in digital repositories (abstract only)	NA:NA:NA:NA	2018
Rita Manco Powell:Christian Murphy:Adam Cannon:Joshua Gordon:Arthi Ramachandran	The Columbia Emerging Scholars Program (CESP) in Computer Science is a Peer Led Team Learning (PLTL) approach to bringing undergraduates new to the discipline together with peer mentors to work on computational problems, and to expose them to the broad array of disciplines within computer science. CESP demonstrates that computer science is necessarily a collaborative activity that focuses more on problem solving and algorithmic thinking than on programming. In spring 2012 the computer science department at Columbia University completed the 9th iteration of CESP, with 104 women and 36 men having completed the program to date. Female enrollment at Columbia during the past four years has increased from 9% to 23%, but did CESP play a part in this increase? This poster presents our evaluation data, which indicates that CESP increased enrollment in the computer science major, especially for women. Students who took CESP along with the introduction to computer programming course in 2009-10 were three times more likely to major in computer science the following year than the students who took introduction to programming without CESP. 47% of CESP students subsequently chose the computer science major. In addition, survey results indicated that a large majority of students intended to take another computer science course, were enthusiastic about the program, and found the workshop topics exciting and engaging. Participants reported that they learned more about computer science in CESP, and would recommend CESP to others.	Evaluation of the emerging scholars program at Columbia University (abstract only)	NA:NA:NA:NA:NA	2018
Brian K. Hare	This poster reports on a set of classroom interventions at a public urban university to reduce the failure and withdrawal rate in CS1. Though unsuccessful in their original goal of reducing the number of students withdrawing from the course or receiving poor grades, the interventions provided valuable information suggesting contributors to poor course outcomes. These included concurrent full-time enrollment and full-time employment and lack of foundational skills. We also found that at-risk students could be identified with a one-page quiz the third week of the semester. We have made several course revisions going forward, including restructuring programming assignments and adding online practice problems, and revised our academic advising procedures.	Classroom interventions to reduce failure & course withdrawal in CS1 (abstract only)	NA	2018
Matthew A. Lang	Education research has long borne that students who are the most successful are those that are intrinsically motivated. In the computer science education community there have been attempts to create intrinsic motivation in our students through the use of puzzles and games. At the same time, members of the community have advocated the use of storytelling to increase intrinsic motivation and student learning. In an undergraduate computer science curriculum, large software projects and challenging lab assignments are necessary elements. While successful students thirst for these experiences, many students dread courses driven by large and challenging assignments. In order to increase the intrinsic motivation of students in such a course, the assignments can be structured as elements of an alternate reality game (ARG) where successful participation in and completion of assignments advances a narrative set in the real world. The advantage of using a ARG in an educational context is many-fold: its storytelling and puzzle elements increase student engagement, it generates a sense of excitement in the class, and it increase student motivation to complete assignments. In an implementation of this course backdrop, student surveys indicate that students find the narrative element of the course fun, that they are more excited to do the lab assignments because of it, and that it makes them more excited about studying computer science. Furthermore, the excitement around the game helped to build community: interested students who completed the course helped in the preparation of the ARG for the next offering of the course.	Using an alternate reality game as a course backdrop (abstract only)	NA	2018
Aaron Springer:Matthew Johnson:Michael Eagle:Tiffany Barnes	Examining student interactions in multi-step problems from Intelligent Tutoring Systems currently involves examining thousands of interactions from hundreds of students. We designed and implemented a sequential pattern mining algorithm and a sequence rating algorithm that together recognize interesting student action sequences and display them to the user in the context of the larger graph system. With the added feature of our algorithms in the InVis system, we hope to allow teachers and tutoring system designers to better understand student action patterns and thus cater better to their learning.	Using sequential pattern mining to increase graph comprehension in intelligent tutoring system student data (abstract only)	NA:NA:NA:NA	2018
Zachary Dodds:Michael Erlinger	MyCS (Middle-years Computer Science) is a one-semester CS curriculum that engages middle schoolers in computational skill-building. Scratch programming serves as a touchstone throughout the eighteen-week syllabus. Students punctuate that foundation with hands-on activities leveraged from excellent resources such as Exploring Computer Science, CS Principles, webdev tools, and CS unplugged. Over twenty classrooms and 700 students participated in MyCS's pilot years within the Pomona, CA and Lihue, HI school districts; 2013-15 will see an NSF-supported expansion of its summer workshops, academic-year classes, and program evaluation. This poster highlights our experiences developing MyCS, deploying it widely, and soliciting feedback on students' evolving computational identities.	MyCS: middle-years computer science (abstract only)	NA:NA	2018
Lila Ghemri:Rattikorn Hewett:Colleen Livingston	The incidence of cyberbullying has been on the increase as more young people are spending time socializing online. Cyberbullying manifests itself through the sending of embarrassing pictures, mean-spirited text messages, emails and/or postings on social media. Technology has exacerbated the problem by allowing bullying to be accomplished easily and anonymously. The problem of cyberbulling has been brought at the forefront of many colleges and high schools because it is spreading. Indeed, studies show that 39% of social network users have been victims of cyberbulling, compared with 22% of online teens who do not use social networks. Additionally, 88% of teens using social media say they have witness an instance of cyberbulling. Victims of cyberbullying experience negative emotional, physical and social consequences, sometimes leading to the victim's suicide. This module aims at increasing students' awareness of cyberbulling while introducing game theory. Game theory is used to model the bully and the victim and exposes the student to various 2-player models (zero-sum, predator-prey, Nash equilibrium) and strategies that produce the best outcome. This module will be 6 to 9 hours long and will present a definition of cyberbullying, statistics about its prevalence, and research done to prevent and deter cyberbullying. Next, concepts of game theory relevant to modeling a cyberbully and their victim, as 2x2 games, actions, payoffs will be introduced. As regards to learning objectives, it is anticipated that students, who complete this module, will be able to use simulation software to model various game strategies to represent a cyberbullying situation.	Cyberbulling and game models (abstract only)	NA:NA:NA	2018
Ming Yang:Kai Qian:Minzhe Guo:Prabir Bhattacharya:Guillermo Francia:Li Yang	Digital mobile devices, such as smart phones, have become an essential part of daily lives for the young generation, especially college students. The rapid growth of wireless and mobile technologies results in a huge demand on qualified professionals in this area. More and more schools started teaching wireless and mobile networking, but how to provide students with hands-on practice experience is still a challenge. The networking capabilities of smart mobile devices make it a perfect instructional tool for networking related course teaching. In this study, we have designed and developed a labware with Android smart phones that focuses on teaching and learning of fundamental data communications and networking concepts by making use of the mobile nature of smart phones and mobile devices. The goal of this labware is to provide students with hands-on experience with mobile devices to better understand networking concepts such as different layers of TCP/IP protocol, Bluetooth, Wi-Fi, and a wide range of networking methodologies/implementations in a easy-adoptable, affordable, and effective way.	Enhance computer networks learning with hands-on mobile device based labware (abstract only)	NA:NA:NA:NA:NA:NA	2018
Alison Clear:Annemieke Craig:Catherine Lang	The low numbers of female students in computing and computer science courses is still of concern. Initiatives to bring together women in technology to share their experiences, is an important aspect of increasing the numbers of female students entering the computing profession. A very successful celebration of Women in Technology was recently held in Australasia based on a tried and true US model. This model was adapted for the region and added to, other countries will be able to take the model and use it in their own environments and cultures. This poster will describe the recent event and give suggestions and models for other regions and countries to be able to replicate it.	Women in technology: an international collaborative celebration (abstract only)	NA:NA:NA	2018
Nan Li:Apoorv Khandelwal:Tung Phan:Dave S. Touretzky:William W. Cohen:Kenneth R. Koedinger	One essential goal in education is to improve understanding of how humans acquire knowledge and how students vary in their abilities to learn. Building an intelligent agent that models student learning would be a significant achievement in the learning sciences. SimStudent is a state-of-the-art intelligent agent that simulates a human's learning process. However, SimStudent has only been living in the world of graphical user interfaces. To construct a more human-like learning agent, we integrate SimStudent with a cognitive robot, Calliope5KP, to create a physical agent that is able to learn skill knowledge by interacting with users in the physical world. We demonstrate the integration in a tic-tac-toe game, and show that the SimStudent robot is able to learn reasonably well with 12 games.	Creating an educational robot by embedding a learning agent in the physical world (abstract only)	NA:NA:NA:NA:NA:NA	2018
Cameron Macdonell	A common criticism of undergraduate computer science is a disconnect from software development in the real world. To remedy this shortcoming, we introduced an actively developed open-source software project into a third-year software engineering course. We selected a humanitarian software project, Ushahidi, a crisis-mapping web application that is deployed worldwide to track events as diverse as election violence in developing countries, natural disasters and recently, Hurricane Sandy. The primary learning outcome of working with open-source software is that communication skills are as important as programming skills when developing software on a large scale. Working with an active open-source project exposed students to interesting issues related to real-world software development and facilitated direct interaction with expert, professional developers. Positive experiences included successfully understanding, modifying and debugging software written by someone else -- a rare activity in most curricula. The students also had to work with Ushahidi's distributed development model, common to many open-source projects, which reinforced the importance of communication skills and associated tools. Students also experienced some negative realities such as non-existent or outdated documentation and inconsistent software interfaces. Aside from the technical learning outcomes, an intangible benefit of our approach was the motivation students experienced from having someone other than their instructor interested in their progress. As well, the use of a humanitarian software project exposed students to the changing face of computing from its business and scientific roots into new application areas.	Teaching software engineering with an open-source humanitarian software project (abstract only)	NA	2018
Robert E. Beck:Edward Carr:Wingyan Chung:Edward Fox:Christine Nass	As computing moves into its sixth decade as a formal field of study, a great deal of attention is focused on the breadth of relationships between computing and other disciplines. Descriptors of this relationship include computing in context, computing with a purpose, computing + X, computational X, interdisciplinary computing, multi-disciplinary computing, and trans-disciplinary computing. Regardless of the descriptor, the goals for exploring the relationship remain the same: students need to understand how the power of computing informs and shapes ideas throughout the academy and society. They need to learn appropriate concepts in computing and to see these applied to other areas of study. This learning will be most effective when approached through active participation of students, as they tackle questions and problems coming from society's ever-growing and ever-changing reliance on computing devices and modes of interaction. Our NSF-funded project, titled Computing in Context, fosters interdisciplinary computing education by creating exemplars of curricular materials, testing these materials in undergraduate computing courses, and disseminating the materials through computingportal.org. We focus our effort on four areas of applied computing: computational linguistics, computing and music intelligence and security informatics, and web science. Our materials will be designed for inquiry-based learning, whether this occurs in lecture as a brief conversation between pairs of students or in lab as loosely formulated problem or scenario or as a multi-week, team-based project.	Computing in context (abstract only)	NA:NA:NA:NA:NA	2018
Susan H. Rodger:Dwayne C. Brown, Jr.:Michael Hoyle:Michael Marion	Our project is part of the Adventures in Alice Programming project at Duke University. In particular, our project is integrating computer science into middle school math using Alice. We show several ways for students to improve their math skills while engaging their interest in programming. First, we have created Alice worlds for students to interact with to practice math concepts. Second, we have created tutorials to guide students on building such worlds. Third, we have created short challenge problems for students to focus on the math and the programming statements to complete a mostly built world. To encourage the use of Alice with projects we have developed many sample math projects. To encourage teachers to use Alice with math and computer science, we have been mapping our free curriculum materials to both the Commmon Core Math standards and the CSTA CS standards. Our curriculum materials are available at www.cs.duke.edu/csed/alice/aliceInSchools	Integrating computer science into middle school mathematics (abstract only)	NA:NA:NA:NA	2018
Eric Fouh:Daniel Breakiron:Mai Elshehaly:T. Simin Hall:Ville Karavirta:Clifford A. Shaffer	We present a study to evaluate OpenDSA, an open source, online system combining textbook-quality content with algorithm visualizations and interactive exercises for data structures and algorithms courses. We hypothesize that answering many questions and exercises with immediate feedback allows students to know whether they are on track with their learning. In a quasi-experimental study, a control group received lecture and textbook for three weeks. The treatment section spent class time working through equivalent content and exercises in OpenDSA. A post-test compared the two. An opinion survey examined students' perception and opinions about the experience. Detailed interaction logs were used to analyze student use of the tutorials and exercises to understand how they used the system.	OpenDSA: using an active eTextbook to teach data structures and algorithms (abstract only)	NA:NA:NA:NA:NA:NA	2018
Chukwunweike T. Abuah:Rogelio Calderon:Martin Estrada:Zarni Htet:Adriana M. Hurley:Katherine Ingersoll:Hart Russell:Sydney Ryan:Kimberly Spasaro:Prashanna Tiwaree:Samuel A. Rebelsky	Calls are growing for computer science faculty to build a citizenry who are fluent with information technology and able to think computationally. While one might hope that our students would naturally understand the importance of such knowledge, many do not. CS faculty must therefore find ways to motivate such students. In this project, we explore interactive scripting, scripting done while working in an application. Scripting applications allows non-programmers to explore creative spaces and more efficiently accomplish many tasks. The interactive scripting model allows students to mix work they do normally ("by hand") with scripts that they write to better interact with the system ("by code"). Rather than focusing on one language or programming environment, we explore a multilingual approach that supports scripting in the environment the student (or their professor) considers appropriate. The success of the Media Computation approach leads us to focus on media applications, primarily image making and manipulation. We describe our experience (1) developing and using libraries to support interactive scripting in a functional language and an object-oriented language; (2) extending two open-source graphics applications, the GNU Image Manipulation Program and Inkscape, to support interactive multilingual scripting and (3) building novice-friendly examples and procedures.	Making images by hand and by code: motivating students with multi-language interactive media application scripting (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Michael Graf:David Bunde:David Ely:David Lucas:Jens Mache:Chris Mitchell:Andrei Papancea:Miriam Robinson:Ben White	One promising approach to teaching parallel programming is to use high-level parallel programming languages, which handle some of the more mundane details of parallel programming and allow both instructors and students to focus on the main ideas. How does one go about selecting the language to use? We present short descriptions of a variety of languages (Chapel, Cilk, CUDA, Habanero Java, Hadoop, OpenACC, OpenMP and Scala), including our assessment of their strengths and weaknesses, plus some general considerations to keep in mind when teaching parallel programming.	Selecting and using a parallel programming language (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Cameron L. Fadjo	How do we best prepare middle and high school students for college and career pathways in software engineering? Current industry and academic trends suggest that students are best prepared for postsecondary success in new and emerging interdisciplinary fields through extensive training in higher-order thinking skills, such as creative thinking, problem solving, critical thinking, and computational thinking, as well as the development of advanced technical skills, such as applied computing and engineering. To address the urgent need to prepare students for postsecondary industry and educational pathways that utilize software engineering principles, the Office of Postsecondary Readiness (OPSR) within the NYC Department of Education has created a comprehensive curricular program in software engineering for students in grades 6 to 12 called the Software Engineering Pilot (SEP) program. OPSR seeks to improve college and career readiness for all students by placing the SEP program in twenty (20) NYC public schools --ten (10) middle schools and ten (10) high schools-- by the fall of 2013. In this poster session I will outline the various aspects of our comprehensive curriculum, including innovative approaches to teaching abstract concepts, and present the recommended overall curricular scope and sequence for introducing software engineering to students in grades 6 to 12.	A comprehensive software engineering education program for grades 6 to 12 in NYC public schools (abstract only)	NA	2018
Sam Bryfczynski:Brian C. Dean:Roy P. Pargas:Melanie M. Cooper:Michael Klymkowsky	Data structures are one of the fundamental concepts that all computer scientist students must learn if they are to succeed in their careers. Therefore, it is important to develop and assess questions targeted at improving the teaching of data structures. Unfortunately, research suggests that multiple choice or matching questions cannot be used to properly assess deep knowledge on a subject [1,2,3,4]. Students can often guess their way to the correct answer. We believe that students must construct these structures instead of simply identifying them. However, analyzing many hand-drawn data structures is time-consuming for large class sizes. This poster describes a web-based software tool, BeSocratic, designed to facilitate interactivity in a data structures course. BeSocratic allows students to build data structures intuitively using a combination of handwriting recognition and gestures. Using BeSocratic, instructors can create intelligent tutors that teach students to construct various data structures. These tutors are able to identify problems and provide multi-tiered feedback to students. Furthermore, BeSocratic records each action a student makes, so it may be replayed and visualized to gain deeper insights into how students construct data structures and complete algorithms. We have created and pilot-tested a BeSocratic activity, which teaches students how to construct splay trees.	Teaching data structures with BeSocratic (abstract only)	NA:NA:NA:NA:NA	2018
David Weintrop:Uri Wilensky	RoboBuilder is a blocks-based, program-to-play game designed to introduce students to core aspects of computational thinking in a fun and engaging environment. The game employs a constructionist design to challenge players to invent and implement strategies to control an on-screen robot using a specially designed visual programming language. During the game, players' robots compete against a series of progressively more challenging opponents in one-on-one battles. Through playing the game, players construct working programs, providing learners with the experience of reifying their own ideas using a computational medium, a practice central to our notion of computational thinking. This poster presents the design rationale for RoboBuilder and discusses key aspects of the game that contribute to giving learners a positive, hands-on introduction to core computational thinking skills including computationally expressing ideas, algorithmic thinking, and debugging.	Robobuilder: a computational thinking game (abstract only)	NA:NA	2018
Joseph F. Grafsgaard:Joseph B. Wiggins:Kristy Elizabeth Boyer:Eric N. Wiebe:James C. Lester	Understanding how students solve computational problems is central to computer science education research. This goal is facilitated by recent advances in the availability and analysis of detailed multimodal data collected during student learning. Drawing on research into student problem-solving processes and findings on human posture and gesture, this poster utilizes a multimodal learning analytics framework that links automatically identified posture and gesture features with student problem-solving and dialogue events during one-on-one human tutoring of introductory computer science. The findings provide new insight into how bodily movements occur during computer science tutoring, and lay the foundation for programming feedback tools and deep analyses of student learning processes.	Modeling student programming with multimodal learning analytics (abstract only)	NA:NA:NA:NA:NA	2018
Deena Engel	A review of literature in the Digital Humanities field reveals ongoing research on curriculum development. Case studies highlight projects as a means of teaching humanities computing. From a computing perspective, a literature review reveals studies on building successful programming curricula across disciplines; implementing project-based learning ; the role of Computer Science departments in inter-disciplinary studies and the role of teaching web programming to non-majors. Students must fulfill two pre-requisites in order to attend our class: at least one semester each in web design and programming in a high-level language (e.g. Python or Java). CS majors are welcome to take this as an elective. This course was given for the fourth time in the fall, 2012 term. Topics in this course focus on the following subjects and projects: textual analysis by writing programs in Python; a text encoding project using XML with adherence to current Text Encoding Initiative standards (see TEI - http://www.tei-c.org/index.xml); building an on-line archive from primary source materials using xHTML/CSS, XML, XSLT and JavaScript; and creating works of software art using Processing /Java (http://processing.org/). Students are exposed to current research throughout the Digital Humanities by a series of guest lectures given by NYU faculty from the departments of English, History, Museum Studies, and Classics.	Embracing the digital humanities: a course on computing in the humanities for undergraduate computer science minor students (abstract only)	NA	2018
Edward Walker	We describe our approach in developing a Cloud Computing course for undergraduate CS majors. Teaching Cloud Computing can be a challenge, as there are many concepts that need to be covered within the limited time-frame of a three-credit hour semester course. Our approach focused on teaching the concepts and techniques for writing distributed client software using Cloud services, while covering other aspects of Cloud Computing at a higher-level using a story-telling approach. The core concepts were taught through a series of hands-on, scenario-driven, lectures and labs using Cloud services provided by Amazon.com. We share our experience in evaluating other Cloud Computing platforms for use in the class, and the challenges and false assumptions we encountered while teaching it.	A cloud computing curriculum for undergraduate CS majors (abstract only)	NA	2018
Susan Makrouhee Haynes	This poster describes our experiences, materials and plans using the Atmel AVR, a RISC microprocessor, for teaching beginning computer organization at the college level. In particular, we use this microprocessor, typically packaged into the Arduino, to give hands-on experience with: (1) Assembly language programming, including ISA (16 bit instructions), multiple types of branches, multiple addressing modes, (2) C language programming, (3) interrupt programming, (4) I/O programming, and (5) programming on-board components, e.g., timers/counters. Because I/O pins are exposed, it is easy to use logic analyzer or oscilloscope to observe actual signals. Students are charmed and motivated by the physicality of the platform. It is an easy to use platform with a large and enthusiastic user community.	Using the atmel AVR (arduino microcontroller) as the foundation of beginning computer organization course (abstract only)	NA	2018
AnnaLise Hoopes:Tara Chklovski:Dara Olmsted	Technovation Challenge introduces computer science to high school girls in a dynamic learning environment that offers exciting, real-world challenges to conquer; fresh new ways of thinking and problem solving; and the support of hands-on mentors drawn from academia and the tech industry. Over the course of 12 intensive weeks, students identify a problem drawn from their own real-life experiences and program a mobile phone application to solve it. They research their competition and identify ways in which they can win users and earn revenue. They practice their pitch with experienced investors who give them feedback on their app and business plan. The girls then pitch their ideas to a panel of venture capitalists. The winning team receives funding to take their app to market. Evaluations are conducted by an external evaluator. This past year, 67% of girls said they would like to go on to learn another programming language and we saw a 40% increase in girls' interest in studying computer science after completing the program. The number of girls who understand what a computer scientist does doubled, and the number of girls who said they knew how to write a computer program increased by 67%. Over the past three years over 800 high-school girls have programmed 163 mobile phone apps and learned how to launch their startups.	Technovation challenge: teaching girls computer science & entrepreneurship (abstract only)	NA:NA:NA	2018
Julie L. Johnson	The ACM Intercollegiate Programming Contest is probably the most prestigious competition of its kind. Decomposing problems into familiar algorithms; making tradeoffs between efficiency and complexity; working on a team under pressure; not only are these skills needed to compete successfully in such a contest, but are also highly valued in industry. The focus of this poster is to describe a course recently added to the curriculum at Vanderbilt University that centers on programming contest skills and yet, somewhat surprisingly, encompasses several significant learning objectives. Because we already had a general idea of what the learning activities of a course like this would be, we were careful not to simply cobble together performance metrics and learning objectives to suit them. This common mistake leads to assessments that devolve into skills tests measuring basic knowledge instead of instruments that gauge a deeper understanding of the target learning objectives. To combat these pitfalls I broke down the learning activity by identifying the skills needed for success in such an exercise. I then classified each skill in two ways. (i) How could this ability play a part in the achievement of some broader, overarching concept and (ii) in what way might the learning and practice of this skill contribute to the deeper understanding of these larger concepts. Our goal is to inform faculty on how they might include a course like this in their programs and to demonstrate its value to the curriculum.	Making programming contest practice worthy of academic credit (abstract only)	NA	2018
Lillian N. Cassel:Ursula Wolz	We summarize the results of our NSF funded exploration of interdisciplinary computing, including the following points: Interdisciplinary computing spans fields as diverse as visual art, music, the humanities and social sciences, health sciences, pure science, engineering, and mathematics. No field of inquiry in the 21st century extends its knowledge without the influence of computing.[1-4]; A bifurcation is occurring: at some institutions this climate of interdisciplinary work is nurtured, while at others it is thwarted by lack of motivation, resource limitations or simple inaccessibility.; Interdisciplinary computing is inherently collaborative between computing specialists and specialists in other fields. It is not merely pair-wise: computational-X or Y-informatics, but often the collaboration draws from a number of fields.; An important question is what is the breadth and depth of knowledge and skill required to engage in this work. Who needs to know what? What is the language of discourse? How is a methodology established and accepted, and how is subsequent work evaluated?; The mundane concerns of intellectual ownership, boundaries on the discipline (e.g. silos), professional advancement, financial support, and institutional buy-in can diminish the pure intellectual joy that is evident in existing interdisciplinary work.; Impediments are encountered in making the effective collaborations that are essential for the advancement of all the disciplines. The computing disciplines are essential to and also dependent on nearly all other branches of intellectual discovery. [5-6]	Interdisciplinary computing, successes and challenges (abstract only)	NA:NA	2018
Alison Clear:Michael Lance:Amitrajit Sakar	Learning cycle models have long offered structure and ideas for how to teach using a range of activities. Unfortunately recent studies have shown the models of learning styles and learning cycles are poorly supported by scientific evidence. In order to explore the answer to the question, how people learn, Race (2010) has put forward a model to simplify the terminology used in other learning models. The first two ripples are the Want ripple where the student has some want to learn, and the Need ripple where the learner has established that there is a need to learn the subject. These two ripples are considered the motivation aspects of the course. This poster describes the ripple model and the analyses the first two ripples in the context of Computer Science/Software Engineering students.	How students learn: ripples in computer science/software engineering curriculum (abstract only)	NA:NA:NA	2018
Daniela Marghitu:Taha Ben Brahim:John Weaver:Yasmeen Rawajfih	This poster describes a three-step ladder model of K 12 computing and robotics instruction beginning with a simpler programming environment (Kodu) and progressing to more challenging frameworks (Alice and Lego NXT). While moving between the three steps, students explore the similarities and differences in how concepts such as variables, conditionals, and looping are realized. Computer Science Unplugged activities are integrated and then implemented using Kodu, Alice and robots. This innovative model helps maintaining high levels of motivation, concentration, and fun during the entire six weeks of the camp. Feedback obtained from instructors, participants and participants' parents, reinforced by the results of the pre and post program evaluations, clearly indicated the program as a success.	Kodu, alice and lego robotics: a three-step model of effective introducing middle school students to computer programming and robotics (abstract only)	NA:NA:NA:NA	2018
Mario A.M. Guimaraes:Huwida Said	Video games can provide a secure and motivating active learning environment with practical scenarios. This video game project simulates a security competition where the player has to protect the system and keep the services running by reacting to injections that occur at random. The game has several modules (content areas) and levels. Modules have at least two levels. The first level requires installing and configuring hardware/software. For the second level players needs to respond to random events. In the Network module, players install and configure network components such as a firewall/router, a WPA2 WIFI, a web filter/proxy, a spam filter and antivirus software. In the Database Module, players install Apache Web Server, the Data Management System (DBMS) and Database Applications. Players need to install the database and the web-server in a port different than their default port, disable default passwords and test for SQL injection before installing the database. In the Encryption Module, players will be given several scenarios and need to choose the best encrypting method perform the actions to ensure that the data is encrypted. The last module integrates content areas from all other modules.	A multi-level video game for teaching security (abstract only)	NA:NA	2018
Catherine Bareiss:Larry Vail	There is a need for a new style of supporting a computer course. Although it is widely recognized that computer technology provides essential tools for all current scientific work, few university curricula adequately ground science majors in the fundamentals that underlie this technology. Introducing science students to computational thinking in the areas of algorithms and data structures, data representation and accuracy, abstraction, performance issues, and database concepts can enable future scientists to become intelligent, creative and effective users of this technology. The intent is not to turn scientists into computer scientists, but rather to enhance their ability to exploit computing tools to greatest scientific advantage. This poster demonstrates one course doing this.	Computing foundations for the scientist (abstract only)	NA:NA	2018
Elizabeth Patitsas:Michelle Craig:Steve Easterbrook	From an ongoing research project on teaching hash tables using worked examples, we present four preliminary observations. First, that rather than there being a small set of common misconceptions, student misconceptions are diverse and often unique to the student. Second, that students' naive language about hash tables when given a pretest is influenced by words from the Internet (e.g. "hashtag"). Third, we observed that students' language on concept questions evolves with repeated testing, becoming more conceptually accurate but technically less precise. And finally, that students' code code correctness is not correlated to code style, but is correlated to how students performed on the concept questions.	On the countably many misconceptions about #hashtables (abstract only)	NA:NA:NA	2018
Catherine S. Ashcraft	Girls and women continue to be underrepresented in technology one of the fastest growing fields in the U.S. economy. This persistent underrepresentation inhibits innovation by ignoring the diverse perspectives and life experiences women bring to invention and problem solving. Furthermore, disregard for girls' and women's participation perpetuates and exacerbates existing economic disparities for women. In the last decade, considerable research into increasing girls' participation in computing has emerged, but an up-to-date, easy-to-access synthesis of this research is lacking. This gap makes it difficult for educators and advocates to easily access the data they need to make compelling arguments about increasing girls' participation or to offer recommendations based on the latest research. To fill this gap, the National Center for Women & IT (NCWIT) has released a new, ground-breaking report that brings together the best available research in gender, technology, and K-12 education in a one-stop, easy-to-access resource, Girls in IT: The Facts. This poster session will provide an overview of the report. Attendees will gain access to the latest information on 1) the current state of affairs for girls in computing and the key barriers to increasing girls' participation in these fields. Most importantly, attendees will also learn about key promising practices and practical resources educators, policymakers, parents, and others can use to address these barriers. The ultimate goal of this session is to enable attendees to more effectively use this research to advocate for more inclusive computing curriculum, practices, and environments in K-12 contexts.	Girls in IT: the facts - a comprehensive look at the latest research on gender and technology in K-12 contexts (abstract only)	NA	2018
Lila Ghemri:Ping Chen	There has been a staggering increase in the volume of information exchanged over the Internet and the amount of personally identifiable information present online. Additionally, legislative mandates, such as the Sarbanes-Oxley Act of 2002, aim at monitoring organizational behavior and communication, and require organizations to safe keep all written corporate communication, thus creating huge repositories of information, most of which must be access-restricted. IT carries the primary responsibility for ensuring that private digital information does not become public, through the implementation of access-security measures, together with constant monitoring to ensure that even authorized users behave responsibly and ethically. This situation requires CS educators to introduce students to data privacy and the ways to protect users' privacy. We designed a privacy module, consisting of three lessons incorporated into a data mining course. The module aims at introducing students to privacy issues and legislations and the methods and technologies currently in use to protect privacy. The intended audience for this module is senior CS majors, with a working knowledge of database systems and basic data mining techniques. The module first presents students with an overview of privacy concepts and laws and regulations to protect it. Students are then introduced to data privacy-enhancing data manipulation methods as well as secure privacy preserving computation. Upon completion of this module, it is anticipated that students will acquire a good understanding of the concept of privacy, privacy laws and regulations and will become knowledgeable of the computational techniques used for preserving privacy in data mining.	Introducing privacy in a data mining course (abstract only)	NA:NA	2018
Kuba Karpierz:Joel Kitching:Brendan Shillingford:Elizabeth Patitsas:Steven A. Wolfman	We present a highly reusable "inverted" project in which students learn asymptotic and practical behaviour of dictionary data structures--linked-lists, arrays, balanced trees, and hash tables--in an atmosphere of mild competition. Much like David Levine's Nifty Assignment "Sort Detective", rather than implementing the dictionaries, students' programs generate input to our (unlabeled) implementations, and students use timing data to label the implementations. Much like Bryant and O'Halloran's computer architecture labs, students also compete to "convince" a web-based, automated system that their input generators distinguish the dictionaries based on trend-line behaviour. Initial assessment results suggest the project makes substantially improves students' understanding of practical performance of various dictionary data structures, particularly hash tables. UBC has used the project in three terms, and we plan to use it at UBC and U Toronto in coming terms.	"Dictionary Wars" (abstract only): an inverted, leaderboard-driven project for learning dictionary data structures	NA:NA:NA:NA:NA	2018
Jennifer Rosato:Chery Takkunen	A recent focus in CS education has been at the K-12 level, developing CS and computational thinking skills. Oftentimes CS programs find it difficult to get into schools. At St. Scholastica a unique partnership exists between CS and Education. Together they sponsor workshops, write grants, conduct research and support a CSTA chapter. Activities have credibility with K-12 educators and involve subject matter experts. CS programs are able to reach their target audience, encouraging more teachers to include CS in their curriculum and to support their students in pursuing technical careers. Education programs have another way to partner with teachers and provide continuing education. The poster will share benefits for each program, collaborative activities, logistics and results.	Computer science-education outreach: an interdisciplinary collaboration (abstract only)	NA:NA	2018
Marvin Andujar:Lauren Aguilera:Yerika Jimenez:Farah Zabe:Patricia Morreale	A research study measuring perceptions of computing held by Hispanic high school students has been conducted using two visual programming interfaces. Undergraduates conducted regular weekend classes using both Alice and App Inventor lessons to provide computing instruction to the students enrolled in an enrichment program. The goal of this research was to identify and measure high school student perceptions of computing after being introduced computing using drag-drop programming interfaces. The results of this work demonstrates how student interest in computing increases once exposed to computing, but the interest increment is not enough for them to major in a computing area, highlighting the importance of ongoing engagement in computing throughout the high school years.	Improving hispanic high school student perceptions of computing (abstract only)	NA:NA:NA:NA:NA	2018
Jinghua Zhang:Mustafa Atay:Rebecca Caldwell:Elva J. Jones	Statistics have shown that fewer African Americans are pursuing Computer Science (CS) degrees relative to their proportion of the overall population and among those who do major in CS very few are employed as programmers. Struggling with the lower level core CS courses is the main barrier preventing students from declaring CS major and retaining students in the program. In this poster, we present our project of developing game-like instructional modules to enhance student learning in those gatekeeper courses namely Computer Programming I, Computer Programming II and Data Structures. The project involves implementing three components: Education, Assessment and Dissemination. The education component includes developing game-like instructional modules for those three courses, which will allow students to learn the difficult concepts in a gaming context. The assessment component includes establishing an advisory board for the project and implementing the evaluation plan. The advisory board, which consists of experienced CS faculty, education faculty and professionals from the game industry, assists in project development and the evaluation process. The dissemination component includes disseminating results through national conferences, outreach programs, computer science HBCU consortiums, publications and an HBCU faculty workshop. Several modules have been developed and evaluated in the computer programming classes at Winston-Salem State University. Initial assessment results show that game-like instructional modules had a positive impact on student learning.	Developing game-like instructional modules to enhance student learning in lower level core computer science courses (abstract only)	NA:NA:NA:NA	2018
Sambit Bhattacharya:Bogdan Czejdo:Rakesh Malhotra	We present Geospatial Intelligence (GEOINT) as a context for computing education. GEOINT is a rich source of ideas for programming projects, algorithm design and use of databases. Students are interested in GEOINT due to its inherently visual subject matter and its strong ties with crime, espionage and social changes and upheavals. In short we are motivating computation as a subject that can provide solutions and insights into crime mysteries and complex events that unfold over time and space. In addition to keeping Computer Science majors interested, we also seek to attract students of other disciplines into computing. GEOINT and computing knowledge can provide initial preparation for certain jobs that are in demand and also for graduate school. Our assignments and programming projects that are inspired by GEOINT can be used in an introductory programming course or a more advanced course. These materials derive from well known case studies and also fundamentals concepts in computing. Some programming projects are based on exploration of chronologies and timelines as tools that enable the geographical display of information as an order sequence of events. In general these geospatial displays can correlate information to help correct for possible gaps and inconsistencies in knowledge. These materials use multiple layered techniques of presenting information that use time, geographical location, weather conditions and static features of the earth's surface.	Geospatial intelligence as a context for computing education (abstract only)	NA:NA:NA	2018
David Hovemeyer:Matthew Hertz:Paul Denny:Jaime Spacco:Andrei Papancea:John Stamper:Kelly Rivers	Automatically-tested online programming exercises can be useful in introductory programming courses as self-tests to accompany readings, for in-class assessment, for skills development, and to provide additional practice for students who need it. CloudCoder (http://cloudcoder.org) is an effort to build a community based on an open-source programming exercise system (currently supporting C, Java, and Python) tightly integrated with a repository of freely-redistributable programming exercises written and used by members of the community. The goal of the project is to make programming exercises easy and free to incorporate into any programming course.	CloudCoder: building a community for creating, assigning, evaluating and sharing programming exercises (abstract only)	NA:NA:NA:NA:NA:NA:NA	2018
Sarah Hug:Josh Sandry:Ryan Vordermann:Enrico Pontelli:Ben Wright	The goal of the DISSECT program is to integrate computational thinking lessons into general education K-12 classrooms via graduate student/teacher partnerships. The idea of combining the teaching of CT with other disciplines is not new and it has taken shape in a variety of recent efforts in the formal education of youth. What is promising and innovative is the approach as it is implemented in K12 DISSECT classrooms. Through a collaborative teaching partnership, teachers gain a new perspective regarding computer science, and in cooperation with graduate students well-versed in computer science concepts, develop lessons and course modules that serve two purposes: 1.) Address K-12 content standards in core disciplines (e.g., language arts, life science) and 2.) Introduce CT concepts, such as abstraction, algorithms, data analysis and modeling. This poster describes ways computational thinking (CT) is taught in general K-12 classrooms in New Mexico through cooperative teaching. Along with their potential to stimulate interest in computing, these pilot modules were viewed by K12 teachers as enhancing disciplinary course content that teachers are charged with teaching (e.g., middle school science, language arts), deemed vital for sustainability in K12 schools by participating teachers. Preliminary data indicate graduate student and teacher satisfaction with cooperative teaching of CT. Next steps for research will involve student level data collection and analysis.	DISSECT: integrating computational thinking in the traditional K-12 curricula through collaborative teaching (abstract only)	NA:NA:NA:NA:NA	2018
Roger West	Simulations offer an engaging way to learn about decomposition of complex systems. Here I describe a project where the goal is to build a simulation of an ant colony consisting of five different ant behaviors in a 2D environment. Students design and build their simulations with no code provided except for the required GUI. Design issues include choice of appropriate data structures; traversal issues; and using inheritance to model ant behaviors. Students also learn about emergence, as characterized by the development of organized foraging trails by ants that respond only to their immediate surroundings. The visualization requirement enables students to quickly determine whether or not requirements have been met, and provides a way to rapidly grade a moderately large and complex assignment.	Ant colony simulation as an engaging, extendable, and easily gradable programming project(abstract only)	NA	2018
Zalia Shams:Stephen H. Edwards	A normal industry standard measure, bug density (bugs per thousand non-commented source line of code), is a through mechanism to assess code quality. If it is used for evaluating students' code, students will realize their ability to write bug free code from professional context. The main issues of using bug density for object oriented languages are creating a comprehensive test suit, and running them against all solutions as the test cases are written as part of solutions may fail to compile against other codes. We provide a novel four phase Java specific solution: 1) developing a comprehensive master test suit by collecting all the students written valid test cases; 2) transforming the test cases to use late binding so that they can run against any solution; 3) running the entire tests against all the programs and removing redundant test suits; and 4) estimating bugs/KSLOC by determining the relationship between test case failures in the master suite and latent bugs hidden in student programs. The first two phases of this ongoing research are applied to two programming assignments in two different courses encompassing 147 student programs and 240,158 individual test cases. Experimental results show that we have indeed removed compile-time dependencies from test cases using late binding and thus, have resolved the main technical challenge of using bug density for accessing students' code. Our experimental results will help students to realize the quality of their code in terms of industry standard.	An experiment to test bug density in students' code (abstract only)	NA:NA	2018
Kevin A. Gary:Srividya K. Bansal:Arbi Ghazarian	Software engineering (and by extension software engineering education) is a fast-paced and still emerging discipline (by historical comparison to traditional engineering), yet still immature. We argue this immaturity shows in software engineering education in two ways. First, significant efforts in the software engineering and computer science communities focus on content taxonomies or bodies of knowledge (BOKs), whereas BOKs are more established in traditional engineering disciplines. Second, project experiences are not viewed as a central integrating feature of a degree program's curricular implementation. Project experiences tend to be disjoint; there may be a "freshman project" or a "capstone" or an "undergraduate research experience" or merely a semester project undertaken by the individual initiative of an instructor. The Software Enterprise at Arizona State University uses project experiences as the contextual teaching and learning vehicle throughout the Bachelor of Science in Software Engineering degree program. Students engage in classroom learning, group-oriented lab exercises, implementation on scalable projects, and reflective assessment co-located in time for each concept. The result is a student who not only acquires a new skill, but also immediately understands how to put that skill in practice. The Software Enterprise, now in its 9th year, has evolved from an upperclassmen experience to the full-fledged project spine in the Software Engineering program. In a project spine, content is de-emphasized; foundational concepts are tied to project work throughout the undergraduate program. The Enterprise provides over 40 curricular modules (with labs), assessment tools, and pedagogical guidance on project-centered learning to computing educators.	A project spine framework for software engineering education (abstract only)	NA:NA:NA	2018
Adam M. Oest:Ivona Bez√°kov√°:James E. Heliotis:Sean P. Strout	We describe the design for a distributed game-playing environment suitable for student software development of player strategies. The framework has three main components: the game server, which runs as a RESTful web service on the Internet, the game client, which runs on the student's computer, and the graphical interface, which runs inside a web browser on the student's computer. Our earlier framework ran all components locally, and in a single programming language. The new framework supports single-user sessions, in which the student-implemented player plays against another, possibly faculty-supplied, software player, or against a human player. It also supports multi-user sessions, in which student players on two or more separate computers can play against each other in a single game. Supported by the NSF, award ID 1044721.	Student development of board game strategies in a web-based graphical infrastructure (abstract only)	NA:NA:NA:NA	2018
Susan Eileen Fox	Green computing is a catchall phrase that includes efforts to improve sustainability both within the IT industry and outside of it. The green IT movement seeks to reduce energy use, waste, and toxic substances by the IT industry. In many other industries, mobile and computing devices connected to the network enable sustainability through automation, virtualization, and reduced travel. Green computing is a topic of increasing importance within the IT industry. There are few green computing courses for undergraduates, and most are for advanced students. I present a "CS1 Lite" course centered on the theme of green computing. The course integrates programming activities with readings, discussion and online research. The first course module examined how the Internet and mobile networks enable sustainable practices, such as: the virtualization of goods and services, telecommuting and virtual meetings, and cloud computing. The second module examined the "Green IT" movement, including sustainability across the computer life cycle, and increasing energy efficiency, from individual computers up to data centers. The third module focused on "Smart Technology," where network-connected computing devices drive improvements. Topics included the smart energy grid, smart buildings, and applications in health care and agriculture. Throughout the course, programming assignments were tailored to problems relevant to the green computing topics. Students implemented simulations of green computing systems. Students exhibited increased interest and motivation for these projects, and learned naturally about data abstraction and computer networks.	Green computing in the introductory curriculum (abstract only)	NA	2018
Nicholas Brown:Michael H. Goldwasser	We present interactive software designed to support students' exploration of concepts involving Huffman coding. This software illustrates the association between binary codewords and paths in a Huffman tree, the greedy algorithm that is used to construct an optimal tree, and the use of the tree in the decoding process. It allows the user to control the input upon which the code is built, to step forward and backward through an animation of the algorithm process for constructing a tree, and to choose data to encode or decode. We have used this software with students in an introductory computing principles course, a first-year data structures course, and an upper-level algorithms course. The software is publicly available as a Java applet at http://cs.slu.edu/~goldwasser/demos/huffman.	Interactive exploration of Huffman coding (abstract only)	NA:NA	2018
Jennifer Burg:Susan Reiser	High school and CS0 computer science students often begin class having no computing education beyond studying office suite programs. Teaching digital audio, a ubiquitous application, allows an authentic and engaging context for the teaching of computer science principles as outlined at http://www.csprinciples.org. In particular, it demonstrates the interconnection of computer science with physics, mathematics, and audio engineering. Do you teach digital audio or music technology? Are you interested in teaching these subjects? In this BOF we will discuss digital audio in computer science CS0 classes.	Teaching computer science principles with digital sound and music (abstract only)	NA:NA	2018
Viera K. Proulx	Test-First Design is well-regarded process among software developers. Practitioner report that it encourages better program design, improves the testability and reliability, and reduces the stress. We have used the test-first design approach in introductory Java-based programming courses for the past ten years. With the support of our tester library, students learn to design tests without any additional syntactic or structural overhead. A number of colleagues at other universities sued the tester library in a variety of courses. Join us for a discussion on how you can help your students learn to design programs in the test-first style. This work is sponsored by two NSF DUE CCLI grants: Redesigning Introductory Computing: The Design Discipline, Grant #00618543, and Integrating Test Design into Computing Curriculum from the Beginning, Grant #0920182.	Test-first Java for beginners (abstract only)	NA	2018
Catherine Bareiss:Larry Vail	Have you been through a general education review, taught a general education computing course, or provided a service course in computing? Are computing skills and knowledge a college entrance requirement, upper level discipline specific tool, graduation goal, or knowledge for citizens in a free society? Sample computing courses include: Computer Applications in Business, Writing Process using Microsoft Word, Quantitative Social Science using SPSS, Computing equals Programming, AP CS Principles, Computer Ethics, Computers and Society, Computational Thinking, or Introduction to Computer Science. What has and hasn't worked? What should computing offer to the university? Come hear what others are doing and share your insights.	Where is computing in general education (abstract only)	NA:NA	2018
Steven C. Shaffer:Cliff Shaffer	A problem with teaching large classes of introductory programming students is that students need copious practice but instructors do not have time to grade thousands of student programs. Large classes might require the instructor to restrict the graded programs to a handful. However, students need much more practice than this, and experience shows that if an assignment is not being graded then many students will not do it. Also, if the same problem is assigned to all students, copying of answers will occur. Programs that generate unique assignments and automatically grade submissions have been developed. Beginning with a brief example, this session will focus on experiences attendees have had with such approaches, and what an idealized system might look like, including exemplar use cases.	Automated generation and grading of programming assignments (abstract only)	NA:NA	2018
Deborah W. Seehorn:Chris Stephenson:Tammy Randall Pirmann:Kelly Powers	In December 2011, CSTA published their new student learning standards for K-12 Computer Science. The current climate in K-12 schools is one of high stakes accountability with a strong focus on instructional standards. As a result, teachers, computer science education researchers, and K-12 outreach providers are increasingly being pressed to tie their content to national standards. The CSTA K-12 Computer Science Standards provide de facto national standards for all of these purposes. In addition, they help promote K-12 computer science as an essential academic discipline and allow educators and researchers alike to share a common understanding of what students should be learning throughout their K-12 experience.	CSTA CS K-12 instructional standards and CS curriculum (abstract only)	NA:NA:NA:NA	2018
Donald J. Slater:Wanda P. Dann:Steve Cooper	This session is for anyone currently using Alice 3.x and / or Alice 2.x, or exploring the possibility of using Alice in his or her curriculum. The discussion leaders and experienced Alice instructors will share teaching strategies, tips, and tricks with each other and those new to Alice. The session provides an arena for sharing Alice instructional materials and ideas for courses at all educational levels. This is an opportunity to share assignments and pointers to web sites where collections of instructional materials, such as syllabi, student projects, exams, and other resources are available.	Birds of a feather: teaching with Alice (abstract only)	NA:NA:NA	2018
Jim Huggins:Alfreda Dudley:Karla Carter:Dee Weikle:Netiva Caftori	This session is being organized by ACM SIGCAS (Computers and Society) for those with an interest in addressing the social and ethical consequences of computing in our society within their curricula. This year we will share case studies as a means to teaching a variety of issues resulting from the impact of computing in our society. Our discussion leaders will introduce briefly favorite case studies in their fields of interest and will encourage all participants to share examples of their own. Ways for dealing and solving current problems will be tackled. We will provide a plan of how to incorporate the case studies presented into our classes along with a handout of how to do so. Topics of interest include legal issues, social media, privacy, and sustainability.	Nifty computing in society case studies (abstract only)	NA:NA:NA:NA:NA	2018
Mark E. Hoffman:Janet Burge:Jerry Gannod:Mladen Vouk	The fact that employers regularly list communication skills among their top requirements for graduates of Computer Science programs and that communication skills are specifically included in ABET program outcomes attests to their significance for Computer Science educators. To prepare students, Computer Science programs typically require students to take a course in technical communications or writing intensive courses. A recent trend emerging from the communication specialist suggests that integrating communication skills with content across the Computer Science curriculum is more effective strategy. The three-year NSF-funded CPATH II project (CCF-0939122 and CCF-0939081) "Incorporating Communication Skills into the Computer Science Curriculum" brought together 40 Computer Science educators and communications specialists to develop assignments and communications supports that implement content and communication skills integration. The results are available on the project website (http://cs-comm.lib.muohio.edu/). Computer Science educators who seek to provide graduates of Computer Science programs with excellent communication skills will find this approach relevant and valuable. Those who have developed integrated materials will be encouraged to contribute to the project repository. Those who are interested in increasing the amount of communication taught in their curriculum will be encouraged to adapt assignments from the repository to their needs.	Integrating communication skills into the computer science curriculum (abstract only)	NA:NA:NA:NA	2018
Allen Parrish:Cary Laxer	The ABET Computing Accreditation Commission and CSAB (made up of representatives from ACM and IEEE-CS) are currently considering the next generation of changes to the computing accreditation criteria, with emphasis on the program criteria for the various disciplinary areas, including computer science. This Birds-of-A-Feather session will provide a platform for discussion of the types of changes that are currently under consideration, with a view toward obtaining feedback on those changes, as well as obtaining new ideas for revisions from the audience.The ABET Computing Accreditation Commission and CSAB (made up of representatives from ACM and IEEE-CS) are currently considering the next generation of changes to the computing accreditation criteria, with emphasis on the program criteria for the various disciplinary areas, including computer science. This Birds-of-A-Feather session will provide a platform for discussion of the types of changes that are currently under consideration, with a view toward obtaining feedback on those changes, as well as obtaining new ideas for revisions from the audience.	The future of the ABET computer science program criteria (abstract only)	NA:NA	2018
Ambareen Siraj:Blair Taylor:Stephen Cooper	In today's world, it is critical that our students get exposure to security education as part of their Computer Science (CS) curriculum. The lack of security consciousness in digital workforce is costing businesses, government, and citizens severely every year. A significant reason behind this problem stems from the fact that the majority of higher education institutions do not have adequate resources to educate CS students in information assurance (IA) and security. While security is not required in the current CS curriculum, IA has been designated as a knowledge area in the proposed ACM/IEEE-CS CS Curricula 2013. Also, the absence of security topics in core CS subject matters not only leaves students security oblivious, but also prevents higher education institutions from applying for National Centers of Academic Excellence in Information Assurance Education Programs (CAE/IAE) accreditation, which provides access to government scholarships and grants. In this session, we will discuss challenges CS faculty face in integrating security topics in traditional CS courses and call attention to existing government funded supports that faculty can leverage in doing so. To share ideas and resources, we hope to bring together security educators who are active in this field with a community of CS educators who may not have any background in teaching security but recognize the need for it and are interested in teaching security topics as part of their regular course curriculum.	Bringing security into traditional computer science courses: challenges and support (abstract only)	NA:NA:NA	2018
Tara Chklovski:AnnaLise Hoopes:Dara Olmsted	Technovation Challenge introduces computer science to high school girls in a dynamic learning environment that offers exciting, real-world challenges to conquer; fresh new ways of thinking and problem solving; and the support of hands-on female mentors drawn from academia and the tech industry. Over the course of 12 intensive weeks, students identify a problem drawn from their own real-life experiences and program a mobile phone application to solve it. They practice their pitch with experienced investors who give them feedback on their app and business plan. After some more polishing and practice, the girls then pitch their ideas to a panel of venture capitalists. The winning team receives funding to take their app to market.	Technovation challenge: teaching girls computer science & entrepreneurship (abstract only)	NA:NA:NA	2018
Dale Reed:Don Yanek:Gail Chapman	Exploring Computer Science (ECS) is engaging, hands-on high school curriculum and associated professional development that is being implemented at a systemic level in the Los Angeles Unified School District and is now being replicated in Chicago Public Schools and elsewhere. Unlike many introductory CS courses that are mostly programming, the ECS curriculum paired with the required professional development (PD) equips teachers and school districts for successful guided inquiry experiences across the breadth of CS for every student. Over 85 teachers across the country experienced this PD during the summer of 2012. The key to success in Chicago has been establishing an active partnership. Connections to area public and private high school teachers were initiated through the 120-member Chicago CSTA. This active partnership connects Chicago and Los Angeles (UCLA), multiple Chicago universities (DePaul, UIC, Loyola) and Chicago Public Schools administrators. This model for replication is being explored in other states. This session is designed for high school teachers and university faculty currently partnering in implementing ECS, as well as those wanting to replicate ECS in their own cities. We'll begin with a brief activity coupled with small group discussion to give a very brief taste of ECS. This will be followed by discussion of what is special about this guided-inquiry curriculum as well as strategies for replication. The ECS course is a natural precursor to the proposed new AP CS Principles course.	Replicating exploring computer science (ECS) (abstract only)	NA:NA:NA	2018
Mark Sherriff:Daniel Garcia:Jody Paul	Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database.	Teaching track faculty in CS (abstract only)	NA:NA:NA	2018
Adam Anthony:Marie desJardins	The number of REU programs funded in Computer & Information Science and Engineering has increased from 6--12 per year prior to 2007 to a current level of 12--20 per year [www.nsf.gov]. Participation in research broadens students' experience base, increases their readiness for graduate school and the workforce, and develops their critical problem solving and communication skills. Research experiences are particularly effective at increasing the retention and success of women and minorities in computing fields [Cuny & Aspray, SIGCSE Bulletin 2002; Russell et al., Science 2007]. Despite the importance and prevalence of undergraduate research, many faculty are expected to involve undergraduates in research without having any direct experience or mentoring. Meanwhile, a growing interest in experiential learning at many institutions has led to a recent development of institutional environments in which undergraduate research is strongly supported. In many disciplines, such an environment naturally supports basic research programs that are inclusive of both under- and upperclassmen. However, computer science research at the undergraduate level presents a major challenge: most students who have the requisite knowledge to complete a novel research project are already close to graduation, which can make it difficult to involve undergraduates in longer-term research projects. In this bof, we hope to gather both experienced and novice research advisers to discuss strategies for running a continuous research effort across several graduating classes.	Starting and sustaining an undergraduate research program in computer science (abstract only)	NA:NA	2018
Daniel D. Garcia:Daniel Armendariz	The pace of technology for use in computing education is staggering. In the last five years, the following tools / websites have completely transformed our teaching: Piazza, Google Docs, YouTube, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part -- we love our Zoom H2 digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). Do you wish you could easily share your favorites? Want to find out what the others know that you don't? Have a tool you've built and want to get some users? Come to this BOF! We'll also show the TECH website (part of the ensemble computing portal) we've built that attempts to collect all of these tools in one place. A laptop is recommended if the tool you wish to share is more involved than simply visiting a website.	Technology that educators of computing hail (TECH): come, share your favorites (abstract only)	NA:NA	2018
Suzanne W. Dietrich:Don Goelman	Data and information facilitate the creation of knowledge" is Big Idea III in the Computer Science Principles effort. The June issue of ACM Inroads spotlighted some of the pilot offerings of CS Principles, which included spreadsheets, database structure, and XML as coverage of this big idea. The implementation of the CS Principles framework is quite flexible, as illustrated by these pilots. An article in the subsequent September ACM Inroads specifically mentioned the importance of big data and "Data Science." What concepts do you think should be included as part of data and information? The goal of this Birds-of-a-Feather session is to bring database educators together with those interested in teaching CS Principles to brainstorm this big idea.	Brainstorming CS principles big idea III: data and information (abstract only)	NA:NA	2018
Gloria Childress Townsend	In January 2004, we organized the second SIGCSE Committee ("Expanding the Women-in-Computing Community"). Our annual Town Meeting provides dissemination of information concerning successful gender issues projects, along with group discussion and brainstorming, in order to create committee goals for the coming year. We select projects to highlight through listserv communication and through our connections with NCWIT, ABI, ACM-W, CRA-W, etc. This year we will highlight ACM-W Chapters and ACM-W Regional Celebrations.	A town meeting: SIGCSE committee on expanding the women-in-computing community (abstract only)	NA	2018
Barbara Anthony:Lisa Bender:Christine Chung:Mark Lewis	Enrollments in CS have been climbing dramatically in recent years at large schools, especially those in the top-tier for CS. This type of growth is part of the normal cycle for CS and is expected anytime that the public perceives that the job market for computing related fields is strong. It is unclear how much of this growth is currently seen on other campuses. The purpose of this BoF session is to discuss what educators at smaller campuses, and particularly liberal arts schools, are currently seeing in regards to enrollment in CS. This information could be of particular interest for those at schools considering cutting programs for economic reasons or those adjusting the number of faculty lines.	Trends in CS enrollment at small, liberal arts institutions (abstract only)	NA:NA:NA:NA	2018
Monika Sobolewska	As the theme of the conference indicates, computing is changing and so is its pedagogy. In the meantime, many computer science departments teach computer fluency service courses required by their universities, colleges, or other departments, in which the content of the course becomes highly challenged by institutional constraints (e.g. class size, university computer literacy requirement, etc.). This birds-of-a-feather is designed to gather educators who have been teaching fluency courses or may be teaching such courses in the future, so that they can share their experiences, learn from one another, and discuss the most effective ways of affecting change and delivering the content they deem most appropriate.	Logistics of moving from computer fluency to computational thinking (abstract only)	NA	2018
Bonnie K. MacKellar:Margaret Menzin:Marc L. Smith:Tammy VanDeGrift	There has been an explosion of interest in bioinformatics, medical informatics, and healthcare informatics in the past decade. As a result, many computer science departments are developing courses or degree programs in bioinformatics and/or health informatics. This session is aimed at faculty who are teaching, or developing courses that tie together computer science and biology, medicine, or healthcare. The discussion leaders all have experience teaching courses in healthcare informatics and/or bioinformatics within computer science departments. We will share our expertise and experience on such issues as effectively team teaching interdisciplinary courses, developing case studies and projects, and developing links with biologists and clinicians. Some of the questions we might tackle: What types of courses should be included in degree programs? What role do curricular standards, especially in healthcare, play? What topics belong in interdisciplinary bioinformatics courses? How do we cope with students who may have differing backgrounds and prerequisites? The hope is that we can create an informal network for sharing ideas which will persist after the session. To this end, we will also discuss ways for maintaining a community, perhaps as a mailing list, blog, or website.	Computer scientists put the informatics into bio, health, and medical informatics education (abstract only)	NA:NA:NA:NA	2018
Gregory W. Hislop:Heidi J.C. Ellis:Darci Burdge:Sean Goggins:Lori Postner:Stoney Jackson	Humanitarian Free and Open Source Software (HFOSS) projects provide a real-world application with an approachable and welcoming community for both faculty and students. Many faculty members are excited by the prospect of their students contributing to HFOSS. They perceive it as an opportunity to engage students, regardless of race or gender, in projects that have societal impact. However trying something new in the classroom though can be daunting, and many barriers to entry exist. Locating an appropriate project, trying to figure out how to incorporate a dynamic, real-world project into the curriculum and learning how to interact with the project's community each present their own set of challenges. This BOF provides a gathering place for faculty who are interested in student participation in FOSS or HFOSS. The discussion will include an overview of an NSF-funded project, OpenFE. The goal of OpenFE is to develop faculty expertise in working with HFOSS projects and to develop curriculum materials that support faculty members in bringing this approach into their classrooms. The members of the OpenFE team will discuss plans for this grant and welcome both novices and experienced contributors to join us and provide feedback.	Encouraging faculty & student involvement in humanitarian free and open source software (HFOSS)(abstract only)	NA:NA:NA:NA:NA:NA	2018
Frances P. Trees:David Reed:Tammy Pirmann	As part of its commitment to developing a strong community of computer science educators, the Computer Science Teachers Association (CSTA) supports the development of regional CSTA chapters. A CSTA chapter is a local branch of CSTA designed to facilitate discussion of local issues, provision of member services at the local level, and to promote CSTA membership on the national level[1]. This BOF will provide a platform for the discussion of CSTA chapter formation and for the sharing of new resources to help chapters create dynamic and meaningful chapter activities.	CSTA chapters: supporting your local computer science educators (abstract only)	NA:NA:NA	2018
Ann Irvine:Darakhshan Mir:Michael Hay	We will discuss how to better organize as graduate students and postdoctoral researchers seeking a career in liberal arts colleges (LACs). The BoF will bring together those who are interested in a career path to a LAC but do not have reliable advice and mentorship in their home departments and often turn out to be the only person in their department with such a career choice. Additionally, several people who have recently made a successful transition from graduate school to new faculty positions will attend the BoF.	How PhD students at research universities can prepare for a career at a liberal arts college (abstract only)	NA:NA:NA	2018
Diane A. Baxter:Elizabeth Simon	Computing pervades students' academic and personal lives. Increasingly the core concepts of computational thinking are required for success in other fields. Should CS Principles become a general education requirement for all freshmen? This BOF will provide a platform for the discussion of whether or not the various courses taught as CS-0, Introduction to CS, or CS Principles have clearly defined a set of core competencies that should be required of all undergraduates. Do the national initiatives around computational thinking and CS 10K herald consensus or controversy around those core competencies? Discussion will include a look at one course that has been adopted as a general education requirement; its core concepts, textbooks and documented learning outcomes; and the institutional rationale for its acceptance as a general education requirement-filling course. Related to this question is a proposed new CS Principles AP exam that is currently in development. The BoF will describe how the course above relates to the CS Principles AP Exam and the core competencies described through the CS Principles project. Discussion leaders will describe the value of the CS Principles AP initiative in gaining political and administrative support for introducing the course into high schools. They will share some initial data illustrating the wide variety of challenges encountered while introducing the same course as a pre-AP course into regional high schools.	Computer science principles: necessary for ALL students' success (abstract only)	NA:NA	2018
Douglas Baldwin	The pending revision of the ACM/IEEE CS curriculum guidelines for computer science, and the continuing broadening of the computing disciplines, among other considerations, make now a good time to review the role of mathematical reasoning in computing education. This birds-of-a-feather session provides an opportunity for people interested in mathematics and its role in computing education to reflect on and discuss the future of mathematical reasoning in our curricula, guided by the question of whether it should be broader than it has been, narrower, or if it is just right as it is.	Broadening mathematical reasoning in computing (abstract only)	NA	2018
John Britton:Tim Berglund	Professional software developers depend on version control every day and that dependency will continue to grow as advances in version control technology continue. Students with experience using version control are more prepared and qualified to work in industry. We should expose students to version control early in their training not only as an additional skill but also as a tool to improve the learning experience. Version control can be leveraged to greatly improve assignment submission, grading, and feedback systems. In this session we will discuss strategies for incorporating the use of version control in the classroom as well as best practices for individual and group work submission, grading and feedback.	Using version control in the classroom (abstract only)	NA:NA	2018
Debra Lee Davis:Kip Irvine:Dave Berque:Janet Davis:Brian Dorn:Matt Jadud	With a growing awareness of the importance of Human Computer Interaction (HCI) and User Experience (UX) Design and Research in industry, many departments are examining ways to integrate this topic into their curriculum. What are the best ways to do this? Should HCI and UX be integrated into existing courses such as event-driven programming or mobile computing? Or should it be a separate course that integrates visual design, psychology and ergonomics? How important is this topic to students looking for internships and entry-level jobs? At what levels should these topics be taught in the curriculum? This is important as there is a growing demand in industry for User Experience specialists due to an increased focus on software quality and product success. A major complaint of employers is that this skill is lacking in many college graduates. Teaching computing students how to incorporate UX into the design and development process helps to address this critical need. This BOF will let participants share their ideas and learn from their peers. This is particularly relevant as the HCI Knowledge Area of the IEEE/ACM CS Curriculum 2013 is currently being developed. In fact, the chair of the HCI Knowledge Area (Sally Fincher) is seeking real examples of how HCI is taught in curricula across a variety of institutions and settings. After the BOF, we will share a summary of our BOF discussion with the chair.	Including HCI and user experience (UX) methodologies in computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA	2018
Yolanda Jacobs Reimer:Christopher Hundhausen:Phillip Conrad	Studio-based learning (SBL), the centerpiece of architecture and fine arts education for over a century, has become increasingly attractive to computing educators. SBL can be conceptualized as an iterative process of solution refinement that relies heavily on shared physical space and design critiques. This session will explore ways in which CS educators can transition aspects of traditional or face-to-face SBL to an online learning environment. We will discuss the potential for online studios, how they might look and function, and how their effectiveness in promoting student learning might be gauged. As more and more CS courses assume an online presence, we seek to understand both the opportunities and the limitations associated with conducting critical studio work in a digital medium.	Taking studio-based learning online (abstract only)	NA:NA:NA	2018
Helen H. Hu:Clifton Kussmaul:Matthew Lang	POGIL activities are carefully designed to guide students to discover and explore concepts while encouraging students to practice process skills (e.g., team work, leadership and problem solving). Many college instructors have written POGIL activities for CS 1, CS 2, Software Engineering and other upper division CS classes (http://www.cspogil.org). High school teachers are also writing POGIL activities for the AP Principles course. This BOF is an opportunity for educators to share POGIL activities and ideas for improving group dynamics and encouraging reflection. We welcome everyone interested in learning more about POGIL and will provide information on regional POGIL workshops.	Using POGIL activities in computer science classes (abstract only)	NA:NA:NA	2018
Richard Weiss:Michael E. Locasto:Jens Mache:Blair Taylor:Elizabeth Hawthorne	We see teaching cybersecurity through hands-on, interactive exercises as a way to engage students. Some of the exercises that we have seen require significant preparation on the part of the instructor. Having a community makes it easier to share exercises, knowing what works and what problems students and instructors have encountered. The purpose of this BOF is to bring together instructors who have used hands-on exercises and those who would like to. We recognize that few CS programs can afford new required courses, so we would be discussing ways to integrate security-related exercises into existing ones. This could include networking, OS, computer architecture, programming languages, software engineering and algorithms. Recent hiring forecasts indicate that there is a tremendous need for skilled information security experts. This was evident at the last National Initiative for Cybersecurity Education (NICE) conference at NIST, and from sponsors of the Collegiate Cybersecurity CCDC. Security will be one of the core areas in the ACM/IEEE COMPUTER SCIENCE 2013 Curricula. We think that it is particularly important to share stories from the classroom (what worked and what didn't), discuss ethical hacking, and discuss how to teach analytical skills. We also plan to discuss our own experiences, practices and ongoing efforts (e.g., our teaching experiences, the SISMAT program, Security Injections, EDURange and the dissemination of infosec interactive exercises). SISMAT includes a two-week summer intensive program based on the "Hacker Curriculum" and a combination of research and internship in cyberbersecurity for undergraduates.	Teaching security using hands-on exercises (abstract only)	NA:NA:NA:NA:NA	2018
Nick Senske	Much has been said about the need to teach computer programming and the fundamental ideas of computer science in STEM education. Initiatives aimed at this audience propose new requirements, curricula, tools, and teaching methodologies to encourage widespread computational literacy. But what is being done in non-STEM disciplines to promote literacy? The goal of this panel is to open a discussion about advancing computer science education within the digital arts and humanities and how this might relate or combine with similar efforts in STEM. What can members of the digital arts and humanities community learn from each other about starting new curricula and teaching these subjects, and what can be learned and borrowed from STEM education? To begin the discussion, we will present a report on a computational methods course we developed for beginning architecture students and how this has led to an ongoing collaboration with our computer science department.	Computational literacy for everyone: opening a dialogue between STEM and the digital arts and humanities (abstract only)	NA	2018
Joanne F. Selinski:Kathie A. Yerion	Many institutions offer either a Bachelor of Science or a Bachelor of Arts degree program to computer science majors, often depending on what type of college or department houses the major. However, an increasing number of institutions have created dual degree tracks wherein students may choose to pursue either a BS or a BA, with a different set of requirements for each and possibly different credentialing as well. This BOF provides a forum for educators and administrators who currently offer dual degree options to share their experiences with those who are considering adding a second track. Issues of interest such as requirements within and outside the major, enrollment, accreditation, student outcomes, and possibly different career options may be discussed.	Dual degree tracks for computer science majors (abstract only)	NA:NA	2018
Richard E. Ladner	Approximately 10% of computer science and engineering majors have a disability of some kind. Those with disabilities are more likely to drop out of the major than those without disabilities. This BOF will bring together those who are interested in improving the success of these students. Strategies will be shared among the participants of the BOF to help each other do a better job of including these students in our classes and research projects.	Universal access to computing education (abstract only)	NA	2018
Richard A. Brown:Joel C. Adams:David P. Bunde:Jens Mache:Elizabeth Shoop:Michael A. Smith:Paul F. Steinberg:Matthew Wolf	The emerging CS2013 Curriculum recommendations call for greatly expanded emphasis on parallel and distributed computing (PDC), in response to recent industry changes. CS2013's PDC knowledge units relate to many undergraduate courses. Participants in this BOF will consider responses to CS2013 PDC recommendations that involve multiple undergraduate CS courses at an institution, as opposed to approaches that concentrate PDC topics primarily within a single course. This sharing and brainstorming session will bring together: people having experience with a multi-course or multi-level approach to teaching PDC; people contemplating a multi-course approach to introducing PDC material; and people wishing to provide and/or hear rationale for a multi-course strategy for teaching PDC.	Multi-course approaches to curriculum 2013's parallel and distributed computing (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA	2018
Michael P. Rogers	We have heard much discussion, in recent years, about various contexts for teaching Computer Science. One that does not get a lot of attention, but frankly deserves more, is the notion of using word games -- in which language plays a predominant role -- to teach Computer Science. There is a plethora of clever and simply fun games that can be used to illustrate almost any concept that arises in CS1 and CS2. We would like to start a conversation with other SIGCSE attendees who are interested in these very entertaining, algorithmically stimulating games, and see what techniques they use, and what successes they have had, in incorporating them into the classroom.	The joy of word games: or, putting the text back into context (abstract only)	NA	2018
Julian Mason:Zachary Dodds:William D. Smart	After many years, the robotics research community has settled on standard middleware: the Robot Operating System (ROS). This standard presents a great opportunity for educational robotics. This hands-on workshop will engage participants in ROS-based curricula for CS 02 and advanced undergraduates. The workshop will highlight how ROS has simplified, enabled, and expanded flipped robotics curricula in CS 02. Our advanced materials show how ROS enables easy access to the robotics research community, permitting larger and more research-representative projects. This workshop is two long hands-on sessions punctuated with short reports from the presenters' experience. Participants will implement the first two assignments of our CS 2 curriculum. http://www.cs.hmc.edu/dodds/ROSatSIGCSE2013.	ROS at every level: using the robot operating system in CS 0, 1, 2, and beyond (abstract only)	NA:NA:NA	2018
Jason O. Hallstrom:Joe Hollingsworth:Joan Krone:Murali Sitaraman	Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can they use a development environment for "hands-on" experimentation with reasoning? Is this possible without displacing existing content? The answer is a resounding yes "from the experiences of professors at several institutions" but it takes the right set of pedagogical principles, reasoning tools, and hands-on exercises. This laboratory will help educators transfer the excitement of learning how to apply mathematical reasoning in building high quality software, by adopting one reasoning concept at a time. The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught -- from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials. Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. All participants are required to bring a laptop to participate in the computer-assisted exercises.	Making mathematical reasoning fun: web-integrated, collaborative, and "Hands-On" Techniques (abstract only)	NA:NA:NA:NA	2018
Wanda Dann:Stephen Cooper:Donald Slater	This workshop is designed to offer a hands-on introduction to Alice 3.1 (now out of beta), as used in introductory courses in high school and early college levels. The focus of this workshop is on using program visualization for introducing fundamental concepts of programming. The introductory features of Alice 3.1 will be presented in an active-learning style. Although some comparisons between Alice 2.x and 3.1 will be included, the content of the workshop does not assume familiarity with Alice 2.x. Participants will receive latest 3.1 update and sneak peek at early textbook chapters. Attendees are expected to bring their own standard (no netbooks or tablets, please) laptop with a mouse (2-button).	Alice 3.1 (abstract only)	NA:NA:NA	2018
Semmy Purewal	Khan Academy recently announced that they will soon be teaching introductory Computer Science topics with the Processing.js language and an interactive, web-based code editor. At UNC Asheville, we have been using a similar pedagogical approach for over a year. Specifically, we have integrated Processing.js into our introductory course for non-majors by building an open-source, web-based editor which makes it easy for students to edit, save and share their Processing.js sketches. This workshop offers a hands-on introduction to Processing.js and our editor. Participants will also be given an overview of the programming module in Creative Computing, our recently re-imagined CS0 course. Curious individuals with a laptop, a modern web-browser and some basic programming experience are welcome.	Creative computing: introductory programming concepts with processing.js (abstract only)	NA	2018
Tim Bell:Daniela Marghitu:Lynn Lambert:Paul Curzon	You've been asked to talk to an elementary or high school class about Computer Science, but how can you ensure that the talk is engaging? Or perhaps you're trying to introduce a concept from Computer Science to a school group, but you want a fun way to get the class engaged. This workshop is a hands-on introduction to Computer Science Unplugged (www.csunplugged.org), a widely used set of kinesthetic, fun activities that cover many core areas of computer science without using high technology. We will explore how to use the activities in a variety of situations, including using them with robotics activities, school outreach, and computer clubs. Attendees will receive a CD with a copy of a handbook for teachers and a collection of videos demonstrating the activities. Laptops are optional.	Computer science unplugged, robotics, and outreach activities (abstract only)	NA:NA:NA:NA	2018
Andrea Danyluk:Nancy Amato:Ran Libeskind-Hadas:Lori Pollock:Susan Rodger	Involving undergraduates in Computer Science research has many benefits. It's an exciting way for students to gain independent problem solving skills. It exposes them to interesting projects and the research process, thereby keeping them in computer science, even encouraging them to go to graduate school. And especially in primarily teaching institutions, it's a rewarding way for faculty to remain engaged in their own research. In this workshop we will (1) present best practices for mentoring undergraduate research, (2) equip participants with resources for mentoring their own students, and (3) further develop (1) and (2) through breakout sessions on concerns of interest to attendees. For more, please see www.cs.williams.edu/~andrea/SIGCSE2013. This workshop is intended for all college level computer science educators. Laptop Optional.	Making the most of undergraduate research (abstract only)	NA:NA:NA:NA:NA	2018
Guy-Alain Amoussou:Suzanne Westbrook	This interactive workshop focuses on the National Science Foundation grant proposal review process. By a close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The topics for the workshop include: the proposal review process from submission to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of good proposals; the format of the typical review panel process; how to volunteer to review. The workshop uses a structured guided-interactive approach to lead participants through each topic by introducing related issues, engaging participants in group exercises designed to explore and share their understanding of the issues, and then providing some expert opinion on these issues. Faculty members who wish to better understand the NSF review process or seek funding in support of undergraduate computing education are encouraged to attend. Participants will include novice proposal writers and those with more experience who seek to improve their proposal writing or reviewing skills.	Learn about effective proposal writing via the review process (abstract only)	NA:NA	2018
Richard A. Brown:Elizabeth Shoop:Joel Adams	Map-reduce, the cornerstone computational framework for cloud computing applications, has star appeal to draw students to the study of parallelism. Participants will carry out hands-on exercises designed for students at CS1/intermediate/advanced levels that introduce data-intensive scalable computing concepts, using WebMapReduce (WMR), a simplified open-source interface to the widely used Hadoop map-reduce programming environment. These hands-on exercises enable students to perform data-intensive scalable computations carried out on the most widely deployed map-reduce framework, used by Facebook, Microsoft, Yahoo, and other companies. WMR supports programming in a choice of languages (including Java, Python, C++, C#, Scheme); participants will be able to try exercises with languages of their choice. Workshop includes brief introduction to direct Hadoop programming, and information about access to cluster resources supporting WMR. Workshop materials will reside on csinparallel.org, along with WMR software. Intended audience: CS instructors. Laptop required (Windows, Mac, or Linux).	CSinParallel: using map-reduce to teach parallel programming concepts across the CS curriculum (abstract only)	NA:NA:NA	2018
Richard Weiss:Vincent Nestler:Michael E. Locasto:Jens Mache:Brian Hay	This workshop is intended for anyone who would like to use hands-on exercises in cybersecurity for a variety of classes including Networking, OS, Computer Security and Software Engineering. It has received increased attention nationally in the proposed ACM/IEEE CS2013 Curricula Guidelines. The goal of this workshop is to provide faculty with varied backgrounds (including none) in this area with some tools and interactive exercises to facilitate incorporating this knowledge area into their curriculum. We believe that it is important that students develop analytical skills, thus we include an introduction to EDURange1 and the Hacker Curriculum principles: (1) understanding failure modes and (2) seeing across or through layers of abstraction according to a particular scenario. We will guide attendees through exercises tailored to their level and interests. The exercises will include port scanning and setting up a firewall. These can be done at a range of levels from beginner to advanced. We will include an introduction to tools for packet inspection, which is an important part of analysis. Attendees will receive accounts on the RAVE2 with exercises that they can take back and use immediately with their classes. RAVE provides a number of VMs pre-configured for the exercises. RAVE is also a general purpose technology for other hands-on exercises. Laptop required.	Hands-on cybersecurity exercises and the rave virtual environment (abstract only)	NA:NA:NA:NA:NA	2018
Stephen H. Edwards	Android has seen increased use in introductory CS courses to motivate and excite students about their programming assignments, but using the standard Android libraries as a GUI platform in CS2 presents numerous challenges and using it in CS1 is nearly impossible. This workshop introduces participants to Sofia, the Simplified Open Framework for Innovative Android Applications, developed by the Web-CAT team at Virginia Tech. Sofia abstracts out many of the advanced concepts normally required to develop interesting applications, using a unique approach to event handling, binding GUI elements to Java code, and user interaction. The goal is to allow students to focus entirely on using Java programming skills to solve problems in the application domain, instead of writing monotonous glue code typically required to construct an Android application. Laptop optional.	Re-imagining CS1/CS2 with Android using the Sofia framework (abstract only)	NA	2018
Brian Harvey:Daniel D. Garcia:Tiffany Barnes:Nathaniel Titterton:Daniel Armendariz:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	This workshop is for high school and college teachers of general-interest ("CS 0") CS courses. It presents the programming environment used in two of the five initial AP CS Principles pilot courses. SNAP! (Build Your Own Blocks) is a free, graphical, drag-and-drop extension to the Scratch programming language. Scratch, designed for 8-14 year olds, models programs as "scripts" without names, arguments, or return values. SNAP! adds support for older learners (14-20) by adding named procedures (thus recursion), procedures as data (thus higher order functions) structured lists, and sprites as first class objects with inheritance. Participants will learn SNAP! through discussion, programming exercises, and exploration. See http://snap.berkeley.edu for details. Laptop required.	SNAP! (build your own blocks) (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Tommy MacWilliam	This workshop, aimed at instructors of introductory or intermediate courses, introduces participants to version control via two popular source code management (SCM) tools: SVN and Git. Not only is proficiency with SCM tools an invaluable skill for aspiring software developers, but version control also allows students to collaborate effectively on projects. Participants will complete hands-on activities using distributed and centralized SCM tools, learn how to integrate version control into curricula, and discuss the pros and cons of various hosting solutions. Participants will also be introduced to version50, an open-source abstraction layer that provides a common, simplified interface for SCM tools aimed at making version control accessible to novice programmers. Laptop required.	Incorporating version control into programming courses (abstract only)	NA	2018
Ira Greenberg:Deepak Kumar:Dianna Xu	This workshop showcases a new approach to teaching CS1 using computational art as a context. Participants will be introduced to the Processing programming language and environment, designed for the construction of 2D and 3D visual forms. Its IDE is light-weight, but well-suited for the rapid proto-typing needed for dynamic visual work. We hope to bring the excitement, creativity, and innovation fostered by Processing into the computer science education community. Instructors of all experience levels are welcome. Hands-on portion of the workshop will enable participants to explore Processing and create visual effects on the fly. Course materials and handouts detailing the software, curriculum, and teaching resources will be given out. All participants will need to bring their own laptops. Supported by NSF Awards DUE-0942626 and CCF-0939370.	Computational art and creative coding: teaching CS1 with processing (abstract only)	NA:NA:NA	2018
Daniel D. Garcia:Brian Harvey:Tiffany Barnes:Nathaniel Titterton:Dan Armendariz:Luke Segars:Eugene Lemon:Sean Morris:Josh Paley	The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors. It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation. Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum. In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.	AP CS principles and the beauty and joy of computing curriculum (abstract only)	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Matt Bishop:Blair Taylor:Elizabeth K. Hawthorne:Diana Burley:Siddharth Kaza	The CS 2013 curriculum draft includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in CS0 and CS1 is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0 and CS1. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0/CS1 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance. Laptop recommended.	Introducing secure coding in CS0 and CS1 (abstract only)	NA:NA:NA:NA:NA	2018
Susan H. Rodger:Steve Cooper:Wanda Dann:Dwayne C. Brown, Jr.:Jacobo Carrasquel	This interactive workshop will present the new features of Alice 2.3, and show how to integrate Alice 2.3 into multiple disciplines in middle school and high school. Participants will get hands-on experience with working with new Alice models and creating Alice projects. The workshop will also review curriculum materials and discuss mapping Alice to CSTA computer science standards. The curriculum materials presented could be used in middle school or high school in a variety of disciplines, or in college in a pre-CS 1 course. The target audience is middle school and high school teachers, and college faculty providing outreach to K-12 or teaching a pre-CS 1 course. Alice is available for free at www.alice.org. Curriculum materials are available at www.cs.duke.edu/csed/alice/aliceInSchools and at www.alice.org. Laptop required, and two-button mouse recommended.	Experimenting with and integrating Alice 2.3 into many disciplines (abstract only)	NA:NA:NA:NA:NA	2018
Barbara J. Ericson:Christopher Michaud:Nannette Napier:Krishnendu Roy	This workshop will provide details on how to plan and run non-residential computing summer camps for 4th -- 12th grade students. Georgia Tech has been offering computing summer camps since 2004. These camps are financially self-sustaining and effective. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor. Georgia Tech has also helped start other computing camps at eleven other colleges and universities in Georgia. The workshop will include forms, a timeline, sample agendas, sample flyers, budget plans, a planning checklist, suggested projects, surveys, pre and post-tests, evaluation results, lessons learned, and more. Laptop Recommend.	How to plan and run computing summer camps for 4th-12th grade students (abstract only)	NA:NA:NA:NA	2018
Joanne McGrath Cohoon:James P. Cohoon:Seth Reichelson:Susan Horwitz:Laura Reasoner Jones	Four research-supported teaching methods can make your computing courses more effective through improved student learning, comprehension, and motivation. This workshop introduces and provides experience with those four methods: 1. Collaborative learning, e.g., pair programming or peer led team learning; 2. Examples and exercises in contexts that appeal to a broad range of students; 3. Computing skills developed through practice; 4. Developing spatial rotation abilities. The presenters are among leading researchers and award-winning practitioners. J. McGrath Cohoon: Senior Research Scientist at the National Center for Women & IT (NCWIT); Associate Professor of Science, Technology, and Society at the University of Virginia; conducts nationwide empirical studies of gender and computing. Jim Cohoon: Computer Science professor at the University of Virginia; IEEE Computer Science highest education award recipient, and author of award-winning introductory textbooks. Susan Horwitz: Professor of Computer Sciences at the University of Wisconsin - Madison; lead PI on an NSF grant that pioneered and evaluated use of Peer-Led Team Learning in introductory Computer-Science courses; recipient of University teaching awards. Seth Reichelson: award-winning high school Computer Science teacher; nationally recognized for his approach to high school computing courses in general and AP Computer Science in particular. Laura Jones: teaches in a public elementary school, writes frequently about girls and STEM careers, founded and directed the GEMS clubs (Girls Excelling in Math and Science) in 1995. Workshop participants will learn from these presenters how to employ the pedagogical methods for engaging and retaining diverse students in computer science courses. .A laptop is optional.	Pedagogy for engaging diverse students in computing: four effective methods (abstract only)	NA:NA:NA:NA:NA	2018
Ralph Morelli:David Wolber:Shaileen Pokress:Franklyn Turbak:Fred Martin	The CS Principles Project is an NSF-funded initiative to develop a breadth-first advanced placement (AP) course in computer science. App Inventor is a visual, blocks-based programming language that makes sophisticated computing concepts accessible to a broad range of students. This hands-on workshop, aimed at high school and undergraduate teachers, will introduce participants to lessons, homework exercises, project assignments, and assessment materials (quizzes, grading rubrics) that can be used in an App Inventor-based CS0 course. Participants will develop simple Android apps, using devices provided by the workshop, and will use them in the context of lessons and assignments that fit within the CS Principles framework. A laptop is required. For further details see: http://is.gd/sigcse2013appinv.	Teaching the CS principles curriculum with App Inventor (abstract only)	NA:NA:NA:NA:NA	2018
Mark C. Lewis:Konstantin L√§ufer:George K. Thiruvathukal	Various hybrid-paradigm languages, designed to balance compile-time error detection, conciseness, and performance, have emerged. Scala, e.g., is interoperable with Java and has become an early leader in adoption, especially in the start-up and open-source spaces. Workshop participants experience Scala's value as a teaching language in the CS curriculum through four lecture-lab modules: In CS1, the read-eval-print loop and simple, uniform syntax aid programming in the small. In CS2, higher-order methods allow concise, efficient manipulation of collections. Advanced topics include domain-specific languages, concurrency, web apps/services, and mobile apps. Laptop recommended with Scala installed.	Using Scala strategically across the undergraduate curriculum (abstract only)	NA:NA:NA	2018
Forrest Stonedahl:David Weintrop:Paulo Blikstein:Christine Shannon	This workshop, intended for CS educators from middle school through undergrad, will introduce participants to NetLogo. NetLogo is an easy-to-learn multi-agent language and integrated modeling environment in widespread use in classrooms (and research labs) globally. This hands-on tutorial will highlight computational modeling in the natural and social sciences, tie in core computer science concepts, and discuss how to promote student thinking about decentralized systems. The workshop will draw on the presenters' own experiences teaching courses on computational science, computational art, theory of computation, and educational outreach events. Participants will learn first-hand how NetLogo can enrich a variety of computing courses. NetLogo runs on Mac/Linux/Windows. Laptop required.	NetLogo: teaching with turtles and crossing curricular boundaries (abstract only)	NA:NA:NA:NA	2018
Kate Lockwood:Jeff McCall:Barbara Beckmeyer:Marc Oehlman	The Inverted Classroom is an exciting pedagogical technique where more passive information assimilation activities (e.g. lectures) are assigned as homework and class time is reserved for active applied problem solving and group activities. With current technology, instructors wishing to implement inverted classroom have a variety of options to create engaging and accessible learning modules. In this workshop, we will provide an overview of inverted classroom philosophy and some initial data from successful pilots of the inverted classroom. Participants will work in small groups to develop small inverted classroom activities using software and technology provided by the presenters. We will wrap up with presentations from the groups and a discussion about assessment. Laptop Recommended.	Implementing the inverted classroom (abstract only)	NA:NA:NA:NA	2018
Charles Peck:Tom Murphy:Skylar Thompson:Aaron Weeden	LittleFe buildout events are training and infrastructure opportunities for teams of accepted faculty and students from educational institutions across the United States to assemble LittleFe educational appliances (http://littlefe.net) and learn to use them in the classroom to teach parallel programming, cluster computing, and computational/data enabled science & engineering (CDESE). The buildout consists of participants assembling their LittleFe unit from a kit; installing the Bootable Cluster CD (BCCD, http://bccd.net) software on it; learning about the curriculum modules available for teaching parallel programming, High Performance Computing (HPC) and CDESE; and learning how to develop new curriculum modules for the LittleFe/BCCD platform.	LittleFe buildout workshop (parts 1 & 2): hardware, software, and curriculum for parallel and distributed education (abstract only)	NA:NA:NA:NA	2018
Daniel Zingaro:Cynthia Bailey Lee:John Glick:Leo Porter:Beth Simon	We introduce participants to Peer Instruction (PI): an active learning technique shown to be effective across the CS curriculum. In PI, Students work together to exchange perspectives and answer challenging conceptual questions, and are supported by short teaching segments. We will introduce and motivate PI, demonstrate its use in combination with a clicker system, and describe ways to encourage student preparation for PI classes. Pre-lecture preparation may include reading quizzes or exploratory homeworks, two topics of recent interest in the computing research literature. We will explore this literature as part of our tour of a complete PI course: from pre-lecture, to lecture, to the course at large. Participants will work in groups to develop new PI questions addressing challenges to their students' learning, and discuss numerous pedagogical benefits conferred through PI. Instructors interested in increasing engagement in any CS course may attend. Participants are encouraged to bring current lecture materials. Laptop optional.	Peer instruction in CS: introduction and recent developments (abstract only)	NA:NA:NA:NA:NA	2018
Stan Kurkovsky	Implications of using robotics and mobile computing in the curriculum extend far beyond motivation and engagement because skills in these areas can help students be more successful at the workplace. Our approach to teaching both subjects in one course focuses on using Sphero, a small ball-shaped wireless robot that can be controlled and programmed using an Android or iOS device via a Bluetooth link. Workshop participants will experience several hands-on projects that are offered to student in an Android+Sphero course, which culminates in a robot racing competition. This workshop is intended for high school and college faculty interested in mobile computing and/or robotics courses, projects, or activities. More information is available at http://www.cs.ccsu.edu/~stan/sigcse13/. Laptop recommended.	Android+Sphero: teaching mobile computing and robotics in a single course (abstract only)	NA	2018
Jennifer Burg:Susan Reiser	In this workshop, participants will create and manipulate digital audio using open source software (Audacity, PureData, Processing's Minim Beta, Octave, and C/C++). The cross-disciplinary digital audio content links music, engineering, physics, mathematics, and computer science and was developed for and test-taught in computer science courses. Additionally, participants will access and use the freely available online videos, tutorials, and textbook that can be incorporated into their classrooms. The online content's development was funded by the National Science Foundation CCLI Grant, "Linking Science, Art, and Practice Through Digital Sound." Exercises that engage students in creative computational problem solving for sound and music applications will also be discussed. Laptops equipped with the open source applications mentioned above are strongly recommended but not required.	Computer science via digital sound and music: a hands-on introduction to open source tools and new curriculum material to introduce computer science concepts (abstract only)	NA:NA	2018
Viera K. Proulx	While professional programmers report on the advantages of test-first design discipline, typical introductory programming courses do not require that students design comprehensive test suites for their programs. For the past ten years we (and a number of our adopters in a variety of settings) have used our tester library to support novice programmers in adopting test-first design. This workshop illustrates hands-on the benefits of test-first pedagogy on a series of typical introductory programming assignments and shows how the focus on testing fosters a deeper understanding of fundamental concepts of object-oriented program design. The workshop prepares the participants to adopt test-first design approach in their introductory (and advanced) Java-based courses. The tester library with tutorials, samples, and all downloads is available at: http://www.ccs.neu.edu/javalib/Tester and https://github.com/TesterViera/JavaLibTester/	Test-first design in introductory Java programming (abstract only)	NA	2018
Michael J. Jipping:Acshi Haggenmiller:Matthew Koster:Eric Ostrowski	Computer and network security are important topics discussed in many places in the Computer Science curriculum. Security issues are difficult to experiment on in experiential based courses. Attacks on system security cannot be demonstrated on live campus networks. This workshop will demonstrate and experiment with several security attacks in a safe, sandbox-based virtual environment. We will begin two easy demonstrations and allow each participant to choose from six laboratory experiments. We will wrap up with an ethics discussion. Each experiment includes discussion of the area involved and tips on how to protect against the particular exploit under scrutiny. Each participant will be given a DVD with all exercise materials on it as a takeaway. This workshop is designed for instructors from all levels who want to add security experiments to classes. A laptop is mandatory. Each participant will receive copies of all experiments in the series. These experiments include discussion materials -- introduction to the subject area, exploitation methods, and ways to avoid exploitation -- as well as the procedures used to experience each activity	Experiments with network security threats in a safe, easy sandbox (abstract only)	NA:NA:NA:NA	2018
Barry Wilkinson:Clayton Ferner	Parallel programming has been taught for many years but has recently taken on greater significance with introduction of multicore and many-core processors. Still, most teaching has followed a traditional path of focusing on learning low-level tools such as MPI. This workshop introduces a new educational approach based upon first selecting a computational pattern and then using higher-level tools to create parallel executable code. A pattern programming framework has been developed to create a distributed application that avoids the need to use low-level routines. The framework self-deploys on distributed computers, clusters, and individual multicore computers. Several patterns have been implemented including workpool, pipeline, synchronous and iterative all-to-all, and stencil. The first pattern covered is the widely applicable workpool pattern and other patterns will be introduced. The workshop will describe how the approach can be used in the undergraduate curriculum and will provide hands-on experiences to participants. In our approach, students focus upon computational strategies. Programming is much easier and less likely to be flawed. Each workshop participant will receive a flash drive with all software and documentation pre-loaded for use in the workshop and afterwards in their classes. Laptop required.	Developing a hands-on undergraduate parallel programming course with pattern programming (abstract only)	NA:NA	2018
Suzanne W. Dietrich	LINQ is a declarative language that provides a uniform paradigm for querying relations, objects, and XML. LINQ has from-where-select clauses, similar to SQL, but the clause order is based on its underlying formalism of functional programming. This workshop introduces LINQ from a database perspective with hands-on exercises over relational and XML data using a lightweight IDE for formative feedback. Participants will learn LINQ by experiencing sample exercises for incorporating LINQ into the database curriculum. The intended audience includes anyone with the knowledge of SQL who wants to learn LINQ. After learning LINQ to query relational data, participants will be introduced to XML and how LINQ can also be used to return, query, and transform XML data. Laptop recommended.	LINQ from a database perspective: querying relations and XML (abstract only)	NA	2018
Lynn Andrea Stein	Why is change in academia so difficult? What risks and pitfalls await? How can we approach change so that it does not depend solely on our efforts or end when we are no longer there to maintain it? In this collaborative, interactive workshop, we will explore these questions and craft strategies to create sustainable change in computing curricula. This workshop is for those who want to create curricular change in their home departments, catalyze interdisciplinary curricula, or otherwise inspire innovation in teaching and learning at a scale that goes beyond a single classroom. Prereading (available online) will be expected. The workshop will end with the creation of concrete action plans. Laptop optional.	Catalyzing & sustaining change in computing education (abstract only)	NA	2018
Erik Brunvand:Jennifer (Ginger) Reynolds Alford:Paul Stout	This workshop introduces embedded programming and hardware using Arduino in a creative context to make machines that make drawings. This is a powerful way to introduce programming and physical computing concepts to students from high school to undergraduate and to students who might not normally be intrigued by a computing course. Participants experience this curriculum first hand by using breadboards and electronic components to create circuits that they control programmatically. Using the Arduino C-based software, participants modify and develop code to control light sensors, range finders, pressure sensors, and servos. Provided art materials turn the circuits into mesmerizing contraptions that draw. Laptop required. Arduino and electronic components provided during the workshop. Additional information and materials at www.buildingsteam.org	Drawing machines: exploring embedded system programming and hardware with an artistic flair (abstract only)	NA:NA:NA	2018
Clifton Kussmaul:Helen Hu:Matthew Lang	This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. POGIL is based on learning science, and shares characteristics with other forms of active, discovery, and inquiry learning. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. POGIL has particular potential for CS education. Software development is largely a team-based problem-solving activity, and POGIL helps students to learn from each other and develop problem-solving abilities as well as important team process skills. POGIL has been developed and validated over the last 15 years in a range of STEM disciplines. The workshop consists primarily of hands-on team activities. Participants will work through CS activities and a set of meta-activities to explore POGIL practices and activity structures. Participants will also begin to draft parts of their own activities. More information and materials are available at http://cspogil.org and http://pogil.org, including sample activities for topics in a variety of CS courses. Laptops optional. This material is based upon work supported by the National Science Foundation under grant DUE-1044679.	Using POGIL to help students discover CS concepts and develop process skills (abstract only)	NA:NA:NA	2018
David Ginat:Dan Garcia:William Gasarch	The 'Aha!' phenomenon is familiar to us in many domains including computer science and mathematics (e.g., [2,3,6]). It often stems from an unexpected point of view that illuminates an appealing solution path. The 'Aha' reaction is common to all. Its occurrence is related to the problem-solvers' common perspectives and solution repertoires. Whether more frequent or less frequent, 'Aha' occurrences enrich and strengthen perspectives and repertoires in a stimulating manner.Consider the following Ladder Problem: calculate the number of different ways to climb an N-stage ladder when each step is either one or two stages. One solution perspective may be 'forward reasoning', leading to a systematic accumulation of the possible climbing paths. Another perspective may be combinatorial, leading to the calculation of all the combinations of 1 and 2 that sum to N. A third perspective may be 'backward reasoning', yielding recursive decomposition of the Nth case into the N-1 and N-2 cases.Some problem-solvers may fairly quickly invoke the third perspective and elegantly obtain the Nth Fibonacci number. Others may first follow one of the other perspectives and later realize the illuminating third perspective. The 'Aha' reactions among the solvers may vary. However, both less experienced and more experienced solvers will gain from recognizing the relevance and elegance of the recursive decomposition and enhance their problem-solving repertoires.	Aha! an illuminating perspective	NA:NA:NA	2018
David Ginat	NA	Session details: Aha! an illuminating perspective	NA	2018
Michael Goldweber	NA	Session details: Robotics	NA	2018
Jos√© M. Vidal:Paul Buhler	We present our experiences using the RoboCup soccerserver simulator and Biter, our own agent platform, for the teaching of a graduate multiagent systems' class. The RoboCup simulator and Biter are both described. We argue that the combination of RoboCup and Biter forms an effective platform for the teaching of multiagent systems and the distributed mindset. Results from two semesters using these tools are presented. These results confirm our claims. Finally, we characterize this work within the framework provided by the STEELMAN Draft of the Computing Curricula 2001 initiative.	Using RoboCup to teach multiagent systems and the distributed mindset	NA:NA	2018
Frank Klassner	This paper examines LEGO Mindstorms'‚Ñ¢ suitability as a hardware platform for integrating robotics into an Artificial Intelligence course organized around the agent paradigm popularized by Russell and Norvig. This evaluation discusses how kits and projects based on Mindstorms supported students' exploration of the issues behind the design of agents from three classes in Russell and Norvig's intelligent agent taxonomy. The paper's investigation also examines several popularly-perceived limitations of the Mindstorms package for college-level robotics projects and shows that most of these "limitations" are not serious impediments to Mindstorms' use, while certain other of these "limitations" do indeed present challenges to the platform's use.	A case study of LEGO Mindstorms'‚Ñ¢ suitability for artificial intelligence and robotics courses at the college level	NA	2018
John C. Gallagher:Steven Perretta	In recent years, courses in the design and programming of mobile autonomous robots have become popular at a number of institutions. These activities offer participants experience in a number of practical areas, including computer programming, project management, and technical writing. Further, they provide those experiences in an entertaining manner that may motivate students to pursue additional education in computer science and engineering. By their nature, however, these classes are resource intensive, often limiting access to a few, fortunate students. This paper describes efforts to date in providing a World Wide Web (WWW) based course in autonomous robotics. We will begin with a discussion of how the unique benefits of autonomous robotics courses are enhanced by offering them via the web. We will then discuss our WWW course and some special challenges we encountered during its development. We will conclude with a discussion of future plans and a set of open questions we intend to address.	WWW autonomous robotics: enabling wide area access to a computer engineering practicum	NA:NA	2018
Paul Jorgensen	NA	Session details: New courses	NA	2018
James L. Noyes	There is a change underway in the CS curriculum that reflects a renewed emphasis upon solving applications. Computational science applies solution methods to various scientific models. However, following a computational science approach means more than just using formulas out of a math book. It means having a scientific mindset, understanding and using a scientific approach, thoroughly testing both the theoretical models and the specific implementation of these models, knowing when to use analytic methods instead of numerical ones, using graphics to improve understanding, and knowing how to explain the results of these models to others. This paper addresses what has been learned in designing and teaching a first course in computational science at the undergraduate level.	A first course in computational science: (why a math book isn't enough)	NA	2018
Mary Micco:Hart Rossman	With funding from NSF the Department has set up a stand alone lab for students to learn penetration testing techniques(attack), to harden their networks against these attacks (defense) , and also to gather enough evidence to through careful logging and audit controls to convict a hacker (convict). Linux RedHat 7.1 was used and all the machines were set up as standalone servers in three different subdomains, with 2 perimeter routers and 2 firewalls to allow experimentation with various configurations. In all over 50 software tools were downloaded and tested. Students were screened and asked to sign a disclaimer. They should also have been required to have networking experience. An initial mistake was to run a very minimal server with no services and practically no users. This was not realistic. It made it quick to rebuild systems but much harder to attack.The attacks need to be carefully planned and structured in a specific sequence one at a time, otherwise it becomes very difficult to follow what is going on.	Building a cyberwar lab: lessons learned: teaching cybersecurity principles to undergraduates	NA:NA	2018
Troy Vasiga	There has been much discussion of CS1 and CS2 in computer science education circles. This paper presents a proposal for a course subsequent to CS2 that acts as a "springboard" for students diving into more specialized Computer Science courses at the upper year levels.	What comes after CS 1 + 2: a deep breadth before specializing	NA	2018
Vicki Almstrum	NA	Session details: CS education research	NA	2018
Lynda Thomas:Mark Ratcliffe:John Woodbury:Emma Jarman	This paper reports on the implication of different preferred learning styles on students' performance in the introductory programming sequence and on work in progress on how to accommodate these different styles.Students were given a learning styles preference test and then their preferred learning styles were compared to their performance on the exam and the practical programming part of the introductory programming module. There were significant differences in performance between groups of students.This result could lead one to two possible conclusions. One might be that some students' learning styles are more suited to learning programming than others.An alternative explanation is that our current methods of teaching advantage students with certain learning preference styles. We are at present in the process of testing this second assumption by providing students with a wider range of learning materials. We will then see if student performance is improved by using our current results as a baseline for comparison	Learning styles and performance in the introductory programming sequence	NA:NA:NA:NA	2018
Charlie McDowell:Linda Werner:Heather Bullock:Julian Fernald	The purpose of this study was to investigate the effects of pair-programming on student performance in an introductory programming class. Data was collected from approximately 600 students who either completed programming assignments with a partner or programmed independently. Students who programmed in pairs produced better programs, completed the course at higher rates, and performed about as well on the final exam as students who programmed independently. Our findings suggest that collaboration is an effective pedagogical tool for teaching introductory programming.	The effects of pair-programming on performance in an introductory programming course	NA:NA:NA:NA	2018
Lecia Jane Barker:Kathy Garvin-Doxas:Michele Jackson	As part of an NSF-funded IT Workforce grant, the authors conducted ethnographic research to provide deep understanding of the learning environment of computer science classrooms. Categories emerging from data analysis included 1) impersonal environment and guarded behavior; and 2) the creation and maintenance of informal hierarchy resulting in competitive behaviors. These communication patterns lead to a defensive climate, characterized by competitiveness rather cooperation, judgments about others, superiority, and neutrality rather than empathy. The authors identify particular and recognizable types of discourse, which, when prevalent in a classroom, can preclude the development of a collaborative and supportive learning environment.	Defensive climate in the computer science classroom	NA:NA:NA	2018
David Reed:Doug Baldwin:Michael Clancy:Stuart Hansen:Allen Downey	NA	Session details: Integrating empirical methods into CS	NA:NA:NA:NA:NA	2018
David Reed:Doug Baldwin:Michael Clancy:Allen Downey:Stuart Hansen	Empirical skills are playing an increasingly important role in the computing profession and our society. In addition to being problem-solvers and designers/engineers, computer scientists must also be capable experimenters in order to develop, test, and evaluate complex hardware and software systems. The widespread use of computers as tools for interdisciplinary research also demands a strong grounding in the scientific method.This panel is designed to promote discussion about innovative methods for integrating empirical skills within the traditional computer science curriculum. Each panelist will define a set of core empirical concepts and skills that they see as essential to computer scientists, with a brief rationale for each. In conjunction, they will describe classroom practices that serve to demonstrate the key concepts and/or develop skills they have identified. Sufficient time will be allocated for discussion and contributions from the audience.	Integrating empirical methods into computer science	NA:NA:NA:NA:NA	2018
Amruth Kumar:Timothy Hickey:Linda Wilkens:Aparna Mahadev:Andrew Beiderman:Heidi Ellis	NA	Session details: Internet-centric computing in the CS curriculum	NA:NA:NA:NA:NA:NA	2018
Timothy Hickey:Amruth Kumar:Linda Wilkens:Andrew Beiderman:Aparna Mahadev:Heidi Ellis	Computer Science as an academic discipline should be guided not only by the "state of the art", but also by the "state of the practice"[1]. Over the last few years, Internet/Web has been undeniably the most "high profile" practice of computing. Yet, Computer Science curricula across the country have not kept up with this development - not many schools are offering courses, concentrations and/or majors that identify the Internet/Web as the central principle, and address its issues and needs.In this panel, the panelists will share their experience designing courses and concentrations to address this need, and present their vision for what an Internet-related Curriculum should include: the courses, the technologies, and the overarching themes. The viewpoints presented here are quite diverse: arguing in favor of Internet-related coursework for majors versus non-majors, as a course/minor/major, as an across-the-curriculum theme, as an interdisciplinary endeavor, as an introductory course versus a capstone course, and from the points of view of a community college, four-year institutions and a graduate institution. We hope that these diverse viewpoints will foster vigorous discussion at the panel about the place of Internet-Computing in the Computer Science curriculum, and its design.	Internet-centric computing in the Computer Science curriculum	NA:NA:NA:NA:NA:NA	2018
Andrew Bernat	NA	Session details: Taking advantage of National Science Foundation funding opportunities	NA	2018
Andrew Bernat:Jane Prey	This session will highlight NSF Division of Undergraduate Education programs of interest to college faculty, discussing the requirements and guidelines. It will include a discussion of the characteristics of a competitive proposal and the proposal process.	Taking advantage of National Science Foundation funding opportunities	NA:NA	2018
Stephen Cooper	NA	Session details: Visualization	NA	2018
Herbert L. Dershem:Ryan L. McFall:Ngozi Uti	Linked lists are an important component of the computer science curriculum. JVALL is a software package that provides an animation of linked list operations that is fully compatible with the Java LinkedList class. The animations are driven by a client program that can be either an applet or standalone application. It provides an effective way for students to learn, experiment with, and debug linked list based classes.	Animation of Java linked lists	NA:NA:NA	2018
Ashley George Hamilton-Taylor:Eileen Kraemer	Algorithm animation system design has focused primarily on providing advanced graphical capabilities. However, a fundamental mismatch exists between the needs of instructors and the features of existing algorithm animation systems. This mismatch has reduced the rate of adoption of algorithm animation tools. We describe a system, SKA (Support Kit for Animation), whose design is based on an examination of the tasks performed in the process of discussing algorithms and data structures. SKA attempts to support and enhance time-consuming instructional tasks such as tracing and data structure diagram manipulation, while requiring minimal preparation or authoring time.	SKA: supporting algorithm and data structure discussion	NA:NA	2018
Michael T. Grinder	The FSA Simulator is a Java program created to allow computer science students to experiment with finite state automata. The program is able to simulate both deterministic and nondeterministic automata. Pre-defined automata can be loaded from files or students can create their own. Although this project is similar to others, it has its own unique features. The development history, features, and future plans for this program are discussed.	Animating automata: a cross-platform program for teaching finite automata	NA	2018
Catherine Bareiss	NA	Session details: Curriculum development	NA	2018
J. A. N. Lee	In the Fall of 1999 the Center for Excellence in Undergraduate Teaching (CEUT) and the International Office at Virginia Tech provided a small grant to support the incorporation of international aspects into the Computer Science curriculum. The "Professionalism in Computing" course was chosen as the vehicle for this activity on the grounds that (a) it is a required course of all majors, and (b) the topics within the course were best amenable to international extensions. Through the efforts of the students in the Spring 2000 offering of the course, together with a number of international students, lesson plans for the comparison of non-US aspects of three topics were developed. The topics were Privacy, Freedom of Speech, and Censorship, and the countries covered included Germany, South Korea, China, and Turkey.	Internationalization of the curriculum report of a project within computer science	NA	2018
Alan Fekete:Bob Kummerfeld	This paper presents a curriculum consisting of a collection of subjects to prepare students for a career in "software development" while remaining within the scope normal for a major in a broad liberal arts degree. We describe the principles behind the construction of the curriculum, and contrast it with the more extensive "Software Engineering Body of Knowledge" appropriate in a professional Engineering degree.	Design of a major in software development	NA:NA	2018
Travis Doom:Michael Raymer:Dan Krane:Oscar Garcia	Bioinformatics is a new and rapidly evolving discipline that has emerged from the fields of experimental molecular biology and biochemistry, and from the the artificial intelligence, database, and algorithms disciplines of computer science. Largely because of the inherently interdisciplinary nature of bioinformatics research, academia has been slow to respond to strong industry and government demands for trained scientists to develop and apply novel bioinformatics techniques to the rapidly-growing, freely-available repositories of genetic and proteomic data. While some institutions are responding to this demand by establishing graduate programs in bioinformatics, the entrance barriers for these programs are high, largely due to the significant amount of prerequisite knowledge in the disparate fields of biochemistry and computer science required to author sophisticated new approaches to the analysis of bioinformatics data. We present a proposal for an undergraduate-level bioinformatics curriculum in computer science that lowers these barriers.	A proposed undergraduate bioinformatics curriculum for computer scientists	NA:NA:NA:NA	2018
Donna Tupper	NA	Session details: Gender/diversity	NA	2018
J. McGrath Cohoon	Common departmental characteristics and practices in computer science and biology/life science are compared for 46 departments at 23 Virginia colleges and universities. The goal of this preliminary investigation is to provide additional evidence on how departmental factors can affect the retention of female students.	Women in CS and biology	NA	2018
Antonio M. Lopez, Jr.:Lisa J. Schulte	Most will likely agree that fewer and fewer women are finding their way to completing a bachelor's degree in one of the computing sciences. However, in looking at data collected by the National Science Foundation (NSF) on bachelor's degrees in Computer Science (CS), an interesting anomaly is evident when African American women are viewed as a separate trend. This paper presents some preliminary analysis and suggests that research is needed to better understand this ethnic group that has remained relatively stable in its production of bachelor's degrees in CS.	African American women in the computing sciences: a group to be studied	NA:NA	2018
Joan M. Francioni:Ann C. Smith	Students with visual disabilities face unique challenges in learning to be computer scientists. These challenges can be overcome, however, with the use of specialized software tools and hardware equipment, collectively called assistive technology. In this paper, we discuss the environment we are using for three students with visual disabilities who are starting in our programs this year. This environment includes a collection of commercial assistive technology and a programming tool that we have developed in-house.	Computer science accessibility for students with visual disabilities	NA:NA	2018
Peter R. Turner:Steve Cunningham:Andrew T. Phillips:Angela B. Shiflet:Kris Stewart:Ignatios E. Vakalis	NA	Session details: Undergraduate computational science and engineering programs and courses	NA:NA:NA:NA:NA:NA	2018
Peter R Turner:Angela B Shiflet:Steve Cunningham:Kris Stewart:Andrew T Phillips:Ignatios E Vakalis	This 90-minute panel session will discuss recent and future developments in incorporating Computational Science and Engineering into the undergraduate curriculum. There is a companion session devoted to tools and techniques and so the focus here is on programs and courses.The panelists will demonstrate a clear uniformity of purpose but a wide variety of approaches to increasing the CSE experience of undergraduates in different types of schools.The schools represented vary from large state universities to small private liberal arts colleges and a medium-sized school with a strong engineering bias.The approaches adopted also differ. There are complete programs built largely from existing courses, specific courses that are added to established programs to allow a student to follow an emphasis in CSE. The introduction of CSE into existing programs through faculty advice and education has also been successful.Yet other approaches represented among the panelists are the introduction of multi-disciplinary team-taught project-based courses as a springboard for growing an undergraduate CSE program including undergraduate research projects. The incremental use of small add-on courses to supplement conventional mathematics offerings with some CSE content has also been used successfully.Another approach represented on the panel is the use of a particular vehicle --- in this case graphics and visualization --- to introduce key ideas of CSE into regular parts of the curriculum.The unifying theme of the panel --- the desire to improve undergraduate CSE education will be evident throughout. By presenting a wide variety of approaches to achieve this end, it is hoped that any audience participants who wish to create a CSE thread in their own programs will find some ideas to help them. Some of the practical and political issues will also be discussed in the various contexts.The program for the panel would allow each panelist a maximum of 10 minutes to outline their programs and approaches. The remaining 30 (or more) minutes would then be reserved for general discussion and questions and contributions from the audience.	Undergraduate computational science and engineering programs and courses	NA:NA:NA:NA:NA:NA	2018
Bruce S. Elenbogen:Richard Enbody:Peter B. Henderson:John Laird:Chris McDonald:Richard Nau:Steve Tanimoto	NA	Session details: Mathematics preparation for an undergraduate degree in CS	NA:NA:NA:NA:NA:NA:NA	2018
Bruce S. Elenbogen:John Laird:Richard Enbody:Chris McDonald:Peter B. Henderson:Richard Nau:Steve Tanimoto	Throughout the history of computer science education there has been debate on what should be the appropriate mathematics background for computer science majors. The first computer science instructors were mathematicians and the first curriculums were just modifications of mathematics curriculums. However, as the discipline has grown and matured there has developed several areas of computer science where traditional undergraduate mathematics is not used and traditional mathematics preparation may not be appropriate. Although logic and problem solving skills are valued by the Computer Science community, exactly how many hours of mathematics and what areas of mathematics should be required, needs to be addressed. This panel was convened to discuss this issue from a variety of viewpoints. We hope that discussion will give the listeners new ideas on just what should be the appropriate courses and topics for their institution and program. The panel was chosen to present a wide range of view representing a variety of schools (large and small, public and private, traditional and non-traditional, preparation for the workplace or for disciplines (E-commerce, distributed computing, artificial intelligence, software engineering and graphics) viewpoints (both young and old, industrial and academic).	Mathematics preparation for undergraduate degrees in computer science	NA:NA:NA:NA:NA:NA:NA	2018
James Caristi	NA	Session details: Tutorial on extreme programming	NA	2018
James Caristi	The methodology known as Extreme Programming will be presented, beginning with its reason for existence, philosophy, and a detailed exposition of the twelve practices that define it. There will also be a discussion of its strengths and weaknesses as a software design methodology.	Tutorial on extreme programming	NA	2018
Seth Bergmann	NA	Session details: Pedagogy	NA	2018
Barbara Moskal:Keith Miller:L. A. Smith King	Computer ethics courses differ from technical courses in the manner in which they are taught and assessed. A common assignment in a computer ethics course is to write an essay that addresses a technical dilemma. Computer science faculty typically do not have training or experience in grading essays. The purpose of this paper is to present a scoring rubric that has been successfully used to grade and track students' knowledge development as they progress through a computer ethics course. Although this paper focuses upon a specific rubric, general principles will be emphasized to show how scoring rubrics can be used across different courses.	Grading essays in computer ethics: rubrics considered helpful	NA:NA:NA	2018
Grant Braught:David Reed	We present several introductory computer science laboratory assignments designed to reinforce the use of the scientific method. These assignments require students to make predictions, write simulations, perform experiments, collect data and analyze the results. The assignments are specifically designed to place student predictions in conflict with the observed results, thus producing a disequilibration. As a result, students are motivated to critically examine their simulations, consider their assumptions, and repeat their experiments. These potential benefits of disequilibration are discussed and additional ways to apply disequilibration in computer science education are suggested.	Disequilibration for teaching the scientific method in computer science	NA:NA	2018
Sue Fitzgerald	NA	Session details: Operating systems	NA	2018
David A. Holland:Ada T. Lim:Margo I. Seltzer	This paper presents a new instructional operating system, OS/161, and simulated execution environment, System/161, for use in teaching an introductory undergraduate operating systems course. We describe the new system, the assignments used in our course, and our experience teaching using the new system.	A new instructional operating system	NA:NA:NA	2018
Benjamin Atkin:Emin G√ºn Sirer	In this paper, we describe PortOS, an educational operating system designed to complement undergraduate and graduate level classes on operating systems. PortOS is a complete user-level operating system project, with phases covering concurrency, synchronization, networking and file systems. It focuses particularly on ad hoc and peer-to-peer distributed computing on mobile devices. This paper discusses alternative approaches to operating system projects, and presents our particular design point along with pedagogical justifications.	PortOS: an educational operating system for the Post-PC environment	NA:NA	2018
Mohamad Neilforoshan	NA	Session details: Object-oriented - 1	NA	2018
Steven K. Andrianoff:David B. Levine	Role playing exercises are one of many teaching techniques commonly employed to drive home lessons about computer science. Most of the specific role playing described in the literature, however, relates to algorithm or hardware design. More recently, the Pedagogical Patterns Project has published patterns involving role playing in a general sense. In this paper, we draw on three separate role playing exercises that we have developed to show that scripted role playing is a natural and effective way to introduce concepts of object-oriented design.	Role playing in an object-oriented world	NA:NA	2018
Dung ("Zung") Nguyen:Stephen B. Wong	Designing a two-person game involves identifying the game model to compute the best moves, the user interface (the "view") to play the game, and the controller to coordinate the model and the view. A crucial task is to represent the algorithms used in their highest abstract forms. This can prove to be a difficult and subtle endeavor. It is made easier however by the use of good object-oriented (OO) design principles to help maintain a high level abstract viewpoint during the design process. The state pattern is used to represent the game board and is coupled with the visitor pattern to provide state-dependent, variant behaviors. The min-max algorithm and its variants are implemented as the strategy pattern, which allows flexible and extensible computational capability. Careful analysis is performed to properly abstract the interactions between the model and the view. The command design pattern is used to provide callback services between the model and the view. Leading students through this design process enables them to learn algorithms and architectures that easily scale to full-sized applications.	Design patterns for games	NA:NA	2018
Peter B. Henderson:Vicki Almstrum:Paul De Palma:Orit Hazzen:Kim Potter Kihlstrom	NA	Session details: Women, mathematics, and computer science	NA:NA:NA:NA:NA	2018
Peter B. Henderson:Paul De Palma:Vicki L. Almstrum:Orit Hazzan:Kim Potter Kihlstrom	"‚Ä¶ women embrace the "precision" of mathematics." a quote from panelist Paul De Palma's viewpoint article "Why Women Avoid Computer Science" in the June 2001 CACM. Panelist Kim Kihlstrom notes "‚Ä¶ I got into electrical engineering and then computer science exactly because I love math." Henderson's evidence indicates that women performed better than men in a mathematically oriented first course in computer science, and women felt the course was more beneficial than a traditional programming oriented first course. Regarding a mathematically oriented functional programming course for high schools Kathi Fisler says "Our high school teachers have noticed females preferring this to a conventional curriculum by as much as 5 to 1!"Coincidence, or is there a common thread here? Please join us for the discussion and share your own viewpoints.	Women, mathematics and computer science	NA:NA:NA:NA:NA	2018
Leah H. Jamieson	NA	Session details: Service learning in computer science and engineering	NA	2018
Leah H. Jamieson	Attention is increasing on the need to educate students in areas that extend beyond the traditional technical basis for their field: the Kellogg Commission's mandate for a "scholarship of engagement" [3]; the Engineering Deans Council report's emphasis on teamwork, communication, and the need for students to "understand the economic, social, environmental and international context of their professional activities" [2]; the CSAB Criteria 2000 requirements in written and oral communication and "coverage of social and ethical implications of computing" [1]; the growth of broad IT programs and schools.Service learning offers the opportunity to broaden the educational experience by engaging students in "real-world" projects. However, it also poses new questions: Should students earn academic credit for courses in which a significant portion of their time is spent on "soft" skills? Are students gaining valid technical experience on projects defined by an outside customer rather than by CS&E faculty? How can curriculum structures support projects that aren't constructed to fit within semester boundaries?The panel includes faculty and students from service-learning programs, the chief technical officer for a software company, and a community "customer."	Service learning in computer science and engineering	NA	2018
Charles D. Swanson	NA	Session details: Computational science and engineering: tools and techniques for teaching	NA	2018
Steve Cunningham:Sylvia Clark Pulliam:Charles D. Swanson:Peter R. Turner	The methods of computational science and engineering have been applied to a wide range of problems such as weather forecasting, cosmology, drug design, and car crash simulation. More recently, high performance computers have been applied to problems in biology (e.g., molecular biology, bioinformatics). The development of CSE as an interdisciplinary field has had a profound effect on the way science and engineering is done, both for basic research and product development. Less than ten years ago, these methods required very expensive supercomputers and special software skills to be effective. Today, while supercomputers are still important, the power of widely available PCs and workstations means that many of these methods can be introduced into the undergraduate curriculum. The objectives of this session are, therefore:‚Ä¢ To introduce participants to some of the methods of CSE (e.g., modeling, scientific visualization).‚Ä¢ To demonstrate the range of software tools that can be utilized.‚Ä¢ To provide examples of these tools applied to teaching topics from different scientific disciplines.‚Ä¢ To provide participants ideas and resources that they can use in their own courses.	Computational science and engineering: tools and techniques for teaching	NA:NA:NA:NA	2018
Wanda Dann	NA	Session details: CS1 - Java	NA	2018
Eric Allen:Robert Cartwright:Brian Stoler	DrJava is a pedagogic programming environment for Java that enables students to focus on designing programs, rather than learning how to use the environment. The environment provides a simple interface based on a "read-eval-print loop" that enables a programmer to develop, test, and debug Java programs in an interactive, incremental fashion. This paper gives an overview of DrJava including its pedagogic rationale, functionality, and implementation.	DrJava: a lightweight pedagogic environment for Java	NA:NA:NA	2018
James Comer:Robert Roggio	The Texas Christian University (TCU) Computer Science Department was established in 1981. From the outset, the Department's CS1 course has presented significant teaching challenges due to the wide diversity of student's taking the class. Traditionally, only 25-35% of the students enrolled in the course are computing science majors, the remaining being students from a wide diversity of disciplines, many of which are non-science based. Despite the diversity, it has been necessary for the course, and its content, to be structured to satisfy essential core requirements for students majoring in computer science and computer information science as well as to meet program requirements for the many non-computer science majors taking the course. This paper discusses some of the unique issues associated with teaching a Java-based CS1 course to a very diverse group of students, the majority of which have very unsophisticated problem solving skills, and little or no programming expertise. A representative set of experiments and programming assignments are included.	Teaching a Java-based CS1 course in an academically-diverse environment	NA:NA	2018
David J. Barnes	Innovative teachers are continually looking for creative ideas, both to get their ideas across and to hold the interest of their students. One of the latest trends is the use of LEGO¬Æ MINDSTORMS‚Ñ¢ kits [9] in various computing courses. These kits allow a wide variety of physical models to be built, some of which may be programmed via the RCX‚Ñ¢ processor integrated into them. Using its standard firmware, the RCX device may be programmed through several different specialist languages. However, the additional availability of bytecode-compatible replacement firmware for the RCX makes the use of Java‚Ñ¢ as the programming language for it a particularly attractive approach. In this paper, we explore some of the issues associated with choosing to program MINDSTORMS models using Java within the context of an introductory programming course. In particular, we consider the impact on the material that is taught, and the use of an appropriate API to support an objects-early programming style.	Teaching introductory Java through LEGO MINDSTORMS models	NA	2018
David Valentine	NA	Session details: Architecture	NA	2018
Kevin Skadron	A course that surveys state-of-the-art microprocessors offers an excellent forum for students to see how computer architecture techniques are employed in practice and for them to gain a detailed knowledge of the state of the art in microprocessor design. The University of Virginia has developed such a course, organized around student presentations and a substantial research project. The course can accommodate a range of students, from advanced undergraduates to senior graduate students. The course can also be easily adapted to a survey of embedded processors or DSPs. This paper describes the course and lessons learned.	A microprocessor survey course for learning advanced computer architecture	NA	2018
Hugh Osborne	Undergraduate students often experience difficulty in understanding the basic principles of low level computer operations in introductory courses to computer architectures when these are taught using actual low level programming languages. This is not due to any inherent complexity of the concepts but rather a consequence of assembly language specific details and the need to introduce many concepts simultaneously, such as, for example, data representation, addressing modes and primitive I/O. This paper describes the Postroom Computer, a low level language simulator that not only provides a simple low level language, suitable as an introduction to assembly language programming, but also allows computer architecture concepts to be introduced in an incremental fashion.	The postroom computer: teaching introductory undergraduate computer architecture	NA	2018
Michael J Jipping:Steve Marlowe:Alexander Sherstov	A crucial part of the Computer Organization course is the design and analysis of hardware circuits. To teach this part of the course efficiently and to involve the entire class in the design of circuits, we have designed the SCAN system. Starting with a textual specification of a circuit, SCAN generates Java classes that can be used to simulate the way the circuit works. These circuits can be simulated locally or can join with other circuits to simulate larger machine function over a network. This paper describes the SCAN system, the Java classes it generates, and the way we use this in the Computer Organization class.	Using Java to design and test hardware circuits over a classroom network	NA:NA:NA	2018
Eric Roberts	NA	Session details: Computing Curricula 2001: implementing the recommendations	NA	2018
Eric Roberts:C. Fay Cover:Gordon Davies:Michael Schneider:Robert Sloan	In the fall of 1998, the ACM Education Board and the Educational Activities Board of the IEEE Computer Society appointed representatives to a joint task force to prepare Computing Curricula 2001 (CC2001). The CC2001 report is the current installment in a series of reports on the undergraduate computer science curriculum that began in 1968 and was then updated in 1978 and 1991 [1, 6]. The computer science volume of the CC2001 report was presented to the community in a series of three public drafts, followed by a final report approved by the governing boards of the ACM and the Computer Society. The purpose of this panel is to discuss strategies for implementing the recommendations of the final report in a wide variety of institutions.	Computing Curricula 2001 implementing the recommendations	NA:NA:NA:NA:NA	2018
Doris K. Lidtke	NA	Session details: Preparing for information systems accreditation	NA	2018
Doris K. Lidtke:David Feinstein:John Gorgone:Gayle Yaverbaum	The first pilot Information Systems accreditation visit is occurring in Fall 2001. Many programs will apply for IS accreditation the following year, the 2002-03 accreditation cycle. This session will discuss the process for preparing for an accreditation visit. The discussion will include a planning timeline, preparation of the self-study and arranging details for the on campus visit. Particular attention will be placed on the assessment section of the self-study, the important details of the self-study, and the preparation of the display materials needed for the on-site visit.	Preparing for Information Systems accreditation	NA:NA:NA:NA	2018
Mark Lovik	NA	Session details: Architecture simulators	NA	2018
Ewa Z. Bem	The project presented in this paper has been developed for an advanced undergraduate computer architecture course specifically aimed at non-engineering students. The project is intended to develop understanding of issues in modern computer architecture through empirical testing and experimentation, using sophisticated execution time simulation and industry standard benchmark programs. The students are lead through the functional design process of a superscalar pipelined processor step by step, in a series of carefully structured experiments. The experiments either provide direct support for the design decisions, or make students explore a specific concept. The main goal of the project is to give students a true insight into the current technology and the driving forces behind modern computer architecture, without the burden of engineering and implementation details.	Experiment-based project in undergraduate computer architecture	NA	2018
Gregory S. Wolffe:William Yurcik:Hugh Osborne:Mark A. Holliday	As the complexity and variety of computer system hardware increases, its suitability as a pedagogical tool in computer organization/architecture courses diminishes. As a consequence, many instructors are turning to simulators as teaching aids, often using valuable teaching/research time to construct them. Many of these simulators have been made freely available on the Internet, providing a useful and time-saving resource for other instructors. However, finding the right simulator for a particular course or topic can itself be a time-consuming process. The goal of this paper is to provide an easy-to-use survey of free and Internet-accessible computer system simulators as a resource for all instructors of computer organization and computer architecture courses.	Teaching computer organization/architecture with limited resources using simulators	NA:NA:NA:NA	2018
Paolo Rocchi	NA	Session details: Non-yet majors	NA	2018
Steve Cunningham	The beginning computer graphics course can teach much more than just computer graphics. It can also provide an excellent introduction to graphical problem solving and visual communication, and in so doing can be an excellent complement to other computer science courses that teach more analytical problem solving. This paper describes the graphical problem-solving and visual communication contexts and discusses how they can be supported by the beginning computer graphics course.	Graphical problem solving and visual communication in the beginning computer graphics course	NA	2018
Susan H. Rodger	We describe a course for non-majors that teaches computer science concepts and programming by creating simple animations and building 2D and 3D virtual worlds. Students work with scripting languages, an interactive programming environment, a programmable modeling environment, and finish with a simple programming language. Students work in pairs on computers during class. Each student creates a web portfolio to display their work.	Introducing computer science through animation and virtual worlds	NA	2018
Wayne Staats	NA	Session details: Teaching recursion	NA	2018
Carlisle E. George	This paper discusses how novices exposed to an execution model of recursion (similar to an expert's mental model and visualised in the EROSI tutor) performed on the task of constructing an embedded recursive solution to a given problem specification. Empirical observations showed that after using the EROSI tutor, novices employed a variety of methods during program construction including the use of their understanding of the execution process of recursion from their visualisation experiences. Using our findings we provide some useful suggestions to inform teaching practice. We conclude that when teaching about recursion: visualising program execution models can be a useful aid to program construction, by providing a mental framework for reasoning about the behaviour of program code fragments both before and after coding; visualisation methods may not always be a sufficient condition for developing programming skills; and the teaching of techniques for program construction may be necessary.	Using visualization to aid program construction tasks	NA	2018
Linda Stern:Lee Naish	We have developed a framework for pedagogically-oriented animations, designed to help students learn new algorithms. Recursive sorting and searching algorithms pose a particular challenge, as it can be difficult to find visual representations that help students develop a mental model of how the recursion proceeds. Relatively complex representations, such as thumbnail sketches or explicitly showing the function stack along with the data structure are appropriate for some algorithms, while simpler representations suffice for others. We have found it useful to classify recursive algorithms according to the way they navigate through a data structure and manipulate data items within it, sometimes with further subdivision according to the kind of recursion. Within each category there are common strategies for visual representation. While there may be no single, general way to represent recursive algorithms, classification is a useful guide to picking an appropriate strategy when animating recursive algorithms.	Visual representations for recursive algorithms	NA:NA	2018
Nancy Kinnersley	NA	Session details: Teaching internet technology	NA	2018
Kevin Treu	In the current Web-dominated computing environment, it is increasingly important that students learn the principles of Web-based application design. But this topic is so broad and includes so many different technologies that it is virtually impossible to design an effective class around the traditional lecture-based model. This paper describes a successful approach to teaching the subject that uses a seminar format and features faithful simulation of real world development processes, meaningful case studies and flexibility in terms of coverage as its central themes.	To teach the unteachable class: an experimental course in web-based application design	NA	2018
Heidi J. C. Ellis	The face of the student body in post-secondary degree programs in the United States is changing as an increasing number of students work full-time while attaining an advanced degree [13]. As the student population includes greater numbers of working professionals, a corresponding change in the instructional approaches used to educate the maturing student population is required. Knowles' theory of andragogy [9] is a set of principles that can be used to guide adult learning. This paper describes an application of andragogy to a graduate-level Web Technologies course comprised of working professional students. In this paper, the working professional is characterized and an educational philosophy based on the theory of andragogy is presented. The application of andragogy to a Web Technologies course is described and the results are discussed.	Andragogy in a web technologies course	NA	2018
Bill Manaris	NA	Session details: Incorporating Human-Computer Interaction into the undergraduate CS curriculum	NA	2018
Sarah Douglas:Marilyn Tremaine:Laura Leventhal:Craig E. Wills:Bill Manaris	This special session presents issues, approaches and experiences related to incorporating Human-Computer Interaction (HCI) into the undergraduate CS curriculum. Since the publication of the ACM SIGCHI Curricula for Human-Computer Interaction in 1992 [1], CS educators have tried various implementations of these guidelines. These implementations have been mainly offered as elective courses or modules within other courses, partly because the CS mainstream has been slow to recognize the importance of user interface design and HCI issues in software development.Today at least 50% of the code written for software applications is specific to the user interface. Average end-user expertise is continually dropping due to the proliferation of inexpensive computers available to the general public. Accordingly, user interface effectiveness has become increasingly important in software development, as the user interface has the power to "make or break" a software product. Through its emphasis on user-centered design, task analysis, and usability evaluation among other topics, an HCI course addresses more than 1/3 of the guidelines and imperatives of the ACM Code of Ethics [2]. This includes issues related to professional review, evaluations of computer systems, social responsibility and quality of life, and non-discrimination and dignity of end-users.CS educators have begun realizing the importance of incorporating HCI into the educational experience of students. Approximately 40% of the CAC-accredited degree programs include an HCI course at the upper level; however, this course is offered mostly as an elective (37% of degree programs) as opposed to a required course (3% of degree programs) [3]. Also, HCI is included as a core knowledge area in Computing Curricula 2001 [4, 5, 6]; unfortunately, only six hours have been devoted to it, as opposed to, say, 36 hours for architecture.	Incorporating Human-Computer Interaction into the undergraduate computer science curriculum	NA:NA:NA:NA:NA	2018
Barbara Boucher Owens:Rich Pattis:Dean Sanders:Jack Rehder:Chris Stephenson	NA	Session details: JAVA IDE's: why and how we use what we do	NA:NA:NA:NA:NA	2018
Barbara Boucher Owens:Rich Pattis:Chris Stephenson:Jack Rehder:Dean Sanders	This panel reflects the experiences of several faculty who each use a different Java Interactive Development Environment (IDE). Panelists will discuss the salient features of the IDEs that are used at their particular institutions. Each panelist will discuss system requirements, ease of installation, strengths and weaknesses of each IDE and pointers for successful adaptation to the classroom.	JAVA IDEs: why and how we use what we do	NA:NA:NA:NA:NA	2018
Jeffrey L. Johnson	NA	Session details: NSF graduate research fellowship program	NA	2018
Jeffrey Johnson	The objective of the Graduate Research Fellowship Program (GRFP) of the National Science Foundation (NSF) is to support the vitality of the human resource base of science, mathematics, and engineering in the United States and to reinforce its diversity. Oak Ridge Associated Universities (ORAU) manages the GRFP application and review processes under contract to NSF.	National Science Foundation Graduate Research Fellowship Program	NA	2018
Andy Lopez	NA	Session details: CS1	NA	2018
Mary Elaine Califf:Mary Goodwin	Testing students' programming skills remains a challenge for courses that teach beginning programming. This paper describes the introduction of a laboratory final examination into a CS1 course. We present our approach to a lab final and present initial evidence indicating the effectiveness of the lab final. We also describe the problems encountered and solutions to those problems, which may benefit others interested in instituting a similar exam.	Testing skills and knowledge: introducing a laboratory exam in CS1	NA:NA	2018
Hamzeh Roumani	We adopt the view that CS1 labs are not programming assignments, and that they should not be used for grading students or assessing their level of understanding. Instead, we think of them as teaching instruments that complement lectures by teaching the same material but in an exploratory fashion. But for labs to play this pedagogical role, certain conditions must be met in terms of how they are written and the complexity they expose. In this paper we present guidelines for designing the labs and the Java packages that must accompany them, with special emphasis on software engineering. Our own experience with implementing these guidelines, together with a few samples, is included.	Design guidelines for the lab component of objects-first CS1	NA	2018
M. Brian Blake	NA	Session details: Software engineering --- 1	NA	2018
A. T. Chamillard:Kim A. Braun	One of the largest challenges facing educators teaching undergraduate software engineering courses is providing the students with meaningful experiences they will find useful when they complete their undergraduate education. Those experiences should include all phases of the software development process, and to be as realistic as possible they should also include the uncertainty and continual change present in any real project. In addition, those experiences need to include working with others in a team, which can affect the morale of some students and also poses challenges to the professor when the time to assign grades arrives. In this paper we discuss how we have tailored the software engineering capstone sequence at the U.S. Air Force Academy to address these issues.	The software engineering capstone: structure and tradeoffs	NA:NA	2018
Robert E. Noonan:Richard H. Prosl	In this paper we explore frameworks for performing unit testing in Java. The vehicle for this exploration is a student-written, skeleton program developed for the Computer Graphics course. Our analysis of this one experiment leads us to speculate what benefits in program development and design might accrue by requiring students to unit test their own programs.	Unit testing frameworks	NA:NA	2018
Dennis Bouvier	NA	Session details: Human-computer interfaces/graphs	NA	2018
Jerry B. Weinberg:Mary L. Stephen	Empirical evidence shows the ability for computer technology to deliver on its promises of enhancing our quality of life relies on how well the application fits our understanding of how things work. Software designers need to apply methods that provide insights into the user's mental model of the application's target task and to invite the user to be an active participant in the design process. This paper reports on our efforts to design an HCI curriculum around ethnographic techniques of data gathering and paper prototyping. Initial results are presented that study the course's effects on student's attitudes regarding approaches to software design and their long term design behavior.	Participatory design in a human-computer interaction course: teaching ethnography methods to computer scientists	NA:NA	2018
Dejan Nikolic:Ching-Kuang Shene	This paper discusses the functionality of GraphicsMentor. GraphicsMentor permits a student to modify many parameters of the camera, objects, and light sources interactively, and to visualize the rendered result on-the-fly. It also supports basic keyframe animation. With GraphicsMentor, a student should be able to grasp the fundamentals of computer graphics quickly and easily in a learning-by-doing way.	GraphicsMentor: a tool for learning graphics fundamentals	NA:NA	2018
Roseann Krane:Harriette Kisilinsky:Alfred Thompson:Pat Phillips	NA	Session details: Using Visual Studio.Net in the classroom	NA:NA:NA:NA	2018
Roseann Krane:Alfred Thompson:Harriette Kisilinsky:Pat Phillips	The exciting promise of Microsoft.NET Technology inspired four teachers from high schools in Florida, New Hampshire, Wisconsin and California to collaborate using the new technology to teach high school programming. Follow their adventures through the school year of implementing a new technology, coordinating curriculum and partnering distant students. Learn from this panel the do's and don't's that lead to success for innovative teachers.	Using Visual Studio.Net in the classroom	NA:NA:NA:NA	2018
Max Hailperin:Linda Null:Mike Ciaraldi:Liz Adams:Ursula Wolz	NA	Session details: Rewrite cycles in CS courses: experience reports	NA:NA:NA:NA:NA	2018
Linda Null:Mike Ciaraldi:Liz Adams:Ursula Wolz:Max Hailperin	The generally accepted wisdom among teachers of English composition is that a "rewrite cycle" should be used as a teaching strategy. Rather than expecting students to extrapolate from the grading comments on paper N what they should do differently on paper N + 1, it has become conventional to ask for a rewrite of paper N itself. Of course, there are many variations on this theme. For example, peer review may supplement or replace some of the rounds of grading.The panelists will explore some of the ways they have applied this pedagogic strategy in computer science courses. Most obviously, when we have our students write papers, we have them do rewrites. However, some of us don't stop there, but rather also apply the same idea to the writing of programs or mathematical analyses. This encourages our students to do a high-quality job, and to feel that they have truly mastered a topic.Clearly, there are tradeoffs and difficulties, principally involving time. The panelists will also discuss this aspect, indicating how they have coped with the pitfalls, and indicating what has worked well, and what not so well. Ultimately, however, all the panelists are optimistic about the value of rewrite cycles.After the panelists share their experiences, there will be some time for discussion with the audience. Based on the interest this topic provoked on the sigcse.members mailing list, and in ensuing private email, we look forward to an active audience. We will also make materials from the session available at http://www.gustavus.edu/~max/rewrite/	Rewrite cycles in CS courses: experience reports	NA:NA:NA:NA:NA	2018
Kathleen Larson	NA	Session details: The object is objects	NA	2018
Joseph Bergin:Richard Kick:Judith Hromcik:Kathleen Larson	Teaching objects early requires different pedagogy. It isn't especially difficult, but it is different. Four presenters will explain and demonstrate different methodologies for introducing objects early in introductory computer science courses. The propose is to provide teachers with ideas that they can use or modify to successfully introduce objects and classes to novice programmers.	The object is objects	NA:NA:NA:NA	2018
Anthony Joseph	NA	Session details: Managing large classes	NA	2018
A. T. Chamillard:Laurence D. Merkle	Many colleges and universities throughout the world offer introductory computer science courses with significant student enrollment. There are certainly plenty of challenges for the administrators of those courses; ensuring equitable grading across different instructors and offering times for the course, accomplishing the massive material preparation and other logistical tasks required for the course, grading the large number of assessments associated with the large enrollment, and managing the numerous instructors in the course are a few examples. This paper discusses the processes we have implemented to address these and other management challenges at the U.S. Air Force Academy.	Management challenges in a large introductory computer science course	NA:NA	2018
Steven A. Wolfman	Pedagogy of large lecture classes has traditionally focussed on deemphasizing the problems their size creates. This approach has yielded valuable practical advice for instructors. However, this paper argues that there are pedagogical advantages to the large lecture format and that exploiting these advantages can further improve classroom instruction. I present some advantages of large classes and anecdotes that demonstrate how to exploit these advantages.	Making lemonade: exploring the bright side of large lecture classes	NA	2018
Ellen Walker	NA	Session details: Database	NA	2018
Thomas K. Moore	Most database systems courses concentrate on teaching the principles of relational databases. An alternative approach is one in which those principles are taught within the context of emerging enterprise systems. A description is given in this paper of a course that has been successfully taught at the undergraduate level that uses the Java 2 Enterprise Edition (J2EE) model, and its services, to illustrate basic database principles.	Bringing the enterprise into a database systems course	NA	2018
Suzanne W. Dietrich:Susan D. Urban:Ion Kyriakides	This paper describes the design and functionality of courseware developed to demonstrate the JDBC API. The courseware is used in an advanced undergraduate database course that emphasizes the use of Web access to database systems. The JDBC courseware is written using Java Servlets and Java Server Pages, allowing the user to view the metadata associated with a database, to view and browse the information in a database according to the database metadata, and to query and/or manipulate data using SQL statements. The advantage of the courseware is that it demonstrates the main functionality of the JDBC API in an application-independent manner. The courseware can access any ODBC-compliant database, emphasizing the generality of the JDBC API and helping students understand how JDBC can be used to query the metadata of the database as well as the database contents.	JDBC demonstration courseware using Servlets and Java Server Pages	NA:NA:NA	2018
Kay Wijekumar	NA	Session details: Software engineering --- 2	NA	2018
Michael H. Goldwasser	We discuss our experiences in which students of a programming course were asked to submit both an implementation as well as a test set. A portion of a student's grade was then devoted both to the validity of a student's program on others' test sets, as well as how that student's test set performed in uncovering flaws in others' programs. The advantages are many, as this introduces implicit principles of software testing together with a bit of fun competition. The major complication is that such an all-pairs execution of tests grows quadratically with the number of participants, necessitating a fully automated scoring system.	A gimmick to integrate software testing throughout the curriculum	NA	2018
Amer Diwan:William M. Waite:Michele H. Jackson	In industry, programmers work in groups to design and implement substantial pieces of software. In contrast, most programs that students write in classes are toy programs involving little or no group work. To address this discrepancy, we have developed a software infrastructure that aims to teach group work skills to students in computer science courses and also enables students to tackle larger and more significant projects. We are in the process of deploying this infrastructure in a three course sequence at the University of Colorado: Data Structures---Programming Languages---Compiler Construction.	An infrastructure for teaching skills for group decision making and problem solving in programming projects	NA:NA:NA	2018
Joseph D. Sloan:Randy K. Smith:Andy Lopez:Dick Mowe	NA	Session details: Networking CS: beyond the first course	NA:NA:NA:NA	2018
Joseph D. Sloan:Andy Lopez:Randy K. Smith:Dick Mowe	We face a need for undergraduate instruction in networking and telecommunications. The Computing Research Association has identified both web-specialists and network-designers as being among the seven occupations where there is a clearly established shortage of professionals [2]. Even with the recent softening of the economy, individuals in the networking and telecommunications field are highly sought after as attested to by surveys such as RHIConsulting's¬Æ recent survey of 1400 CIOs nationwide [4]. It is imperative to ask how these individuals will be educated.Historically, telecommunications has been hardware oriented. Consequently, it has been in the domain of Electrical Engineering. The ongoing convergence of communications and computing, however, has drastically shifted the focus of telecommunications and considerably broadened the field. Many of the new areas of telecommunications will not fit neatly into old categories. Some are much closer to Computer Science than Electrical Engineering.Schools wishing to address this need must begin by deciding what should be taught. For two-year schools, the ACM has issued guidelines for several programs [1]. For four-year institutions, the curriculum remains an open question. The primary guidelines for four-year institutions are the dated 1991 Computing Curricula [5] and the emerging Computing Curricula 2001 Computer Science [3]. As the goal of these documents is to define the core needs of the CS discipline, understandably, neither goes beyond outlining an introductory course in networking. Schools interesting in educating professionals in networking and telecommunications will need to go beyond this first course. A key question would seem, then, in teaching networking, what should be taught beyond the first course?Our panel presents three quite different positions---that the basic need can be met with a single well-designed course, that a few advanced courses will meet the need, and that a collection of courses constituting a minor is called for.	Networking CS: beyond the first course	NA:NA:NA:NA	2018
Joe Hummel:Jean Mehta:Floyd Johnson:Gail Miles	NA	Session details: Using Visual Basic in the CS curriculum	NA:NA:NA:NA	2018
Joe Hummel:Jean Mehta	Visual Basic is currently the most popular programming language in the United States. And yet, it is rarely found in traditional Computer Science (and related) curriculums. Perhaps this is due to the fact that VB is not truly object-oriented, but object-based. Or perhaps because VB is not an open language, instead supported only by tools from Microsoft Corporation and available only on the Windows platform. Or perhaps it is simply Microsoft itself, with its monopolistic tendencies.This panel will argue that Visual Basic --- while it should not replace the use of more traditional languages such as C++, Java, or Scheme --- fulfills an important role in modern CS and related curriculums. The panelists will highlight a few of the cases in which they have found VB to be exceedingly useful, and discuss their rationale for choosing VB over other languages.	Using Visual Basic in the CS curriculum	NA:NA	2018
Julie Zelenski	NA	Session details: How to develop and grade an exam for 20,000 students (or maybe just 200 or 20)	NA	2018
Fran Hunt:Joe Kmoch:Chris Nevison:Susan Rodger:Julie Zelenski	Although our students may spend only a class period working one of our exams, as instructors, we invest many more hours crafting the questions and grading their responses. How do we ensure our time is well-spent? What qualities contribute to an effective exam? How can we guarantee a fair evaluation of student performance?With an 18-year track record delivering a nationwide exam, the Advanced Placement Computer Science (AP CS) program has a wealth of experience in the area of exam development and administration. This special session will bring together members of the AP CS Development Committee and the Educational Testing Service to share some of their insights into how the experts do it.AP teachers will learn more about the exam for which they are preparing their students. College faculty will gain a better understanding of the metrics provided by the AP exam. All instructors will come away with practical and transferable ideas for successful exam tactics.	How to develop and grade an exam for 20,000 students (or maybe just 200 or 20)	NA:NA:NA:NA:NA	2018
Curtis Carver	NA	Session details: Puzzles	NA	2018
Richard Rasala:Jeff Raab:Viera K. Proulx	This article will describe the SIGCSE 2001 Maze Demo program that may be used as a CS2 laboratory exercise on traversal algorithms. The article will also describe the object-oriented design of the program and the Java Power Tools that were used to enable rapid development of its graphical user interface. Finally, the quality of the program and the speed of its development shows that it is now practical to teach freshmen using full graphical user interfaces rather than interfaces that use the console or a small restricted set of interface widgets.	The SIGCSE 2001 Maze Demonstration program	NA:NA:NA	2018
Anany Levitin:Mary-Angela Papalaskari	This paper advocates a wider use of puzzles and puzzle-like problems in teaching design and analysis of algorithms. It discusses a variety of puzzles and classifies them according to the general algorithm design techniques. Pedagogic issues are explored.	Using puzzles in teaching algorithms	NA:NA	2018
John Fendrich	NA	Session details: Object oriented - 2	NA	2018
Michael R. Wick:Daniel E. Stevenson:Andrew T. Phillips	Inheritance is a central topic in most introductory object-oriented programming courses and frequently the most challenging for students to comprehend. The difficulties students experience often center around the rather complicated and obscure dynamic method invocation algorithms used in languages like C++ and Java. We present a visual model for teaching inheritance that captures the essential aspects of these algorithms yet is easy for students to comprehend and apply.	Using an environment chain model to teach inheritance in C++	NA:NA:NA	2018
Paolo Bucci:Wayne Heym:Timothy J. Long:Bruce W. Weide	Currently there is a serious conceptual and technical gap between ideas emphasized in object-oriented programming and ideas as taught in algorithms courses. We suggest both a paradigm for "re-expressing" algorithms in terms of classes and objects, and a set of criteria relative to which the quality of such re-expressions can be evaluated. A detailed example is provided for re-expressing the algorithmic idea of sorting.	Algorithms and object-oriented programming: bridging the gap	NA:NA:NA:NA	2018
Ryan McFall	NA	Session details: Distance learning	NA	2018
David Emory:Roberto Tamassia	This paper describes a Java-based distance-education tool, called the Environment for Remote Programming Assignments in Java (JERPA), for use in computer science courses with Java programming assignments. JERPA reduces the demand on the university's computing infrastructure while providing instructors with an easy system to deploy and distribute assignments, and allowing students greater flexibility as they work on the assignments. JERPA yields immediate advantages to traditional on-campus CS courses and provides a key functionality to programming courses offered in a distance-education setting.	JERPA: a distance-learning environment for introductory Java programming courses	NA:NA	2018
Barry L. Kurtz:Dee Parks:Eric Nicholson	Our Internet-based project is developing two courses to demonstrate the viability of a virtual classroom environment where the on-line student can interact both with the instructor and "virtual classmates." Other course components include a hyperlinked textbook and laboratory experiences that stress learning-by-doing. We use Java on both the server side and the client side to support the classroom interaction and the laboratory activities. This paper illustrates some of the particular software technologies used. We discuss problems encountered, solutions found, and the ongoing development of materials.	Effective internet education: a progress report	NA:NA:NA	2018
Marty J. Wolf:Kevin Bowyer:Don Gotterbarn:Keith Miller	NA	Session details: Open source software: intellectual challenges to the status quo	NA:NA:NA:NA	2018
Marty J. Wolf:Kevin Bowyer:Don Gotterbarn:Keith Miller	Open source software is making a large impact on many aspects of society including the business community, the computing industry, the entertainment industry and higher education. The computer science education community has been quiet about issues of open source versus closed source and the role of open source code in the advancement of information technology. A survey of recent issues of SIGCSE Bulletin and SIGCSE conference proceedings shows little attention to the role open source software should play in computer science education. We are here to raise the question: "What are the social and ethical responsibilities of computer science faculty regarding open source software?"One set of issues concerns the use of open source software in teaching and the use of open source development models in the teaching of software development. Some basic questions that arise include "Should analysis of open source (and possible contributions to it) be the subject of class assignments?" and "Should open source software development models be taught?"A second set of issues concerns the use of open source software in support of teaching (e.g., using Linux as your standard platform). Some basic questions that arise include "Should we use open source software to support teaching?" and "Are these faculty ethically obligated to make contributions to the open source software base?"In this panel we will identify many of the parties involved in the ethical and social issues surrounding the use of open source in teaching and in the support of teaching, and we will identify the rights and responsibilities we, as faculty, have to the various parties. This panel will initiate a discussion that will identify additional parties and our further professional obligations.	Open source software: intellectual challenges to the status quo	NA:NA:NA:NA	2018
Nick Parlante	NA	Session details: Nifty assignments	NA	2018
Nick Parlante:John K. Estell:David Reed:David Levine:Dan Garcia:Julie Zelenski	Creating assignments is a difficult and time consuming part of teaching Computer Science. Nifty Assignments is a forum, operating at a very practical level, to promote the sharing of assignment ideas and assignment materials.Each presenter will introduce their assignment, give a quick demo, and describe its niche in the curriculum and its strengths and weaknesses. The presentations (and the descriptions below) merely introduce each assignment. For more detail, each assignment has its own web page with more detailed information and assignment materials such as handouts and data files to aid the adoption of the assignment. Information on participating in Nifty Assignments as well as all the assignment pages are available from our central page‚Ä¶ http://cse.stanford.edu/nifty/	Nifty assignments	NA:NA:NA:NA:NA:NA	2018
Thomas S. Penninton	NA	Session details: Algorithms	NA	2018
Ian Sanders	In this paper I argue that empirical analysis of algorithms is important but also difficult and requires a place in our curricula. I discuss how I planned to include coverage of this topic through lectures, discussions and practical work and the approach that I took in the Honours Analysis of Algorithms topic at the University of the Witwatersrand in 2001. I then discuss the results of a survey conducted on the Honours class and suggest some improvements for 2002.	Teaching empirical analysis of algorithms	NA	2018
James B. Fenwick:Cindy Norris:James Wilkes	In traditional computer science curricula, students view program implementation as the end product and not the means to obtaining some further result. All too often students complete an implementation at the last minute, perform a minimal amount of testing and call the assignment done! This paper discusses an approach we have taken in our courses to have students use and develop programs as part of a scientific inquiry. In addition to causing students to perform more thorough testing, our approach also improves empirical and critical thinking skills.	Scientific experimentation via the matching game	NA:NA:NA	2018
David Ginat	The most common decomposition perspective in computer science problem-solving is 'top-down', in which the problem at hand is divided into 'smaller' sub-problems. Yet there are more decomposition perspectives. In this paper we illuminate three additional perspectives and demonstrate their didactic value. The presentation is displayed in an apprenticeship manner, through different approaches for solving an intriguing algorithmic challenge - the problem of finding majority. Each of the three perspectives is tied to a variety of algorithmic problems and solutions, and elaborated as a pedagogical tool for teaching algorithms.	On varying perspectives of problem decomposition	NA	2018
Soe Than	NA	Session details: Programming languages	NA	2018
W. Douglas Maurer	The programming language concepts which ought to be presented in the comparative programming languages course (either graduate or undergraduate) are all covered by choosing C++, Java, Perl, and Python as the languages to be compared. These include dynamic typing, object orientation, multiple inheritance, interpreters and compilers, keyword and default parameters, generics, operator overloading, complex numbers, universal hierarchies, exceptions, and garbage collection. We describe such a course, which we have given.	The comparative programming languages course: a new chain of development	NA	2018
Saumya Debray	Compiler Design courses are a common component of most modern Computer Science undergraduate curricula. At the same time, however, compiler design has become a highly specialized topic, and it is not clear that a significant number of Computer Science students will find themselves designing compilers professionally. This paper argues that the principles, techniques, and tools discussed in compiler design courses are nevertheless applicable to a wide variety of situations that would generally not be considered to be compiler design. Generalizing the content of compiler design courses to emphasize this broad applicability can make them more relevant to students.	Making compiler design relevant for students who will (most likely) never design a compiler	NA	2018
Allen B. Tucker:Robert E. Noonan	In our approach to the Programming Languages course, formal models are integrated as a thread that pervades the course, rather than as a one of many topics that is introduced and then dropped. In this paper we present a simplified version of the formal semantics used. We then show how this model is implemented using the object-oriented, functional and logic paradigms.	Integrating formal models into the programming languages course	NA:NA	2018
Mario Guimaraes	NA	Session details: Concurrency	NA	2018
Steven Robbins	This paper examines the use of a simulator to explore process interaction in Unix. The simulator allows instructors to trace through a variety of programs and to show how the processes and pipes are connected. Students can create C language programs and see how changes in their code or changes in process scheduling affect the configuration of the processes and pipes as well as the output of the program. Students can also see the consequences of not protecting critical sections in an executing program. The simulator is flexible enough to allow the creation of process fans, chains and trees as well as unidirectional and bidirectional rings. The program is written in Java and can be run as a standalone application or as an applet from a browser.	Exploration of process interaction in operating systems: a pipe-fork simulator	NA	2018
Kenneth A. Reek	This paper discusses differences in the semantics of various semaphore implementations and their ramifications in developing solutions to synchronization problems. An approach is described to insulate students from these differences and simplify the task of teaching semaphores.	The well-tempered semaphore: theme with variations	NA	2018
Steve Carr:Changpeng Fang:Tim Jozwowski:Jean Mayo:Ching-Kuang Shene	A number of communication libraries have been written to support concurrent programming. For a variety of reasons, these libraries generally are not well-suited for use in undergraduate courses. We have written a communication library uniquely tailored to an academic environment. The library provides two levels of communication abstraction (topology and channel) and supports communication among threads, processes on the same machine, and processes on different machines, via a unified interface. The routines facilitate controlled message loss along channels and can be integrated with an existing graphical tool that supports visualization of the communication that occurs. An editor has been developed for automatic code generation for arbitrary topologies via a graphical interface. All these tools run over Solaris, Linux, and Windows.	A communication library to support concurrent programming courses	NA:NA:NA:NA:NA	2018
William Oblitey:Paul Mullins:James Wolfe:Michael Fry:Erik Wynters:William Calhoun:Robert Montante	NA	Session details: Integrating security concepts into existing computing courses	NA:NA:NA:NA:NA:NA:NA	2018
Paul Mullins:Jim Wolfe:Michael Fry:Erik Wynters:William Calhoun:Robert Montante:William Oblitey	Recently, computer security has come to the forefront of public awareness. With the onslaught of worms such as Code Red, national (U.S.) concern has increased about cyber terrorism and the information infrastructure. One educational response has been the emergence of a number of computer security degree programs - at the undergraduate level, e.g., East Stroudsburg State University of PA, and at the graduate level, e.g., the Heinz School at Carnegie-Mellon University.The panel members were all participants in the Cyber security faculty development Workshop[1] held at Indiana University of PA in August, 2001. Among the goals of the workshop was the development of courses that would teach the theory and application of security, including the use of specially designed (quarantined) "attack" and "defend" computer labs. Additional goals include development of modules related to security for CS core courses, and an interdisciplinary minor for Computer Science and Criminology majors.It was the consensus of the panel participants that many institutions would be unable to implement special degree programs or tracks, and, in a significant number of cases, might be unable to immediately implement even one specialized course. Yet, all the participants also believed strongly that security-related content in our computer courses can, and should, be improved. Even if no security-based courses are added, major and non-major courses in computer science, CIS, etc., can do a better job of raising awareness of threats, vulnerabilities, and risks.Each panel member will address a specific course or sub discipline and describe how security was infused or added to the current curriculum. The intent is to foster discussion regarding appropriateness and pedagogy while relating individual experiences, successes and failures. Audience and panel members will be encouraged to discuss the relative merits of this approach.	Panel on integrating security concepts into existing computer courses	NA:NA:NA:NA:NA:NA:NA	2018
Stuart Reges	NA	Session details: Industry in the ivory tower	NA	2018
Stuart Reges	The intent of this forum is to generate a really lively discussion on the gamut of our relationship - as computer science educators - to industry.How dependent are we/should we be on specific industry software and platforms? (Many examples come to mind - Microsoft Visual Studio.NET, Red Hat Linux, C#, Sun's version of Java.)How obligated are we to jump on board the newest upgraded software version of whatever we might be using?How does our desire for good job placement of our graduates square with our oft-repeated claim that we are educators, not trainers?Pursuing this issue of "where do we fall on the spectrum between training and education," what to do about all these industry certification programs - Cisco, Novell, Oracle, Microsoft. Do we teach these curricula? Do we give credit to students who take it, say at a community college, and then transfer?What about a service course in, say, Photoshop? Is this college-level material?Do opportunities for summer internships or research projects in an industry setting place some special obligations on us with respect to that company?	SIGCSE 2002 forum: industry in the ivory tower	NA	2018
Henry Walker	NA	Session details: SIGCSE committees: a new initiative to support computing education through SIGCSE-member involvement	NA	2018
Henry Walker	NA	SIGCSE 2002 forum: introducing SIGCSE committees: a new initiative to support computing education through SIGCSE-member involvement	NA	2018
Thomas B. Hilburn	NA	Session details: Teaching a software project course using the team software process	NA	2018
Robert Cannon:Thomas B. Hilburn:Jorge Diaz-Herrera	The tutorial is intended for faculty that will be teaching or have taught a software project course. It provides attendees with ideas, concepts, guidelines and experiences for teaching such a course using the introductory Team Software Process.	Teaching a software project course using the team software process	NA:NA:NA	2018
Tom Naps	NA	Session details: Theory	NA	2018
Michael T. Grinder:Seong B. Kim:Teresa L. Lutey:Rockford J. Ross:Kathleen F. Walsh	Can students love to learn the theory of computing? This topic is, after all, probably the most challenging in the computer science curriculum. The academic structure in the United States from grade school on is not particularly good at preparing students to deal with mathematical abstractions in any case, and the kinds of abstractions that permeate the theory of computing are unlike any encountered in other math courses: strings, formal languages, and models of computation. Furthermore, there is often little correlation provided in a standard theory textbook between the theory and the real world of software development; students wonder just what the point of the course is. It is no surprise, then, that most students struggle with learning the theory of computing.It is tempting to forego teaching the theory of computing, since students not only struggle with it, but they often retain so little of it. This would be a mistake. Done properly, the theory course puts the "science" into computer science, giving aspiring practitioners a basis for understanding the fundamental laws that govern their discipline: there are problems that cannot be solved, there are intractable problems, there are limitations on the efficiency of the solutions to problems, and so on. Students not only need to know these fundamental truths about their field, but they also need to be able to apply this knowledge to their everyday work of programming.In this paper we describe recent advances in our long-term efforts in the Webworks Laboratory at Montana State University to make the theory of computing accessible to students through active learning modules designed for use on the web. While we won't be so bold as to say that students will actually love to learn the theory of computing as a result of having access to these modules, we can confidently say from our own experience that they will find learning the theory to be more fun. And that, we would all agree, is a big step towards helping students learn.	Loving to learn theory: active learning modules for the theory of computing	NA:NA:NA:NA:NA	2018
Jennifer McDonald	This paper will present the Interactive Pushdown Automata Animation for use in an Automata Theory class. It will present the features of the IPAA as well as the algorithm and data model used. Finally, this article will outline the necessary pieces of a good visual tool and show how they are implemented in the IPAA.	Interactive Pushdown Automata Animation	NA	2018
Stacy Lukins:Alan Levicki:Jennifer Burg	This paper describes a tutorial program that serves a double role as an educational tool and a research environment. First, it introduces students to fundamental concepts of propositional logic and gives them practice with theorem proving. Secondly, the program provides an environment in which we can track student learning, explore cognitive issues of human problem solving, and investigate the possibilities of interactive human/machine learning. We have tested the tutorial program on two groups of Discrete Mathematics students and report the results of our assessment. We also discuss the contributions and future directions of our research in interactive human/machine learning.	A tutorial program for propositional logic with human/computer interactive learning	NA:NA:NA	2018
Alyce Brady	NA	Session details: CS2	NA	2018
Tia Newhall:Lisa Meeden	We present our experience using a large, real-world application as a course project for the second half of the semester of a CS2 course. Our primary goal for the project was to create an engaging application that incorporated most of the key data structures and algorithms introduced in the course. Specifically, the project uses binary search trees, priority queues, hash tables, and graphs. The project consisted of four parts combined to build an integrated web browser and search engine in Java. A key benefit of an incremental, long-term project of this type is that students quickly learn that their initial design and implementation decisions have a significant impact on the eventual extensibility and performance of their software. This provides numerous opportunities for students to recognize the importance of software engineering techniques and complexity analysis in the development of a successful application. We present students' responses to the project which show that they overwhelmingly enjoyed the project and felt that it helped them to see how the data structures and algorithms discussed in the course are used in real software.	A comprehensive project for CS2: combining key data structures and algorithms into an integrated web browser and search engine	NA:NA	2018
Kay A. Robbins:Catherine Sauls Key:Keith Dickinson	Case studies are widely used in business and medicine to help students learn from the successes and failures of practitioners in the field. This paper discusses the potential benefits of case studies in computer science and how case studies differ from projects. We describe our preliminary experience with developing a network simulation case study for an object-oriented CS2 course and present some of ideas for teaching such a case study through close coupling of lectures with laboratories. The teaching materials for this case study are available on the web.	Integrating a simulation case study into CS2: developing design, empirical and analysis skills	NA:NA:NA	2018
Alan Fekete	In recent years, the teaching of data structures has been revolutionised by object-oriented languages, especially Java, in which the concept of each Abstract Data Type is made explicit as an Interface. The existing texts, though, each use a single set of classes: sometimes a standard library such as Sun's SDK, but in other cases these form a library unique to the text. In contrast, this paper advocates an approach which seeks to prepare students for the common situation for software developers, who are asked to regularly adjust to a library they are unfamiliar with. The teaching we describe openly acknowledges the existence of many libraries. A single concept such as Stack is expressed in subtly different ways in each library; these differences are made explicit for the student. We also show examples of assessment tasks that can accompany the teaching.	Teaching data structures with multiple collection class libraries	NA	2018
Kenneth Johnson	NA	Session details: Networks	NA	2018
William Shay	This paper introduces a more general client/server example than is typically described. Whereas many client/server examples often involve communication between two C programs or two Java programs, this paper describes a program demo containing two clients (one in C and one in Java) and two servers (one in C and one in Java). Furthermore, either client is capable of connecting to and downloading a file from either server using a socket connection over the TCP/IP protocol. None of these programs make any assumptions regarding what language or platform supports the program at the remote end.	A multiplatform/multilanguage client/server project	NA	2018
Greg Gagne	This paper covers the use of Java and its API for developing networking programs in an undergraduate computer networks class. Through the use of TCP and UDP sockets provided in the java.net package, students are able to write several client-server applications such as web and mail servers and a chat room. Additionally, the java.rmi API provides a library for invoking methods on remote objects, similar to remote procedure calls. Remote method invocation (RMI) is used to write a distributed version of the Producer-Consumer problem.	To java.net and beyond: teaching networking concepts using the Java networking API	NA	2018
Joel Adams:David Vos	A Beowulf cluster is a MIMD multiprocessor built from commodity off-the-shelf personal computers connected via a dedicated network, running free open-source software. Such a cluster can provide a supercomputer's performance at a small fraction of one's cost. For small colleges and universities, the relatively low cost of a Beowulf cluster makes it an attractive alternative to a commercial supercomputer. This paper details our experience building a Beowulf cluster at a four-year comprehensive college.	Small-college supercomputing: building a Beowulf cluster at a comprehensive college	NA:NA	2018
James W. McGuffe:Herbert L. Dershem:Linda B. Lankewicz:Gary Lewandowski:Dian Lopez:Oberta A. Slotterbeck	NA	Session details: Managing undergraduate CS research	NA:NA:NA:NA:NA:NA	2018
Eric Roberts	According to prevailing labor projections, the demand for well-trained computer scientists and software developers will continue to grow in the coming years, in spite of the dot-com collapse. For the most part, the people who fill these positions -- and particularly those that require high levels of creativity and independence of thought -- will be trained by colleges and universities. Unfortunately, many highly talented students never investigate computer science as an academic option, either because they have not been exposed to what computing has to offer or because they feel themselves outside of the traditional computer science milieu. As computer science teachers, we have a collective responsibility to ensure that this discipline remains open to the widest possible range of students. In this talk, I will describe several strategies and tactics for achieving that goal.	Keynote address: Expanding the audience for computer science	NA	2018
Allan Fisher:Jane Margolis	We recount some of the most significant and colorful findings of our four-year study of gender issues in the undergraduate computer science program at Carnegie Mellon. We also discuss the subsequent dramatic increase in the number of women in the program. We conclude with recommendations for the most generally useful and effective actions departments can take to attract and retain female students.	Unlocking the clubhouse: women in computing	NA:NA	2018
Nancy Kinnersley	NA	Session details: Algorithms	NA	2018
Owen Astrachan	Text books, including books for general audiences, invariably mention bubble sort in discussions of elementary sorting algorithms. We trace the history of bubble sort, its popularity, and its endurance in the face of pedagogical assertions that code and algorithmic examples used in early courses should be of high quality and adhere to established best practices. This paper is more an historical analysis than a philosophical treatise for the exclusion of bubble sort from books and courses. However, sentiments for exclusion are supported by Knuth [17], "In short, the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems." Although bubble sort may not be a best practice sort, perhaps the weight of history is more than enough to compensate and provide for its longevity.	Bubble sort: an archaeological algorithmic analysis	NA	2018
Teresa H√ºbscher-Younger:N. Hari Narayanan	This research began by investigating the literature on student learning from algorithm animations and conducting experimental studies of an algorithm visualization system. The results led us to develop CAROUSEL (Collaborative Algorithm Representations Of Undergraduates for Self-Enhanced Learning), using which students created expository representations of algorithms, shared their representations with others, evaluated each other's representations and discussed them. The system and the activities of representation creation, sharing, evaluation and discussion that it supports were then studied in three experiments, which are summarized. They show a significant positive relationship between these constructive and collaborative activities and algorithm learning, which suggests that this is a beneficial pedagogical approach for introductory courses on algorithms.	Constructive and collaborative learning of algorithms	NA:NA	2018
David Ginat	Educators' approach towards their students' mistakes can have significant impact on the students. This paper presents a rather less considered approach of teaching by capitalizing on mistakes. In the course of teaching our students algorithm design, we noticed the phenomenon of students' "over-reliance" on intuition rather than rigor. In particular, we noticed a repeated erroneous trend of turning to intuitive, but inadequate greedy algorithmic solutions. We capitalized on the student errors for influencing their attitude and beliefs regarding intuition and rigor. The paper displays the student errors and our capitalization-on-errors approach, with colorful and novel algorithmic tasks.	The greedy trap and learning from mistakes	NA	2018
Catherine Ricardo	NA	Session details: Database	NA	2018
Sub Ramakrishnan:Emeka Nwosu	In this paper, we discuss a software tool we have developed for use in undergraduate DBMS courses, that provides: (i) a web-enabled database set up and administration facility for faculty use, and (ii) web-based database projects that may be assigned to students.We discuss the motivation for our work and the objectives underlying the design of the tool. The significance of our work is two-fold. First, it should help the instructor in the set up, management, and monitoring of student database accounts. Second, it provides the students with a feel for the organization and use of contemporary web-enabled database applications.	DBMS course: web based database administration tool and class projects	NA:NA	2018
Susan D. Urban:Suzanne W. Dietrich	This paper illustrates the manner in which UML can be used to study mappings to different types of database systems. After introducing UML through a comparison to the EER model, UML diagrams are used to teach different approaches for mapping conceptual designs to the relational model. As we cover object-oriented and object-relational database systems, different features of UML are used over the same enterprise example to help students understand mapping alternatives for each model. Students are required to compare and contrast the mappings in each model as part of the learning process. For object-oriented and object-relational database systems, we address mappings to the ODMG and SQL99 standards in addition to specific commercial implementations.	Using UML class diagrams for a comparative analysis of relational, object-oriented, and object-relational database mappings	NA:NA	2018
Paul J. Wagner:Thomas K. Moore	eXtensible Markup Language (XML) is becoming a standard tool for data storage and transmission. Integrating XML into current database systems courses provides students with an understanding of the growing role of XML in data management and manipulation. We have successfully designed and implemented several exercises for a database systems course in the context of a real-world software project that educate students as to how XML relates to current Database Systems course topics.	Integrating XML into a database systems course	NA:NA	2018
Carl Alphonce	NA	Session details: Outcomes assessment	NA	2018
Kathryn E. Sanders:Robert McCartney	In this paper, we investigate the question of what assessment tools are being used in practice by United States computing programs and what the faculty doing the assessment think of the tools and of the assessment process in general. We report on the results of two surveys, distributed to the SIGCSE mailing list and to the chairs of all ABET-CAC accredited computer science programs. We found that both parts of these surveys--the multiple-choice sections and the comments--provided some interesting insights into program assessment from the perspective of those responsible for collecting and using the information.	Program assessment tools in computer science: a report from the trenches	NA:NA	2018
Donald B. Crouch:Leslie Schwartzman	Outcome-based learning, as embraced by the CAC criteria for accrediting computing programs, requires by its very nature the active, on-going participation of faculty in the assessment process. This paper will describe a means of involving faculty at the earliest stages of development in a comprehensive assessment plan without making undue demands of their time or fostering the anxiety that oftentimes accompanies implementation of the assessment process. The proposed process takes advantage of the flexibility of the CAC criteria.	Computer science accreditation: the advantages of being different	NA:NA	2018
Dick K. Blandford:Deborah J. Hwang	Assessment of ABET/CAC accredited programs can become a burdensome task that generates lots of paper, takes hours of faculty time, and produces little in the way of meaningful results that can be used as a basis for improving a program. The result is often lack of active participation by faculty and an increase in negative attitudes that tend to further erode assessment effectiveness. This is a serious problem at small schools that cannot afford the luxury of full time assessment personnel and are totally dependent on faculty for the assessment process. This paper presents five assessment methods that require a minimum of paper-work and faculty time but are nevertheless effective in presenting an accurate assessment of a program's objectives. The five methods presented are: 1. the Assessment Day concept; 2. personal class assessment; 3. sampled student work; 4. faculty interview groups; and 5. student focus groups.	Five easy but effective assessment methods	NA:NA	2018
Elizabeth S. Adams:Orit Hazzan:Hrafn Loftsson:Alison Young	NA	International perspective of women and computer science	NA:NA:NA:NA	2018
Pam Lawhead:Michaele E. Duncan:Constance G. Bland:Michael Goldweber:Madeleine Schep:David J. Barnes	NA	Legos, Java and programming assignments for CS1	NA:NA:NA:NA:NA:NA	2018
Kim Kihlstrom	NA	Session details: Gender issues	NA	2018
Sylvia Beyer:Kristina Rynes:Julie Perrault:Kelly Hay:Susan Haller	We examined gender differences and differences in Computer Science (CS) majors vs. non-majors in ability in quantitative areas, educational goals and interests, experience with computers, stereotypes and knowledge about CS, confidence, personality, support and encouragement, stress and financial issues, gender discrimination, and attitudes toward the academic environment in CS. What is unique to this investigation is its multivariate nature. While others have studied these variables in isolation, our study looks at them collectively to identify important interactions among variables. This will eventually allow us to identify a profile of women who pursue careers in CS. The findings are reported in detail below. Particularly noteworthy is that men had more confidence in using computers than did women even when statistically controlling quantitative ability. In fact, female CS majors had less computer confidence than did male non-majors.	Gender differences in computer science students	NA:NA:NA:NA:NA	2018
Ginger Holmes Rowell:Diane G. Perhac:Judith A. Hankins:Brenda C. Parker:Chrisila C. Pettey:Judith M. Iriarte-Gross	Computer-related gender differences are examined using survey responses from 651 college students. Issues studied include gender differences regarding interest and enjoyment of both using a computer and computer programming. Interesting gender differences with implications for teaching are examined for the groups (family, teachers, friends, others) that have the most influence on students' interest in computers. Traditional areas such as confidence, career understanding and social bias are also discussed. Preliminary results for a small sample of technology majors indicate that computer majors have unique interests and attitudes compared to other science majors.	Computer-related gender differences	NA:NA:NA:NA:NA:NA	2018
Joel C. Adams:Vimala Bauer:Shakuntala Baichoo	The gender imbalance in computer science in the U.S. and other countries has attracted much attention. This paper presents - for comparison - the computing-related gender ratios in Mauritius, a developing country in the Indian Ocean. These ratios suggest that far from being a universal phenomenon, the gender imbalance in the U.S. is a cultural problem.	An expanding pipeline: gender in mauritius	NA:NA:NA	2018
Mohammad Neilforoshan	NA	Session details: Architecture	NA	2018
Ewa Z. Bem:Luke Petelczyc	We developed the project presented in this paper for an undergraduate computer architecture course specifically aimed at non-engineering students. The project is designed to develop understanding of processor organisation at the functional unit level by building a series software execution driven simulators, from a single cycle sequential processor to a simple pipelined processor. The students are lead through the functional design process step by step, in a succession of carefully structured tasks. The project starts by building functional units of a processor. These units are then used to construct a single cycle processor, a multi cycle processor, and finally a pipelined processor with data hazard detection and forwarding. The main goal of the project is to give students a true insight into the fundamental ideas, which are the basis of the development of the modern microprocessor.	MiniMIPS: a simulation project for the computer architecture laboratory	NA:NA	2018
Brian Shelburne	The simple yet elegant architecture of the PDP-8 makes it an ideal candidate for study in a computer organization course. The PDP-8 provides an uncomplicated example of a von-Neumann architecture. It is easy to program in machine code or assembler. It can be used to demonstrate coding low-level I/O routines, subroutine calls, uses of indirect addressing and handling interrupts. This paper discusses how a PDP-8 simulator written by the author is used in a computer organization course.	Teaching computer organization using a PDP-8 simulator	NA	2018
Ariel Ortiz	This paper gives an overview of what the SIMD (single-instruction/multiple-data) parallel execution model is, and provides an approach for presenting it to undergraduate students. We specifically propose a few assembly language idioms and programming projects which we have successfully used in the past to teach this non-trivial topic.	Teaching the SIMD execution model:: assembling a few parallel programming skills	NA	2018
Alyce Brady	NA	Session details: Capstone courses	NA	2018
B. Olsson:M. Berndtsson:B. Lundell:J. Hansson	In this paper we discuss the difficulties of designing and running a final year project course for computer science and information systems students. In particular, we present the design of a research-oriented final year project course, where the aim is to develop the student's critical thinking and research skills. We also discuss the lessons learnt during the seven years that the course has been given.	Running research-oriented final year projects for CS and IS students	NA:NA:NA:NA	2018
Timothy Huang	In this paper, we discuss how Go, a strategy game widely played in Asia and other parts of the world, provides a rich, challenging environment for capstone and undergraduate research projects. We first describe the game itself and the characteristics that make it appropriate for more advanced undergraduate projects. We then discuss several projects that our students have pursued over the last three years, and we share observations that may be helpful to other computer science educators.	The game of go: an ideal environment for capstone and undergraduate research projects	NA	2018
Eric Allen:Robert Cartwright:Charles Reis	Students in programming courses generally write "toy" programs that are superficially tested, graded, and then discarded. This approach to teaching programming leaves students unprepared for production programming because the gap between writing toy programs and developing reliable software products is enormous.This paper describes how production programming can be effectively taught to undergraduate students in the classroom. The key to teaching such a course is using Extreme Programming methodology to develop a sustainable open source project with real customers, including the students themselves. Extreme Programming and open source project management are facilitated by a growing collection of free tools such as the JUnit testing framework, the Ant scripting tool, and the SourceForge website for managing open source projects.	Production programming in the classroom	NA:NA:NA	2018
Jesse Heines:Katy B√∂rner:Melody Y. Ivory:Edward F. Gehringer	Course Web sites are fast becoming standard features of college courses. Some students expect all their courses to have such sites, just like they expect them to have syllabi. Course Web sites help professors communicate with students and students communicate with each other. They might summarize lectures, present assignments, serve as repositories of examples developed by students as well as the professor, and provide links to additional related information on the Web.This panel will discuss various aspects of course Web sites, focusing on their development, maintenance, and use. We will share experiences by presenting examples, highlighting successes and failures, and describing our hopes and concerns for the future. The panel will welcome comments from those in the audience with similar and even contradictory experiences. Our intention is to broaden participants' thinking on the implementation and use of course Web sites and spawn insights that might lead to more effective use of this important course component.	Panel on the development, maintenance, and use of course web sites	NA:NA:NA:NA	2018
Daniel D. Garcia:David Ginat:Peter Henderson	NA	Everything you always wanted to know about game theory: but were afraid to ask	NA:NA:NA	2018
Jim Howatt	NA	Session details: Departmental concerns	NA	2018
Andrea Beth Campbell:Roy P. Pargas	This paper focuses on a rapidly growing population on many college and university campuses today: students equipped with laptop computers capable of wireless connection to the Internet. More and more departments are requiring that students enrolling in certain courses bring laptop computers to class. The course instructor is sometimes overwhelmed by the prospect, asking "How should I change my lesson plan in order to integrate the laptop in my daily lecture?" This paper first describes the effort to bring the laptop to campus at a number of colleges and universities around the country. It then offers concrete suggestions based on the experiences of several professors who either have taught, or are now teaching, laptop-required courses. The paper concludes with a summary and a look toward the future.	Laptops in the classroom	NA:NA	2018
Stuart Reges	This paper describes a program that uses undergraduates as teaching assistants to staff large computer science classes, particularly at the introductory level. Creating such a program at a state school presented special challenges, but the program has become a mainstay for the department's undergraduate program. The program has been so successful that we have expanded it to cover some sophomore and junior level courses, including a discrete mathematics course. Among the benefits of the program are reduced overall cost, improved quality of instruction, the formation of an undergraduate community and the practical experience that the undergraduate teaching assistants themselves gain.	Using undergraduates as teaching assistants at a state university	NA	2018
J McGrath Cohoon:Rebecca Shwalb:Lih-Yuan Chen	The rapid growth of computer science in both academia and industry creates a special problem with faculty turnover. This paper examines data from a national study of computer science departments to describe the circumstances surrounding faculty turnover in computer science and identify the major factors related to faculty departure. It concludes with suggested approaches for addressing the situation.	Faculty turnover in CS departments	NA:NA:NA	2018
Bill Teter	NA	Session details: Introductory networks	NA	2018
John Cigas	This paper describes a sophomore/junior-level laboratory course on network administration. The course aims to introduce networking concepts while emphasizing observation and measurement of network traffic. It utilizes an isolated laboratory of PCs running Linux along with numerous hubs, switches, and routers that can be rewired into multiple configurations. Being isolated from the campus network allows students complete administrative access without compromising campus security. Groups of students assemble their own LAN, attach it to the lab's "internet" backbone via a router, and then provide numerous common services like HTTP, DNS, and remote access to the rest of the lab. Once the room has a functioning internet, students examine various issues like encryption with TLS and ssh, as well as caching and load issues in retrieving different types of data from a web server. This paper covers the goals of the course, the laboratory setup, the exercises used in the course, and our experiences teaching the course.	An introductory course in network administration	NA	2018
Brian H. Cameron:Kay Wijekumar	Simulations are an important part of many traditional classes in Computer Networking. As web-based learning environments grow in popularity the need for simulations has become pronounced. This paper reports on a study to compare the performance of students enrolled in two web-based learning environments, one with a simulation package and the second with graphics and text only. Analysis shows statistically significant improvements in performance in the simulation group compared to the other group.	The effectiveness of simulation in a hybrid and on-line networking course	NA:NA	2018
Michael J. Jipping:Agata Bugaj:Liliyana Mihalkova:Donald E. Porter	A crucial part of the Networking course is the examination of and experimentation with network traffic data. Most standalone network traffic sniffers are quite expensive and those freely available on general purpose platforms (e.g., Linux or Windows) are quite cryptic. Because of this, we have developed NetSpy: a Java-based network sniffer that allows plug-in Java modules to analyze network data. These modules are written by students as part of their experimentation with traffic data. This paper describes the NetSpy system and the way we use this in Networking class.	Using Java to teach networking concepts with a programmable network sniffer	NA:NA:NA:NA	2018
Julie Barnes:Rob Bryant:Daniel D. McCracken:Susan Reiser	Most schools introduce HCI into the CS curriculum through a bootstrapping process. There are many excellent HCI programs at universities around the world, and some new faculty with HCI graduate degrees are starting to appear. But the extreme shortage of faculty forces most schools now starting to teach HCI to use the time-honored method of learning a subject by teaching it.Consensus: Insert HCI into any opening you can find. Learn more about the subject yourself. Let colleagues get comfortable with the idea. A required course in HCI may be some years off, or maybe you will never do exactly that, but you will have laid the foundation for getting HCI into your curriculum.	Teaching human-computer interaction: reports from the trenches	NA:NA:NA:NA	2018
Bill Marion	NA	Session details: Classroom management	NA	2018
William M. Waite:Michele H. Jackson:Amer Diwan	Concepts taught in large, lower-division computer science courses are carefully explained in standard textbooks. Thus we hypothesized that the classroom experience should not consist primarily of a restatement of those explanations by the professor. Instead, it should provide an opportunity for the students to learn through a process of conversation among themselves and with the professor. We were able to establish such a process in a sophomore-level course with an enrollment of 116 students. This change led to a doubling of the percentage of A and A- grades compared to historical values.	The conversational classroom	NA:NA:NA	2018
Michael Clancy:Nate Titterton:Clint Ryan:Jim Slotta:Marcia Linn	This paper describes our efforts to develop a new lab-based course format for computer science instruction. Building on learning science research, we created a flexible new technology platform to support students and their instructor as they participated in this new form of instruction. Students work collaboratively on Web-based activities while the instructor interacts with students in a tutorial role. The paper describes our system in detail, outlines the organization of the course that used it, and reviews and evaluates the pilot results. We then discuss the implications for computer science instruction and research in higher education.	New roles for students, instructors, and computers in a lab-based introductory programming course	NA:NA:NA:NA:NA	2018
Denise Woit:David Mason	For five academic years we have engaged in an on-going study of the effectiveness of online assessment of student programming abilities for introductory programming courses in Computer Science. Our results show that online evaluation can be implemented securely, efficiently, and can result in increased student motivation and programming efficacy; however, unless online components are integrated throughout the course evaluations, student competence will be underestimated. Our data reveals disadvantages of online evaluations, but also shows that both students and faculty benefit when online evaluations are implemented appropriately.	Effectiveness of online assessment	NA:NA	2018
Jane Prey:Ernest McDuffie:Harriet Taylor	This session will highlight NSF EHR Division of Undergraduate Education and CISE Division of Experimental and Integrative Activities programs of interest to college faculty, discussing the requirements and guidelines. It will include a discussion of the characteristics of a competitive proposal and the proposal process.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Jaime Nino	NA	Session details: Introductory programming	NA	2018
Raymond Lister:John Leaney	In the traditional norm-referencing approach to grading, all students in a CS1 class attempt the same programming tasks, and those attempts are graded "to a curve". The danger is that such tasks are aimed at a hypothetical average student. Weaker students can do little of these tasks, and learn little. Meanwhile, these tasks do not stretch the stronger students, so they too are denied an opportunity to learn. Our solution is two-fold. First, we use a criterion-referenced approach, where fundamentally different tasks are set, according to the ability of the students. Second, the differences in the nature of the tasks reflect the differing levels of Bloom's taxonomy. Weaker CS1 students are simply required to demonstrate knowledge and comprehension; the ability to read and understand programs. Middling students attempt traditional tasks, while the stronger students are set open-ended tasks at the synthesis and evaluation levels.	Introductory programming, criterion-referencing, and bloom	NA:NA	2018
H. Chad Lane:Kurt VanLehn	Coached program planning is a dialogue-based style of tutoring aimed at helping novices during the early stages of program writing. The intent is to help novices understand and solve problems in their own words through the construction of natural-language style pseudocode as the first step in solving a programming problem. We have designed an environment supporting coached program planning and have used it in a human-to-human, computer-mediated evaluation of 16 novice programmers enrolled in a pre-CS1 programming course at the University of Pittsburgh. The results show that students who underwent coached program planning, compared to those who did not, were more prolific with comments in their programs, committed fewer structural mistakes, and exhibited less erratic programming behavior during their implementation. The dialogues collected from this experiment followed a clear 4-step pattern. Starting with this observation, we are developing a dialogue-based intelligent tutoring system called the Pseudocode Tutor to support coached program planning.	Coached program planning: dialogue-based support for novice program design	NA:NA	2018
Maria Hristova:Ananya Misra:Megan Rutter:Rebecca Mercuri	Programming in Java can be a daunting task for introductory students, one that is only compounded by the cryptic compiler error messages they see when they first start to write actual code. This article details a project conducted by faculty and advanced students in the creation of an educational tool for Java programming, called Expresso. This paper discusses some existing programming tools, explains their drawbacks, and describes why Expresso is different. We also include a detailed list of typical errors made by novice programmers, used in the construction of the Expresso tool.	Identifying and correcting Java programming errors for introductory computer science students	NA:NA:NA:NA	2018
James Cross	NA	Session details: Visualization	NA	2018
Michael T. Grinder	The FSA Simulator is a Java program created to allow computer science students to work and experiment with finite state automata (FSAs). One of its unique features is the ability to compare the languages of two FSAs. This FSA comparison feature lets the software give students feedback about the accuracy of their work as they do exercises, guiding them toward a correct solution. This paper discusses some preliminary experiments performed to determine the effect of this feedback mechanism on students' learning. Two experimental labs were conducted, the results of which suggest that this feature improved students' success rate when doing exercises, but did not appear to significantly improve the students' performance when the comparison feature was not available.	A preliminary empirical evaluation of the effectiveness of a finite state automaton animator	NA	2018
Ayonike Akingbade:Thomas Finley:Diana Jackson:Pretesh Patel:Susan H. Rodger	We present JAWAA 2.0, a scripting language for creating animations easily over the web. JAWAA includes primitives, easy creation of data structures and operations on these structures, and an editor for easy creation of complex objects. We show how to use JAWAA in a range of computer science courses including CS 0, CS 1, CS 2 and advanced courses. Instructors can quickly build animations for demos in lecture, and students can enhance their programming projects with an animation.	JAWAA: easy web-based animation from CS 0 to advanced CS courses	NA:NA:NA:NA:NA	2018
Jeff Lucas:Thomas L. Naps:Guido R√∂√üling	Graphs and graph algorithms play an important role in undergraduate data structures and algorithms courses. However, they often also represent the first case where both the correctness and the underlying concepts of the algorithms are not evident. Both students and educators can therefore benefit from a simple yet expressive tool for coding graph algorithms and then conveniently visualizing them. We present such a tool, derived from a set of instructional requirements, and give an example application.	VisualGraph: a graph class designed for both undergraduate students and educators	NA:NA:NA	2018
John Hill	NA	Session details: Operating systems	NA	2018
Andrew T. Phillips:Jack S.E. Tan	By exploiting a well known security vulnerability in many C library implementations, it is possible for an unprivileged user to gain unrestricted system privileges. With an understanding of how the process execution stack is allocated and managed during process execution, a user can override the return address of a C library routine and thereby resume execution at a different address where a set of malicious functions can be invoked [1]. This is known as the buffer overflow exploit. With buffer overflow as the underlying theme, an example will be described using C and the MIPS assembly language that simultaneously exposes students to issues in computer security, operating systems concepts such as memory management and function invocation/return, and the MIPS instruction set architecture.	Exploring security vulnerabilities by exploiting buffer overflow using the MIPS ISA	NA:NA	2018
Steven Robbins	Students often have difficulty visualizing, understanding and debugging concurrent programs. Programming assignments involving concurrency are also difficult to grade. The output alone is not sufficient because the print statements from cooperating threads or processes can interfere with each other and garble the results. The remote logging tool described here allows multiple processes or threads to atomically log messages to a local or remote host. Different views of the messages are available in real time through a graphical user interface (GUI). The tool consists of two parts, a library for adding logging commands to a user program and a GUI for presenting different views of the logged messages. A separate logging library is needed for each programming language (e.g., C, C++, Java), but a single GUI works with all of these. A C logging library and a general GUI are available on the web.	Using remote logging for teaching concurrency	NA	2018
John M. D. Hill:Clark K. Ray:Jean R. S. Blair:Curtis A. Carver, Jr.	Because students have different learning styles, it's important to incorporate multiple teaching techniques into the classroom experience. One such technique is the use of puzzles and games in the classroom to reinforce the learning objectives. Many topics in Computer Science are well suited for coverage in such a game. Several in-class puzzles and games have been used in the Computer Science program at this institution in recent years. In basic and advanced courses, simple crossword puzzles reinforce terminology and Jeopardy!¬Æ-style games help students master material with short answers. In the most recent iteration of the Operating Systems course, a BattleThreads game and a Process State Transition game helped students appreciate different approaches to process and thread management. The latter two games have been assessed for their effectiveness, providing several insights into what makes a good in-class game for teaching operating systems concepts, and how the existing games can be improved.	Puzzles and games: addressing different learning styles in teaching operating systems concepts	NA:NA:NA:NA	2018
Sandra DeLoatch:Henry Walker:Frank H. Young	Each year a small group of computer science educators are selected to become chairs of their departments. This experience is often referred to as "losing the lottery." The panelists have a different view. We believe that department chairs make important contributions to the success of their departments. Department chairs help new faculty develop as educators and professionals. Department chairs help to create an environment where students and faculty can enjoy their work and be productive. Department chairs can facilitate curriculum development and change, thereby helping keep the department's offerings current.The panelists have experience in a variety of educational environments. All have served as department heads. All have had to deal with the normal problems that department heads deal with - recruiting new faculty, obtaining funds for equipment, getting adequate funds for faculty salaries, acquiring technical support personnel, dealing with rapid increases in the number of majors, arranging teaching schedules, assisting with grant proposals, etc.Most department chairs have little or no guidance as they begin their tenure. This panel is an attempt to alleviate this problem. The panelists believe that their experiences can help new department chairs adjust to the multiple and sometimes conflicting demands of their new job.	On serving as department chair: suggestions from veterans	NA:NA:NA	2018
William Marion:Adrienne Bloss:Kris Powers:Doug Baldwin	NA	How departments are responding to the mathematics recommendations in CC2001	NA:NA:NA:NA	2018
Joel Adams	NA	Session details: Introduction to OO	NA	2018
Stephen Cooper:Wanda Dann:Randy Pausch	An objects-first strategy for teaching introductory computer science courses is receiving increased attention from CS educators. In this paper, we discuss the challenge of the objects-first strategy and present a new approach that attempts to meet this challenge. The new approach is centered on the visualization of objects and their behaviors using a 3D animation environment. Statistical data as well as informal observations are summarized to show evidence of student performance as a result of this approach. A comparison is made of the pedagogical aspects of this new approach with that of other relevant work.	Teaching objects-first in introductory computer science	NA:NA:NA	2018
Nira Herrmann:Jeffrey L. Popyack:Bruce Char:Paul Zoski:Christopher D. Cera:Robert N. Lass:Aparna Nanjappa	We report here on an extensive redesign and unification of the Introductory Computer Programming sequences offered to computer science, computer engineering, information science and digital media majors. The redesign is intended to improve student learning while reducing costs. The approach makes use of substantial Web-based course material and course management tools, including multi-level online modules that individualize instruction and enable students to self-schedule learning each week. Each module covers a particular aspect of computer programming at different levels of knowledge. Students are assigned work and reading from the module at a level appropriate to the objectives of the long-term goals of their major. This allows students in different majors to acquire the appropriate skill level for each technique and concept. Peer mentors and teaching assistants provide assistance online or in person. In the future, we plan to expand the self-scheduling aspect of the course to allow students to enter the course at different modules, depending on their previous knowledge.	Redesigning introductory computer programming using multi-level online modules for a mixed audience	NA:NA:NA:NA:NA:NA:NA	2018
Dean Sanders:Brian Dorn	Jeroo is a tool that has been developed to help students in beginning programming courses learn the semantics of fundamental control structures, learn the basic notions of using objects to solve problems, and learn to write methods that support a functional decomposition of the task. Jeroo is similar to Karel the Robot and its descendants, but has a narrower scope than Karel's descendants and has a syntax that provides a smoother transition to either Java or C++. Jeroo has been class tested at Northwest Missouri State University, and has proven to be an effective tool for working with students in a beginning programming class. Jeroo and user documentation are available at http://www.nwmissouri.edu/~sanders/Jeroo/Jeroo.html.	Jeroo: a tool for introducing object-oriented programming	NA:NA	2018
Karen Anewalt	NA	Session details: Data structures	NA	2018
Kevin R. Burger	Two-dimensional arrays (2d-arrays) are fundamental data structures in many software programs and must be mastered by beginning programming students. Teachers of introductory programming are challenged to devise new and interesting exercises for teaching 2d-array concepts. We believe image processing (IP) examples can provide stimulating, challenging, and fun exercises for students. We describe briefly the new Java2 Image I/O API and show how it can be used to read and write images in GIF, JPEG, and PNG formats. We also provide Java code for an Image class that hides the complexity of this API from the student. We conclude with several sample student exercises that can be used to teach 2d-array programming.	Teaching two-dimensional array concepts in Java with image processing examples	NA	2018
Josh Tenenberg	This paper advocates the incorporation of object oriented framework libraries such as the Standard Template Library (STL) into the first data structures course at the university level. This represents a shift from learning the details of each data structure to an increased emphasis on the use, integration, and extension of these existing frameworks, as well as on the learning of higher-order design and engineering skills.	A framework approach to teaching data structures	NA	2018
Alistair E. R. Campbell:Geoffrey L. Catto:Eric E. Hansen	We introduce the Language-Independent Visualization Environment (LIVE) as a system for the visualization and manipulation of data structures and the computer programs that create and operate on them.LIVE interprets arbitrary programs containing arbitrary data structure definitions, showing diagrammatically the data that the process generates.It is language-independent in that a single program can be visualized in the syntax of multiple languages. LIVE is interactive in that not only does it show the effects of statements immediately as they occur at runtime, but it also generates new program source code automatically when the user manipulates the data on the screen. We anticipate that this tool will be most useful in a pedagogical setting such as a CS2 or data structures course, particularly with the introduction of pointers and linked structures.	Language-independent interactive data visualization	NA:NA:NA	2018
Mario Guimaraes	NA	Session details: Upper level courses	NA	2018
Doug Baldwin	Projects in which students write a small compiler are common in compiler design courses, but even a small compiler can be daunting to students with no prior compiler-writing experience. When I recently taught compiler design, I developed a very small language with a highly modular compiler, focusing the project on implementing the core parts of a compiler without requiring students to build all the infrastructure from scratch. This paper describes the language and its compiler, and their successes (and occasional limitations) for teaching compiler design.	A compiler for teaching about compilers	NA	2018
Paul J. Wagner:Elizabeth Shoop:John V. Carlis	Database systems instructors face an ongoing challenge to develop meaningful assignments for their courses. We have found that instructors can successfully use large scientific datasets in teaching a database systems course to better prepare students for real-world database systems work.	Using scientific data to teach a database systems course	NA:NA:NA	2018
Arthur H. Lee	Instruction on web programming at an advanced level in computer science has been in high demand in recent years. The topics and technologies in this area are so vast and diverse that designing and teaching a course requires vast knowledge and the ability to select coherent topics and technologies that can be presented in a semester. The students should learn enough of the underlying fundamental concepts along with the selected technologies so that they can practise in the real world setting while being able to adapt and expand beyond what was taught in class. Very few courses of this kind if any have been taught. We describe such a course, called Web Software Architecture, that we created and have taught successfully last Spring. It is a junior/senior level computer science elective course that uses Java, Servlets, JavaServer Pages, HTML, JavaScript, JDBC, and the Apache-Tomcat web server as key technologies. Our experience supports the assertion that such a web programming course has a legitimate place in a computer science curriculum.	A manageable web software architecture: searching for simplicity	NA	2018
James Huggins:Joseph Bergin:James Caristi:Ellen Walker	NA	Survivor: getting through that class the first time	NA:NA:NA:NA	2018
Peter B. Henderson:William Barker:Susanna Epp:William Marion	NA	Math educators, computer science educators: working together	NA:NA:NA:NA	2018
Seth Bergmann	NA	Session details: Breadth-first approach	NA	2018
Andrew T. Phillips:Daniel E. Stevenson:Michael R. Wick	A first course in computer science that loosely follows the Computing Curricula 2001 report is described. This course blends theory and practice, highlights algorithm design, introduces a modest amount of imperative programming, and uses an Internet algorithmics theme to tie the topics together and keep the course both challenging and interesting to those with and without previous computing experience.	Implementing CC2001: a breadth-first introductory course for a just-in-time curriculum design	NA:NA:NA	2018
Kris D. Powers	In the fall of 2002 our institution will begin teaching a new computer science curriculum based on the guidelines set forth in Computing Curricula 2001. Of particular interest in this new curriculum is our "breadth-also" approach to a lower-level core. In general, a breadth-also model incorporates topics from across the discipline of computer science into an expanded, programming-first introductory sequence. In this paper we present our specific implementation of this model, and argue its potential to significantly improve learning.	Breadth-also: a rationale and implementation	NA	2018
Christine Shannon	In an effort to serve the needs of both majors and non-majors, the Computer Science Department at Centre College has restructured the CS I course so that it uses the language Python, devotes more attention to the Internet and the World Wide Web, addresses ethical and societal issues, and introduces students to programmable robots and an SQL database. This diverse course has been attractive to the students while still maintaining a strong emphasis on programming.	Another breadth-first approach to CS I using python	NA	2018
Bill Oblitey	NA	Session details: Networks	NA	2018
Prabhaker Mateti	We developed a laboratory-based course on Internet Security. The course is aimed at the senior undergraduate. This paper discusses the course and explains how others can set up their own labs to teach this course. All the laboratory work is conducted in a laboratory of PCs running Linux. We developed lecture notes for the course, and a web site to widely disseminate these materials.	A laboratory-based course on internet security	NA	2018
Surendar Chandra	This paper describes a peer-to-peer (p2p) system (beacond) that is suitable for teaching important concepts in ubiquitous computing. The system exposes issues in peer location, p2p services, security and privacy issues. The system provided enough background to compliment class lectures and assisted students in designing their own course projects. Students continue to explore ideas exposed by beacond; some of these ideas are being further developed for publication in research conferences[1]. We present our experiences in using this framework for three different course offerings.	Beacond: a peer-to-peer system to teach ubiquitous computing	NA	2018
Peter Steenkiste	A difficult problem in networking courses is to find hands-on projects that have the right balance between the level of realism and complexity. This is especially true for projects that focus on the internal functionality of routers and other network devices. We developed a capstone course called "Network Design and Evaluation" that uses a network processor-based platform for networking projects. This platform is more realistic than traditional approaches based on software emulation environments or PC-based routers running Unix, but it is significantly less complex to work with than real commercial routers or even PC-based routers. We are currently teaching this course for the third year, and our experience has been extremely positive. Students enjoy the realism of the platform and not only learn a lot about the internal operation of the network, but also about network configuration and management.	A network project course based on network processors	NA	2018
Sue Fitzgerald:G. Michael Schneider:Robert M. Aiken:Barry Fagin	NA	The fulbright program: international teaching and curriculum development experiences	NA:NA:NA:NA	2018
Peter Van Roy:Joe Armstrong:Matthew Flatt:Boris Magnusson	The purpose of this panel is to confront the wide variety of opinions on the role of language paradigms in teaching programming. We have selected four divergent opinions:Armstrong says that concurrent programming is considered difficult because it is taught in the wrong paradigm, namely imperative or object-oriented programming. Instead, concurrency should be taught using a paradigm that makes it simple.Flatt says that everyone should be taught how to program, not just computer science majors. Further, programming should be taught as an extension of what students already know, which is algebra. More important than a particular paradigm, however, is teaching students a design process.Magnusson says that object-oriented programming must be the first and principal paradigm, because it is best for teaching how to analyze problems and structure solutions. Other paradigms can be taught after students have a solid understanding of OO.Van Roy says that programming should be taught in terms of concepts, not paradigms. Common paradigms (functional, OO, etc.) then appear naturally, depending on the concepts used..The panel will confront these opinions to enrich our understanding of how to teach programming.	The role of language paradigms in teaching programming	NA:NA:NA:NA	2018
Scot Drysdale:Judith Hromcik:Mark Allen Weiss:Reg Hahne	With the Java language replacing C++ on the 2004 AP CS Exam, teachers need to be informed about the changes that must be implemented to support an OO approach to programming. This special session will include a retrospective look at the motivation behind the change to an object-oriented language, the process undertaken to select a testable language subset, the need to continue the development and classroom implementation of a Case Study, and a look at how the shift from an object-based approach to programming in C++ to an OO approach in Java leads to curriculum modification.The AP CS Development Committee's charge is to not only provide a comprehensive testing mechanism, but also advise, through various publications, a direction that high school teachers should take in preparing a foundation for more advanced student studies during college. This special session will bring together two college and two high school members of the AP CS Development Committee to share some of their insights into how the experts do it. Time will be provided to discuss participant's questions.	Java in the morning...Java in the evening...Java in 2004	NA:NA:NA:NA	2018
Chenglie Hu	NA	Session details: Objects	NA	2018
Joel Adams:Jeremy Frens	Object-centered design (OCD) is a methodology developed to help novice C++ programmers learn to design software. By adapting OCD for use with Java, we can reduce the number of phases in OCD from five to three, and introduce object-oriented design (OOD) in CS-1 instead of CS-2.	Object centered design for Java: teaching OOD in CS-1	NA:NA	2018
Daniel E. Stevenson:Andrew T. Phillips	A standard practice in object-oriented programming is to implement an operation, called equals in Java, for testing the equality of two objects. The equals method should be defined for every new Java class, but because of the intricacies of inheritance, casting, and dynamic typing, equals is often quite difficult to write correctly. And unfortunately many textbooks present flawed implementations of this operation. In this paper, we present a semantically correct technique for testing object equivalence, a technique that simultaneously brings together important mathematical foundations (equivalence relations), practical programming issues (inheritance, casting, dynamic typing), and sound software design (design patterns) in a natural and compelling way. While Java is used to demonstrate how the semantic flaws are corrected and the design improved using our techniques, the design is general enough that it will be clear how the same ideas could easily be extended to other languages such as C++.	Implementing object equivalence in Java using the template method design pattern	NA:NA	2018
Michael R. Wick	Computer science has a relatively stable collection of time-tested pedagogical programming examples. With the infusion of object-oriented concepts into the core computer science curriculum, many of these examples are being replaced with newer examples that are more focused on demonstrating the particular object-oriented features of interest. But classic computer science examples can be refactored to include the important object-oriented topics as well, all the while maintaining the time-tested pedagogical benefits of the original example. This paper presents a case study of this refactoring by demonstrating how the classic Huffman encoding example can be modeled to integrate important object-oriented concepts.	An object-oriented refactoring of Huffman encoding using the Java collections framework	NA	2018
Ann Quade	NA	Session details: Active learning	NA	2018
Ray Giguette	Many CS1 and CS2 instructors have been using game-like assignments and manipulatives to increase student understanding of abstract concepts. A related approach described in this paper requires students to play a game-like version of each assignment (referred to as the "pre-game") before designing and coding their own programs. Students complete a prototype of the pre-game that uses simpler I/O but otherwise follows the same specification. By playing the pre-game, students become familiar with lesson principles using a concrete example that combines the advantages of both game-play and manipulatives. Ideally, the pre-game creates an environment that both encourages experimentation, and allows students to use their intuition when designing algorithms and data structures.	Pre-games: games designed to introduce CS1 and CS2 programming assignments	NA	2018
Dennis J. Bouvier	Previous Computer Science Education research incorporating Common Learning Experiences (CLEs) into freshman level breadth-first Computer Science course inspired the author to undertake similar work for a depth-first course. This paper presents a set of CLEs developed for this purpose, namely the 'Living Flowcharts CLEs', along with a discussion of the pilot study and the preliminary results.	Pilot study: living flowcharts in an introduction to programming course	NA	2018
Shannon Pollard:Jeffrey Forbes	Often in teaching an introductory computer science course for non-majors, a primary focus on building programming skills is neither practical nor effective. Many instructors choose a breadth-first approach focusing on building problem solving skills and surveying computer science. This paper argues that conducting hands-on labs where students work together to physically implement algorithms is an effective supplement for programming labs on the computer. We present lab examples and summarize our experiences.	Hands-on labs without computers	NA:NA	2018
Lillian N. Cassel:John Impagliazzo:Ann Lally:Edward A. Fox:Manuel A. P√©rez-Qui√±ones:Jane Prey	The NSDL consists of collections of materials accessible online, as well as many tools and services intended to enhance learning. Tools and services will support students and as well as faculty. This session will provide a status report on the state of the NSDL, its content, tools, and services. The session includes specific presentations of several services included in the NSDL. Session attendees discuss current and proposed initiatives, and offer suggestions about needs of highest priority.	Report on the NSF major educational funding initiative for a National Science, Technology, Engineering, and Mathematics Education Digital Library (NSDL) with special emphasis on the Computing Education component	NA:NA:NA:NA:NA:NA	2018
Vicki L. Almstrum:David Ginat:Orit Hazzan:John M. Clement	During the ITiCSE 2002 conference in √Örhus, Denmark, a panel presentation on the topic of import to and export from Computing Science Education and other fields focused on the case of Mathematics Education Research. The outcome was very successful, with the panelists' presentations giving rise to active audience participation.Continuing with the theme from the earlier panel, this proposal suggests a similar format with the expanded theme of transfer into Computing Science Education from Science Education Research. This panel will look at how research theories developed in the context of various areas of science education can be applied to Computing Science Education as well as ways in which computing science educational theories may be used in those areas. Because Computing Science Education is a young discipline, it is still in search of its research framework [2]. In formulating such a framework, it can be practical and productive to adapt approaches from research in other disciplines, both educational and related areas. At the same time, the younger discipline can offer innovative new approaches to the older discipline.The panelists will examine possibilities and difficulties in some import and export attempts between several areas of Science Education Research and Computing Science Education. For this context, science is considered to include mathematics.	Transfer to/from computing science education: the case of science education research	NA:NA:NA:NA	2018
Allen Tucker:Fadi Deek:Jill Jones:Dennis McCowan:Chris Stephenson:Anita Verno	This special session will report on the work of the ACM K-12 Computer Science Curriculum Committee, whose charge is to design a model curriculum for K-12 computer science that can be widely implemented. It will also gather feedback from attendees on the content and direction of that work.	Toward a K-12 computer science curriculum	NA:NA:NA:NA:NA:NA	2018
Reza Sanati, Utah Valley State College Reza Sanati, Utah Valley State College	NA	Session details: Robotics	NA	2018
Barry Fagin:Laurence Merkle	We report the results of a year-long experiment in the use of robots to teach computer science. Our data set compares results from over 800 students on identical tests from both robotics and non-robotics based laboratory sessions. We also examine the effectiveness of robots in encouraging students to select computer science or computer engineering as a field of study.Our results are negative: test scores were lower in the robotics sections than in the non-robotics ones, nor did the use of robots have any measurable effect on students choice of discipline. We believe the most significant factor that accounts for this is the lack of a simulator for our robotics programming system. Students in robotics sections must run and debug their programs on robots during assigned lab times, and are therefore deprived of both reflective time and the rapid compile-run-debug cycle outside of class that is an important part of the learning process. We discuss this and other issues, and suggest directions for future work.	Measuring the effectiveness of robots in teaching computer science	NA:NA	2018
Susan P. Imberman	In this paper we propose a novel method for teaching neural networks with back propagation in an undergraduate Artificial Intelligence course. We use an agent based approach in the course, as outlined in the textbook Artificial Intelligence A Modern Approach by Stuart Russell and Peter Norvig [7]. The students build a robot agent whose task is to learn path-following behavior with a neural network. Robot agents are constructed from standard LEGO pieces and use the MIT Handy Board as a controller.	Teaching neural networks using LEGO handy board robots in an artificial intelligence course	NA	2018
Douglas Blank:Lisa Meeden:Deepak Kumar	This paper describes Pyro, a robotics programming environment designed to allow inexperienced undergraduates to explore topics in advanced robotics. Pyro, which stands for Python Robotics, runs on a number of advanced robotics platforms. In addition, programs in Pyro can abstract away low-level details such that individual programs can work unchanged across very different robotics hardware. Results of using Pyro in an undergraduate course are discussed.	Python robotics: an environment for exploring robotics beyond LEGOs	NA:NA:NA	2018
Susan Haller	NA	Session details: Attracting majors	NA	2018
Sandy Graham:Celine Latulipe	Declining female enrollment in undergraduate Computer Science programs is a serious problem. Part of the solution lies in retaining more of the female students currently enrolled; even more important, however, is increasing initial enrollment. Many believe lack of interest to be rooted in stereotypes of computer science formed early in high school: that it is a boring subject, devoid of interesting applications and stimulating only to 'geeks'. To attract high school females to CS, and to determine whether early exposure to the interesting breadth of CS and its applications might ameliorate such attitudes, a week-long Computer Science Seminar for Grade 9 and 10 girls was held at the University of Waterloo. The seminar consisted of lectures, labs and activities chosen to demonstrate the breadth of CS and to dispel the negative stereotypes. Pre- and post-seminar surveys indicate a substantial increase in interest, translating directly into increased desire to take high school CS courses.	CS girls rock: sparking interest in computer science and debunking the stereotypes	NA:NA	2018
Paolo A. G. Sivilotti:Murat Demirbas	During summer 2002, we ran a workshop module for a group of 28 eighth-grade girls. Our aim was ambitious: to introduce these students, ages 12 and 13, to computer science by focussing on the deep intellectual topic of self-stabilizing distributed algorithms and by imparting an intuitive appreciation for their use in fault tolerance. At the same time, we hoped to dispel some negative stereotypes of computer science. The module was a success according to evaluations and comments from the participants. This paper describes the sequence of exercises we developed as an elementary-level introduction to the graduate-level topics of fault tolerance and self-stabilization. We report them with the hope that others will try them in college classrooms, as we plan to do.	Introducing middle school girls to fault tolerant computing	NA:NA	2018
Peter B. Henderson	The Indiana Student Software Awards Competition (ISSAC) was created to encourage students in the state of Indiana to improve their software development skills, to potentially consider a career in information technology, and to help stem the flow of graduates out of Indiana - "the brain drain". High school or college students who develop a software project for class, personal enrichment or corporate internships may submit a project. ISSAC 2003 is the third year of the competition. Finalist projects are judged at the annual Indiana Technology Summit, and students are awarded scholarships and plaques based upon the overall quality and functionality of their software.	ISSAC: Indiana student software awards competition	NA	2018
Deborah Hwang	NA	Session details: Reading, writing, and recursion	NA	2018
Michael Eisenberg	Computer science has a reputation of being a discipline in a perpetual state of accelerated progress-a discipline in which our techniques, our hardware, our software systems, and our literature rarely exhibit a staying power of more than several years. While undeniably exciting, this state of continual intellectual upheaval can leave computer science students (and faculty) with a disturbing sense that there is no essential core of great work within the discipline. This paper describes a readings course entitled "Computer Science: the Canon" whose purpose is to counter this perception by exploring a set of "great works" in computer science. We describe our own (undoubtedly idiosyncratic) reading list used for the course, and discuss several central issues involved in offering such a course within a computer science curriculum.	Creating a computer science canon: a course of "classic" readings in computer science	NA	2018
Lisa C. Kaczmarczyk	Writing skills need to be integrated into the Computer Science (CS) curriculum, and there is little empirical evidence on how best to do so. This paper first describes a technical writing class for CS undergraduates. Then it presents the results of a statistical study that investigated student perceptions of their learning experience in three areas: skill mastery, self-efficacy, and motivation. Positive results support this approach to teaching writing to CS students. Some unexpected findings in all three areas highlight why monitoring student perceptions is important for CS educators.	A technical writing class for computer science majors: measuring student perceptions of learning	NA	2018
Tina G√∂tschi:Ian Sanders:Vashti Galpin	Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion can be termed their mental model of recursion. A student's mental model is viable if it allows them to accurately and consistently represent the mechanics of recursion. Non-viable mental models are constructed if students have misconceptions about the mechanisms of recursion or have misconceptions about concepts fundamental to recursion. This paper presents a study of the mental models of recursion that first year students at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It was found that while the majority of students constructed the viable copies model, many non-viable models such as the looping, active, step, magic, return-value and various odd models were also constructed. Identifying the models that students have can allow lecturers to target individual students' specific problems and analysis of the models can provide insight into learning.	Mental models of recursion	NA:NA:NA	2018
D. Paul Benjamin:Charles Border:Robert Montante:Paul J. Wagner	NA	Undergraduate cyber security course projects	NA:NA:NA:NA	2018
Nick Parlante:Jeffrey Popyack:Stuart Reges:Stephen Weiss:Scott Dexter:Chaya Gurwitz:Joseph Zachary:Grant Braught	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
John Impagliazzo:Robert Sloan:Andrew McGettrick:Pradip K. Srimani	NA	Computer engineering computing curricula	NA:NA:NA:NA	2018
Jeffrey L. Popyack:Nira Herrmann:Paul Zoski:Bruce Char:Chris Cera:Robert N. Lass	Advances in computing and telecommunication technology provide abundant new opportunities for academic dishonesty. Anecdotal evidence suggests that students are far more aware than faculty of various mechanisms for cheating on exams, plagiarizing assignments, and soliciting work for pay. Fortunately, technological advances also provide the alert instructor with some tools for combating such academic dishonesty.In this session, we will present information on how calculators, cell phones, beepers, and other handheld technology may be used to cheat on exams; how the Internet is used to match students with sources for solutions to their assignments; and existing tools and services for the faculty member.The intention of this session is to inform faculty about various ways that students may commit academic fraud; and tools and approaches that are available to reduce their effectiveness. We also hope to gain further information from other faculty and/or students in attendance. We do not intend to debate whether these activities should be allowed due to the ease with which they are committed, as is often discussed.We will provide a bibliography of articles about high-tech academic dishonesty, software tools and services for detecting plagiarism (including shared code in programming assignments), and Internet resources.	Academic dishonesty in a high-tech environment	NA:NA:NA:NA:NA:NA	2018
David Ginat	NA	Session details: Collaborative learning	NA	2018
Nachiappan Nagappan:Laurie Williams:Miriam Ferzli:Eric Wiebe:Kai Yang:Carol Miller:Suzanne Balik	Pair programming is a practice in which two programmers work collaboratively at one computer, on the same design, algorithm, or code. Prior research indicates that pair programmers produce higher quality code in essentially half the time taken by solo programmers. An experiment was run to assess the efficacy of pair programming in an introductory Computer Science course. Student pair programmers were more self-sufficient, generally perform better on projects and exams, and were more likely to complete the class with a grade of C or better than their solo counterparts. Results indicate that pair programming creates a laboratory environment conducive to more advanced, active learning than traditional labs; students and lab instructors report labs to be more productive and less frustrating.	Improving the CS1 experience with pair programming	NA:NA:NA:NA:NA:NA:NA	2018
Lynda Thomas:Mark Ratcliffe:Ann Robertson	This paper reports on how first-year students who have programmed before see their programming interest and ability and how this self-perception relates to their performance in the introductory programming course. In particular we examine how this self-perception is reflected in their reactions to the pair-programming technique for developing software.Students who had programming experience before University were given a survey that placed them on a scale that we have called Code Warrior to Code-a-phobe. We then placed them in 'opposite' and 'similar' pairs for a pair programming exercise and surveyed their reactions. There was evidence that students who have considerable self-confidence do not enjoy the experience of pair programming as much as other students and that students produce their best work when placed in pairs with students of similar self-confidence levels.	Code warriors and code-a-phobes: a study in attitude and pair programming	NA:NA:NA	2018
Anthony Joseph:Mabel Payne	This work resulted from an investigation of the activities component of group dynamics in collaborative (or cooperative) groups for two undergraduate sections of computer architecture taught in spring 2002. A cooperative group is a special type of small group consisting of two to four persons. Collaborative learning as used here is a central component of the author devised integrative cooperative learning teaching technique. The hypothesis for this study is that the greater a student's level of within group course related activities for the imposed course assignments, the higher the student's relative course outcomes. To examine this hypothesis, an analysis of the relationship between a student's group activity and course outcomes was done. The sources of data were the student coordinator assessments and student journals compiled throughout the semester. The results of the analyses of the 63 students in the two sections of the undergraduate computer architecture course substantiated the hypothesis that the more a student participates in out-of-class collaborative academic group activity, the greater the student's achievement.	Group dynamics and collaborative group performance	NA:NA	2018
Uta Ziegler	NA	Session details: Graphics	NA	2018
Steve Cunningham:Angela B. Shiflet	Computer graphics is an important part of a working scientist's toolkit. The graphics may be provided by resources with the scientist's group or by capabilities of the toolkits that the scientist uses directly in his or her work. However, in order for the scientist to understand how computer graphics images represent models and what possibilities there are for this representation, and for the occasional time when the scientist may want to create a presentation that is beyond the capability of standard tools, it is important for the science student to understand the basic capabilities and processes of computer graphics. This paper outlines how a computational science program can give students the background they need to have this understanding.	Computer graphics in undergraduate computational science education	NA:NA	2018
Alexander A. Sherstov	DisViz is a visualization tool designed to assist students in learning graph algorithms, an important topic in the undergraduate curriculum. DisViz is intended for collaborative use by a group of students over a classroom network. This visualization system views network hosts as graph nodes and the socket connections among them, as graph edges. In typical usage, every student runs a copy of DisViz on his/her local machine. These applications detect each other's presence on the network and coordinate their actions to execute the graph algorithm in question and to deliver identical animations to every terminal.	Distributed visualization of graph algorithms	NA	2018
John Lowther:Ching-Kuang Shene	This paper describes the authors' approach of introducing important concepts and algorithms of B-splines to junior computer science students with the help of a pedagogical tool DesignMentor. This approach is non-mathematical and intuitive, and has been used and refined in the past six years.	Teaching B-splines is not difficult!	NA:NA	2018
Asad Khailany	NA	Session details: Using the web	NA	2018
Dale Reed:Sam John	The World Wide Web is increasingly becoming an integrated extension of users' computing environments, with content indexed and retrieved through Web browsers. Web browsers are increasingly being used as computer science curriculum delivery mechanism, for both books delivered as local content on CD ROMs as well as server-based material.Traditional computer science curriculum has often been presented through static printed media. What has been printed ahead of time in books or handouts can not be changed. Any changes would have to be attached externally by way of scribbled notes or explanations on the board. The Web gives us the technological affordances to change that, both for students and teachers.The original page remains unchanged, however the user's version of the page is filtered, adding, subtracting and changing web page elements, giving an enhanced view. A demonstration version of the Web Annotator can be downloaded from: http://logos.cs.uic.edu/Annotator.	Web annotator	NA:NA	2018
J. E. Labra Gayo:J. M. Morales Gil:A. M. Fern√°ndez √Ålvarez:H. Sagastegui Chigne	We describe the main features of an Internet based distance learning environment that we are developing to teach a course on logic and functional programming for computer science students. The main goal of the system is to provide a minimal set of capabilities for a generic interpreter that will be instantiated for different programming languages and paradigms. The architecture of the system is based on the use of XML and web services to facilitate the integration and independence between the different development platforms and systems.	A generic e-learning multiparadigm programming language system: IDEFIX project	NA:NA:NA:NA	2018
Joseph L. Zachary:Peter A. Jensen	Online courses have proliferated across all disciplines in recent years. One commonly-used approach for creating an online course is to build a web site containing as much course information---assignments, solutions, lecture notes, streaming videos, and the like---as possible. The goal of this type of course is to replicate online, to the maximum extent possible, the classroom experience. Online courses built this way exploit the communications capabilities of networked computers. We believe, however, that online courses should also strive to exploit the computational capabilities of computers. That is, online courses should provide value-added components that make possible learning experiences beyond what is feasible in the traditional classroom. We describe such an online course, called Creating Interactive Web Content, that we created and have taught successfully for the last three years. It is a general enrollment course that uses HTML and JavaScript as a vehicle for teaching elementary programming concepts.	Exploiting value-added content in an online course: introducing programming concepts via HTML and JavaScript	NA:NA	2018
Williams C. Judith:Bettina Bair:J√ºrgen B√∂rstler:Timothy C. Lethbridge:Ken Surendran	NA	Client sponsored projects in software engineering courses	NA:NA:NA:NA:NA	2018
Mordechai (Moti) Ben-Ari	While computing technology has undoubtedly changed the world in which we live, the changes have been exaggerated. Talk of a hi-tech internet-driven revolution during the last decade is inaccurate from a historical perspective: (a) It belittles previous technological achievements; for example, the landings on the moon between 1969-1972 were achieved with less computing capability than a PDA has today. (b) So much of the "new" technology dates back thirty years or more; for example, how many of our students know when the first email was sent? This loss of historical perspective has led to demands for an artifact-driven curriculum that I believe is inadequate for the education of future computer scientists and computational engineers. (The latter is a new term I wish to propose for people engaged in the scientifically-based design and construction of systems that perform computations. It is linguistically modeled on the terms mechanical and electrical engineer, and is intended to take the place of the term software engineer.) A comparison of the CC2001 curriculum with the curriculum of a traditional, "non-revolutionary" engineering discipline points to what I believe the future of CS education should be.	The concorde doesn't fly anymore	NA	2018
Roberta Evans Sabin	NA	Session details: Paired programming/ collaborative learning	NA	2018
Tammy VanDeGrift	Pair Programming has been successful in many introductory computer science courses. Its success has manifested in increased retention rates, better performance on programming tasks, increased confidence, and decreased frustration. This paper highlights experiences using pair programming coupled with individual written reports in a large, introductory computer science course. Through analysis of survey data and written reports, our study shows that students perceive benefits in pair programming, such as those documented earlier (social structure, peer help, less frustration, reduced workload). Regarding the written reports, students cited benefits such as a chance to summarize their project, to reflect on the code, and to use new vocabulary. We discuss what we learn about students' processes, their challenges, and the resources they use for supporting their learning.	Coupling pair programming and writing: learning about students' perceptions and processes	NA	2018
Neha Katira:Laurie Williams:Eric Wiebe:Carol Miller:Suzanne Balik:Ed Gehringer	In recent years, educators have increasingly used pair programming in their computer science courses. Pair programming has been shown to be beneficial for both the teaching staff and the students in the courses. Occasionally, though, students are not compatible with their partners. An extensive study was done at the North Carolina State University to provide guidance on forming student pairs to improve the chances that pairs will be compatible and have a productive work relationship. We examined compatibility among freshman, advanced undergraduate, and graduate students. We have found that the students' perception of their partner's skill level has a significant influence on their compatibility. Graduate students work well with partners of similar actual skill level. Freshmen seem to work better with partners with different Myers Briggs personality type. Students' self-esteem does not appear to be a major contributor to pair compatibility.	On understanding compatibility of student pair programmers	NA:NA:NA:NA:NA:NA	2018
William M. Waite:Michele H. Jackson:Amer Diwan:Paul M. Leonardi	Our industrial advisory boards tell us that our students are well prepared technically, but they lack important group work skills. Simply adding project courses and requiring that assignments be done in groups has not improved the situation. A careful study of student culture in Computer Science has uncovered barriers to collaboration, which can be overcome only by pervasive changes in the way we approach our curriculum.	Student culture vs group work in computer science	NA:NA:NA:NA	2018
Lucia Dettori	NA	Session details: Testing and debugging in CS1/ 2	NA	2018
Ryan Chmiel:Michael C. Loui	We conducted a study to demonstrate that formal training in debugging helps students develop skills in diagnosing and removing defects from computer programs. To accomplish this goal in an assembly language course, we designed multiple activities to enhance students' debugging skills. These activities included debugging exercises, debugging logs, development logs and reflective memos, and collaborative assignments. In a previous paper, we reported positive qualitative results. Students agreed that formal debugging training enhanced their debugging skills. In this paper, we present positive quantitative results that support our previous qualitative results. Students who completed the optional debugging exercises spent significantly less time on debugging their programs than those who did not. Furthermore, we develop a model of debugging abilities and habits based on students' comments in their debugging logs, development logs, reflective memos, and evaluation surveys. Students and educators could use the model to diagnose students' current debugging skills and take actions to enhance their skills.	Debugging: from novice to expert	NA:NA	2018
Jim Etheredge	It is generally known that most, if not all, beginning programming students have difficulty understanding and debugging programs. For many students the primary problem is that when a program executes, it is essentially a "black box". They know what they think they wrote, but their only clues to logic errors come from watching the output of the program. If there are problems, it is difficult for inexperienced programmers to trace the problem back to the source of the error(s). This paper presents CMeRun, a tool that allows the user to see each statement in a program as it executes. This tool will allow beginning students to master coding and debugging skills much faster since it allows them to "look into" a program as it executes. Having this kind of insight into program execution will improve understanding, decrease development time, and reduce student frustration.	CMeRun: program logic debugging courseware for CS1/CS2 students	NA	2018
Stephen H. Edwards	Introductory computer science students rely on a trial and error approach to fixing errors and debugging for too long. Moving to a reflection in action strategy can help students become more successful. Traditional programming assignments are usually assessed in a way that ignores the skills needed for reflection in action, but software testing promotes the hypothesis-forming and experimental validation that are central to this mode of learning. By changing the way assignments are assessed--where students are responsible for demonstrating correctness through testing, and then assessed on how well they achieve this goal--it is possible to reinforce desired skills. Automated feedback can also play a valuable role in encouraging students while also showing them where they can improve.	Using software testing to move students from trial-and-error to reflection-in-action	NA	2018
Robert Bryant	NA	Session details: HCI	NA	2018
D. Scott McCrickard:C. M. Chewar:Jacob Somervell	Reacting to challenges that have been observed in human-computer interaction (HCI) education, as well as the multidisciplinary design, science, and engineering underpinnings, we investigate a pedagogical approach based on case methods. Our study of various case method techniques in an undergraduate HCI class provides insights into challenges that can be expected in the employment of case methods, student learning outcomes, and considerations for HCI curriculum planning. In general, case methods show great promise with a wide variety of topics, and we present broad recommendations for future work that will improve integration of HCI professional practice, research, and education.	Design, science, and engineering topics?: teaching HCI with a unified method	NA:NA:NA	2018
Mary Beth Rosson:John M. Carroll:Con M. Rodi	A challenge in teaching usability engineering is providing appropriate hands-on project experience. Students need projects that are realistic enough to address meaningful issues, but manageable within one semester. We describe our use of online case studies to motivate and model course projects in usability engineering. The cases illustrate scenario-based usability methods, and are accessed via a custom browser. We summarize the content and organization of the case studies, several case-based learning activities, and students' reactions to the activities. We conclude with a discussion of future directions for case studies in HCI education.	Case studies for teaching usability engineering	NA:NA:NA	2018
L. M. Leventhal:J. Barnes:J. Chao	Term projects in an undergraduate Usability Engineering (UE) course provide opportunities for students to put the abstract ideas of what they have learned in class into practice. Projects provide students with opportunities to learn that the process of usability engineering is rarely as smooth as it would seem in the abstract. Moreover, term projects give students the opportunity to learn about specific methodologies and notations.One critical phase of the term project is the user interface specification; in our undergraduate UE course we have found the specification phase to be a significant pedagogic challenge. Key elements to that challenge are: 1) Presenting the project requirements in such a way that the students can generate a specification, 2) Defining the form and format for student work, 3) Teaching the process of specification and 4) Assessing the students' work. In this paper, we describe our approach to each of these four challenges. Since 1996, we have had good success with our approach; however, student data suggests that students still find the UE specification process difficult. In Spring 2003, we added some extra steps in our process that seem to lead to greater student understanding and success.	Term project user interface specifications in a usability engineering course: challenges and suggestions	NA:NA:NA	2018
Nick Parlante:David Matuszek:Jeff Lehman:David Reed:John K. Estell:Donald Chinn	NA	Nifty assignments	NA:NA:NA:NA:NA:NA	2018
Steve Cunningham:Ernest McDuffie:Harriet Taylor	This session will highlight programs in the National Science Foundation EHR Division of Undergraduate Education and CISE Division of Experimental and Integrative Activities that are of interest to college faculty, discussing the requirements and guidelines for programs in these areas. It will include a presentation of the characteristics of a competitive proposal and the proposal and review processes, and participants will be encouraged to explore their ideas with the presenters.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Eydie Lawson:Doris K. Lidtke:Barbara Price	Programs in Information Technology (IT) have begun at many universities over the past decade and many are now eager for accreditation. This paper describes the activities undertaken in preparation for accreditation of IT programs by the Computing Accreditation Commission of ABET.	Information technology accreditation activities	NA:NA:NA	2018
John Hill	NA	Session details: New technologies for classroom instruction	NA	2018
Evan Golub	There are a wide variety of ways to present information at the front of a classroom. These include chalk on a blackboard, markers on a whiteboard, pens on transparencies, and computer projection systems. While computer-based presentation systems provide many opportunities both in and out of the classroom, there may also be many limitations. In-class spontaneity and dynamic exposition might be restricted. Class preparation time might increase dramatically when compared to the amount required to prepare handwritten materials. Certain presentation techniques may no longer be available. This paper will introduce a computer-based presentation system modeled on handwritten transparencies. It will then discuss how it addresses the above issues as well as how it can be used in and out of the classroom. These will be explored in the context of its use while teaching an undergraduate discrete mathematics course.	Handwritten slides on a tabletPC in a discrete mathematics course	NA	2018
Richard Anderson:Ruth Anderson:Beth Simon:Steven A. Wolfman:Tammy VanDeGrift:Ken Yasuhara	Computer science instructors frequently teach using slides displayed with a computer and a data projector. This has many advantages, e.g., ability to present prepared materials and ease of switching the display to a development environment during mid-presentation. However, existing computer-based presentation systems severely limit flexibility in delivery, hindering instructors' extemporaneous adaptation of their presentations to match their audiences. One major limitation of computer-based systems is lack of support for high-quality handwriting over slides, as with overhead projectors and other manual presentation systems. We developed and deployed Classroom Presenter, a Tablet PC-based presentation system that (1) combines the advantages of existing computer-based and manual presentation systems and (2) builds on these systems, introducing novel affordances. Classroom Presenter has been used in 25 Computer Science courses at three universities. In this paper we describe the system, summarize results from its deployment, and detail several novel uses of the system by instructors in computer science courses.	Experiences with a tablet PC based lecture presentation system in computer science courses	NA:NA:NA:NA:NA:NA	2018
Dave Berque:Terri Bonebright:Michael Whitesell	This paper describes our use of pen-based electronic classrooms to enhance several computer science courses. After presenting our motivation for undertaking this work, and its relevance to the growing interest in using tablet PC's in the classroom, we present an overview of our use of this technology to engage students during class. Finally, we present the students' reaction to the approach as measured through attitude surveys and a focus group.	Using pen-based computers across the computer science curriculum	NA:NA:NA	2018
Constance Bland	NA	Session details: Outcomes assessment	NA	2018
Nira Herrmann:Jeffrey L. Popyack:Bruce Char:Paul Zoski	We assess the effectiveness of an extensive redesign of the first Computer Programming course offered to computer science and computer engineering majors. Our goals were to improve student learning while reducing costs by making use of substantial Web-based course material and course management tools, including multi-level online modules that individualize instruction and enable students to self-schedule learning each week. DFW rates and costs were significantly reduced by the redesign.	Assessment of a course redesign: introductory computer programming using online modules	NA:NA:NA:NA	2018
Merry McDonald:Brian Dorn:Gary McDonald	During the past few years the number of courses offered online has greatly increased as technology has made delivery of such courses feasible. This paper discusses the experiences of the authors in teaching online courses for upper-division computer science students and reports results of a study comparing success of students in online courses to students in traditional courses.	A statistical analysis of student performance in online computer science courses	NA:NA:NA	2018
Barbara Moskal:Deborah Lurie:Stephen Cooper	This paper describes the evaluation of an NSF-sponsored educational research project. The primary focus of this project was to develop and evaluate a course curriculum designed to improve retention and performance for "at risk" introductory computer science majors. The results of this research suggest that the newly developed course and curriculum materials did improve students' performance and retention in computer science and their attitudes towards computer science.	Evaluating the effectiveness of a new instructional approach	NA:NA:NA	2018
Chenglie Hu	NA	Session details: Programming languages course	NA	2018
Amer Diwan:William M. Waite:Michele H. Jackson	The educational literature recognizes that people go through a number of stages in their intellectual development. During the first stage, called received knowledge or dualism, people expect knowledge to be handed to them by authority figures (thus "received") and think in terms of black and white (thus "dualism"). Our experience indicates that many computer science students are at this first stage of learning. To help students move beyond this stage, we describe a system and strategy, the PL-detective, to be used in a "concepts of programming languages" course. Assignments using this system directly confront students with the notion that there are often multiple equally good answers and that discussion with students (rather than asking the instructor) is an effective way of learning how to reason.	PL-detective: a system for teaching programming language concepts	NA:NA:NA	2018
Andrew T. Phillips	Three examples using mixed language programming in Maple and C are provided for the express purpose of highlighting, in a practical way, various issues normally discussed in a traditional programming languages class only as theoretical concepts. The three examples highlight concepts in parameter passing techniques, storage order choices, native machine types and sizes, and the handling of single and multi-dimensional arrays when dealing with legacy code.	Highlighting programming language issues using mixed language programming nn Maple and C	NA	2018
Eric Fernandes:Amruth N. Kumar	In order to facilitate problem-based learning in our Programming Languages course, we developed a tutor on static and dynamic scope. Static scope includes the scope of variables, the referencing environment of procedures and the scope of procedure names in a language that permits nesting of procedure definitions (e.g., Pascal, Ada). Dynamic scope includes the scope of variables, and the referencing environment of procedures. In this paper, we will describe the design of our tutor, and present the results of evaluating it for two semesters in our Programming Languages course.	A tutor on scope for the programming languages course	NA:NA	2018
Paul De Palma:Charles Frank:Suzanne Gladfelter:Joshua Holden	The panel discusses solutions to the problem of computer security education.	Cryptography and computer security for undergraduates	NA:NA:NA:NA	2018
Sally Fincher	This session showcases the projects that have received support from a SIGCSE Special Project Award in the previous year.	SIGCSE special projects showcase	NA	2018
Doug Baldwin:Bill Marion:Henry Walker	NA	Status report on the SIGCSE committee on the implementation of a discrete mathematics course	NA:NA:NA	2018
Jaime Ni√±o	NA	Session details: Object-oriented issues	NA	2018
Michael R. Wick:Daniel E. Stevenson:Andrew T. Phillips	Because encapsulation is a difficult concept for students to implement correctly, we propose a set of seven software design rules to be used as an aid for teaching the appropriate design and use of encapsulation of object properties.	Seven design rules for teaching students sound encapsulation and abstraction of object properties and member data	NA:NA:NA	2018
Steven K. Andrianoff:Dalton R. Hunkins:David B. Levine	Programming contests have a long established role as co-curricular activities. But as programming methodology has changed, the programming contest problems have not reflected these changes. In this paper, we describe a way to modernize the traditional ACM-style contest while preserving the problem solving aspects. We do so by introducing a new type of problem that requires that solutions interact with pre-defined classes. We discuss the effects of this change on a contest conducted for high school students.	Adding objects to the traditional ACM programming contest	NA:NA:NA	2018
Stuart Hansen	This paper presents an object--oriented design for a solitaire version of the game of Set¬Æ The design is responsibility driven and illustrates polymorphism and several fundamental design patterns, including Flyweight, Strategy and Factory. It introduces each of these to solve particular problems within the design. The direct application of these concepts and the interest our students show in the game make Set an ideal example for classroom discussions and assignments.	The game of set¬Æ: an ideal example for introducing polymorphism and design patterns	NA	2018
Martha Kosa	NA	Session details: New curricular directions	NA	2018
Eric Roberts	In recent years, the languages, paradigms, and tools used to teach computer science have become increasingly complex. This added complexity puts pressure on designers of introductory courses, who must cover more material in an already overcrowded syllabus. The problem of complexity is exacerbated by the fact that languages and tools change quickly, which leads to profound instability in the manner in which computer science is taught. The situation has reached a point where it is difficult for individual computer science teachers to keep up. This paper examines the factors that promote complexity and instability in computer science. It then goes on to argue that we, as educators, must take responsibility for breaking this cycle of rapid obsolescence by developing a stable and effective collection of Java-based teaching resources that will meet the needs of the computer science education community. Such an initiative is already in progress under the direction of a special task force appointed by the ACM Education Board. The charter and current plans for that task force are being presented in a special session at this symposium.	The dream of a common language: the search for simplicity and stability in computer science education	NA	2018
Qusay H. Mahmoud:Wlodek Dobosiewicz:David Swayne	In this paper we describe our experience in the design and teaching of a new evolutionary introductory programming course in a new Distributed Computing and Communications Systems Technology program at the University of Guelph-Humber. This course is evolutionary and innovative because it integrates the use of HTML, JavaScript, and Java in a one-semester introductory computer programming course. This is a marked departure from the use of a single conventional, general purpose, programming language such as Java or C++. The course is designed with two goals in mind: to improve the students experience in their first computer programming; and to achieve retention in the new program.	Redesigning introductory computer programming with HTML, JavaScript, and Java	NA:NA:NA	2018
Timothy Davis:Robert Geist:Sarah Matzko:James Westall	A new approach to the design of the computing curriculum for a Bachelor of Arts degree is described. The approach relies extensively on problem-based instruction and computer graphics to teach key concepts in computer science. The novelty arises from the magnitude and origin of the problems to be integrated into the curriculum and the breadth of the impact across the curriculum. Results from a trial course, the first experiment with the new approach, are described. The course, Tools and Techniques for Software Development, is a sophomore-level course in programming methodology. Construction of a ray-tracing system (for generating synthetic images) was the vehicle chosen for the instruction.	?????: a first step	NA:NA:NA:NA	2018
Norman Neff	In our compiler course for undergraduate students, we use a class of attribute grammars to specify type information, target code, and other properties calculated for the source program. In the design of the compiler, a modification of the visitor design pattern allows us to transparently compute the attributes. Within our framework, implementation is straightforward; the emphasis of the course shifts to theory and specification. In several offerings of the course, students have implemented parts of a highly modular compiler for a small, statically typed object oriented language.	Attribute based compiler implemented using visitor pattern	NA	2018
Luiz Filipe M. Vieira:Marcos Augusto M. Vieira:Newton J. Vieira	Language Emulator, written in Java, is a toolkit to help undergraduate students to understand the concepts of Automata Theory. The software allows the manipulation of regular expressions, regular grammars, deterministic finite automata, nondeterministic finite automata with and without lambda transitions, and Moore and Mealy machines. Language Emulator introduces error-detecting and internationalization functionalities into automata tools. It has been accepted by 95% of students in a recent survey, indicating that it is a helpful toolkit in learning Automata Theory.	Language emulator, a helpful toolkit in the learning process of computer theory	NA:NA:NA	2018
Ryan Cavalcante:Thomas Finley:Susan H. Rodger	We describe the instructional software JFLAP 4.0 and how it can be used to provide a hands-on formal languages and automata theory course. JFLAP 4.0 doubles the number of chapters worth of material from JFLAP 3.1, now covering topics from eleven of thirteen chapters for a semester course. JFLAP 4.0 has easier interactive approaches to previous topics and covers many new topics including three parsing algorithms, multi-tape Turing machines, L-systems, and grammar transformations.	A visual and interactive automata theory course with JFLAP 4.0	NA:NA:NA	2018
Nathan Rountree:Tamar Vilner:Brenda Cantwell Wilson:Roger Boyle	NA	Predictors For success in studying CS	NA:NA:NA:NA	2018
Michael Goldweber:Martyn Clark:Sally Fincher	NA	The relationship between CS education research and the SIGCSE community	NA:NA:NA	2018
J. D. Chase:Dennie Templeton:Michael Peterson:Carlotta Eaton:Diane Wolff:Edward G. Okie	NA	Articulation through a body of knowledge: a report on an NSF ATE project involving Radford University and the Virginia Community College System	NA:NA:NA:NA:NA:NA	2018
Joel Adams	NA	Session details: Taming Java	NA	2018
Jeremy D. Frens	The next version of the Java language (Software Development Kit 1.5) will include generics, an enhanced for loop, boxing and unboxing of primitive types, typesafe enumerated types, static import, variable arguments, and metadata. This new version is a significant change of the language itself, adding many features that will impact the use of Java in computer science curricula. Fortunately, this new version provides several features that instructors have wanted in the language from its beginning.	Taming the tiger: teaching the next version of Java	NA	2018
Charles Reis:Robert Cartwright	An important question that must be addressed in a coherent computing curriculum is which programming environments to use across the curriculum. For Java, currently the most widely used language in computing education, a wide variety of professional integrated development environments (IDEs) are available---including the increasingly popular, open-source Eclipse environment. Professional IDEs for Java work well in advanced courses, but they are poorly matched to introductory courses because they deluge beginning students with a complex array of features. In addition, professional IDEs fail to shield students from distracting complications like the Java command line interface and Java console I/O. For this reason, many educators favor using a "pedagogic" IDE such as BlueJ or DrJava to provide a gentle introduction to the mechanics of Java programming.To eliminate the gap between pedagogic and professional IDEs for Java, we have developed a plug-in for Eclipse that supports exactly the same programming interface as DrJava. It features an Interactions pane for evaluating program statements and expressions "on the fly" as in DrJava. With this plug-in, Eclipse is accessible to beginning programmers. In this configuration, Eclipse is a suitable vehicle for teaching introductory programming--enabling Eclipse to be used across the entire spectrum of the computing curriculum.	Taming a professional IDE for the classroom	NA:NA	2018
Viera K. Proulx:Richard Rasala	We present software tools that support robust input processing and comprehensive testing in Java. The software includes the JPT library that supports error-checked typed input via console or GUI for all primitive types. This provides a robust encapsulation of typical interactive input requests encountered in introductory programming courses.The Java Power Framework and its extension allow the user to develop a comprehensive test suite independent of the target classes. The type-safe input framework allows us to implement an external iterator interface for several types of input data sources, including the console, a GUI, a file, and an internal data structure. Student's programs that implement various algorithms can then process data independently of its source: running tests on existing data structures; creating inputs interactively; or running stress tests and timing tests on large input files.	Java IO and testing made simple	NA:NA	2018
Bonita McVey	NA	Session details: Algorithms and data structures	NA	2018
Lester I. McCann	The efficiency of Internet search engines has made it trivial for students to find implementations of standard algorithms. This fact has led computer science educators to be more creative with their assignments to encourage students to create their own implementations. Unfortunately, excessive creativity can obscure learning objectives, particularly for less insightful students. We demonstrate that recasting the parallel sorting algorithm Columnsort for a uniprocessor environment provides the foundation for a variety of sorting assignments that can engage students while not obscuring educational objectives.	Contemplate sorting with columnsort	NA	2018
Constantine Roussos	Understanding growth of functions using the standard big O definition and notation is a challenge for many undergraduate students. This paper presents an approach to teaching growth of functions that utilizes equivalence classes and partial ordering, identifies those mathematical concepts students should comprehend in order to understand the principles underlying growth of functions, demonstrates pedagogical inadequacies in existing order of complexity notation and definitions and gives a rationale for restricting functions under consideration to positive-valued, monotonic increasing.	Teaching growth of functions using equivalence classes: an alternative to big O notation	NA	2018
Clifford A. Shaffer	This paper presents a family of programming projects appropriate to a sophomore-level data structures course, centered around the concept of a buffer pool serving as the access intermediary to a disk file. These projects provide a meaningful vehicle for practicing object-oriented design techniques and teach fundamental material on file processing and manipulating binary data. I begin with a concrete example, a heap stored on disk and mediated by a buffer pool. Several important intellectual concepts introduced by such a project are enumerated. Significant extensions and alternatives to the basic project are then described. I conclude with some observations on the role of file processing in modern CS curricula, and the significance of recent trends away from coverage of these topics.	Buffer pools and file processing projects for an undergraduate data structures course	NA	2018
Lisa Kaczmarczyk:Gerald Kruse:Dian Rae Lopez:Deepak Kumar	NA	Incorporating writing into the CS curriculum	NA:NA:NA:NA	2018
Mark Burge	NA	Pervasive computing in the undergraduate curriculum	NA	2018
Andrew Begel:Daniel D. Garcia:Steven A. Wolfman	NA	Kinesthetic learning in the classroom	NA:NA:NA	2018
Kim Kihlstrom	NA	Session details: Gender issues	NA	2018
Lori Pollock:Kathleen McCoy:Sandra Carberry:Namratha Hundigopal:Xiaoxin You	This paper describes the design, implementation, and impact evaluation of a summer program designed to attract high school girls to entering an information technology field for their college major. Our main contributions include an analysis of immediate and longer term surveys from both the student participants and the female teaching assistants, curriculum and pedagogy highlights of the program, and lessons learned from the planning and implementation experiences.	Increasing high school girls' self confidence and awareness of CS through a positive summer experience	NA:NA:NA:NA:NA	2018
Lauren Rich:Heather Perry:Mark Guzdial	Literature on women in computing points out that computer science is not being effective at attracting and retaining women. Introduction to Media Computation is a new CS1 aimed especially at non-majors which was designed explicitly to address the concerns of women in computer science, such as the lack of relevance and creativity. The course is contextualized around the theme of manipulating and creating media. Of the 121 students who took the course (2/3 female), only three students dropped (all male), and 89% completed the course with a grade C or better. This paper presents data from interviews with women in the Media Computation class, then contrasts with interviews in a more traditional CS1.	A CS1 course designed to address interests of women	NA:NA:NA	2018
Lilly Irani	Women in the first systems course in Stanford's CS core find themselves in a divided culture in which they are a minority. For these women, establishing an identity of competence becomes critical to defining a place in the CS culture and establishing legitimacy. Social factors such as gendered self-presentation and communication, rather than objective measures of ability, plays a large role in developing confidence. Only by understanding the role of such social factors can we develop strategies for creating a more inclusive CS culture in which women may thrive. Findings are drawn from surveys, interviews, and five years of enrollment data.	Understanding gender and confidence in CS course culture	NA	2018
Forbes Jeffrey	NA	Session details: Evaluating student programming skills	NA	2018
Mark A. Holliday:David Luginbuhl	Understanding the execution of an object-oriented program can be a challenge for a student starting a CS1 course. We believe that a type of diagram that we call a memory diagram can aid the student in understanding object-oriented programming and can assist the instructor in assessing the student's understanding.Memory diagrams focus on how, in an abstract sense, the memory of the machine changes as the program executes. Though memory diagrams are a simple idea, by careful use of shape and placement, a number of key points about the meaning of a program fragment can be conveyed visually. We have found a correlation between a student's ability to construct these diagrams and that student's comprehension of object-oriented concepts. We feel that this correlation indicates that memory diagrams can be used as an assessment technique that, in turn, can be used to improve student learning.	CS1 assessment using memory diagrams	NA:NA	2018
Christopher C. Ellsworth:James B. Fenwick, Jr.:Barry L. Kurtz	The Quiver (QUIz VERification) System is an Internet server for building, maintaining, and administering programming quizzes. It is similar to the online judges used for programming contests but differs in that it targets the classroom use of programming quizzes as a teaching aid and evaluation tool. It can provide very detailed feedback regarding quiz behavior so that the student can debug her program. This system is developed as part of the grant "Intra-Curriculum Software Engineering Education" funded by the National Science Foundation (DUE 0127439).	The Quiver system	NA:NA:NA	2018
Charlie Daly:John Waldron	A recent study [7] has shown that many computing students are not able to develop straightforward programs after the introductory programming sequence. Normal student assessment should have highlighted this problem, it did not, therefore normal assessment of programming ability does not work.We examine why current assessment methods (written exams and programming assignments) are faulty. We investigate another method of assessment (the lab exam) and show that this form of assessment is more accurate.We explain why accurate assessment is essential in order to encourage students to develop programming ability.	Assessing the assessment of programming ability	NA:NA	2018
Xuesong Zhang	NA	Session details: Artificial intelligence	NA	2018
Frank Klassner	This paper presents the RCXLisp library, an extension to Common Lisp that allows students to investigate a broad range of artificial intelligence and computer science topics using the LEGO MindStorms¬Æ platform. The library has two features that distinguish it from other third-party packages and languages designed by academics and hobbyists for programming the MindStorms platform. The first is that it supports both remote control and on-board programming of MindStorms robots. The second is that it supports targeted communication between multiple LEGO robots and command-center desktops. The package is also the only one to be integrated into most popular Common Lisp programming environments. This paper also summarizes student experiences with the package over the years 2000-2003 in an Artificial Intelligence course.	Enhancing lisp instruction with RCXLisp and robotics	NA	2018
Leen-Kiat Soh	Multiagent systems is an attractive problem solving approach that is becoming ever more feasible and popular in today's world. It combines artificial intelligence (AI) and distributed problem solving to allow designers (programmers and engineers alike) to solve problems otherwise deemed awkward in traditional approaches that are less flexible and centralized. In the Fall semester of 2002, I introduced a new game-based technique to my Multiagent Systems class. The class was aimed for seniors (with special permission) and graduate students in Computer Science, covering some breadth and depth of issues in multiagent systems. One of the requirements was participation in four Game Days. On each Game Day, student teams competed against each other in games related to issues such as auction, task allocation, coalition formation, and negotiation. This article documents my designs of and lessons learned from these Game Days. The Game Days were very successful. Through role-playing, the students were motivated and learned about multiagent systems.	Using game days to teach a multiagent system class	NA	2018
John M. D. Hill:Kenneth L. Alford	It is not uncommon to teach Artificial Intelligence (AI) by asking students to implement agents that embody intelligent behavior. This helps students gain a fuller understanding of the many concepts taught in the course. There are two issues with this approach that deserve attention. First, students come into an AI course knowing how to program in different languages and having different levels of programming ability. Second, it's useful for the students to have a single task environment for all of the agents they program. A solution to both issues lies in a distributed system where the agents are clients communicating with a server that handles a configurable task environment. This allows the students to program their agents in any language and on any platform they desire, so long as they can communicate with the task environment server. If the task environment can be configured to provide additional levels of complexity and difficulty, this allows students to program at a level they are comfortable with. They can then challenge themselves by incorporating more advanced capabilities into their agents. This paper presents just such a distributed and configurable task environment that was developed for an undergraduate AI course.	A distributed task environment for teaching artificial intelligence with agents	NA:NA	2018
Debra T. Burhans:Matt DeJongh:Travis E. Doom:Mark LeBlanc	NA	Bioinformatics in the undergraduate curriculum: opportunities for computer science educators	NA:NA:NA:NA	2018
John P. Dougherty:Thomas B. Horton:Daniel D. Garcia:Susan H. Rodger	NA	Panel on teaching faculty positions	NA:NA:NA:NA	2018
Eric Roberts	NA	Resources to support the use of Java in introductory computer science	NA	2018
Owen Astrachan	This is the thirty-fifth SIGCSE conference. Off-by-one bugs notwithstanding, it seems safe to assume that the members of the SIGCSE community have been teaching programming for at least 35 years. Have we improved the teaching of programming in that time? We have changed languages, we have occasionally changed paradigms, and the platform we use to teach programming is effectively infinitely more powerful than it was 35 years ago. However, if we use the SIGCSE proceedings as a snapshot of the state-of-the-art in teaching programming, it's possible to take a view that "the more things change the more they remain the same." In this talk I'll review what the community has had to say about teaching programming and what it is saying today. The community does not always speak in one voice, but there are established trends that illuminate what we as a community view as important. In 1974 David Gries discussed how we should teach programming and used this analogy: "Suppose you attend a course in cabinet making. The instructor briefly shows you a saw, a plane, a hammer, and a few other tools, letting you use each one for a few minutes. He next shows you a beautifully-finished cabinet. Finally, he tells you to design and build your own cabinet and bring him the finished product in a few weeks. You would think he was crazy!" As part of this talk I will demonstrate how I teach program-building and why I think that if we do not program in front of our students we cannot effectively teach programming. I hope to convince you that programming should be taught by demonstration and that I am not crazy.	Why i care about programming and how to teach it	NA	2018
William Oblitey	NA	Session details: Factors that lead to success in CS	NA	2018
Dawn McKinney:Leo F. Denton	The affective domain can be used to support the internalization of cognitive content and foster the development of curriculum and industry-related interests, attitudes, values, and practices. This study investigated correlations between affective factors and course grade. Interest, perceived competence, effort, lack of pressure, and value correlated significantly with CS1 course grades. Moreover, this study investigated the levels of these factors over the course of CS1. Almost all of the levels of these significant factors decreased significantly during the CS1 course as measured by pretests and posttests. Results of this study further indicated that the use of specific affective objectives and instructional strategies lessened these decreases.	Houston, we have a problem: there's a leak in the CS1 affective oxygen tank	NA:NA	2018
Phil Ventura:Bina Ramamurthy	This paper reports research on the effect of prior programming experience on success in an objects-first CS1. In an objects-first, approach students are taught from the very beginning to think in terms of objects and the fundamentals of object-oriented programming, encapsulation, inheritance, and polymorphism. These concepts are introduced before traditional selection and iterative constructs. The finding that students with prior programming experience do not do better than those without such experience flies in the face of conventional wisdom.	Wanted: CS1 students. no experience required	NA:NA	2018
Grant Braught:Craig S. Miller:David Reed	Educators are increasingly acknowledging that practical problems in computer science demand basic competencies in experimentation and data analysis. However, little effort has been made towards explicitly identifying those empirical concepts and skills needed by computer scientists, nor in developing methods of integrating those concepts and skills into CS curricula. In this paper, we identify a core list of empirical competencies and motivate them based on established courses outside of computer science, their potential use in standard CS courses, and their application to real-world problems. Sample assignments that facilitate the integration of these competencies into the CS curriculum are also discussed.	Core empirical concepts and skills for computer science	NA:NA:NA	2018
Carl Alphonce	NA	Session details: CS education research	NA	2018
Lynda Thomas:Mark Ratcliffe:Benjy Thomasson	This paper reports on an experiment in which first year programming students were given explicit encouragement to use Object (Instance) diagrams when tracing code in multiple-choice questions. We conjectured that by providing scaffolding in this technique, students would be helped to understand the code better and that they would then continue to draw their own diagrams in similar situations. This turned out not to be the case. Although generally students who draw diagrams do better in questions that test their understanding of code behaviour and object referencing, our intervention does not appear to have helped students and the students who were exposed to the intervention were not more likely to go on to use the technique themselves.	Scaffolding with object diagrams in first year programming classes: some unexpected results	NA:NA:NA	2018
David W. Valentine	A meta-analysis is performed on the last twenty years of SIGCSE Technical Symposium Proceedings, looking for the kind of CS Educational Research that has been done at the CS1/CS2 level. A six-point taxonomy of articles types is described. It is shown that about one in five of all CS1/CS2 presentations have used some kind of experimental model, albeit "experimental" is defined quite broadly. Over the last ten years both the number of experimental models, and the percentage of experimental models among CS1/CS2 has significantly increased. SIGCSE members are challenged to adopt a research model for their presentations to the Technical Symposium.	CS educational research: a meta-analysis of SIGCSE technical symposium proceedings	NA	2018
Peter DePasquale:John A. N. Lee:Manuel A. P√©rez-Qui√±ones	In this paper, we evaluate the effects of applying programming language subsets to the programming environment used by novice (CS1) students in a closed-laboratory setting, as well as reducing the complexity of the user interface for the environment. Our goal in this effort was to assess if such interface and application-level changes adversely impact the student or hinder the later migration to a traditional professional-strength programming environment.We focus on the comparison of the quantitative data captured from the closed-laboratory sessions (assignment grades, number of syntax / semantic errors, and the number of compilation / execution attempts) involving subjects that used a new programming environment featuring a less complex interface in two forms: one lacking support of language subsets, and one supporting the application of language subsets.We found that while using the environment supporting the application of language subsets, there was no difference in the compilation-attempt rate, the number of errors did not increase, and student grades were equivalent between the experiment groups. Additionally, following a migration to the professional environment from the simplified environment, student grades were equivalent to those that had used the professional environment throughout the experiment. Student reaction to the experimental environment was very positive, especially related to the removal of unused tools and project management features.	Evaluation of subsetting programming language elements in a novice's programming environment	NA:NA:NA	2018
Soe Than	NA	Session details: Systems-level programming	NA	2018
Mehdi Amirijoo:Aleksandra Te"anoviC:Simin Nadjm-Tehrani	Real-time systems is a topic that one cannot overlook in an engineer's education. However, teaching real-time systems in an undergraduate syllabus is a challenging experience due to conflicting constraints placed on such a course. In this paper we present a new setup for laboratories in the real-time systems course that successfully meets the constraints of mass education, stable environment management, short time span for the labs, and still enables deep involvement of students in the central topic of resource allocation with high motivation.	Raising motivation in real-time laboratories: the soccer scenario	NA:NA:NA	2018
Nurul I. Sarkar:Trevor M. Craig	We are developing a series of interesting projects that give students a hands-on introduction to computer hardware concepts. Our projects are designed around the PIC16F84, a powerful 8-bit microcontroller chip that sells for less than $10. The projects are suitable for classroom use in introductory level courses about computer hardware. The effectiveness of these projects has been evaluated both formally by students (student evaluation forms) and informally - through discussion within the teaching team. The feedback from students indicates that the development and implementation of the projects were successful. This paper describes the details of the projects completed to date, their overall effectiveness and our plans for further projects.	Illustrating computer hardware concepts using PIC-based projects	NA:NA	2018
Saumya Debray	Performance is an essential aspect of many software systems, and it is important for programmers to understand performance issues. However, most undergraduate curricula do not explicitly cover performance issues---performance monitoring and profiling tools, performance improvement techniques, and case studies---in their curricula. This paper describes how we address this topic as part of a third-year programming course. We focus on tools and techniques for monitoring and improving performance, as well as the interaction between clean program design and performance tuning.	Writing efficient programs: performance issues in an undergraduate CS curriculum	NA	2018
Frances Grodzinsky:Ed Gehringer:Laurie S. King:Herman Tavani	NA	Responding to the challenges of teaching computer ethics	NA:NA:NA:NA	2018
Alyce Brady:Kim Bruce:Robert Noonan:Allen Tucker:Henry Walker	NA	The 2003 model curriculum for a liberal arts degree in computer science: preliminary report	NA:NA:NA:NA:NA	2018
David Ginat:Owen Astrachan:Daniel D. Garcia:Mark Guzdial	It is not rare that programming students are surprised when they encounter bugs in their program, which "looks completely right". Such a phenomenon expresses lack of awareness of analysis, design, and testing habits, which yield undesirable outcomes. The special session will focus on various programming aspects that may look seemingly right to students, but yield a buggy, wrong result. Various aspects will be displayed, illustrated, and discussed with the audience, in order to better understand the characteristics of bugs and ways of coping with them in our teaching.	"But it looks right!": the bugs students don't see	NA:NA:NA:NA	2018
Marcia Schlafmitz	NA	Session details: Pedagogic approaches to CS1	NA	2018
Michael K√∂lling:David J. Barnes	Various methods have been proposed in the past to improve student learning by introducing new styles of working with assignments. These include problem-based learning, use of case studies and apprenticeship. In most courses, however, these proposals have not resulted in a widespread significant change of teaching methods. Most institutions still use a traditional lecture/lab class approach with a strong separation of tasks between them. In part, this lack of change is a consequence of the lack of easily available and appropriate tools to support the introduction of new approaches into mainstream courses.In this paper, we consider and extend these ideas and propose an approach to teaching introductory programming in Java that integrates assignments and lectures, using elements of all three approaches mentioned above. In addition, we show how the BlueJ interactive programming environment [7] (a Java development environment aimed at education) can be used to provide the type of support that has hitherto hindered the widespread take-up of these approaches. We arrive at a teaching method that is motivating, effective and relatively easy to put into practice. Our discussion includes a concrete example of such an assignment, followed by a description of guidelines for the design of this style of teaching unit.	Enhancing apprentice-based learning of Java	NA:NA	2018
Emily Howe:Matthew Thornton:Bruce W. Weide	Among the many ways to focus CS1/CS2 content, two have been published that emphasize concepts of component-based software engineering. Courses based on these two instances of a "components-first" approach are remarkably similar in several crucial respects--which is surprising because they were developed independently and with very different objectives. Indeed, the two versions are based on virtually the same principles for content organization, and they share many common features that are unusual for CS1/CS2. Yet, they are notably different in other ways. Detailed analysis of similarities and differences suggests that it might be possible to transfer some of their claimed and documented advantages to other approaches within the programming-first paradigm for CS1/CS2, by rearranging the content of such courses in accord with the underlying principles of the components-first approach.	Components-first approaches to CS1/CS2: principles and practice	NA:NA:NA	2018
Tracy L. Lewis:Mary Beth Rosson:Manuel A. P√©rez-Qui√±ones	This study examined ways to improve students' chances of success learning design concepts through the use of Object-Oriented Programming and Design (OOP&D) patterns by examining potentially effective ways to teach such patterns to novice programmers. Using hierarchical tree, complete-linkage analysis to survey a group of design experts, the study developed an order in which those experts believed thirty fundamental OOP&D patterns should be taught to optimize effective student learning. Once that basic order was identified, it became possible to divide the patterns into six sequential phases of patterns instruction to allow both maximal teaching and learning. Although the study did not present a conclusively effective approach for OOP&D teaching, it did provide information essential for future sequential phase patterns research.	What do the experts say?: teaching introductory design from an expert's perspective	NA:NA:NA	2018
Nurul Sarkar	NA	Session details: Networks	NA	2018
David A. Umphress:James H. Cross, II:Jhilmil Jain:Nischita Meda:Larry A. Barowski	This paper describes efforts to use industry wireless software development practices in the classroom. Nokia's OK Java 2 Platform Micro Edition (J2ME) application certification program was chosen for use in a core set of wireless software engineering courses. The adaptation process included 1) modifying Nokia OK application standards for classroom use as examples of what is expected of industry-quality software; 2) incorporating Nokia OK software development tools into a student-friendly software development environment; and 3) implementing in-house Nokia OK certification procedures as a basis for assessing student projects and providing feedback.	Bringing J2ME industry practice into the classroom	NA:NA:NA:NA:NA	2018
Brad Richards:Benjamin Stull	The rapid growth of wireless communications services and networks has led departments to consider offering elective courses on the topic. Textbooks exist that can help support such a course, but providing students with hands-on wireless networking experience can be difficult and expensive.We present the outline of a wireless networking course that can be offered with minimal resources, and describe our experiences using the approach. The students who took the initial offering of the course gained hands-on experience with wireless networking, did traditional sockets programming, and acquired the theoretical foundations of both traditional and wireless networking.Students implement a simplified IEEE 802.11 Wireless Ethernet MAC layer as a course project. In our case, the implementations took advantage of the Cybiko, a $50 wireless handheld computer targeted at teenagers. Our materials are currently being ported to other platforms, including Bluetooth-enabled Palms and networks of workstations. The latter platform will allow this project to be conducted without any special resources.	Teaching wireless networking with limited resources	NA:NA	2018
Sung Yoo:Scott Hovis	College students in computer networking courses are very interested in Internet technology because of the rapid growth in that area. Of particular interest is the need for practical experience in network design and configuration. A typical computer networking class curriculum includes the study of theory and the laboratory projects. The laboratory projects are designed to give students a better understanding of computer networks. Most of the laboratory projects are software projects. Furthermore it is common to find projects in the area of implementing an application layer protocol and protocol observations in many computer network course textbooks [7,11,12]. However, having a networking laboratory with the proper hardware facilities to teach real networking has several difficulties. These difficulties include funding for the hardware facility, physical space limitations, and physical accessibility of the lab facility [6,10]. We have designed a networking lab that can solve these problems. Old PCs have been converted to IP routers with the free router software Zebra [5]. The proposed laboratory system can be accessed through the Internet, and the network topology can be changed remotely.	Remote access internetworking laboratory	NA:NA	2018
James Howatt	NA	Session details: Operating systems	NA	2018
David Hovemeyer:Jeffrey K. Hollingsworth:Bobby Bhattacharjee	Undergraduate operating systems courses are generally taught using one of two approaches: abstract or concrete. In the abstract approach, students learn the concepts underlying operating systems theory, and perhaps apply them using user-level threads in a host operating system. In the concrete approach, students apply concepts by working on a real operating system kernel. In the purest manifestation of the concrete approach, students implement operating system projects that run on real hardware.GeekOS is an instructional operating system kernel which runs on real hardware. It provides the minimum functionality needed to schedule threads and control essential devices on an x86 PC. On this foundation, we have developed projects in which students build processes, semaphores, a multilevel feedback scheduler, paged virtual memory, a filesystem, and inter-process communication. We use the Bochs emulator for ease of development and debugging. While this approach (tiny kernel run on an emulator) is not new, we believe GeekOS goes further towards the goal of combining realism and simplicity than previous systems have.	Running on the bare metal with GeekOS	NA:NA:NA	2018
Kenneth A. Reek	This paper describes two design patterns that are powerful tools to help teach how semaphores are used to solve synchronization problems. The patterns are general enough to be used with many different types of problems, yet are simple enough for students to understand and apply effectively.	Design patterns for semaphores	NA	2018
Steven Robbins	Disk head scheduling is a standard topic in undergraduate operating systems courses. Disk drives were once fairly simple devices with little intelligence. Disk head scheduling and bad block mapping were done exclusively by operating systems. As disk drives became larger and faster, they took on some of these tasks. Modern drives often have a large cache and hide their internal structure from the outside world. In spite of changes in disk technology, the teaching of disk head scheduling has changed little over the last decade. This paper describes a disk head scheduling simulator that allows students to explore traditional disk scheduling algorithms as well as the consequences of modern disk technology. The simulator, which is written in Java and is freely available, can be run remotely from a browser or downloaded for local execution. We present methods for modifying the traditional curriculum to make the presentation of disk head scheduling more relevant and interesting.	A disk head scheduling simulator	NA	2018
Ernest Ferguson:Clifton Kussmaul:Daniel D. McCracken:Mary Ann Robbert	NA	Offshore outsourcing: current conditions & diagnosis	NA:NA:NA:NA	2018
Cathy Bareiss:Kris Powers:Scott Thede:Marsha Meredith:Christine Shannon:Judy Williams	NA	The computer science small department initiative (CS_SDI) report	NA:NA:NA:NA:NA:NA	2018
Allen Tucker:Dennis McCowan:Fadi Deek:Chris Stephenson:Jill Jones:Anita Verno	This special session will report on the work of the ACM K-12 Computer Science Curriculum Committee, which recently completed the design of a K-12 model curriculum [1]. This session is a follow-up to our special session at SIGCSE 2003, which presented the first draft of that curriculum design. This session differs from that one by emphasizing the next steps that must be taken to implement the recommendations in the model.	Implementation challenges for a K-12 computer science curriculum	NA:NA:NA:NA:NA:NA	2018
Peter J. Denning	The nearly three dozen core technologies of computing sit in a simple framework defined by great principles and by computing practices. The great principles are of two kinds, mechanics and design. Computing mechanics comprises computation, communication, coordination, recollection, and automation. Design principles address concerns for complexity, resilience, performance, evolvability, and security. Practices comprise programming, systems, modeling, innovating, and applying. This framework opens many new possibilities for teaching computer science, including new approaches to programming. The new CS curriculum at the Naval Postgraduate School is based on the framework presented here.	Great principles in computing curricula	NA	2018
Gene Spafford	Recent events have increasingly focused public attention on issues of information privacy, computer and network security, cybercrime and cyber terrorism. Yet despite all of this attention, there is some confusion about what is actually encompassed by those terms. There are some obvious components, such as cryptography and access control. However, the list of undisputed topics is not long or well-developed, and many questions arise as to whether a typical computer science department can offer all of the topics involved. That there are only a few universities that teach a comprehensive curriculum in these topics serves to illustrate the imprecise nature of the field. Many professionals have taken to describing it as "information security" or "information assurance" to distinguish that the focus is not on computers and networks, but on the information they hold and process.This talk will present a more comprehensive view of the area than simply within the confines of CS/CE. The speaker has been teaching information security for nearly 20 years and has developed a view that spans many traditional disciplines. The talk will present some of the reasons for that breadth of view, illustrated with examples taken from the recent CRA Grand Challenges Conference on Information Security. One conclusion from this talk is that getting good information security education widely implemented may not be simple, given current constraints and traditions within academia.	What *is* information security?	NA	2018
Dennis Bouvier	NA	Session details: Graphics	NA	2018
John Fisher:John Lowther:Ching-Kuang Shene	This paper presents our attempt in designing intuitive and interesting materials for teaching NURBS in an undergraduate course with the help of our tool DesignMentor. This approach does not require tedious mathematics and is based on learning-by-doing and visualization. Our approach was classroom tested and used world-wide in the last seven years.	If you know b-splines well, you also nnow NURBS!	NA:NA:NA	2018
John M. Zelle:Charles Figura	Students are very interested in cutting-edge technologies like virtual reality (VR), and VR has many potential uses in education. However, building VR applications has proved challenging due to both cost and technical skill barriers. Through a series of experiments in "shoestring" VR, we have developed methods of bringing an important facet of VR, stereoscopic display, to our students in a simple, cost-effective way. This paper describes our approach.	Simple, low-cost stereographics: VR for everyone	NA:NA	2018
Pourang Irani	NA	Session details: Courses for non-majors	NA	2018
Timothy J. Hickey	The thesis of this paper is that Scheme-based web programming is a worthy organizing topic for CS0 computer literacy courses. We describe an approach to introducing non-science majors to Computer Science by teaching them to write webpages using HTML and CSS and to also write applets and servlets using Scheme. The programming component of our approach is completed in about nine weeks of a thirteen week course, leaving time for a treatment of more traditional CS0 topics such as intellectual property, privacy, artificial intelligence, the limits of computability, PC architecture, Operating Systems, CMOS and logic circuits. We argue that the use of a high level scripting language (like Scheme) is essential to the success of this approach. We also argue that wide scale success in teaching web programming to non-majors could enhance the students productivity when they enter the job market, and hence this approach deserves further study.	Scheme-based web programming as a basis for a CS0 curriculum	NA	2018
Daniel T. Kaplan	This paper describes the motivation and design of an introductory computational course for natural, physical, and social scientists.	Teaching computation to undergraduate scientists	NA	2018
Deborah Trytten	NA	Session details: Courseware	NA	2018
Dale Reed:Sam John:Ryan Aviles:Feihong Hsu	Finding just the right example to answer a question can be difficult for CS1 students and teachers. For this to work well there must be an intuitive interface coupled to an appropriate set of focused examples. The examples then provide the scaffolding to enable students' discovery. CFX (C For eXample) provides the needed easy-to-use web based interface.A small pilot study showed that students using CFX could find answers to their programming questions in roughly half the time it took using a textbook. Freely distributed as open source software under the GNU General Public License [4], CFX can be used as a database authoring tool to capture a set of examples. Once the content is established, the interface as well as the data can be automatically exported to a standalone dynamic interface, using static, non-database content.The development of this system has been sponsored in part by NSF's CCLI program, with sample content developed in conjunction with McGraw-Hill.	CFX: finding just the right examples for CS1	NA:NA:NA:NA	2018
Leen-Kiat Soh:Hong Jiang:Charles Ansorge	This paper presents an innovative multiagent system to support cooperative learning among students both in the real classrooms and in distance education. The system, called I-MINDS, consists of a group of intelligent agents. A teacher agent monitors the student activities and helps the teacher manage and better adapt to the class. A student agent, on the other hand, interacts with the teacher agent and other student agents to support cooperative learning activities behind-the-scene for a student. Two I-MINDS innovations are (a) agent-federated "buddy group" formation and (b) automated ranking of questions and responses. We have tested our I-MINDS prototype with experiment and control groups to evaluate the impact of I-MINDS in learning. The results are encouraging.	Agent-based cooperative learning: a proof-of-concept experiment	NA:NA:NA	2018
Hilary Holz	NA	Session details: Events vs. GUIs	NA	2018
Judith Bishop:Nigel Horspool	This paper proposes that GUI development is as important as other aspects of programming, such as a sound understanding of control structures and object orientation. Far less attention has been paid to the programming structures for GUIs and certainly there are few cross language principles to aid the programmer. We propose that principles of GUIs can be extracted and learnt, and that they do enhance good programming practice. These principles have been implemented in our Views system which features an XML-based GUI description notation coupled with an engine that shields the programmer from much of the intricate complexity associated with events, listeners and handlers. The system is programmed primarily in C# for .NET, but is available in various forms for Java and for other platforms which support .NET through the SSCLI.	Developing principles of GUI programming using views	NA:NA	2018
Stuart Hansen:Timothy Fossum	The event driven paradigm is ubiquitous in modern software. Many texts introduce events when discussing graphical user interfaces, but the event paradigm extends well beyond that domain. Events also play important roles in operating systems, component based systems, reactive systems, middleware, web services and other fields. Computer science educators have an obligation to see that our students thoroughly understand the event paradigm and have some grounding in tools to develop event driven systems. This paper describes an upper division, computer science elective course in event driven programming. The course gives a comprehensive treatment of event driven systems. It appropriately captures the importance of the event paradigm and serves to integrate concepts from several different computing fields, including Programming Languages, Operating Systems, and Software Engineering. It also introduces students to advanced tools and packages designed for developing event driven systems. The course has been taught four times at our institution, having repeatedly received high marks from the students for both its conceptual and technical content.	Events not equal to GUIs	NA:NA	2018
Steven Robbins	NA	Session details: Visualization	NA	2018
Purvi Saraiya:Clifford A. Shaffer:D. Scott McCrickard:Chris North	Many algorithm visualizations have been created, but little is known about which features are most important to their success. We believe that pedagogically useful visualizations exhibit certain features that hold across a wide range of visualization styles and content. We began our efforts to identify these features with a review that attempted to identify an initial set of candidates. We then ran two experiments that attempted to identify the effectiveness for a subset of features from the list. We identified a small number of features for algorithm visualizations that seem to have a significant impact on their pedagogical effectiveness, and found that several others appear to have little impact. The single most important feature studied is the ability to directly control the pace of the visualization. An algorithm visualization having a minimum of distracting features, and which focuses on the logical steps of an algorithm, appears to be best for procedural understanding of the algorithm. Providing a good example for the visualization to operate on proved significantly more effective than letting students construct their own data sets. Finally, a pseudocode display, a series of questions to guide exploration of the algorithm, or the ability to back up within the visualization did not show a significant effect on learning.	Effective features of algorithm visualizations	NA:NA:NA:NA	2018
T. Dean Hendrix:James H. Cross, II:Larry A. Barowski	A framework for producing dynamic data structure visualizations within the context of a lightweight IDE is described. Multiple synchronized visualizations of a data structure can be created with minimal coding through the use of an external viewer model. The framework supplies a customizable viewer template as well as high-level APIs to a graph drawing library and the Java Debugger Interface. Initial classroom use has demonstrated the framework's ease of use as well as its potential to as an aid to student learning.	An extensible framework for providing dynamic data structure visualizations in a lightweight IDE	NA:NA:NA	2018
Thad Crews	NA	Session details: Distributed/parallel computing	NA	2018
Ahuva Tikvati:Mordechai Ben-Ari:Yifat Ben-David Kolikant	The Byzantine Generals algorithm for achieving reliability in the presence of faults is a classic topic in distributed computation and operating systems, not the least because of its colorful story. We describe a concept called virtual data structures, which are concrete representations of global data structures that is not actually maintained by the nodes of a distributed system, but are required in order to understand the correctness of algorithms. We show that the use of virtual trees for the Byzantine Generals algorithm can improve the understanding of this algorithm, and we describe a visualization of the trees.	Virtual trees for the byzantine generals algorithm	NA:NA:NA	2018
Christoph Kessler	We describe a parallel programming environment that implements the PRAM (Parallel Random Access Machine) model. The programming environment consists of a C-based PRAM programming language called FORK with a compiler, libraries and tools, and a fast PRAM simulator. The software is freely available for Unix workstations. The programming environment and a systematic way of writing structured parallel programs for the PRAM model are described in a recent textbook.Even though the programming environment was originally developed for a hardware research project, we show that the system is also especially suited for complementing classical theory courses on PRAM algorithms by programming exercises that allow students to experiment with PRAM-style parallelism and actually implement the algorithms as they appear in the theory textbooks.We describe how the environment was used in a recent graduate-level course on parallel algorithms, and report on feedback that we got from the participants.	A practical access to the theory of parallel algorithms	NA	2018
Linda Null	NA	Session details: Computer security	NA	2018
Paul J. Wagner:Jason M. Wudi	The development of a cyberwar laboratory exercise for a computer security course raises many pedagogical and management issues relating to the structure of the laboratory, its network and the exercise itself. We have designed, implemented and given such an exercise, and faced many of these issues. Evaluation of this exercise leads to multiple insights about the proper goals, structure and implementation of such an exercise.	Designing and implementing a cyberwar laboratory exercise for a computer security course	NA:NA	2018
Cathie LeBlanc:Evelyn Stiller	Computer and network security are important topics for computer professionals in US companies today. An adequate education in these topics would probably involve several classes at the undergraduate level but many computer science curricula do not have room to have numerous required courses. In addition, most computer science faculty members have not taken classes covering these topics and have never worked as professionals dealing with these areas. Dealing with these difficult issues can be a challenge, especially in a small college environment. In this paper, we present our experiences teaching computer security topics in both a system administration course and a computer security course.	Teaching computer security at a small college	NA:NA	2018
Ji Hu:Christoph Meinel:Michael Schmitt	IT security education is an important activity in computer science education. The broad range of existing security threats makes it necessary to teach students the principles of IT security as well as to let them gain hands-on experience. In order to enable students to practice IT security anytime anywhere, a novel tutoring system is being developed at the University of Trier, Germany, which allows them to get familiar with security technologies and tools via the Internet. Based on virtual machine technology, users are able to perform exercises on a Linux system instead of in a restricted simulation environment. This paper describes the user interface of the Tele-Lab IT Security, its system architecture and its functional components.	Tele-lab IT security: an architecture for interactive lessons for security education	NA:NA:NA	2018
Greg Butler	NA	Session details: CS: other points of view	NA	2018
Debra T. Burhans:Gary R. Skuse	The successful implementation of educational programs in bioinformatics presents many challenges. The interdisciplinary nature of bioinformatics requires close cooperation between computer scientists and biologists despite inescapable differences in the ways in which members of these professions think. It is clear that the development of quality curricula for bioinformatics must draw upon the expertise of both disciplines. In addition, biologists and computer scientists can benefit from opportunities to carry out interdisciplinary research with one another. This paper examines the role of computer science in undergraduate bioinformatics education from the perspectives of two bioinformatics program directors. Their respective programs exemplify two substantively different approaches to undergraduate education in bioinformatics due to the fact that they are at markedly different institutions. One institution is a large, technical university, offering both undergraduate and graduate degrees in bioinformatics while the other is a small, Jesuit liberal arts college with an undergraduate program in bioinformatics. Despite these differences there is considerable overlap with respect to the role of computer science. This paper discusses the ways in which computer science has been integrated into these two undergraduate bioinformatics programs, compares alternative approaches, and presents some of the inherent challenges.	The role of computer science in undergraduate bioinformatics education	NA:NA	2018
Roger Boyle:Martyn Clark	University education in computer science requires that students learn something of the nature of the discipline. We argue that, in addition to content knowledge, two of the many things the educated computer scientist might know about are the computer science pantheon and the metaphorical structure of the discipline's technical language.	CS++: content is not enough	NA:NA	2018
Yue-Ling Wong:Jennifer Burg:Victoria Strokanova	"Digital media" is one of those unfortunate terms that means different things in different contexts. This difficulty of definition -- along with its association with art, communication, architecture, and film -- puts digital media on the margins of traditional computer science curricula. This paper reviews the types of digital media programs current in higher education; proposes a curriculum model for digital media instruction that is firmly grounded in computer science at the same time that it interfaces easily with digital art; and describes specially-designed course material that serves the interdisciplinary need while preserving the rigor of the computer science discipline.	Digital media in computer science curricula	NA:NA:NA	2018
Thaddeus Pawlicki	NA	Session details: First year courses	NA	2018
Kenneth J. Goldman	We present a unique "concepts-first" curriculum that exposes students without programming experience to the intellectual depth and breadth of computer science through hands-on experience with software development. The curriculum is supported by JPie, a tightly integrated programming environment that enables live construction of Java applications through direct manipulation of graphical representations of programming abstractions. The curriculum, projects, and classroom experience are described.	A concepts-first introduction to computer science	NA	2018
Carl Burch:Lynn Ziegler	Over the last ten years, our department's breadth-first introductory course has evolved independently of other survey courses in computer science. Due to its success, we duplicated the ideas into our course for non-majors, and this has also proven successful. None of the published resources match our vision for these courses, and so the department has developed its own. In this paper, we describe the design of the majors course, and we introduce a variety of resources developed for both courses. These resources, which could be useful in many other courses also, are freely available through the Web.	Science of computing suite (SOCS): resources for a breadth-first introduction	NA:NA	2018
Adrienne Decker:Phil Ventura	We have recently launched a reorganized discrete structures course being taught in the computer science department for computer science majors. The main idea of the reorganization is to make the course relevant and productive for the computer science students. During the Spring of 2003, students who were taking both discrete structures and CS2 commented that taking both courses at the same time was helpful. An empirical investigation was conducted to see if there was a benefit to students taking both courses concurrently. The results show that there was a benefit to students taking both courses. The students who were taking both courses were performing better in discrete structures than those students who were not.	We claim this class for computer science: a non-mathematician's discrete structures course	NA:NA	2018
Peter J. Denning:Rudolph Darken:Eric Roberts:Mark Guzdial	Questions and answers about the great principles framework for computing and its impact on the organization and content of curriculum, with special attention to communicating our field, teaching programming, and appealing to a diverse audience.	Panel session: great principles in computing	NA:NA:NA:NA	2018
Joe Bergin:James Caristi:Yael Dubinsky:Orit Hazzan:Laurie Williams	NA	Teaching software development methods: the case of extreme programming	NA:NA:NA:NA:NA	2018
John Impagliazzo:Esther A. Hughes:Richard LeBlanc:Tim Lethbridge:Andrew McGettrick:Ann E. K. Sobel:Pradip K. Srimani:Mitchell D. Theys	NA	IEEE-CS/ACM computing curricula: computer engineering & software engineering volumes	NA:NA:NA:NA:NA:NA:NA:NA	2018
Helmar Burkhart	NA	Session details: Web-based technologies	NA	2018
Alfred C. Weaver	With NSF support we developed a hands-on laboratory to augment our CS453 Electronic Commerce Technologies course. We conducted weekly lab sessions that covered HTML, CSS, JavaScript, Perl, CGI, SQL, ASP, and Flash programming. Each topic was covered over a period of one to three weeks and each topic was supported by 10 to 26 individual programming exercises. Four teaching assistants provided real-time support during the laboratory period. Answers to all exercises were accessible on-line so that no student would be needlessly delayed by any particular problem. In this paper we discuss the laboratory's design goals, topical content, and the students' performance, reactions, and suggestions for improvement.	Electronic commerce software laboratory	NA	2018
Marty Humphrey	A significant challenge for Computer Science departments is how best to get new graduate students involved with their chosen research projects. Ideally, the incoming graduate students will as a whole have both a solid understanding of computing principles behind large-scale software development and a broad "skill set", e.g., for conducting systems-oriented research. This rarely occurs, due to the diversity of backgrounds of incoming students--even the most qualified applicant can have deficiencies. To address this problem, we have developed a first-year graduate course that balances and integrates practical considerations with basic principles of complex software system development. To make the discussions of designing, implementing, and evaluating complex software systems more concrete, we situate the core of the class in the context of Web Services. We are currently teaching this class for the second time, and, while there will always be open issues given the nature and scope of this class, we have received positive feedback from the students and the other members of the department. Students recognize the practicality of Web Services. Students also appreciate the research possibilities that arise while evaluating the state of the art with regard to Web Services.	Web services as the foundation for learning complex software system development	NA	2018
Christian Collberg:Stephen G. Kobourov:Suzanne Westbrook	A?goVista is a web-based search engine that assists programmers to find algorithms and implementations that solve specific problems. The search engine is not keyword based but rather requires users to provide (input ? output) samples that describe the behavior of their needed algorithm. The system is easy to use. To search for a particular algorithm or classify a combinatorial structure a user simply draws the query in a drawing pane on a web browser. The result of the search is a list of links to web resources describing or providing implementations of the algorithm.A?goVista has many interesting applications in an educational setting. The search engine can help research students classify obscure problems and locate algorithms that would otherwise be hard to find in textbooks. Students can also add calls in their own programs to A?goVista's database of executable problem specifications in order to dynamically check the correctness of their programs. Finally, instructors can use A?goVista to set novel assignments in algorithms and data structures classes.This paper briefly describes A?goVista and reports on its use in two algorithms and theory classes, one at the undergraduate and one at the graduate level.	AlgoVista: an algorithmic search tool in an educational setting	NA:NA:NA	2018
Mario Guimaraes	NA	Session details: Design & modeling in introductory courses	NA	2018
Dung "Zung" Nguyen:Mathias Ricken:Stephen Wong	We specify and implement a GUI application that simulates marine biological systems by making extensive use of object-oriented design patterns.The key design patterns are model-view-control, observer/observable, visitor, command, factory method and decorator. These design patterns help delineate the roles and responsibilities of the objects in the system, establish loose coupling between objects and arrange for the objects to communicate and cooperate with one another at the highest level of abstraction. The result is an application that exhibits minimal control flow, yet is powerful, robust, flexible and easy to maintain.Our work entails a non-trivial redesign of the current AP Computer Science Marine Biology Simulation case study and may serve as a case study for an introductory "object-first" curriculum.	Design patterns for marine biology simulation	NA:NA:NA	2018
John W. Coffey:Robert Koonce	This paper contains a description of MODeLeR, a Multimedia Object Design Learning Resource. The impetus for the creation of MODeLeR was to provide an authentic learning environment for the study of object-oriented design to augment intermediate level programming classes. The Resource affords active, collaborative learning experiences in object modeling with the goal of helping students to gain design capabilities in UML and to appreciate the need for design that they often do not perceive since the programs they write are relatively small. Students typically create several different UML diagrams. This paper describes the MODeLeR environment and a pilot study in its use. This paper contains results of both a quantitative study and a qualitative evaluation of the Resource.	MODeLeR: multimedia object design learning resource	NA:NA	2018
Jens Bennedsen:Michael E. Caspersen	The recommendations of the Joint Task Force on Computing Curricula 2001 encompass suggestions for an object-first introductory programming course. We have identified conceptual modeling as a lacking perspective in the suggestions for CS1. Conceptual modeling is the defining characteristic of object-orientation and provides a unifying perspective and a pedagogical approach focusing upon the modelling aspects of object-orientation. Reinforcing conceptual modelling as a basis for CS1 provides an appealing course structure based on core elements from a conceptual framework for object-orientation as well as a systematic approach to programming; both of these are a big help to newcomers. The approach has a very positive impact on the number of students passing the course.	Programming in context: a model-first approach to CS1	NA:NA	2018
Farid Hallouche	NA	Session details: Capstone courses	NA	2018
Michael Buckley:Helene Kershner:Kris Schindler:Carl Alphonce:Jennifer Braswell	In an attempt to bridge a local technology gap, potentially provide software to health care organizations serving the needs of handicapped clients in the Western NY area, and provide innovative and interesting projects for our capstone design classes, the Computer Science and Engineering department at the University at Buffalo (SUNY) began soliciting projects from local organizations in need. The projects have been integrated into required senior-level undergraduate courses. The practical benefits of project experience on student education, and the benefits of providing useful software to the target organizations, were anticipated, but the experiences have proven to be much more. Students have responded with intensity and philanthropy. The clients have participated in the classroom experience as both recipients and teachers. The program has rescued students at academic risk, and the school is enjoying an enhanced reputation in the community. This paper explores positive and cautionary issues regarding the effort.	Benefits of using socially-relevant projects in computer science and engineering education	NA:NA:NA:NA:NA	2018
Paolo A. G. Sivilotti:Bruce W. Weide	Rarely are the three pillars of academia---research, teaching, and service---addressed together, within one intellectually cohesive context in the graduate curriculum. Such a context is important for exposing students to the inter-relationships among these facets.This paper presents our experience with structuring graduate research seminar courses around the model of a "miniconference". Throughout the quarter, students pursue original research projects in the discipline of the seminar course. At the end of the quarter, students write their findings as technical conference papers, then act as the miniconference program committee in reviewing each other's submissions. Finally, the selected papers are presented at the miniconference. In addition to the model itself, we describe some variations in instantiation and an assessment of the benefits of this general approach.	Research, teaching, and service: the miniconference as a model for CS graduate seminar courses	NA:NA	2018
Richard Conn	This paper describes a mature Software Engineering Process that may be applied to capstone courses, student projects, and research projects in a university environment. This process, based in part on the Team Software Process of the Software Engineering Institute, features mature software engineering best practices, including extensive use of metrics to gain insight into process effectiveness and product quality. It is designed to be executed in a single 16-week semester, and it can easily be modified for a longer time frame. It is also designed for the academic culture: (1) it executes as a communicating sequential process running in parallel with and passing information to a series of in-class course presentations and (2) it takes into account that the students cannot devote full time to this one project. This process is independent of the computer language used and any project-specific technology (so it may be applied to software-only projects, robotics projects, smart device projects, embedded programming projects, and any other kind of software-intensive system project). This process is reusable without modification, or it may be tailored. To support tailoring, the process is described using meta data in a format that may be analyzed by automated tools to generate a hypertext document. This process has been tested by using it in a capstone course.	A reusable, academic-strength, metrics-based software engineering process for capstone courses and projects	NA	2018
Elizabeth S. Adams:Mary Granger:Don Goelman:Catherine Ricardo	NA	Managing the introductory database course: what goes in and what comes out?	NA:NA:NA:NA	2018
M. A. P√©rez-Qui√±ones:Steven Edwards:Claude Anderson:Doug Baldwin:James Caristi:Paul J. Wagner	NA	Transitioning to an objects-early three-course introductory sequence: issues and experiences	NA:NA:NA:NA:NA:NA	2018
Kim B. Bruce	As instructors we work hard at teaching our students why and how to create appropriate abstractions in order to simplify program design and implementation. Interestingly, we sometimes neglect to take advantage of the fact that we can also use abstractions to benefit teaching and learning. In this talk I'll present some examples of useful abstractions that can make computer science concepts more concrete for novices. I'll also discuss the importance of understanding and using languages that provide support for creating abstractions in developing software.	Using abstractions to make concepts concrete	NA	2018
Sei-Jong Chung	NA	Session details: Compiler technology	NA	2018
Sara Miner More:Tim Pevzner:Alin Deutsch:Scott Baden:Paul Kube	For two years, we have been teaching a quarter-long compiler construction course where students implement an interpreter for a variant of the XML query language XQuery. Our goal is to motivate students' interest in the course by exposing them to an interesting and powerful new language which they see as relevant to potential future experiences. In this paper, we first explain the workings of the course itself, and then describe some pedagogically interesting variants of the XQuery language. We close with a discussion of challenges faced and conclusions.	Building an XQuery interpreter in a compiler construction course	NA:NA:NA:NA:NA	2018
Tyson R. Henry	Building a compiler for a domain specific language (a language designed for a specific problem domain) can engage students more than traditional compiler course projects. Most students feel that compiler courses are irrelevant because they are not likely to get a job writing compilers[2]. However, the technologies used to construct a compiler are widely applicable [2,5]. Using a domain specific language demonstrates to students the wide applicability of compiler construction techniques. This paper presents the results of using a domain specific language in an upper division compiler course.	Teaching compiler construction using a domain specific language	NA	2018
Elizabeth White:Ranjan Sen:Nina Stewart	In this paper, we present a novel approach that enables students in graduate compiler courses to examine and experiment with a real compiler without becoming overwhelmed by complexity. The key to the idea is the use of a debugger directly on a compiler during the compilation process. By providing instructions on breakpoints and variables of interest, the student is only shown the relevant portions of the compiler; the rest is hidden. We describe our strategy of using exercise sessions targeted toward illustration of core compiler concepts such as lexical analysis, parsing and code generation.	Hide and show: using real compiler code for teaching	NA:NA:NA	2018
Brian Rosmaita	NA	Session details: Accessibility	NA	2018
Robert F. Cohen:Alexander V. Fairley:David Gerry:Gustavo R. Lima	This paper describes our efforts to integrate software accessibility into the CS1 curriculum. Accessibility is an important aspect of modern software systems for both legal and ethical reasons. The acceptance of Java as language for CS1 gives us the opportunity to teach accessibility from the beginning, since Java Accessibility is simple and integrated into Swing components. We present simple guidelines on how to incorporate Accessibility into a Java based CS1, and describe programming projects that incorporate accessibility.	Accessibility in introductory computer science	NA:NA:NA:NA	2018
Susan M. Harrison	While some web page or user interface design courses include a lecture or two highlighting issues related to users with visual impairments, it is rare that such courses make this a recurring theme. This paper describes how a web page design course weaves the idea of designing for screen reader users throughout the entire course with minor changes to the standard curriculum of the course. Included are examples of how the eyes of the students are opened to the world of blind users, to the requirements of the law, to the code to make pages accessible, and to ways to test accessibility.	Opening the eyes of those who can see to the world of those who can't: a case study	NA	2018
Mary Anne L. Egan	More students with Asperger's Syndrome are entering higher education and a majority of these students are choosing a computer science curriculum. With an increasing number of students with disabilities in the classroom, it is important to understand the particular aspects of a disability that will affect classroom situations. This paper presents common characteristics of students with Asperger's Syndrome and offers techniques that will maximize the student's educational experience and minimize disturbance to other students.	Students with Asperger's syndrome in the CS classroom	NA	2018
Joan Krone	NA	Session details: Teaching experimentation	NA	2018
Robert Pastel	Undergraduate computer science students have few opportunities to experience scientific investigation and computer science research. A human-computer interaction (HCI) course can offer many opportunities for research that are accessible to undergraduate students, and because of the similarity between the design and research processes, a design project based HCI course is particularly suited to introducing undergraduate computer science students to the research process. In this paper, we describe and discuss the challenges of integrating research projects into a design HCI course. We also present example research projects and discuss the feedback form students attending the course.	Integrating science and research in a HCI design course	NA	2018
Stuart Hansen	Many instructors use program runtimes to illustrate and reinforce algorithm complexity concepts. Hardware, operating systems and compilers all influence the runtimes, but generally not to the extent of making the data difficult to interpret. The Java virtual machine adds an additional layer of software, making it much harder to see the relationship between the runtimes and the underlying algorithm. This paper presents some of the basic issues the author and his students have encountered when analyzing Java program runtimes and briefly discusses strategies to address them.	Interpreting Java program runtimes	NA	2018
Grant Braught	An argument is made for integrating the study of empirical skills and concepts into the computer science curriculum. With reference to past work an incremental approach is advocated for the study of these skills and concepts. A unique assignment that exemplifies the advocated approach is presented. This assignment, based on the study of random walks, is intended to introduce empirical investigation as early as is possible, during the first week of the first course. Two extensions to this assignment, one for the first course and one for a programming languages course, are discussed and used to illustrate the advocated incremental approach.	Teaching empirical skills and concepts in computer science using random walks	NA	2018
Eric Roberts:Kim Bruce:Rob Cutler:James H. Cross, II:Scott Grissom:Karl Klee:Susan Rodger:Fran Trees:Ian Utting:Frank Yellin	SIGCSE 2004 marked the official announcement of the ACM Java Task Force, which is working to develop a stable collection of pedagogical resources that will make it easier to teach Java to first-year computing students. The Java Task Force has received funding from the ACM Education Board, the SIGCSE Special Projects Fund, and the National Science Foundation (NSF Award DUE-0411905). This session offers an update on the work of the Java Task Force over the past year and provides an opportunity for community feedback prior to the publication of the final report in June 2005.	The ACM java task force: status report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Mohammad Neilforosham	NA	Session details: Databases	NA	2018
Thomas J. Marlowe:Cyril S. Ku:James W. Benham	Courses in Relational Databases largely use a domain-specific design approach different from that used in the rest of the curriculum. Use of the Unified Process, UML, and Design Patterns as a pedagogical approach for Databases can leverage previous student experience with design, make knowledge from Database courses more immediately relevant elsewhere, and create greater continuity across the curriculum. This approach allows issues in logical design and in implementation to be more easily connected with similar concerns in other courses (for example, Software Engineering), and supports greater and easier transfer of design between Relational and Object-Oriented Databases, and between databases and embedding applications.	Design patterns for database pedagogy: a proposal	NA:NA:NA	2018
Suzanne W. Dietrich:Susan D. Urban:Hua Ma:Yang Xiao:Shama Patel	The relationship between XML and database management systems has become an important topic for coverage at the undergraduate level. This paper presents an approach to teaching the use of XML through the study of data exchange. After a brief review of XML, the paper provides a tutorial on the different features that are provided in major relational database products for the import and export of XML, providing a discussion of how these features can be used as implementation exercises for students. In addition to addressing the use of XML for data exchange in relational systems, the paper also provides an overview of several teaching tools that are also used in the study of XML for object-oriented data and also for the exchange of object-oriented and object-relational data.	Exploring XML for data exchange in the context of an undergraduate database curriculum	NA:NA:NA:NA:NA	2018
Claire Kenny:Claus Pahl	Universities are increasingly offering courses online. Feedback, assessment, and guidance are important features of this online courseware. Together, in the absence of a human tutor, they aid the student in the learning process. We present a programming training environment for a database course. It aims to offer a substitute for classroom based learning by providing synchronous automated feedback to the student, along with guidance based on a personalized assessment. The automated tutoring system should promote procedural knowledge acquisition and skills training. An automated tutoring feature is an integral part of this tutoring system.	Automated tutoring for a database skills training environment	NA:NA	2018
M. Guzdial	NA	Session details: Contrasting women's experiences in computer science at different institutions	NA	2018
Ela Zur:Lilly Irani:Lecia Barker:Mark Guzdial	The SIGCSE community has produced much analysis of the dynamics causing women to choose Computer Science in disproportionately low numbers. In truth, we have learned that the factors are complex and contextual. This panel presents dynamics affecting women in four different institutions and explores the possibilities for common solutions to unique contextual problems.In the last five years, there has been extensive attention paid to the gender-gap in computer science courses (e.g., [1, 5]). Women are not succeeding in our introductory computer science courses, nor are they continuing in the curriculum, at the same rate as men. The reasons why have much to do with the context of individual courses, which can differ markedly between institutions. This panel explores how markedly different institutions can have similar outcomes, and how there may be some cross-institutional contextual issues that we might address.We will begin presenting an analysis of the results found in one university regarding the success of women in CS. Then we will present how classroom climate and the way CS is sometimes taught can lead to negative experience of studying CS at a different institution. We will suggest that interventions are necessary while students are building images of CS. We will end by presenting such an intervention that changes the classic CS1 course, and leads to changing the focus of what we're teaching.	Contrasting women's experiences in computer science at different institutions	NA:NA:NA:NA	2018
Lillian (Boots) Cassel:Russell Shackelford:Robert H. Sloan	In recent years, the discipline of computing has matured to the point of having distinct sub elements, each of which is developing curriculum recommendations, accreditation criteria, conferences, professional societies and publications. In particular, five distinct curriculum projects range in status from completed some time ago Computing Curricula 2001: Computer Science (CS-2001)[4] and IS 2002 Model Curriculum and Guidelines for Undergraduate Degree Programs in Information Systems (IS-2002)[1]), through almost completed as of the writing of this special session proposal, and very likely to be published by the time of SIGCSE 2005 Computing Curricula 2004: Software Engineering [2] and Computing Curricula: Computer Engineering [5]) to one that will likely be finished in late 2005 or early 2006 Computing Curricula: Information Technology). More broadly, recent work in the UK to identify the variety of computing related programs currently offered in British universities identified 2,400 distinct program names [3].We are making an interim report on, and seeking input into, a project to keep the family of computing related disciplines together. This project is partially funded by the National Science Foundation (NSF grant 0338546, Special Project: All in the Family: A unified representation of the computing and information related disciplines), and is being run by a joint task force from several professional societies, with ACM taking the lead.Very roughly, the goals of the project are to provide a synthesis of all that is computing, and various ways of organizing and visualizing that synthesis. This project began in late 2003, and got started in earnest in early 2004. We anticipate completing the work late in 2005 or early in 2006. Thus SIGCSE 2005 is the perfect time for us both to report on our work to date, and to get valuable feedback from the community.	A synthesis and ontology of all of computing	NA:NA:NA	2018
Bina Ramamurthy	NA	Session details: Networks	NA	2018
Tamer Elsharnouby:A. Udaya Shankar	Networking course projects are usually described by an informal specification and a collection of test cases. Students often misunderstand the specification or oversimplify it to fit just the test cases. Using formal methods eliminates these misunderstandings and allows the students to test their projects thoroughly, but at the expense of learning a new language. SeSF (Services and Systems Framework) is one way to overcome this obstacle. In SeSF, both implementations and services are defined by programs in conventional languages, thereby, eliminating the need to teach the students a new language. SeSF is a markup language that can be integrated with any conventional language. The integration of SeSF and Java is called SeSFJava. SeSFJava provides a technique to mechanically test whether student projects conform to their corresponding specifications, thereby, providing the instructors with a technique for semi-automated grading.We present a four-phase transport protocol project, and describe how SeSFJava is used in specifying, testing and grading the different phases of this project. The use of SeSF significantly (1) increased the percentage of students who completed the projects, (2) reduced their email queries about the specification, and (3) reduced the grading time.	Using SeSFJava in teaching introductory network courses	NA:NA	2018
Vishal D. Modak:David D. Langan:Thomas F. Hain	Mobile agents are a technology that is applicable in several courses. However, the development of applications using mobile agents can be difficult and time-consuming for students. To address this problem, a tool called Mobile Agent Development Environment (MADE) is presented. MADE facilitates the rapid creation of mobile agent based applications through a pattern-based code generating wizard. MADE organizes and offers the creation of mobile agents based on their characteristics and behavior. MADE is based on the IBM Aglets API. MADE also offers easy-to-use plug-ins for course specific domains such as database and networking. Initial testing has shown that 55% of the code needed for simple applications can be generated quickly and automatically using the described tool.	A pattern-based development tool for mobile agents	NA:NA:NA	2018
Martin Casado:Nick McKeown	The goal of our work is to give students a hands-on experience designing, deploying and debugging parts of the Internet infrastructure, such as an Internet router that routes real network traffic, or a security firewall. To do so normally requires that the students have access to snoop and generate raw network traffic, which is a risk to privacy and security. And it normally requires each student to have a dedicated computer, and to modify the kernel. The Virtual Network System (VNS) is a teaching tool designed for undergraduate and graduate networking courses. With VNS, each student can build a router (or any packet-processing device) in user-space, in their own private, protected topology, and process real Internet traffic. VNS has been used by over 500 students at Stanford and remotely from other universities. This paper describes the VNS tool, and our experiences using it in the classroom.	The virtual network system	NA:NA	2018
Chang Liu	NA	Session details: Capstone projects	NA	2018
William Combs:Robert Hawkins:Thomas Pore:Arik Schechet:Tim Wahls:Louis Ziantz	The course scheduling problem is simple to understand, yet complex enough to admit a wide range of solutions at varying levels of difficulty in implementation. In this work, we outline four types of student projects based on this problem, discuss how these projects can be approached and how they might integrate into a computer science curriculum, and describe two example projects that we have used.	The course scheduling problem as a source of student projects	NA:NA:NA:NA:NA:NA	2018
James Walden	Information warfare exercises, such as "Capture the Flag," serve as a capstone experience for a computer security class, giving students the opportunity to apply and integrate the security skills they learned during the class. However, many information security classes don't offer such exercises, because they can be difficult, expensive, time-consuming, and risky to organize and implement. This paper describes a real-time "Capture the Flag" exercise, implemented using a virtual network with free, open-source software to reduce the risk and effort of conducting such an exercise.	A real-time information warfare exercise on a virtual network	NA	2018
Ian Parberry:Timothy Roden:Max B. Kazemzadeh	Game programming classes have been offered at the University of North Texas continuously since 1993. The classes are project based, and feature collaborative coursework with art majors in UNT's School of Visual Arts. We discuss the design that enables them to simultaneously provide both training for students intending employment in the game industry, and a capstone experience for general computer science undergraduates.	Experience with an industry-driven capstone course on game programming: extended abstract	NA:NA:NA	2018
Timothy Stanley	NA	Session details: Computer organization	NA	2018
Linda Null:Karishma Rao	CAMERA, Cache and Memory Resource Allocation, is a collection of workbenches for cache mapping schemes (including direct, fully associative, and set associative) and virtual memory (including paging and TLBs). Its goals are to provide users with interactive tutorials and simulations to help them better understand the fundamental concepts of memory management. Implemented in Java Swing, these workbenches allow users to observe the processes of memory to cache mapping, and virtual memory using paging. The workbenches have proven useful in both introductory architecture classes and operating system classes. Students find CAMERA easy to use, even without the supplied user's guide. In the paper, we compare CAMERA to various existing systems and explore the software's features in detail in addition to discussing future enhancements.	CAMERA: introducing memory concepts via visualization	NA:NA	2018
Cecile Yehezkel:Mordechai Ben-Ari:Tommy Dreyfus	The EasyCPU visualization environment was developed for teaching computer architecture to novice students of computer science. During the development, the process of choosing the appropriate conceptual model of the computer for the visualization motivated research on the mental models that arise in the students as they learn. These mental models come from attempts by the students to make sense of the conceptual models presented to them by the software tool and their learning materials (textbook and exercises). The research findings support the view that the visualization was critical in enabling the construction of a viable mental model, a process that did not occur from textbook learning alone, because for the majority of students, their mental models were based upon their end-user experience rather than on the theoretical learning.	Computer architecture and mental models	NA:NA:NA	2018
Craig Zilles	This paper describes SPIMbot, an extension to James Larus's widely-used MIPS simulator SPIM, that allows virtual robots to be controlled by writing programs in the MIPS assembly language. SPIMbot was written to provide an engaging environment to motivate students to learn assembly language concepts. The SPIMbot tool allows the development of scenarios---in which students must program the robot to perform certain tasks---and provides the means to compete two robots against each other.In our sophomore/junior-level class, we structure the programming component as a collection of structured assignments that produce sub-components for the robot; these sub-components are then used in a final open-ended programming assignment to produce an entry for a SPIMbot tournament. In our experience, this has been an effective means of engaging students, with many students investing time to aggressively optimize their implementations. SPIMbot has been effectively used in large classes and its source code is freely available [7].	SPIMbot: an engaging, problem-based approach to teaching assembly language programming	NA	2018
Seth Bergmann	NA	Session details: Instructional technologies	NA	2018
Bhagyavati:Stan Kurkovsky:Christopher C. Whitehead	As Computer Science (CS) educators, we are involved in teaching a variety of undergraduate and graduate courses such as database management systems, networking, software development and web development courses. In addition to the traditional classroom environment, we use online and blended teaching methods to enhance student participation and improve the achievement of learning objectives. Typical online supplements to classroom instruction include posting homework, links to external resources, lecture notes and exams online. Asynchronous discussions and synchronous chat sessions provide additional forums outside the classroom for strengthening interaction and enriching the learning experience for students. This paper focuses on how asynchronous discussions can be used to enhance student participation in CS courses; increased participation leads to learning effectiveness, rich involvement with the course content, and student satisfaction.	Using asynchronous discussions to enhance student participation in CS courses	NA:NA:NA	2018
Michelle Wilkerson:William G. Griswold:Beth Simon	The University of Washington's Classroom Presenter lecturing system enables an active lecturing environment by combining a standard electronic slide presentation format with the capability for extemporaneous ink annotations by instructors and students using Tablet PCs. Thus, it can promote more interactive, student-centered learning. While many students may own laptops, few are yet Tablet devices. Also, Presenter uses multicast networking, which has availability and reliability issues. Ubiquitous Presenter (UP) expands Presenter via common web technologies to support non-Tablet audiences and enhance student control. UP enables students, using internet web browsers, to (a) synchronously or asynchronously view the slides and ink that are broadcast by the instructor, as well as (b) provide contextual submissions via text overlaid on the instructor's slides. The only compromises are that non-Tablet students cannot produce ink, and that professor ink is provided after a small time delay.	Ubiquitous presenter: increasing student access and control in a digital lecturing environment	NA:NA:NA	2018
Charles Hannon:Manfred Huber:Lisa Burnell	Bringing the excitement and challenges of active research into the classroom offers unique learning experiences. This is particularly true for undergraduate students not otherwise exposed to the processes, methods, and results of research. Designing and delivering such a course, however, presents many challenges. In this article, we describe our recent experience co-teaching a multi-institutional course in smart home technologies. From our experience and analysis of student evaluations, we offer a number of lessons learned and recommendations.	Research to classroom: experiences from a multi-institutional course in smart home technologies	NA:NA:NA	2018
O. Hazzan	NA	Session details: Using history of computing to address problems and opportunities	NA	2018
Orit Hazzan:John Impagliazzo:Raymond Lister:Shimon Schocken	NA	Using history of computing to address problems and opportunities	NA:NA:NA:NA	2018
Steve Cunningham	The National Science Foundation wants STEM faculty to be able to develop projects that will succeed in attracting funding from NSF programs. For the SIGCSE Symposium audience, this probably means being successful in being funded from the CCLI program. This special session gives attendees the opportunity to learn from those who have built successful CCLI-funded projects.	The voice of experience: national science foundation funded projects	NA	2018
Joseph Bergin:Clifton Kussmaul:Thomas Reichlmayr:James Caristi:Gary Pollice	Agile approaches to software development share a particular set of values [2,4]: Individuals and interactions over processes and tools. Working software over comprehensive documentation. Customer collaboration over contract negotiation. Responding to change over following a plan.Many agile methodologies were developed in response to so-called disciplined methodologies that emphasize detailed documentation and formal processes, and that are often associated with ISO compliance or the CMM. However, there is growing recognition that both agile and disciplined approaches have advantages, and that often a combination can be very effective [1].Many faculty are exploring and experimenting with ways to integrate agile concepts and practices into academic programs in areas such as computer science, software engineering, and information systems. This special session will help us work together in agile ways to better understand the importance and role(s) of agile concepts and practices, successful ways to incorporate them in academic settings, potential pitfalls, and key questions that should be explored further. We want to gather input from a wide range of people in different sub-disciplines and programs.We will begin with a very brief overview of agile concepts and practices, followed by brief statements from each of the five speakers, to give other participants a sense of the range of possibilities (25 min). Next, we will poll participants to identify a set of topics within agility that they want to discuss further (5 min). Participants will then gather into subgroups for each topic, and each subgroup will identify best practices, interesting ideas, and open questions for that topic (30-35 min). Each subgroup will then give a brief report to the entire group, and we will conclude with a few minutes of general discussion (10-15 min).	Agile development in computer science education: practices and prognosis	NA:NA:NA:NA:NA	2018
Fernando Nevada	NA	Session details: Software engineering projects	NA	2018
Thomas P. Way	The subject matter of a typical undergraduate software engineering course, while providing necessary background, can be quite dry. Team-based programming projects often complement the more theoretical textbook and lecture content by giving students valuable hands-on practice, albeit on a small scale and within a traditional classroom setting. This paper describes a company-based framework used in two semesters of a software engineering course. This approach incorporates a novel, collaborative framework to simulate the real-world experience of working for a medium-sized software design company or research laboratory, while giving students a vested interest in the overall outcome.	A company-based framework for a software engineering course	NA	2018
David Coppit:Jennifer M. Haddox-Schatz	A key goal of educators teaching software engineering is to provide students with useful experience that will benefit them after graduation. A key component of this experience is usually a class project that is meant to expose students to the issues associated with real software development efforts. Unfortunately, educators rarely have the time required to manage software projects in addition to their normal pedagogical duties. As a result, many software engineering courses compromise the project experience by reducing the team sizes, project scope, and risk. In this paper, we present an approach to teaching a one-semester software engineering course in which approximately 30 students work together to construct a moderately sized (22 KLOC) software system. This approach provides a more realistic project experience for the students, without incurring significant managerial overhead for the instructor. We present our experiences using the approach for the spring 2004 software engineering course at The College of William and Mary.	Large team projects in software engineering courses	NA:NA	2018
Marc Bernstein:Kelly M. FitzGerald:James P. Macdonell:Arturo I. Concepcion	It is difficult to teach students proper software engineering methodology in a classroom setting. Without hands-on experience, students may not understand why the software engineering process exists. By teaching students via a mock company experience, teaching software engineering can become a rewarding experience while showing the students how simple it is to follow the correct process. Here we show how in the microcosm of a mock software company it is possible to teach very real lessons about software engineering, unfamiliar technologies, teamwork and the realization that when a project ends, the code does not disappear.	AlgorithmA project: the ten-week mock software company	NA:NA:NA:NA	2018
Gary Skuse	NA	Session details: Computer security	NA	2018
Larry Gottschalk:Jigang Liu:Brahma Dathan:Sue Fitzgerald:Michael Stein	This paper presents a preliminary survey of computer forensics programs in North America. It summarizes existing requirements for associate, bachelor's, and master's degree programs as well as certificate programs. It briefly discusses factors which must be considered when introducing a new program (curriculum design, faculty, students, facilities, and budget).	Computer forensics programs in higher education: a preliminary study	NA:NA:NA:NA:NA	2018
J. Aycock:K. Barker	The University of Calgary introduced a controversial course in the fall of 2003 on computer viruses and malware. The primary objection about this course from the anti-virus community was that students were being taught how to create viruses in addition to defending against them. Unfortunately, the reaction to our course was based on a dearth of information, which we remedy in this paper by describing key pedagogical elements of the course.Specifically, we present four aspects of our course: how students are vetted for entry, operation of the course, course content, and the instructional materials used. In addition, we pay particular attention to the controversial course assignments, discussing the assignments and the need for balance, objectivity, security, and learning in a university environment. Our experiences with the course and future plans may be helpful for other institutions considering such course offerings. It should also provide opponents of the course with valuable information about the true nature of the course, the pedagogy used, and the value provided to the computer community as computer science graduates with this kind of expertise take their place as the next generation computer security experts.	Viruses 101	NA:NA	2018
Patricia Y. Logan:Allen Clarkson	Teaching "hacking" as a legitimate means of training students in how to protect a future employer's data assets has been introduced into courses with increasing frequency. The introduction of "red teaming" and attack-based exercises into information security courses presents a potential ethical problem. This paper explores the issues involved in designing an information security course with lab components that involve destructive actions.	Teaching students to hack: curriculum issues in information security	NA:NA	2018
Yana Kortsarts	NA	Session details: Algorithms and data structures	NA	2018
Chris Okasaki	Red-black trees and leftist heaps are classic data structures that are commonly taught in Data Structures (CS2) and/or Algorithms (CS7) courses. This paper describes alternatives to these two data structures that may offer pedagogical advantages for typical students.	Alternatives to two classic data structures	NA	2018
G. Michael Barnes:John Noga:Peter D. Smith:Jeff Wiegley	In this paper we propose using experiments with Balanced-Sample Binary Trees (BSBTrees) as assignments and lecture material in intermediate data structures courses (CS2/3). BSBTrees are composite data structures that have a temporarily constructed form that precedes their normal construction. We present them in the context of binary search trees. To do this we first investigate the retrieval properties of randomly generated binary search trees and show how temporary construction can improve both worst case and average case behavior. We provide a brief analysis of BSBTree performance and description of the classes that can be used for BSBTree implementation. Last we discuss the use of BSBTrees in CS2 and CS3 courses and a survey of student opinions about BSBTrees.	Experiments with balanced-sample binary trees	NA:NA:NA:NA	2018
Anany Levitin	The paper advocates a wider use of puzzles and puzzle-like games in teaching the analysis of algorithms. It discusses many specific examples---from classic puzzles of recreational mathematics to newly popular job interview brainteasers---which illustrate all major aspects of algorithm analysis.	Analyze that: puzzles and analysis of algorithms	NA	2018
Joe Oldham	NA	Session details: The first year: new ways to teach programming	NA	2018
Martin C. Carlisle:Terry A. Wilson:Jeffrey W. Humphries:Steven M. Hadfield	When students are learning to develop algorithms, they very often spend more time dealing with issues of syntax rather than solving the problem. Additionally, the textual nature of most programming environments works against the learning style of the majority of students. RAPTOR is a visual programming environment, designed specifically to help students envision their algorithms and avoid syntactic baggage. RAPTOR programs are created visually and can be executed visually by tracing the execution through the program. Required syntax is kept to a minimum. Students preferred expressing their algorithms visually, and were more successful creating algorithms using RAPTOR than using a traditional language or writing flowcharts.	RAPTOR: a visual programming environment for teaching algorithmic problem solving	NA:NA:NA:NA	2018
Mark W. Bailey	To become proficient programmers, novices must develop the skills of writing, reading, debugging, and testing code. We believe that learning to write short pieces of code correctly the first time helps strengthen all of these skills. In this paper, we describe a type of exercise, called IRONCODE, that helps develop the code-once skill. We describe the exercise, the programming environment, its implementation, and our experiences using IRONCODE in a second semester programming class.	IRONCODE: think-twice, code-once programming	NA	2018
Jens Bennedsen:Michael E. Caspersen	One of the most important goals of an introductory programming course is that the students learn a systematic approach to the development of computer programs. Revealing the programming process is an important part of this; however, textbooks do not address the issue -- probably because the textbook medium is static and therefore ill-suited to expose the process of programming. We have found that process recordings in the form of captured narrated programming sessions are a simple, cheap, and efficient way of providing the revelation.We identify seven different elements of the programming process for which process recordings are a valuable communication media in order to enhance the learning process. Student feedback indicates both high learning outcome and superior learning potential compared to traditional classroom teaching.	Revealing the programming process	NA:NA	2018
O. Hazzan	NA	Session details: Challenges to computer science education research	NA	2018
Vicki L. Almstrum:Orit Hazzan:Mark Guzdial:Marian Petre	NA	Challenges to computer science education research	NA:NA:NA:NA	2018
Steve Cunningham:Diana Gant:Harriet Taylor	This session will highlight programs in the National Science Foundation EHR Division of Undergraduate Education and CISE Division of Computer and Network Systems that are of interest to college faculty, discussing the requirements and guidelines for programs in these areas. It will also include a presentation of the characteristics of a competitive proposal and the proposal and review processes, and participants will be encouraged to explore their ideas with the presenters.	Taking advantage of national science foundation funding opportunities	NA:NA:NA	2018
Bill Marion	This session is a progress report from the first committee created under the SIGCSE Committee Initiative. The Committee on Implementation of a Discrete Mathematics Course is charged with developing implementation models and materials for the one-semester discrete math course proposed in Computing Curriculum 2001. At the time of the session, the Committee will have completed about three-fourths of its task. In this session the committee will present a number of course models which, for each, will include a syllabus/course outline and a list of possible applications which connect the mathematics to fundamental ideas in computer science. Comments and additional input from the SIGCSE community will be solicited. Presentation will by Bill Marion, one of the two committee co-facilitators and two other committee members.	Status report on the SIGCSE committee on the implementation of a discrete mathematics course	NA	2018
Mordechai (Moti) Ben-Ari	While computing technology has undoubtedly changed the world in which we live, the changes have been exaggerated. Talk of a hi-tech internet-driven revolution during the last decade is inaccurate from a historical perspective: (a) It belittles previous technological achievements; for example, the landings on the moon between 1969 and 1972 were achieved with less computing capability than a PDA has today. (b) So much of the "new" technology dates back thirty years or more; for example, how many of our students know when the first email was sent? This loss of historical perspective has led to demands for an artifact-driven curriculum that I believe is inadequate for the education of future computer scientists and computational engineers. (The latter is a new term I wish to propose for people engaged in the scientifically-based design and construction of systems that perform computations. It is linguistically modeled on the terms mechanical and electrical engineer, and is intended to take the place of the term software engineer.) A comparison of the CC2001 curriculum with the curriculum of a traditional, "non-revolutionary" engineering discipline points to what I believe the future of CS education should be.	The concorde doesn't fly anymore	NA	2018
Libby Shoop	NA	Session details: Software and techniques for upper level courses	NA	2018
Sharon Stansfield	This paper presents the structure, pedagogy and motivation for an introductory undergraduate course in Virtual Reality. The course is offered as an elective at the 400-level, hence students taking the course are juniors and seniors who have completed a substantial portion of their Computer Science curriculum. The course incorporates multiple components of VR theory and practice, including hardware and software survey and analysis, human perception, and applications. It also contains a semester-long, hands-on development component utilizing a specific virtual reality environment. In addition, because VR is a broad, multidisciplinary field of study, the course provides an ideal environment for incorporating capstone elements that allow undergraduate students to tie together many of the computing principles learned during their undergraduate academic careers.	An introductory VR course for undergraduates incorporating foundation, experience and capstone	NA	2018
Tin-Tin Yu:John Lowther:Ching-Kuang Shene	This paper presents the authors' introduction of photon mapping in an undergraduate computer graphics course, Software was designed as a pedagogical and demonstration tool which permitted students to practice and learn photon mapping. Classroom experience and examples that illustrate soft shadows, color bleeding, indirect illumination and caustic are also discussed.	Photon mapping made easy	NA:NA:NA	2018
Mark A. Holliday:Barry Wilkinson:Jeffrey House:Samir Daoud:Clayton Ferner	Grid computing is now mature enough and important enough to be studied as a full course at the undergraduate level for upper-level computer science majors. We have developed such a course, including a set of lecture slides, assignments, and assignment handouts specifically targeted for this audience. The sequence of assignments is a key part of the course. Some of the assignments are modifications of pre-existing work and others are completely new. We describe the key decisions we made about the course organization and content and describe the assignments. An important feature of the course is that it was geographically distributed with copies of the grid software installed at three campuses. Those campuses plus three others were receiving sites and included students and faculty associated with nine universities.	A geographically-distributed, assignment-structured undergraduate grid computing course	NA:NA:NA:NA:NA	2018
Martha Kosa	NA	Session details: On-line instruction	NA	2018
Curt Hill:Brian M. Slator:Lisa M. Daniels	In this paper, we describe a customized instructional content delivery system named ProgrammingLand with special emphasis on a program evaluation module named TorqueMOODa. The system is fully online and is used as a component of several classroom courses, as well the foundation of comparable distance education classes. The context of these systems is the early programming classes often taken by introductory Computer Science students, among others.	The grader in ProgrammingLand	NA:NA:NA	2018
Amruth N. Kumar	Researchers have been developing online tutors for various disciplines, including Computer Science. Educators are increasingly using online tutors to supplement their courses. Are online tutors effective? Can they help students learn? If so, what features contribute to their effectiveness? We will examine these questions in the context of an online tutor that we developed for introductory Computer Science. The tutor is designed to help students learn expression evaluation in C++/Java.We evaluated the tutor over several years, in multiple sections of Computer Science I each year. We used controlled tests with differential treatments, and used pre and post-tests to evaluate the effectiveness of the tutor. Our results show that online tutors indeed help students learn. Students who use the tutor for practice learn better than those who use a printed workbook. Students who receive both graphic visualization and text explanation learn better than those who receive only graphic visualization. Students who use graphic visualization learn better than those who receive no explanation. These results will be of interest to both developers and users of online tutors.	Results from the evaluation of the effectiveness of an online tutor on expression evaluation	NA	2018
Amer Diwan:Michele H. Jackson:William M. Waite:Jacob Dickerson	Last year we described the PL-Detective, a system for building exercises and demonstrations in a programming languages course. One of the main goals of the PL-Detective was to provide an experimental environment with which students could interact in order to discover the information that they needed to complete the exercise. In this paper we evaluate the PL-Detective with respect to this goal. We present data from a class of 29 groups of two or three students that used the PL-Detective for 11 exercises. Our data shows that students are both effective and efficient at getting information from the PL-Detective.	PL-detective: experiences and results	NA:NA:NA:NA	2018
Jaime Nino	NA	Session details: Object-oriented design and testing	NA	2018
Noa Ragonis:Mordechai Ben-Ari	This paper describes research into the influence of using static (class and object) visualization on understanding program flow in object-oriented programming. We found that the advantages of using the static visualization in the first stages of learning could become disadvantages in the advanced stages. The teacher must be aware of these pitfalls and plan the learning sequence accordingly. We think that the BlueJ learning environment that we used should be augmented with dynamic visualization so that students can coordinate the static and dynamic aspects of object-oriented programs.	On understanding the statics and dynamics of object-oriented programs	NA:NA	2018
Vladimir L. Pavlov:Anton Yatsenko	In this paper we present the original method of intensive hands-on training in Object-oriented Analysis and Design (OOA/OOD) with the Unified Modeling Language (UML). The method has been successfully used by the authors for three years. During the training, the students:go through the communication problems that are typical for large software development projects obtain the successful experience of applying UML to overcome these problems.The essence of the method is that a team of students is supposed to design a software system. They have several hours to complete the task. During this timeframe verbal and written communication is forbidden, and the UML is the only allowed language. This training is a kind of experiment for students -- they are to discover whether UML is "a real language" that is suitable and beneficial for a project team.The training was successfully delivered more than ten times in both academic and corporate environments and generated positive feedback from students and customers.	"The Babel experiment": an advanced pantomime-based training in OOA&OOD with UML	NA:NA	2018
Michael Wick:Daniel Stevenson:Paul Wagner	While the usage of unit-testing frameworks such as JUnit has greatly increased over the last several years, it is not immediately apparent to students and instructors how to best use tools like JUnit and how to integrate testing across a computer science curriculum. We have worked over the last four semesters to infuse testing and JUnit across our curriculum, building from having students use JUnit to having them write their own test cases to building larger integration and use case testing systems to studying JUnit as an example of good application of design patterns. We have found that, based on this increased presentation and structuring of the usage of JUnit and testing, students have an increased understanding and appreciation of the overall value of testing in software development.	Using testing and JUnit across the curriculum	NA:NA:NA	2018
Roxanne Canosa	NA	Session details: The first year: new approaches	NA	2018
Billy B. L. Lim:Chu Jong:Pruthikrai Mahatanankoon	Web services technology is a burgeoning technology that has received tremendous amount of attention in the software industry in recent years under the broader umbrella of service-oriented architecture (SOA). While Web services have been incorporated in many industries in the market place in the last few years, they are only beginning to appear in the academia, primarily in upper division and graduate CS curricula. In this paper, we share our belief that the Web services technology can and should be introduced early in a CS curriculum. We describe a number of scenarios that Web services can be integrated into CS1/CS2 to make them more interesting and more importantly, make the students better prepared for upper division classes and for the industry upon graduation. These scenarios can be incorporated without compromising the core materials presently covered in many CS1/CS2 sequence.	On integrating web services from the ground up into CS1/CS2	NA:NA:NA	2018
Kim B. Bruce:Andrea Danyluk:Thomas Murtagh	The approach to teaching recursion in introductory programming courses has changed little during the transition from procedural to object-oriented languages. It is still common to present recursion late in the course and to focus on traditional, procedural examples such as calculating factorials or solving the Towers of Hanoi puzzle. In this paper, we propose that the shift to object-oriented programming techniques calls for a significant shift in our approach to teaching recursion. First, we argue that in the context of object-oriented programming students should be introduced to examples of simple recursive structures such as linked lists and methods that process them, before being introduced to traditional procedural examples. Second, we believe that this material should be presented before students are introduced to structures such as arrays. In our experience, the early presentation of recursive structures provides the opportunity to reinforce the fundamentals of defining and using classes and better prepares students to appreciate the reasons to use classes to encapsulate access to other data structures when they are presented.	Why structural recursion should be taught before arrays in CS 1	NA:NA:NA	2018
John P. Dougherty:David G. Wonnacott	We have developed and implemented a "rigor-first" approach to CS1 instruction, in which we introduce rigorous techniques for understanding algorithms alongside associated programming skills. This core material is developed through a number of engaging problems from more advanced courses in computer science and other natural sciences. These principles are continued in CS2, and the two courses form our "3-2-1" first-year sequence: three programming paradigms and two models of program execution are explored on a single platform. This article discusses the design of our CS1 course, its role in the computer science curriculum, and our experiences with it. Preliminary assessment suggests this approach has merit in our curriculum.	Use and assessment of a rigorous approach to CS1	NA:NA	2018
E. Sweedyk	NA	Session details: Computer games and CS education: why and how	NA	2018
Elizabeth Sweedyk:Marianne deLaet:Michael C. Slattery:James Kuffner	Computer and video games have grown to be a major industry but, until recently, have largely been ignored by academia. The last couple of years, however, have seen the emergence of new academic programs, conferences, and journals dedicated to games studies. This panel discusses a variety of ways, and whys, for introducing games into computer science curricula. Panelists discuss their experiences in designing a broad range of courses including a games course for women, a software development course that uses games as projects, an introductory games programming course in Java, and an advanced graphics course that focuses on games.	Computer games and CS education: why and how	NA:NA:NA:NA	2018
W. Huen	NA	Session details: IT offshore outsourcing: impact on CS/IS curriculum	NA	2018
Wing Huen:Ernest Ferguson:Peter B. Henderson:Clifton Kussmaul	NA	IT offshore outsourcing: impact on CS/IS curriculum	NA:NA:NA:NA	2018
S. Cooper	NA	Session details: Outcomes-based computer science education	NA	2018
Stephen Cooper:Lillian Cassel:Barbara Moskal:Steve Cunningham	As computer science educators, we are being pushed to define (by accreditation agencies, within our institutions, etc.) our courses and programs in terms of measurable outcomes. The Computing Accreditation Commission (CAC) is responsible for reviewing and accrediting computer sciences departments across the United States. As part of this review process, computer science departments must specify and measure student learning objectives and outcomes (see criteria at http://www.abet.org/cac1.html). The same is true for institution-wide accreditation (for example, by the Middle States Commission on Higher Education). Also, faculty who are composing proposals for NSF or other funding agencies are expected to provide descriptions of objectives and outcomes and how these are to be measured.	Outcomes-based computer science education	NA:NA:NA:NA	2018
Lynda Thomas	NA	Session details: Courseware	NA	2018
Chavdar Botev:Hubert Chao:Theodore Chao:Yim Cheng:Raymond Doyle:Sergey Grankin:Jon Guarino:Saikat Guha:Pei-Chen Lee:Dan Perry:Christopher Re:Ilya Rifkin:Tingyan Yuan:Dora Abdullah:Kathy Carpenter:David Gries:Dexter Kozen:Andrew Myers:David Schwartz:Jayavel Shanmugasundaram	CMS is a secure and scalable web-based course management system developed by the Cornell University Computer Science Department. The system was designed to simplify, streamline, and automate many aspects of the workflow associated with running a large course, such as course creation, importing students, management of student workgroups, online submission of assignments, assignment of graders, grading, handling regrade requests, and preparation of final grades. In contrast, other course management systems of which we are aware provide only specialized solutions for specific components, such as grading. CMS is increasingly widely used for course management at Cornell University. In this paper we articulate the principles we followed in designing the system and describe the features that users found most useful.	Supporting workflow in a course management system	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Melissa E. O'Neill	This paper gives a first look at slides2wiki, a new scheme for easily providing collaborative lecture notes. Unlike previous web-based courseware schemes, the slides2wiki approach integrates with existing techniques that computer-science course instructors already use to prepare their classes. This tool is used to create a site where students may collaborate to create their own notes, using the lecture slides as a starting point. Adopting a surprisingly low-tech approach that uses familiar tools and paradigms, slides2wiki avoids many of the stumbling blocks of previous approaches to web-based course support.	Automated use of a Wiki for collaborative lecture notes	NA	2018
Karen L. Reid:Gregory V. Wilson	Professional software developers use version control systems to coordinate their work, and to provide an unwindable history of their project's evolution. In contrast, students in most programming courses use a homegrown electronic submission program to submit their work, and email to coordinate with partners when doing team projects. In May 2003, we began using CVS, a popular open source version control system, as an assignment submission system. Students receive starter code by checking out the assignment, use the version control system to manage their work, and submit their assignment by committing it to CVS. Teaching assistants grade assignments by checking out each student's repository, and committing the marks. Our experience to date shows that this is both a simpler and a more flexible way to manage student assignments, and also an excellent way to teach them how to use a fundamental software development tool.	Learning by doing: introducing version control as a way to manage student assignments	NA:NA	2018
Larry Griffith	NA	Session details: Programming with images	NA	2018
Daniel E. Stevenson:Michael R. Wick:Steven J. Ratering	Today's generation of students crave assignments that are relevant to their world, both in terms of graphical interfaces and, more importantly, the application area. To be fully engaged they must find the application of importance. However, we have found that many assignments in computer science attempt to engage the students by moving further and further away from the underlying machine representations. This causes a disconnect between the applications our students write and the material we present on machine representations and architecture. We present examples of assignments based from the fields of Steganography and Cartography that we have found to be valuable in helping to reinforce the importance of machine representations with today's students. We found that the students were excited and intrigued to see how their discipline could play a vital role in the war on terrorism and how what they were learning in their CS 1 course was directly relevant to what they heard on the nightly news and experience on a daily basis via the Internet.	Steganography and cartography: interesting assignments that reinforce machine representation, bit manipulation, and discrete structures concepts	NA:NA:NA	2018
Kenny Hunt	This article describes a Java framework for experimentation with fundamental steganographic techniques. The framework is built on top of Java's image processing libraries and provides extensible handles for customization and experimentation. The framework is designed and presented with a view towards incorporation into an undergraduate computer science curriculum.	A Java framework for experimentation with steganography	NA	2018
Richard Wicentowski:Tia Newhall	As Computer Science educators, we know that students learn more from projects that are fun and challenging, that seem "real" to them, and that allow them to be creative in designing their solutions. When we have students beating down our office doors wanting to show us what they've done, we know we have designed a project that truly meets its pedagogical goals. In CS1 courses, it is often difficult to come up with large, real-world programming projects that are at an appropriate level and that really excite students. This is particularly true in the first half of the course when students are learning basic programming and problem solving skills. We found that assignments based on image processing are an effective way to teach many CS1 topics. Because students enjoy working on the projects, they come away with a solid understanding of the topics reinforced by the projects. In this paper, we discuss many ways in which image processing could be used to teach CS1 topics. As an example, we present two image processing projects that we use in our CS1 course. These large, real-world programs are designed so that students can successfully master them early in their first semester of programming. Even though our CS1 course is taught using the C programming language, these projects could easily be used by a CS1 course in C, C++, or Java. We provide starting point code for Java and C versions of the projects, and provide sample assignment write-ups on our project webpage [12].	Using image processing projects to teach CS1 topics	NA:NA	2018
Graciela Gozalez	NA	Session details: Active and lab-based learning	NA	2018
Matt Bower:Debbie Richards	In order to gauge the pedagogical implications of conducting Computer Science practical sessions remotely, the Division of ICS at Macquarie University conducted a formal experiment using a virtual classroom environment called Macromedia Breeze Live. Research results indicated that students who completed their practical in the virtual classroom: i) felt they performed significantly more collaboration, ii) expressed a preference for this mode of practical session over regular laboratory sessions, iii) felt that they learnt significantly more from their classmates and iv) felt that they learnt significantly more from the practical supervisor than students in the standard classroom. Reasons for these results are proposed in the pedagogical context of offering Computer Science practical sessions online.	The impact of virtual classroom laboratories in CSE	NA:NA	2018
Leen-Kiat Soh:Ashok Samal:Suzette Person:Gwen Nugent:Jeff Lang	Closed laboratories are becoming an increasingly popular approach to teaching introductory computer science courses. However, as observed in [1], "Considering the prevalence of closed labs and the fact that they have been in place in CS curricula for more than a decade, there is little published evidence assessing their effectiveness." In this paper we report on an integrated approach to designing and implementing laboratories with embedded instructional research design. The activities reported here are part of our department-wide effort to not only improve student learning in Computer Science and Computer Engineering, but also to improve the agility of our Computer Science and Engineering Department in adapting our curriculum to changing technologies, incorporate research, and validate the instructional strategies used. This paper presents the design and implementation of the labs and the results and analysis of student performance. Also described in this paper is how we have employed cooperative learning in our labs and how it impacts student learning.	Closed laboratories with embedded instructional research design for CS1	NA:NA:NA:NA:NA	2018
Stephanie Ludi:Swaminathan Natarajan:Thomas Reichlmayr	At the Rochester Institute of Technology, the undergraduate introductory software engineering course has been redesigned from a lecture-lab format to a project-centric studio format. The new format blends the lecture material with the project work. As a result, students drive their own learning experience based on scaffolding created by the course design. The challenges faced and the techniques and strategies utilized in the planning and delivery of the course will be discussed, including the utilization of online learning support infrastructure. This paper presents instructor experiences, analysis of student feedback, lessons learned and recommendations for other educators considering an active learning approach for their courses.	An introductory software engineering course that facilitates active learning	NA:NA:NA	2018
Rhys Price-Jones	NA	Session details: The first year: breadth first approaches	NA	2018
Elise H. Turner:Roy M. Turner	This paper describes a new course developed at University of Maine to help students better understand the discipline of computer science and to aid us in recruiting and retaining majors. The course verview of computer science, but also, through focusing on particular topics at an advanced level, begins to teach students how computer scientists think about problems. The course has been taught in Fall 2002, 2003 and 2004. This paper describes the course and discusses our results from the first two years.	Teaching entering students to think like computer scientists	NA:NA	2018
Samuel A. Rebelsky	Although faculty are most accustomed to teaching semester-long traditional courses, they are encountering an increasing number of situations in which they must teach "courses" of only a few hours that are intended to give others a "flavor" of the discipline. Such situations include alumni events, orientation activities for incoming or potential students, and community outreach programs. In many disciplines, faculty can rely on participants' academic or basic skills (e.g., how to dissect an argument; basic laboratory skills). In computer science, faculty must accept not only a lack of basic skill in the discipline, but also a potential gap in knowledge of what the study of computer science entails.This paper explores the design of one such introductory experience, which is held in two two-hour sections for selected incoming science students at Grinnell College. The course emphasizes hands-on discovery, algorithm design and algorithm analysis grounded in the problem of sorting. Different faculty members in the department have taught the course three times to general success.	The new science students in too much, too soon an abbreviated, accelerated, constructivist, collaborative, introductory experience in CS	NA	2018
Charles Dierbach:Blair Taylor:Harry Zhou:Iliana Zimand	In this paper, we report on an approach taken addressing the issue of the preparedness of students entering CS1. Specifically, we discuss the adoption of a first-day assessment test in lieu of completed course prerequisites for determining students' preparedness, and the development of a corresponding CS0 "fallback" course intended to provide the appropriate background for those students lacking the necessary programming reasoning skills, as indicated by assessment test results. We report here on the adequacy of the assessment test designed, the effectiveness of the CS0 course as targeted for CS1 success, and the perceptions of students as to the impact that the CS0 course has had on their ultimate success in CS1.	Experiences with a CS0 course targeted for CS1 success	NA:NA:NA:NA	2018
E. F. Gehringer	NA	Session details: Using peer review in teaching computing	NA	2018
Edward F. Gehringer:Donald D. Chinn:Manuel A. P√©rez-Qui√±ones:Mark A. Ardis	For generations, the academic community has relied on peer review as a way of encouraging scholarship and enhancing the knowledge base. Peer review has been widely used in the classroom since at least the 1970s, with hundreds of papers on its use in diverse academic fields appearing in the literature (for a comprehensive survey, see [1]). Its use appears to be on the upswing, given the current interest in active learning and teamwork. In computer science, peer review seems to have very broad application. It can be used to evaluate the contributions of various members to a project team; it can be used for design documents and code reviews, in writing assignments, and in capstone project courses. The experience of the panelists is illustrative of the wide range of peer-review practices. This panel will serve to introduce the audience to some of these applications. Since many computer-science instructors have experimented with peer review, we are anxious to have them share their experiences during the open discussion period.	Using peer review in teaching computing	NA:NA:NA:NA	2018
Scot Drysdale:Judith Hromcik:David Reed:Reg Hahne	The 2004 school year marked significant changes in the Advanced Placement (AP) Computer Science curriculum. Most visibly, Java replaced C++ as the exam-testable programming language. More fundamentally, however, the AP CS curriculum now places a greater emphasis on object-oriented design than in previous years. Students are expected to be able to implement interfaces, design and implement class hierarchies using inheritance, analyze the tradeoffs between alternative designs and their associated efficiencies, and make use of Java Collection classes where appropriate. This special session is intended to inform both high school and college teachers as to the extent of these changes and how they affected the development and grading of the 2004 AP CS exams. In addition, it will provide practical insights as to how the new curriculum can be taught in high schools, and how teachers can better prepare their students for the exams.The AP CS Development Committee's charge is not only to provide a comprehensive testing mechanism, but also to recommend a direction that high school teachers should take in preparing a foundation for more advanced student studies during college. This special session will bring together two college and two high school members of the AP CS Development Committee to share some of their insights into the AP program.AP teachers will learn valuable information to continue to support their shift to Java in the classroom and about the exam for which they are preparing their students. College teachers will learn more about the AP CS curriculum and test development process, which may aid them in similar course redesigns and in the placement of students with AP credit.Time will be provided to discuss participant's questions.	The year in review: changes and lessons learned in the design and implementation of the AP CS exam in Java	NA:NA:NA:NA	2018
Bhagyavati	NA	Session details: Teaching hands-on computer and information systems security despite limited resources	NA	2018
Bhagyavati:Stephen O. Agyei-Mensah:Rose Shumba:Iretta B.C. Kearse	NA	Teaching hands-on computer and information systems security despite limited resources	NA:NA:NA:NA	2018
Troy Vasiga	NA	Session details: Issues in secondary education & introductory programming	NA	2018
James I. Hsia:Elspeth Simpson:Daniel Smith:Robert Cartwright	Java is the canonical language for teaching introductory programming, but its complex syntax and abundance of constructs are difficult for beginners to learn. This paper shows how object-oriented programming in Java can be made more accessible to beginners through the use of "language levels", a hierarchy of progressively richer subsets of Java. This hierarchy is implemented as an extension of the DrJava pedagogic programming environment.	Taming Java for the classroom	NA:NA:NA:NA	2018
Barbara Ericson:Mark Guzdial:Maureen Biggers	This paper describes how the Institute for Computing Education (ICE) at Georgia Tech is trying to improve the state of computer science education in secondary schools in Georgia. ICE is a partnership between the Georgia Department of Education and the College of Computing at Georgia Tech. The goals for this partnership are to increase the number and quality of computer science teachers and increase the number, quality, and diversity of computer science students. One specific goal is to increase the number of students taking the CS-AP course. We believe that this partnership can serve as a model for other states.	A model for improving secondary CS education	NA:NA:NA	2018
Alasdair McAndrew:Anne Venables	For the past few years, we have run a highly successful activity teaching some elementary digital image processing to students at years 9 and 10 of secondary school. The activity involves working with a digital camera, taking, capturing and saving images, and exploring pixel values and their relationship to image brightness and colour. We also perform some elementary processing tasks: thresholding, changing spatial resolution and quantization. Students then have a brief introduction to spatial filtering, followed by some examples: image blurring and edge detection. The activity finishes with some binary morphology. Given that digital image processing is usually offered only at the upper undergraduate or postgraduate level, we have demonstrated that it is quite possible to introduce some image processing concepts in a friendly and supportive environment to students in the middle years of their secondary schooling.	A "secondary" look at digital image processing	NA:NA	2018
Jim Huggins	NA	Session details: Ethics and computing	NA	2018
Richard J. Botting	The author shares techniques used in a successful "Ethics and Professionalism" class at California State University, San Bernardino. Ethical issues played a part in designing the class. The author describes active learning and holistic grading. Ethics demanded a novel way to post grades on the web without exposing personal data. This was evaluated by students. The author points out some improvements he has made, or will make.	Teaching and learning ethics in computer science: walking the walk	NA	2018
Mary Elaine Califf:Mary Goodwin	This paper discusses some of the issues involved in incorporating ethics material into programming courses. Incorporating ethics into such courses raises particular challenges because of the time-intensive nature of the courses and because of the difficulty of finding material that is both relevant to the course and comprehensible to the students. The paper presents four case studies that we have used successfully when incorporating ethics material into our own programming courses.	Effective incorporation of ethics into courses that focus on programming	NA:NA	2018
Alton F. Sanders	This paper, describes a format and grading scheme for a discussion course in Computing Ethics. The teaching of ethics, particularly in a discussion format, can be somewhat problematic in a computer science department where courses tend to be technical and faculty tend to be more comfortable with material presented in a lecture and/or workshop format. Grading of discussion and papers can also be perceived as more difficult or, at least, less grounded in objective criteria. The following describes an approach that attempts to address those particular concerns. The course described was offered in the spring of 2003 when two sections were taught.	A discussion format for computer ethics	NA	2018
Mark Jones	NA	Session details: Non-major courses	NA	2018
Mark E. Hoffman:David R. Vance	Do new college students already know much of what has previously been taught in our computer literacy courses (assuming a functional definition of knowledge according to which students are proficient with personal computer and Internet applications)? We conducted a survey of incoming first-year students at Quinnipiac University to learn not only their skill level with a representative range of technology tasks, but also from whom they learned these tasks. Results provide a profile of students who report learning many technology tasks primarily on their own. We propose a taxonomy according to which native technology tasks are learned with family support, social and educational technology task categories are supported by friends and teachers, respectively, and optional technology tasks are learned with little support. Our results will help in the design of appropriate computer literacy courses.	Computer literacy: what students know and from whom they learned it	NA:NA	2018
Mark Guzdial:Andrea Forte	There is growing interest in computing courses for non-CS majors. We have recently built such a course that has met with positive response. We describe our design process, which includes involvement of stakeholders and identifying a context that facilitates learning. We present evaluation results on success rates (approximately 90% of the students earn an A, B, or C) and impact of the course on students over time (80% report that the class has influenced them more than a semester later).	Design process for a non-majors computing course	NA:NA	2018
Tammy Bailey:Jeffrey Forbes	Just-in-Time Teaching (JiTT) is a teaching and learning strategy based on the interaction between web-based study assignments and an active learner classroom. The essence of JiTT is the feedback loop formed by the students' preparation outside the classroom that shapes their in-class experience. The goal of JiTT is to use feedback to guide teaching and to empower and motivate learners. This paper describes a successful implementation of the JiTT strategy for an introductory computer science course.	Just-in-time teaching for CS0	NA:NA	2018
Nick Parlante:David Levine:Steven Andrianoff:Aaron J. Gordon:Alyce Brady:Pamela Cutter:Paul Kube:Jefferson Ng:Richard E. Pattis	NA	Nifty assignment	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Holly Patterson-McNeill	NA	Session details: Evaluating student work	NA	2018
H. Chad Lane:Kurt VanLehn	Traditional methods of evaluating student programs are not always appropriate for assessment of different instructional interventions. They tend to focus on the final product rather than on the process that led to it. This paper presents intention-based scoring (IBS), an approach to measuring programming ability that looks at intermediate programs produced over the course of an implementation rather than just the one at the end. The intent is to assess a student's ability to produce algorithmically correct code on the first attempt at achieving each program goal. In other words, the goal is to answer question "How close was the student to being initially correct?" but not to speak to a student's debugging skills or ability to ultimately produce a working program. To produce an IBS, it is necessary to inspect a student's online protocol, which is simply the collection of all programs submitted to a compiler. IBS involves a three-phase process of (1) identification of the subset of all programs in a protocol that represent the initial attempts at achieving programming goals, (2) bug identification, and (3) rubric-based scoring. We conclude with an example application of IBS in the evaluation of a tutoring system for beginning programmers and also show how an IBS can be broken down by the underlying bug categories to reveal more subtle differences.	Intention-based scoring: an approach to measuring success at solving the composition problem	NA:NA	2018
J. Philip East:J. Ben Schafer	In this paper, we discuss in-person or face-to-face grading: what it is, a rationale for its use, our use of it, and an experiment we conducted to evaluate its use. While no statistically significant differences in instructional outcome effects were found, several interesting affective results were seen. Additionally, a number of research methodological suggestions arose from the study.	In-person grading: an evaluative experiment	NA:NA	2018
Charlie Daly:Jane Horgan	We used a new technique to analyse how students plagiarise programs in an introductory programming course. This involved placing a watermark on a student's program and monitoring programs for the watermark during assignment submission. We obtained and analysed extensive and objective data on student plagiarising behaviour. In contrast to the standard plagiarism detection approaches based on pair comparison, the watermark based approach allows us to distinguish between the supplier and the recipient of the code. This gives us additional insight into student behaviour. We found that the dishonest students did not perform significantly worse than the honest students in the exams. However, when dishonest students are further classified into supplier and recipient, it emerged that the recipient students performed significantly worse than the suppliers.	Patterns of plagiarism	NA:NA	2018
Anita Verno:Debbie Carter:Robb Cutler:Michelle Hutton:Lenny Pitt	This session will continue efforts by the ACM and Computer Science Teachers Association (CSTA) to create a comprehensive body of resources to support the implementation of a national K-12 computer science curriculum. The ACM K-12 Computer Science Curriculum Committee, with input from the Computer Science educational community, published a Model Curriculum [1] in 2003. The Model suggests a 4-level curriculum. Level-1 topics, primarily for the K-8 years, closely follow the well-defined ISTE Standards. Level-2 topics are suggested for all students in grades 9 or 10 and are comprised of introductory computer science content. Level-3 topics focus on analysis and design with emphasis on the scientific and engineering aspects of computer science. AP Computer Science and special topics courses comprise Level-4. This special session will focus on the learning objectives and activities for Level 2 of the K-12 Computer Science Model curriculum. Attendees will be invited to provide critical feedback that will help move the curriculum project forward.	Developing resources to support a national computer science curriculum for K-12	NA:NA:NA:NA:NA	2018
Joe Bergin:Kim Bruce:Michael K√∂lling	Various software tools have been proposed or developed for use in introductory programming courses. Usually, presentation of a new tool at the SIGCSE symposium occurs when a tool is first developed, leaving it to interested observers to identify success or failure of tools over their lifetime.For teachers, it can be difficult to compare available tools and judge potential application in their courses.In this session, three tools with an established track record of successful classroom use are presented: Karel J Robot [1], objectdraw [2], and BlueJ [2]. In addition to considering each tool individually, opportunities for combinations of these tools are also discussed.The focus of this session will be on concrete, hands-on advice that teachers can immediately apply in their classrooms.	Objects-early tools: a demonstration	NA:NA:NA	2018
Hilary Holz	NA	Session details: Gender issues	NA	2018
Sylvia Beyer:Michelle DeKeuster:Kathleen Walter:Michelle Colar:Christina Holcomb	Few women major in Computer Science (CS), which creates a serious bottleneck of women qualified to enter into the CS workforce. To address this bottleneck, this study examines gender issues in CS education. We assessed whether gender differences in CS students' stereotypes of CS and attitudes towards CS classes and the CS program remain stable from one semester to the next. We found that gender differences in CS students are not temporally stable and conclude that one-time assessments of gender differences may lead to erroneous conclusions. We also found that concerns about future work-family conflicts and gender issues in the CS program (e.g., female CS students feeling that they are not being taken as seriously as male CS students) emerged as important concerns for female CS students.0The implications of these findings for increasing the representation of women in CS are discussed.	Changes in CS students' sttitudes towards CS over time: an examination of gender differences	NA:NA:NA:NA:NA	2018
Carol Frieze	This paper tells the story of a student initiative, driven by a desire to diversify the images that surround the field of computer science and those who work in it.	Diversifying the images of computer science: undergraduate women take on the challenge!	NA	2018
Antonio M. Lopez, Jr.:Lisa J. Schulte:Marguerite S. Giguette	The "incredible shrinking pipeline" problem has become the euphemism for the dilemma of declining numbers of women seeking bachelor's degrees in a computing discipline. The problem is well recognized, and many have suggested reasons for it. Unfortunately, much of what has been written is based on anecdotal evidence or inferences made from statistical results from small samples of very specific groups in the computing disciplines. There have been few multi-disciplinary approaches to analyze the problem with even fewer attempts to create a model that might explain it. This paper is the end of a beginning. Having received a National Science Foundation grant to study gender-based differences and ethnic and cultural models in the computing disciplines, the principle investigators document the work that has led to launching a nationwide study of the problem to commence in Fall 2004.	Climbing onto the shoulders of giants	NA:NA:NA	2018
Larisa Eidelman:Orit Hazzan	The study described in this article continues research on gender-related issues in Computer Science education by focusing on the differences between two sectors in the Israeli high school system -- the Jewish sector (majority) and the Arab sector (minority). As it turns out, the under-representation of female high school students in CS studies is significantly more salient in the majority sector. This study explores this situation and attempts to explain it. We also explain how the findings of this research can be applied to other countries and societies.	Factors influencing the shrinking pipeline in high schools: a sector-based analysis of the Israeli high school system	NA:NA	2018
Tzu-Yi Chen	NA	Session details: The first year: studies of student performance	NA	2018
Susan Bergin:Ronan Reilly	This paper documents a study, carried out in the academic year 2003-2004, on fifteen factors that may influence performance on a first year object-oriented programming module. The factors included prior academic experience, prior computer experience, self-perception of programming performance and comfort level on the module and specific cognitive skills. The study found that a student's perception of their understanding of the module had the strongest correlation with programming performance, r=0.76, p‚Äπ0.01. In addition, Leaving Certificate (LC) mathematics and science scores were shown to have a strong correlation with performance. A regression module, based upon a student's perception of their understanding of the module, gender, LC mathematics score and comfort level was able to account for 79% of the variance in programming performance results.	Programming: factors that influence success	NA:NA	2018
Allison Elliott Tew:Charles Fowler:Mark Guzdial	Innovations in teaching and learning computer science education can easily be overly-specific to a given institution, or type of institution. For example, an innovation may require special hardware, or may make assumptions about the background of the students. This paper tracks one such innovation, a multimedia-focused introductory computing course, as it moved from a research-focused university to a public two-year college. At both institutions, the new course resulted in dramatically improved retention. Students at the two-year college were even more motivated and more positive about computing after the course than students at the research university. The results suggest ways of approaching innovation that is easily adaptable to other institutions.	Tracking an innovation in introductory CS education from a research university to a two-year college	NA:NA:NA	2018
Lecia J. Barker:Kathy Garvin-Doxas:Eric Roberts	Two pedagogical techniques of IT programs are compared, a traditionally taught computer science (CS) major and an IT certificate program using a fine arts approach to pedagogy. The latter graduates a higher percentage of women than of males. Although the two programs are quite different in the nature of the material and what students are expected to learn, CS instructors can borrow from the certificate program in ways that could increase attraction to and retention of women in CS, especially by allowing students to hear each other articulate what they are learning; mentioning practical applications of theoretical principles; and requiring that students display their knowledge and solutions to their peers.	What can computer science learn from a fine arts approach to teaching?	NA:NA:NA	2018
Tracy L. Lewis:J. D. Chase:Manuel A. P√©rez-Qui√±ones:Mary Beth Rosson	Research is presented that examined the effects of various measures of prior computer science experience and cognitive abilities on overall performance in a CS2 course. Participants selected from the CS2 course at two southeastern state universities were used within this study, resulting in a sample size of 161 (School A, n = 76; School B, n = 85). School A is a mid-sized comprehensive university and School B is a large research-intensive university.Self-reported data were collected on measures of experience in object-oriented processing, UNIX programming, web design, computing platforms, and various CS experience. Further, cognitive abilities measures of spatial orientation, visualization, logical reasoning, and flexibility were administered.The results show that the schools significantly differed on all measures of cognitive ability and most measures of prior computer science experience. The schools also differed on the extent to which these measures were related to overall course performance. The results suggest that, for school A, the cognitive ability visualization and the prior computer science experience measure of OO processing were significantly related to course performance. However, when examining school B, no measures were found significant.	The effects of individual differences on CS2 course performance across universities	NA:NA:NA:NA	2018
Lisa Kaczmarczyk	NA	Session details: Robotics	NA	2018
Christian L. Jacobsen:Matthew C. Jadud	In a world of ad-hoc networks, highly interconnected mobile devices and increasingly large supercomputer clusters, students need models of computation that help them think about dynamic and concurrent systems. Many of the tools currently available for introducing students to concurrency are difficult to use and are not intrinsically motivating. To provide an authentic, hands-on, and enjoyable introduction to concurrency, we have ported occam œÄ, a language whose expressive powers are especially compelling for describing communicating dynamic reactive processes, to the LEGO Mindstorms.	Towards concrete concurrency: occam-pi on the LEGO mindstorms	NA:NA	2018
Judith Challinger	In this paper we describe how a single Khepera II robot was used for an assignment in a senior level course on graphical user interface implementation. The assignment required each student to implement a graphical user interface for remotely controlling a Khepera II robot. From the author's point of view, the focus of the project was how to efficiently and effectively allow the 35 students enrolled in the course to have access to the robot for the purposes of testing and debugging. Furthermore, two of the students were enrolled through the distance education program and were remotely located. The intent was to see if an assignment making use of the robot would stimulate student interest, and whether it could be done with a minimal investment in hardware, lab, and instructor resources. The students were surveyed at the conclusion of the assignment in order to assess the effectiveness of the assignment. The results of this survey are presented, along with plans for future work.	Efficient use of robots in the undergraduate curriculum	NA	2018
Robert M. Harlan:Shelley McClarigan	Most undergraduate robotics courses introduce reactive behaviors, behaviors that are not mediated by world knowledge or a world model. What is missing from these courses, however, is the experience of combining reactive behaviors to create emergent behavior, behavior that is not anticipated by the robotocist but generated by the interaction of behaviors and the environment. We discuss two laboratory exercises that introduce reactive behaviors and combine them to produce emergent behaviors.	Creating emergent behaviors: two robotics labs that combine reactive behaviors	NA:NA	2018
Jerry B. Weinberg:William W. White:Cem Karacal:George Engel:Ai-Ping Hu	Real-world systems are comprised of interdependent components creating integrated systems. These systems are developed by multidisciplinary teams. The goal of this project is the development of a comprehensive undergraduate course in robotics that encompasses various fields that are integral to robotic systems: Computer Science, Electrical and Computer Engineering, and Mechanical Engineering. A main pedagogical goal of the course is to teach group dynamics and the skills necessary for interaction with people in different disciplines in multidisciplinary teams. Descriptions of the course and the hands-on lab assignments are presented along with course assessment.	Multidisciplinary teamwork in a robotics course	NA:NA:NA:NA:NA	2018
Owen Astrachan:Kim Bruce:Elliot Koffman:Michael K√∂lling:Stuart Reges	The participants will use a debate format with a provocative thesis to explore the pedagogical approach known as "objects early" or "objects first." By arguing in the affirmative, Elliot Koffman and Stuart Reges will point out concerns that have been raised about the approach. By arguing in the negative, Kim Bruce and Michael K√∂lling will describe schools that are succeeding with the approach and ways to address significant concerns. Owen Astrachan as moderator will ensure that the debate remains civil and will provide some humorous and possibly even insightful commentary on the evidence presented by both sides.	Resolved: objects early has failed	NA:NA:NA:NA:NA	2018
A. N. Kumar	NA	Session details: Emerging areas in computer science education	NA	2018
Amruth N. Kumar:Rose K. Shumba:Bina Ramamurthy:Lawrence D'Antonio	Computer Science is an evolving discipline. It continues to reinvent itself every 5-7 years. In order to keep up, Computer Science educators have had to continually modify the curriculum, either changing existing courses or introducing new ones. It is next to impossible for educators to keep abreast of all the developments in the discipline - learning a new area can place substantial demands on their time and effort.Therefore, this panel is intended as a quick introduction to some of the emerging areas and practices in Computer Science that deserve inclusion in the undergraduate curriculum. The panelists will present four new emerging areas - Grid Computing, Cybersecurity, Bioinformatics, and Robotics in the traditional Artificial Intelligence course. Each panelist will present a typical syllabus, list sample resources, and recount his/her experience developing the course. It is hoped that this panel will help interested faculty adopt successful practices.	Emerging areas in computer science education	NA:NA:NA:NA	2018
Sue Fitzgerald	NA	Session details: Student teams	NA	2018
Deborah A. Trytten	The software industry needs our graduates to have significant and meaningful experiences with teamwork. A new design has been developed for a teamwork exercise based on peer code review. This design uses the three Ss of building assignments for cooperative learning: Same problem, Specific choices, and Simultaneous report. Students perform peer code review individually, and within and between stable small groups. The code can be sanitized student work or may be altered by the instructor to meet specific course learning objectives. The review is done in three phases. First, individuals answer yes or no to questions that evaluate the quality of the design and code. Then each group answers the same set of questions. When the groups have completed their evaluation, the class joins together to reveal and discuss the answers. This design was successfully implemented during the 2003-2004 academic year in an introductory programming class. This design is applicable to more advanced classes with significant programming assignments. Future work includes extending this structure to give students experience with other software engineering artifacts early in their academic careers.	A design for team peer code review	NA	2018
D. Smarkusky:R. Dempsey:J. Ludka:F. de Quillettes	Information technology projects are growing in complexity and require teams to solve problems and develop solutions. With current undergraduate, computer science and information systems curricula, students graduate with technical skills, but lack team project experiences. We have identified and developed team knowledge modules that are being taught to students in an effort to increase awareness of team process fundamentals and build the foundation of an effective team player. In this paper we present the challenges that we face with team projects and then discuss team knowledge modules that are being taught to incoming freshmen to engage students in a curriculum that requires team projects in each course. We conclude with our assessment results and show comparisons of student team knowledge by instruction and experience.	Enhancing team knowledge: instruction vs. experience	NA:NA:NA:NA	2018
Dawn McKinney:Leo F. Denton	Team experiences can be important learning experiences, and industry highly values team skills in graduates. Low retention rates might also be improved with early team experiences because team experiences have been linked to increases in the sense of belonging, a key retention factor. Team experiences in upper-level courses could also benefit from earlier team experiences. The purpose of this paper is to describe and evaluate an early use of teams in the second semester of our CS1 sequence. The instructional methodology drew heavily upon the professional practices of an agile software development model, Extreme Programming. These professional practices fostered the development of team skills during a semester-long project in a closed lab. The evaluation of our experience revealed aspects of the good, the bad, and the ugly. Areas for improvement and future work are also explained.	Affective assessment of team skills in agile CS1 labs: the good, the bad, and the ugly	NA:NA	2018
Leland L. Beck:Alexander W. Chizhik:Amy C. McElroy	A set of cooperative learning exercises were designed for use in a Java-based CS1 course. The exercises used specific roles to focus students' attention on key concepts of the Java language, and on key mental processes of programming and problem solving. A controlled experiment was conducted to evaluate the effectiveness of this approach. The results show that the cooperative learning experience had a significant positive effect on student performance, and may have been of special benefit to women and minority students.	Cooperative learning techniques in CS1: design and experimental evaluation	NA:NA:NA	2018
Sally Fincher	This session showcases the projects that have received support from a SIGCSE Special Project Award in the previous year.	SIGCSE special projects showcase	NA	2018
Ken Surendran	NA	Session details: Design patterns	NA	2018
Dung "Zung" Nguyen:Mathias Ricken:Stephen Wong	We provide a systematic transformation of an LL(1) grammar to an object model that consists of an object structure representing the non-terminal symbols and their corresponding grammar production rules, a union of classes representing the terminal symbols (tokens).We present a variant form of the visitor pattern and apply it to the above union of token classes to model a predictive recursive descent parser on the given grammar. Parsing a non-terminal is represented by a visitor to the tokens. For non-terminals that have more than one production rule, the corresponding visitors are chained together according to the chain of responsibility pattern in order to be processed correctly by a valid token. The abstract factory pattern, where each concrete factory corresponds to a non-terminal symbol, is used to manufacture appropriate parsing visitors.Our object-oriented formulation for predictive recursive descent parsing eliminates the traditional construction of the predictive parsing table and yields a parser that is declarative and has minimal conditionals. It not only serves to teach standard techniques in parsing but also as a non-trivial exercise of object modeling for objects-first introductory courses.	Design patterns for parsing	NA:NA:NA	2018
Prasun Dewan	The benefits of object-oriented programming apply only to programs consisting of multiple objects. Inter-object design patterns make it, in theory, possible for beginning programmers to create well-understood forms of such programs. However, their descriptions have been targeted at experienced programmers with knowledge, for instance, of the implementation of compilers. We show that it is possible to explain and motivate several of these patterns including the iterator, model-view-controller, model-interactor, observer, fa√ßade, composite, and factory patterns by showing them working "in the small" in simple examples. We have effectively used this approach to teach an undergraduate class including several college freshmen and one high-school junior, who were able to exercise the patterns "in the medium.	Teaching inter-object design patterns to freshmen	NA	2018
Michael R. Wick	Design patterns are an important element of today's undergraduate curricula. However, their inherent complexities often make them difficult for entry-level students to even partially grasp. In this paper, we describe the latest in our continuing efforts to build educational materials appropriate for infusing design patterns in entry-level computer science courses.	Teaching design patterns in CS1: a closed laboratory sequence based on the game of life	NA	2018
Stephen Weiss	Learning design patterns is tough, even for seasoned programmers who have seen lots of programs and hence have a sense for constructs that tend to recur. Teaching design patterns to new programmers is even tougher. As Asher Sterkin states, "Teaching design patterns in isolation is similar to studying a foreign language with only a dictionary." [4]. It is far better to try to teach design patterns using killer examples to help motivate and illustrate each pattern. I propose here something a little more radical: to teach by stealth. With a small number of principles of good program design, and using a running case study that grows in complexity through the semester, we can, through class discussions and exercises, "invent" programming solutions that turn out to be some of the important design patterns. The official names and definitions of the pattern [2, 3] are revealed only after the fact, if at all.	Teaching design patterns by stealth	NA	2018
Susan Dean	NA	Session details: Assessing student learning	NA	2018
Des Traynor:J. Paul Gibson	This paper describes the use of random code generation and mutation as a method for synthesising multiple choice questions which can be used in automated assessment. Whilst using multiple choice questions has proved to be a feasible method of testing if students have suitable knowledge or comprehension of a programming concept, creating suitable multiple choice questions that accurately test the students' knowledge is time intensive.This paper proposes two methods of generating code which can then be used to closely examine the comprehension ability of students. The first method takes as input a suite of template programs, and performs slight mutations on each program and ask students to comprehend the new program. The second method performs traversals on a syntax tree of possible programs, yielding slightly erratic but compilable code, again with behaviour that students can be questioned about. As well as generating code these methods also yield alternative distracting answers to challenge the students. Finally, this paper discusses the gradual introduction of these automatically generated questions as an assessment method and discusses the relative merits of each technique.	Synthesis and analysis of automatic assessment methods in CS1: generating intelligent MCQs	NA:NA	2018
Gary D. Boetticher:Wei Ding:Charles Moen:Kwok-Bun Yue	There is a limit on the amount of time a faculty member may devote to each student. As a consequence, a faculty member must quickly determine which student needs more attention than others throughout a semester. One of the most demanding courses in the CS curriculum is a data structures course. This course has a tendency for high drop rates at our university. A pre-assessment exam is developed for the data structures class in order to provide feedback to both faculty and students. This exam helps students determine how well prepared they are for the course. In order to determine a student's chance of success in this course, a Genetic Program-based experiment is constructed based upon the pre-assessment exam. The result is a model that produces an average accuracy of 79 percent.	Using a pre-assessment exam to construct an effective concept-based genetic program for predicting course success	NA:NA:NA:NA	2018
Leen-Kiat Soh:Ashok Samal:Suzette Person:Gwen Nugent:Jeff Lang	An introductory CS1 course presents problems for educators and students due to students' diverse background in programming knowledge and exposure. Students who enroll in CS1 also have different expectations and motivations. Prompted by the curricular guidelines for undergraduate programs in computer science released in 2001 by the ACM/IEEE, and driven by a departmental project to reinvent the undergraduate computer science and computer engineering curricula at the University of Nebraska-Lincoln, we are currently implementing a series of changes which will improve our introductory courses. One key component of our project is an online placement examination tied to the cognitive domain that assesses student knowledge and intellectual skills. Our placement test is also integrated into a comprehensive educational research design containing a pre- and post-test framework for assessing student learning. In this paper, we focus on the design and implementation of our placement exam and present an analysis of the data collected to date.	Designing, implementing, and analyzing a placement test for introductory CS courses	NA:NA:NA:NA:NA	2018
Laurie Murphy:Ren√©e McCauley:Suzanne Westbrook:Timothy Fossum:Susan Haller:Briana B. Morrison:Brad Richards:Kate Sanders:Carol Zander:Ruth E. Anderson	Research on learning suggests the importance of helping students organize their knowledge around meaningful patterns of information. This paper reports on a multi-institutional study to investigate how senior computer science majors articulate and organize their knowledge of programming concepts using a card-sorting technique adopted from knowledge acquisition. We show that card-sorts are an effective means of eliciting students' knowledge structures and suggest they can also be used to help students organize their knowledge throughout the curriculum.	A multi-institutional investigation of computer science seniors' knowledge of programming concepts	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Alvero Monge	NA	Session details: Systems-level programming	NA	2018
Steven Robbins	Virtual memory is a major topic in undergraduate operating systems courses. One aspect of virtual memory, address translation, is often covered in an abstract way. When examples are given, only a piece of the translation is done, using a small translation lookaside buffer or a small single-level page table. Since most students learn best by doing rather than watching, the topic is best understood by having students do realistic address translations. This is problematic since it involves lookup from several large tables of data which are difficult to fit on a piece of paper. The address translation simulator described here solves this problem by presenting the student with complete page tables in a way that allows simple navigation of these tables. The simulator can be used for both teaching and student evaluation.	An address translation simulator	NA	2018
Jason Nieh:Chris Vaill	Operating system courses teach students much more when they provide hands-on kernel-level project experience with a real operating system. However, enabling a large class of students to do kernel development can be difficult. To address this problem, we created a virtual kernel development environment in which operating systems can be developed, debugged, and rebooted in a shared computer facility without affecting other users. Using virtual machines and remote display technology, our virtual kernel development laboratory enables even distance learning students at remote locations to participate in kernel development projects with on-campus students. We have successfully deployed and used our virtual kernel development environment together with the open-source Linux kernel to provide kernel-level project experiences for over nine hundred students in the introductory operating system course at Columbia University.	Experiences teaching operating systems using virtual platforms and linux	NA:NA	2018
Joel C. Adams:W. David Laverell	Having students modify an actual operating system kernel or network protocol stack opens their eyes to what is going on "beneath the hood" of a computer. However student modifications to a system may result in an unstable computer. Because of this, giving students such experience has in the past required a lab and/or computers dedicated to the students in the system-level course, and computer science departments without such dedicated facilities have been unable to provide their students with system-level experience. In this paper, we present two ways of giving students system-level experience in a non-dedicated lab; one using commercial software (VMWare), and another using open-source freeware (User Mode Linux Kernel).	Configuring a multi-course lab for system-level projects	NA:NA	2018
John W. McCormick	This paper describes a laboratory used to support a junior level course in real-time embedded software development. Thirteen years of data comparing programming languages for a real-time systems course are presented. Funding provided by the Maytag Corporation and Rockwell-Collins makes it possible to provide other schools with low cost electronics necessary to duplicate this laboratory with a minimum of effort.	We've been working on the railroad: a laboratory for real-time embedded systems	NA	2018
Michael Goldwasser	NA	Session details: New curricular directions	NA	2018
Gary Lewandowski:Elizabeth Johnson:Michael Goldweber	In this paper, we describe activities undertaken at our university to revise our computer science program to develop an environment and curriculum which encourages creative, hands-on learning by our students. Our main changes were the development of laboratory space, increased hands-on problem solving activities in the introductory course, open-ended programming projects in the early courses including a requirement of an open-ended project extension for an A grade, and the integration of a seminar into the senior project requirement. Our results suggest that these changes have improved student skill and willingness to deal with new problems and technologies. An additional surprising side-effect appears to be a dramatic increase in retention over the first two years, despite lower overall grade averages in those courses.	Fostering a creative interest in computer science	NA:NA:NA	2018
James B. Fenwick, Jr.:Barry L. Kurtz	We have been funded by the National Science Foundation to investigate the feasibility of distributing large software engineering projects across the academic curriculum (DUE 0127439). This paper reports on the pedagogical aspects of the intra-curriculum methodology we have developed including motivation, goals, instructor responsibilities, and variations of the approach. The paper also reports on three applications of the methodology including lessons learned.	Intra-curriculum software engineering education	NA:NA	2018
Ron Coleman:Mary Krembs:Alan Labouseur:Jim Weir	This paper describes initiatives at Marist College to develop a Game Concentration in the undergraduate Computer Science curriculum. These initiatives contemplate recommendations for existing courses as well as adoption of new courses. We also consider activities of the Association of Computing Machinery (ACM) in this area and opportunities for students beyond the classroom.	Game design & programming concentration within the computer science curriculum	NA:NA:NA:NA	2018
David G. Kay:Andr√© van der Hoek:Debra J. Richardson	Because the field of computer science has broadened so much in recent years, traditional degree programs are becoming crowded with new courses, each introducing its own "essential" topic. However, with more and more such courses, it is no longer possible to cover every topic in a single, coherent, four-year program. Many alternative approaches are available to address this situation. At UC Irvine, we have chosen a solution in which we offer four coordinated degree programs: a B.S. in Computer Science & Engineering, a conventional B.S. in Computer Science, a new B.S. in Informatics, and a broad overview B.S. in Information and Computer Science. Of these, the B.S. in Informatics is the most innovative, focusing on software and information design. Context plays a particularly strong role in our B.S. in Informatics: Placing software development in context is critical to the delivery of successful solutions, and we educate our students accordingly. We present our definition of informatics, detail our curriculum, describe its pedagogical characteristics and objectives, and conclude with some critical observations regarding informatics and its place in computer science education.	Informatics: a focus on computer science in context	NA:NA:NA	2018
David Ginat:Richard Anderson:Daniel D. Garcia:Richard Rasala	Randomness and probability are essential notions in CS studies. They are invoked and employed in diverse courses at different levels. Although a structured course on these notions does not usually appear early in the curriculum, students and educators may benefit from their encapsulation already in CS0 and CS1. The special session will involve motivation, demonstration, and discussion with the audience of the assets of such an encapsulation. Attending CS educators will enrich their teaching perspectives, pedagogical tools, and assignment repertoires.	Randomness and probability in the early CS courses	NA:NA:NA:NA	2018
J. Beidler	NA	Session details: The many facets of diversity	NA	2018
Jack Beidler:Hilary Holz:Ken Yasuhara:Evans J. Adams	The panelists approach diversity from different points of view and experiences to produce a positive and productive foundation for an open discussion on the many facets of diversity, it potential, and positive impact on our profession.	The many facets of diversity	NA:NA:NA:NA	2018
Stu Zweben:Han Reichgelt:Gayle Yaverbaum	The Computing Accreditation Commission (CAC) of ABET has proposed changes in the structure of the criteria used to accredit computer science and information systems programs. The new structure combines, into so-called "general criteria," components of criteria that apply to any computing program accredited by CAC. Individual program areas will supply criteria that only apply to that specific program area, to supplement the general criteria. The new criteria format allows CAC to accredit additional program areas, such as information technology. In fact, program criteria for information technology also have been proposed. This session will discuss the new criteria structure, including the proposed general and program criteria, changes to existing criteria, and the timetable for implementation of the new structure.	Computing accreditation: a new criteria structure and new flexibility	NA:NA:NA	2018
Richard Pattis	The title of my talk comes from a Hollywood executive's comments on Fred Astaire's screen test. Much later, Katherine Hepburn remarking on Fred's eventual success with his most frequent partner said, "Fred gave Ginger [Rogers] class, and Ginger gave Fred sex [appeal]". I was surprised and delighted to win this award, and it started me thinking about how I got to where I am today. In my talk, I'll look back at 36 years of learning and teaching programming, and reflect on my many "dancing" partners. Some were around for a short time, some I dance with still, and some I dance with only in my dreams. In some cases, I led; in other cases I followed. Some dances were as graceful as a waltz, while others were more like an apache dance. During this talk I'll find some time to discuss "a view from the trenches" of four decades of teaching introductory programming, and if I can muster the courage, speculate on the future.	Can't sing, can't act, can dance a little: (on choosing the right dancing partners)	NA	2018
Mike O'Leary	We describe a laboratory based capstone course in computer security for undergraduates. The course is based on a sequence of hands-on laboratory exercises for four teams of students. It emphasizes defensive tools and techniques at the expense of attacks; it also takes a network centered view where student teams set up and configure entire networks. In this paper, we describe the course, how it fits into the curriculum, and the laboratory facilities we have developed. We then present the details of some of our lab exercises, and discuss the lessons that we have learned.	A laboratory based capstone course in computer security for undergraduates	NA	2018
Binto George:Anna Valeva	Database security has paramount importance in industrial, civilian and government domains. Despite its importance, our search reveals that only a small number of database security courses are being offered. In this paper, we share our experience in developing and offering an undergraduate elective course on database security with limited resources. We believe that database security should be considered in its entirety rather than being component specific. Therefore, we emphasize that students develop and implement a database security plan for a typical real world application. In addition to the key theoretical concepts, students obtain hands-on experience with two popular database systems. We encourage students to learn independently making use of the documentation and technical resources freely available on the Internet. This way, our hope is that they will be able to adapt to emerging systems and application scenarios.	A database security course on a shoestring	NA:NA	2018
H. Yu:W. Liao:X. Yuan:J. Xu	This paper presents a hybrid teaching approach, a new Web Security course as well as how to use the hybrid approach to teach the Web Security course to practice information assurance. The hybrid teaching approach contains three key issues that are keeping the lecture materials up-to-date, assigning former research projects as comprehensive team projects, and connecting classroom knowledge with real world web applications. We have applied this approach to the teaching a Web Security course and achieved excellent results. Our experience exhibits that integrating education, research and web applications into the Web Security course to practice information assurance are essential for a sound security education. Using this approach instructors connect knowledge in the classroom to real world applications, attract students to the security area, and train students to become information assurance professionals.	Teaching a web security course to practice information assurance	NA:NA:NA:NA	2018
Laurie Murphy:Brad Richards:Ren√©e McCauley:Briana B. Morrison:Suzanne Westbrook:Timothy Fossum	This paper describes a multi-institutional study that used categorization exercises (known as constrained card sorts) to investigate gender differences in graduating computer science students' learning and perceptions of programming concepts. Our results show that female subjects had significantly less pre-college programming experience than their male counterparts. However, for both males and females, we found no correlation between previous experience and success in the major, as measured by computer science grade point average at graduation. Data also indicated that, by the time students completed their introductory courses, females reported nearly equal levels of mastery as males of the programming concepts. Furthermore, females generally considered the programming concepts to be no more difficult than did the men.	Women catch up: gender differences in learning programming concepts	NA:NA:NA:NA:NA:NA	2018
Carol Frieze:Orit Hazzan:Lenore Blum:M. Bernardine Dias	There are some arguments that suggest women need academic handholding, such as a "female friendly" curriculum, in order for them to participate and be successful in computer science and related fields. Then there are other arguments that suggest we need to change the field to suit women or help women adjust to the field. In this paper we present a different perspective that shows none of these may be necessary. The "Women-CS Fit" is already there! Specifically, under certain cultural and environmental conditions we can see that women fit very well into computing fields and what we have been attributing to gender is actually the result of cultural and environmental conditions. The reasons for women participating in -- or not participating in -- the field of computer science have little to do with gender and a lot to do with culture. In other words, we need to recognize that this is a cultural issue, and an issue that concerns us all. Appropriate local interventions in the micro-culture can have large effect. This argument is illustrated in this paper by three case studies.	Culture and environment as determinants of women's participation in computing: revealing the "women-CS fit"	NA:NA:NA:NA	2018
Lori Carter	The statistics show that the number of Computer Science majors is dropping across the United States. Possible reasons include a reduced number of jobs in the field, an incorrect perception of what Computer Scientists do, and the students' disinterest due to a lack of familiarity with the subject. The reasons may be different for males and females. This paper reports on a study in which 836 high school calculus and pre-calculus students were surveyed to try to determine why students with an apparent aptitude for CS did not pursue a major in Computer Science. The results supported some of the hypotheses for declining enrollment, and rejected others. The top reasons for rejecting the major were the same for both genders, but the reasons for choosing the major differed.	Why students with an apparent aptitude for computer science don't choose to major in computer science	NA	2018
Jerry Mead	This paper describes the structure of two, self-paced, language-translation tutorials that integrate nicely into a principles-based undergraduate programming languages course, thus bringing material normally covered in a compiler course down into the context of a traditional programming languages course. The primary goal of the tutorials is to provide students with useful models for programming language principles as well as a very basic introduction to compiling techniques, including tokenizing, parsing, static semantic checking, and code generation. The paper also exposes a pedagogic technique of repeated exposure that drives the success of these tutorials.	A compiler tutorial scaled for the programming languages course	NA	2018
Hilda M. Standley	Undergraduate and master's students enrolled in a programming language paradigms class are given the assignment to design a new programming language paradigm. The students are asked to develop a paradigm concept, demonstrate the utility of the paradigm for programmed solutions, and outline a sample programming language. Resulting student-designed paradigms from this class fall into three loosely defined categories: connection with a physical item, modeling a process, and representing program structure. The resulting class experience demonstrates that students can think and create beyond existing paradigms and features of languages to the level of abstraction that defines a new paradigm.	'Programming language paradigms' instruction through designing a new paradigm	NA	2018
Michael R. Wick:Daniel E. Stevenson	The traditional way to teach Prolog is to have students start by writing recursive mathematical definitions of the problems they are trying to solve. While this is an effective technique, it does not fit well into a Programming Languages course that uses a single demonstration language to illustrate the different paradigms. Thus, we have developed an approach to introduce students to Prolog via our demonstration language, Scheme. Additionally, we performed an experiment to determine if the Scheme to Prolog approach is as effective at introducing Prolog as the more traditional recursive mathematical definition approach.	On using scheme to introduce prolog	NA:NA	2018
Adrienne Decker:Phil Ventura:Christopher Egert	Over the last several years, there have been reports of many institutions using undergraduate students as teaching assistants (UTAs) in the classroom for CS1 as well as other courses in the curriculum. The literature has shown successes over a wide range of class sizes and UTA responsibilities. At University at Buffalo, we have been using undergraduates as teaching assistants in our CS1 course since Spring 2002, and have been impressed with the results. Throughout the deployment of the UTA program, the instructors of CS1 have observed that when UTAs are utilized in the classroom, both the students and the UTAs themselves benefit from their interactions. The UTAs have also become actively involved in providing feedback about the course design and have been suggesting improvements to assignments and in-class examples. They have also been involved in the process to hire new UTAs to replace those that are graduating. We have observed that such interactions have improved the UTAs sense of investment and ownership in the CS1 course.	Through the looking glass: reflections on using undergraduate teaching assistants in CS1	NA:NA:NA	2018
Sebastian Niezgoda:Thomas P. Way	Plagiarism of material from the Internet is a widespread and growing problem. Computer science students, and those in other science and engineering courses, can sometimes get away with a "cut and paste" approach to assembling a paper in part because the expected style of technical writing is less expositional than in liberal arts courses. Detection of cut and paste plagiarism is time-consuming when done by hand, and can be greatly aided by automated software tools. This paper reports on the design of a software tool called SNITCH that implements a fast and accurate plagiarism detection algorithm using the Google Web API. Issues related to plagiarism detection software are discussed and empirical results of a performance and accuracy study are presented.	SNITCH: a software tool for detecting cut and paste plagiarism	NA:NA	2018
Robert E. Noonan	The phases of a grading system are discussed, namely: delivery, assessment, marking, review, and return. A system which addresses the back end, namely, the last three phases, is described. Late binding of marks to a graded project is used, simplifying the revision process. The use of the system by various courses and its benefits are discussed.	The back end of a grading system	NA	2018
Myles McNally:Michael Goldweber:Barry Fagin:Frank Klassner	NA	Do lego mindstorms robots have a future in CS education?	NA:NA:NA:NA	2018
Brian J. Rosmaita:Katherine Deibel:Robert F. Cohen:Mary Anne L. Egan	NA	Accessibility and computer science education	NA:NA:NA:NA	2018
Peter Denning:Andrew McGettrick:Paul Rosenbloom:Larry Snyder	NA	Re-centering computer science	NA:NA:NA:NA	2018
Thomas J. Cortina:Richard McKenna	In this paper, we describe the design and implementation of a new history of computing course that includes personal and historical perspectives from faculty members to supplement the course material. Despite decreasing enrollments in our computer science courses, this new course has achieved significantly large enrollments and a wide audience due to this unique faculty perspective in addition to the approval of this course as a general education requirement that addresses the implications of science and technology on society.	The design of a history of computing course with a unique perspective	NA:NA	2018
Michael B. Gousie	Web Programming, Graphics, and Design is a course with no prerequisites that teaches non-computer science majors how to create their own sophisticated web pages. The course begins with the use of popular software such as Dreamweaver and Fireworks and then progresses to writing interactive web pages in Java. Students learn how to program with Java's Abstract Window Toolkit (AWT) as well as the graphics library, leading to the creation of 3D images. Solving problems involving mathematics is a theme throughout much of the course. Finally, following Wheaton College's curricular emphasis on inter-departmental offerings, the course is linked with Graphic Design I in the Art Department, enabling students to learn the design portion in even greater depth.	A robust web programming and graphics course for non-majors	NA	2018
Daniel C. Cliburn	This paper describes a non-major introductory course in computer science, specifically for students at a liberal arts institution. College-wide writing and speaking requirements across the curriculum are supported through a variety of assignments. The computer science department has experienced many benefits as a result of offering this course, including improved performance by students in introduction to programming and greater enrollment numbers across departmental courses. Suggestions for improving future offerings of the class are also proposed in the paper.	A CS0 course for the liberal arts	NA	2018
Li Xu:Fred G. Martin	Traditionally, the topics of compiler construction and language processing have been taught as an elective course in Computer Science curricula. As such, students may graduate with little understanding or experience with the useful techniques embodied in modern compiler construction.In this paper, we present the design of Chirp, a language specification and compiler implementation. As a language, Chirp is based on Java/C syntax conventions and is matched with the stack-based virtual machine that is built into the simple yet versatile Handy Cricket educational robot controller. As a compiler, the Chirp design is a series of Java components. These modules demonstrate key compiler construction techniques including lexing, parsing, intermediate representation, semantic analysis, error handling and code generation.We have designed a 6-week teaching module to be integrated into an intermediate-level undergraduate programming class. In the module, students will incrementally build the Chirp compiler, culminating with code generation for the Cricket controller. They will test their work on both physical Cricket-based robots and a web-based Cricket simulator. The Chirp system and our pedagogical design provides a realistic and engaging environment to teach compilers in undergraduate core programming courses.	Chirp on crickets: teaching compilers using an embedded robot controller	NA:NA	2018
William M. Waite	The broadening of computer science education has called into question the roles of many traditional core courses. In order to remain viable, courses such as compiler construction must provide a coherent view of their subject matter that fits with the rest of the institution's curriculum. Three strategies have evolved for this course. As described in this paper, each strategy provides a model that a professor can use to design an appropriate course for their situation.	The compiler course in today's curriculum: three strategies	NA	2018
Jeremy D. Frens:Andrew Meneely	Traditional approaches to semester-long projects in compiler courses force students to implement the early stages of a compiler in depth; since many students fall behind, they have little opportunity to implement the back end. Consequently, students have a deep knowledge of early material and no knowledge of latter material. We propose an approach based on incremental development and test-driven development; this approach solves the emphasis problem, provides experience with useful tools, and allows for such a course to be taught in a three or four weeks.	Fifteen compilers in fifteen days	NA:NA	2018
Sam Phu Manh Tran:T. Andrew Yang	Target tracking is one of the most important applications of wireless sensor networks. Optimized computation and energy dissipation are critical requirements to maximize the lifetime of the sensor network. There exists a demand for self-organizing and routing capabilities in the sensor network. Existing methods attempting to achieve these requirements, such as the LEACH-based algorithms, however, suffer either redundancy in data and sensor node deployment, or complex computation incurred in the sensor nodes. Those drawbacks result in energy use inefficiency and/or complex computation overhead. OCO, or Optimized Communication and Organization, is an algorithm that ensures maximum accuracy of target tracking, efficient energy dissipation, and low computation overhead on the sensor nodes. Simulation evaluations of OCO are compared with other two methods under various scenarios.	Evaluations of target tracking in wireless sensor networks	NA:NA	2018
William I. Bullers, Jr.:Stephen Burd:Alessandro F. Seazzu	Virtual machines provide a secure environment within which students may install, configure, and experiment with operating system, network, and database software. This paper describes experiences teaching three advanced courses in system and network administration, information security and assurance, and database administration using VMware workstation in a shared student laboratory. The paper describes benefits and challenges in course and lab configuration, security, and administration.	Virtual machines - an idea whose time has returned: application to network, security, and database courses	NA:NA:NA	2018
John DeHart:Fred Kuhns:Jyoti Parwatikar:Jonathan Turner:Charlie Wiseman:Ken Wong	The Open Network Laboratory (ONL) is a remotely accessible network testbed of high performance routers which has been designed with an eye towards ease of use for users from the na√Øve to the expert. The system is built around a set of high-performance routers that are extendible and easily configurable through the Remote Laboratory Interface (RLI), an intuitive graphical interface. The RLI also makes it easy to configure packet filters in the routers, assign flows or flow aggregates to separate queues with configurable QoS and attach hardware monitoring points to real-time charts. The RLI's real-time charts and user data facility make it easy to directly view the effects of traffic as it moves through a router, allowing the user to gain better insight into system behavior and create compelling demonstrations. Each port of the router is equipped with an embedded processor that supports software plugins which allow users to extend the system's functionality. This paper describes the ONL and how it can be used in networking education. Our web site onl.arl.wustl.edu includes a short video and a tutorial.	The open network laboratory	NA:NA:NA:NA:NA:NA	2018
Lawrence J. Osborne	Our entering freshmen have little experience with the underlying concepts of computer science and information technology, and they are not familiar with the process of absorbing new information through listening and reading and cooperating with other well-trained individuals to increase their knowledge and skills in a subject. Simply making group assignments requiring research papers and presentations does not enable students to appreciate this process which is a characteristic of all fields of scientific inquiry today. Most of our upper division courses have team projects, but student culture resists effective teamwork. We have established a course for freshman entitled "Thinking, Speaking, and Writing in Computer Science" in which we try to lay the groundwork for group work in later classes by fostering a sense of interdependence among team members, accountability of individual students to the team in the form of preparation and completion of project tasks, frequent meetings to promote team goals, the development of social skills required for collaboration, and the value of group discussion of strategies in problem solving. Although the course has been in existence only two years, our department has observed that students are finding that following this approach to learning leads to improved academic performance, and that students are becoming more adept in learning skills as they realize the benefits that accrue from our approach to intelligent interaction with their peers and instructors.	Thinking, speaking, and writing for freshmen	NA	2018
Mark E. Hoffman:Timothy Dansdill:David S. Herscovici	Writing in Computer Science education is typically writing to communicate to a professional audience--also known as "writing in the discipline." (WID) A few Computer Science educators have promoted "writing to learn" (WTL) for active learning. A gap exists between these two forms of writing that inhibits the general adoption of writing in Computer Science. We propose that "bridging" informal WTL assignments to formal disciplinary writing as a way of promoting general adoption of writing across all courses, thus improving thinking and writing skills for all Computer Science students. We include examples of assignments that bridge writing to learn and writing in the discipline.	Bridging writing to learn and writing in the discipline in computer science education	NA:NA:NA	2018
Henry A. Etlinger	We describe a framework in which to consider designing an entire course for Computer Science majors that covers both technical communications as well as more general communication issues. By utilizing abstraction, we're able to fashion a framework that allows instructors to design specific course elements that meet their needs or priorities. We take advantage of many other efforts reported upon in the past that discuss processes that students can follow in developing effective communication artifacts, blend writing or speaking assignments into individual courses, or talk about communication-intensive courses.	A framework in which to teach (technical) communication to computer science majors	NA	2018
Roger Ferguson:Chang Liu:Mary Last:Joe Mertz	NA	Service-learning projects: opportunities and challenges	NA:NA:NA:NA	2018
Stu Zweben:Han Reichgelt:Gayle Yaverbaum	NA	Outcomes-based computing accreditation criteria	NA:NA:NA	2018
Eric Roberts:Kim Bruce:James H. Cross, II:Robb Cutler:Scott Grissom:Karl Klee:Susan Rodger:Fran Trees:Ian Utting:Frank Yellin	NA	The ACM java task force: final report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Graciela Gonzalez	This paper presents a description of a course redesign to incorporate active and cooperative learning techniques into an Introduction to Programming course (CS1) in a systematic way that addresses all aspects of the course: delivery, management, and assessment. The primary goals of the experience were to improve student learning in CS1 and help students develop a support system. By increasing their competence and confidence, and helping them establish a working relationship with their peers, we sought to improve their persistence and performance in the program. We thus focus on student performance and retention through the follow-up class (CS2) as taught at Sam Houston State University. The results are encouraging. We observed that 70% of those students that had the Active Learning experience in CS1 end up getting a passing grade in CS2, with only 10% withdrawing (dropping or resigning), in contrast to a 44% passing rate and 25% withdrawal rate among those that took a regular CS1 class.	A systematic approach to active and cooperative learning in CS1 and its effects on CS2	NA	2018
Dawn McKinney:Leo F. Denton	The research on teaching and learning over the past 50 years suggests that the early use of collaborative learning leads to higher interest, higher retention, and higher academic performance in students. Early use of these techniques can also increase the sense of belonging for students and can lead to the early development of collaborative skills to prepare students for team experiences in subsequent courses and future careers. During the weekly lab sessions of a second semester introduction to programming course students engaged in collaborative learning experiences through team-based problem solving, project planning, pair programming, and other agile software development practices. Course objectives provided specific goals and criteria for assessment relative to these skills. The assessment in the authors' prior work identified several problem areas which led to specific initiatives to address those problems: (a) instructor-chosen teams, (b) early instruction and reflection on team skills, (c) feedback on team performance, and (d) the use of an IDE that incorporates an automated test-driven development tool. This paper describes the implementation and assessment of these efforts. A significant increase in student team skills from the middle of the semester to the end of the semester was observed.	Developing collaborative skills early in the CS curriculum in a laboratory environment	NA:NA	2018
Timothy A. Budd	In this paper, we describe the how active learning techniques have been successfully applied in a CS 2 course.	An active learning approach to teaching the data structures course	NA	2018
Matt Bower	For lecturers who are used to presenting face-to-face, facilitating online classes through a virtual classroom interface proposes several new challenges. At the same time the affordances of the media offer many opportunities to improve the quality of students' learning. This paper outlines the pedagogical lessons derived from convening a first year introductory programming unit through a series of twelve, two-hour online classes. General virtual classroom strategies as well as those particular to computer science are described. Approaches to developing students' virtual classroom competencies, approaches to groupwork, and the implications of virtual classrooms for professional development and research are also discussed.	Virtual classroom pedagogy	NA	2018
Amy B. Woszczynski	As high schools begin to offer more distance learning courses, universities have an opportunity to establish partnerships to deliver online computer science courses. As we face declining enrollment, these partnerships offer the ability to reach a significant portion of students who may not otherwise consider computer science. Particularly for underrepresented groups, such as African-Americans, Hispanics, women, and first-generation college students, these partnerships offer the potential to recruit additional students into computing fields. This paper describes the first portion of a multi-year partnership between a large university and multiple high schools in a metropolitan area. CyberTech I is an online introduction to computer science course offered to high school students by university faculty. Initial results indicate that students were generally satisfied with their online course experience and plan to continue to participate in the program. We describe the curriculum introduced and discuss some of the challenges faced and the lessons learned.	CyberTech I: online introduction to computer science course for high school students	NA	2018
Iwona Miliszewska:John Horwood	A Computer Science degree is offered by Victoria University both locally in Australia and transnationally in Hong Kong. The degree includes a compulsory final year Project subject. The Project, a team effort, involves the design and implementation of a real-life computer application for an external client. Academics responsible for the degree consider Project and its three components of group context, project-based problems, and outside focus essential to transforming computing students into competent graduates. Do Project students support this view? This paper reports on a comparative study of the students' perceptions of the project experience and the relative importance of its three components. The paper discusses the results of the study with respect to the different locales, Melbourne and Hong Kong, and concludes by considering the implications of the study on the Project model.  Erratum: This paper is slightly edited from: Miliszewska, I., & Horwood, J. (2004). Engagement Theory: A Framework for Supporting Cultural Differences in Transnational Education, Proceedings of the HERDSA Conference, Miri, Malaysia, July 2004, (electronic proceedings).  This is a revised and extended version of: Miliszewska, I., Horwood J., & McGill, A. (2003). Transnational Education through Engagement: Students Perspective, Proceedings of the Informing Science and IT Education Conference IS2003, Pori, Finland, June 2003, 165-173.	Engagement theory: a universal paradigm?	NA:NA	2018
Saeko Matsuura	In recent years, it has been widely acknowledged that classes designed by utilizing PBL (Project-Based Learning) are effective in enhancing the problem-solving ability of university students. In PBL-based classes, students try to apply their knowledge to solve the problems by themselves; therefore, such classes are effective in improving problem-solving and communication abilities of students. However, it is difficult for a teacher to appropriately assess individual contributions in a group work such as PBL. Since 2002, we have been planning and conducting group-work-based software development experiments as an approach to PBL. This paper describes the manner in which the class was designed and conducted in order to evaluate the contribution of each individual student based on the degree of achievement of a goal in a group work. We propose an evaluation method based on an evaluation model of PBL and discuss the trial results.	An evaluation method of project based learning on software development experiment	NA	2018
Titus Winters:Tom Payne	New accreditation requirements focus on education as a "continuous improvement process." The most important part of such a process is that information gets fed back into the system to improve the quality of the output. This requirement is often interpreted to imply a course-level feedback loop that iterates on offerings of courses or entire academic years. This paper provides a smaller and more immediate feedback loop. This technique gives instructors feedback onthe quality of each question on a test or quiz, as well as a numeric score for the difficult of the question. A simple tool implementing this procedure can be used to help train instructors on which questions are difficult, as well as what types of questions are correlated with ability, and how to design a meaningful instrument of assessment. Performing this analysis at the end of a course offering could help demonstrate continuous improvement to accreditation committees. Performing this analysis immediately after the administration of a test or quiz can point out topics that the class as a whole have failed to understand, thus giving instructors more insight into student knowledge.	Closing the loop on test creation: a question assessment mechanism for instructors	NA:NA	2018
David B. Levine:Henry M. Walker	The grading of student work is of the utmost importance to a computer science educator. This paper examines the practices of eXtreme Programming (XP) and considers how they apply to the tasks of assigning grades to student work, even as those grades must both evaluate the student objectively and communicate with her personally.	XP practices applied to grading	NA:NA	2018
Dorothy Deremer:Katherine G. Herbert	In this paper, we describe a new interdisciplinary B.S. degree in Science Informatics at Montclair State University, a multipurpose public institution that includes a substantial General Education component. Beginning in the freshmen year, the Science Informatics curriculum contains 16 semester hours of interdisciplinary science informatics courses including a freshmen experience, internships, a research component, ethics, and a concentration currently in bioinformatics, cheminformatics, or computer science as well as core science and mathematics courses.	An interdisciplinary undergraduate science informatics degree in a liberal arts context	NA:NA	2018
Jacquelyn S. Fetrow:David J. John	An interdisciplinary bioinformatics course has been taught at Wake Forest for three semesters. Undergraduate and graduate students from multiple academic specialties are brought together in a single classroom. In addition to focusing on traditional bioinformatics topics, this course concentrates on interdisciplinary collaboration in the in-class exercises and the research-based course project. A team of faculty from complementary disciplines teach the course. Productive communication is one key goal of this course.	Bioinformatics and computing curriculum: a new model for interdisciplinary courses	NA:NA	2018
James Blahnik:Bonnie McVey:David Pankratz	In response to recent studies on enrollment trends and our own assessment results, we have significantly modified our Computer Science major to include not only a traditional major in computer science but also to include concentrations in Business Information Systems and Graphic Design and Implementation. As we are a small liberal arts college with three faculty members and a small budget, we have partnered with other disciplines on campus to provide options for our majors to apply concepts and principles of computer science to other areas. We present here our plans of study for the three concentrations, our rationale for making these additions, and favorable responses from students, faculty, and administration.	Adding concentrations to the CS major: our dean calls us 'innovative'	NA:NA:NA	2018
Vicki L. Almstrum:David Klappholz:Steven Condly:John Clement	NA	Are they learning what (we think) we're teaching?	NA:NA:NA:NA	2018
M. Armoni:S. Rodger:M. Vardi:R. Verma	NA	automata theory: its relevance to computer science students and course contents	NA:NA:NA:NA	2018
Lillian (Boots) Cassel:Andrew McGettrick:Robert H. Sloan	NA	A comprehensive representation of the computing and information disciplines	NA:NA:NA	2018
Robb Cutler:Chris Stephenson	The on-going crisis in K-12 computer science education is now exacerbating pipeline issues at all educational levels. This session explores Computer Science Teachers Association's perspective on addressing the challenges facing K-12 computer science and how the solutions will the benefit both secondary and post-secondary education.	Working together to improve K-12 computer science education	NA:NA	2018
Thomas P Way	Undergraduate students who perform research benefit greatly from the experience, yet achieving high levels of voluntary participation remains an elusive goal. This paper describes the implementation of an innovative laboratory model designed to encourage computer science undergraduates to actively pursue collaborative research with faculty and other students. As an extension of earlier research into team-based software engineering education, the Applied Computing Technology Laboratory was formed to provide an authentic and engaging experience in real-world computer science research. The model, which relies on a web site as its focus, is presented along with the results of one year of active research.	A Virtual Laboratory Model for Encouraging Undergraduate Research	NA	2018
Jennifer A. Polack-Wahl:Karen Anewalt	Undergraduate students often lack the skills necessary to conduct independent research. In order to improve students' skills in research, the Computer Science department at the University of Mary Washington has designed and offered a course in research methods. The course teaches students about learning strategies that they can apply across the computing discipline and beyond. This paper describes the process that was used to create a new research methods course, the details related to the first offering of the course, and findings on how the course changed students' perception of research.	Learning strategies and undergraduate research	NA:NA	2018
Deborah L. Knox:Peter J. DePasquale:Sarah M. Pulimood	Integrating emerging technologies into the curriculum is expected in our evolving discipline, although finding the time to master these can prove difficult. Institutional expectations for scholarly achievement need not take precedence; the use of an overarching theme for a summer research experience is presented as one approach to join a group of people with a unifying topic for study and discussion leading to the natural incorporation of the emergent technology into the curriculum.This paper presents a successful model for undergraduate summer research where participants, both faculty and students, investigated information security (IS) topics and learned from IS professionals. This was applied to individual research projects in disconnected areas in computing. The unifying experiences encouraged a collegial and supportive environment, firmly establishing peer and faculty / student collaboration. Student perceptions about the field and career options were positively effected, leading to increased interest in the emergent area as well as in future graduate studies.	A model for summer undergraduate research experiences in emerging technologies	NA:NA:NA	2018
Tamara Denning:William G. Griswold:Beth Simon:Michelle Wilkerson	Experimentation has shown that in-class educational technologies, by permitting anonymous, authored participation, can dramatically alter student communications in the classroom. Now, the appearance of dual pen-and-keyboard computing devices in the university classroom, notably Tablet PCs, motivates thinking critically about how different expressive modalities could improve in-class student problem -solving and communication.This paper describes the use of Ubiquitous Presenter 2.0 in a study to discover the driving issues of multimodality for both in-class technologies and student exercises. This paper sensitizes instructors to the issues of modality and makes specific recommendations for application design. We find that the choice of modality is not merely one of efficiency or naturalness, but is loaded with numerous personal, social, and material considerations. Although use of the pen (over typed text) is generally preferred, we find that choice itself is critical to encouraging student creativity, collaboration, and communication.	Multimodal communication in the classroom: what does it mean for us?	NA:NA:NA:NA	2018
Shannon Pollard:Robert C. Duvall	By expanding the teaching styles used in computer science classrooms, we can expand the audience of students that enjoy and excel in technology. Rather than focusing on major curriculum changes or new programs specifically for non-traditional students, we propose that relatively simple expansions in teaching style can have significant results. In particular, we advocate incorporating teaching techniques reminiscent of kindergarten: games, toys, stories, and play. These techniques promote an active learning environment, level the playing field for non-technical students, provide motivation beyond grades, and make class time fun. In this paper, we want to acknowledge the many activities others have proposed by providing a coherent categorization of such activities and show how to use these techniques throughout the curriculum rather than as special experiences.	Everything I needed to know about teaching I learned in kindergarten: bringing elementary education techniques to undergraduate computer science classes	NA:NA	2018
K. Christensen:D. Rundus:G. Perera:S. Zulli	Service-learning enables computer science and engineering students to apply and refine their technical skills, learn new soft skills, and make a contribution to their community. At the University of South Florida we have organized a group of computer science and engineering students, called the CSE Volunteers, to provide IT support to the Hillsborough County School District. In spring 2005 over 7% of our undergraduate students voluntarily served in this program. While the work is fairly low-level, the experience for the students and school district has been very positive. Future directions include quantitative assessment, tackling projects of greater complexity, seeking corporate funding, and applying this program to help recruit new students to the major.	CSE volunteers: a service learning program to provide IT support to the hillsborough county school district	NA:NA:NA:NA	2018
Michael J. Jipping:Sara Henry:Kathleen Ludewig:Leslie Tableman	A crucial part of the Computer Organization course is the examination of and experimentation with digital logic circuits. In departments with limited budgets, however, this activity can be problematic. Due to historical roots and enrollment sizes, departments tend to focus on software aspects of computer science. This means that hardware concerns are often relegated to textbook and paper-and-pencil examination. This paper details how to use field programmable gate arrays -- hardware gates with a programming interconnection switch -- in the Computer Organization course. We will overview the reasons for using them, outline ways to use them effectively and cheaply, and demonstrate FEWD, our system for integrating visual design with FPGAs for student experimentation.	How to integrate FPGAs into a computer organization course	NA:NA:NA:NA	2018
Kenneth Vollmar:Pete Sanderson	We describe the implementation of "MARS," a GUI, Java-based simulator for the MIPS assembly language. MIPS, the computer architecture underlying the simulated assembly language, is widely used in industry and is the basis of the popular textbook Computer Organization and Design [6], used at over 400 universities. The MARS simulator has been implemented with characteristics that are especially useful to undergraduate computer science students and their instructors.	MARS: an education-oriented MIPS assembly language simulator	NA:NA	2018
Patrick Borunda:Chris Brewer:Cesim Erten	We describe our system, GSPIM, used for visualization of low-level MIPS Assembly programming and simulation. Although many visualization tools for algorithms and high-level programs have been considered in educational settings, visualization specific to low-level programs have not received enough consideration. One desirable property of such a visualization is that it should close the gap between high-level programming constructs and the sequential nature of low-level programs. Secondly it should provide techniques to present information specific to the simulation of the code. GSPIM supports both properties and is publicly available at http://www.cs.arizona.edu/~cesim/gspim.tar.gz	GSPIM: graphical visualization tool for MIPS assembly programming and simulation	NA:NA:NA	2018
Eric Larson	The importance of software bug detection tools is high with the constant threat of malicious activity. Companies are increasingly relying on software bug detection tools to catch exploitable bugs before the program is released. This paper describes a course on software bug detection techniques that is aimed at undergraduates. Courses in software verification are often taught at the graduate level and too theoretical and research oriented for undergraduates. A key component of the course is the programming assignments where students gain practical experience in creating their own software bug detection tools using a source to source converter for a subset of C++.	An undergraduate course on software bug detection tools and techniques	NA	2018
David S. Janzen:Hossein Saiedian	Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.	Test-driven learning: intrinsic integration of testing into the CS/SE curriculum	NA:NA	2018
Rahul Agarwal:Stephen H. Edwards:Manuel A. P√©rez-Qui√±ones	Adaptive learning systems aim to precisely tailor education and training to the individual needs of learners. Such systems use an internal model of a user's current knowledge to adjust the navigational affordances and presentation order of material. The user model is incrementally built and updated as the user demonstrates mastery by completing exercises and tests. Designing courses that are delivered adaptively involves addressing many complexities. This paper describes experiences designing the first adaptive module in a series intended to teach software testing skills. Experiences in using the first module and a preliminary evaluation of its effectiveness are presented.	Designing an adaptive learning module to teach software testing	NA:NA:NA	2018
Antonio M. Lopez, Jr.:Robert Lent:Frederick G. Lopez:Madonna G. Constantine	NA	A multi-disciplinary look at the computing disciplines	NA:NA:NA:NA	2018
Edward Angel:Steve Cunningham:Peter Shirley:Kelvin Sung	NA	Teaching computer graphics without raster-level algorithms	NA:NA:NA:NA	2018
Bill Marion	NA	Final oral report of the SIGCSE committee on the implementation of a discrete mathematics course	NA	2018
Brian J. Rosmaita	This paper proposes an accessibility first pedogogy for web design, in which the course is organized around the requirement of implementing web pages accessible to visually impaired computer users. This approach and its advantages are discussed in detail.	Accessibility first!: a new approach to web design	NA	2018
Robert M. Siegfried	The proliferation of graphical user interfaces has had a dramatic impact on the ability to work as a programmer. It is particularly difficult for the blind to create forms for visual programming applications, such as Visual Basic. A scripting language is introduced that enables the blind to create Visual Basic forms without needing to specify a great deal of detail and without needing the "point and click" approach that they cannot use. Related issues of accommodating the blind in a computer science course are also discussed.	Visual programming and the blind: the challenge and the opportunity	NA	2018
Robert F. Cohen:Arthur Meacham:Joelle Skaff	We present our ongoing research in the communication of graphs and relational information to blind computer science students. We have developed a system called exPLoring graphs at UMB (PLUMB) that displays a drawn graph on a tablet PC and uses auditory cues to help a blind user navigate the graph. Beyond Computer Science education, this work has applications to assist blind individuals in navigation, map manipulation and other applications that require graph visualization.	Teaching graphs to visually impaired students using an active auditory interface	NA:NA:NA	2018
Peter DePasquale	The Internet is an exciting place to find real, interesting, and interactive sources of data for use in the classroom. This data (often real world), can provide the basis of interesting projects for CS1 and CS2 courses. Additionally, the source or exchange protocol can be used as a gentle introduction for novice computer science majors to the myriad of data formats and emerging technologies available today. Presented here are a number of interesting data sources used during the 2004-2005 academic year in our own CS2 data structures course.	Exploiting on-line data sources as the basis of programming projects	NA	2018
Viera K. Proulx:Kathryn E. Gray	We report on the experience of teaching an introductory second semester computer science course on Fundamentals of Computer Science that uses our curriculum How to Design Class Hierarchies and the ProfessorJ programming languages implemented within the DrScheme programming environment.This comprehensive curriculum for an introductory course focuses on principled design of class based programs in an object-oriented language (Java) with a carefully structured gradual increase in the complexity of the class structure and the programming language.The curriculum includes extensive lecture notes, programming assignments, closed lab plans, exams, and the first part of a textbook. The curriculum is supported by a programming environment ProfessorJ with a series of gradually more complex teaching languages that support a novice learner. The pedagogy focuses on teaching the students problem solving and design skills that transcend the study of programming. The organization of the topics draws its strength from the theory of programming languages by focusing on the structure of data rather than on algorithms, user interactions, or arcane details of the programming language syntax.	Design of class hierarchies: an introduction to OO program design	NA:NA	2018
Stuart Reges	This paper describes a significant redesign of the introductory courses at the University of Washington that has led to increased enrollments, increased student satisfaction and an increase in the number of women admitted to the CS major. The new courses are still taught in Java, but they represent a return to the basics that were emphasized in the pre-Java era. The biggest changes have occurred in the CS1 course where we have replaced an "objects early" curriculum with a more traditional procedural approach using static methods in Java. The new CS1 course emphasizes problem solving, procedural decomposition and mastery of basic skills (e.g., loops, conditionals and arrays). The new CS2 course emphasizes data structures, linked lists, binary trees and recursion.	Back to basics in CS1 and CS2	NA	2018
Andreas Polze:Dave Probert	An operating system (OS) is a program that manages computer hardware. And although today's commercial-off-the-shelf desktop operating systems appear to be an integral part of PCs and workstation to many users, a fundamental understanding of the algorithms, principles, heuristics, and optimizations used is crucial for creating efficient application software. Furthermore, many of the principles in OS courses are relevant to large system applications like databases and web servers.Within this paper, we present our approach towards teaching OS concepts based on the Windows family of operating systems. In contrast to many stable Unix-based curricula, a Windows-based OS curriculum has to take into account the OS as a moving target. And although Windows source code has been made available to academic institutions, managing complexity is among the biggest challenges when teaching OS concepts based on Windows.Teaching experiences reported within this paper have lead to development of the "Curriculum Resource Kit (CRK)", an entire Windows-based OS curriculum that is freely available for download.	Teaching operating systems: the windows case	NA:NA	2018
Steven Robbins	This paper describes a simulator that allows users to explore concurrent I/O in UNIX. UNIX I/O provides an interesting example of how a shared variable, in this case the file offset, can be affected by concurrent access. The examples given can run on the simulator or a real UNIX-like system such as Linux, Solaris for Mac OS X. The simulator can run programs written by the user and display pictorially the relationship among various data structures involved in I/O, including the process file descriptor table, the system open file table, the inodes, and the data stored on disk. The user can run the program slowly, or step forward or back through the program to examine the data structures in detail. The simulator supports the creation of both child processes and threads as well as open, close, read, write, wait, join and detach functions. The simulator is freely available for download. It can be also be used directly from a browser without the need for installation.	A UNIX concurrent I/O simulator	NA	2018
Peter DeRosa:Kai Shen:Christopher Stewart:Jonathan Pearson	Operating system laboratory assignments based on bare hardware or detailed machine simulators can be excessively challenging for many students. In the most often used approach, students develop kernels on virtual machines with a much simplified hardware interface. Traditionally this simplification goes so far as to make realistic performance measurement impossible. We propose Vesper, an instructional disk drive simulator with a high degree of performance realism. Vesper retains simplicity while providing timing statistics close to that of real disk drives. The key to our approach is to provide hardware abstractions that are simple but yet capable of capturing device interactions with major performance impacts. Vesper laboratory assignments allow students to realistically explore the performance consequences of various system designs without the cumbersome aspects of the real hardware interface. This paper describes the design and implementation of the Vesper disk drive simulator. We evaluate the effectiveness of Vesper-based laboratory assignments in terms of operating system performance evaluation. Student experience and feedback are also reported.	Realism and simplicity: disk simulation for instructional OS performance evaluation	NA:NA:NA:NA	2018
Mark D. LeBlanc:Rochelle Leibowitz	Discrete mathematics lies at the heart of the discipline of computing and represents one of the few bodies of knowledge with consistent content in our young and changing curriculum. We offer a model of a full-year, two-course experience of discrete structures with the initial course taught by computer science faculty and the second course taught by faculty in mathematics. We argue for the strengths gained in multiple and repeated exposure to the rich set of core topics and for the initial course to occur in the first year rather than the traditional advice to "take calculus". In particular, we present a model of collaboration with mathematics faculty that provides computer science students with an enriched breadth and depth of exposure while helping small departments to handle the constraints in scheduling.	Discrete partnership: a case for a full year of discrete math	NA:NA	2018
David Pengelley:Inna Pivkina:Desh Ranjan:Karen Villaverde	We discuss a project based on an original source from 1838 by Gabriel Lam√©, which was used to teach dynamic programming in an Algorithms and Data Structures course for junior level computer science students. The project was developed as part of a group effort at New Mexico State University on using original historical sources in teaching. The project is based on an excerpt from a letter of Monsieur Lam√© to Monsieur Liouville on the question: Given a convex polygon, in how many ways can one partition it into triangles by means of diagonals? A variety of tasks in the project, which includes reading, writing, proving statements by mathematical induction, deriving formulas, writing computer programs and analyzing and comparing them for efficiency, help students to develop verbal, analytical and discrete mathematics skills necessary for computer science. We also discuss student reactions to the project and to learning from historical sources.	A project in algorithms based on a primary historical source about catalan numbers	NA:NA:NA:NA	2018
Michael R. Wick:Paul J. Wagner	Nearly every computer science curriculum includes a course called "Discrete Structures" or "Discrete Mathematics". Over the past few years, considerable attention has been paid to this course in an attempt to overcome the misperception by students that the material is mathematics and not related to computer science. Most of these efforts deal with attempting to explicitly show students the application of discrete mathematics within computer science. We present an application that adds to the efforts of this community by giving instructors a modern, powerful, and elegant example to motivate student engagement in discrete structures.	Using market basket analysis to integrate and motivate topics in discrete structures	NA:NA	2018
Thomas Naps:Susan Rodger:Guido R√∂√üling:Rockford Ross	NA	Animation and visualization in the curriculum: opportunities, challenges, and successes	NA:NA:NA:NA	2018
William Aspray:A. Frank Mayadas:Moshe Y. Vardi:Stuart H. Zweben	NA	educational response to offshore outsourcing	NA:NA:NA:NA	2018
Laurence I. Peterson:Dale Benham:Amy B. Woszczynski:Rich Schlesinger	NA	CyberTech-ITEST: an NSF-funded initiative to attract and prepare underrepresented students for tomorrow's careers in the computing sciences	NA:NA:NA:NA	2018
Eric Roberts	As part of the documentation for its library packages, the Java Task Force (JTF)developed an online tutorial system that enables teachers and students to explore the resources provided by the Task Force in a highly interactive style. The individual pages that make up the tutorial often include demonstration programs that the reader can experiment with while remaining on the same web page as the explanatory text. Although the original motivation for developing that tutorial system was to document the JTF packages themselves, the structure is general enough for teachers to design their own tutorials and interactive demonstrations. This paper describes the structure of that tutorial system and illustrates its use. In addition, the paper describes some work-in-progress that will make it possible to create interactive lecture demonstrations from PowerPoint‚Ñ¢ slides.	An interactive tutorial system for Java	NA	2018
Ryan McFall:Herbert Dershem:Darcy Davis	Much has been made of the transition of the instructor's role from "Sage on the Stage" to "Guide on the Side", focusing on active and collaborative learning in the classroom. The process of acquiring knowledge from textbooks has largely remained unaffected by this transition. Our work on electronic textbooks (e-textbooks) has focused on building e-textbooks that extend the reach of collaborative and active learning techniques to the reading process. This paper describes the outcomes of using our e-textbook in a one semester course on programming language design and implementation, including the impact on student learning, the degree to which they took advantage of the e-textbook's collaborative and active features, and their reaction to the use of the e-textbook as the primary text resource.	Experiences using a collaborative electronic textbook: bringing the "guide on the side" home with you	NA:NA:NA	2018
Valentin Razmov:Richard Anderson	This paper describes our experiences in promoting a learning environment where active student involvement and interaction, as well as openness to diversity of ideas are supported through innovative uses of technology in the classroom. In the context of an undergraduate course in software engineering, for two consecutive terms we have experimented with an existing software system for Tablet PCs that supports a set of classroom interaction styles. Our goal has been to determine if the use of the technology can increase the effectiveness of pedagogical techniques that naturally fit our instructional needs.We have found that student submissions -- a style of interaction whereby the instructor poses a question written on a slide and displayed on a tablet in front of each student, then students write their answers in digital ink and submit back to the instructor -- are a powerful tool for supporting the learning environment we aim to create in the classroom. We show that student submissions can help the instructor to engage all students, not merely the vocal ones, and to emphasize the value of diversity of opinions. They also enable immediate feedback from students to instructor -- something difficult in an environment without technological enhancements but which contributes to an improved understanding of everyone's needs and expectations.The discussion of how we used student submissions to support these pedagogical techniques may be relevant to educators interested in fostering student learning through creative uses of technology, as well as to instructors looking to expand their repertoires of teaching methods in software engineering and in other similar subjects.	Pedagogical techniques supported by the use of student devices in teaching software engineering	NA:NA	2018
Suzanne Smith:Sara Stoecklin:Catharina Serino	Refactoring is the process of transforming the internal structure of existing code while keeping the integrity of the code's functional requirements. Refactoring is proven to increase program maintainability, flexibility, and understandability and is recognized as a best practice in the software development community. However, with the exception of courses or lectures on extreme programming, refactoring is overlooked in the computer science curriculum. This paper helps demystify refactoring by introducing an incremental approach for teaching refactoring on the college level. Through this hands-on approach, refactoring can become an integral component in the computer science curriculum and an innovative means of reinforcing software engineering principles and good development practices. The approach and three introductory lessons are presented in this paper.	An innovative approach to teaching refactoring	NA:NA:NA	2018
Kevin Bierre:Phil Ventura:Andrew Phelps:Christopher Egert	For the introductory student, the process of learning to program is an arduous task. Not only does the student have to learn the syntax of a programming language, he or she also has to apply concepts of object-oriented design and software construction in service of the projects created within the classroom. Unfortunately, as students further their study of programming, they often feel disconnected from the examples and projects they construct as part of their coursework. Projects are often perceived as toy problems and do not match the graphics-rich, interactive notion of programming that students bring with them to class. In addition, projects and classroom exercises do not convey the appropriate level of complexity and fail in the task of challenging the student to critically think about what they are constructing. This paper discusses TankBrains, a cooperative and competitive programming project presented to students in the latter part of their introductory programming course sequence. Students are challenged to create simple tank artificial intelligences as teams, which are later tested against each other in head-to-head combat. Students create their TankBrains within a collaborative virtual environment, which enforces the physics and rules of the combat simulation. Students must also present their strategies and findings to each other. This paper also examines how the use of the TankBrain system influences the students' perception regarding achievements and learning in the classroom.	Motivating OOP by blowing things up: an exercise in cooperation and competition in an introductory java programming course	NA:NA:NA:NA	2018
Joel C. Adams	It is easy for computer science students and educators to write software applications in Java or C++ that are not object-oriented. In this paper, we present the Janus Principle -- a simple software engineering principle (related to the MVC design pattern) whose use produces highly object-oriented code. We demonstrate its effect by developing a simple Java networking application, first without using the Janus Principle, and then using it. Students and educators who follow this principle will write programs containing highly reusable code.	OOP and the Janus principle	NA	2018
Todd Shurn	Windows Media Player user interface "skin" creation has proven an extremely effective method to reinforce practical object oriented programming techniques. Skin creation motivated non-engineers, women and even high school students to learn XML, and Jscript scripting language. Non-computer science students were especially excited when their custom media player user interface operated as intended. Many students demonstrated their skin to potential employers as evidence of their creativity and programming prowess.This paper discusses how skin programming is related to the object oriented paradigm and may be used as an exemplary collegiate interdisciplinary design project. Examples illustrate how skin creation can emphasize design principles, fundamental programming concepts, and group software development. Software innovation is advanced via novel windows media player skins incorporating recently released features to provide an enhanced user interface for a target domain.	Programming fundamentals and innovation taught through windows media player skin creation	NA	2018
Jungsoon Yoo:Sung Yoo:Chris Lance:Judy Hankins	In this paper, we present an extensible visualization tool that is being used in a web-based closed laboratory system. The goal of this project is to provide a tool for both students and teachers that can help trace deficiencies in a student's understanding back to individual concepts. This visualization tool has been developed by using the tree abstract data type (ADT) which is built from the concepts to be covered in a lab, lecture, or course. Once the tree ADT is built, each node can be associated with different entities such as student performance, class performance, or lab development. Using this tool, a teacher can help students by discovering concepts that need additional lecture coverage, and students may discover concepts for which they need to spend additional time working on reinforcement exercises.	Student progress monitoring tool using treeview	NA:NA:NA:NA	2018
Reg Hahne:Cay Horstmann:David Reed:Don Allen	NA	Growl...roar...are we ready for tiger?: review of the current climate and changes to be implemented for the 2007 AP CS exam	NA:NA:NA:NA	2018
Susan H. Rodger:Bart Bressler:Thomas Finley:Stephen Reading	We present a hands-on approach to problem solving in the formal languages and automata theory course. Using the tool JFLAP, students can solve a wide range of problems that are tedious to solve using pencil and paper. In combination with the more traditional theory problems, students study a wider-range of problems on a topic. Thus, students explore the formal languages and automata concepts computationally and visually with JFLAP, and theoretically without JFLAP. In addition, we present a new feature in JFLAP, Turing machine building blocks. One can now build complex Turing machines by using other Turing machines as components or building blocks.	Turning automata theory into a hands-on course	NA:NA:NA:NA	2018
Timothy M. White:Thomas P. Way	Visualization and interactivity are valuable active learning techniques that can improve mastery of difficult concepts. In this paper we describe jFAST, an easy-to-use graphical software tool for teachers and students, with an emphasis on introductory level finite state machine topics. The jFAST software enables visual design, exploration and simulation of a variety of finite state machines, with a primary goal of enhancing teaching effectiveness in this subject, particularly for less advanced computer science students. The architecture and functionality of jFAST are explained, and results of preliminary evaluation are provided.	jFAST: a java finite automata simulator	NA:NA	2018
Michal Armoni:Judith Gal-Ezer	Abstraction has been the focus of many researches in mathematics education and to some extent in computer science education. Abstract thinking characterizes the theoretical foundations of computer science, where reduction is one important abstract thinking pattern. In a previous work, we discussed the issue of reductive thinking among high school students in relation to computational models -- a theoretical unit. This unit requires abstract thinking in many aspects. Our findings in relation to reductive thinking showed that many students preferred direct, non-reductive solutions, even if reductive solutions could have significantly decreased the design complexity of the solution. This study motivated the current study where we examine the issue of reductive thinking among university students. The findings of this preliminary study are demonstrated by students' solutions to questions in assignments given in the computational models course. We found that even among university students in a very prestigious academic institution with very high entrance requirements abstraction is a real obstacle as reduction is not easily understood and used. This encourages us to further investigate this phenomenon.	Reduction -- an abstract thinking pattern: the case of the computational models course	NA:NA	2018
Ursula Wolz:Tiffany Barnes:Ian Parberry:Michael Wick	NA	Digital gaming as a vehicle for learning	NA:NA:NA:NA	2018
David Ranum:Bradley Miller:John Zelle:Mark Guzdial	NA	Successful approaches to teaching introductory computer science courses with python	NA:NA:NA:NA	2018
Sarah Rauchas:Benjamin Rosman:George Konidaris:Ian Sanders	We describe the first part of a study investigating the usefulness of high school language results as a predictor of success in first year computer science courses at a university where students have widely varying English language skills. Our results indicate that contrary to the generally accepted view that achievement in high school mathematics courses is the best individual predictor of success in undergraduate computer science, success in English at the first-language level in high school correlates better with actual performance. We discuss the implications of this for universities whose medium of teaching is English, operating in social contexts where many students are not native English speakers.	Language performance at high school and success in first year computer science	NA:NA:NA:NA	2018
Anna Eckerdal:Robert McCartney:Jan Erik Mostr√∂m:Mark Ratcliffe:Carol Zander	This paper examines software designs produced by students nearing completion of their Computer Science degrees. The results of this multi-national, multi institutional experiment present some interesting implications for educators.	Can graduating students design software systems?	NA:NA:NA:NA:NA	2018
Orit Hazzan:Yael Dubinsky:Larisa Eidelman:Victoria Sakhnini:Mariana Teif	This paper discusses the suitability of the qualitative research approach to computer science education research. It is based on the following two observations: First, only a small proportion of works presented in the computer science education literature contain some experimental component (Fincher and Petre, 2004; Valentine, 2004). Second, those research works conducted in computer science education that do, usually employ a quantitative research approach. This paper focuses on the qualitative research approach, presenting its nature, discussing its relationships to the quantitative research approach and addressing its application in general and in the context of computer science education in particular.	Qualitative research in computer science education	NA:NA:NA:NA:NA	2018
Pauli Byckling:Jorma Sajaniemi	Roles of variables capture tacit expert knowledge in a form that can be taught in introductory programming courses. A role describes some stereotypic use of variables, and only ten roles are needed to cover 99% of all variables in novice-level programs. This paper presents the results from a protocol analysis of a program creation task in an experiment where roles were introduced to novices learning Pascal programming. Students were divided into three groups that were instructed differently: in the traditional way with no treatment of roles in lectures or program animation; using roles in lectures but not in animation; and using a role-based program animator in addition to using roles in lectures. The results suggest that the introduction of roles provides novices a new conceptual framework for better mental processing of program information and that the use of role-based program animation increases novices' ability to apply data-related programming plans in program construction.	Roles of variables and programming skills improvement	NA:NA	2018
M.R.K. Krishna Rao	Storytelling has been used from time immemorial as a powerful educational tool to exchange and propagate complex ideas. Similarly, puzzles have been known as stimulators of thinking and problem solving skills. Both storytelling and puzzles found their rightful place in primary and secondary education through the years. However, their value in higher education has only been recognized recently. This paper describes how these two educational aids can be used for motivating various concepts of software engineering.	Storytelling and puzzles in a software engineering course	NA	2018
Chang Liu	Software project demonstrations are commonly used as an effective assessment tool in software courses. We found that in addition to helping instructors find out the status of student projects in a short period of time, project demonstrations motivate students and challenge them to synthesize, organize, prioritize, and articulate different aspects of their projects, all of which are important skills of professional software developers. Our experiment shows that project demonstrations are an effective learning tool as well. In this paper, we describe different types of project demonstrations in our experiment, including short, frequent five-minute demonstrations and formal final project demonstrations. This study was conducted in the context of a software engineering capstone project course.	Software project demonstrations as not only an assessment tool but also a learning tool	NA	2018
Lucas Layman:Travis Cornwell:Laurie Williams	This paper describes an initiative at North Carolina State University in which the undergraduate software engineering class was restructured in layout and in presentation. The change was made from a lecture-based coursed that followed the waterfall method to a lab-oriented course emphasizing practical tools and agile processes. We examine the new course layout from the perspective of Myers-Briggs personality types and Felder-Silverman learning styles to discuss how the new software engineering class format appeals to a wide variety of students. The new course format resulted in some of the highest student evaluations in recent course history. It is now the standard for the undergraduate software engineering course at the university and has since been used in other North Carolina institutions.	Personality types, learning styles, and an agile approach to software engineering education	NA:NA:NA	2018
David Callele:Dwight Makaroff	One of a Software Engineer's most important skills is the ability to define the scope of the problem and ascertain the requirements from general and vague specifications. Teaching this skill is known to be difficult and is made more complex because students are conditioned to expect that this portion of programming projects is already complete. This paper reports on experience in teaching a second year computer science class which exposed the need for requirements engineering and gave students an opportunity to engage in the activity. We found that the student response was bimodal, and while some students met the challenge, more felt betrayed by the experience. We conclude that students gained the requisite knowledge using this approach but that a less traumatic approach may produce better results.	Teaching requirements engineering to an unsuspecting audience	NA:NA	2018
Casey Alt:Owen Astrachan:Jeffrey Forbes:Richard Lucic:Susan Rodger	For forty years programming has been the foundation of introductory computer science. Despite exponential increases in computational power during this period, examples used in introductory courses have remained largely unchanged. The incredible growth in statistics courses at all levels, in contrast with the decline of students taking computer science courses, points to the potential for introducing computer science at many levels without emphasizing the process of programming: leverage the expertise and role-models provided by high school mathematics teachers by studying topics that arise from social networks and modeling to introduce computer science as an alternative to the traditional programming approach. This new approach may capture the interest of a broad population of students, crossing gender boundaries. We are developing modules that we hope will capture student interest and provide a compelling yet intellectually rich area of study. We plan to incorporate these modules into existing courses in math, statistics, and computer science at a wide variety of schools at all levels.	Social networks generate interest in computer science	NA:NA:NA:NA:NA	2018
Jerry O. Talton:Daniel L. Peterson:Sam Kamin:Deborah Israel:Jalal Al-Muhtadi	This paper describes Scavenger Hunt, a team-based orientation activity for incoming freshmen in the Department of Computer Science at the University of Illinois at Urbana-Champaign. Like many large research universities, Illinois has struggled with the high attrition rate of first-year students in computing disciplines. Scavenger Hunt, which has been held each of the past three years, is intended to foster a sense of community within the department and acclimate new students to undergraduate life as computer science majors. A unique aspect of the activity is the use of handheld computers to manage most aspects of the competition, which enables physically handicapped students to participate on an equal footing with their able-bodied peers. Thus far, Scavenger Hunt has been directly responsible for the increased participation of new students in departmental activities and organizations. In addition, we have observed a significant correlation between student participation in Scavenger Hunt and retention rates in the department. Along with other retention-oriented activities, Scavenger Hunt is measurably improving the attitude of new students towards computer science.	Scavenger hunt: computer science retention through orientation	NA:NA:NA:NA:NA	2018
Zachary Dodds:Leslie Karp	This paper tracks the five-year growth and current trajectory of a computational outreach program at a small, liberal-arts college. The program has enhanced opportunities for talented high-school students to experience computation more deeply than their HS curriculum currently offers. This outreach evolved from a naive initial premise into a mutually beneficial interaction between an undergraduate computer science department and a local secondary school. The most important factor in the program's sustainability is a supportive liaison within the high school's administration. We hope the lessons we have learned will help other CS departments develop sustainable outreach programs.	The evolution of a computational outreach program to secondary school students	NA:NA	2018
Laurence I. Peterson:Dale Benham	This paper describes an NSF-funded initiative involving 600 underrepresented high school students and 60 teachers designed to introduce underrepresented students to the numerous and varied career opportunities in the computing sciences, prepare them to succeed in college degree programs, and prepare their teachers to be effective in the computer science class room. The initiative has five components: 1) CyberTech I (Principles of Computing): An online introductory course for second-semester sophomores, 2) CyberTech II: A twenty day on-campus intense summer programming experience between the sophomore and junior year, 3) CT Games: A junior year video game programming experience to apply the programming knowledge gaining in CyberTech II, 4) AP Computer Science (using Java 5 as the programming language) taken during the senior year, and 5) training workshops for teachers to prepare them to teach computer programming. The overarching goal is to prepare students for a college-level degree program in the computing sciences by having them successfully complete the AP Computer Science course and exam while teaching the soft skills, such as team work, oral communication and problem solving necessary in a professional career. Additionally, role models from various industry sectors are utilized to introduce students to the exciting career opportunities in the computing sciences.	Overview of the cyberTech-ITEST project: an initiative to attract and prepare under-represented students for tomorrow's careers in the computing sciences	NA:NA	2018
Russell Shackelford:Andrew McGettrick:Robert Sloan:Heikki Topi:Gordon Davies:Reza Kamali:James Cross:John Impagliazzo:Richard LeBlanc:Barry Lunt	In 2001, the ACM and the IEEE-CS published Computing Curricula 2001 which contains curriculum recommendations for undergraduate programs in computer science. That report also called for additional discipline-specific volumes for each of computer engineering, information systems, and software engineering. In addition, it called for an Overview Volume to provide a synthesis of the various volumes. The Computing Curricula 2004 Task Force undertook the job of fulfilling the latter charge. The purpose of this session is to present the recently completed work of that Task Force, now known as Computing Curricula 2005 (CC2005), and to generate discussion among, and feedback from SIGCSE members about ongoing and future work.	Computing Curricula 2005: The Overview Report	NA:NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Edward F. Gehringer:Katherine Deibel:John Hamer:Keith J. Whittington	NA	cooperative learning: beyond pair programming and team projects	NA:NA:NA:NA	2018
Yana Kortsarts:Jeffrey Rufinus	Any deterministic algorithm can be viewed as a game between the algorithm player and the input player. A randomized algorithm can be viewed as a mixed strategy for the first player, used to minimize the disadvantage of being the first to reveal its move. We suggest a simple and accessible guessing game that can serve as both a way to explain notions in algorithms (like worst case input) to students and also to illustrate the power of randomization, presented in an intuitive way.	Teaching the power of randomization using a simple game	NA:NA	2018
Jerome L. Paul:Michal Kouril:Kenneth A. Berman	This paper discusses a template-based approach to aid in introducing the upper-division undergraduate (or first year graduate) to the rapidly emerging message passing parallel computing paradigm. Our template library facilitates an accelerated MPI programming learning environment that can realistically be included as one topic among many in an algorithms course. One template module is based on a backtracking solution to the satisfiablity problem (SAT), which the student first solves in the sequential setting. With the aid of a modified template, the student then develops a simple parallel SAT solver. The template includes such things as I/O functions, allowing the student to focus on the algorithm itself. The parallel part is partially provided by the template, with indicators given in places where the student needs to plug in missing MPI function calls. The students are excited about this hands-on-experience in the increasingly important world of message passing parallel computing, which might be missed if their curriculum does not include a course devoted to this topic.	A template library to facilitate teaching message passing parallel computing	NA:NA:NA	2018
David Ginat:Michal Armoni	Program and proof designs are fundamental in computer science (CS). The designs involve the employment of various heuristics that may be considered rather inherent and natural, such as decomposition. Yet, not all heuristics are natural. One less natural, and rather unintuitive heuristic is that of reversing, in which a task is approached by reasoning backwards or viewing entities through "inverse lenses". One primary form of this heuristic is recursion. But, there are additional forms throughout the CS curriculum that are essential yet not underlined. In this paper we display these forms, underline their important role, and illustrate them in five core courses. In addition, we describe our experience with student difficulties due to unawareness and lack of competence with this heuristic, and offer preliminary guidelines for elaborating it during CS studies.	Reversing: an essential heuristic in program and proof design	NA:NA	2018
Roy P. Pargas:Dhaval M. Shah	This paper presents and discusses a modified approach to teaching an algorithms and data structures course (CS4). The approach relies on frequent evaluation of student understanding of course content and enables the instructor to experiment with various exercises to facilitate peer-instruction and cooperative learning. It uses a web application called MessageGrid which enables instructor and students, each of whom has a laptop computer with wireless access to the web, to interact in a variety of ways both in and out of class.	Things are clicking in computer science courses	NA:NA	2018
Amruth Kumar:Deepak Kumar:Ingrid Russell	NA	Non-traditional projects in the undergraduate AI course	NA:NA:NA	2018
Michela Pedroni:Bertrand Meyer	Teaching introductory programming today presents considerable challenges, which traditional techniques do not properly address. Students start with a wide variety of backgrounds and prior computing experience; to retain their attention it is useful to provide graphical interfaces at the level set by video games; and with the ever-increasing presence of computing in society the stakes are higher, requiring a computing curriculum to introduce students early to the issues of large systems. We address these challenges through an "outside-in" approach, or "inverted curriculum", which emphasizes the reuse of existing components in an example domain involving graphics and multimedia, a gentle introduction to formal reasoning thanks to Design by Contract techniques, and an object-oriented method throughout. The new course has now been taught twice, with considerable gathering of student data and feedback; we report on this experience and its continuation.	The inverted curriculum in practice	NA:NA	2018
Leen-Kiat Soh	Intelligent tutoring systems (ITSs) have been used to complement classroom instruction in recent years, and have been shown to facilitate learning. We incorporate an ITS named Intelligent Learning Materials Delivery Agent (ILMDA) into our CS1 course and collect evidence to validate two hypotheses: (1) The ITS improves student learning, (2) The ITS "learns" to tutor the students more efficiently and/or effectively. Our method of inquiry includes collecting data tracked while a student interacts with the ITS, post-test scores, and exam scores. We also use control and treatment groups, as well as different versions of the ILMDA in our experiments. Based on the results, we see indications that support the above two hypotheses.	Incorporating an intelligent tutoring system into CS1	NA	2018
Hamzeh Roumani	We argue that the failure to separate the concerns in CS1 is the leading cause of difficulty in teaching OOP in the first year. We show how the concerns can be detangled and present a detailed reorganization of contents for CS1/CS2 with CS1 exposing only the client view. We also report on our experience with this new pedagogy after three years of implementation at our institution.	Practice what you preach: full separation of concerns in CS1/CS2	NA	2018
Tzu-Yi Chen:Alvaro Monge:Beth Simon	What measurable effect do the language and paradigm used in early programming classes have on novice programmers' ability to do design? This work investigates the question by using data collected from 136 "first competency" students as part of a multi-national, multi-institutional study of students' approach to and attitudes toward design. Analysis of a number of surface characteristics of their designs found strikingly few differences between designs produced by students at schools that teach using objects-early, imperative-early, and functional-early paradigms. A similar lack of difference was found between students at C++-first and Java-first schools. While statistically significant differences are found for three characteristic comparisons across language and paradigm, these results seem to have little meaning for teaching given the complexity of the null hypotheses tested in those three cases. In particular, for the following design characteristics no statistically significant differences across language or paradigm of early instruction were found: attempt to address requirements, type of design produced, number of parts in design, recognition of ambiguity in design, and connectedness of design.	Relationship of early programming language to novice generated design	NA:NA:NA	2018
Jessica D. Bayliss:Sean Strout	Introductory programming courses have a specific set of expected outcomes. One of the most often heard complaints in such courses is that they are divorced from the reality of application. Unfortunately, it is difficult to find areas for application that all students have the background knowledge for and that are engaging and challenging. One such area is computer games and we have developed a cohesive CS1 course that provides traditional outcomes from within the context of games as an application area in both the lecture and lab components of the course. This course was piloted as a ten-week distance program for incoming computer science students with the defining features that the program carried no academic credit and offered no end grades. We discuss the overwhelming interest in this course as well as objective and suobjective student experiences. One of the most important outcomes of the summer course was that it brought students with similar interests and goals together. We discuss this and the different ways we have found to discuss computer science course topics from within a games context.	Games as a "flavor" of CS1	NA:NA	2018
Mark C. Lewis:Berna Massingill	This paper discusses a project that has been used to teach CS2 for six semesters at Trinity University. The project spans the full semester, and all eight of the assignments students turn in are part of the project. For this project, the students develop a 2-D game using a framework written by one of the authors. The framework is intended to allow students to produce some results early in the semester before they have significant knowledge without constraining them or doing too much for them. It was originally written for Java 1.3 and has evolved for Java 1.4 and now Java 5. We discuss the details of this project, the benefits it provides, and our experience with it.	Graphical game development in CS2: a flexible infrastructure for a semester long project	NA:NA	2018
Ian Parberry:Max B. Kazemzadeh:Timothy Roden	The University of North Texas has for many years offered classes in game programming to Computer Science students and classes in game art and design to art students. A key feature of these classes is the opportunity for these diverse communities of students to collaborate on joint projects. We describe the features that make these classes unique.	The art and science of game programming	NA:NA:NA	2018
A. T. Chamillard	Many incoming college freshmen have accumulated a significant number of hours of experience playing computer games. Extending that experience to actual game creation activities can be highly motivational for these students. Most of these activities require some level of programming expertise, however, making them activities too advanced for the majority of incoming students.In this paper, we describe a freshman-level course called Problem Solving through Game Creation. Students learn to use a number of drag-and-drop game creation tools to develop both 2D and 3D games, with no programming required in the course. We also cover a variety of other topics and tools related to game development.Our experience has been that students enjoy the course, but we have more formal course goals as well. Specifically, we hope to motivate students to declare and complete the computer science major and to better prepare students for the initial required computer science courses. We describe these goals in detail and discuss the process we have initiated to continually evaluate achievement of those goals.	Introductory game creation: no programming required	NA	2018
Michael J. Quinn	Case-based analysis is a bottom-up methodology for ethical reasoning. In a teaching environment, it can be a useful alternative to top-down methods, such as Kantianism, utilitarianism, rights-based theories, and virtue ethics. We describe a methodology for case-based analysis and illustrate the methodology by evaluating three test cases in the areas of Internet etiquette, intellectual property, and privacy, respectively. We summarize the strengths and weaknesses of using the case-based approach in a classroom setting.	Case-based analysis: a practical tool for teaching computer ethics	NA	2018
Fred G. Martin:Sarah Kuhn	A hands-on embedded computing project is introduced into an undergraduate social sciences course. In the pilot module, nine student teams created working prototypes, using the technology to address social, ecological and ethical issues. The teams included freshman to senior level computer science majors, other technical majors, and non-technical students. Most students became highly engaged in the activity, developed exciting ideas, and reported improved learning in the social sciences.	Computing in context: integrating an embedded computing project into a course on ethical and societal issues	NA:NA	2018
Anne G. Applin	This paper presents an approach to teaching Computer Ethics that blends the use of contemporary media, subscriptions to digests of current technology news, and reflective writing in a learner-centered strategy. This approach is designed to make use of activities and assignments that take advantage of (1) student interest in contemporary media (video and film) to provide motivation and context beyond historical case studies, (2) breaking news about technology and technology use in education to provide current real world context, and (3) reflective writing to stimulate thinking critically about the course content outside the classroom context. Digests published three times weekly provide a constant flow of current real-world issues that can be used for focused reflective writing. Contemporary media productions are viewed and then a writing assignment in a structured learning log is used to focus on ethical issues raised by the film. We present an example using a feature length film and subsequent learning log assignment.	A learner-centered approach to teaching ethics in computing	NA	2018
Richard G. Epstein	This paper describes an undergraduate course in computer security that has a strong ethical component. Ethical and related security topics are interwoven. The emphasis is on the kind of research that computer scientists and information technologists are conducting in order to address the fundamental problems in computer security. There is also a great emphasis on encouraging student creativity.	An ethics and security course for students in computer science and information technology	NA	2018
David R. Musicant	An undergraduate elective course in data mining provides a strong opportunity for students to learn research skills, practice data structures, and enhance their understanding of algorithms. I have developed a data mining course built around the idea of using research-level papers as the primary reading material for the course, and implementing data mining algorithms for the assignments. Such a course is accessible to students with no prerequisites beyond the traditional data structures course, and allows students to experience both applied and theoretical work in a discipline that straddles multiple areas of computer science. This paper provides detailed descriptions of the readings and assignments that one could use to build a similar course.	A data mining course for computer science: primary sources and implementations	NA	2018
Roxanne L. Canosa	This paper describes the development and structure of a second course in artificial intelligence that was developed to meet the needs of upper-division undergraduate and graduate computer science and computer engineering students. These students already have a background in either computer vision or artificial intelligence, and desire to apply that knowledge to the design of algorithms that are able to automate the process of extracting semantic content from either static or dynamic imagery. Theory and methodology from diverse areas were incorporated into the course, including techniques from image processing, statistical pattern recognition, knowledge representation, multivariate analysis, cognitive modeling, and probabilistic inference. Students read selected current literature from the field, took turns presenting the selected literature to the class, and participated in discussions about the literature. Programming projects were required of all students, and in addition, graduate students were required to propose, design, implement, and defend an image understanding project of their own choosing. The course served as preparation for and an incubator of an active research group.	Image understanding as a second course in AI: preparing students for research	NA	2018
Michael R. Scheessele:Thomas Schriefer	Assigning the development of a poker-playing agent as a group project allows flexibility with respect to the topics and techniques typically covered in an introductory Artificial Intelligence course. A poker agent project also provides students the experience of 'authentic' AI research, due to the status of poker as an 'unsolved' problem in AI. Despite this status, a poker agent project is feasible for a semester, half-semester, or quarter-long group project. Problems in assigning group projects are also considered, as are suggestions for mitigating these problems.	Poker as a group project for artificial intelligence	NA:NA	2018
Daniel B. Waegel:April Kontostathis	The paper describes the first version of the TextMOLE (Text Mining Operations Library and Environment) system for textual data mining. Currently TextMOLE acts as an advanced indexing and search engine: it parses a data set, extracts relevant terms, and allows the user to run queries against the data. The system design is open-ended, robust, and flexible. The tool is designed to quickly analyze a corpus of documents and determine which parameters will provide maximal retrieval performance. Thus an instructor can use the tool to demonstrate information retrieval concepts in the classroom, or use the tool to encourage hands-on exploration of concepts often covered in an introductory course in information retrieval or artificial intelligence. Reseachers will find the tool useful when a `quick and dirty' analysis of an unfamiliar collection is required.	TextMOLE: text mining operations library and environment	NA:NA	2018
Mary J. Granger:Guy-Alain Amoussou:Miguel A. Labrador:Sue Perry:Kelly M. Van Busum	NA	Research experience for undergraduates: successes and challenges	NA:NA:NA:NA:NA	2018
Kris Powers:Paul Gross:Steve Cooper:Myles McNally:Kenneth J. Goldman:Viera Proulx:Martin Carlisle	NA	Tools for teaching introductory programming: what works?	NA:NA:NA:NA:NA:NA:NA	2018
Nick Parlante:Steven A. Wolfman:Lester I. McCann:Eric Roberts:Chris Nevison:John Motil:Jerry Cain:Stuart Reges	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA:NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Judith Gal-Ezer	The title of this talk comes from a little book that I bought years ago, compiled by S.M. Scott. It includes fictional stories and quotations about teaching, reminiscences by former pupils about their teachers, etc. The title of the book is what caught my eye, since this is how I like to view the role teachers ought to play in people's lives.I truly believe that teachers constitute the cornerstone of any successful implementation of a program of study, on any level. Moreover, I think that beyond the mastery of the actual professional material they plan to teach, good teachers should also have deep and broad knowledge of the entire subject of which that material is part, and they must have the ability to convey the material to others correctly and reliably, to provide perspective, and to infuse the students with interest, curiosity, and enthusiasm. All this requires an educator to be more of an intellectual, at least in what concerns the relevant field at large.In the talk I'll try to elaborate on the teachers' role, and to discuss the principles that should underlie a good study program, while emphasizing high school computer science curricula. Thus, I will touch upon what I think should be the core issues for computer science education research. I will also share some anecdotes from my own life, which at the time motivated me to get involved in teaching and educating, in designing computer science study programs and in their implementation, and paved the way to my doing research on teaching the fundamentals of computer science.	To teach is to touch lives forever	NA	2018
Daniel D. Garcia	NA	Session details: Teaching tips we wish they'd told us before we started	NA	2018
Owen Astrachan:Nick Parlante:Daniel D. Garcia:Stuart Reges	NA	Teaching tips we wish they'd told us before we started	NA:NA:NA:NA	2018
Seung-won Hwang	NA	Session details: Learning solutions for the first year	NA	2018
James H. Cross, II:T. Dean Hendrix:Jhilmil Jain:Larry A. Barowski	The jGRASP lightweight IDE has been extended to provide object viewers that automatically generate dynamic, state-based visualizations of data structures in Java. These viewers provide multiple synchronized visualizations of data structures as the user steps through the source code in either debug or workbench mode. This tight integration in a lightweight IDE provides a unique and promising environment for learning data structures. Initial classroom use has demonstrated the object viewers' potential as an aid to students who are learning to write and modify classes representing data structures. Recently completed controlled experiments with CS2 students indicate that these viewers can have a significant positive impact on student performance.	Dynamic object viewers for data structures	NA:NA:NA:NA	2018
Bruce Adcock:Paolo Bucci:Wayne D. Heym:Joseph E. Hollingsworth:Timothy Long:Bruce W. Weide	A model and a taxonomy to characterize pointer manipulations are introduced, along with an instrumentation technology that leverages them to provide students with immediate reports of pointer errors in C++ programs. Data collected from CS2 student assignments show that the vast majority of student pointer errors either would not have been noticed at all, or would have been detected only much later in execution, if this infrastructure were not used. Possible applications of the underlying technology--both to conduct long-term educational research into students' understanding of pointers, and to improve pedagogy directly--are discussed.	Which pointer errors do students make?	NA:NA:NA:NA:NA:NA	2018
Atanas Radenski	Students who grew up browsing the Web are skilled in what is usually referred to as abduction, a reasoning process that starts with a set of specific observations and then generates the best possible explanation of those observations. In order to exploit the abduction skills of contemporary students, we have developed digital CS1/2 study packs that promote and support active learning through abduction, i.e., abductive learning. The study packs integrate a variety of digital resources: online self-guided labs, e-texts, tutorial links, sample programs, quizzes, and slides. These online packs stimulate students to learn abductively by browsing, searching, and performing self-guided lab experiments. In two years of study pack use, the failure rate in the CS1/2 courses at Chapman University has been reduced from 14% to 5%. The study packs have been published online at studypack.com and adopted in various institutions.	Digital support for abductive learning in introductory computing courses	NA	2018
Krish Narayanan	NA	Session details: Recruitment and retention of computing students	NA	2018
Lenore Blum:Thomas J. Cortina	In this paper, we describe a pilot summer workshop (CS4HS) held at Carnegie Mellon University in July 2006 for high school CS teachers to provide compelling material that the teachers can use in their classes to emphasize computational thinking and the many possibilities of computer science. Diversity and broadening participation was explicitly addressed throughout the workshop. We focused on broadening the image of what CS is -- and who computer scientists are -- since the reasons for under-representation in the field are very much the same as the reasons for the huge decline in interest. We describe the design of the workshop along with results from initial surveys and evaluations. Short-term evaluations show that this workshop was successful in changing the perception of CS for these teachers and giving them the impetus to include broader topics in their programming courses for the upcoming school year. Future surveys will track the long-term effect of this workshop.	CS4HS: an outreach program for high school CS teachers	NA:NA	2018
Elise H. Turner:Erik Albert:Roy M. Turner:Laurence Latour	Retention is an important issue for Computer Science Departments. In many cases students leave the major due to frustrations with programming in the complex languages often used in CS1 and CS2 or because they do not understand that computer science is much more than programming. We have redesigned our introductory sequence to include a rigorous, non-programming introduction to the field and a CS1 course which uses Scheme so that students can focus on the principles of programming instead of the complexities of a particular language. In the first year that we have required these courses in our major, we have had positive results. In this paper, we describe what we have learned through discussions with students and student surveys.	Retaining majors through the introductory sequence	NA:NA:NA:NA	2018
Larisa Eidelman:Orit Hazzan	Worldwide surveys indicate that the number of women studying undergraduate-level Computer Science is constantly decreasing. Based on data collected in Israel, significant differences were found in the percentages of fale high school students studying advanced-level Computer Science among different sectors. More specifically, while the percentage of fale high school students studying advanced-level Computer Science is about 50% for the Arab minority sector, the percentage of fale students studying Computer Science at the same level among the Jewish majority sector is only about 25%. This situation was investigated by using both qualitative and quantitative research tools. The paper illustrates the analysis of the data within the model of 'achievent-related choices' developed by Eccles and her colleagues.	Eccles' model of achievent-related choices: the case of computer science studies in Israeli high schools	NA:NA	2018
Richard Salter	NA	Session details: Artificial intelligence	NA	2018
Steve Engels:Vivek Lakshmanan:Michelle Craig	This paper focuses on the use of code features for automatic plagiarism detection. Instead of the text-based analyses employed by current plagiarism detectors, we propose a system that is based on properties of assignments that course instructors use to judge the similarity of two submissions. This system uses neural network techniques to create a feature-based plagiarism detector and to measure the relevance of each feature in the assessment. The system was trained and tested on assignments from an introductory computer science course, and produced results that are comparable to the most popular plagiarism detectors.	Plagiarism detection using feature-based neural networks	NA:NA:NA	2018
Amy McGovern:Jason Fager	We introduced an arcade-style gaming environment for use in a mixed undergraduate and graduate introductory artificial intelligence (AI) course. Our primary goal in this course was to provide students with a "significant learning experience" [3]. We achieved this goal by creating projects based in the game environment that illustrate several major AI topic areas. These projects were designed to be challenging, enjoyable, and to demonstrate AI programming in a realistic environment. Each of the projects was designed to be feasible for all the students yet flexible enough to allow the stronger students to explore alternative solutions. We evaluated our success in achieving these goals through student evaluations, comments, and exam grades.	Creating significant learning experiences in introductory artificial intelligence	NA:NA	2018
David M. Hansen:Joseph Bruce:David Harrison	We have developed a simple yet motivating course-project for use in a one-semester undergraduate course in Artificial Intelligence. The project is well-suited to small liberal arts college environments that lack specialized hardware, software, and faculty, fulfilling an unmet need for many faculty at such institutions.We describe the project and how to deploy and use supporting software for faculty wishing to adopt this project.	Give students a clue: a course-project for undergraduate artificial intelligence	NA:NA:NA	2018
Mark Burge	NA	Session details: Funding opportunities in computer science education at the national science foundation	NA	2018
Mark Burge:Diana Burley:Harriet Taylor	We are actively seeking to increase both the number and competitiveness of proposals to NSF's Course, Curriculum, and Laboratory Improvement (CCLI) program. Funding for computer science education programs at NSF responds directly to the total proposal pressure, so increasing both the number of proposals and the competitiveness of those proposals increases the amount of funding NSF targets for computer science education.	Funding opportunities in computer science education at the national science foundation	NA:NA:NA	2018
Paul Addison	NA	Session details: Web-based technologies	NA	2018
Serge Linckels:Stephan Repp:Naouel Karam:Christoph Meinel	This paper describes our e-librarian service that understands students' complete questions in natural language and retrieves very few but pertinent learning objects, i.e., short multimedia documents. The system is based on three key components: the formal representation of a domain ontology, a mechanism to automatically identify learning objects out of a knowledge source, and a semantic search engine that yields only pertinent results based on the freely formulated questions in natural language.We report on experiments about students' acceptance to enter complete questions instead of only keywords, and about the benefits of such a virtual personal teacher in an educational environment.	The virtual tele-tASK professor: semantic search in recorded lectures	NA:NA:NA:NA	2018
Manas Tungare:Xiaoyan Yu:William Cameron:GuoFang Teng:Manuel A. P√©rez-Qui√±ones:Lillian Cassel:Weiguo Fan:Edward A. Fox	A syllabus defines the contents of a course, as well as other information such as resources and assignments. In this paper, we report on our work towards creating a syllabus repository of Computer Science courses across universities in the USA. We present some statistics from our initial collection of 8000+ syllabi. We show a syllabus creator that is integrated with Moodle [5] moodle_2006_moodle, an open-source course management system, which allows for the creation of a syllabus for a particular course. Among other information, it includes knowledge units from the Computing Curricula 2001 body of knowledge. The goal of the syllabus repository is to provide added value to the Computer Science Education community, and we present some such offerings. We conclude by presenting our future plans for the syllabus repository. These include using automated techniques to collect and classify syllabi, providing recommendations to instructors when creating a syllabus, and allowing the community to share their syllabi automatically. The syllabus collection will be part of the Computing and Information Technology Interactive Digital Educational Library (CITIDEL), a collection of the National Science Digital Library (NSDL).	Towards a syllabus repository for computer science courses	NA:NA:NA:NA:NA:NA:NA:NA	2018
Mohamed Hamada	The idea of using web-based technologies in education as a means of interactive learning has been erging for several topics in computer science and engineering. It proves to be more effective in the learning process and hence rapidly expanding. In this paper we introduce an integrated environment for active learning in the information theory course and related fields. Our environment is designed to meet the learning preferences of computer engineering learners. The environment integrates several different materials to support the learners' preferred style. It includes a movie-like welcome component, an animated hyper-text introduction for the basic concepts of information theory, a communication model simulator, and an interactive set of exercises for self assessment. All the components of the environment are integrated into a single interface based on Java2D of Sun Microsysts. Being a Java applet, our environment is portable and web-based enabled, which makes it possible for learners to study at their convenience. An initial study shows that our integrated environment is a useful tool for learners of information theory and related fields.	Web-based tools for active learning in information theory	NA	2018
Amruth Kumar	NA	Session details: Mechanics of undergraduate research at liberal arts colleges - lessons learned	NA	2018
David Musicant:Amruth Kumar:Doug Baldwin:Ellen Walker	NA	Mechanics of undergraduate research at liberal arts colleges: lessons learned	NA:NA:NA:NA	2018
Elliott Koffman	NA	Session details: New paradigms for introductory computing courses	NA	2018
Elliot Koffman:Heidi Ellis:Charles Kelemen:Curt White:Steven Wolfman	NA	New paradigms for introductory computing courses	NA:NA:NA:NA:NA	2018
Kim P. Kihlstrom	NA	Session details: Teaching with tablets and inking technologies	NA	2018
Richard Anderson:Ruth Anderson:K. M. Davis:Natalie Linnell:Craig Prince:Valentin Razmov	This paper describes an application of classroom technology in support of teaching through the use of examples and active learning techniques. Here we report on using Classroom Presenter, a Tablet PC based classroom interaction syst, in a senior level course in Algorithms -- a domain for which the instructor believes working on sample probls is critical to student learning in the classroom. The role of the technology was to integrate activities into the lecture so that students have the opportunity to work with concrete examples in class, while the instructor can collect and review student work in real time, incorporating selected student answers into the discussion. In this paper, we describe the pedagogical goals of the instructor, the types of activities used to achieve those goals, and the role that technology played in supporting those goals and activities. The contributions of the paper are in showing how classroom technology can be used to support pedagogical choices, as well as in phasizing the value of having clear pedagogical goals when incorporating a new technology in the classroom. We believe the application of technology as illustrated in this work could bring similar benefits to the instruction in other disciplines.	Supporting active learning and example based instruction with classroom technology	NA:NA:NA:NA:NA:NA	2018
Jaspal Subhlok:Olin Johnson:Venkat Subramaniam:Ricardo Vilalta:Chang Yun	Online learning, defined broadly as recording and delivering classroom experience with technology, has tremendous potential. However, success to date has been very limited in science and engineering. We believe this is because traditional video recording is cumbersome and not suitable for technical lectures and removing live classroom interaction is detrimental to learning. Employing Tablet PCs with slide presentation software has made it simple and convenient to develop and record high quality lectures. We employ such videos in a hybrid model of coursework. All lectures are made available as online videos, but limited classroom interaction is an important component; the classroom is used for review of lecture material, examinations, demonstrations, tutorials, and hands-on sessions. The hybrid framework is particularly suitable for students with logistical difficulties, e.g., because of work schedule. This paper is an evaluation of the hybrid learning approach as applied to upper level computer science coursework. We report our experience in teaching a suite of hybrid courses at the University of Houston and discuss the detailed feedback we received from the students who participated in the courses.	Tablet PC video based hybrid coursework in computer science: report from a pilot project	NA:NA:NA:NA:NA	2018
Tilman Wolf	Since the introduction of inking technology, computer science and engineering education has experienced a flurry of new instructional approaches. Many studies have assessed qualitative improvements over traditional classroom presentation techniques. In this paper, we present quantitative results on the improved student perception of teaching when using Classroom Presenter instead of PowerPoint for classroom presentation. We present an overview on how Classroom Presenter was used in a large undergraduate digital design course and discuss the assessment of results and their analysis. Our data shows with statistical significance that students perceive lectures with Classroom Presenter as more interesting and more adequately paced.	Assessing the impact of inking technology in a large digital design course	NA	2018
Gerald Kruse	NA	Session details: Status report on the SIGCSE committee on models for evaluating faculty scholarship	NA	2018
Shmuel Fink:Gerald Kruse:Keith Olson	In this special session, the members of the SIGCSE Committee on Models for Evaluating Faculty Scholarship would like to meet with interested SIGCSE members. In particular we would like to give an update on our progress in the last year, as well as solicit feedback and guidance.	Status report on the SIGCSE committee on models for evaluating faculty scholarship	NA:NA:NA	2018
David Malan	NA	Session details: Activities and tools for course management	NA	2018
Curtis Clifton:Lisa C. Kaczmarczyk:Michael Mrozek	Instructors of introductory courses face many challenges, not the least of which is dealing with a large volume of course materials and students with differing backgrounds. There are often too many administrative demands to have as much time for creative pedagogy as one would like. Team projects, and complex realistic projects in general, increase psychic demands, and conflicting schedules make creative collaboration with other instructors impossible. In order to address these issues, we need to find ways to increase effective handling of course development, to free up time for creative pedagogical efforts. This paper reports on an exploratory project in which two instructors and an undergraduate teaching assistant used the Subversion version control system to collaborate remotely on developing and running two CS1 classes. We focus on the ease and efficiency of course management using Subversion, providing a new perspective on how version control can enhance teaching.	Subverting the fundamentals sequence: using version control to enhance course management	NA:NA:NA	2018
Matt Bower	This paper shares insights about the deployment of groupwork activities in synchronous online classroom spaces. It is based upon analysis of 48 hours of online lesson recordings from an Introduction to Programming (in Java) subject conducted over two semesters. Key observations are shared about how factors such as the type of the activity, the level of student technological and communicative competencies, the interface design and the task specification influenced discourse and learning. On this basis recommendations for teaching using virtual classroom groupwork are offered in order to assist academics who may be considering similar approaches to teaching online.	Groupwork activities in synchronous online classroom spaces	NA	2018
Douglas D. Dankel, II:Jonathan Ohlrich	This paper presents the structure of a new elective course at the University of Florida, Artificial Intelligence in Computer Games, which addresses not only the technical aspects of creating realism within computer games, but also the need for more experiences in oral communication. Key elements of this course include the students conducting a majority of the teaching and actively participating in evaluating each other.	Students teaching students: incorporating presentations into a course	NA:NA	2018
Diana Cukierman	NA	Session details: Integrating mathematics and computer science	NA	2018
Kirby McMaster:Nicole Anderson:Brian Rague	This paper proposes a Discrete Mathatics course that is integrated with programming. The course consists of a sequence of Math modules with coordinated programming projects. Advantages of this approach are presented, and a methodology for developing the course is shown. A sample list of Math modules and brief project descriptions are included.	Discrete math with programming: better together	NA:NA:NA	2018
Ruedi Arnold:Marc Langheinrich:Werner Hartmann	The use of suitable examples is a key to teach abstract, theoretical concepts. Interactive computer software allows us to use such examples to create attractive learning environments that not only appeal to students, but also enhance knowledge transfer in class. However, developing such highly specialized systs is costly, resulting in only few of these tools being developed for higher education. This article introduces Info Traffic, a collection of new learning environments to support the introduction of fundamental concepts of computer science and mathatics in order to be of long-lived value. We describe the didactical concepts behind the interactive and concrete approach of Info Traffic, and illustrate th through two of its learning environments -- one targeted at propositional logic, the other at queueing theory.	InfoTraffic: teaching important concepts of computer science and math through real-world examples	NA:NA:NA	2018
Scott D. Anderson	Simulation is an important topic in Computer Science, as is probability and statistics. Most undergraduates who take a course in probability and statistics do so through the mathematics department, and often to fulfill a college quantitative reasoning (QR) requirement. However, a course that combines the two topics can exploit some useful synergies between them. This paper describes those synergies and a one-semester course that covers both topics.	A course on simulation, probability and statistics	NA	2018
Shannon Pollard	NA	Session details: Engagement via games	NA	2018
Scott Leutenegger:Jeffrey Edgington	In this paper we argue for using a "Game First" approach to teaching introductory programming. We believe that concerns over whether an OO approach or a procedural approach should be used first are secondary to the course assignment and example content. If examples are not compelling, student interest often lags thus making the OO versus procedural argument moot. We believe that game programming motivates most new programmers. Compelling assignments mean that students are far more likely to learn because they are interested, and the visual component allows students to see mistakes in their code as manifested in the resultant graphics. We describe our experiences after redesigning and offering a new introductory computer science sequence using 2D game development as a unifying theme. We teach fundamental programming concepts via two dimensional game development in Flash and ActionScript during the first quarter, transition to C++ to solidify concepts and add pointers during the second quarter, then teach a multi-phase project based game approach using C++ and openGL (2D graphics only) during the third quarter. Our surveys show that this approach improved student understanding of all seven basic topics examined.	A games first approach to teaching introductory programming	NA:NA	2018
Cristina Nita-Rotaru:Melissa Dark:Voicu Popescu	In this paper we report on our experience of teaching a multi-expertise application-driven course in which upper-level undergraduate and entry-level graduate students from computer science, computer graphics technology, and educational science worked together to design, develop and evaluate a distance learning system. We describe the activities pursued in the class, the interactions between the various groups of students, as well as the challenges and advantages ensuing from the great variety of student backgrounds. The success of the course is measured in two ways. First, the class achieved the goal of building a distance learning system that surpasses the state of the art by improving the integration of the remote students into regular on-campus learning. Second, a survey conducted at the end of the course indicates that the application-driven, collaborative, and multi-expertise structure of the class provided a uniquely effective learning experience.	A multi-expertise application-driven class	NA:NA:NA	2018
Joan Peckham:Peter Stephenson:Jean-Yves Herv√©:Ron Hutt:Miguel Encarna√ß√£o	To address the alarming decrease in students in Rhode Island computer science programs and the under-representation of women and minorities, we have devised a program to introduce students to research in computer graphics, art and new media. This program integrates good mentoring practice and pedagogy, including problem-based learning. Special attention is paid to creating a cohort of students who come together every week to learn about the research process, and ethical and societal issues related to it. Each student takes a small project from the proposal stage, through design and implementation, to publication and presentation. We report on the first two years of the program.	Increasing student retention in computer science through research programs for undergraduates	NA:NA:NA:NA:NA	2018
Dick Gayler	NA	Session details: UML tools: what is their role in undergraduate computer science courses?	NA	2018
Dick Gayler:David Klappholz:Valerie J. Harvey:Manuel A. P√©rez-Qui√±ones	NA	UML tools: what is their role in undergraduate computer science courses?	NA:NA:NA:NA	2018
Bill Marion	NA	Session details: Assessing computer science programs: what have we learned	NA	2018
Bill Marion:John Impagliazzo:Caroline St. Clair:Barry Soroka:Deborah Whitfield	NA	Assessing computer science programs: what have we learned	NA:NA:NA:NA:NA	2018
Lillian (Boots) Cassell	NA	Session details: An Initiative to attract students to computing	NA	2018
Lillian N Cassel:Andrew McGettrick:Gordon Davies:Heikki Topi:Bob Sloan	NA	An initiative to attract students to computing	NA:NA:NA:NA:NA	2018
Yana Kortsarts	NA	Session details: Tools and techniques for teaching object-oriented programming	NA	2018
Robert E. Noonan:John R. Hott	The paper discusses a course in software development, as advocated by the CC2001 report. The course revolves around a single project divided into six assignments. In addition, the course includes lab assignments covering the tool of the week. The order of coverage of topics and the order of labs is determined using just-in-time learning. Grading criteria and an assessment of the course are discussed.	A course in software development	NA:NA	2018
Dave Feinberg	This paper explores both the design and classroom usage of a visual and interactive programming environment. This environment, named JavaTown, provides a visual representation of the inner workings of object-oriented programs, in which on-screen characters are literally depicted as carrying messages to each other and remembering values. JavaTown was created to aid in the introduction of some of the most elusive concepts in the CS1/CS2 curriculum: object references, parameter passing, variable scope, recursion, and linked lists.	A visual object-oriented programming environment	NA	2018
Sara Stoecklin:Suzanne Smith:Catharina Serino	Refactoring is the process of transforming the internal structure of existing code while keeping the integrity of the code's functional requirements. Refactoring is proven to increase program maintainability, flexibility, and understandability and is recognized as a best practice in the software development community. However, with the exception of courses or lectures on extreme programming, refactoring is overlooked in the computer science curriculum. This paper presents the fourth lesson of an innovative pedagogical approach to teaching refactoring on the college level. This lesson covers the creation of well formed object-oriented methods including characteristics for evaluating such methods. Through this hands-on approach, building well formed object-oriented methods through refactoring can be better understood and integrated into the computer science curriculum.	Teaching students to build well formed object-oriented methods through refactoring	NA:NA:NA	2018
Bradley Miller	NA	Session details: Algorithm visualization	NA	2018
Clifford A. Shaffer:Matthew Cooper:Stephen H. Edwards	We present our findings on the state of the field of algorithm visualization, based on extensive search and analysis of links to hundreds of visualizations. We seek to answer questions such as how content is distributed among topics, who created algorithm visualizations and when, the overall quality of available visualizations, and how visualizations are disseminated. We have built a wiki that currently catalogs over 350 algorithm visualizations, contains the beginnings of an annotated bibliography on algorithm visualization literature, and provides information about researchers and projects. Unfortunately, we found that most existing algorithm visualizations are of low quality, and the content coverage is skewed heavily toward easier topics. There are no effective repositories or organized collections of algorithm visualizations currently available. Thus, the field appears in need of improvement in dissemination of materials, informing potential developers about what is needed, and propagating known best practices for creating new visualizations.	Algorithm visualization: a report on the state of the field	NA:NA:NA	2018
Erik Carson:Ian Parberry:Bradley Jensen	Computer science courses have increasingly made use of visualization tools to illustrate common algorithms. This paper describes Algorithm Explorer, an educational tool designed for use by instructors and students to examine algorithms in a rich environment composed of 3D data representations, 3D audio cues, and easy-to-use controls. Instructors and students can easily add calls to Algorithm Explorer's C++ API to their programs to quickly develop engaging visualizations, and every detail of the scene can be customized as the developer desires.	Algorithm explorer: visualizing algorithms in a 3D multimedia environment	NA:NA:NA	2018
Wolfgang H√ºrst:Tobias Lauer:Eveline Nold	Compared to desktop PCs, mobile devices have several constraints such as restricted screen size and reduced interactivity. Hence, it is not clear if it is helpful to provide educational multimedia material for mobile media players. In this paper, we present a study of algorithm animations on mobile devices, i.e. an Apple iPod with video functionality. The results of our experiment indicate that despite limitations there is an actual learning effect and therefore mobile media players offer a potential to increase learning that deserves further investigation.	A study of algorithm animations on mobile devices	NA:NA:NA	2018
Ellen Walker	NA	Session details: Mindstorms: robotics and beyond	NA	2018
Daniel E. Stevenson:James D. Schwarzmeier	There are many possible ways to integrate Lego Mindstorms robots into the standard computer science curriculum. This paper presents a way to use these robots to teach image processing or vision by building an autonomous vehicle. The vehicle uses an off-the-shelf web cam for all of its navigation. Integration of the camera, robot, and controlling computer is discussed, as are the image processing units used, the structure of a state machine controlling them, and the cross-cutting concern of reducing both input and output noise throughout all aspects of the project.	Building an autonomous vehicle by integrating lego mindstorms and a web cam	NA:NA	2018
Michael J. Jipping:Cameron Calka:Brian O'Neill:Christopher R. Padilla	Assbly language is a valuable subject to teach, yet one of the most underappreciated by students. Students do not see the need for assbly language and they get through it as quickly as possible. Given the time in a computer organization course to teach assbly language, assignments -- either quick-and-easy ones or those contrived-to-teach-a-point -- contribute to this attitude of malaise. This paper documents a project to inject some fun into the teaching of assbly language. First, we switch the language to Java bytecode. Second, we use unique assignments to use Java bytecode with Lego Mindstorms robotics.	Teaching students java bytecode using lego mindstorms robots	NA:NA:NA:NA	2018
Frank Klassner:Christopher Continanza	This paper examines the applicability of LEGO Mindstorms to the intermediate-level computer science curriculum, which traditionally includes courses such as Computer Organization and Operating Systems. We describe three open-laboratory projects that employ Mindstorms in exploring systems-level programming topics and present results from student evaluations of the projects over the last two years. An interesting feature of the projects is that they do not involve robotics or robot construction but instead focus on the Mindstorms programmable brick as a platform in its own right.	Mindstorms without robotics: an alternative to simulations in systems courses	NA:NA	2018
Carol Taylor	NA	Session details: Communication skills	NA	2018
Eliseo Reategui:Elisa Boff:John A. Campbell	This paper describes a virtual character placed in an educational environment with the purpose of motivating and involving students in the activities proposed. The character can communicate with users in natural-language; it can learn students' profiles and use this knowledge to recommend appropriate contents and activities. Three main elements compose the character's architecture: an AIML-based mechanism, which endows the character with its communication abilities; a profile management system, which collects and organizes students information; and a recommender system, which uses the student's profiles and behavioral patterns to make content recommendations. The character was placed in an educational environment and used in an experiment with 53 computer science students. The results of the experiment are presented here, as well as conclusions and directions for future work.	Using virtual characters in personalized recommendations	NA:NA:NA	2018
Jessen T. Havill:Lewis D. Ludwig	The Department of Mathematics and Computer Science at Denison University has introduced a significant new oral communication component early in both majors. The sophomore computer science and mathematics majors meet together each week for a "lab" taught jointly by a computer scientist and a mathematician. There were three goals in this endeavor: (1) to prepare students for the workforce and graduate school by improving their oral communication skills, (2) to nurture future researchers in both fields by exposing them to research early in their undergraduate training, and (3) to increase computer science students' exposure to mathematics. In the following, we establish the need for such a course, describe our approach, how it satisfies our three goals, and additional outcomes.	Technically speaking: fostering the communication skills of computer science and mathematics students	NA:NA	2018
Michelle Craig	Trying to improve undergraduate teaching based on feedback collected by traditional student course evaluations can be a frustrating experience. Unclear, contradictory and ill-informed student comments leave instructors confused and discouraged. We designed and then implemented an evaluation mechanism where an independent CS faculty peer visits a lecture and holds an evaluation discussion with the students. These facilitated discussions begin by looking at overall strengths and weaknesses for the course but quickly focus on the key student concerns and suggestions for improvement. After conducting thirty four facilitated discussions, we find them appreciated by students who feel heard and valued. A survey of participating faculty indicates that the written discussion report is more useful to them than standard student survey results. Faculty report that they have made changes based on the recommendations and limited quantitative data suggests that teaching has improved and its value in the departmental culture has increased. In this paper we describe the evaluation process, discuss our experiences and offer some concrete suggestions for those who might want to try this approach in their own department.	Facilitated student discussions for evaluating teaching	NA	2018
Peter Henderson	NA	Session details: Computational thinking	NA	2018
Peter B. Henderson:Thomas J. Cortina:Jeannette M. Wing	NA	Computational thinking	NA:NA:NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Grady Booch	In so many ways, software-intensive systems touch the lives of every individual, corporation, institution, nation, and contemporary civilization. Nonetheless, the gap between the technological haves and have-nots is growing and the gap between academia and the industries that create these software-intensive systems continues to be much lamented. I enter this presentation as one firmly planted in the pragmatic creation and evolution of such systems, and yet look outside industry for sources of state-changing innovation. In this talk, I'll examine the current state of software-intensive systems in the world, the forces that fall upon such systems and the people who develop, deploy, and operate them, and the means whereby we can keep the pipeline of innovation open and the academia/industry dialog vibrant. Along the way, I'll cover little-discussed topics including the moral dimension of software, the appreciation of beauty in software, and the privilege and responsibility of being a software developer.	Readn', writ'n, 'rithmetic...and code'n	NA	2018
Kuodi Jian	NA	Session details: Active learning	NA	2018
Kung-Kiu Lau	We decided to support active learning on a beginner's course on Reasoning about Imperative Programs because our students find the material challenging. Because of the large class size and resource implications, we opted for a simple approach: the modified lecture format. We devised active learning sheets for use during lectures. Each sheet consisted of short questions which covered the main points of the lecture. Students had to answer the questions during the lectures as they listened. In this paper we describe how we designed the active learning sheets for this particular course, and the students' (positive) response to them.	Active learning sheets for a beginner's course on reasoning about imperative programs	NA	2018
Donald Chinn:Kristofer Martin:Catherine Spencer	Active learning techniques, including collaborative programming and problem solving environments, have been widely adopted by many computer science educators. A related approach is the Treisman model, which was originally designed for the first-year calculus course and involves intensive workshops where students collaborate in small groups to solve problems. We have adapted the model for both the data structures and algorithms courses at our institution. Regression analysis indicates that students who participate in the workshops for the algorithms course perform better (0.561 grade points on a 4-point scale) than those who do not, even after accounting for prior academic performance. However, the workshops appear to have less of an effect on student grades in the data structures course. This study provides evidence that the workshop model can be an effective learning environment for students in courses primarily involving analysis, but that for courses that involve large amounts of programming, further adaptations to the model might be needed.	Treisman workshops and student performance in CS	NA:NA:NA	2018
Dino Schweitzer:Wayne Brown	Engaging students in the learning process has been shown to be an effective means for education. Several methods have been proposed to achieve this engagement for computer science and other disciplines. Active learning is one such technique that incorporates interactive classroom activities to reinforce concepts and involve the students. Visualizations of computer science concepts such as algorithm animations can be used for these activities. To be most effective in this environment, they need to be designed and used with active learning in mind. This paper describes the design characteristics of such visualizations, ways of using them in the classroom, and our experience with developing and using visualization tools across different courses in the computer science curriculum.	Interactive visualization for the active learning classroom	NA:NA	2018
Richard Ord	NA	Session details: Non-majors and budding majors	NA	2018
Kris Powers:Stacey Ecott:Leanne M. Hirshfield	This work analyzes the advantages and disadvantages of using the novice programming environment Alice in the CS0 classroom. We consider both general aspects as well as specifics drawn from the authors' experiences using Alice in the classroom over the course of the last academic year.	Through the looking glass: teaching CS0 with Alice	NA:NA:NA	2018
Thomas J. Cortina	In this paper, the design and implementation of a novel introductory computer science course for non-majors is presented. This course focuses on the major contributions in computer science from the perspective of the process of computation. This course differs from most introductory courses in computer science in that it does not include programming using a computer programming language. Students focus on algorithms and the principle of computational thinking, and use a flowchart simulator to experiment with various short algorithms and build simple computer games without dealing with programming language syntax. Steadily increasing enrollments and interest from various departments on campus indicate that this course has become a successful addition to our introductory CS offerings.	An introduction to computer science for non-majors using principles of computation	NA	2018
David J. Malan:Henry H. Leitner	Scratch is a "media-rich programming environment" recently developed by MIT's Media Lab that "lets you create your own animations, games, and interactive art." Although Scratch is intended to "enhance the development of technological fluency [among youths] at after-school centers in economically disadvantaged communities," we find rarkable potential in this programming environment for higher education as well.We propose Scratch as a first language for first-time programmers in introductory courses, for majors and non-majors alike. Scratch allows students to program with a mouse: programmatic constructs are represented as puzzle pieces that only fit together if "syntactically" appropriate. We argue that this environment allows students not only to master programmatic constructs before syntax but also to focus on probls of logic before syntax. We view Scratch as a gateway to languages like Java.To validate our proposal, we recently deployed Scratch for the first time in higher education via harvard Summer School's Computer Science S-1: Great Ideas in Computer Science, the summertime version of a course at harvard College. Our goal was not to improve scores but instead to improve first-time programmers' experiences. We ultimately transitioned to Java, but we first introduced programming itself via Scratch. We present in this paper the results of our trial.We find that, not only did Scratch excite students at a critical time (i.e.,, their first foray into computer science), it also familiarized the inexperienced among th with fundamentals of programming without the distraction of syntax. Moreover, when asked via surveys at term's end to reflect on how their initial experience with Scratch affected their subsequent experience with Java, most students (76%) felt that Scratch was a positive influence, particularly those without prior background. Those students (16%) who felt that Scratch was not an influence, positive or negative, all had prior programming experience.	Scratch for budding computer scientists	NA:NA	2018
Jeffrey Stone	NA	Session details: Patterns	NA	2018
Carl Alphonce:Michael Caspersen:Adrienne Decker	Giving students an appreciation of the benefits of using design patterns and an ability to use them effectively in developing code presents several interesting pedagogical challenges. This paper discusses pedagogical lessons learned at the "Killer Examples" for Design Patterns and Objects First series of workshops held at the Object Oriented Programming, Systems, Languages and Applications (OOPSLA) conference over the past four years. It also showcases three "killer examples" which can be used to support the teaching of design patterns.	Killer "killer examples" for design patterns	NA:NA:NA	2018
Paul V. Gestwicki	We present a computer game case study that can be used to motivate the need for design patterns. Design patterns are often misunderstood, but good examples can motivate students to work at understanding patterns. Computer games are used in many books and online resources to teach programming concepts, but these examples are usually simplified or non-object-oriented. We present a simple game that exhibits functionality found in commercial games (animation, collision detection, etc.) and show how it can be used as a case study for design patterns. Specifically, we illustrate how the state, facade, observer, strategy, and visitor patterns can replace procedural approaches for implenting the logic and animation of game written in Java.	Computer games as motivation for design patterns	NA	2018
Andy Carle:Michael Clancy:John Canny	We present several interesting applications for the Pattern-Annotated Course Tool (PACT) and pedagogical design patterns in the process of curriculum design. PACT is a visual editor in which content designers can create visual representations of their courses and annotate them with references to educational theory in the form of pedagogical patterns. Each usage scenario illustrates the opportunities for learning that PACT, the annotation process, and the artifacts that users create present to experts, novices, and everyone in between. Finally, we take an in-depth look at one ongoing course annotation being crafted by an experienced curriculum designer and examine his interesting findings from the process. An analysis of these discoveries demonstrates the utility of PACT in the curriculum design process.	Working with pedagogical patterns in PACT: initial applications and observations	NA:NA:NA	2018
Michael R. Wick	NA	Session details: Programming-lite: a dialog on educating computer science practitioners in a flat world	NA	2018
Robert B. Allen:David Klappholz:Michael R. Wick:Carol Zander	NA	Programming-lite: a dialog on educating computer science practitioners in a "flat world"	NA:NA:NA:NA	2018
Jeffrey Forbes	NA	Session details: ... But what do the top-rated schools do? a survey of introductory computer science curricula	NA	2018
Jeffrey Forbes:Daniel D. Garcia	NA	"...But what do the top-rated schools do?": a survey of introductory computer science curricula	NA:NA	2018
Paula Gabbert	NA	Session details: ACM-W's new programs for recruiting and retaining women in computing	NA	2018
Paula Gabbert:Barbara Boucher Owens:Bettina Bair:Chris Stephenson:Joanne McGrath Cohoon:Gloria Childress Townsend	This special session will provide an overview of the programs that ACM's executive committee on Women in Computing (ACM-W) coordinates for the recruitment and retention of women in computing. The overview will include projects in all areas of ACM-W with special focus on those projects impacting the educational environment.	ACM-W's new programs for recruiting and retaining women in computing	NA:NA:NA:NA:NA:NA	2018
Thomas Liu	NA	Session details: Teaching computer graphics	NA	2018
Kelvin Sung:Peter Shirley:Becky Reed Rosenberg	Our computer graphics (CG) programming class uses games development as a means to help students understand CG concepts. Many students mistakenly thought this CG class was a games programming class. We present a simple frame-work for discussing games programming classes. Based on the framework, the paper describes our efforts in integrating competencies associated with games programming into our CG programming class. Our results show that the resulting class maintains the integrity of the original CG class while allowing students to develop projects with more interesting games features.	Experiencing aspects of games programming in an introductory computer graphics class	NA:NA:NA	2018
Mike Bailey:Steve Cunningham	GPU programming is fast becoming an essential skill for computer graphics students. It has immediate application in all areas of graphics including science, engineering, art, animation, and gaming. Because it is new, experience with teaching GPU programming is scarce. This paper describes the teaching of a GPU programming course with a hands-on program called glman. glman allows students to create a shader scene description file which not only creates the 3D scene, but creates an interactive user interface to adjust shader parameters. Our experience in an experimental class taught in Spring 2006 is that glman is flexible enough to donstrate and experiment with many shader concepts, and creates a fast and fun learning curve for the students.	A hands-on environment for teaching GPU programming	NA:NA	2018
Jerry O. Talton:Darren Fitzpatrick	A long-standing difficulty in the development of introductory courses in computer graphics is balancing the educational necessity of ensuring mastery of fundamental graphical concepts with the highly desirable goal of exciting and inspiring students to further study by enabling them to produce visually interesting programming projects. Recently, we have developed a modified curriculum predicated on the extensive integration of the OpenGL Shading Language with a more traditional pedagogical approach. We utilized this curriculum in the quarter-long, upper-division introductory graphics course taught in the Department of Computer Science at the University of California, Santa Cruz. Our experience indicates that making shading an integral part of the entry-level curriculum inculcates students with a comprehensive understanding of the algorithms and mathematical concepts that underlie modern graphical systems, while simultaneously equipping them with the tools necessary to produce complex projects with state-of-the-art technology.	Teaching graphics with the openGL shading language	NA:NA	2018
Joe Bergin	NA	Session details: Day one of the objects-first first course: what to do	NA	2018
Joe Bergin:Mike Clancy:Don Slater:Michael Goldweber:David B. Levine	What should you do on the first day of your objects-first CS1 course? If you have been struggling with beginning an objects first course this special session will give you hints about how to avoid overload and make a smooth and effective start. The presenters are skilled at introducing objects to novices in interesting ways that captures the interest of the students and readies them for programming. These are gentle approaches that present deep ideas to the inexperienced. How can a course be built around objects without information overload? This session will address the opening gambit in this interesting game.	Day one of the objects-first first course: what to do	NA:NA:NA:NA:NA	2018
Lili Hai	NA	Session details: Pedagogy	NA	2018
Tamara Denning:Michael Kelly:David Lindquist:Roshni Malani:William G. Griswold:Beth Simon	Peer review is widely recognized for advancing student learning, in particular for developing reflective processes like critical thinking. The classroom is ripe for peer review because the subject matter is fresh and in-depth interactivity is possible. Yet the limited time available in class conflicts with peer review's deliberative nature. We hypothesize that peer review -- at least the initial stages of it -- can be supported in the classroom with tools for facilitating the rapid identification of interesting issues for discussion. The potential benefits of such a tool include: furthering the student-focus of in-class active learning activities, further implanting critical analysis skills through frequent in-class use, supporting immediate feedback, and enabling comparison of student and instructor-modeled critical analysis.This paper explores tool support for in-class lightweight preliminary peer-review (LPPR): peer review that is instigated in the classroom, but does not necessarily end there. We proposed that students classify peer solutions in 4 dimensions: correctness, comprehension (e.g., "do I understand this solution"), worthiness for discussion, and similarity to the evaluator's own solution. We designed an LPPR extension to Ubiquitous Presenter, and then conducted an exploratory study in a mock classroom setting. We found that LPPR can quickly identify a subset of student solutions that warrant immediate discussion, and that modest amounts of reflection arise from the LPPR process.	Lightweight preliminary peer review: does in-class peer review make sense?	NA:NA:NA:NA:NA:NA	2018
Stuart Hansen:Erica Eddy	Attracting and retaining quality students is an ongoing concern in Computer Science. Retention can be enhanced by keeping students engaged in the learning process while preventing them from becoming overly frustrated. While engaging students during class is certainly important, most students spend a significant amount of time working on programming projects outside of class. The goal of this research was to collect and analyze some initial data on how engaging and frustrating our students find our programming projects. During the Spring 2006 semester we surveyed our students after each programming project. This paper presents some initial findings from the surveys and discusses strategies on how to improve our projects based on this feedback.	Engagement and frustration in programming projects	NA:NA	2018
Tzu-Yi Chen:Gary Lewandowski:Robert McCartney:Kate Sanders:Beth Simon	We examine students' commonsense understanding of computer science concepts before they receive any formal instruction in the field. For this study, we asked students on the first day of a CS1 class to describe in English how they would arrange a set of numbers in ascending, sorted order; we then repeated the experiment asking students to sort a list of dates (in mm/dd/yyyy format).We found that a majority of students described a coherent algorithm; some described versions of insertion or selection sort, but many gave unexpected algorithms. We also found significant differences between responses given for sorting numbers versus dates. Based on our analysis of the data we suggest that beginning-programming instructors more explicitly discuss data types, begin loop instruction with post-test loops, assist students in recognizing implicit conditional and iteration use in natural language solutions to probls, and recognize that novices and experts focus on different aspects of the probl in even basic probl solving tasks.	Commonsense computing: using student sorting abilities to improve instruction	NA:NA:NA:NA:NA	2018
Gayle Yaverbaum	NA	Session details: Outcomes-based computing accreditation criteria	NA	2018
Gayle Yaverbaum:Doris Lidtke:Han Reichgelt:Stu Zweben	NA	Outcomes-based computing accreditation: program assessment	NA:NA:NA:NA	2018
Edward Gehringer	NA	Session details: Embedded systems and architecture	NA	2018
Brian G. VanBuren:Muhammad Shaaban	This paper describes the MicroTiger software that combines a graphical microcode simulator with a reconfigurable data-path. The resulting implented simulator is able to fill the void in microprogramming tools since there are no graphical microcode simulators that allow such customization of the datapath. The customization of the datapath goes beyond allowing different files specifying the datapath, it allows the datapath to be created and modified using the graphical interface like a circuit editor. In the acadic setting, MicroTiger provides easier microcode testing on the instruction level for instructors and provides simulation debugging through code tracing and breakpoints for students.	MicroTiger: a graphical microcode simulator with a reconfigurable datapath	NA:NA	2018
J. Stanley Warford:Ryan Okelberry	This paper presents a software simulator for a central processing unit. The simulator features two modes of operation. In the first mode, students enter individual control signals for the multiplexers, function controls for the ALU, memory read/write controls, register addresses, and clock pulses for the registers required for a single CPU cycle via a graphical user interface. In the second mode, students write a control sequence in a text window for the cycles necessary to implement a single instruction set architecture (ISA) instruction. The simulator parses the sequence and allows students to single step through its execution showing the color-coded data flow through the CPU. The paper concludes with a description of the use of the software in the Computer Organization course and its availability for download on the Internet.	Pep8CPU: a programmable simulator for a central processing unit	NA:NA	2018
William Birmingham:Leah Acker	Software-defined radio (SDR) is a self-contained, embedded software system with hardware components and real-time constraints. SDR is the basis for many of today's wireless communications systems. Because SDR combines basic digital signal processing, circuitry, and software elements, it is the perfect project for multi-disciplinary, undergraduate teams. This paper explains both the SDR system created by computer science and engineering undergraduates at Grove City College and how SDR projects can help undergraduates acquire the skills to succeed on multidisciplinary teams.	Software-defined radio for undergraduate projects	NA:NA	2018
Mindy Hart	NA	Session details: K-12 computing	NA	2018
Barbara Ericson:Mark Guzdial:Maureen Biggers	The Institute for Computing Education (ICE) was created in the spring of 2004. ICE is a partnership between the Georgia Department of Education and the College of Computing at Georgia Tech. The goals for this partnership are to increase the number and quality of computer science teachers and increase the number, quality, and diversity of computer science students. One specific goal is to increase the number of students taking the CS-Advanced Placement (AP) course. In this paper we report on both the progress we have made towards these goals and the problems we have encountered. We hope that other states will create similar partnerships and leverage our experience.	Improving secondary CS education: progress and problems	NA:NA:NA	2018
Daniel Frost	We describe a module, or sequence of lessons, that has been successfully used to teach basic elements of computer science to fourth grade students. The module was designed to reflect a firm grounding in computer science, to be age-appropriate, to be easily installed in schools, and to support a range of teachers. Over 300 students in grades three through six have taken this module or a related module. The programming language used is a modern variant of Logo called VVLogo, which students access through a Java applet on a web page.	Fourth grade computer science	NA	2018
Joel C. Adams	Research indicates that (i) many women who take CS1 feel less experienced than (and therefore at a disadvantage to) their male counterparts at computer programming, and that (ii) by the time they reach high school, many young women view computing as "geeky" and "for nerds." This paper describes our Imaginary Worlds Camps -- a summer program in which we use Carnegie Mellon's Alice software to address these problems before students reach high school. The preliminary results are quite encouraging.	Alice, middle schoolers & the imaginary worlds camps	NA	2018
James Early	NA	Session details: Project management and software engineering	NA	2018
Robert Kessler:Nathan Dykman	Teaching software engineering is difficult because the true benefits of a disciplined software process and the production of significant artifacts are most meaningful when programming-in-the-large, with varying levels of team experience in the context of a professional organization. Using the same techniques when programming-in-the-small can often lead to the students feeling that it is better to not use any process because the effort and tedium of producing artifacts is so great compared with the relatively simple task of writing the code for the target solution. This paper describes our solution, a curriculum that exposes the students to both lightweight traditional and lightweight agile processes. We describe two offerings of the class and conclude from the positive student feedback that we have found the correct balance.	Integrating traditional and agile processes in the classroom	NA:NA	2018
Karen L. Reid:Gregory V. Wilson	DrProject is a web-based software project management portal that integrates revision control, issue tracking, mailing lists, a wiki, and other features. Unlike other such systems, DrProject is specifically tailored to the needs of undergraduate teaching and team programming assignments. We describe the pedagogical motivations for DrProject and our experiences with it to date.	DrProject: a software project management portal to meet educational needs	NA:NA	2018
Ursula Wolz:Sarah Monisha Pulimood	We describe how project management and team communication skills are taught and practiced in two experiences. Our CS III course provides a formal introduction and practice in homogenous small group settings. Our new multidisciplinary yearlong video game course provides extensive practice of these skills through the development of a single deliverable (a video game) produced by a large team (an entire class of approximately 20 students). This model can be extended to other institutions very easily.	An integrated approach to project management through classic CS III and video game development	NA:NA	2018
Hilary Holz	NA	Session details: Status report of the SIGCSE committee on teaching computer science research methods	NA	2018
Hilary Holz:Anne Applin:William Joel	NA	Status report of the SIGCSE committee on teaching computer science research methods	NA:NA:NA	2018
Andrew McGettrick	NA	Session details: The current crisis in computing: what are the real issues?	NA	2018
Lillian (Boots) Cassel:Andrew McGettrick:Mark Guzdial:Eric Roberts	NA	The current crisis in computing: what are the real issues?	NA:NA:NA:NA	2018
Sara Miner More	NA	Session details: New ways to teach CS1	NA	2018
Gloria Childress Townsend:Suzanne Menzel:Katie A. Siek	This paper includes several reasons for the underrepresentation of women in computing, and then describes two low-cost project instances that address the reasons for the decline in women's enrollment in computing classes. One project spans seven semesters from fall 2000 to spring 2006 at a small liberal arts school; the other, the spring 2006 semester at a large research institution. Concluding sections provide anecdotal and statistical evidence that the project is successful over two time periods within two diverse schools.	Leveling the CS1 playing field	NA:NA:NA	2018
Thomas P. Murtagh	We describe a new introductory course based on an unusual approach to the development of a breadth-first curriculum. The course focuses on exploring examples that illustrate a broad collection of the facets of computer science, but it draws all of these examples from a single subfield, computer networks. We demonstrate how this approach provides a more coherent educational experience for students while emphasizing the essentials that tie all of the fields of our discipline together.	Weaving CS into CS1: a doubly depth-first approach	NA	2018
Kristy Elizabeth Boyer:Rachael S. Dwight:Carolyn S. Miller:C. Dianne Raubenheimer:Matthias F. Stallmann:Mladen A. Vouk	Prompted by changes in the numbers and demographics of students enrolled and being retained in computer science, the Department of Computer Science at NC State University is revising its undergraduate curriculum to better meet the needs of its students, and increase student attraction and retention. One set of changes concerns introductory computer science courses (CS1). This paper reports on a study conducted to assess the impact of class size and active learning in our CS1 courses. We find that smaller classes with integrated laboratories improve both learning and retention, as well as satisfaction of the students. Among other benefits, we found retention rates in small classes to be about 20% better than large classes.	A case for smaller class size with integrated lab for introductory computer science	NA:NA:NA:NA:NA:NA	2018
Robert McCartney	NA	Session details: It seemed like a good idea at the time	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Titus Winters:Stephen Edwards:Briana B. Morrison:David R. Musicant:Ian Utting:Carol Zander	NA	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA:NA	2018
Brad Richards	NA	Session details: Bioinformatics	NA	2018
Russel Bruhn:Steven F. Jennings	Our multidisciplinary approach to a Bioinformatics Minor at the University of Arkansas at Little Rock (UALR) allows students from Information Science, Computer Science, and Biology programs to participate in the growing field of bioinformatics. Two separate tracks allow students to complent the skills that they learn in their majors with skills in either information science or the life sciences. This eighteen credit hour minor begins with all students enrolling in an Introduction to Bioinformatics course that is followed by eleven credit hours of complentary courses. Then, in a final, senior level, survey format Bioinformatics Theory and Applications course, they once again converge to apply their training to a sester-long, multidisciplinary team project. This minor allows students to choose a wide array of careers in the medical and health sciences fields and in the analysis of biological data. It is also an ideal program to prepare the students for graduate programs in bioinformatics.	A multidisciplinary bioinformatics minor	NA:NA	2018
Pamela Cutter	DNA analysis is a subject that is in the news almost every day, whether it be a new advance in medical research, a criminal trial, or some other application. BLAST (Basic Local Alignment Search Tool) is an important tool used by biologists worldwide to compare DNA and protein sequences and to infer functional and evolutionary relationships between them. This paper presents a project for CS2 based on BLAST. The primary goal for this project is to provide an interesting, real-world application that reinforces the data structures and algorithms presented in CS2. This project also demonstrates object-oriented design techniques, and introduces computer science students to the new field of bioinformatics.	Having a BLAST: a bioinformatics project in CS2	NA	2018
Jon Beck:Brent Buckner:Olga Nikolova	An interdisciplinary undergraduate research project in bioinformatics, jointly mentored by faculty in computer science and biology, has been developed and is being used to provide top-quality instruction to biology and computer science students. This paper explains the benefits of such a collaboration to computer science students and to the computer science discipline. Specific goals of the project include increased recruitment of students into computer science and increased retention within the discipline. The project is also intended to be particularly attractive to women students.	Using interdisciplinary bioinformatics undergraduate research to recruit and retain computer science students	NA:NA:NA	2018
Jaime Ni√±o	NA	Session details: Kinesthetic learning activities	NA	2018
Paolo A. G. Sivilotti:Scott M. Pike	Kinesthetic learning is a process in which students learn by actively carrying out physical activities rather than by passively listening to lectures. Pedagogical research indicates that kinesthetic learning is a fundamental, powerful, and ubiquitous learning style. To date, efforts to incorporate this learning style within the computer science curriculum have focussed on introductory courses. Material in upper-level courses, however, can also benefit from a similar approach. In particular, courses on distributed computing, by the very nature of the material they cover, are uniquely suited to exploiting this learning technique. We have developed and piloted a collection of kinesthetic activities for a senior undergraduate or graduate-level course on distributed systems. We give detailed descriptions of these exercises and discuss factors that contribute to their success.	The suitability of kinesthetic learning activities for teaching distributed algorithms	NA:NA	2018
Darren Lim	This paper describes the use of a board game as a device for introducing graph theory to computer science students. By experiencing a hands-on demonstration of graphs, students can better understand the basic principles of graph theory and can better design algorithms and programs which manipulate graph data. The programming assignment tied to the game forces the students to come to grips with the algorithmic aspects of graph theory, including the proper choice of data structures and the implementation of graph algorithms.	Taking students out for a ride: using a board game to teach graph theory	NA	2018
Janet Davis:Samuel A. Rebelsky	We consider in some depth a common exercise for the first session of a typical introductory computer science course: The task of writing instructions to make a peanut butter and jelly sandwich. The exercise, although simple, can engage students and motivate a variety of topics important throughout the semester. We discuss reasons to use such an exercise on the first day of class, present lessons students can learn from the exercise, and give practical advice for the instructor who wishes to make the most of this exercise.	Food-first computer science: starting the first course right with PB&J	NA:NA	2018
Anita Verno	NA	Session details: Developing resources to support a national computer science curriculum for K-12	NA	2018
Anita Verno:Steve Cooper:Thomas J. Cortina:Barb Ericson:Bill Madden	This session will continue efforts by the ACM and Computer Science Teachers Association (CSTA) to create a comprehensive body of resources to support the implementation of a national K-12 computer science curriculum. The ACM K-12 Computer Science Curriculum Committee, with input from the Computer Science educational community, published a Model Curriculum [1] in 2003. The Model suggests a four-level curriculum. Level-I topics, primarily for the K-8 years, closely follow the well-defined ISTE Standards [2]. Level-II topics are suggested for all students in grades 9 or 10 and are comprised of introductory computer science content. Level-III topics focus on analysis and design with emphasis on the scientific and engineering aspects of computer science. The Level III course is intended for students who may be interested in continuing their education in computer science at the college level. AP Computer Science and special topics courses comprise Level-4. This special session will focus on the learning objectives and activities for Level III of the K-12 Computer Science Model curriculum. Attendees will be invited to provide critical feedback that will help move the curriculum project forward.	Developing resources to support a national computer science curriculum for K-12	NA:NA:NA:NA:NA	2018
Mohamad Neilforoshan	NA	Session details: Emerging instructional technologies	NA	2018
Jorge Barbosa:Rodrigo Hahn:D√©bora N. F. Barbosa:Cl√°udio F. R. Geyer	The increasing use of mobile devices and the dissemination of wireless networks have stimulated mobile and ubiquitous computing research. In this context, education is being considered one of the main application areas. This paper proposes the use of mobile and ubiquitous computing to support and improve learning in a new kind of academic structure called Undergraduate Course of Reference (nicknamed GRefe). The GRefe was proposed in Unisinos, a university located in south of Brazil. Currently, there are four GRefes. These courses are organized in Learning Programs and Learning Projects. They use a practical and multidisciplinary approach to stimulate the learning. We proposed the use of mobile and ubiquitous computing technology to articulate and improve the academic activities of a specific GRefe called Computer Engineering. We believe that GRefe organization simplified and stimulated the use of these technologies in a learning environment.	Mobile and ubiquitous computing in an innovative undergraduate course	NA:NA:NA:NA	2018
David Lindquist:Tamara Denning:Michael Kelly:Roshni Malani:William G. Griswold:Beth Simon	Research has shown that educational technology can broaden and enhance the use of active learning in large classrooms. An educational technology platform often relies on students to bring laptops or specialized wireless devices like clickers to interact through the system. Mobile phones are an attractive alternative, as most students already possess them, they have more capabilities than dedicated clickers, and yet are small enough to minimize interference with note taking on a classroom desk.This paper presents the design and use of a mobile phone extension to Ubiquitous Presenter, which allows students to submit solutions to active learning exercises in the form of text or photo messages. In an exploratory study, students found that text messaging worked well for exercises with multiple choice or short answers. Entering symbols common to computer science was difficult. Many problems were more suitable to photo messaging of a handwritten answer, although image quality must be managed. The phone's small size left space for the use of a notebook. The students had concerns about the message charges that would accrue in use. In conclusion, we offer recommendations to instructors and system designers interested in leveraging mobile phones to increase communication in the classroom.	Exploring the potential of mobile phones for active learning in the classroom	NA:NA:NA:NA:NA:NA	2018
David J. Malan	In recent months have teachers become publishers of content and students subscribers thereof by way of podcasts, feeds of audio, video, and other content that can be downloaded to clients like iTunes and devices like iPods. In the fall of 2005, we ourselves began to podcast Harvard Extension School's Computer Science E-1 in both audio and video formats, the first course within Harvard University to do so. Our goals were to provide students with more portable access to educational content and to involve them in technology itself.To evaluate this experiment, we have analyzed logs and surveys of students. We find that our students valued E-1's podcast more as a vehicle for review (45%) than as an alternative to attendance (18%). We also find that most students (71%) tended to listen to or watch lectures on their computers, with far fewer relying upon audio-only (19%) or video (10%) iPods. We argue, meanwhile, that podcasting, despite its widespread popularity, is but a marginal improvement on trends long in progress. It is this technology's reach that we claim is significant, not the technology itself. Logs suggest that E-1's own podcast, available not only to students but to the public at large, has acquired (as of September 2006) between 6,000 and 10,000 subscribers from over 50 countries. We argue, then, that podcasting offers to extend universities' educational reach more than it offers to improve education itself.	Podcasting computer science E-1	NA	2018
James Caristi	NA	Session details: Alice frenzy: an interactive group activity	NA	2018
James Caristi:Stephen Cooper:Judy Mullins	Participants will be given 15 minutes of instruction on programming in Alice. Then, working in small groups, participants will attempt to develop a program in 30 minutes from one of several given starting scenarios.	Alice Frenzy: an interactive group activity	NA:NA:NA	2018
Bettina Bair	NA	Session details: Gender issues	NA	2018
James P. Cohoon	We report on a pilot section of an introductory computing course offered at a top tier university through its engineering school. Although targeted for students with no prior programming experience, its goals were same as the goals of the other sections. The course enrolled 43 students. They were 49% female, 23% black, and 12% Hispanic. The demographics are different from the typical 1st year class at the school, which is 26% female, 6% black, and 3% Hispanic. Two important pedagogies differentiated the pilot section from other sections: computer availability at all class meetings and the methodology for selecting motivating examples. A priori only one student in the section intended a computing major, but upon completion the students chose a computing major at a higher rate than the rates for other sections: 19% versus 13%. More striking is that 33% of the pilot section women and 27% of its minority students chose a computing major. All students completed the course and no student left the school. These outcomes compare favorably to a school course withdrawal rate of 12% and a school attrition rate of 10%, a female attrition rate of 12%, and a minority rate attrition of 25%.	An introductory course format for promoting diversity and retention	NA	2018
Jon Beck	It has been demonstrated that an undergraduate women's computer science support group can provide significant benefits to female CS students. It can be difficult for students to establish such a group without institutional support. We successfully established a thriving, self-sustaining support group with a modest initial outlay of time and money. This program serves as a model and template to help other small to mid-sized undergraduate departments accomplish the same.	Forming a women's computer science support group	NA	2018
Mark E. Hoffman:David R. Vance	We administered a computer literacy survey of our incoming, first-year students for the past three years. Our purpose was not to measure application skill levels, but to understand students' perception of their own skills, to identify from whom they learned how to perform a set of technology tasks, and to understand how access to different Internet connection types affects perception and the sources of student technology learning. Over the years, fale, first-year students have increased to parity in self-reported skill levels over the set of technology tasks, and report significantly higher skill levels on communications-oriented tasks. Males report significantly higher skill levels on technology-oriented tasks. Our results suggest that adoption of DSL Internet connections by fales is contributing to the improvent.	Gender difference trends in computer literacy of first-year students	NA:NA	2018
Elinor M. Madigan:Marianne Goodfellow:Jeffrey A. Stone	Recent studies have found that gender gaps in information and communication technology (ICT) skills exist, despite changing gender role expectations for men and women. In this paper we report on survey results from an ongoing longitudinal study of ICT skills which found that--in general-- first-year students were confident in their ICT skills. However, comparison of student skills in four major technology domain areas indicates that there are differences between the male and fale first-year students in levels of confidence. We also report on a second, follow-up study designed to examine the actual ICT skills of the first-year students. This investigation indicates that both male and fale students have greater confidence than actual skill. The study also found that both male and fale students have approximately the same level of actual ICT skills. These findings suggest that fale students, although possessing ICT skills similar to their male counterparts, do not perceive thselves as competent users of technology. These differences in ICT skill confidence have implications for fluency with technology in acadia as well as the recruitment and retention of women in the Computer and Information Sciences.	Gender, perceptions, and reality: technological literacy among first-year students	NA:NA:NA	2018
Blair Taylor	NA	Session details: Curriculum issues	NA	2018
Timothy Davis:Robert Geist:Sarah Matzko:James Westall	The œÑŒµŒßŒΩŒ∑ project, which provides an unusual alternative to the standard design of the computing curriculum for the bachelor's degree in computer science, is now entering full-scale implementation at Clemson University. The approach relies extensively on problem-based instruction, computer graphics, and the notion of cognitive apprenticeship. The novelty arises from the magnitude and origin of the problems to be integrated into the curriculum and the breadth of impact across the curriculum. The first three courses in the new curriculum are now being taught. The design of each course is described, and preliminary assessments from earlier trial sessions of the first two courses are offered.	œÑŒµŒßŒΩŒ∑: trial phase for the new curriculum	NA:NA:NA:NA	2018
Merrick Furst:Charles Isbell:Mark Guzdial	In his book The World is Flat, Thomas Friedman convincingly explains the challenges of a global marketplace [4]. One implication is that software development can be out-sourced, as can any narrow, skills-based occupation; however, as Friedman also points out, leadership, innovation, and insight are always in demand. We have recently created and are implementing threadstm, a new structuring principle for computing curricula. Threads provides one clear path for computer scientists seeking to reinvent and re-invigorate computer science degree programs. Threads form a cohesive, coordinated set of contexts for understanding computing. The union of all threads covers the breadth "computer science." The union of any two threads is sufficient to cover a computer science degree. In this paper, we describe Threads, our process, the impact so far, and some of our future plans. We close with recommendations for other schools, especially schools with smaller programs.	Threads‚Ñ¢: how to restructure a computer science curriculum for a flat world	NA:NA:NA	2018
Mingrui Zhang:Eugene Lundak:Chi-Cheng Lin:Tim Gegg-Harrison:Joan Francioni	The Computer Science Department at Winona State University revised its curriculum to include an interdisciplinary approach adapted to the study of computer science. The new curriculum consists of a traditional Computer Science option and an Applied Computer Science option consisting of four separate tracks, namely: bioinformatics, computer information systems, geographic information technology, and human computer interaction. This paper describes the design strategy and implementation plan as well as the content of our multi-track Applied Computer Science curriculum.	Interdisciplinary application tracks in an undergraduate computer science curriculum	NA:NA:NA:NA:NA	2018
Dana Wortman:Penny Rheingans	Student retention is an important topic in Computer Science departments across the country. Keeping strong students and helping struggling students perform better are two fundamental components of improving retention. Isolating the cause(s) of students leaving the major is an important area of research. We endeavor to explore this problem using a visualization tool to probe student data within the beginning course sequence in Computer Science. We would like to see what patterns exist amongst students, focusing on success, failure, and repetition patterns throughout the first three courses. Identifying these patterns can help isolate some of the causes of decreased retention within the department, allowing us to address individual projects, courses, or exams that may be causing students exceptional difficulty or loss of interest. Due to the large amount of data and the variety of students' paths through their courses, it is essential that a visualization be developed to represent the data. Using graph layouts, parallel coordinates, color-mapping, and interactive selection, users can explore and query the data. Users can discover patterns within the data by selecting subgroups of students and examining the event sequences to find patterns of success, failure, and repetition amongst those students. Departments can use this information to isolate profiles of students for retention, remediation, and recruitment efforts as well as identify areas of the curriculum or instruction that can be improved.	Visualizing trends in student performance across computer science courses	NA:NA	2018
Ariel Ortiz	NA	Session details: Programming languages and compilers	NA	2018
Martin Ruckert	This paper presents an unusual programming language, textttklx, illustrating the type of compiler construction projects the author uses successfully to accompany a mostly traditional lecture on compilers.The target processor of textttklx is the PostScript interpreter, and the paper argues that this is a very good choice. A PostScript interpreter simulates an elegant stack machine with built-in graphic capabilities. It is the perfect target for languages like textttklx, making them easy to implement and fun to use. The exact definition of the source language is an integral part of the student project.The use of non standard languages and a non standard target fosters student creativity in language design and implementation. It invites "out of the box" thinking, and prepares the knowledge transfer from the rich tradition of compiler construction to new and forthcoming areas of computer science.	Teaching compiler construction and language design: making the case for unusual compiler projects with postscript as the target language	NA	2018
Li Xu	The recent report by the ACM Job Migration Task Force points to the immediate need to teach "programming-in-the-large", the skills to work with and develop large and complex production-grade software and systems, so young computing professionals can stay competitive in the face of IT globalization and offshoring of software [4, 13]. However, current computer science curricula are inadequate to prepare college graduates to meet the reality of computing. Most course projects fall into the "programming-in-the-small" mode, in which students implement small, isolated projects to explore the course subject matter and with little emphasis on how the smaller pieces can be integrated to build sophisticated larger scale systems.This paper presents a modern IDE-based approach to address this inadequacy. We develop RobotStudio --- an extensible framework for building IDEs targeting a simple yet versatile educational robot platform. Student projects are implemented as plugin modules of RobotStudio and, when put together, they form a comprehensive IDE for programming the robotic environment.This paper describes the architecture of the RobotStudio framework, its extension mechanisms, and the teaching practice of using RobotStudio in an introductory compiler construction class to illustrate "programming-in-the-large" principles.	RobotStudio: a modern IDE-based approach to reality computing	NA	2018
Christopher W. Brown:Eric A. Hardisty	This paper presents RegeXeX (Regular expression exercises), an interactive system for teaching students to write regular expressions. The system poses problems (prose descriptions of languages), students enter solutions (regular expressions defining these languages), and the system provides feedback. What is novel in this system is the type of feedback: students are not merely told that a submitted regular expression is wrong, they are given examples of strings that the expression either matches and shouldn't or does not match and should, and asked to try again. Additionally, student responses need only be equivalent to the solution, not identical. Results of classroom experience with this system are also reported, and demonstrate its effectiveness in teaching students to write regular expressions with little or no instructor interaction.RegeXeX is a freely available, portable system, written in C++ and using the Qt library for its GUI. It is distributed with several exercise sets, but is designed so instructors can easily write their own. The system logs student work and offers facilities for submitting log-files to instructors as well, allowing for automatic grading, or in-depth analysis of student performance and evolution of responses throughout the exercise set.	RegeXeX: an interactive system providing regular expression exercises	NA:NA	2018
Scott Sigman	Engaging and maintaining student engagement with the content of a course in formal language theory and the theory of computation is notoriously difficult. A major factor is student's perception of the relevance of the required mathematical material to computer science as they have studied the discipline. Usually, the mathematical material discourages students and for many it forms an insurmountable barrier. This paper describes the construction of a course using the discovery learning technique known as the Moore Method that directly addresses student engagement with this material. The results of the delivery of this course were that students remained engaged with the course throughout the semester and enthusiastically received the pedagogical approach employed. While the course described was delivered to a small class in a liberal arts college, it may be adapted to larger class sizes and taught in any computer science program.	Engaging students in formal language theory and theory of computation	NA	2018
Paul Piwowarski	NA	Session details: Software engineering	NA	2018
Michela Pedroni:Till Bay:Manuel Oriol:Andreas Pedroni	One of the main shortcomings of programming courses is the lack of practice with real-world systs. As a result, students feel unprepared for industry jobs. In parallel, open source software is accepting contributions even from inexperienced programmers and achieves software that competes both in quality and functionality with industrial systs. This article describes: first, a setting in which students were required to contribute to existing open source software; second, the evaluation of this experience using a motivation measuring technique; and third, an analysis of the efficiency and commitment of students over the time. The study shows that students are at first afraid of failing the assignment, but end up having the impression of a greater achievent. It ses also that students are inclined to keep working on the project to which they contributed after the end of the course.	Open source projects in programming courses	NA:NA:NA:NA	2018
Lucas Layman:Laurie Williams:Kelli Slaten	In addition to "learning by doing," programming assignments and projects are also the mechanism by which students learn about the utility of computer science -- or not. Recent research indicates that the current generation of students is in search of a career with meaning, and women and minorities have long been known to desire careers that help society. In this paper, we provide student testimonials on the importance and benefits of practical and socially-relevant assignments. We then examined approximately 200 first year (CS1) and software engineering assignments at top computer science institutions. Only 34% of the CS1 projects had a practical or socially-relevant context, 41% had no context at all, and 15% were games. For software engineering projects, 62% were practical or socially-relevant, but still 16% had no practical context. We recommend that educators, through their assignments, place increased emphasis on demonstrating that computer science can be used to aid society and/or produce products of practical value to society.	Note to self: make assignments meaningful	NA:NA:NA	2018
Barry L. Kurtz:James B. Fenwick, Jr.:Christopher C. Ellsworth:Xiaohong Yuan:Adam Steele:Xiaoping Jia	We have been funded by the National Science Foundation [6] to investigate the feasibility of distributing large software engineering projects across multiple universities at remote locations. This paper reports on the use of web services to make such inter-university cooperation feasible. The TRavel Itinerary Planner (TRIP), a year long project, was implemented at three universities: Appalachian State University, North Carolina A&T, and DePaul University. After discussing our methodology based on web services we describe the inter-university cooperation that was achieved on this project. We then describe problems encountered and their solutions and conclude with a brief description of a different project that we will develop during the 2006-2007 academic year.	Inter-University software engineering using web services	NA:NA:NA:NA:NA:NA	2018
J. D. Chase:Ed Oakes:Sean Ramsey	It is well understood and has been well documented that there is much to gain by using live projects, those that serve a real client with a real problem to solve, in the computer science classroom. However the use of live projects has always come with a variety of obstacles including providing support for the project once it is complete and limiting the scope of a project to the context of a single term. This paper describes the development of the Small Project Support Center at Radford University that has been designed to eliminate these obstacles.	Using live projects without pain: the development of the small project support center at Radford University	NA:NA:NA	2018
Linda B. Sherrell	NA	Session details: NSF-DGE GK-12 teaching: fellowships changing student perceptions about computer science	NA	2018
Linda B. Sherrell:Chang Liu:William M. Pottenger:Paul Gross	NA	NSF-DGE GK-12 teaching fellowships: changing student perceptions about computer science	NA:NA:NA:NA	2018
John Dooley	NA	Session details: Security and networks	NA	2018
Susan J. Lincke	Security courses can focus on encryption/authentication algorithm design, attack/defend methodologies, or security techniques. Our goal is to train computer personnel in how to secure networks. What better way than to work with real equipment and real organizations? This course includes a community-based project which involves students auditing part of a syst for local organizations. Auditing is common in industry, and requires students to be well-versed in security techniques, the auditing process, and the application of results. This paper outlines our experiences in bringing community-based audit projects into the classroom.	Network security auditing as a community-based learning project	NA	2018
Ken Wong:Tilman Wolf:Sergey Gorinsky:Jonathan Turner	The Open Network Laboratory (ONL) is an Internet-accessible virtual laboratory facility that can deliver a high quality laboratory experience in advanced networking [3,7]. Our experience with ONL indicates that it has potential to improve student understanding of fundamental networking concepts and increase enthusiasm for experimentation with complex technology. Furthermore, these benefits can be delivered with less effort from the instructor than using a traditional approach of socket programming and ns-2 simulation exercises. The system is built around a set of high-performance, extendible routers which connect personal computers acting as end systems. Users configure their virtual network through the Remote Laboratory Interface (RLI), an intuitive graphical interface. The RLI's real-time charts and user data facility make it easy to directly view the effect of system parameters on traffic behavior. These features can enhance learning by providing users with multiple representations of network phenomena. We describe how the ONL facilities have improved our ability to meet instructional objectives and discuss some approaches to improving the laboratory experience.	Teaching experiences with a virtual network laboratory	NA:NA:NA:NA	2018
Wenliang Du:Zhouxuan Teng:Ronghua Wang	To provide students with hands-on exercises in computer security education, we have developed a laboratory environment (SEED) for computer security education. It is based on VMware, Minix, and linux, all of which are free for educational uses. Based on this environment, we have developed ten labs, covering a wide range of security principles. We have used these labs in our three courses in the last four years. This paper presents our SEED lab environment, SEED labs, and our evaluation results.	SEED: a suite of instructional laboratories for computer SEcurity EDucation	NA:NA:NA	2018
Lisa Lancor:Robert Workman	This paper provides a description of how the topic of Google hacking was incorporated into a graduate course on web security which was offered in the Fall of 2005. It begins by providing an overview of Google hacking and describes what it is, how it is used, and most importantly how to defend against it. The paper then describes a series of exercises that students must complete providing them with hands-on Google hacking strategies, techniques and countermeasures.	Using google hacking to enhance defense strategies	NA:NA	2018
Michael Rogers	NA	Session details: Computer games in the classroom, or, how to get perfect attendance, even at 8 am	NA	2018
Bary Burd:John Goulden:Brian Ladd:Michael Rogers:Kris Stewart	In this special session, we will compare and contrast several game engines that have been used in game development courses, and describe our experiences teaching such courses.	Computer games in the classroom, or, how to get perfect attendance, even at 8 AM	NA:NA:NA:NA:NA	2018
Nick Parlante	NA	Session details: Nifty assignments	NA	2018
Nick Parlante:John Cigas:Angela B. Shiflet:Raja Sooriamurthi:Mike Clancy:Bob Noonan:David Reed	NA	Nifty assignments	NA:NA:NA:NA:NA:NA:NA	2018
Alison Young	NA	Session details: Computer science education research	NA	2018
Linxiao Ma:John Ferguson:Marc Roper:Murray Wood	This paper describes an investigation into the viability of mental models used by novice programmers at the end of a first year Java programming course. The qualitative findings identify the range of mental models of value and reference assignment held by the participants. The quantitative analysis reveals that approximately one third of students held non-viable mental models of value assignment and only 17% of students held a viable mental model of reference assignment. Further, in terms of a comparison between the participants' mental models and their performance in in-course assessments and final examination, it was found that students with viable mental models performed significantly better than those with non-viable models. These findings are used to propose a more "constructivist" approach to teaching programming based on the integration of "cognitive conflict" and program visualisation.	Investigating the viability of mental models held by novice programmers	NA:NA:NA:NA	2018
Jonas Boustedt:Anna Eckerdal:Robert McCartney:Jan Erik Mostr√∂m:Mark Ratcliffe:Kate Sanders:Carol Zander	Yes, and Yes.We are currently undertaking an pirical investigation of "Threshold Concepts" in Computer Science, with input from both instructors and students. We have found good pirical evidence that at least two concepts---Object-oriented programming and pointers--are Threshold Concepts, and that there are potentially many more others.In this paper, we present results gathered using various experimental techniques, and discuss how Threshold Concepts can affect the learning process.	Threshold concepts in computer science: do they exist and are they useful?	NA:NA:NA:NA:NA:NA:NA	2018
Michael R. Wick	In this paper, we describe an experiment designed to test the effect of a novel first day lecture on student attitudes toward programming. The lecture does not require any knowledge of a specific language or a specific paradigm. Student evaluation surveys indicate that the lecture is effective at helping students to see programming as more than the simple creation of an artifact but rather as a systematic problem-solving process.	Bridging the conceptual gap: assessing the impact on student attitudes toward programming	NA	2018
Josh Tenenberg:Sally Fincher	The Disciplinary Commons project had two primary objectives: to document and share knowledge about teaching and student learning in Computer Science (CS) classrooms, and to establish practices for the scholarship of teaching by making it public, peer-reviewed, and amenable for future use and development by other educators. The mechanism for achieving these goals was through a series of monthly meetings involving Computer Science faculty, one cohort of ten CS faculty in the US and one cohort of twenty in the UK. Meetings were focused on the teaching and learning within participants' classrooms, with each person documenting their teaching in a course portfolio. Surveyed on completing the project, participants discussed the value of the Disciplinary Commons in providing the time and structure to systematically reflect upon their practice, to exchange concrete ideas for teaching their courses with other CS educators in the discipline, to learn skills that apply directly to course and program evaluation, and to meet colleagues teaching CS at other institutions.	Opening the door of the computer science classroom: the disciplinary commons	NA:NA	2018
Lillian (Boots) Cassell	NA	Session details: The computing ontology project - the computing education application	NA	2018
Lillian N. Cassel:Robert H. Sloan:Gordon Davies:Heikki Topi:Andrew McGettrick	NA	The computing ontology project: the computing education application	NA:NA:NA:NA:NA	2018
Wei Kian Chen	NA	Session details: Courseware	NA	2018
Eric Roberts	Since the introduction of Java in 1995, educators have recognized the potential of Java applets as an educational resource. Sadly, the continuing evolution of Java has made it harder to use applets, largely because it is so difficult to keep those applets compatible with the many different versions of the Java runtime environment supported by existing browsers. Over the past two years, the ACM Java Task Force (JTF) has developed an effective strategy that makes it possible to write applets using up-to-date versions of Java that will nonetheless run on browsers that support only the JDK 1.1 environment. This paper describes the acm11.jar library, which uses this strategy to achieve the desired backward compatibility. It also describes a more general solution strategy for which we have a prototype, although we are unable to release the prototype until we get permission from Sun Microsystems. The acm11.jar library can be used with any Java applet and does not depend on adopting the JTF library packages. That library therefore represents a general resource for teachers and students who want to write Java code that runs in web environments.	Resurrecting the applet paradigm	NA	2018
Thomas P. Murtagh	Squint is a Java library developed to support the use of event-driven programming and network applications in programming examples for a CS1 curriculum. We present the design of the library, emphasizing techniques employed to minimize the effort students expend learning features specific to the library. We also compare Squint to an established library that supports event-driven programming in CS1, emphasizing ways in which the two libraries support similar pedagogical approaches.	Squint: barely visible library support for CS1	NA	2018
Michael Woodley:Samuel N. Kamin	Even after taking numerous programming courses, many students have poor programming skills. This is a problem not only in their post-graduation employment, but even in the higher-level Computer Science courses, where large programs are routinely assigned. Yet, teaching programming skills is expensive; like teaching writing, it can only be accomplished by a repeated cycle of writing, getting informed feedback, and rewriting. In this paper, we describe a computer science course designed around the concept of a studio course like those used in art and architecture. Its key elements are practice, public presentation, and review by peers in a small group. We discuss our experience in teaching the course for two years. We believe this course can be replicated and taught, at reasonable cost, even in large CS departments.	Programming studio: a course for improving programming skills in undergraduates	NA:NA	2018
Steven Robbins	This paper describes JES, a Java Execution Simulator that allows users to explore how a Java program executes. This interactive simulator displays a representation of a Java program and animates the running of the program. Instructors can use JES to demonstrate how data is moved when variables are assigned, when parameters are passed, and when values are returned by a method. JES is useful for comparing how primitive and object values are manipulated. The simulator also demonstrates scope rules, object creation, inheritance and polymorphism. While the simulator only supports variables of type double and object and does not support conditionals or looping, it allows users to write general Java programs that might be used as examples in the first weeks of a CS 1 course. JES also has support for arrays of doubles and objects. The simulator is written in Java and can be run as an application or an applet. Support for the simulator includes a simple mechanism for quickly running the simulator on a program developed with a standard Java development system.	A Java execution simulator	NA	2018
Clare Tang	NA	Session details: Computing and society	NA	2018
Brian J. Rosmaita	Service learning can play an important role in computer science education: it can address declining enrollments and increase current student satisfaction. Although computer science poses some serious problems for effectively implementing service learning, these can be surmounted by reconfiguring a course to include a substantial treatment of accessibility. I describe such a course, explain how it overcomes the problems, and discuss the results of the course from a student perspective.	Making service learning accessible to computer scientists	NA	2018
J. McGrath Cohoon	This investigation of gendered experiences in computer science and computer engineering (CSE) doctoral programs uses survey data from a nationwide stratified random sample. Analyses of data from 41 departments show that women CSE doctoral students have less confidence than men students that they can achieve their educational goals. Moreover, women's confidence is significantly affected by their comfort asking questions in class, which is in turn affected by faculty beliefs about the relationship between diversity and student quality. Program rank also has a negative effect on confidence, but affects men and women similarly.	Gendered experiences of computing graduate programs	NA	2018
Heidi J. C. Ellis:Ralph A. Morelli:Trishan R. de Lanerolle:Jonathan Damon:Jonathan Raye	In this paper, we present an example humanitarian open-source software project that has been used since January 2006 at a small liberal-arts college as an experiment in undergraduate CS education. Sahana (Sinhalese for relief) is a free and open-source disaster management system developed in Sri Lanka by a group of IT professionals following the 2004 Asian tsunami. It is a web-based tool that addresses the IT coordination problems that typically occur in trying to recover from a large-scale disaster. We are currently exploring the wider use of Sahana as a sustainable model and platform for teaching about open-source software development while at the same time allowing CS students and educators to make a socially useful contribution of their time, effort, and expertise. This paper presents our experiences with Sahana including the benefits for both academia and industry.	Can humanitarian open-source software development draw new students to CS?	NA:NA:NA:NA:NA	2018
Tarsem S. Purewal, Jr.:Chris Bennett:Frederick Maier	We propose the integration of service-learning into the early undergraduate computer science curriculum by way of a course on computing, ethics and society. We believe that such a course will fill a common gap in computer science and can be used to draw smart, motivated students to the discipline by embracing its social relevance. Additionally, we outline a particular service-learning project that can be undertaken by students in the course--initiating a community computer recycling program. We describe the successful implementation of such a recycling program and describe some logistical issues that may arise in organizing such a program in a service-learning course. We believe that a student-implemented community outreach project such as this can alter the public's perception of computer science and will assist in reversing the trend of declining undergraduate enrollment.	Embracing the social relevance: computing, ethics and the community	NA:NA:NA	2018
Soe Than	NA	Session details: Systems and databases	NA	2018
Edward Sciore	In this paper we examine the probl of how to give hands-on assignments in a database syst internals course. We argue that current approaches are inadequate, either because they are not sufficiently comprehensive or because they require using software that has a steep learning curve. We then describe SimpleDB, which is software written expressly for such a course. SimpleDB is a database syst in the spirit of Minibase. Unlike Minibase, however, it supports multiple users and transactions via JDBC, and its code is easy to read and modify. We then describe a course that we teach using SimpleDB, and discuss the educational benefits resulting from it.	SimpleDB: a simple java-based multiuser syst for teaching database internals	NA	2018
Haifeng Liu:Xianglan Chen:Yuchang Gong	In this paper, we present BabyOS, a compact educational kernel designed to facilitate the preliminary learning of operating systs. It is an in-mory syst running on real hardware, with a multi-phase project covering concurrency, scheduling, inter-process communication, mory management, and networking. Compared with other educational operating systs, BabyOS is a nontraditional project frame; an important distinction lies in that it reflects some design ideas in bedded operating systs. In this way, BabyOS provides a complentary approach to educational operating syst projects.	BabyOS: a fresh start	NA:NA:NA	2018
Chuck Pheatt	This paper introduces a client-server suite, which provides a readily configurable and simple to use network distributed computing framework. The suite will allow users to easily operate a distributed computing environment and solve real probls with a hybrid peer-to-peer (P2P) grid. This tool is most useful in a pedagogical setting such as an introductory computing course or as an adjunct to a computationally intensive course that addresses parallel computing issues.	An easy to use distributed computing framework	NA	2018
Charles Border	We have combined four industry standard technologies to create a flexible, modular and easily extensible virtual server environment for both distance and local students to use in our networking, security, and system administration classes. By combining the remote access technologies of Remote Desktop, the multi-user capabilities of Microsoft Terminal Services, the ability to share sessions of Remote Assistance, and the ability to manipulate virtual machines and virtual networks using VMWare Workstation, the Remote Laboratory Emulation System (RLES) allows students to conduct labs very similar to our local labs from either inside or outside our lab facility. While other people have been experimenting with various combinations of these technologies we have aggressively developed and implemented this system and feel that it has become a very important tool in our ability to cost-effectively provide computing infrastructure for local and distant students, and student and faculty research.	The development and deployment of a multi-user, remote access virtualization system for networking, security, and system administration classes	NA	2018
Ingrid Russell:Susan Haller	NA	Session details: Keynote address	NA:NA	2018
Randy Pausch	I have spent the last fifteen years of my life leading an incredible team. Our quest (which we did not even realize in the beginning) was to revolutionize the way computer programming is taught. Current versions of the Alice system (Alice v2.0, and Caitlin Kelleher's "Storytelling Alice") have been very effective in the college classroom and in tests with middle school girls. The use of drag-and-drop authoring to create 3D movies has proved to be a powerful motivator for students of all ages and both genders. In 2008, we will release Alice v3.0, which provides "real Java" programming and the characters from EA's "The Sims," the most popular PC video game in history. Damn shame I won't be there to see it. As you probably know, I'm dying of pancreatic cancer, as became widely known in my "Last Lecture." Like Moses, I get to see the promised land, but not set foot in it. But the vision is clear. Long before I became ill, Dennis Cosgrove took over the responsibility for the design of Alice v3.0, and he's doing a whale of a job. Steve Cooper (of St. Joseph's University), Wanda Dann, and Don Slater are handling the pedagogic materials for college and high school, and Caitlin Kelleher (now junior faculty at Washington University in St. Louis) is heading the efforts regarding middle school girls. This talk will address the history, philosophy, and future of the Alice project, and will include a behind-the-scenes look at a pre-release version of Alice v3.0. I will give this address in person if I am still alive and able, or by a combination of pre-taped video and help from the Alice team. I cannot imagine a better professional legacy than what the Alice team is currently building.	Alice: a dying man's passion	NA	2018
Vicki L. Almstrum:Bill Aspray:Mary Anne Egan:John Impagliazzo	NA	Perspectives on history in computing and education	NA:NA:NA:NA	2018
Michal Armoni:Noa Lewenstein:Mordechai Ben-Ari	Nondeterminism is a fundamental concept of computer science. However, since it is a very abstract concept, teaching and learning nondeterminism is difficult. In this paper we focus on one aspect of the teaching and learning processes of nondeterminism: the extent to which undergraduate students of computer science perceive that nondeterministic automata exhibit nondeterministic behavior, that is, they are unpredictable and inconsistent. First we show that students tend to think of nondeterministic automata as consistent machines; then we show that an explicit intervention can significantly affect students' mental models of nondeterministic automata in the direction of improving their perception of nondeterministic behavior.	Teaching students to think nondeterministically	NA:NA:NA	2018
Irene Polycarpou:Ana Pasztor:Malek Adjouadi	In this paper, we present an approach to teaching induction that we call the "conceptual route" of teaching induction. Proofs by induction are central to the study of computer science and students come across them in many courses of their curricula. It is documented in the literature that in general students have difficulties with proofs by induction. Even though through the years some solutions were proposed to improve the situation, recent studies show that students are still having difficulties. Currently, proofs by induction take up too little of the computer science curriculum, and they are taught as a step-by-step procedure to be followed, which is not sufficient for students to gain conceptual understanding. In contrast, our approach aims at students' conceptual understanding by shifting their focus from the syntactic form of proofs by induction to their substance. The theoretical underpinning of our approach is an operationalization of the Induction Principle.	A conceptual approach to teaching induction for computer science	NA:NA:NA	2018
Joan M. Lucas:Jonathan Jarvis	This paper describes our experience extending the educational software program JFLAP. JFLAP enables students to design and simulate automata such as Finite State Machines, push-down automata, and Turing Machines. It is a valuable aid in any Automata Theory course. We modified JFLAP so that students could write Java programs that alter the actual automaton itself. This utility greatly increases the students' ability to grasp such fundamental topics as the Church-Turing thesis and the theory of undecidability.	Incorporating transformations into jflap for enhanced understanding of automata	NA:NA	2018
Brian Hanks:Carol Wellington:Tom Reichlmayr:Cyril Coupal	NA	Integrating agility in the cs curriculum: practices through values	NA:NA:NA:NA	2018
Stuart Reges	This paper describes some unusual patterns that emerged from a statistical analysis of the 1988 Advanced Placement Exam in Computer Science. Most multiple-choice questions on the exam had few significant correlations with other parts of the exam. But a small set of five questions had a nontrivial correlation with many parts of the test. One question in particular demonstrated such correlations. It asked about the effect of the assignment statement "b := (b = false)" for a boolean variable b. One interpretation of this data is that these questions are testing general programming aptitude. The paper presents the analysis along with a discussion of the possible implications.	The mystery of "b := (b = false)"	NA	2018
David Ginat	We all are aware of the relevance of examining a task from diverse angles. We also are aware of the potential relevance of learning from one's mistakes. Yet computer science (CS) textbooks and teaching materials fall short in embedding these two notions. In this paper, we present an approach of elaborating divergent thinking in algorithm design, while capitalizing on erroneous solutions. Using a collected set of non-routine algorithmic tasks, we developed and applied a scheme of class activities, in which initial faulty solutions (due to novice tendencies) are carefully examined, and their falsifying inputs and characteristics are used for creative reasoning that yields fruitful outcomes. We present and illustrate our activities, refer to their cognitive aspects, and describe our experience with applying them in (an Introduction-to-Algorithms) class.	Learning from wrong and creative algorithm design	NA	2018
David Gries	There has been debate about whether OO should, or even can, be taught first in CS1 (using Java). We claim that OO can be taught successfully, provided certain principles are followed. These principles lead to the requirement of an appropriate model for classes and objects, which we provide.	A principled approach to teaching OO first	NA	2018
Greg Wilson:Christine Alvarado:Jennifer Campbell:Rubin Landau:Robert Sedgewick	NA	CS-1 for scientists	NA:NA:NA:NA:NA	2018
Marc L. Corliss:E. Christopher Lewis	This paper introduces the Bantam Java compiler project, a new language and compiler designed specifically for the classroom Bantam Java, the source programming language, is a small subset of the Java language, which is a commonly-used language in introductory programming courses. Because Bantam Java is similar to Java, it leverages the student's existing intuition and the student can automatically apply what they learn in the course directly to Java. The Bantam Java project is also customizable (it supports several tools and targets), which gives instructors flexibility in designing course assignments. Finally, the Bantam Java compiler project includes a free, comprehensive, student manual which can be used in conjunction with any compiler textbook.	Bantam: a customizable, java-based, classroom compiler	NA:NA	2018
Li Xu	Language engineering - the theory and practice of building language processors and compilers, has long been recognized as important subject in Computer Science curricula. However, due to lack of suitable target systems, educators face significant challenges to teach language engineering classes effectively. Leveraging the emerging inexpensive robot devices, this paper presents a new approach of using robots as system context to teach language engineering topics. We designed the Chirp-Scribbler Language, which targets the popular Scribbler robot; combined together, they provide an engaging and feature-rich platform to teach a wide range of topics in language engineering. This paper describes the Chirp-Scribbler Language, its integration with the target robot, and the teaching practice of using them to teach language translation basics in an undergraduate programming course.	Language engineering in the context of a popular, inexpensive robot platform	NA	2018
Ariel Ortiz	In this paper, the S-expression Interpreter Framework (SIF) is presented as a tool for teaching language design and implementation. The SIF is based on the interpreter design pattern and is written in the Ruby programming language. Its core is quite small, but it can be easily extended by adding primitive procedures and special forms. The SIF can be used to demonstrate advanced language concepts (variable scopes, continuations, etc.) as well as different programming styles (functional, imperative, and object oriented).	Language design and implementation using ruby and the interpreter pattern	NA	2018
Natalie Linnell:Richard Anderson:Jane Prey	In this paper we discuss cultural issues encountered while offering an Algorithms course from a US university at a Chinese university using Tutored Video Instruction (TVI). TVI is a distance learning methodology where lectures are recorded at one site and then shown to a group of students at a remote site by Teaching Assistants (TAs) who stop the video periodically for questions and discussion. In conducting this cross-cultural class, we were interested in determining if we could overcome the issues of using English language materials for Chinese students, achieve a sense of local ownership of the course, and create an interactive classroom environment. We were generally successful in achieving these goals by providing supporting materials and working closely with the Teaching Assistants who served as facilitators.	Cross-cultural issues in a tutored video instruction course	NA:NA:NA	2018
Maureen Doyle:Kevin G. Kirby:Gary Newell	In this paper, we describe projects that engage Hispanic middle-school age students with computing, and cast these projects within the ECC ("Engagement, Capacity, Continuity") framework. Our projects were undertaken in the Midwestern United States, where recent heavy immigration from Latin America has caused rapid demographic shifts. We have conducted computing workshops that are cognizant of the cultural milieu of recent immigrants, in that they are family-based, are offered at familiar sites in the community, and give participants a chance to be constructors of technology rather than mere "end-users." We present these efforts as forces that generate a flow that carries immigrant youths up to the point of beginning an undergraduate major in computing.	Engaging constructions: family-based computing experiences for immigrant middle school students	NA:NA:NA	2018
Tony Clear:Diana Kassabova	Recent calls for a new discipline of 'web science' have proposed extending computer science to incorporate the social dimensions of computing. In this paper we outline a Masters course in Collaborative Computing, which employs a combination of collaborative pedagogy, collaborative technologies, and a corpus of research data from Global Virtual Teams to blend the technology and the social dimensions within a research linked course context. We review the effectiveness of this model of learning and the conduct of the course over the five years since its inception.	A course in collaborative computing: collaborative learning and research with a global perspective	NA:NA	2018
Jon Beck	In a junior- or senior-level undergraduate software engineering course that uses real-world projects for real clients, different parts of a project are inherently unequal in difficulty, time requirements, and desirability. A perennial problem is assigning portions of the project to student teams equitably. Fair division is a highly effective strategy for making an equitable, proportional, and envy-free assignment of tasks and in serving as the basis for fair grading of assignments which vary in difficulty, desirability, and time requirements.	Fair division as a means of apportioning software engineering class projects	NA	2018
Tuukka Ahoniemi:Essi Lahtinen:Tommi Reinikainen	It is important for learning that students receive enough of educational feedback of their work. To get the students to be seriously disposed to the feedback it has to be personal, objective and consistent. In large classes ensuring such feedback can be difficult. Grading rubrics are a solution to the objectivity and consistency. ALOHA is an online grading tool based on rubrics which all the graders have to use. Particularly, ALOHA provides features that make the grading process more convenient for the graders and the teacher. By facilitating the graders work ALOHA allows them to focus more on feedback writing. To test the effectiveness of ALOHA in objectivity and consistency we did a comparative statistical analysis on the distribution of grades. The results supported the assumptions showing improvement resulting in similar distribution of grades amongst different graders who used the tool.	Improving pedagogical feedback and objective grading	NA:NA:NA	2018
Xiang Fu:Boris Peltsverger:Kai Qian:Lixin Tao:Jigang Liu	Providing consistent, instant, and detailed feedback to students has been a great challenge in teaching Web based computing. We present the prototype of an automated grading system called ProtoAPOGEE for enriching students' learning experience and elevating faculty productivity. Unlike other automated graders used in introductory programming classes, ProtoAPOGEE emphasizes the examination of quality attributes of student project submissions, in addition to the basic functionality requirements. The tool is able to generate step by step play-back guidance for failed test cases, hence providing informative feedback to help students make reflective and iterative improvements in learning.	APOGEE: automated project grading and instant feedback system for web based computing	NA:NA:NA:NA:NA	2018
Gaetano Borriello:Carl Hartung:Bruce Hemingway:Karl Koscher:Brian Mayton	Embedded systems are increasingly becoming connected through wireless networking. These devices now form the basis of many of today's consumer products including cell phones and video game controllers. In the "Software for Embedded Systems" class in the Department of Computer Science & Engineering at the University of Washington, we used the design of a multi-player video game as motivation for the principal concepts in wireless embedded systems. Each student in the class designed an accelerometer-based game controller and then, the class as a whole, developed a multi-player video game that allowed 28 players (the number of students in the course) to play simultaneously. In this paper, we first describe the context of the course and its goals followed by the hardware/software platform we used to realize the game controller. We then detail the pedagogical approach we used to collectively design the video game (loosely based on soccer) and conclude with the lessons learned from this group design experience and how we would enhance the project and course in the future.	Multi-player soccer and wireless embedded systems	NA:NA:NA:NA:NA	2018
James F. Bowring	The annual ACM International Collegiate Programming Contest produces a competitive paradigm that is at odds with the pedagogical goals of modern computer science and software engineering degree programs. This paradigm stresses the fast completion of a programming task and evaluates the results solely with black-box testing specified by the judges. In contrast, the pedagogical goals of contemporary college degree programs in computing emphasize the quality of processes inherent in software development and implementation. In 2007, the College of Charleston student chapter of the ACM hosted its annual high school programming competition by turning the conventional programming paradigm on its head to focus on quality-of-process rather than time-to-complete. The judging criteria included both technical and artistic merit. The implementation of the competition emphasized success by giving students working skeleton solution programs. This paper presents the motivation for the new paradigm, the details of its implementation for the 2007 competition, and the details of the new techniques for judging technical and artistic merit.	A new paradigm for programming competitions	NA	2018
Iretta B. Kearse:Charles R. Hardnett	Generating interest in specialized areas of Computer Science (CS) is one of the goals of the department of Computer and Information Science at Spelman College as with most departments. Achieving this goal in a new, exciting, and innovative manner provided the inspiration to establish the Spelman College Computer Science Olympiad (SC CS Olympiad). The SC CS Olympiad is patterned after the Olympics athletic event. Students participate in the Olympiad as a part of a team as with the Olympics. In addition, there are several events for competition as there are in the Olympics. The events are designed to expose students to the interesting breadth of CS over several days. In this paper, the events are in the following categories: Cryptography, Robotics, Website Design, Hardware and Software Integration, and Programming. Teams use their CS knowledge and problem-solving skills to complete hands-on exercises in each area. Each teams receives points based on the quality of their results from the exercise. In this paper, we present the implementation, results, and future directions of the Spelman College Computer Science Olympiad.	Computer science olympiad: exploring computer science through competition	NA:NA	2018
Scott A. Turner:Ricardo Quintana-Castillo:Manuel A. P√©rez-Qui√±ones:Stephen H. Edwards	In this paper we present our experience using code reviews in a CS2 course. In particular, we highlight a series of misunderstandings of object-oriented (OO) concepts we observed as a by-product of the code review exercise. In our activity, we asked students to review code, rate it using a rubric, and to justify their explanation. The students were asked to review two solutions to a project from a previous year. Through examples of their explanations, we found that students had a number of basic misunderstandings of object-oriented principles. In this paper, we present our observations of the misunderstandings, and present some general observations of how code reviews can be used as an assessment tool in CS2.	Misunderstandings about object-oriented design: experiences using code reviews	NA:NA:NA:NA	2018
Ronald J. Leach:Legand L. Burge:Harry N. Keeling	A recent paper by David Lechner stated that for many long-lived systems, it is more efficient to reengineer portions of systems than to continually repair them. That paper made an implicit assumption about the ability of software engineers to determine precisely which software should be reengineered. We report the results of a study that addresses the readiness of graduates, who will soon be beginning software engineers, to make such an assessment, based on comprehension of reusable vs. reengineered software. We address this comprehension in the context of software engineering education.	Can students reengineer?	NA:NA:NA	2018
Yanqing WANG:LI Yijun:Michael Collins:Peijie LIU	The software industry is urging on universities and colleges to cultivate software engineers who can write high quality programs. Peer code review (PCR) is accepted as an ideal way to maximize the learning outcome of students in writing quality code. Using this learning process, students improve their skills while scientific and efficient management removes the extra burden from instructors such as checking programs written by every student. In this paper, the previous PCR process was improved and the definitions of the relevant roles and documents were refined as well. After implementing this process in two academic years, some problems were found. By means of summarizing the email submissions by the students and also interviewing a few students, the behavior of all participants was preliminarily analyzed. With regards to the further quality assurance and high efficiency, a web-based management information system with a built-in blind review mechanism was discussed for solving the problems with process control, and also a game theory model was proposed for addressing the ethical issues in the whole PCR process.	Process improvement of peer code review and behavior analysis of its participants	NA:NA:NA:NA	2018
Nick Parlante	NA	Nifty assignments	NA	2018
Robert Schnabel:Duncan Buell:Joanna Goode:J. Strother Moore:Chris Stephenson	NA	An open dialogue concerning the state of education policy in computer science	NA:NA:NA:NA:NA	2018
Aaron Kimball:Sierra Michels-Slettvet:Christophe Bisciglia	In this paper we present the design of a modern course in cluster computing and large-scale data processing. The defining differences between this and previously published designs are its focus on processing very large data sets and its use of Hadoop, an open source Java-based implementation of MapReduce and the Google File System as the platform for programming exercises. Hadoop proved to be a key element for successfully implementing structured lab activities and independent design projects. Through this course, offered at the University of Washington in 2007, we imparted new skills on our students, improving their ability to design systems capable of solving web-scale problems.	Cluster computing for web-scale data processing	NA:NA:NA	2018
Joel C. Adams:Tim H. Brom	A Beowulf cluster is a distributed memory multiprocessor built from commodity off-the-shelf PC hardware, an inexpensive network for inter-process communication, and open-source software. Today's multi-core CPUs make it possible to build a Beowulf cluster that is powerful, small, and inexpensive. This paper describes Microwulf, a Beowulf cluster that cost just $2470 to build, but provides 26.25 Gflops of measured performance. (For comparison: a 1996 Cray T3D MC256-8/464 provided 25.3 Gflops.) This makes Microwulf the first Beowulf with a price/performance ratio below $100/Gflop (for double-precision operations). The system measures just 11" x 12" x 17" (27.9 cm x 30.5 cm x 43.2 cm), runs at room temperature, and plugs into a standard wall outlet. These desirable characteristics combine to make Microwulf an attractive design for most computer science departments and/or individuals.	Microwulf: a beowulf cluster for every desk	NA:NA	2018
Barry Wilkinson:Clayton Ferner	Early undergraduate Grid computing courses generally took a bottom-up approach to Grid computing education starting with network protocols, client-server concepts, creating Web and Grid services, and then progressing through the underlying Grid computing middleware, security mechanisms and job submission all using a Linux command-line interface. We describe a new approach to teaching Grid computing beginning with a production-style Grid portal, registration process, and job submission, and then leading into infrastructure details. We incorporate seven assignments, several of which require students to install Grid computing software on their own computer or lab computers rather than using centralized servers. Students complete a "capstone" mini-project. Typical projects included creating a JSR 168 portlet user interface for an application. We describe our experiences using this new course structure.	Towards a top-down approach to teaching an undergraduate grid computing course	NA:NA	2018
Alessio Gaspar:Sarah Langevin:William Armitage:R. Sekar:T. Daniels	Over the past years, many problems related to the system administration of laboratories for undergraduate system-oriented courses have found elegant solutions in the deployment of virtualization suites. This technological advance enabled these courses to switch from a mostly descriptive content to learning activities which engage students in hands-on, authentic, problem-based learning. Since this type of activity requires students to be administrators of their own virtual machines (VM) or even virtual networks, the experience gained is intrinsically authentic. The potential impact on student learning, as compared to simulation or lecture only based setups is worth investigating for laboratories in operating systems, networking, computer security, system administration, etc. We propose to review the increasingly important role that virtualization is playing in computing education from 2 perspectives; (1) Classrooms' system administration and technological advances which support the development of new pedagogies (2) Pedagogical advances which instructors can now implement thanks to these technologies and their impact on students learning from either quantitative or qualitative perspectives The presenters will share their experience leading the Xen Worlds, V-NetLab and SOFTICE projects.	The role of virtualization in computing education	NA:NA:NA:NA:NA	2018
Christopher C. D. Head:Steven A. Wolfman	Most CS1 assignments are "known answer" assignments, requiring students to implement already-solved problems with no user but their grader and themselves. In this paper, we present Poogle: a freely available framework for designing unknown-answer assignments. Poogle assignments are open-ended, graphical, and multi-user. Poogle makes it easy for students to share their creations with their users: fellow students and the general public. We present two freely available CS1 assignments based on Poogle and discuss outcomes from use of one of them in a CS1 course.	Poogle and the unknown-answer assignment: open-ended, sharable cs1 assignments	NA:NA	2018
Daniel C. Cliburn:Susan Miller	In this paper, we describe a study designed to examine the types of projects college students prefer in an introductory programming course. For three assignments in a course, students were given a choice among three project types: a game, a "choose your own adventure" story, and a more traditional project (such as a problem from the text book). During the semester, 35 of 49 projects submitted by students were the game option (71.4%), with only two projects submitted that were stories. A statistical analysis revealed that student choices on assignments did not appear to be related to their overall performance in the course. On an end of term survey, students commented that they often chose projects that had all requirements clearly explained, and avoided assignments that were open-ended in nature.	Games, stories, or something more traditional: the types of assignments college students prefer	NA:NA	2018
T. M. Rao:Sandeep Mitra	We propose the use of a new design-first approach called Problem Stereotypes and Solution Frameworks, for teaching CS1 and CS2. A problem stereotype is a category of problems that can be solved using similar techniques. A solution framework is a typical solution to a problem, parts of which can be reused to solve other problems of this stereotype. Students are introduced to a stereotype through a selection of related problems, and common features among these are identified. Homework problems are selected from the same stereotype, with students expected to follow the "recipe" provided by the given examples to generate their own solutions. Using this approach reduces the stress level for beginner students, and prevents them falling prey to the "CS is HARD" myth. We present the results of our experience with this approach in two introductory classes and an upper-division Artificial Intelligence (AI) class at SUNY Brockport.	An early software engineering approach to teaching cs1, cs2 and ai	NA:NA	2018
Roxanne L. Canosa:Joan M. Lucas	Mock trials are an effective and fun way of eliciting thoughtful dialogue from students, and encouraging them to produce incisive analyses of current ethical dilemmas related to computers and society. This paper describes our experience using mock trials in two computer ethics courses. Each trial was centered on a specific controversial and ethically or legally ambiguous topic related to current computer usage in society. Students participated in a series of mock trials during the term, alternating their role in each trial between jury, proponent, and opponent. Class participation was nearly 100% for every trial, with many students electing to define their own sub-role within their assigned major role. The logistics of the trials were initially difficult to administer and monitor; however, they quickly became manageable as we gained more experience with the opportunities and pitfalls associated with the mock-trial system, and as students volunteered suggestions for improvements.	Mock trials and role-playing in computer ethics courses	NA:NA	2018
Carol Spradling:Leen-Kiat Soh:Charles Ansorge	A national web-based survey using SurveyMonkey.com was administered to 700 undergraduate computer science programs in the United States as part of a stratified random sample of 797 undergraduate computer science programs. The 251 program responses (36% response rate) regarding social and professional issues (computer ethics) are presented. This article describes the demographics of the respondents, presents results concerning whether programs teach social and professional issues, who teaches, the role of training in these programs, the decision making process as it relates to computer ethics and why some programs are not teaching computer ethics. Additionally, we provide suggestions for computer science programs regarding ethics training and decision-making and we share reasons why schools are not teaching computer ethics.	Ethics training and decision-making: do computer science programs need help?	NA:NA:NA	2018
Joseph D. Oldham	In Spring Semester 2007 our small liberal arts college offered a new course, Computer Science 150, Cyberporn: A Seminar in Computing and Society. I proposed and taught the course as a one-hour seminar style course with no prerequisite. This paper describes the course, including motivation and student response.	Experience offering a course centered on cyberporn	NA	2018
Laurie Murphy:Gary Lewandowski:Ren√©e McCauley:Beth Simon:Lynda Thomas:Carol Zander	A qualitative analysis of debugging strategies of novice Java programmers is presented. The study involved 21 CS2 students from seven universities in the U.S. and U.K. Subjects "warmed up" by coding a solution to a typical introductory problem. This was followed by an exercise debugging a syntactically correct version with logic errors. Many novices found and fixed bugs using strategies such as tracing, commenting out code, diagnostic print statements and methodical testing. Some competently used online resources and debuggers. Students also used pattern matching to detect errors in code that "just didn't look right". However, some used few strategies, applied them ineffectively, or engaged in other unproductive behaviors. This led to poor performance, frustration for some, and occasionally the introduction of new bugs. Pedagogical implications and suggestions for future research are discussed.	Debugging: the good, the bad, and the quirky -- a qualitative analysis of novices' strategies	NA:NA:NA:NA:NA:NA	2018
Marie-H√©l√®ne Nienaltowski:Michela Pedroni:Bertrand Meyer	Novices find it difficult to understand and use compiler error messages. It is useful to refine this observation and study the effect of different message styles on how well and quickly students identify errors in programs. For example, does an increased level of detail simplify the understanding of errors and their correction? We analyzed messages produced by a number of compilers for five programming languages, and grouped them into three style categories from their level of detail and presentation format, and correlated the level of experience and error type with performance and speed of response. The study involved two groups of students taking an introductory programming course at two different institutions; they used messages in these three styles to debug erroneous code. The results indicate that more detailed messages do not necessarily simplify the understanding of errors but that it matters more where information is placed and how it is structured.	Compiler error messages: what can help novices?	NA:NA:NA	2018
Christian Murphy:Eunhee Kim:Gail Kaiser:Adam Cannon	The errors that Java programmers are likely to encounter can roughly be categorized into three groups: compile-time (semantic and syntactic), logical, and runtime (exceptions). While much work has focused on the first two, there are very few tools that exist for interpreting the sometimes cryptic messages that result from runtime errors. Novice programmers in particular have difficulty dealing with uncaught exceptions in their code and the resulting stack traces, which are by no means easy to understand. We present Backstop, a tool for debugging runtime errors in Java applications. This tool provides more user-friendly error messages when an uncaught exception occurs, and also provides debugging support by allowing users to watch the execution of the program and the changes to the values of variables. We also present the results of two preliminary studies conducted on introductory-level programmers using the two different features of the tool.	Backstop: a tool for debugging runtime errors	NA:NA:NA:NA	2018
Owen Astrachan:Peter Denning	NA	Innovating our self image	NA:NA	2018
Dennis P. Groth:Helen H. Hu:Betty Lauer:Hwajung Lee	Summer camps offer a ripe opportunity for increasing computer science diversity. This panel provides several examples of summer camps that specifically recruit from traditionally underrepresented demographics. The panelists run camps at a community college, a private liberal-arts college, and public universities. The camps are residential and day camps, coed and all-female camps, ranging from three-days to two-weeks long, with campers from 10-years-olds to high school seniors. In addition to describing their camps, the panelists will provide information on securing funding, recruiting campers from underrepresented populations, measuring impact, and lessons learned along the way. Demonstrations of what campers accomplished will also be shown.	Improving computer science diversity through summer camps	NA:NA:NA:NA	2018
Barry Lawson:Lewis Barnett	This paper describes a proof of concept for introducing iPods and iPodLinux into a one-semester introductory undergraduate operating systems course. iPodLinux is a version of the Linux operating system modified to run on iPods. We added a project to our course in which the students modified the iPodLinux kernel, and we supplemented lectures by discussing specifics of the Linux implementation as they relate to general operating systems concepts. We feel the course was much improved by these additions, with no substantive omission of regular material. Student response was very enthusiastic, and we feel the new material enhanced their course experience by providing a component that was empowering and helped to further improve their knowledge and skills.	Using iPodLinux in an introductory OS course	NA:NA	2018
John L. Donaldson	In this paper the author describes a two-part programming assignment that has been used in an undergraduate operating systems course. The assignment is to write a user-level thread library, similar to the POSIX pthreads library, for a Unix or linux system.	Implementation of threads as an operating systems project	NA	2018
Dennis Brylow	This paper describes Marquette University's efforts to build an experimental embedded systems laboratory for hands-on projects in an operating systems course. Our prototype laboratory is now serving as the basis for a coherent sequence of class projects threaded throughout courses in hardware systems, operating systems, networking, and embedded systems. We describe the major components of our Embedded XINU laboratory environment, the operating systems course, and related improvements in other core courses of our curriculum.	An experimental laboratory environment for teaching embedded operating systems	NA	2018
Stephen Cooper:Timothy Fossum:Harriet Taylor	NA	Exploring NSF funding opportunities	NA:NA:NA	2018
Marissa Mayer	This talk will cover the philosophies of innovation and design at Google, complete with examples of how these philosophies have affected and produced various Google services. Other topics to be covered include: how Google approaches building products with simplicity, its pragmatic and experimental approach to launching products, and a discussion of the academic computer science skills that large, distributed, web-based systems like Google require.	Innovation, design, and simplicity at google	NA	2018
Grant Braught:L. Martin Eby:Tim Wahls	Previous studies have reported significant educational benefits from the use of pair-programming, in which two students program together at the same computer. Here, we report the results of a controlled study designed to measure the effects of pair-programming on the development of individual programming ability. Our findings indicate significant improvements in individual programming skill for students with lower SAT scores. Additionally, we found that all students are more likely to complete the course successfully when using pair-programming.	The effects of pair-programming on individual programming skill	NA:NA:NA	2018
Leland L. Beck:Alexander W. Chizhik	An experiment was conducted to study the effectiveness of the cooperative learning approach to teaching CS1. The cooperative learning exercises, which used specific roles to focus students' attention on key concepts, were designed so they could be used in a variety of educational settings. Experimental results show that the benefits of cooperative learning clearly outweighed any possible losses due to reduced lecture time. These benefits were enjoyed by both male and female students, and by students from a variety of majors. Majority and minority students performed at approximately the same overall level when using the cooperative learning approach. There are indications that the educational benefits continue when students who had a cooperative learning experience in CS1 go on to CS2.	An experimental study of cooperative learning in cs1	NA:NA	2018
Sarah Monisha Pulimood:Ursula Wolz	Supporting a workforce that can create, not simply consume, computing technology requires a shift in pedagogy toward problem solving in a gender neutral, culturally and ethnically diverse community. It requires an authentic learning environment in which students solve real problems as a collaborative community with their peers from other disciplines. We report on three pedagogical approaches, namely student selected projects in a CS course, a multidisciplinary project-based course, and courses that partner across disciplines that provide on-demand content.	Problem solving in community: a necessary shift in cs pedagogy	NA:NA	2018
Josh Tenenberg:Sally Fincher:John Impagliazzo:Daniel Joyce	This panel is directed to members of the SIGCSE community who would like to learn more about the places to publish in computing education and how to get published there. This panel brings together conference, journal, and book-series editors to share their insights as "gatekeepers" of their respective publication venues.	Publishing in computing education	NA:NA:NA:NA	2018
Andrew McGettrick:Eric Roberts:Daniel D. Garcia:Chris Stevenson	NA	Rediscovering the passion, beauty, joy and awe: making computing fun again	NA:NA:NA:NA	2018
Susan Haller:Brian Ladd:Scott Leutenegger:John Nordlinger:Jody Paul:Henry Walker:Carol Zander	In this special session we present arguments for and against a game-centric computing curriculum. To highlight the issues and ensure equal time for arguments on either side, our session is staged as a debate with three speakers on each side. Our audience is educators and educational researchers interested in the role of game development in the CS curriculum.	Games: good/evil	NA:NA:NA:NA:NA:NA:NA	2018
Ray Bareiss:Martin Griss	Carnegie Mellon's West Coast Campus offers an MS in Software Engineering, with technical and development management tracks, targeted at working software professionals in Silicon Valley. We believe the program to be unique in that it is entirely team-based and project-centered. Students learn by doing as they are coached just in time by faculty in the context of authentic projects, and they are evaluated based on what they produce. Student satisfaction is high: 92% believe that the program has given them a competitive advantage with respect to their professional peers, and their promotion and salary histories bear out this belief.	A story-centered, learn-by-doing approach to software engineering education	NA:NA	2018
Andrew Begel:Beth Simon	How do new college graduates experience their first software development jobs? In what ways are they prepared by their educational experiences, and in what ways do they struggle to be productive in their new positions? We report on a "fly-on-the-wall" observational study of eight recent college graduates in their first six months of a software development position at Microsoft Corporation. After a total of 85 hours of on-the-job observation, we report on the common abilities evidenced by new software developers including how to program, how to write design specifications, and evidence of persistence strategies for problem-solving. We also classify some of the common ways new software developers were observed getting stuck: communication, collaboration, technical, cognition, and orientation. We report on some common misconceptions of new developers which often frustrate them and hinder them in their jobs, and conclude with recommendations to align Computer Science curricula with the observed needs of new professional developers.	Struggles of new college graduates in their first software development job	NA:NA	2018
Matthew C. Jadud:Jon Simpson:Christian L. Jacobsen	Pipeline, Delta, and Black Hole are three simple patterns used in concurrent software design. We recently presented these and other patterns for parallelism at a nine-hour workshop for professional embedded systems developers. By grounding these patterns in the context of robotic control on the LEGO Mindstorms, we provided an engaging and enjoyable educational experience for our "students," and reaffirmed that small, powerful languages have a place in education for beginners and experts alike.	Patterns for programming in parallel, pedagogically	NA:NA:NA	2018
Mark A. Holliday:J. Traynham Houston:E. Matthew Jones	Traditional coverage of network programming techniques in a computer networking course addresses sockets, remote procedure call, and object-oriented remote procedure call. We propose two innovations to that coverage. The first is to emphasize the historical development of those techniques as a sequence with each technique evolving from the previous one. The second innovation is to extend the historical development and the techniques to the important current technique of web services.	From sockets and RMI to web services	NA:NA:NA	2018
Vasil Y. Hnatyshin:Andrea F. Lobo	The national importance of creating "content reflecting cutting edge developments in STEM fields" has been recognized the National Science Foundation. The National Research Council has also noted that creating engaging laboratory and classroom experiences is a challenge to effective undergraduate education in STEM disciplines. In this paper we present our endeavors to address these issues in the field of computer networks. We discuss our experiences with novel laboratory and classroom projects using OPNET and Wireshark software products in undergraduate networking courses. These laboratories help undergraduate students understand fundamental networking concepts through modeling and simulation of computing systems. We have found that their use enhances student learning and interest in the subject of computer networks.	Undergraduate data communications and networking projects using opnet and wireshark software	NA:NA	2018
W. David Laverell:Zongming Fei:James N. Griffioen	Emulabs, network testbeds on which experiments can be carried out through a web interface, are widely recognized as useful research environments. We believe that Emulabs are also excellent platforms for teaching courses in operating systems and networking. Moreover, equipment costs have fallen, and Emulab software has evolved, to the point where any school could conceivably afford their own. This raises the obvious question: "Should institutions build and operate their own Emulab?". To get a handle on this question, we describe our experiences building and operating Edulabs--Emulabs specifically designed for education--at Calvin College and the University of Kentucky. We argue that with the right technical support, owning and operating one's own Emulab is a worthwhile endeavor that has many benefits. We acknowledge, however, that in the absence of good technical support, deploying one's own Emulab can be a difficult enterprise. We also describe how we enhanced Emulab to improve its utility in an educational setting.	Isn't it time you had an emulab?	NA:NA:NA	2018
Michela Pedroni:Manuel Oriol:Bertrand Meyer:Lukas Angerer	Formally defining the knowledge units taught in a course helps instructors ensure a sound coverage of topics and provides an objective basis for comparing the content of two courses. The main issue is to list and define the course concepts, down to basic knowledge units. Ontology learning techniques can help partially automate the process by extracting information from existing materials such as slides and textbooks. The TrucStudio course planning tool, discussed in this article, provides such support and relies on Text2Onto to extract concepts from course material. We conducted experiments on two different programming courses to assess the quality of the results.	Automatic extraction of notions from course material	NA:NA:NA:NA	2018
Ken Goldman:Paul Gross:Cinda Heeren:Geoffrey Herman:Lisa Kaczmarczyk:Michael C. Loui:Craig Zilles	A Delphi process is a structured multi-step process that uses a group of experts to achieve a consensus opinion. We present the results of three Delphi processes to identify topics that are important and difficult in each of three introductory computing subjects: discrete math, programming fundamentals, and logic design. The topic rankings can be used to guide both the coverage of standardized tests of student learning (i.e., concept inventories) and can be used by instructors to identify what topics merit emphasis.	Identifying important and difficult concepts in introductory computing courses using a delphi process	NA:NA:NA:NA:NA:NA:NA	2018
Christopher W. Starr:Bill Manaris:RoxAnn H. Stalvey	Traditionally, Bloom's Taxonomy has been used for creating exams and other student assessment instruments. In this paper, we advocate its use for specifying learning outcomes in computer science prior to assessment. We have found, over a period of three years, that this facilitates programmatic assessment and related accreditation activities; it benefits instructors selecting pedagogical tools and assignments; and it enhances communication among faculty engaged in curricular development. We describe Bloom's Taxonomy, illustrate a simple process for applying it in computer science (and other disciplines), and present a case study of how it may be applied in a CS1 course. We believe this process has considerably strengthened our department's assessment program and its ability to maintain its ABET accreditation.	Bloom's taxonomy revisited: specifying assessable learning objectives in computer science	NA:NA:NA	2018
Zachary Dodds:Ran Libeskind-Hadas:Christine Alvarado:Geoff Kuenning	This paper presents a thorough evaluation of CS for Scientists, a CS 1 course designed to provide future scientists with an overview of the discipline. The course takes a breadth-first approach that leverages its students' interest and experience in science, mathematics, and engineering. In contrast to many other styles of CS 1, this course does not presume that its students will study more computer science, but it does seek to prepare them should they choose to. We summarize the past year's worth of assessments of student learning, retention, and affect -- with particular attention paid to women's voices. Where possible, we contrast these student measures with those from a traditional, imperative-first CS1 that this new course replaced. The data thus far suggest that CS for Scientists significantly improves students' understanding of CS, its applications, and practice.	Evaluating a breadth-first cs 1 for scientists	NA:NA:NA:NA	2018
Robert H. Sloan:Patrick Troy	There are often problems when students enter a course with widely different experience levels with key course topics. If the material is covered too slowly, those with greater experience get bored and lose interest. If the material is covered too quickly, those with less experience get lost and feel incompetent. This problem with incoming students of our Computer Science Major led us to create CS 0.5: an introductory Computer Science course to target those CS majors who have little or no background with programming. Our goal is to provide these students with an engaging curriculum and prepare them to keep pace in future courses with those students who enter with a stronger background. Following the lead of Mark Guzdial's work on using media computation for non-majors at Georgia Tech, we use media computation as the tool to provide this engaging curriculum. We report here on our experience to date using the CS 0.5 approach with a media computation course.	CS 0.5: a better approach to introductory computer science for majors	NA:NA	2018
Wei Jin	In this paper, we describe a scaffolding technique - pre-programming-analysis guided programming (PAGP) - developed to help students grasp basic programming concepts. Two different ways to implement the PAGP process in a classroom were developed and then compared: one for students to fill out an analysis form, and the other for students to interact with online cognitive tutors. Our results show that the PAGP process helps students learn better and faster, especially with the assistance of the online tutors.	Pre-programming analysis tutors help students learn basic programming concepts	NA	2018
Orit Hazzan:Judith Gal-Ezer:Lenore Blum	This paper presents a model program for high school computer science education. It is based on an analysis of the structure of the Israeli high school computer science curriculum considered to be one of the leading curricula worldwide. The model consists of four key elements as well as interconnections between these elements. It is proposed that such a model be considered and/or adapted when a country wishes to implement a nation-wide program for high school computer science education.	A model for high school computer science education: the four key elements that make it!	NA:NA:NA	2018
Mindy Hart:James P. Early:Dennis Brylow	This paper describes a continuing series of summer workshops hosted by Purdue University entitled "Linking Mathematics and Computer Science." Each is designed to inform and inspire high school teachers of mathematics with an interest in computer science. Originally conceived as an extension of our existing K-12 outreach, our workshop aims to provide teachers with innovative activities and ideas that link their secondary school mathematics curriculum with computer science. By reaching out to high school math teachers, we hope to in turn reach a broader base of students outside of computer science classes. By fostering interest in this broader audience, we can increase the number of students entering undergraduate computer science programs, and reach a larger segment of underrepresented populations.	A novel approach to K-12 CS education: linking mathematics and computer science	NA:NA:NA	2018
Paolo A. G. Sivilotti:Stacey A. Laugel	A common approach for introducing computer science to middle school students is to teach them a simple yet engaging programming language A different approach is to teach them some advanced topic independent of any particular language or syntax We describe a 3-hour workshop module designed to do both This module has been piloted with a group of thirty 8th grade girls. It uses the Scratch programming language to develop the advanced software engineering concepts of specifications, refinement, and composition After this module, students were enthusiastic about continuing to program in Scratch independently and also felt they learned something about computer science as a discipline.	Scratching the surface of advanced topics in software engineering: a workshop module for middle school students	NA:NA	2018
Richard E. Ladner:Tammy VanDeGrift	In this hands-on special session, attendees will learn about and use a Game of Life cellular automata framework (Java) to assist with outreach activities. Using the framework, students with no prior programming experience can create interesting behaviors within thirty minutes. The special session leaders have successfully used this approach for thirteen years in a one-week summer workshop for disabled high school students. The SIGCSE special session will include an introduction to the framework and keys to its success as an outreach activity, followed by participants solving, programming, and proposing specific problems. Attendees will be equipped to guide Game of Life outreach activities at their own outreach events.	The game of life: an outreach model for high school students with disabilities	NA:NA	2018
Ursula Wolz:John Maloney:Sarah Monisha Pulimood	NA	'scratch' your way to introductory cs	NA:NA:NA	2018
Kelvin Sung:Michael Panitz:Scott Wallace:Ruth Anderson:John Nordlinger	We have designed and implemented game-themed programming assignment modules targeted specifically for adoption in existing introductory programming classes. These assignments are self-contained, so that faculty members with no background in graphics or gaming can selectively pick and choose a subset to combine with their own assignments in existing classes. This paper begins with a survey of previous results. Based on this survey, the paper summarizes the important considerations when designing materials for elective adoption. The paper then describes our design, implementation, and assessment efforts. Our result is a road map that guides faculty members in experimenting with game-themed programming assignments by incrementally adopting/customizing suitable materials for their classes.	Game-themed programming assignments: the faculty perspective	NA:NA:NA:NA:NA	2018
Alexander Repenning:Andri Ioannidou	Game development is quickly gaining popularity in introductory programming courses. Motivational and educational aspects of game development are hard to balance and often sacrifice principled educational goals. We are employing the notion of scalable game design as an approach to broaden participation by shifting the pedagogical focus from specific programming to more general design comprehension. Scalable game design combines the Flow psychological model, the FIT competency framework and the AgentSheets rapid game prototyping environment. The scalable aspect of our approach has allowed us to teach game design in a broad variety of contexts with students ranging from elementary school to CS graduate students, with projects ranging from simple Frogger-like to sophisticated Sims-like games, and with diverse cultures from the USA, Europe and Asia.	Broadening participation through scalable game design	NA:NA	2018
Daniel Frost	Ucigame (pronounced OO-see-GAH-me) is a Java package that supports the programming of 2D sprite-based computer games. Designed for novice programmers, it enables students in an introductory class to write computer games that have animated sprites, music and sound effects, and event-driven keyboard and mouse handling. Ucigame has also been used successfully in a senior-level class for experienced programmers.	Ucigame, a java library for games	NA	2018
Mark W. Bailey:Clark L. Coleman:Jack W. Davidson	Computer science faculty must attract and retain students by offering innovative courses that spark student interest, yet still teach core, computer science concepts. These efforts have become particularly important as computer science enrollments have declined, thus increasing concerns for attracting and retaining students. We describe an innovative course that leverages students' interest in computer security issues to attract and retain technically-oriented students. Our initial vision was to offer a course covering computer viruses - a subject that even a novice computer user has some familiarity. To avoid the controversy associated with teaching students how to write malicious software, we focused the course on techniques for defending against viruses, so we named the course Defense Against the Dark Arts. In teaching the course, we have found the subject matter provides an engaging way to introduce and reinforce many important computer science concepts that other courses often cover, most particularly, the traditional compiler course. We have taught the course three times at two separate institutions, with a third school soon to follow. The course has been well received by students - completely filling each semester with enrollments that are four to five times greater than the compiler course. Furthermore, student surveys indicate that the course raises students' awareness of computer security while introducing students to important program translation and analysis concepts.	Defense against the dark arts	NA:NA:NA	2018
Blair Taylor:Shiva Azadegan	In response to the national computer security crisis, colleges and universities have developed security tracks and specialized security courses. While security tracks are effective at producing security experts, they only reach a small subset of students and occur after students have established a foundation of coding techniques. Most undergraduate computing students learn programming and design with little regard to security issues. To complement our security track and reach all computing students at the beginning of their studies, we piloted security integration across sections of CS0 and CS1, using a series of security laboratory modules. Preliminary results show increased security knowledge in the security-targeted sections. This paper describes the details and results of this pilot, which serves as a model for further integration throughout the CS curriculum.	Moving beyond security tracks: integrating security in cs0 and cs1	NA:NA	2018
Alasdair McAndrew	Cryptography has become an important topic in undergraduate curricula in mathematics and computer science, not just for its intrinsic interest---``about the most fun you can have with mathematics''\cite{ferg04, but for its current standing as the basis for almost all computer security. From wireless networking to secure email to password protection, cryptographic methods are used to secure information, to protect users, and to protect data. At Victoria University, cryptography has been taught as part of a mathematics and computer science degree for several years. The students all have had at least a year of tertiary mathematics, and some exposure to a computer algebra system (Maple). However, the cost of Maple, and the current licensing agreement, means that students are unable to experiment with the software away from the computer laboratories at the University. For this reason we have decided to investigate the use of open-source computer algebra systems Maxima and Axiom. Although not as full-featured and powerful as the commercial systems Maple and Mathematica, we show they are in fact admirably suited for a subject such as cryptography. In some ways Maxima and Axiom even surpass Maple and Mathematica. Student response to the introduction of these systems has been very positive.	Teaching cryptography with open-source software	NA	2018
Steven Huss-Lederman:Donald Chinn:James Skrentny	In this special session, participants will learn how to use Peer-Led Team Learning (PLTL) effectively in computer science courses. This technique has been successful in reducing drop rates and increasing satisfaction among students. Therefore, it holds promise as a way to boost sagging computer science enrollments in general, and to increase participation of under-represented groups in particular. The goal of the session is to give participants practical information and hands-on experience.	Serious fun: peer-led team learning in CS	NA:NA:NA	2018
Kate Sanders:Jonas Boustedt:Anna Eckerdal:Robert McCartney:Jan Erik Mostr√∂m:Lynda Thomas:Carol Zander	In this paper, we present the results of an experiment in which we sought to elicit students' understanding of object-oriented (OO) concepts using concept maps. Our analysis confirmed earlier research indicating that students do not have a firm grasp on the distinction between "class" and "instance." Unlike earlier research, we found that our students generally connect classes with both data and behavior. Students rarely included any mention of the hardware/software context of programs, their users, or their real-world domains. Students do mention inheritance, but not encapsulation or abstraction. And the picture they draw of OO is a static one: we found nothing that could be construed as referring to interaction among objects in a program. We then discuss the implications for teaching introductory OO programming.	Student understanding of object-oriented programming as expressed in concept maps	NA:NA:NA:NA:NA:NA:NA	2018
Sarnath Ramnath:Brahma Dathan	Object-Oriented Analysis and Design has established itself as an integral and critically vital part of the software development process. In this paper, we describe an integrated approach to teaching this subject so that it covers vital components of this vast field: analysis, object-oriented design principles such as the Liskov Substitution Principle, the design process, which shows how and where the rules are applied, modeling, design and architectural patterns, language features, and refactoring. The course has evolved over the past 10 years to one that revolves around three major case studies. This evolution has resulted in a course that covers all important aspects of OOAD in a manner that emphasizes their inter-relatedness and hence their relevance to overall design process. Feedback suggests that this approach has improved students' understanding of the OOAD concepts.	Evolving an integrated curriculum for object-oriented analysis and design	NA:NA	2018
Linxiao Ma:John D. Ferguson:Marc Roper:Isla Ross:Murray Wood	Recent research has found that many novice programmers often hold non-viable mental models of basic programming concepts such as assignment and object reference, which can limit their potential to develop programming skills. This paper proposes a constructivist-based teaching model that integrates cognitive conflict and program visualisation with the aim of supporting novice programmers in the formulation of appropriate mental models. The results of an initial empirical study produced three findings of note. Firstly, a teaching model based on either visualisation alone or cognitive conflict integrated with visualisation can help students develop viable models of value assignment. Secondly, there was evidence to suggest that cognitive conflict integrated with visualisation outperformed visualisation alone in helping students develop viable models of the more challenging concept of object reference assignment. And thirdly, there was evidence of an improvement in students' understanding of value and object reference assignment using the teaching model based on visualisation and cognitive conflict.	Using cognitive conflict and visualisation to improve mental models held by novice programmers	NA:NA:NA:NA:NA	2018
Michael Buckley:John Nordlinger:Devika Subramanian	In this paper, we introduce socially relevant computing as a new way to reinvigorate interest in computer science. Socially relevant computing centers on the use of computation to solve problems that students are most passionate about. It draws on both the solipsistic and altruistic side of the current generation of students. It presents computer science as a cutting-edge technological discipline that empowers them to solve problems of personal interest (socially relevant with a little s), as well as problems that are important to society at large (socially relevant with a capital s). We believe that socially relevant computing offers a vision of computer science that has the potential to improve the quantity, quality and diversity of students in our discipline. We describe preliminary results from two on-going curricular experiments at SUNY Buffalo and at Rice University that implement our vision of socially relevant computing.	Socially relevant computing	NA:NA:NA	2018
Christopher H. Brooks	This paper describes Community Connections, an ongoing service-learning project at the University of San Francisco aimed at bridging the digital divide. We discuss Community Connections' work both in San Francisco and in Peru, the advantages and learning outcomes of incorporating service-learning into a traditional computer science curriculum, outline some of the pitfalls and challenges in implementing this program, and provide advice for implementing technology-oriented service-learning programs at other institutions based on our experiences.	Community connections: lessons learned developing and maintaining a computer science service-learning program	NA	2018
Leigh Ann Sudol	This paper describes an experiment involving incorporating reading assignments into an introductory programming class at the university level. Results indicate that assignments of this type help students make connections between the concepts they are studying, and computer science in general, with their everyday lives.	Forging connections between life and class using reading assignments: a case study	NA	2018
Joanna Goode	In this paper, I describe features of computer science programs which have successfully attracted underrepresented students to study CS. Drawing from my own teaching experiences, research, and teacher education work; I provide strategies which have diversified K-12 CS courses. The paper also points out how many of these features rely on committed partnerships between schools, school districts, universities, and the CS industry.	Increasing diversity in k-12 computer science: strategies from the field	NA	2018
John H. Maloney:Kylie Peppler:Yasmin Kafai:Mitchel Resnick:Natalie Rusk	This paper describes Scratch, a visual, block-based programming language designed to facilitate media manipulation for novice programmers. We report on the Scratch programming experiences of urban youth ages 8-18 at a Computer Clubhouse 'an after school center' over an 18-month period. Our analyses of 536 Scratch projects collected during this time documents the learning of key programming concepts even in the absence of instructional interventions or experienced mentors. We discuss the motivations of urban youth who choose to program in Scratch rather than using one of the many other software packages available to them and the implications for introducing programming at after school settings in underserved communities.	Programming by choice: urban youth learning programming with scratch	NA:NA:NA:NA:NA	2018
Jim Owens:Jeanna Matthews	This paper describes CyberCivics, a novel approach to computer science outreach that integrates hands-on computing experiences with the study of contemporary social and political issues. We provide details of one such curriculum, focused on electronic voting, that we used with a high school AP Government course in Spring 2007. We describe our experience with this curriculum and how it enabled us to reach a larger, more diverse and more academically prepared group of students than prior outreach efforts targeted directly at computing courses. We also suggest a number of alternative approaches to outreach based on the CyberCivics idea.	Cybercivics: a novel approach to reaching k-12 students with the social relevance of computer science	NA:NA	2018
Lenore Blum:Thomas J. Cortina:Ed Lazowska:Joe Wise	NA	The expansion of CS4HS: an outreach program for high school teachers	NA:NA:NA:NA	2018
Edward F. Gehringer:Lillian Cassel:Katherine Deibel:William Joel	NA	Wikis: collaborative learning for cs education	NA:NA:NA:NA	2018
Jens Ma he:Amy Apon:Thomas Feilhauer:Barry Wilkinson	In 2003, MIT Technology Review listed Grid computing as one of 'Ten Emerging Technologies That Will Change the World' [5]. Five years later, is Grid computing ready for the undergraduate classroom? In this panel, a group of educators share their experiences in teaching Grid computing over the past several years and in various settings, and discuss how the subject materials should be developed for the future. Key points under discussion include the place in the undergraduate curriculum, the role of programming exercises, bottom-up versus top-down approaches, and the necessary Grid computing platform. This panel will be of interest to those who teach the subject, and those who wish to introduce Grid computing into their programs. It will also interest those who do not want to offer a full Grid computing course but may wish to introduce Grid computing into existing distributed systems, networking, or parallel programming courses.	Grid computing at the undergraduate level: can we do it?	NA:NA:NA:NA	2018
Nathan R. Sturtevant:H. James Hoover:Jonathan Schaeffer:Sean Gouglas:Michael H. Bowling:Finnegan Southey:Matthew Bouchard:Ghassan Zabaneh	Computer games are a multi-billion dollar industry and have become an important part of our private and social lives. It is only natural, then, that the technology used to create games should become part of a computing science curriculum. However, game development is more than a massive programming endeavor. Today's games are largely about generating content within multidisciplinary teams. CMPUT 250 is a new computing science course at the University of Alberta that emphasizes creating games in multidisciplinary teams. This paper describes our experiences with the course, emphasizing the issues of multidisciplinary interactions: teaching, teamwork, and evaluation.	Multidisciplinary students and instructors: a second-year games course	NA:NA:NA:NA:NA:NA:NA:NA	2018
Carol Spradling:Jody Strauch:Craig Warner	In this paper, we describe a new interdisciplinary Bachelor of Science degree in Interactive Digital Media at Northwest Missouri State University, developed and maintained by three departments, Art, Computer Science/Information Systems and Mass Communication. The majors share a common core of courses taught by the three departments with each having its own concentration of Visual Imaging, Computer Science Programming and New Media, respectively. This paper describes the process utilized to develop the major, the curriculum, some observations and the process to maintain the major.	An interdisciplinary major emphasizing multimedia	NA:NA:NA	2018
Christopher D. Hundhausen:N Hari Narayanan:Martha E. Crosby	While the demand for college graduates with computing skills continues to rise, such skills no longer equate to mere programming skills. Modern day computing jobs demand design, communication, and collaborative work skills as well. Since traditional instructional methods in computing education tend to focus on programming skills, we believe that a fundamental rethinking of computing education is in order. We are exploring a new "studio-based" pedagogy that actively engages undergraduate students in collaborative, design-oriented learning. Adapted from architectural education, the studio-based instructional model emphasizes learning activities in which students (a) construct personalized solutions to assigned computing problems, and (b) present solutions to their instructors and peers for feedback and discussion within the context of "design crits." We describe and motivate the studio-based approach, review previous efforts to apply it to computer science education, and propose an agenda for multi-institutional research into the design and impact of studio-based instructional models. We invite educators to participate in a community of research and practice to advance studio-based learning in computing education.	Exploring studio-based instructional models for computing education	NA:NA:NA	2018
J. McGrath Cohoon:Zhen Wu:Luo Luo	The research reported here confirms and deepens our understanding of factors that affect women's confidence in their ability to complete a computer science or computer engineering (CSE) doctoral degree. Analysis of data from a longitudinal study of women participating in the Computing Research Association's Graduate Cohort for Women identifies the conditions or experiences that women perceive as influential. More importantly, we found that women who are not confident in their ability to complete their programs are about four times more likely to think about leaving CSE than those who begin confidently.	Will they stay or will they go?	NA:NA:NA	2018
Maureen Biggers:Anne Brauer:Tuba Yilmaz	Students who develop a strong interest in another field can hardly be fair target for retention efforts. There are others, however, who might do very well in this field but who leave computer science because of misunderstandings about and a negative experience in this academic major. Retention literature suggests and provides numerous examples of initiatives that improve student retention. To determine how best to impact student retention in your computer science department, a comprehensive understanding of the student experience of your major is essential. Not only is it important to know why students leave your major, but an understanding of why they stay can be useful in developing high impact initiatives. The current study involves a comparative examination of students who graduated from the computer science (CS) major at Georgia Institute of Technology in Atlanta, Georgia (Stayers) with students who chose to leave the major (Leavers). Specifically, perceptions and experiences of computer science as a field in general and the climate of the major were studied. Comparative data collected provided insights into reasons why they entered into the major, about belief of adequate preparation and confidence going into the major, definitions of CS and other related factors. Results were analyzed to identify potential target areas and concrete implementation strategies are suggested for improved retention in the computer science major at this institution.	Student perceptions of computer science: a retention study comparing graduating seniors with cs leavers	NA:NA:NA	2018
Antonio M. Lopez, Jr.:Kun Zhang:Frederick G. Lopez	Worldwide, there is substantial evidence that cultural contexts may either support or hinder the number of women versus men participating in computing. There is also evidence that certain computing disciplines have more appeal to women than others. Hence research on any computing gender gap should be specific to a culture and a computing discipline. In the United States (US) a popular belief is that Computer Science (CS) has a decidedly 'masculine culture'. This paper reports on research that investigates this perception, comparing CS undergraduates to undergraduates in non-computing disciplines (NCD). The data were collected in a nationwide purposeful sampling of US citizens attending Historically Black Colleges and Universities (HBCUs) and Predominantly White Institutions (PWIs) with an ethnic compositional focus on African Americans and Caucasians. The paper describes a survey scale developed in the US to characterize a person's gender role as feminine, masculine, or androgynous. The data were analyzed using statistical and data mining techniques. Surprisingly, CS students were found to be more androgynous than masculine.	Cultural representations of gender among u. s. computer science undergraduates: statistical and data mining results	NA:NA:NA	2018
Tanya L. Crenshaw:Erin Wolf Chambers:Heather Metcalf	Computer science is seeing a decline in enrollment at all levels of education. One key strategy for reversing this decline is to improve methods of student retention. This paper, based on a 10-month case study at the Department of Computer Science at the University of Illinois at Urbana-Champaign, examines two aspects of student retention at both the graduate and undergraduate levels: community identity and community relationships. Our data shows that students feel isolated from each other, faculty, and members of the greater computer science community. Given our findings, we highlight existing programs and propose new programs which improve student-community interactions. While the lessons learned might not apply at every institution, they constitute a valuable case study for improving conditions for students at large research universities.	A case study of retention practices at the University of Illinois at Urbana-Champaign	NA:NA:NA	2018
Beth Simon:Krista Davis:William G. Griswold:Michael Kelly:Roshni Malani	Classroom note taking tends to be a private activity, hiding a wealth of knowledge in both content and method. With the advent of the web, whose technology and culture seemingly invites everyone to share everything, we are prompted to ask how making note taking a public activity -- noteblogging -- might advance learning. What does a blog about a computer science classroom look like? What supports are needed to enable noteblogging as a form of auxiliary instruction? In this paper we overview the design and use of noteblogging as part of the Ubiquitous Presenter digital classroom system. With NoteBlogger, students with Tablet PCs take handwritten notes digitally on top of the instructor's slides, and their notes are instantly reviewable by other students in class using a web browser. We examine the impact of noteblogging on a CS1 course through interviews with bloggers (to reveal their motivation and understand their choice of content) and blog watchers (to learn when and why they watch). We also analyze the blogs in this CS1 course to identify their educational contribution. We find that noteblogging enables a unique classroom participation model that specifically engages more advanced students. Blog content spans many levels of intellectual engagement, which can support a range of learners in CS1 as well as perhaps model for them various levels of reflection.	Noteblogging: taking note taking public	NA:NA:NA:NA:NA	2018
Sam Kamin:Michael Hines:Chad Peiper:Boris Capitanu	We describe a new system for building Tablet PC-based classroom software. The system, called SLICE, is built for extensibility, using a unique "explicit state" model. Applications developed thus far include presentation, classroom interaction, shared code review, and exam grading. The paper presents an overview of the system and describes these four applications. It then explains the extensibility model, showing how users can add new features.	A system for developing tablet pc applications for education	NA:NA:NA:NA	2018
Charlie Wiseman:Ken Wong:Tilman Wolf:Sergey Gorinsky	Virtual laboratories are a potential replacement for standard laboratory facilities. Use of these virtual resources can reduce cost and maintenance overheads for teaching institutions while still ensuring that students have access to real equipment. Previous work indicates that students respond well to such environments, but one important operational aspect has been overlooked. In this work, we consider instructor overhead by comparing the amount of work required to teach courses with and without the use of a virtual laboratory. In particular, we examine two graduate computer networking courses, each taught with the standard software-only approach and then taught later with the Open Network Laboratory. Our data show that the effort required by the instructor to use a virtual laboratory is not much more than in a software-only environment, and that the increased interaction between student and instructor can be beneficial as the student questions are primarily focused on fundamental networking concepts.	Operational experience with a virtual networking laboratory	NA:NA:NA:NA	2018
Jorge Barbosa:Rodrigo Hahn:Solon Rabello:D√©bora Barbosa	The increasing use of mobile devices and the dissemination of wireless networks have stimulated mobile and ubiquitous computing research. In this context, education is being considered one of the main application areas. New pedagogical opportunities are created through the use of location systems to track learners, and through context awareness support. This paper proposes a model to explore these opportunities using location information and context management as learning support tools. This model, called LOCAL, was conceived for small scale learning environments, but can be applied in large-scale as well. The model was implemented and the initial results show its utility to assist the teaching and learning processes.	Local: a model geared towards ubiquitous learning	NA:NA:NA:NA	2018
Joe Hummel:Carl Alphonce:Joe Bergin:Michael Caspersen:Stuart Hansen:James Heliotis:Michael K√∂lling	NA	Nifty objects for CS0 and CS1	NA:NA:NA:NA:NA:NA:NA	2018
Stephanie Ann Ludi:Thomas Reichlmayr	Despite advances in assistive technology, relatively few visually impaired students participate in university-level computing courses. Significant factors in this under representation include lack of relevant precollege preparation, lack of role models, access to resources, and the highly visual nature of modern computing. This paper describes the development of inclusive activities and materials for use in a summer workshop for precollege students with visual impairments. All activities utilized commercial technologies in the areas of robotics and programming using Lego Mindstorms NXT. The workshop activities are designed to provide a foundation in computing that encourages students to pursue computing in high school and beyond. In addition to activity design, initial results and lessons learned from the summer workshop will be presented.	Developing inclusive outreach activities for students with visual impairments	NA:NA	2018
Mary Elaine Califf:Mary M. Goodwin:Jake Brownell	In this paper, we describe some of the challenges of teaching computer science to a visually impaired student along with suggested solutions for these challenges. We include perspectives of both professors and a severely visually impaired student.	Helping him see: guiding a visually impaired student through the computer science curriculum	NA:NA:NA	2018
Jeffrey P. Bigham:Maxwell B. Aller:Jeremy T. Brudvik:Jessica O. Leung:Lindsay A. Yazzolino:Richard E. Ladner	Blind students are an underrepresented group in computer science. In this paper, we describe our experience preparing and leading the computer science track at the National Federation of the Blind Youth Slam. As part of this workshop, fifteen blind high school students created and personalized instant messaging chatbots, a project designed to be completely accessible to blind students. Chatbots enable students to infuse their own personalities into a socially-oriented program that incorporates ideas from artificial intelligence, natural language processing, and web services. We first outline the chatbots project and curriculum, which has wide appeal for all students, and then offer general design principles used to create it that can help ensure the accessibility of future projects. Students created their chatbots using a real programming language and were guided by both blind and sighted mentors. By programming from the start in a supportive environment, our students will gain the confidence to persevere in computer science in the future.	Inspiring blind high school students to pursue computer science with instant messaging chatbots	NA:NA:NA:NA:NA:NA	2018
Katherine Deibel	Inclusive education is the practice of making sure that all students of all abilities have positive learning experiences. The study presented in this paper explores the current state of inclusive practices in computing education by presenting four case studies of students with disabilities taking their first computing courses. Their experiences share many common themes that reveal insights into their college experiences and connect with current theories as to how to achieve inclusive education. New technologies, such as podcasting, for promoting inclusion are also suggested.	Course experiences of computing students with disabilities: four case studies	NA	2018
Carol Taylor:Rose Shumba	The topic of this proposed special session is security education with an emphasis on increasing the number of schools and programs that teach it. We will review the current status of security education as it is taught within the CS discipline including funding, curriculum standards and government programs. We will also address misconceptions people may have regarding teaching security and how these views hinder the development of programs and curriculum. Another area we cover which we feel is critical to increasing participation in security education is resources for teaching security including existing curriculum, expert assistance from Centers of Excellence schools and other resources. The format of the session will consist of both presentation periods with at least half the session devoted to participant question and answer. Session participants will be encouraged to share experiences and common concerns to the benefit of everyone attending.	Security education: a roadmap to the future	NA:NA	2018
Imad Rahal	The new interdisciplinary field of Data Mining emerged in the early 1990s as a response to the profusion of digital data generated in numerous fields such as biology, chemistry, astronomy, advertising, banking and finance, retail market, stock market, and the WWW. In this paper, I describe an undergraduate course in Data Mining offered at the College of Saint Benedict and Saint John's University in Spring of 2007 as a CSCI-317-upper-division "Topics in Computer Science"- course, entitled "Data Intelligence." One of the main objectives of the course was to engage students in experimental computing research through a number of carefully planned research activities resulting in better understanding of the course contents and deeper insights into the challenges faced by the data mining community.	Undergraduate research experiences in data mining	NA	2018
Teresa Dahlberg:Tiffany Barnes:Audrey Rorrer:Eve Powell:Lauren Cairco	Research experiences for undergraduates are considered an effective means for increasing student retention and encouraging undergraduate students to continue on to graduate school. However, managing a cohort of undergraduate researchers, with varying skill levels, can be daunting for faculty advisors. We have developed a program to engage students in research and outreach in visualization, virtual reality, networked robotics, and interactive games. Our program immerses students into the life of a lab, employing a situated learning approach that includes tiered mentoring and collaboration to enable students at all levels to contribute to research. Students work in research teams comprised of other undergraduates, graduate students and faculty, and participate in professional development and social gatherings within the larger cohort. Results from our first two years indicate this approach is manageable and effective for increasing students' ability and desire to conduct research.	Improving retention and graduate recruitment through immersive research experiences for undergraduates	NA:NA:NA:NA:NA	2018
Nick Feamster:Alexander Gray	This paper describes a course we have developed for preparing new Ph.D. students in computer science for a career in research. The course is intended to teach the skills needed for research and independent work, prepare students psychologically and socially for years lying before them, and help them find a good Ph.D. topic by providing principles and examples. In this course, we emphasize and encourage impact through cross-disciplinary research and broader societal outreach. To our knowledge, the course represents a first-of-its-kind systematic introduction to a graduate research career. This paper describes our high-level goals for this curricular initiative, the structure of the course (including lecture components and assignments), and the challenges we faced in developing this course. As we continue to develop this course, which is now in its second year, we hope it will serve as a model "introduction of Ph.D. research" course for other computer science departments.	Can great research be taught?: independent research with cross-disciplinary thinking and broader impact	NA:NA	2018
Raymond Lister:Ilona Box	This paper identifies the most commonly cited conferences, journals and books among the 1398 citations made in the 122 publications of the SIGCSE 2007 proceedings. The SIGCSE 2007 authors cited a very large array of conferences, journals and books, but the majority are only cited within a single paper. There are only a very small set of journals and conferences cited frequently. Most books cited are concerned with technical information or are textbooks. Only 2% of books are concerned with computer science education and 23% with education in general. The picture that emerges from this citation analysis is that the SIGCSE community does not have a substantial core set of educational literature. Also, the epistemology of the SIGCSE community is primarily objectivist, with a focus on content, rather than a constructivist, student-centered focus on learning.	A citation analysis of the sigcse 2007 proceedings	NA:NA	2018
Watts Humphrey:Robert Musson:Rafael Salazar	NA	Preparing students for industry's software engineering needs	NA:NA:NA	2018
Ali Erkan:Diyan Gochev	We outline a Data Structures project that visualizes the operation of depth first search (DFS) and breadth first search (BFS). We use color to illustrate how these two techniques differ as they traverse a search space. We present additional exercises that outline how students can further explore the underlying data structures, algorithmic concepts, and efficiency issues. We also provide a limited amount of student assessment to gauge the effectiveness of our approach.	An image background detection project for a visual exploration of DFS and BFS	NA:NA	2018
K. R. Subramanian:T. Cassen	We present the design and development of a Visual Learning Engine, a tool that can form the basis for interactive development of visually rich teaching and learning modules across multiple disciplines. The engine has three key features that makes it powerful and cross-disciplinary, (1) it is based on a finite state machine model, that supports concepts presented in any defined sequence, (2) instructional modules are designed and generated interactively using graphical interface widgets, facilitating non-programmers to use the system, and (3) ability to simultaneously present concepts and their visual representation that allows for a more intuitive and exploratory learning experience. We demonstrate a prototype of the learning engine by testing it on examples from Computer Science(sorting)algorithms, recursion) and Electrical Engineering (signal manipulations).	A cross-domain visual learning engine for interactive generation of instructional materials	NA:NA	2018
Brett Allenstein:Andrew Yost:Paul Wagner:Joline Morrison	The underlying processes that enable database query execution are fundamental to understanding database management systems. However, these processes are complex and can be difficult to explain and illustrate. To address this problem, we have developed a Java-based query simulation system that enables students to visualize the steps involved in processing DML queries. We performed a field experiment to evaluate the system, and the results suggest that the system improves student comprehension of the query execution process.	A query simulation system to illustrate database query execution	NA:NA:NA:NA	2018
Andrew B. Williams:David S. Touretzky:Ethan J. Tira-Thompson:LaVonne Manning:Chutima Boonthum:Clement S. Allen	A successful collaboration between Spelman College and Carnegie Mellon University led to an NSF-funded Broadening Participation in Computing project to set up robotics education laboratories and introduce undergraduate instruction in cognitive robotics at three other Historically Black Colleges and Universities (HBCUs). We give a brief overview of cognitive robotics and the Tekkotsu software architecture, and describe our experiences teaching computer science students with no previous robotics exposure to program sophisticated mobile robots.	Introducing an experimental cognitive robotics curriculum at historically black colleges and universities	NA:NA:NA:NA:NA:NA	2018
Janice Pearce:Mario Nakazawa	Across the US, plummeting CS enrollments and disappointing student retention have caused serious concern in recent years. Yet, in the Spring of 2007, the Berea College faculty unanimously adopted a CIS major in response to the rise in enrollment in CS0 and retention into CS1. This paper details how using a funnel approach to attract students into the discipline via multiple CS0-level courses resulted in the exception to the trend.	The funnel that grew our cis major in the cs desert	NA:NA	2018
Sami Khuri	In this paper, we describe the bioinformatics track we created to better prepare students for health, medical and life science professions. Our program was motivated by the fact that bioinformatics training is in high demand. Many universities have responded to this demand by creating majors in bioinformatics, while others by creating minors in bioinformatics. Our response was less extreme as we opted for a computer science track in bioinformatics which we describe in this article.	A bioinformatics track in computer science	NA	2018
Gloria Childress Townsend:Lecia Barker:Suzanne Menzel:J. McGrath Cohoon	This paper highlights several viewpoints concerning a small regional conference for women in computing, which is modeled after the successful and well-known Grace Hopper Celebration of Women in Computing. The viewpoints include rationale for the conference, descriptions of the celebration that provide a snapshot which captures the ease of organizing a similar event at other regional sites, additional sources for finding complete information (including a detailed how-to manual) and an account of the assessment of two recent regional celebrations performed by senior researchers at the National Center of Women and Information Technology (NCWIT).	Grace hopper visits the neighborhood	NA:NA:NA:NA	2018
Rita Manco Powell	This paper describes a study of undergraduate women's retention in the first-year of the computer science major at the University of Pennsylvania for the purpose of identifying the underlying issues responsible for attrition. The subsequent steps taken by the faculty to improve women's retention is also discussed.	Improving the persistence of first-year undergraduate women in computer science	NA	2018
Amruth N. Kumar	We examined whether using problem-solving software tutors in Computer Science I can help improve the self-confidence of female students. We analyzed the data collected by five software tutors in spring 2006. We found that 1) the self-confidence of female Computer Science I students before using the software tutors was in many cases lower than that of male students, as has been stated in prior literature; 2) Using problem-solving software tutors improved the self-confidence of female students to be on par with that of male students when female students started with lower prior self-confidence. Since researchers have suggested that self-confidence is one of the factors contributing to the shrinking pipeline, problem-solving software tutors can be used to improve the retention of female students in Computer Science.	The effect of using problem-solving software tutors on the self-confidence of female students	NA	2018
Jonas Boustedt:Robert McCartney:Josh Tenenberg:Scott D. Anderson:Caroline M. Eastman:Daniel D. Garcia:Paul V. Gestwicki:Margaret S. Menzin	We often learn of successful pedagogical experiments, but we seldom hear of the the ones that failed. For this special session we solicited submissions from the SIGCSE membership, selected the best from among these, and will have presentations at the session by the selected authors. Our contributions describe pedagogical approaches that seemed to be good ideas but turned out as failures. Contributors will describe their pedagogical experiment, the rationale for the experiment, evidence of failure, and lessons learned.	It seemed like a good idea at the time	NA:NA:NA:NA:NA:NA:NA:NA	2018
Lillian N. Cassel:Michael Caspersen:Gordon Davies:Renee McCauley:Andrew McGettrick:Art Pyster:Robert Sloan	NA	Curriculum update from the ACM education board: CS2008 and a report on masters degrees	NA:NA:NA:NA:NA:NA:NA	2018
David Janzen:Hossein Saiedian	Coercing new programmers to adopt disciplined development practices such as thorough unit testing is a challenging endeavor. Test-driven development (TDD) has been proposed as a solution to improve both software design and testing. Test-driven learning (TDL) has been proposed as a pedagogical approach for teaching TDD without imposing significant additional instruction time. This research evaluates the effects of students using a test-first (TDD) versus test-last approach in early programming courses, and considers the use of TDL on a limited basis in CS1 and CS2. Software testing, programmer productivity, programmer performance, and programmer opinions are compared between test-first and test-last programming groups. Results from this research indicate that a test-first approach can increase student testing and programmer performance, but that early programmers are very reluctant to adopt a test-first approach, even after having positive experiences using TDD. Further, this research demonstrates that TDL can be applied in CS1/2, but suggests that a more pervasive implementation of TDL may be necessary to motivate and establish disciplined testing practice among early programmers.	Test-driven learning in early programming courses	NA:NA	2018
Matthew Thornton:Stephen H. Edwards:Roy P. Tan:Manuel A. P√©rez-Qui√±ones	Tools like JUnit and its relatives are making software testing reachable even for introductory students. At the same time, however, many introductory computer sciences courses use graphical interfaces as an "attention grabber" for students and as a metaphor for teaching object-oriented programming. Unfortunately, developing software tests for programs that have significant graphical user interfaces is beyond the abilities of typical students (and, for that matter, many educators). This paper describes a framework for combining readily available tools to create an infrastructure for writing tests for Java programs that have graphical user interfaces. These tests are level-appropriate for introductory students and fit in with current approaches in computer science education that incorporate testing in programming assignments. An analysis of data collected during actual student use of the framework in a CS1 course is presented.	Supporting student-written tests of gui programs	NA:NA:NA:NA	2018
Jacques Philippe Sauv√©:Os√≥rio Lopes Abath Neto	In this paper, we report our experience in teaching software development to Computer Science undergraduate students using acceptance test-driven development (ATDD) and the acceptance testing tool EasyAccept. A typical software design course in a Computer Science curriculum has been modified to include project assignments with executable analysis, which gives students more focus on meeting requirements, boosts confidence in the code being written and results in increased software correctness. We evaluate the benefits of the approach and give suggestions on how to cope with its limitations.	Teaching software development with ATDD and easyaccept	NA:NA	2018
Richard E. Ladner:Dan Comden	NA	Computer science for everyone: making your computing classes and departments accessible	NA:NA	2018
